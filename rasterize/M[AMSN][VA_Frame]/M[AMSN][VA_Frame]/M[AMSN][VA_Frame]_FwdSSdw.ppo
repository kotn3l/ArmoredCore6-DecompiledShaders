#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_VA_Frame_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_VA_Frame_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_VA_Frame_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1042;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233 = cbMtdParam._m0[11u].w + TEXCOORD.x;
    float _234 = cbMtdParam._m0[12u].x + TEXCOORD.y;
    vec4 _247 = texture(sampler2D(M_AMSN_VA_Frame_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _233) + cbTextureTilingScale._m0[0u].z, (_234 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _253 = _247.x * cbMtdParam._m0[9u].y;
    float _254 = _247.y * cbMtdParam._m0[9u].z;
    float _255 = _247.z * cbMtdParam._m0[9u].w;
    vec4 _265 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _267 = _265.x;
    bool _274 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _291 = ((_274 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _267)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _267))) - POSITION_1.w) / cbMtdParam._m0[11u].z;
    float _3435 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _293 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
    float _3446 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _294 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
    float _312 = texture(sampler2D(M_AMSN_VA_Frame_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _233) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _234) + cbTextureTilingScale._m0[2u].w)).x + cbMtdParam._m0[11u].y;
    vec4 _324 = texture(sampler2D(M_AMSN_VA_Frame_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _233) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _234) + cbTextureTilingScale._m0[1u].w));
    float _328 = _324.z;
    float _332 = (_324.x * 2.0) + (-1.0);
    float _334 = (_324.y * 2.0) + (-1.0);
    float _335 = dot(vec2(_332, _334), vec2(_332, _334));
    float _3457 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _340 = sqrt(1.0 - (isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0))));
    bool _345 = floatBitsToUint(cbMtdParam._m0[9u]).x != 0u;
    float _362 = fma(_340, _207 * NORMAL.x, fma(_334, _214 * TANGENT.x, (_200 * _193) * _332));
    float _365 = fma(_340, _207 * NORMAL.y, fma(_334, _214 * TANGENT.y, (_200 * _194) * _332));
    float _368 = fma(_340, _207 * NORMAL.z, fma(_334, _214 * TANGENT.z, (_200 * _195) * _332));
    float _372 = inversesqrt(dot(vec3(_362, _365, _368), vec3(_362, _365, _368)));
    float _373 = _372 * _362;
    float _374 = _372 * _365;
    float _375 = _372 * _368;
    float _3468 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _376 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
    float _3479 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _377 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
    float _3490 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _378 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
    float _3501 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _379 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
    float _3512 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _380 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
    float _3523 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _381 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
    float _386 = _274 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _427 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _437 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _427);
    float _438 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _427);
    float _439 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _427);
    float _443 = inversesqrt(dot(vec3(_437, _438, _439), vec3(_437, _438, _439)));
    float _444 = _437 * _443;
    float _445 = _438 * _443;
    float _446 = _439 * _443;
    float _451 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _452 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _454 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _456 = _454.w;
    float _477 = fma(_375, cbSceneParam._m0[5u].z, fma(_374, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _373));
    float _480 = fma(_375, cbSceneParam._m0[6u].z, fma(_374, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _373));
    float _483 = fma(_375, cbSceneParam._m0[7u].z, fma(_374, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _373));
    vec4 _485 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _487 = _485.x;
    float _499 = (((_485.y - _377) + (_485.w * _377)) * cbMtdParam._m0[3u].x) + _377;
    float _516 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_487 * _487)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _525 = (((cbMatDynParam._m0[15u].x - _381) * cbMatDynParam._m0[15u].w) * _516) + _381;
    float _534 = ((_516 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _499)) + _499;
    uint _558 = uint(roundEven(NORMAL.w)) * 13u;
    uint _560 = _558 + 9u;
    uint _561 = _560 + uint(cbMatDynParam._m0[0u].w);
    float _567 = (cbMtdParam._m0[0u].x * _378) * cbInstanceData._m0[_561].x;
    float _568 = (cbMtdParam._m0[0u].y * _379) * cbInstanceData._m0[_561].y;
    float _569 = (cbMtdParam._m0[0u].z * _380) * cbInstanceData._m0[_561].z;
    float _3534 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _570 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
    float _3545 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _571 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
    float _3556 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _572 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
    vec4 _573 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _578 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _589 = (((_578.x - _525) + (_578.w * _525)) * cbMtdParam._m0[3u].x) + _525;
    float _602 = (cbMtdParam._m0[3u].x * (((_570 * _456) - _570) + _573.x)) + _570;
    float _603 = (cbMtdParam._m0[3u].x * (((_571 * _456) - _571) + _573.y)) + _571;
    float _604 = (cbMtdParam._m0[3u].x * (((_572 * _456) - _572) + _573.z)) + _572;
    vec4 _605 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _618 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_525 * (_378 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_525 * (_379 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_525 * (_380 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _605.z;
    float _622 = _618 * cbMatDynParam._m0[13u].w;
    float _632 = (_622 * (cbMatDynParam._m0[13u].x - _602)) + _602;
    float _633 = (_622 * (cbMatDynParam._m0[13u].y - _603)) + _603;
    float _634 = (_622 * (cbMatDynParam._m0[13u].z - _604)) + _604;
    float _642 = ((_618 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _589)) + _589;
    float _643 = 1.0 - _642;
    float _644 = _643 * _632;
    float _645 = _643 * _633;
    float _646 = _643 * _634;
    float _650 = (_632 + (-0.039999999105930328369140625)) * _642;
    float _651 = (_633 + (-0.039999999105930328369140625)) * _642;
    float _652 = (_634 + (-0.039999999105930328369140625)) * _642;
    float _653 = _650 + 0.039999999105930328369140625;
    float _654 = _651 + 0.039999999105930328369140625;
    float _655 = _652 + 0.039999999105930328369140625;
    vec4 _664 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _451, cbSceneParam._m0[86u].y * _452));
    float _667 = _664.x * TEXCOORD_5.z;
    float _668 = dot(vec3(_373, _374, _375), vec3(_444, _445, _446));
    float _671 = _668 * 2.0;
    float _675 = (_671 * _373) - _444;
    float _676 = (_671 * _374) - _445;
    float _677 = (_671 * _375) - _446;
    float _681 = abs(dot(vec3(_444, _445, _446), vec3(_373, _374, _375)));
    float _3567 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _683 = sqrt(_534);
    float _696 = exp2((_683 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_683 * 3.0));
    float _702 = (1.0 - _696) * ((_683 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _703 = _696 * _683;
    float _731 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _735 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1041;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _766 = fma(_739, cbModelParam._m0[26u].z, fma(_735, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _731));
        float _770 = fma(_739, cbModelParam._m0[27u].z, fma(_735, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _731));
        float _774 = fma(_739, cbModelParam._m0[28u].z, fma(_735, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _731));
        float _799 = _731 + _373;
        float _800 = _735 + _374;
        float _801 = _739 + _375;
        float _811 = fma(_801, cbModelParam._m0[26u].z, fma(_800, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _799)) - _766;
        float _812 = fma(_801, cbModelParam._m0[27u].z, fma(_800, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _799)) - _770;
        float _813 = fma(_801, cbModelParam._m0[28u].z, fma(_800, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _799)) - _774;
        float _817 = inversesqrt(dot(vec3(_811, _812, _813), vec3(_811, _812, _813)));
        float _830 = ((_817 * _811) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_766 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _831 = ((_817 * _812) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_770 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _832 = ((_817 * _813) / cbModelParam._m0[34u].z) + ((((((_774 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _835 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        float _869 = exp2((_835.w + (-0.5)) * 20.0) * 2.0;
        float _870 = _869 * (_835.x + (-0.5));
        float _871 = _869 * (_835.y + (-0.5));
        float _872 = _869 * (_835.z + (-0.5));
        float _879 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _880 = _879 * (_842.x + (-0.5));
        float _881 = _879 * (_842.y + (-0.5));
        float _882 = _879 * (_842.z + (-0.5));
        float _889 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_849.x + (-0.5));
        float _891 = _889 * (_849.y + (-0.5));
        float _892 = _889 * (_849.z + (-0.5));
        float _899 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _900 = _899 * (_856.x + (-0.5));
        float _901 = _899 * (_856.y + (-0.5));
        float _902 = _899 * (_856.z + (-0.5));
        float _903 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _906 = _870 * 0.5;
        float _907 = _880 * 0.5;
        float _908 = _890 * 0.5;
        float _909 = dot(vec3(_906, _907, _908), vec3(_906, _907, _908));
        float _914 = (_909 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_909);
        float _923 = (dot(vec3(_373, _374, _375), vec3(_914 * _906, _914 * _907, _914 * _908)) + 1.0) * 0.5;
        float _3593 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _933 = sqrt(((_907 * _907) + (_906 * _906)) + (_908 * _908)) / (_903 + 9.9999997473787516355514526367188e-06);
        float _3604 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _935 = _934 * 2.0;
        float _939 = (1.0 - _934) / (_934 + 1.0);
        float _3615 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _949 = ((((1.0 - _940) * (_935 + 2.0)) * exp2(log2(isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) * (_935 + 1.0))) + _940) * _903;
        float _950 = _871 * 0.5;
        float _951 = _881 * 0.5;
        float _952 = _891 * 0.5;
        float _953 = dot(vec3(_950, _951, _952), vec3(_950, _951, _952));
        float _958 = (_953 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_953);
        float _966 = (dot(vec3(_373, _374, _375), vec3(_958 * _950, _958 * _951, _958 * _952)) + 1.0) * 0.5;
        float _3626 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _975 = sqrt(((_951 * _951) + (_950 * _950)) + (_952 * _952)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _3637 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _977 = _976 * 2.0;
        float _981 = (1.0 - _976) / (_976 + 1.0);
        float _3648 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _991 = ((((1.0 - _982) * (_977 + 2.0)) * exp2(log2(isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * (_977 + 1.0))) + _982) * _904;
        float _992 = _872 * 0.5;
        float _993 = _882 * 0.5;
        float _994 = _892 * 0.5;
        float _995 = dot(vec3(_992, _993, _994), vec3(_992, _993, _994));
        float _1000 = (_995 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_995);
        float _1008 = (dot(vec3(_373, _374, _375), vec3(_1000 * _992, _1000 * _993, _1000 * _994)) + 1.0) * 0.5;
        float _3659 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1017 = sqrt(((_993 * _993) + (_992 * _992)) + (_994 * _994)) / (_905 + 9.9999997473787516355514526367188e-06);
        float _3670 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _1019 = _1018 * 2.0;
        float _1023 = (1.0 - _1018) / (_1018 + 1.0);
        float _3681 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1033 = ((((1.0 - _1024) * (_1019 + 2.0)) * exp2(log2(isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * (_1019 + 1.0))) + _1024) * _905;
        _1041 = _872;
        _1043 = _871;
        _1044 = _870;
        _1045 = _882;
        _1046 = _881;
        _1047 = _880;
        _1048 = _892;
        _1049 = _891;
        _1050 = _890;
        _1051 = _905;
        _1052 = _904;
        _1053 = _903;
        _1054 = cbModelParam._m0[36u].z * (isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0)));
        _1055 = cbModelParam._m0[36u].z * (isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0)));
        _1056 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)));
    }
    else
    {
        _1041 = _1042;
        _1043 = _1042;
        _1044 = _1042;
        _1045 = _1042;
        _1046 = _1042;
        _1047 = _1042;
        _1048 = _1042;
        _1049 = _1042;
        _1050 = _1042;
        _1051 = _1042;
        _1052 = _1042;
        _1053 = _1042;
        _1054 = 0.0;
        _1055 = 0.0;
        _1056 = 0.0;
    }
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1082 = fma(_739, cbModelParam._m0[30u].z, fma(_735, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _731));
        float _1086 = fma(_739, cbModelParam._m0[31u].z, fma(_735, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _731));
        float _1090 = fma(_739, cbModelParam._m0[32u].z, fma(_735, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _731));
        float _1113 = _731 + _373;
        float _1114 = _735 + _374;
        float _1115 = _739 + _375;
        float _1125 = fma(_1115, cbModelParam._m0[30u].z, fma(_1114, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1113)) - _1082;
        float _1126 = fma(_1115, cbModelParam._m0[31u].z, fma(_1114, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1113)) - _1086;
        float _1127 = fma(_1115, cbModelParam._m0[32u].z, fma(_1114, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1113)) - _1090;
        float _1131 = inversesqrt(dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127)));
        float _1144 = ((_1131 * _1125) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1082 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1145 = ((_1131 * _1126) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1086 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1146 = ((_1131 * _1127) / cbModelParam._m0[35u].z) + ((((((_1090 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        float _1181 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1148.x + (-0.5));
        float _1183 = _1181 * (_1148.y + (-0.5));
        float _1184 = _1181 * (_1148.z + (-0.5));
        float _1191 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1155.x + (-0.5));
        float _1193 = _1191 * (_1155.y + (-0.5));
        float _1194 = _1191 * (_1155.z + (-0.5));
        float _1201 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1162.x + (-0.5));
        float _1203 = _1201 * (_1162.y + (-0.5));
        float _1204 = _1201 * (_1162.z + (-0.5));
        float _1211 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1169.x + (-0.5));
        float _1213 = _1211 * (_1169.y + (-0.5));
        float _1214 = _1211 * (_1169.z + (-0.5));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = _1182 * 0.5;
        float _1219 = _1192 * 0.5;
        float _1220 = _1202 * 0.5;
        float _1221 = dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220));
        float _1226 = (_1221 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1221);
        float _1234 = (dot(vec3(_373, _374, _375), vec3(_1226 * _1218, _1226 * _1219, _1226 * _1220)) + 1.0) * 0.5;
        float _3722 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1243 = sqrt(((_1219 * _1219) + (_1218 * _1218)) + (_1220 * _1220)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _3733 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1245 = _1244 * 2.0;
        float _1249 = (1.0 - _1244) / (_1244 + 1.0);
        float _3744 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1259 = ((((1.0 - _1250) * (_1245 + 2.0)) * exp2(log2(isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_1245 + 1.0))) + _1250) * _1215;
        float _1260 = _1183 * 0.5;
        float _1261 = _1193 * 0.5;
        float _1262 = _1203 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1276 = (dot(vec3(_373, _374, _375), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1285 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1287 = _1286 * 2.0;
        float _1291 = (1.0 - _1286) / (_1286 + 1.0);
        float _3777 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1301 = ((((1.0 - _1292) * (_1287 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1287 + 1.0))) + _1292) * _1216;
        float _1302 = _1184 * 0.5;
        float _1303 = _1194 * 0.5;
        float _1304 = _1204 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1318 = (dot(vec3(_373, _374, _375), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1327 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _3810 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_1329 + 1.0))) + _1334) * _1217;
        _1351 = _1184;
        _1352 = _1183;
        _1353 = _1182;
        _1354 = _1194;
        _1355 = _1193;
        _1356 = _1192;
        _1357 = _1204;
        _1358 = _1203;
        _1359 = _1202;
        _1360 = _1217;
        _1361 = _1216;
        _1362 = _1215;
        _1363 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)));
        _1364 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)));
        _1365 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
    }
    else
    {
        _1351 = _1042;
        _1352 = _1042;
        _1353 = _1042;
        _1354 = _1042;
        _1355 = _1042;
        _1356 = _1042;
        _1357 = _1042;
        _1358 = _1042;
        _1359 = _1042;
        _1360 = _1042;
        _1361 = _1042;
        _1362 = _1042;
        _1363 = 0.0;
        _1364 = 0.0;
        _1365 = 0.0;
    }
    float _1375 = (cbModelParam._m0[1u].x * (_1363 - _1054)) + _1054;
    float _1376 = (cbModelParam._m0[1u].x * (_1364 - _1055)) + _1055;
    float _1377 = (cbModelParam._m0[1u].x * (_1365 - _1056)) + _1056;
    float _1398 = fma(_1377, cbSceneParam._m0[89u].z, fma(_1376, cbSceneParam._m0[89u].y, _1375 * cbSceneParam._m0[89u].x));
    float _1401 = fma(_1377, cbSceneParam._m0[90u].z, fma(_1376, cbSceneParam._m0[90u].y, _1375 * cbSceneParam._m0[90u].x));
    float _1404 = fma(_1377, cbSceneParam._m0[91u].z, fma(_1376, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1375));
    float _1419 = _675 * 0.5;
    float _1420 = _676 * 0.5;
    float _1421 = _677 * 0.5;
    float _1422 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1353, _1356, _1359, _1362));
    float _1425 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1352, _1355, _1358, _1361));
    float _1428 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1351, _1354, _1357, _1360));
    float _1459;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1435 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1041, _1045, _1048, _1051));
        float _1439 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1043, _1046, _1049, _1052));
        float _1443 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1044, _1047, _1050, _1053));
        float _1450 = dot(vec4(cbModelParam._m0[39u]), vec4(_1419, _1420, _1421, 1.0));
        _1459 = dot(vec3(isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)), isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)), isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1450) ? 0.0 : (isnan(0.0) ? _1450 : max(0.0, _1450))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1459 = 1.0;
    }
    float _1470;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1461 = dot(vec4(cbModelParam._m0[40u]), vec4(_1419, _1420, _1421, 1.0));
        _1470 = dot(vec3(isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)), isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)), isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1461) ? 0.0 : (isnan(0.0) ? _1461 : max(0.0, _1461))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1470 = 1.0;
    }
    float _1474 = (_1470 * cbModelParam._m0[1u].x) + (_1459 * (1.0 - cbModelParam._m0[1u].x));
    float _1484 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _534);
    float _1485 = isnan(_1484) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1484 : min(cbModelParam._m0[25u].z, _1484));
    float _1565;
    float _1567;
    float _1569;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1532 = fma(_739, cbModelParam._m0[13u].z, fma(_735, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _731)) + cbModelParam._m0[13u].w;
        float _1536 = fma(_739, cbModelParam._m0[14u].z, fma(_735, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _731)) + cbModelParam._m0[14u].w;
        float _1540 = fma(_739, cbModelParam._m0[15u].z, fma(_735, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _731)) + cbModelParam._m0[15u].w;
        float _1543 = fma(_677, cbModelParam._m0[13u].z, fma(_676, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _675));
        float _1546 = fma(_677, cbModelParam._m0[14u].z, fma(_676, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _675));
        float _1549 = fma(_677, cbModelParam._m0[15u].z, fma(_676, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _675));
        float _1577;
        if (_1543 > 0.0)
        {
            _1577 = abs((1.0 - _1532) / _1543);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1543 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1532 + 1.0) / _1543);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1577 = frontier_phi_14_12_ladder;
        }
        float _1805;
        if (_1546 > 0.0)
        {
            _1805 = abs((1.0 - _1536) / _1546);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1546 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1536 + 1.0) / _1546);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1805 = frontier_phi_23_19_ladder;
        }
        float _2062;
        if (_1549 > 0.0)
        {
            _2062 = abs((1.0 - _1540) / _1549);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1549 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1540 + 1.0) / _1549);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2062 = frontier_phi_35_30_ladder;
        }
        float _2064 = isnan(_1805) ? _1577 : (isnan(_1577) ? _1805 : min(_1577, _1805));
        float _2065 = isnan(_2062) ? _2064 : (isnan(_2064) ? _2062 : min(_2064, _2062));
        float _2069 = (_2065 * _1543) + _1532;
        float _2070 = (_2065 * _1546) + _1536;
        float _2071 = (_2065 * _1549) + _1540;
        float _2072 = _2065 * 9.9999997473787516355514526367188e-05;
        float _2074 = (-1.0) - _2072;
        float _2076 = _2072 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2071 > _2076) || ((_2071 < _2074) || ((_2070 > _2076) || ((_2070 < _2074) || ((_2069 < _2074) || (_2069 > _2076))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2199 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2071, cbModelParam._m0[9u].z, fma(_2070, cbModelParam._m0[9u].y, _2069 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2071, cbModelParam._m0[10u].z, fma(_2070, cbModelParam._m0[10u].y, _2069 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2071, cbModelParam._m0[11u].z, fma(_2070, cbModelParam._m0[11u].y, _2069 * cbModelParam._m0[11u].x))), _1485);
            frontier_phi_13_35_ladder = _2199.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2199.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2199.x * cbModelParam._m0[1u].y;
        }
        _1565 = frontier_phi_13_35_ladder_2;
        _1567 = frontier_phi_13_35_ladder_1;
        _1569 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1553 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_675, _676, _677), _1485);
        _1565 = _1553.x * cbModelParam._m0[1u].y;
        _1567 = _1553.y * cbModelParam._m0[1u].y;
        _1569 = _1553.z * cbModelParam._m0[1u].y;
    }
    float _1573 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _534);
    float _1574 = isnan(_1573) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1573 : min(cbModelParam._m0[25u].w, _1573));
    float _1667;
    float _1669;
    float _1671;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1631 = fma(_739, cbModelParam._m0[21u].z, fma(_735, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _731)) + cbModelParam._m0[21u].w;
        float _1635 = fma(_739, cbModelParam._m0[22u].z, fma(_735, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _731)) + cbModelParam._m0[22u].w;
        float _1639 = fma(_739, cbModelParam._m0[23u].z, fma(_735, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _731)) + cbModelParam._m0[23u].w;
        float _1642 = fma(_677, cbModelParam._m0[21u].z, fma(_676, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _675));
        float _1645 = fma(_677, cbModelParam._m0[22u].z, fma(_676, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _675));
        float _1648 = fma(_677, cbModelParam._m0[23u].z, fma(_676, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _675));
        float _1810;
        if (_1642 > 0.0)
        {
            _1810 = abs((1.0 - _1631) / _1642);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1631 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1810 = frontier_phi_25_21_ladder;
        }
        float _2089;
        if (_1645 > 0.0)
        {
            _2089 = abs((1.0 - _1635) / _1645);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1635 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2089 = frontier_phi_37_32_ladder;
        }
        float _2302;
        if (_1648 > 0.0)
        {
            _2302 = abs((1.0 - _1639) / _1648);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1648 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1639 + 1.0) / _1648);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2302 = frontier_phi_46_43_ladder;
        }
        float _2304 = isnan(_2089) ? _1810 : (isnan(_1810) ? _2089 : min(_1810, _2089));
        float _2305 = isnan(_2302) ? _2304 : (isnan(_2304) ? _2302 : min(_2304, _2302));
        float _2309 = (_2305 * _1642) + _1631;
        float _2310 = (_2305 * _1645) + _1635;
        float _2311 = (_2305 * _1648) + _1639;
        float _2312 = _2305 * 9.9999997473787516355514526367188e-05;
        float _2313 = (-1.0) - _2312;
        float _2315 = _2312 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2311 > _2315) || ((_2311 < _2313) || ((_2310 > _2315) || ((_2310 < _2313) || ((_2309 < _2313) || (_2309 > _2315))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2541 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2311, cbModelParam._m0[17u].z, fma(_2310, cbModelParam._m0[17u].y, _2309 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2311, cbModelParam._m0[18u].z, fma(_2310, cbModelParam._m0[18u].y, _2309 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2311, cbModelParam._m0[19u].z, fma(_2310, cbModelParam._m0[19u].y, _2309 * cbModelParam._m0[19u].x))), _1574);
            frontier_phi_22_46_ladder = _2541.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2541.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2541.x * cbModelParam._m0[1u].z;
        }
        _1667 = frontier_phi_22_46_ladder_2;
        _1669 = frontier_phi_22_46_ladder_1;
        _1671 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1651 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_675, _676, _677), _1574);
        _1667 = _1651.x * cbModelParam._m0[1u].z;
        _1669 = _1651.y * cbModelParam._m0[1u].z;
        _1671 = _1651.z * cbModelParam._m0[1u].z;
    }
    float _1684 = (((_702 * _653) + _703) * _667) * ((cbModelParam._m0[1u].w * (_1667 - _1565)) + _1565);
    float _1686 = (((_702 * _654) + _703) * _667) * ((cbModelParam._m0[1u].w * (_1669 - _1567)) + _1567);
    float _1688 = (((_702 * _655) + _703) * _667) * ((cbModelParam._m0[1u].w * (_1671 - _1569)) + _1569);
    float _1691 = fma(_1688, cbSceneParam._m0[89u].z, fma(_1686, cbSceneParam._m0[89u].y, _1684 * cbSceneParam._m0[89u].x));
    float _1694 = fma(_1688, cbSceneParam._m0[90u].z, fma(_1686, cbSceneParam._m0[90u].y, _1684 * cbSceneParam._m0[90u].x));
    float _1697 = fma(_1688, cbSceneParam._m0[91u].z, fma(_1686, cbSceneParam._m0[91u].y, _1684 * cbSceneParam._m0[91u].x));
    vec4 _1705 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_451, _452));
    float _1707 = _1705.w;
    float _1719 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1707);
    float _1720 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1707);
    float _1721 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1707);
    uvec4 _1725 = floatBitsToUint(cbInstanceData._m0[_558 + 5u]);
    uint _1727 = _1725.x * 14u;
    uint _1728 = _1727 + 13u;
    float _1735 = _667 + (-1.0);
    float _1740 = (cbLight._m0[_1728].x * _1735) + 1.0;
    float _1741 = (cbLight._m0[_1728].y * _1735) + 1.0;
    float _1742 = (cbLight._m0[_1728].z * _1735) + 1.0;
    float _1743 = (cbLight._m0[_1728].w * _1735) + 1.0;
    uint _1744 = _1727 + 5u;
    float _1750 = isnan(1.0) ? _1741 : (isnan(_1741) ? 1.0 : min(_1741, 1.0));
    uint _1754 = _1727 + 4u;
    float _1764 = isnan(1.0) ? _1740 : (isnan(_1740) ? 1.0 : min(_1740, 1.0));
    uint _1768 = _1727 | 1u;
    float _1779 = dot(vec3(cbLight._m0[_1727].xyz), vec3(_373, _374, _375));
    float _1782 = dot(vec3(cbLight._m0[_1768].xyz), vec3(_373, _374, _375));
    float _3946 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
    float _3957 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _1787 = (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * 0.3183098733425140380859375;
    float _1789 = (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * 0.3183098733425140380859375;
    float _1796 = ((cbLight._m0[_1744].x * _1750) * _1789) + (((cbLight._m0[_1754].x * _1719) * _1764) * _1787);
    float _1797 = ((_1750 * cbLight._m0[_1744].y) * _1789) + (((cbLight._m0[_1754].y * _1720) * _1764) * _1787);
    float _1798 = ((_1750 * cbLight._m0[_1744].z) * _1789) + (((cbLight._m0[_1754].z * _1721) * _1764) * _1787);
    uvec4 _1802 = floatBitsToUint(cbLight._m0[_1727 + 12u]);
    bool _1804 = _1802.x == 0u;
    float _1815;
    float _1817;
    float _1819;
    if (_1804)
    {
        _1815 = _1796;
        _1817 = _1797;
        _1819 = _1798;
    }
    else
    {
        uint _1823 = _1727 + 6u;
        float _1839 = (dot(vec3(cbLight._m0[_1727 + 2u].xyz), vec3(_373, _374, _375)) * 0.5) + 0.5;
        float _1840 = _1839 * _1839;
        float _3968 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1841 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1842 = isnan(1.0) ? _1742 : (isnan(_1742) ? 1.0 : min(_1742, 1.0));
        _1815 = (((cbLight._m0[_1823].x * 0.3183098733425140380859375) * _1841) * _1842) + _1796;
        _1817 = (((cbLight._m0[_1823].y * 0.3183098733425140380859375) * _1841) * _1842) + _1797;
        _1819 = (((cbLight._m0[_1823].z * 0.3183098733425140380859375) * _1841) * _1842) + _1798;
    }
    bool _1822 = _1802.y == 0u;
    float _1860;
    float _1862;
    float _1864;
    if (_1822)
    {
        _1860 = _1815;
        _1862 = _1817;
        _1864 = _1819;
    }
    else
    {
        uint _2033 = _1727 + 7u;
        float _2049 = (dot(vec3(cbLight._m0[_1727 + 3u].xyz), vec3(_373, _374, _375)) * 0.5) + 0.5;
        float _2050 = _2049 * _2049;
        float _3984 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        float _2051 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _2052 = isnan(1.0) ? _1743 : (isnan(_1743) ? 1.0 : min(_1743, 1.0));
        _1860 = (((cbLight._m0[_2033].x * 0.3183098733425140380859375) * _2051) * _2052) + _1815;
        _1862 = (((cbLight._m0[_2033].y * 0.3183098733425140380859375) * _2051) * _2052) + _1817;
        _1864 = (((cbLight._m0[_2033].z * 0.3183098733425140380859375) * _2051) * _2052) + _1819;
    }
    uint _1867 = _1727 + 8u;
    float _1880 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1727].w)) * _534) * 0.949999988079071044921875);
    float _1881 = _1880 * _1880;
    float _1882 = cbLight._m0[_1727].x + _444;
    float _1883 = cbLight._m0[_1727].y + _445;
    float _1884 = cbLight._m0[_1727].z + _446;
    float _1888 = inversesqrt(dot(vec3(_1882, _1883, _1884), vec3(_1882, _1883, _1884)));
    float _1889 = _1888 * _1882;
    float _1890 = _1888 * _1883;
    float _1891 = _1888 * _1884;
    float _1892 = dot(vec3(_373, _374, _375), vec3(cbLight._m0[_1727].xyz));
    float _4000 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1895 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _4011 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _1896 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _1897 = dot(vec3(_373, _374, _375), vec3(_1889, _1890, _1891));
    float _4022 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1900 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _1901 = dot(vec3(cbLight._m0[_1727].xyz), vec3(_1889, _1890, _1891));
    float _4033 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1905 = _1881 * _1881;
    float _1909 = ((_1900 * _1900) * (_1905 + (-1.0))) + 1.0;
    float _1917 = exp2(log2(1.0 - (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) * 5.0);
    float _1918 = 0.959999978542327880859375 - _650;
    float _1920 = 0.959999978542327880859375 - _651;
    float _1921 = 0.959999978542327880859375 - _652;
    float _1928 = 1.0 - _1881;
    float _1939 = (0.5 / (((_1896 * ((_1895 * _1928) + _1881)) + 9.9999999392252902907785028219223e-09) + (((_1896 * _1928) + _1881) * _1895))) * _1895;
    float _4044 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1941 = (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1905 / ((_1909 * _1909) * 3.141590118408203125));
    uint _1955 = _1727 + 9u;
    float _1966 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1768].w)) * _534) * 0.949999988079071044921875);
    float _1967 = _1966 * _1966;
    float _1968 = cbLight._m0[_1768].x + _444;
    float _1969 = cbLight._m0[_1768].y + _445;
    float _1970 = cbLight._m0[_1768].z + _446;
    float _1974 = inversesqrt(dot(vec3(_1968, _1969, _1970), vec3(_1968, _1969, _1970)));
    float _1975 = _1974 * _1968;
    float _1976 = _1974 * _1969;
    float _1977 = _1974 * _1970;
    float _1978 = dot(vec3(_373, _374, _375), vec3(cbLight._m0[_1768].xyz));
    float _4055 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1981 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _1982 = dot(vec3(_373, _374, _375), vec3(_1975, _1976, _1977));
    float _4066 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1985 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _1986 = dot(vec3(cbLight._m0[_1768].xyz), vec3(_1975, _1976, _1977));
    float _4077 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1990 = _1967 * _1967;
    float _1994 = ((_1985 * _1985) * (_1990 + (-1.0))) + 1.0;
    float _2001 = exp2(log2(1.0 - (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) * 5.0);
    float _2008 = 1.0 - _1967;
    float _2018 = (0.5 / (((_1896 * ((_1981 * _2008) + _1967)) + 9.9999999392252902907785028219223e-09) + (((_1896 * _2008) + _1967) * _1981))) * _1981;
    float _4088 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2020 = (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_1990 / ((_1994 * _1994) * 3.141590118408203125));
    float _2030 = (((((_2001 * _1918) + _653) * cbLight._m0[_1955].x) * _2020) * _1750) + ((((cbLight._m0[_1867].x * _1719) * ((_1917 * _1918) + _653)) * _1941) * _1764);
    float _2031 = (((((_2001 * _1920) + _654) * cbLight._m0[_1955].y) * _2020) * _1750) + ((((cbLight._m0[_1867].y * _1720) * ((_1917 * _1920) + _654)) * _1941) * _1764);
    float _2032 = (((((_2001 * _1921) + _655) * cbLight._m0[_1955].z) * _2020) * _1750) + ((((cbLight._m0[_1867].z * _1721) * ((_1917 * _1921) + _655)) * _1941) * _1764);
    float _2094;
    float _2096;
    float _2098;
    if (_1804)
    {
        _2094 = _2030;
        _2096 = _2031;
        _2098 = _2032;
    }
    else
    {
        uint _2100 = _1727 + 2u;
        uint _2104 = _1727 + 10u;
        float _2118 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2100].w)) * _534) * 0.949999988079071044921875);
        float _2119 = _2118 * _2118;
        float _2120 = cbLight._m0[_2100].x + _444;
        float _2121 = cbLight._m0[_2100].y + _445;
        float _2122 = cbLight._m0[_2100].z + _446;
        float _2126 = inversesqrt(dot(vec3(_2120, _2121, _2122), vec3(_2120, _2121, _2122)));
        float _2127 = _2126 * _2120;
        float _2128 = _2126 * _2121;
        float _2129 = _2126 * _2122;
        float _2130 = dot(vec3(_373, _374, _375), vec3(cbLight._m0[_2100].xyz));
        float _4099 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2133 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _2134 = dot(vec3(_373, _374, _375), vec3(_2127, _2128, _2129));
        float _4110 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2137 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _2138 = dot(vec3(cbLight._m0[_2100].xyz), vec3(_2127, _2128, _2129));
        float _4121 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2142 = _2119 * _2119;
        float _2146 = ((_2137 * _2137) * (_2142 + (-1.0))) + 1.0;
        float _2153 = exp2(log2(1.0 - (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) * 5.0);
        float _2160 = 1.0 - _2119;
        float _2170 = (0.5 / (((_1896 * ((_2133 * _2160) + _2119)) + 9.9999999392252902907785028219223e-09) + (((_1896 * _2160) + _2119) * _2133))) * _2133;
        float _4132 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2172 = (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_2142 / ((_2146 * _2146) * 3.141590118408203125));
        float _2173 = isnan(1.0) ? _1742 : (isnan(_1742) ? 1.0 : min(_1742, 1.0));
        _2094 = (((((_2153 * _1918) + _653) * cbLight._m0[_2104].x) * _2172) * _2173) + _2030;
        _2096 = (((((_2153 * _1920) + _654) * cbLight._m0[_2104].y) * _2172) * _2173) + _2031;
        _2098 = (((((_2153 * _1921) + _655) * cbLight._m0[_2104].z) * _2172) * _2173) + _2032;
    }
    float _2208;
    float _2210;
    float _2212;
    if (_1822)
    {
        _2208 = _2094;
        _2210 = _2096;
        _2212 = _2098;
    }
    else
    {
        uint _2219 = _1727 + 3u;
        uint _2223 = _1727 + 11u;
        float _2237 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2219].w)) * _534) * 0.949999988079071044921875);
        float _2238 = _2237 * _2237;
        float _2239 = cbLight._m0[_2219].x + _444;
        float _2240 = cbLight._m0[_2219].y + _445;
        float _2241 = cbLight._m0[_2219].z + _446;
        float _2245 = inversesqrt(dot(vec3(_2239, _2240, _2241), vec3(_2239, _2240, _2241)));
        float _2246 = _2245 * _2239;
        float _2247 = _2245 * _2240;
        float _2248 = _2245 * _2241;
        float _2249 = dot(vec3(_373, _374, _375), vec3(cbLight._m0[_2219].xyz));
        float _4148 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2252 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _2253 = dot(vec3(_373, _374, _375), vec3(_2246, _2247, _2248));
        float _4159 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2256 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _2257 = dot(vec3(cbLight._m0[_2219].xyz), vec3(_2246, _2247, _2248));
        float _4170 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2261 = _2238 * _2238;
        float _2265 = ((_2256 * _2256) * (_2261 + (-1.0))) + 1.0;
        float _2272 = exp2(log2(1.0 - (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) * 5.0);
        float _2279 = 1.0 - _2238;
        float _2289 = (0.5 / (((_1896 * ((_2252 * _2279) + _2238)) + 9.9999999392252902907785028219223e-09) + (((_1896 * _2279) + _2238) * _2252))) * _2252;
        float _4181 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        float _2291 = (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_2261 / ((_2265 * _2265) * 3.141590118408203125));
        float _2292 = isnan(1.0) ? _1743 : (isnan(_1743) ? 1.0 : min(_1743, 1.0));
        _2208 = (((((_2272 * _1918) + _653) * cbLight._m0[_2223].x) * _2291) * _2292) + _2094;
        _2210 = (((((_2272 * _1920) + _654) * cbLight._m0[_2223].y) * _2291) * _2292) + _2096;
        _2212 = (((((_2272 * _1921) + _655) * cbLight._m0[_2223].z) * _2291) * _2292) + _2098;
    }
    float _2427;
    float _2429;
    float _2431;
    float _2433;
    float _2435;
    float _2437;
    if (_1725.y == 0u)
    {
        float _2367 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2368 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2367;
        float _2369 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2367;
        float _2370 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2367;
        uvec4 _2382 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2383 = _2382.x;
        uint _2394 = uint((float(_2382.y) * floor(float(uint(cbSceneParam._m0[85u].y * _452) / _2383))) + floor(float(uint(cbSceneParam._m0[85u].x * _451) / _2383)));
        float _2404 = (log2(_2370 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2405 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        uint _2408 = uint(isnan(14.0) ? _2405 : (isnan(_2405) ? 14.0 : min(_2405, 14.0)));
        uvec4 _2413 = texelFetch(g_lightClusterGridBuffer, int(((_2408 << 2u) + (_2394 << 6u)) >> 2u));
        uint _2414 = _2413.x;
        uint _2415 = _2382.z;
        float _2546;
        float _2548;
        float _2550;
        float _2552;
        float _2554;
        float _2556;
        if (((((1u << ((_2415 >> 4u) & 15u)) + 4294967295u) & _2414) == 0u) || ((_2415 & 240u) == 0u))
        {
            _2546 = 0.0;
            _2548 = 0.0;
            _2550 = 0.0;
            _2552 = 0.0;
            _2554 = 0.0;
            _2556 = 0.0;
        }
        else
        {
            float _2547;
            float _2549;
            float _2551;
            float _2553;
            float _2555;
            float _2557;
            float _2699 = 0.0;
            float _2700 = 0.0;
            float _2701 = 0.0;
            float _2702 = 0.0;
            float _2703 = 0.0;
            float _2704 = 0.0;
            uint _2705 = 0u;
            uint _2714;
            bool _2715;
            for (;;)
            {
                _2714 = texelFetch(g_lightClassification, int((((_2408 << 5u) + (_2394 << 9u)) + (_2705 << 2u)) >> 2u)).x;
                _2715 = _2714 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2715)
                {
                    frontier_phi_61_pred = _2699;
                    frontier_phi_61_pred_1 = _2704;
                    frontier_phi_61_pred_2 = _2703;
                    frontier_phi_61_pred_3 = _2702;
                    frontier_phi_61_pred_4 = _2701;
                    frontier_phi_61_pred_5 = _2700;
                }
                else
                {
                    float _2823;
                    float _2824;
                    float _2825;
                    float _2826;
                    float _2827;
                    float _2828;
                    uint _2829;
                    _2823 = _2699;
                    _2824 = _2700;
                    _2825 = _2701;
                    _2826 = _2702;
                    _2827 = _2703;
                    _2828 = _2704;
                    _2829 = _2714;
                    float _2755;
                    float _2756;
                    float _2757;
                    float _2758;
                    float _2759;
                    float _2760;
                    for (;;)
                    {
                        uint _2833 = uint(findLSB(_2829)) + (_2705 << 5u);
                        uint _2830 = (_2829 + 4294967295u) & _2829;
                        uint _2835 = _2833 * 48u;
                        vec4 _2849 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2835)).x, texelFetch(g_PointLightRenderingBuffer, int(_2835 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2835 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2835 + 3u)).x));
                        uint _2855 = (_2833 * 48u) + 4u;
                        vec4 _2868 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2855)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 3u)).x));
                        uint _2874 = (_2833 * 48u) + 8u;
                        vec3 _2885 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2874)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 2u)).x));
                        float _2889 = _2849.x - _2368;
                        float _2890 = _2849.y - _2369;
                        float _2891 = _2849.z - _2370;
                        float _2892 = dot(vec3(_2889, _2890, _2891), vec3(_2889, _2890, _2891));
                        float _2895 = inversesqrt(_2892);
                        float _2896 = _2895 * _2889;
                        float _2897 = _2895 * _2890;
                        float _2898 = _2895 * _2891;
                        float _2899 = dot(vec3(_477, _480, _483), vec3(_2896, _2897, _2898));
                        float _2904 = 1.0 - (_2892 * _2849.w);
                        float _4207 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
                        float _2905 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
                        float _2906 = sqrt(_2892) * _2868.w;
                        float _2909 = 1.39999997615814208984375 / (_2906 + 1.39999997615814208984375);
                        float _2910 = _2909 * _2909;
                        float _2913 = ((1.0 - _2910) * _2899) + _2910;
                        float _2916 = _2906 * _2906;
                        float _2920 = ((isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0))) * _2905) / ((_2916 * 0.699999988079071044921875) + 1.0);
                        float _2924 = (-0.0) - _2368;
                        float _2925 = (-0.0) - _2369;
                        float _2926 = (-0.0) - _2370;
                        float _2930 = inversesqrt(dot(vec3(_2924, _2925, _2926), vec3(_2924, _2925, _2926)));
                        float _2931 = _2930 * _2924;
                        float _2932 = _2930 * _2925;
                        float _2933 = _2930 * _2926;
                        float _2941 = exp2(log2(1.0 / ((_2916 * 3.5) + 5.0)) * 0.25);
                        float _2942 = 1.0 - _683;
                        float _2949 = sqrt(1.0 - ((1.0 - (_2942 * _2942)) * (1.0 - (_2941 * _2941))));
                        float _2950 = _2949 * _2949;
                        float _2951 = _2950 * _2950;
                        float _2952 = _2931 + _2896;
                        float _2953 = _2932 + _2897;
                        float _2954 = _2933 + _2898;
                        float _2958 = inversesqrt(dot(vec3(_2952, _2953, _2954), vec3(_2952, _2953, _2954)));
                        float _2962 = dot(vec3(_477, _480, _483), vec3(_2931, _2932, _2933));
                        float _4223 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                        float _2965 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                        float _2966 = dot(vec3(_477, _480, _483), vec3(_2958 * _2952, _2958 * _2953, _2958 * _2954));
                        float _4234 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
                        float _2969 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                        float _2973 = ((_2969 * _2969) * (_2951 + (-1.0))) + 1.0;
                        float _2974 = _2909 * _2950;
                        float _2975 = _2974 * _2974;
                        float _2978 = ((1.0 - _2975) * _2899) + _2975;
                        float _4245 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
                        float _2979 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                        float _2980 = 1.0 - _2950;
                        float _2990 = (0.5 / (((_2979 * ((_2965 * _2980) + _2950)) + 9.9999999392252902907785028219223e-09) + (((_2979 * _2980) + _2950) * _2965))) * _2979;
                        float _4256 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
                        float _3001 = (((_2951 * 3.1415927410125732421875) * (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) / ((_2973 * _2973) * ((_2916 * 2.1991131305694580078125) + 3.141590118408203125))) * _2905;
                        _2758 = (_2920 * _2868.x) + _2826;
                        _2759 = (_2920 * _2868.y) + _2827;
                        _2760 = (_2920 * _2868.z) + _2828;
                        _2755 = (_3001 * _2885.x) + _2823;
                        _2756 = (_3001 * _2885.y) + _2824;
                        _2757 = (_3001 * _2885.z) + _2825;
                        if (_2830 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2823 = _2755;
                            _2824 = _2756;
                            _2825 = _2757;
                            _2826 = _2758;
                            _2827 = _2759;
                            _2828 = _2760;
                            _2829 = _2830;
                        }
                    }
                    frontier_phi_61_pred = _2755;
                    frontier_phi_61_pred_1 = _2760;
                    frontier_phi_61_pred_2 = _2759;
                    frontier_phi_61_pred_3 = _2758;
                    frontier_phi_61_pred_4 = _2757;
                    frontier_phi_61_pred_5 = _2756;
                }
                _2547 = frontier_phi_61_pred;
                _2557 = frontier_phi_61_pred_1;
                _2555 = frontier_phi_61_pred_2;
                _2553 = frontier_phi_61_pred_3;
                _2551 = frontier_phi_61_pred_4;
                _2549 = frontier_phi_61_pred_5;
                uint _2706 = _2705 + 1u;
                if (_2706 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2699 = _2547;
                    _2700 = _2549;
                    _2701 = _2551;
                    _2702 = _2553;
                    _2703 = _2555;
                    _2704 = _2557;
                    _2705 = _2706;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2546 = _2547;
            _2548 = _2549;
            _2550 = _2551;
            _2552 = _2553;
            _2554 = _2555;
            _2556 = _2557;
        }
        uvec4 _2560 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2561 = _2560.z;
        uint _2563 = (_2561 >> 8u) & 15u;
        float _2667;
        float _2669;
        float _2671;
        float _2673;
        float _2675;
        float _2677;
        if (((4294967295u << _2563) & _2414) == 0u)
        {
            _2667 = _2546;
            _2669 = _2548;
            _2671 = _2550;
            _2673 = _2552;
            _2675 = _2554;
            _2677 = _2556;
        }
        else
        {
            float _2692 = inversesqrt(dot(vec3(_2368, _2369, _2370), vec3(_2368, _2369, _2370)));
            float _2693 = _2692 * _2368;
            float _2694 = _2692 * _2369;
            float _2695 = _2692 * _2370;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2563 < ((_2561 >> 12u) & 15u))
            {
                float _2668;
                float _2670;
                float _2672;
                float _2674;
                float _2676;
                float _2678;
                float _2806 = _2546;
                float _2807 = _2548;
                float _2808 = _2550;
                float _2809 = _2552;
                float _2810 = _2554;
                float _2811 = _2556;
                uint _2812 = _2563;
                uint _2821;
                bool _2822;
                for (;;)
                {
                    _2821 = texelFetch(g_lightClassification, int((((_2408 << 5u) + (_2394 << 9u)) + (_2812 << 2u)) >> 2u)).x;
                    _2822 = _2821 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2822)
                    {
                        frontier_phi_67_pred = _2809;
                        frontier_phi_67_pred_1 = _2810;
                        frontier_phi_67_pred_2 = _2811;
                        frontier_phi_67_pred_3 = _2808;
                        frontier_phi_67_pred_4 = _2807;
                        frontier_phi_67_pred_5 = _2806;
                    }
                    else
                    {
                        float _3006;
                        float _3007;
                        float _3008;
                        float _3009;
                        float _3010;
                        float _3011;
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3019 = _2806;
                        float _3020 = _2807;
                        float _3021 = _2808;
                        float _3022 = _2809;
                        float _3023 = _2810;
                        float _3024 = _2811;
                        uint _3025 = _2821;
                        uint _3026;
                        vec4 _3051;
                        float _3052;
                        vec4 _3067;
                        vec3 _3079;
                        vec4 _3094;
                        vec4 _3110;
                        float _3157;
                        bool _3158;
                        for (;;)
                        {
                            uint _3036 = ((_2812 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3025));
                            _3026 = (_3025 + 4294967295u) & _3025;
                            uint _3038 = _3036 * 40u;
                            _3051 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3038)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 3u)).x));
                            _3052 = _3051.w;
                            uint _3054 = (_3036 * 40u) + 4u;
                            _3067 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3054)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 3u)).x));
                            uint _3069 = (_3036 * 40u) + 8u;
                            _3079 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3069)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 2u)).x));
                            uint _3081 = (_3036 * 40u) + 16u;
                            _3094 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3081)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 3u)).x));
                            uint _3097 = (_3036 * 40u) + 20u;
                            _3110 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 3u)).x));
                            uint _3113 = (_3036 * 40u) + 24u;
                            vec4 _3126 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3113)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 3u)).x));
                            uint _3132 = (_3036 * 40u) + 28u;
                            vec4 _3145 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 3u)).x));
                            _3157 = fma(_2370, _3145.z, fma(_2369, _3145.y, _3145.x * _2368)) + _3145.w;
                            _3158 = !((fma(_2370, _3126.z, fma(_2369, _3126.y, _3126.x * _2368)) + _3126.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3158)
                            {
                                float _3185 = _3051.x - _2368;
                                float _3186 = _3051.y - _2369;
                                float _3187 = _3051.z - _2370;
                                float _3188 = dot(vec3(_3185, _3186, _3187), vec3(_3185, _3186, _3187));
                                float _3191 = inversesqrt(_3188);
                                float _3192 = _3191 * _3185;
                                float _3193 = _3191 * _3186;
                                float _3194 = _3191 * _3187;
                                float _3198 = 1.0 - (_3188 / (_3052 * _3052));
                                float _4267 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                                float _3199 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                                float _3203 = sqrt(_3188) * _3067.w;
                                float _3205 = 1.39999997615814208984375 / (_3203 + 1.39999997615814208984375);
                                float _3206 = _3205 * _3205;
                                float _3209 = ((1.0 - _3206) * dot(vec3(_3192, _3193, _3194), vec3(_477, _480, _483))) + _3206;
                                float _3212 = _3203 * _3203;
                                float _3216 = (fma(_2370, _3094.z, fma(_2369, _3094.y, _3094.x * _2368)) + _3094.w) / _3157;
                                float _3217 = (fma(_2370, _3110.z, fma(_2369, _3110.y, _3110.x * _2368)) + _3110.w) / _3157;
                                float _3221 = 1.0 - dot(vec2(_3216, _3217), vec2(_3216, _3217));
                                float _4283 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                                float _3222 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                                float _3223 = _3222 * (((isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0))) * _3199) / ((_3212 * 0.699999988079071044921875) + 1.0));
                                float _3235 = exp2(log2(1.0 / ((_3212 * 3.5) + 5.0)) * 0.25);
                                float _3236 = 1.0 - _683;
                                float _3243 = sqrt(1.0 - ((1.0 - (_3236 * _3236)) * (1.0 - (_3235 * _3235))));
                                float _3244 = _3243 * _3243;
                                float _3245 = _3244 * _3244;
                                float _3246 = _3192 - _2693;
                                float _3247 = _3193 - _2694;
                                float _3248 = _3194 - _2695;
                                float _3252 = inversesqrt(dot(vec3(_3246, _3247, _3248), vec3(_3246, _3247, _3248)));
                                float _3256 = dot(vec3(_477, _480, _483), vec3((-0.0) - _2693, (-0.0) - _2694, (-0.0) - _2695));
                                float _4294 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                                float _3259 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
                                float _3260 = dot(vec3(_477, _480, _483), vec3(_3252 * _3246, _3252 * _3247, _3252 * _3248));
                                float _4305 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                                float _3263 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
                                float _3267 = ((_3263 * _3263) * (_3245 + (-1.0))) + 1.0;
                                float _3268 = _3205 * _3244;
                                float _3269 = _3268 * _3268;
                                float _3275 = ((1.0 - _3269) * dot(vec3(_477, _480, _483), vec3(_3192, _3193, _3194))) + _3269;
                                float _4316 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                                float _3276 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                                float _3277 = 1.0 - _3244;
                                float _3287 = (0.5 / (((_3276 * ((_3259 * _3277) + _3244)) + 9.9999999392252902907785028219223e-09) + (((_3276 * _3277) + _3244) * _3259))) * _3276;
                                float _4327 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                                float _3297 = (_3222 * _3199) * (((_3245 * 3.1415927410125732421875) * (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0)))) / ((_3267 * _3267) * ((_3212 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3297 * _3079.x;
                                frontier_phi_73_pred_1 = _3297 * _3079.y;
                                frontier_phi_73_pred_2 = _3223 * _3067.z;
                                frontier_phi_73_pred_3 = _3223 * _3067.y;
                                frontier_phi_73_pred_4 = _3223 * _3067.x;
                                frontier_phi_73_pred_5 = _3297 * _3079.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3301 = frontier_phi_73_pred;
                            _3302 = frontier_phi_73_pred_1;
                            _3306 = frontier_phi_73_pred_2;
                            _3305 = frontier_phi_73_pred_3;
                            _3304 = frontier_phi_73_pred_4;
                            _3303 = frontier_phi_73_pred_5;
                            _3009 = _3304 + _3022;
                            _3010 = _3305 + _3023;
                            _3011 = _3306 + _3024;
                            _3006 = _3301 + _3019;
                            _3007 = _3302 + _3020;
                            _3008 = _3303 + _3021;
                            if (_3026 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3019 = _3006;
                                _3020 = _3007;
                                _3021 = _3008;
                                _3022 = _3009;
                                _3023 = _3010;
                                _3024 = _3011;
                                _3025 = _3026;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3009;
                        frontier_phi_67_pred_1 = _3010;
                        frontier_phi_67_pred_2 = _3011;
                        frontier_phi_67_pred_3 = _3008;
                        frontier_phi_67_pred_4 = _3007;
                        frontier_phi_67_pred_5 = _3006;
                    }
                    _2674 = frontier_phi_67_pred;
                    _2676 = frontier_phi_67_pred_1;
                    _2678 = frontier_phi_67_pred_2;
                    _2672 = frontier_phi_67_pred_3;
                    _2670 = frontier_phi_67_pred_4;
                    _2668 = frontier_phi_67_pred_5;
                    uint _2813 = _2812 + 1u;
                    if (_2813 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2806 = _2668;
                        _2807 = _2670;
                        _2808 = _2672;
                        _2809 = _2674;
                        _2810 = _2676;
                        _2811 = _2678;
                        _2812 = _2813;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2676;
                frontier_phi_55_56_ladder_1 = _2678;
                frontier_phi_55_56_ladder_2 = _2674;
                frontier_phi_55_56_ladder_3 = _2672;
                frontier_phi_55_56_ladder_4 = _2670;
                frontier_phi_55_56_ladder_5 = _2668;
            }
            else
            {
                frontier_phi_55_56_ladder = _2554;
                frontier_phi_55_56_ladder_1 = _2556;
                frontier_phi_55_56_ladder_2 = _2552;
                frontier_phi_55_56_ladder_3 = _2550;
                frontier_phi_55_56_ladder_4 = _2548;
                frontier_phi_55_56_ladder_5 = _2546;
            }
            _2667 = frontier_phi_55_56_ladder_5;
            _2669 = frontier_phi_55_56_ladder_4;
            _2671 = frontier_phi_55_56_ladder_3;
            _2673 = frontier_phi_55_56_ladder_2;
            _2675 = frontier_phi_55_56_ladder;
            _2677 = frontier_phi_55_56_ladder_1;
        }
        float _2682 = isnan(1.0) ? _667 : (isnan(_667) ? 1.0 : min(_667, 1.0));
        _2427 = (_2682 * _2673) + _1860;
        _2429 = (_2682 * _2675) + _1862;
        _2431 = (_2682 * _2677) + _1864;
        _2433 = ((_2667 * _653) * _2682) + _2208;
        _2435 = ((_2669 * _654) * _2682) + _2210;
        _2437 = ((_2671 * _655) * _2682) + _2212;
    }
    else
    {
        _2427 = _1860;
        _2429 = _1862;
        _2431 = _1864;
        _2433 = _2208;
        _2435 = _2210;
        _2437 = _2212;
    }
    uint _2443 = _560 + uint(cbMatDynParam._m0[0u].w);
    float _2449 = cbInstanceData._m0[_2443].x * (_345 ? cbMtdParam._m0[12u].y : cbMtdParam._m0[10u].y);
    float _2450 = cbInstanceData._m0[_2443].y * (_345 ? cbMtdParam._m0[12u].z : cbMtdParam._m0[10u].z);
    float _2451 = cbInstanceData._m0[_2443].z * (_345 ? cbMtdParam._m0[12u].w : cbMtdParam._m0[10u].w);
    float _4343 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _4354 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _4365 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _4376 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _2469 = (((isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_2427 + ((isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))) * _667))) + ((_2433 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _1474)) * cbPerFrame._m0[3u].x)) + _2449;
    float _2471 = (_2450 + ((_2435 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _1474)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_2429 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _667)));
    float _2473 = (_2451 + ((_2437 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _1474)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_2431 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _667)));
    float _4402 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2486 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    float _2491 = cbInstanceData._m0[_558 + 6u].w * (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0)));
    float _2496 = _451 / cbSceneParam._m0[86u].x;
    float _2497 = _452 / cbSceneParam._m0[86u].y;
    vec4 _2511 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2496, _2497, (log2((isnan(cbSceneParam._m0[77u].w) ? _386 : (isnan(_386) ? cbSceneParam._m0[77u].w : min(_386, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2513 = _2511.x;
    float _2514 = _2511.y;
    float _2515 = _2511.z;
    float _2516 = _2511.w;
    float _2608;
    float _2610;
    float _2612;
    float _2614;
    if (_386 > cbSceneParam._m0[78u].w)
    {
        float _2571 = isnan(_386) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _386 : min(cbSceneParam._m0[80u].w, _386));
        float _2572 = _2571 / _386;
        float _2583 = _2572 * _437;
        float _2584 = _438 * _2572;
        float _2585 = (-0.0) - _2584;
        float _2586 = _2572 * _439;
        float _2588 = (cbSceneParam._m0[77u].w * _2585) / _2571;
        float _2589 = _2588 + cbSceneParam._m0[79u].w;
        float _2590 = cbSceneParam._m0[79u].w - _2584;
        float _2596 = sqrt(((_2583 * _2583) + (_2584 * _2584)) + (_2586 * _2586));
        float _2599 = (1.0 - (cbSceneParam._m0[77u].w / _2571)) * _2596;
        float _2604 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2606 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2768;
        if (abs((_2585 - _2588) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2768 = ((((_2589 > 0.0) ? exp2(_2604 * _2589) : (2.0 - exp2(_2606 * _2589))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2599;
        }
        else
        {
            float _2728 = 1.0 / cbSceneParam._m0[80u].x;
            float _2729 = isnan(_2590) ? _2589 : (isnan(_2589) ? _2590 : max(_2589, _2590));
            float _2730 = isnan(_2590) ? _2589 : (isnan(_2589) ? _2590 : min(_2589, _2590));
            float _2739 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : min(_2729, 0.0));
            float _2740 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : min(_2730, 0.0));
            _2768 = ((abs(_2596 / _2585) * cbSceneParam._m0[80u].y) * ((((_2739 - _2740) * 2.0) - ((exp2(_2604 * (isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0)))) - exp2(_2604 * (isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0))))) * _2728)) - ((exp2(_2606 * _2739) - exp2(_2606 * _2740)) * _2728))) + (_2599 * cbSceneParam._m0[80u].z);
        }
        vec4 _2770 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2496, _2497, 1.0), 0.0);
        float _2779 = exp2((_2768 * (-1.44269502162933349609375)) * (1.0 - _2770.w));
        float _2780 = log2(_2779);
        float _2796 = log2(_2516);
        _2608 = (exp2(_2796 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2780 * cbSceneParam._m0[78u].x)) * _2770.x) / cbSceneParam._m0[78u].x)) + _2513;
        _2610 = (exp2(_2796 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2780 * cbSceneParam._m0[78u].y)) * _2770.y) / cbSceneParam._m0[78u].y)) + _2514;
        _2612 = (exp2(_2796 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2780 * cbSceneParam._m0[78u].z)) * _2770.z) / cbSceneParam._m0[78u].z)) + _2515;
        _2614 = _2779 * _2516;
    }
    else
    {
        _2608 = _2513;
        _2610 = _2514;
        _2612 = _2515;
        _2614 = _2516;
    }
    float _2626 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2627 = _2626 == 3.0;
    float _2628 = log2(_2614);
    float _2632 = exp2(_2628 * cbSceneParam._m0[78u].x);
    float _2633 = exp2(_2628 * cbSceneParam._m0[78u].y);
    float _2634 = exp2(_2628 * cbSceneParam._m0[78u].z);
    float _2635 = _2632 * (isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0)));
    float _2636 = _2633 * (isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0)));
    float _2637 = _2634 * (isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0)));
    float _2646 = (_2626 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2646 * (_2627 ? _2635 : (_2635 + (cbSceneParam._m0[72u].w * _2608)));
    SV_Target.y = _2646 * (_2627 ? _2636 : (_2636 + (cbSceneParam._m0[72u].w * _2610)));
    SV_Target.z = _2646 * (_2627 ? _2637 : (_2637 + (cbSceneParam._m0[72u].w * _2612)));
    SV_Target.w = _2491;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2449) * _2486) * _2632) * _2646;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2450) * _2486) * _2633) * _2646;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2451) * _2486) * _2634) * _2646;
    SV_Target_1.w = _2491;
}


