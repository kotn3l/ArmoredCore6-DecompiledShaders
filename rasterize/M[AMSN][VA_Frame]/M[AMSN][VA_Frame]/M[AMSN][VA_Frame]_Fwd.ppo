#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_VA_Frame_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_VA_Frame_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_VA_Frame_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec3 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1040;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _231 = cbMtdParam._m0[11u].w + TEXCOORD.x;
    float _232 = cbMtdParam._m0[12u].x + TEXCOORD.y;
    vec4 _245 = texture(sampler2D(M_AMSN_VA_Frame_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _231) + cbTextureTilingScale._m0[0u].z, (_232 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _251 = _245.x * cbMtdParam._m0[9u].y;
    float _252 = _245.y * cbMtdParam._m0[9u].z;
    float _253 = _245.z * cbMtdParam._m0[9u].w;
    vec4 _263 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _265 = _263.x;
    bool _272 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _289 = ((_272 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _265)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _265))) - POSITION_1.w) / cbMtdParam._m0[11u].z;
    float _3409 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _291 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
    float _3420 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _292 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
    float _310 = texture(sampler2D(M_AMSN_VA_Frame_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _231) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _232) + cbTextureTilingScale._m0[2u].w)).x + cbMtdParam._m0[11u].y;
    vec4 _322 = texture(sampler2D(M_AMSN_VA_Frame_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _231) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _232) + cbTextureTilingScale._m0[1u].w));
    float _326 = _322.z;
    float _330 = (_322.x * 2.0) + (-1.0);
    float _332 = (_322.y * 2.0) + (-1.0);
    float _333 = dot(vec2(_330, _332), vec2(_330, _332));
    float _3431 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _338 = sqrt(1.0 - (isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0))));
    bool _343 = floatBitsToUint(cbMtdParam._m0[9u]).x != 0u;
    float _360 = fma(_338, _205 * NORMAL.x, fma(_332, _212 * TANGENT.x, (_198 * _191) * _330));
    float _363 = fma(_338, _205 * NORMAL.y, fma(_332, _212 * TANGENT.y, (_198 * _192) * _330));
    float _366 = fma(_338, _205 * NORMAL.z, fma(_332, _212 * TANGENT.z, (_198 * _193) * _330));
    float _370 = inversesqrt(dot(vec3(_360, _363, _366), vec3(_360, _363, _366)));
    float _371 = _370 * _360;
    float _372 = _370 * _363;
    float _373 = _370 * _366;
    float _3442 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _374 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
    float _3453 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _375 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
    float _3464 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _376 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
    float _3475 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _377 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
    float _3486 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _378 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
    float _3497 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _379 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
    float _384 = _272 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _425 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _435 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _425);
    float _436 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _425);
    float _437 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _425);
    float _441 = inversesqrt(dot(vec3(_435, _436, _437), vec3(_435, _436, _437)));
    float _442 = _435 * _441;
    float _443 = _436 * _441;
    float _444 = _437 * _441;
    float _449 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _450 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _452 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _454 = _452.w;
    float _475 = fma(_373, cbSceneParam._m0[5u].z, fma(_372, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _371));
    float _478 = fma(_373, cbSceneParam._m0[6u].z, fma(_372, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _371));
    float _481 = fma(_373, cbSceneParam._m0[7u].z, fma(_372, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _371));
    vec4 _483 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _485 = _483.x;
    float _497 = (((_483.y - _375) + (_483.w * _375)) * cbMtdParam._m0[3u].x) + _375;
    float _514 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_485 * _485)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _523 = (((cbMatDynParam._m0[15u].x - _379) * cbMatDynParam._m0[15u].w) * _514) + _379;
    float _532 = ((_514 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _497)) + _497;
    uint _556 = uint(roundEven(NORMAL.w)) * 13u;
    uint _558 = _556 + 9u;
    uint _559 = _558 + uint(cbMatDynParam._m0[0u].w);
    float _565 = (cbMtdParam._m0[0u].x * _376) * cbInstanceData._m0[_559].x;
    float _566 = (cbMtdParam._m0[0u].y * _377) * cbInstanceData._m0[_559].y;
    float _567 = (cbMtdParam._m0[0u].z * _378) * cbInstanceData._m0[_559].z;
    float _3508 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _568 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
    float _3519 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _569 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
    float _3530 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _570 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    vec4 _571 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _576 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _587 = (((_576.x - _523) + (_576.w * _523)) * cbMtdParam._m0[3u].x) + _523;
    float _600 = (cbMtdParam._m0[3u].x * (((_568 * _454) - _568) + _571.x)) + _568;
    float _601 = (cbMtdParam._m0[3u].x * (((_569 * _454) - _569) + _571.y)) + _569;
    float _602 = (cbMtdParam._m0[3u].x * (((_570 * _454) - _570) + _571.z)) + _570;
    vec4 _603 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _616 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_523 * (_376 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_523 * (_377 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_523 * (_378 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _603.z;
    float _620 = _616 * cbMatDynParam._m0[13u].w;
    float _630 = (_620 * (cbMatDynParam._m0[13u].x - _600)) + _600;
    float _631 = (_620 * (cbMatDynParam._m0[13u].y - _601)) + _601;
    float _632 = (_620 * (cbMatDynParam._m0[13u].z - _602)) + _602;
    float _640 = ((_616 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _587)) + _587;
    float _641 = 1.0 - _640;
    float _642 = _641 * _630;
    float _643 = _641 * _631;
    float _644 = _641 * _632;
    float _648 = (_630 + (-0.039999999105930328369140625)) * _640;
    float _649 = (_631 + (-0.039999999105930328369140625)) * _640;
    float _650 = (_632 + (-0.039999999105930328369140625)) * _640;
    float _651 = _648 + 0.039999999105930328369140625;
    float _652 = _649 + 0.039999999105930328369140625;
    float _653 = _650 + 0.039999999105930328369140625;
    vec4 _662 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _449, cbSceneParam._m0[86u].y * _450));
    float _665 = _662.x * TEXCOORD_5.z;
    float _666 = dot(vec3(_371, _372, _373), vec3(_442, _443, _444));
    float _669 = _666 * 2.0;
    float _673 = (_669 * _371) - _442;
    float _674 = (_669 * _372) - _443;
    float _675 = (_669 * _373) - _444;
    float _679 = abs(dot(vec3(_442, _443, _444), vec3(_371, _372, _373)));
    float _3541 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _681 = sqrt(_532);
    float _694 = exp2((_681 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_681 * 3.0));
    float _700 = (1.0 - _694) * ((_681 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _701 = _694 * _681;
    float _729 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _737 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1039;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _764 = fma(_737, cbModelParam._m0[26u].z, fma(_733, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _729));
        float _768 = fma(_737, cbModelParam._m0[27u].z, fma(_733, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _729));
        float _772 = fma(_737, cbModelParam._m0[28u].z, fma(_733, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _729));
        float _797 = _729 + _371;
        float _798 = _733 + _372;
        float _799 = _737 + _373;
        float _809 = fma(_799, cbModelParam._m0[26u].z, fma(_798, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _797)) - _764;
        float _810 = fma(_799, cbModelParam._m0[27u].z, fma(_798, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _797)) - _768;
        float _811 = fma(_799, cbModelParam._m0[28u].z, fma(_798, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _797)) - _772;
        float _815 = inversesqrt(dot(vec3(_809, _810, _811), vec3(_809, _810, _811)));
        float _828 = ((_815 * _809) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_764 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _829 = ((_815 * _810) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_768 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _830 = ((_815 * _811) / cbModelParam._m0[34u].z) + ((((((_772 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        float _867 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _868 = _867 * (_833.x + (-0.5));
        float _869 = _867 * (_833.y + (-0.5));
        float _870 = _867 * (_833.z + (-0.5));
        float _877 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _878 = _877 * (_840.x + (-0.5));
        float _879 = _877 * (_840.y + (-0.5));
        float _880 = _877 * (_840.z + (-0.5));
        float _887 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_847.x + (-0.5));
        float _889 = _887 * (_847.y + (-0.5));
        float _890 = _887 * (_847.z + (-0.5));
        float _897 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _898 = _897 * (_854.x + (-0.5));
        float _899 = _897 * (_854.y + (-0.5));
        float _900 = _897 * (_854.z + (-0.5));
        float _901 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _902 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _903 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _904 = _868 * 0.5;
        float _905 = _878 * 0.5;
        float _906 = _888 * 0.5;
        float _907 = dot(vec3(_904, _905, _906), vec3(_904, _905, _906));
        float _912 = (_907 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_907);
        float _921 = (dot(vec3(_371, _372, _373), vec3(_912 * _904, _912 * _905, _912 * _906)) + 1.0) * 0.5;
        float _3567 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _931 = sqrt(((_905 * _905) + (_904 * _904)) + (_906 * _906)) / (_901 + 9.9999997473787516355514526367188e-06);
        float _3578 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _933 = _932 * 2.0;
        float _937 = (1.0 - _932) / (_932 + 1.0);
        float _3589 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _947 = ((((1.0 - _938) * (_933 + 2.0)) * exp2(log2(isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) * (_933 + 1.0))) + _938) * _901;
        float _948 = _869 * 0.5;
        float _949 = _879 * 0.5;
        float _950 = _889 * 0.5;
        float _951 = dot(vec3(_948, _949, _950), vec3(_948, _949, _950));
        float _956 = (_951 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_951);
        float _964 = (dot(vec3(_371, _372, _373), vec3(_956 * _948, _956 * _949, _956 * _950)) + 1.0) * 0.5;
        float _3600 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _973 = sqrt(((_949 * _949) + (_948 * _948)) + (_950 * _950)) / (_902 + 9.9999997473787516355514526367188e-06);
        float _3611 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _975 = _974 * 2.0;
        float _979 = (1.0 - _974) / (_974 + 1.0);
        float _3622 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _989 = ((((1.0 - _980) * (_975 + 2.0)) * exp2(log2(isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * (_975 + 1.0))) + _980) * _902;
        float _990 = _870 * 0.5;
        float _991 = _880 * 0.5;
        float _992 = _890 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1006 = (dot(vec3(_371, _372, _373), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3633 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1015 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_903 + 9.9999997473787516355514526367188e-06);
        float _3644 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _3655 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * (_1017 + 1.0))) + _1022) * _903;
        _1039 = _870;
        _1041 = _869;
        _1042 = _868;
        _1043 = _880;
        _1044 = _879;
        _1045 = _878;
        _1046 = _890;
        _1047 = _889;
        _1048 = _888;
        _1049 = _903;
        _1050 = _902;
        _1051 = _901;
        _1052 = cbModelParam._m0[36u].z * (isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0)));
        _1053 = cbModelParam._m0[36u].z * (isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0)));
        _1054 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
    }
    else
    {
        _1039 = _1040;
        _1041 = _1040;
        _1042 = _1040;
        _1043 = _1040;
        _1044 = _1040;
        _1045 = _1040;
        _1046 = _1040;
        _1047 = _1040;
        _1048 = _1040;
        _1049 = _1040;
        _1050 = _1040;
        _1051 = _1040;
        _1052 = 0.0;
        _1053 = 0.0;
        _1054 = 0.0;
    }
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1080 = fma(_737, cbModelParam._m0[30u].z, fma(_733, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _729));
        float _1084 = fma(_737, cbModelParam._m0[31u].z, fma(_733, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _729));
        float _1088 = fma(_737, cbModelParam._m0[32u].z, fma(_733, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _729));
        float _1111 = _729 + _371;
        float _1112 = _733 + _372;
        float _1113 = _737 + _373;
        float _1123 = fma(_1113, cbModelParam._m0[30u].z, fma(_1112, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1111)) - _1080;
        float _1124 = fma(_1113, cbModelParam._m0[31u].z, fma(_1112, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1111)) - _1084;
        float _1125 = fma(_1113, cbModelParam._m0[32u].z, fma(_1112, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1111)) - _1088;
        float _1129 = inversesqrt(dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125)));
        float _1142 = ((_1129 * _1123) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1080 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1143 = ((_1129 * _1124) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1084 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1144 = ((_1129 * _1125) / cbModelParam._m0[35u].z) + ((((((_1088 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        float _1179 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1146.x + (-0.5));
        float _1181 = _1179 * (_1146.y + (-0.5));
        float _1182 = _1179 * (_1146.z + (-0.5));
        float _1189 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1153.x + (-0.5));
        float _1191 = _1189 * (_1153.y + (-0.5));
        float _1192 = _1189 * (_1153.z + (-0.5));
        float _1199 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1160.x + (-0.5));
        float _1201 = _1199 * (_1160.y + (-0.5));
        float _1202 = _1199 * (_1160.z + (-0.5));
        float _1209 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1167.x + (-0.5));
        float _1211 = _1209 * (_1167.y + (-0.5));
        float _1212 = _1209 * (_1167.z + (-0.5));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = _1180 * 0.5;
        float _1217 = _1190 * 0.5;
        float _1218 = _1200 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1232 = (dot(vec3(_371, _372, _373), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _3696 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1241 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _3707 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _3718 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * (_1243 + 1.0))) + _1248) * _1213;
        float _1258 = _1181 * 0.5;
        float _1259 = _1191 * 0.5;
        float _1260 = _1201 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_371, _372, _373), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _3751 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1285 + 1.0))) + _1290) * _1214;
        float _1300 = _1182 * 0.5;
        float _1301 = _1192 * 0.5;
        float _1302 = _1202 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1316 = (dot(vec3(_371, _372, _373), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1325 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _3784 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1327 + 1.0))) + _1332) * _1215;
        _1349 = _1182;
        _1350 = _1181;
        _1351 = _1180;
        _1352 = _1192;
        _1353 = _1191;
        _1354 = _1190;
        _1355 = _1202;
        _1356 = _1201;
        _1357 = _1200;
        _1358 = _1215;
        _1359 = _1214;
        _1360 = _1213;
        _1361 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
        _1362 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
        _1363 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
    }
    else
    {
        _1349 = _1040;
        _1350 = _1040;
        _1351 = _1040;
        _1352 = _1040;
        _1353 = _1040;
        _1354 = _1040;
        _1355 = _1040;
        _1356 = _1040;
        _1357 = _1040;
        _1358 = _1040;
        _1359 = _1040;
        _1360 = _1040;
        _1361 = 0.0;
        _1362 = 0.0;
        _1363 = 0.0;
    }
    float _1373 = (cbModelParam._m0[1u].x * (_1361 - _1052)) + _1052;
    float _1374 = (cbModelParam._m0[1u].x * (_1362 - _1053)) + _1053;
    float _1375 = (cbModelParam._m0[1u].x * (_1363 - _1054)) + _1054;
    float _1396 = fma(_1375, cbSceneParam._m0[89u].z, fma(_1374, cbSceneParam._m0[89u].y, _1373 * cbSceneParam._m0[89u].x));
    float _1399 = fma(_1375, cbSceneParam._m0[90u].z, fma(_1374, cbSceneParam._m0[90u].y, _1373 * cbSceneParam._m0[90u].x));
    float _1402 = fma(_1375, cbSceneParam._m0[91u].z, fma(_1374, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1373));
    float _1417 = _673 * 0.5;
    float _1418 = _674 * 0.5;
    float _1419 = _675 * 0.5;
    float _1420 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1351, _1354, _1357, _1360));
    float _1423 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1350, _1353, _1356, _1359));
    float _1426 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1349, _1352, _1355, _1358));
    float _1457;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1433 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1039, _1043, _1046, _1049));
        float _1437 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1041, _1044, _1047, _1050));
        float _1441 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1042, _1045, _1048, _1051));
        float _1448 = dot(vec4(cbModelParam._m0[39u]), vec4(_1417, _1418, _1419, 1.0));
        _1457 = dot(vec3(isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)), isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1448) ? 0.0 : (isnan(0.0) ? _1448 : max(0.0, _1448))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1457 = 1.0;
    }
    float _1468;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1459 = dot(vec4(cbModelParam._m0[40u]), vec4(_1417, _1418, _1419, 1.0));
        _1468 = dot(vec3(isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)), isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)), isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1459) ? 0.0 : (isnan(0.0) ? _1459 : max(0.0, _1459))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1468 = 1.0;
    }
    float _1472 = (_1468 * cbModelParam._m0[1u].x) + (_1457 * (1.0 - cbModelParam._m0[1u].x));
    float _1482 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _532);
    float _1483 = isnan(_1482) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1482 : min(cbModelParam._m0[25u].z, _1482));
    float _1563;
    float _1565;
    float _1567;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1530 = fma(_737, cbModelParam._m0[13u].z, fma(_733, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _729)) + cbModelParam._m0[13u].w;
        float _1534 = fma(_737, cbModelParam._m0[14u].z, fma(_733, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _729)) + cbModelParam._m0[14u].w;
        float _1538 = fma(_737, cbModelParam._m0[15u].z, fma(_733, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _729)) + cbModelParam._m0[15u].w;
        float _1541 = fma(_675, cbModelParam._m0[13u].z, fma(_674, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _673));
        float _1544 = fma(_675, cbModelParam._m0[14u].z, fma(_674, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _673));
        float _1547 = fma(_675, cbModelParam._m0[15u].z, fma(_674, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _673));
        float _1575;
        if (_1541 > 0.0)
        {
            _1575 = abs((1.0 - _1530) / _1541);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1541 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1530 + 1.0) / _1541);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1575 = frontier_phi_14_12_ladder;
        }
        float _1782;
        if (_1544 > 0.0)
        {
            _1782 = abs((1.0 - _1534) / _1544);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1534 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1782 = frontier_phi_23_19_ladder;
        }
        float _2036;
        if (_1547 > 0.0)
        {
            _2036 = abs((1.0 - _1538) / _1547);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1547 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1538 + 1.0) / _1547);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2036 = frontier_phi_35_30_ladder;
        }
        float _2038 = isnan(_1782) ? _1575 : (isnan(_1575) ? _1782 : min(_1575, _1782));
        float _2039 = isnan(_2036) ? _2038 : (isnan(_2038) ? _2036 : min(_2038, _2036));
        float _2043 = (_2039 * _1541) + _1530;
        float _2044 = (_2039 * _1544) + _1534;
        float _2045 = (_2039 * _1547) + _1538;
        float _2046 = _2039 * 9.9999997473787516355514526367188e-05;
        float _2048 = (-1.0) - _2046;
        float _2050 = _2046 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2045 > _2050) || ((_2045 < _2048) || ((_2044 > _2050) || ((_2044 < _2048) || ((_2043 < _2048) || (_2043 > _2050))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2173 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2045, cbModelParam._m0[9u].z, fma(_2044, cbModelParam._m0[9u].y, _2043 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2045, cbModelParam._m0[10u].z, fma(_2044, cbModelParam._m0[10u].y, _2043 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2045, cbModelParam._m0[11u].z, fma(_2044, cbModelParam._m0[11u].y, _2043 * cbModelParam._m0[11u].x))), _1483);
            frontier_phi_13_35_ladder = _2173.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2173.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2173.x * cbModelParam._m0[1u].y;
        }
        _1563 = frontier_phi_13_35_ladder_2;
        _1565 = frontier_phi_13_35_ladder_1;
        _1567 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1551 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_673, _674, _675), _1483);
        _1563 = _1551.x * cbModelParam._m0[1u].y;
        _1565 = _1551.y * cbModelParam._m0[1u].y;
        _1567 = _1551.z * cbModelParam._m0[1u].y;
    }
    float _1571 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _532);
    float _1572 = isnan(_1571) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1571 : min(cbModelParam._m0[25u].w, _1571));
    float _1665;
    float _1667;
    float _1669;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1629 = fma(_737, cbModelParam._m0[21u].z, fma(_733, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _729)) + cbModelParam._m0[21u].w;
        float _1633 = fma(_737, cbModelParam._m0[22u].z, fma(_733, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _729)) + cbModelParam._m0[22u].w;
        float _1637 = fma(_737, cbModelParam._m0[23u].z, fma(_733, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _729)) + cbModelParam._m0[23u].w;
        float _1640 = fma(_675, cbModelParam._m0[21u].z, fma(_674, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _673));
        float _1643 = fma(_675, cbModelParam._m0[22u].z, fma(_674, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _673));
        float _1646 = fma(_675, cbModelParam._m0[23u].z, fma(_674, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _673));
        float _1787;
        if (_1640 > 0.0)
        {
            _1787 = abs((1.0 - _1629) / _1640);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1629 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1787 = frontier_phi_25_21_ladder;
        }
        float _2063;
        if (_1643 > 0.0)
        {
            _2063 = abs((1.0 - _1633) / _1643);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1633 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2063 = frontier_phi_37_32_ladder;
        }
        float _2276;
        if (_1646 > 0.0)
        {
            _2276 = abs((1.0 - _1637) / _1646);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1646 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1637 + 1.0) / _1646);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2276 = frontier_phi_46_43_ladder;
        }
        float _2278 = isnan(_2063) ? _1787 : (isnan(_1787) ? _2063 : min(_1787, _2063));
        float _2279 = isnan(_2276) ? _2278 : (isnan(_2278) ? _2276 : min(_2278, _2276));
        float _2283 = (_2279 * _1640) + _1629;
        float _2284 = (_2279 * _1643) + _1633;
        float _2285 = (_2279 * _1646) + _1637;
        float _2286 = _2279 * 9.9999997473787516355514526367188e-05;
        float _2287 = (-1.0) - _2286;
        float _2289 = _2286 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2285 > _2289) || ((_2285 < _2287) || ((_2284 > _2289) || ((_2284 < _2287) || ((_2283 < _2287) || (_2283 > _2289))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2515 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2285, cbModelParam._m0[17u].z, fma(_2284, cbModelParam._m0[17u].y, _2283 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2285, cbModelParam._m0[18u].z, fma(_2284, cbModelParam._m0[18u].y, _2283 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2285, cbModelParam._m0[19u].z, fma(_2284, cbModelParam._m0[19u].y, _2283 * cbModelParam._m0[19u].x))), _1572);
            frontier_phi_22_46_ladder = _2515.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2515.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2515.x * cbModelParam._m0[1u].z;
        }
        _1665 = frontier_phi_22_46_ladder_2;
        _1667 = frontier_phi_22_46_ladder_1;
        _1669 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1649 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_673, _674, _675), _1572);
        _1665 = _1649.x * cbModelParam._m0[1u].z;
        _1667 = _1649.y * cbModelParam._m0[1u].z;
        _1669 = _1649.z * cbModelParam._m0[1u].z;
    }
    float _1682 = (((_700 * _651) + _701) * _665) * ((cbModelParam._m0[1u].w * (_1665 - _1563)) + _1563);
    float _1684 = (((_700 * _652) + _701) * _665) * ((cbModelParam._m0[1u].w * (_1667 - _1565)) + _1565);
    float _1686 = (((_700 * _653) + _701) * _665) * ((cbModelParam._m0[1u].w * (_1669 - _1567)) + _1567);
    float _1689 = fma(_1686, cbSceneParam._m0[89u].z, fma(_1684, cbSceneParam._m0[89u].y, _1682 * cbSceneParam._m0[89u].x));
    float _1692 = fma(_1686, cbSceneParam._m0[90u].z, fma(_1684, cbSceneParam._m0[90u].y, _1682 * cbSceneParam._m0[90u].x));
    float _1695 = fma(_1686, cbSceneParam._m0[91u].z, fma(_1684, cbSceneParam._m0[91u].y, _1682 * cbSceneParam._m0[91u].x));
    uvec4 _1705 = floatBitsToUint(cbInstanceData._m0[_556 + 5u]);
    uint _1707 = _1705.x * 14u;
    uint _1708 = _1707 + 13u;
    float _1715 = _665 + (-1.0);
    float _1720 = (cbLight._m0[_1708].x * _1715) + 1.0;
    float _1721 = (cbLight._m0[_1708].y * _1715) + 1.0;
    float _1722 = (cbLight._m0[_1708].z * _1715) + 1.0;
    float _1723 = (cbLight._m0[_1708].w * _1715) + 1.0;
    uint _1724 = _1707 + 5u;
    float _1730 = isnan(1.0) ? _1721 : (isnan(_1721) ? 1.0 : min(_1721, 1.0));
    uint _1734 = _1707 + 4u;
    float _1741 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
    uint _1745 = _1707 | 1u;
    float _1756 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_371, _372, _373));
    float _1759 = dot(vec3(cbLight._m0[_1745].xyz), vec3(_371, _372, _373));
    float _3920 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _3931 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _1764 = (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * 0.3183098733425140380859375;
    float _1766 = (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * 0.3183098733425140380859375;
    float _1773 = ((cbLight._m0[_1724].x * _1730) * _1766) + ((cbLight._m0[_1734].x * _1741) * _1764);
    float _1774 = ((_1730 * cbLight._m0[_1724].y) * _1766) + ((_1741 * cbLight._m0[_1734].y) * _1764);
    float _1775 = ((_1730 * cbLight._m0[_1724].z) * _1766) + ((_1741 * cbLight._m0[_1734].z) * _1764);
    uvec4 _1779 = floatBitsToUint(cbLight._m0[_1707 + 12u]);
    bool _1781 = _1779.x == 0u;
    float _1792;
    float _1794;
    float _1796;
    if (_1781)
    {
        _1792 = _1773;
        _1794 = _1774;
        _1796 = _1775;
    }
    else
    {
        uint _1800 = _1707 + 6u;
        float _1816 = (dot(vec3(cbLight._m0[_1707 + 2u].xyz), vec3(_371, _372, _373)) * 0.5) + 0.5;
        float _1817 = _1816 * _1816;
        float _3942 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1818 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1819 = isnan(1.0) ? _1722 : (isnan(_1722) ? 1.0 : min(_1722, 1.0));
        _1792 = (((cbLight._m0[_1800].x * 0.3183098733425140380859375) * _1818) * _1819) + _1773;
        _1794 = (((cbLight._m0[_1800].y * 0.3183098733425140380859375) * _1818) * _1819) + _1774;
        _1796 = (((cbLight._m0[_1800].z * 0.3183098733425140380859375) * _1818) * _1819) + _1775;
    }
    bool _1799 = _1779.y == 0u;
    float _1837;
    float _1839;
    float _1841;
    if (_1799)
    {
        _1837 = _1792;
        _1839 = _1794;
        _1841 = _1796;
    }
    else
    {
        uint _2007 = _1707 + 7u;
        float _2023 = (dot(vec3(cbLight._m0[_1707 + 3u].xyz), vec3(_371, _372, _373)) * 0.5) + 0.5;
        float _2024 = _2023 * _2023;
        float _3958 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        float _2025 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _2026 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
        _1837 = (((cbLight._m0[_2007].x * 0.3183098733425140380859375) * _2025) * _2026) + _1792;
        _1839 = (((cbLight._m0[_2007].y * 0.3183098733425140380859375) * _2025) * _2026) + _1794;
        _1841 = (((cbLight._m0[_2007].z * 0.3183098733425140380859375) * _2025) * _2026) + _1796;
    }
    uint _1844 = _1707 + 8u;
    float _1857 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1707].w)) * _532) * 0.949999988079071044921875);
    float _1858 = _1857 * _1857;
    float _1859 = cbLight._m0[_1707].x + _442;
    float _1860 = cbLight._m0[_1707].y + _443;
    float _1861 = cbLight._m0[_1707].z + _444;
    float _1865 = inversesqrt(dot(vec3(_1859, _1860, _1861), vec3(_1859, _1860, _1861)));
    float _1866 = _1865 * _1859;
    float _1867 = _1865 * _1860;
    float _1868 = _1865 * _1861;
    float _1869 = dot(vec3(_371, _372, _373), vec3(cbLight._m0[_1707].xyz));
    float _3974 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1872 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _3985 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _1873 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _1874 = dot(vec3(_371, _372, _373), vec3(_1866, _1867, _1868));
    float _3996 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1877 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _1878 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_1866, _1867, _1868));
    float _4007 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1882 = _1858 * _1858;
    float _1886 = ((_1877 * _1877) * (_1882 + (-1.0))) + 1.0;
    float _1894 = exp2(log2(1.0 - (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) * 5.0);
    float _1895 = 0.959999978542327880859375 - _648;
    float _1897 = 0.959999978542327880859375 - _649;
    float _1898 = 0.959999978542327880859375 - _650;
    float _1905 = 1.0 - _1858;
    float _1916 = (0.5 / (((_1873 * ((_1872 * _1905) + _1858)) + 9.9999999392252902907785028219223e-09) + (((_1873 * _1905) + _1858) * _1872))) * _1872;
    float _4018 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1918 = (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1882 / ((_1886 * _1886) * 3.141590118408203125));
    uint _1929 = _1707 + 9u;
    float _1940 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1745].w)) * _532) * 0.949999988079071044921875);
    float _1941 = _1940 * _1940;
    float _1942 = cbLight._m0[_1745].x + _442;
    float _1943 = cbLight._m0[_1745].y + _443;
    float _1944 = cbLight._m0[_1745].z + _444;
    float _1948 = inversesqrt(dot(vec3(_1942, _1943, _1944), vec3(_1942, _1943, _1944)));
    float _1949 = _1948 * _1942;
    float _1950 = _1948 * _1943;
    float _1951 = _1948 * _1944;
    float _1952 = dot(vec3(_371, _372, _373), vec3(cbLight._m0[_1745].xyz));
    float _4029 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1955 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _1956 = dot(vec3(_371, _372, _373), vec3(_1949, _1950, _1951));
    float _4040 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1959 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _1960 = dot(vec3(cbLight._m0[_1745].xyz), vec3(_1949, _1950, _1951));
    float _4051 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _1964 = _1941 * _1941;
    float _1968 = ((_1959 * _1959) * (_1964 + (-1.0))) + 1.0;
    float _1975 = exp2(log2(1.0 - (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) * 5.0);
    float _1982 = 1.0 - _1941;
    float _1992 = (0.5 / (((_1873 * ((_1955 * _1982) + _1941)) + 9.9999999392252902907785028219223e-09) + (((_1873 * _1982) + _1941) * _1955))) * _1955;
    float _4062 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1994 = (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (_1964 / ((_1968 * _1968) * 3.141590118408203125));
    float _2004 = (((((_1975 * _1895) + _651) * cbLight._m0[_1929].x) * _1994) * _1730) + (((((_1894 * _1895) + _651) * cbLight._m0[_1844].x) * _1918) * _1741);
    float _2005 = (((((_1975 * _1897) + _652) * cbLight._m0[_1929].y) * _1994) * _1730) + (((((_1894 * _1897) + _652) * cbLight._m0[_1844].y) * _1918) * _1741);
    float _2006 = (((((_1975 * _1898) + _653) * cbLight._m0[_1929].z) * _1994) * _1730) + (((((_1894 * _1898) + _653) * cbLight._m0[_1844].z) * _1918) * _1741);
    float _2068;
    float _2070;
    float _2072;
    if (_1781)
    {
        _2068 = _2004;
        _2070 = _2005;
        _2072 = _2006;
    }
    else
    {
        uint _2074 = _1707 + 2u;
        uint _2078 = _1707 + 10u;
        float _2092 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2074].w)) * _532) * 0.949999988079071044921875);
        float _2093 = _2092 * _2092;
        float _2094 = cbLight._m0[_2074].x + _442;
        float _2095 = cbLight._m0[_2074].y + _443;
        float _2096 = cbLight._m0[_2074].z + _444;
        float _2100 = inversesqrt(dot(vec3(_2094, _2095, _2096), vec3(_2094, _2095, _2096)));
        float _2101 = _2100 * _2094;
        float _2102 = _2100 * _2095;
        float _2103 = _2100 * _2096;
        float _2104 = dot(vec3(_371, _372, _373), vec3(cbLight._m0[_2074].xyz));
        float _4073 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2107 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _2108 = dot(vec3(_371, _372, _373), vec3(_2101, _2102, _2103));
        float _4084 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2111 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _2112 = dot(vec3(cbLight._m0[_2074].xyz), vec3(_2101, _2102, _2103));
        float _4095 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2116 = _2093 * _2093;
        float _2120 = ((_2111 * _2111) * (_2116 + (-1.0))) + 1.0;
        float _2127 = exp2(log2(1.0 - (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) * 5.0);
        float _2134 = 1.0 - _2093;
        float _2144 = (0.5 / (((_1873 * ((_2107 * _2134) + _2093)) + 9.9999999392252902907785028219223e-09) + (((_1873 * _2134) + _2093) * _2107))) * _2107;
        float _4106 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2146 = (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_2116 / ((_2120 * _2120) * 3.141590118408203125));
        float _2147 = isnan(1.0) ? _1722 : (isnan(_1722) ? 1.0 : min(_1722, 1.0));
        _2068 = (((((_2127 * _1895) + _651) * cbLight._m0[_2078].x) * _2146) * _2147) + _2004;
        _2070 = (((((_2127 * _1897) + _652) * cbLight._m0[_2078].y) * _2146) * _2147) + _2005;
        _2072 = (((((_2127 * _1898) + _653) * cbLight._m0[_2078].z) * _2146) * _2147) + _2006;
    }
    float _2182;
    float _2184;
    float _2186;
    if (_1799)
    {
        _2182 = _2068;
        _2184 = _2070;
        _2186 = _2072;
    }
    else
    {
        uint _2193 = _1707 + 3u;
        uint _2197 = _1707 + 11u;
        float _2211 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2193].w)) * _532) * 0.949999988079071044921875);
        float _2212 = _2211 * _2211;
        float _2213 = cbLight._m0[_2193].x + _442;
        float _2214 = cbLight._m0[_2193].y + _443;
        float _2215 = cbLight._m0[_2193].z + _444;
        float _2219 = inversesqrt(dot(vec3(_2213, _2214, _2215), vec3(_2213, _2214, _2215)));
        float _2220 = _2219 * _2213;
        float _2221 = _2219 * _2214;
        float _2222 = _2219 * _2215;
        float _2223 = dot(vec3(_371, _372, _373), vec3(cbLight._m0[_2193].xyz));
        float _4122 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2226 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _2227 = dot(vec3(_371, _372, _373), vec3(_2220, _2221, _2222));
        float _4133 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
        float _2230 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _2231 = dot(vec3(cbLight._m0[_2193].xyz), vec3(_2220, _2221, _2222));
        float _4144 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2235 = _2212 * _2212;
        float _2239 = ((_2230 * _2230) * (_2235 + (-1.0))) + 1.0;
        float _2246 = exp2(log2(1.0 - (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * 5.0);
        float _2253 = 1.0 - _2212;
        float _2263 = (0.5 / (((_1873 * ((_2226 * _2253) + _2212)) + 9.9999999392252902907785028219223e-09) + (((_1873 * _2253) + _2212) * _2226))) * _2226;
        float _4155 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        float _2265 = (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_2235 / ((_2239 * _2239) * 3.141590118408203125));
        float _2266 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
        _2182 = (((((_2246 * _1895) + _651) * cbLight._m0[_2197].x) * _2265) * _2266) + _2068;
        _2184 = (((((_2246 * _1897) + _652) * cbLight._m0[_2197].y) * _2265) * _2266) + _2070;
        _2186 = (((((_2246 * _1898) + _653) * cbLight._m0[_2197].z) * _2265) * _2266) + _2072;
    }
    float _2401;
    float _2403;
    float _2405;
    float _2407;
    float _2409;
    float _2411;
    if (_1705.y == 0u)
    {
        float _2341 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2342 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2341;
        float _2343 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2341;
        float _2344 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2341;
        uvec4 _2356 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2357 = _2356.x;
        uint _2368 = uint((float(_2356.y) * floor(float(uint(cbSceneParam._m0[85u].y * _450) / _2357))) + floor(float(uint(cbSceneParam._m0[85u].x * _449) / _2357)));
        float _2378 = (log2(_2344 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2379 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        uint _2382 = uint(isnan(14.0) ? _2379 : (isnan(_2379) ? 14.0 : min(_2379, 14.0)));
        uvec4 _2387 = texelFetch(g_lightClusterGridBuffer, int(((_2382 << 2u) + (_2368 << 6u)) >> 2u));
        uint _2388 = _2387.x;
        uint _2389 = _2356.z;
        float _2520;
        float _2522;
        float _2524;
        float _2526;
        float _2528;
        float _2530;
        if (((((1u << ((_2389 >> 4u) & 15u)) + 4294967295u) & _2388) == 0u) || ((_2389 & 240u) == 0u))
        {
            _2520 = 0.0;
            _2522 = 0.0;
            _2524 = 0.0;
            _2526 = 0.0;
            _2528 = 0.0;
            _2530 = 0.0;
        }
        else
        {
            float _2521;
            float _2523;
            float _2525;
            float _2527;
            float _2529;
            float _2531;
            float _2673 = 0.0;
            float _2674 = 0.0;
            float _2675 = 0.0;
            float _2676 = 0.0;
            float _2677 = 0.0;
            float _2678 = 0.0;
            uint _2679 = 0u;
            uint _2688;
            bool _2689;
            for (;;)
            {
                _2688 = texelFetch(g_lightClassification, int((((_2382 << 5u) + (_2368 << 9u)) + (_2679 << 2u)) >> 2u)).x;
                _2689 = _2688 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2689)
                {
                    frontier_phi_61_pred = _2673;
                    frontier_phi_61_pred_1 = _2678;
                    frontier_phi_61_pred_2 = _2677;
                    frontier_phi_61_pred_3 = _2676;
                    frontier_phi_61_pred_4 = _2675;
                    frontier_phi_61_pred_5 = _2674;
                }
                else
                {
                    float _2797;
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    uint _2803;
                    _2797 = _2673;
                    _2798 = _2674;
                    _2799 = _2675;
                    _2800 = _2676;
                    _2801 = _2677;
                    _2802 = _2678;
                    _2803 = _2688;
                    float _2729;
                    float _2730;
                    float _2731;
                    float _2732;
                    float _2733;
                    float _2734;
                    for (;;)
                    {
                        uint _2807 = uint(findLSB(_2803)) + (_2679 << 5u);
                        uint _2804 = (_2803 + 4294967295u) & _2803;
                        uint _2809 = _2807 * 48u;
                        vec4 _2823 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2809)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 3u)).x));
                        uint _2829 = (_2807 * 48u) + 4u;
                        vec4 _2842 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2829)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 3u)).x));
                        uint _2848 = (_2807 * 48u) + 8u;
                        vec3 _2859 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2848)).x, texelFetch(g_PointLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2848 + 2u)).x));
                        float _2863 = _2823.x - _2342;
                        float _2864 = _2823.y - _2343;
                        float _2865 = _2823.z - _2344;
                        float _2866 = dot(vec3(_2863, _2864, _2865), vec3(_2863, _2864, _2865));
                        float _2869 = inversesqrt(_2866);
                        float _2870 = _2869 * _2863;
                        float _2871 = _2869 * _2864;
                        float _2872 = _2869 * _2865;
                        float _2873 = dot(vec3(_475, _478, _481), vec3(_2870, _2871, _2872));
                        float _2878 = 1.0 - (_2866 * _2823.w);
                        float _4181 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
                        float _2879 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
                        float _2880 = sqrt(_2866) * _2842.w;
                        float _2883 = 1.39999997615814208984375 / (_2880 + 1.39999997615814208984375);
                        float _2884 = _2883 * _2883;
                        float _2887 = ((1.0 - _2884) * _2873) + _2884;
                        float _2890 = _2880 * _2880;
                        float _2894 = ((isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0))) * _2879) / ((_2890 * 0.699999988079071044921875) + 1.0);
                        float _2898 = (-0.0) - _2342;
                        float _2899 = (-0.0) - _2343;
                        float _2900 = (-0.0) - _2344;
                        float _2904 = inversesqrt(dot(vec3(_2898, _2899, _2900), vec3(_2898, _2899, _2900)));
                        float _2905 = _2904 * _2898;
                        float _2906 = _2904 * _2899;
                        float _2907 = _2904 * _2900;
                        float _2915 = exp2(log2(1.0 / ((_2890 * 3.5) + 5.0)) * 0.25);
                        float _2916 = 1.0 - _681;
                        float _2923 = sqrt(1.0 - ((1.0 - (_2916 * _2916)) * (1.0 - (_2915 * _2915))));
                        float _2924 = _2923 * _2923;
                        float _2925 = _2924 * _2924;
                        float _2926 = _2905 + _2870;
                        float _2927 = _2906 + _2871;
                        float _2928 = _2907 + _2872;
                        float _2932 = inversesqrt(dot(vec3(_2926, _2927, _2928), vec3(_2926, _2927, _2928)));
                        float _2936 = dot(vec3(_475, _478, _481), vec3(_2905, _2906, _2907));
                        float _4197 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                        float _2939 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
                        float _2940 = dot(vec3(_475, _478, _481), vec3(_2932 * _2926, _2932 * _2927, _2932 * _2928));
                        float _4208 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
                        float _2943 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                        float _2947 = ((_2943 * _2943) * (_2925 + (-1.0))) + 1.0;
                        float _2948 = _2883 * _2924;
                        float _2949 = _2948 * _2948;
                        float _2952 = ((1.0 - _2949) * _2873) + _2949;
                        float _4219 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
                        float _2953 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
                        float _2954 = 1.0 - _2924;
                        float _2964 = (0.5 / (((_2953 * ((_2939 * _2954) + _2924)) + 9.9999999392252902907785028219223e-09) + (((_2953 * _2954) + _2924) * _2939))) * _2953;
                        float _4230 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
                        float _2975 = (((_2925 * 3.1415927410125732421875) * (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0)))) / ((_2947 * _2947) * ((_2890 * 2.1991131305694580078125) + 3.141590118408203125))) * _2879;
                        _2732 = (_2894 * _2842.x) + _2800;
                        _2733 = (_2894 * _2842.y) + _2801;
                        _2734 = (_2894 * _2842.z) + _2802;
                        _2729 = (_2975 * _2859.x) + _2797;
                        _2730 = (_2975 * _2859.y) + _2798;
                        _2731 = (_2975 * _2859.z) + _2799;
                        if (_2804 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2797 = _2729;
                            _2798 = _2730;
                            _2799 = _2731;
                            _2800 = _2732;
                            _2801 = _2733;
                            _2802 = _2734;
                            _2803 = _2804;
                        }
                    }
                    frontier_phi_61_pred = _2729;
                    frontier_phi_61_pred_1 = _2734;
                    frontier_phi_61_pred_2 = _2733;
                    frontier_phi_61_pred_3 = _2732;
                    frontier_phi_61_pred_4 = _2731;
                    frontier_phi_61_pred_5 = _2730;
                }
                _2521 = frontier_phi_61_pred;
                _2531 = frontier_phi_61_pred_1;
                _2529 = frontier_phi_61_pred_2;
                _2527 = frontier_phi_61_pred_3;
                _2525 = frontier_phi_61_pred_4;
                _2523 = frontier_phi_61_pred_5;
                uint _2680 = _2679 + 1u;
                if (_2680 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2673 = _2521;
                    _2674 = _2523;
                    _2675 = _2525;
                    _2676 = _2527;
                    _2677 = _2529;
                    _2678 = _2531;
                    _2679 = _2680;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2520 = _2521;
            _2522 = _2523;
            _2524 = _2525;
            _2526 = _2527;
            _2528 = _2529;
            _2530 = _2531;
        }
        uvec4 _2534 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2535 = _2534.z;
        uint _2537 = (_2535 >> 8u) & 15u;
        float _2641;
        float _2643;
        float _2645;
        float _2647;
        float _2649;
        float _2651;
        if (((4294967295u << _2537) & _2388) == 0u)
        {
            _2641 = _2520;
            _2643 = _2522;
            _2645 = _2524;
            _2647 = _2526;
            _2649 = _2528;
            _2651 = _2530;
        }
        else
        {
            float _2666 = inversesqrt(dot(vec3(_2342, _2343, _2344), vec3(_2342, _2343, _2344)));
            float _2667 = _2666 * _2342;
            float _2668 = _2666 * _2343;
            float _2669 = _2666 * _2344;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2537 < ((_2535 >> 12u) & 15u))
            {
                float _2642;
                float _2644;
                float _2646;
                float _2648;
                float _2650;
                float _2652;
                float _2780 = _2520;
                float _2781 = _2522;
                float _2782 = _2524;
                float _2783 = _2526;
                float _2784 = _2528;
                float _2785 = _2530;
                uint _2786 = _2537;
                uint _2795;
                bool _2796;
                for (;;)
                {
                    _2795 = texelFetch(g_lightClassification, int((((_2382 << 5u) + (_2368 << 9u)) + (_2786 << 2u)) >> 2u)).x;
                    _2796 = _2795 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2796)
                    {
                        frontier_phi_67_pred = _2783;
                        frontier_phi_67_pred_1 = _2784;
                        frontier_phi_67_pred_2 = _2785;
                        frontier_phi_67_pred_3 = _2782;
                        frontier_phi_67_pred_4 = _2781;
                        frontier_phi_67_pred_5 = _2780;
                    }
                    else
                    {
                        float _2980;
                        float _2981;
                        float _2982;
                        float _2983;
                        float _2984;
                        float _2985;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _2993 = _2780;
                        float _2994 = _2781;
                        float _2995 = _2782;
                        float _2996 = _2783;
                        float _2997 = _2784;
                        float _2998 = _2785;
                        uint _2999 = _2795;
                        uint _3000;
                        vec4 _3025;
                        float _3026;
                        vec4 _3041;
                        vec3 _3053;
                        vec4 _3068;
                        vec4 _3084;
                        float _3131;
                        bool _3132;
                        for (;;)
                        {
                            uint _3010 = ((_2786 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2999));
                            _3000 = (_2999 + 4294967295u) & _2999;
                            uint _3012 = _3010 * 40u;
                            _3025 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3012)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 3u)).x));
                            _3026 = _3025.w;
                            uint _3028 = (_3010 * 40u) + 4u;
                            _3041 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 3u)).x));
                            uint _3043 = (_3010 * 40u) + 8u;
                            _3053 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3043)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 2u)).x));
                            uint _3055 = (_3010 * 40u) + 16u;
                            _3068 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3055)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 3u)).x));
                            uint _3071 = (_3010 * 40u) + 20u;
                            _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            uint _3087 = (_3010 * 40u) + 24u;
                            vec4 _3100 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 3u)).x));
                            uint _3106 = (_3010 * 40u) + 28u;
                            vec4 _3119 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 3u)).x));
                            _3131 = fma(_2344, _3119.z, fma(_2343, _3119.y, _3119.x * _2342)) + _3119.w;
                            _3132 = !((fma(_2344, _3100.z, fma(_2343, _3100.y, _3100.x * _2342)) + _3100.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3132)
                            {
                                float _3159 = _3025.x - _2342;
                                float _3160 = _3025.y - _2343;
                                float _3161 = _3025.z - _2344;
                                float _3162 = dot(vec3(_3159, _3160, _3161), vec3(_3159, _3160, _3161));
                                float _3165 = inversesqrt(_3162);
                                float _3166 = _3165 * _3159;
                                float _3167 = _3165 * _3160;
                                float _3168 = _3165 * _3161;
                                float _3172 = 1.0 - (_3162 / (_3026 * _3026));
                                float _4241 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                                float _3173 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                                float _3177 = sqrt(_3162) * _3041.w;
                                float _3179 = 1.39999997615814208984375 / (_3177 + 1.39999997615814208984375);
                                float _3180 = _3179 * _3179;
                                float _3183 = ((1.0 - _3180) * dot(vec3(_3166, _3167, _3168), vec3(_475, _478, _481))) + _3180;
                                float _3186 = _3177 * _3177;
                                float _3190 = (fma(_2344, _3068.z, fma(_2343, _3068.y, _3068.x * _2342)) + _3068.w) / _3131;
                                float _3191 = (fma(_2344, _3084.z, fma(_2343, _3084.y, _3084.x * _2342)) + _3084.w) / _3131;
                                float _3195 = 1.0 - dot(vec2(_3190, _3191), vec2(_3190, _3191));
                                float _4257 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                                float _3196 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                                float _3197 = _3196 * (((isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0))) * _3173) / ((_3186 * 0.699999988079071044921875) + 1.0));
                                float _3209 = exp2(log2(1.0 / ((_3186 * 3.5) + 5.0)) * 0.25);
                                float _3210 = 1.0 - _681;
                                float _3217 = sqrt(1.0 - ((1.0 - (_3210 * _3210)) * (1.0 - (_3209 * _3209))));
                                float _3218 = _3217 * _3217;
                                float _3219 = _3218 * _3218;
                                float _3220 = _3166 - _2667;
                                float _3221 = _3167 - _2668;
                                float _3222 = _3168 - _2669;
                                float _3226 = inversesqrt(dot(vec3(_3220, _3221, _3222), vec3(_3220, _3221, _3222)));
                                float _3230 = dot(vec3(_475, _478, _481), vec3((-0.0) - _2667, (-0.0) - _2668, (-0.0) - _2669));
                                float _4268 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                                float _3233 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                                float _3234 = dot(vec3(_475, _478, _481), vec3(_3226 * _3220, _3226 * _3221, _3226 * _3222));
                                float _4279 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3237 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                                float _3241 = ((_3237 * _3237) * (_3219 + (-1.0))) + 1.0;
                                float _3242 = _3179 * _3218;
                                float _3243 = _3242 * _3242;
                                float _3249 = ((1.0 - _3243) * dot(vec3(_475, _478, _481), vec3(_3166, _3167, _3168))) + _3243;
                                float _4290 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                                float _3250 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                                float _3251 = 1.0 - _3218;
                                float _3261 = (0.5 / (((_3250 * ((_3233 * _3251) + _3218)) + 9.9999999392252902907785028219223e-09) + (((_3250 * _3251) + _3218) * _3233))) * _3250;
                                float _4301 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                                float _3271 = (_3196 * _3173) * (((_3219 * 3.1415927410125732421875) * (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0)))) / ((_3241 * _3241) * ((_3186 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3271 * _3053.x;
                                frontier_phi_73_pred_1 = _3271 * _3053.y;
                                frontier_phi_73_pred_2 = _3197 * _3041.z;
                                frontier_phi_73_pred_3 = _3197 * _3041.y;
                                frontier_phi_73_pred_4 = _3197 * _3041.x;
                                frontier_phi_73_pred_5 = _3271 * _3053.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3275 = frontier_phi_73_pred;
                            _3276 = frontier_phi_73_pred_1;
                            _3280 = frontier_phi_73_pred_2;
                            _3279 = frontier_phi_73_pred_3;
                            _3278 = frontier_phi_73_pred_4;
                            _3277 = frontier_phi_73_pred_5;
                            _2983 = _3278 + _2996;
                            _2984 = _3279 + _2997;
                            _2985 = _3280 + _2998;
                            _2980 = _3275 + _2993;
                            _2981 = _3276 + _2994;
                            _2982 = _3277 + _2995;
                            if (_3000 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2993 = _2980;
                                _2994 = _2981;
                                _2995 = _2982;
                                _2996 = _2983;
                                _2997 = _2984;
                                _2998 = _2985;
                                _2999 = _3000;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2983;
                        frontier_phi_67_pred_1 = _2984;
                        frontier_phi_67_pred_2 = _2985;
                        frontier_phi_67_pred_3 = _2982;
                        frontier_phi_67_pred_4 = _2981;
                        frontier_phi_67_pred_5 = _2980;
                    }
                    _2648 = frontier_phi_67_pred;
                    _2650 = frontier_phi_67_pred_1;
                    _2652 = frontier_phi_67_pred_2;
                    _2646 = frontier_phi_67_pred_3;
                    _2644 = frontier_phi_67_pred_4;
                    _2642 = frontier_phi_67_pred_5;
                    uint _2787 = _2786 + 1u;
                    if (_2787 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2780 = _2642;
                        _2781 = _2644;
                        _2782 = _2646;
                        _2783 = _2648;
                        _2784 = _2650;
                        _2785 = _2652;
                        _2786 = _2787;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2650;
                frontier_phi_55_56_ladder_1 = _2652;
                frontier_phi_55_56_ladder_2 = _2648;
                frontier_phi_55_56_ladder_3 = _2646;
                frontier_phi_55_56_ladder_4 = _2644;
                frontier_phi_55_56_ladder_5 = _2642;
            }
            else
            {
                frontier_phi_55_56_ladder = _2528;
                frontier_phi_55_56_ladder_1 = _2530;
                frontier_phi_55_56_ladder_2 = _2526;
                frontier_phi_55_56_ladder_3 = _2524;
                frontier_phi_55_56_ladder_4 = _2522;
                frontier_phi_55_56_ladder_5 = _2520;
            }
            _2641 = frontier_phi_55_56_ladder_5;
            _2643 = frontier_phi_55_56_ladder_4;
            _2645 = frontier_phi_55_56_ladder_3;
            _2647 = frontier_phi_55_56_ladder_2;
            _2649 = frontier_phi_55_56_ladder;
            _2651 = frontier_phi_55_56_ladder_1;
        }
        float _2656 = isnan(1.0) ? _665 : (isnan(_665) ? 1.0 : min(_665, 1.0));
        _2401 = (_2656 * _2647) + _1837;
        _2403 = (_2656 * _2649) + _1839;
        _2405 = (_2656 * _2651) + _1841;
        _2407 = ((_2641 * _651) * _2656) + _2182;
        _2409 = ((_2643 * _652) * _2656) + _2184;
        _2411 = ((_2645 * _653) * _2656) + _2186;
    }
    else
    {
        _2401 = _1837;
        _2403 = _1839;
        _2405 = _1841;
        _2407 = _2182;
        _2409 = _2184;
        _2411 = _2186;
    }
    uint _2417 = _558 + uint(cbMatDynParam._m0[0u].w);
    float _2423 = cbInstanceData._m0[_2417].x * (_343 ? cbMtdParam._m0[12u].y : cbMtdParam._m0[10u].y);
    float _2424 = cbInstanceData._m0[_2417].y * (_343 ? cbMtdParam._m0[12u].z : cbMtdParam._m0[10u].z);
    float _2425 = cbInstanceData._m0[_2417].z * (_343 ? cbMtdParam._m0[12u].w : cbMtdParam._m0[10u].w);
    float _4317 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _4328 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _4339 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _4350 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _2443 = (((isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_2401 + ((isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))) * _665))) + ((_2407 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _1472)) * cbPerFrame._m0[3u].x)) + _2423;
    float _2445 = (_2424 + ((_2409 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _1472)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_2403 + ((isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))) * _665)));
    float _2447 = (_2425 + ((_2411 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _1472)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2405 + ((isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))) * _665)));
    float _4376 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2460 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
    float _2465 = cbInstanceData._m0[_556 + 6u].w * (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0)));
    float _2470 = _449 / cbSceneParam._m0[86u].x;
    float _2471 = _450 / cbSceneParam._m0[86u].y;
    vec4 _2485 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2470, _2471, (log2((isnan(cbSceneParam._m0[77u].w) ? _384 : (isnan(_384) ? cbSceneParam._m0[77u].w : min(_384, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2487 = _2485.x;
    float _2488 = _2485.y;
    float _2489 = _2485.z;
    float _2490 = _2485.w;
    float _2582;
    float _2584;
    float _2586;
    float _2588;
    if (_384 > cbSceneParam._m0[78u].w)
    {
        float _2545 = isnan(_384) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _384 : min(cbSceneParam._m0[80u].w, _384));
        float _2546 = _2545 / _384;
        float _2557 = _2546 * _435;
        float _2558 = _436 * _2546;
        float _2559 = (-0.0) - _2558;
        float _2560 = _2546 * _437;
        float _2562 = (cbSceneParam._m0[77u].w * _2559) / _2545;
        float _2563 = _2562 + cbSceneParam._m0[79u].w;
        float _2564 = cbSceneParam._m0[79u].w - _2558;
        float _2570 = sqrt(((_2557 * _2557) + (_2558 * _2558)) + (_2560 * _2560));
        float _2573 = (1.0 - (cbSceneParam._m0[77u].w / _2545)) * _2570;
        float _2578 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2580 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2742;
        if (abs((_2559 - _2562) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2742 = ((((_2563 > 0.0) ? exp2(_2578 * _2563) : (2.0 - exp2(_2580 * _2563))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2573;
        }
        else
        {
            float _2702 = 1.0 / cbSceneParam._m0[80u].x;
            float _2703 = isnan(_2564) ? _2563 : (isnan(_2563) ? _2564 : max(_2563, _2564));
            float _2704 = isnan(_2564) ? _2563 : (isnan(_2563) ? _2564 : min(_2563, _2564));
            float _2713 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : min(_2703, 0.0));
            float _2714 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : min(_2704, 0.0));
            _2742 = ((abs(_2570 / _2559) * cbSceneParam._m0[80u].y) * ((((_2713 - _2714) * 2.0) - ((exp2(_2578 * (isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0)))) - exp2(_2578 * (isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0))))) * _2702)) - ((exp2(_2580 * _2713) - exp2(_2580 * _2714)) * _2702))) + (_2573 * cbSceneParam._m0[80u].z);
        }
        vec4 _2744 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2470, _2471, 1.0), 0.0);
        float _2753 = exp2((_2742 * (-1.44269502162933349609375)) * (1.0 - _2744.w));
        float _2754 = log2(_2753);
        float _2770 = log2(_2490);
        _2582 = (exp2(_2770 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2754 * cbSceneParam._m0[78u].x)) * _2744.x) / cbSceneParam._m0[78u].x)) + _2487;
        _2584 = (exp2(_2770 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2754 * cbSceneParam._m0[78u].y)) * _2744.y) / cbSceneParam._m0[78u].y)) + _2488;
        _2586 = (exp2(_2770 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2754 * cbSceneParam._m0[78u].z)) * _2744.z) / cbSceneParam._m0[78u].z)) + _2489;
        _2588 = _2753 * _2490;
    }
    else
    {
        _2582 = _2487;
        _2584 = _2488;
        _2586 = _2489;
        _2588 = _2490;
    }
    float _2600 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2601 = _2600 == 3.0;
    float _2602 = log2(_2588);
    float _2606 = exp2(_2602 * cbSceneParam._m0[78u].x);
    float _2607 = exp2(_2602 * cbSceneParam._m0[78u].y);
    float _2608 = exp2(_2602 * cbSceneParam._m0[78u].z);
    float _2609 = _2606 * (isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0)));
    float _2610 = _2607 * (isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0)));
    float _2611 = _2608 * (isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0)));
    float _2620 = (_2600 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2620 * (_2601 ? _2609 : (_2609 + (cbSceneParam._m0[72u].w * _2582)));
    SV_Target.y = _2620 * (_2601 ? _2610 : (_2610 + (cbSceneParam._m0[72u].w * _2584)));
    SV_Target.z = _2620 * (_2601 ? _2611 : (_2611 + (cbSceneParam._m0[72u].w * _2586)));
    SV_Target.w = _2465;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2423) * _2460) * _2606) * _2620;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2424) * _2460) * _2607) * _2620;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2425) * _2460) * _2608) * _2620;
    SV_Target_1.w = _2465;
}


