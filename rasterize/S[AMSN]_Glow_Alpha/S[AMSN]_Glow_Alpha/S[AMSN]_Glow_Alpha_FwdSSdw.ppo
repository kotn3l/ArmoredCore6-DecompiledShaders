#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_Glow_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_Glow_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_Glow_Alpha_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _845;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = _197 * NORMAL.x;
    float _199 = _197 * NORMAL.y;
    float _200 = _197 * NORMAL.z;
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212;
    float _213;
    float _214;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
    }
    else
    {
        _212 = _198;
        _213 = _199;
        _214 = _200;
    }
    vec4 _228 = texture(sampler2D(S_AMSN_Glow_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _231 = _228.x;
    float _232 = _228.y;
    float _233 = _228.z;
    float _235 = _228.w * TEXCOORD_1.z;
    vec4 _251 = texture(sampler2D(S_AMSN_Glow_Alpha_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _254 = _251.x + cbMtdParam._m0[9u].x;
    vec4 _266 = texture(sampler2D(S_AMSN_Glow_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _270 = _266.z;
    float _274 = (_266.x * 2.0) + (-1.0);
    float _276 = (_266.y * 2.0) + (-1.0);
    float _277 = dot(vec2(_274, _276), vec2(_274, _276));
    float _3211 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _283 = sqrt(1.0 - (isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0))));
    float _286 = fma(_283, _212, fma(_276, _204 * TANGENT.x, (_190 * _182) * _274));
    float _289 = fma(_283, _213, fma(_276, _204 * TANGENT.y, (_190 * _183) * _274));
    float _292 = fma(_283, _214, fma(_276, _204 * TANGENT.z, (_190 * _184) * _274));
    float _296 = inversesqrt(dot(vec3(_286, _289, _292), vec3(_286, _289, _292)));
    float _297 = _296 * _286;
    float _298 = _296 * _289;
    float _299 = _296 * _292;
    float _3222 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _300 = isnan(1.0) ? _3222 : (isnan(_3222) ? 1.0 : min(_3222, 1.0));
    float _3233 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _301 = isnan(1.0) ? _3233 : (isnan(_3233) ? 1.0 : min(_3233, 1.0));
    float _3244 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3255 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3266 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3277 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _305 = isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0));
    float _321 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _363 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _373 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _363);
    float _374 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _363);
    float _375 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _363);
    float _379 = inversesqrt(dot(vec3(_373, _374, _375), vec3(_373, _374, _375)));
    float _380 = _373 * _379;
    float _381 = _374 * _379;
    float _382 = _375 * _379;
    float _388 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _389 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _410 = fma(_299, cbSceneParam._m0[5u].z, fma(_298, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _297));
    float _413 = fma(_299, cbSceneParam._m0[6u].z, fma(_298, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _297));
    float _416 = fma(_299, cbSceneParam._m0[7u].z, fma(_298, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _297));
    uint _429 = uint(roundEven(NORMAL.w)) * 13u;
    uint _432 = (_429 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _438 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3244 : (isnan(_3244) ? 1.0 : min(_3244, 1.0)))) * cbInstanceData._m0[_432].x;
    float _439 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0)))) * cbInstanceData._m0[_432].y;
    float _440 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0)))) * cbInstanceData._m0[_432].z;
    float _3288 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _441 = isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0));
    float _3299 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _442 = isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0));
    float _3310 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _443 = isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0));
    float _444 = 1.0 - _305;
    float _445 = _441 * _444;
    float _446 = _442 * _444;
    float _447 = _443 * _444;
    float _452 = (_441 + (-0.039999999105930328369140625)) * _305;
    float _453 = (_442 + (-0.039999999105930328369140625)) * _305;
    float _454 = (_443 + (-0.039999999105930328369140625)) * _305;
    float _455 = _452 + 0.039999999105930328369140625;
    float _457 = _453 + 0.039999999105930328369140625;
    float _458 = _454 + 0.039999999105930328369140625;
    vec4 _467 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _388, cbSceneParam._m0[86u].y * _389));
    float _470 = _467.x * TEXCOORD_1.w;
    float _471 = dot(vec3(_297, _298, _299), vec3(_380, _381, _382));
    float _474 = _471 * 2.0;
    float _478 = (_474 * _297) - _380;
    float _479 = (_474 * _298) - _381;
    float _480 = (_474 * _299) - _382;
    float _484 = abs(dot(vec3(_380, _381, _382), vec3(_297, _298, _299)));
    float _3321 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _486 = sqrt(_301);
    float _499 = exp2((_486 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_486 * 3.0));
    float _505 = (1.0 - _499) * ((_486 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _506 = _499 * _486;
    float _534 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _538 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _542 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _844;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _569 = fma(_542, cbModelParam._m0[26u].z, fma(_538, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _534));
        float _573 = fma(_542, cbModelParam._m0[27u].z, fma(_538, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _534));
        float _577 = fma(_542, cbModelParam._m0[28u].z, fma(_538, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _534));
        float _602 = _534 + _297;
        float _603 = _538 + _298;
        float _604 = _542 + _299;
        float _614 = fma(_604, cbModelParam._m0[26u].z, fma(_603, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _602)) - _569;
        float _615 = fma(_604, cbModelParam._m0[27u].z, fma(_603, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _602)) - _573;
        float _616 = fma(_604, cbModelParam._m0[28u].z, fma(_603, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _602)) - _577;
        float _620 = inversesqrt(dot(vec3(_614, _615, _616), vec3(_614, _615, _616)));
        float _633 = ((_620 * _614) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_569 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _634 = ((_620 * _615) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_573 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _635 = ((_620 * _616) / cbModelParam._m0[34u].z) + ((((((_577 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _638 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_633, _634, _635), 0.0);
        vec4 _645 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_633, _634, _635), 0.0);
        vec4 _652 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_633, _634, _635), 0.0);
        vec4 _659 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_633, _634, _635), 0.0);
        float _672 = exp2((_638.w + (-0.5)) * 20.0) * 2.0;
        float _673 = _672 * (_638.x + (-0.5));
        float _674 = _672 * (_638.y + (-0.5));
        float _675 = _672 * (_638.z + (-0.5));
        float _682 = exp2((_645.w + (-0.5)) * 20.0) * 2.0;
        float _683 = _682 * (_645.x + (-0.5));
        float _684 = _682 * (_645.y + (-0.5));
        float _685 = _682 * (_645.z + (-0.5));
        float _692 = exp2((_652.w + (-0.5)) * 20.0) * 2.0;
        float _693 = _692 * (_652.x + (-0.5));
        float _694 = _692 * (_652.y + (-0.5));
        float _695 = _692 * (_652.z + (-0.5));
        float _702 = exp2((_659.w + (-0.5)) * 20.0) * 2.0;
        float _703 = _702 * (_659.x + (-0.5));
        float _704 = _702 * (_659.y + (-0.5));
        float _705 = _702 * (_659.z + (-0.5));
        float _706 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _707 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _708 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _709 = _673 * 0.5;
        float _710 = _683 * 0.5;
        float _711 = _693 * 0.5;
        float _712 = dot(vec3(_709, _710, _711), vec3(_709, _710, _711));
        float _717 = (_712 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_712);
        float _726 = (dot(vec3(_297, _298, _299), vec3(_717 * _709, _717 * _710, _717 * _711)) + 1.0) * 0.5;
        float _3347 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _736 = sqrt(((_710 * _710) + (_709 * _709)) + (_711 * _711)) / (_706 + 9.9999997473787516355514526367188e-06);
        float _3358 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _737 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
        float _738 = _737 * 2.0;
        float _742 = (1.0 - _737) / (_737 + 1.0);
        float _3369 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _743 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
        float _752 = ((((1.0 - _743) * (_738 + 2.0)) * exp2(log2(isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0))) * (_738 + 1.0))) + _743) * _706;
        float _753 = _674 * 0.5;
        float _754 = _684 * 0.5;
        float _755 = _694 * 0.5;
        float _756 = dot(vec3(_753, _754, _755), vec3(_753, _754, _755));
        float _761 = (_756 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_756);
        float _769 = (dot(vec3(_297, _298, _299), vec3(_761 * _753, _761 * _754, _761 * _755)) + 1.0) * 0.5;
        float _3380 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _778 = sqrt(((_754 * _754) + (_753 * _753)) + (_755 * _755)) / (_707 + 9.9999997473787516355514526367188e-06);
        float _3391 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _779 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
        float _780 = _779 * 2.0;
        float _784 = (1.0 - _779) / (_779 + 1.0);
        float _3402 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
        float _794 = ((((1.0 - _785) * (_780 + 2.0)) * exp2(log2(isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0))) * (_780 + 1.0))) + _785) * _707;
        float _795 = _675 * 0.5;
        float _796 = _685 * 0.5;
        float _797 = _695 * 0.5;
        float _798 = dot(vec3(_795, _796, _797), vec3(_795, _796, _797));
        float _803 = (_798 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_798);
        float _811 = (dot(vec3(_297, _298, _299), vec3(_803 * _795, _803 * _796, _803 * _797)) + 1.0) * 0.5;
        float _3413 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _820 = sqrt(((_796 * _796) + (_795 * _795)) + (_797 * _797)) / (_708 + 9.9999997473787516355514526367188e-06);
        float _3424 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _821 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
        float _822 = _821 * 2.0;
        float _826 = (1.0 - _821) / (_821 + 1.0);
        float _3435 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _827 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
        float _836 = ((((1.0 - _827) * (_822 + 2.0)) * exp2(log2(isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0))) * (_822 + 1.0))) + _827) * _708;
        _844 = _675;
        _846 = _674;
        _847 = _673;
        _848 = _685;
        _849 = _684;
        _850 = _683;
        _851 = _695;
        _852 = _694;
        _853 = _693;
        _854 = _708;
        _855 = _707;
        _856 = _706;
        _857 = cbModelParam._m0[36u].z * (isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0)));
        _858 = cbModelParam._m0[36u].z * (isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0)));
        _859 = cbModelParam._m0[36u].z * (isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0)));
    }
    else
    {
        _844 = _845;
        _846 = _845;
        _847 = _845;
        _848 = _845;
        _849 = _845;
        _850 = _845;
        _851 = _845;
        _852 = _845;
        _853 = _845;
        _854 = _845;
        _855 = _845;
        _856 = _845;
        _857 = 0.0;
        _858 = 0.0;
        _859 = 0.0;
    }
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _885 = fma(_542, cbModelParam._m0[30u].z, fma(_538, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _534));
        float _889 = fma(_542, cbModelParam._m0[31u].z, fma(_538, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _534));
        float _893 = fma(_542, cbModelParam._m0[32u].z, fma(_538, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _534));
        float _916 = _534 + _297;
        float _917 = _538 + _298;
        float _918 = _542 + _299;
        float _928 = fma(_918, cbModelParam._m0[30u].z, fma(_917, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _916)) - _885;
        float _929 = fma(_918, cbModelParam._m0[31u].z, fma(_917, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _916)) - _889;
        float _930 = fma(_918, cbModelParam._m0[32u].z, fma(_917, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _916)) - _893;
        float _934 = inversesqrt(dot(vec3(_928, _929, _930), vec3(_928, _929, _930)));
        float _947 = ((_934 * _928) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_885 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _948 = ((_934 * _929) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_889 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _949 = ((_934 * _930) / cbModelParam._m0[35u].z) + ((((((_893 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _951 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _958 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        float _984 = exp2((_951.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_951.x + (-0.5));
        float _986 = _984 * (_951.y + (-0.5));
        float _987 = _984 * (_951.z + (-0.5));
        float _994 = exp2((_958.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_958.x + (-0.5));
        float _996 = _994 * (_958.y + (-0.5));
        float _997 = _994 * (_958.z + (-0.5));
        float _1004 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_965.x + (-0.5));
        float _1006 = _1004 * (_965.y + (-0.5));
        float _1007 = _1004 * (_965.z + (-0.5));
        float _1014 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_972.x + (-0.5));
        float _1016 = _1014 * (_972.y + (-0.5));
        float _1017 = _1014 * (_972.z + (-0.5));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = _985 * 0.5;
        float _1022 = _995 * 0.5;
        float _1023 = _1005 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1037 = (dot(vec3(_297, _298, _299), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3476 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1046 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3487 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3498 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0))) * (_1048 + 1.0))) + _1053) * _1018;
        float _1063 = _986 * 0.5;
        float _1064 = _996 * 0.5;
        float _1065 = _1006 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1079 = (dot(vec3(_297, _298, _299), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _3509 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1088 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3520 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3531 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0))) * (_1090 + 1.0))) + _1095) * _1019;
        float _1105 = _987 * 0.5;
        float _1106 = _997 * 0.5;
        float _1107 = _1007 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1121 = (dot(vec3(_297, _298, _299), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3542 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1130 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3553 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _3564 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))) * (_1132 + 1.0))) + _1137) * _1020;
        _1154 = _987;
        _1155 = _986;
        _1156 = _985;
        _1157 = _997;
        _1158 = _996;
        _1159 = _995;
        _1160 = _1007;
        _1161 = _1006;
        _1162 = _1005;
        _1163 = _1020;
        _1164 = _1019;
        _1165 = _1018;
        _1166 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
        _1167 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
        _1168 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
    }
    else
    {
        _1154 = _845;
        _1155 = _845;
        _1156 = _845;
        _1157 = _845;
        _1158 = _845;
        _1159 = _845;
        _1160 = _845;
        _1161 = _845;
        _1162 = _845;
        _1163 = _845;
        _1164 = _845;
        _1165 = _845;
        _1166 = 0.0;
        _1167 = 0.0;
        _1168 = 0.0;
    }
    float _1178 = (cbModelParam._m0[1u].x * (_1166 - _857)) + _857;
    float _1179 = (cbModelParam._m0[1u].x * (_1167 - _858)) + _858;
    float _1180 = (cbModelParam._m0[1u].x * (_1168 - _859)) + _859;
    float _1201 = fma(_1180, cbSceneParam._m0[89u].z, fma(_1179, cbSceneParam._m0[89u].y, _1178 * cbSceneParam._m0[89u].x));
    float _1204 = fma(_1180, cbSceneParam._m0[90u].z, fma(_1179, cbSceneParam._m0[90u].y, _1178 * cbSceneParam._m0[90u].x));
    float _1207 = fma(_1180, cbSceneParam._m0[91u].z, fma(_1179, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1178));
    float _1222 = _478 * 0.5;
    float _1223 = _479 * 0.5;
    float _1224 = _480 * 0.5;
    float _1225 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_1156, _1159, _1162, _1165));
    float _1228 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_1155, _1158, _1161, _1164));
    float _1231 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_1154, _1157, _1160, _1163));
    float _1265;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1238 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_844, _848, _851, _854));
        float _1242 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_846, _849, _852, _855));
        float _1246 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_847, _850, _853, _856));
        float _1253 = dot(vec4(cbModelParam._m0[39u]), vec4(_1222, _1223, _1224, 1.0));
        _1265 = dot(vec3(isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)), isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)), isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1253) ? 0.0 : (isnan(0.0) ? _1253 : max(0.0, _1253))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1265 = 1.0;
    }
    float _1276;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1267 = dot(vec4(cbModelParam._m0[40u]), vec4(_1222, _1223, _1224, 1.0));
        _1276 = dot(vec3(isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)), isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)), isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1267) ? 0.0 : (isnan(0.0) ? _1267 : max(0.0, _1267))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1276 = 1.0;
    }
    float _1280 = (_1276 * cbModelParam._m0[1u].x) + (_1265 * (1.0 - cbModelParam._m0[1u].x));
    float _1290 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _301);
    float _1291 = isnan(_1290) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1290 : min(cbModelParam._m0[25u].z, _1290));
    float _1373;
    float _1375;
    float _1377;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1340 = fma(_542, cbModelParam._m0[13u].z, fma(_538, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _534)) + cbModelParam._m0[13u].w;
        float _1344 = fma(_542, cbModelParam._m0[14u].z, fma(_538, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _534)) + cbModelParam._m0[14u].w;
        float _1348 = fma(_542, cbModelParam._m0[15u].z, fma(_538, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _534)) + cbModelParam._m0[15u].w;
        float _1351 = fma(_480, cbModelParam._m0[13u].z, fma(_479, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _478));
        float _1354 = fma(_480, cbModelParam._m0[14u].z, fma(_479, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _478));
        float _1357 = fma(_480, cbModelParam._m0[15u].z, fma(_479, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _478));
        float _1385;
        if (_1351 > 0.0)
        {
            _1385 = abs((1.0 - _1340) / _1351);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1351 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1340 + 1.0) / _1351);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1385 = frontier_phi_16_14_ladder;
        }
        float _1614;
        if (_1354 > 0.0)
        {
            _1614 = abs((1.0 - _1344) / _1354);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1354 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1344 + 1.0) / _1354);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1614 = frontier_phi_25_21_ladder;
        }
        float _1871;
        if (_1357 > 0.0)
        {
            _1871 = abs((1.0 - _1348) / _1357);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1357 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1348 + 1.0) / _1357);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1871 = frontier_phi_37_32_ladder;
        }
        float _1873 = isnan(_1614) ? _1385 : (isnan(_1385) ? _1614 : min(_1385, _1614));
        float _1874 = isnan(_1871) ? _1873 : (isnan(_1873) ? _1871 : min(_1873, _1871));
        float _1878 = (_1874 * _1351) + _1340;
        float _1879 = (_1874 * _1354) + _1344;
        float _1880 = (_1874 * _1357) + _1348;
        float _1881 = _1874 * 9.9999997473787516355514526367188e-05;
        float _1883 = (-1.0) - _1881;
        float _1885 = _1881 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1880 > _1885) || ((_1880 < _1883) || ((_1879 > _1885) || ((_1879 < _1883) || ((_1878 < _1883) || (_1878 > _1885))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2008 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1880, cbModelParam._m0[9u].z, fma(_1879, cbModelParam._m0[9u].y, _1878 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1880, cbModelParam._m0[10u].z, fma(_1879, cbModelParam._m0[10u].y, _1878 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1880, cbModelParam._m0[11u].z, fma(_1879, cbModelParam._m0[11u].y, _1878 * cbModelParam._m0[11u].x))), _1291);
            frontier_phi_15_37_ladder = _2008.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2008.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2008.x * cbModelParam._m0[1u].y;
        }
        _1373 = frontier_phi_15_37_ladder_2;
        _1375 = frontier_phi_15_37_ladder_1;
        _1377 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1361 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_478, _479, _480), _1291);
        _1373 = _1361.x * cbModelParam._m0[1u].y;
        _1375 = _1361.y * cbModelParam._m0[1u].y;
        _1377 = _1361.z * cbModelParam._m0[1u].y;
    }
    float _1381 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _301);
    float _1382 = isnan(_1381) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1381 : min(cbModelParam._m0[25u].w, _1381));
    float _1475;
    float _1477;
    float _1479;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1439 = fma(_542, cbModelParam._m0[21u].z, fma(_538, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _534)) + cbModelParam._m0[21u].w;
        float _1443 = fma(_542, cbModelParam._m0[22u].z, fma(_538, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _534)) + cbModelParam._m0[22u].w;
        float _1447 = fma(_542, cbModelParam._m0[23u].z, fma(_538, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _534)) + cbModelParam._m0[23u].w;
        float _1450 = fma(_480, cbModelParam._m0[21u].z, fma(_479, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _478));
        float _1453 = fma(_480, cbModelParam._m0[22u].z, fma(_479, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _478));
        float _1456 = fma(_480, cbModelParam._m0[23u].z, fma(_479, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _478));
        float _1619;
        if (_1450 > 0.0)
        {
            _1619 = abs((1.0 - _1439) / _1450);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1450 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1439 + 1.0) / _1450);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1619 = frontier_phi_27_23_ladder;
        }
        float _1898;
        if (_1453 > 0.0)
        {
            _1898 = abs((1.0 - _1443) / _1453);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1453 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1443 + 1.0) / _1453);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1898 = frontier_phi_39_34_ladder;
        }
        float _2111;
        if (_1456 > 0.0)
        {
            _2111 = abs((1.0 - _1447) / _1456);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1456 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1447 + 1.0) / _1456);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2111 = frontier_phi_48_45_ladder;
        }
        float _2113 = isnan(_1898) ? _1619 : (isnan(_1619) ? _1898 : min(_1619, _1898));
        float _2114 = isnan(_2111) ? _2113 : (isnan(_2113) ? _2111 : min(_2113, _2111));
        float _2118 = (_2114 * _1450) + _1439;
        float _2119 = (_2114 * _1453) + _1443;
        float _2120 = (_2114 * _1456) + _1447;
        float _2121 = _2114 * 9.9999997473787516355514526367188e-05;
        float _2122 = (-1.0) - _2121;
        float _2124 = _2121 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2120 > _2124) || ((_2120 < _2122) || ((_2119 > _2124) || ((_2119 < _2122) || ((_2118 < _2122) || (_2118 > _2124))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2323 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2120, cbModelParam._m0[17u].z, fma(_2119, cbModelParam._m0[17u].y, _2118 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2120, cbModelParam._m0[18u].z, fma(_2119, cbModelParam._m0[18u].y, _2118 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2120, cbModelParam._m0[19u].z, fma(_2119, cbModelParam._m0[19u].y, _2118 * cbModelParam._m0[19u].x))), _1382);
            frontier_phi_24_48_ladder = _2323.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2323.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2323.x * cbModelParam._m0[1u].z;
        }
        _1475 = frontier_phi_24_48_ladder_2;
        _1477 = frontier_phi_24_48_ladder_1;
        _1479 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1459 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_478, _479, _480), _1382);
        _1475 = _1459.x * cbModelParam._m0[1u].z;
        _1477 = _1459.y * cbModelParam._m0[1u].z;
        _1479 = _1459.z * cbModelParam._m0[1u].z;
    }
    float _1492 = (((_505 * _455) + _506) * _470) * ((cbModelParam._m0[1u].w * (_1475 - _1373)) + _1373);
    float _1494 = (((_505 * _457) + _506) * _470) * ((cbModelParam._m0[1u].w * (_1477 - _1375)) + _1375);
    float _1496 = (((_505 * _458) + _506) * _470) * ((cbModelParam._m0[1u].w * (_1479 - _1377)) + _1377);
    float _1499 = fma(_1496, cbSceneParam._m0[89u].z, fma(_1494, cbSceneParam._m0[89u].y, _1492 * cbSceneParam._m0[89u].x));
    float _1502 = fma(_1496, cbSceneParam._m0[90u].z, fma(_1494, cbSceneParam._m0[90u].y, _1492 * cbSceneParam._m0[90u].x));
    float _1505 = fma(_1496, cbSceneParam._m0[91u].z, fma(_1494, cbSceneParam._m0[91u].y, _1492 * cbSceneParam._m0[91u].x));
    vec4 _1513 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_388, _389));
    float _1515 = _1513.w;
    float _1527 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1515);
    float _1528 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1515);
    float _1529 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1515);
    uvec4 _1533 = floatBitsToUint(cbInstanceData._m0[_429 + 5u]);
    uint _1535 = _1533.x * 14u;
    uint _1536 = _1535 + 13u;
    float _1543 = _470 + (-1.0);
    float _1548 = (cbLight._m0[_1536].x * _1543) + 1.0;
    float _1549 = (cbLight._m0[_1536].y * _1543) + 1.0;
    float _1550 = (cbLight._m0[_1536].z * _1543) + 1.0;
    float _1551 = (cbLight._m0[_1536].w * _1543) + 1.0;
    uint _1552 = _1535 + 5u;
    float _1558 = isnan(1.0) ? _1549 : (isnan(_1549) ? 1.0 : min(_1549, 1.0));
    uint _1562 = _1535 + 4u;
    float _1572 = isnan(1.0) ? _1548 : (isnan(_1548) ? 1.0 : min(_1548, 1.0));
    uint _1576 = _1535 | 1u;
    float _1587 = dot(vec3(cbLight._m0[_1535].xyz), vec3(_297, _298, _299));
    float _1590 = dot(vec3(cbLight._m0[_1576].xyz), vec3(_297, _298, _299));
    float _3700 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
    float _3711 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
    float _1595 = (isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * 0.3183098733425140380859375;
    float _1597 = (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * 0.3183098733425140380859375;
    float _1604 = ((cbLight._m0[_1552].x * _1558) * _1597) + (((cbLight._m0[_1562].x * _1527) * _1572) * _1595);
    float _1605 = ((_1558 * cbLight._m0[_1552].y) * _1597) + (((cbLight._m0[_1562].y * _1528) * _1572) * _1595);
    float _1606 = ((_1558 * cbLight._m0[_1552].z) * _1597) + (((cbLight._m0[_1562].z * _1529) * _1572) * _1595);
    uvec4 _1611 = floatBitsToUint(cbLight._m0[_1535 + 12u]);
    bool _1613 = _1611.x == 0u;
    float _1624;
    float _1626;
    float _1628;
    if (_1613)
    {
        _1624 = _1604;
        _1626 = _1605;
        _1628 = _1606;
    }
    else
    {
        uint _1632 = _1535 + 6u;
        float _1648 = (dot(vec3(cbLight._m0[_1535 + 2u].xyz), vec3(_297, _298, _299)) * 0.5) + 0.5;
        float _1649 = _1648 * _1648;
        float _3722 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1651 = isnan(1.0) ? _1550 : (isnan(_1550) ? 1.0 : min(_1550, 1.0));
        _1624 = (((cbLight._m0[_1632].x * 0.3183098733425140380859375) * _1650) * _1651) + _1604;
        _1626 = (((cbLight._m0[_1632].y * 0.3183098733425140380859375) * _1650) * _1651) + _1605;
        _1628 = (((cbLight._m0[_1632].z * 0.3183098733425140380859375) * _1650) * _1651) + _1606;
    }
    bool _1631 = _1611.y == 0u;
    float _1669;
    float _1671;
    float _1673;
    if (_1631)
    {
        _1669 = _1624;
        _1671 = _1626;
        _1673 = _1628;
    }
    else
    {
        uint _1842 = _1535 + 7u;
        float _1858 = (dot(vec3(cbLight._m0[_1535 + 3u].xyz), vec3(_297, _298, _299)) * 0.5) + 0.5;
        float _1859 = _1858 * _1858;
        float _3738 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
        float _1860 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1861 = isnan(1.0) ? _1551 : (isnan(_1551) ? 1.0 : min(_1551, 1.0));
        _1669 = (((cbLight._m0[_1842].x * 0.3183098733425140380859375) * _1860) * _1861) + _1624;
        _1671 = (((cbLight._m0[_1842].y * 0.3183098733425140380859375) * _1860) * _1861) + _1626;
        _1673 = (((cbLight._m0[_1842].z * 0.3183098733425140380859375) * _1860) * _1861) + _1628;
    }
    uint _1676 = _1535 + 8u;
    float _1689 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1535].w)) * _301) * 0.949999988079071044921875);
    float _1690 = _1689 * _1689;
    float _1691 = cbLight._m0[_1535].x + _380;
    float _1692 = cbLight._m0[_1535].y + _381;
    float _1693 = cbLight._m0[_1535].z + _382;
    float _1697 = inversesqrt(dot(vec3(_1691, _1692, _1693), vec3(_1691, _1692, _1693)));
    float _1698 = _1697 * _1691;
    float _1699 = _1697 * _1692;
    float _1700 = _1697 * _1693;
    float _1701 = dot(vec3(_297, _298, _299), vec3(cbLight._m0[_1535].xyz));
    float _3754 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
    float _1704 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _3765 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _1705 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _1706 = dot(vec3(_297, _298, _299), vec3(_1698, _1699, _1700));
    float _3776 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
    float _1709 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _1710 = dot(vec3(cbLight._m0[_1535].xyz), vec3(_1698, _1699, _1700));
    float _3787 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
    float _1714 = _1690 * _1690;
    float _1718 = ((_1709 * _1709) * (_1714 + (-1.0))) + 1.0;
    float _1726 = exp2(log2(1.0 - (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0)))) * 5.0);
    float _1727 = 0.959999978542327880859375 - _452;
    float _1729 = 0.959999978542327880859375 - _453;
    float _1730 = 0.959999978542327880859375 - _454;
    float _1737 = 1.0 - _1690;
    float _1748 = (0.5 / (((_1705 * ((_1704 * _1737) + _1690)) + 9.9999999392252902907785028219223e-09) + (((_1705 * _1737) + _1690) * _1704))) * _1704;
    float _3798 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1750 = (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_1714 / ((_1718 * _1718) * 3.141590118408203125));
    uint _1764 = _1535 + 9u;
    float _1775 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1576].w)) * _301) * 0.949999988079071044921875);
    float _1776 = _1775 * _1775;
    float _1777 = cbLight._m0[_1576].x + _380;
    float _1778 = cbLight._m0[_1576].y + _381;
    float _1779 = cbLight._m0[_1576].z + _382;
    float _1783 = inversesqrt(dot(vec3(_1777, _1778, _1779), vec3(_1777, _1778, _1779)));
    float _1784 = _1783 * _1777;
    float _1785 = _1783 * _1778;
    float _1786 = _1783 * _1779;
    float _1787 = dot(vec3(_297, _298, _299), vec3(cbLight._m0[_1576].xyz));
    float _3809 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _1790 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _1791 = dot(vec3(_297, _298, _299), vec3(_1784, _1785, _1786));
    float _3820 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1794 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _1795 = dot(vec3(cbLight._m0[_1576].xyz), vec3(_1784, _1785, _1786));
    float _3831 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _1799 = _1776 * _1776;
    float _1803 = ((_1794 * _1794) * (_1799 + (-1.0))) + 1.0;
    float _1810 = exp2(log2(1.0 - (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0)))) * 5.0);
    float _1817 = 1.0 - _1776;
    float _1827 = (0.5 / (((_1705 * ((_1790 * _1817) + _1776)) + 9.9999999392252902907785028219223e-09) + (((_1705 * _1817) + _1776) * _1790))) * _1790;
    float _3842 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1829 = (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_1799 / ((_1803 * _1803) * 3.141590118408203125));
    float _1839 = (((((_1810 * _1727) + _455) * cbLight._m0[_1764].x) * _1829) * _1558) + ((((cbLight._m0[_1676].x * _1527) * ((_1726 * _1727) + _455)) * _1750) * _1572);
    float _1840 = (((((_1810 * _1729) + _457) * cbLight._m0[_1764].y) * _1829) * _1558) + ((((cbLight._m0[_1676].y * _1528) * ((_1726 * _1729) + _457)) * _1750) * _1572);
    float _1841 = (((((_1810 * _1730) + _458) * cbLight._m0[_1764].z) * _1829) * _1558) + ((((cbLight._m0[_1676].z * _1529) * ((_1726 * _1730) + _458)) * _1750) * _1572);
    float _1903;
    float _1905;
    float _1907;
    if (_1613)
    {
        _1903 = _1839;
        _1905 = _1840;
        _1907 = _1841;
    }
    else
    {
        uint _1909 = _1535 + 2u;
        uint _1913 = _1535 + 10u;
        float _1927 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1909].w)) * _301) * 0.949999988079071044921875);
        float _1928 = _1927 * _1927;
        float _1929 = cbLight._m0[_1909].x + _380;
        float _1930 = cbLight._m0[_1909].y + _381;
        float _1931 = cbLight._m0[_1909].z + _382;
        float _1935 = inversesqrt(dot(vec3(_1929, _1930, _1931), vec3(_1929, _1930, _1931)));
        float _1936 = _1935 * _1929;
        float _1937 = _1935 * _1930;
        float _1938 = _1935 * _1931;
        float _1939 = dot(vec3(_297, _298, _299), vec3(cbLight._m0[_1909].xyz));
        float _3853 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1942 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1943 = dot(vec3(_297, _298, _299), vec3(_1936, _1937, _1938));
        float _3864 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1946 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1947 = dot(vec3(cbLight._m0[_1909].xyz), vec3(_1936, _1937, _1938));
        float _3875 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
        float _1951 = _1928 * _1928;
        float _1955 = ((_1946 * _1946) * (_1951 + (-1.0))) + 1.0;
        float _1962 = exp2(log2(1.0 - (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) * 5.0);
        float _1969 = 1.0 - _1928;
        float _1979 = (0.5 / (((_1705 * ((_1942 * _1969) + _1928)) + 9.9999999392252902907785028219223e-09) + (((_1705 * _1969) + _1928) * _1942))) * _1942;
        float _3886 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
        float _1981 = (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1951 / ((_1955 * _1955) * 3.141590118408203125));
        float _1982 = isnan(1.0) ? _1550 : (isnan(_1550) ? 1.0 : min(_1550, 1.0));
        _1903 = (((((_1962 * _1727) + _455) * cbLight._m0[_1913].x) * _1981) * _1982) + _1839;
        _1905 = (((((_1962 * _1729) + _457) * cbLight._m0[_1913].y) * _1981) * _1982) + _1840;
        _1907 = (((((_1962 * _1730) + _458) * cbLight._m0[_1913].z) * _1981) * _1982) + _1841;
    }
    float _2017;
    float _2019;
    float _2021;
    if (_1631)
    {
        _2017 = _1903;
        _2019 = _1905;
        _2021 = _1907;
    }
    else
    {
        uint _2028 = _1535 + 3u;
        uint _2032 = _1535 + 11u;
        float _2046 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2028].w)) * _301) * 0.949999988079071044921875);
        float _2047 = _2046 * _2046;
        float _2048 = cbLight._m0[_2028].x + _380;
        float _2049 = cbLight._m0[_2028].y + _381;
        float _2050 = cbLight._m0[_2028].z + _382;
        float _2054 = inversesqrt(dot(vec3(_2048, _2049, _2050), vec3(_2048, _2049, _2050)));
        float _2055 = _2054 * _2048;
        float _2056 = _2054 * _2049;
        float _2057 = _2054 * _2050;
        float _2058 = dot(vec3(_297, _298, _299), vec3(cbLight._m0[_2028].xyz));
        float _3902 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2061 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _2062 = dot(vec3(_297, _298, _299), vec3(_2055, _2056, _2057));
        float _3913 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2065 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _2066 = dot(vec3(cbLight._m0[_2028].xyz), vec3(_2055, _2056, _2057));
        float _3924 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2070 = _2047 * _2047;
        float _2074 = ((_2065 * _2065) * (_2070 + (-1.0))) + 1.0;
        float _2081 = exp2(log2(1.0 - (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0)))) * 5.0);
        float _2088 = 1.0 - _2047;
        float _2098 = (0.5 / (((_1705 * ((_2061 * _2088) + _2047)) + 9.9999999392252902907785028219223e-09) + (((_1705 * _2088) + _2047) * _2061))) * _2061;
        float _3935 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2100 = (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * (_2070 / ((_2074 * _2074) * 3.141590118408203125));
        float _2101 = isnan(1.0) ? _1551 : (isnan(_1551) ? 1.0 : min(_1551, 1.0));
        _2017 = (((((_2081 * _1727) + _455) * cbLight._m0[_2032].x) * _2100) * _2101) + _1903;
        _2019 = (((((_2081 * _1729) + _457) * cbLight._m0[_2032].y) * _2100) * _2101) + _1905;
        _2021 = (((((_2081 * _1730) + _458) * cbLight._m0[_2032].z) * _2100) * _2101) + _1907;
    }
    float _2235;
    float _2237;
    float _2239;
    float _2241;
    float _2243;
    float _2245;
    if (_1533.y == 0u)
    {
        float _2176 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2177 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2176;
        float _2178 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2176;
        float _2179 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2176;
        uvec4 _2191 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2192 = _2191.x;
        uint _2203 = uint((float(_2191.y) * floor(float(uint(cbSceneParam._m0[85u].y * _389) / _2192))) + floor(float(uint(cbSceneParam._m0[85u].x * _388) / _2192)));
        float _2213 = (log2(_2179 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2214 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        uint _2217 = uint(isnan(14.0) ? _2214 : (isnan(_2214) ? 14.0 : min(_2214, 14.0)));
        uvec4 _2222 = texelFetch(g_lightClusterGridBuffer, int(((_2217 << 2u) + (_2203 << 6u)) >> 2u));
        uint _2223 = _2222.x;
        uint _2224 = _2191.z;
        float _2328;
        float _2330;
        float _2332;
        float _2334;
        float _2336;
        float _2338;
        if (((((1u << ((_2224 >> 4u) & 15u)) + 4294967295u) & _2223) == 0u) || ((_2224 & 240u) == 0u))
        {
            _2328 = 0.0;
            _2330 = 0.0;
            _2332 = 0.0;
            _2334 = 0.0;
            _2336 = 0.0;
            _2338 = 0.0;
        }
        else
        {
            float _2329;
            float _2331;
            float _2333;
            float _2335;
            float _2337;
            float _2339;
            float _2472 = 0.0;
            float _2473 = 0.0;
            float _2474 = 0.0;
            float _2475 = 0.0;
            float _2476 = 0.0;
            float _2477 = 0.0;
            uint _2478 = 0u;
            uint _2487;
            bool _2488;
            for (;;)
            {
                _2487 = texelFetch(g_lightClassification, int((((_2217 << 5u) + (_2203 << 9u)) + (_2478 << 2u)) >> 2u)).x;
                _2488 = _2487 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2488)
                {
                    frontier_phi_63_pred = _2477;
                    frontier_phi_63_pred_1 = _2476;
                    frontier_phi_63_pred_2 = _2475;
                    frontier_phi_63_pred_3 = _2474;
                    frontier_phi_63_pred_4 = _2473;
                    frontier_phi_63_pred_5 = _2472;
                }
                else
                {
                    float _2596;
                    float _2597;
                    float _2598;
                    float _2599;
                    float _2600;
                    float _2601;
                    uint _2602;
                    _2596 = _2472;
                    _2597 = _2473;
                    _2598 = _2474;
                    _2599 = _2475;
                    _2600 = _2476;
                    _2601 = _2477;
                    _2602 = _2487;
                    float _2528;
                    float _2529;
                    float _2530;
                    float _2531;
                    float _2532;
                    float _2533;
                    for (;;)
                    {
                        uint _2606 = uint(findLSB(_2602)) + (_2478 << 5u);
                        uint _2603 = (_2602 + 4294967295u) & _2602;
                        uint _2608 = _2606 * 48u;
                        vec4 _2622 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2608)).x, texelFetch(g_PointLightRenderingBuffer, int(_2608 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2608 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2608 + 3u)).x));
                        uint _2628 = (_2606 * 48u) + 4u;
                        vec4 _2641 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2628)).x, texelFetch(g_PointLightRenderingBuffer, int(_2628 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2628 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2628 + 3u)).x));
                        uint _2647 = (_2606 * 48u) + 8u;
                        vec3 _2658 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2647)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 2u)).x));
                        float _2662 = _2622.x - _2177;
                        float _2663 = _2622.y - _2178;
                        float _2664 = _2622.z - _2179;
                        float _2665 = dot(vec3(_2662, _2663, _2664), vec3(_2662, _2663, _2664));
                        float _2668 = inversesqrt(_2665);
                        float _2669 = _2668 * _2662;
                        float _2670 = _2668 * _2663;
                        float _2671 = _2668 * _2664;
                        float _2672 = dot(vec3(_410, _413, _416), vec3(_2669, _2670, _2671));
                        float _2677 = 1.0 - (_2665 * _2622.w);
                        float _3961 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
                        float _2678 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
                        float _2679 = sqrt(_2665) * _2641.w;
                        float _2682 = 1.39999997615814208984375 / (_2679 + 1.39999997615814208984375);
                        float _2683 = _2682 * _2682;
                        float _2686 = ((1.0 - _2683) * _2672) + _2683;
                        float _2689 = _2679 * _2679;
                        float _2693 = ((isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0))) * _2678) / ((_2689 * 0.699999988079071044921875) + 1.0);
                        float _2697 = (-0.0) - _2177;
                        float _2698 = (-0.0) - _2178;
                        float _2699 = (-0.0) - _2179;
                        float _2703 = inversesqrt(dot(vec3(_2697, _2698, _2699), vec3(_2697, _2698, _2699)));
                        float _2704 = _2703 * _2697;
                        float _2705 = _2703 * _2698;
                        float _2706 = _2703 * _2699;
                        float _2714 = exp2(log2(1.0 / ((_2689 * 3.5) + 5.0)) * 0.25);
                        float _2715 = 1.0 - _486;
                        float _2722 = sqrt(1.0 - ((1.0 - (_2715 * _2715)) * (1.0 - (_2714 * _2714))));
                        float _2723 = _2722 * _2722;
                        float _2724 = _2723 * _2723;
                        float _2725 = _2704 + _2669;
                        float _2726 = _2705 + _2670;
                        float _2727 = _2706 + _2671;
                        float _2731 = inversesqrt(dot(vec3(_2725, _2726, _2727), vec3(_2725, _2726, _2727)));
                        float _2735 = dot(vec3(_410, _413, _416), vec3(_2704, _2705, _2706));
                        float _3977 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
                        float _2738 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
                        float _2739 = dot(vec3(_410, _413, _416), vec3(_2731 * _2725, _2731 * _2726, _2731 * _2727));
                        float _3988 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
                        float _2742 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
                        float _2746 = ((_2742 * _2742) * (_2724 + (-1.0))) + 1.0;
                        float _2747 = _2682 * _2723;
                        float _2748 = _2747 * _2747;
                        float _2751 = ((1.0 - _2748) * _2672) + _2748;
                        float _3999 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
                        float _2752 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
                        float _2753 = 1.0 - _2723;
                        float _2763 = (0.5 / (((_2752 * ((_2738 * _2753) + _2723)) + 9.9999999392252902907785028219223e-09) + (((_2752 * _2753) + _2723) * _2738))) * _2752;
                        float _4010 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
                        float _2774 = (((_2724 * 3.1415927410125732421875) * (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) / ((_2746 * _2746) * ((_2689 * 2.1991131305694580078125) + 3.141590118408203125))) * _2678;
                        _2531 = (_2693 * _2641.x) + _2599;
                        _2532 = (_2693 * _2641.y) + _2600;
                        _2533 = (_2693 * _2641.z) + _2601;
                        _2528 = (_2774 * _2658.x) + _2596;
                        _2529 = (_2774 * _2658.y) + _2597;
                        _2530 = (_2774 * _2658.z) + _2598;
                        if (_2603 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2596 = _2528;
                            _2597 = _2529;
                            _2598 = _2530;
                            _2599 = _2531;
                            _2600 = _2532;
                            _2601 = _2533;
                            _2602 = _2603;
                        }
                    }
                    frontier_phi_63_pred = _2533;
                    frontier_phi_63_pred_1 = _2532;
                    frontier_phi_63_pred_2 = _2531;
                    frontier_phi_63_pred_3 = _2530;
                    frontier_phi_63_pred_4 = _2529;
                    frontier_phi_63_pred_5 = _2528;
                }
                _2339 = frontier_phi_63_pred;
                _2337 = frontier_phi_63_pred_1;
                _2335 = frontier_phi_63_pred_2;
                _2333 = frontier_phi_63_pred_3;
                _2331 = frontier_phi_63_pred_4;
                _2329 = frontier_phi_63_pred_5;
                uint _2479 = _2478 + 1u;
                if (_2479 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2472 = _2329;
                    _2473 = _2331;
                    _2474 = _2333;
                    _2475 = _2335;
                    _2476 = _2337;
                    _2477 = _2339;
                    _2478 = _2479;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2328 = _2329;
            _2330 = _2331;
            _2332 = _2333;
            _2334 = _2335;
            _2336 = _2337;
            _2338 = _2339;
        }
        uvec4 _2342 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2343 = _2342.z;
        uint _2345 = (_2343 >> 8u) & 15u;
        float _2440;
        float _2442;
        float _2444;
        float _2446;
        float _2448;
        float _2450;
        if (((4294967295u << _2345) & _2223) == 0u)
        {
            _2440 = _2328;
            _2442 = _2330;
            _2444 = _2332;
            _2446 = _2334;
            _2448 = _2336;
            _2450 = _2338;
        }
        else
        {
            float _2465 = inversesqrt(dot(vec3(_2177, _2178, _2179), vec3(_2177, _2178, _2179)));
            float _2466 = _2465 * _2177;
            float _2467 = _2465 * _2178;
            float _2468 = _2465 * _2179;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2345 < ((_2343 >> 12u) & 15u))
            {
                float _2441;
                float _2443;
                float _2445;
                float _2447;
                float _2449;
                float _2451;
                float _2579 = _2328;
                float _2580 = _2330;
                float _2581 = _2332;
                float _2582 = _2334;
                float _2583 = _2336;
                float _2584 = _2338;
                uint _2585 = _2345;
                uint _2594;
                bool _2595;
                for (;;)
                {
                    _2594 = texelFetch(g_lightClassification, int((((_2217 << 5u) + (_2203 << 9u)) + (_2585 << 2u)) >> 2u)).x;
                    _2595 = _2594 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2595)
                    {
                        frontier_phi_69_pred = _2584;
                        frontier_phi_69_pred_1 = _2583;
                        frontier_phi_69_pred_2 = _2582;
                        frontier_phi_69_pred_3 = _2581;
                        frontier_phi_69_pred_4 = _2580;
                        frontier_phi_69_pred_5 = _2579;
                    }
                    else
                    {
                        float _2779;
                        float _2780;
                        float _2781;
                        float _2782;
                        float _2783;
                        float _2784;
                        float _3075;
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3080;
                        float _2792 = _2579;
                        float _2793 = _2580;
                        float _2794 = _2581;
                        float _2795 = _2582;
                        float _2796 = _2583;
                        float _2797 = _2584;
                        uint _2798 = _2594;
                        uint _2799;
                        vec4 _2824;
                        float _2825;
                        vec4 _2840;
                        vec3 _2852;
                        vec4 _2868;
                        vec4 _2884;
                        float _2931;
                        bool _2932;
                        for (;;)
                        {
                            uint _2809 = ((_2585 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2798));
                            _2799 = (_2798 + 4294967295u) & _2798;
                            uint _2811 = _2809 * 40u;
                            _2824 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2811)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 3u)).x));
                            _2825 = _2824.w;
                            uint _2827 = (_2809 * 40u) + 4u;
                            _2840 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 3u)).x));
                            uint _2842 = (_2809 * 40u) + 8u;
                            _2852 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2842)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 2u)).x));
                            uint _2855 = (_2809 * 40u) + 16u;
                            _2868 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2855)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 3u)).x));
                            uint _2871 = (_2809 * 40u) + 20u;
                            _2884 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2871)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 3u)).x));
                            uint _2887 = (_2809 * 40u) + 24u;
                            vec4 _2900 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 3u)).x));
                            uint _2906 = (_2809 * 40u) + 28u;
                            vec4 _2919 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 3u)).x));
                            _2931 = fma(_2179, _2919.z, fma(_2178, _2919.y, _2919.x * _2177)) + _2919.w;
                            _2932 = !((fma(_2179, _2900.z, fma(_2178, _2900.y, _2900.x * _2177)) + _2900.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2932)
                            {
                                float _2959 = _2824.x - _2177;
                                float _2960 = _2824.y - _2178;
                                float _2961 = _2824.z - _2179;
                                float _2962 = dot(vec3(_2959, _2960, _2961), vec3(_2959, _2960, _2961));
                                float _2965 = inversesqrt(_2962);
                                float _2966 = _2965 * _2959;
                                float _2967 = _2965 * _2960;
                                float _2968 = _2965 * _2961;
                                float _2972 = 1.0 - (_2962 / (_2825 * _2825));
                                float _4021 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                                float _2973 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
                                float _2977 = sqrt(_2962) * _2840.w;
                                float _2979 = 1.39999997615814208984375 / (_2977 + 1.39999997615814208984375);
                                float _2980 = _2979 * _2979;
                                float _2983 = ((1.0 - _2980) * dot(vec3(_2966, _2967, _2968), vec3(_410, _413, _416))) + _2980;
                                float _2986 = _2977 * _2977;
                                float _2990 = (fma(_2179, _2868.z, fma(_2178, _2868.y, _2868.x * _2177)) + _2868.w) / _2931;
                                float _2991 = (fma(_2179, _2884.z, fma(_2178, _2884.y, _2884.x * _2177)) + _2884.w) / _2931;
                                float _2995 = 1.0 - dot(vec2(_2990, _2991), vec2(_2990, _2991));
                                float _4037 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                                float _2996 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
                                float _2997 = _2996 * (((isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0))) * _2973) / ((_2986 * 0.699999988079071044921875) + 1.0));
                                float _3009 = exp2(log2(1.0 / ((_2986 * 3.5) + 5.0)) * 0.25);
                                float _3010 = 1.0 - _486;
                                float _3017 = sqrt(1.0 - ((1.0 - (_3010 * _3010)) * (1.0 - (_3009 * _3009))));
                                float _3018 = _3017 * _3017;
                                float _3019 = _3018 * _3018;
                                float _3020 = _2966 - _2466;
                                float _3021 = _2967 - _2467;
                                float _3022 = _2968 - _2468;
                                float _3026 = inversesqrt(dot(vec3(_3020, _3021, _3022), vec3(_3020, _3021, _3022)));
                                float _3030 = dot(vec3(_410, _413, _416), vec3((-0.0) - _2466, (-0.0) - _2467, (-0.0) - _2468));
                                float _4048 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                                float _3033 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
                                float _3034 = dot(vec3(_410, _413, _416), vec3(_3026 * _3020, _3026 * _3021, _3026 * _3022));
                                float _4059 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                                float _3037 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
                                float _3041 = ((_3037 * _3037) * (_3019 + (-1.0))) + 1.0;
                                float _3042 = _2979 * _3018;
                                float _3043 = _3042 * _3042;
                                float _3049 = ((1.0 - _3043) * dot(vec3(_410, _413, _416), vec3(_2966, _2967, _2968))) + _3043;
                                float _4070 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                                float _3050 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
                                float _3051 = 1.0 - _3018;
                                float _3061 = (0.5 / (((_3050 * ((_3033 * _3051) + _3018)) + 9.9999999392252902907785028219223e-09) + (((_3050 * _3051) + _3018) * _3033))) * _3050;
                                float _4081 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                                float _3071 = (_2996 * _2973) * (((_3019 * 3.1415927410125732421875) * (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0)))) / ((_3041 * _3041) * ((_2986 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2997 * _2840.z;
                                frontier_phi_75_pred_1 = _2997 * _2840.y;
                                frontier_phi_75_pred_2 = _2997 * _2840.x;
                                frontier_phi_75_pred_3 = _3071 * _2852.z;
                                frontier_phi_75_pred_4 = _3071 * _2852.y;
                                frontier_phi_75_pred_5 = _3071 * _2852.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3080 = frontier_phi_75_pred;
                            _3079 = frontier_phi_75_pred_1;
                            _3078 = frontier_phi_75_pred_2;
                            _3077 = frontier_phi_75_pred_3;
                            _3076 = frontier_phi_75_pred_4;
                            _3075 = frontier_phi_75_pred_5;
                            _2782 = _3078 + _2795;
                            _2783 = _3079 + _2796;
                            _2784 = _3080 + _2797;
                            _2779 = _3075 + _2792;
                            _2780 = _3076 + _2793;
                            _2781 = _3077 + _2794;
                            if (_2799 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2792 = _2779;
                                _2793 = _2780;
                                _2794 = _2781;
                                _2795 = _2782;
                                _2796 = _2783;
                                _2797 = _2784;
                                _2798 = _2799;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2784;
                        frontier_phi_69_pred_1 = _2783;
                        frontier_phi_69_pred_2 = _2782;
                        frontier_phi_69_pred_3 = _2781;
                        frontier_phi_69_pred_4 = _2780;
                        frontier_phi_69_pred_5 = _2779;
                    }
                    _2451 = frontier_phi_69_pred;
                    _2449 = frontier_phi_69_pred_1;
                    _2447 = frontier_phi_69_pred_2;
                    _2445 = frontier_phi_69_pred_3;
                    _2443 = frontier_phi_69_pred_4;
                    _2441 = frontier_phi_69_pred_5;
                    uint _2586 = _2585 + 1u;
                    if (_2586 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2579 = _2441;
                        _2580 = _2443;
                        _2581 = _2445;
                        _2582 = _2447;
                        _2583 = _2449;
                        _2584 = _2451;
                        _2585 = _2586;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2451;
                frontier_phi_57_58_ladder_1 = _2449;
                frontier_phi_57_58_ladder_2 = _2447;
                frontier_phi_57_58_ladder_3 = _2445;
                frontier_phi_57_58_ladder_4 = _2443;
                frontier_phi_57_58_ladder_5 = _2441;
            }
            else
            {
                frontier_phi_57_58_ladder = _2338;
                frontier_phi_57_58_ladder_1 = _2336;
                frontier_phi_57_58_ladder_2 = _2334;
                frontier_phi_57_58_ladder_3 = _2332;
                frontier_phi_57_58_ladder_4 = _2330;
                frontier_phi_57_58_ladder_5 = _2328;
            }
            _2440 = frontier_phi_57_58_ladder_5;
            _2442 = frontier_phi_57_58_ladder_4;
            _2444 = frontier_phi_57_58_ladder_3;
            _2446 = frontier_phi_57_58_ladder_2;
            _2448 = frontier_phi_57_58_ladder_1;
            _2450 = frontier_phi_57_58_ladder;
        }
        float _2455 = isnan(1.0) ? _470 : (isnan(_470) ? 1.0 : min(_470, 1.0));
        _2235 = (_2455 * _2446) + _1669;
        _2237 = (_2455 * _2448) + _1671;
        _2239 = (_2455 * _2450) + _1673;
        _2241 = ((_2440 * _455) * _2455) + _2017;
        _2243 = ((_2442 * _457) * _2455) + _2019;
        _2245 = ((_2444 * _458) * _2455) + _2021;
    }
    else
    {
        _2235 = _1669;
        _2237 = _1671;
        _2239 = _1673;
        _2241 = _2017;
        _2243 = _2019;
        _2245 = _2021;
    }
    float _4097 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _4108 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _4119 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _4130 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _2263 = ((isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_2235 + ((isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0))) * _470))) + ((_2241 + ((isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))) * _1280)) * cbPerFrame._m0[3u].x);
    float _2264 = ((isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_2237 + ((isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0))) * _470))) + ((_2243 + ((isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))) * _1280)) * cbPerFrame._m0[3u].x);
    float _2265 = ((isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_2239 + ((isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0))) * _470))) + ((_2245 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _1280)) * cbPerFrame._m0[3u].x);
    float _2273 = cbInstanceData._m0[_429 + 6u].w * (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)));
    float _2278 = _388 / cbSceneParam._m0[86u].x;
    float _2279 = _389 / cbSceneParam._m0[86u].y;
    vec4 _2293 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2278, _2279, (log2((isnan(cbSceneParam._m0[77u].w) ? _321 : (isnan(_321) ? cbSceneParam._m0[77u].w : min(_321, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2295 = _2293.x;
    float _2296 = _2293.y;
    float _2297 = _2293.z;
    float _2298 = _2293.w;
    float _2390;
    float _2392;
    float _2394;
    float _2396;
    if (_321 > cbSceneParam._m0[78u].w)
    {
        float _2353 = isnan(_321) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _321 : min(cbSceneParam._m0[80u].w, _321));
        float _2354 = _2353 / _321;
        float _2365 = _2354 * _373;
        float _2366 = _374 * _2354;
        float _2367 = (-0.0) - _2366;
        float _2368 = _2354 * _375;
        float _2370 = (cbSceneParam._m0[77u].w * _2367) / _2353;
        float _2371 = _2370 + cbSceneParam._m0[79u].w;
        float _2372 = cbSceneParam._m0[79u].w - _2366;
        float _2378 = sqrt(((_2365 * _2365) + (_2366 * _2366)) + (_2368 * _2368));
        float _2381 = (1.0 - (cbSceneParam._m0[77u].w / _2353)) * _2378;
        float _2386 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2388 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2541;
        if (abs((_2367 - _2370) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2541 = ((((_2371 > 0.0) ? exp2(_2386 * _2371) : (2.0 - exp2(_2388 * _2371))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2381;
        }
        else
        {
            float _2501 = 1.0 / cbSceneParam._m0[80u].x;
            float _2502 = isnan(_2372) ? _2371 : (isnan(_2371) ? _2372 : max(_2371, _2372));
            float _2503 = isnan(_2372) ? _2371 : (isnan(_2371) ? _2372 : min(_2371, _2372));
            float _2512 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : min(_2502, 0.0));
            float _2513 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : min(_2503, 0.0));
            _2541 = ((abs(_2378 / _2367) * cbSceneParam._m0[80u].y) * ((((_2512 - _2513) * 2.0) - ((exp2(_2386 * (isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0)))) - exp2(_2386 * (isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0))))) * _2501)) - ((exp2(_2388 * _2512) - exp2(_2388 * _2513)) * _2501))) + (_2381 * cbSceneParam._m0[80u].z);
        }
        vec4 _2543 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2278, _2279, 1.0), 0.0);
        float _2552 = exp2((_2541 * (-1.44269502162933349609375)) * (1.0 - _2543.w));
        float _2553 = log2(_2552);
        float _2569 = log2(_2298);
        _2390 = (exp2(_2569 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2553 * cbSceneParam._m0[78u].x)) * _2543.x) / cbSceneParam._m0[78u].x)) + _2295;
        _2392 = (exp2(_2569 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2553 * cbSceneParam._m0[78u].y)) * _2543.y) / cbSceneParam._m0[78u].y)) + _2296;
        _2394 = (exp2(_2569 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2553 * cbSceneParam._m0[78u].z)) * _2543.z) / cbSceneParam._m0[78u].z)) + _2297;
        _2396 = _2552 * _2298;
    }
    else
    {
        _2390 = _2295;
        _2392 = _2296;
        _2394 = _2297;
        _2396 = _2298;
    }
    float _2408 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2409 = _2408 == 3.0;
    float _2410 = log2(_2396);
    float _2417 = exp2(_2410 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0)));
    float _2418 = exp2(_2410 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0)));
    float _2419 = exp2(_2410 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0)));
    float _2428 = (_2408 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2428 * (_2409 ? _2417 : (_2417 + (cbSceneParam._m0[72u].w * _2390)));
    SV_Target.y = _2428 * (_2409 ? _2418 : (_2418 + (cbSceneParam._m0[72u].w * _2392)));
    SV_Target.z = _2428 * (_2409 ? _2419 : (_2419 + (cbSceneParam._m0[72u].w * _2394)));
    SV_Target.w = _2273;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2273;
}


