#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_Glow_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_Glow_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_Glow_Alpha_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _843;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = _195 * NORMAL.x;
    float _197 = _195 * NORMAL.y;
    float _198 = _195 * NORMAL.z;
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210;
    float _211;
    float _212;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
    }
    else
    {
        _210 = _196;
        _211 = _197;
        _212 = _198;
    }
    vec4 _226 = texture(sampler2D(S_AMSN_Glow_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _229 = _226.x;
    float _230 = _226.y;
    float _231 = _226.z;
    float _233 = _226.w * TEXCOORD_1.z;
    vec4 _249 = texture(sampler2D(S_AMSN_Glow_Alpha_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _252 = _249.x + cbMtdParam._m0[9u].x;
    vec4 _264 = texture(sampler2D(S_AMSN_Glow_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _268 = _264.z;
    float _272 = (_264.x * 2.0) + (-1.0);
    float _274 = (_264.y * 2.0) + (-1.0);
    float _275 = dot(vec2(_272, _274), vec2(_272, _274));
    float _3185 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _281 = sqrt(1.0 - (isnan(1.0) ? _3185 : (isnan(_3185) ? 1.0 : min(_3185, 1.0))));
    float _284 = fma(_281, _210, fma(_274, _202 * TANGENT.x, (_188 * _180) * _272));
    float _287 = fma(_281, _211, fma(_274, _202 * TANGENT.y, (_188 * _181) * _272));
    float _290 = fma(_281, _212, fma(_274, _202 * TANGENT.z, (_188 * _182) * _272));
    float _294 = inversesqrt(dot(vec3(_284, _287, _290), vec3(_284, _287, _290)));
    float _295 = _294 * _284;
    float _296 = _294 * _287;
    float _297 = _294 * _290;
    float _3196 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _298 = isnan(1.0) ? _3196 : (isnan(_3196) ? 1.0 : min(_3196, 1.0));
    float _3207 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _299 = isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0));
    float _3218 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3229 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3240 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3251 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _303 = isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0));
    float _319 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _361 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _371 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _361);
    float _372 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _361);
    float _373 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _361);
    float _377 = inversesqrt(dot(vec3(_371, _372, _373), vec3(_371, _372, _373)));
    float _378 = _371 * _377;
    float _379 = _372 * _377;
    float _380 = _373 * _377;
    float _386 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _387 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _408 = fma(_297, cbSceneParam._m0[5u].z, fma(_296, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _295));
    float _411 = fma(_297, cbSceneParam._m0[6u].z, fma(_296, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _295));
    float _414 = fma(_297, cbSceneParam._m0[7u].z, fma(_296, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _295));
    uint _427 = uint(roundEven(NORMAL.w)) * 13u;
    uint _430 = (_427 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _436 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0)))) * cbInstanceData._m0[_430].x;
    float _437 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3229 : (isnan(_3229) ? 1.0 : min(_3229, 1.0)))) * cbInstanceData._m0[_430].y;
    float _438 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0)))) * cbInstanceData._m0[_430].z;
    float _3262 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _439 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
    float _3273 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _440 = isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0));
    float _3284 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _441 = isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0));
    float _442 = 1.0 - _303;
    float _443 = _439 * _442;
    float _444 = _440 * _442;
    float _445 = _441 * _442;
    float _450 = (_439 + (-0.039999999105930328369140625)) * _303;
    float _451 = (_440 + (-0.039999999105930328369140625)) * _303;
    float _452 = (_441 + (-0.039999999105930328369140625)) * _303;
    float _453 = _450 + 0.039999999105930328369140625;
    float _455 = _451 + 0.039999999105930328369140625;
    float _456 = _452 + 0.039999999105930328369140625;
    vec4 _465 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _386, cbSceneParam._m0[86u].y * _387));
    float _468 = _465.x * TEXCOORD_1.w;
    float _469 = dot(vec3(_295, _296, _297), vec3(_378, _379, _380));
    float _472 = _469 * 2.0;
    float _476 = (_472 * _295) - _378;
    float _477 = (_472 * _296) - _379;
    float _478 = (_472 * _297) - _380;
    float _482 = abs(dot(vec3(_378, _379, _380), vec3(_295, _296, _297)));
    float _3295 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _484 = sqrt(_299);
    float _497 = exp2((_484 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_484 * 3.0));
    float _503 = (1.0 - _497) * ((_484 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _504 = _497 * _484;
    float _532 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _536 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _540 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _842;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _567 = fma(_540, cbModelParam._m0[26u].z, fma(_536, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _532));
        float _571 = fma(_540, cbModelParam._m0[27u].z, fma(_536, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _532));
        float _575 = fma(_540, cbModelParam._m0[28u].z, fma(_536, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _532));
        float _600 = _532 + _295;
        float _601 = _536 + _296;
        float _602 = _540 + _297;
        float _612 = fma(_602, cbModelParam._m0[26u].z, fma(_601, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _600)) - _567;
        float _613 = fma(_602, cbModelParam._m0[27u].z, fma(_601, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _600)) - _571;
        float _614 = fma(_602, cbModelParam._m0[28u].z, fma(_601, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _600)) - _575;
        float _618 = inversesqrt(dot(vec3(_612, _613, _614), vec3(_612, _613, _614)));
        float _631 = ((_618 * _612) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_567 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _632 = ((_618 * _613) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_571 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _633 = ((_618 * _614) / cbModelParam._m0[34u].z) + ((((((_575 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _636 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_631, _632, _633), 0.0);
        vec4 _643 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_631, _632, _633), 0.0);
        vec4 _650 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_631, _632, _633), 0.0);
        vec4 _657 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_631, _632, _633), 0.0);
        float _670 = exp2((_636.w + (-0.5)) * 20.0) * 2.0;
        float _671 = _670 * (_636.x + (-0.5));
        float _672 = _670 * (_636.y + (-0.5));
        float _673 = _670 * (_636.z + (-0.5));
        float _680 = exp2((_643.w + (-0.5)) * 20.0) * 2.0;
        float _681 = _680 * (_643.x + (-0.5));
        float _682 = _680 * (_643.y + (-0.5));
        float _683 = _680 * (_643.z + (-0.5));
        float _690 = exp2((_650.w + (-0.5)) * 20.0) * 2.0;
        float _691 = _690 * (_650.x + (-0.5));
        float _692 = _690 * (_650.y + (-0.5));
        float _693 = _690 * (_650.z + (-0.5));
        float _700 = exp2((_657.w + (-0.5)) * 20.0) * 2.0;
        float _701 = _700 * (_657.x + (-0.5));
        float _702 = _700 * (_657.y + (-0.5));
        float _703 = _700 * (_657.z + (-0.5));
        float _704 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _705 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _706 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _707 = _671 * 0.5;
        float _708 = _681 * 0.5;
        float _709 = _691 * 0.5;
        float _710 = dot(vec3(_707, _708, _709), vec3(_707, _708, _709));
        float _715 = (_710 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_710);
        float _724 = (dot(vec3(_295, _296, _297), vec3(_715 * _707, _715 * _708, _715 * _709)) + 1.0) * 0.5;
        float _3321 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _734 = sqrt(((_708 * _708) + (_707 * _707)) + (_709 * _709)) / (_704 + 9.9999997473787516355514526367188e-06);
        float _3332 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _735 = isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0));
        float _736 = _735 * 2.0;
        float _740 = (1.0 - _735) / (_735 + 1.0);
        float _3343 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _741 = isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0));
        float _750 = ((((1.0 - _741) * (_736 + 2.0)) * exp2(log2(isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0))) * (_736 + 1.0))) + _741) * _704;
        float _751 = _672 * 0.5;
        float _752 = _682 * 0.5;
        float _753 = _692 * 0.5;
        float _754 = dot(vec3(_751, _752, _753), vec3(_751, _752, _753));
        float _759 = (_754 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_754);
        float _767 = (dot(vec3(_295, _296, _297), vec3(_759 * _751, _759 * _752, _759 * _753)) + 1.0) * 0.5;
        float _3354 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _776 = sqrt(((_752 * _752) + (_751 * _751)) + (_753 * _753)) / (_705 + 9.9999997473787516355514526367188e-06);
        float _3365 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _777 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
        float _778 = _777 * 2.0;
        float _782 = (1.0 - _777) / (_777 + 1.0);
        float _3376 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
        float _792 = ((((1.0 - _783) * (_778 + 2.0)) * exp2(log2(isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0))) * (_778 + 1.0))) + _783) * _705;
        float _793 = _673 * 0.5;
        float _794 = _683 * 0.5;
        float _795 = _693 * 0.5;
        float _796 = dot(vec3(_793, _794, _795), vec3(_793, _794, _795));
        float _801 = (_796 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_796);
        float _809 = (dot(vec3(_295, _296, _297), vec3(_801 * _793, _801 * _794, _801 * _795)) + 1.0) * 0.5;
        float _3387 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _818 = sqrt(((_794 * _794) + (_793 * _793)) + (_795 * _795)) / (_706 + 9.9999997473787516355514526367188e-06);
        float _3398 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _819 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
        float _820 = _819 * 2.0;
        float _824 = (1.0 - _819) / (_819 + 1.0);
        float _3409 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _825 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
        float _834 = ((((1.0 - _825) * (_820 + 2.0)) * exp2(log2(isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0))) * (_820 + 1.0))) + _825) * _706;
        _842 = _673;
        _844 = _672;
        _845 = _671;
        _846 = _683;
        _847 = _682;
        _848 = _681;
        _849 = _693;
        _850 = _692;
        _851 = _691;
        _852 = _706;
        _853 = _705;
        _854 = _704;
        _855 = cbModelParam._m0[36u].z * (isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0)));
        _856 = cbModelParam._m0[36u].z * (isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0)));
        _857 = cbModelParam._m0[36u].z * (isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0)));
    }
    else
    {
        _842 = _843;
        _844 = _843;
        _845 = _843;
        _846 = _843;
        _847 = _843;
        _848 = _843;
        _849 = _843;
        _850 = _843;
        _851 = _843;
        _852 = _843;
        _853 = _843;
        _854 = _843;
        _855 = 0.0;
        _856 = 0.0;
        _857 = 0.0;
    }
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _883 = fma(_540, cbModelParam._m0[30u].z, fma(_536, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _532));
        float _887 = fma(_540, cbModelParam._m0[31u].z, fma(_536, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _532));
        float _891 = fma(_540, cbModelParam._m0[32u].z, fma(_536, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _532));
        float _914 = _532 + _295;
        float _915 = _536 + _296;
        float _916 = _540 + _297;
        float _926 = fma(_916, cbModelParam._m0[30u].z, fma(_915, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _914)) - _883;
        float _927 = fma(_916, cbModelParam._m0[31u].z, fma(_915, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _914)) - _887;
        float _928 = fma(_916, cbModelParam._m0[32u].z, fma(_915, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _914)) - _891;
        float _932 = inversesqrt(dot(vec3(_926, _927, _928), vec3(_926, _927, _928)));
        float _945 = ((_932 * _926) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_883 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _946 = ((_932 * _927) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_887 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _947 = ((_932 * _928) / cbModelParam._m0[35u].z) + ((((((_891 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _949 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        float _982 = exp2((_949.w + (-0.5)) * 20.0) * 2.0;
        float _983 = _982 * (_949.x + (-0.5));
        float _984 = _982 * (_949.y + (-0.5));
        float _985 = _982 * (_949.z + (-0.5));
        float _992 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_956.x + (-0.5));
        float _994 = _992 * (_956.y + (-0.5));
        float _995 = _992 * (_956.z + (-0.5));
        float _1002 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_963.x + (-0.5));
        float _1004 = _1002 * (_963.y + (-0.5));
        float _1005 = _1002 * (_963.z + (-0.5));
        float _1012 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_970.x + (-0.5));
        float _1014 = _1012 * (_970.y + (-0.5));
        float _1015 = _1012 * (_970.z + (-0.5));
        float _1016 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = _983 * 0.5;
        float _1020 = _993 * 0.5;
        float _1021 = _1003 * 0.5;
        float _1022 = dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021));
        float _1027 = (_1022 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1022);
        float _1035 = (dot(vec3(_295, _296, _297), vec3(_1027 * _1019, _1027 * _1020, _1027 * _1021)) + 1.0) * 0.5;
        float _3450 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1044 = sqrt(((_1020 * _1020) + (_1019 * _1019)) + (_1021 * _1021)) / (_1016 + 9.9999997473787516355514526367188e-06);
        float _3461 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
        float _1046 = _1045 * 2.0;
        float _1050 = (1.0 - _1045) / (_1045 + 1.0);
        float _3472 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
        float _1060 = ((((1.0 - _1051) * (_1046 + 2.0)) * exp2(log2(isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0))) * (_1046 + 1.0))) + _1051) * _1016;
        float _1061 = _984 * 0.5;
        float _1062 = _994 * 0.5;
        float _1063 = _1004 * 0.5;
        float _1064 = dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063));
        float _1069 = (_1064 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1064);
        float _1077 = (dot(vec3(_295, _296, _297), vec3(_1069 * _1061, _1069 * _1062, _1069 * _1063)) + 1.0) * 0.5;
        float _3483 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1086 = sqrt(((_1062 * _1062) + (_1061 * _1061)) + (_1063 * _1063)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3494 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
        float _1088 = _1087 * 2.0;
        float _1092 = (1.0 - _1087) / (_1087 + 1.0);
        float _3505 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
        float _1102 = ((((1.0 - _1093) * (_1088 + 2.0)) * exp2(log2(isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0))) * (_1088 + 1.0))) + _1093) * _1017;
        float _1103 = _985 * 0.5;
        float _1104 = _995 * 0.5;
        float _1105 = _1005 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1119 = (dot(vec3(_295, _296, _297), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _3516 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1128 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3527 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _1130 = _1129 * 2.0;
        float _1134 = (1.0 - _1129) / (_1129 + 1.0);
        float _3538 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _1144 = ((((1.0 - _1135) * (_1130 + 2.0)) * exp2(log2(isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0))) * (_1130 + 1.0))) + _1135) * _1018;
        _1152 = _985;
        _1153 = _984;
        _1154 = _983;
        _1155 = _995;
        _1156 = _994;
        _1157 = _993;
        _1158 = _1005;
        _1159 = _1004;
        _1160 = _1003;
        _1161 = _1018;
        _1162 = _1017;
        _1163 = _1016;
        _1164 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0)));
        _1165 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)));
        _1166 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)));
    }
    else
    {
        _1152 = _843;
        _1153 = _843;
        _1154 = _843;
        _1155 = _843;
        _1156 = _843;
        _1157 = _843;
        _1158 = _843;
        _1159 = _843;
        _1160 = _843;
        _1161 = _843;
        _1162 = _843;
        _1163 = _843;
        _1164 = 0.0;
        _1165 = 0.0;
        _1166 = 0.0;
    }
    float _1176 = (cbModelParam._m0[1u].x * (_1164 - _855)) + _855;
    float _1177 = (cbModelParam._m0[1u].x * (_1165 - _856)) + _856;
    float _1178 = (cbModelParam._m0[1u].x * (_1166 - _857)) + _857;
    float _1199 = fma(_1178, cbSceneParam._m0[89u].z, fma(_1177, cbSceneParam._m0[89u].y, _1176 * cbSceneParam._m0[89u].x));
    float _1202 = fma(_1178, cbSceneParam._m0[90u].z, fma(_1177, cbSceneParam._m0[90u].y, _1176 * cbSceneParam._m0[90u].x));
    float _1205 = fma(_1178, cbSceneParam._m0[91u].z, fma(_1177, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1176));
    float _1220 = _476 * 0.5;
    float _1221 = _477 * 0.5;
    float _1222 = _478 * 0.5;
    float _1223 = dot(vec4(_1220, _1221, _1222, 1.0), vec4(_1154, _1157, _1160, _1163));
    float _1226 = dot(vec4(_1220, _1221, _1222, 1.0), vec4(_1153, _1156, _1159, _1162));
    float _1229 = dot(vec4(_1220, _1221, _1222, 1.0), vec4(_1152, _1155, _1158, _1161));
    float _1263;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1236 = dot(vec4(_1220, _1221, _1222, 1.0), vec4(_842, _846, _849, _852));
        float _1240 = dot(vec4(_1220, _1221, _1222, 1.0), vec4(_844, _847, _850, _853));
        float _1244 = dot(vec4(_1220, _1221, _1222, 1.0), vec4(_845, _848, _851, _854));
        float _1251 = dot(vec4(cbModelParam._m0[39u]), vec4(_1220, _1221, _1222, 1.0));
        _1263 = dot(vec3(isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)), isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)), isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1251) ? 0.0 : (isnan(0.0) ? _1251 : max(0.0, _1251))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1263 = 1.0;
    }
    float _1274;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1265 = dot(vec4(cbModelParam._m0[40u]), vec4(_1220, _1221, _1222, 1.0));
        _1274 = dot(vec3(isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)), isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)), isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1265) ? 0.0 : (isnan(0.0) ? _1265 : max(0.0, _1265))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1274 = 1.0;
    }
    float _1278 = (_1274 * cbModelParam._m0[1u].x) + (_1263 * (1.0 - cbModelParam._m0[1u].x));
    float _1288 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _299);
    float _1289 = isnan(_1288) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1288 : min(cbModelParam._m0[25u].z, _1288));
    float _1371;
    float _1373;
    float _1375;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1338 = fma(_540, cbModelParam._m0[13u].z, fma(_536, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _532)) + cbModelParam._m0[13u].w;
        float _1342 = fma(_540, cbModelParam._m0[14u].z, fma(_536, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _532)) + cbModelParam._m0[14u].w;
        float _1346 = fma(_540, cbModelParam._m0[15u].z, fma(_536, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _532)) + cbModelParam._m0[15u].w;
        float _1349 = fma(_478, cbModelParam._m0[13u].z, fma(_477, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _476));
        float _1352 = fma(_478, cbModelParam._m0[14u].z, fma(_477, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _476));
        float _1355 = fma(_478, cbModelParam._m0[15u].z, fma(_477, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _476));
        float _1383;
        if (_1349 > 0.0)
        {
            _1383 = abs((1.0 - _1338) / _1349);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1349 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1338 + 1.0) / _1349);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1383 = frontier_phi_16_14_ladder;
        }
        float _1591;
        if (_1352 > 0.0)
        {
            _1591 = abs((1.0 - _1342) / _1352);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1352 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1342 + 1.0) / _1352);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1591 = frontier_phi_25_21_ladder;
        }
        float _1845;
        if (_1355 > 0.0)
        {
            _1845 = abs((1.0 - _1346) / _1355);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1355 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1346 + 1.0) / _1355);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1845 = frontier_phi_37_32_ladder;
        }
        float _1847 = isnan(_1591) ? _1383 : (isnan(_1383) ? _1591 : min(_1383, _1591));
        float _1848 = isnan(_1845) ? _1847 : (isnan(_1847) ? _1845 : min(_1847, _1845));
        float _1852 = (_1848 * _1349) + _1338;
        float _1853 = (_1848 * _1352) + _1342;
        float _1854 = (_1848 * _1355) + _1346;
        float _1855 = _1848 * 9.9999997473787516355514526367188e-05;
        float _1857 = (-1.0) - _1855;
        float _1859 = _1855 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1854 > _1859) || ((_1854 < _1857) || ((_1853 > _1859) || ((_1853 < _1857) || ((_1852 < _1857) || (_1852 > _1859))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1982 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1854, cbModelParam._m0[9u].z, fma(_1853, cbModelParam._m0[9u].y, _1852 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1854, cbModelParam._m0[10u].z, fma(_1853, cbModelParam._m0[10u].y, _1852 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1854, cbModelParam._m0[11u].z, fma(_1853, cbModelParam._m0[11u].y, _1852 * cbModelParam._m0[11u].x))), _1289);
            frontier_phi_15_37_ladder = _1982.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1982.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1982.x * cbModelParam._m0[1u].y;
        }
        _1371 = frontier_phi_15_37_ladder_2;
        _1373 = frontier_phi_15_37_ladder_1;
        _1375 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1359 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_476, _477, _478), _1289);
        _1371 = _1359.x * cbModelParam._m0[1u].y;
        _1373 = _1359.y * cbModelParam._m0[1u].y;
        _1375 = _1359.z * cbModelParam._m0[1u].y;
    }
    float _1379 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _299);
    float _1380 = isnan(_1379) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1379 : min(cbModelParam._m0[25u].w, _1379));
    float _1473;
    float _1475;
    float _1477;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1437 = fma(_540, cbModelParam._m0[21u].z, fma(_536, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _532)) + cbModelParam._m0[21u].w;
        float _1441 = fma(_540, cbModelParam._m0[22u].z, fma(_536, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _532)) + cbModelParam._m0[22u].w;
        float _1445 = fma(_540, cbModelParam._m0[23u].z, fma(_536, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _532)) + cbModelParam._m0[23u].w;
        float _1448 = fma(_478, cbModelParam._m0[21u].z, fma(_477, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _476));
        float _1451 = fma(_478, cbModelParam._m0[22u].z, fma(_477, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _476));
        float _1454 = fma(_478, cbModelParam._m0[23u].z, fma(_477, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _476));
        float _1596;
        if (_1448 > 0.0)
        {
            _1596 = abs((1.0 - _1437) / _1448);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1448 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1437 + 1.0) / _1448);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1596 = frontier_phi_27_23_ladder;
        }
        float _1872;
        if (_1451 > 0.0)
        {
            _1872 = abs((1.0 - _1441) / _1451);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1451 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1441 + 1.0) / _1451);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1872 = frontier_phi_39_34_ladder;
        }
        float _2085;
        if (_1454 > 0.0)
        {
            _2085 = abs((1.0 - _1445) / _1454);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1454 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1445 + 1.0) / _1454);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2085 = frontier_phi_48_45_ladder;
        }
        float _2087 = isnan(_1872) ? _1596 : (isnan(_1596) ? _1872 : min(_1596, _1872));
        float _2088 = isnan(_2085) ? _2087 : (isnan(_2087) ? _2085 : min(_2087, _2085));
        float _2092 = (_2088 * _1448) + _1437;
        float _2093 = (_2088 * _1451) + _1441;
        float _2094 = (_2088 * _1454) + _1445;
        float _2095 = _2088 * 9.9999997473787516355514526367188e-05;
        float _2096 = (-1.0) - _2095;
        float _2098 = _2095 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2094 > _2098) || ((_2094 < _2096) || ((_2093 > _2098) || ((_2093 < _2096) || ((_2092 < _2096) || (_2092 > _2098))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2297 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2094, cbModelParam._m0[17u].z, fma(_2093, cbModelParam._m0[17u].y, _2092 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2094, cbModelParam._m0[18u].z, fma(_2093, cbModelParam._m0[18u].y, _2092 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2094, cbModelParam._m0[19u].z, fma(_2093, cbModelParam._m0[19u].y, _2092 * cbModelParam._m0[19u].x))), _1380);
            frontier_phi_24_48_ladder = _2297.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2297.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2297.x * cbModelParam._m0[1u].z;
        }
        _1473 = frontier_phi_24_48_ladder_2;
        _1475 = frontier_phi_24_48_ladder_1;
        _1477 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1457 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_476, _477, _478), _1380);
        _1473 = _1457.x * cbModelParam._m0[1u].z;
        _1475 = _1457.y * cbModelParam._m0[1u].z;
        _1477 = _1457.z * cbModelParam._m0[1u].z;
    }
    float _1490 = (((_503 * _453) + _504) * _468) * ((cbModelParam._m0[1u].w * (_1473 - _1371)) + _1371);
    float _1492 = (((_503 * _455) + _504) * _468) * ((cbModelParam._m0[1u].w * (_1475 - _1373)) + _1373);
    float _1494 = (((_503 * _456) + _504) * _468) * ((cbModelParam._m0[1u].w * (_1477 - _1375)) + _1375);
    float _1497 = fma(_1494, cbSceneParam._m0[89u].z, fma(_1492, cbSceneParam._m0[89u].y, _1490 * cbSceneParam._m0[89u].x));
    float _1500 = fma(_1494, cbSceneParam._m0[90u].z, fma(_1492, cbSceneParam._m0[90u].y, _1490 * cbSceneParam._m0[90u].x));
    float _1503 = fma(_1494, cbSceneParam._m0[91u].z, fma(_1492, cbSceneParam._m0[91u].y, _1490 * cbSceneParam._m0[91u].x));
    uvec4 _1513 = floatBitsToUint(cbInstanceData._m0[_427 + 5u]);
    uint _1515 = _1513.x * 14u;
    uint _1516 = _1515 + 13u;
    float _1523 = _468 + (-1.0);
    float _1528 = (cbLight._m0[_1516].x * _1523) + 1.0;
    float _1529 = (cbLight._m0[_1516].y * _1523) + 1.0;
    float _1530 = (cbLight._m0[_1516].z * _1523) + 1.0;
    float _1531 = (cbLight._m0[_1516].w * _1523) + 1.0;
    uint _1532 = _1515 + 5u;
    float _1538 = isnan(1.0) ? _1529 : (isnan(_1529) ? 1.0 : min(_1529, 1.0));
    uint _1542 = _1515 + 4u;
    float _1549 = isnan(1.0) ? _1528 : (isnan(_1528) ? 1.0 : min(_1528, 1.0));
    uint _1553 = _1515 | 1u;
    float _1564 = dot(vec3(cbLight._m0[_1515].xyz), vec3(_295, _296, _297));
    float _1567 = dot(vec3(cbLight._m0[_1553].xyz), vec3(_295, _296, _297));
    float _3674 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
    float _3685 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
    float _1572 = (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * 0.3183098733425140380859375;
    float _1574 = (isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * 0.3183098733425140380859375;
    float _1581 = ((cbLight._m0[_1532].x * _1538) * _1574) + ((cbLight._m0[_1542].x * _1549) * _1572);
    float _1582 = ((_1538 * cbLight._m0[_1532].y) * _1574) + ((_1549 * cbLight._m0[_1542].y) * _1572);
    float _1583 = ((_1538 * cbLight._m0[_1532].z) * _1574) + ((_1549 * cbLight._m0[_1542].z) * _1572);
    uvec4 _1588 = floatBitsToUint(cbLight._m0[_1515 + 12u]);
    bool _1590 = _1588.x == 0u;
    float _1601;
    float _1603;
    float _1605;
    if (_1590)
    {
        _1601 = _1581;
        _1603 = _1582;
        _1605 = _1583;
    }
    else
    {
        uint _1609 = _1515 + 6u;
        float _1625 = (dot(vec3(cbLight._m0[_1515 + 2u].xyz), vec3(_295, _296, _297)) * 0.5) + 0.5;
        float _1626 = _1625 * _1625;
        float _3696 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _1628 = isnan(1.0) ? _1530 : (isnan(_1530) ? 1.0 : min(_1530, 1.0));
        _1601 = (((cbLight._m0[_1609].x * 0.3183098733425140380859375) * _1627) * _1628) + _1581;
        _1603 = (((cbLight._m0[_1609].y * 0.3183098733425140380859375) * _1627) * _1628) + _1582;
        _1605 = (((cbLight._m0[_1609].z * 0.3183098733425140380859375) * _1627) * _1628) + _1583;
    }
    bool _1608 = _1588.y == 0u;
    float _1646;
    float _1648;
    float _1650;
    if (_1608)
    {
        _1646 = _1601;
        _1648 = _1603;
        _1650 = _1605;
    }
    else
    {
        uint _1816 = _1515 + 7u;
        float _1832 = (dot(vec3(cbLight._m0[_1515 + 3u].xyz), vec3(_295, _296, _297)) * 0.5) + 0.5;
        float _1833 = _1832 * _1832;
        float _3712 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1834 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1835 = isnan(1.0) ? _1531 : (isnan(_1531) ? 1.0 : min(_1531, 1.0));
        _1646 = (((cbLight._m0[_1816].x * 0.3183098733425140380859375) * _1834) * _1835) + _1601;
        _1648 = (((cbLight._m0[_1816].y * 0.3183098733425140380859375) * _1834) * _1835) + _1603;
        _1650 = (((cbLight._m0[_1816].z * 0.3183098733425140380859375) * _1834) * _1835) + _1605;
    }
    uint _1653 = _1515 + 8u;
    float _1666 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1515].w)) * _299) * 0.949999988079071044921875);
    float _1667 = _1666 * _1666;
    float _1668 = cbLight._m0[_1515].x + _378;
    float _1669 = cbLight._m0[_1515].y + _379;
    float _1670 = cbLight._m0[_1515].z + _380;
    float _1674 = inversesqrt(dot(vec3(_1668, _1669, _1670), vec3(_1668, _1669, _1670)));
    float _1675 = _1674 * _1668;
    float _1676 = _1674 * _1669;
    float _1677 = _1674 * _1670;
    float _1678 = dot(vec3(_295, _296, _297), vec3(cbLight._m0[_1515].xyz));
    float _3728 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
    float _1681 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _3739 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _1682 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _1683 = dot(vec3(_295, _296, _297), vec3(_1675, _1676, _1677));
    float _3750 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
    float _1686 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    float _1687 = dot(vec3(cbLight._m0[_1515].xyz), vec3(_1675, _1676, _1677));
    float _3761 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
    float _1691 = _1667 * _1667;
    float _1695 = ((_1686 * _1686) * (_1691 + (-1.0))) + 1.0;
    float _1703 = exp2(log2(1.0 - (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) * 5.0);
    float _1704 = 0.959999978542327880859375 - _450;
    float _1706 = 0.959999978542327880859375 - _451;
    float _1707 = 0.959999978542327880859375 - _452;
    float _1714 = 1.0 - _1667;
    float _1725 = (0.5 / (((_1682 * ((_1681 * _1714) + _1667)) + 9.9999999392252902907785028219223e-09) + (((_1682 * _1714) + _1667) * _1681))) * _1681;
    float _3772 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
    float _1727 = (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * (_1691 / ((_1695 * _1695) * 3.141590118408203125));
    uint _1738 = _1515 + 9u;
    float _1749 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1553].w)) * _299) * 0.949999988079071044921875);
    float _1750 = _1749 * _1749;
    float _1751 = cbLight._m0[_1553].x + _378;
    float _1752 = cbLight._m0[_1553].y + _379;
    float _1753 = cbLight._m0[_1553].z + _380;
    float _1757 = inversesqrt(dot(vec3(_1751, _1752, _1753), vec3(_1751, _1752, _1753)));
    float _1758 = _1757 * _1751;
    float _1759 = _1757 * _1752;
    float _1760 = _1757 * _1753;
    float _1761 = dot(vec3(_295, _296, _297), vec3(cbLight._m0[_1553].xyz));
    float _3783 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1764 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _1765 = dot(vec3(_295, _296, _297), vec3(_1758, _1759, _1760));
    float _3794 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _1768 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _1769 = dot(vec3(cbLight._m0[_1553].xyz), vec3(_1758, _1759, _1760));
    float _3805 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1773 = _1750 * _1750;
    float _1777 = ((_1768 * _1768) * (_1773 + (-1.0))) + 1.0;
    float _1784 = exp2(log2(1.0 - (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0)))) * 5.0);
    float _1791 = 1.0 - _1750;
    float _1801 = (0.5 / (((_1682 * ((_1764 * _1791) + _1750)) + 9.9999999392252902907785028219223e-09) + (((_1682 * _1791) + _1750) * _1764))) * _1764;
    float _3816 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1803 = (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1773 / ((_1777 * _1777) * 3.141590118408203125));
    float _1813 = (((((_1784 * _1704) + _453) * cbLight._m0[_1738].x) * _1803) * _1538) + (((((_1703 * _1704) + _453) * cbLight._m0[_1653].x) * _1727) * _1549);
    float _1814 = (((((_1784 * _1706) + _455) * cbLight._m0[_1738].y) * _1803) * _1538) + (((((_1703 * _1706) + _455) * cbLight._m0[_1653].y) * _1727) * _1549);
    float _1815 = (((((_1784 * _1707) + _456) * cbLight._m0[_1738].z) * _1803) * _1538) + (((((_1703 * _1707) + _456) * cbLight._m0[_1653].z) * _1727) * _1549);
    float _1877;
    float _1879;
    float _1881;
    if (_1590)
    {
        _1877 = _1813;
        _1879 = _1814;
        _1881 = _1815;
    }
    else
    {
        uint _1883 = _1515 + 2u;
        uint _1887 = _1515 + 10u;
        float _1901 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1883].w)) * _299) * 0.949999988079071044921875);
        float _1902 = _1901 * _1901;
        float _1903 = cbLight._m0[_1883].x + _378;
        float _1904 = cbLight._m0[_1883].y + _379;
        float _1905 = cbLight._m0[_1883].z + _380;
        float _1909 = inversesqrt(dot(vec3(_1903, _1904, _1905), vec3(_1903, _1904, _1905)));
        float _1910 = _1909 * _1903;
        float _1911 = _1909 * _1904;
        float _1912 = _1909 * _1905;
        float _1913 = dot(vec3(_295, _296, _297), vec3(cbLight._m0[_1883].xyz));
        float _3827 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
        float _1916 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1917 = dot(vec3(_295, _296, _297), vec3(_1910, _1911, _1912));
        float _3838 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
        float _1920 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1921 = dot(vec3(cbLight._m0[_1883].xyz), vec3(_1910, _1911, _1912));
        float _3849 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
        float _1925 = _1902 * _1902;
        float _1929 = ((_1920 * _1920) * (_1925 + (-1.0))) + 1.0;
        float _1936 = exp2(log2(1.0 - (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0)))) * 5.0);
        float _1943 = 1.0 - _1902;
        float _1953 = (0.5 / (((_1682 * ((_1916 * _1943) + _1902)) + 9.9999999392252902907785028219223e-09) + (((_1682 * _1943) + _1902) * _1916))) * _1916;
        float _3860 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
        float _1955 = (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_1925 / ((_1929 * _1929) * 3.141590118408203125));
        float _1956 = isnan(1.0) ? _1530 : (isnan(_1530) ? 1.0 : min(_1530, 1.0));
        _1877 = (((((_1936 * _1704) + _453) * cbLight._m0[_1887].x) * _1955) * _1956) + _1813;
        _1879 = (((((_1936 * _1706) + _455) * cbLight._m0[_1887].y) * _1955) * _1956) + _1814;
        _1881 = (((((_1936 * _1707) + _456) * cbLight._m0[_1887].z) * _1955) * _1956) + _1815;
    }
    float _1991;
    float _1993;
    float _1995;
    if (_1608)
    {
        _1991 = _1877;
        _1993 = _1879;
        _1995 = _1881;
    }
    else
    {
        uint _2002 = _1515 + 3u;
        uint _2006 = _1515 + 11u;
        float _2020 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2002].w)) * _299) * 0.949999988079071044921875);
        float _2021 = _2020 * _2020;
        float _2022 = cbLight._m0[_2002].x + _378;
        float _2023 = cbLight._m0[_2002].y + _379;
        float _2024 = cbLight._m0[_2002].z + _380;
        float _2028 = inversesqrt(dot(vec3(_2022, _2023, _2024), vec3(_2022, _2023, _2024)));
        float _2029 = _2028 * _2022;
        float _2030 = _2028 * _2023;
        float _2031 = _2028 * _2024;
        float _2032 = dot(vec3(_295, _296, _297), vec3(cbLight._m0[_2002].xyz));
        float _3876 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        float _2035 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _2036 = dot(vec3(_295, _296, _297), vec3(_2029, _2030, _2031));
        float _3887 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        float _2039 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _2040 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_2029, _2030, _2031));
        float _3898 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2044 = _2021 * _2021;
        float _2048 = ((_2039 * _2039) * (_2044 + (-1.0))) + 1.0;
        float _2055 = exp2(log2(1.0 - (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0)))) * 5.0);
        float _2062 = 1.0 - _2021;
        float _2072 = (0.5 / (((_1682 * ((_2035 * _2062) + _2021)) + 9.9999999392252902907785028219223e-09) + (((_1682 * _2062) + _2021) * _2035))) * _2035;
        float _3909 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        float _2074 = (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * (_2044 / ((_2048 * _2048) * 3.141590118408203125));
        float _2075 = isnan(1.0) ? _1531 : (isnan(_1531) ? 1.0 : min(_1531, 1.0));
        _1991 = (((((_2055 * _1704) + _453) * cbLight._m0[_2006].x) * _2074) * _2075) + _1877;
        _1993 = (((((_2055 * _1706) + _455) * cbLight._m0[_2006].y) * _2074) * _2075) + _1879;
        _1995 = (((((_2055 * _1707) + _456) * cbLight._m0[_2006].z) * _2074) * _2075) + _1881;
    }
    float _2209;
    float _2211;
    float _2213;
    float _2215;
    float _2217;
    float _2219;
    if (_1513.y == 0u)
    {
        float _2150 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2151 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2150;
        float _2152 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2150;
        float _2153 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2150;
        uvec4 _2165 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2166 = _2165.x;
        uint _2177 = uint((float(_2165.y) * floor(float(uint(cbSceneParam._m0[85u].y * _387) / _2166))) + floor(float(uint(cbSceneParam._m0[85u].x * _386) / _2166)));
        float _2187 = (log2(_2153 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2188 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        uint _2191 = uint(isnan(14.0) ? _2188 : (isnan(_2188) ? 14.0 : min(_2188, 14.0)));
        uvec4 _2196 = texelFetch(g_lightClusterGridBuffer, int(((_2191 << 2u) + (_2177 << 6u)) >> 2u));
        uint _2197 = _2196.x;
        uint _2198 = _2165.z;
        float _2302;
        float _2304;
        float _2306;
        float _2308;
        float _2310;
        float _2312;
        if (((((1u << ((_2198 >> 4u) & 15u)) + 4294967295u) & _2197) == 0u) || ((_2198 & 240u) == 0u))
        {
            _2302 = 0.0;
            _2304 = 0.0;
            _2306 = 0.0;
            _2308 = 0.0;
            _2310 = 0.0;
            _2312 = 0.0;
        }
        else
        {
            float _2303;
            float _2305;
            float _2307;
            float _2309;
            float _2311;
            float _2313;
            float _2446 = 0.0;
            float _2447 = 0.0;
            float _2448 = 0.0;
            float _2449 = 0.0;
            float _2450 = 0.0;
            float _2451 = 0.0;
            uint _2452 = 0u;
            uint _2461;
            bool _2462;
            for (;;)
            {
                _2461 = texelFetch(g_lightClassification, int((((_2191 << 5u) + (_2177 << 9u)) + (_2452 << 2u)) >> 2u)).x;
                _2462 = _2461 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2462)
                {
                    frontier_phi_63_pred = _2451;
                    frontier_phi_63_pred_1 = _2450;
                    frontier_phi_63_pred_2 = _2449;
                    frontier_phi_63_pred_3 = _2448;
                    frontier_phi_63_pred_4 = _2447;
                    frontier_phi_63_pred_5 = _2446;
                }
                else
                {
                    float _2570;
                    float _2571;
                    float _2572;
                    float _2573;
                    float _2574;
                    float _2575;
                    uint _2576;
                    _2570 = _2446;
                    _2571 = _2447;
                    _2572 = _2448;
                    _2573 = _2449;
                    _2574 = _2450;
                    _2575 = _2451;
                    _2576 = _2461;
                    float _2502;
                    float _2503;
                    float _2504;
                    float _2505;
                    float _2506;
                    float _2507;
                    for (;;)
                    {
                        uint _2580 = uint(findLSB(_2576)) + (_2452 << 5u);
                        uint _2577 = (_2576 + 4294967295u) & _2576;
                        uint _2582 = _2580 * 48u;
                        vec4 _2596 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2582)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 3u)).x));
                        uint _2602 = (_2580 * 48u) + 4u;
                        vec4 _2615 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2602)).x, texelFetch(g_PointLightRenderingBuffer, int(_2602 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2602 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2602 + 3u)).x));
                        uint _2621 = (_2580 * 48u) + 8u;
                        vec3 _2632 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2621)).x, texelFetch(g_PointLightRenderingBuffer, int(_2621 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2621 + 2u)).x));
                        float _2636 = _2596.x - _2151;
                        float _2637 = _2596.y - _2152;
                        float _2638 = _2596.z - _2153;
                        float _2639 = dot(vec3(_2636, _2637, _2638), vec3(_2636, _2637, _2638));
                        float _2642 = inversesqrt(_2639);
                        float _2643 = _2642 * _2636;
                        float _2644 = _2642 * _2637;
                        float _2645 = _2642 * _2638;
                        float _2646 = dot(vec3(_408, _411, _414), vec3(_2643, _2644, _2645));
                        float _2651 = 1.0 - (_2639 * _2596.w);
                        float _3935 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
                        float _2652 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
                        float _2653 = sqrt(_2639) * _2615.w;
                        float _2656 = 1.39999997615814208984375 / (_2653 + 1.39999997615814208984375);
                        float _2657 = _2656 * _2656;
                        float _2660 = ((1.0 - _2657) * _2646) + _2657;
                        float _2663 = _2653 * _2653;
                        float _2667 = ((isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0))) * _2652) / ((_2663 * 0.699999988079071044921875) + 1.0);
                        float _2671 = (-0.0) - _2151;
                        float _2672 = (-0.0) - _2152;
                        float _2673 = (-0.0) - _2153;
                        float _2677 = inversesqrt(dot(vec3(_2671, _2672, _2673), vec3(_2671, _2672, _2673)));
                        float _2678 = _2677 * _2671;
                        float _2679 = _2677 * _2672;
                        float _2680 = _2677 * _2673;
                        float _2688 = exp2(log2(1.0 / ((_2663 * 3.5) + 5.0)) * 0.25);
                        float _2689 = 1.0 - _484;
                        float _2696 = sqrt(1.0 - ((1.0 - (_2689 * _2689)) * (1.0 - (_2688 * _2688))));
                        float _2697 = _2696 * _2696;
                        float _2698 = _2697 * _2697;
                        float _2699 = _2678 + _2643;
                        float _2700 = _2679 + _2644;
                        float _2701 = _2680 + _2645;
                        float _2705 = inversesqrt(dot(vec3(_2699, _2700, _2701), vec3(_2699, _2700, _2701)));
                        float _2709 = dot(vec3(_408, _411, _414), vec3(_2678, _2679, _2680));
                        float _3951 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
                        float _2712 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
                        float _2713 = dot(vec3(_408, _411, _414), vec3(_2705 * _2699, _2705 * _2700, _2705 * _2701));
                        float _3962 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
                        float _2716 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
                        float _2720 = ((_2716 * _2716) * (_2698 + (-1.0))) + 1.0;
                        float _2721 = _2656 * _2697;
                        float _2722 = _2721 * _2721;
                        float _2725 = ((1.0 - _2722) * _2646) + _2722;
                        float _3973 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
                        float _2726 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
                        float _2727 = 1.0 - _2697;
                        float _2737 = (0.5 / (((_2726 * ((_2712 * _2727) + _2697)) + 9.9999999392252902907785028219223e-09) + (((_2726 * _2727) + _2697) * _2712))) * _2726;
                        float _3984 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
                        float _2748 = (((_2698 * 3.1415927410125732421875) * (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) / ((_2720 * _2720) * ((_2663 * 2.1991131305694580078125) + 3.141590118408203125))) * _2652;
                        _2505 = (_2667 * _2615.x) + _2573;
                        _2506 = (_2667 * _2615.y) + _2574;
                        _2507 = (_2667 * _2615.z) + _2575;
                        _2502 = (_2748 * _2632.x) + _2570;
                        _2503 = (_2748 * _2632.y) + _2571;
                        _2504 = (_2748 * _2632.z) + _2572;
                        if (_2577 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2570 = _2502;
                            _2571 = _2503;
                            _2572 = _2504;
                            _2573 = _2505;
                            _2574 = _2506;
                            _2575 = _2507;
                            _2576 = _2577;
                        }
                    }
                    frontier_phi_63_pred = _2507;
                    frontier_phi_63_pred_1 = _2506;
                    frontier_phi_63_pred_2 = _2505;
                    frontier_phi_63_pred_3 = _2504;
                    frontier_phi_63_pred_4 = _2503;
                    frontier_phi_63_pred_5 = _2502;
                }
                _2313 = frontier_phi_63_pred;
                _2311 = frontier_phi_63_pred_1;
                _2309 = frontier_phi_63_pred_2;
                _2307 = frontier_phi_63_pred_3;
                _2305 = frontier_phi_63_pred_4;
                _2303 = frontier_phi_63_pred_5;
                uint _2453 = _2452 + 1u;
                if (_2453 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2446 = _2303;
                    _2447 = _2305;
                    _2448 = _2307;
                    _2449 = _2309;
                    _2450 = _2311;
                    _2451 = _2313;
                    _2452 = _2453;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2302 = _2303;
            _2304 = _2305;
            _2306 = _2307;
            _2308 = _2309;
            _2310 = _2311;
            _2312 = _2313;
        }
        uvec4 _2316 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2317 = _2316.z;
        uint _2319 = (_2317 >> 8u) & 15u;
        float _2414;
        float _2416;
        float _2418;
        float _2420;
        float _2422;
        float _2424;
        if (((4294967295u << _2319) & _2197) == 0u)
        {
            _2414 = _2302;
            _2416 = _2304;
            _2418 = _2306;
            _2420 = _2308;
            _2422 = _2310;
            _2424 = _2312;
        }
        else
        {
            float _2439 = inversesqrt(dot(vec3(_2151, _2152, _2153), vec3(_2151, _2152, _2153)));
            float _2440 = _2439 * _2151;
            float _2441 = _2439 * _2152;
            float _2442 = _2439 * _2153;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2319 < ((_2317 >> 12u) & 15u))
            {
                float _2415;
                float _2417;
                float _2419;
                float _2421;
                float _2423;
                float _2425;
                float _2553 = _2302;
                float _2554 = _2304;
                float _2555 = _2306;
                float _2556 = _2308;
                float _2557 = _2310;
                float _2558 = _2312;
                uint _2559 = _2319;
                uint _2568;
                bool _2569;
                for (;;)
                {
                    _2568 = texelFetch(g_lightClassification, int((((_2191 << 5u) + (_2177 << 9u)) + (_2559 << 2u)) >> 2u)).x;
                    _2569 = _2568 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2569)
                    {
                        frontier_phi_69_pred = _2558;
                        frontier_phi_69_pred_1 = _2557;
                        frontier_phi_69_pred_2 = _2556;
                        frontier_phi_69_pred_3 = _2555;
                        frontier_phi_69_pred_4 = _2554;
                        frontier_phi_69_pred_5 = _2553;
                    }
                    else
                    {
                        float _2753;
                        float _2754;
                        float _2755;
                        float _2756;
                        float _2757;
                        float _2758;
                        float _3049;
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3054;
                        float _2766 = _2553;
                        float _2767 = _2554;
                        float _2768 = _2555;
                        float _2769 = _2556;
                        float _2770 = _2557;
                        float _2771 = _2558;
                        uint _2772 = _2568;
                        uint _2773;
                        vec4 _2798;
                        float _2799;
                        vec4 _2814;
                        vec3 _2826;
                        vec4 _2842;
                        vec4 _2858;
                        float _2905;
                        bool _2906;
                        for (;;)
                        {
                            uint _2783 = ((_2559 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2772));
                            _2773 = (_2772 + 4294967295u) & _2772;
                            uint _2785 = _2783 * 40u;
                            _2798 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2785)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 3u)).x));
                            _2799 = _2798.w;
                            uint _2801 = (_2783 * 40u) + 4u;
                            _2814 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2801)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 3u)).x));
                            uint _2816 = (_2783 * 40u) + 8u;
                            _2826 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2816)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 2u)).x));
                            uint _2829 = (_2783 * 40u) + 16u;
                            _2842 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2829)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 3u)).x));
                            uint _2845 = (_2783 * 40u) + 20u;
                            _2858 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2845)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 3u)).x));
                            uint _2861 = (_2783 * 40u) + 24u;
                            vec4 _2874 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 3u)).x));
                            uint _2880 = (_2783 * 40u) + 28u;
                            vec4 _2893 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 3u)).x));
                            _2905 = fma(_2153, _2893.z, fma(_2152, _2893.y, _2893.x * _2151)) + _2893.w;
                            _2906 = !((fma(_2153, _2874.z, fma(_2152, _2874.y, _2874.x * _2151)) + _2874.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2906)
                            {
                                float _2933 = _2798.x - _2151;
                                float _2934 = _2798.y - _2152;
                                float _2935 = _2798.z - _2153;
                                float _2936 = dot(vec3(_2933, _2934, _2935), vec3(_2933, _2934, _2935));
                                float _2939 = inversesqrt(_2936);
                                float _2940 = _2939 * _2933;
                                float _2941 = _2939 * _2934;
                                float _2942 = _2939 * _2935;
                                float _2946 = 1.0 - (_2936 / (_2799 * _2799));
                                float _3995 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                                float _2947 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
                                float _2951 = sqrt(_2936) * _2814.w;
                                float _2953 = 1.39999997615814208984375 / (_2951 + 1.39999997615814208984375);
                                float _2954 = _2953 * _2953;
                                float _2957 = ((1.0 - _2954) * dot(vec3(_2940, _2941, _2942), vec3(_408, _411, _414))) + _2954;
                                float _2960 = _2951 * _2951;
                                float _2964 = (fma(_2153, _2842.z, fma(_2152, _2842.y, _2842.x * _2151)) + _2842.w) / _2905;
                                float _2965 = (fma(_2153, _2858.z, fma(_2152, _2858.y, _2858.x * _2151)) + _2858.w) / _2905;
                                float _2969 = 1.0 - dot(vec2(_2964, _2965), vec2(_2964, _2965));
                                float _4011 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                                float _2970 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
                                float _2971 = _2970 * (((isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0))) * _2947) / ((_2960 * 0.699999988079071044921875) + 1.0));
                                float _2983 = exp2(log2(1.0 / ((_2960 * 3.5) + 5.0)) * 0.25);
                                float _2984 = 1.0 - _484;
                                float _2991 = sqrt(1.0 - ((1.0 - (_2984 * _2984)) * (1.0 - (_2983 * _2983))));
                                float _2992 = _2991 * _2991;
                                float _2993 = _2992 * _2992;
                                float _2994 = _2940 - _2440;
                                float _2995 = _2941 - _2441;
                                float _2996 = _2942 - _2442;
                                float _3000 = inversesqrt(dot(vec3(_2994, _2995, _2996), vec3(_2994, _2995, _2996)));
                                float _3004 = dot(vec3(_408, _411, _414), vec3((-0.0) - _2440, (-0.0) - _2441, (-0.0) - _2442));
                                float _4022 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                                float _3007 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
                                float _3008 = dot(vec3(_408, _411, _414), vec3(_3000 * _2994, _3000 * _2995, _3000 * _2996));
                                float _4033 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                                float _3011 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
                                float _3015 = ((_3011 * _3011) * (_2993 + (-1.0))) + 1.0;
                                float _3016 = _2953 * _2992;
                                float _3017 = _3016 * _3016;
                                float _3023 = ((1.0 - _3017) * dot(vec3(_408, _411, _414), vec3(_2940, _2941, _2942))) + _3017;
                                float _4044 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                                float _3024 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
                                float _3025 = 1.0 - _2992;
                                float _3035 = (0.5 / (((_3024 * ((_3007 * _3025) + _2992)) + 9.9999999392252902907785028219223e-09) + (((_3024 * _3025) + _2992) * _3007))) * _3024;
                                float _4055 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                                float _3045 = (_2970 * _2947) * (((_2993 * 3.1415927410125732421875) * (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0)))) / ((_3015 * _3015) * ((_2960 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2971 * _2814.z;
                                frontier_phi_75_pred_1 = _2971 * _2814.y;
                                frontier_phi_75_pred_2 = _2971 * _2814.x;
                                frontier_phi_75_pred_3 = _3045 * _2826.z;
                                frontier_phi_75_pred_4 = _3045 * _2826.y;
                                frontier_phi_75_pred_5 = _3045 * _2826.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3054 = frontier_phi_75_pred;
                            _3053 = frontier_phi_75_pred_1;
                            _3052 = frontier_phi_75_pred_2;
                            _3051 = frontier_phi_75_pred_3;
                            _3050 = frontier_phi_75_pred_4;
                            _3049 = frontier_phi_75_pred_5;
                            _2756 = _3052 + _2769;
                            _2757 = _3053 + _2770;
                            _2758 = _3054 + _2771;
                            _2753 = _3049 + _2766;
                            _2754 = _3050 + _2767;
                            _2755 = _3051 + _2768;
                            if (_2773 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2766 = _2753;
                                _2767 = _2754;
                                _2768 = _2755;
                                _2769 = _2756;
                                _2770 = _2757;
                                _2771 = _2758;
                                _2772 = _2773;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2758;
                        frontier_phi_69_pred_1 = _2757;
                        frontier_phi_69_pred_2 = _2756;
                        frontier_phi_69_pred_3 = _2755;
                        frontier_phi_69_pred_4 = _2754;
                        frontier_phi_69_pred_5 = _2753;
                    }
                    _2425 = frontier_phi_69_pred;
                    _2423 = frontier_phi_69_pred_1;
                    _2421 = frontier_phi_69_pred_2;
                    _2419 = frontier_phi_69_pred_3;
                    _2417 = frontier_phi_69_pred_4;
                    _2415 = frontier_phi_69_pred_5;
                    uint _2560 = _2559 + 1u;
                    if (_2560 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2553 = _2415;
                        _2554 = _2417;
                        _2555 = _2419;
                        _2556 = _2421;
                        _2557 = _2423;
                        _2558 = _2425;
                        _2559 = _2560;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2425;
                frontier_phi_57_58_ladder_1 = _2423;
                frontier_phi_57_58_ladder_2 = _2421;
                frontier_phi_57_58_ladder_3 = _2419;
                frontier_phi_57_58_ladder_4 = _2417;
                frontier_phi_57_58_ladder_5 = _2415;
            }
            else
            {
                frontier_phi_57_58_ladder = _2312;
                frontier_phi_57_58_ladder_1 = _2310;
                frontier_phi_57_58_ladder_2 = _2308;
                frontier_phi_57_58_ladder_3 = _2306;
                frontier_phi_57_58_ladder_4 = _2304;
                frontier_phi_57_58_ladder_5 = _2302;
            }
            _2414 = frontier_phi_57_58_ladder_5;
            _2416 = frontier_phi_57_58_ladder_4;
            _2418 = frontier_phi_57_58_ladder_3;
            _2420 = frontier_phi_57_58_ladder_2;
            _2422 = frontier_phi_57_58_ladder_1;
            _2424 = frontier_phi_57_58_ladder;
        }
        float _2429 = isnan(1.0) ? _468 : (isnan(_468) ? 1.0 : min(_468, 1.0));
        _2209 = (_2429 * _2420) + _1646;
        _2211 = (_2429 * _2422) + _1648;
        _2213 = (_2429 * _2424) + _1650;
        _2215 = ((_2414 * _453) * _2429) + _1991;
        _2217 = ((_2416 * _455) * _2429) + _1993;
        _2219 = ((_2418 * _456) * _2429) + _1995;
    }
    else
    {
        _2209 = _1646;
        _2211 = _1648;
        _2213 = _1650;
        _2215 = _1991;
        _2217 = _1993;
        _2219 = _1995;
    }
    float _4071 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _4082 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _4093 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _4104 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _2237 = ((isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_2209 + ((isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0))) * _468))) + ((_2215 + ((isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))) * _1278)) * cbPerFrame._m0[3u].x);
    float _2238 = ((isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_2211 + ((isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0))) * _468))) + ((_2217 + ((isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))) * _1278)) * cbPerFrame._m0[3u].x);
    float _2239 = ((isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_2213 + ((isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0))) * _468))) + ((_2219 + ((isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))) * _1278)) * cbPerFrame._m0[3u].x);
    float _2247 = cbInstanceData._m0[_427 + 6u].w * (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0)));
    float _2252 = _386 / cbSceneParam._m0[86u].x;
    float _2253 = _387 / cbSceneParam._m0[86u].y;
    vec4 _2267 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2252, _2253, (log2((isnan(cbSceneParam._m0[77u].w) ? _319 : (isnan(_319) ? cbSceneParam._m0[77u].w : min(_319, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2269 = _2267.x;
    float _2270 = _2267.y;
    float _2271 = _2267.z;
    float _2272 = _2267.w;
    float _2364;
    float _2366;
    float _2368;
    float _2370;
    if (_319 > cbSceneParam._m0[78u].w)
    {
        float _2327 = isnan(_319) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _319 : min(cbSceneParam._m0[80u].w, _319));
        float _2328 = _2327 / _319;
        float _2339 = _2328 * _371;
        float _2340 = _372 * _2328;
        float _2341 = (-0.0) - _2340;
        float _2342 = _2328 * _373;
        float _2344 = (cbSceneParam._m0[77u].w * _2341) / _2327;
        float _2345 = _2344 + cbSceneParam._m0[79u].w;
        float _2346 = cbSceneParam._m0[79u].w - _2340;
        float _2352 = sqrt(((_2339 * _2339) + (_2340 * _2340)) + (_2342 * _2342));
        float _2355 = (1.0 - (cbSceneParam._m0[77u].w / _2327)) * _2352;
        float _2360 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2362 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2515;
        if (abs((_2341 - _2344) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2515 = ((((_2345 > 0.0) ? exp2(_2360 * _2345) : (2.0 - exp2(_2362 * _2345))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2355;
        }
        else
        {
            float _2475 = 1.0 / cbSceneParam._m0[80u].x;
            float _2476 = isnan(_2346) ? _2345 : (isnan(_2345) ? _2346 : max(_2345, _2346));
            float _2477 = isnan(_2346) ? _2345 : (isnan(_2345) ? _2346 : min(_2345, _2346));
            float _2486 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : min(_2476, 0.0));
            float _2487 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : min(_2477, 0.0));
            _2515 = ((abs(_2352 / _2341) * cbSceneParam._m0[80u].y) * ((((_2486 - _2487) * 2.0) - ((exp2(_2360 * (isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0)))) - exp2(_2360 * (isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0))))) * _2475)) - ((exp2(_2362 * _2486) - exp2(_2362 * _2487)) * _2475))) + (_2355 * cbSceneParam._m0[80u].z);
        }
        vec4 _2517 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2252, _2253, 1.0), 0.0);
        float _2526 = exp2((_2515 * (-1.44269502162933349609375)) * (1.0 - _2517.w));
        float _2527 = log2(_2526);
        float _2543 = log2(_2272);
        _2364 = (exp2(_2543 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2527 * cbSceneParam._m0[78u].x)) * _2517.x) / cbSceneParam._m0[78u].x)) + _2269;
        _2366 = (exp2(_2543 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2527 * cbSceneParam._m0[78u].y)) * _2517.y) / cbSceneParam._m0[78u].y)) + _2270;
        _2368 = (exp2(_2543 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2527 * cbSceneParam._m0[78u].z)) * _2517.z) / cbSceneParam._m0[78u].z)) + _2271;
        _2370 = _2526 * _2272;
    }
    else
    {
        _2364 = _2269;
        _2366 = _2270;
        _2368 = _2271;
        _2370 = _2272;
    }
    float _2382 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2383 = _2382 == 3.0;
    float _2384 = log2(_2370);
    float _2391 = exp2(_2384 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0)));
    float _2392 = exp2(_2384 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0)));
    float _2393 = exp2(_2384 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0)));
    float _2402 = (_2382 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2402 * (_2383 ? _2391 : (_2391 + (cbSceneParam._m0[72u].w * _2364)));
    SV_Target.y = _2402 * (_2383 ? _2392 : (_2392 + (cbSceneParam._m0[72u].w * _2366)));
    SV_Target.z = _2402 * (_2383 ? _2393 : (_2393 + (cbSceneParam._m0[72u].w * _2368)));
    SV_Target.w = _2247;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2247;
}


