#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_Glow_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_Glow_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_Glow_Alpha_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _847;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    vec4 _230 = texture(sampler2D(S_AMSN_Glow_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _233 = _230.x;
    float _234 = _230.y;
    float _235 = _230.z;
    float _237 = _230.w * TEXCOORD_1.z;
    vec4 _253 = texture(sampler2D(S_AMSN_Glow_Alpha_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _256 = _253.x + cbMtdParam._m0[9u].x;
    vec4 _268 = texture(sampler2D(S_AMSN_Glow_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _272 = _268.z;
    float _276 = (_268.x * 2.0) + (-1.0);
    float _278 = (_268.y * 2.0) + (-1.0);
    float _279 = dot(vec2(_276, _278), vec2(_276, _278));
    float _3472 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _285 = sqrt(1.0 - (isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0))));
    float _288 = fma(_285, _214, fma(_278, _206 * TANGENT.x, (_192 * _184) * _276));
    float _291 = fma(_285, _215, fma(_278, _206 * TANGENT.y, (_192 * _185) * _276));
    float _294 = fma(_285, _216, fma(_278, _206 * TANGENT.z, (_192 * _186) * _276));
    float _298 = inversesqrt(dot(vec3(_288, _291, _294), vec3(_288, _291, _294)));
    float _299 = _298 * _288;
    float _300 = _298 * _291;
    float _301 = _298 * _294;
    float _3483 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _302 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
    float _3494 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _303 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
    float _3505 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3516 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3527 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3538 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _307 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
    float _323 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _365 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _375 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _365);
    float _376 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _365);
    float _377 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _365);
    float _381 = inversesqrt(dot(vec3(_375, _376, _377), vec3(_375, _376, _377)));
    float _382 = _375 * _381;
    float _383 = _376 * _381;
    float _384 = _377 * _381;
    float _390 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _391 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _412 = fma(_301, cbSceneParam._m0[5u].z, fma(_300, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _299));
    float _415 = fma(_301, cbSceneParam._m0[6u].z, fma(_300, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _299));
    float _418 = fma(_301, cbSceneParam._m0[7u].z, fma(_300, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _299));
    uint _431 = uint(roundEven(NORMAL.w)) * 13u;
    uint _434 = (_431 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _440 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0)))) * cbInstanceData._m0[_434].x;
    float _441 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0)))) * cbInstanceData._m0[_434].y;
    float _442 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0)))) * cbInstanceData._m0[_434].z;
    float _3549 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _443 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
    float _3560 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
    float _3571 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _445 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
    float _446 = 1.0 - _307;
    float _447 = _443 * _446;
    float _448 = _444 * _446;
    float _449 = _445 * _446;
    float _454 = (_443 + (-0.039999999105930328369140625)) * _307;
    float _455 = (_444 + (-0.039999999105930328369140625)) * _307;
    float _456 = (_445 + (-0.039999999105930328369140625)) * _307;
    float _457 = _454 + 0.039999999105930328369140625;
    float _459 = _455 + 0.039999999105930328369140625;
    float _460 = _456 + 0.039999999105930328369140625;
    vec4 _469 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _390, cbSceneParam._m0[86u].y * _391));
    float _472 = _469.x * TEXCOORD_1.w;
    float _473 = dot(vec3(_299, _300, _301), vec3(_382, _383, _384));
    float _476 = _473 * 2.0;
    float _480 = (_476 * _299) - _382;
    float _481 = (_476 * _300) - _383;
    float _482 = (_476 * _301) - _384;
    float _486 = abs(dot(vec3(_382, _383, _384), vec3(_299, _300, _301)));
    float _3582 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _488 = sqrt(_303);
    float _501 = exp2((_488 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_488 * 3.0));
    float _507 = (1.0 - _501) * ((_488 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _508 = _501 * _488;
    float _536 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _540 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _544 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _846;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _571 = fma(_544, cbModelParam._m0[26u].z, fma(_540, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _536));
        float _575 = fma(_544, cbModelParam._m0[27u].z, fma(_540, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _536));
        float _579 = fma(_544, cbModelParam._m0[28u].z, fma(_540, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _536));
        float _604 = _536 + _299;
        float _605 = _540 + _300;
        float _606 = _544 + _301;
        float _616 = fma(_606, cbModelParam._m0[26u].z, fma(_605, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _604)) - _571;
        float _617 = fma(_606, cbModelParam._m0[27u].z, fma(_605, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _604)) - _575;
        float _618 = fma(_606, cbModelParam._m0[28u].z, fma(_605, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _604)) - _579;
        float _622 = inversesqrt(dot(vec3(_616, _617, _618), vec3(_616, _617, _618)));
        float _635 = ((_622 * _616) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_571 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _636 = ((_622 * _617) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_575 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _637 = ((_622 * _618) / cbModelParam._m0[34u].z) + ((((((_579 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _640 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_635, _636, _637), 0.0);
        vec4 _647 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_635, _636, _637), 0.0);
        vec4 _654 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_635, _636, _637), 0.0);
        vec4 _661 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_635, _636, _637), 0.0);
        float _674 = exp2((_640.w + (-0.5)) * 20.0) * 2.0;
        float _675 = _674 * (_640.x + (-0.5));
        float _676 = _674 * (_640.y + (-0.5));
        float _677 = _674 * (_640.z + (-0.5));
        float _684 = exp2((_647.w + (-0.5)) * 20.0) * 2.0;
        float _685 = _684 * (_647.x + (-0.5));
        float _686 = _684 * (_647.y + (-0.5));
        float _687 = _684 * (_647.z + (-0.5));
        float _694 = exp2((_654.w + (-0.5)) * 20.0) * 2.0;
        float _695 = _694 * (_654.x + (-0.5));
        float _696 = _694 * (_654.y + (-0.5));
        float _697 = _694 * (_654.z + (-0.5));
        float _704 = exp2((_661.w + (-0.5)) * 20.0) * 2.0;
        float _705 = _704 * (_661.x + (-0.5));
        float _706 = _704 * (_661.y + (-0.5));
        float _707 = _704 * (_661.z + (-0.5));
        float _708 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _709 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _710 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _711 = _675 * 0.5;
        float _712 = _685 * 0.5;
        float _713 = _695 * 0.5;
        float _714 = dot(vec3(_711, _712, _713), vec3(_711, _712, _713));
        float _719 = (_714 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_714);
        float _728 = (dot(vec3(_299, _300, _301), vec3(_719 * _711, _719 * _712, _719 * _713)) + 1.0) * 0.5;
        float _3608 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _738 = sqrt(((_712 * _712) + (_711 * _711)) + (_713 * _713)) / (_708 + 9.9999997473787516355514526367188e-06);
        float _3619 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _739 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _740 = _739 * 2.0;
        float _744 = (1.0 - _739) / (_739 + 1.0);
        float _3630 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _745 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _754 = ((((1.0 - _745) * (_740 + 2.0)) * exp2(log2(isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * (_740 + 1.0))) + _745) * _708;
        float _755 = _676 * 0.5;
        float _756 = _686 * 0.5;
        float _757 = _696 * 0.5;
        float _758 = dot(vec3(_755, _756, _757), vec3(_755, _756, _757));
        float _763 = (_758 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_758);
        float _771 = (dot(vec3(_299, _300, _301), vec3(_763 * _755, _763 * _756, _763 * _757)) + 1.0) * 0.5;
        float _3641 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _780 = sqrt(((_756 * _756) + (_755 * _755)) + (_757 * _757)) / (_709 + 9.9999997473787516355514526367188e-06);
        float _3652 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _781 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _782 = _781 * 2.0;
        float _786 = (1.0 - _781) / (_781 + 1.0);
        float _3663 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _796 = ((((1.0 - _787) * (_782 + 2.0)) * exp2(log2(isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) * (_782 + 1.0))) + _787) * _709;
        float _797 = _677 * 0.5;
        float _798 = _687 * 0.5;
        float _799 = _697 * 0.5;
        float _800 = dot(vec3(_797, _798, _799), vec3(_797, _798, _799));
        float _805 = (_800 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_800);
        float _813 = (dot(vec3(_299, _300, _301), vec3(_805 * _797, _805 * _798, _805 * _799)) + 1.0) * 0.5;
        float _3674 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _822 = sqrt(((_798 * _798) + (_797 * _797)) + (_799 * _799)) / (_710 + 9.9999997473787516355514526367188e-06);
        float _3685 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _823 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _824 = _823 * 2.0;
        float _828 = (1.0 - _823) / (_823 + 1.0);
        float _3696 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _838 = ((((1.0 - _829) * (_824 + 2.0)) * exp2(log2(isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * (_824 + 1.0))) + _829) * _710;
        _846 = _677;
        _848 = _676;
        _849 = _675;
        _850 = _687;
        _851 = _686;
        _852 = _685;
        _853 = _697;
        _854 = _696;
        _855 = _695;
        _856 = _710;
        _857 = _709;
        _858 = _708;
        _859 = cbModelParam._m0[36u].z * (isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0)));
        _860 = cbModelParam._m0[36u].z * (isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0)));
        _861 = cbModelParam._m0[36u].z * (isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0)));
    }
    else
    {
        _846 = _847;
        _848 = _847;
        _849 = _847;
        _850 = _847;
        _851 = _847;
        _852 = _847;
        _853 = _847;
        _854 = _847;
        _855 = _847;
        _856 = _847;
        _857 = _847;
        _858 = _847;
        _859 = 0.0;
        _860 = 0.0;
        _861 = 0.0;
    }
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _887 = fma(_544, cbModelParam._m0[30u].z, fma(_540, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _536));
        float _891 = fma(_544, cbModelParam._m0[31u].z, fma(_540, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _536));
        float _895 = fma(_544, cbModelParam._m0[32u].z, fma(_540, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _536));
        float _918 = _536 + _299;
        float _919 = _540 + _300;
        float _920 = _544 + _301;
        float _930 = fma(_920, cbModelParam._m0[30u].z, fma(_919, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _918)) - _887;
        float _931 = fma(_920, cbModelParam._m0[31u].z, fma(_919, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _918)) - _891;
        float _932 = fma(_920, cbModelParam._m0[32u].z, fma(_919, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _918)) - _895;
        float _936 = inversesqrt(dot(vec3(_930, _931, _932), vec3(_930, _931, _932)));
        float _949 = ((_936 * _930) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_887 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _950 = ((_936 * _931) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_891 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _951 = ((_936 * _932) / cbModelParam._m0[35u].z) + ((((((_895 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        float _986 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_953.x + (-0.5));
        float _988 = _986 * (_953.y + (-0.5));
        float _989 = _986 * (_953.z + (-0.5));
        float _996 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_960.x + (-0.5));
        float _998 = _996 * (_960.y + (-0.5));
        float _999 = _996 * (_960.z + (-0.5));
        float _1006 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_967.x + (-0.5));
        float _1008 = _1006 * (_967.y + (-0.5));
        float _1009 = _1006 * (_967.z + (-0.5));
        float _1016 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_974.x + (-0.5));
        float _1018 = _1016 * (_974.y + (-0.5));
        float _1019 = _1016 * (_974.z + (-0.5));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = _987 * 0.5;
        float _1024 = _997 * 0.5;
        float _1025 = _1007 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1039 = (dot(vec3(_299, _300, _301), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3737 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1048 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3748 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3759 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * (_1050 + 1.0))) + _1055) * _1020;
        float _1065 = _988 * 0.5;
        float _1066 = _998 * 0.5;
        float _1067 = _1008 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1081 = (dot(vec3(_299, _300, _301), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _3770 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1090 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3781 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3792 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * (_1092 + 1.0))) + _1097) * _1021;
        float _1107 = _989 * 0.5;
        float _1108 = _999 * 0.5;
        float _1109 = _1009 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(_299, _300, _301), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _3803 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3814 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _3825 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * (_1134 + 1.0))) + _1139) * _1022;
        _1156 = _989;
        _1157 = _988;
        _1158 = _987;
        _1159 = _999;
        _1160 = _998;
        _1161 = _997;
        _1162 = _1009;
        _1163 = _1008;
        _1164 = _1007;
        _1165 = _1022;
        _1166 = _1021;
        _1167 = _1020;
        _1168 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
        _1169 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
        _1170 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
    }
    else
    {
        _1156 = _847;
        _1157 = _847;
        _1158 = _847;
        _1159 = _847;
        _1160 = _847;
        _1161 = _847;
        _1162 = _847;
        _1163 = _847;
        _1164 = _847;
        _1165 = _847;
        _1166 = _847;
        _1167 = _847;
        _1168 = 0.0;
        _1169 = 0.0;
        _1170 = 0.0;
    }
    float _1180 = (cbModelParam._m0[1u].x * (_1168 - _859)) + _859;
    float _1181 = (cbModelParam._m0[1u].x * (_1169 - _860)) + _860;
    float _1182 = (cbModelParam._m0[1u].x * (_1170 - _861)) + _861;
    float _1203 = fma(_1182, cbSceneParam._m0[89u].z, fma(_1181, cbSceneParam._m0[89u].y, _1180 * cbSceneParam._m0[89u].x));
    float _1206 = fma(_1182, cbSceneParam._m0[90u].z, fma(_1181, cbSceneParam._m0[90u].y, _1180 * cbSceneParam._m0[90u].x));
    float _1209 = fma(_1182, cbSceneParam._m0[91u].z, fma(_1181, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1180));
    float _1224 = _480 * 0.5;
    float _1225 = _481 * 0.5;
    float _1226 = _482 * 0.5;
    float _1227 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_1158, _1161, _1164, _1167));
    float _1230 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_1157, _1160, _1163, _1166));
    float _1233 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_1156, _1159, _1162, _1165));
    float _1267;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1240 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_846, _850, _853, _856));
        float _1244 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_848, _851, _854, _857));
        float _1248 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_849, _852, _855, _858));
        float _1255 = dot(vec4(cbModelParam._m0[39u]), vec4(_1224, _1225, _1226, 1.0));
        _1267 = dot(vec3(isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)), isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)), isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1255) ? 0.0 : (isnan(0.0) ? _1255 : max(0.0, _1255))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1267 = 1.0;
    }
    float _1278;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1269 = dot(vec4(cbModelParam._m0[40u]), vec4(_1224, _1225, _1226, 1.0));
        _1278 = dot(vec3(isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)), isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)), isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1269) ? 0.0 : (isnan(0.0) ? _1269 : max(0.0, _1269))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1278 = 1.0;
    }
    float _1282 = (_1278 * cbModelParam._m0[1u].x) + (_1267 * (1.0 - cbModelParam._m0[1u].x));
    float _1292 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _303);
    float _1293 = isnan(_1292) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1292 : min(cbModelParam._m0[25u].z, _1292));
    float _1375;
    float _1377;
    float _1379;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1342 = fma(_544, cbModelParam._m0[13u].z, fma(_540, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _536)) + cbModelParam._m0[13u].w;
        float _1346 = fma(_544, cbModelParam._m0[14u].z, fma(_540, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _536)) + cbModelParam._m0[14u].w;
        float _1350 = fma(_544, cbModelParam._m0[15u].z, fma(_540, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _536)) + cbModelParam._m0[15u].w;
        float _1353 = fma(_482, cbModelParam._m0[13u].z, fma(_481, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _480));
        float _1356 = fma(_482, cbModelParam._m0[14u].z, fma(_481, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _480));
        float _1359 = fma(_482, cbModelParam._m0[15u].z, fma(_481, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _480));
        float _1387;
        if (_1353 > 0.0)
        {
            _1387 = abs((1.0 - _1342) / _1353);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1353 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1342 + 1.0) / _1353);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1387 = frontier_phi_16_14_ladder;
        }
        float _1563;
        if (_1356 > 0.0)
        {
            _1563 = abs((1.0 - _1346) / _1356);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1356 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1346 + 1.0) / _1356);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1563 = frontier_phi_25_21_ladder;
        }
        float _1859;
        if (_1359 > 0.0)
        {
            _1859 = abs((1.0 - _1350) / _1359);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1359 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1350 + 1.0) / _1359);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1859 = frontier_phi_37_32_ladder;
        }
        float _1861 = isnan(_1563) ? _1387 : (isnan(_1387) ? _1563 : min(_1387, _1563));
        float _1862 = isnan(_1859) ? _1861 : (isnan(_1861) ? _1859 : min(_1861, _1859));
        float _1866 = (_1862 * _1353) + _1342;
        float _1867 = (_1862 * _1356) + _1346;
        float _1868 = (_1862 * _1359) + _1350;
        float _1869 = _1862 * 9.9999997473787516355514526367188e-05;
        float _1871 = (-1.0) - _1869;
        float _1873 = _1869 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1868 > _1873) || ((_1868 < _1871) || ((_1867 > _1873) || ((_1867 < _1871) || ((_1866 < _1871) || (_1866 > _1873))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2013 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1868, cbModelParam._m0[9u].z, fma(_1867, cbModelParam._m0[9u].y, _1866 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1868, cbModelParam._m0[10u].z, fma(_1867, cbModelParam._m0[10u].y, _1866 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1868, cbModelParam._m0[11u].z, fma(_1867, cbModelParam._m0[11u].y, _1866 * cbModelParam._m0[11u].x))), _1293);
            frontier_phi_15_37_ladder = _2013.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2013.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2013.z * cbModelParam._m0[1u].y;
        }
        _1375 = frontier_phi_15_37_ladder_1;
        _1377 = frontier_phi_15_37_ladder;
        _1379 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1363 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_480, _481, _482), _1293);
        _1375 = _1363.x * cbModelParam._m0[1u].y;
        _1377 = _1363.y * cbModelParam._m0[1u].y;
        _1379 = _1363.z * cbModelParam._m0[1u].y;
    }
    float _1383 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _303);
    float _1384 = isnan(_1383) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1383 : min(cbModelParam._m0[25u].w, _1383));
    float _1477;
    float _1479;
    float _1481;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1441 = fma(_544, cbModelParam._m0[21u].z, fma(_540, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _536)) + cbModelParam._m0[21u].w;
        float _1445 = fma(_544, cbModelParam._m0[22u].z, fma(_540, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _536)) + cbModelParam._m0[22u].w;
        float _1449 = fma(_544, cbModelParam._m0[23u].z, fma(_540, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _536)) + cbModelParam._m0[23u].w;
        float _1452 = fma(_482, cbModelParam._m0[21u].z, fma(_481, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _480));
        float _1455 = fma(_482, cbModelParam._m0[22u].z, fma(_481, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _480));
        float _1458 = fma(_482, cbModelParam._m0[23u].z, fma(_481, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _480));
        float _1568;
        if (_1452 > 0.0)
        {
            _1568 = abs((1.0 - _1441) / _1452);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1452 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1441 + 1.0) / _1452);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1568 = frontier_phi_27_23_ladder;
        }
        float _1886;
        if (_1455 > 0.0)
        {
            _1886 = abs((1.0 - _1445) / _1455);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1455 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1445 + 1.0) / _1455);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1886 = frontier_phi_39_34_ladder;
        }
        float _2224;
        if (_1458 > 0.0)
        {
            _2224 = abs((1.0 - _1449) / _1458);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1458 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1449 + 1.0) / _1458);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2224 = frontier_phi_49_46_ladder;
        }
        float _2226 = isnan(_1886) ? _1568 : (isnan(_1568) ? _1886 : min(_1568, _1886));
        float _2227 = isnan(_2224) ? _2226 : (isnan(_2226) ? _2224 : min(_2226, _2224));
        float _2231 = (_2227 * _1452) + _1441;
        float _2232 = (_2227 * _1455) + _1445;
        float _2233 = (_2227 * _1458) + _1449;
        float _2234 = _2227 * 9.9999997473787516355514526367188e-05;
        float _2235 = (-1.0) - _2234;
        float _2237 = _2234 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2233 > _2237) || ((_2233 < _2235) || ((_2232 > _2237) || ((_2232 < _2235) || ((_2231 < _2235) || (_2231 > _2237))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2355 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2233, cbModelParam._m0[17u].z, fma(_2232, cbModelParam._m0[17u].y, _2231 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2233, cbModelParam._m0[18u].z, fma(_2232, cbModelParam._m0[18u].y, _2231 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2233, cbModelParam._m0[19u].z, fma(_2232, cbModelParam._m0[19u].y, _2231 * cbModelParam._m0[19u].x))), _1384);
            frontier_phi_24_49_ladder = _2355.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2355.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2355.x * cbModelParam._m0[1u].z;
        }
        _1477 = frontier_phi_24_49_ladder_2;
        _1479 = frontier_phi_24_49_ladder_1;
        _1481 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1461 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_480, _481, _482), _1384);
        _1477 = _1461.x * cbModelParam._m0[1u].z;
        _1479 = _1461.y * cbModelParam._m0[1u].z;
        _1481 = _1461.z * cbModelParam._m0[1u].z;
    }
    float _1494 = (((_507 * _457) + _508) * _472) * ((cbModelParam._m0[1u].w * (_1477 - _1375)) + _1375);
    float _1496 = (((_507 * _459) + _508) * _472) * ((cbModelParam._m0[1u].w * (_1479 - _1377)) + _1377);
    float _1498 = (((_507 * _460) + _508) * _472) * ((cbModelParam._m0[1u].w * (_1481 - _1379)) + _1379);
    float _1501 = fma(_1498, cbSceneParam._m0[89u].z, fma(_1496, cbSceneParam._m0[89u].y, _1494 * cbSceneParam._m0[89u].x));
    float _1504 = fma(_1498, cbSceneParam._m0[90u].z, fma(_1496, cbSceneParam._m0[90u].y, _1494 * cbSceneParam._m0[90u].x));
    float _1507 = fma(_1498, cbSceneParam._m0[91u].z, fma(_1496, cbSceneParam._m0[91u].y, _1494 * cbSceneParam._m0[91u].x));
    float _1542 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1546 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1550 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1554 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1555 = _1542 / _1554;
    float _1556 = _1546 / _1554;
    float _1557 = _1550 / _1554;
    float _1704;
    float _1705;
    float _1706;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1584 = ((uint(_1557 > cbSceneParam._m0[59u].y) + uint(_1557 > cbSceneParam._m0[59u].x)) + uint(_1557 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1585 = _1584 + 43u;
        uint _1593 = _1584 + 44u;
        uint _1601 = _1584 + 45u;
        uint _1609 = _1584 + 46u;
        float _1620 = fma(_1554, cbSceneParam._m0[_1585].w, fma(_1550, cbSceneParam._m0[_1585].z, fma(_1546, cbSceneParam._m0[_1585].y, _1542 * cbSceneParam._m0[_1585].x)));
        float _1624 = fma(_1554, cbSceneParam._m0[_1593].w, fma(_1550, cbSceneParam._m0[_1593].z, fma(_1546, cbSceneParam._m0[_1593].y, _1542 * cbSceneParam._m0[_1593].x)));
        float _1632 = fma(_1554, cbSceneParam._m0[_1609].w, fma(_1550, cbSceneParam._m0[_1609].z, fma(_1546, cbSceneParam._m0[_1609].y, _1542 * cbSceneParam._m0[_1609].x)));
        float _1637 = cbSceneParam._m0[33u].z * _1632;
        float _1639 = cbSceneParam._m0[33u].w * _1632;
        float _1642 = fma(_1554, cbSceneParam._m0[_1601].w, fma(_1550, cbSceneParam._m0[_1601].z, fma(_1546, cbSceneParam._m0[_1601].y, _1542 * cbSceneParam._m0[_1601].x))) / _1632;
        float _1690 = (cbSceneParam._m0[33u].x - sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557))) * cbSceneParam._m0[33u].y;
        float _3951 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1697 = (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1637 + _1620) / _1632, (_1639 + _1624) / _1632), _1642), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1639 + _1620) / _1632, (_1624 - _1637) / _1632), _1642), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1620 - _1637) / _1632, (_1624 - _1639) / _1632), _1642), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1620 - _1639) / _1632, (_1637 + _1624) / _1632), _1642), 0.0)).x), vec4(0.25)));
        _1704 = 1.0 - (_1697 * cbSceneParam._m0[34u].x);
        _1705 = 1.0 - (_1697 * cbSceneParam._m0[34u].y);
        _1706 = 1.0 - (_1697 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1704 = 1.0;
        _1705 = 1.0;
        _1706 = 1.0;
    }
    float _1770;
    float _1772;
    float _1774;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1758 = fma(_1554, cbSceneParam._m0[63u].w, fma(_1550, cbSceneParam._m0[63u].z, fma(_1546, cbSceneParam._m0[63u].y, _1542 * cbSceneParam._m0[63u].x)));
        float _1759 = fma(_1554, cbSceneParam._m0[60u].w, fma(_1550, cbSceneParam._m0[60u].z, fma(_1546, cbSceneParam._m0[60u].y, _1542 * cbSceneParam._m0[60u].x))) / _1758;
        float _1760 = fma(_1554, cbSceneParam._m0[61u].w, fma(_1550, cbSceneParam._m0[61u].z, fma(_1546, cbSceneParam._m0[61u].y, _1542 * cbSceneParam._m0[61u].x))) / _1758;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1759 >= cbSceneParam._m0[64u].x) && (_1760 >= cbSceneParam._m0[64u].y)) && (_1759 <= cbSceneParam._m0[64u].z)) && (_1760 <= cbSceneParam._m0[64u].w))
        {
            float _1899 = fma(_1554, cbSceneParam._m0[62u].w, fma(_1550, cbSceneParam._m0[62u].z, fma(_1546, cbSceneParam._m0[62u].y, _1542 * cbSceneParam._m0[62u].x))) / _1758;
            float _1903 = isnan(cbSceneParam._m0[41u].w) ? _1899 : (isnan(_1899) ? cbSceneParam._m0[41u].w : max(_1899, cbSceneParam._m0[41u].w));
            float _1946 = (cbSceneParam._m0[33u].x - sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557))) * cbSceneParam._m0[33u].y;
            float _3967 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
            float _1953 = (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1759, cbSceneParam._m0[33u].w + _1760), _1903), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1759, _1760 - cbSceneParam._m0[33u].z), _1903), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1759 - cbSceneParam._m0[33u].z, _1760 - cbSceneParam._m0[33u].w), _1903), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1759 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1760), _1903), 0.0)).x), vec4(0.25)));
            float _1957 = 1.0 - (_1953 * cbSceneParam._m0[34u].x);
            float _1958 = 1.0 - (_1953 * cbSceneParam._m0[34u].y);
            float _1959 = 1.0 - (_1953 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1958) ? _1705 : (isnan(_1705) ? _1958 : min(_1705, _1958));
            frontier_phi_36_35_ladder_1 = isnan(_1959) ? _1706 : (isnan(_1706) ? _1959 : min(_1706, _1959));
            frontier_phi_36_35_ladder_2 = isnan(_1957) ? _1704 : (isnan(_1704) ? _1957 : min(_1704, _1957));
        }
        else
        {
            frontier_phi_36_35_ladder = _1705;
            frontier_phi_36_35_ladder_1 = _1706;
            frontier_phi_36_35_ladder_2 = _1704;
        }
        _1770 = frontier_phi_36_35_ladder_2;
        _1772 = frontier_phi_36_35_ladder;
        _1774 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1770 = _1704;
        _1772 = _1705;
        _1774 = _1706;
    }
    uvec4 _1779 = floatBitsToUint(cbInstanceData._m0[_431 + 5u]);
    uint _1781 = _1779.x * 14u;
    uint _1782 = _1781 + 13u;
    float _1789 = _472 + (-1.0);
    float _1794 = (cbLight._m0[_1782].x * _1789) + 1.0;
    float _1795 = (cbLight._m0[_1782].y * _1789) + 1.0;
    float _1796 = (cbLight._m0[_1782].z * _1789) + 1.0;
    float _1797 = (cbLight._m0[_1782].w * _1789) + 1.0;
    uint _1798 = _1781 + 5u;
    float _1804 = isnan(1.0) ? _1795 : (isnan(_1795) ? 1.0 : min(_1795, 1.0));
    uint _1808 = _1781 + 4u;
    float _1818 = isnan(1.0) ? _1794 : (isnan(_1794) ? 1.0 : min(_1794, 1.0));
    uint _1822 = _1781 | 1u;
    float _1833 = dot(vec3(cbLight._m0[_1781].xyz), vec3(_299, _300, _301));
    float _1836 = dot(vec3(cbLight._m0[_1822].xyz), vec3(_299, _300, _301));
    float _4003 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _4014 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1841 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * 0.3183098733425140380859375;
    float _1843 = (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * 0.3183098733425140380859375;
    float _1850 = ((cbLight._m0[_1798].x * _1804) * _1843) + (((cbLight._m0[_1808].x * _1770) * _1818) * _1841);
    float _1851 = ((_1804 * cbLight._m0[_1798].y) * _1843) + (((cbLight._m0[_1808].y * _1772) * _1818) * _1841);
    float _1852 = ((_1804 * cbLight._m0[_1798].z) * _1843) + (((cbLight._m0[_1808].z * _1774) * _1818) * _1841);
    uvec4 _1856 = floatBitsToUint(cbLight._m0[_1781 + 12u]);
    bool _1858 = _1856.x == 0u;
    float _1960;
    float _1962;
    float _1964;
    if (_1858)
    {
        _1960 = _1850;
        _1962 = _1851;
        _1964 = _1852;
    }
    else
    {
        uint _1968 = _1781 + 6u;
        float _1984 = (dot(vec3(cbLight._m0[_1781 + 2u].xyz), vec3(_299, _300, _301)) * 0.5) + 0.5;
        float _1985 = _1984 * _1984;
        float _4025 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
        float _1986 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1987 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
        _1960 = (((cbLight._m0[_1968].x * 0.3183098733425140380859375) * _1986) * _1987) + _1850;
        _1962 = (((cbLight._m0[_1968].y * 0.3183098733425140380859375) * _1986) * _1987) + _1851;
        _1964 = (((cbLight._m0[_1968].z * 0.3183098733425140380859375) * _1986) * _1987) + _1852;
    }
    bool _1967 = _1856.y == 0u;
    float _2022;
    float _2024;
    float _2026;
    if (_1967)
    {
        _2022 = _1960;
        _2024 = _1962;
        _2026 = _1964;
    }
    else
    {
        uint _2195 = _1781 + 7u;
        float _2211 = (dot(vec3(cbLight._m0[_1781 + 3u].xyz), vec3(_299, _300, _301)) * 0.5) + 0.5;
        float _2212 = _2211 * _2211;
        float _4041 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2213 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _2214 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
        _2022 = (((cbLight._m0[_2195].x * 0.3183098733425140380859375) * _2213) * _2214) + _1960;
        _2024 = (((cbLight._m0[_2195].y * 0.3183098733425140380859375) * _2213) * _2214) + _1962;
        _2026 = (((cbLight._m0[_2195].z * 0.3183098733425140380859375) * _2213) * _2214) + _1964;
    }
    uint _2029 = _1781 + 8u;
    float _2042 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1781].w)) * _303) * 0.949999988079071044921875);
    float _2043 = _2042 * _2042;
    float _2044 = cbLight._m0[_1781].x + _382;
    float _2045 = cbLight._m0[_1781].y + _383;
    float _2046 = cbLight._m0[_1781].z + _384;
    float _2050 = inversesqrt(dot(vec3(_2044, _2045, _2046), vec3(_2044, _2045, _2046)));
    float _2051 = _2050 * _2044;
    float _2052 = _2050 * _2045;
    float _2053 = _2050 * _2046;
    float _2054 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_1781].xyz));
    float _4057 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2057 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _4068 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _2058 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _2059 = dot(vec3(_299, _300, _301), vec3(_2051, _2052, _2053));
    float _4079 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2062 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _2063 = dot(vec3(cbLight._m0[_1781].xyz), vec3(_2051, _2052, _2053));
    float _4090 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2067 = _2043 * _2043;
    float _2071 = ((_2062 * _2062) * (_2067 + (-1.0))) + 1.0;
    float _2079 = exp2(log2(1.0 - (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0)))) * 5.0);
    float _2080 = 0.959999978542327880859375 - _454;
    float _2082 = 0.959999978542327880859375 - _455;
    float _2083 = 0.959999978542327880859375 - _456;
    float _2090 = 1.0 - _2043;
    float _2101 = (0.5 / (((_2058 * ((_2057 * _2090) + _2043)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2090) + _2043) * _2057))) * _2057;
    float _4101 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2103 = (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_2067 / ((_2071 * _2071) * 3.141590118408203125));
    uint _2117 = _1781 + 9u;
    float _2128 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1822].w)) * _303) * 0.949999988079071044921875);
    float _2129 = _2128 * _2128;
    float _2130 = cbLight._m0[_1822].x + _382;
    float _2131 = cbLight._m0[_1822].y + _383;
    float _2132 = cbLight._m0[_1822].z + _384;
    float _2136 = inversesqrt(dot(vec3(_2130, _2131, _2132), vec3(_2130, _2131, _2132)));
    float _2137 = _2136 * _2130;
    float _2138 = _2136 * _2131;
    float _2139 = _2136 * _2132;
    float _2140 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_1822].xyz));
    float _4112 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2143 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _2144 = dot(vec3(_299, _300, _301), vec3(_2137, _2138, _2139));
    float _4123 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2147 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _2148 = dot(vec3(cbLight._m0[_1822].xyz), vec3(_2137, _2138, _2139));
    float _4134 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2152 = _2129 * _2129;
    float _2156 = ((_2147 * _2147) * (_2152 + (-1.0))) + 1.0;
    float _2163 = exp2(log2(1.0 - (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0)))) * 5.0);
    float _2170 = 1.0 - _2129;
    float _2180 = (0.5 / (((_2058 * ((_2143 * _2170) + _2129)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2170) + _2129) * _2143))) * _2143;
    float _4145 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2182 = (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_2152 / ((_2156 * _2156) * 3.141590118408203125));
    float _2192 = (((((_2163 * _2080) + _457) * cbLight._m0[_2117].x) * _2182) * _1804) + ((((cbLight._m0[_2029].x * _1770) * ((_2079 * _2080) + _457)) * _2103) * _1818);
    float _2193 = (((((_2163 * _2082) + _459) * cbLight._m0[_2117].y) * _2182) * _1804) + ((((cbLight._m0[_2029].y * _1772) * ((_2079 * _2082) + _459)) * _2103) * _1818);
    float _2194 = (((((_2163 * _2083) + _460) * cbLight._m0[_2117].z) * _2182) * _1804) + ((((cbLight._m0[_2029].z * _1774) * ((_2079 * _2083) + _460)) * _2103) * _1818);
    float _2250;
    float _2252;
    float _2254;
    if (_1858)
    {
        _2250 = _2192;
        _2252 = _2193;
        _2254 = _2194;
    }
    else
    {
        uint _2256 = _1781 + 2u;
        uint _2260 = _1781 + 10u;
        float _2274 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2256].w)) * _303) * 0.949999988079071044921875);
        float _2275 = _2274 * _2274;
        float _2276 = cbLight._m0[_2256].x + _382;
        float _2277 = cbLight._m0[_2256].y + _383;
        float _2278 = cbLight._m0[_2256].z + _384;
        float _2282 = inversesqrt(dot(vec3(_2276, _2277, _2278), vec3(_2276, _2277, _2278)));
        float _2283 = _2282 * _2276;
        float _2284 = _2282 * _2277;
        float _2285 = _2282 * _2278;
        float _2286 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_2256].xyz));
        float _4156 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2289 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _2290 = dot(vec3(_299, _300, _301), vec3(_2283, _2284, _2285));
        float _4167 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2293 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _2294 = dot(vec3(cbLight._m0[_2256].xyz), vec3(_2283, _2284, _2285));
        float _4178 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2298 = _2275 * _2275;
        float _2302 = ((_2293 * _2293) * (_2298 + (-1.0))) + 1.0;
        float _2309 = exp2(log2(1.0 - (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) * 5.0);
        float _2316 = 1.0 - _2275;
        float _2326 = (0.5 / (((_2058 * ((_2289 * _2316) + _2275)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2316) + _2275) * _2289))) * _2289;
        float _4189 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2328 = (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_2298 / ((_2302 * _2302) * 3.141590118408203125));
        float _2329 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
        _2250 = (((((_2309 * _2080) + _457) * cbLight._m0[_2260].x) * _2328) * _2329) + _2192;
        _2252 = (((((_2309 * _2082) + _459) * cbLight._m0[_2260].y) * _2328) * _2329) + _2193;
        _2254 = (((((_2309 * _2083) + _460) * cbLight._m0[_2260].z) * _2328) * _2329) + _2194;
    }
    float _2360;
    float _2362;
    float _2364;
    if (_1967)
    {
        _2360 = _2250;
        _2362 = _2252;
        _2364 = _2254;
    }
    else
    {
        uint _2371 = _1781 + 3u;
        uint _2375 = _1781 + 11u;
        float _2389 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2371].w)) * _303) * 0.949999988079071044921875);
        float _2390 = _2389 * _2389;
        float _2391 = cbLight._m0[_2371].x + _382;
        float _2392 = cbLight._m0[_2371].y + _383;
        float _2393 = cbLight._m0[_2371].z + _384;
        float _2397 = inversesqrt(dot(vec3(_2391, _2392, _2393), vec3(_2391, _2392, _2393)));
        float _2398 = _2397 * _2391;
        float _2399 = _2397 * _2392;
        float _2400 = _2397 * _2393;
        float _2401 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_2371].xyz));
        float _4205 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2404 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _2405 = dot(vec3(_299, _300, _301), vec3(_2398, _2399, _2400));
        float _4216 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2408 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _2409 = dot(vec3(cbLight._m0[_2371].xyz), vec3(_2398, _2399, _2400));
        float _4227 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2413 = _2390 * _2390;
        float _2417 = ((_2408 * _2408) * (_2413 + (-1.0))) + 1.0;
        float _2424 = exp2(log2(1.0 - (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) * 5.0);
        float _2431 = 1.0 - _2390;
        float _2441 = (0.5 / (((_2058 * ((_2404 * _2431) + _2390)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2431) + _2390) * _2404))) * _2404;
        float _4238 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2443 = (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_2413 / ((_2417 * _2417) * 3.141590118408203125));
        float _2444 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
        _2360 = (((((_2424 * _2080) + _457) * cbLight._m0[_2375].x) * _2443) * _2444) + _2250;
        _2362 = (((((_2424 * _2082) + _459) * cbLight._m0[_2375].y) * _2443) * _2444) + _2252;
        _2364 = (((((_2424 * _2083) + _460) * cbLight._m0[_2375].z) * _2443) * _2444) + _2254;
    }
    float _2509;
    float _2511;
    float _2513;
    float _2515;
    float _2517;
    float _2519;
    if (_1779.y == 0u)
    {
        uvec4 _2465 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2466 = _2465.x;
        uint _2477 = uint((float(_2465.y) * floor(float(uint(cbSceneParam._m0[85u].y * _391) / _2466))) + floor(float(uint(cbSceneParam._m0[85u].x * _390) / _2466)));
        float _2487 = (log2(_1557 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2488 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        uint _2491 = uint(isnan(14.0) ? _2488 : (isnan(_2488) ? 14.0 : min(_2488, 14.0)));
        uvec4 _2496 = texelFetch(g_lightClusterGridBuffer, int(((_2491 << 2u) + (_2477 << 6u)) >> 2u));
        uint _2497 = _2496.x;
        uint _2498 = _2465.z;
        float _2581;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        if (((((1u << ((_2498 >> 4u) & 15u)) + 4294967295u) & _2497) == 0u) || ((_2498 & 240u) == 0u))
        {
            _2581 = 0.0;
            _2583 = 0.0;
            _2585 = 0.0;
            _2587 = 0.0;
            _2589 = 0.0;
            _2591 = 0.0;
        }
        else
        {
            float _2582;
            float _2584;
            float _2586;
            float _2588;
            float _2590;
            float _2592;
            float _2725 = 0.0;
            float _2726 = 0.0;
            float _2727 = 0.0;
            float _2728 = 0.0;
            float _2729 = 0.0;
            float _2730 = 0.0;
            uint _2731 = 0u;
            uint _2740;
            bool _2741;
            for (;;)
            {
                _2740 = texelFetch(g_lightClassification, int((((_2491 << 5u) + (_2477 << 9u)) + (_2731 << 2u)) >> 2u)).x;
                _2741 = _2740 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2741)
                {
                    frontier_phi_68_pred = _2730;
                    frontier_phi_68_pred_1 = _2729;
                    frontier_phi_68_pred_2 = _2728;
                    frontier_phi_68_pred_3 = _2726;
                    frontier_phi_68_pred_4 = _2725;
                    frontier_phi_68_pred_5 = _2727;
                }
                else
                {
                    float _2849;
                    float _2850;
                    float _2851;
                    float _2852;
                    float _2853;
                    float _2854;
                    uint _2855;
                    _2849 = _2725;
                    _2850 = _2726;
                    _2851 = _2727;
                    _2852 = _2728;
                    _2853 = _2729;
                    _2854 = _2730;
                    _2855 = _2740;
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    float _2785;
                    float _2786;
                    for (;;)
                    {
                        uint _2859 = uint(findLSB(_2855)) + (_2731 << 5u);
                        uint _2856 = (_2855 + 4294967295u) & _2855;
                        uint _2861 = _2859 * 48u;
                        vec4 _2875 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2861)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 3u)).x));
                        uint _2881 = (_2859 * 48u) + 4u;
                        vec4 _2894 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2881)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 3u)).x));
                        uint _2900 = (_2859 * 48u) + 8u;
                        vec3 _2911 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2900)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 2u)).x));
                        float _2915 = _2875.x - _1555;
                        float _2916 = _2875.y - _1556;
                        float _2917 = _2875.z - _1557;
                        float _2918 = dot(vec3(_2915, _2916, _2917), vec3(_2915, _2916, _2917));
                        float _2921 = inversesqrt(_2918);
                        float _2922 = _2921 * _2915;
                        float _2923 = _2921 * _2916;
                        float _2924 = _2921 * _2917;
                        float _2925 = dot(vec3(_412, _415, _418), vec3(_2922, _2923, _2924));
                        float _2930 = 1.0 - (_2918 * _2875.w);
                        float _4264 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                        float _2931 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
                        float _2932 = sqrt(_2918) * _2894.w;
                        float _2935 = 1.39999997615814208984375 / (_2932 + 1.39999997615814208984375);
                        float _2936 = _2935 * _2935;
                        float _2939 = ((1.0 - _2936) * _2925) + _2936;
                        float _2942 = _2932 * _2932;
                        float _2946 = ((isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0))) * _2931) / ((_2942 * 0.699999988079071044921875) + 1.0);
                        float _2950 = (-0.0) - _1555;
                        float _2951 = (-0.0) - _1556;
                        float _2952 = (-0.0) - _1557;
                        float _2956 = inversesqrt(dot(vec3(_2950, _2951, _2952), vec3(_2950, _2951, _2952)));
                        float _2957 = _2956 * _2950;
                        float _2958 = _2956 * _2951;
                        float _2959 = _2956 * _2952;
                        float _2966 = exp2(log2(1.0 / ((_2942 * 3.5) + 5.0)) * 0.25);
                        float _2967 = 1.0 - _488;
                        float _2974 = sqrt(1.0 - ((1.0 - (_2967 * _2967)) * (1.0 - (_2966 * _2966))));
                        float _2975 = _2974 * _2974;
                        float _2976 = _2975 * _2975;
                        float _2977 = _2957 + _2922;
                        float _2978 = _2958 + _2923;
                        float _2979 = _2959 + _2924;
                        float _2983 = inversesqrt(dot(vec3(_2977, _2978, _2979), vec3(_2977, _2978, _2979)));
                        float _2987 = dot(vec3(_412, _415, _418), vec3(_2957, _2958, _2959));
                        float _4280 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                        float _2990 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                        float _2991 = dot(vec3(_412, _415, _418), vec3(_2983 * _2977, _2983 * _2978, _2983 * _2979));
                        float _4291 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                        float _2994 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                        float _2998 = ((_2994 * _2994) * (_2976 + (-1.0))) + 1.0;
                        float _2999 = _2935 * _2975;
                        float _3000 = _2999 * _2999;
                        float _3003 = ((1.0 - _3000) * _2925) + _3000;
                        float _4302 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                        float _3004 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
                        float _3005 = 1.0 - _2975;
                        float _3015 = (0.5 / (((_3004 * ((_2990 * _3005) + _2975)) + 9.9999999392252902907785028219223e-09) + (((_3004 * _3005) + _2975) * _2990))) * _3004;
                        float _4313 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                        float _3026 = (((_2976 * 3.1415927410125732421875) * (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) / ((_2998 * _2998) * ((_2942 * 2.1991131305694580078125) + 3.141590118408203125))) * _2931;
                        _2784 = (_2946 * _2894.x) + _2852;
                        _2785 = (_2946 * _2894.y) + _2853;
                        _2786 = (_2946 * _2894.z) + _2854;
                        _2781 = (_3026 * _2911.x) + _2849;
                        _2782 = (_3026 * _2911.y) + _2850;
                        _2783 = (_3026 * _2911.z) + _2851;
                        if (_2856 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2849 = _2781;
                            _2850 = _2782;
                            _2851 = _2783;
                            _2852 = _2784;
                            _2853 = _2785;
                            _2854 = _2786;
                            _2855 = _2856;
                        }
                    }
                    frontier_phi_68_pred = _2786;
                    frontier_phi_68_pred_1 = _2785;
                    frontier_phi_68_pred_2 = _2784;
                    frontier_phi_68_pred_3 = _2782;
                    frontier_phi_68_pred_4 = _2781;
                    frontier_phi_68_pred_5 = _2783;
                }
                _2592 = frontier_phi_68_pred;
                _2590 = frontier_phi_68_pred_1;
                _2588 = frontier_phi_68_pred_2;
                _2584 = frontier_phi_68_pred_3;
                _2582 = frontier_phi_68_pred_4;
                _2586 = frontier_phi_68_pred_5;
                uint _2732 = _2731 + 1u;
                if (_2732 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2725 = _2582;
                    _2726 = _2584;
                    _2727 = _2586;
                    _2728 = _2588;
                    _2729 = _2590;
                    _2730 = _2592;
                    _2731 = _2732;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2581 = _2582;
            _2583 = _2584;
            _2585 = _2586;
            _2587 = _2588;
            _2589 = _2590;
            _2591 = _2592;
        }
        uvec4 _2595 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2596 = _2595.z;
        uint _2598 = (_2596 >> 8u) & 15u;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        float _2701;
        float _2703;
        if (((4294967295u << _2598) & _2497) == 0u)
        {
            _2693 = _2581;
            _2695 = _2583;
            _2697 = _2585;
            _2699 = _2587;
            _2701 = _2589;
            _2703 = _2591;
        }
        else
        {
            float _2718 = inversesqrt(dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557)));
            float _2719 = _2718 * _1555;
            float _2720 = _2718 * _1556;
            float _2721 = _2718 * _1557;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2598 < ((_2596 >> 12u) & 15u))
            {
                float _2694;
                float _2696;
                float _2698;
                float _2700;
                float _2702;
                float _2704;
                float _2832 = _2581;
                float _2833 = _2583;
                float _2834 = _2585;
                float _2835 = _2587;
                float _2836 = _2589;
                float _2837 = _2591;
                uint _2838 = _2598;
                uint _2847;
                bool _2848;
                for (;;)
                {
                    _2847 = texelFetch(g_lightClassification, int((((_2491 << 5u) + (_2477 << 9u)) + (_2838 << 2u)) >> 2u)).x;
                    _2848 = _2847 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2848)
                    {
                        frontier_phi_74_pred = _2834;
                        frontier_phi_74_pred_1 = _2833;
                        frontier_phi_74_pred_2 = _2832;
                        frontier_phi_74_pred_3 = _2837;
                        frontier_phi_74_pred_4 = _2836;
                        frontier_phi_74_pred_5 = _2835;
                    }
                    else
                    {
                        float _3031;
                        float _3032;
                        float _3033;
                        float _3034;
                        float _3035;
                        float _3036;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3044 = _2832;
                        float _3045 = _2833;
                        float _3046 = _2834;
                        float _3047 = _2835;
                        float _3048 = _2836;
                        float _3049 = _2837;
                        uint _3050 = _2847;
                        uint _3051;
                        vec4 _3076;
                        float _3077;
                        vec4 _3092;
                        vec3 _3104;
                        vec4 _3120;
                        vec4 _3136;
                        float _3183;
                        bool _3184;
                        for (;;)
                        {
                            uint _3061 = ((_2838 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3050));
                            _3051 = (_3050 + 4294967295u) & _3050;
                            uint _3063 = _3061 * 40u;
                            _3076 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 3u)).x));
                            _3077 = _3076.w;
                            uint _3079 = (_3061 * 40u) + 4u;
                            _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            uint _3094 = (_3061 * 40u) + 8u;
                            _3104 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3094)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 2u)).x));
                            uint _3107 = (_3061 * 40u) + 16u;
                            _3120 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 3u)).x));
                            uint _3123 = (_3061 * 40u) + 20u;
                            _3136 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 3u)).x));
                            uint _3139 = (_3061 * 40u) + 24u;
                            vec4 _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            uint _3158 = (_3061 * 40u) + 28u;
                            vec4 _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            _3183 = fma(_1557, _3171.z, fma(_1556, _3171.y, _3171.x * _1555)) + _3171.w;
                            _3184 = !((fma(_1557, _3152.z, fma(_1556, _3152.y, _3152.x * _1555)) + _3152.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3184)
                            {
                                float _3211 = _3076.x - _1555;
                                float _3212 = _3076.y - _1556;
                                float _3213 = _3076.z - _1557;
                                float _3214 = dot(vec3(_3211, _3212, _3213), vec3(_3211, _3212, _3213));
                                float _3217 = inversesqrt(_3214);
                                float _3218 = _3217 * _3211;
                                float _3219 = _3217 * _3212;
                                float _3220 = _3217 * _3213;
                                float _3224 = 1.0 - (_3214 / (_3077 * _3077));
                                float _4324 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                                float _3225 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                                float _3229 = sqrt(_3214) * _3092.w;
                                float _3231 = 1.39999997615814208984375 / (_3229 + 1.39999997615814208984375);
                                float _3232 = _3231 * _3231;
                                float _3235 = ((1.0 - _3232) * dot(vec3(_3218, _3219, _3220), vec3(_412, _415, _418))) + _3232;
                                float _3238 = _3229 * _3229;
                                float _3242 = (fma(_1557, _3120.z, fma(_1556, _3120.y, _3120.x * _1555)) + _3120.w) / _3183;
                                float _3243 = (fma(_1557, _3136.z, fma(_1556, _3136.y, _3136.x * _1555)) + _3136.w) / _3183;
                                float _3247 = 1.0 - dot(vec2(_3242, _3243), vec2(_3242, _3243));
                                float _4340 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3248 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                                float _3249 = _3248 * (((isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0))) * _3225) / ((_3238 * 0.699999988079071044921875) + 1.0));
                                float _3261 = exp2(log2(1.0 / ((_3238 * 3.5) + 5.0)) * 0.25);
                                float _3262 = 1.0 - _488;
                                float _3269 = sqrt(1.0 - ((1.0 - (_3262 * _3262)) * (1.0 - (_3261 * _3261))));
                                float _3270 = _3269 * _3269;
                                float _3271 = _3270 * _3270;
                                float _3272 = _3218 - _2719;
                                float _3273 = _3219 - _2720;
                                float _3274 = _3220 - _2721;
                                float _3278 = inversesqrt(dot(vec3(_3272, _3273, _3274), vec3(_3272, _3273, _3274)));
                                float _3282 = dot(vec3(_412, _415, _418), vec3((-0.0) - _2719, (-0.0) - _2720, (-0.0) - _2721));
                                float _4351 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3285 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
                                float _3286 = dot(vec3(_412, _415, _418), vec3(_3278 * _3272, _3278 * _3273, _3278 * _3274));
                                float _4362 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3289 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                                float _3293 = ((_3289 * _3289) * (_3271 + (-1.0))) + 1.0;
                                float _3294 = _3231 * _3270;
                                float _3295 = _3294 * _3294;
                                float _3301 = ((1.0 - _3295) * dot(vec3(_412, _415, _418), vec3(_3218, _3219, _3220))) + _3295;
                                float _4373 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                                float _3302 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
                                float _3303 = 1.0 - _3270;
                                float _3313 = (0.5 / (((_3302 * ((_3285 * _3303) + _3270)) + 9.9999999392252902907785028219223e-09) + (((_3302 * _3303) + _3270) * _3285))) * _3302;
                                float _4384 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3323 = (_3248 * _3225) * (((_3271 * 3.1415927410125732421875) * (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0)))) / ((_3293 * _3293) * ((_3238 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3323 * _3104.z;
                                frontier_phi_80_pred_1 = _3323 * _3104.y;
                                frontier_phi_80_pred_2 = _3323 * _3104.x;
                                frontier_phi_80_pred_3 = _3249 * _3092.z;
                                frontier_phi_80_pred_4 = _3249 * _3092.y;
                                frontier_phi_80_pred_5 = _3249 * _3092.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3329 = frontier_phi_80_pred;
                            _3328 = frontier_phi_80_pred_1;
                            _3327 = frontier_phi_80_pred_2;
                            _3332 = frontier_phi_80_pred_3;
                            _3331 = frontier_phi_80_pred_4;
                            _3330 = frontier_phi_80_pred_5;
                            _3034 = _3330 + _3047;
                            _3035 = _3331 + _3048;
                            _3036 = _3332 + _3049;
                            _3031 = _3327 + _3044;
                            _3032 = _3328 + _3045;
                            _3033 = _3329 + _3046;
                            if (_3051 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3044 = _3031;
                                _3045 = _3032;
                                _3046 = _3033;
                                _3047 = _3034;
                                _3048 = _3035;
                                _3049 = _3036;
                                _3050 = _3051;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3033;
                        frontier_phi_74_pred_1 = _3032;
                        frontier_phi_74_pred_2 = _3031;
                        frontier_phi_74_pred_3 = _3036;
                        frontier_phi_74_pred_4 = _3035;
                        frontier_phi_74_pred_5 = _3034;
                    }
                    _2698 = frontier_phi_74_pred;
                    _2696 = frontier_phi_74_pred_1;
                    _2694 = frontier_phi_74_pred_2;
                    _2704 = frontier_phi_74_pred_3;
                    _2702 = frontier_phi_74_pred_4;
                    _2700 = frontier_phi_74_pred_5;
                    uint _2839 = _2838 + 1u;
                    if (_2839 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2832 = _2694;
                        _2833 = _2696;
                        _2834 = _2698;
                        _2835 = _2700;
                        _2836 = _2702;
                        _2837 = _2704;
                        _2838 = _2839;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2702;
                frontier_phi_62_63_ladder_1 = _2700;
                frontier_phi_62_63_ladder_2 = _2698;
                frontier_phi_62_63_ladder_3 = _2704;
                frontier_phi_62_63_ladder_4 = _2696;
                frontier_phi_62_63_ladder_5 = _2694;
            }
            else
            {
                frontier_phi_62_63_ladder = _2589;
                frontier_phi_62_63_ladder_1 = _2587;
                frontier_phi_62_63_ladder_2 = _2585;
                frontier_phi_62_63_ladder_3 = _2591;
                frontier_phi_62_63_ladder_4 = _2583;
                frontier_phi_62_63_ladder_5 = _2581;
            }
            _2693 = frontier_phi_62_63_ladder_5;
            _2695 = frontier_phi_62_63_ladder_4;
            _2697 = frontier_phi_62_63_ladder_2;
            _2699 = frontier_phi_62_63_ladder_1;
            _2701 = frontier_phi_62_63_ladder;
            _2703 = frontier_phi_62_63_ladder_3;
        }
        float _2708 = isnan(1.0) ? _472 : (isnan(_472) ? 1.0 : min(_472, 1.0));
        _2509 = (_2708 * _2699) + _2022;
        _2511 = (_2708 * _2701) + _2024;
        _2513 = (_2708 * _2703) + _2026;
        _2515 = ((_2693 * _457) * _2708) + _2360;
        _2517 = ((_2695 * _459) * _2708) + _2362;
        _2519 = ((_2697 * _460) * _2708) + _2364;
    }
    else
    {
        _2509 = _2022;
        _2511 = _2024;
        _2513 = _2026;
        _2515 = _2360;
        _2517 = _2362;
        _2519 = _2364;
    }
    float _4400 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _4411 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _4422 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _4433 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _2537 = ((isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_2509 + ((isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0))) * _472))) + ((_2515 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _1282)) * cbPerFrame._m0[3u].x);
    float _2538 = ((isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2511 + ((isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0))) * _472))) + ((_2517 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _1282)) * cbPerFrame._m0[3u].x);
    float _2539 = ((isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2513 + ((isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0))) * _472))) + ((_2519 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _1282)) * cbPerFrame._m0[3u].x);
    float _2547 = cbInstanceData._m0[_431 + 6u].w * (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)));
    float _2552 = _390 / cbSceneParam._m0[86u].x;
    float _2553 = _391 / cbSceneParam._m0[86u].y;
    vec4 _2567 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2552, _2553, (log2((isnan(cbSceneParam._m0[77u].w) ? _323 : (isnan(_323) ? cbSceneParam._m0[77u].w : min(_323, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2569 = _2567.x;
    float _2570 = _2567.y;
    float _2571 = _2567.z;
    float _2572 = _2567.w;
    float _2643;
    float _2645;
    float _2647;
    float _2649;
    if (_323 > cbSceneParam._m0[78u].w)
    {
        float _2606 = isnan(_323) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _323 : min(cbSceneParam._m0[80u].w, _323));
        float _2607 = _2606 / _323;
        float _2618 = _2607 * _375;
        float _2619 = _376 * _2607;
        float _2620 = (-0.0) - _2619;
        float _2621 = _2607 * _377;
        float _2623 = (cbSceneParam._m0[77u].w * _2620) / _2606;
        float _2624 = _2623 + cbSceneParam._m0[79u].w;
        float _2625 = cbSceneParam._m0[79u].w - _2619;
        float _2631 = sqrt(((_2618 * _2618) + (_2619 * _2619)) + (_2621 * _2621));
        float _2634 = (1.0 - (cbSceneParam._m0[77u].w / _2606)) * _2631;
        float _2639 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2641 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2794;
        if (abs((_2620 - _2623) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2794 = ((((_2624 > 0.0) ? exp2(_2639 * _2624) : (2.0 - exp2(_2641 * _2624))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2634;
        }
        else
        {
            float _2754 = 1.0 / cbSceneParam._m0[80u].x;
            float _2755 = isnan(_2625) ? _2624 : (isnan(_2624) ? _2625 : max(_2624, _2625));
            float _2756 = isnan(_2625) ? _2624 : (isnan(_2624) ? _2625 : min(_2624, _2625));
            float _2765 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : min(_2755, 0.0));
            float _2766 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : min(_2756, 0.0));
            _2794 = ((abs(_2631 / _2620) * cbSceneParam._m0[80u].y) * ((((_2765 - _2766) * 2.0) - ((exp2(_2639 * (isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0)))) - exp2(_2639 * (isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0))))) * _2754)) - ((exp2(_2641 * _2765) - exp2(_2641 * _2766)) * _2754))) + (_2634 * cbSceneParam._m0[80u].z);
        }
        vec4 _2796 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2552, _2553, 1.0), 0.0);
        float _2805 = exp2((_2794 * (-1.44269502162933349609375)) * (1.0 - _2796.w));
        float _2806 = log2(_2805);
        float _2822 = log2(_2572);
        _2643 = (exp2(_2822 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2806 * cbSceneParam._m0[78u].x)) * _2796.x) / cbSceneParam._m0[78u].x)) + _2569;
        _2645 = (exp2(_2822 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2806 * cbSceneParam._m0[78u].y)) * _2796.y) / cbSceneParam._m0[78u].y)) + _2570;
        _2647 = (exp2(_2822 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2806 * cbSceneParam._m0[78u].z)) * _2796.z) / cbSceneParam._m0[78u].z)) + _2571;
        _2649 = _2805 * _2572;
    }
    else
    {
        _2643 = _2569;
        _2645 = _2570;
        _2647 = _2571;
        _2649 = _2572;
    }
    float _2661 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2662 = _2661 == 3.0;
    float _2663 = log2(_2649);
    float _2670 = exp2(_2663 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0)));
    float _2671 = exp2(_2663 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0)));
    float _2672 = exp2(_2663 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0)));
    float _2681 = (_2661 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2681 * (_2662 ? _2670 : (_2670 + (cbSceneParam._m0[72u].w * _2643)));
    SV_Target.y = _2681 * (_2662 ? _2671 : (_2671 + (cbSceneParam._m0[72u].w * _2645)));
    SV_Target.z = _2681 * (_2662 ? _2672 : (_2672 + (cbSceneParam._m0[72u].w * _2647)));
    SV_Target.w = _2547;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2547;
}


