#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_Glow_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_Glow_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_Glow_Alpha_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _890;
float _3310;
float _3311;
float _3312;
float _3313;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    vec4 _232 = texture(sampler2D(S_AMSN_Glow_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _235 = _232.x;
    float _236 = _232.y;
    float _237 = _232.z;
    float _238 = _232.w;
    float _239 = _238 * TEXCOORD_1.z;
    vec4 _255 = texture(sampler2D(S_AMSN_Glow_Alpha_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _258 = _255.x + cbMtdParam._m0[9u].x;
    vec4 _270 = texture(sampler2D(S_AMSN_Glow_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _274 = _270.z;
    float _278 = (_270.x * 2.0) + (-1.0);
    float _280 = (_270.y * 2.0) + (-1.0);
    float _281 = dot(vec2(_278, _280), vec2(_278, _280));
    float _3322 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _287 = sqrt(1.0 - (isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0))));
    float _290 = fma(_287, _216, fma(_280, _208 * TANGENT.x, (_194 * _186) * _278));
    float _293 = fma(_287, _217, fma(_280, _208 * TANGENT.y, (_194 * _187) * _278));
    float _296 = fma(_287, _218, fma(_280, _208 * TANGENT.z, (_194 * _188) * _278));
    float _300 = inversesqrt(dot(vec3(_290, _293, _296), vec3(_290, _293, _296)));
    float _301 = _300 * _290;
    float _302 = _300 * _293;
    float _303 = _300 * _296;
    float _3333 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _304 = isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0));
    float _3344 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _305 = isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0));
    float _3355 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3366 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3377 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3388 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _309 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
    float _325 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _367 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _377 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _367);
    float _378 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _367);
    float _379 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _367);
    float _383 = inversesqrt(dot(vec3(_377, _378, _379), vec3(_377, _378, _379)));
    float _384 = _377 * _383;
    float _385 = _378 * _383;
    float _386 = _379 * _383;
    vec4 _391 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _393 = _391.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _569 = sqrt(((_377 * _377) + (_378 * _378)) + (_379 * _379));
        float _575 = (cbMatDynParam._m0[5u].x * _569) + cbMatDynParam._m0[5u].y;
        float _3399 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
        float _576 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
        float _580 = (cbMatDynParam._m0[5u].z * _569) + cbMatDynParam._m0[5u].w;
        float _3410 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))) - _576)) + _576) < ((_393 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _405 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _406 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _426 = fma(_303, cbSceneParam._m0[5u].z, fma(_302, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _301));
    float _429 = fma(_303, cbSceneParam._m0[6u].z, fma(_302, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _301));
    float _432 = fma(_303, cbSceneParam._m0[7u].z, fma(_302, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _301));
    uint _445 = uint(roundEven(NORMAL.w)) * 13u;
    uint _447 = _445 + 9u;
    uint _448 = _447 + uint(cbMatDynParam._m0[0u].w);
    float _454 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0)))) * cbInstanceData._m0[_448].x;
    float _455 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0)))) * cbInstanceData._m0[_448].y;
    float _456 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0)))) * cbInstanceData._m0[_448].z;
    float _3421 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _457 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
    float _3432 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
    float _3443 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _459 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
    float _460 = 1.0 - _309;
    float _461 = _457 * _460;
    float _462 = _458 * _460;
    float _463 = _459 * _460;
    float _468 = (_457 + (-0.039999999105930328369140625)) * _309;
    float _469 = (_458 + (-0.039999999105930328369140625)) * _309;
    float _470 = (_459 + (-0.039999999105930328369140625)) * _309;
    float _471 = _468 + 0.039999999105930328369140625;
    float _473 = _469 + 0.039999999105930328369140625;
    float _474 = _470 + 0.039999999105930328369140625;
    vec4 _483 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _405, cbSceneParam._m0[86u].y * _406));
    float _486 = _483.x * TEXCOORD_1.w;
    float _487 = dot(vec3(_301, _302, _303), vec3(_384, _385, _386));
    float _490 = _487 * 2.0;
    float _494 = (_490 * _301) - _384;
    float _495 = (_490 * _302) - _385;
    float _496 = (_490 * _303) - _386;
    float _500 = abs(dot(vec3(_384, _385, _386), vec3(_301, _302, _303)));
    float _3454 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _502 = sqrt(_305);
    float _515 = exp2((_502 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_502 * 3.0));
    float _521 = (1.0 - _515) * ((_502 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _522 = _515 * _502;
    float _550 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _554 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _558 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _889;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _614 = fma(_558, cbModelParam._m0[26u].z, fma(_554, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _550));
        float _618 = fma(_558, cbModelParam._m0[27u].z, fma(_554, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _550));
        float _622 = fma(_558, cbModelParam._m0[28u].z, fma(_554, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _550));
        float _647 = _550 + _301;
        float _648 = _554 + _302;
        float _649 = _558 + _303;
        float _659 = fma(_649, cbModelParam._m0[26u].z, fma(_648, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _647)) - _614;
        float _660 = fma(_649, cbModelParam._m0[27u].z, fma(_648, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _647)) - _618;
        float _661 = fma(_649, cbModelParam._m0[28u].z, fma(_648, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _647)) - _622;
        float _665 = inversesqrt(dot(vec3(_659, _660, _661), vec3(_659, _660, _661)));
        float _678 = ((_665 * _659) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_614 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _679 = ((_665 * _660) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_618 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _680 = ((_665 * _661) / cbModelParam._m0[34u].z) + ((((((_622 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _683 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_678, _679, _680), 0.0);
        vec4 _690 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_678, _679, _680), 0.0);
        vec4 _697 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_678, _679, _680), 0.0);
        vec4 _704 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_678, _679, _680), 0.0);
        float _717 = exp2((_683.w + (-0.5)) * 20.0) * 2.0;
        float _718 = _717 * (_683.x + (-0.5));
        float _719 = _717 * (_683.y + (-0.5));
        float _720 = _717 * (_683.z + (-0.5));
        float _727 = exp2((_690.w + (-0.5)) * 20.0) * 2.0;
        float _728 = _727 * (_690.x + (-0.5));
        float _729 = _727 * (_690.y + (-0.5));
        float _730 = _727 * (_690.z + (-0.5));
        float _737 = exp2((_697.w + (-0.5)) * 20.0) * 2.0;
        float _738 = _737 * (_697.x + (-0.5));
        float _739 = _737 * (_697.y + (-0.5));
        float _740 = _737 * (_697.z + (-0.5));
        float _747 = exp2((_704.w + (-0.5)) * 20.0) * 2.0;
        float _748 = _747 * (_704.x + (-0.5));
        float _749 = _747 * (_704.y + (-0.5));
        float _750 = _747 * (_704.z + (-0.5));
        float _751 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _752 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _753 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _754 = _718 * 0.5;
        float _755 = _728 * 0.5;
        float _756 = _738 * 0.5;
        float _757 = dot(vec3(_754, _755, _756), vec3(_754, _755, _756));
        float _762 = (_757 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_757);
        float _771 = (dot(vec3(_301, _302, _303), vec3(_762 * _754, _762 * _755, _762 * _756)) + 1.0) * 0.5;
        float _3480 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _781 = sqrt(((_755 * _755) + (_754 * _754)) + (_756 * _756)) / (_751 + 9.9999997473787516355514526367188e-06);
        float _3491 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _782 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _783 = _782 * 2.0;
        float _787 = (1.0 - _782) / (_782 + 1.0);
        float _3502 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _788 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
        float _797 = ((((1.0 - _788) * (_783 + 2.0)) * exp2(log2(isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0))) * (_783 + 1.0))) + _788) * _751;
        float _798 = _719 * 0.5;
        float _799 = _729 * 0.5;
        float _800 = _739 * 0.5;
        float _801 = dot(vec3(_798, _799, _800), vec3(_798, _799, _800));
        float _806 = (_801 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_801);
        float _814 = (dot(vec3(_301, _302, _303), vec3(_806 * _798, _806 * _799, _806 * _800)) + 1.0) * 0.5;
        float _3513 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _823 = sqrt(((_799 * _799) + (_798 * _798)) + (_800 * _800)) / (_752 + 9.9999997473787516355514526367188e-06);
        float _3524 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _825 = _824 * 2.0;
        float _829 = (1.0 - _824) / (_824 + 1.0);
        float _3535 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
        float _839 = ((((1.0 - _830) * (_825 + 2.0)) * exp2(log2(isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) * (_825 + 1.0))) + _830) * _752;
        float _840 = _720 * 0.5;
        float _841 = _730 * 0.5;
        float _842 = _740 * 0.5;
        float _843 = dot(vec3(_840, _841, _842), vec3(_840, _841, _842));
        float _848 = (_843 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_843);
        float _856 = (dot(vec3(_301, _302, _303), vec3(_848 * _840, _848 * _841, _848 * _842)) + 1.0) * 0.5;
        float _3546 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _865 = sqrt(((_841 * _841) + (_840 * _840)) + (_842 * _842)) / (_753 + 9.9999997473787516355514526367188e-06);
        float _3557 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _867 = _866 * 2.0;
        float _871 = (1.0 - _866) / (_866 + 1.0);
        float _3568 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _881 = ((((1.0 - _872) * (_867 + 2.0)) * exp2(log2(isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * (_867 + 1.0))) + _872) * _753;
        _889 = _720;
        _891 = _719;
        _892 = _718;
        _893 = _730;
        _894 = _729;
        _895 = _728;
        _896 = _740;
        _897 = _739;
        _898 = _738;
        _899 = _753;
        _900 = _752;
        _901 = _751;
        _902 = cbModelParam._m0[36u].z * (isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0)));
        _903 = cbModelParam._m0[36u].z * (isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0)));
        _904 = cbModelParam._m0[36u].z * (isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0)));
    }
    else
    {
        _889 = _890;
        _891 = _890;
        _892 = _890;
        _893 = _890;
        _894 = _890;
        _895 = _890;
        _896 = _890;
        _897 = _890;
        _898 = _890;
        _899 = _890;
        _900 = _890;
        _901 = _890;
        _902 = 0.0;
        _903 = 0.0;
        _904 = 0.0;
    }
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _933 = fma(_558, cbModelParam._m0[30u].z, fma(_554, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _550));
        float _937 = fma(_558, cbModelParam._m0[31u].z, fma(_554, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _550));
        float _941 = fma(_558, cbModelParam._m0[32u].z, fma(_554, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _550));
        float _964 = _550 + _301;
        float _965 = _554 + _302;
        float _966 = _558 + _303;
        float _976 = fma(_966, cbModelParam._m0[30u].z, fma(_965, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _964)) - _933;
        float _977 = fma(_966, cbModelParam._m0[31u].z, fma(_965, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _964)) - _937;
        float _978 = fma(_966, cbModelParam._m0[32u].z, fma(_965, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _964)) - _941;
        float _982 = inversesqrt(dot(vec3(_976, _977, _978), vec3(_976, _977, _978)));
        float _995 = ((_982 * _976) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_933 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _996 = ((_982 * _977) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_937 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _997 = ((_982 * _978) / cbModelParam._m0[35u].z) + ((((((_941 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        float _1032 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_999.x + (-0.5));
        float _1034 = _1032 * (_999.y + (-0.5));
        float _1035 = _1032 * (_999.z + (-0.5));
        float _1042 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1006.x + (-0.5));
        float _1044 = _1042 * (_1006.y + (-0.5));
        float _1045 = _1042 * (_1006.z + (-0.5));
        float _1052 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1013.x + (-0.5));
        float _1054 = _1052 * (_1013.y + (-0.5));
        float _1055 = _1052 * (_1013.z + (-0.5));
        float _1062 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1020.x + (-0.5));
        float _1064 = _1062 * (_1020.y + (-0.5));
        float _1065 = _1062 * (_1020.z + (-0.5));
        float _1066 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1069 = _1033 * 0.5;
        float _1070 = _1043 * 0.5;
        float _1071 = _1053 * 0.5;
        float _1072 = dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071));
        float _1077 = (_1072 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1072);
        float _1085 = (dot(vec3(_301, _302, _303), vec3(_1077 * _1069, _1077 * _1070, _1077 * _1071)) + 1.0) * 0.5;
        float _3609 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1094 = sqrt(((_1070 * _1070) + (_1069 * _1069)) + (_1071 * _1071)) / (_1066 + 9.9999997473787516355514526367188e-06);
        float _3620 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _1096 = _1095 * 2.0;
        float _1100 = (1.0 - _1095) / (_1095 + 1.0);
        float _3631 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _1110 = ((((1.0 - _1101) * (_1096 + 2.0)) * exp2(log2(isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * (_1096 + 1.0))) + _1101) * _1066;
        float _1111 = _1034 * 0.5;
        float _1112 = _1044 * 0.5;
        float _1113 = _1054 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1127 = (dot(vec3(_301, _302, _303), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _3642 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1136 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _3653 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1138 = _1137 * 2.0;
        float _1142 = (1.0 - _1137) / (_1137 + 1.0);
        float _3664 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _1152 = ((((1.0 - _1143) * (_1138 + 2.0)) * exp2(log2(isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * (_1138 + 1.0))) + _1143) * _1067;
        float _1153 = _1035 * 0.5;
        float _1154 = _1045 * 0.5;
        float _1155 = _1055 * 0.5;
        float _1156 = dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155));
        float _1161 = (_1156 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1156);
        float _1169 = (dot(vec3(_301, _302, _303), vec3(_1161 * _1153, _1161 * _1154, _1161 * _1155)) + 1.0) * 0.5;
        float _3675 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1178 = sqrt(((_1154 * _1154) + (_1153 * _1153)) + (_1155 * _1155)) / (_1068 + 9.9999997473787516355514526367188e-06);
        float _3686 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1180 = _1179 * 2.0;
        float _1184 = (1.0 - _1179) / (_1179 + 1.0);
        float _3697 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1194 = ((((1.0 - _1185) * (_1180 + 2.0)) * exp2(log2(isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (_1180 + 1.0))) + _1185) * _1068;
        _1202 = _1035;
        _1203 = _1034;
        _1204 = _1033;
        _1205 = _1045;
        _1206 = _1044;
        _1207 = _1043;
        _1208 = _1055;
        _1209 = _1054;
        _1210 = _1053;
        _1211 = _1068;
        _1212 = _1067;
        _1213 = _1066;
        _1214 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)));
        _1215 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)));
        _1216 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)));
    }
    else
    {
        _1202 = _890;
        _1203 = _890;
        _1204 = _890;
        _1205 = _890;
        _1206 = _890;
        _1207 = _890;
        _1208 = _890;
        _1209 = _890;
        _1210 = _890;
        _1211 = _890;
        _1212 = _890;
        _1213 = _890;
        _1214 = 0.0;
        _1215 = 0.0;
        _1216 = 0.0;
    }
    float _1226 = (cbModelParam._m0[1u].x * (_1214 - _902)) + _902;
    float _1227 = (cbModelParam._m0[1u].x * (_1215 - _903)) + _903;
    float _1228 = (cbModelParam._m0[1u].x * (_1216 - _904)) + _904;
    float _1249 = fma(_1228, cbSceneParam._m0[89u].z, fma(_1227, cbSceneParam._m0[89u].y, _1226 * cbSceneParam._m0[89u].x));
    float _1252 = fma(_1228, cbSceneParam._m0[90u].z, fma(_1227, cbSceneParam._m0[90u].y, _1226 * cbSceneParam._m0[90u].x));
    float _1255 = fma(_1228, cbSceneParam._m0[91u].z, fma(_1227, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1226));
    float _1270 = _494 * 0.5;
    float _1271 = _495 * 0.5;
    float _1272 = _496 * 0.5;
    float _1273 = dot(vec4(_1270, _1271, _1272, 1.0), vec4(_1204, _1207, _1210, _1213));
    float _1276 = dot(vec4(_1270, _1271, _1272, 1.0), vec4(_1203, _1206, _1209, _1212));
    float _1279 = dot(vec4(_1270, _1271, _1272, 1.0), vec4(_1202, _1205, _1208, _1211));
    float _1313;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1286 = dot(vec4(_1270, _1271, _1272, 1.0), vec4(_889, _893, _896, _899));
        float _1290 = dot(vec4(_1270, _1271, _1272, 1.0), vec4(_891, _894, _897, _900));
        float _1294 = dot(vec4(_1270, _1271, _1272, 1.0), vec4(_892, _895, _898, _901));
        float _1301 = dot(vec4(cbModelParam._m0[39u]), vec4(_1270, _1271, _1272, 1.0));
        _1313 = dot(vec3(isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)), isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)), isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1301) ? 0.0 : (isnan(0.0) ? _1301 : max(0.0, _1301))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1313 = 1.0;
    }
    float _1324;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1315 = dot(vec4(cbModelParam._m0[40u]), vec4(_1270, _1271, _1272, 1.0));
        _1324 = dot(vec3(isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)), isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)), isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1315) ? 0.0 : (isnan(0.0) ? _1315 : max(0.0, _1315))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1324 = 1.0;
    }
    float _1328 = (_1324 * cbModelParam._m0[1u].x) + (_1313 * (1.0 - cbModelParam._m0[1u].x));
    float _1338 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _305);
    float _1339 = isnan(_1338) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1338 : min(cbModelParam._m0[25u].z, _1338));
    float _1421;
    float _1423;
    float _1425;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1388 = fma(_558, cbModelParam._m0[13u].z, fma(_554, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _550)) + cbModelParam._m0[13u].w;
        float _1392 = fma(_558, cbModelParam._m0[14u].z, fma(_554, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _550)) + cbModelParam._m0[14u].w;
        float _1396 = fma(_558, cbModelParam._m0[15u].z, fma(_554, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _550)) + cbModelParam._m0[15u].w;
        float _1399 = fma(_496, cbModelParam._m0[13u].z, fma(_495, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _494));
        float _1402 = fma(_496, cbModelParam._m0[14u].z, fma(_495, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _494));
        float _1405 = fma(_496, cbModelParam._m0[15u].z, fma(_495, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _494));
        float _1433;
        if (_1399 > 0.0)
        {
            _1433 = abs((1.0 - _1388) / _1399);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1399 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1388 + 1.0) / _1399);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1433 = frontier_phi_19_17_ladder;
        }
        float _1662;
        if (_1402 > 0.0)
        {
            _1662 = abs((1.0 - _1392) / _1402);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1402 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1392 + 1.0) / _1402);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1662 = frontier_phi_28_24_ladder;
        }
        float _1919;
        if (_1405 > 0.0)
        {
            _1919 = abs((1.0 - _1396) / _1405);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1405 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1396 + 1.0) / _1405);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1919 = frontier_phi_40_35_ladder;
        }
        float _1921 = isnan(_1662) ? _1433 : (isnan(_1433) ? _1662 : min(_1433, _1662));
        float _1922 = isnan(_1919) ? _1921 : (isnan(_1921) ? _1919 : min(_1921, _1919));
        float _1926 = (_1922 * _1399) + _1388;
        float _1927 = (_1922 * _1402) + _1392;
        float _1928 = (_1922 * _1405) + _1396;
        float _1929 = _1922 * 9.9999997473787516355514526367188e-05;
        float _1931 = (-1.0) - _1929;
        float _1933 = _1929 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1928 > _1933) || ((_1928 < _1931) || ((_1927 > _1933) || ((_1927 < _1931) || ((_1926 < _1931) || (_1926 > _1933))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2056 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1928, cbModelParam._m0[9u].z, fma(_1927, cbModelParam._m0[9u].y, _1926 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1928, cbModelParam._m0[10u].z, fma(_1927, cbModelParam._m0[10u].y, _1926 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1928, cbModelParam._m0[11u].z, fma(_1927, cbModelParam._m0[11u].y, _1926 * cbModelParam._m0[11u].x))), _1339);
            frontier_phi_18_40_ladder = _2056.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2056.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2056.x * cbModelParam._m0[1u].y;
        }
        _1421 = frontier_phi_18_40_ladder_2;
        _1423 = frontier_phi_18_40_ladder_1;
        _1425 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1409 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_494, _495, _496), _1339);
        _1421 = _1409.x * cbModelParam._m0[1u].y;
        _1423 = _1409.y * cbModelParam._m0[1u].y;
        _1425 = _1409.z * cbModelParam._m0[1u].y;
    }
    float _1429 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _305);
    float _1430 = isnan(_1429) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1429 : min(cbModelParam._m0[25u].w, _1429));
    float _1523;
    float _1525;
    float _1527;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1487 = fma(_558, cbModelParam._m0[21u].z, fma(_554, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _550)) + cbModelParam._m0[21u].w;
        float _1491 = fma(_558, cbModelParam._m0[22u].z, fma(_554, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _550)) + cbModelParam._m0[22u].w;
        float _1495 = fma(_558, cbModelParam._m0[23u].z, fma(_554, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _550)) + cbModelParam._m0[23u].w;
        float _1498 = fma(_496, cbModelParam._m0[21u].z, fma(_495, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _494));
        float _1501 = fma(_496, cbModelParam._m0[22u].z, fma(_495, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _494));
        float _1504 = fma(_496, cbModelParam._m0[23u].z, fma(_495, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _494));
        float _1667;
        if (_1498 > 0.0)
        {
            _1667 = abs((1.0 - _1487) / _1498);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1498 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1487 + 1.0) / _1498);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1667 = frontier_phi_30_26_ladder;
        }
        float _1946;
        if (_1501 > 0.0)
        {
            _1946 = abs((1.0 - _1491) / _1501);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1501 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1491 + 1.0) / _1501);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1946 = frontier_phi_42_37_ladder;
        }
        float _2159;
        if (_1504 > 0.0)
        {
            _2159 = abs((1.0 - _1495) / _1504);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1504 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1495 + 1.0) / _1504);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2159 = frontier_phi_51_48_ladder;
        }
        float _2161 = isnan(_1946) ? _1667 : (isnan(_1667) ? _1946 : min(_1667, _1946));
        float _2162 = isnan(_2159) ? _2161 : (isnan(_2161) ? _2159 : min(_2161, _2159));
        float _2166 = (_2162 * _1498) + _1487;
        float _2167 = (_2162 * _1501) + _1491;
        float _2168 = (_2162 * _1504) + _1495;
        float _2169 = _2162 * 9.9999997473787516355514526367188e-05;
        float _2170 = (-1.0) - _2169;
        float _2172 = _2169 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2168 > _2172) || ((_2168 < _2170) || ((_2167 > _2172) || ((_2167 < _2170) || ((_2166 < _2170) || (_2166 > _2172))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2371 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2168, cbModelParam._m0[17u].z, fma(_2167, cbModelParam._m0[17u].y, _2166 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2168, cbModelParam._m0[18u].z, fma(_2167, cbModelParam._m0[18u].y, _2166 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2168, cbModelParam._m0[19u].z, fma(_2167, cbModelParam._m0[19u].y, _2166 * cbModelParam._m0[19u].x))), _1430);
            frontier_phi_27_51_ladder = _2371.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2371.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2371.x * cbModelParam._m0[1u].z;
        }
        _1523 = frontier_phi_27_51_ladder_2;
        _1525 = frontier_phi_27_51_ladder_1;
        _1527 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1507 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_494, _495, _496), _1430);
        _1523 = _1507.x * cbModelParam._m0[1u].z;
        _1525 = _1507.y * cbModelParam._m0[1u].z;
        _1527 = _1507.z * cbModelParam._m0[1u].z;
    }
    float _1540 = (((_521 * _471) + _522) * _486) * ((cbModelParam._m0[1u].w * (_1523 - _1421)) + _1421);
    float _1542 = (((_521 * _473) + _522) * _486) * ((cbModelParam._m0[1u].w * (_1525 - _1423)) + _1423);
    float _1544 = (((_521 * _474) + _522) * _486) * ((cbModelParam._m0[1u].w * (_1527 - _1425)) + _1425);
    float _1547 = fma(_1544, cbSceneParam._m0[89u].z, fma(_1542, cbSceneParam._m0[89u].y, _1540 * cbSceneParam._m0[89u].x));
    float _1550 = fma(_1544, cbSceneParam._m0[90u].z, fma(_1542, cbSceneParam._m0[90u].y, _1540 * cbSceneParam._m0[90u].x));
    float _1553 = fma(_1544, cbSceneParam._m0[91u].z, fma(_1542, cbSceneParam._m0[91u].y, _1540 * cbSceneParam._m0[91u].x));
    vec4 _1561 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_405, _406));
    float _1563 = _1561.w;
    float _1575 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1563);
    float _1576 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1563);
    float _1577 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1563);
    uvec4 _1581 = floatBitsToUint(cbInstanceData._m0[_445 + 5u]);
    uint _1583 = _1581.x * 14u;
    uint _1584 = _1583 + 13u;
    float _1591 = _486 + (-1.0);
    float _1596 = (cbLight._m0[_1584].x * _1591) + 1.0;
    float _1597 = (cbLight._m0[_1584].y * _1591) + 1.0;
    float _1598 = (cbLight._m0[_1584].z * _1591) + 1.0;
    float _1599 = (cbLight._m0[_1584].w * _1591) + 1.0;
    uint _1600 = _1583 + 5u;
    float _1606 = isnan(1.0) ? _1597 : (isnan(_1597) ? 1.0 : min(_1597, 1.0));
    uint _1610 = _1583 + 4u;
    float _1620 = isnan(1.0) ? _1596 : (isnan(_1596) ? 1.0 : min(_1596, 1.0));
    uint _1624 = _1583 | 1u;
    float _1635 = dot(vec3(cbLight._m0[_1583].xyz), vec3(_301, _302, _303));
    float _1638 = dot(vec3(cbLight._m0[_1624].xyz), vec3(_301, _302, _303));
    float _3833 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
    float _3844 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
    float _1643 = (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * 0.3183098733425140380859375;
    float _1645 = (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * 0.3183098733425140380859375;
    float _1652 = ((cbLight._m0[_1600].x * _1606) * _1645) + (((cbLight._m0[_1610].x * _1575) * _1620) * _1643);
    float _1653 = ((_1606 * cbLight._m0[_1600].y) * _1645) + (((cbLight._m0[_1610].y * _1576) * _1620) * _1643);
    float _1654 = ((_1606 * cbLight._m0[_1600].z) * _1645) + (((cbLight._m0[_1610].z * _1577) * _1620) * _1643);
    uvec4 _1659 = floatBitsToUint(cbLight._m0[_1583 + 12u]);
    bool _1661 = _1659.x == 0u;
    float _1672;
    float _1674;
    float _1676;
    if (_1661)
    {
        _1672 = _1652;
        _1674 = _1653;
        _1676 = _1654;
    }
    else
    {
        uint _1680 = _1583 + 6u;
        float _1696 = (dot(vec3(cbLight._m0[_1583 + 2u].xyz), vec3(_301, _302, _303)) * 0.5) + 0.5;
        float _1697 = _1696 * _1696;
        float _3855 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1698 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1699 = isnan(1.0) ? _1598 : (isnan(_1598) ? 1.0 : min(_1598, 1.0));
        _1672 = (((cbLight._m0[_1680].x * 0.3183098733425140380859375) * _1698) * _1699) + _1652;
        _1674 = (((cbLight._m0[_1680].y * 0.3183098733425140380859375) * _1698) * _1699) + _1653;
        _1676 = (((cbLight._m0[_1680].z * 0.3183098733425140380859375) * _1698) * _1699) + _1654;
    }
    bool _1679 = _1659.y == 0u;
    float _1717;
    float _1719;
    float _1721;
    if (_1679)
    {
        _1717 = _1672;
        _1719 = _1674;
        _1721 = _1676;
    }
    else
    {
        uint _1890 = _1583 + 7u;
        float _1906 = (dot(vec3(cbLight._m0[_1583 + 3u].xyz), vec3(_301, _302, _303)) * 0.5) + 0.5;
        float _1907 = _1906 * _1906;
        float _3871 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
        float _1908 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1909 = isnan(1.0) ? _1599 : (isnan(_1599) ? 1.0 : min(_1599, 1.0));
        _1717 = (((cbLight._m0[_1890].x * 0.3183098733425140380859375) * _1908) * _1909) + _1672;
        _1719 = (((cbLight._m0[_1890].y * 0.3183098733425140380859375) * _1908) * _1909) + _1674;
        _1721 = (((cbLight._m0[_1890].z * 0.3183098733425140380859375) * _1908) * _1909) + _1676;
    }
    uint _1724 = _1583 + 8u;
    float _1737 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1583].w)) * _305) * 0.949999988079071044921875);
    float _1738 = _1737 * _1737;
    float _1739 = cbLight._m0[_1583].x + _384;
    float _1740 = cbLight._m0[_1583].y + _385;
    float _1741 = cbLight._m0[_1583].z + _386;
    float _1745 = inversesqrt(dot(vec3(_1739, _1740, _1741), vec3(_1739, _1740, _1741)));
    float _1746 = _1745 * _1739;
    float _1747 = _1745 * _1740;
    float _1748 = _1745 * _1741;
    float _1749 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1583].xyz));
    float _3887 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
    float _1752 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _3898 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _1753 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _1754 = dot(vec3(_301, _302, _303), vec3(_1746, _1747, _1748));
    float _3909 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _1757 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _1758 = dot(vec3(cbLight._m0[_1583].xyz), vec3(_1746, _1747, _1748));
    float _3920 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
    float _1762 = _1738 * _1738;
    float _1766 = ((_1757 * _1757) * (_1762 + (-1.0))) + 1.0;
    float _1774 = exp2(log2(1.0 - (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) * 5.0);
    float _1775 = 0.959999978542327880859375 - _468;
    float _1777 = 0.959999978542327880859375 - _469;
    float _1778 = 0.959999978542327880859375 - _470;
    float _1785 = 1.0 - _1738;
    float _1796 = (0.5 / (((_1753 * ((_1752 * _1785) + _1738)) + 9.9999999392252902907785028219223e-09) + (((_1753 * _1785) + _1738) * _1752))) * _1752;
    float _3931 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1798 = (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_1762 / ((_1766 * _1766) * 3.141590118408203125));
    uint _1812 = _1583 + 9u;
    float _1823 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1624].w)) * _305) * 0.949999988079071044921875);
    float _1824 = _1823 * _1823;
    float _1825 = cbLight._m0[_1624].x + _384;
    float _1826 = cbLight._m0[_1624].y + _385;
    float _1827 = cbLight._m0[_1624].z + _386;
    float _1831 = inversesqrt(dot(vec3(_1825, _1826, _1827), vec3(_1825, _1826, _1827)));
    float _1832 = _1831 * _1825;
    float _1833 = _1831 * _1826;
    float _1834 = _1831 * _1827;
    float _1835 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1624].xyz));
    float _3942 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1838 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _1839 = dot(vec3(_301, _302, _303), vec3(_1832, _1833, _1834));
    float _3953 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1842 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _1843 = dot(vec3(cbLight._m0[_1624].xyz), vec3(_1832, _1833, _1834));
    float _3964 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1847 = _1824 * _1824;
    float _1851 = ((_1842 * _1842) * (_1847 + (-1.0))) + 1.0;
    float _1858 = exp2(log2(1.0 - (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) * 5.0);
    float _1865 = 1.0 - _1824;
    float _1875 = (0.5 / (((_1753 * ((_1838 * _1865) + _1824)) + 9.9999999392252902907785028219223e-09) + (((_1753 * _1865) + _1824) * _1838))) * _1838;
    float _3975 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1877 = (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * (_1847 / ((_1851 * _1851) * 3.141590118408203125));
    float _1887 = (((((_1858 * _1775) + _471) * cbLight._m0[_1812].x) * _1877) * _1606) + ((((cbLight._m0[_1724].x * _1575) * ((_1774 * _1775) + _471)) * _1798) * _1620);
    float _1888 = (((((_1858 * _1777) + _473) * cbLight._m0[_1812].y) * _1877) * _1606) + ((((cbLight._m0[_1724].y * _1576) * ((_1774 * _1777) + _473)) * _1798) * _1620);
    float _1889 = (((((_1858 * _1778) + _474) * cbLight._m0[_1812].z) * _1877) * _1606) + ((((cbLight._m0[_1724].z * _1577) * ((_1774 * _1778) + _474)) * _1798) * _1620);
    float _1951;
    float _1953;
    float _1955;
    if (_1661)
    {
        _1951 = _1887;
        _1953 = _1888;
        _1955 = _1889;
    }
    else
    {
        uint _1957 = _1583 + 2u;
        uint _1961 = _1583 + 10u;
        float _1975 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1957].w)) * _305) * 0.949999988079071044921875);
        float _1976 = _1975 * _1975;
        float _1977 = cbLight._m0[_1957].x + _384;
        float _1978 = cbLight._m0[_1957].y + _385;
        float _1979 = cbLight._m0[_1957].z + _386;
        float _1983 = inversesqrt(dot(vec3(_1977, _1978, _1979), vec3(_1977, _1978, _1979)));
        float _1984 = _1983 * _1977;
        float _1985 = _1983 * _1978;
        float _1986 = _1983 * _1979;
        float _1987 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1957].xyz));
        float _3986 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
        float _1990 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1991 = dot(vec3(_301, _302, _303), vec3(_1984, _1985, _1986));
        float _3997 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        float _1994 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1995 = dot(vec3(cbLight._m0[_1957].xyz), vec3(_1984, _1985, _1986));
        float _4008 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _1999 = _1976 * _1976;
        float _2003 = ((_1994 * _1994) * (_1999 + (-1.0))) + 1.0;
        float _2010 = exp2(log2(1.0 - (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * 5.0);
        float _2017 = 1.0 - _1976;
        float _2027 = (0.5 / (((_1753 * ((_1990 * _2017) + _1976)) + 9.9999999392252902907785028219223e-09) + (((_1753 * _2017) + _1976) * _1990))) * _1990;
        float _4019 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2029 = (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1999 / ((_2003 * _2003) * 3.141590118408203125));
        float _2030 = isnan(1.0) ? _1598 : (isnan(_1598) ? 1.0 : min(_1598, 1.0));
        _1951 = (((((_2010 * _1775) + _471) * cbLight._m0[_1961].x) * _2029) * _2030) + _1887;
        _1953 = (((((_2010 * _1777) + _473) * cbLight._m0[_1961].y) * _2029) * _2030) + _1888;
        _1955 = (((((_2010 * _1778) + _474) * cbLight._m0[_1961].z) * _2029) * _2030) + _1889;
    }
    float _2065;
    float _2067;
    float _2069;
    if (_1679)
    {
        _2065 = _1951;
        _2067 = _1953;
        _2069 = _1955;
    }
    else
    {
        uint _2076 = _1583 + 3u;
        uint _2080 = _1583 + 11u;
        float _2094 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2076].w)) * _305) * 0.949999988079071044921875);
        float _2095 = _2094 * _2094;
        float _2096 = cbLight._m0[_2076].x + _384;
        float _2097 = cbLight._m0[_2076].y + _385;
        float _2098 = cbLight._m0[_2076].z + _386;
        float _2102 = inversesqrt(dot(vec3(_2096, _2097, _2098), vec3(_2096, _2097, _2098)));
        float _2103 = _2102 * _2096;
        float _2104 = _2102 * _2097;
        float _2105 = _2102 * _2098;
        float _2106 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_2076].xyz));
        float _4035 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2109 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _2110 = dot(vec3(_301, _302, _303), vec3(_2103, _2104, _2105));
        float _4046 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2113 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _2114 = dot(vec3(cbLight._m0[_2076].xyz), vec3(_2103, _2104, _2105));
        float _4057 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2118 = _2095 * _2095;
        float _2122 = ((_2113 * _2113) * (_2118 + (-1.0))) + 1.0;
        float _2129 = exp2(log2(1.0 - (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) * 5.0);
        float _2136 = 1.0 - _2095;
        float _2146 = (0.5 / (((_1753 * ((_2109 * _2136) + _2095)) + 9.9999999392252902907785028219223e-09) + (((_1753 * _2136) + _2095) * _2109))) * _2109;
        float _4068 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2148 = (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_2118 / ((_2122 * _2122) * 3.141590118408203125));
        float _2149 = isnan(1.0) ? _1599 : (isnan(_1599) ? 1.0 : min(_1599, 1.0));
        _2065 = (((((_2129 * _1775) + _471) * cbLight._m0[_2080].x) * _2148) * _2149) + _1951;
        _2067 = (((((_2129 * _1777) + _473) * cbLight._m0[_2080].y) * _2148) * _2149) + _1953;
        _2069 = (((((_2129 * _1778) + _474) * cbLight._m0[_2080].z) * _2148) * _2149) + _1955;
    }
    float _2283;
    float _2285;
    float _2287;
    float _2289;
    float _2291;
    float _2293;
    if (_1581.y == 0u)
    {
        float _2224 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2225 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2224;
        float _2226 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2224;
        float _2227 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2224;
        uvec4 _2239 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2240 = _2239.x;
        uint _2251 = uint((float(_2239.y) * floor(float(uint(cbSceneParam._m0[85u].y * _406) / _2240))) + floor(float(uint(cbSceneParam._m0[85u].x * _405) / _2240)));
        float _2261 = (log2(_2227 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2262 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        uint _2265 = uint(isnan(14.0) ? _2262 : (isnan(_2262) ? 14.0 : min(_2262, 14.0)));
        uvec4 _2270 = texelFetch(g_lightClusterGridBuffer, int(((_2265 << 2u) + (_2251 << 6u)) >> 2u));
        uint _2271 = _2270.x;
        uint _2272 = _2239.z;
        float _2376;
        float _2378;
        float _2380;
        float _2382;
        float _2384;
        float _2386;
        if (((((1u << ((_2272 >> 4u) & 15u)) + 4294967295u) & _2271) == 0u) || ((_2272 & 240u) == 0u))
        {
            _2376 = 0.0;
            _2378 = 0.0;
            _2380 = 0.0;
            _2382 = 0.0;
            _2384 = 0.0;
            _2386 = 0.0;
        }
        else
        {
            float _2377;
            float _2379;
            float _2381;
            float _2383;
            float _2385;
            float _2387;
            float _2528 = 0.0;
            float _2529 = 0.0;
            float _2530 = 0.0;
            float _2531 = 0.0;
            float _2532 = 0.0;
            float _2533 = 0.0;
            uint _2534 = 0u;
            uint _2543;
            bool _2544;
            for (;;)
            {
                _2543 = texelFetch(g_lightClassification, int((((_2265 << 5u) + (_2251 << 9u)) + (_2534 << 2u)) >> 2u)).x;
                _2544 = _2543 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2544)
                {
                    frontier_phi_68_pred = _2530;
                    frontier_phi_68_pred_1 = _2533;
                    frontier_phi_68_pred_2 = _2532;
                    frontier_phi_68_pred_3 = _2531;
                    frontier_phi_68_pred_4 = _2529;
                    frontier_phi_68_pred_5 = _2528;
                }
                else
                {
                    float _2673;
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    uint _2679;
                    _2673 = _2528;
                    _2674 = _2529;
                    _2675 = _2530;
                    _2676 = _2531;
                    _2677 = _2532;
                    _2678 = _2533;
                    _2679 = _2543;
                    float _2600;
                    float _2601;
                    float _2602;
                    float _2603;
                    float _2604;
                    float _2605;
                    for (;;)
                    {
                        uint _2683 = uint(findLSB(_2679)) + (_2534 << 5u);
                        uint _2680 = (_2679 + 4294967295u) & _2679;
                        uint _2685 = _2683 * 48u;
                        vec4 _2699 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2685)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 3u)).x));
                        uint _2705 = (_2683 * 48u) + 4u;
                        vec4 _2718 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2705)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 3u)).x));
                        uint _2724 = (_2683 * 48u) + 8u;
                        vec3 _2735 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2724)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 2u)).x));
                        float _2739 = _2699.x - _2225;
                        float _2740 = _2699.y - _2226;
                        float _2741 = _2699.z - _2227;
                        float _2742 = dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741));
                        float _2745 = inversesqrt(_2742);
                        float _2746 = _2745 * _2739;
                        float _2747 = _2745 * _2740;
                        float _2748 = _2745 * _2741;
                        float _2749 = dot(vec3(_426, _429, _432), vec3(_2746, _2747, _2748));
                        float _2754 = 1.0 - (_2742 * _2699.w);
                        float _4094 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
                        float _2755 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
                        float _2756 = sqrt(_2742) * _2718.w;
                        float _2759 = 1.39999997615814208984375 / (_2756 + 1.39999997615814208984375);
                        float _2760 = _2759 * _2759;
                        float _2763 = ((1.0 - _2760) * _2749) + _2760;
                        float _2766 = _2756 * _2756;
                        float _2770 = ((isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0))) * _2755) / ((_2766 * 0.699999988079071044921875) + 1.0);
                        float _2774 = (-0.0) - _2225;
                        float _2775 = (-0.0) - _2226;
                        float _2776 = (-0.0) - _2227;
                        float _2780 = inversesqrt(dot(vec3(_2774, _2775, _2776), vec3(_2774, _2775, _2776)));
                        float _2781 = _2780 * _2774;
                        float _2782 = _2780 * _2775;
                        float _2783 = _2780 * _2776;
                        float _2791 = exp2(log2(1.0 / ((_2766 * 3.5) + 5.0)) * 0.25);
                        float _2792 = 1.0 - _502;
                        float _2799 = sqrt(1.0 - ((1.0 - (_2792 * _2792)) * (1.0 - (_2791 * _2791))));
                        float _2800 = _2799 * _2799;
                        float _2801 = _2800 * _2800;
                        float _2802 = _2781 + _2746;
                        float _2803 = _2782 + _2747;
                        float _2804 = _2783 + _2748;
                        float _2808 = inversesqrt(dot(vec3(_2802, _2803, _2804), vec3(_2802, _2803, _2804)));
                        float _2812 = dot(vec3(_426, _429, _432), vec3(_2781, _2782, _2783));
                        float _4110 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
                        float _2815 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
                        float _2816 = dot(vec3(_426, _429, _432), vec3(_2808 * _2802, _2808 * _2803, _2808 * _2804));
                        float _4121 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
                        float _2819 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
                        float _2823 = ((_2819 * _2819) * (_2801 + (-1.0))) + 1.0;
                        float _2824 = _2759 * _2800;
                        float _2825 = _2824 * _2824;
                        float _2828 = ((1.0 - _2825) * _2749) + _2825;
                        float _4132 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
                        float _2829 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
                        float _2830 = 1.0 - _2800;
                        float _2840 = (0.5 / (((_2829 * ((_2815 * _2830) + _2800)) + 9.9999999392252902907785028219223e-09) + (((_2829 * _2830) + _2800) * _2815))) * _2829;
                        float _4143 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
                        float _2851 = (((_2801 * 3.1415927410125732421875) * (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) / ((_2823 * _2823) * ((_2766 * 2.1991131305694580078125) + 3.141590118408203125))) * _2755;
                        _2603 = (_2770 * _2718.x) + _2676;
                        _2604 = (_2770 * _2718.y) + _2677;
                        _2605 = (_2770 * _2718.z) + _2678;
                        _2600 = (_2851 * _2735.x) + _2673;
                        _2601 = (_2851 * _2735.y) + _2674;
                        _2602 = (_2851 * _2735.z) + _2675;
                        if (_2680 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2673 = _2600;
                            _2674 = _2601;
                            _2675 = _2602;
                            _2676 = _2603;
                            _2677 = _2604;
                            _2678 = _2605;
                            _2679 = _2680;
                        }
                    }
                    frontier_phi_68_pred = _2602;
                    frontier_phi_68_pred_1 = _2605;
                    frontier_phi_68_pred_2 = _2604;
                    frontier_phi_68_pred_3 = _2603;
                    frontier_phi_68_pred_4 = _2601;
                    frontier_phi_68_pred_5 = _2600;
                }
                _2381 = frontier_phi_68_pred;
                _2387 = frontier_phi_68_pred_1;
                _2385 = frontier_phi_68_pred_2;
                _2383 = frontier_phi_68_pred_3;
                _2379 = frontier_phi_68_pred_4;
                _2377 = frontier_phi_68_pred_5;
                uint _2535 = _2534 + 1u;
                if (_2535 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2528 = _2377;
                    _2529 = _2379;
                    _2530 = _2381;
                    _2531 = _2383;
                    _2532 = _2385;
                    _2533 = _2387;
                    _2534 = _2535;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2376 = _2377;
            _2378 = _2379;
            _2380 = _2381;
            _2382 = _2383;
            _2384 = _2385;
            _2386 = _2387;
        }
        uvec4 _2390 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2391 = _2390.z;
        uint _2393 = (_2391 >> 8u) & 15u;
        float _2496;
        float _2498;
        float _2500;
        float _2502;
        float _2504;
        float _2506;
        if (((4294967295u << _2393) & _2271) == 0u)
        {
            _2496 = _2376;
            _2498 = _2378;
            _2500 = _2380;
            _2502 = _2382;
            _2504 = _2384;
            _2506 = _2386;
        }
        else
        {
            float _2521 = inversesqrt(dot(vec3(_2225, _2226, _2227), vec3(_2225, _2226, _2227)));
            float _2522 = _2521 * _2225;
            float _2523 = _2521 * _2226;
            float _2524 = _2521 * _2227;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2393 < ((_2391 >> 12u) & 15u))
            {
                float _2497;
                float _2499;
                float _2501;
                float _2503;
                float _2505;
                float _2507;
                float _2656 = _2376;
                float _2657 = _2378;
                float _2658 = _2380;
                float _2659 = _2382;
                float _2660 = _2384;
                float _2661 = _2386;
                uint _2662 = _2393;
                uint _2671;
                bool _2672;
                for (;;)
                {
                    _2671 = texelFetch(g_lightClassification, int((((_2265 << 5u) + (_2251 << 9u)) + (_2662 << 2u)) >> 2u)).x;
                    _2672 = _2671 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2672)
                    {
                        frontier_phi_79_pred = _2661;
                        frontier_phi_79_pred_1 = _2660;
                        frontier_phi_79_pred_2 = _2659;
                        frontier_phi_79_pred_3 = _2658;
                        frontier_phi_79_pred_4 = _2657;
                        frontier_phi_79_pred_5 = _2656;
                    }
                    else
                    {
                        float _2865;
                        float _2866;
                        float _2867;
                        float _2868;
                        float _2869;
                        float _2870;
                        float _3161;
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _2878 = _2656;
                        float _2879 = _2657;
                        float _2880 = _2658;
                        float _2881 = _2659;
                        float _2882 = _2660;
                        float _2883 = _2661;
                        uint _2884 = _2671;
                        uint _2885;
                        vec4 _2910;
                        float _2911;
                        vec4 _2926;
                        vec3 _2938;
                        vec4 _2954;
                        vec4 _2970;
                        float _3017;
                        bool _3018;
                        for (;;)
                        {
                            uint _2895 = ((_2662 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2884));
                            _2885 = (_2884 + 4294967295u) & _2884;
                            uint _2897 = _2895 * 40u;
                            _2910 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2897)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 3u)).x));
                            _2911 = _2910.w;
                            uint _2913 = (_2895 * 40u) + 4u;
                            _2926 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2913)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 3u)).x));
                            uint _2928 = (_2895 * 40u) + 8u;
                            _2938 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2928)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 2u)).x));
                            uint _2941 = (_2895 * 40u) + 16u;
                            _2954 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2941)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 3u)).x));
                            uint _2957 = (_2895 * 40u) + 20u;
                            _2970 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2957)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 3u)).x));
                            uint _2973 = (_2895 * 40u) + 24u;
                            vec4 _2986 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 3u)).x));
                            uint _2992 = (_2895 * 40u) + 28u;
                            vec4 _3005 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2992)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 3u)).x));
                            _3017 = fma(_2227, _3005.z, fma(_2226, _3005.y, _3005.x * _2225)) + _3005.w;
                            _3018 = !((fma(_2227, _2986.z, fma(_2226, _2986.y, _2986.x * _2225)) + _2986.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3018)
                            {
                                float _3045 = _2910.x - _2225;
                                float _3046 = _2910.y - _2226;
                                float _3047 = _2910.z - _2227;
                                float _3048 = dot(vec3(_3045, _3046, _3047), vec3(_3045, _3046, _3047));
                                float _3051 = inversesqrt(_3048);
                                float _3052 = _3051 * _3045;
                                float _3053 = _3051 * _3046;
                                float _3054 = _3051 * _3047;
                                float _3058 = 1.0 - (_3048 / (_2911 * _2911));
                                float _4154 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                                float _3059 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
                                float _3063 = sqrt(_3048) * _2926.w;
                                float _3065 = 1.39999997615814208984375 / (_3063 + 1.39999997615814208984375);
                                float _3066 = _3065 * _3065;
                                float _3069 = ((1.0 - _3066) * dot(vec3(_3052, _3053, _3054), vec3(_426, _429, _432))) + _3066;
                                float _3072 = _3063 * _3063;
                                float _3076 = (fma(_2227, _2954.z, fma(_2226, _2954.y, _2954.x * _2225)) + _2954.w) / _3017;
                                float _3077 = (fma(_2227, _2970.z, fma(_2226, _2970.y, _2970.x * _2225)) + _2970.w) / _3017;
                                float _3081 = 1.0 - dot(vec2(_3076, _3077), vec2(_3076, _3077));
                                float _4170 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                                float _3082 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
                                float _3083 = _3082 * (((isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0))) * _3059) / ((_3072 * 0.699999988079071044921875) + 1.0));
                                float _3095 = exp2(log2(1.0 / ((_3072 * 3.5) + 5.0)) * 0.25);
                                float _3096 = 1.0 - _502;
                                float _3103 = sqrt(1.0 - ((1.0 - (_3096 * _3096)) * (1.0 - (_3095 * _3095))));
                                float _3104 = _3103 * _3103;
                                float _3105 = _3104 * _3104;
                                float _3106 = _3052 - _2522;
                                float _3107 = _3053 - _2523;
                                float _3108 = _3054 - _2524;
                                float _3112 = inversesqrt(dot(vec3(_3106, _3107, _3108), vec3(_3106, _3107, _3108)));
                                float _3116 = dot(vec3(_426, _429, _432), vec3((-0.0) - _2522, (-0.0) - _2523, (-0.0) - _2524));
                                float _4181 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                                float _3119 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
                                float _3120 = dot(vec3(_426, _429, _432), vec3(_3112 * _3106, _3112 * _3107, _3112 * _3108));
                                float _4192 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                                float _3123 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                                float _3127 = ((_3123 * _3123) * (_3105 + (-1.0))) + 1.0;
                                float _3128 = _3065 * _3104;
                                float _3129 = _3128 * _3128;
                                float _3135 = ((1.0 - _3129) * dot(vec3(_426, _429, _432), vec3(_3052, _3053, _3054))) + _3129;
                                float _4203 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                                float _3136 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                                float _3137 = 1.0 - _3104;
                                float _3147 = (0.5 / (((_3136 * ((_3119 * _3137) + _3104)) + 9.9999999392252902907785028219223e-09) + (((_3136 * _3137) + _3104) * _3119))) * _3136;
                                float _4214 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                                float _3157 = (_3082 * _3059) * (((_3105 * 3.1415927410125732421875) * (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)))) / ((_3127 * _3127) * ((_3072 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3083 * _2926.z;
                                frontier_phi_85_pred_1 = _3083 * _2926.y;
                                frontier_phi_85_pred_2 = _3083 * _2926.x;
                                frontier_phi_85_pred_3 = _3157 * _2938.z;
                                frontier_phi_85_pred_4 = _3157 * _2938.y;
                                frontier_phi_85_pred_5 = _3157 * _2938.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3166 = frontier_phi_85_pred;
                            _3165 = frontier_phi_85_pred_1;
                            _3164 = frontier_phi_85_pred_2;
                            _3163 = frontier_phi_85_pred_3;
                            _3162 = frontier_phi_85_pred_4;
                            _3161 = frontier_phi_85_pred_5;
                            _2868 = _3164 + _2881;
                            _2869 = _3165 + _2882;
                            _2870 = _3166 + _2883;
                            _2865 = _3161 + _2878;
                            _2866 = _3162 + _2879;
                            _2867 = _3163 + _2880;
                            if (_2885 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2878 = _2865;
                                _2879 = _2866;
                                _2880 = _2867;
                                _2881 = _2868;
                                _2882 = _2869;
                                _2883 = _2870;
                                _2884 = _2885;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2870;
                        frontier_phi_79_pred_1 = _2869;
                        frontier_phi_79_pred_2 = _2868;
                        frontier_phi_79_pred_3 = _2867;
                        frontier_phi_79_pred_4 = _2866;
                        frontier_phi_79_pred_5 = _2865;
                    }
                    _2507 = frontier_phi_79_pred;
                    _2505 = frontier_phi_79_pred_1;
                    _2503 = frontier_phi_79_pred_2;
                    _2501 = frontier_phi_79_pred_3;
                    _2499 = frontier_phi_79_pred_4;
                    _2497 = frontier_phi_79_pred_5;
                    uint _2663 = _2662 + 1u;
                    if (_2663 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2656 = _2497;
                        _2657 = _2499;
                        _2658 = _2501;
                        _2659 = _2503;
                        _2660 = _2505;
                        _2661 = _2507;
                        _2662 = _2663;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2503;
                frontier_phi_60_61_ladder_1 = _2507;
                frontier_phi_60_61_ladder_2 = _2505;
                frontier_phi_60_61_ladder_3 = _2501;
                frontier_phi_60_61_ladder_4 = _2499;
                frontier_phi_60_61_ladder_5 = _2497;
            }
            else
            {
                frontier_phi_60_61_ladder = _2382;
                frontier_phi_60_61_ladder_1 = _2386;
                frontier_phi_60_61_ladder_2 = _2384;
                frontier_phi_60_61_ladder_3 = _2380;
                frontier_phi_60_61_ladder_4 = _2378;
                frontier_phi_60_61_ladder_5 = _2376;
            }
            _2496 = frontier_phi_60_61_ladder_5;
            _2498 = frontier_phi_60_61_ladder_4;
            _2500 = frontier_phi_60_61_ladder_3;
            _2502 = frontier_phi_60_61_ladder;
            _2504 = frontier_phi_60_61_ladder_2;
            _2506 = frontier_phi_60_61_ladder_1;
        }
        float _2511 = isnan(1.0) ? _486 : (isnan(_486) ? 1.0 : min(_486, 1.0));
        _2283 = (_2511 * _2502) + _1717;
        _2285 = (_2511 * _2504) + _1719;
        _2287 = (_2511 * _2506) + _1721;
        _2289 = ((_2496 * _471) * _2511) + _2065;
        _2291 = ((_2498 * _473) * _2511) + _2067;
        _2293 = ((_2500 * _474) * _2511) + _2069;
    }
    else
    {
        _2283 = _1717;
        _2285 = _1719;
        _2287 = _1721;
        _2289 = _2065;
        _2291 = _2067;
        _2293 = _2069;
    }
    float _4230 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _4241 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _4252 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _4263 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _2311 = ((isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_2283 + ((isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0))) * _486))) + ((_2289 + ((isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))) * _1328)) * cbPerFrame._m0[3u].x);
    float _2312 = ((isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_2285 + ((isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0))) * _486))) + ((_2291 + ((isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))) * _1328)) * cbPerFrame._m0[3u].x);
    float _2313 = ((isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_2287 + ((isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0))) * _486))) + ((_2293 + ((isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))) * _1328)) * cbPerFrame._m0[3u].x);
    float _2314 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2315 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2316 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2321 = cbInstanceData._m0[_445 + 6u].w * (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)));
    float _2326 = _405 / cbSceneParam._m0[86u].x;
    float _2327 = _406 / cbSceneParam._m0[86u].y;
    vec4 _2341 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2326, _2327, (log2((isnan(cbSceneParam._m0[77u].w) ? _325 : (isnan(_325) ? cbSceneParam._m0[77u].w : min(_325, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2343 = _2341.x;
    float _2344 = _2341.y;
    float _2345 = _2341.z;
    float _2346 = _2341.w;
    float _2438;
    float _2440;
    float _2442;
    float _2444;
    if (_325 > cbSceneParam._m0[78u].w)
    {
        float _2401 = isnan(_325) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _325 : min(cbSceneParam._m0[80u].w, _325));
        float _2402 = _2401 / _325;
        float _2413 = _2402 * _377;
        float _2414 = _378 * _2402;
        float _2415 = (-0.0) - _2414;
        float _2416 = _2402 * _379;
        float _2418 = (cbSceneParam._m0[77u].w * _2415) / _2401;
        float _2419 = _2418 + cbSceneParam._m0[79u].w;
        float _2420 = cbSceneParam._m0[79u].w - _2414;
        float _2426 = sqrt(((_2413 * _2413) + (_2414 * _2414)) + (_2416 * _2416));
        float _2429 = (1.0 - (cbSceneParam._m0[77u].w / _2401)) * _2426;
        float _2434 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2436 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2613;
        if (abs((_2415 - _2418) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2613 = ((((_2419 > 0.0) ? exp2(_2434 * _2419) : (2.0 - exp2(_2436 * _2419))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2429;
        }
        else
        {
            float _2557 = 1.0 / cbSceneParam._m0[80u].x;
            float _2558 = isnan(_2420) ? _2419 : (isnan(_2419) ? _2420 : max(_2419, _2420));
            float _2559 = isnan(_2420) ? _2419 : (isnan(_2419) ? _2420 : min(_2419, _2420));
            float _2568 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : min(_2558, 0.0));
            float _2569 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : min(_2559, 0.0));
            _2613 = ((abs(_2426 / _2415) * cbSceneParam._m0[80u].y) * ((((_2568 - _2569) * 2.0) - ((exp2(_2434 * (isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0)))) - exp2(_2434 * (isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0))))) * _2557)) - ((exp2(_2436 * _2568) - exp2(_2436 * _2569)) * _2557))) + (_2429 * cbSceneParam._m0[80u].z);
        }
        vec4 _2615 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2326, _2327, 1.0), 0.0);
        float _2624 = exp2((_2613 * (-1.44269502162933349609375)) * (1.0 - _2615.w));
        float _2625 = log2(_2624);
        float _2641 = log2(_2346);
        _2438 = (exp2(_2641 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2625 * cbSceneParam._m0[78u].x)) * _2615.x) / cbSceneParam._m0[78u].x)) + _2343;
        _2440 = (exp2(_2641 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2625 * cbSceneParam._m0[78u].y)) * _2615.y) / cbSceneParam._m0[78u].y)) + _2344;
        _2442 = (exp2(_2641 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2625 * cbSceneParam._m0[78u].z)) * _2615.z) / cbSceneParam._m0[78u].z)) + _2345;
        _2444 = _2624 * _2346;
    }
    else
    {
        _2438 = _2343;
        _2440 = _2344;
        _2442 = _2345;
        _2444 = _2346;
    }
    bool _2651;
    vec4 _2454;
    vec4 _2476;
    float _2478;
    float _2482;
    float _2483;
    float _2484;
    float _2485;
    bool _2495;
    for (;;)
    {
        _2454 = cbMatDynParam._m0[0u];
        float _2456 = roundEven(_2454.y);
        bool _2457 = _2456 == 3.0;
        float _2458 = log2(_2444);
        float _2465 = exp2(_2458 * cbSceneParam._m0[78u].x) * _2314;
        float _2466 = exp2(_2458 * cbSceneParam._m0[78u].y) * _2315;
        float _2467 = exp2(_2458 * cbSceneParam._m0[78u].z) * _2316;
        float _2474 = _393 + (-0.5);
        _2476 = cbMtdParam._m0[1u];
        _2478 = _2476.y * _2474;
        float _2481 = (_2456 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2482 = _2481 * (_2457 ? _2465 : (_2465 + (cbSceneParam._m0[72u].w * _2438)));
        _2483 = _2481 * (_2457 ? _2466 : (_2466 + (cbSceneParam._m0[72u].w * _2440)));
        _2484 = _2481 * (_2457 ? _2467 : (_2467 + (cbSceneParam._m0[72u].w * _2442)));
        _2485 = _2474 * 0.999000012874603271484375;
        _2495 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2495)
        {
            if ((cbInstanceData._m0[_445 + 7u].x + _2485) < 0.5)
            {
                _2651 = true;
                break;
            }
        }
        uint _2592 = _447 + uint(_2454.w);
        if ((cbInstanceData._m0[_2592].w < 1.0) && ((cbInstanceData._m0[_2592].w + _2485) < 0.5))
        {
            _2651 = true;
            break;
        }
        if ((_2478 + _238) < _2476.x)
        {
            _2651 = true;
            break;
        }
        _2651 = false;
        break;
    }
    float _2856;
    if (_2651)
    {
        discard_state = true;
        _2856 = 0.0;
    }
    else
    {
        _2856 = _2321;
    }
    SV_Target.x = _2482;
    SV_Target.y = _2483;
    SV_Target.z = _2484;
    SV_Target.w = _2856;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2321;
    discard_exit();
}


