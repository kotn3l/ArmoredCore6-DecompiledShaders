#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Stealthmist_snp_0_Texture2D_0;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _644;
uint _2029;
uint _2030;
uint _2031;
uint _2256;
uint _2257;
uint _2258;
float _2473;
float _2474;
float _2475;
float _2476;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _167 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _168 = _167 * NORMAL.x;
    float _169 = _167 * NORMAL.y;
    float _170 = _167 * NORMAL.z;
    float _214 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _224 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _214);
    float _225 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _214);
    float _226 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _214);
    float _234 = cbMtdParam._m0[10u].w * cbPerFrame._m0[22u].x;
    float _241 = TEXCOORD_1.y - ((cbMtdParam._m0[11u].x * cbPerFrame._m0[22u].x) * 0.550000011920928955078125);
    float _284 = ((_241 * cbMtdParam._m0[10u].x) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w;
    float _303 = (((texture(sampler2D(M_Stealthmist_snp_0_Texture2D_0, SS_WrapLinear), vec2((((cbMtdParam._m0[11u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z - (texture(sampler2D(M_Stealthmist_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbTextureTilingScale._m0[0u].x * cbMtdParam._m0[10u].x) * ((_234 * 3.2999999523162841796875) + TEXCOORD_1.x)) + cbTextureTilingScale._m0[0u].z, ((cbTextureTilingScale._m0[0u].y * cbMtdParam._m0[10u].x) * _241) + cbTextureTilingScale._m0[0u].w)).y * 0.20000000298023223876953125)) + (texture(sampler2D(M_Stealthmist_snp_0_Texture2D_0, SS_WrapLinear), vec2(((((_234 * 6.900000095367431640625) + TEXCOORD_1.x) * cbMtdParam._m0[10u].x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, _284)).x * 0.0500000007450580596923828125)) + (texture(sampler2D(M_Stealthmist_snp_0_Texture2D_0, SS_WrapLinear), vec2(((((_234 * 16.0) + TEXCOORD_1.x) * cbMtdParam._m0[10u].x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, _284)).x * 0.100000001490116119384765625)) * TEXCOORD_1.z;
    float _310 = sqrt(((_224 * _224) + (_225 * _225)) + (_226 * _226));
    float _313 = cbMtdParam._m0[10u].y - cbMtdParam._m0[10u].z;
    float _315 = (_310 - cbMtdParam._m0[10u].z) / (isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0)));
    float _2490 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _318 = (isnan(1.0) ? _2490 : (isnan(_2490) ? 1.0 : min(_2490, 1.0))) * _303;
    float _327 = inversesqrt(dot(vec3(_168, _169, _170), vec3(_168, _169, _170)));
    float _328 = _327 * _168;
    float _329 = _327 * _169;
    float _330 = _327 * _170;
    float _2501 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _331 = isnan(1.0) ? _2501 : (isnan(_2501) ? 1.0 : min(_2501, 1.0));
    float _347 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _351 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _352 = _224 * _351;
    float _353 = _225 * _351;
    float _354 = _226 * _351;
    vec4 _359 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _361 = _359.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _464 = (cbMatDynParam._m0[5u].x * _310) + cbMatDynParam._m0[5u].y;
        float _2512 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
        float _465 = isnan(1.0) ? _2512 : (isnan(_2512) ? 1.0 : min(_2512, 1.0));
        float _469 = (cbMatDynParam._m0[5u].z * _310) + cbMatDynParam._m0[5u].w;
        float _2523 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2523 : (isnan(_2523) ? 1.0 : min(_2523, 1.0))) - _465)) + _465) < ((_361 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _373 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _374 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _394 = fma(_330, cbSceneParam._m0[5u].z, fma(_329, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _328));
    float _397 = fma(_330, cbSceneParam._m0[6u].z, fma(_329, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _328));
    float _400 = fma(_330, cbSceneParam._m0[7u].z, fma(_329, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _328));
    vec4 _409 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _373, cbSceneParam._m0[86u].y * _374));
    float _412 = _409.x * TEXCOORD_1.w;
    float _413 = dot(vec3(_328, _329, _330), vec3(_352, _353, _354));
    float _416 = _413 * 2.0;
    float _421 = (_416 * _328) - _352;
    float _422 = (_416 * _329) - _353;
    float _423 = (_416 * _330) - _354;
    float _445 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _449 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _453 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _643;
    float _645;
    float _646;
    float _647;
    float _648;
    float _649;
    float _650;
    float _651;
    float _652;
    float _653;
    float _654;
    float _655;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _503 = fma(_453, cbModelParam._m0[26u].z, fma(_449, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _445));
        float _507 = fma(_453, cbModelParam._m0[27u].z, fma(_449, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _445));
        float _511 = fma(_453, cbModelParam._m0[28u].z, fma(_449, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _445));
        float _536 = _445 + _328;
        float _537 = _449 + _329;
        float _538 = _453 + _330;
        float _548 = fma(_538, cbModelParam._m0[26u].z, fma(_537, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _536)) - _503;
        float _549 = fma(_538, cbModelParam._m0[27u].z, fma(_537, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _536)) - _507;
        float _550 = fma(_538, cbModelParam._m0[28u].z, fma(_537, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _536)) - _511;
        float _554 = inversesqrt(dot(vec3(_548, _549, _550), vec3(_548, _549, _550)));
        float _567 = ((_554 * _548) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_503 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _568 = ((_554 * _549) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_507 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _569 = ((_554 * _550) / cbModelParam._m0[34u].z) + ((((((_511 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _572 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_567, _568, _569), 0.0);
        vec4 _579 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_567, _568, _569), 0.0);
        vec4 _586 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_567, _568, _569), 0.0);
        vec4 _593 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_567, _568, _569), 0.0);
        float _606 = exp2((_572.w + (-0.5)) * 20.0) * 2.0;
        float _616 = exp2((_579.w + (-0.5)) * 20.0) * 2.0;
        float _626 = exp2((_586.w + (-0.5)) * 20.0) * 2.0;
        float _636 = exp2((_593.w + (-0.5)) * 20.0) * 2.0;
        float _637 = _636 * (_593.x + (-0.5));
        float _638 = _636 * (_593.y + (-0.5));
        float _639 = _636 * (_593.z + (-0.5));
        _643 = _606 * (_572.z + (-0.5));
        _645 = _606 * (_572.y + (-0.5));
        _646 = _606 * (_572.x + (-0.5));
        _647 = _616 * (_579.z + (-0.5));
        _648 = _616 * (_579.y + (-0.5));
        _649 = _616 * (_579.x + (-0.5));
        _650 = _626 * (_586.z + (-0.5));
        _651 = _626 * (_586.y + (-0.5));
        _652 = _626 * (_586.x + (-0.5));
        _653 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
        _654 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
        _655 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    }
    else
    {
        _643 = _644;
        _645 = _644;
        _646 = _644;
        _647 = _644;
        _648 = _644;
        _649 = _644;
        _650 = _644;
        _651 = _644;
        _652 = _644;
        _653 = _644;
        _654 = _644;
        _655 = _644;
    }
    float _820;
    float _821;
    float _822;
    float _823;
    float _824;
    float _825;
    float _826;
    float _827;
    float _828;
    float _829;
    float _830;
    float _831;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _684 = fma(_453, cbModelParam._m0[30u].z, fma(_449, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _445));
        float _688 = fma(_453, cbModelParam._m0[31u].z, fma(_449, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _445));
        float _692 = fma(_453, cbModelParam._m0[32u].z, fma(_449, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _445));
        float _715 = _445 + _328;
        float _716 = _449 + _329;
        float _717 = _453 + _330;
        float _727 = fma(_717, cbModelParam._m0[30u].z, fma(_716, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _715)) - _684;
        float _728 = fma(_717, cbModelParam._m0[31u].z, fma(_716, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _715)) - _688;
        float _729 = fma(_717, cbModelParam._m0[32u].z, fma(_716, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _715)) - _692;
        float _733 = inversesqrt(dot(vec3(_727, _728, _729), vec3(_727, _728, _729)));
        float _746 = ((_733 * _727) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_684 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _747 = ((_733 * _728) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_688 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _748 = ((_733 * _729) / cbModelParam._m0[35u].z) + ((((((_692 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _750 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        vec4 _757 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        vec4 _764 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        vec4 _771 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_746, _747, _748), 0.0);
        float _783 = exp2((_750.w + (-0.5)) * 20.0) * 2.0;
        float _793 = exp2((_757.w + (-0.5)) * 20.0) * 2.0;
        float _803 = exp2((_764.w + (-0.5)) * 20.0) * 2.0;
        float _813 = exp2((_771.w + (-0.5)) * 20.0) * 2.0;
        float _814 = _813 * (_771.x + (-0.5));
        float _815 = _813 * (_771.y + (-0.5));
        float _816 = _813 * (_771.z + (-0.5));
        _820 = _783 * (_750.z + (-0.5));
        _821 = _783 * (_750.y + (-0.5));
        _822 = _783 * (_750.x + (-0.5));
        _823 = _793 * (_757.z + (-0.5));
        _824 = _793 * (_757.y + (-0.5));
        _825 = _793 * (_757.x + (-0.5));
        _826 = _803 * (_764.z + (-0.5));
        _827 = _803 * (_764.y + (-0.5));
        _828 = _803 * (_764.x + (-0.5));
        _829 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        _830 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        _831 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    }
    else
    {
        _820 = _644;
        _821 = _644;
        _822 = _644;
        _823 = _644;
        _824 = _644;
        _825 = _644;
        _826 = _644;
        _827 = _644;
        _828 = _644;
        _829 = _644;
        _830 = _644;
        _831 = _644;
    }
    float _846 = _421 * 0.5;
    float _847 = _422 * 0.5;
    float _848 = _423 * 0.5;
    float _849 = dot(vec4(_846, _847, _848, 1.0), vec4(_822, _825, _828, _831));
    float _852 = dot(vec4(_846, _847, _848, 1.0), vec4(_821, _824, _827, _830));
    float _855 = dot(vec4(_846, _847, _848, 1.0), vec4(_820, _823, _826, _829));
    float _890;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _862 = dot(vec4(_846, _847, _848, 1.0), vec4(_643, _647, _650, _653));
        float _866 = dot(vec4(_846, _847, _848, 1.0), vec4(_645, _648, _651, _654));
        float _870 = dot(vec4(_846, _847, _848, 1.0), vec4(_646, _649, _652, _655));
        float _877 = dot(vec4(cbModelParam._m0[39u]), vec4(_846, _847, _848, 1.0));
        _890 = dot(vec3(isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0)), isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0)), isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_877) ? 0.0 : (isnan(0.0) ? _877 : max(0.0, _877))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _890 = 1.0;
    }
    float _901;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _892 = dot(vec4(cbModelParam._m0[40u]), vec4(_846, _847, _848, 1.0));
        _901 = dot(vec3(isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0)), isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0)), isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_892) ? 0.0 : (isnan(0.0) ? _892 : max(0.0, _892))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _901 = 1.0;
    }
    float _905 = (_901 * cbModelParam._m0[1u].x) + (_890 * (1.0 - cbModelParam._m0[1u].x));
    float _911 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _994;
    float _996;
    float _998;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _961 = fma(_453, cbModelParam._m0[13u].z, fma(_449, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _445)) + cbModelParam._m0[13u].w;
        float _965 = fma(_453, cbModelParam._m0[14u].z, fma(_449, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _445)) + cbModelParam._m0[14u].w;
        float _969 = fma(_453, cbModelParam._m0[15u].z, fma(_449, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _445)) + cbModelParam._m0[15u].w;
        float _972 = fma(_423, cbModelParam._m0[13u].z, fma(_422, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _421));
        float _975 = fma(_423, cbModelParam._m0[14u].z, fma(_422, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _421));
        float _978 = fma(_423, cbModelParam._m0[15u].z, fma(_422, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _421));
        float _1004;
        if (_972 > 0.0)
        {
            _1004 = abs((1.0 - _961) / _972);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_972 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_961 + 1.0) / _972);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1004 = frontier_phi_17_15_ladder;
        }
        float _1307;
        if (_975 > 0.0)
        {
            _1307 = abs((1.0 - _965) / _975);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_975 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_965 + 1.0) / _975);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1307 = frontier_phi_26_22_ladder;
        }
        float _1451;
        if (_978 > 0.0)
        {
            _1451 = abs((1.0 - _969) / _978);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_978 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_969 + 1.0) / _978);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1451 = frontier_phi_38_33_ladder;
        }
        float _1453 = isnan(_1307) ? _1004 : (isnan(_1004) ? _1307 : min(_1004, _1307));
        float _1454 = isnan(_1451) ? _1453 : (isnan(_1453) ? _1451 : min(_1453, _1451));
        float _1458 = (_1454 * _972) + _961;
        float _1459 = (_1454 * _975) + _965;
        float _1460 = (_1454 * _978) + _969;
        float _1461 = _1454 * 9.9999997473787516355514526367188e-05;
        float _1463 = (-1.0) - _1461;
        float _1465 = _1461 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1460 > _1465) || ((_1460 < _1463) || ((_1459 > _1465) || ((_1459 < _1463) || ((_1458 < _1463) || (_1458 > _1465))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1670 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1460, cbModelParam._m0[9u].z, fma(_1459, cbModelParam._m0[9u].y, _1458 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1460, cbModelParam._m0[10u].z, fma(_1459, cbModelParam._m0[10u].y, _1458 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1460, cbModelParam._m0[11u].z, fma(_1459, cbModelParam._m0[11u].y, _1458 * cbModelParam._m0[11u].x))), _911);
            frontier_phi_16_38_ladder = _1670.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1670.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1670.x * cbModelParam._m0[1u].y;
        }
        _994 = frontier_phi_16_38_ladder_2;
        _996 = frontier_phi_16_38_ladder_1;
        _998 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _982 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_421, _422, _423), _911);
        _994 = _982.x * cbModelParam._m0[1u].y;
        _996 = _982.y * cbModelParam._m0[1u].y;
        _998 = _982.z * cbModelParam._m0[1u].y;
    }
    float _1001 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1093;
    float _1095;
    float _1097;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1057 = fma(_453, cbModelParam._m0[21u].z, fma(_449, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _445)) + cbModelParam._m0[21u].w;
        float _1061 = fma(_453, cbModelParam._m0[22u].z, fma(_449, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _445)) + cbModelParam._m0[22u].w;
        float _1065 = fma(_453, cbModelParam._m0[23u].z, fma(_449, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _445)) + cbModelParam._m0[23u].w;
        float _1068 = fma(_423, cbModelParam._m0[21u].z, fma(_422, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _421));
        float _1071 = fma(_423, cbModelParam._m0[22u].z, fma(_422, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _421));
        float _1074 = fma(_423, cbModelParam._m0[23u].z, fma(_422, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _421));
        float _1312;
        if (_1068 > 0.0)
        {
            _1312 = abs((1.0 - _1057) / _1068);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1068 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1057 + 1.0) / _1068);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1312 = frontier_phi_28_24_ladder;
        }
        float _1478;
        if (_1071 > 0.0)
        {
            _1478 = abs((1.0 - _1061) / _1071);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1071 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1061 + 1.0) / _1071);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1478 = frontier_phi_40_35_ladder;
        }
        float _1796;
        if (_1074 > 0.0)
        {
            _1796 = abs((1.0 - _1065) / _1074);
        }
        else
        {
            float frontier_phi_51_46_ladder;
            if (_1074 < 0.0)
            {
                frontier_phi_51_46_ladder = abs((_1065 + 1.0) / _1074);
            }
            else
            {
                frontier_phi_51_46_ladder = 5000.0;
            }
            _1796 = frontier_phi_51_46_ladder;
        }
        float _1798 = isnan(_1478) ? _1312 : (isnan(_1312) ? _1478 : min(_1312, _1478));
        float _1799 = isnan(_1796) ? _1798 : (isnan(_1798) ? _1796 : min(_1798, _1796));
        float _1803 = (_1799 * _1068) + _1057;
        float _1804 = (_1799 * _1071) + _1061;
        float _1805 = (_1799 * _1074) + _1065;
        float _1806 = _1799 * 9.9999997473787516355514526367188e-05;
        float _1807 = (-1.0) - _1806;
        float _1809 = _1806 + 1.0;
        float frontier_phi_25_51_ladder;
        float frontier_phi_25_51_ladder_1;
        float frontier_phi_25_51_ladder_2;
        if ((_1805 > _1809) || ((_1805 < _1807) || ((_1804 > _1809) || ((_1804 < _1807) || ((_1803 < _1807) || (_1803 > _1809))))))
        {
            frontier_phi_25_51_ladder = 0.0;
            frontier_phi_25_51_ladder_1 = 0.0;
            frontier_phi_25_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1927 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1805, cbModelParam._m0[17u].z, fma(_1804, cbModelParam._m0[17u].y, _1803 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1805, cbModelParam._m0[18u].z, fma(_1804, cbModelParam._m0[18u].y, _1803 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1805, cbModelParam._m0[19u].z, fma(_1804, cbModelParam._m0[19u].y, _1803 * cbModelParam._m0[19u].x))), _1001);
            frontier_phi_25_51_ladder = _1927.z * cbModelParam._m0[1u].z;
            frontier_phi_25_51_ladder_1 = _1927.y * cbModelParam._m0[1u].z;
            frontier_phi_25_51_ladder_2 = _1927.x * cbModelParam._m0[1u].z;
        }
        _1093 = frontier_phi_25_51_ladder_2;
        _1095 = frontier_phi_25_51_ladder_1;
        _1097 = frontier_phi_25_51_ladder;
    }
    else
    {
        vec4 _1077 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_421, _422, _423), _1001);
        _1093 = _1077.x * cbModelParam._m0[1u].z;
        _1095 = _1077.y * cbModelParam._m0[1u].z;
        _1097 = _1077.z * cbModelParam._m0[1u].z;
    }
    float _1109 = _412 * 0.01200000010430812835693359375;
    float _1111 = _1109 * ((cbModelParam._m0[1u].w * (_1093 - _994)) + _994);
    float _1112 = _1109 * ((cbModelParam._m0[1u].w * (_1095 - _996)) + _996);
    float _1113 = _1109 * ((cbModelParam._m0[1u].w * (_1097 - _998)) + _998);
    float _1134 = fma(_1113, cbSceneParam._m0[89u].z, fma(_1112, cbSceneParam._m0[89u].y, _1111 * cbSceneParam._m0[89u].x));
    float _1137 = fma(_1113, cbSceneParam._m0[90u].z, fma(_1112, cbSceneParam._m0[90u].y, _1111 * cbSceneParam._m0[90u].x));
    float _1140 = fma(_1113, cbSceneParam._m0[91u].z, fma(_1112, cbSceneParam._m0[91u].y, _1111 * cbSceneParam._m0[91u].x));
    vec4 _1148 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_373, _374));
    float _1150 = _1148.w;
    uint _1165 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1169 = floatBitsToUint(cbInstanceData._m0[_1165 + 5u]);
    uint _1171 = _1169.x * 14u;
    uint _1172 = _1171 + 13u;
    float _1178 = _412 + (-1.0);
    float _1183 = (cbLight._m0[_1172].x * _1178) + 1.0;
    float _1184 = (cbLight._m0[_1172].y * _1178) + 1.0;
    float _1185 = (cbLight._m0[_1172].w * _1178) + 1.0;
    uint _1186 = _1171 + 8u;
    float _1197 = cbLight._m0[_1171].x + _352;
    float _1198 = cbLight._m0[_1171].y + _353;
    float _1199 = cbLight._m0[_1171].z + _354;
    float _1203 = inversesqrt(dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199)));
    float _1207 = dot(vec3(_328, _329, _330), vec3(cbLight._m0[_1171].xyz));
    float _2649 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
    float _1210 = isnan(1.0) ? _2649 : (isnan(_2649) ? 1.0 : min(_2649, 1.0));
    float _2660 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _1211 = isnan(1.0) ? _2660 : (isnan(_2660) ? 1.0 : min(_2660, 1.0));
    float _1212 = dot(vec3(cbLight._m0[_1171].xyz), vec3(_1197 * _1203, _1198 * _1203, _1199 * _1203));
    float _2671 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
    float _1223 = (exp2(log2(1.0 - (isnan(1.0) ? _2671 : (isnan(_2671) ? 1.0 : min(_2671, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1229 = (0.5 / ((_1210 + 9.9999999392252902907785028219223e-09) + _1211)) * _1210;
    float _2682 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
    float _1231 = (isnan(1.0) ? _2682 : (isnan(_2682) ? 1.0 : min(_2682, 1.0))) * 0.31831014156341552734375;
    float _1233 = isnan(1.0) ? _1183 : (isnan(_1183) ? 1.0 : min(_1183, 1.0));
    uint _1246 = _1171 + 9u;
    uint _1252 = _1171 | 1u;
    float _1258 = cbLight._m0[_1252].x + _352;
    float _1259 = cbLight._m0[_1252].y + _353;
    float _1260 = cbLight._m0[_1252].z + _354;
    float _1264 = inversesqrt(dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260)));
    float _1268 = dot(vec3(_328, _329, _330), vec3(cbLight._m0[_1252].xyz));
    float _2698 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
    float _1271 = isnan(1.0) ? _2698 : (isnan(_2698) ? 1.0 : min(_2698, 1.0));
    float _1272 = dot(vec3(cbLight._m0[_1252].xyz), vec3(_1258 * _1264, _1259 * _1264, _1260 * _1264));
    float _2709 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
    float _1281 = (exp2(log2(1.0 - (isnan(1.0) ? _2709 : (isnan(_2709) ? 1.0 : min(_2709, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1285 = (0.5 / ((_1271 + 9.9999999392252902907785028219223e-09) + _1211)) * _1271;
    float _2720 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
    float _1287 = (isnan(1.0) ? _2720 : (isnan(_2720) ? 1.0 : min(_2720, 1.0))) * 0.31831014156341552734375;
    float _1288 = isnan(1.0) ? _1184 : (isnan(_1184) ? 1.0 : min(_1184, 1.0));
    float _1298 = (((_1281 * cbLight._m0[_1246].x) * _1287) * _1288) + ((((cbLight._m0[_1186].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1150))) * _1223) * _1231) * _1233);
    float _1299 = (((_1281 * cbLight._m0[_1246].y) * _1287) * _1288) + ((((cbLight._m0[_1186].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1150))) * _1223) * _1231) * _1233);
    float _1300 = (((_1281 * cbLight._m0[_1246].z) * _1287) * _1288) + ((((cbLight._m0[_1186].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1150))) * _1223) * _1231) * _1233);
    uvec4 _1304 = floatBitsToUint(cbLight._m0[_1171 + 12u]);
    float _1317;
    float _1319;
    float _1321;
    if (_1304.x == 0u)
    {
        _1317 = _1298;
        _1319 = _1299;
        _1321 = _1300;
    }
    else
    {
        float _1327 = (cbLight._m0[_1172].z * _1178) + 1.0;
        uint _1328 = _1171 + 10u;
        uint _1334 = _1171 + 2u;
        float _1340 = cbLight._m0[_1334].x + _352;
        float _1341 = cbLight._m0[_1334].y + _353;
        float _1342 = cbLight._m0[_1334].z + _354;
        float _1346 = inversesqrt(dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342)));
        float _1350 = dot(vec3(_328, _329, _330), vec3(cbLight._m0[_1334].xyz));
        float _2736 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1353 = isnan(1.0) ? _2736 : (isnan(_2736) ? 1.0 : min(_2736, 1.0));
        float _1354 = dot(vec3(cbLight._m0[_1334].xyz), vec3(_1340 * _1346, _1341 * _1346, _1342 * _1346));
        float _2747 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1363 = (exp2(log2(1.0 - (isnan(1.0) ? _2747 : (isnan(_2747) ? 1.0 : min(_2747, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1367 = (0.5 / ((_1353 + 9.9999999392252902907785028219223e-09) + _1211)) * _1353;
        float _2758 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1369 = (isnan(1.0) ? _2758 : (isnan(_2758) ? 1.0 : min(_2758, 1.0))) * 0.31831014156341552734375;
        float _1370 = isnan(1.0) ? _1327 : (isnan(_1327) ? 1.0 : min(_1327, 1.0));
        _1317 = (((_1363 * cbLight._m0[_1328].x) * _1369) * _1370) + _1298;
        _1319 = (((_1363 * cbLight._m0[_1328].y) * _1369) * _1370) + _1299;
        _1321 = (((_1363 * cbLight._m0[_1328].z) * _1369) * _1370) + _1300;
    }
    float _1388;
    float _1390;
    float _1392;
    if (_1304.y == 0u)
    {
        _1388 = _1317;
        _1390 = _1319;
        _1392 = _1321;
    }
    else
    {
        uint _1399 = _1171 + 11u;
        uint _1405 = _1171 + 3u;
        float _1411 = cbLight._m0[_1405].x + _352;
        float _1412 = cbLight._m0[_1405].y + _353;
        float _1413 = cbLight._m0[_1405].z + _354;
        float _1417 = inversesqrt(dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413)));
        float _1421 = dot(vec3(_328, _329, _330), vec3(cbLight._m0[_1405].xyz));
        float _2774 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1424 = isnan(1.0) ? _2774 : (isnan(_2774) ? 1.0 : min(_2774, 1.0));
        float _1425 = dot(vec3(cbLight._m0[_1405].xyz), vec3(_1411 * _1417, _1412 * _1417, _1413 * _1417));
        float _2785 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1434 = (exp2(log2(1.0 - (isnan(1.0) ? _2785 : (isnan(_2785) ? 1.0 : min(_2785, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1438 = (0.5 / ((_1424 + 9.9999999392252902907785028219223e-09) + _1211)) * _1424;
        float _2796 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1440 = (isnan(1.0) ? _2796 : (isnan(_2796) ? 1.0 : min(_2796, 1.0))) * 0.31831014156341552734375;
        float _1441 = isnan(1.0) ? _1185 : (isnan(_1185) ? 1.0 : min(_1185, 1.0));
        _1388 = (((_1434 * cbLight._m0[_1399].x) * _1440) * _1441) + _1317;
        _1390 = (((_1434 * cbLight._m0[_1399].y) * _1440) * _1441) + _1319;
        _1392 = (((_1434 * cbLight._m0[_1399].z) * _1440) * _1441) + _1321;
    }
    float _1583;
    float _1585;
    float _1587;
    if (_1169.y == 0u)
    {
        float _1522 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1523 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1522;
        float _1524 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1522;
        float _1525 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1522;
        uvec4 _1537 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1538 = _1537.x;
        uint _1549 = uint((float(_1537.y) * floor(float(uint(cbSceneParam._m0[85u].y * _374) / _1538))) + floor(float(uint(cbSceneParam._m0[85u].x * _373) / _1538)));
        float _1559 = (log2(_1525 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1560 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        uint _1563 = uint(isnan(14.0) ? _1560 : (isnan(_1560) ? 14.0 : min(_1560, 14.0)));
        uvec4 _1568 = texelFetch(g_lightClusterGridBuffer, int(((_1563 << 2u) + (_1549 << 6u)) >> 2u));
        uint _1569 = _1568.x;
        uint _1570 = _1537.z;
        float _1679;
        float _1681;
        float _1683;
        if (((((1u << ((_1570 >> 4u) & 15u)) + 4294967295u) & _1569) == 0u) || ((_1570 & 240u) == 0u))
        {
            _1679 = 0.0;
            _1681 = 0.0;
            _1683 = 0.0;
        }
        else
        {
            float _1680;
            float _1682;
            float _1684;
            float _1842 = 0.0;
            float _1843 = 0.0;
            float _1844 = 0.0;
            uint _1845 = 0u;
            uint _1854;
            bool _1855;
            for (;;)
            {
                _1854 = texelFetch(g_lightClassification, int((((_1563 << 5u) + (_1549 << 9u)) + (_1845 << 2u)) >> 2u)).x;
                _1855 = _1854 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                if (_1855)
                {
                    frontier_phi_62_pred = _1844;
                    frontier_phi_62_pred_1 = _1843;
                    frontier_phi_62_pred_2 = _1842;
                }
                else
                {
                    float _1999;
                    float _2000;
                    float _2001;
                    uint _2002;
                    _1999 = _1842;
                    _2000 = _1843;
                    _2001 = _1844;
                    _2002 = _1854;
                    float _1932;
                    float _1933;
                    float _1934;
                    for (;;)
                    {
                        uint _2006 = uint(findLSB(_2002)) + (_1845 << 5u);
                        uint _2003 = (_2002 + 4294967295u) & _2002;
                        uint _2008 = _2006 * 48u;
                        vec4 _2022 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2008)).x, texelFetch(g_PointLightRenderingBuffer, int(_2008 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2008 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2008 + 3u)).x));
                        uint _2039 = (_2006 * 48u) + 8u;
                        vec3 _2050 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2039)).x, texelFetch(g_PointLightRenderingBuffer, int(_2039 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2039 + 2u)).x));
                        float _2054 = _2022.x - _1523;
                        float _2055 = _2022.y - _1524;
                        float _2056 = _2022.z - _1525;
                        float _2057 = dot(vec3(_2054, _2055, _2056), vec3(_2054, _2055, _2056));
                        float _2060 = inversesqrt(_2057);
                        float _2069 = 1.0 - (_2057 * _2022.w);
                        float _2822 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
                        float _2071 = sqrt(_2057) * uintBitsToFloat(uvec4(_2029, _2030, _2031, texelFetch(g_PointLightRenderingBuffer, int(((_2006 * 48u) + 4u) + 3u)).x)).w;
                        float _2074 = 1.39999997615814208984375 / (_2071 + 1.39999997615814208984375);
                        float _2075 = _2074 * _2074;
                        float _2078 = ((1.0 - _2075) * dot(vec3(_394, _397, _400), vec3(_2060 * _2054, _2060 * _2055, _2060 * _2056))) + _2075;
                        float _2080 = (-0.0) - _1523;
                        float _2081 = (-0.0) - _1524;
                        float _2082 = (-0.0) - _1525;
                        float _2086 = inversesqrt(dot(vec3(_2080, _2081, _2082), vec3(_2080, _2081, _2082)));
                        float _2090 = dot(vec3(_394, _397, _400), vec3(_2086 * _2080, _2086 * _2081, _2086 * _2082));
                        float _2833 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
                        float _2844 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
                        float _2094 = isnan(1.0) ? _2844 : (isnan(_2844) ? 1.0 : min(_2844, 1.0));
                        float _2098 = (0.5 / (((isnan(1.0) ? _2833 : (isnan(_2833) ? 1.0 : min(_2833, 1.0))) + 9.9999999392252902907785028219223e-09) + _2094)) * _2094;
                        float _2855 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
                        float _2107 = (((isnan(1.0) ? _2855 : (isnan(_2855) ? 1.0 : min(_2855, 1.0))) * 3.1415927410125732421875) / (((_2071 * _2071) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2822 : (isnan(_2822) ? 1.0 : min(_2822, 1.0)));
                        _1932 = (_2107 * _2050.x) + _1999;
                        _1933 = (_2107 * _2050.y) + _2000;
                        _1934 = (_2107 * _2050.z) + _2001;
                        if (_2003 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1999 = _1932;
                            _2000 = _1933;
                            _2001 = _1934;
                            _2002 = _2003;
                        }
                    }
                    frontier_phi_62_pred = _1934;
                    frontier_phi_62_pred_1 = _1933;
                    frontier_phi_62_pred_2 = _1932;
                }
                _1684 = frontier_phi_62_pred;
                _1682 = frontier_phi_62_pred_1;
                _1680 = frontier_phi_62_pred_2;
                uint _1846 = _1845 + 1u;
                if (_1846 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1842 = _1680;
                    _1843 = _1682;
                    _1844 = _1684;
                    _1845 = _1846;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1679 = _1680;
            _1681 = _1682;
            _1683 = _1684;
        }
        uvec4 _1687 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1688 = _1687.z;
        uint _1690 = (_1688 >> 8u) & 15u;
        float _1822;
        float _1824;
        float _1826;
        if (((4294967295u << _1690) & _1569) == 0u)
        {
            _1822 = _1679;
            _1824 = _1681;
            _1826 = _1683;
        }
        else
        {
            float _1838 = inversesqrt(dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525)));
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            if (_1690 < ((_1688 >> 12u) & 15u))
            {
                float _1823;
                float _1825;
                float _1827;
                float _1985 = _1679;
                float _1986 = _1681;
                float _1987 = _1683;
                uint _1988 = _1690;
                uint _1997;
                bool _1998;
                for (;;)
                {
                    _1997 = texelFetch(g_lightClassification, int((((_1563 << 5u) + (_1549 << 9u)) + (_1988 << 2u)) >> 2u)).x;
                    _1998 = _1997 == 0u;
                    float frontier_phi_73_pred;
                    float frontier_phi_73_pred_1;
                    float frontier_phi_73_pred_2;
                    if (_1998)
                    {
                        frontier_phi_73_pred = _1987;
                        frontier_phi_73_pred_1 = _1986;
                        frontier_phi_73_pred_2 = _1985;
                    }
                    else
                    {
                        float _2121;
                        float _2122;
                        float _2123;
                        float _2345;
                        float _2346;
                        float _2347;
                        float _2131 = _1985;
                        float _2132 = _1986;
                        float _2133 = _1987;
                        uint _2134 = _1997;
                        uint _2135;
                        uint _2145;
                        vec4 _2160;
                        float _2161;
                        vec3 _2173;
                        vec4 _2189;
                        vec4 _2205;
                        float _2252;
                        bool _2253;
                        for (;;)
                        {
                            _2145 = ((_1988 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2134));
                            _2135 = (_2134 + 4294967295u) & _2134;
                            uint _2147 = _2145 * 40u;
                            _2160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2147 + 3u)).x));
                            _2161 = _2160.w;
                            uint _2163 = (_2145 * 40u) + 8u;
                            _2173 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2163 + 2u)).x));
                            uint _2176 = (_2145 * 40u) + 16u;
                            _2189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2176 + 3u)).x));
                            uint _2192 = (_2145 * 40u) + 20u;
                            _2205 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2192 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2192 + 3u)).x));
                            uint _2208 = (_2145 * 40u) + 24u;
                            vec4 _2221 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2208 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2208 + 3u)).x));
                            uint _2227 = (_2145 * 40u) + 28u;
                            vec4 _2240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2227 + 3u)).x));
                            _2252 = fma(_1525, _2240.z, fma(_1524, _2240.y, _2240.x * _1523)) + _2240.w;
                            _2253 = !((fma(_1525, _2221.z, fma(_1524, _2221.y, _2221.x * _1523)) + _2221.w) <= 0.0);
                            float frontier_phi_79_pred;
                            float frontier_phi_79_pred_1;
                            float frontier_phi_79_pred_2;
                            if (_2253)
                            {
                                float _2287 = _2160.x - _1523;
                                float _2288 = _2160.y - _1524;
                                float _2289 = _2160.z - _1525;
                                float _2290 = dot(vec3(_2287, _2288, _2289), vec3(_2287, _2288, _2289));
                                float _2293 = inversesqrt(_2290);
                                float _2300 = 1.0 - (_2290 / (_2161 * _2161));
                                float _2866 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
                                float _2302 = sqrt(_2290) * uintBitsToFloat(uvec4(_2256, _2257, _2258, texelFetch(g_SpotLightRenderingBuffer, int(((_2145 * 40u) + 4u) + 3u)).x)).w;
                                float _2304 = 1.39999997615814208984375 / (_2302 + 1.39999997615814208984375);
                                float _2305 = _2304 * _2304;
                                float _2308 = (fma(_1525, _2189.z, fma(_1524, _2189.y, _2189.x * _1523)) + _2189.w) / _2252;
                                float _2309 = (fma(_1525, _2205.z, fma(_1524, _2205.y, _2205.x * _1523)) + _2205.w) / _2252;
                                float _2313 = 1.0 - dot(vec2(_2308, _2309), vec2(_2308, _2309));
                                float _2877 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
                                float _2321 = dot(vec3(_394, _397, _400), vec3((-0.0) - (_1523 * _1838), (-0.0) - (_1524 * _1838), (-0.0) - (_1525 * _1838)));
                                float _2888 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
                                float _2329 = ((1.0 - _2305) * dot(vec3(_394, _397, _400), vec3(_2293 * _2287, _2293 * _2288, _2293 * _2289))) + _2305;
                                float _2899 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
                                float _2330 = isnan(1.0) ? _2899 : (isnan(_2899) ? 1.0 : min(_2899, 1.0));
                                float _2334 = (0.5 / (((isnan(1.0) ? _2888 : (isnan(_2888) ? 1.0 : min(_2888, 1.0))) + 9.9999999392252902907785028219223e-09) + _2330)) * _2330;
                                float _2910 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
                                float _2341 = ((isnan(1.0) ? _2877 : (isnan(_2877) ? 1.0 : min(_2877, 1.0))) * (isnan(1.0) ? _2866 : (isnan(_2866) ? 1.0 : min(_2866, 1.0)))) * (((isnan(1.0) ? _2910 : (isnan(_2910) ? 1.0 : min(_2910, 1.0))) * 3.1415927410125732421875) / (((_2302 * _2302) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_79_pred = _2341 * _2173.z;
                                frontier_phi_79_pred_1 = _2341 * _2173.y;
                                frontier_phi_79_pred_2 = _2341 * _2173.x;
                            }
                            else
                            {
                                frontier_phi_79_pred = 0.0;
                                frontier_phi_79_pred_1 = 0.0;
                                frontier_phi_79_pred_2 = 0.0;
                            }
                            _2347 = frontier_phi_79_pred;
                            _2346 = frontier_phi_79_pred_1;
                            _2345 = frontier_phi_79_pred_2;
                            _2121 = _2345 + _2131;
                            _2122 = _2346 + _2132;
                            _2123 = _2347 + _2133;
                            if (_2135 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2131 = _2121;
                                _2132 = _2122;
                                _2133 = _2123;
                                _2134 = _2135;
                                continue;
                            }
                        }
                        frontier_phi_73_pred = _2123;
                        frontier_phi_73_pred_1 = _2122;
                        frontier_phi_73_pred_2 = _2121;
                    }
                    _1827 = frontier_phi_73_pred;
                    _1825 = frontier_phi_73_pred_1;
                    _1823 = frontier_phi_73_pred_2;
                    uint _1989 = _1988 + 1u;
                    if (_1989 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1985 = _1823;
                        _1986 = _1825;
                        _1987 = _1827;
                        _1988 = _1989;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _1827;
                frontier_phi_53_54_ladder_1 = _1825;
                frontier_phi_53_54_ladder_2 = _1823;
            }
            else
            {
                frontier_phi_53_54_ladder = _1683;
                frontier_phi_53_54_ladder_1 = _1681;
                frontier_phi_53_54_ladder_2 = _1679;
            }
            _1822 = frontier_phi_53_54_ladder_2;
            _1824 = frontier_phi_53_54_ladder_1;
            _1826 = frontier_phi_53_54_ladder;
        }
        float _1831 = isnan(1.0) ? _412 : (isnan(_412) ? 1.0 : min(_412, 1.0));
        _1583 = ((_1822 * 0.039999999105930328369140625) * _1831) + _1388;
        _1585 = ((_1824 * 0.039999999105930328369140625) * _1831) + _1390;
        _1587 = ((_1826 * 0.039999999105930328369140625) * _1831) + _1392;
    }
    else
    {
        _1583 = _1388;
        _1585 = _1390;
        _1587 = _1392;
    }
    uint _1593 = _1165 + 9u;
    uint _1594 = _1593 + uint(cbMatDynParam._m0[0u].w);
    float _2926 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _1610 = (cbInstanceData._m0[_1594].x * cbMtdParam._m0[9u].x) + ((_1583 + ((isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0))) * _905)) * cbPerFrame._m0[3u].x);
    float _1611 = (cbInstanceData._m0[_1594].y * cbMtdParam._m0[9u].y) + ((_1585 + ((isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0))) * _905)) * cbPerFrame._m0[3u].x);
    float _1612 = (cbInstanceData._m0[_1594].z * cbMtdParam._m0[9u].z) + ((_1587 + ((isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0))) * _905)) * cbPerFrame._m0[3u].x);
    float _1613 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
    float _1614 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
    float _1615 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
    float _1620 = cbInstanceData._m0[_1165 + 6u].w * (isnan(1.0) ? _2926 : (isnan(_2926) ? 1.0 : min(_2926, 1.0)));
    float _1625 = _373 / cbSceneParam._m0[86u].x;
    float _1626 = _374 / cbSceneParam._m0[86u].y;
    vec4 _1640 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1625, _1626, (log2((isnan(cbSceneParam._m0[77u].w) ? _347 : (isnan(_347) ? cbSceneParam._m0[77u].w : min(_347, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1642 = _1640.x;
    float _1643 = _1640.y;
    float _1644 = _1640.z;
    float _1645 = _1640.w;
    float _1736;
    float _1738;
    float _1740;
    float _1742;
    if (_347 > cbSceneParam._m0[78u].w)
    {
        float _1698 = isnan(_347) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _347 : min(cbSceneParam._m0[80u].w, _347));
        float _1699 = _1698 / _347;
        float _1710 = _1699 * _224;
        float _1711 = _225 * _1699;
        float _1712 = (-0.0) - _1711;
        float _1714 = _1699 * _226;
        float _1716 = (cbSceneParam._m0[77u].w * _1712) / _1698;
        float _1717 = _1716 + cbSceneParam._m0[79u].w;
        float _1718 = cbSceneParam._m0[79u].w - _1711;
        float _1724 = sqrt(((_1710 * _1710) + (_1711 * _1711)) + (_1714 * _1714));
        float _1727 = (1.0 - (cbSceneParam._m0[77u].w / _1698)) * _1724;
        float _1732 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1734 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1942;
        if (abs((_1712 - _1716) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1942 = ((((_1717 > 0.0) ? exp2(_1732 * _1717) : (2.0 - exp2(_1734 * _1717))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1727;
        }
        else
        {
            float _1868 = 1.0 / cbSceneParam._m0[80u].x;
            float _1869 = isnan(_1718) ? _1717 : (isnan(_1717) ? _1718 : max(_1717, _1718));
            float _1870 = isnan(_1718) ? _1717 : (isnan(_1717) ? _1718 : min(_1717, _1718));
            float _1879 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : min(_1869, 0.0));
            float _1880 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : min(_1870, 0.0));
            _1942 = ((abs(_1724 / _1712) * cbSceneParam._m0[80u].y) * ((((_1879 - _1880) * 2.0) - ((exp2(_1732 * (isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0)))) - exp2(_1732 * (isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))))) * _1868)) - ((exp2(_1734 * _1879) - exp2(_1734 * _1880)) * _1868))) + (_1727 * cbSceneParam._m0[80u].z);
        }
        vec4 _1944 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1625, _1626, 1.0), 0.0);
        float _1953 = exp2((_1942 * (-1.44269502162933349609375)) * (1.0 - _1944.w));
        float _1954 = log2(_1953);
        float _1970 = log2(_1645);
        _1736 = (exp2(_1970 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1954 * cbSceneParam._m0[78u].x)) * _1944.x) / cbSceneParam._m0[78u].x)) + _1642;
        _1738 = (exp2(_1970 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1954 * cbSceneParam._m0[78u].y)) * _1944.y) / cbSceneParam._m0[78u].y)) + _1643;
        _1740 = (exp2(_1970 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1954 * cbSceneParam._m0[78u].z)) * _1944.z) / cbSceneParam._m0[78u].z)) + _1644;
        _1742 = _1953 * _1645;
    }
    else
    {
        _1736 = _1642;
        _1738 = _1643;
        _1740 = _1644;
        _1742 = _1645;
    }
    bool _1980;
    vec4 _1752;
    vec4 _1775;
    float _1777;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    bool _1795;
    for (;;)
    {
        _1752 = cbMatDynParam._m0[0u];
        float _1754 = roundEven(_1752.y);
        bool _1755 = _1754 == 3.0;
        float _1757 = log2(_1742);
        float _1764 = exp2(_1757 * cbSceneParam._m0[78u].x) * _1613;
        float _1765 = exp2(_1757 * cbSceneParam._m0[78u].y) * _1614;
        float _1766 = exp2(_1757 * cbSceneParam._m0[78u].z) * _1615;
        float _1773 = _361 + (-0.5);
        _1775 = cbMtdParam._m0[1u];
        _1777 = _1775.y * _1773;
        float _1780 = (_1754 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1781 = _1780 * (_1755 ? _1764 : (_1764 + (cbSceneParam._m0[72u].w * _1736)));
        _1782 = _1780 * (_1755 ? _1765 : (_1765 + (cbSceneParam._m0[72u].w * _1738)));
        _1783 = _1780 * (_1755 ? _1766 : (_1766 + (cbSceneParam._m0[72u].w * _1740)));
        _1784 = _1773 * 0.999000012874603271484375;
        _1795 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1795)
        {
            if ((cbInstanceData._m0[_1165 + 7u].x + _1784) < 0.5)
            {
                _1980 = true;
                break;
            }
        }
        uint _1903 = _1593 + uint(_1752.w);
        if ((cbInstanceData._m0[_1903].w < 1.0) && ((cbInstanceData._m0[_1903].w + _1784) < 0.5))
        {
            _1980 = true;
            break;
        }
        if ((_1777 + _303) < _1775.x)
        {
            _1980 = true;
            break;
        }
        _1980 = false;
        break;
    }
    float _2112;
    if (_1980)
    {
        discard_state = true;
        _2112 = 0.0;
    }
    else
    {
        _2112 = _1620;
    }
    SV_Target.x = _1781;
    SV_Target.y = _1782;
    SV_Target.z = _1783;
    SV_Target.w = _2112;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _1620;
    discard_exit();
}


