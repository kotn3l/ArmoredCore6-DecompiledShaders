#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Stealthmist_snp_0_Texture2D_0;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _642;
uint _2006;
uint _2007;
uint _2008;
uint _2233;
uint _2234;
uint _2235;
float _2450;
float _2451;
float _2452;
float _2453;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _165 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _166 = _165 * NORMAL.x;
    float _167 = _165 * NORMAL.y;
    float _168 = _165 * NORMAL.z;
    float _212 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _222 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _212);
    float _223 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _212);
    float _224 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _212);
    float _232 = cbMtdParam._m0[10u].w * cbPerFrame._m0[22u].x;
    float _239 = TEXCOORD_1.y - ((cbMtdParam._m0[11u].x * cbPerFrame._m0[22u].x) * 0.550000011920928955078125);
    float _282 = ((_239 * cbMtdParam._m0[10u].x) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w;
    float _301 = (((texture(sampler2D(M_Stealthmist_snp_0_Texture2D_0, SS_WrapLinear), vec2((((cbMtdParam._m0[11u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z - (texture(sampler2D(M_Stealthmist_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbTextureTilingScale._m0[0u].x * cbMtdParam._m0[10u].x) * ((_232 * 3.2999999523162841796875) + TEXCOORD_1.x)) + cbTextureTilingScale._m0[0u].z, ((cbTextureTilingScale._m0[0u].y * cbMtdParam._m0[10u].x) * _239) + cbTextureTilingScale._m0[0u].w)).y * 0.20000000298023223876953125)) + (texture(sampler2D(M_Stealthmist_snp_0_Texture2D_0, SS_WrapLinear), vec2(((((_232 * 6.900000095367431640625) + TEXCOORD_1.x) * cbMtdParam._m0[10u].x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, _282)).x * 0.0500000007450580596923828125)) + (texture(sampler2D(M_Stealthmist_snp_0_Texture2D_0, SS_WrapLinear), vec2(((((_232 * 16.0) + TEXCOORD_1.x) * cbMtdParam._m0[10u].x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, _282)).x * 0.100000001490116119384765625)) * TEXCOORD_1.z;
    float _308 = sqrt(((_222 * _222) + (_223 * _223)) + (_224 * _224));
    float _311 = cbMtdParam._m0[10u].y - cbMtdParam._m0[10u].z;
    float _313 = (_308 - cbMtdParam._m0[10u].z) / (isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0)));
    float _2467 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _316 = (isnan(1.0) ? _2467 : (isnan(_2467) ? 1.0 : min(_2467, 1.0))) * _301;
    float _325 = inversesqrt(dot(vec3(_166, _167, _168), vec3(_166, _167, _168)));
    float _326 = _325 * _166;
    float _327 = _325 * _167;
    float _328 = _325 * _168;
    float _2478 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _329 = isnan(1.0) ? _2478 : (isnan(_2478) ? 1.0 : min(_2478, 1.0));
    float _345 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _349 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _350 = _222 * _349;
    float _351 = _223 * _349;
    float _352 = _224 * _349;
    vec4 _357 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _359 = _357.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _462 = (cbMatDynParam._m0[5u].x * _308) + cbMatDynParam._m0[5u].y;
        float _2489 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
        float _463 = isnan(1.0) ? _2489 : (isnan(_2489) ? 1.0 : min(_2489, 1.0));
        float _467 = (cbMatDynParam._m0[5u].z * _308) + cbMatDynParam._m0[5u].w;
        float _2500 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2500 : (isnan(_2500) ? 1.0 : min(_2500, 1.0))) - _463)) + _463) < ((_359 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _371 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _372 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _392 = fma(_328, cbSceneParam._m0[5u].z, fma(_327, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _326));
    float _395 = fma(_328, cbSceneParam._m0[6u].z, fma(_327, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _326));
    float _398 = fma(_328, cbSceneParam._m0[7u].z, fma(_327, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _326));
    vec4 _407 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _371, cbSceneParam._m0[86u].y * _372));
    float _410 = _407.x * TEXCOORD_1.w;
    float _411 = dot(vec3(_326, _327, _328), vec3(_350, _351, _352));
    float _414 = _411 * 2.0;
    float _419 = (_414 * _326) - _350;
    float _420 = (_414 * _327) - _351;
    float _421 = (_414 * _328) - _352;
    float _443 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _447 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _451 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _641;
    float _643;
    float _644;
    float _645;
    float _646;
    float _647;
    float _648;
    float _649;
    float _650;
    float _651;
    float _652;
    float _653;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _501 = fma(_451, cbModelParam._m0[26u].z, fma(_447, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _443));
        float _505 = fma(_451, cbModelParam._m0[27u].z, fma(_447, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _443));
        float _509 = fma(_451, cbModelParam._m0[28u].z, fma(_447, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _443));
        float _534 = _443 + _326;
        float _535 = _447 + _327;
        float _536 = _451 + _328;
        float _546 = fma(_536, cbModelParam._m0[26u].z, fma(_535, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _534)) - _501;
        float _547 = fma(_536, cbModelParam._m0[27u].z, fma(_535, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _534)) - _505;
        float _548 = fma(_536, cbModelParam._m0[28u].z, fma(_535, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _534)) - _509;
        float _552 = inversesqrt(dot(vec3(_546, _547, _548), vec3(_546, _547, _548)));
        float _565 = ((_552 * _546) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_501 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _566 = ((_552 * _547) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_505 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _567 = ((_552 * _548) / cbModelParam._m0[34u].z) + ((((((_509 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _570 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_565, _566, _567), 0.0);
        vec4 _577 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_565, _566, _567), 0.0);
        vec4 _584 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_565, _566, _567), 0.0);
        vec4 _591 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_565, _566, _567), 0.0);
        float _604 = exp2((_570.w + (-0.5)) * 20.0) * 2.0;
        float _614 = exp2((_577.w + (-0.5)) * 20.0) * 2.0;
        float _624 = exp2((_584.w + (-0.5)) * 20.0) * 2.0;
        float _634 = exp2((_591.w + (-0.5)) * 20.0) * 2.0;
        float _635 = _634 * (_591.x + (-0.5));
        float _636 = _634 * (_591.y + (-0.5));
        float _637 = _634 * (_591.z + (-0.5));
        _641 = _604 * (_570.z + (-0.5));
        _643 = _604 * (_570.y + (-0.5));
        _644 = _604 * (_570.x + (-0.5));
        _645 = _614 * (_577.z + (-0.5));
        _646 = _614 * (_577.y + (-0.5));
        _647 = _614 * (_577.x + (-0.5));
        _648 = _624 * (_584.z + (-0.5));
        _649 = _624 * (_584.y + (-0.5));
        _650 = _624 * (_584.x + (-0.5));
        _651 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
        _652 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
        _653 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    }
    else
    {
        _641 = _642;
        _643 = _642;
        _644 = _642;
        _645 = _642;
        _646 = _642;
        _647 = _642;
        _648 = _642;
        _649 = _642;
        _650 = _642;
        _651 = _642;
        _652 = _642;
        _653 = _642;
    }
    float _818;
    float _819;
    float _820;
    float _821;
    float _822;
    float _823;
    float _824;
    float _825;
    float _826;
    float _827;
    float _828;
    float _829;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _682 = fma(_451, cbModelParam._m0[30u].z, fma(_447, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _443));
        float _686 = fma(_451, cbModelParam._m0[31u].z, fma(_447, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _443));
        float _690 = fma(_451, cbModelParam._m0[32u].z, fma(_447, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _443));
        float _713 = _443 + _326;
        float _714 = _447 + _327;
        float _715 = _451 + _328;
        float _725 = fma(_715, cbModelParam._m0[30u].z, fma(_714, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _713)) - _682;
        float _726 = fma(_715, cbModelParam._m0[31u].z, fma(_714, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _713)) - _686;
        float _727 = fma(_715, cbModelParam._m0[32u].z, fma(_714, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _713)) - _690;
        float _731 = inversesqrt(dot(vec3(_725, _726, _727), vec3(_725, _726, _727)));
        float _744 = ((_731 * _725) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_682 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _745 = ((_731 * _726) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_686 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _746 = ((_731 * _727) / cbModelParam._m0[35u].z) + ((((((_690 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _748 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        vec4 _755 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        vec4 _762 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        vec4 _769 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_744, _745, _746), 0.0);
        float _781 = exp2((_748.w + (-0.5)) * 20.0) * 2.0;
        float _791 = exp2((_755.w + (-0.5)) * 20.0) * 2.0;
        float _801 = exp2((_762.w + (-0.5)) * 20.0) * 2.0;
        float _811 = exp2((_769.w + (-0.5)) * 20.0) * 2.0;
        float _812 = _811 * (_769.x + (-0.5));
        float _813 = _811 * (_769.y + (-0.5));
        float _814 = _811 * (_769.z + (-0.5));
        _818 = _781 * (_748.z + (-0.5));
        _819 = _781 * (_748.y + (-0.5));
        _820 = _781 * (_748.x + (-0.5));
        _821 = _791 * (_755.z + (-0.5));
        _822 = _791 * (_755.y + (-0.5));
        _823 = _791 * (_755.x + (-0.5));
        _824 = _801 * (_762.z + (-0.5));
        _825 = _801 * (_762.y + (-0.5));
        _826 = _801 * (_762.x + (-0.5));
        _827 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        _828 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        _829 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    }
    else
    {
        _818 = _642;
        _819 = _642;
        _820 = _642;
        _821 = _642;
        _822 = _642;
        _823 = _642;
        _824 = _642;
        _825 = _642;
        _826 = _642;
        _827 = _642;
        _828 = _642;
        _829 = _642;
    }
    float _844 = _419 * 0.5;
    float _845 = _420 * 0.5;
    float _846 = _421 * 0.5;
    float _847 = dot(vec4(_844, _845, _846, 1.0), vec4(_820, _823, _826, _829));
    float _850 = dot(vec4(_844, _845, _846, 1.0), vec4(_819, _822, _825, _828));
    float _853 = dot(vec4(_844, _845, _846, 1.0), vec4(_818, _821, _824, _827));
    float _888;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _860 = dot(vec4(_844, _845, _846, 1.0), vec4(_641, _645, _648, _651));
        float _864 = dot(vec4(_844, _845, _846, 1.0), vec4(_643, _646, _649, _652));
        float _868 = dot(vec4(_844, _845, _846, 1.0), vec4(_644, _647, _650, _653));
        float _875 = dot(vec4(cbModelParam._m0[39u]), vec4(_844, _845, _846, 1.0));
        _888 = dot(vec3(isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0)), isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0)), isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_875) ? 0.0 : (isnan(0.0) ? _875 : max(0.0, _875))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _888 = 1.0;
    }
    float _899;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _890 = dot(vec4(cbModelParam._m0[40u]), vec4(_844, _845, _846, 1.0));
        _899 = dot(vec3(isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0)), isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0)), isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_890) ? 0.0 : (isnan(0.0) ? _890 : max(0.0, _890))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _899 = 1.0;
    }
    float _903 = (_899 * cbModelParam._m0[1u].x) + (_888 * (1.0 - cbModelParam._m0[1u].x));
    float _909 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _992;
    float _994;
    float _996;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _959 = fma(_451, cbModelParam._m0[13u].z, fma(_447, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _443)) + cbModelParam._m0[13u].w;
        float _963 = fma(_451, cbModelParam._m0[14u].z, fma(_447, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _443)) + cbModelParam._m0[14u].w;
        float _967 = fma(_451, cbModelParam._m0[15u].z, fma(_447, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _443)) + cbModelParam._m0[15u].w;
        float _970 = fma(_421, cbModelParam._m0[13u].z, fma(_420, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _419));
        float _973 = fma(_421, cbModelParam._m0[14u].z, fma(_420, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _419));
        float _976 = fma(_421, cbModelParam._m0[15u].z, fma(_420, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _419));
        float _1002;
        if (_970 > 0.0)
        {
            _1002 = abs((1.0 - _959) / _970);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_970 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_959 + 1.0) / _970);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1002 = frontier_phi_17_15_ladder;
        }
        float _1284;
        if (_973 > 0.0)
        {
            _1284 = abs((1.0 - _963) / _973);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_973 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_963 + 1.0) / _973);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1284 = frontier_phi_26_22_ladder;
        }
        float _1428;
        if (_976 > 0.0)
        {
            _1428 = abs((1.0 - _967) / _976);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_976 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_967 + 1.0) / _976);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1428 = frontier_phi_38_33_ladder;
        }
        float _1430 = isnan(_1284) ? _1002 : (isnan(_1002) ? _1284 : min(_1002, _1284));
        float _1431 = isnan(_1428) ? _1430 : (isnan(_1430) ? _1428 : min(_1430, _1428));
        float _1435 = (_1431 * _970) + _959;
        float _1436 = (_1431 * _973) + _963;
        float _1437 = (_1431 * _976) + _967;
        float _1438 = _1431 * 9.9999997473787516355514526367188e-05;
        float _1440 = (-1.0) - _1438;
        float _1442 = _1438 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1437 > _1442) || ((_1437 < _1440) || ((_1436 > _1442) || ((_1436 < _1440) || ((_1435 < _1440) || (_1435 > _1442))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1647 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1437, cbModelParam._m0[9u].z, fma(_1436, cbModelParam._m0[9u].y, _1435 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1437, cbModelParam._m0[10u].z, fma(_1436, cbModelParam._m0[10u].y, _1435 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1437, cbModelParam._m0[11u].z, fma(_1436, cbModelParam._m0[11u].y, _1435 * cbModelParam._m0[11u].x))), _909);
            frontier_phi_16_38_ladder = _1647.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _1647.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _1647.x * cbModelParam._m0[1u].y;
        }
        _992 = frontier_phi_16_38_ladder_2;
        _994 = frontier_phi_16_38_ladder_1;
        _996 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _980 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_419, _420, _421), _909);
        _992 = _980.x * cbModelParam._m0[1u].y;
        _994 = _980.y * cbModelParam._m0[1u].y;
        _996 = _980.z * cbModelParam._m0[1u].y;
    }
    float _999 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1091;
    float _1093;
    float _1095;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1055 = fma(_451, cbModelParam._m0[21u].z, fma(_447, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _443)) + cbModelParam._m0[21u].w;
        float _1059 = fma(_451, cbModelParam._m0[22u].z, fma(_447, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _443)) + cbModelParam._m0[22u].w;
        float _1063 = fma(_451, cbModelParam._m0[23u].z, fma(_447, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _443)) + cbModelParam._m0[23u].w;
        float _1066 = fma(_421, cbModelParam._m0[21u].z, fma(_420, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _419));
        float _1069 = fma(_421, cbModelParam._m0[22u].z, fma(_420, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _419));
        float _1072 = fma(_421, cbModelParam._m0[23u].z, fma(_420, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _419));
        float _1289;
        if (_1066 > 0.0)
        {
            _1289 = abs((1.0 - _1055) / _1066);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1066 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1055 + 1.0) / _1066);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1289 = frontier_phi_28_24_ladder;
        }
        float _1455;
        if (_1069 > 0.0)
        {
            _1455 = abs((1.0 - _1059) / _1069);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1069 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1059 + 1.0) / _1069);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1455 = frontier_phi_40_35_ladder;
        }
        float _1773;
        if (_1072 > 0.0)
        {
            _1773 = abs((1.0 - _1063) / _1072);
        }
        else
        {
            float frontier_phi_51_46_ladder;
            if (_1072 < 0.0)
            {
                frontier_phi_51_46_ladder = abs((_1063 + 1.0) / _1072);
            }
            else
            {
                frontier_phi_51_46_ladder = 5000.0;
            }
            _1773 = frontier_phi_51_46_ladder;
        }
        float _1775 = isnan(_1455) ? _1289 : (isnan(_1289) ? _1455 : min(_1289, _1455));
        float _1776 = isnan(_1773) ? _1775 : (isnan(_1775) ? _1773 : min(_1775, _1773));
        float _1780 = (_1776 * _1066) + _1055;
        float _1781 = (_1776 * _1069) + _1059;
        float _1782 = (_1776 * _1072) + _1063;
        float _1783 = _1776 * 9.9999997473787516355514526367188e-05;
        float _1784 = (-1.0) - _1783;
        float _1786 = _1783 + 1.0;
        float frontier_phi_25_51_ladder;
        float frontier_phi_25_51_ladder_1;
        float frontier_phi_25_51_ladder_2;
        if ((_1782 > _1786) || ((_1782 < _1784) || ((_1781 > _1786) || ((_1781 < _1784) || ((_1780 < _1784) || (_1780 > _1786))))))
        {
            frontier_phi_25_51_ladder = 0.0;
            frontier_phi_25_51_ladder_1 = 0.0;
            frontier_phi_25_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1904 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1782, cbModelParam._m0[17u].z, fma(_1781, cbModelParam._m0[17u].y, _1780 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1782, cbModelParam._m0[18u].z, fma(_1781, cbModelParam._m0[18u].y, _1780 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1782, cbModelParam._m0[19u].z, fma(_1781, cbModelParam._m0[19u].y, _1780 * cbModelParam._m0[19u].x))), _999);
            frontier_phi_25_51_ladder = _1904.z * cbModelParam._m0[1u].z;
            frontier_phi_25_51_ladder_1 = _1904.y * cbModelParam._m0[1u].z;
            frontier_phi_25_51_ladder_2 = _1904.x * cbModelParam._m0[1u].z;
        }
        _1091 = frontier_phi_25_51_ladder_2;
        _1093 = frontier_phi_25_51_ladder_1;
        _1095 = frontier_phi_25_51_ladder;
    }
    else
    {
        vec4 _1075 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_419, _420, _421), _999);
        _1091 = _1075.x * cbModelParam._m0[1u].z;
        _1093 = _1075.y * cbModelParam._m0[1u].z;
        _1095 = _1075.z * cbModelParam._m0[1u].z;
    }
    float _1107 = _410 * 0.01200000010430812835693359375;
    float _1109 = _1107 * ((cbModelParam._m0[1u].w * (_1091 - _992)) + _992);
    float _1110 = _1107 * ((cbModelParam._m0[1u].w * (_1093 - _994)) + _994);
    float _1111 = _1107 * ((cbModelParam._m0[1u].w * (_1095 - _996)) + _996);
    float _1132 = fma(_1111, cbSceneParam._m0[89u].z, fma(_1110, cbSceneParam._m0[89u].y, _1109 * cbSceneParam._m0[89u].x));
    float _1135 = fma(_1111, cbSceneParam._m0[90u].z, fma(_1110, cbSceneParam._m0[90u].y, _1109 * cbSceneParam._m0[90u].x));
    float _1138 = fma(_1111, cbSceneParam._m0[91u].z, fma(_1110, cbSceneParam._m0[91u].y, _1109 * cbSceneParam._m0[91u].x));
    uint _1145 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1149 = floatBitsToUint(cbInstanceData._m0[_1145 + 5u]);
    uint _1151 = _1149.x * 14u;
    uint _1152 = _1151 + 13u;
    float _1158 = _410 + (-1.0);
    float _1163 = (cbLight._m0[_1152].x * _1158) + 1.0;
    float _1164 = (cbLight._m0[_1152].y * _1158) + 1.0;
    float _1165 = (cbLight._m0[_1152].w * _1158) + 1.0;
    uint _1166 = _1151 + 8u;
    float _1177 = cbLight._m0[_1151].x + _350;
    float _1178 = cbLight._m0[_1151].y + _351;
    float _1179 = cbLight._m0[_1151].z + _352;
    float _1183 = inversesqrt(dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179)));
    float _1187 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_1151].xyz));
    float _2626 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
    float _1190 = isnan(1.0) ? _2626 : (isnan(_2626) ? 1.0 : min(_2626, 1.0));
    float _2637 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _1191 = isnan(1.0) ? _2637 : (isnan(_2637) ? 1.0 : min(_2637, 1.0));
    float _1192 = dot(vec3(cbLight._m0[_1151].xyz), vec3(_1177 * _1183, _1178 * _1183, _1179 * _1183));
    float _2648 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
    float _1203 = (exp2(log2(1.0 - (isnan(1.0) ? _2648 : (isnan(_2648) ? 1.0 : min(_2648, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1209 = (0.5 / ((_1190 + 9.9999999392252902907785028219223e-09) + _1191)) * _1190;
    float _2659 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
    float _1211 = (isnan(1.0) ? _2659 : (isnan(_2659) ? 1.0 : min(_2659, 1.0))) * 0.31831014156341552734375;
    float _1213 = isnan(1.0) ? _1163 : (isnan(_1163) ? 1.0 : min(_1163, 1.0));
    uint _1223 = _1151 + 9u;
    uint _1229 = _1151 | 1u;
    float _1235 = cbLight._m0[_1229].x + _350;
    float _1236 = cbLight._m0[_1229].y + _351;
    float _1237 = cbLight._m0[_1229].z + _352;
    float _1241 = inversesqrt(dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237)));
    float _1245 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_1229].xyz));
    float _2675 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
    float _1248 = isnan(1.0) ? _2675 : (isnan(_2675) ? 1.0 : min(_2675, 1.0));
    float _1249 = dot(vec3(cbLight._m0[_1229].xyz), vec3(_1235 * _1241, _1236 * _1241, _1237 * _1241));
    float _2686 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
    float _1258 = (exp2(log2(1.0 - (isnan(1.0) ? _2686 : (isnan(_2686) ? 1.0 : min(_2686, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1262 = (0.5 / ((_1248 + 9.9999999392252902907785028219223e-09) + _1191)) * _1248;
    float _2697 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
    float _1264 = (isnan(1.0) ? _2697 : (isnan(_2697) ? 1.0 : min(_2697, 1.0))) * 0.31831014156341552734375;
    float _1265 = isnan(1.0) ? _1164 : (isnan(_1164) ? 1.0 : min(_1164, 1.0));
    float _1275 = (((_1258 * cbLight._m0[_1223].x) * _1264) * _1265) + (((_1203 * cbLight._m0[_1166].x) * _1211) * _1213);
    float _1276 = (((_1258 * cbLight._m0[_1223].y) * _1264) * _1265) + (((_1203 * cbLight._m0[_1166].y) * _1211) * _1213);
    float _1277 = (((_1258 * cbLight._m0[_1223].z) * _1264) * _1265) + (((_1203 * cbLight._m0[_1166].z) * _1211) * _1213);
    uvec4 _1281 = floatBitsToUint(cbLight._m0[_1151 + 12u]);
    float _1294;
    float _1296;
    float _1298;
    if (_1281.x == 0u)
    {
        _1294 = _1275;
        _1296 = _1276;
        _1298 = _1277;
    }
    else
    {
        float _1304 = (cbLight._m0[_1152].z * _1158) + 1.0;
        uint _1305 = _1151 + 10u;
        uint _1311 = _1151 + 2u;
        float _1317 = cbLight._m0[_1311].x + _350;
        float _1318 = cbLight._m0[_1311].y + _351;
        float _1319 = cbLight._m0[_1311].z + _352;
        float _1323 = inversesqrt(dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319)));
        float _1327 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_1311].xyz));
        float _2713 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1330 = isnan(1.0) ? _2713 : (isnan(_2713) ? 1.0 : min(_2713, 1.0));
        float _1331 = dot(vec3(cbLight._m0[_1311].xyz), vec3(_1317 * _1323, _1318 * _1323, _1319 * _1323));
        float _2724 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1340 = (exp2(log2(1.0 - (isnan(1.0) ? _2724 : (isnan(_2724) ? 1.0 : min(_2724, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1344 = (0.5 / ((_1330 + 9.9999999392252902907785028219223e-09) + _1191)) * _1330;
        float _2735 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1346 = (isnan(1.0) ? _2735 : (isnan(_2735) ? 1.0 : min(_2735, 1.0))) * 0.31831014156341552734375;
        float _1347 = isnan(1.0) ? _1304 : (isnan(_1304) ? 1.0 : min(_1304, 1.0));
        _1294 = (((_1340 * cbLight._m0[_1305].x) * _1346) * _1347) + _1275;
        _1296 = (((_1340 * cbLight._m0[_1305].y) * _1346) * _1347) + _1276;
        _1298 = (((_1340 * cbLight._m0[_1305].z) * _1346) * _1347) + _1277;
    }
    float _1365;
    float _1367;
    float _1369;
    if (_1281.y == 0u)
    {
        _1365 = _1294;
        _1367 = _1296;
        _1369 = _1298;
    }
    else
    {
        uint _1376 = _1151 + 11u;
        uint _1382 = _1151 + 3u;
        float _1388 = cbLight._m0[_1382].x + _350;
        float _1389 = cbLight._m0[_1382].y + _351;
        float _1390 = cbLight._m0[_1382].z + _352;
        float _1394 = inversesqrt(dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390)));
        float _1398 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_1382].xyz));
        float _2751 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1401 = isnan(1.0) ? _2751 : (isnan(_2751) ? 1.0 : min(_2751, 1.0));
        float _1402 = dot(vec3(cbLight._m0[_1382].xyz), vec3(_1388 * _1394, _1389 * _1394, _1390 * _1394));
        float _2762 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1411 = (exp2(log2(1.0 - (isnan(1.0) ? _2762 : (isnan(_2762) ? 1.0 : min(_2762, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1415 = (0.5 / ((_1401 + 9.9999999392252902907785028219223e-09) + _1191)) * _1401;
        float _2773 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1417 = (isnan(1.0) ? _2773 : (isnan(_2773) ? 1.0 : min(_2773, 1.0))) * 0.31831014156341552734375;
        float _1418 = isnan(1.0) ? _1165 : (isnan(_1165) ? 1.0 : min(_1165, 1.0));
        _1365 = (((_1411 * cbLight._m0[_1376].x) * _1417) * _1418) + _1294;
        _1367 = (((_1411 * cbLight._m0[_1376].y) * _1417) * _1418) + _1296;
        _1369 = (((_1411 * cbLight._m0[_1376].z) * _1417) * _1418) + _1298;
    }
    float _1560;
    float _1562;
    float _1564;
    if (_1149.y == 0u)
    {
        float _1499 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1500 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1499;
        float _1501 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1499;
        float _1502 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1499;
        uvec4 _1514 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1515 = _1514.x;
        uint _1526 = uint((float(_1514.y) * floor(float(uint(cbSceneParam._m0[85u].y * _372) / _1515))) + floor(float(uint(cbSceneParam._m0[85u].x * _371) / _1515)));
        float _1536 = (log2(_1502 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1537 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        uint _1540 = uint(isnan(14.0) ? _1537 : (isnan(_1537) ? 14.0 : min(_1537, 14.0)));
        uvec4 _1545 = texelFetch(g_lightClusterGridBuffer, int(((_1540 << 2u) + (_1526 << 6u)) >> 2u));
        uint _1546 = _1545.x;
        uint _1547 = _1514.z;
        float _1656;
        float _1658;
        float _1660;
        if (((((1u << ((_1547 >> 4u) & 15u)) + 4294967295u) & _1546) == 0u) || ((_1547 & 240u) == 0u))
        {
            _1656 = 0.0;
            _1658 = 0.0;
            _1660 = 0.0;
        }
        else
        {
            float _1657;
            float _1659;
            float _1661;
            float _1819 = 0.0;
            float _1820 = 0.0;
            float _1821 = 0.0;
            uint _1822 = 0u;
            uint _1831;
            bool _1832;
            for (;;)
            {
                _1831 = texelFetch(g_lightClassification, int((((_1540 << 5u) + (_1526 << 9u)) + (_1822 << 2u)) >> 2u)).x;
                _1832 = _1831 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                if (_1832)
                {
                    frontier_phi_62_pred = _1821;
                    frontier_phi_62_pred_1 = _1820;
                    frontier_phi_62_pred_2 = _1819;
                }
                else
                {
                    float _1976;
                    float _1977;
                    float _1978;
                    uint _1979;
                    _1976 = _1819;
                    _1977 = _1820;
                    _1978 = _1821;
                    _1979 = _1831;
                    float _1909;
                    float _1910;
                    float _1911;
                    for (;;)
                    {
                        uint _1983 = uint(findLSB(_1979)) + (_1822 << 5u);
                        uint _1980 = (_1979 + 4294967295u) & _1979;
                        uint _1985 = _1983 * 48u;
                        vec4 _1999 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1985)).x, texelFetch(g_PointLightRenderingBuffer, int(_1985 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1985 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1985 + 3u)).x));
                        uint _2016 = (_1983 * 48u) + 8u;
                        vec3 _2027 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2016)).x, texelFetch(g_PointLightRenderingBuffer, int(_2016 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2016 + 2u)).x));
                        float _2031 = _1999.x - _1500;
                        float _2032 = _1999.y - _1501;
                        float _2033 = _1999.z - _1502;
                        float _2034 = dot(vec3(_2031, _2032, _2033), vec3(_2031, _2032, _2033));
                        float _2037 = inversesqrt(_2034);
                        float _2046 = 1.0 - (_2034 * _1999.w);
                        float _2799 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
                        float _2048 = sqrt(_2034) * uintBitsToFloat(uvec4(_2006, _2007, _2008, texelFetch(g_PointLightRenderingBuffer, int(((_1983 * 48u) + 4u) + 3u)).x)).w;
                        float _2051 = 1.39999997615814208984375 / (_2048 + 1.39999997615814208984375);
                        float _2052 = _2051 * _2051;
                        float _2055 = ((1.0 - _2052) * dot(vec3(_392, _395, _398), vec3(_2037 * _2031, _2037 * _2032, _2037 * _2033))) + _2052;
                        float _2057 = (-0.0) - _1500;
                        float _2058 = (-0.0) - _1501;
                        float _2059 = (-0.0) - _1502;
                        float _2063 = inversesqrt(dot(vec3(_2057, _2058, _2059), vec3(_2057, _2058, _2059)));
                        float _2067 = dot(vec3(_392, _395, _398), vec3(_2063 * _2057, _2063 * _2058, _2063 * _2059));
                        float _2810 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
                        float _2821 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
                        float _2071 = isnan(1.0) ? _2821 : (isnan(_2821) ? 1.0 : min(_2821, 1.0));
                        float _2075 = (0.5 / (((isnan(1.0) ? _2810 : (isnan(_2810) ? 1.0 : min(_2810, 1.0))) + 9.9999999392252902907785028219223e-09) + _2071)) * _2071;
                        float _2832 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
                        float _2084 = (((isnan(1.0) ? _2832 : (isnan(_2832) ? 1.0 : min(_2832, 1.0))) * 3.1415927410125732421875) / (((_2048 * _2048) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2799 : (isnan(_2799) ? 1.0 : min(_2799, 1.0)));
                        _1909 = (_2084 * _2027.x) + _1976;
                        _1910 = (_2084 * _2027.y) + _1977;
                        _1911 = (_2084 * _2027.z) + _1978;
                        if (_1980 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1976 = _1909;
                            _1977 = _1910;
                            _1978 = _1911;
                            _1979 = _1980;
                        }
                    }
                    frontier_phi_62_pred = _1911;
                    frontier_phi_62_pred_1 = _1910;
                    frontier_phi_62_pred_2 = _1909;
                }
                _1661 = frontier_phi_62_pred;
                _1659 = frontier_phi_62_pred_1;
                _1657 = frontier_phi_62_pred_2;
                uint _1823 = _1822 + 1u;
                if (_1823 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1819 = _1657;
                    _1820 = _1659;
                    _1821 = _1661;
                    _1822 = _1823;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1656 = _1657;
            _1658 = _1659;
            _1660 = _1661;
        }
        uvec4 _1664 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1665 = _1664.z;
        uint _1667 = (_1665 >> 8u) & 15u;
        float _1799;
        float _1801;
        float _1803;
        if (((4294967295u << _1667) & _1546) == 0u)
        {
            _1799 = _1656;
            _1801 = _1658;
            _1803 = _1660;
        }
        else
        {
            float _1815 = inversesqrt(dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502)));
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            if (_1667 < ((_1665 >> 12u) & 15u))
            {
                float _1800;
                float _1802;
                float _1804;
                float _1962 = _1656;
                float _1963 = _1658;
                float _1964 = _1660;
                uint _1965 = _1667;
                uint _1974;
                bool _1975;
                for (;;)
                {
                    _1974 = texelFetch(g_lightClassification, int((((_1540 << 5u) + (_1526 << 9u)) + (_1965 << 2u)) >> 2u)).x;
                    _1975 = _1974 == 0u;
                    float frontier_phi_73_pred;
                    float frontier_phi_73_pred_1;
                    float frontier_phi_73_pred_2;
                    if (_1975)
                    {
                        frontier_phi_73_pred = _1964;
                        frontier_phi_73_pred_1 = _1963;
                        frontier_phi_73_pred_2 = _1962;
                    }
                    else
                    {
                        float _2098;
                        float _2099;
                        float _2100;
                        float _2322;
                        float _2323;
                        float _2324;
                        float _2108 = _1962;
                        float _2109 = _1963;
                        float _2110 = _1964;
                        uint _2111 = _1974;
                        uint _2112;
                        uint _2122;
                        vec4 _2137;
                        float _2138;
                        vec3 _2150;
                        vec4 _2166;
                        vec4 _2182;
                        float _2229;
                        bool _2230;
                        for (;;)
                        {
                            _2122 = ((_1965 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2111));
                            _2112 = (_2111 + 4294967295u) & _2111;
                            uint _2124 = _2122 * 40u;
                            _2137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2124 + 3u)).x));
                            _2138 = _2137.w;
                            uint _2140 = (_2122 * 40u) + 8u;
                            _2150 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2140 + 2u)).x));
                            uint _2153 = (_2122 * 40u) + 16u;
                            _2166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2153 + 3u)).x));
                            uint _2169 = (_2122 * 40u) + 20u;
                            _2182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2169 + 3u)).x));
                            uint _2185 = (_2122 * 40u) + 24u;
                            vec4 _2198 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2185 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2185 + 3u)).x));
                            uint _2204 = (_2122 * 40u) + 28u;
                            vec4 _2217 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2204 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2204 + 3u)).x));
                            _2229 = fma(_1502, _2217.z, fma(_1501, _2217.y, _2217.x * _1500)) + _2217.w;
                            _2230 = !((fma(_1502, _2198.z, fma(_1501, _2198.y, _2198.x * _1500)) + _2198.w) <= 0.0);
                            float frontier_phi_79_pred;
                            float frontier_phi_79_pred_1;
                            float frontier_phi_79_pred_2;
                            if (_2230)
                            {
                                float _2264 = _2137.x - _1500;
                                float _2265 = _2137.y - _1501;
                                float _2266 = _2137.z - _1502;
                                float _2267 = dot(vec3(_2264, _2265, _2266), vec3(_2264, _2265, _2266));
                                float _2270 = inversesqrt(_2267);
                                float _2277 = 1.0 - (_2267 / (_2138 * _2138));
                                float _2843 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
                                float _2279 = sqrt(_2267) * uintBitsToFloat(uvec4(_2233, _2234, _2235, texelFetch(g_SpotLightRenderingBuffer, int(((_2122 * 40u) + 4u) + 3u)).x)).w;
                                float _2281 = 1.39999997615814208984375 / (_2279 + 1.39999997615814208984375);
                                float _2282 = _2281 * _2281;
                                float _2285 = (fma(_1502, _2166.z, fma(_1501, _2166.y, _2166.x * _1500)) + _2166.w) / _2229;
                                float _2286 = (fma(_1502, _2182.z, fma(_1501, _2182.y, _2182.x * _1500)) + _2182.w) / _2229;
                                float _2290 = 1.0 - dot(vec2(_2285, _2286), vec2(_2285, _2286));
                                float _2854 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
                                float _2298 = dot(vec3(_392, _395, _398), vec3((-0.0) - (_1500 * _1815), (-0.0) - (_1501 * _1815), (-0.0) - (_1502 * _1815)));
                                float _2865 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
                                float _2306 = ((1.0 - _2282) * dot(vec3(_392, _395, _398), vec3(_2270 * _2264, _2270 * _2265, _2270 * _2266))) + _2282;
                                float _2876 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
                                float _2307 = isnan(1.0) ? _2876 : (isnan(_2876) ? 1.0 : min(_2876, 1.0));
                                float _2311 = (0.5 / (((isnan(1.0) ? _2865 : (isnan(_2865) ? 1.0 : min(_2865, 1.0))) + 9.9999999392252902907785028219223e-09) + _2307)) * _2307;
                                float _2887 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
                                float _2318 = ((isnan(1.0) ? _2854 : (isnan(_2854) ? 1.0 : min(_2854, 1.0))) * (isnan(1.0) ? _2843 : (isnan(_2843) ? 1.0 : min(_2843, 1.0)))) * (((isnan(1.0) ? _2887 : (isnan(_2887) ? 1.0 : min(_2887, 1.0))) * 3.1415927410125732421875) / (((_2279 * _2279) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_79_pred = _2318 * _2150.z;
                                frontier_phi_79_pred_1 = _2318 * _2150.y;
                                frontier_phi_79_pred_2 = _2318 * _2150.x;
                            }
                            else
                            {
                                frontier_phi_79_pred = 0.0;
                                frontier_phi_79_pred_1 = 0.0;
                                frontier_phi_79_pred_2 = 0.0;
                            }
                            _2324 = frontier_phi_79_pred;
                            _2323 = frontier_phi_79_pred_1;
                            _2322 = frontier_phi_79_pred_2;
                            _2098 = _2322 + _2108;
                            _2099 = _2323 + _2109;
                            _2100 = _2324 + _2110;
                            if (_2112 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2108 = _2098;
                                _2109 = _2099;
                                _2110 = _2100;
                                _2111 = _2112;
                                continue;
                            }
                        }
                        frontier_phi_73_pred = _2100;
                        frontier_phi_73_pred_1 = _2099;
                        frontier_phi_73_pred_2 = _2098;
                    }
                    _1804 = frontier_phi_73_pred;
                    _1802 = frontier_phi_73_pred_1;
                    _1800 = frontier_phi_73_pred_2;
                    uint _1966 = _1965 + 1u;
                    if (_1966 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1962 = _1800;
                        _1963 = _1802;
                        _1964 = _1804;
                        _1965 = _1966;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _1804;
                frontier_phi_53_54_ladder_1 = _1802;
                frontier_phi_53_54_ladder_2 = _1800;
            }
            else
            {
                frontier_phi_53_54_ladder = _1660;
                frontier_phi_53_54_ladder_1 = _1658;
                frontier_phi_53_54_ladder_2 = _1656;
            }
            _1799 = frontier_phi_53_54_ladder_2;
            _1801 = frontier_phi_53_54_ladder_1;
            _1803 = frontier_phi_53_54_ladder;
        }
        float _1808 = isnan(1.0) ? _410 : (isnan(_410) ? 1.0 : min(_410, 1.0));
        _1560 = ((_1799 * 0.039999999105930328369140625) * _1808) + _1365;
        _1562 = ((_1801 * 0.039999999105930328369140625) * _1808) + _1367;
        _1564 = ((_1803 * 0.039999999105930328369140625) * _1808) + _1369;
    }
    else
    {
        _1560 = _1365;
        _1562 = _1367;
        _1564 = _1369;
    }
    uint _1570 = _1145 + 9u;
    uint _1571 = _1570 + uint(cbMatDynParam._m0[0u].w);
    float _2903 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _1587 = (cbInstanceData._m0[_1571].x * cbMtdParam._m0[9u].x) + ((_1560 + ((isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0))) * _903)) * cbPerFrame._m0[3u].x);
    float _1588 = (cbInstanceData._m0[_1571].y * cbMtdParam._m0[9u].y) + ((_1562 + ((isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0))) * _903)) * cbPerFrame._m0[3u].x);
    float _1589 = (cbInstanceData._m0[_1571].z * cbMtdParam._m0[9u].z) + ((_1564 + ((isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0))) * _903)) * cbPerFrame._m0[3u].x);
    float _1590 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
    float _1591 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
    float _1592 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
    float _1597 = cbInstanceData._m0[_1145 + 6u].w * (isnan(1.0) ? _2903 : (isnan(_2903) ? 1.0 : min(_2903, 1.0)));
    float _1602 = _371 / cbSceneParam._m0[86u].x;
    float _1603 = _372 / cbSceneParam._m0[86u].y;
    vec4 _1617 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1602, _1603, (log2((isnan(cbSceneParam._m0[77u].w) ? _345 : (isnan(_345) ? cbSceneParam._m0[77u].w : min(_345, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1619 = _1617.x;
    float _1620 = _1617.y;
    float _1621 = _1617.z;
    float _1622 = _1617.w;
    float _1713;
    float _1715;
    float _1717;
    float _1719;
    if (_345 > cbSceneParam._m0[78u].w)
    {
        float _1675 = isnan(_345) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _345 : min(cbSceneParam._m0[80u].w, _345));
        float _1676 = _1675 / _345;
        float _1687 = _1676 * _222;
        float _1688 = _223 * _1676;
        float _1689 = (-0.0) - _1688;
        float _1691 = _1676 * _224;
        float _1693 = (cbSceneParam._m0[77u].w * _1689) / _1675;
        float _1694 = _1693 + cbSceneParam._m0[79u].w;
        float _1695 = cbSceneParam._m0[79u].w - _1688;
        float _1701 = sqrt(((_1687 * _1687) + (_1688 * _1688)) + (_1691 * _1691));
        float _1704 = (1.0 - (cbSceneParam._m0[77u].w / _1675)) * _1701;
        float _1709 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1711 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1919;
        if (abs((_1689 - _1693) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1919 = ((((_1694 > 0.0) ? exp2(_1709 * _1694) : (2.0 - exp2(_1711 * _1694))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1704;
        }
        else
        {
            float _1845 = 1.0 / cbSceneParam._m0[80u].x;
            float _1846 = isnan(_1695) ? _1694 : (isnan(_1694) ? _1695 : max(_1694, _1695));
            float _1847 = isnan(_1695) ? _1694 : (isnan(_1694) ? _1695 : min(_1694, _1695));
            float _1856 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : min(_1846, 0.0));
            float _1857 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : min(_1847, 0.0));
            _1919 = ((abs(_1701 / _1689) * cbSceneParam._m0[80u].y) * ((((_1856 - _1857) * 2.0) - ((exp2(_1709 * (isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0)))) - exp2(_1709 * (isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))))) * _1845)) - ((exp2(_1711 * _1856) - exp2(_1711 * _1857)) * _1845))) + (_1704 * cbSceneParam._m0[80u].z);
        }
        vec4 _1921 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1602, _1603, 1.0), 0.0);
        float _1930 = exp2((_1919 * (-1.44269502162933349609375)) * (1.0 - _1921.w));
        float _1931 = log2(_1930);
        float _1947 = log2(_1622);
        _1713 = (exp2(_1947 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1931 * cbSceneParam._m0[78u].x)) * _1921.x) / cbSceneParam._m0[78u].x)) + _1619;
        _1715 = (exp2(_1947 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1931 * cbSceneParam._m0[78u].y)) * _1921.y) / cbSceneParam._m0[78u].y)) + _1620;
        _1717 = (exp2(_1947 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1931 * cbSceneParam._m0[78u].z)) * _1921.z) / cbSceneParam._m0[78u].z)) + _1621;
        _1719 = _1930 * _1622;
    }
    else
    {
        _1713 = _1619;
        _1715 = _1620;
        _1717 = _1621;
        _1719 = _1622;
    }
    bool _1957;
    vec4 _1729;
    vec4 _1752;
    float _1754;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    bool _1772;
    for (;;)
    {
        _1729 = cbMatDynParam._m0[0u];
        float _1731 = roundEven(_1729.y);
        bool _1732 = _1731 == 3.0;
        float _1734 = log2(_1719);
        float _1741 = exp2(_1734 * cbSceneParam._m0[78u].x) * _1590;
        float _1742 = exp2(_1734 * cbSceneParam._m0[78u].y) * _1591;
        float _1743 = exp2(_1734 * cbSceneParam._m0[78u].z) * _1592;
        float _1750 = _359 + (-0.5);
        _1752 = cbMtdParam._m0[1u];
        _1754 = _1752.y * _1750;
        float _1757 = (_1731 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1758 = _1757 * (_1732 ? _1741 : (_1741 + (cbSceneParam._m0[72u].w * _1713)));
        _1759 = _1757 * (_1732 ? _1742 : (_1742 + (cbSceneParam._m0[72u].w * _1715)));
        _1760 = _1757 * (_1732 ? _1743 : (_1743 + (cbSceneParam._m0[72u].w * _1717)));
        _1761 = _1750 * 0.999000012874603271484375;
        _1772 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1772)
        {
            if ((cbInstanceData._m0[_1145 + 7u].x + _1761) < 0.5)
            {
                _1957 = true;
                break;
            }
        }
        uint _1880 = _1570 + uint(_1729.w);
        if ((cbInstanceData._m0[_1880].w < 1.0) && ((cbInstanceData._m0[_1880].w + _1761) < 0.5))
        {
            _1957 = true;
            break;
        }
        if ((_1754 + _301) < _1752.x)
        {
            _1957 = true;
            break;
        }
        _1957 = false;
        break;
    }
    float _2089;
    if (_1957)
    {
        discard_state = true;
        _2089 = 0.0;
    }
    else
    {
        _2089 = _1597;
    }
    SV_Target.x = _1758;
    SV_Target.y = _1759;
    SV_Target.z = _1760;
    SV_Target.w = _2089;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _1597;
    discard_exit();
}


