#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Stealthmist_snp_0_Texture2D_0;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _603;
uint _1934;
uint _1935;
uint _1936;
uint _2152;
uint _2153;
uint _2154;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _161 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _162 = _161 * NORMAL.x;
    float _163 = _161 * NORMAL.y;
    float _164 = _161 * NORMAL.z;
    float _208 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _218 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _208);
    float _219 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _208);
    float _220 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _208);
    float _228 = cbMtdParam._m0[10u].w * cbPerFrame._m0[22u].x;
    float _235 = TEXCOORD_1.y - ((cbMtdParam._m0[11u].x * cbPerFrame._m0[22u].x) * 0.550000011920928955078125);
    float _278 = ((_235 * cbMtdParam._m0[10u].x) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w;
    float _297 = (((texture(sampler2D(M_Stealthmist_snp_0_Texture2D_0, SS_WrapLinear), vec2((((cbMtdParam._m0[11u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z - (texture(sampler2D(M_Stealthmist_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbTextureTilingScale._m0[0u].x * cbMtdParam._m0[10u].x) * ((_228 * 3.2999999523162841796875) + TEXCOORD_1.x)) + cbTextureTilingScale._m0[0u].z, ((cbTextureTilingScale._m0[0u].y * cbMtdParam._m0[10u].x) * _235) + cbTextureTilingScale._m0[0u].w)).y * 0.20000000298023223876953125)) + (texture(sampler2D(M_Stealthmist_snp_0_Texture2D_0, SS_WrapLinear), vec2(((((_228 * 6.900000095367431640625) + TEXCOORD_1.x) * cbMtdParam._m0[10u].x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, _278)).x * 0.0500000007450580596923828125)) + (texture(sampler2D(M_Stealthmist_snp_0_Texture2D_0, SS_WrapLinear), vec2(((((_228 * 16.0) + TEXCOORD_1.x) * cbMtdParam._m0[10u].x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, _278)).x * 0.100000001490116119384765625)) * TEXCOORD_1.z;
    float _307 = cbMtdParam._m0[10u].y - cbMtdParam._m0[10u].z;
    float _309 = (sqrt(((_218 * _218) + (_219 * _219)) + (_220 * _220)) - cbMtdParam._m0[10u].z) / (isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0)));
    float _2361 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _312 = _297 * (isnan(1.0) ? _2361 : (isnan(_2361) ? 1.0 : min(_2361, 1.0)));
    float _321 = inversesqrt(dot(vec3(_162, _163, _164), vec3(_162, _163, _164)));
    float _322 = _321 * _162;
    float _323 = _321 * _163;
    float _324 = _321 * _164;
    float _2372 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _325 = isnan(1.0) ? _2372 : (isnan(_2372) ? 1.0 : min(_2372, 1.0));
    float _341 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _345 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _346 = _218 * _345;
    float _347 = _219 * _345;
    float _348 = _220 * _345;
    float _354 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _355 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _376 = fma(_324, cbSceneParam._m0[5u].z, fma(_323, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _322));
    float _379 = fma(_324, cbSceneParam._m0[6u].z, fma(_323, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _322));
    float _382 = fma(_324, cbSceneParam._m0[7u].z, fma(_323, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _322));
    vec4 _391 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _354, cbSceneParam._m0[86u].y * _355));
    float _394 = _391.x * TEXCOORD_1.w;
    float _395 = dot(vec3(_322, _323, _324), vec3(_346, _347, _348));
    float _398 = _395 * 2.0;
    float _403 = (_398 * _322) - _346;
    float _404 = (_398 * _323) - _347;
    float _405 = (_398 * _324) - _348;
    float _427 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _431 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _435 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _602;
    float _604;
    float _605;
    float _606;
    float _607;
    float _608;
    float _609;
    float _610;
    float _611;
    float _612;
    float _613;
    float _614;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _462 = fma(_435, cbModelParam._m0[26u].z, fma(_431, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _427));
        float _466 = fma(_435, cbModelParam._m0[27u].z, fma(_431, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _427));
        float _470 = fma(_435, cbModelParam._m0[28u].z, fma(_431, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _427));
        float _495 = _427 + _322;
        float _496 = _431 + _323;
        float _497 = _435 + _324;
        float _507 = fma(_497, cbModelParam._m0[26u].z, fma(_496, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _495)) - _462;
        float _508 = fma(_497, cbModelParam._m0[27u].z, fma(_496, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _495)) - _466;
        float _509 = fma(_497, cbModelParam._m0[28u].z, fma(_496, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _495)) - _470;
        float _513 = inversesqrt(dot(vec3(_507, _508, _509), vec3(_507, _508, _509)));
        float _526 = ((_513 * _507) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_462 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _527 = ((_513 * _508) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_466 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _528 = ((_513 * _509) / cbModelParam._m0[34u].z) + ((((((_470 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _531 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_526, _527, _528), 0.0);
        vec4 _538 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_526, _527, _528), 0.0);
        vec4 _545 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_526, _527, _528), 0.0);
        vec4 _552 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_526, _527, _528), 0.0);
        float _565 = exp2((_531.w + (-0.5)) * 20.0) * 2.0;
        float _575 = exp2((_538.w + (-0.5)) * 20.0) * 2.0;
        float _585 = exp2((_545.w + (-0.5)) * 20.0) * 2.0;
        float _595 = exp2((_552.w + (-0.5)) * 20.0) * 2.0;
        float _596 = _595 * (_552.x + (-0.5));
        float _597 = _595 * (_552.y + (-0.5));
        float _598 = _595 * (_552.z + (-0.5));
        _602 = _565 * (_531.z + (-0.5));
        _604 = _565 * (_531.y + (-0.5));
        _605 = _565 * (_531.x + (-0.5));
        _606 = _575 * (_538.z + (-0.5));
        _607 = _575 * (_538.y + (-0.5));
        _608 = _575 * (_538.x + (-0.5));
        _609 = _585 * (_545.z + (-0.5));
        _610 = _585 * (_545.y + (-0.5));
        _611 = _585 * (_545.x + (-0.5));
        _612 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
        _613 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
        _614 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    }
    else
    {
        _602 = _603;
        _604 = _603;
        _605 = _603;
        _606 = _603;
        _607 = _603;
        _608 = _603;
        _609 = _603;
        _610 = _603;
        _611 = _603;
        _612 = _603;
        _613 = _603;
        _614 = _603;
    }
    float _776;
    float _777;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    float _786;
    float _787;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _640 = fma(_435, cbModelParam._m0[30u].z, fma(_431, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _427));
        float _644 = fma(_435, cbModelParam._m0[31u].z, fma(_431, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _427));
        float _648 = fma(_435, cbModelParam._m0[32u].z, fma(_431, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _427));
        float _671 = _427 + _322;
        float _672 = _431 + _323;
        float _673 = _435 + _324;
        float _683 = fma(_673, cbModelParam._m0[30u].z, fma(_672, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _671)) - _640;
        float _684 = fma(_673, cbModelParam._m0[31u].z, fma(_672, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _671)) - _644;
        float _685 = fma(_673, cbModelParam._m0[32u].z, fma(_672, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _671)) - _648;
        float _689 = inversesqrt(dot(vec3(_683, _684, _685), vec3(_683, _684, _685)));
        float _702 = ((_689 * _683) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_640 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _703 = ((_689 * _684) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_644 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _704 = ((_689 * _685) / cbModelParam._m0[35u].z) + ((((((_648 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _706 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_702, _703, _704), 0.0);
        vec4 _713 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_702, _703, _704), 0.0);
        vec4 _720 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_702, _703, _704), 0.0);
        vec4 _727 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_702, _703, _704), 0.0);
        float _739 = exp2((_706.w + (-0.5)) * 20.0) * 2.0;
        float _749 = exp2((_713.w + (-0.5)) * 20.0) * 2.0;
        float _759 = exp2((_720.w + (-0.5)) * 20.0) * 2.0;
        float _769 = exp2((_727.w + (-0.5)) * 20.0) * 2.0;
        float _770 = _769 * (_727.x + (-0.5));
        float _771 = _769 * (_727.y + (-0.5));
        float _772 = _769 * (_727.z + (-0.5));
        _776 = _739 * (_706.z + (-0.5));
        _777 = _739 * (_706.y + (-0.5));
        _778 = _739 * (_706.x + (-0.5));
        _779 = _749 * (_713.z + (-0.5));
        _780 = _749 * (_713.y + (-0.5));
        _781 = _749 * (_713.x + (-0.5));
        _782 = _759 * (_720.z + (-0.5));
        _783 = _759 * (_720.y + (-0.5));
        _784 = _759 * (_720.x + (-0.5));
        _785 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        _786 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        _787 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    }
    else
    {
        _776 = _603;
        _777 = _603;
        _778 = _603;
        _779 = _603;
        _780 = _603;
        _781 = _603;
        _782 = _603;
        _783 = _603;
        _784 = _603;
        _785 = _603;
        _786 = _603;
        _787 = _603;
    }
    float _802 = _403 * 0.5;
    float _803 = _404 * 0.5;
    float _804 = _405 * 0.5;
    float _805 = dot(vec4(_802, _803, _804, 1.0), vec4(_778, _781, _784, _787));
    float _808 = dot(vec4(_802, _803, _804, 1.0), vec4(_777, _780, _783, _786));
    float _811 = dot(vec4(_802, _803, _804, 1.0), vec4(_776, _779, _782, _785));
    float _846;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _818 = dot(vec4(_802, _803, _804, 1.0), vec4(_602, _606, _609, _612));
        float _822 = dot(vec4(_802, _803, _804, 1.0), vec4(_604, _607, _610, _613));
        float _826 = dot(vec4(_802, _803, _804, 1.0), vec4(_605, _608, _611, _614));
        float _833 = dot(vec4(cbModelParam._m0[39u]), vec4(_802, _803, _804, 1.0));
        _846 = dot(vec3(isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0)), isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0)), isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_833) ? 0.0 : (isnan(0.0) ? _833 : max(0.0, _833))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _846 = 1.0;
    }
    float _857;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _848 = dot(vec4(cbModelParam._m0[40u]), vec4(_802, _803, _804, 1.0));
        _857 = dot(vec3(isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0)), isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0)), isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_848) ? 0.0 : (isnan(0.0) ? _848 : max(0.0, _848))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _857 = 1.0;
    }
    float _861 = (_857 * cbModelParam._m0[1u].x) + (_846 * (1.0 - cbModelParam._m0[1u].x));
    float _867 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _950;
    float _952;
    float _954;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _917 = fma(_435, cbModelParam._m0[13u].z, fma(_431, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _427)) + cbModelParam._m0[13u].w;
        float _921 = fma(_435, cbModelParam._m0[14u].z, fma(_431, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _427)) + cbModelParam._m0[14u].w;
        float _925 = fma(_435, cbModelParam._m0[15u].z, fma(_431, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _427)) + cbModelParam._m0[15u].w;
        float _928 = fma(_405, cbModelParam._m0[13u].z, fma(_404, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _403));
        float _931 = fma(_405, cbModelParam._m0[14u].z, fma(_404, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _403));
        float _934 = fma(_405, cbModelParam._m0[15u].z, fma(_404, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _403));
        float _960;
        if (_928 > 0.0)
        {
            _960 = abs((1.0 - _917) / _928);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_928 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_917 + 1.0) / _928);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _960 = frontier_phi_14_12_ladder;
        }
        float _1242;
        if (_931 > 0.0)
        {
            _1242 = abs((1.0 - _921) / _931);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_931 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_921 + 1.0) / _931);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1242 = frontier_phi_23_19_ladder;
        }
        float _1386;
        if (_934 > 0.0)
        {
            _1386 = abs((1.0 - _925) / _934);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_934 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_925 + 1.0) / _934);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1386 = frontier_phi_35_30_ladder;
        }
        float _1388 = isnan(_1242) ? _960 : (isnan(_960) ? _1242 : min(_960, _1242));
        float _1389 = isnan(_1386) ? _1388 : (isnan(_1388) ? _1386 : min(_1388, _1386));
        float _1393 = (_1389 * _928) + _917;
        float _1394 = (_1389 * _931) + _921;
        float _1395 = (_1389 * _934) + _925;
        float _1396 = _1389 * 9.9999997473787516355514526367188e-05;
        float _1398 = (-1.0) - _1396;
        float _1400 = _1396 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1395 > _1400) || ((_1395 < _1398) || ((_1394 > _1400) || ((_1394 < _1398) || ((_1393 < _1398) || (_1393 > _1400))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1605 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1395, cbModelParam._m0[9u].z, fma(_1394, cbModelParam._m0[9u].y, _1393 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1395, cbModelParam._m0[10u].z, fma(_1394, cbModelParam._m0[10u].y, _1393 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1395, cbModelParam._m0[11u].z, fma(_1394, cbModelParam._m0[11u].y, _1393 * cbModelParam._m0[11u].x))), _867);
            frontier_phi_13_35_ladder = _1605.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1605.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1605.x * cbModelParam._m0[1u].y;
        }
        _950 = frontier_phi_13_35_ladder_2;
        _952 = frontier_phi_13_35_ladder_1;
        _954 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _938 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_403, _404, _405), _867);
        _950 = _938.x * cbModelParam._m0[1u].y;
        _952 = _938.y * cbModelParam._m0[1u].y;
        _954 = _938.z * cbModelParam._m0[1u].y;
    }
    float _957 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1049;
    float _1051;
    float _1053;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1013 = fma(_435, cbModelParam._m0[21u].z, fma(_431, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _427)) + cbModelParam._m0[21u].w;
        float _1017 = fma(_435, cbModelParam._m0[22u].z, fma(_431, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _427)) + cbModelParam._m0[22u].w;
        float _1021 = fma(_435, cbModelParam._m0[23u].z, fma(_431, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _427)) + cbModelParam._m0[23u].w;
        float _1024 = fma(_405, cbModelParam._m0[21u].z, fma(_404, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _403));
        float _1027 = fma(_405, cbModelParam._m0[22u].z, fma(_404, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _403));
        float _1030 = fma(_405, cbModelParam._m0[23u].z, fma(_404, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _403));
        float _1247;
        if (_1024 > 0.0)
        {
            _1247 = abs((1.0 - _1013) / _1024);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1024 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1013 + 1.0) / _1024);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1247 = frontier_phi_25_21_ladder;
        }
        float _1413;
        if (_1027 > 0.0)
        {
            _1413 = abs((1.0 - _1017) / _1027);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1027 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1017 + 1.0) / _1027);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1413 = frontier_phi_37_32_ladder;
        }
        float _1722;
        if (_1030 > 0.0)
        {
            _1722 = abs((1.0 - _1021) / _1030);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1030 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1021 + 1.0) / _1030);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _1722 = frontier_phi_48_43_ladder;
        }
        float _1724 = isnan(_1413) ? _1247 : (isnan(_1247) ? _1413 : min(_1247, _1413));
        float _1725 = isnan(_1722) ? _1724 : (isnan(_1724) ? _1722 : min(_1724, _1722));
        float _1729 = (_1725 * _1024) + _1013;
        float _1730 = (_1725 * _1027) + _1017;
        float _1731 = (_1725 * _1030) + _1021;
        float _1732 = _1725 * 9.9999997473787516355514526367188e-05;
        float _1733 = (-1.0) - _1732;
        float _1735 = _1732 + 1.0;
        float frontier_phi_22_48_ladder;
        float frontier_phi_22_48_ladder_1;
        float frontier_phi_22_48_ladder_2;
        if ((_1731 > _1735) || ((_1731 < _1733) || ((_1730 > _1735) || ((_1730 < _1733) || ((_1729 < _1733) || (_1729 > _1735))))))
        {
            frontier_phi_22_48_ladder = 0.0;
            frontier_phi_22_48_ladder_1 = 0.0;
            frontier_phi_22_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1837 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1731, cbModelParam._m0[17u].z, fma(_1730, cbModelParam._m0[17u].y, _1729 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1731, cbModelParam._m0[18u].z, fma(_1730, cbModelParam._m0[18u].y, _1729 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1731, cbModelParam._m0[19u].z, fma(_1730, cbModelParam._m0[19u].y, _1729 * cbModelParam._m0[19u].x))), _957);
            frontier_phi_22_48_ladder = _1837.z * cbModelParam._m0[1u].z;
            frontier_phi_22_48_ladder_1 = _1837.y * cbModelParam._m0[1u].z;
            frontier_phi_22_48_ladder_2 = _1837.x * cbModelParam._m0[1u].z;
        }
        _1049 = frontier_phi_22_48_ladder_2;
        _1051 = frontier_phi_22_48_ladder_1;
        _1053 = frontier_phi_22_48_ladder;
    }
    else
    {
        vec4 _1033 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_403, _404, _405), _957);
        _1049 = _1033.x * cbModelParam._m0[1u].z;
        _1051 = _1033.y * cbModelParam._m0[1u].z;
        _1053 = _1033.z * cbModelParam._m0[1u].z;
    }
    float _1065 = _394 * 0.01200000010430812835693359375;
    float _1067 = _1065 * ((cbModelParam._m0[1u].w * (_1049 - _950)) + _950);
    float _1068 = _1065 * ((cbModelParam._m0[1u].w * (_1051 - _952)) + _952);
    float _1069 = _1065 * ((cbModelParam._m0[1u].w * (_1053 - _954)) + _954);
    float _1090 = fma(_1069, cbSceneParam._m0[89u].z, fma(_1068, cbSceneParam._m0[89u].y, _1067 * cbSceneParam._m0[89u].x));
    float _1093 = fma(_1069, cbSceneParam._m0[90u].z, fma(_1068, cbSceneParam._m0[90u].y, _1067 * cbSceneParam._m0[90u].x));
    float _1096 = fma(_1069, cbSceneParam._m0[91u].z, fma(_1068, cbSceneParam._m0[91u].y, _1067 * cbSceneParam._m0[91u].x));
    uint _1103 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1107 = floatBitsToUint(cbInstanceData._m0[_1103 + 5u]);
    uint _1109 = _1107.x * 14u;
    uint _1110 = _1109 + 13u;
    float _1116 = _394 + (-1.0);
    float _1121 = (cbLight._m0[_1110].x * _1116) + 1.0;
    float _1122 = (cbLight._m0[_1110].y * _1116) + 1.0;
    float _1123 = (cbLight._m0[_1110].w * _1116) + 1.0;
    uint _1124 = _1109 + 8u;
    float _1135 = cbLight._m0[_1109].x + _346;
    float _1136 = cbLight._m0[_1109].y + _347;
    float _1137 = cbLight._m0[_1109].z + _348;
    float _1141 = inversesqrt(dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137)));
    float _1145 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_1109].xyz));
    float _2498 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
    float _1148 = isnan(1.0) ? _2498 : (isnan(_2498) ? 1.0 : min(_2498, 1.0));
    float _2509 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _1149 = isnan(1.0) ? _2509 : (isnan(_2509) ? 1.0 : min(_2509, 1.0));
    float _1150 = dot(vec3(cbLight._m0[_1109].xyz), vec3(_1135 * _1141, _1136 * _1141, _1137 * _1141));
    float _2520 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
    float _1161 = (exp2(log2(1.0 - (isnan(1.0) ? _2520 : (isnan(_2520) ? 1.0 : min(_2520, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1167 = (0.5 / ((_1148 + 9.9999999392252902907785028219223e-09) + _1149)) * _1148;
    float _2531 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
    float _1169 = (isnan(1.0) ? _2531 : (isnan(_2531) ? 1.0 : min(_2531, 1.0))) * 0.31831014156341552734375;
    float _1171 = isnan(1.0) ? _1121 : (isnan(_1121) ? 1.0 : min(_1121, 1.0));
    uint _1181 = _1109 + 9u;
    uint _1187 = _1109 | 1u;
    float _1193 = cbLight._m0[_1187].x + _346;
    float _1194 = cbLight._m0[_1187].y + _347;
    float _1195 = cbLight._m0[_1187].z + _348;
    float _1199 = inversesqrt(dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195)));
    float _1203 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_1187].xyz));
    float _2547 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
    float _1206 = isnan(1.0) ? _2547 : (isnan(_2547) ? 1.0 : min(_2547, 1.0));
    float _1207 = dot(vec3(cbLight._m0[_1187].xyz), vec3(_1193 * _1199, _1194 * _1199, _1195 * _1199));
    float _2558 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
    float _1216 = (exp2(log2(1.0 - (isnan(1.0) ? _2558 : (isnan(_2558) ? 1.0 : min(_2558, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1220 = (0.5 / ((_1206 + 9.9999999392252902907785028219223e-09) + _1149)) * _1206;
    float _2569 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
    float _1222 = (isnan(1.0) ? _2569 : (isnan(_2569) ? 1.0 : min(_2569, 1.0))) * 0.31831014156341552734375;
    float _1223 = isnan(1.0) ? _1122 : (isnan(_1122) ? 1.0 : min(_1122, 1.0));
    float _1233 = (((_1216 * cbLight._m0[_1181].x) * _1222) * _1223) + (((_1161 * cbLight._m0[_1124].x) * _1169) * _1171);
    float _1234 = (((_1216 * cbLight._m0[_1181].y) * _1222) * _1223) + (((_1161 * cbLight._m0[_1124].y) * _1169) * _1171);
    float _1235 = (((_1216 * cbLight._m0[_1181].z) * _1222) * _1223) + (((_1161 * cbLight._m0[_1124].z) * _1169) * _1171);
    uvec4 _1239 = floatBitsToUint(cbLight._m0[_1109 + 12u]);
    float _1252;
    float _1254;
    float _1256;
    if (_1239.x == 0u)
    {
        _1252 = _1233;
        _1254 = _1234;
        _1256 = _1235;
    }
    else
    {
        float _1262 = (cbLight._m0[_1110].z * _1116) + 1.0;
        uint _1263 = _1109 + 10u;
        uint _1269 = _1109 + 2u;
        float _1275 = cbLight._m0[_1269].x + _346;
        float _1276 = cbLight._m0[_1269].y + _347;
        float _1277 = cbLight._m0[_1269].z + _348;
        float _1281 = inversesqrt(dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277)));
        float _1285 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_1269].xyz));
        float _2585 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1288 = isnan(1.0) ? _2585 : (isnan(_2585) ? 1.0 : min(_2585, 1.0));
        float _1289 = dot(vec3(cbLight._m0[_1269].xyz), vec3(_1275 * _1281, _1276 * _1281, _1277 * _1281));
        float _2596 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1298 = (exp2(log2(1.0 - (isnan(1.0) ? _2596 : (isnan(_2596) ? 1.0 : min(_2596, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1302 = (0.5 / ((_1288 + 9.9999999392252902907785028219223e-09) + _1149)) * _1288;
        float _2607 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1304 = (isnan(1.0) ? _2607 : (isnan(_2607) ? 1.0 : min(_2607, 1.0))) * 0.31831014156341552734375;
        float _1305 = isnan(1.0) ? _1262 : (isnan(_1262) ? 1.0 : min(_1262, 1.0));
        _1252 = (((_1298 * cbLight._m0[_1263].x) * _1304) * _1305) + _1233;
        _1254 = (((_1298 * cbLight._m0[_1263].y) * _1304) * _1305) + _1234;
        _1256 = (((_1298 * cbLight._m0[_1263].z) * _1304) * _1305) + _1235;
    }
    float _1323;
    float _1325;
    float _1327;
    if (_1239.y == 0u)
    {
        _1323 = _1252;
        _1325 = _1254;
        _1327 = _1256;
    }
    else
    {
        uint _1334 = _1109 + 11u;
        uint _1340 = _1109 + 3u;
        float _1346 = cbLight._m0[_1340].x + _346;
        float _1347 = cbLight._m0[_1340].y + _347;
        float _1348 = cbLight._m0[_1340].z + _348;
        float _1352 = inversesqrt(dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348)));
        float _1356 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_1340].xyz));
        float _2623 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1359 = isnan(1.0) ? _2623 : (isnan(_2623) ? 1.0 : min(_2623, 1.0));
        float _1360 = dot(vec3(cbLight._m0[_1340].xyz), vec3(_1346 * _1352, _1347 * _1352, _1348 * _1352));
        float _2634 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1369 = (exp2(log2(1.0 - (isnan(1.0) ? _2634 : (isnan(_2634) ? 1.0 : min(_2634, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1373 = (0.5 / ((_1359 + 9.9999999392252902907785028219223e-09) + _1149)) * _1359;
        float _2645 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1375 = (isnan(1.0) ? _2645 : (isnan(_2645) ? 1.0 : min(_2645, 1.0))) * 0.31831014156341552734375;
        float _1376 = isnan(1.0) ? _1123 : (isnan(_1123) ? 1.0 : min(_1123, 1.0));
        _1323 = (((_1369 * cbLight._m0[_1334].x) * _1375) * _1376) + _1252;
        _1325 = (((_1369 * cbLight._m0[_1334].y) * _1375) * _1376) + _1254;
        _1327 = (((_1369 * cbLight._m0[_1334].z) * _1375) * _1376) + _1256;
    }
    float _1518;
    float _1520;
    float _1522;
    if (_1107.y == 0u)
    {
        float _1457 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1458 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1457;
        float _1459 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1457;
        float _1460 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1457;
        uvec4 _1472 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1473 = _1472.x;
        uint _1484 = uint((float(_1472.y) * floor(float(uint(cbSceneParam._m0[85u].y * _355) / _1473))) + floor(float(uint(cbSceneParam._m0[85u].x * _354) / _1473)));
        float _1494 = (log2(_1460 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1495 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        uint _1498 = uint(isnan(14.0) ? _1495 : (isnan(_1495) ? 14.0 : min(_1495, 14.0)));
        uvec4 _1503 = texelFetch(g_lightClusterGridBuffer, int(((_1498 << 2u) + (_1484 << 6u)) >> 2u));
        uint _1504 = _1503.x;
        uint _1505 = _1472.z;
        float _1614;
        float _1616;
        float _1618;
        if (((((1u << ((_1505 >> 4u) & 15u)) + 4294967295u) & _1504) == 0u) || ((_1505 & 240u) == 0u))
        {
            _1614 = 0.0;
            _1616 = 0.0;
            _1618 = 0.0;
        }
        else
        {
            float _1615;
            float _1617;
            float _1619;
            float _1768 = 0.0;
            float _1769 = 0.0;
            float _1770 = 0.0;
            uint _1771 = 0u;
            uint _1780;
            bool _1781;
            for (;;)
            {
                _1780 = texelFetch(g_lightClassification, int((((_1498 << 5u) + (_1484 << 9u)) + (_1771 << 2u)) >> 2u)).x;
                _1781 = _1780 == 0u;
                float frontier_phi_57_pred;
                float frontier_phi_57_pred_1;
                float frontier_phi_57_pred_2;
                if (_1781)
                {
                    frontier_phi_57_pred = _1770;
                    frontier_phi_57_pred_1 = _1769;
                    frontier_phi_57_pred_2 = _1768;
                }
                else
                {
                    float _1904;
                    float _1905;
                    float _1906;
                    uint _1907;
                    _1904 = _1768;
                    _1905 = _1769;
                    _1906 = _1770;
                    _1907 = _1780;
                    float _1842;
                    float _1843;
                    float _1844;
                    for (;;)
                    {
                        uint _1911 = uint(findLSB(_1907)) + (_1771 << 5u);
                        uint _1908 = (_1907 + 4294967295u) & _1907;
                        uint _1913 = _1911 * 48u;
                        vec4 _1927 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1913)).x, texelFetch(g_PointLightRenderingBuffer, int(_1913 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1913 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1913 + 3u)).x));
                        uint _1944 = (_1911 * 48u) + 8u;
                        vec3 _1955 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1944)).x, texelFetch(g_PointLightRenderingBuffer, int(_1944 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1944 + 2u)).x));
                        float _1959 = _1927.x - _1458;
                        float _1960 = _1927.y - _1459;
                        float _1961 = _1927.z - _1460;
                        float _1962 = dot(vec3(_1959, _1960, _1961), vec3(_1959, _1960, _1961));
                        float _1965 = inversesqrt(_1962);
                        float _1974 = 1.0 - (_1962 * _1927.w);
                        float _2671 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
                        float _1976 = sqrt(_1962) * uintBitsToFloat(uvec4(_1934, _1935, _1936, texelFetch(g_PointLightRenderingBuffer, int(((_1911 * 48u) + 4u) + 3u)).x)).w;
                        float _1979 = 1.39999997615814208984375 / (_1976 + 1.39999997615814208984375);
                        float _1980 = _1979 * _1979;
                        float _1983 = ((1.0 - _1980) * dot(vec3(_376, _379, _382), vec3(_1965 * _1959, _1965 * _1960, _1965 * _1961))) + _1980;
                        float _1985 = (-0.0) - _1458;
                        float _1986 = (-0.0) - _1459;
                        float _1987 = (-0.0) - _1460;
                        float _1991 = inversesqrt(dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987)));
                        float _1995 = dot(vec3(_376, _379, _382), vec3(_1991 * _1985, _1991 * _1986, _1991 * _1987));
                        float _2682 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
                        float _2693 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
                        float _1999 = isnan(1.0) ? _2693 : (isnan(_2693) ? 1.0 : min(_2693, 1.0));
                        float _2003 = (0.5 / (((isnan(1.0) ? _2682 : (isnan(_2682) ? 1.0 : min(_2682, 1.0))) + 9.9999999392252902907785028219223e-09) + _1999)) * _1999;
                        float _2704 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
                        float _2012 = (((isnan(1.0) ? _2704 : (isnan(_2704) ? 1.0 : min(_2704, 1.0))) * 3.1415927410125732421875) / (((_1976 * _1976) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2671 : (isnan(_2671) ? 1.0 : min(_2671, 1.0)));
                        _1842 = (_2012 * _1955.x) + _1904;
                        _1843 = (_2012 * _1955.y) + _1905;
                        _1844 = (_2012 * _1955.z) + _1906;
                        if (_1908 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1904 = _1842;
                            _1905 = _1843;
                            _1906 = _1844;
                            _1907 = _1908;
                        }
                    }
                    frontier_phi_57_pred = _1844;
                    frontier_phi_57_pred_1 = _1843;
                    frontier_phi_57_pred_2 = _1842;
                }
                _1619 = frontier_phi_57_pred;
                _1617 = frontier_phi_57_pred_1;
                _1615 = frontier_phi_57_pred_2;
                uint _1772 = _1771 + 1u;
                if (_1772 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1768 = _1615;
                    _1769 = _1617;
                    _1770 = _1619;
                    _1771 = _1772;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1614 = _1615;
            _1616 = _1617;
            _1618 = _1619;
        }
        uvec4 _1622 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1623 = _1622.z;
        uint _1625 = (_1623 >> 8u) & 15u;
        float _1748;
        float _1750;
        float _1752;
        if (((4294967295u << _1625) & _1504) == 0u)
        {
            _1748 = _1614;
            _1750 = _1616;
            _1752 = _1618;
        }
        else
        {
            float _1764 = inversesqrt(dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460)));
            float frontier_phi_50_51_ladder;
            float frontier_phi_50_51_ladder_1;
            float frontier_phi_50_51_ladder_2;
            if (_1625 < ((_1623 >> 12u) & 15u))
            {
                float _1749;
                float _1751;
                float _1753;
                float _1890 = _1614;
                float _1891 = _1616;
                float _1892 = _1618;
                uint _1893 = _1625;
                uint _1902;
                bool _1903;
                for (;;)
                {
                    _1902 = texelFetch(g_lightClassification, int((((_1498 << 5u) + (_1484 << 9u)) + (_1893 << 2u)) >> 2u)).x;
                    _1903 = _1902 == 0u;
                    float frontier_phi_63_pred;
                    float frontier_phi_63_pred_1;
                    float frontier_phi_63_pred_2;
                    if (_1903)
                    {
                        frontier_phi_63_pred = _1892;
                        frontier_phi_63_pred_1 = _1891;
                        frontier_phi_63_pred_2 = _1890;
                    }
                    else
                    {
                        float _2017;
                        float _2018;
                        float _2019;
                        float _2241;
                        float _2242;
                        float _2243;
                        float _2027 = _1890;
                        float _2028 = _1891;
                        float _2029 = _1892;
                        uint _2030 = _1902;
                        uint _2031;
                        uint _2041;
                        vec4 _2056;
                        float _2057;
                        vec3 _2069;
                        vec4 _2085;
                        vec4 _2101;
                        float _2148;
                        bool _2149;
                        for (;;)
                        {
                            _2041 = ((_1893 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2030));
                            _2031 = (_2030 + 4294967295u) & _2030;
                            uint _2043 = _2041 * 40u;
                            _2056 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2043)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2043 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2043 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2043 + 3u)).x));
                            _2057 = _2056.w;
                            uint _2059 = (_2041 * 40u) + 8u;
                            _2069 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2059)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2059 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2059 + 2u)).x));
                            uint _2072 = (_2041 * 40u) + 16u;
                            _2085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2072 + 3u)).x));
                            uint _2088 = (_2041 * 40u) + 20u;
                            _2101 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2088 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2088 + 3u)).x));
                            uint _2104 = (_2041 * 40u) + 24u;
                            vec4 _2117 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2104 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2104 + 3u)).x));
                            uint _2123 = (_2041 * 40u) + 28u;
                            vec4 _2136 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2123 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2123 + 3u)).x));
                            _2148 = fma(_1460, _2136.z, fma(_1459, _2136.y, _2136.x * _1458)) + _2136.w;
                            _2149 = !((fma(_1460, _2117.z, fma(_1459, _2117.y, _2117.x * _1458)) + _2117.w) <= 0.0);
                            float frontier_phi_69_pred;
                            float frontier_phi_69_pred_1;
                            float frontier_phi_69_pred_2;
                            if (_2149)
                            {
                                float _2183 = _2056.x - _1458;
                                float _2184 = _2056.y - _1459;
                                float _2185 = _2056.z - _1460;
                                float _2186 = dot(vec3(_2183, _2184, _2185), vec3(_2183, _2184, _2185));
                                float _2189 = inversesqrt(_2186);
                                float _2196 = 1.0 - (_2186 / (_2057 * _2057));
                                float _2715 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
                                float _2198 = sqrt(_2186) * uintBitsToFloat(uvec4(_2152, _2153, _2154, texelFetch(g_SpotLightRenderingBuffer, int(((_2041 * 40u) + 4u) + 3u)).x)).w;
                                float _2200 = 1.39999997615814208984375 / (_2198 + 1.39999997615814208984375);
                                float _2201 = _2200 * _2200;
                                float _2204 = (fma(_1460, _2085.z, fma(_1459, _2085.y, _2085.x * _1458)) + _2085.w) / _2148;
                                float _2205 = (fma(_1460, _2101.z, fma(_1459, _2101.y, _2101.x * _1458)) + _2101.w) / _2148;
                                float _2209 = 1.0 - dot(vec2(_2204, _2205), vec2(_2204, _2205));
                                float _2726 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
                                float _2217 = dot(vec3(_376, _379, _382), vec3((-0.0) - (_1458 * _1764), (-0.0) - (_1459 * _1764), (-0.0) - (_1460 * _1764)));
                                float _2737 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
                                float _2225 = ((1.0 - _2201) * dot(vec3(_376, _379, _382), vec3(_2189 * _2183, _2189 * _2184, _2189 * _2185))) + _2201;
                                float _2748 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
                                float _2226 = isnan(1.0) ? _2748 : (isnan(_2748) ? 1.0 : min(_2748, 1.0));
                                float _2230 = (0.5 / (((isnan(1.0) ? _2737 : (isnan(_2737) ? 1.0 : min(_2737, 1.0))) + 9.9999999392252902907785028219223e-09) + _2226)) * _2226;
                                float _2759 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
                                float _2237 = ((isnan(1.0) ? _2726 : (isnan(_2726) ? 1.0 : min(_2726, 1.0))) * (isnan(1.0) ? _2715 : (isnan(_2715) ? 1.0 : min(_2715, 1.0)))) * (((isnan(1.0) ? _2759 : (isnan(_2759) ? 1.0 : min(_2759, 1.0))) * 3.1415927410125732421875) / (((_2198 * _2198) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_69_pred = _2237 * _2069.x;
                                frontier_phi_69_pred_1 = _2237 * _2069.z;
                                frontier_phi_69_pred_2 = _2237 * _2069.y;
                            }
                            else
                            {
                                frontier_phi_69_pred = 0.0;
                                frontier_phi_69_pred_1 = 0.0;
                                frontier_phi_69_pred_2 = 0.0;
                            }
                            _2241 = frontier_phi_69_pred;
                            _2243 = frontier_phi_69_pred_1;
                            _2242 = frontier_phi_69_pred_2;
                            _2017 = _2241 + _2027;
                            _2018 = _2242 + _2028;
                            _2019 = _2243 + _2029;
                            if (_2031 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2027 = _2017;
                                _2028 = _2018;
                                _2029 = _2019;
                                _2030 = _2031;
                                continue;
                            }
                        }
                        frontier_phi_63_pred = _2019;
                        frontier_phi_63_pred_1 = _2018;
                        frontier_phi_63_pred_2 = _2017;
                    }
                    _1753 = frontier_phi_63_pred;
                    _1751 = frontier_phi_63_pred_1;
                    _1749 = frontier_phi_63_pred_2;
                    uint _1894 = _1893 + 1u;
                    if (_1894 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1890 = _1749;
                        _1891 = _1751;
                        _1892 = _1753;
                        _1893 = _1894;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_50_51_ladder = _1751;
                frontier_phi_50_51_ladder_1 = _1749;
                frontier_phi_50_51_ladder_2 = _1753;
            }
            else
            {
                frontier_phi_50_51_ladder = _1616;
                frontier_phi_50_51_ladder_1 = _1614;
                frontier_phi_50_51_ladder_2 = _1618;
            }
            _1748 = frontier_phi_50_51_ladder_1;
            _1750 = frontier_phi_50_51_ladder;
            _1752 = frontier_phi_50_51_ladder_2;
        }
        float _1757 = isnan(1.0) ? _394 : (isnan(_394) ? 1.0 : min(_394, 1.0));
        _1518 = ((_1748 * 0.039999999105930328369140625) * _1757) + _1323;
        _1520 = ((_1750 * 0.039999999105930328369140625) * _1757) + _1325;
        _1522 = ((_1752 * 0.039999999105930328369140625) * _1757) + _1327;
    }
    else
    {
        _1518 = _1323;
        _1520 = _1325;
        _1522 = _1327;
    }
    uint _1529 = (_1103 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _2775 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _1545 = (cbInstanceData._m0[_1529].x * cbMtdParam._m0[9u].x) + ((_1518 + ((isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0))) * _861)) * cbPerFrame._m0[3u].x);
    float _1546 = (cbInstanceData._m0[_1529].y * cbMtdParam._m0[9u].y) + ((_1520 + ((isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0))) * _861)) * cbPerFrame._m0[3u].x);
    float _1547 = (cbInstanceData._m0[_1529].z * cbMtdParam._m0[9u].z) + ((_1522 + ((isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0))) * _861)) * cbPerFrame._m0[3u].x);
    float _1555 = cbInstanceData._m0[_1103 + 6u].w * (isnan(1.0) ? _2775 : (isnan(_2775) ? 1.0 : min(_2775, 1.0)));
    float _1560 = _354 / cbSceneParam._m0[86u].x;
    float _1561 = _355 / cbSceneParam._m0[86u].y;
    vec4 _1575 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1560, _1561, (log2((isnan(cbSceneParam._m0[77u].w) ? _341 : (isnan(_341) ? cbSceneParam._m0[77u].w : min(_341, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1577 = _1575.x;
    float _1578 = _1575.y;
    float _1579 = _1575.z;
    float _1580 = _1575.w;
    float _1671;
    float _1673;
    float _1675;
    float _1677;
    if (_341 > cbSceneParam._m0[78u].w)
    {
        float _1633 = isnan(_341) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _341 : min(cbSceneParam._m0[80u].w, _341));
        float _1634 = _1633 / _341;
        float _1645 = _1634 * _218;
        float _1646 = _219 * _1634;
        float _1647 = (-0.0) - _1646;
        float _1649 = _1634 * _220;
        float _1651 = (cbSceneParam._m0[77u].w * _1647) / _1633;
        float _1652 = _1651 + cbSceneParam._m0[79u].w;
        float _1653 = cbSceneParam._m0[79u].w - _1646;
        float _1659 = sqrt(((_1645 * _1645) + (_1646 * _1646)) + (_1649 * _1649));
        float _1662 = (1.0 - (cbSceneParam._m0[77u].w / _1633)) * _1659;
        float _1667 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1669 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1852;
        if (abs((_1647 - _1651) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1852 = ((((_1652 > 0.0) ? exp2(_1667 * _1652) : (2.0 - exp2(_1669 * _1652))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1662;
        }
        else
        {
            float _1794 = 1.0 / cbSceneParam._m0[80u].x;
            float _1795 = isnan(_1653) ? _1652 : (isnan(_1652) ? _1653 : max(_1652, _1653));
            float _1796 = isnan(_1653) ? _1652 : (isnan(_1652) ? _1653 : min(_1652, _1653));
            float _1805 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : min(_1795, 0.0));
            float _1806 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : min(_1796, 0.0));
            _1852 = ((abs(_1659 / _1647) * cbSceneParam._m0[80u].y) * ((((_1805 - _1806) * 2.0) - ((exp2(_1667 * (isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0)))) - exp2(_1667 * (isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))))) * _1794)) - ((exp2(_1669 * _1805) - exp2(_1669 * _1806)) * _1794))) + (_1662 * cbSceneParam._m0[80u].z);
        }
        vec4 _1854 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1560, _1561, 1.0), 0.0);
        float _1863 = exp2((_1852 * (-1.44269502162933349609375)) * (1.0 - _1854.w));
        float _1864 = log2(_1863);
        float _1880 = log2(_1580);
        _1671 = (exp2(_1880 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1864 * cbSceneParam._m0[78u].x)) * _1854.x) / cbSceneParam._m0[78u].x)) + _1577;
        _1673 = (exp2(_1880 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1864 * cbSceneParam._m0[78u].y)) * _1854.y) / cbSceneParam._m0[78u].y)) + _1578;
        _1675 = (exp2(_1880 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1864 * cbSceneParam._m0[78u].z)) * _1854.z) / cbSceneParam._m0[78u].z)) + _1579;
        _1677 = _1863 * _1580;
    }
    else
    {
        _1671 = _1577;
        _1673 = _1578;
        _1675 = _1579;
        _1677 = _1580;
    }
    float _1689 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1690 = _1689 == 3.0;
    float _1692 = log2(_1677);
    float _1699 = exp2(_1692 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)));
    float _1700 = exp2(_1692 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)));
    float _1701 = exp2(_1692 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)));
    float _1710 = (_1689 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1710 * (_1690 ? _1699 : (_1699 + (cbSceneParam._m0[72u].w * _1671)));
    SV_Target.y = _1710 * (_1690 ? _1700 : (_1700 + (cbSceneParam._m0[72u].w * _1673)));
    SV_Target.z = _1710 * (_1690 ? _1701 : (_1701 + (cbSceneParam._m0[72u].w * _1675)));
    SV_Target.w = _1555;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _1555;
}


