#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Emissive_Glow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _865;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = _197 * NORMAL.x;
    float _199 = _197 * NORMAL.y;
    float _200 = _197 * NORMAL.z;
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212;
    float _213;
    float _214;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
    }
    else
    {
        _212 = _198;
        _213 = _199;
        _214 = _200;
    }
    vec4 _228 = texture(sampler2D(M_AMSN_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _231 = _228.x;
    float _232 = _228.y;
    float _233 = _228.z;
    float _235 = _228.w * TEXCOORD_1.z;
    vec4 _251 = texture(sampler2D(M_AMSN_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _254 = _251.x + cbMtdParam._m0[9u].x;
    vec4 _266 = texture(sampler2D(M_AMSN_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _270 = _266.z;
    float _274 = (_266.x * 2.0) + (-1.0);
    float _276 = (_266.y * 2.0) + (-1.0);
    float _277 = dot(vec2(_274, _276), vec2(_274, _276));
    float _3242 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _283 = sqrt(1.0 - (isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0))));
    vec4 _296 = texture(sampler2D(M_AMSN_Emissive_Glow_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[3u].w));
    float _306 = fma(_283, _212, fma(_276, _204 * TANGENT.x, (_190 * _182) * _274));
    float _309 = fma(_283, _213, fma(_276, _204 * TANGENT.y, (_190 * _183) * _274));
    float _312 = fma(_283, _214, fma(_276, _204 * TANGENT.z, (_190 * _184) * _274));
    float _316 = inversesqrt(dot(vec3(_306, _309, _312), vec3(_306, _309, _312)));
    float _317 = _316 * _306;
    float _318 = _316 * _309;
    float _319 = _316 * _312;
    float _3253 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _320 = isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0));
    float _3264 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _321 = isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0));
    float _3275 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3286 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3297 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3308 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _325 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
    float _341 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _383 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _393 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _383);
    float _394 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _383);
    float _395 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _383);
    float _399 = inversesqrt(dot(vec3(_393, _394, _395), vec3(_393, _394, _395)));
    float _400 = _393 * _399;
    float _401 = _394 * _399;
    float _402 = _395 * _399;
    float _408 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _409 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _430 = fma(_319, cbSceneParam._m0[5u].z, fma(_318, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _317));
    float _433 = fma(_319, cbSceneParam._m0[6u].z, fma(_318, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _317));
    float _436 = fma(_319, cbSceneParam._m0[7u].z, fma(_318, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _317));
    uint _449 = uint(roundEven(NORMAL.w)) * 13u;
    uint _451 = _449 + 9u;
    uint _452 = _451 + uint(cbMatDynParam._m0[0u].w);
    float _458 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0)))) * cbInstanceData._m0[_452].x;
    float _459 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0)))) * cbInstanceData._m0[_452].y;
    float _460 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0)))) * cbInstanceData._m0[_452].z;
    float _3319 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _461 = isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0));
    float _3330 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _462 = isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0));
    float _3341 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _463 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
    float _464 = 1.0 - _325;
    float _465 = _461 * _464;
    float _466 = _462 * _464;
    float _467 = _463 * _464;
    float _472 = (_461 + (-0.039999999105930328369140625)) * _325;
    float _473 = (_462 + (-0.039999999105930328369140625)) * _325;
    float _474 = (_463 + (-0.039999999105930328369140625)) * _325;
    float _475 = _472 + 0.039999999105930328369140625;
    float _477 = _473 + 0.039999999105930328369140625;
    float _478 = _474 + 0.039999999105930328369140625;
    vec4 _487 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _408, cbSceneParam._m0[86u].y * _409));
    float _490 = _487.x * TEXCOORD_1.w;
    float _491 = dot(vec3(_317, _318, _319), vec3(_400, _401, _402));
    float _494 = _491 * 2.0;
    float _498 = (_494 * _317) - _400;
    float _499 = (_494 * _318) - _401;
    float _500 = (_494 * _319) - _402;
    float _504 = abs(dot(vec3(_400, _401, _402), vec3(_317, _318, _319)));
    float _3352 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _506 = sqrt(_321);
    float _519 = exp2((_506 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_506 * 3.0));
    float _525 = (1.0 - _519) * ((_506 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _526 = _519 * _506;
    float _554 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _558 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _562 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _864;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _589 = fma(_562, cbModelParam._m0[26u].z, fma(_558, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _554));
        float _593 = fma(_562, cbModelParam._m0[27u].z, fma(_558, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _554));
        float _597 = fma(_562, cbModelParam._m0[28u].z, fma(_558, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _554));
        float _622 = _554 + _317;
        float _623 = _558 + _318;
        float _624 = _562 + _319;
        float _634 = fma(_624, cbModelParam._m0[26u].z, fma(_623, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _622)) - _589;
        float _635 = fma(_624, cbModelParam._m0[27u].z, fma(_623, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _622)) - _593;
        float _636 = fma(_624, cbModelParam._m0[28u].z, fma(_623, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _622)) - _597;
        float _640 = inversesqrt(dot(vec3(_634, _635, _636), vec3(_634, _635, _636)));
        float _653 = ((_640 * _634) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_589 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _654 = ((_640 * _635) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_593 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _655 = ((_640 * _636) / cbModelParam._m0[34u].z) + ((((((_597 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _658 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        vec4 _665 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        vec4 _672 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        vec4 _679 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_653, _654, _655), 0.0);
        float _692 = exp2((_658.w + (-0.5)) * 20.0) * 2.0;
        float _693 = _692 * (_658.x + (-0.5));
        float _694 = _692 * (_658.y + (-0.5));
        float _695 = _692 * (_658.z + (-0.5));
        float _702 = exp2((_665.w + (-0.5)) * 20.0) * 2.0;
        float _703 = _702 * (_665.x + (-0.5));
        float _704 = _702 * (_665.y + (-0.5));
        float _705 = _702 * (_665.z + (-0.5));
        float _712 = exp2((_672.w + (-0.5)) * 20.0) * 2.0;
        float _713 = _712 * (_672.x + (-0.5));
        float _714 = _712 * (_672.y + (-0.5));
        float _715 = _712 * (_672.z + (-0.5));
        float _722 = exp2((_679.w + (-0.5)) * 20.0) * 2.0;
        float _723 = _722 * (_679.x + (-0.5));
        float _724 = _722 * (_679.y + (-0.5));
        float _725 = _722 * (_679.z + (-0.5));
        float _726 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _727 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _728 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _729 = _693 * 0.5;
        float _730 = _703 * 0.5;
        float _731 = _713 * 0.5;
        float _732 = dot(vec3(_729, _730, _731), vec3(_729, _730, _731));
        float _737 = (_732 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_732);
        float _746 = (dot(vec3(_317, _318, _319), vec3(_737 * _729, _737 * _730, _737 * _731)) + 1.0) * 0.5;
        float _3378 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _756 = sqrt(((_730 * _730) + (_729 * _729)) + (_731 * _731)) / (_726 + 9.9999997473787516355514526367188e-06);
        float _3389 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
        float _758 = _757 * 2.0;
        float _762 = (1.0 - _757) / (_757 + 1.0);
        float _3400 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _763 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
        float _772 = ((((1.0 - _763) * (_758 + 2.0)) * exp2(log2(isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0))) * (_758 + 1.0))) + _763) * _726;
        float _773 = _694 * 0.5;
        float _774 = _704 * 0.5;
        float _775 = _714 * 0.5;
        float _776 = dot(vec3(_773, _774, _775), vec3(_773, _774, _775));
        float _781 = (_776 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_776);
        float _789 = (dot(vec3(_317, _318, _319), vec3(_781 * _773, _781 * _774, _781 * _775)) + 1.0) * 0.5;
        float _3411 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _798 = sqrt(((_774 * _774) + (_773 * _773)) + (_775 * _775)) / (_727 + 9.9999997473787516355514526367188e-06);
        float _3422 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _800 = _799 * 2.0;
        float _804 = (1.0 - _799) / (_799 + 1.0);
        float _3433 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
        float _814 = ((((1.0 - _805) * (_800 + 2.0)) * exp2(log2(isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0))) * (_800 + 1.0))) + _805) * _727;
        float _815 = _695 * 0.5;
        float _816 = _705 * 0.5;
        float _817 = _715 * 0.5;
        float _818 = dot(vec3(_815, _816, _817), vec3(_815, _816, _817));
        float _823 = (_818 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_818);
        float _831 = (dot(vec3(_317, _318, _319), vec3(_823 * _815, _823 * _816, _823 * _817)) + 1.0) * 0.5;
        float _3444 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _840 = sqrt(((_816 * _816) + (_815 * _815)) + (_817 * _817)) / (_728 + 9.9999997473787516355514526367188e-06);
        float _3455 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
        float _842 = _841 * 2.0;
        float _846 = (1.0 - _841) / (_841 + 1.0);
        float _3466 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
        float _856 = ((((1.0 - _847) * (_842 + 2.0)) * exp2(log2(isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0))) * (_842 + 1.0))) + _847) * _728;
        _864 = _695;
        _866 = _694;
        _867 = _693;
        _868 = _705;
        _869 = _704;
        _870 = _703;
        _871 = _715;
        _872 = _714;
        _873 = _713;
        _874 = _728;
        _875 = _727;
        _876 = _726;
        _877 = cbModelParam._m0[36u].z * (isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0)));
        _878 = cbModelParam._m0[36u].z * (isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0)));
        _879 = cbModelParam._m0[36u].z * (isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0)));
    }
    else
    {
        _864 = _865;
        _866 = _865;
        _867 = _865;
        _868 = _865;
        _869 = _865;
        _870 = _865;
        _871 = _865;
        _872 = _865;
        _873 = _865;
        _874 = _865;
        _875 = _865;
        _876 = _865;
        _877 = 0.0;
        _878 = 0.0;
        _879 = 0.0;
    }
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _905 = fma(_562, cbModelParam._m0[30u].z, fma(_558, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _554));
        float _909 = fma(_562, cbModelParam._m0[31u].z, fma(_558, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _554));
        float _913 = fma(_562, cbModelParam._m0[32u].z, fma(_558, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _554));
        float _936 = _554 + _317;
        float _937 = _558 + _318;
        float _938 = _562 + _319;
        float _948 = fma(_938, cbModelParam._m0[30u].z, fma(_937, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _936)) - _905;
        float _949 = fma(_938, cbModelParam._m0[31u].z, fma(_937, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _936)) - _909;
        float _950 = fma(_938, cbModelParam._m0[32u].z, fma(_937, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _936)) - _913;
        float _954 = inversesqrt(dot(vec3(_948, _949, _950), vec3(_948, _949, _950)));
        float _967 = ((_954 * _948) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_905 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _968 = ((_954 * _949) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_909 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _969 = ((_954 * _950) / cbModelParam._m0[35u].z) + ((((((_913 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        float _1004 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_971.x + (-0.5));
        float _1006 = _1004 * (_971.y + (-0.5));
        float _1007 = _1004 * (_971.z + (-0.5));
        float _1014 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_978.x + (-0.5));
        float _1016 = _1014 * (_978.y + (-0.5));
        float _1017 = _1014 * (_978.z + (-0.5));
        float _1024 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_985.x + (-0.5));
        float _1026 = _1024 * (_985.y + (-0.5));
        float _1027 = _1024 * (_985.z + (-0.5));
        float _1034 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_992.x + (-0.5));
        float _1036 = _1034 * (_992.y + (-0.5));
        float _1037 = _1034 * (_992.z + (-0.5));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1040 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1041 = _1005 * 0.5;
        float _1042 = _1015 * 0.5;
        float _1043 = _1025 * 0.5;
        float _1044 = dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043));
        float _1049 = (_1044 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1044);
        float _1057 = (dot(vec3(_317, _318, _319), vec3(_1049 * _1041, _1049 * _1042, _1049 * _1043)) + 1.0) * 0.5;
        float _3507 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1066 = sqrt(((_1042 * _1042) + (_1041 * _1041)) + (_1043 * _1043)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _3518 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _3529 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))) * (_1068 + 1.0))) + _1073) * _1038;
        float _1083 = _1006 * 0.5;
        float _1084 = _1016 * 0.5;
        float _1085 = _1026 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_317, _318, _319), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3540 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_1039 + 9.9999997473787516355514526367188e-06);
        float _3551 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3562 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0))) * (_1110 + 1.0))) + _1115) * _1039;
        float _1125 = _1007 * 0.5;
        float _1126 = _1017 * 0.5;
        float _1127 = _1027 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_317, _318, _319), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3573 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1040 + 9.9999997473787516355514526367188e-06);
        float _3584 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3595 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * (_1152 + 1.0))) + _1157) * _1040;
        _1174 = _1007;
        _1175 = _1006;
        _1176 = _1005;
        _1177 = _1017;
        _1178 = _1016;
        _1179 = _1015;
        _1180 = _1027;
        _1181 = _1026;
        _1182 = _1025;
        _1183 = _1040;
        _1184 = _1039;
        _1185 = _1038;
        _1186 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
        _1187 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1188 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
    }
    else
    {
        _1174 = _865;
        _1175 = _865;
        _1176 = _865;
        _1177 = _865;
        _1178 = _865;
        _1179 = _865;
        _1180 = _865;
        _1181 = _865;
        _1182 = _865;
        _1183 = _865;
        _1184 = _865;
        _1185 = _865;
        _1186 = 0.0;
        _1187 = 0.0;
        _1188 = 0.0;
    }
    float _1198 = (cbModelParam._m0[1u].x * (_1186 - _877)) + _877;
    float _1199 = (cbModelParam._m0[1u].x * (_1187 - _878)) + _878;
    float _1200 = (cbModelParam._m0[1u].x * (_1188 - _879)) + _879;
    float _1221 = fma(_1200, cbSceneParam._m0[89u].z, fma(_1199, cbSceneParam._m0[89u].y, _1198 * cbSceneParam._m0[89u].x));
    float _1224 = fma(_1200, cbSceneParam._m0[90u].z, fma(_1199, cbSceneParam._m0[90u].y, _1198 * cbSceneParam._m0[90u].x));
    float _1227 = fma(_1200, cbSceneParam._m0[91u].z, fma(_1199, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1198));
    float _1242 = _498 * 0.5;
    float _1243 = _499 * 0.5;
    float _1244 = _500 * 0.5;
    float _1245 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_1176, _1179, _1182, _1185));
    float _1248 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_1175, _1178, _1181, _1184));
    float _1251 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_1174, _1177, _1180, _1183));
    float _1285;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1258 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_864, _868, _871, _874));
        float _1262 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_866, _869, _872, _875));
        float _1266 = dot(vec4(_1242, _1243, _1244, 1.0), vec4(_867, _870, _873, _876));
        float _1273 = dot(vec4(cbModelParam._m0[39u]), vec4(_1242, _1243, _1244, 1.0));
        _1285 = dot(vec3(isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)), isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)), isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1273) ? 0.0 : (isnan(0.0) ? _1273 : max(0.0, _1273))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1285 = 1.0;
    }
    float _1296;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1287 = dot(vec4(cbModelParam._m0[40u]), vec4(_1242, _1243, _1244, 1.0));
        _1296 = dot(vec3(isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)), isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)), isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1287) ? 0.0 : (isnan(0.0) ? _1287 : max(0.0, _1287))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1296 = 1.0;
    }
    float _1300 = (_1296 * cbModelParam._m0[1u].x) + (_1285 * (1.0 - cbModelParam._m0[1u].x));
    float _1310 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _321);
    float _1311 = isnan(_1310) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1310 : min(cbModelParam._m0[25u].z, _1310));
    float _1393;
    float _1395;
    float _1397;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1360 = fma(_562, cbModelParam._m0[13u].z, fma(_558, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _554)) + cbModelParam._m0[13u].w;
        float _1364 = fma(_562, cbModelParam._m0[14u].z, fma(_558, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _554)) + cbModelParam._m0[14u].w;
        float _1368 = fma(_562, cbModelParam._m0[15u].z, fma(_558, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _554)) + cbModelParam._m0[15u].w;
        float _1371 = fma(_500, cbModelParam._m0[13u].z, fma(_499, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _498));
        float _1374 = fma(_500, cbModelParam._m0[14u].z, fma(_499, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _498));
        float _1377 = fma(_500, cbModelParam._m0[15u].z, fma(_499, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _498));
        float _1405;
        if (_1371 > 0.0)
        {
            _1405 = abs((1.0 - _1360) / _1371);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1371 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1360 + 1.0) / _1371);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1405 = frontier_phi_16_14_ladder;
        }
        float _1613;
        if (_1374 > 0.0)
        {
            _1613 = abs((1.0 - _1364) / _1374);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1374 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1364 + 1.0) / _1374);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1613 = frontier_phi_25_21_ladder;
        }
        float _1867;
        if (_1377 > 0.0)
        {
            _1867 = abs((1.0 - _1368) / _1377);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1377 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1368 + 1.0) / _1377);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1867 = frontier_phi_37_32_ladder;
        }
        float _1869 = isnan(_1613) ? _1405 : (isnan(_1405) ? _1613 : min(_1405, _1613));
        float _1870 = isnan(_1867) ? _1869 : (isnan(_1869) ? _1867 : min(_1869, _1867));
        float _1874 = (_1870 * _1371) + _1360;
        float _1875 = (_1870 * _1374) + _1364;
        float _1876 = (_1870 * _1377) + _1368;
        float _1877 = _1870 * 9.9999997473787516355514526367188e-05;
        float _1879 = (-1.0) - _1877;
        float _1881 = _1877 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1876 > _1881) || ((_1876 < _1879) || ((_1875 > _1881) || ((_1875 < _1879) || ((_1874 < _1879) || (_1874 > _1881))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2004 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1876, cbModelParam._m0[9u].z, fma(_1875, cbModelParam._m0[9u].y, _1874 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1876, cbModelParam._m0[10u].z, fma(_1875, cbModelParam._m0[10u].y, _1874 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1876, cbModelParam._m0[11u].z, fma(_1875, cbModelParam._m0[11u].y, _1874 * cbModelParam._m0[11u].x))), _1311);
            frontier_phi_15_37_ladder = _2004.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2004.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2004.x * cbModelParam._m0[1u].y;
        }
        _1393 = frontier_phi_15_37_ladder_2;
        _1395 = frontier_phi_15_37_ladder_1;
        _1397 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1381 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_498, _499, _500), _1311);
        _1393 = _1381.x * cbModelParam._m0[1u].y;
        _1395 = _1381.y * cbModelParam._m0[1u].y;
        _1397 = _1381.z * cbModelParam._m0[1u].y;
    }
    float _1401 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _321);
    float _1402 = isnan(_1401) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1401 : min(cbModelParam._m0[25u].w, _1401));
    float _1495;
    float _1497;
    float _1499;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1459 = fma(_562, cbModelParam._m0[21u].z, fma(_558, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _554)) + cbModelParam._m0[21u].w;
        float _1463 = fma(_562, cbModelParam._m0[22u].z, fma(_558, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _554)) + cbModelParam._m0[22u].w;
        float _1467 = fma(_562, cbModelParam._m0[23u].z, fma(_558, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _554)) + cbModelParam._m0[23u].w;
        float _1470 = fma(_500, cbModelParam._m0[21u].z, fma(_499, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _498));
        float _1473 = fma(_500, cbModelParam._m0[22u].z, fma(_499, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _498));
        float _1476 = fma(_500, cbModelParam._m0[23u].z, fma(_499, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _498));
        float _1618;
        if (_1470 > 0.0)
        {
            _1618 = abs((1.0 - _1459) / _1470);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1459 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1618 = frontier_phi_27_23_ladder;
        }
        float _1894;
        if (_1473 > 0.0)
        {
            _1894 = abs((1.0 - _1463) / _1473);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1473 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1463 + 1.0) / _1473);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1894 = frontier_phi_39_34_ladder;
        }
        float _2107;
        if (_1476 > 0.0)
        {
            _2107 = abs((1.0 - _1467) / _1476);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1476 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1467 + 1.0) / _1476);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2107 = frontier_phi_48_45_ladder;
        }
        float _2109 = isnan(_1894) ? _1618 : (isnan(_1618) ? _1894 : min(_1618, _1894));
        float _2110 = isnan(_2107) ? _2109 : (isnan(_2109) ? _2107 : min(_2109, _2107));
        float _2114 = (_2110 * _1470) + _1459;
        float _2115 = (_2110 * _1473) + _1463;
        float _2116 = (_2110 * _1476) + _1467;
        float _2117 = _2110 * 9.9999997473787516355514526367188e-05;
        float _2118 = (-1.0) - _2117;
        float _2120 = _2117 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2116 > _2120) || ((_2116 < _2118) || ((_2115 > _2120) || ((_2115 < _2118) || ((_2114 < _2118) || (_2114 > _2120))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2345 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2116, cbModelParam._m0[17u].z, fma(_2115, cbModelParam._m0[17u].y, _2114 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2116, cbModelParam._m0[18u].z, fma(_2115, cbModelParam._m0[18u].y, _2114 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2116, cbModelParam._m0[19u].z, fma(_2115, cbModelParam._m0[19u].y, _2114 * cbModelParam._m0[19u].x))), _1402);
            frontier_phi_24_48_ladder = _2345.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2345.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2345.x * cbModelParam._m0[1u].z;
        }
        _1495 = frontier_phi_24_48_ladder_2;
        _1497 = frontier_phi_24_48_ladder_1;
        _1499 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1479 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_498, _499, _500), _1402);
        _1495 = _1479.x * cbModelParam._m0[1u].z;
        _1497 = _1479.y * cbModelParam._m0[1u].z;
        _1499 = _1479.z * cbModelParam._m0[1u].z;
    }
    float _1512 = (((_525 * _475) + _526) * _490) * ((cbModelParam._m0[1u].w * (_1495 - _1393)) + _1393);
    float _1514 = (((_525 * _477) + _526) * _490) * ((cbModelParam._m0[1u].w * (_1497 - _1395)) + _1395);
    float _1516 = (((_525 * _478) + _526) * _490) * ((cbModelParam._m0[1u].w * (_1499 - _1397)) + _1397);
    float _1519 = fma(_1516, cbSceneParam._m0[89u].z, fma(_1514, cbSceneParam._m0[89u].y, _1512 * cbSceneParam._m0[89u].x));
    float _1522 = fma(_1516, cbSceneParam._m0[90u].z, fma(_1514, cbSceneParam._m0[90u].y, _1512 * cbSceneParam._m0[90u].x));
    float _1525 = fma(_1516, cbSceneParam._m0[91u].z, fma(_1514, cbSceneParam._m0[91u].y, _1512 * cbSceneParam._m0[91u].x));
    uvec4 _1535 = floatBitsToUint(cbInstanceData._m0[_449 + 5u]);
    uint _1537 = _1535.x * 14u;
    uint _1538 = _1537 + 13u;
    float _1545 = _490 + (-1.0);
    float _1550 = (cbLight._m0[_1538].x * _1545) + 1.0;
    float _1551 = (cbLight._m0[_1538].y * _1545) + 1.0;
    float _1552 = (cbLight._m0[_1538].z * _1545) + 1.0;
    float _1553 = (cbLight._m0[_1538].w * _1545) + 1.0;
    uint _1554 = _1537 + 5u;
    float _1560 = isnan(1.0) ? _1551 : (isnan(_1551) ? 1.0 : min(_1551, 1.0));
    uint _1564 = _1537 + 4u;
    float _1571 = isnan(1.0) ? _1550 : (isnan(_1550) ? 1.0 : min(_1550, 1.0));
    uint _1575 = _1537 | 1u;
    float _1586 = dot(vec3(cbLight._m0[_1537].xyz), vec3(_317, _318, _319));
    float _1589 = dot(vec3(cbLight._m0[_1575].xyz), vec3(_317, _318, _319));
    float _3731 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
    float _3742 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
    float _1594 = (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * 0.3183098733425140380859375;
    float _1596 = (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * 0.3183098733425140380859375;
    float _1603 = ((cbLight._m0[_1554].x * _1560) * _1596) + ((cbLight._m0[_1564].x * _1571) * _1594);
    float _1604 = ((_1560 * cbLight._m0[_1554].y) * _1596) + ((_1571 * cbLight._m0[_1564].y) * _1594);
    float _1605 = ((_1560 * cbLight._m0[_1554].z) * _1596) + ((_1571 * cbLight._m0[_1564].z) * _1594);
    uvec4 _1610 = floatBitsToUint(cbLight._m0[_1537 + 12u]);
    bool _1612 = _1610.x == 0u;
    float _1623;
    float _1625;
    float _1627;
    if (_1612)
    {
        _1623 = _1603;
        _1625 = _1604;
        _1627 = _1605;
    }
    else
    {
        uint _1631 = _1537 + 6u;
        float _1647 = (dot(vec3(cbLight._m0[_1537 + 2u].xyz), vec3(_317, _318, _319)) * 0.5) + 0.5;
        float _1648 = _1647 * _1647;
        float _3753 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1650 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
        _1623 = (((cbLight._m0[_1631].x * 0.3183098733425140380859375) * _1649) * _1650) + _1603;
        _1625 = (((cbLight._m0[_1631].y * 0.3183098733425140380859375) * _1649) * _1650) + _1604;
        _1627 = (((cbLight._m0[_1631].z * 0.3183098733425140380859375) * _1649) * _1650) + _1605;
    }
    bool _1630 = _1610.y == 0u;
    float _1668;
    float _1670;
    float _1672;
    if (_1630)
    {
        _1668 = _1623;
        _1670 = _1625;
        _1672 = _1627;
    }
    else
    {
        uint _1838 = _1537 + 7u;
        float _1854 = (dot(vec3(cbLight._m0[_1537 + 3u].xyz), vec3(_317, _318, _319)) * 0.5) + 0.5;
        float _1855 = _1854 * _1854;
        float _3769 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1856 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1857 = isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0));
        _1668 = (((cbLight._m0[_1838].x * 0.3183098733425140380859375) * _1856) * _1857) + _1623;
        _1670 = (((cbLight._m0[_1838].y * 0.3183098733425140380859375) * _1856) * _1857) + _1625;
        _1672 = (((cbLight._m0[_1838].z * 0.3183098733425140380859375) * _1856) * _1857) + _1627;
    }
    uint _1675 = _1537 + 8u;
    float _1688 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1537].w)) * _321) * 0.949999988079071044921875);
    float _1689 = _1688 * _1688;
    float _1690 = cbLight._m0[_1537].x + _400;
    float _1691 = cbLight._m0[_1537].y + _401;
    float _1692 = cbLight._m0[_1537].z + _402;
    float _1696 = inversesqrt(dot(vec3(_1690, _1691, _1692), vec3(_1690, _1691, _1692)));
    float _1697 = _1696 * _1690;
    float _1698 = _1696 * _1691;
    float _1699 = _1696 * _1692;
    float _1700 = dot(vec3(_317, _318, _319), vec3(cbLight._m0[_1537].xyz));
    float _3785 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
    float _1703 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _3796 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _1704 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _1705 = dot(vec3(_317, _318, _319), vec3(_1697, _1698, _1699));
    float _3807 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
    float _1708 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _1709 = dot(vec3(cbLight._m0[_1537].xyz), vec3(_1697, _1698, _1699));
    float _3818 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
    float _1713 = _1689 * _1689;
    float _1717 = ((_1708 * _1708) * (_1713 + (-1.0))) + 1.0;
    float _1725 = exp2(log2(1.0 - (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0)))) * 5.0);
    float _1726 = 0.959999978542327880859375 - _472;
    float _1728 = 0.959999978542327880859375 - _473;
    float _1729 = 0.959999978542327880859375 - _474;
    float _1736 = 1.0 - _1689;
    float _1747 = (0.5 / (((_1704 * ((_1703 * _1736) + _1689)) + 9.9999999392252902907785028219223e-09) + (((_1704 * _1736) + _1689) * _1703))) * _1703;
    float _3829 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _1749 = (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1713 / ((_1717 * _1717) * 3.141590118408203125));
    uint _1760 = _1537 + 9u;
    float _1771 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1575].w)) * _321) * 0.949999988079071044921875);
    float _1772 = _1771 * _1771;
    float _1773 = cbLight._m0[_1575].x + _400;
    float _1774 = cbLight._m0[_1575].y + _401;
    float _1775 = cbLight._m0[_1575].z + _402;
    float _1779 = inversesqrt(dot(vec3(_1773, _1774, _1775), vec3(_1773, _1774, _1775)));
    float _1780 = _1779 * _1773;
    float _1781 = _1779 * _1774;
    float _1782 = _1779 * _1775;
    float _1783 = dot(vec3(_317, _318, _319), vec3(cbLight._m0[_1575].xyz));
    float _3840 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
    float _1786 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _1787 = dot(vec3(_317, _318, _319), vec3(_1780, _1781, _1782));
    float _3851 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _1790 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _1791 = dot(vec3(cbLight._m0[_1575].xyz), vec3(_1780, _1781, _1782));
    float _3862 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1795 = _1772 * _1772;
    float _1799 = ((_1790 * _1790) * (_1795 + (-1.0))) + 1.0;
    float _1806 = exp2(log2(1.0 - (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) * 5.0);
    float _1813 = 1.0 - _1772;
    float _1823 = (0.5 / (((_1704 * ((_1786 * _1813) + _1772)) + 9.9999999392252902907785028219223e-09) + (((_1704 * _1813) + _1772) * _1786))) * _1786;
    float _3873 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1825 = (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * (_1795 / ((_1799 * _1799) * 3.141590118408203125));
    float _1835 = (((((_1806 * _1726) + _475) * cbLight._m0[_1760].x) * _1825) * _1560) + (((((_1725 * _1726) + _475) * cbLight._m0[_1675].x) * _1749) * _1571);
    float _1836 = (((((_1806 * _1728) + _477) * cbLight._m0[_1760].y) * _1825) * _1560) + (((((_1725 * _1728) + _477) * cbLight._m0[_1675].y) * _1749) * _1571);
    float _1837 = (((((_1806 * _1729) + _478) * cbLight._m0[_1760].z) * _1825) * _1560) + (((((_1725 * _1729) + _478) * cbLight._m0[_1675].z) * _1749) * _1571);
    float _1899;
    float _1901;
    float _1903;
    if (_1612)
    {
        _1899 = _1835;
        _1901 = _1836;
        _1903 = _1837;
    }
    else
    {
        uint _1905 = _1537 + 2u;
        uint _1909 = _1537 + 10u;
        float _1923 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1905].w)) * _321) * 0.949999988079071044921875);
        float _1924 = _1923 * _1923;
        float _1925 = cbLight._m0[_1905].x + _400;
        float _1926 = cbLight._m0[_1905].y + _401;
        float _1927 = cbLight._m0[_1905].z + _402;
        float _1931 = inversesqrt(dot(vec3(_1925, _1926, _1927), vec3(_1925, _1926, _1927)));
        float _1932 = _1931 * _1925;
        float _1933 = _1931 * _1926;
        float _1934 = _1931 * _1927;
        float _1935 = dot(vec3(_317, _318, _319), vec3(cbLight._m0[_1905].xyz));
        float _3884 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        float _1938 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1939 = dot(vec3(_317, _318, _319), vec3(_1932, _1933, _1934));
        float _3895 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1942 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1943 = dot(vec3(cbLight._m0[_1905].xyz), vec3(_1932, _1933, _1934));
        float _3906 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1947 = _1924 * _1924;
        float _1951 = ((_1942 * _1942) * (_1947 + (-1.0))) + 1.0;
        float _1958 = exp2(log2(1.0 - (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) * 5.0);
        float _1965 = 1.0 - _1924;
        float _1975 = (0.5 / (((_1704 * ((_1938 * _1965) + _1924)) + 9.9999999392252902907785028219223e-09) + (((_1704 * _1965) + _1924) * _1938))) * _1938;
        float _3917 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
        float _1977 = (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1947 / ((_1951 * _1951) * 3.141590118408203125));
        float _1978 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
        _1899 = (((((_1958 * _1726) + _475) * cbLight._m0[_1909].x) * _1977) * _1978) + _1835;
        _1901 = (((((_1958 * _1728) + _477) * cbLight._m0[_1909].y) * _1977) * _1978) + _1836;
        _1903 = (((((_1958 * _1729) + _478) * cbLight._m0[_1909].z) * _1977) * _1978) + _1837;
    }
    float _2013;
    float _2015;
    float _2017;
    if (_1630)
    {
        _2013 = _1899;
        _2015 = _1901;
        _2017 = _1903;
    }
    else
    {
        uint _2024 = _1537 + 3u;
        uint _2028 = _1537 + 11u;
        float _2042 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2024].w)) * _321) * 0.949999988079071044921875);
        float _2043 = _2042 * _2042;
        float _2044 = cbLight._m0[_2024].x + _400;
        float _2045 = cbLight._m0[_2024].y + _401;
        float _2046 = cbLight._m0[_2024].z + _402;
        float _2050 = inversesqrt(dot(vec3(_2044, _2045, _2046), vec3(_2044, _2045, _2046)));
        float _2051 = _2050 * _2044;
        float _2052 = _2050 * _2045;
        float _2053 = _2050 * _2046;
        float _2054 = dot(vec3(_317, _318, _319), vec3(cbLight._m0[_2024].xyz));
        float _3933 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2057 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _2058 = dot(vec3(_317, _318, _319), vec3(_2051, _2052, _2053));
        float _3944 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2061 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _2062 = dot(vec3(cbLight._m0[_2024].xyz), vec3(_2051, _2052, _2053));
        float _3955 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2066 = _2043 * _2043;
        float _2070 = ((_2061 * _2061) * (_2066 + (-1.0))) + 1.0;
        float _2077 = exp2(log2(1.0 - (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) * 5.0);
        float _2084 = 1.0 - _2043;
        float _2094 = (0.5 / (((_1704 * ((_2057 * _2084) + _2043)) + 9.9999999392252902907785028219223e-09) + (((_1704 * _2084) + _2043) * _2057))) * _2057;
        float _3966 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2096 = (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_2066 / ((_2070 * _2070) * 3.141590118408203125));
        float _2097 = isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0));
        _2013 = (((((_2077 * _1726) + _475) * cbLight._m0[_2028].x) * _2096) * _2097) + _1899;
        _2015 = (((((_2077 * _1728) + _477) * cbLight._m0[_2028].y) * _2096) * _2097) + _1901;
        _2017 = (((((_2077 * _1729) + _478) * cbLight._m0[_2028].z) * _2096) * _2097) + _1903;
    }
    float _2231;
    float _2233;
    float _2235;
    float _2237;
    float _2239;
    float _2241;
    if (_1535.y == 0u)
    {
        float _2172 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2173 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2172;
        float _2174 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2172;
        float _2175 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2172;
        uvec4 _2187 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2188 = _2187.x;
        uint _2199 = uint((float(_2187.y) * floor(float(uint(cbSceneParam._m0[85u].y * _409) / _2188))) + floor(float(uint(cbSceneParam._m0[85u].x * _408) / _2188)));
        float _2209 = (log2(_2175 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2210 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        uint _2213 = uint(isnan(14.0) ? _2210 : (isnan(_2210) ? 14.0 : min(_2210, 14.0)));
        uvec4 _2218 = texelFetch(g_lightClusterGridBuffer, int(((_2213 << 2u) + (_2199 << 6u)) >> 2u));
        uint _2219 = _2218.x;
        uint _2220 = _2187.z;
        float _2350;
        float _2352;
        float _2354;
        float _2356;
        float _2358;
        float _2360;
        if (((((1u << ((_2220 >> 4u) & 15u)) + 4294967295u) & _2219) == 0u) || ((_2220 & 240u) == 0u))
        {
            _2350 = 0.0;
            _2352 = 0.0;
            _2354 = 0.0;
            _2356 = 0.0;
            _2358 = 0.0;
            _2360 = 0.0;
        }
        else
        {
            float _2351;
            float _2353;
            float _2355;
            float _2357;
            float _2359;
            float _2361;
            float _2503 = 0.0;
            float _2504 = 0.0;
            float _2505 = 0.0;
            float _2506 = 0.0;
            float _2507 = 0.0;
            float _2508 = 0.0;
            uint _2509 = 0u;
            uint _2518;
            bool _2519;
            for (;;)
            {
                _2518 = texelFetch(g_lightClassification, int((((_2213 << 5u) + (_2199 << 9u)) + (_2509 << 2u)) >> 2u)).x;
                _2519 = _2518 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2519)
                {
                    frontier_phi_63_pred = _2508;
                    frontier_phi_63_pred_1 = _2507;
                    frontier_phi_63_pred_2 = _2506;
                    frontier_phi_63_pred_3 = _2505;
                    frontier_phi_63_pred_4 = _2504;
                    frontier_phi_63_pred_5 = _2503;
                }
                else
                {
                    float _2627;
                    float _2628;
                    float _2629;
                    float _2630;
                    float _2631;
                    float _2632;
                    uint _2633;
                    _2627 = _2503;
                    _2628 = _2504;
                    _2629 = _2505;
                    _2630 = _2506;
                    _2631 = _2507;
                    _2632 = _2508;
                    _2633 = _2518;
                    float _2559;
                    float _2560;
                    float _2561;
                    float _2562;
                    float _2563;
                    float _2564;
                    for (;;)
                    {
                        uint _2637 = uint(findLSB(_2633)) + (_2509 << 5u);
                        uint _2634 = (_2633 + 4294967295u) & _2633;
                        uint _2639 = _2637 * 48u;
                        vec4 _2653 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2639)).x, texelFetch(g_PointLightRenderingBuffer, int(_2639 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2639 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2639 + 3u)).x));
                        uint _2659 = (_2637 * 48u) + 4u;
                        vec4 _2672 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2659)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 3u)).x));
                        uint _2678 = (_2637 * 48u) + 8u;
                        vec3 _2689 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2678)).x, texelFetch(g_PointLightRenderingBuffer, int(_2678 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2678 + 2u)).x));
                        float _2693 = _2653.x - _2173;
                        float _2694 = _2653.y - _2174;
                        float _2695 = _2653.z - _2175;
                        float _2696 = dot(vec3(_2693, _2694, _2695), vec3(_2693, _2694, _2695));
                        float _2699 = inversesqrt(_2696);
                        float _2700 = _2699 * _2693;
                        float _2701 = _2699 * _2694;
                        float _2702 = _2699 * _2695;
                        float _2703 = dot(vec3(_430, _433, _436), vec3(_2700, _2701, _2702));
                        float _2708 = 1.0 - (_2696 * _2653.w);
                        float _3992 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
                        float _2709 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
                        float _2710 = sqrt(_2696) * _2672.w;
                        float _2713 = 1.39999997615814208984375 / (_2710 + 1.39999997615814208984375);
                        float _2714 = _2713 * _2713;
                        float _2717 = ((1.0 - _2714) * _2703) + _2714;
                        float _2720 = _2710 * _2710;
                        float _2724 = ((isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0))) * _2709) / ((_2720 * 0.699999988079071044921875) + 1.0);
                        float _2728 = (-0.0) - _2173;
                        float _2729 = (-0.0) - _2174;
                        float _2730 = (-0.0) - _2175;
                        float _2734 = inversesqrt(dot(vec3(_2728, _2729, _2730), vec3(_2728, _2729, _2730)));
                        float _2735 = _2734 * _2728;
                        float _2736 = _2734 * _2729;
                        float _2737 = _2734 * _2730;
                        float _2745 = exp2(log2(1.0 / ((_2720 * 3.5) + 5.0)) * 0.25);
                        float _2746 = 1.0 - _506;
                        float _2753 = sqrt(1.0 - ((1.0 - (_2746 * _2746)) * (1.0 - (_2745 * _2745))));
                        float _2754 = _2753 * _2753;
                        float _2755 = _2754 * _2754;
                        float _2756 = _2735 + _2700;
                        float _2757 = _2736 + _2701;
                        float _2758 = _2737 + _2702;
                        float _2762 = inversesqrt(dot(vec3(_2756, _2757, _2758), vec3(_2756, _2757, _2758)));
                        float _2766 = dot(vec3(_430, _433, _436), vec3(_2735, _2736, _2737));
                        float _4008 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
                        float _2769 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
                        float _2770 = dot(vec3(_430, _433, _436), vec3(_2762 * _2756, _2762 * _2757, _2762 * _2758));
                        float _4019 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
                        float _2773 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
                        float _2777 = ((_2773 * _2773) * (_2755 + (-1.0))) + 1.0;
                        float _2778 = _2713 * _2754;
                        float _2779 = _2778 * _2778;
                        float _2782 = ((1.0 - _2779) * _2703) + _2779;
                        float _4030 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
                        float _2783 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
                        float _2784 = 1.0 - _2754;
                        float _2794 = (0.5 / (((_2783 * ((_2769 * _2784) + _2754)) + 9.9999999392252902907785028219223e-09) + (((_2783 * _2784) + _2754) * _2769))) * _2783;
                        float _4041 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
                        float _2805 = (((_2755 * 3.1415927410125732421875) * (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) / ((_2777 * _2777) * ((_2720 * 2.1991131305694580078125) + 3.141590118408203125))) * _2709;
                        _2562 = (_2724 * _2672.x) + _2630;
                        _2563 = (_2724 * _2672.y) + _2631;
                        _2564 = (_2724 * _2672.z) + _2632;
                        _2559 = (_2805 * _2689.x) + _2627;
                        _2560 = (_2805 * _2689.y) + _2628;
                        _2561 = (_2805 * _2689.z) + _2629;
                        if (_2634 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2627 = _2559;
                            _2628 = _2560;
                            _2629 = _2561;
                            _2630 = _2562;
                            _2631 = _2563;
                            _2632 = _2564;
                            _2633 = _2634;
                        }
                    }
                    frontier_phi_63_pred = _2564;
                    frontier_phi_63_pred_1 = _2563;
                    frontier_phi_63_pred_2 = _2562;
                    frontier_phi_63_pred_3 = _2561;
                    frontier_phi_63_pred_4 = _2560;
                    frontier_phi_63_pred_5 = _2559;
                }
                _2361 = frontier_phi_63_pred;
                _2359 = frontier_phi_63_pred_1;
                _2357 = frontier_phi_63_pred_2;
                _2355 = frontier_phi_63_pred_3;
                _2353 = frontier_phi_63_pred_4;
                _2351 = frontier_phi_63_pred_5;
                uint _2510 = _2509 + 1u;
                if (_2510 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2503 = _2351;
                    _2504 = _2353;
                    _2505 = _2355;
                    _2506 = _2357;
                    _2507 = _2359;
                    _2508 = _2361;
                    _2509 = _2510;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2350 = _2351;
            _2352 = _2353;
            _2354 = _2355;
            _2356 = _2357;
            _2358 = _2359;
            _2360 = _2361;
        }
        uvec4 _2364 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2365 = _2364.z;
        uint _2367 = (_2365 >> 8u) & 15u;
        float _2471;
        float _2473;
        float _2475;
        float _2477;
        float _2479;
        float _2481;
        if (((4294967295u << _2367) & _2219) == 0u)
        {
            _2471 = _2350;
            _2473 = _2352;
            _2475 = _2354;
            _2477 = _2356;
            _2479 = _2358;
            _2481 = _2360;
        }
        else
        {
            float _2496 = inversesqrt(dot(vec3(_2173, _2174, _2175), vec3(_2173, _2174, _2175)));
            float _2497 = _2496 * _2173;
            float _2498 = _2496 * _2174;
            float _2499 = _2496 * _2175;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2367 < ((_2365 >> 12u) & 15u))
            {
                float _2472;
                float _2474;
                float _2476;
                float _2478;
                float _2480;
                float _2482;
                float _2610 = _2350;
                float _2611 = _2352;
                float _2612 = _2354;
                float _2613 = _2356;
                float _2614 = _2358;
                float _2615 = _2360;
                uint _2616 = _2367;
                uint _2625;
                bool _2626;
                for (;;)
                {
                    _2625 = texelFetch(g_lightClassification, int((((_2213 << 5u) + (_2199 << 9u)) + (_2616 << 2u)) >> 2u)).x;
                    _2626 = _2625 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2626)
                    {
                        frontier_phi_69_pred = _2615;
                        frontier_phi_69_pred_1 = _2614;
                        frontier_phi_69_pred_2 = _2613;
                        frontier_phi_69_pred_3 = _2612;
                        frontier_phi_69_pred_4 = _2611;
                        frontier_phi_69_pred_5 = _2610;
                    }
                    else
                    {
                        float _2810;
                        float _2811;
                        float _2812;
                        float _2813;
                        float _2814;
                        float _2815;
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3111;
                        float _2823 = _2610;
                        float _2824 = _2611;
                        float _2825 = _2612;
                        float _2826 = _2613;
                        float _2827 = _2614;
                        float _2828 = _2615;
                        uint _2829 = _2625;
                        uint _2830;
                        vec4 _2855;
                        float _2856;
                        vec4 _2871;
                        vec3 _2883;
                        vec4 _2899;
                        vec4 _2915;
                        float _2962;
                        bool _2963;
                        for (;;)
                        {
                            uint _2840 = ((_2616 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2829));
                            _2830 = (_2829 + 4294967295u) & _2829;
                            uint _2842 = _2840 * 40u;
                            _2855 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2842)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 3u)).x));
                            _2856 = _2855.w;
                            uint _2858 = (_2840 * 40u) + 4u;
                            _2871 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2858)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 3u)).x));
                            uint _2873 = (_2840 * 40u) + 8u;
                            _2883 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2873)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 2u)).x));
                            uint _2886 = (_2840 * 40u) + 16u;
                            _2899 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2886)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 3u)).x));
                            uint _2902 = (_2840 * 40u) + 20u;
                            _2915 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2902)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 3u)).x));
                            uint _2918 = (_2840 * 40u) + 24u;
                            vec4 _2931 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2918)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 3u)).x));
                            uint _2937 = (_2840 * 40u) + 28u;
                            vec4 _2950 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 3u)).x));
                            _2962 = fma(_2175, _2950.z, fma(_2174, _2950.y, _2950.x * _2173)) + _2950.w;
                            _2963 = !((fma(_2175, _2931.z, fma(_2174, _2931.y, _2931.x * _2173)) + _2931.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2963)
                            {
                                float _2990 = _2855.x - _2173;
                                float _2991 = _2855.y - _2174;
                                float _2992 = _2855.z - _2175;
                                float _2993 = dot(vec3(_2990, _2991, _2992), vec3(_2990, _2991, _2992));
                                float _2996 = inversesqrt(_2993);
                                float _2997 = _2996 * _2990;
                                float _2998 = _2996 * _2991;
                                float _2999 = _2996 * _2992;
                                float _3003 = 1.0 - (_2993 / (_2856 * _2856));
                                float _4052 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                                float _3004 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
                                float _3008 = sqrt(_2993) * _2871.w;
                                float _3010 = 1.39999997615814208984375 / (_3008 + 1.39999997615814208984375);
                                float _3011 = _3010 * _3010;
                                float _3014 = ((1.0 - _3011) * dot(vec3(_2997, _2998, _2999), vec3(_430, _433, _436))) + _3011;
                                float _3017 = _3008 * _3008;
                                float _3021 = (fma(_2175, _2899.z, fma(_2174, _2899.y, _2899.x * _2173)) + _2899.w) / _2962;
                                float _3022 = (fma(_2175, _2915.z, fma(_2174, _2915.y, _2915.x * _2173)) + _2915.w) / _2962;
                                float _3026 = 1.0 - dot(vec2(_3021, _3022), vec2(_3021, _3022));
                                float _4068 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                                float _3027 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
                                float _3028 = _3027 * (((isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0))) * _3004) / ((_3017 * 0.699999988079071044921875) + 1.0));
                                float _3040 = exp2(log2(1.0 / ((_3017 * 3.5) + 5.0)) * 0.25);
                                float _3041 = 1.0 - _506;
                                float _3048 = sqrt(1.0 - ((1.0 - (_3041 * _3041)) * (1.0 - (_3040 * _3040))));
                                float _3049 = _3048 * _3048;
                                float _3050 = _3049 * _3049;
                                float _3051 = _2997 - _2497;
                                float _3052 = _2998 - _2498;
                                float _3053 = _2999 - _2499;
                                float _3057 = inversesqrt(dot(vec3(_3051, _3052, _3053), vec3(_3051, _3052, _3053)));
                                float _3061 = dot(vec3(_430, _433, _436), vec3((-0.0) - _2497, (-0.0) - _2498, (-0.0) - _2499));
                                float _4079 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                                float _3064 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
                                float _3065 = dot(vec3(_430, _433, _436), vec3(_3057 * _3051, _3057 * _3052, _3057 * _3053));
                                float _4090 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                                float _3068 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
                                float _3072 = ((_3068 * _3068) * (_3050 + (-1.0))) + 1.0;
                                float _3073 = _3010 * _3049;
                                float _3074 = _3073 * _3073;
                                float _3080 = ((1.0 - _3074) * dot(vec3(_430, _433, _436), vec3(_2997, _2998, _2999))) + _3074;
                                float _4101 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                                float _3081 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
                                float _3082 = 1.0 - _3049;
                                float _3092 = (0.5 / (((_3081 * ((_3064 * _3082) + _3049)) + 9.9999999392252902907785028219223e-09) + (((_3081 * _3082) + _3049) * _3064))) * _3081;
                                float _4112 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                                float _3102 = (_3027 * _3004) * (((_3050 * 3.1415927410125732421875) * (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0)))) / ((_3072 * _3072) * ((_3017 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3028 * _2871.z;
                                frontier_phi_75_pred_1 = _3028 * _2871.y;
                                frontier_phi_75_pred_2 = _3028 * _2871.x;
                                frontier_phi_75_pred_3 = _3102 * _2883.z;
                                frontier_phi_75_pred_4 = _3102 * _2883.y;
                                frontier_phi_75_pred_5 = _3102 * _2883.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3111 = frontier_phi_75_pred;
                            _3110 = frontier_phi_75_pred_1;
                            _3109 = frontier_phi_75_pred_2;
                            _3108 = frontier_phi_75_pred_3;
                            _3107 = frontier_phi_75_pred_4;
                            _3106 = frontier_phi_75_pred_5;
                            _2813 = _3109 + _2826;
                            _2814 = _3110 + _2827;
                            _2815 = _3111 + _2828;
                            _2810 = _3106 + _2823;
                            _2811 = _3107 + _2824;
                            _2812 = _3108 + _2825;
                            if (_2830 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2823 = _2810;
                                _2824 = _2811;
                                _2825 = _2812;
                                _2826 = _2813;
                                _2827 = _2814;
                                _2828 = _2815;
                                _2829 = _2830;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2815;
                        frontier_phi_69_pred_1 = _2814;
                        frontier_phi_69_pred_2 = _2813;
                        frontier_phi_69_pred_3 = _2812;
                        frontier_phi_69_pred_4 = _2811;
                        frontier_phi_69_pred_5 = _2810;
                    }
                    _2482 = frontier_phi_69_pred;
                    _2480 = frontier_phi_69_pred_1;
                    _2478 = frontier_phi_69_pred_2;
                    _2476 = frontier_phi_69_pred_3;
                    _2474 = frontier_phi_69_pred_4;
                    _2472 = frontier_phi_69_pred_5;
                    uint _2617 = _2616 + 1u;
                    if (_2617 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2610 = _2472;
                        _2611 = _2474;
                        _2612 = _2476;
                        _2613 = _2478;
                        _2614 = _2480;
                        _2615 = _2482;
                        _2616 = _2617;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2482;
                frontier_phi_57_58_ladder_1 = _2480;
                frontier_phi_57_58_ladder_2 = _2478;
                frontier_phi_57_58_ladder_3 = _2476;
                frontier_phi_57_58_ladder_4 = _2474;
                frontier_phi_57_58_ladder_5 = _2472;
            }
            else
            {
                frontier_phi_57_58_ladder = _2360;
                frontier_phi_57_58_ladder_1 = _2358;
                frontier_phi_57_58_ladder_2 = _2356;
                frontier_phi_57_58_ladder_3 = _2354;
                frontier_phi_57_58_ladder_4 = _2352;
                frontier_phi_57_58_ladder_5 = _2350;
            }
            _2471 = frontier_phi_57_58_ladder_5;
            _2473 = frontier_phi_57_58_ladder_4;
            _2475 = frontier_phi_57_58_ladder_3;
            _2477 = frontier_phi_57_58_ladder_2;
            _2479 = frontier_phi_57_58_ladder_1;
            _2481 = frontier_phi_57_58_ladder;
        }
        float _2486 = isnan(1.0) ? _490 : (isnan(_490) ? 1.0 : min(_490, 1.0));
        _2231 = (_2486 * _2477) + _1668;
        _2233 = (_2486 * _2479) + _1670;
        _2235 = (_2486 * _2481) + _1672;
        _2237 = ((_2471 * _475) * _2486) + _2013;
        _2239 = ((_2473 * _477) * _2486) + _2015;
        _2241 = ((_2475 * _478) * _2486) + _2017;
    }
    else
    {
        _2231 = _1668;
        _2233 = _1670;
        _2235 = _1672;
        _2237 = _2013;
        _2239 = _2015;
        _2241 = _2017;
    }
    uint _2247 = _451 + uint(cbMatDynParam._m0[0u].w);
    float _2253 = (_296.x * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2247].x;
    float _2254 = (_296.y * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2247].y;
    float _2255 = (_296.z * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2247].z;
    float _4128 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _4139 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _4150 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _4161 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _2273 = (((isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_2231 + ((isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0))) * _490))) + ((_2237 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _1300)) * cbPerFrame._m0[3u].x)) + _2253;
    float _2275 = (_2254 + ((_2239 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _1300)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_2233 + ((isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0))) * _490)));
    float _2277 = (_2255 + ((_2241 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _1300)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_2235 + ((isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0))) * _490)));
    float _4187 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2290 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _2295 = cbInstanceData._m0[_449 + 6u].w * (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)));
    float _2300 = _408 / cbSceneParam._m0[86u].x;
    float _2301 = _409 / cbSceneParam._m0[86u].y;
    vec4 _2315 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2300, _2301, (log2((isnan(cbSceneParam._m0[77u].w) ? _341 : (isnan(_341) ? cbSceneParam._m0[77u].w : min(_341, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2317 = _2315.x;
    float _2318 = _2315.y;
    float _2319 = _2315.z;
    float _2320 = _2315.w;
    float _2412;
    float _2414;
    float _2416;
    float _2418;
    if (_341 > cbSceneParam._m0[78u].w)
    {
        float _2375 = isnan(_341) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _341 : min(cbSceneParam._m0[80u].w, _341));
        float _2376 = _2375 / _341;
        float _2387 = _2376 * _393;
        float _2388 = _394 * _2376;
        float _2389 = (-0.0) - _2388;
        float _2390 = _2376 * _395;
        float _2392 = (cbSceneParam._m0[77u].w * _2389) / _2375;
        float _2393 = _2392 + cbSceneParam._m0[79u].w;
        float _2394 = cbSceneParam._m0[79u].w - _2388;
        float _2400 = sqrt(((_2387 * _2387) + (_2388 * _2388)) + (_2390 * _2390));
        float _2403 = (1.0 - (cbSceneParam._m0[77u].w / _2375)) * _2400;
        float _2408 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2410 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2572;
        if (abs((_2389 - _2392) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2572 = ((((_2393 > 0.0) ? exp2(_2408 * _2393) : (2.0 - exp2(_2410 * _2393))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2403;
        }
        else
        {
            float _2532 = 1.0 / cbSceneParam._m0[80u].x;
            float _2533 = isnan(_2394) ? _2393 : (isnan(_2393) ? _2394 : max(_2393, _2394));
            float _2534 = isnan(_2394) ? _2393 : (isnan(_2393) ? _2394 : min(_2393, _2394));
            float _2543 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : min(_2533, 0.0));
            float _2544 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : min(_2534, 0.0));
            _2572 = ((abs(_2400 / _2389) * cbSceneParam._m0[80u].y) * ((((_2543 - _2544) * 2.0) - ((exp2(_2408 * (isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0)))) - exp2(_2408 * (isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0))))) * _2532)) - ((exp2(_2410 * _2543) - exp2(_2410 * _2544)) * _2532))) + (_2403 * cbSceneParam._m0[80u].z);
        }
        vec4 _2574 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2300, _2301, 1.0), 0.0);
        float _2583 = exp2((_2572 * (-1.44269502162933349609375)) * (1.0 - _2574.w));
        float _2584 = log2(_2583);
        float _2600 = log2(_2320);
        _2412 = (exp2(_2600 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2584 * cbSceneParam._m0[78u].x)) * _2574.x) / cbSceneParam._m0[78u].x)) + _2317;
        _2414 = (exp2(_2600 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2584 * cbSceneParam._m0[78u].y)) * _2574.y) / cbSceneParam._m0[78u].y)) + _2318;
        _2416 = (exp2(_2600 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2584 * cbSceneParam._m0[78u].z)) * _2574.z) / cbSceneParam._m0[78u].z)) + _2319;
        _2418 = _2583 * _2320;
    }
    else
    {
        _2412 = _2317;
        _2414 = _2318;
        _2416 = _2319;
        _2418 = _2320;
    }
    float _2430 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2431 = _2430 == 3.0;
    float _2432 = log2(_2418);
    float _2436 = exp2(_2432 * cbSceneParam._m0[78u].x);
    float _2437 = exp2(_2432 * cbSceneParam._m0[78u].y);
    float _2438 = exp2(_2432 * cbSceneParam._m0[78u].z);
    float _2439 = _2436 * (isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0)));
    float _2440 = _2437 * (isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0)));
    float _2441 = _2438 * (isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0)));
    float _2450 = (_2430 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2450 * (_2431 ? _2439 : (_2439 + (cbSceneParam._m0[72u].w * _2412)));
    SV_Target.y = _2450 * (_2431 ? _2440 : (_2440 + (cbSceneParam._m0[72u].w * _2414)));
    SV_Target.z = _2450 * (_2431 ? _2441 : (_2441 + (cbSceneParam._m0[72u].w * _2416)));
    SV_Target.w = _2295;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2253) * _2290) * _2436) * _2450;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2254) * _2290) * _2437) * _2450;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2255) * _2290) * _2438) * _2450;
    SV_Target_1.w = _2295;
}


