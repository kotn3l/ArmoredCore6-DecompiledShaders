#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_V_Emissive_Glow_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_V_Emissive_Glow_Addition_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_V_Emissive_Glow_Addition_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _846;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211;
    float _212;
    float _213;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
    }
    else
    {
        _211 = _197;
        _212 = _198;
        _213 = _199;
    }
    vec4 _227 = texture(sampler2D(S_AMSN_V_Emissive_Glow_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _230 = _227.x;
    float _231 = _227.y;
    float _232 = _227.z;
    vec4 _248 = texture(sampler2D(S_AMSN_V_Emissive_Glow_Addition_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _252 = _248.z;
    float _256 = (_248.x * 2.0) + (-1.0);
    float _258 = (_248.y * 2.0) + (-1.0);
    float _259 = dot(vec2(_256, _258), vec2(_256, _258));
    float _3245 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _265 = sqrt(1.0 - (isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0))));
    vec4 _278 = texture(sampler2D(S_AMSN_V_Emissive_Glow_Addition_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _288 = fma(_265, _211, fma(_258, _203 * TANGENT.x, (_189 * _182) * _256));
    float _291 = fma(_265, _212, fma(_258, _203 * TANGENT.y, (_189 * _183) * _256));
    float _294 = fma(_265, _213, fma(_258, _203 * TANGENT.z, (_189 * _184) * _256));
    float _298 = inversesqrt(dot(vec3(_288, _291, _294), vec3(_288, _291, _294)));
    float _299 = _298 * _288;
    float _300 = _298 * _291;
    float _301 = _298 * _294;
    float _3256 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _302 = isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0));
    float _3267 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3278 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3289 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3300 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _306 = isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0));
    float _322 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _364 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _374 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _364);
    float _375 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _364);
    float _376 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _364);
    float _380 = inversesqrt(dot(vec3(_374, _375, _376), vec3(_374, _375, _376)));
    float _381 = _374 * _380;
    float _382 = _375 * _380;
    float _383 = _376 * _380;
    float _389 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _390 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _411 = fma(_301, cbSceneParam._m0[5u].z, fma(_300, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _299));
    float _414 = fma(_301, cbSceneParam._m0[6u].z, fma(_300, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _299));
    float _417 = fma(_301, cbSceneParam._m0[7u].z, fma(_300, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _299));
    uint _430 = uint(roundEven(NORMAL.w)) * 13u;
    uint _432 = _430 + 9u;
    uint _433 = _432 + uint(cbMatDynParam._m0[0u].w);
    float _439 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0)))) * cbInstanceData._m0[_433].x;
    float _440 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0)))) * cbInstanceData._m0[_433].y;
    float _441 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0)))) * cbInstanceData._m0[_433].z;
    float _3311 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _442 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
    float _3322 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _443 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
    float _3333 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0));
    float _445 = 1.0 - _306;
    float _446 = _442 * _445;
    float _447 = _443 * _445;
    float _448 = _444 * _445;
    float _453 = (_442 + (-0.039999999105930328369140625)) * _306;
    float _454 = (_443 + (-0.039999999105930328369140625)) * _306;
    float _455 = (_444 + (-0.039999999105930328369140625)) * _306;
    float _456 = _453 + 0.039999999105930328369140625;
    float _458 = _454 + 0.039999999105930328369140625;
    float _459 = _455 + 0.039999999105930328369140625;
    vec4 _468 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _389, cbSceneParam._m0[86u].y * _390));
    float _471 = _468.x * TEXCOORD.z;
    float _472 = dot(vec3(_299, _300, _301), vec3(_381, _382, _383));
    float _475 = _472 * 2.0;
    float _479 = (_475 * _299) - _381;
    float _480 = (_475 * _300) - _382;
    float _481 = (_475 * _301) - _383;
    float _485 = abs(dot(vec3(_381, _382, _383), vec3(_299, _300, _301)));
    float _3344 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _487 = sqrt(_302);
    float _500 = exp2((_487 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_487 * 3.0));
    float _506 = (1.0 - _500) * ((_487 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _507 = _500 * _487;
    float _535 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _539 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _543 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _845;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _570 = fma(_543, cbModelParam._m0[26u].z, fma(_539, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _535));
        float _574 = fma(_543, cbModelParam._m0[27u].z, fma(_539, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _535));
        float _578 = fma(_543, cbModelParam._m0[28u].z, fma(_539, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _535));
        float _603 = _535 + _299;
        float _604 = _539 + _300;
        float _605 = _543 + _301;
        float _615 = fma(_605, cbModelParam._m0[26u].z, fma(_604, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _603)) - _570;
        float _616 = fma(_605, cbModelParam._m0[27u].z, fma(_604, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _603)) - _574;
        float _617 = fma(_605, cbModelParam._m0[28u].z, fma(_604, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _603)) - _578;
        float _621 = inversesqrt(dot(vec3(_615, _616, _617), vec3(_615, _616, _617)));
        float _634 = ((_621 * _615) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_570 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _635 = ((_621 * _616) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_574 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _636 = ((_621 * _617) / cbModelParam._m0[34u].z) + ((((((_578 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _639 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        vec4 _646 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        vec4 _653 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        vec4 _660 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        float _673 = exp2((_639.w + (-0.5)) * 20.0) * 2.0;
        float _674 = _673 * (_639.x + (-0.5));
        float _675 = _673 * (_639.y + (-0.5));
        float _676 = _673 * (_639.z + (-0.5));
        float _683 = exp2((_646.w + (-0.5)) * 20.0) * 2.0;
        float _684 = _683 * (_646.x + (-0.5));
        float _685 = _683 * (_646.y + (-0.5));
        float _686 = _683 * (_646.z + (-0.5));
        float _693 = exp2((_653.w + (-0.5)) * 20.0) * 2.0;
        float _694 = _693 * (_653.x + (-0.5));
        float _695 = _693 * (_653.y + (-0.5));
        float _696 = _693 * (_653.z + (-0.5));
        float _703 = exp2((_660.w + (-0.5)) * 20.0) * 2.0;
        float _704 = _703 * (_660.x + (-0.5));
        float _705 = _703 * (_660.y + (-0.5));
        float _706 = _703 * (_660.z + (-0.5));
        float _707 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _708 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _709 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _710 = _674 * 0.5;
        float _711 = _684 * 0.5;
        float _712 = _694 * 0.5;
        float _713 = dot(vec3(_710, _711, _712), vec3(_710, _711, _712));
        float _718 = (_713 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_713);
        float _727 = (dot(vec3(_299, _300, _301), vec3(_718 * _710, _718 * _711, _718 * _712)) + 1.0) * 0.5;
        float _3370 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _737 = sqrt(((_711 * _711) + (_710 * _710)) + (_712 * _712)) / (_707 + 9.9999997473787516355514526367188e-06);
        float _3381 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _738 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
        float _739 = _738 * 2.0;
        float _743 = (1.0 - _738) / (_738 + 1.0);
        float _3392 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _744 = isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0));
        float _753 = ((((1.0 - _744) * (_739 + 2.0)) * exp2(log2(isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0))) * (_739 + 1.0))) + _744) * _707;
        float _754 = _675 * 0.5;
        float _755 = _685 * 0.5;
        float _756 = _695 * 0.5;
        float _757 = dot(vec3(_754, _755, _756), vec3(_754, _755, _756));
        float _762 = (_757 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_757);
        float _770 = (dot(vec3(_299, _300, _301), vec3(_762 * _754, _762 * _755, _762 * _756)) + 1.0) * 0.5;
        float _3403 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _779 = sqrt(((_755 * _755) + (_754 * _754)) + (_756 * _756)) / (_708 + 9.9999997473787516355514526367188e-06);
        float _3414 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _780 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
        float _781 = _780 * 2.0;
        float _785 = (1.0 - _780) / (_780 + 1.0);
        float _3425 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _786 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
        float _795 = ((((1.0 - _786) * (_781 + 2.0)) * exp2(log2(isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0))) * (_781 + 1.0))) + _786) * _708;
        float _796 = _676 * 0.5;
        float _797 = _686 * 0.5;
        float _798 = _696 * 0.5;
        float _799 = dot(vec3(_796, _797, _798), vec3(_796, _797, _798));
        float _804 = (_799 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_799);
        float _812 = (dot(vec3(_299, _300, _301), vec3(_804 * _796, _804 * _797, _804 * _798)) + 1.0) * 0.5;
        float _3436 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _821 = sqrt(((_797 * _797) + (_796 * _796)) + (_798 * _798)) / (_709 + 9.9999997473787516355514526367188e-06);
        float _3447 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _822 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
        float _823 = _822 * 2.0;
        float _827 = (1.0 - _822) / (_822 + 1.0);
        float _3458 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _837 = ((((1.0 - _828) * (_823 + 2.0)) * exp2(log2(isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))) * (_823 + 1.0))) + _828) * _709;
        _845 = _676;
        _847 = _675;
        _848 = _674;
        _849 = _686;
        _850 = _685;
        _851 = _684;
        _852 = _696;
        _853 = _695;
        _854 = _694;
        _855 = _709;
        _856 = _708;
        _857 = _707;
        _858 = cbModelParam._m0[36u].z * (isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0)));
        _859 = cbModelParam._m0[36u].z * (isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0)));
        _860 = cbModelParam._m0[36u].z * (isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0)));
    }
    else
    {
        _845 = _846;
        _847 = _846;
        _848 = _846;
        _849 = _846;
        _850 = _846;
        _851 = _846;
        _852 = _846;
        _853 = _846;
        _854 = _846;
        _855 = _846;
        _856 = _846;
        _857 = _846;
        _858 = 0.0;
        _859 = 0.0;
        _860 = 0.0;
    }
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _886 = fma(_543, cbModelParam._m0[30u].z, fma(_539, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _535));
        float _890 = fma(_543, cbModelParam._m0[31u].z, fma(_539, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _535));
        float _894 = fma(_543, cbModelParam._m0[32u].z, fma(_539, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _535));
        float _917 = _535 + _299;
        float _918 = _539 + _300;
        float _919 = _543 + _301;
        float _929 = fma(_919, cbModelParam._m0[30u].z, fma(_918, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _917)) - _886;
        float _930 = fma(_919, cbModelParam._m0[31u].z, fma(_918, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _917)) - _890;
        float _931 = fma(_919, cbModelParam._m0[32u].z, fma(_918, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _917)) - _894;
        float _935 = inversesqrt(dot(vec3(_929, _930, _931), vec3(_929, _930, _931)));
        float _948 = ((_935 * _929) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_886 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _949 = ((_935 * _930) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_890 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _950 = ((_935 * _931) / cbModelParam._m0[35u].z) + ((((((_894 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        float _985 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_952.x + (-0.5));
        float _987 = _985 * (_952.y + (-0.5));
        float _988 = _985 * (_952.z + (-0.5));
        float _995 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_959.x + (-0.5));
        float _997 = _995 * (_959.y + (-0.5));
        float _998 = _995 * (_959.z + (-0.5));
        float _1005 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_966.x + (-0.5));
        float _1007 = _1005 * (_966.y + (-0.5));
        float _1008 = _1005 * (_966.z + (-0.5));
        float _1015 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_973.x + (-0.5));
        float _1017 = _1015 * (_973.y + (-0.5));
        float _1018 = _1015 * (_973.z + (-0.5));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = _986 * 0.5;
        float _1023 = _996 * 0.5;
        float _1024 = _1006 * 0.5;
        float _1025 = dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024));
        float _1030 = (_1025 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1025);
        float _1038 = (dot(vec3(_299, _300, _301), vec3(_1030 * _1022, _1030 * _1023, _1030 * _1024)) + 1.0) * 0.5;
        float _3499 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1047 = sqrt(((_1023 * _1023) + (_1022 * _1022)) + (_1024 * _1024)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3510 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _1049 = _1048 * 2.0;
        float _1053 = (1.0 - _1048) / (_1048 + 1.0);
        float _3521 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _1063 = ((((1.0 - _1054) * (_1049 + 2.0)) * exp2(log2(isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) * (_1049 + 1.0))) + _1054) * _1019;
        float _1064 = _987 * 0.5;
        float _1065 = _997 * 0.5;
        float _1066 = _1007 * 0.5;
        float _1067 = dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1080 = (dot(vec3(_299, _300, _301), vec3(_1072 * _1064, _1072 * _1065, _1072 * _1066)) + 1.0) * 0.5;
        float _3532 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1089 = sqrt(((_1065 * _1065) + (_1064 * _1064)) + (_1066 * _1066)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3543 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _3554 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * (_1091 + 1.0))) + _1096) * _1020;
        float _1106 = _988 * 0.5;
        float _1107 = _998 * 0.5;
        float _1108 = _1008 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1122 = (dot(vec3(_299, _300, _301), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _3565 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1131 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3576 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _3587 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * (_1133 + 1.0))) + _1138) * _1021;
        _1155 = _988;
        _1156 = _987;
        _1157 = _986;
        _1158 = _998;
        _1159 = _997;
        _1160 = _996;
        _1161 = _1008;
        _1162 = _1007;
        _1163 = _1006;
        _1164 = _1021;
        _1165 = _1020;
        _1166 = _1019;
        _1167 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0)));
        _1168 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
        _1169 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
    }
    else
    {
        _1155 = _846;
        _1156 = _846;
        _1157 = _846;
        _1158 = _846;
        _1159 = _846;
        _1160 = _846;
        _1161 = _846;
        _1162 = _846;
        _1163 = _846;
        _1164 = _846;
        _1165 = _846;
        _1166 = _846;
        _1167 = 0.0;
        _1168 = 0.0;
        _1169 = 0.0;
    }
    float _1179 = (cbModelParam._m0[1u].x * (_1167 - _858)) + _858;
    float _1180 = (cbModelParam._m0[1u].x * (_1168 - _859)) + _859;
    float _1181 = (cbModelParam._m0[1u].x * (_1169 - _860)) + _860;
    float _1202 = fma(_1181, cbSceneParam._m0[89u].z, fma(_1180, cbSceneParam._m0[89u].y, _1179 * cbSceneParam._m0[89u].x));
    float _1205 = fma(_1181, cbSceneParam._m0[90u].z, fma(_1180, cbSceneParam._m0[90u].y, _1179 * cbSceneParam._m0[90u].x));
    float _1208 = fma(_1181, cbSceneParam._m0[91u].z, fma(_1180, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1179));
    float _1223 = _479 * 0.5;
    float _1224 = _480 * 0.5;
    float _1225 = _481 * 0.5;
    float _1226 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_1157, _1160, _1163, _1166));
    float _1229 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_1156, _1159, _1162, _1165));
    float _1232 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_1155, _1158, _1161, _1164));
    float _1266;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1239 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_845, _849, _852, _855));
        float _1243 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_847, _850, _853, _856));
        float _1247 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_848, _851, _854, _857));
        float _1254 = dot(vec4(cbModelParam._m0[39u]), vec4(_1223, _1224, _1225, 1.0));
        _1266 = dot(vec3(isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)), isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)), isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1254) ? 0.0 : (isnan(0.0) ? _1254 : max(0.0, _1254))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1266 = 1.0;
    }
    float _1277;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1268 = dot(vec4(cbModelParam._m0[40u]), vec4(_1223, _1224, _1225, 1.0));
        _1277 = dot(vec3(isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)), isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)), isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1268) ? 0.0 : (isnan(0.0) ? _1268 : max(0.0, _1268))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1277 = 1.0;
    }
    float _1281 = (_1277 * cbModelParam._m0[1u].x) + (_1266 * (1.0 - cbModelParam._m0[1u].x));
    float _1291 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _302);
    float _1292 = isnan(_1291) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1291 : min(cbModelParam._m0[25u].z, _1291));
    float _1374;
    float _1376;
    float _1378;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1341 = fma(_543, cbModelParam._m0[13u].z, fma(_539, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _535)) + cbModelParam._m0[13u].w;
        float _1345 = fma(_543, cbModelParam._m0[14u].z, fma(_539, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _535)) + cbModelParam._m0[14u].w;
        float _1349 = fma(_543, cbModelParam._m0[15u].z, fma(_539, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _535)) + cbModelParam._m0[15u].w;
        float _1352 = fma(_481, cbModelParam._m0[13u].z, fma(_480, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _479));
        float _1355 = fma(_481, cbModelParam._m0[14u].z, fma(_480, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _479));
        float _1358 = fma(_481, cbModelParam._m0[15u].z, fma(_480, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _479));
        float _1386;
        if (_1352 > 0.0)
        {
            _1386 = abs((1.0 - _1341) / _1352);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1352 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1341 + 1.0) / _1352);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1386 = frontier_phi_16_14_ladder;
        }
        float _1615;
        if (_1355 > 0.0)
        {
            _1615 = abs((1.0 - _1345) / _1355);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1355 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1345 + 1.0) / _1355);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1615 = frontier_phi_25_21_ladder;
        }
        float _1872;
        if (_1358 > 0.0)
        {
            _1872 = abs((1.0 - _1349) / _1358);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1358 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1349 + 1.0) / _1358);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1872 = frontier_phi_37_32_ladder;
        }
        float _1874 = isnan(_1615) ? _1386 : (isnan(_1386) ? _1615 : min(_1386, _1615));
        float _1875 = isnan(_1872) ? _1874 : (isnan(_1874) ? _1872 : min(_1874, _1872));
        float _1879 = (_1875 * _1352) + _1341;
        float _1880 = (_1875 * _1355) + _1345;
        float _1881 = (_1875 * _1358) + _1349;
        float _1882 = _1875 * 9.9999997473787516355514526367188e-05;
        float _1884 = (-1.0) - _1882;
        float _1886 = _1882 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1881 > _1886) || ((_1881 < _1884) || ((_1880 > _1886) || ((_1880 < _1884) || ((_1879 < _1884) || (_1879 > _1886))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2009 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1881, cbModelParam._m0[9u].z, fma(_1880, cbModelParam._m0[9u].y, _1879 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1881, cbModelParam._m0[10u].z, fma(_1880, cbModelParam._m0[10u].y, _1879 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1881, cbModelParam._m0[11u].z, fma(_1880, cbModelParam._m0[11u].y, _1879 * cbModelParam._m0[11u].x))), _1292);
            frontier_phi_15_37_ladder = _2009.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2009.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2009.x * cbModelParam._m0[1u].y;
        }
        _1374 = frontier_phi_15_37_ladder_2;
        _1376 = frontier_phi_15_37_ladder_1;
        _1378 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1362 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_479, _480, _481), _1292);
        _1374 = _1362.x * cbModelParam._m0[1u].y;
        _1376 = _1362.y * cbModelParam._m0[1u].y;
        _1378 = _1362.z * cbModelParam._m0[1u].y;
    }
    float _1382 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _302);
    float _1383 = isnan(_1382) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1382 : min(cbModelParam._m0[25u].w, _1382));
    float _1476;
    float _1478;
    float _1480;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1440 = fma(_543, cbModelParam._m0[21u].z, fma(_539, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _535)) + cbModelParam._m0[21u].w;
        float _1444 = fma(_543, cbModelParam._m0[22u].z, fma(_539, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _535)) + cbModelParam._m0[22u].w;
        float _1448 = fma(_543, cbModelParam._m0[23u].z, fma(_539, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _535)) + cbModelParam._m0[23u].w;
        float _1451 = fma(_481, cbModelParam._m0[21u].z, fma(_480, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _479));
        float _1454 = fma(_481, cbModelParam._m0[22u].z, fma(_480, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _479));
        float _1457 = fma(_481, cbModelParam._m0[23u].z, fma(_480, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _479));
        float _1620;
        if (_1451 > 0.0)
        {
            _1620 = abs((1.0 - _1440) / _1451);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1451 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1440 + 1.0) / _1451);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1620 = frontier_phi_27_23_ladder;
        }
        float _1899;
        if (_1454 > 0.0)
        {
            _1899 = abs((1.0 - _1444) / _1454);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1454 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1444 + 1.0) / _1454);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1899 = frontier_phi_39_34_ladder;
        }
        float _2112;
        if (_1457 > 0.0)
        {
            _2112 = abs((1.0 - _1448) / _1457);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1448 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2112 = frontier_phi_48_45_ladder;
        }
        float _2114 = isnan(_1899) ? _1620 : (isnan(_1620) ? _1899 : min(_1620, _1899));
        float _2115 = isnan(_2112) ? _2114 : (isnan(_2114) ? _2112 : min(_2114, _2112));
        float _2119 = (_2115 * _1451) + _1440;
        float _2120 = (_2115 * _1454) + _1444;
        float _2121 = (_2115 * _1457) + _1448;
        float _2122 = _2115 * 9.9999997473787516355514526367188e-05;
        float _2123 = (-1.0) - _2122;
        float _2125 = _2122 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2121 > _2125) || ((_2121 < _2123) || ((_2120 > _2125) || ((_2120 < _2123) || ((_2119 < _2123) || (_2119 > _2125))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2348 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2121, cbModelParam._m0[17u].z, fma(_2120, cbModelParam._m0[17u].y, _2119 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2121, cbModelParam._m0[18u].z, fma(_2120, cbModelParam._m0[18u].y, _2119 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2121, cbModelParam._m0[19u].z, fma(_2120, cbModelParam._m0[19u].y, _2119 * cbModelParam._m0[19u].x))), _1383);
            frontier_phi_24_48_ladder = _2348.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2348.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2348.x * cbModelParam._m0[1u].z;
        }
        _1476 = frontier_phi_24_48_ladder_2;
        _1478 = frontier_phi_24_48_ladder_1;
        _1480 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1460 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_479, _480, _481), _1383);
        _1476 = _1460.x * cbModelParam._m0[1u].z;
        _1478 = _1460.y * cbModelParam._m0[1u].z;
        _1480 = _1460.z * cbModelParam._m0[1u].z;
    }
    float _1493 = (((_506 * _456) + _507) * _471) * ((cbModelParam._m0[1u].w * (_1476 - _1374)) + _1374);
    float _1495 = (((_506 * _458) + _507) * _471) * ((cbModelParam._m0[1u].w * (_1478 - _1376)) + _1376);
    float _1497 = (((_506 * _459) + _507) * _471) * ((cbModelParam._m0[1u].w * (_1480 - _1378)) + _1378);
    float _1500 = fma(_1497, cbSceneParam._m0[89u].z, fma(_1495, cbSceneParam._m0[89u].y, _1493 * cbSceneParam._m0[89u].x));
    float _1503 = fma(_1497, cbSceneParam._m0[90u].z, fma(_1495, cbSceneParam._m0[90u].y, _1493 * cbSceneParam._m0[90u].x));
    float _1506 = fma(_1497, cbSceneParam._m0[91u].z, fma(_1495, cbSceneParam._m0[91u].y, _1493 * cbSceneParam._m0[91u].x));
    vec4 _1514 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_389, _390));
    float _1516 = _1514.w;
    float _1528 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1516);
    float _1529 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1516);
    float _1530 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1516);
    uvec4 _1534 = floatBitsToUint(cbInstanceData._m0[_430 + 5u]);
    uint _1536 = _1534.x * 14u;
    uint _1537 = _1536 + 13u;
    float _1544 = _471 + (-1.0);
    float _1549 = (cbLight._m0[_1537].x * _1544) + 1.0;
    float _1550 = (cbLight._m0[_1537].y * _1544) + 1.0;
    float _1551 = (cbLight._m0[_1537].z * _1544) + 1.0;
    float _1552 = (cbLight._m0[_1537].w * _1544) + 1.0;
    uint _1553 = _1536 + 5u;
    float _1559 = isnan(1.0) ? _1550 : (isnan(_1550) ? 1.0 : min(_1550, 1.0));
    uint _1563 = _1536 + 4u;
    float _1573 = isnan(1.0) ? _1549 : (isnan(_1549) ? 1.0 : min(_1549, 1.0));
    uint _1577 = _1536 | 1u;
    float _1588 = dot(vec3(cbLight._m0[_1536].xyz), vec3(_299, _300, _301));
    float _1591 = dot(vec3(cbLight._m0[_1577].xyz), vec3(_299, _300, _301));
    float _3723 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
    float _3734 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
    float _1596 = (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * 0.3183098733425140380859375;
    float _1598 = (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * 0.3183098733425140380859375;
    float _1605 = ((cbLight._m0[_1553].x * _1559) * _1598) + (((cbLight._m0[_1563].x * _1528) * _1573) * _1596);
    float _1606 = ((_1559 * cbLight._m0[_1553].y) * _1598) + (((cbLight._m0[_1563].y * _1529) * _1573) * _1596);
    float _1607 = ((_1559 * cbLight._m0[_1553].z) * _1598) + (((cbLight._m0[_1563].z * _1530) * _1573) * _1596);
    uvec4 _1612 = floatBitsToUint(cbLight._m0[_1536 + 12u]);
    bool _1614 = _1612.x == 0u;
    float _1625;
    float _1627;
    float _1629;
    if (_1614)
    {
        _1625 = _1605;
        _1627 = _1606;
        _1629 = _1607;
    }
    else
    {
        uint _1633 = _1536 + 6u;
        float _1649 = (dot(vec3(cbLight._m0[_1536 + 2u].xyz), vec3(_299, _300, _301)) * 0.5) + 0.5;
        float _1650 = _1649 * _1649;
        float _3745 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1652 = isnan(1.0) ? _1551 : (isnan(_1551) ? 1.0 : min(_1551, 1.0));
        _1625 = (((cbLight._m0[_1633].x * 0.3183098733425140380859375) * _1651) * _1652) + _1605;
        _1627 = (((cbLight._m0[_1633].y * 0.3183098733425140380859375) * _1651) * _1652) + _1606;
        _1629 = (((cbLight._m0[_1633].z * 0.3183098733425140380859375) * _1651) * _1652) + _1607;
    }
    bool _1632 = _1612.y == 0u;
    float _1670;
    float _1672;
    float _1674;
    if (_1632)
    {
        _1670 = _1625;
        _1672 = _1627;
        _1674 = _1629;
    }
    else
    {
        uint _1843 = _1536 + 7u;
        float _1859 = (dot(vec3(cbLight._m0[_1536 + 3u].xyz), vec3(_299, _300, _301)) * 0.5) + 0.5;
        float _1860 = _1859 * _1859;
        float _3761 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
        float _1861 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1862 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
        _1670 = (((cbLight._m0[_1843].x * 0.3183098733425140380859375) * _1861) * _1862) + _1625;
        _1672 = (((cbLight._m0[_1843].y * 0.3183098733425140380859375) * _1861) * _1862) + _1627;
        _1674 = (((cbLight._m0[_1843].z * 0.3183098733425140380859375) * _1861) * _1862) + _1629;
    }
    uint _1677 = _1536 + 8u;
    float _1690 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1536].w)) * _302) * 0.949999988079071044921875);
    float _1691 = _1690 * _1690;
    float _1692 = cbLight._m0[_1536].x + _381;
    float _1693 = cbLight._m0[_1536].y + _382;
    float _1694 = cbLight._m0[_1536].z + _383;
    float _1698 = inversesqrt(dot(vec3(_1692, _1693, _1694), vec3(_1692, _1693, _1694)));
    float _1699 = _1698 * _1692;
    float _1700 = _1698 * _1693;
    float _1701 = _1698 * _1694;
    float _1702 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_1536].xyz));
    float _3777 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
    float _1705 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _3788 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _1706 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _1707 = dot(vec3(_299, _300, _301), vec3(_1699, _1700, _1701));
    float _3799 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
    float _1710 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _1711 = dot(vec3(cbLight._m0[_1536].xyz), vec3(_1699, _1700, _1701));
    float _3810 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
    float _1715 = _1691 * _1691;
    float _1719 = ((_1710 * _1710) * (_1715 + (-1.0))) + 1.0;
    float _1727 = exp2(log2(1.0 - (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0)))) * 5.0);
    float _1728 = 0.959999978542327880859375 - _453;
    float _1730 = 0.959999978542327880859375 - _454;
    float _1731 = 0.959999978542327880859375 - _455;
    float _1738 = 1.0 - _1691;
    float _1749 = (0.5 / (((_1706 * ((_1705 * _1738) + _1691)) + 9.9999999392252902907785028219223e-09) + (((_1706 * _1738) + _1691) * _1705))) * _1705;
    float _3821 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
    float _1751 = (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_1715 / ((_1719 * _1719) * 3.141590118408203125));
    uint _1765 = _1536 + 9u;
    float _1776 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1577].w)) * _302) * 0.949999988079071044921875);
    float _1777 = _1776 * _1776;
    float _1778 = cbLight._m0[_1577].x + _381;
    float _1779 = cbLight._m0[_1577].y + _382;
    float _1780 = cbLight._m0[_1577].z + _383;
    float _1784 = inversesqrt(dot(vec3(_1778, _1779, _1780), vec3(_1778, _1779, _1780)));
    float _1785 = _1784 * _1778;
    float _1786 = _1784 * _1779;
    float _1787 = _1784 * _1780;
    float _1788 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_1577].xyz));
    float _3832 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1791 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _1792 = dot(vec3(_299, _300, _301), vec3(_1785, _1786, _1787));
    float _3843 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1795 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _1796 = dot(vec3(cbLight._m0[_1577].xyz), vec3(_1785, _1786, _1787));
    float _3854 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1800 = _1777 * _1777;
    float _1804 = ((_1795 * _1795) * (_1800 + (-1.0))) + 1.0;
    float _1811 = exp2(log2(1.0 - (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0)))) * 5.0);
    float _1818 = 1.0 - _1777;
    float _1828 = (0.5 / (((_1706 * ((_1791 * _1818) + _1777)) + 9.9999999392252902907785028219223e-09) + (((_1706 * _1818) + _1777) * _1791))) * _1791;
    float _3865 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1830 = (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1800 / ((_1804 * _1804) * 3.141590118408203125));
    float _1840 = (((((_1811 * _1728) + _456) * cbLight._m0[_1765].x) * _1830) * _1559) + ((((cbLight._m0[_1677].x * _1528) * ((_1727 * _1728) + _456)) * _1751) * _1573);
    float _1841 = (((((_1811 * _1730) + _458) * cbLight._m0[_1765].y) * _1830) * _1559) + ((((cbLight._m0[_1677].y * _1529) * ((_1727 * _1730) + _458)) * _1751) * _1573);
    float _1842 = (((((_1811 * _1731) + _459) * cbLight._m0[_1765].z) * _1830) * _1559) + ((((cbLight._m0[_1677].z * _1530) * ((_1727 * _1731) + _459)) * _1751) * _1573);
    float _1904;
    float _1906;
    float _1908;
    if (_1614)
    {
        _1904 = _1840;
        _1906 = _1841;
        _1908 = _1842;
    }
    else
    {
        uint _1910 = _1536 + 2u;
        uint _1914 = _1536 + 10u;
        float _1928 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1910].w)) * _302) * 0.949999988079071044921875);
        float _1929 = _1928 * _1928;
        float _1930 = cbLight._m0[_1910].x + _381;
        float _1931 = cbLight._m0[_1910].y + _382;
        float _1932 = cbLight._m0[_1910].z + _383;
        float _1936 = inversesqrt(dot(vec3(_1930, _1931, _1932), vec3(_1930, _1931, _1932)));
        float _1937 = _1936 * _1930;
        float _1938 = _1936 * _1931;
        float _1939 = _1936 * _1932;
        float _1940 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_1910].xyz));
        float _3876 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
        float _1943 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1944 = dot(vec3(_299, _300, _301), vec3(_1937, _1938, _1939));
        float _3887 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1947 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1948 = dot(vec3(cbLight._m0[_1910].xyz), vec3(_1937, _1938, _1939));
        float _3898 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        float _1952 = _1929 * _1929;
        float _1956 = ((_1947 * _1947) * (_1952 + (-1.0))) + 1.0;
        float _1963 = exp2(log2(1.0 - (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0)))) * 5.0);
        float _1970 = 1.0 - _1929;
        float _1980 = (0.5 / (((_1706 * ((_1943 * _1970) + _1929)) + 9.9999999392252902907785028219223e-09) + (((_1706 * _1970) + _1929) * _1943))) * _1943;
        float _3909 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1982 = (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * (_1952 / ((_1956 * _1956) * 3.141590118408203125));
        float _1983 = isnan(1.0) ? _1551 : (isnan(_1551) ? 1.0 : min(_1551, 1.0));
        _1904 = (((((_1963 * _1728) + _456) * cbLight._m0[_1914].x) * _1982) * _1983) + _1840;
        _1906 = (((((_1963 * _1730) + _458) * cbLight._m0[_1914].y) * _1982) * _1983) + _1841;
        _1908 = (((((_1963 * _1731) + _459) * cbLight._m0[_1914].z) * _1982) * _1983) + _1842;
    }
    float _2018;
    float _2020;
    float _2022;
    if (_1632)
    {
        _2018 = _1904;
        _2020 = _1906;
        _2022 = _1908;
    }
    else
    {
        uint _2029 = _1536 + 3u;
        uint _2033 = _1536 + 11u;
        float _2047 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2029].w)) * _302) * 0.949999988079071044921875);
        float _2048 = _2047 * _2047;
        float _2049 = cbLight._m0[_2029].x + _381;
        float _2050 = cbLight._m0[_2029].y + _382;
        float _2051 = cbLight._m0[_2029].z + _383;
        float _2055 = inversesqrt(dot(vec3(_2049, _2050, _2051), vec3(_2049, _2050, _2051)));
        float _2056 = _2055 * _2049;
        float _2057 = _2055 * _2050;
        float _2058 = _2055 * _2051;
        float _2059 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_2029].xyz));
        float _3925 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
        float _2062 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _2063 = dot(vec3(_299, _300, _301), vec3(_2056, _2057, _2058));
        float _3936 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2066 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _2067 = dot(vec3(cbLight._m0[_2029].xyz), vec3(_2056, _2057, _2058));
        float _3947 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2071 = _2048 * _2048;
        float _2075 = ((_2066 * _2066) * (_2071 + (-1.0))) + 1.0;
        float _2082 = exp2(log2(1.0 - (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) * 5.0);
        float _2089 = 1.0 - _2048;
        float _2099 = (0.5 / (((_1706 * ((_2062 * _2089) + _2048)) + 9.9999999392252902907785028219223e-09) + (((_1706 * _2089) + _2048) * _2062))) * _2062;
        float _3958 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2101 = (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_2071 / ((_2075 * _2075) * 3.141590118408203125));
        float _2102 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
        _2018 = (((((_2082 * _1728) + _456) * cbLight._m0[_2033].x) * _2101) * _2102) + _1904;
        _2020 = (((((_2082 * _1730) + _458) * cbLight._m0[_2033].y) * _2101) * _2102) + _1906;
        _2022 = (((((_2082 * _1731) + _459) * cbLight._m0[_2033].z) * _2101) * _2102) + _1908;
    }
    float _2236;
    float _2238;
    float _2240;
    float _2242;
    float _2244;
    float _2246;
    if (_1534.y == 0u)
    {
        float _2177 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2178 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2177;
        float _2179 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2177;
        float _2180 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2177;
        uvec4 _2192 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2193 = _2192.x;
        uint _2204 = uint((float(_2192.y) * floor(float(uint(cbSceneParam._m0[85u].y * _390) / _2193))) + floor(float(uint(cbSceneParam._m0[85u].x * _389) / _2193)));
        float _2214 = (log2(_2180 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2215 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        uint _2218 = uint(isnan(14.0) ? _2215 : (isnan(_2215) ? 14.0 : min(_2215, 14.0)));
        uvec4 _2223 = texelFetch(g_lightClusterGridBuffer, int(((_2218 << 2u) + (_2204 << 6u)) >> 2u));
        uint _2224 = _2223.x;
        uint _2225 = _2192.z;
        float _2353;
        float _2355;
        float _2357;
        float _2359;
        float _2361;
        float _2363;
        if (((((1u << ((_2225 >> 4u) & 15u)) + 4294967295u) & _2224) == 0u) || ((_2225 & 240u) == 0u))
        {
            _2353 = 0.0;
            _2355 = 0.0;
            _2357 = 0.0;
            _2359 = 0.0;
            _2361 = 0.0;
            _2363 = 0.0;
        }
        else
        {
            float _2354;
            float _2356;
            float _2358;
            float _2360;
            float _2362;
            float _2364;
            float _2506 = 0.0;
            float _2507 = 0.0;
            float _2508 = 0.0;
            float _2509 = 0.0;
            float _2510 = 0.0;
            float _2511 = 0.0;
            uint _2512 = 0u;
            uint _2521;
            bool _2522;
            for (;;)
            {
                _2521 = texelFetch(g_lightClassification, int((((_2218 << 5u) + (_2204 << 9u)) + (_2512 << 2u)) >> 2u)).x;
                _2522 = _2521 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2522)
                {
                    frontier_phi_63_pred = _2511;
                    frontier_phi_63_pred_1 = _2510;
                    frontier_phi_63_pred_2 = _2509;
                    frontier_phi_63_pred_3 = _2508;
                    frontier_phi_63_pred_4 = _2507;
                    frontier_phi_63_pred_5 = _2506;
                }
                else
                {
                    float _2630;
                    float _2631;
                    float _2632;
                    float _2633;
                    float _2634;
                    float _2635;
                    uint _2636;
                    _2630 = _2506;
                    _2631 = _2507;
                    _2632 = _2508;
                    _2633 = _2509;
                    _2634 = _2510;
                    _2635 = _2511;
                    _2636 = _2521;
                    float _2562;
                    float _2563;
                    float _2564;
                    float _2565;
                    float _2566;
                    float _2567;
                    for (;;)
                    {
                        uint _2640 = uint(findLSB(_2636)) + (_2512 << 5u);
                        uint _2637 = (_2636 + 4294967295u) & _2636;
                        uint _2642 = _2640 * 48u;
                        vec4 _2656 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2642)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 3u)).x));
                        uint _2662 = (_2640 * 48u) + 4u;
                        vec4 _2675 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2662)).x, texelFetch(g_PointLightRenderingBuffer, int(_2662 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2662 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2662 + 3u)).x));
                        uint _2681 = (_2640 * 48u) + 8u;
                        vec3 _2692 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2681)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 2u)).x));
                        float _2696 = _2656.x - _2178;
                        float _2697 = _2656.y - _2179;
                        float _2698 = _2656.z - _2180;
                        float _2699 = dot(vec3(_2696, _2697, _2698), vec3(_2696, _2697, _2698));
                        float _2702 = inversesqrt(_2699);
                        float _2703 = _2702 * _2696;
                        float _2704 = _2702 * _2697;
                        float _2705 = _2702 * _2698;
                        float _2706 = dot(vec3(_411, _414, _417), vec3(_2703, _2704, _2705));
                        float _2711 = 1.0 - (_2699 * _2656.w);
                        float _3984 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
                        float _2712 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
                        float _2713 = sqrt(_2699) * _2675.w;
                        float _2716 = 1.39999997615814208984375 / (_2713 + 1.39999997615814208984375);
                        float _2717 = _2716 * _2716;
                        float _2720 = ((1.0 - _2717) * _2706) + _2717;
                        float _2723 = _2713 * _2713;
                        float _2727 = ((isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0))) * _2712) / ((_2723 * 0.699999988079071044921875) + 1.0);
                        float _2731 = (-0.0) - _2178;
                        float _2732 = (-0.0) - _2179;
                        float _2733 = (-0.0) - _2180;
                        float _2737 = inversesqrt(dot(vec3(_2731, _2732, _2733), vec3(_2731, _2732, _2733)));
                        float _2738 = _2737 * _2731;
                        float _2739 = _2737 * _2732;
                        float _2740 = _2737 * _2733;
                        float _2748 = exp2(log2(1.0 / ((_2723 * 3.5) + 5.0)) * 0.25);
                        float _2749 = 1.0 - _487;
                        float _2756 = sqrt(1.0 - ((1.0 - (_2749 * _2749)) * (1.0 - (_2748 * _2748))));
                        float _2757 = _2756 * _2756;
                        float _2758 = _2757 * _2757;
                        float _2759 = _2738 + _2703;
                        float _2760 = _2739 + _2704;
                        float _2761 = _2740 + _2705;
                        float _2765 = inversesqrt(dot(vec3(_2759, _2760, _2761), vec3(_2759, _2760, _2761)));
                        float _2769 = dot(vec3(_411, _414, _417), vec3(_2738, _2739, _2740));
                        float _4000 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
                        float _2772 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
                        float _2773 = dot(vec3(_411, _414, _417), vec3(_2765 * _2759, _2765 * _2760, _2765 * _2761));
                        float _4011 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
                        float _2776 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
                        float _2780 = ((_2776 * _2776) * (_2758 + (-1.0))) + 1.0;
                        float _2781 = _2716 * _2757;
                        float _2782 = _2781 * _2781;
                        float _2785 = ((1.0 - _2782) * _2706) + _2782;
                        float _4022 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
                        float _2786 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
                        float _2787 = 1.0 - _2757;
                        float _2797 = (0.5 / (((_2786 * ((_2772 * _2787) + _2757)) + 9.9999999392252902907785028219223e-09) + (((_2786 * _2787) + _2757) * _2772))) * _2786;
                        float _4033 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
                        float _2808 = (((_2758 * 3.1415927410125732421875) * (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) / ((_2780 * _2780) * ((_2723 * 2.1991131305694580078125) + 3.141590118408203125))) * _2712;
                        _2565 = (_2727 * _2675.x) + _2633;
                        _2566 = (_2727 * _2675.y) + _2634;
                        _2567 = (_2727 * _2675.z) + _2635;
                        _2562 = (_2808 * _2692.x) + _2630;
                        _2563 = (_2808 * _2692.y) + _2631;
                        _2564 = (_2808 * _2692.z) + _2632;
                        if (_2637 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2630 = _2562;
                            _2631 = _2563;
                            _2632 = _2564;
                            _2633 = _2565;
                            _2634 = _2566;
                            _2635 = _2567;
                            _2636 = _2637;
                        }
                    }
                    frontier_phi_63_pred = _2567;
                    frontier_phi_63_pred_1 = _2566;
                    frontier_phi_63_pred_2 = _2565;
                    frontier_phi_63_pred_3 = _2564;
                    frontier_phi_63_pred_4 = _2563;
                    frontier_phi_63_pred_5 = _2562;
                }
                _2364 = frontier_phi_63_pred;
                _2362 = frontier_phi_63_pred_1;
                _2360 = frontier_phi_63_pred_2;
                _2358 = frontier_phi_63_pred_3;
                _2356 = frontier_phi_63_pred_4;
                _2354 = frontier_phi_63_pred_5;
                uint _2513 = _2512 + 1u;
                if (_2513 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2506 = _2354;
                    _2507 = _2356;
                    _2508 = _2358;
                    _2509 = _2360;
                    _2510 = _2362;
                    _2511 = _2364;
                    _2512 = _2513;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2353 = _2354;
            _2355 = _2356;
            _2357 = _2358;
            _2359 = _2360;
            _2361 = _2362;
            _2363 = _2364;
        }
        uvec4 _2367 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2368 = _2367.z;
        uint _2370 = (_2368 >> 8u) & 15u;
        float _2474;
        float _2476;
        float _2478;
        float _2480;
        float _2482;
        float _2484;
        if (((4294967295u << _2370) & _2224) == 0u)
        {
            _2474 = _2353;
            _2476 = _2355;
            _2478 = _2357;
            _2480 = _2359;
            _2482 = _2361;
            _2484 = _2363;
        }
        else
        {
            float _2499 = inversesqrt(dot(vec3(_2178, _2179, _2180), vec3(_2178, _2179, _2180)));
            float _2500 = _2499 * _2178;
            float _2501 = _2499 * _2179;
            float _2502 = _2499 * _2180;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2370 < ((_2368 >> 12u) & 15u))
            {
                float _2475;
                float _2477;
                float _2479;
                float _2481;
                float _2483;
                float _2485;
                float _2613 = _2353;
                float _2614 = _2355;
                float _2615 = _2357;
                float _2616 = _2359;
                float _2617 = _2361;
                float _2618 = _2363;
                uint _2619 = _2370;
                uint _2628;
                bool _2629;
                for (;;)
                {
                    _2628 = texelFetch(g_lightClassification, int((((_2218 << 5u) + (_2204 << 9u)) + (_2619 << 2u)) >> 2u)).x;
                    _2629 = _2628 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2629)
                    {
                        frontier_phi_69_pred = _2618;
                        frontier_phi_69_pred_1 = _2617;
                        frontier_phi_69_pred_2 = _2616;
                        frontier_phi_69_pred_3 = _2615;
                        frontier_phi_69_pred_4 = _2614;
                        frontier_phi_69_pred_5 = _2613;
                    }
                    else
                    {
                        float _2813;
                        float _2814;
                        float _2815;
                        float _2816;
                        float _2817;
                        float _2818;
                        float _3109;
                        float _3110;
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3114;
                        float _2826 = _2613;
                        float _2827 = _2614;
                        float _2828 = _2615;
                        float _2829 = _2616;
                        float _2830 = _2617;
                        float _2831 = _2618;
                        uint _2832 = _2628;
                        uint _2833;
                        vec4 _2858;
                        float _2859;
                        vec4 _2874;
                        vec3 _2886;
                        vec4 _2902;
                        vec4 _2918;
                        float _2965;
                        bool _2966;
                        for (;;)
                        {
                            uint _2843 = ((_2619 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2832));
                            _2833 = (_2832 + 4294967295u) & _2832;
                            uint _2845 = _2843 * 40u;
                            _2858 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2845)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 3u)).x));
                            _2859 = _2858.w;
                            uint _2861 = (_2843 * 40u) + 4u;
                            _2874 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 3u)).x));
                            uint _2876 = (_2843 * 40u) + 8u;
                            _2886 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2876)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 2u)).x));
                            uint _2889 = (_2843 * 40u) + 16u;
                            _2902 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2889)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 3u)).x));
                            uint _2905 = (_2843 * 40u) + 20u;
                            _2918 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2905)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 3u)).x));
                            uint _2921 = (_2843 * 40u) + 24u;
                            vec4 _2934 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 3u)).x));
                            uint _2940 = (_2843 * 40u) + 28u;
                            vec4 _2953 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2940)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 3u)).x));
                            _2965 = fma(_2180, _2953.z, fma(_2179, _2953.y, _2953.x * _2178)) + _2953.w;
                            _2966 = !((fma(_2180, _2934.z, fma(_2179, _2934.y, _2934.x * _2178)) + _2934.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2966)
                            {
                                float _2993 = _2858.x - _2178;
                                float _2994 = _2858.y - _2179;
                                float _2995 = _2858.z - _2180;
                                float _2996 = dot(vec3(_2993, _2994, _2995), vec3(_2993, _2994, _2995));
                                float _2999 = inversesqrt(_2996);
                                float _3000 = _2999 * _2993;
                                float _3001 = _2999 * _2994;
                                float _3002 = _2999 * _2995;
                                float _3006 = 1.0 - (_2996 / (_2859 * _2859));
                                float _4044 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                                float _3007 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
                                float _3011 = sqrt(_2996) * _2874.w;
                                float _3013 = 1.39999997615814208984375 / (_3011 + 1.39999997615814208984375);
                                float _3014 = _3013 * _3013;
                                float _3017 = ((1.0 - _3014) * dot(vec3(_3000, _3001, _3002), vec3(_411, _414, _417))) + _3014;
                                float _3020 = _3011 * _3011;
                                float _3024 = (fma(_2180, _2902.z, fma(_2179, _2902.y, _2902.x * _2178)) + _2902.w) / _2965;
                                float _3025 = (fma(_2180, _2918.z, fma(_2179, _2918.y, _2918.x * _2178)) + _2918.w) / _2965;
                                float _3029 = 1.0 - dot(vec2(_3024, _3025), vec2(_3024, _3025));
                                float _4060 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                                float _3030 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
                                float _3031 = _3030 * (((isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0))) * _3007) / ((_3020 * 0.699999988079071044921875) + 1.0));
                                float _3043 = exp2(log2(1.0 / ((_3020 * 3.5) + 5.0)) * 0.25);
                                float _3044 = 1.0 - _487;
                                float _3051 = sqrt(1.0 - ((1.0 - (_3044 * _3044)) * (1.0 - (_3043 * _3043))));
                                float _3052 = _3051 * _3051;
                                float _3053 = _3052 * _3052;
                                float _3054 = _3000 - _2500;
                                float _3055 = _3001 - _2501;
                                float _3056 = _3002 - _2502;
                                float _3060 = inversesqrt(dot(vec3(_3054, _3055, _3056), vec3(_3054, _3055, _3056)));
                                float _3064 = dot(vec3(_411, _414, _417), vec3((-0.0) - _2500, (-0.0) - _2501, (-0.0) - _2502));
                                float _4071 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                                float _3067 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
                                float _3068 = dot(vec3(_411, _414, _417), vec3(_3060 * _3054, _3060 * _3055, _3060 * _3056));
                                float _4082 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                                float _3071 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
                                float _3075 = ((_3071 * _3071) * (_3053 + (-1.0))) + 1.0;
                                float _3076 = _3013 * _3052;
                                float _3077 = _3076 * _3076;
                                float _3083 = ((1.0 - _3077) * dot(vec3(_411, _414, _417), vec3(_3000, _3001, _3002))) + _3077;
                                float _4093 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                                float _3084 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
                                float _3085 = 1.0 - _3052;
                                float _3095 = (0.5 / (((_3084 * ((_3067 * _3085) + _3052)) + 9.9999999392252902907785028219223e-09) + (((_3084 * _3085) + _3052) * _3067))) * _3084;
                                float _4104 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                                float _3105 = (_3030 * _3007) * (((_3053 * 3.1415927410125732421875) * (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0)))) / ((_3075 * _3075) * ((_3020 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3031 * _2874.z;
                                frontier_phi_75_pred_1 = _3031 * _2874.y;
                                frontier_phi_75_pred_2 = _3031 * _2874.x;
                                frontier_phi_75_pred_3 = _3105 * _2886.z;
                                frontier_phi_75_pred_4 = _3105 * _2886.y;
                                frontier_phi_75_pred_5 = _3105 * _2886.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3114 = frontier_phi_75_pred;
                            _3113 = frontier_phi_75_pred_1;
                            _3112 = frontier_phi_75_pred_2;
                            _3111 = frontier_phi_75_pred_3;
                            _3110 = frontier_phi_75_pred_4;
                            _3109 = frontier_phi_75_pred_5;
                            _2816 = _3112 + _2829;
                            _2817 = _3113 + _2830;
                            _2818 = _3114 + _2831;
                            _2813 = _3109 + _2826;
                            _2814 = _3110 + _2827;
                            _2815 = _3111 + _2828;
                            if (_2833 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2826 = _2813;
                                _2827 = _2814;
                                _2828 = _2815;
                                _2829 = _2816;
                                _2830 = _2817;
                                _2831 = _2818;
                                _2832 = _2833;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2818;
                        frontier_phi_69_pred_1 = _2817;
                        frontier_phi_69_pred_2 = _2816;
                        frontier_phi_69_pred_3 = _2815;
                        frontier_phi_69_pred_4 = _2814;
                        frontier_phi_69_pred_5 = _2813;
                    }
                    _2485 = frontier_phi_69_pred;
                    _2483 = frontier_phi_69_pred_1;
                    _2481 = frontier_phi_69_pred_2;
                    _2479 = frontier_phi_69_pred_3;
                    _2477 = frontier_phi_69_pred_4;
                    _2475 = frontier_phi_69_pred_5;
                    uint _2620 = _2619 + 1u;
                    if (_2620 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2613 = _2475;
                        _2614 = _2477;
                        _2615 = _2479;
                        _2616 = _2481;
                        _2617 = _2483;
                        _2618 = _2485;
                        _2619 = _2620;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2485;
                frontier_phi_57_58_ladder_1 = _2483;
                frontier_phi_57_58_ladder_2 = _2481;
                frontier_phi_57_58_ladder_3 = _2479;
                frontier_phi_57_58_ladder_4 = _2477;
                frontier_phi_57_58_ladder_5 = _2475;
            }
            else
            {
                frontier_phi_57_58_ladder = _2363;
                frontier_phi_57_58_ladder_1 = _2361;
                frontier_phi_57_58_ladder_2 = _2359;
                frontier_phi_57_58_ladder_3 = _2357;
                frontier_phi_57_58_ladder_4 = _2355;
                frontier_phi_57_58_ladder_5 = _2353;
            }
            _2474 = frontier_phi_57_58_ladder_5;
            _2476 = frontier_phi_57_58_ladder_4;
            _2478 = frontier_phi_57_58_ladder_3;
            _2480 = frontier_phi_57_58_ladder_2;
            _2482 = frontier_phi_57_58_ladder_1;
            _2484 = frontier_phi_57_58_ladder;
        }
        float _2489 = isnan(1.0) ? _471 : (isnan(_471) ? 1.0 : min(_471, 1.0));
        _2236 = (_2489 * _2480) + _1670;
        _2238 = (_2489 * _2482) + _1672;
        _2240 = (_2489 * _2484) + _1674;
        _2242 = ((_2474 * _456) * _2489) + _2018;
        _2244 = ((_2476 * _458) * _2489) + _2020;
        _2246 = ((_2478 * _459) * _2489) + _2022;
    }
    else
    {
        _2236 = _1670;
        _2238 = _1672;
        _2240 = _1674;
        _2242 = _2018;
        _2244 = _2020;
        _2246 = _2022;
    }
    uint _2252 = _432 + uint(cbMatDynParam._m0[0u].w);
    float _2258 = (_278.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2252].x;
    float _2259 = (_278.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2252].y;
    float _2260 = (_278.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2252].z;
    float _4120 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _4131 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _4142 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _2277 = (((isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_2236 + ((isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0))) * _471))) + ((_2242 + ((isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))) * _1281)) * cbPerFrame._m0[3u].x)) + _2258;
    float _2279 = (_2259 + ((_2244 + ((isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))) * _1281)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_2238 + ((isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0))) * _471)));
    float _2281 = (_2260 + ((_2246 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _1281)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_2240 + ((isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0))) * _471)));
    float _4168 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2294 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    uint _2295 = _430 + 6u;
    float _2303 = _389 / cbSceneParam._m0[86u].x;
    float _2304 = _390 / cbSceneParam._m0[86u].y;
    vec4 _2318 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2303, _2304, (log2((isnan(cbSceneParam._m0[77u].w) ? _322 : (isnan(_322) ? cbSceneParam._m0[77u].w : min(_322, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2320 = _2318.x;
    float _2321 = _2318.y;
    float _2322 = _2318.z;
    float _2323 = _2318.w;
    float _2415;
    float _2417;
    float _2419;
    float _2421;
    if (_322 > cbSceneParam._m0[78u].w)
    {
        float _2378 = isnan(_322) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _322 : min(cbSceneParam._m0[80u].w, _322));
        float _2379 = _2378 / _322;
        float _2390 = _2379 * _374;
        float _2391 = _375 * _2379;
        float _2392 = (-0.0) - _2391;
        float _2393 = _2379 * _376;
        float _2395 = (cbSceneParam._m0[77u].w * _2392) / _2378;
        float _2396 = _2395 + cbSceneParam._m0[79u].w;
        float _2397 = cbSceneParam._m0[79u].w - _2391;
        float _2403 = sqrt(((_2390 * _2390) + (_2391 * _2391)) + (_2393 * _2393));
        float _2406 = (1.0 - (cbSceneParam._m0[77u].w / _2378)) * _2403;
        float _2411 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2413 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2575;
        if (abs((_2392 - _2395) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2575 = ((((_2396 > 0.0) ? exp2(_2411 * _2396) : (2.0 - exp2(_2413 * _2396))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2406;
        }
        else
        {
            float _2535 = 1.0 / cbSceneParam._m0[80u].x;
            float _2536 = isnan(_2397) ? _2396 : (isnan(_2396) ? _2397 : max(_2396, _2397));
            float _2537 = isnan(_2397) ? _2396 : (isnan(_2396) ? _2397 : min(_2396, _2397));
            float _2546 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : min(_2536, 0.0));
            float _2547 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : min(_2537, 0.0));
            _2575 = ((abs(_2403 / _2392) * cbSceneParam._m0[80u].y) * ((((_2546 - _2547) * 2.0) - ((exp2(_2411 * (isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0)))) - exp2(_2411 * (isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0))))) * _2535)) - ((exp2(_2413 * _2546) - exp2(_2413 * _2547)) * _2535))) + (_2406 * cbSceneParam._m0[80u].z);
        }
        vec4 _2577 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2303, _2304, 1.0), 0.0);
        float _2586 = exp2((_2575 * (-1.44269502162933349609375)) * (1.0 - _2577.w));
        float _2587 = log2(_2586);
        float _2603 = log2(_2323);
        _2415 = (exp2(_2603 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2587 * cbSceneParam._m0[78u].x)) * _2577.x) / cbSceneParam._m0[78u].x)) + _2320;
        _2417 = (exp2(_2603 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2587 * cbSceneParam._m0[78u].y)) * _2577.y) / cbSceneParam._m0[78u].y)) + _2321;
        _2419 = (exp2(_2603 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2587 * cbSceneParam._m0[78u].z)) * _2577.z) / cbSceneParam._m0[78u].z)) + _2322;
        _2421 = _2586 * _2323;
    }
    else
    {
        _2415 = _2320;
        _2417 = _2321;
        _2419 = _2322;
        _2421 = _2323;
    }
    float _2433 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2434 = _2433 == 3.0;
    float _2435 = log2(_2421);
    float _2439 = exp2(_2435 * cbSceneParam._m0[78u].x);
    float _2440 = exp2(_2435 * cbSceneParam._m0[78u].y);
    float _2441 = exp2(_2435 * cbSceneParam._m0[78u].z);
    float _2442 = _2439 * (isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0)));
    float _2443 = _2440 * (isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0)));
    float _2444 = _2441 * (isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0)));
    float _2453 = (_2433 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2453 * (_2434 ? _2442 : (_2442 + (cbSceneParam._m0[72u].w * _2415)));
    SV_Target.y = _2453 * (_2434 ? _2443 : (_2443 + (cbSceneParam._m0[72u].w * _2417)));
    SV_Target.z = _2453 * (_2434 ? _2444 : (_2444 + (cbSceneParam._m0[72u].w * _2419)));
    SV_Target.w = cbInstanceData._m0[_2295].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2258) * _2294) * _2439) * _2453;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2259) * _2294) * _2440) * _2453;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2260) * _2294) * _2441) * _2453;
    SV_Target_1.w = cbInstanceData._m0[_2295].w;
}


