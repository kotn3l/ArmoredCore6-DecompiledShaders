#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_V_Emissive_Glow_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_V_Emissive_Glow_Addition_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_V_Emissive_Glow_Addition_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _848;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    vec4 _229 = texture(sampler2D(S_AMSN_V_Emissive_Glow_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _232 = _229.x;
    float _233 = _229.y;
    float _234 = _229.z;
    vec4 _250 = texture(sampler2D(S_AMSN_V_Emissive_Glow_Addition_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _254 = _250.z;
    float _258 = (_250.x * 2.0) + (-1.0);
    float _260 = (_250.y * 2.0) + (-1.0);
    float _261 = dot(vec2(_258, _260), vec2(_258, _260));
    float _3506 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _267 = sqrt(1.0 - (isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))));
    vec4 _280 = texture(sampler2D(S_AMSN_V_Emissive_Glow_Addition_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _290 = fma(_267, _213, fma(_260, _205 * TANGENT.x, (_191 * _184) * _258));
    float _293 = fma(_267, _214, fma(_260, _205 * TANGENT.y, (_191 * _185) * _258));
    float _296 = fma(_267, _215, fma(_260, _205 * TANGENT.z, (_191 * _186) * _258));
    float _300 = inversesqrt(dot(vec3(_290, _293, _296), vec3(_290, _293, _296)));
    float _301 = _300 * _290;
    float _302 = _300 * _293;
    float _303 = _300 * _296;
    float _3517 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _304 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    float _3528 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3539 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3550 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3561 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _308 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    float _324 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _366 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _376 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _366);
    float _377 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _366);
    float _378 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _366);
    float _382 = inversesqrt(dot(vec3(_376, _377, _378), vec3(_376, _377, _378)));
    float _383 = _376 * _382;
    float _384 = _377 * _382;
    float _385 = _378 * _382;
    float _391 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _392 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _413 = fma(_303, cbSceneParam._m0[5u].z, fma(_302, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _301));
    float _416 = fma(_303, cbSceneParam._m0[6u].z, fma(_302, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _301));
    float _419 = fma(_303, cbSceneParam._m0[7u].z, fma(_302, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _301));
    uint _432 = uint(roundEven(NORMAL.w)) * 13u;
    uint _434 = _432 + 9u;
    uint _435 = _434 + uint(cbMatDynParam._m0[0u].w);
    float _441 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0)))) * cbInstanceData._m0[_435].x;
    float _442 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0)))) * cbInstanceData._m0[_435].y;
    float _443 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0)))) * cbInstanceData._m0[_435].z;
    float _3572 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
    float _3583 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _445 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
    float _3594 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _447 = 1.0 - _308;
    float _448 = _444 * _447;
    float _449 = _445 * _447;
    float _450 = _446 * _447;
    float _455 = (_444 + (-0.039999999105930328369140625)) * _308;
    float _456 = (_445 + (-0.039999999105930328369140625)) * _308;
    float _457 = (_446 + (-0.039999999105930328369140625)) * _308;
    float _458 = _455 + 0.039999999105930328369140625;
    float _460 = _456 + 0.039999999105930328369140625;
    float _461 = _457 + 0.039999999105930328369140625;
    vec4 _470 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _391, cbSceneParam._m0[86u].y * _392));
    float _473 = _470.x * TEXCOORD.z;
    float _474 = dot(vec3(_301, _302, _303), vec3(_383, _384, _385));
    float _477 = _474 * 2.0;
    float _481 = (_477 * _301) - _383;
    float _482 = (_477 * _302) - _384;
    float _483 = (_477 * _303) - _385;
    float _487 = abs(dot(vec3(_383, _384, _385), vec3(_301, _302, _303)));
    float _3605 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _489 = sqrt(_304);
    float _502 = exp2((_489 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_489 * 3.0));
    float _508 = (1.0 - _502) * ((_489 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _509 = _502 * _489;
    float _537 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _545 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _847;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _572 = fma(_545, cbModelParam._m0[26u].z, fma(_541, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _537));
        float _576 = fma(_545, cbModelParam._m0[27u].z, fma(_541, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _537));
        float _580 = fma(_545, cbModelParam._m0[28u].z, fma(_541, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _537));
        float _605 = _537 + _301;
        float _606 = _541 + _302;
        float _607 = _545 + _303;
        float _617 = fma(_607, cbModelParam._m0[26u].z, fma(_606, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _605)) - _572;
        float _618 = fma(_607, cbModelParam._m0[27u].z, fma(_606, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _605)) - _576;
        float _619 = fma(_607, cbModelParam._m0[28u].z, fma(_606, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _605)) - _580;
        float _623 = inversesqrt(dot(vec3(_617, _618, _619), vec3(_617, _618, _619)));
        float _636 = ((_623 * _617) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_572 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _637 = ((_623 * _618) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_576 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _638 = ((_623 * _619) / cbModelParam._m0[34u].z) + ((((((_580 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _641 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        vec4 _648 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        vec4 _655 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        vec4 _662 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        float _675 = exp2((_641.w + (-0.5)) * 20.0) * 2.0;
        float _676 = _675 * (_641.x + (-0.5));
        float _677 = _675 * (_641.y + (-0.5));
        float _678 = _675 * (_641.z + (-0.5));
        float _685 = exp2((_648.w + (-0.5)) * 20.0) * 2.0;
        float _686 = _685 * (_648.x + (-0.5));
        float _687 = _685 * (_648.y + (-0.5));
        float _688 = _685 * (_648.z + (-0.5));
        float _695 = exp2((_655.w + (-0.5)) * 20.0) * 2.0;
        float _696 = _695 * (_655.x + (-0.5));
        float _697 = _695 * (_655.y + (-0.5));
        float _698 = _695 * (_655.z + (-0.5));
        float _705 = exp2((_662.w + (-0.5)) * 20.0) * 2.0;
        float _706 = _705 * (_662.x + (-0.5));
        float _707 = _705 * (_662.y + (-0.5));
        float _708 = _705 * (_662.z + (-0.5));
        float _709 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _710 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _711 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _712 = _676 * 0.5;
        float _713 = _686 * 0.5;
        float _714 = _696 * 0.5;
        float _715 = dot(vec3(_712, _713, _714), vec3(_712, _713, _714));
        float _720 = (_715 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_715);
        float _729 = (dot(vec3(_301, _302, _303), vec3(_720 * _712, _720 * _713, _720 * _714)) + 1.0) * 0.5;
        float _3631 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _739 = sqrt(((_713 * _713) + (_712 * _712)) + (_714 * _714)) / (_709 + 9.9999997473787516355514526367188e-06);
        float _3642 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _740 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _741 = _740 * 2.0;
        float _745 = (1.0 - _740) / (_740 + 1.0);
        float _3653 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _746 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _755 = ((((1.0 - _746) * (_741 + 2.0)) * exp2(log2(isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) * (_741 + 1.0))) + _746) * _709;
        float _756 = _677 * 0.5;
        float _757 = _687 * 0.5;
        float _758 = _697 * 0.5;
        float _759 = dot(vec3(_756, _757, _758), vec3(_756, _757, _758));
        float _764 = (_759 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_759);
        float _772 = (dot(vec3(_301, _302, _303), vec3(_764 * _756, _764 * _757, _764 * _758)) + 1.0) * 0.5;
        float _3664 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _781 = sqrt(((_757 * _757) + (_756 * _756)) + (_758 * _758)) / (_710 + 9.9999997473787516355514526367188e-06);
        float _3675 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _782 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _783 = _782 * 2.0;
        float _787 = (1.0 - _782) / (_782 + 1.0);
        float _3686 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _788 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _797 = ((((1.0 - _788) * (_783 + 2.0)) * exp2(log2(isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * (_783 + 1.0))) + _788) * _710;
        float _798 = _678 * 0.5;
        float _799 = _688 * 0.5;
        float _800 = _698 * 0.5;
        float _801 = dot(vec3(_798, _799, _800), vec3(_798, _799, _800));
        float _806 = (_801 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_801);
        float _814 = (dot(vec3(_301, _302, _303), vec3(_806 * _798, _806 * _799, _806 * _800)) + 1.0) * 0.5;
        float _3697 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _823 = sqrt(((_799 * _799) + (_798 * _798)) + (_800 * _800)) / (_711 + 9.9999997473787516355514526367188e-06);
        float _3708 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _825 = _824 * 2.0;
        float _829 = (1.0 - _824) / (_824 + 1.0);
        float _3719 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _839 = ((((1.0 - _830) * (_825 + 2.0)) * exp2(log2(isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_825 + 1.0))) + _830) * _711;
        _847 = _678;
        _849 = _677;
        _850 = _676;
        _851 = _688;
        _852 = _687;
        _853 = _686;
        _854 = _698;
        _855 = _697;
        _856 = _696;
        _857 = _711;
        _858 = _710;
        _859 = _709;
        _860 = cbModelParam._m0[36u].z * (isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0)));
        _861 = cbModelParam._m0[36u].z * (isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0)));
        _862 = cbModelParam._m0[36u].z * (isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0)));
    }
    else
    {
        _847 = _848;
        _849 = _848;
        _850 = _848;
        _851 = _848;
        _852 = _848;
        _853 = _848;
        _854 = _848;
        _855 = _848;
        _856 = _848;
        _857 = _848;
        _858 = _848;
        _859 = _848;
        _860 = 0.0;
        _861 = 0.0;
        _862 = 0.0;
    }
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _888 = fma(_545, cbModelParam._m0[30u].z, fma(_541, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _537));
        float _892 = fma(_545, cbModelParam._m0[31u].z, fma(_541, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _537));
        float _896 = fma(_545, cbModelParam._m0[32u].z, fma(_541, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _537));
        float _919 = _537 + _301;
        float _920 = _541 + _302;
        float _921 = _545 + _303;
        float _931 = fma(_921, cbModelParam._m0[30u].z, fma(_920, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _919)) - _888;
        float _932 = fma(_921, cbModelParam._m0[31u].z, fma(_920, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _919)) - _892;
        float _933 = fma(_921, cbModelParam._m0[32u].z, fma(_920, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _919)) - _896;
        float _937 = inversesqrt(dot(vec3(_931, _932, _933), vec3(_931, _932, _933)));
        float _950 = ((_937 * _931) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_888 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _951 = ((_937 * _932) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_892 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _952 = ((_937 * _933) / cbModelParam._m0[35u].z) + ((((((_896 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        float _987 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_954.x + (-0.5));
        float _989 = _987 * (_954.y + (-0.5));
        float _990 = _987 * (_954.z + (-0.5));
        float _997 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_961.x + (-0.5));
        float _999 = _997 * (_961.y + (-0.5));
        float _1000 = _997 * (_961.z + (-0.5));
        float _1007 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_968.x + (-0.5));
        float _1009 = _1007 * (_968.y + (-0.5));
        float _1010 = _1007 * (_968.z + (-0.5));
        float _1017 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_975.x + (-0.5));
        float _1019 = _1017 * (_975.y + (-0.5));
        float _1020 = _1017 * (_975.z + (-0.5));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = _988 * 0.5;
        float _1025 = _998 * 0.5;
        float _1026 = _1008 * 0.5;
        float _1027 = dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026));
        float _1032 = (_1027 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1027);
        float _1040 = (dot(vec3(_301, _302, _303), vec3(_1032 * _1024, _1032 * _1025, _1032 * _1026)) + 1.0) * 0.5;
        float _3760 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1049 = sqrt(((_1025 * _1025) + (_1024 * _1024)) + (_1026 * _1026)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3771 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1051 = _1050 * 2.0;
        float _1055 = (1.0 - _1050) / (_1050 + 1.0);
        float _3782 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1065 = ((((1.0 - _1056) * (_1051 + 2.0)) * exp2(log2(isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_1051 + 1.0))) + _1056) * _1021;
        float _1066 = _989 * 0.5;
        float _1067 = _999 * 0.5;
        float _1068 = _1009 * 0.5;
        float _1069 = dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068));
        float _1074 = (_1069 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1069);
        float _1082 = (dot(vec3(_301, _302, _303), vec3(_1074 * _1066, _1074 * _1067, _1074 * _1068)) + 1.0) * 0.5;
        float _3793 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1091 = sqrt(((_1067 * _1067) + (_1066 * _1066)) + (_1068 * _1068)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3804 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1093 = _1092 * 2.0;
        float _1097 = (1.0 - _1092) / (_1092 + 1.0);
        float _3815 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1107 = ((((1.0 - _1098) * (_1093 + 2.0)) * exp2(log2(isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_1093 + 1.0))) + _1098) * _1022;
        float _1108 = _990 * 0.5;
        float _1109 = _1000 * 0.5;
        float _1110 = _1010 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1124 = (dot(vec3(_301, _302, _303), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _3826 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1133 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3837 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _3848 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_1135 + 1.0))) + _1140) * _1023;
        _1157 = _990;
        _1158 = _989;
        _1159 = _988;
        _1160 = _1000;
        _1161 = _999;
        _1162 = _998;
        _1163 = _1010;
        _1164 = _1009;
        _1165 = _1008;
        _1166 = _1023;
        _1167 = _1022;
        _1168 = _1021;
        _1169 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0)));
        _1170 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)));
        _1171 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
    }
    else
    {
        _1157 = _848;
        _1158 = _848;
        _1159 = _848;
        _1160 = _848;
        _1161 = _848;
        _1162 = _848;
        _1163 = _848;
        _1164 = _848;
        _1165 = _848;
        _1166 = _848;
        _1167 = _848;
        _1168 = _848;
        _1169 = 0.0;
        _1170 = 0.0;
        _1171 = 0.0;
    }
    float _1181 = (cbModelParam._m0[1u].x * (_1169 - _860)) + _860;
    float _1182 = (cbModelParam._m0[1u].x * (_1170 - _861)) + _861;
    float _1183 = (cbModelParam._m0[1u].x * (_1171 - _862)) + _862;
    float _1204 = fma(_1183, cbSceneParam._m0[89u].z, fma(_1182, cbSceneParam._m0[89u].y, _1181 * cbSceneParam._m0[89u].x));
    float _1207 = fma(_1183, cbSceneParam._m0[90u].z, fma(_1182, cbSceneParam._m0[90u].y, _1181 * cbSceneParam._m0[90u].x));
    float _1210 = fma(_1183, cbSceneParam._m0[91u].z, fma(_1182, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1181));
    float _1225 = _481 * 0.5;
    float _1226 = _482 * 0.5;
    float _1227 = _483 * 0.5;
    float _1228 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_1159, _1162, _1165, _1168));
    float _1231 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_1158, _1161, _1164, _1167));
    float _1234 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_1157, _1160, _1163, _1166));
    float _1268;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1241 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_847, _851, _854, _857));
        float _1245 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_849, _852, _855, _858));
        float _1249 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_850, _853, _856, _859));
        float _1256 = dot(vec4(cbModelParam._m0[39u]), vec4(_1225, _1226, _1227, 1.0));
        _1268 = dot(vec3(isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)), isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)), isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1256) ? 0.0 : (isnan(0.0) ? _1256 : max(0.0, _1256))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1268 = 1.0;
    }
    float _1279;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1270 = dot(vec4(cbModelParam._m0[40u]), vec4(_1225, _1226, _1227, 1.0));
        _1279 = dot(vec3(isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)), isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)), isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1270) ? 0.0 : (isnan(0.0) ? _1270 : max(0.0, _1270))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1279 = 1.0;
    }
    float _1283 = (_1279 * cbModelParam._m0[1u].x) + (_1268 * (1.0 - cbModelParam._m0[1u].x));
    float _1293 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _304);
    float _1294 = isnan(_1293) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1293 : min(cbModelParam._m0[25u].z, _1293));
    float _1376;
    float _1378;
    float _1380;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1343 = fma(_545, cbModelParam._m0[13u].z, fma(_541, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _537)) + cbModelParam._m0[13u].w;
        float _1347 = fma(_545, cbModelParam._m0[14u].z, fma(_541, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _537)) + cbModelParam._m0[14u].w;
        float _1351 = fma(_545, cbModelParam._m0[15u].z, fma(_541, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _537)) + cbModelParam._m0[15u].w;
        float _1354 = fma(_483, cbModelParam._m0[13u].z, fma(_482, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _481));
        float _1357 = fma(_483, cbModelParam._m0[14u].z, fma(_482, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _481));
        float _1360 = fma(_483, cbModelParam._m0[15u].z, fma(_482, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _481));
        float _1388;
        if (_1354 > 0.0)
        {
            _1388 = abs((1.0 - _1343) / _1354);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1354 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1343 + 1.0) / _1354);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1388 = frontier_phi_16_14_ladder;
        }
        float _1564;
        if (_1357 > 0.0)
        {
            _1564 = abs((1.0 - _1347) / _1357);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1357 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1347 + 1.0) / _1357);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1564 = frontier_phi_25_21_ladder;
        }
        float _1860;
        if (_1360 > 0.0)
        {
            _1860 = abs((1.0 - _1351) / _1360);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1360 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1351 + 1.0) / _1360);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1860 = frontier_phi_37_32_ladder;
        }
        float _1862 = isnan(_1564) ? _1388 : (isnan(_1388) ? _1564 : min(_1388, _1564));
        float _1863 = isnan(_1860) ? _1862 : (isnan(_1862) ? _1860 : min(_1862, _1860));
        float _1867 = (_1863 * _1354) + _1343;
        float _1868 = (_1863 * _1357) + _1347;
        float _1869 = (_1863 * _1360) + _1351;
        float _1870 = _1863 * 9.9999997473787516355514526367188e-05;
        float _1872 = (-1.0) - _1870;
        float _1874 = _1870 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1869 > _1874) || ((_1869 < _1872) || ((_1868 > _1874) || ((_1868 < _1872) || ((_1867 < _1872) || (_1867 > _1874))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2014 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1869, cbModelParam._m0[9u].z, fma(_1868, cbModelParam._m0[9u].y, _1867 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1869, cbModelParam._m0[10u].z, fma(_1868, cbModelParam._m0[10u].y, _1867 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1869, cbModelParam._m0[11u].z, fma(_1868, cbModelParam._m0[11u].y, _1867 * cbModelParam._m0[11u].x))), _1294);
            frontier_phi_15_37_ladder = _2014.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2014.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2014.z * cbModelParam._m0[1u].y;
        }
        _1376 = frontier_phi_15_37_ladder_1;
        _1378 = frontier_phi_15_37_ladder;
        _1380 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1364 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_481, _482, _483), _1294);
        _1376 = _1364.x * cbModelParam._m0[1u].y;
        _1378 = _1364.y * cbModelParam._m0[1u].y;
        _1380 = _1364.z * cbModelParam._m0[1u].y;
    }
    float _1384 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _304);
    float _1385 = isnan(_1384) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1384 : min(cbModelParam._m0[25u].w, _1384));
    float _1478;
    float _1480;
    float _1482;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1442 = fma(_545, cbModelParam._m0[21u].z, fma(_541, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _537)) + cbModelParam._m0[21u].w;
        float _1446 = fma(_545, cbModelParam._m0[22u].z, fma(_541, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _537)) + cbModelParam._m0[22u].w;
        float _1450 = fma(_545, cbModelParam._m0[23u].z, fma(_541, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _537)) + cbModelParam._m0[23u].w;
        float _1453 = fma(_483, cbModelParam._m0[21u].z, fma(_482, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _481));
        float _1456 = fma(_483, cbModelParam._m0[22u].z, fma(_482, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _481));
        float _1459 = fma(_483, cbModelParam._m0[23u].z, fma(_482, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _481));
        float _1569;
        if (_1453 > 0.0)
        {
            _1569 = abs((1.0 - _1442) / _1453);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1453 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1442 + 1.0) / _1453);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1569 = frontier_phi_27_23_ladder;
        }
        float _1887;
        if (_1456 > 0.0)
        {
            _1887 = abs((1.0 - _1446) / _1456);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1456 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1446 + 1.0) / _1456);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1887 = frontier_phi_39_34_ladder;
        }
        float _2225;
        if (_1459 > 0.0)
        {
            _2225 = abs((1.0 - _1450) / _1459);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1450 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2225 = frontier_phi_49_46_ladder;
        }
        float _2227 = isnan(_1887) ? _1569 : (isnan(_1569) ? _1887 : min(_1569, _1887));
        float _2228 = isnan(_2225) ? _2227 : (isnan(_2227) ? _2225 : min(_2227, _2225));
        float _2232 = (_2228 * _1453) + _1442;
        float _2233 = (_2228 * _1456) + _1446;
        float _2234 = (_2228 * _1459) + _1450;
        float _2235 = _2228 * 9.9999997473787516355514526367188e-05;
        float _2236 = (-1.0) - _2235;
        float _2238 = _2235 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2234 > _2238) || ((_2234 < _2236) || ((_2233 > _2238) || ((_2233 < _2236) || ((_2232 < _2236) || (_2232 > _2238))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2356 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2234, cbModelParam._m0[17u].z, fma(_2233, cbModelParam._m0[17u].y, _2232 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2234, cbModelParam._m0[18u].z, fma(_2233, cbModelParam._m0[18u].y, _2232 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2234, cbModelParam._m0[19u].z, fma(_2233, cbModelParam._m0[19u].y, _2232 * cbModelParam._m0[19u].x))), _1385);
            frontier_phi_24_49_ladder = _2356.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2356.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2356.x * cbModelParam._m0[1u].z;
        }
        _1478 = frontier_phi_24_49_ladder_2;
        _1480 = frontier_phi_24_49_ladder_1;
        _1482 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1462 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_481, _482, _483), _1385);
        _1478 = _1462.x * cbModelParam._m0[1u].z;
        _1480 = _1462.y * cbModelParam._m0[1u].z;
        _1482 = _1462.z * cbModelParam._m0[1u].z;
    }
    float _1495 = (((_508 * _458) + _509) * _473) * ((cbModelParam._m0[1u].w * (_1478 - _1376)) + _1376);
    float _1497 = (((_508 * _460) + _509) * _473) * ((cbModelParam._m0[1u].w * (_1480 - _1378)) + _1378);
    float _1499 = (((_508 * _461) + _509) * _473) * ((cbModelParam._m0[1u].w * (_1482 - _1380)) + _1380);
    float _1502 = fma(_1499, cbSceneParam._m0[89u].z, fma(_1497, cbSceneParam._m0[89u].y, _1495 * cbSceneParam._m0[89u].x));
    float _1505 = fma(_1499, cbSceneParam._m0[90u].z, fma(_1497, cbSceneParam._m0[90u].y, _1495 * cbSceneParam._m0[90u].x));
    float _1508 = fma(_1499, cbSceneParam._m0[91u].z, fma(_1497, cbSceneParam._m0[91u].y, _1495 * cbSceneParam._m0[91u].x));
    float _1543 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1547 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1551 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1555 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1556 = _1543 / _1555;
    float _1557 = _1547 / _1555;
    float _1558 = _1551 / _1555;
    float _1705;
    float _1706;
    float _1707;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1585 = ((uint(_1558 > cbSceneParam._m0[59u].y) + uint(_1558 > cbSceneParam._m0[59u].x)) + uint(_1558 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1586 = _1585 + 43u;
        uint _1594 = _1585 + 44u;
        uint _1602 = _1585 + 45u;
        uint _1610 = _1585 + 46u;
        float _1621 = fma(_1555, cbSceneParam._m0[_1586].w, fma(_1551, cbSceneParam._m0[_1586].z, fma(_1547, cbSceneParam._m0[_1586].y, _1543 * cbSceneParam._m0[_1586].x)));
        float _1625 = fma(_1555, cbSceneParam._m0[_1594].w, fma(_1551, cbSceneParam._m0[_1594].z, fma(_1547, cbSceneParam._m0[_1594].y, _1543 * cbSceneParam._m0[_1594].x)));
        float _1633 = fma(_1555, cbSceneParam._m0[_1610].w, fma(_1551, cbSceneParam._m0[_1610].z, fma(_1547, cbSceneParam._m0[_1610].y, _1543 * cbSceneParam._m0[_1610].x)));
        float _1638 = cbSceneParam._m0[33u].z * _1633;
        float _1640 = cbSceneParam._m0[33u].w * _1633;
        float _1643 = fma(_1555, cbSceneParam._m0[_1602].w, fma(_1551, cbSceneParam._m0[_1602].z, fma(_1547, cbSceneParam._m0[_1602].y, _1543 * cbSceneParam._m0[_1602].x))) / _1633;
        float _1691 = (cbSceneParam._m0[33u].x - sqrt(((_1557 * _1557) + (_1556 * _1556)) + (_1558 * _1558))) * cbSceneParam._m0[33u].y;
        float _3974 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1698 = (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1638 + _1621) / _1633, (_1640 + _1625) / _1633), _1643), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1640 + _1621) / _1633, (_1625 - _1638) / _1633), _1643), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1621 - _1638) / _1633, (_1625 - _1640) / _1633), _1643), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1621 - _1640) / _1633, (_1638 + _1625) / _1633), _1643), 0.0)).x), vec4(0.25)));
        _1705 = 1.0 - (_1698 * cbSceneParam._m0[34u].x);
        _1706 = 1.0 - (_1698 * cbSceneParam._m0[34u].y);
        _1707 = 1.0 - (_1698 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1705 = 1.0;
        _1706 = 1.0;
        _1707 = 1.0;
    }
    float _1771;
    float _1773;
    float _1775;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1759 = fma(_1555, cbSceneParam._m0[63u].w, fma(_1551, cbSceneParam._m0[63u].z, fma(_1547, cbSceneParam._m0[63u].y, _1543 * cbSceneParam._m0[63u].x)));
        float _1760 = fma(_1555, cbSceneParam._m0[60u].w, fma(_1551, cbSceneParam._m0[60u].z, fma(_1547, cbSceneParam._m0[60u].y, _1543 * cbSceneParam._m0[60u].x))) / _1759;
        float _1761 = fma(_1555, cbSceneParam._m0[61u].w, fma(_1551, cbSceneParam._m0[61u].z, fma(_1547, cbSceneParam._m0[61u].y, _1543 * cbSceneParam._m0[61u].x))) / _1759;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1760 >= cbSceneParam._m0[64u].x) && (_1761 >= cbSceneParam._m0[64u].y)) && (_1760 <= cbSceneParam._m0[64u].z)) && (_1761 <= cbSceneParam._m0[64u].w))
        {
            float _1900 = fma(_1555, cbSceneParam._m0[62u].w, fma(_1551, cbSceneParam._m0[62u].z, fma(_1547, cbSceneParam._m0[62u].y, _1543 * cbSceneParam._m0[62u].x))) / _1759;
            float _1904 = isnan(cbSceneParam._m0[41u].w) ? _1900 : (isnan(_1900) ? cbSceneParam._m0[41u].w : max(_1900, cbSceneParam._m0[41u].w));
            float _1947 = (cbSceneParam._m0[33u].x - sqrt(((_1557 * _1557) + (_1556 * _1556)) + (_1558 * _1558))) * cbSceneParam._m0[33u].y;
            float _3990 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
            float _1954 = (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1760, cbSceneParam._m0[33u].w + _1761), _1904), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1760, _1761 - cbSceneParam._m0[33u].z), _1904), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1760 - cbSceneParam._m0[33u].z, _1761 - cbSceneParam._m0[33u].w), _1904), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1760 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1761), _1904), 0.0)).x), vec4(0.25)));
            float _1958 = 1.0 - (_1954 * cbSceneParam._m0[34u].x);
            float _1959 = 1.0 - (_1954 * cbSceneParam._m0[34u].y);
            float _1960 = 1.0 - (_1954 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1959) ? _1706 : (isnan(_1706) ? _1959 : min(_1706, _1959));
            frontier_phi_36_35_ladder_1 = isnan(_1960) ? _1707 : (isnan(_1707) ? _1960 : min(_1707, _1960));
            frontier_phi_36_35_ladder_2 = isnan(_1958) ? _1705 : (isnan(_1705) ? _1958 : min(_1705, _1958));
        }
        else
        {
            frontier_phi_36_35_ladder = _1706;
            frontier_phi_36_35_ladder_1 = _1707;
            frontier_phi_36_35_ladder_2 = _1705;
        }
        _1771 = frontier_phi_36_35_ladder_2;
        _1773 = frontier_phi_36_35_ladder;
        _1775 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1771 = _1705;
        _1773 = _1706;
        _1775 = _1707;
    }
    uvec4 _1780 = floatBitsToUint(cbInstanceData._m0[_432 + 5u]);
    uint _1782 = _1780.x * 14u;
    uint _1783 = _1782 + 13u;
    float _1790 = _473 + (-1.0);
    float _1795 = (cbLight._m0[_1783].x * _1790) + 1.0;
    float _1796 = (cbLight._m0[_1783].y * _1790) + 1.0;
    float _1797 = (cbLight._m0[_1783].z * _1790) + 1.0;
    float _1798 = (cbLight._m0[_1783].w * _1790) + 1.0;
    uint _1799 = _1782 + 5u;
    float _1805 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
    uint _1809 = _1782 + 4u;
    float _1819 = isnan(1.0) ? _1795 : (isnan(_1795) ? 1.0 : min(_1795, 1.0));
    uint _1823 = _1782 | 1u;
    float _1834 = dot(vec3(cbLight._m0[_1782].xyz), vec3(_301, _302, _303));
    float _1837 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_301, _302, _303));
    float _4026 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _4037 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1842 = (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * 0.3183098733425140380859375;
    float _1844 = (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * 0.3183098733425140380859375;
    float _1851 = ((cbLight._m0[_1799].x * _1805) * _1844) + (((cbLight._m0[_1809].x * _1771) * _1819) * _1842);
    float _1852 = ((_1805 * cbLight._m0[_1799].y) * _1844) + (((cbLight._m0[_1809].y * _1773) * _1819) * _1842);
    float _1853 = ((_1805 * cbLight._m0[_1799].z) * _1844) + (((cbLight._m0[_1809].z * _1775) * _1819) * _1842);
    uvec4 _1857 = floatBitsToUint(cbLight._m0[_1782 + 12u]);
    bool _1859 = _1857.x == 0u;
    float _1961;
    float _1963;
    float _1965;
    if (_1859)
    {
        _1961 = _1851;
        _1963 = _1852;
        _1965 = _1853;
    }
    else
    {
        uint _1969 = _1782 + 6u;
        float _1985 = (dot(vec3(cbLight._m0[_1782 + 2u].xyz), vec3(_301, _302, _303)) * 0.5) + 0.5;
        float _1986 = _1985 * _1985;
        float _4048 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
        float _1987 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1988 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
        _1961 = (((cbLight._m0[_1969].x * 0.3183098733425140380859375) * _1987) * _1988) + _1851;
        _1963 = (((cbLight._m0[_1969].y * 0.3183098733425140380859375) * _1987) * _1988) + _1852;
        _1965 = (((cbLight._m0[_1969].z * 0.3183098733425140380859375) * _1987) * _1988) + _1853;
    }
    bool _1968 = _1857.y == 0u;
    float _2023;
    float _2025;
    float _2027;
    if (_1968)
    {
        _2023 = _1961;
        _2025 = _1963;
        _2027 = _1965;
    }
    else
    {
        uint _2196 = _1782 + 7u;
        float _2212 = (dot(vec3(cbLight._m0[_1782 + 3u].xyz), vec3(_301, _302, _303)) * 0.5) + 0.5;
        float _2213 = _2212 * _2212;
        float _4064 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2214 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _2215 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
        _2023 = (((cbLight._m0[_2196].x * 0.3183098733425140380859375) * _2214) * _2215) + _1961;
        _2025 = (((cbLight._m0[_2196].y * 0.3183098733425140380859375) * _2214) * _2215) + _1963;
        _2027 = (((cbLight._m0[_2196].z * 0.3183098733425140380859375) * _2214) * _2215) + _1965;
    }
    uint _2030 = _1782 + 8u;
    float _2043 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1782].w)) * _304) * 0.949999988079071044921875);
    float _2044 = _2043 * _2043;
    float _2045 = cbLight._m0[_1782].x + _383;
    float _2046 = cbLight._m0[_1782].y + _384;
    float _2047 = cbLight._m0[_1782].z + _385;
    float _2051 = inversesqrt(dot(vec3(_2045, _2046, _2047), vec3(_2045, _2046, _2047)));
    float _2052 = _2051 * _2045;
    float _2053 = _2051 * _2046;
    float _2054 = _2051 * _2047;
    float _2055 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1782].xyz));
    float _4080 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2058 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _4091 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _2059 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _2060 = dot(vec3(_301, _302, _303), vec3(_2052, _2053, _2054));
    float _4102 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2063 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _2064 = dot(vec3(cbLight._m0[_1782].xyz), vec3(_2052, _2053, _2054));
    float _4113 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2068 = _2044 * _2044;
    float _2072 = ((_2063 * _2063) * (_2068 + (-1.0))) + 1.0;
    float _2080 = exp2(log2(1.0 - (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0)))) * 5.0);
    float _2081 = 0.959999978542327880859375 - _455;
    float _2083 = 0.959999978542327880859375 - _456;
    float _2084 = 0.959999978542327880859375 - _457;
    float _2091 = 1.0 - _2044;
    float _2102 = (0.5 / (((_2059 * ((_2058 * _2091) + _2044)) + 9.9999999392252902907785028219223e-09) + (((_2059 * _2091) + _2044) * _2058))) * _2058;
    float _4124 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2104 = (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_2068 / ((_2072 * _2072) * 3.141590118408203125));
    uint _2118 = _1782 + 9u;
    float _2129 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1823].w)) * _304) * 0.949999988079071044921875);
    float _2130 = _2129 * _2129;
    float _2131 = cbLight._m0[_1823].x + _383;
    float _2132 = cbLight._m0[_1823].y + _384;
    float _2133 = cbLight._m0[_1823].z + _385;
    float _2137 = inversesqrt(dot(vec3(_2131, _2132, _2133), vec3(_2131, _2132, _2133)));
    float _2138 = _2137 * _2131;
    float _2139 = _2137 * _2132;
    float _2140 = _2137 * _2133;
    float _2141 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1823].xyz));
    float _4135 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2144 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _2145 = dot(vec3(_301, _302, _303), vec3(_2138, _2139, _2140));
    float _4146 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2148 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _2149 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_2138, _2139, _2140));
    float _4157 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2153 = _2130 * _2130;
    float _2157 = ((_2148 * _2148) * (_2153 + (-1.0))) + 1.0;
    float _2164 = exp2(log2(1.0 - (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) * 5.0);
    float _2171 = 1.0 - _2130;
    float _2181 = (0.5 / (((_2059 * ((_2144 * _2171) + _2130)) + 9.9999999392252902907785028219223e-09) + (((_2059 * _2171) + _2130) * _2144))) * _2144;
    float _4168 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2183 = (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_2153 / ((_2157 * _2157) * 3.141590118408203125));
    float _2193 = (((((_2164 * _2081) + _458) * cbLight._m0[_2118].x) * _2183) * _1805) + ((((cbLight._m0[_2030].x * _1771) * ((_2080 * _2081) + _458)) * _2104) * _1819);
    float _2194 = (((((_2164 * _2083) + _460) * cbLight._m0[_2118].y) * _2183) * _1805) + ((((cbLight._m0[_2030].y * _1773) * ((_2080 * _2083) + _460)) * _2104) * _1819);
    float _2195 = (((((_2164 * _2084) + _461) * cbLight._m0[_2118].z) * _2183) * _1805) + ((((cbLight._m0[_2030].z * _1775) * ((_2080 * _2084) + _461)) * _2104) * _1819);
    float _2251;
    float _2253;
    float _2255;
    if (_1859)
    {
        _2251 = _2193;
        _2253 = _2194;
        _2255 = _2195;
    }
    else
    {
        uint _2257 = _1782 + 2u;
        uint _2261 = _1782 + 10u;
        float _2275 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2257].w)) * _304) * 0.949999988079071044921875);
        float _2276 = _2275 * _2275;
        float _2277 = cbLight._m0[_2257].x + _383;
        float _2278 = cbLight._m0[_2257].y + _384;
        float _2279 = cbLight._m0[_2257].z + _385;
        float _2283 = inversesqrt(dot(vec3(_2277, _2278, _2279), vec3(_2277, _2278, _2279)));
        float _2284 = _2283 * _2277;
        float _2285 = _2283 * _2278;
        float _2286 = _2283 * _2279;
        float _2287 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_2257].xyz));
        float _4179 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2290 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _2291 = dot(vec3(_301, _302, _303), vec3(_2284, _2285, _2286));
        float _4190 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2294 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _2295 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_2284, _2285, _2286));
        float _4201 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2299 = _2276 * _2276;
        float _2303 = ((_2294 * _2294) * (_2299 + (-1.0))) + 1.0;
        float _2310 = exp2(log2(1.0 - (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) * 5.0);
        float _2317 = 1.0 - _2276;
        float _2327 = (0.5 / (((_2059 * ((_2290 * _2317) + _2276)) + 9.9999999392252902907785028219223e-09) + (((_2059 * _2317) + _2276) * _2290))) * _2290;
        float _4212 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2329 = (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_2299 / ((_2303 * _2303) * 3.141590118408203125));
        float _2330 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
        _2251 = (((((_2310 * _2081) + _458) * cbLight._m0[_2261].x) * _2329) * _2330) + _2193;
        _2253 = (((((_2310 * _2083) + _460) * cbLight._m0[_2261].y) * _2329) * _2330) + _2194;
        _2255 = (((((_2310 * _2084) + _461) * cbLight._m0[_2261].z) * _2329) * _2330) + _2195;
    }
    float _2361;
    float _2363;
    float _2365;
    if (_1968)
    {
        _2361 = _2251;
        _2363 = _2253;
        _2365 = _2255;
    }
    else
    {
        uint _2372 = _1782 + 3u;
        uint _2376 = _1782 + 11u;
        float _2390 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2372].w)) * _304) * 0.949999988079071044921875);
        float _2391 = _2390 * _2390;
        float _2392 = cbLight._m0[_2372].x + _383;
        float _2393 = cbLight._m0[_2372].y + _384;
        float _2394 = cbLight._m0[_2372].z + _385;
        float _2398 = inversesqrt(dot(vec3(_2392, _2393, _2394), vec3(_2392, _2393, _2394)));
        float _2399 = _2398 * _2392;
        float _2400 = _2398 * _2393;
        float _2401 = _2398 * _2394;
        float _2402 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_2372].xyz));
        float _4228 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2405 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _2406 = dot(vec3(_301, _302, _303), vec3(_2399, _2400, _2401));
        float _4239 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2409 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _2410 = dot(vec3(cbLight._m0[_2372].xyz), vec3(_2399, _2400, _2401));
        float _4250 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2414 = _2391 * _2391;
        float _2418 = ((_2409 * _2409) * (_2414 + (-1.0))) + 1.0;
        float _2425 = exp2(log2(1.0 - (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0)))) * 5.0);
        float _2432 = 1.0 - _2391;
        float _2442 = (0.5 / (((_2059 * ((_2405 * _2432) + _2391)) + 9.9999999392252902907785028219223e-09) + (((_2059 * _2432) + _2391) * _2405))) * _2405;
        float _4261 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2444 = (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_2414 / ((_2418 * _2418) * 3.141590118408203125));
        float _2445 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
        _2361 = (((((_2425 * _2081) + _458) * cbLight._m0[_2376].x) * _2444) * _2445) + _2251;
        _2363 = (((((_2425 * _2083) + _460) * cbLight._m0[_2376].y) * _2444) * _2445) + _2253;
        _2365 = (((((_2425 * _2084) + _461) * cbLight._m0[_2376].z) * _2444) * _2445) + _2255;
    }
    float _2510;
    float _2512;
    float _2514;
    float _2516;
    float _2518;
    float _2520;
    if (_1780.y == 0u)
    {
        uvec4 _2466 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2467 = _2466.x;
        uint _2478 = uint((float(_2466.y) * floor(float(uint(cbSceneParam._m0[85u].y * _392) / _2467))) + floor(float(uint(cbSceneParam._m0[85u].x * _391) / _2467)));
        float _2488 = (log2(_1558 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2489 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        uint _2492 = uint(isnan(14.0) ? _2489 : (isnan(_2489) ? 14.0 : min(_2489, 14.0)));
        uvec4 _2497 = texelFetch(g_lightClusterGridBuffer, int(((_2492 << 2u) + (_2478 << 6u)) >> 2u));
        uint _2498 = _2497.x;
        uint _2499 = _2466.z;
        float _2606;
        float _2608;
        float _2610;
        float _2612;
        float _2614;
        float _2616;
        if (((((1u << ((_2499 >> 4u) & 15u)) + 4294967295u) & _2498) == 0u) || ((_2499 & 240u) == 0u))
        {
            _2606 = 0.0;
            _2608 = 0.0;
            _2610 = 0.0;
            _2612 = 0.0;
            _2614 = 0.0;
            _2616 = 0.0;
        }
        else
        {
            float _2607;
            float _2609;
            float _2611;
            float _2613;
            float _2615;
            float _2617;
            float _2759 = 0.0;
            float _2760 = 0.0;
            float _2761 = 0.0;
            float _2762 = 0.0;
            float _2763 = 0.0;
            float _2764 = 0.0;
            uint _2765 = 0u;
            uint _2774;
            bool _2775;
            for (;;)
            {
                _2774 = texelFetch(g_lightClassification, int((((_2492 << 5u) + (_2478 << 9u)) + (_2765 << 2u)) >> 2u)).x;
                _2775 = _2774 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2775)
                {
                    frontier_phi_68_pred = _2764;
                    frontier_phi_68_pred_1 = _2763;
                    frontier_phi_68_pred_2 = _2762;
                    frontier_phi_68_pred_3 = _2760;
                    frontier_phi_68_pred_4 = _2759;
                    frontier_phi_68_pred_5 = _2761;
                }
                else
                {
                    float _2883;
                    float _2884;
                    float _2885;
                    float _2886;
                    float _2887;
                    float _2888;
                    uint _2889;
                    _2883 = _2759;
                    _2884 = _2760;
                    _2885 = _2761;
                    _2886 = _2762;
                    _2887 = _2763;
                    _2888 = _2764;
                    _2889 = _2774;
                    float _2815;
                    float _2816;
                    float _2817;
                    float _2818;
                    float _2819;
                    float _2820;
                    for (;;)
                    {
                        uint _2893 = uint(findLSB(_2889)) + (_2765 << 5u);
                        uint _2890 = (_2889 + 4294967295u) & _2889;
                        uint _2895 = _2893 * 48u;
                        vec4 _2909 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2895)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 3u)).x));
                        uint _2915 = (_2893 * 48u) + 4u;
                        vec4 _2928 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2915)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 3u)).x));
                        uint _2934 = (_2893 * 48u) + 8u;
                        vec3 _2945 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2934)).x, texelFetch(g_PointLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2934 + 2u)).x));
                        float _2949 = _2909.x - _1556;
                        float _2950 = _2909.y - _1557;
                        float _2951 = _2909.z - _1558;
                        float _2952 = dot(vec3(_2949, _2950, _2951), vec3(_2949, _2950, _2951));
                        float _2955 = inversesqrt(_2952);
                        float _2956 = _2955 * _2949;
                        float _2957 = _2955 * _2950;
                        float _2958 = _2955 * _2951;
                        float _2959 = dot(vec3(_413, _416, _419), vec3(_2956, _2957, _2958));
                        float _2964 = 1.0 - (_2952 * _2909.w);
                        float _4287 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
                        float _2965 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
                        float _2966 = sqrt(_2952) * _2928.w;
                        float _2969 = 1.39999997615814208984375 / (_2966 + 1.39999997615814208984375);
                        float _2970 = _2969 * _2969;
                        float _2973 = ((1.0 - _2970) * _2959) + _2970;
                        float _2976 = _2966 * _2966;
                        float _2980 = ((isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0))) * _2965) / ((_2976 * 0.699999988079071044921875) + 1.0);
                        float _2984 = (-0.0) - _1556;
                        float _2985 = (-0.0) - _1557;
                        float _2986 = (-0.0) - _1558;
                        float _2990 = inversesqrt(dot(vec3(_2984, _2985, _2986), vec3(_2984, _2985, _2986)));
                        float _2991 = _2990 * _2984;
                        float _2992 = _2990 * _2985;
                        float _2993 = _2990 * _2986;
                        float _3000 = exp2(log2(1.0 / ((_2976 * 3.5) + 5.0)) * 0.25);
                        float _3001 = 1.0 - _489;
                        float _3008 = sqrt(1.0 - ((1.0 - (_3001 * _3001)) * (1.0 - (_3000 * _3000))));
                        float _3009 = _3008 * _3008;
                        float _3010 = _3009 * _3009;
                        float _3011 = _2991 + _2956;
                        float _3012 = _2992 + _2957;
                        float _3013 = _2993 + _2958;
                        float _3017 = inversesqrt(dot(vec3(_3011, _3012, _3013), vec3(_3011, _3012, _3013)));
                        float _3021 = dot(vec3(_413, _416, _419), vec3(_2991, _2992, _2993));
                        float _4303 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                        float _3024 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
                        float _3025 = dot(vec3(_413, _416, _419), vec3(_3017 * _3011, _3017 * _3012, _3017 * _3013));
                        float _4314 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                        float _3028 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                        float _3032 = ((_3028 * _3028) * (_3010 + (-1.0))) + 1.0;
                        float _3033 = _2969 * _3009;
                        float _3034 = _3033 * _3033;
                        float _3037 = ((1.0 - _3034) * _2959) + _3034;
                        float _4325 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                        float _3038 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                        float _3039 = 1.0 - _3009;
                        float _3049 = (0.5 / (((_3038 * ((_3024 * _3039) + _3009)) + 9.9999999392252902907785028219223e-09) + (((_3038 * _3039) + _3009) * _3024))) * _3038;
                        float _4336 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                        float _3060 = (((_3010 * 3.1415927410125732421875) * (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0)))) / ((_3032 * _3032) * ((_2976 * 2.1991131305694580078125) + 3.141590118408203125))) * _2965;
                        _2818 = (_2980 * _2928.x) + _2886;
                        _2819 = (_2980 * _2928.y) + _2887;
                        _2820 = (_2980 * _2928.z) + _2888;
                        _2815 = (_3060 * _2945.x) + _2883;
                        _2816 = (_3060 * _2945.y) + _2884;
                        _2817 = (_3060 * _2945.z) + _2885;
                        if (_2890 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2883 = _2815;
                            _2884 = _2816;
                            _2885 = _2817;
                            _2886 = _2818;
                            _2887 = _2819;
                            _2888 = _2820;
                            _2889 = _2890;
                        }
                    }
                    frontier_phi_68_pred = _2820;
                    frontier_phi_68_pred_1 = _2819;
                    frontier_phi_68_pred_2 = _2818;
                    frontier_phi_68_pred_3 = _2816;
                    frontier_phi_68_pred_4 = _2815;
                    frontier_phi_68_pred_5 = _2817;
                }
                _2617 = frontier_phi_68_pred;
                _2615 = frontier_phi_68_pred_1;
                _2613 = frontier_phi_68_pred_2;
                _2609 = frontier_phi_68_pred_3;
                _2607 = frontier_phi_68_pred_4;
                _2611 = frontier_phi_68_pred_5;
                uint _2766 = _2765 + 1u;
                if (_2766 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2759 = _2607;
                    _2760 = _2609;
                    _2761 = _2611;
                    _2762 = _2613;
                    _2763 = _2615;
                    _2764 = _2617;
                    _2765 = _2766;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2606 = _2607;
            _2608 = _2609;
            _2610 = _2611;
            _2612 = _2613;
            _2614 = _2615;
            _2616 = _2617;
        }
        uvec4 _2620 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2621 = _2620.z;
        uint _2623 = (_2621 >> 8u) & 15u;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        if (((4294967295u << _2623) & _2498) == 0u)
        {
            _2727 = _2606;
            _2729 = _2608;
            _2731 = _2610;
            _2733 = _2612;
            _2735 = _2614;
            _2737 = _2616;
        }
        else
        {
            float _2752 = inversesqrt(dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558)));
            float _2753 = _2752 * _1556;
            float _2754 = _2752 * _1557;
            float _2755 = _2752 * _1558;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2623 < ((_2621 >> 12u) & 15u))
            {
                float _2728;
                float _2730;
                float _2732;
                float _2734;
                float _2736;
                float _2738;
                float _2866 = _2606;
                float _2867 = _2608;
                float _2868 = _2610;
                float _2869 = _2612;
                float _2870 = _2614;
                float _2871 = _2616;
                uint _2872 = _2623;
                uint _2881;
                bool _2882;
                for (;;)
                {
                    _2881 = texelFetch(g_lightClassification, int((((_2492 << 5u) + (_2478 << 9u)) + (_2872 << 2u)) >> 2u)).x;
                    _2882 = _2881 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2882)
                    {
                        frontier_phi_74_pred = _2868;
                        frontier_phi_74_pred_1 = _2867;
                        frontier_phi_74_pred_2 = _2866;
                        frontier_phi_74_pred_3 = _2871;
                        frontier_phi_74_pred_4 = _2870;
                        frontier_phi_74_pred_5 = _2869;
                    }
                    else
                    {
                        float _3065;
                        float _3066;
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3070;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3078 = _2866;
                        float _3079 = _2867;
                        float _3080 = _2868;
                        float _3081 = _2869;
                        float _3082 = _2870;
                        float _3083 = _2871;
                        uint _3084 = _2881;
                        uint _3085;
                        vec4 _3110;
                        float _3111;
                        vec4 _3126;
                        vec3 _3138;
                        vec4 _3154;
                        vec4 _3170;
                        float _3217;
                        bool _3218;
                        for (;;)
                        {
                            uint _3095 = ((_2872 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3084));
                            _3085 = (_3084 + 4294967295u) & _3084;
                            uint _3097 = _3095 * 40u;
                            _3110 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 3u)).x));
                            _3111 = _3110.w;
                            uint _3113 = (_3095 * 40u) + 4u;
                            _3126 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3113)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 3u)).x));
                            uint _3128 = (_3095 * 40u) + 8u;
                            _3138 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x));
                            uint _3141 = (_3095 * 40u) + 16u;
                            _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            uint _3157 = (_3095 * 40u) + 20u;
                            _3170 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 3u)).x));
                            uint _3173 = (_3095 * 40u) + 24u;
                            vec4 _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            uint _3192 = (_3095 * 40u) + 28u;
                            vec4 _3205 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 3u)).x));
                            _3217 = fma(_1558, _3205.z, fma(_1557, _3205.y, _3205.x * _1556)) + _3205.w;
                            _3218 = !((fma(_1558, _3186.z, fma(_1557, _3186.y, _3186.x * _1556)) + _3186.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3218)
                            {
                                float _3245 = _3110.x - _1556;
                                float _3246 = _3110.y - _1557;
                                float _3247 = _3110.z - _1558;
                                float _3248 = dot(vec3(_3245, _3246, _3247), vec3(_3245, _3246, _3247));
                                float _3251 = inversesqrt(_3248);
                                float _3252 = _3251 * _3245;
                                float _3253 = _3251 * _3246;
                                float _3254 = _3251 * _3247;
                                float _3258 = 1.0 - (_3248 / (_3111 * _3111));
                                float _4347 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3259 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                                float _3263 = sqrt(_3248) * _3126.w;
                                float _3265 = 1.39999997615814208984375 / (_3263 + 1.39999997615814208984375);
                                float _3266 = _3265 * _3265;
                                float _3269 = ((1.0 - _3266) * dot(vec3(_3252, _3253, _3254), vec3(_413, _416, _419))) + _3266;
                                float _3272 = _3263 * _3263;
                                float _3276 = (fma(_1558, _3154.z, fma(_1557, _3154.y, _3154.x * _1556)) + _3154.w) / _3217;
                                float _3277 = (fma(_1558, _3170.z, fma(_1557, _3170.y, _3170.x * _1556)) + _3170.w) / _3217;
                                float _3281 = 1.0 - dot(vec2(_3276, _3277), vec2(_3276, _3277));
                                float _4363 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                                float _3282 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                                float _3283 = _3282 * (((isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0))) * _3259) / ((_3272 * 0.699999988079071044921875) + 1.0));
                                float _3295 = exp2(log2(1.0 / ((_3272 * 3.5) + 5.0)) * 0.25);
                                float _3296 = 1.0 - _489;
                                float _3303 = sqrt(1.0 - ((1.0 - (_3296 * _3296)) * (1.0 - (_3295 * _3295))));
                                float _3304 = _3303 * _3303;
                                float _3305 = _3304 * _3304;
                                float _3306 = _3252 - _2753;
                                float _3307 = _3253 - _2754;
                                float _3308 = _3254 - _2755;
                                float _3312 = inversesqrt(dot(vec3(_3306, _3307, _3308), vec3(_3306, _3307, _3308)));
                                float _3316 = dot(vec3(_413, _416, _419), vec3((-0.0) - _2753, (-0.0) - _2754, (-0.0) - _2755));
                                float _4374 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                                float _3319 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                                float _3320 = dot(vec3(_413, _416, _419), vec3(_3312 * _3306, _3312 * _3307, _3312 * _3308));
                                float _4385 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                                float _3323 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                                float _3327 = ((_3323 * _3323) * (_3305 + (-1.0))) + 1.0;
                                float _3328 = _3265 * _3304;
                                float _3329 = _3328 * _3328;
                                float _3335 = ((1.0 - _3329) * dot(vec3(_413, _416, _419), vec3(_3252, _3253, _3254))) + _3329;
                                float _4396 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                                float _3336 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                                float _3337 = 1.0 - _3304;
                                float _3347 = (0.5 / (((_3336 * ((_3319 * _3337) + _3304)) + 9.9999999392252902907785028219223e-09) + (((_3336 * _3337) + _3304) * _3319))) * _3336;
                                float _4407 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                                float _3357 = (_3282 * _3259) * (((_3305 * 3.1415927410125732421875) * (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0)))) / ((_3327 * _3327) * ((_3272 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3357 * _3138.z;
                                frontier_phi_80_pred_1 = _3357 * _3138.y;
                                frontier_phi_80_pred_2 = _3357 * _3138.x;
                                frontier_phi_80_pred_3 = _3283 * _3126.z;
                                frontier_phi_80_pred_4 = _3283 * _3126.y;
                                frontier_phi_80_pred_5 = _3283 * _3126.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3363 = frontier_phi_80_pred;
                            _3362 = frontier_phi_80_pred_1;
                            _3361 = frontier_phi_80_pred_2;
                            _3366 = frontier_phi_80_pred_3;
                            _3365 = frontier_phi_80_pred_4;
                            _3364 = frontier_phi_80_pred_5;
                            _3068 = _3364 + _3081;
                            _3069 = _3365 + _3082;
                            _3070 = _3366 + _3083;
                            _3065 = _3361 + _3078;
                            _3066 = _3362 + _3079;
                            _3067 = _3363 + _3080;
                            if (_3085 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3078 = _3065;
                                _3079 = _3066;
                                _3080 = _3067;
                                _3081 = _3068;
                                _3082 = _3069;
                                _3083 = _3070;
                                _3084 = _3085;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3067;
                        frontier_phi_74_pred_1 = _3066;
                        frontier_phi_74_pred_2 = _3065;
                        frontier_phi_74_pred_3 = _3070;
                        frontier_phi_74_pred_4 = _3069;
                        frontier_phi_74_pred_5 = _3068;
                    }
                    _2732 = frontier_phi_74_pred;
                    _2730 = frontier_phi_74_pred_1;
                    _2728 = frontier_phi_74_pred_2;
                    _2738 = frontier_phi_74_pred_3;
                    _2736 = frontier_phi_74_pred_4;
                    _2734 = frontier_phi_74_pred_5;
                    uint _2873 = _2872 + 1u;
                    if (_2873 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2866 = _2728;
                        _2867 = _2730;
                        _2868 = _2732;
                        _2869 = _2734;
                        _2870 = _2736;
                        _2871 = _2738;
                        _2872 = _2873;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2736;
                frontier_phi_62_63_ladder_1 = _2734;
                frontier_phi_62_63_ladder_2 = _2732;
                frontier_phi_62_63_ladder_3 = _2738;
                frontier_phi_62_63_ladder_4 = _2730;
                frontier_phi_62_63_ladder_5 = _2728;
            }
            else
            {
                frontier_phi_62_63_ladder = _2614;
                frontier_phi_62_63_ladder_1 = _2612;
                frontier_phi_62_63_ladder_2 = _2610;
                frontier_phi_62_63_ladder_3 = _2616;
                frontier_phi_62_63_ladder_4 = _2608;
                frontier_phi_62_63_ladder_5 = _2606;
            }
            _2727 = frontier_phi_62_63_ladder_5;
            _2729 = frontier_phi_62_63_ladder_4;
            _2731 = frontier_phi_62_63_ladder_2;
            _2733 = frontier_phi_62_63_ladder_1;
            _2735 = frontier_phi_62_63_ladder;
            _2737 = frontier_phi_62_63_ladder_3;
        }
        float _2742 = isnan(1.0) ? _473 : (isnan(_473) ? 1.0 : min(_473, 1.0));
        _2510 = (_2742 * _2733) + _2023;
        _2512 = (_2742 * _2735) + _2025;
        _2514 = (_2742 * _2737) + _2027;
        _2516 = ((_2727 * _458) * _2742) + _2361;
        _2518 = ((_2729 * _460) * _2742) + _2363;
        _2520 = ((_2731 * _461) * _2742) + _2365;
    }
    else
    {
        _2510 = _2023;
        _2512 = _2025;
        _2514 = _2027;
        _2516 = _2361;
        _2518 = _2363;
        _2520 = _2365;
    }
    uint _2526 = _434 + uint(cbMatDynParam._m0[0u].w);
    float _2532 = (_280.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2526].x;
    float _2533 = (_280.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2526].y;
    float _2534 = (_280.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2526].z;
    float _4423 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _4434 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _4445 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _2551 = (((isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_2510 + ((isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0))) * _473))) + ((_2516 + ((isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))) * _1283)) * cbPerFrame._m0[3u].x)) + _2532;
    float _2553 = (_2533 + ((_2518 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _1283)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_2512 + ((isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0))) * _473)));
    float _2555 = (_2534 + ((_2520 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _1283)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2514 + ((isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0))) * _473)));
    float _4471 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2568 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
    uint _2569 = _432 + 6u;
    float _2577 = _391 / cbSceneParam._m0[86u].x;
    float _2578 = _392 / cbSceneParam._m0[86u].y;
    vec4 _2592 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2577, _2578, (log2((isnan(cbSceneParam._m0[77u].w) ? _324 : (isnan(_324) ? cbSceneParam._m0[77u].w : min(_324, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2594 = _2592.x;
    float _2595 = _2592.y;
    float _2596 = _2592.z;
    float _2597 = _2592.w;
    float _2668;
    float _2670;
    float _2672;
    float _2674;
    if (_324 > cbSceneParam._m0[78u].w)
    {
        float _2631 = isnan(_324) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _324 : min(cbSceneParam._m0[80u].w, _324));
        float _2632 = _2631 / _324;
        float _2643 = _2632 * _376;
        float _2644 = _377 * _2632;
        float _2645 = (-0.0) - _2644;
        float _2646 = _2632 * _378;
        float _2648 = (cbSceneParam._m0[77u].w * _2645) / _2631;
        float _2649 = _2648 + cbSceneParam._m0[79u].w;
        float _2650 = cbSceneParam._m0[79u].w - _2644;
        float _2656 = sqrt(((_2643 * _2643) + (_2644 * _2644)) + (_2646 * _2646));
        float _2659 = (1.0 - (cbSceneParam._m0[77u].w / _2631)) * _2656;
        float _2664 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2666 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2828;
        if (abs((_2645 - _2648) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2828 = ((((_2649 > 0.0) ? exp2(_2664 * _2649) : (2.0 - exp2(_2666 * _2649))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2659;
        }
        else
        {
            float _2788 = 1.0 / cbSceneParam._m0[80u].x;
            float _2789 = isnan(_2650) ? _2649 : (isnan(_2649) ? _2650 : max(_2649, _2650));
            float _2790 = isnan(_2650) ? _2649 : (isnan(_2649) ? _2650 : min(_2649, _2650));
            float _2799 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : min(_2789, 0.0));
            float _2800 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : min(_2790, 0.0));
            _2828 = ((abs(_2656 / _2645) * cbSceneParam._m0[80u].y) * ((((_2799 - _2800) * 2.0) - ((exp2(_2664 * (isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0)))) - exp2(_2664 * (isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0))))) * _2788)) - ((exp2(_2666 * _2799) - exp2(_2666 * _2800)) * _2788))) + (_2659 * cbSceneParam._m0[80u].z);
        }
        vec4 _2830 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2577, _2578, 1.0), 0.0);
        float _2839 = exp2((_2828 * (-1.44269502162933349609375)) * (1.0 - _2830.w));
        float _2840 = log2(_2839);
        float _2856 = log2(_2597);
        _2668 = (exp2(_2856 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2840 * cbSceneParam._m0[78u].x)) * _2830.x) / cbSceneParam._m0[78u].x)) + _2594;
        _2670 = (exp2(_2856 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2840 * cbSceneParam._m0[78u].y)) * _2830.y) / cbSceneParam._m0[78u].y)) + _2595;
        _2672 = (exp2(_2856 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2840 * cbSceneParam._m0[78u].z)) * _2830.z) / cbSceneParam._m0[78u].z)) + _2596;
        _2674 = _2839 * _2597;
    }
    else
    {
        _2668 = _2594;
        _2670 = _2595;
        _2672 = _2596;
        _2674 = _2597;
    }
    float _2686 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2687 = _2686 == 3.0;
    float _2688 = log2(_2674);
    float _2692 = exp2(_2688 * cbSceneParam._m0[78u].x);
    float _2693 = exp2(_2688 * cbSceneParam._m0[78u].y);
    float _2694 = exp2(_2688 * cbSceneParam._m0[78u].z);
    float _2695 = _2692 * (isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0)));
    float _2696 = _2693 * (isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0)));
    float _2697 = _2694 * (isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0)));
    float _2706 = (_2686 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2706 * (_2687 ? _2695 : (_2695 + (cbSceneParam._m0[72u].w * _2668)));
    SV_Target.y = _2706 * (_2687 ? _2696 : (_2696 + (cbSceneParam._m0[72u].w * _2670)));
    SV_Target.z = _2706 * (_2687 ? _2697 : (_2697 + (cbSceneParam._m0[72u].w * _2672)));
    SV_Target.w = cbInstanceData._m0[_2569].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2532) * _2568) * _2692) * _2706;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2533) * _2568) * _2693) * _2706;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2534) * _2568) * _2694) * _2706;
    SV_Target_1.w = cbInstanceData._m0[_2569].w;
}


