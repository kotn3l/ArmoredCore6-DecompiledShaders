#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_V_Emissive_Glow_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_V_Emissive_Glow_Addition_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_V_Emissive_Glow_Addition_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _844;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _209;
    float _210;
    float _211;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _209 = (-0.0) - _195;
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
    }
    else
    {
        _209 = _195;
        _210 = _196;
        _211 = _197;
    }
    vec4 _225 = texture(sampler2D(S_AMSN_V_Emissive_Glow_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _228 = _225.x;
    float _229 = _225.y;
    float _230 = _225.z;
    vec4 _246 = texture(sampler2D(S_AMSN_V_Emissive_Glow_Addition_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _250 = _246.z;
    float _254 = (_246.x * 2.0) + (-1.0);
    float _256 = (_246.y * 2.0) + (-1.0);
    float _257 = dot(vec2(_254, _256), vec2(_254, _256));
    float _3219 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _263 = sqrt(1.0 - (isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0))));
    vec4 _276 = texture(sampler2D(S_AMSN_V_Emissive_Glow_Addition_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _286 = fma(_263, _209, fma(_256, _201 * TANGENT.x, (_187 * _180) * _254));
    float _289 = fma(_263, _210, fma(_256, _201 * TANGENT.y, (_187 * _181) * _254));
    float _292 = fma(_263, _211, fma(_256, _201 * TANGENT.z, (_187 * _182) * _254));
    float _296 = inversesqrt(dot(vec3(_286, _289, _292), vec3(_286, _289, _292)));
    float _297 = _296 * _286;
    float _298 = _296 * _289;
    float _299 = _296 * _292;
    float _3230 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _300 = isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0));
    float _3241 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3252 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3263 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3274 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _304 = isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0));
    float _320 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _362 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _372 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _362);
    float _373 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _362);
    float _374 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _362);
    float _378 = inversesqrt(dot(vec3(_372, _373, _374), vec3(_372, _373, _374)));
    float _379 = _372 * _378;
    float _380 = _373 * _378;
    float _381 = _374 * _378;
    float _387 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _388 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _409 = fma(_299, cbSceneParam._m0[5u].z, fma(_298, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _297));
    float _412 = fma(_299, cbSceneParam._m0[6u].z, fma(_298, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _297));
    float _415 = fma(_299, cbSceneParam._m0[7u].z, fma(_298, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _297));
    uint _428 = uint(roundEven(NORMAL.w)) * 13u;
    uint _430 = _428 + 9u;
    uint _431 = _430 + uint(cbMatDynParam._m0[0u].w);
    float _437 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0)))) * cbInstanceData._m0[_431].x;
    float _438 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0)))) * cbInstanceData._m0[_431].y;
    float _439 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0)))) * cbInstanceData._m0[_431].z;
    float _3285 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _440 = isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0));
    float _3296 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _441 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
    float _3307 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _442 = isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0));
    float _443 = 1.0 - _304;
    float _444 = _440 * _443;
    float _445 = _441 * _443;
    float _446 = _442 * _443;
    float _451 = (_440 + (-0.039999999105930328369140625)) * _304;
    float _452 = (_441 + (-0.039999999105930328369140625)) * _304;
    float _453 = (_442 + (-0.039999999105930328369140625)) * _304;
    float _454 = _451 + 0.039999999105930328369140625;
    float _456 = _452 + 0.039999999105930328369140625;
    float _457 = _453 + 0.039999999105930328369140625;
    vec4 _466 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _387, cbSceneParam._m0[86u].y * _388));
    float _469 = _466.x * TEXCOORD.z;
    float _470 = dot(vec3(_297, _298, _299), vec3(_379, _380, _381));
    float _473 = _470 * 2.0;
    float _477 = (_473 * _297) - _379;
    float _478 = (_473 * _298) - _380;
    float _479 = (_473 * _299) - _381;
    float _483 = abs(dot(vec3(_379, _380, _381), vec3(_297, _298, _299)));
    float _3318 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _485 = sqrt(_300);
    float _498 = exp2((_485 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_485 * 3.0));
    float _504 = (1.0 - _498) * ((_485 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _505 = _498 * _485;
    float _533 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _537 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _843;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _568 = fma(_541, cbModelParam._m0[26u].z, fma(_537, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _533));
        float _572 = fma(_541, cbModelParam._m0[27u].z, fma(_537, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _533));
        float _576 = fma(_541, cbModelParam._m0[28u].z, fma(_537, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _533));
        float _601 = _533 + _297;
        float _602 = _537 + _298;
        float _603 = _541 + _299;
        float _613 = fma(_603, cbModelParam._m0[26u].z, fma(_602, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _601)) - _568;
        float _614 = fma(_603, cbModelParam._m0[27u].z, fma(_602, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _601)) - _572;
        float _615 = fma(_603, cbModelParam._m0[28u].z, fma(_602, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _601)) - _576;
        float _619 = inversesqrt(dot(vec3(_613, _614, _615), vec3(_613, _614, _615)));
        float _632 = ((_619 * _613) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_568 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _633 = ((_619 * _614) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_572 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _634 = ((_619 * _615) / cbModelParam._m0[34u].z) + ((((((_576 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _637 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        vec4 _644 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        vec4 _651 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        vec4 _658 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        float _671 = exp2((_637.w + (-0.5)) * 20.0) * 2.0;
        float _672 = _671 * (_637.x + (-0.5));
        float _673 = _671 * (_637.y + (-0.5));
        float _674 = _671 * (_637.z + (-0.5));
        float _681 = exp2((_644.w + (-0.5)) * 20.0) * 2.0;
        float _682 = _681 * (_644.x + (-0.5));
        float _683 = _681 * (_644.y + (-0.5));
        float _684 = _681 * (_644.z + (-0.5));
        float _691 = exp2((_651.w + (-0.5)) * 20.0) * 2.0;
        float _692 = _691 * (_651.x + (-0.5));
        float _693 = _691 * (_651.y + (-0.5));
        float _694 = _691 * (_651.z + (-0.5));
        float _701 = exp2((_658.w + (-0.5)) * 20.0) * 2.0;
        float _702 = _701 * (_658.x + (-0.5));
        float _703 = _701 * (_658.y + (-0.5));
        float _704 = _701 * (_658.z + (-0.5));
        float _705 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _706 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _707 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _708 = _672 * 0.5;
        float _709 = _682 * 0.5;
        float _710 = _692 * 0.5;
        float _711 = dot(vec3(_708, _709, _710), vec3(_708, _709, _710));
        float _716 = (_711 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_711);
        float _725 = (dot(vec3(_297, _298, _299), vec3(_716 * _708, _716 * _709, _716 * _710)) + 1.0) * 0.5;
        float _3344 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _735 = sqrt(((_709 * _709) + (_708 * _708)) + (_710 * _710)) / (_705 + 9.9999997473787516355514526367188e-06);
        float _3355 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _736 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
        float _737 = _736 * 2.0;
        float _741 = (1.0 - _736) / (_736 + 1.0);
        float _3366 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _742 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
        float _751 = ((((1.0 - _742) * (_737 + 2.0)) * exp2(log2(isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0))) * (_737 + 1.0))) + _742) * _705;
        float _752 = _673 * 0.5;
        float _753 = _683 * 0.5;
        float _754 = _693 * 0.5;
        float _755 = dot(vec3(_752, _753, _754), vec3(_752, _753, _754));
        float _760 = (_755 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_755);
        float _768 = (dot(vec3(_297, _298, _299), vec3(_760 * _752, _760 * _753, _760 * _754)) + 1.0) * 0.5;
        float _3377 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _777 = sqrt(((_753 * _753) + (_752 * _752)) + (_754 * _754)) / (_706 + 9.9999997473787516355514526367188e-06);
        float _3388 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _778 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
        float _779 = _778 * 2.0;
        float _783 = (1.0 - _778) / (_778 + 1.0);
        float _3399 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _784 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
        float _793 = ((((1.0 - _784) * (_779 + 2.0)) * exp2(log2(isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0))) * (_779 + 1.0))) + _784) * _706;
        float _794 = _674 * 0.5;
        float _795 = _684 * 0.5;
        float _796 = _694 * 0.5;
        float _797 = dot(vec3(_794, _795, _796), vec3(_794, _795, _796));
        float _802 = (_797 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_797);
        float _810 = (dot(vec3(_297, _298, _299), vec3(_802 * _794, _802 * _795, _802 * _796)) + 1.0) * 0.5;
        float _3410 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _819 = sqrt(((_795 * _795) + (_794 * _794)) + (_796 * _796)) / (_707 + 9.9999997473787516355514526367188e-06);
        float _3421 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _820 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _821 = _820 * 2.0;
        float _825 = (1.0 - _820) / (_820 + 1.0);
        float _3432 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _835 = ((((1.0 - _826) * (_821 + 2.0)) * exp2(log2(isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))) * (_821 + 1.0))) + _826) * _707;
        _843 = _674;
        _845 = _673;
        _846 = _672;
        _847 = _684;
        _848 = _683;
        _849 = _682;
        _850 = _694;
        _851 = _693;
        _852 = _692;
        _853 = _707;
        _854 = _706;
        _855 = _705;
        _856 = cbModelParam._m0[36u].z * (isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0)));
        _857 = cbModelParam._m0[36u].z * (isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0)));
        _858 = cbModelParam._m0[36u].z * (isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0)));
    }
    else
    {
        _843 = _844;
        _845 = _844;
        _846 = _844;
        _847 = _844;
        _848 = _844;
        _849 = _844;
        _850 = _844;
        _851 = _844;
        _852 = _844;
        _853 = _844;
        _854 = _844;
        _855 = _844;
        _856 = 0.0;
        _857 = 0.0;
        _858 = 0.0;
    }
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _884 = fma(_541, cbModelParam._m0[30u].z, fma(_537, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _533));
        float _888 = fma(_541, cbModelParam._m0[31u].z, fma(_537, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _533));
        float _892 = fma(_541, cbModelParam._m0[32u].z, fma(_537, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _533));
        float _915 = _533 + _297;
        float _916 = _537 + _298;
        float _917 = _541 + _299;
        float _927 = fma(_917, cbModelParam._m0[30u].z, fma(_916, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _915)) - _884;
        float _928 = fma(_917, cbModelParam._m0[31u].z, fma(_916, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _915)) - _888;
        float _929 = fma(_917, cbModelParam._m0[32u].z, fma(_916, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _915)) - _892;
        float _933 = inversesqrt(dot(vec3(_927, _928, _929), vec3(_927, _928, _929)));
        float _946 = ((_933 * _927) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_884 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _947 = ((_933 * _928) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_888 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _948 = ((_933 * _929) / cbModelParam._m0[35u].z) + ((((((_892 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        float _983 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_950.x + (-0.5));
        float _985 = _983 * (_950.y + (-0.5));
        float _986 = _983 * (_950.z + (-0.5));
        float _993 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_957.x + (-0.5));
        float _995 = _993 * (_957.y + (-0.5));
        float _996 = _993 * (_957.z + (-0.5));
        float _1003 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_964.x + (-0.5));
        float _1005 = _1003 * (_964.y + (-0.5));
        float _1006 = _1003 * (_964.z + (-0.5));
        float _1013 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_971.x + (-0.5));
        float _1015 = _1013 * (_971.y + (-0.5));
        float _1016 = _1013 * (_971.z + (-0.5));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = _984 * 0.5;
        float _1021 = _994 * 0.5;
        float _1022 = _1004 * 0.5;
        float _1023 = dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022));
        float _1028 = (_1023 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1023);
        float _1036 = (dot(vec3(_297, _298, _299), vec3(_1028 * _1020, _1028 * _1021, _1028 * _1022)) + 1.0) * 0.5;
        float _3473 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1045 = sqrt(((_1021 * _1021) + (_1020 * _1020)) + (_1022 * _1022)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3484 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
        float _1047 = _1046 * 2.0;
        float _1051 = (1.0 - _1046) / (_1046 + 1.0);
        float _3495 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _1061 = ((((1.0 - _1052) * (_1047 + 2.0)) * exp2(log2(isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0))) * (_1047 + 1.0))) + _1052) * _1017;
        float _1062 = _985 * 0.5;
        float _1063 = _995 * 0.5;
        float _1064 = _1005 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1078 = (dot(vec3(_297, _298, _299), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3506 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1087 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3517 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3528 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))) * (_1089 + 1.0))) + _1094) * _1018;
        float _1104 = _986 * 0.5;
        float _1105 = _996 * 0.5;
        float _1106 = _1006 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(_297, _298, _299), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _3539 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3550 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _3561 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) * (_1131 + 1.0))) + _1136) * _1019;
        _1153 = _986;
        _1154 = _985;
        _1155 = _984;
        _1156 = _996;
        _1157 = _995;
        _1158 = _994;
        _1159 = _1006;
        _1160 = _1005;
        _1161 = _1004;
        _1162 = _1019;
        _1163 = _1018;
        _1164 = _1017;
        _1165 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0)));
        _1166 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
        _1167 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
    }
    else
    {
        _1153 = _844;
        _1154 = _844;
        _1155 = _844;
        _1156 = _844;
        _1157 = _844;
        _1158 = _844;
        _1159 = _844;
        _1160 = _844;
        _1161 = _844;
        _1162 = _844;
        _1163 = _844;
        _1164 = _844;
        _1165 = 0.0;
        _1166 = 0.0;
        _1167 = 0.0;
    }
    float _1177 = (cbModelParam._m0[1u].x * (_1165 - _856)) + _856;
    float _1178 = (cbModelParam._m0[1u].x * (_1166 - _857)) + _857;
    float _1179 = (cbModelParam._m0[1u].x * (_1167 - _858)) + _858;
    float _1200 = fma(_1179, cbSceneParam._m0[89u].z, fma(_1178, cbSceneParam._m0[89u].y, _1177 * cbSceneParam._m0[89u].x));
    float _1203 = fma(_1179, cbSceneParam._m0[90u].z, fma(_1178, cbSceneParam._m0[90u].y, _1177 * cbSceneParam._m0[90u].x));
    float _1206 = fma(_1179, cbSceneParam._m0[91u].z, fma(_1178, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1177));
    float _1221 = _477 * 0.5;
    float _1222 = _478 * 0.5;
    float _1223 = _479 * 0.5;
    float _1224 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_1155, _1158, _1161, _1164));
    float _1227 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_1154, _1157, _1160, _1163));
    float _1230 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_1153, _1156, _1159, _1162));
    float _1264;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1237 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_843, _847, _850, _853));
        float _1241 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_845, _848, _851, _854));
        float _1245 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_846, _849, _852, _855));
        float _1252 = dot(vec4(cbModelParam._m0[39u]), vec4(_1221, _1222, _1223, 1.0));
        _1264 = dot(vec3(isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)), isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)), isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1252) ? 0.0 : (isnan(0.0) ? _1252 : max(0.0, _1252))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1264 = 1.0;
    }
    float _1275;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1266 = dot(vec4(cbModelParam._m0[40u]), vec4(_1221, _1222, _1223, 1.0));
        _1275 = dot(vec3(isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)), isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)), isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1266) ? 0.0 : (isnan(0.0) ? _1266 : max(0.0, _1266))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1275 = 1.0;
    }
    float _1279 = (_1275 * cbModelParam._m0[1u].x) + (_1264 * (1.0 - cbModelParam._m0[1u].x));
    float _1289 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _300);
    float _1290 = isnan(_1289) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1289 : min(cbModelParam._m0[25u].z, _1289));
    float _1372;
    float _1374;
    float _1376;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1339 = fma(_541, cbModelParam._m0[13u].z, fma(_537, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _533)) + cbModelParam._m0[13u].w;
        float _1343 = fma(_541, cbModelParam._m0[14u].z, fma(_537, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _533)) + cbModelParam._m0[14u].w;
        float _1347 = fma(_541, cbModelParam._m0[15u].z, fma(_537, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _533)) + cbModelParam._m0[15u].w;
        float _1350 = fma(_479, cbModelParam._m0[13u].z, fma(_478, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _477));
        float _1353 = fma(_479, cbModelParam._m0[14u].z, fma(_478, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _477));
        float _1356 = fma(_479, cbModelParam._m0[15u].z, fma(_478, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _477));
        float _1384;
        if (_1350 > 0.0)
        {
            _1384 = abs((1.0 - _1339) / _1350);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1350 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1339 + 1.0) / _1350);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1384 = frontier_phi_16_14_ladder;
        }
        float _1592;
        if (_1353 > 0.0)
        {
            _1592 = abs((1.0 - _1343) / _1353);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1353 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1343 + 1.0) / _1353);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1592 = frontier_phi_25_21_ladder;
        }
        float _1846;
        if (_1356 > 0.0)
        {
            _1846 = abs((1.0 - _1347) / _1356);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1356 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1347 + 1.0) / _1356);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1846 = frontier_phi_37_32_ladder;
        }
        float _1848 = isnan(_1592) ? _1384 : (isnan(_1384) ? _1592 : min(_1384, _1592));
        float _1849 = isnan(_1846) ? _1848 : (isnan(_1848) ? _1846 : min(_1848, _1846));
        float _1853 = (_1849 * _1350) + _1339;
        float _1854 = (_1849 * _1353) + _1343;
        float _1855 = (_1849 * _1356) + _1347;
        float _1856 = _1849 * 9.9999997473787516355514526367188e-05;
        float _1858 = (-1.0) - _1856;
        float _1860 = _1856 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1855 > _1860) || ((_1855 < _1858) || ((_1854 > _1860) || ((_1854 < _1858) || ((_1853 < _1858) || (_1853 > _1860))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1983 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1855, cbModelParam._m0[9u].z, fma(_1854, cbModelParam._m0[9u].y, _1853 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1855, cbModelParam._m0[10u].z, fma(_1854, cbModelParam._m0[10u].y, _1853 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1855, cbModelParam._m0[11u].z, fma(_1854, cbModelParam._m0[11u].y, _1853 * cbModelParam._m0[11u].x))), _1290);
            frontier_phi_15_37_ladder = _1983.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1983.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1983.x * cbModelParam._m0[1u].y;
        }
        _1372 = frontier_phi_15_37_ladder_2;
        _1374 = frontier_phi_15_37_ladder_1;
        _1376 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1360 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_477, _478, _479), _1290);
        _1372 = _1360.x * cbModelParam._m0[1u].y;
        _1374 = _1360.y * cbModelParam._m0[1u].y;
        _1376 = _1360.z * cbModelParam._m0[1u].y;
    }
    float _1380 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _300);
    float _1381 = isnan(_1380) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1380 : min(cbModelParam._m0[25u].w, _1380));
    float _1474;
    float _1476;
    float _1478;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1438 = fma(_541, cbModelParam._m0[21u].z, fma(_537, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _533)) + cbModelParam._m0[21u].w;
        float _1442 = fma(_541, cbModelParam._m0[22u].z, fma(_537, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _533)) + cbModelParam._m0[22u].w;
        float _1446 = fma(_541, cbModelParam._m0[23u].z, fma(_537, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _533)) + cbModelParam._m0[23u].w;
        float _1449 = fma(_479, cbModelParam._m0[21u].z, fma(_478, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _477));
        float _1452 = fma(_479, cbModelParam._m0[22u].z, fma(_478, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _477));
        float _1455 = fma(_479, cbModelParam._m0[23u].z, fma(_478, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _477));
        float _1597;
        if (_1449 > 0.0)
        {
            _1597 = abs((1.0 - _1438) / _1449);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1449 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1438 + 1.0) / _1449);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1597 = frontier_phi_27_23_ladder;
        }
        float _1873;
        if (_1452 > 0.0)
        {
            _1873 = abs((1.0 - _1442) / _1452);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1452 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1442 + 1.0) / _1452);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1873 = frontier_phi_39_34_ladder;
        }
        float _2086;
        if (_1455 > 0.0)
        {
            _2086 = abs((1.0 - _1446) / _1455);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1455 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1446 + 1.0) / _1455);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2086 = frontier_phi_48_45_ladder;
        }
        float _2088 = isnan(_1873) ? _1597 : (isnan(_1597) ? _1873 : min(_1597, _1873));
        float _2089 = isnan(_2086) ? _2088 : (isnan(_2088) ? _2086 : min(_2088, _2086));
        float _2093 = (_2089 * _1449) + _1438;
        float _2094 = (_2089 * _1452) + _1442;
        float _2095 = (_2089 * _1455) + _1446;
        float _2096 = _2089 * 9.9999997473787516355514526367188e-05;
        float _2097 = (-1.0) - _2096;
        float _2099 = _2096 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2095 > _2099) || ((_2095 < _2097) || ((_2094 > _2099) || ((_2094 < _2097) || ((_2093 < _2097) || (_2093 > _2099))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2322 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2095, cbModelParam._m0[17u].z, fma(_2094, cbModelParam._m0[17u].y, _2093 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2095, cbModelParam._m0[18u].z, fma(_2094, cbModelParam._m0[18u].y, _2093 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2095, cbModelParam._m0[19u].z, fma(_2094, cbModelParam._m0[19u].y, _2093 * cbModelParam._m0[19u].x))), _1381);
            frontier_phi_24_48_ladder = _2322.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2322.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2322.x * cbModelParam._m0[1u].z;
        }
        _1474 = frontier_phi_24_48_ladder_2;
        _1476 = frontier_phi_24_48_ladder_1;
        _1478 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1458 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_477, _478, _479), _1381);
        _1474 = _1458.x * cbModelParam._m0[1u].z;
        _1476 = _1458.y * cbModelParam._m0[1u].z;
        _1478 = _1458.z * cbModelParam._m0[1u].z;
    }
    float _1491 = (((_504 * _454) + _505) * _469) * ((cbModelParam._m0[1u].w * (_1474 - _1372)) + _1372);
    float _1493 = (((_504 * _456) + _505) * _469) * ((cbModelParam._m0[1u].w * (_1476 - _1374)) + _1374);
    float _1495 = (((_504 * _457) + _505) * _469) * ((cbModelParam._m0[1u].w * (_1478 - _1376)) + _1376);
    float _1498 = fma(_1495, cbSceneParam._m0[89u].z, fma(_1493, cbSceneParam._m0[89u].y, _1491 * cbSceneParam._m0[89u].x));
    float _1501 = fma(_1495, cbSceneParam._m0[90u].z, fma(_1493, cbSceneParam._m0[90u].y, _1491 * cbSceneParam._m0[90u].x));
    float _1504 = fma(_1495, cbSceneParam._m0[91u].z, fma(_1493, cbSceneParam._m0[91u].y, _1491 * cbSceneParam._m0[91u].x));
    uvec4 _1514 = floatBitsToUint(cbInstanceData._m0[_428 + 5u]);
    uint _1516 = _1514.x * 14u;
    uint _1517 = _1516 + 13u;
    float _1524 = _469 + (-1.0);
    float _1529 = (cbLight._m0[_1517].x * _1524) + 1.0;
    float _1530 = (cbLight._m0[_1517].y * _1524) + 1.0;
    float _1531 = (cbLight._m0[_1517].z * _1524) + 1.0;
    float _1532 = (cbLight._m0[_1517].w * _1524) + 1.0;
    uint _1533 = _1516 + 5u;
    float _1539 = isnan(1.0) ? _1530 : (isnan(_1530) ? 1.0 : min(_1530, 1.0));
    uint _1543 = _1516 + 4u;
    float _1550 = isnan(1.0) ? _1529 : (isnan(_1529) ? 1.0 : min(_1529, 1.0));
    uint _1554 = _1516 | 1u;
    float _1565 = dot(vec3(cbLight._m0[_1516].xyz), vec3(_297, _298, _299));
    float _1568 = dot(vec3(cbLight._m0[_1554].xyz), vec3(_297, _298, _299));
    float _3697 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
    float _3708 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
    float _1573 = (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * 0.3183098733425140380859375;
    float _1575 = (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * 0.3183098733425140380859375;
    float _1582 = ((cbLight._m0[_1533].x * _1539) * _1575) + ((cbLight._m0[_1543].x * _1550) * _1573);
    float _1583 = ((_1539 * cbLight._m0[_1533].y) * _1575) + ((_1550 * cbLight._m0[_1543].y) * _1573);
    float _1584 = ((_1539 * cbLight._m0[_1533].z) * _1575) + ((_1550 * cbLight._m0[_1543].z) * _1573);
    uvec4 _1589 = floatBitsToUint(cbLight._m0[_1516 + 12u]);
    bool _1591 = _1589.x == 0u;
    float _1602;
    float _1604;
    float _1606;
    if (_1591)
    {
        _1602 = _1582;
        _1604 = _1583;
        _1606 = _1584;
    }
    else
    {
        uint _1610 = _1516 + 6u;
        float _1626 = (dot(vec3(cbLight._m0[_1516 + 2u].xyz), vec3(_297, _298, _299)) * 0.5) + 0.5;
        float _1627 = _1626 * _1626;
        float _3719 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1629 = isnan(1.0) ? _1531 : (isnan(_1531) ? 1.0 : min(_1531, 1.0));
        _1602 = (((cbLight._m0[_1610].x * 0.3183098733425140380859375) * _1628) * _1629) + _1582;
        _1604 = (((cbLight._m0[_1610].y * 0.3183098733425140380859375) * _1628) * _1629) + _1583;
        _1606 = (((cbLight._m0[_1610].z * 0.3183098733425140380859375) * _1628) * _1629) + _1584;
    }
    bool _1609 = _1589.y == 0u;
    float _1647;
    float _1649;
    float _1651;
    if (_1609)
    {
        _1647 = _1602;
        _1649 = _1604;
        _1651 = _1606;
    }
    else
    {
        uint _1817 = _1516 + 7u;
        float _1833 = (dot(vec3(cbLight._m0[_1516 + 3u].xyz), vec3(_297, _298, _299)) * 0.5) + 0.5;
        float _1834 = _1833 * _1833;
        float _3735 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
        float _1835 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1836 = isnan(1.0) ? _1532 : (isnan(_1532) ? 1.0 : min(_1532, 1.0));
        _1647 = (((cbLight._m0[_1817].x * 0.3183098733425140380859375) * _1835) * _1836) + _1602;
        _1649 = (((cbLight._m0[_1817].y * 0.3183098733425140380859375) * _1835) * _1836) + _1604;
        _1651 = (((cbLight._m0[_1817].z * 0.3183098733425140380859375) * _1835) * _1836) + _1606;
    }
    uint _1654 = _1516 + 8u;
    float _1667 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1516].w)) * _300) * 0.949999988079071044921875);
    float _1668 = _1667 * _1667;
    float _1669 = cbLight._m0[_1516].x + _379;
    float _1670 = cbLight._m0[_1516].y + _380;
    float _1671 = cbLight._m0[_1516].z + _381;
    float _1675 = inversesqrt(dot(vec3(_1669, _1670, _1671), vec3(_1669, _1670, _1671)));
    float _1676 = _1675 * _1669;
    float _1677 = _1675 * _1670;
    float _1678 = _1675 * _1671;
    float _1679 = dot(vec3(_297, _298, _299), vec3(cbLight._m0[_1516].xyz));
    float _3751 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
    float _1682 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _3762 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _1683 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
    float _1684 = dot(vec3(_297, _298, _299), vec3(_1676, _1677, _1678));
    float _3773 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
    float _1687 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _1688 = dot(vec3(cbLight._m0[_1516].xyz), vec3(_1676, _1677, _1678));
    float _3784 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
    float _1692 = _1668 * _1668;
    float _1696 = ((_1687 * _1687) * (_1692 + (-1.0))) + 1.0;
    float _1704 = exp2(log2(1.0 - (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0)))) * 5.0);
    float _1705 = 0.959999978542327880859375 - _451;
    float _1707 = 0.959999978542327880859375 - _452;
    float _1708 = 0.959999978542327880859375 - _453;
    float _1715 = 1.0 - _1668;
    float _1726 = (0.5 / (((_1683 * ((_1682 * _1715) + _1668)) + 9.9999999392252902907785028219223e-09) + (((_1683 * _1715) + _1668) * _1682))) * _1682;
    float _3795 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
    float _1728 = (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1692 / ((_1696 * _1696) * 3.141590118408203125));
    uint _1739 = _1516 + 9u;
    float _1750 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1554].w)) * _300) * 0.949999988079071044921875);
    float _1751 = _1750 * _1750;
    float _1752 = cbLight._m0[_1554].x + _379;
    float _1753 = cbLight._m0[_1554].y + _380;
    float _1754 = cbLight._m0[_1554].z + _381;
    float _1758 = inversesqrt(dot(vec3(_1752, _1753, _1754), vec3(_1752, _1753, _1754)));
    float _1759 = _1758 * _1752;
    float _1760 = _1758 * _1753;
    float _1761 = _1758 * _1754;
    float _1762 = dot(vec3(_297, _298, _299), vec3(cbLight._m0[_1554].xyz));
    float _3806 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1765 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _1766 = dot(vec3(_297, _298, _299), vec3(_1759, _1760, _1761));
    float _3817 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1769 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _1770 = dot(vec3(cbLight._m0[_1554].xyz), vec3(_1759, _1760, _1761));
    float _3828 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _1774 = _1751 * _1751;
    float _1778 = ((_1769 * _1769) * (_1774 + (-1.0))) + 1.0;
    float _1785 = exp2(log2(1.0 - (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0)))) * 5.0);
    float _1792 = 1.0 - _1751;
    float _1802 = (0.5 / (((_1683 * ((_1765 * _1792) + _1751)) + 9.9999999392252902907785028219223e-09) + (((_1683 * _1792) + _1751) * _1765))) * _1765;
    float _3839 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
    float _1804 = (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * (_1774 / ((_1778 * _1778) * 3.141590118408203125));
    float _1814 = (((((_1785 * _1705) + _454) * cbLight._m0[_1739].x) * _1804) * _1539) + (((((_1704 * _1705) + _454) * cbLight._m0[_1654].x) * _1728) * _1550);
    float _1815 = (((((_1785 * _1707) + _456) * cbLight._m0[_1739].y) * _1804) * _1539) + (((((_1704 * _1707) + _456) * cbLight._m0[_1654].y) * _1728) * _1550);
    float _1816 = (((((_1785 * _1708) + _457) * cbLight._m0[_1739].z) * _1804) * _1539) + (((((_1704 * _1708) + _457) * cbLight._m0[_1654].z) * _1728) * _1550);
    float _1878;
    float _1880;
    float _1882;
    if (_1591)
    {
        _1878 = _1814;
        _1880 = _1815;
        _1882 = _1816;
    }
    else
    {
        uint _1884 = _1516 + 2u;
        uint _1888 = _1516 + 10u;
        float _1902 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1884].w)) * _300) * 0.949999988079071044921875);
        float _1903 = _1902 * _1902;
        float _1904 = cbLight._m0[_1884].x + _379;
        float _1905 = cbLight._m0[_1884].y + _380;
        float _1906 = cbLight._m0[_1884].z + _381;
        float _1910 = inversesqrt(dot(vec3(_1904, _1905, _1906), vec3(_1904, _1905, _1906)));
        float _1911 = _1910 * _1904;
        float _1912 = _1910 * _1905;
        float _1913 = _1910 * _1906;
        float _1914 = dot(vec3(_297, _298, _299), vec3(cbLight._m0[_1884].xyz));
        float _3850 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
        float _1917 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1918 = dot(vec3(_297, _298, _299), vec3(_1911, _1912, _1913));
        float _3861 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1921 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1922 = dot(vec3(cbLight._m0[_1884].xyz), vec3(_1911, _1912, _1913));
        float _3872 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1926 = _1903 * _1903;
        float _1930 = ((_1921 * _1921) * (_1926 + (-1.0))) + 1.0;
        float _1937 = exp2(log2(1.0 - (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0)))) * 5.0);
        float _1944 = 1.0 - _1903;
        float _1954 = (0.5 / (((_1683 * ((_1917 * _1944) + _1903)) + 9.9999999392252902907785028219223e-09) + (((_1683 * _1944) + _1903) * _1917))) * _1917;
        float _3883 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
        float _1956 = (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1926 / ((_1930 * _1930) * 3.141590118408203125));
        float _1957 = isnan(1.0) ? _1531 : (isnan(_1531) ? 1.0 : min(_1531, 1.0));
        _1878 = (((((_1937 * _1705) + _454) * cbLight._m0[_1888].x) * _1956) * _1957) + _1814;
        _1880 = (((((_1937 * _1707) + _456) * cbLight._m0[_1888].y) * _1956) * _1957) + _1815;
        _1882 = (((((_1937 * _1708) + _457) * cbLight._m0[_1888].z) * _1956) * _1957) + _1816;
    }
    float _1992;
    float _1994;
    float _1996;
    if (_1609)
    {
        _1992 = _1878;
        _1994 = _1880;
        _1996 = _1882;
    }
    else
    {
        uint _2003 = _1516 + 3u;
        uint _2007 = _1516 + 11u;
        float _2021 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2003].w)) * _300) * 0.949999988079071044921875);
        float _2022 = _2021 * _2021;
        float _2023 = cbLight._m0[_2003].x + _379;
        float _2024 = cbLight._m0[_2003].y + _380;
        float _2025 = cbLight._m0[_2003].z + _381;
        float _2029 = inversesqrt(dot(vec3(_2023, _2024, _2025), vec3(_2023, _2024, _2025)));
        float _2030 = _2029 * _2023;
        float _2031 = _2029 * _2024;
        float _2032 = _2029 * _2025;
        float _2033 = dot(vec3(_297, _298, _299), vec3(cbLight._m0[_2003].xyz));
        float _3899 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        float _2036 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _2037 = dot(vec3(_297, _298, _299), vec3(_2030, _2031, _2032));
        float _3910 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2040 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _2041 = dot(vec3(cbLight._m0[_2003].xyz), vec3(_2030, _2031, _2032));
        float _3921 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
        float _2045 = _2022 * _2022;
        float _2049 = ((_2040 * _2040) * (_2045 + (-1.0))) + 1.0;
        float _2056 = exp2(log2(1.0 - (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) * 5.0);
        float _2063 = 1.0 - _2022;
        float _2073 = (0.5 / (((_1683 * ((_2036 * _2063) + _2022)) + 9.9999999392252902907785028219223e-09) + (((_1683 * _2063) + _2022) * _2036))) * _2036;
        float _3932 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2075 = (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_2045 / ((_2049 * _2049) * 3.141590118408203125));
        float _2076 = isnan(1.0) ? _1532 : (isnan(_1532) ? 1.0 : min(_1532, 1.0));
        _1992 = (((((_2056 * _1705) + _454) * cbLight._m0[_2007].x) * _2075) * _2076) + _1878;
        _1994 = (((((_2056 * _1707) + _456) * cbLight._m0[_2007].y) * _2075) * _2076) + _1880;
        _1996 = (((((_2056 * _1708) + _457) * cbLight._m0[_2007].z) * _2075) * _2076) + _1882;
    }
    float _2210;
    float _2212;
    float _2214;
    float _2216;
    float _2218;
    float _2220;
    if (_1514.y == 0u)
    {
        float _2151 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2152 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2151;
        float _2153 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2151;
        float _2154 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2151;
        uvec4 _2166 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2167 = _2166.x;
        uint _2178 = uint((float(_2166.y) * floor(float(uint(cbSceneParam._m0[85u].y * _388) / _2167))) + floor(float(uint(cbSceneParam._m0[85u].x * _387) / _2167)));
        float _2188 = (log2(_2154 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2189 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        uint _2192 = uint(isnan(14.0) ? _2189 : (isnan(_2189) ? 14.0 : min(_2189, 14.0)));
        uvec4 _2197 = texelFetch(g_lightClusterGridBuffer, int(((_2192 << 2u) + (_2178 << 6u)) >> 2u));
        uint _2198 = _2197.x;
        uint _2199 = _2166.z;
        float _2327;
        float _2329;
        float _2331;
        float _2333;
        float _2335;
        float _2337;
        if (((((1u << ((_2199 >> 4u) & 15u)) + 4294967295u) & _2198) == 0u) || ((_2199 & 240u) == 0u))
        {
            _2327 = 0.0;
            _2329 = 0.0;
            _2331 = 0.0;
            _2333 = 0.0;
            _2335 = 0.0;
            _2337 = 0.0;
        }
        else
        {
            float _2328;
            float _2330;
            float _2332;
            float _2334;
            float _2336;
            float _2338;
            float _2480 = 0.0;
            float _2481 = 0.0;
            float _2482 = 0.0;
            float _2483 = 0.0;
            float _2484 = 0.0;
            float _2485 = 0.0;
            uint _2486 = 0u;
            uint _2495;
            bool _2496;
            for (;;)
            {
                _2495 = texelFetch(g_lightClassification, int((((_2192 << 5u) + (_2178 << 9u)) + (_2486 << 2u)) >> 2u)).x;
                _2496 = _2495 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2496)
                {
                    frontier_phi_63_pred = _2485;
                    frontier_phi_63_pred_1 = _2484;
                    frontier_phi_63_pred_2 = _2483;
                    frontier_phi_63_pred_3 = _2482;
                    frontier_phi_63_pred_4 = _2481;
                    frontier_phi_63_pred_5 = _2480;
                }
                else
                {
                    float _2604;
                    float _2605;
                    float _2606;
                    float _2607;
                    float _2608;
                    float _2609;
                    uint _2610;
                    _2604 = _2480;
                    _2605 = _2481;
                    _2606 = _2482;
                    _2607 = _2483;
                    _2608 = _2484;
                    _2609 = _2485;
                    _2610 = _2495;
                    float _2536;
                    float _2537;
                    float _2538;
                    float _2539;
                    float _2540;
                    float _2541;
                    for (;;)
                    {
                        uint _2614 = uint(findLSB(_2610)) + (_2486 << 5u);
                        uint _2611 = (_2610 + 4294967295u) & _2610;
                        uint _2616 = _2614 * 48u;
                        vec4 _2630 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2616)).x, texelFetch(g_PointLightRenderingBuffer, int(_2616 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2616 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2616 + 3u)).x));
                        uint _2636 = (_2614 * 48u) + 4u;
                        vec4 _2649 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2636)).x, texelFetch(g_PointLightRenderingBuffer, int(_2636 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2636 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2636 + 3u)).x));
                        uint _2655 = (_2614 * 48u) + 8u;
                        vec3 _2666 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2655)).x, texelFetch(g_PointLightRenderingBuffer, int(_2655 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2655 + 2u)).x));
                        float _2670 = _2630.x - _2152;
                        float _2671 = _2630.y - _2153;
                        float _2672 = _2630.z - _2154;
                        float _2673 = dot(vec3(_2670, _2671, _2672), vec3(_2670, _2671, _2672));
                        float _2676 = inversesqrt(_2673);
                        float _2677 = _2676 * _2670;
                        float _2678 = _2676 * _2671;
                        float _2679 = _2676 * _2672;
                        float _2680 = dot(vec3(_409, _412, _415), vec3(_2677, _2678, _2679));
                        float _2685 = 1.0 - (_2673 * _2630.w);
                        float _3958 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
                        float _2686 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
                        float _2687 = sqrt(_2673) * _2649.w;
                        float _2690 = 1.39999997615814208984375 / (_2687 + 1.39999997615814208984375);
                        float _2691 = _2690 * _2690;
                        float _2694 = ((1.0 - _2691) * _2680) + _2691;
                        float _2697 = _2687 * _2687;
                        float _2701 = ((isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0))) * _2686) / ((_2697 * 0.699999988079071044921875) + 1.0);
                        float _2705 = (-0.0) - _2152;
                        float _2706 = (-0.0) - _2153;
                        float _2707 = (-0.0) - _2154;
                        float _2711 = inversesqrt(dot(vec3(_2705, _2706, _2707), vec3(_2705, _2706, _2707)));
                        float _2712 = _2711 * _2705;
                        float _2713 = _2711 * _2706;
                        float _2714 = _2711 * _2707;
                        float _2722 = exp2(log2(1.0 / ((_2697 * 3.5) + 5.0)) * 0.25);
                        float _2723 = 1.0 - _485;
                        float _2730 = sqrt(1.0 - ((1.0 - (_2723 * _2723)) * (1.0 - (_2722 * _2722))));
                        float _2731 = _2730 * _2730;
                        float _2732 = _2731 * _2731;
                        float _2733 = _2712 + _2677;
                        float _2734 = _2713 + _2678;
                        float _2735 = _2714 + _2679;
                        float _2739 = inversesqrt(dot(vec3(_2733, _2734, _2735), vec3(_2733, _2734, _2735)));
                        float _2743 = dot(vec3(_409, _412, _415), vec3(_2712, _2713, _2714));
                        float _3974 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
                        float _2746 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
                        float _2747 = dot(vec3(_409, _412, _415), vec3(_2739 * _2733, _2739 * _2734, _2739 * _2735));
                        float _3985 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
                        float _2750 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
                        float _2754 = ((_2750 * _2750) * (_2732 + (-1.0))) + 1.0;
                        float _2755 = _2690 * _2731;
                        float _2756 = _2755 * _2755;
                        float _2759 = ((1.0 - _2756) * _2680) + _2756;
                        float _3996 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
                        float _2760 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
                        float _2761 = 1.0 - _2731;
                        float _2771 = (0.5 / (((_2760 * ((_2746 * _2761) + _2731)) + 9.9999999392252902907785028219223e-09) + (((_2760 * _2761) + _2731) * _2746))) * _2760;
                        float _4007 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
                        float _2782 = (((_2732 * 3.1415927410125732421875) * (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) / ((_2754 * _2754) * ((_2697 * 2.1991131305694580078125) + 3.141590118408203125))) * _2686;
                        _2539 = (_2701 * _2649.x) + _2607;
                        _2540 = (_2701 * _2649.y) + _2608;
                        _2541 = (_2701 * _2649.z) + _2609;
                        _2536 = (_2782 * _2666.x) + _2604;
                        _2537 = (_2782 * _2666.y) + _2605;
                        _2538 = (_2782 * _2666.z) + _2606;
                        if (_2611 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2604 = _2536;
                            _2605 = _2537;
                            _2606 = _2538;
                            _2607 = _2539;
                            _2608 = _2540;
                            _2609 = _2541;
                            _2610 = _2611;
                        }
                    }
                    frontier_phi_63_pred = _2541;
                    frontier_phi_63_pred_1 = _2540;
                    frontier_phi_63_pred_2 = _2539;
                    frontier_phi_63_pred_3 = _2538;
                    frontier_phi_63_pred_4 = _2537;
                    frontier_phi_63_pred_5 = _2536;
                }
                _2338 = frontier_phi_63_pred;
                _2336 = frontier_phi_63_pred_1;
                _2334 = frontier_phi_63_pred_2;
                _2332 = frontier_phi_63_pred_3;
                _2330 = frontier_phi_63_pred_4;
                _2328 = frontier_phi_63_pred_5;
                uint _2487 = _2486 + 1u;
                if (_2487 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2480 = _2328;
                    _2481 = _2330;
                    _2482 = _2332;
                    _2483 = _2334;
                    _2484 = _2336;
                    _2485 = _2338;
                    _2486 = _2487;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2327 = _2328;
            _2329 = _2330;
            _2331 = _2332;
            _2333 = _2334;
            _2335 = _2336;
            _2337 = _2338;
        }
        uvec4 _2341 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2342 = _2341.z;
        uint _2344 = (_2342 >> 8u) & 15u;
        float _2448;
        float _2450;
        float _2452;
        float _2454;
        float _2456;
        float _2458;
        if (((4294967295u << _2344) & _2198) == 0u)
        {
            _2448 = _2327;
            _2450 = _2329;
            _2452 = _2331;
            _2454 = _2333;
            _2456 = _2335;
            _2458 = _2337;
        }
        else
        {
            float _2473 = inversesqrt(dot(vec3(_2152, _2153, _2154), vec3(_2152, _2153, _2154)));
            float _2474 = _2473 * _2152;
            float _2475 = _2473 * _2153;
            float _2476 = _2473 * _2154;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2344 < ((_2342 >> 12u) & 15u))
            {
                float _2449;
                float _2451;
                float _2453;
                float _2455;
                float _2457;
                float _2459;
                float _2587 = _2327;
                float _2588 = _2329;
                float _2589 = _2331;
                float _2590 = _2333;
                float _2591 = _2335;
                float _2592 = _2337;
                uint _2593 = _2344;
                uint _2602;
                bool _2603;
                for (;;)
                {
                    _2602 = texelFetch(g_lightClassification, int((((_2192 << 5u) + (_2178 << 9u)) + (_2593 << 2u)) >> 2u)).x;
                    _2603 = _2602 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2603)
                    {
                        frontier_phi_69_pred = _2592;
                        frontier_phi_69_pred_1 = _2591;
                        frontier_phi_69_pred_2 = _2590;
                        frontier_phi_69_pred_3 = _2589;
                        frontier_phi_69_pred_4 = _2588;
                        frontier_phi_69_pred_5 = _2587;
                    }
                    else
                    {
                        float _2787;
                        float _2788;
                        float _2789;
                        float _2790;
                        float _2791;
                        float _2792;
                        float _3083;
                        float _3084;
                        float _3085;
                        float _3086;
                        float _3087;
                        float _3088;
                        float _2800 = _2587;
                        float _2801 = _2588;
                        float _2802 = _2589;
                        float _2803 = _2590;
                        float _2804 = _2591;
                        float _2805 = _2592;
                        uint _2806 = _2602;
                        uint _2807;
                        vec4 _2832;
                        float _2833;
                        vec4 _2848;
                        vec3 _2860;
                        vec4 _2876;
                        vec4 _2892;
                        float _2939;
                        bool _2940;
                        for (;;)
                        {
                            uint _2817 = ((_2593 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2806));
                            _2807 = (_2806 + 4294967295u) & _2806;
                            uint _2819 = _2817 * 40u;
                            _2832 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2819)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 3u)).x));
                            _2833 = _2832.w;
                            uint _2835 = (_2817 * 40u) + 4u;
                            _2848 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2835)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 3u)).x));
                            uint _2850 = (_2817 * 40u) + 8u;
                            _2860 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2850)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 2u)).x));
                            uint _2863 = (_2817 * 40u) + 16u;
                            _2876 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2863)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 3u)).x));
                            uint _2879 = (_2817 * 40u) + 20u;
                            _2892 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2879)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 3u)).x));
                            uint _2895 = (_2817 * 40u) + 24u;
                            vec4 _2908 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 3u)).x));
                            uint _2914 = (_2817 * 40u) + 28u;
                            vec4 _2927 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2914)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 3u)).x));
                            _2939 = fma(_2154, _2927.z, fma(_2153, _2927.y, _2927.x * _2152)) + _2927.w;
                            _2940 = !((fma(_2154, _2908.z, fma(_2153, _2908.y, _2908.x * _2152)) + _2908.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2940)
                            {
                                float _2967 = _2832.x - _2152;
                                float _2968 = _2832.y - _2153;
                                float _2969 = _2832.z - _2154;
                                float _2970 = dot(vec3(_2967, _2968, _2969), vec3(_2967, _2968, _2969));
                                float _2973 = inversesqrt(_2970);
                                float _2974 = _2973 * _2967;
                                float _2975 = _2973 * _2968;
                                float _2976 = _2973 * _2969;
                                float _2980 = 1.0 - (_2970 / (_2833 * _2833));
                                float _4018 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                                float _2981 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
                                float _2985 = sqrt(_2970) * _2848.w;
                                float _2987 = 1.39999997615814208984375 / (_2985 + 1.39999997615814208984375);
                                float _2988 = _2987 * _2987;
                                float _2991 = ((1.0 - _2988) * dot(vec3(_2974, _2975, _2976), vec3(_409, _412, _415))) + _2988;
                                float _2994 = _2985 * _2985;
                                float _2998 = (fma(_2154, _2876.z, fma(_2153, _2876.y, _2876.x * _2152)) + _2876.w) / _2939;
                                float _2999 = (fma(_2154, _2892.z, fma(_2153, _2892.y, _2892.x * _2152)) + _2892.w) / _2939;
                                float _3003 = 1.0 - dot(vec2(_2998, _2999), vec2(_2998, _2999));
                                float _4034 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                                float _3004 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
                                float _3005 = _3004 * (((isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0))) * _2981) / ((_2994 * 0.699999988079071044921875) + 1.0));
                                float _3017 = exp2(log2(1.0 / ((_2994 * 3.5) + 5.0)) * 0.25);
                                float _3018 = 1.0 - _485;
                                float _3025 = sqrt(1.0 - ((1.0 - (_3018 * _3018)) * (1.0 - (_3017 * _3017))));
                                float _3026 = _3025 * _3025;
                                float _3027 = _3026 * _3026;
                                float _3028 = _2974 - _2474;
                                float _3029 = _2975 - _2475;
                                float _3030 = _2976 - _2476;
                                float _3034 = inversesqrt(dot(vec3(_3028, _3029, _3030), vec3(_3028, _3029, _3030)));
                                float _3038 = dot(vec3(_409, _412, _415), vec3((-0.0) - _2474, (-0.0) - _2475, (-0.0) - _2476));
                                float _4045 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                                float _3041 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
                                float _3042 = dot(vec3(_409, _412, _415), vec3(_3034 * _3028, _3034 * _3029, _3034 * _3030));
                                float _4056 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                                float _3045 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
                                float _3049 = ((_3045 * _3045) * (_3027 + (-1.0))) + 1.0;
                                float _3050 = _2987 * _3026;
                                float _3051 = _3050 * _3050;
                                float _3057 = ((1.0 - _3051) * dot(vec3(_409, _412, _415), vec3(_2974, _2975, _2976))) + _3051;
                                float _4067 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                                float _3058 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
                                float _3059 = 1.0 - _3026;
                                float _3069 = (0.5 / (((_3058 * ((_3041 * _3059) + _3026)) + 9.9999999392252902907785028219223e-09) + (((_3058 * _3059) + _3026) * _3041))) * _3058;
                                float _4078 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                                float _3079 = (_3004 * _2981) * (((_3027 * 3.1415927410125732421875) * (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) / ((_3049 * _3049) * ((_2994 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3005 * _2848.z;
                                frontier_phi_75_pred_1 = _3005 * _2848.y;
                                frontier_phi_75_pred_2 = _3005 * _2848.x;
                                frontier_phi_75_pred_3 = _3079 * _2860.z;
                                frontier_phi_75_pred_4 = _3079 * _2860.y;
                                frontier_phi_75_pred_5 = _3079 * _2860.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3088 = frontier_phi_75_pred;
                            _3087 = frontier_phi_75_pred_1;
                            _3086 = frontier_phi_75_pred_2;
                            _3085 = frontier_phi_75_pred_3;
                            _3084 = frontier_phi_75_pred_4;
                            _3083 = frontier_phi_75_pred_5;
                            _2790 = _3086 + _2803;
                            _2791 = _3087 + _2804;
                            _2792 = _3088 + _2805;
                            _2787 = _3083 + _2800;
                            _2788 = _3084 + _2801;
                            _2789 = _3085 + _2802;
                            if (_2807 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2800 = _2787;
                                _2801 = _2788;
                                _2802 = _2789;
                                _2803 = _2790;
                                _2804 = _2791;
                                _2805 = _2792;
                                _2806 = _2807;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2792;
                        frontier_phi_69_pred_1 = _2791;
                        frontier_phi_69_pred_2 = _2790;
                        frontier_phi_69_pred_3 = _2789;
                        frontier_phi_69_pred_4 = _2788;
                        frontier_phi_69_pred_5 = _2787;
                    }
                    _2459 = frontier_phi_69_pred;
                    _2457 = frontier_phi_69_pred_1;
                    _2455 = frontier_phi_69_pred_2;
                    _2453 = frontier_phi_69_pred_3;
                    _2451 = frontier_phi_69_pred_4;
                    _2449 = frontier_phi_69_pred_5;
                    uint _2594 = _2593 + 1u;
                    if (_2594 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2587 = _2449;
                        _2588 = _2451;
                        _2589 = _2453;
                        _2590 = _2455;
                        _2591 = _2457;
                        _2592 = _2459;
                        _2593 = _2594;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2459;
                frontier_phi_57_58_ladder_1 = _2457;
                frontier_phi_57_58_ladder_2 = _2455;
                frontier_phi_57_58_ladder_3 = _2453;
                frontier_phi_57_58_ladder_4 = _2451;
                frontier_phi_57_58_ladder_5 = _2449;
            }
            else
            {
                frontier_phi_57_58_ladder = _2337;
                frontier_phi_57_58_ladder_1 = _2335;
                frontier_phi_57_58_ladder_2 = _2333;
                frontier_phi_57_58_ladder_3 = _2331;
                frontier_phi_57_58_ladder_4 = _2329;
                frontier_phi_57_58_ladder_5 = _2327;
            }
            _2448 = frontier_phi_57_58_ladder_5;
            _2450 = frontier_phi_57_58_ladder_4;
            _2452 = frontier_phi_57_58_ladder_3;
            _2454 = frontier_phi_57_58_ladder_2;
            _2456 = frontier_phi_57_58_ladder_1;
            _2458 = frontier_phi_57_58_ladder;
        }
        float _2463 = isnan(1.0) ? _469 : (isnan(_469) ? 1.0 : min(_469, 1.0));
        _2210 = (_2463 * _2454) + _1647;
        _2212 = (_2463 * _2456) + _1649;
        _2214 = (_2463 * _2458) + _1651;
        _2216 = ((_2448 * _454) * _2463) + _1992;
        _2218 = ((_2450 * _456) * _2463) + _1994;
        _2220 = ((_2452 * _457) * _2463) + _1996;
    }
    else
    {
        _2210 = _1647;
        _2212 = _1649;
        _2214 = _1651;
        _2216 = _1992;
        _2218 = _1994;
        _2220 = _1996;
    }
    uint _2226 = _430 + uint(cbMatDynParam._m0[0u].w);
    float _2232 = (_276.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2226].x;
    float _2233 = (_276.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2226].y;
    float _2234 = (_276.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2226].z;
    float _4094 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _4105 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _4116 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _2251 = (((isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_2210 + ((isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0))) * _469))) + ((_2216 + ((isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))) * _1279)) * cbPerFrame._m0[3u].x)) + _2232;
    float _2253 = (_2233 + ((_2218 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _1279)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_2212 + ((isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0))) * _469)));
    float _2255 = (_2234 + ((_2220 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _1279)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_2214 + ((isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0))) * _469)));
    float _4142 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2268 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    uint _2269 = _428 + 6u;
    float _2277 = _387 / cbSceneParam._m0[86u].x;
    float _2278 = _388 / cbSceneParam._m0[86u].y;
    vec4 _2292 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2277, _2278, (log2((isnan(cbSceneParam._m0[77u].w) ? _320 : (isnan(_320) ? cbSceneParam._m0[77u].w : min(_320, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2294 = _2292.x;
    float _2295 = _2292.y;
    float _2296 = _2292.z;
    float _2297 = _2292.w;
    float _2389;
    float _2391;
    float _2393;
    float _2395;
    if (_320 > cbSceneParam._m0[78u].w)
    {
        float _2352 = isnan(_320) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _320 : min(cbSceneParam._m0[80u].w, _320));
        float _2353 = _2352 / _320;
        float _2364 = _2353 * _372;
        float _2365 = _373 * _2353;
        float _2366 = (-0.0) - _2365;
        float _2367 = _2353 * _374;
        float _2369 = (cbSceneParam._m0[77u].w * _2366) / _2352;
        float _2370 = _2369 + cbSceneParam._m0[79u].w;
        float _2371 = cbSceneParam._m0[79u].w - _2365;
        float _2377 = sqrt(((_2364 * _2364) + (_2365 * _2365)) + (_2367 * _2367));
        float _2380 = (1.0 - (cbSceneParam._m0[77u].w / _2352)) * _2377;
        float _2385 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2387 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2549;
        if (abs((_2366 - _2369) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2549 = ((((_2370 > 0.0) ? exp2(_2385 * _2370) : (2.0 - exp2(_2387 * _2370))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2380;
        }
        else
        {
            float _2509 = 1.0 / cbSceneParam._m0[80u].x;
            float _2510 = isnan(_2371) ? _2370 : (isnan(_2370) ? _2371 : max(_2370, _2371));
            float _2511 = isnan(_2371) ? _2370 : (isnan(_2370) ? _2371 : min(_2370, _2371));
            float _2520 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : min(_2510, 0.0));
            float _2521 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : min(_2511, 0.0));
            _2549 = ((abs(_2377 / _2366) * cbSceneParam._m0[80u].y) * ((((_2520 - _2521) * 2.0) - ((exp2(_2385 * (isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0)))) - exp2(_2385 * (isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0))))) * _2509)) - ((exp2(_2387 * _2520) - exp2(_2387 * _2521)) * _2509))) + (_2380 * cbSceneParam._m0[80u].z);
        }
        vec4 _2551 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2277, _2278, 1.0), 0.0);
        float _2560 = exp2((_2549 * (-1.44269502162933349609375)) * (1.0 - _2551.w));
        float _2561 = log2(_2560);
        float _2577 = log2(_2297);
        _2389 = (exp2(_2577 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2561 * cbSceneParam._m0[78u].x)) * _2551.x) / cbSceneParam._m0[78u].x)) + _2294;
        _2391 = (exp2(_2577 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2561 * cbSceneParam._m0[78u].y)) * _2551.y) / cbSceneParam._m0[78u].y)) + _2295;
        _2393 = (exp2(_2577 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2561 * cbSceneParam._m0[78u].z)) * _2551.z) / cbSceneParam._m0[78u].z)) + _2296;
        _2395 = _2560 * _2297;
    }
    else
    {
        _2389 = _2294;
        _2391 = _2295;
        _2393 = _2296;
        _2395 = _2297;
    }
    float _2407 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2408 = _2407 == 3.0;
    float _2409 = log2(_2395);
    float _2413 = exp2(_2409 * cbSceneParam._m0[78u].x);
    float _2414 = exp2(_2409 * cbSceneParam._m0[78u].y);
    float _2415 = exp2(_2409 * cbSceneParam._m0[78u].z);
    float _2416 = _2413 * (isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0)));
    float _2417 = _2414 * (isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0)));
    float _2418 = _2415 * (isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0)));
    float _2427 = (_2407 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2427 * (_2408 ? _2416 : (_2416 + (cbSceneParam._m0[72u].w * _2389)));
    SV_Target.y = _2427 * (_2408 ? _2417 : (_2417 + (cbSceneParam._m0[72u].w * _2391)));
    SV_Target.z = _2427 * (_2408 ? _2418 : (_2418 + (cbSceneParam._m0[72u].w * _2393)));
    SV_Target.w = cbInstanceData._m0[_2269].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2232) * _2268) * _2413) * _2427;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2233) * _2268) * _2414) * _2427;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2234) * _2268) * _2415) * _2427;
    SV_Target_1.w = cbInstanceData._m0[_2269].w;
}


