#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_V_Emissive_Glow_Addition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_V_Emissive_Glow_Addition_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_V_Emissive_Glow_Addition_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _891;
float _3344;
float _3345;
float _3346;
float _3347;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    vec4 _231 = texture(sampler2D(S_AMSN_V_Emissive_Glow_Addition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _234 = _231.x;
    float _235 = _231.y;
    float _236 = _231.z;
    vec4 _252 = texture(sampler2D(S_AMSN_V_Emissive_Glow_Addition_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _256 = _252.z;
    float _260 = (_252.x * 2.0) + (-1.0);
    float _262 = (_252.y * 2.0) + (-1.0);
    float _263 = dot(vec2(_260, _262), vec2(_260, _262));
    float _3356 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _269 = sqrt(1.0 - (isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0))));
    vec4 _282 = texture(sampler2D(S_AMSN_V_Emissive_Glow_Addition_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _292 = fma(_269, _215, fma(_262, _207 * TANGENT.x, (_193 * _186) * _260));
    float _295 = fma(_269, _216, fma(_262, _207 * TANGENT.y, (_193 * _187) * _260));
    float _298 = fma(_269, _217, fma(_262, _207 * TANGENT.z, (_193 * _188) * _260));
    float _302 = inversesqrt(dot(vec3(_292, _295, _298), vec3(_292, _295, _298)));
    float _303 = _302 * _292;
    float _304 = _302 * _295;
    float _305 = _302 * _298;
    float _3367 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _306 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
    float _3378 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3389 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3400 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3411 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _310 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
    float _326 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _368 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _378 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _368);
    float _379 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _368);
    float _380 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _368);
    float _384 = inversesqrt(dot(vec3(_378, _379, _380), vec3(_378, _379, _380)));
    float _385 = _378 * _384;
    float _386 = _379 * _384;
    float _387 = _380 * _384;
    vec4 _392 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _394 = _392.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _570 = sqrt(((_378 * _378) + (_379 * _379)) + (_380 * _380));
        float _576 = (cbMatDynParam._m0[5u].x * _570) + cbMatDynParam._m0[5u].y;
        float _3422 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
        float _577 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _581 = (cbMatDynParam._m0[5u].z * _570) + cbMatDynParam._m0[5u].w;
        float _3433 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0))) - _577)) + _577) < ((_394 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _406 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _407 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _427 = fma(_305, cbSceneParam._m0[5u].z, fma(_304, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _303));
    float _430 = fma(_305, cbSceneParam._m0[6u].z, fma(_304, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _303));
    float _433 = fma(_305, cbSceneParam._m0[7u].z, fma(_304, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _303));
    uint _446 = uint(roundEven(NORMAL.w)) * 13u;
    uint _448 = _446 + 9u;
    uint _449 = _448 + uint(cbMatDynParam._m0[0u].w);
    float _455 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0)))) * cbInstanceData._m0[_449].x;
    float _456 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0)))) * cbInstanceData._m0[_449].y;
    float _457 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0)))) * cbInstanceData._m0[_449].z;
    float _3444 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
    float _3455 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _459 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
    float _3466 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _460 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    float _461 = 1.0 - _310;
    float _462 = _458 * _461;
    float _463 = _459 * _461;
    float _464 = _460 * _461;
    float _469 = (_458 + (-0.039999999105930328369140625)) * _310;
    float _470 = (_459 + (-0.039999999105930328369140625)) * _310;
    float _471 = (_460 + (-0.039999999105930328369140625)) * _310;
    float _472 = _469 + 0.039999999105930328369140625;
    float _474 = _470 + 0.039999999105930328369140625;
    float _475 = _471 + 0.039999999105930328369140625;
    vec4 _484 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _406, cbSceneParam._m0[86u].y * _407));
    float _487 = _484.x * TEXCOORD.z;
    float _488 = dot(vec3(_303, _304, _305), vec3(_385, _386, _387));
    float _491 = _488 * 2.0;
    float _495 = (_491 * _303) - _385;
    float _496 = (_491 * _304) - _386;
    float _497 = (_491 * _305) - _387;
    float _501 = abs(dot(vec3(_385, _386, _387), vec3(_303, _304, _305)));
    float _3477 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _503 = sqrt(_306);
    float _516 = exp2((_503 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_503 * 3.0));
    float _522 = (1.0 - _516) * ((_503 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _523 = _516 * _503;
    float _551 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _555 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _559 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _890;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _615 = fma(_559, cbModelParam._m0[26u].z, fma(_555, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _551));
        float _619 = fma(_559, cbModelParam._m0[27u].z, fma(_555, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _551));
        float _623 = fma(_559, cbModelParam._m0[28u].z, fma(_555, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _551));
        float _648 = _551 + _303;
        float _649 = _555 + _304;
        float _650 = _559 + _305;
        float _660 = fma(_650, cbModelParam._m0[26u].z, fma(_649, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _648)) - _615;
        float _661 = fma(_650, cbModelParam._m0[27u].z, fma(_649, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _648)) - _619;
        float _662 = fma(_650, cbModelParam._m0[28u].z, fma(_649, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _648)) - _623;
        float _666 = inversesqrt(dot(vec3(_660, _661, _662), vec3(_660, _661, _662)));
        float _679 = ((_666 * _660) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_615 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _680 = ((_666 * _661) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_619 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _681 = ((_666 * _662) / cbModelParam._m0[34u].z) + ((((((_623 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _684 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        vec4 _691 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        vec4 _698 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        vec4 _705 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        float _718 = exp2((_684.w + (-0.5)) * 20.0) * 2.0;
        float _719 = _718 * (_684.x + (-0.5));
        float _720 = _718 * (_684.y + (-0.5));
        float _721 = _718 * (_684.z + (-0.5));
        float _728 = exp2((_691.w + (-0.5)) * 20.0) * 2.0;
        float _729 = _728 * (_691.x + (-0.5));
        float _730 = _728 * (_691.y + (-0.5));
        float _731 = _728 * (_691.z + (-0.5));
        float _738 = exp2((_698.w + (-0.5)) * 20.0) * 2.0;
        float _739 = _738 * (_698.x + (-0.5));
        float _740 = _738 * (_698.y + (-0.5));
        float _741 = _738 * (_698.z + (-0.5));
        float _748 = exp2((_705.w + (-0.5)) * 20.0) * 2.0;
        float _749 = _748 * (_705.x + (-0.5));
        float _750 = _748 * (_705.y + (-0.5));
        float _751 = _748 * (_705.z + (-0.5));
        float _752 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _753 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _754 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _755 = _719 * 0.5;
        float _756 = _729 * 0.5;
        float _757 = _739 * 0.5;
        float _758 = dot(vec3(_755, _756, _757), vec3(_755, _756, _757));
        float _763 = (_758 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_758);
        float _772 = (dot(vec3(_303, _304, _305), vec3(_763 * _755, _763 * _756, _763 * _757)) + 1.0) * 0.5;
        float _3503 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _782 = sqrt(((_756 * _756) + (_755 * _755)) + (_757 * _757)) / (_752 + 9.9999997473787516355514526367188e-06);
        float _3514 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _784 = _783 * 2.0;
        float _788 = (1.0 - _783) / (_783 + 1.0);
        float _3525 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _798 = ((((1.0 - _789) * (_784 + 2.0)) * exp2(log2(isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) * (_784 + 1.0))) + _789) * _752;
        float _799 = _720 * 0.5;
        float _800 = _730 * 0.5;
        float _801 = _740 * 0.5;
        float _802 = dot(vec3(_799, _800, _801), vec3(_799, _800, _801));
        float _807 = (_802 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_802);
        float _815 = (dot(vec3(_303, _304, _305), vec3(_807 * _799, _807 * _800, _807 * _801)) + 1.0) * 0.5;
        float _3536 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _824 = sqrt(((_800 * _800) + (_799 * _799)) + (_801 * _801)) / (_753 + 9.9999997473787516355514526367188e-06);
        float _3547 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _825 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _826 = _825 * 2.0;
        float _830 = (1.0 - _825) / (_825 + 1.0);
        float _3558 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _840 = ((((1.0 - _831) * (_826 + 2.0)) * exp2(log2(isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0))) * (_826 + 1.0))) + _831) * _753;
        float _841 = _721 * 0.5;
        float _842 = _731 * 0.5;
        float _843 = _741 * 0.5;
        float _844 = dot(vec3(_841, _842, _843), vec3(_841, _842, _843));
        float _849 = (_844 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_844);
        float _857 = (dot(vec3(_303, _304, _305), vec3(_849 * _841, _849 * _842, _849 * _843)) + 1.0) * 0.5;
        float _3569 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _866 = sqrt(((_842 * _842) + (_841 * _841)) + (_843 * _843)) / (_754 + 9.9999997473787516355514526367188e-06);
        float _3580 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _868 = _867 * 2.0;
        float _872 = (1.0 - _867) / (_867 + 1.0);
        float _3591 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _882 = ((((1.0 - _873) * (_868 + 2.0)) * exp2(log2(isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) * (_868 + 1.0))) + _873) * _754;
        _890 = _721;
        _892 = _720;
        _893 = _719;
        _894 = _731;
        _895 = _730;
        _896 = _729;
        _897 = _741;
        _898 = _740;
        _899 = _739;
        _900 = _754;
        _901 = _753;
        _902 = _752;
        _903 = cbModelParam._m0[36u].z * (isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0)));
        _904 = cbModelParam._m0[36u].z * (isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0)));
        _905 = cbModelParam._m0[36u].z * (isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0)));
    }
    else
    {
        _890 = _891;
        _892 = _891;
        _893 = _891;
        _894 = _891;
        _895 = _891;
        _896 = _891;
        _897 = _891;
        _898 = _891;
        _899 = _891;
        _900 = _891;
        _901 = _891;
        _902 = _891;
        _903 = 0.0;
        _904 = 0.0;
        _905 = 0.0;
    }
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _934 = fma(_559, cbModelParam._m0[30u].z, fma(_555, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _551));
        float _938 = fma(_559, cbModelParam._m0[31u].z, fma(_555, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _551));
        float _942 = fma(_559, cbModelParam._m0[32u].z, fma(_555, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _551));
        float _965 = _551 + _303;
        float _966 = _555 + _304;
        float _967 = _559 + _305;
        float _977 = fma(_967, cbModelParam._m0[30u].z, fma(_966, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _965)) - _934;
        float _978 = fma(_967, cbModelParam._m0[31u].z, fma(_966, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _965)) - _938;
        float _979 = fma(_967, cbModelParam._m0[32u].z, fma(_966, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _965)) - _942;
        float _983 = inversesqrt(dot(vec3(_977, _978, _979), vec3(_977, _978, _979)));
        float _996 = ((_983 * _977) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_934 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _997 = ((_983 * _978) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_938 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _998 = ((_983 * _979) / cbModelParam._m0[35u].z) + ((((((_942 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        float _1033 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_1000.x + (-0.5));
        float _1035 = _1033 * (_1000.y + (-0.5));
        float _1036 = _1033 * (_1000.z + (-0.5));
        float _1043 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1007.x + (-0.5));
        float _1045 = _1043 * (_1007.y + (-0.5));
        float _1046 = _1043 * (_1007.z + (-0.5));
        float _1053 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1014.x + (-0.5));
        float _1055 = _1053 * (_1014.y + (-0.5));
        float _1056 = _1053 * (_1014.z + (-0.5));
        float _1063 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1021.x + (-0.5));
        float _1065 = _1063 * (_1021.y + (-0.5));
        float _1066 = _1063 * (_1021.z + (-0.5));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = _1034 * 0.5;
        float _1071 = _1044 * 0.5;
        float _1072 = _1054 * 0.5;
        float _1073 = dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072));
        float _1078 = (_1073 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1073);
        float _1086 = (dot(vec3(_303, _304, _305), vec3(_1078 * _1070, _1078 * _1071, _1078 * _1072)) + 1.0) * 0.5;
        float _3632 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1095 = sqrt(((_1071 * _1071) + (_1070 * _1070)) + (_1072 * _1072)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _3643 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1097 = _1096 * 2.0;
        float _1101 = (1.0 - _1096) / (_1096 + 1.0);
        float _3654 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1111 = ((((1.0 - _1102) * (_1097 + 2.0)) * exp2(log2(isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * (_1097 + 1.0))) + _1102) * _1067;
        float _1112 = _1035 * 0.5;
        float _1113 = _1045 * 0.5;
        float _1114 = _1055 * 0.5;
        float _1115 = dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114));
        float _1120 = (_1115 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1115);
        float _1128 = (dot(vec3(_303, _304, _305), vec3(_1120 * _1112, _1120 * _1113, _1120 * _1114)) + 1.0) * 0.5;
        float _3665 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1137 = sqrt(((_1113 * _1113) + (_1112 * _1112)) + (_1114 * _1114)) / (_1068 + 9.9999997473787516355514526367188e-06);
        float _3676 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1139 = _1138 * 2.0;
        float _1143 = (1.0 - _1138) / (_1138 + 1.0);
        float _3687 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1153 = ((((1.0 - _1144) * (_1139 + 2.0)) * exp2(log2(isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_1139 + 1.0))) + _1144) * _1068;
        float _1154 = _1036 * 0.5;
        float _1155 = _1046 * 0.5;
        float _1156 = _1056 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1170 = (dot(vec3(_303, _304, _305), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3698 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1179 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _3709 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _3720 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * (_1181 + 1.0))) + _1186) * _1069;
        _1203 = _1036;
        _1204 = _1035;
        _1205 = _1034;
        _1206 = _1046;
        _1207 = _1045;
        _1208 = _1044;
        _1209 = _1056;
        _1210 = _1055;
        _1211 = _1054;
        _1212 = _1069;
        _1213 = _1068;
        _1214 = _1067;
        _1215 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)));
        _1216 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)));
        _1217 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
    }
    else
    {
        _1203 = _891;
        _1204 = _891;
        _1205 = _891;
        _1206 = _891;
        _1207 = _891;
        _1208 = _891;
        _1209 = _891;
        _1210 = _891;
        _1211 = _891;
        _1212 = _891;
        _1213 = _891;
        _1214 = _891;
        _1215 = 0.0;
        _1216 = 0.0;
        _1217 = 0.0;
    }
    float _1227 = (cbModelParam._m0[1u].x * (_1215 - _903)) + _903;
    float _1228 = (cbModelParam._m0[1u].x * (_1216 - _904)) + _904;
    float _1229 = (cbModelParam._m0[1u].x * (_1217 - _905)) + _905;
    float _1250 = fma(_1229, cbSceneParam._m0[89u].z, fma(_1228, cbSceneParam._m0[89u].y, _1227 * cbSceneParam._m0[89u].x));
    float _1253 = fma(_1229, cbSceneParam._m0[90u].z, fma(_1228, cbSceneParam._m0[90u].y, _1227 * cbSceneParam._m0[90u].x));
    float _1256 = fma(_1229, cbSceneParam._m0[91u].z, fma(_1228, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1227));
    float _1271 = _495 * 0.5;
    float _1272 = _496 * 0.5;
    float _1273 = _497 * 0.5;
    float _1274 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_1205, _1208, _1211, _1214));
    float _1277 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_1204, _1207, _1210, _1213));
    float _1280 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_1203, _1206, _1209, _1212));
    float _1314;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1287 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_890, _894, _897, _900));
        float _1291 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_892, _895, _898, _901));
        float _1295 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_893, _896, _899, _902));
        float _1302 = dot(vec4(cbModelParam._m0[39u]), vec4(_1271, _1272, _1273, 1.0));
        _1314 = dot(vec3(isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)), isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)), isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1302) ? 0.0 : (isnan(0.0) ? _1302 : max(0.0, _1302))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1314 = 1.0;
    }
    float _1325;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1316 = dot(vec4(cbModelParam._m0[40u]), vec4(_1271, _1272, _1273, 1.0));
        _1325 = dot(vec3(isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)), isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)), isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1316) ? 0.0 : (isnan(0.0) ? _1316 : max(0.0, _1316))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1325 = 1.0;
    }
    float _1329 = (_1325 * cbModelParam._m0[1u].x) + (_1314 * (1.0 - cbModelParam._m0[1u].x));
    float _1339 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _306);
    float _1340 = isnan(_1339) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1339 : min(cbModelParam._m0[25u].z, _1339));
    float _1422;
    float _1424;
    float _1426;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1389 = fma(_559, cbModelParam._m0[13u].z, fma(_555, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _551)) + cbModelParam._m0[13u].w;
        float _1393 = fma(_559, cbModelParam._m0[14u].z, fma(_555, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _551)) + cbModelParam._m0[14u].w;
        float _1397 = fma(_559, cbModelParam._m0[15u].z, fma(_555, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _551)) + cbModelParam._m0[15u].w;
        float _1400 = fma(_497, cbModelParam._m0[13u].z, fma(_496, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _495));
        float _1403 = fma(_497, cbModelParam._m0[14u].z, fma(_496, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _495));
        float _1406 = fma(_497, cbModelParam._m0[15u].z, fma(_496, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _495));
        float _1434;
        if (_1400 > 0.0)
        {
            _1434 = abs((1.0 - _1389) / _1400);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1400 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1389 + 1.0) / _1400);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1434 = frontier_phi_19_17_ladder;
        }
        float _1663;
        if (_1403 > 0.0)
        {
            _1663 = abs((1.0 - _1393) / _1403);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1403 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1393 + 1.0) / _1403);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1663 = frontier_phi_28_24_ladder;
        }
        float _1920;
        if (_1406 > 0.0)
        {
            _1920 = abs((1.0 - _1397) / _1406);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1406 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1397 + 1.0) / _1406);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1920 = frontier_phi_40_35_ladder;
        }
        float _1922 = isnan(_1663) ? _1434 : (isnan(_1434) ? _1663 : min(_1434, _1663));
        float _1923 = isnan(_1920) ? _1922 : (isnan(_1922) ? _1920 : min(_1922, _1920));
        float _1927 = (_1923 * _1400) + _1389;
        float _1928 = (_1923 * _1403) + _1393;
        float _1929 = (_1923 * _1406) + _1397;
        float _1930 = _1923 * 9.9999997473787516355514526367188e-05;
        float _1932 = (-1.0) - _1930;
        float _1934 = _1930 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1929 > _1934) || ((_1929 < _1932) || ((_1928 > _1934) || ((_1928 < _1932) || ((_1927 < _1932) || (_1927 > _1934))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2057 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1929, cbModelParam._m0[9u].z, fma(_1928, cbModelParam._m0[9u].y, _1927 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1929, cbModelParam._m0[10u].z, fma(_1928, cbModelParam._m0[10u].y, _1927 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1929, cbModelParam._m0[11u].z, fma(_1928, cbModelParam._m0[11u].y, _1927 * cbModelParam._m0[11u].x))), _1340);
            frontier_phi_18_40_ladder = _2057.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2057.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2057.x * cbModelParam._m0[1u].y;
        }
        _1422 = frontier_phi_18_40_ladder_2;
        _1424 = frontier_phi_18_40_ladder_1;
        _1426 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1410 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_495, _496, _497), _1340);
        _1422 = _1410.x * cbModelParam._m0[1u].y;
        _1424 = _1410.y * cbModelParam._m0[1u].y;
        _1426 = _1410.z * cbModelParam._m0[1u].y;
    }
    float _1430 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _306);
    float _1431 = isnan(_1430) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1430 : min(cbModelParam._m0[25u].w, _1430));
    float _1524;
    float _1526;
    float _1528;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1488 = fma(_559, cbModelParam._m0[21u].z, fma(_555, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _551)) + cbModelParam._m0[21u].w;
        float _1492 = fma(_559, cbModelParam._m0[22u].z, fma(_555, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _551)) + cbModelParam._m0[22u].w;
        float _1496 = fma(_559, cbModelParam._m0[23u].z, fma(_555, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _551)) + cbModelParam._m0[23u].w;
        float _1499 = fma(_497, cbModelParam._m0[21u].z, fma(_496, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _495));
        float _1502 = fma(_497, cbModelParam._m0[22u].z, fma(_496, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _495));
        float _1505 = fma(_497, cbModelParam._m0[23u].z, fma(_496, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _495));
        float _1668;
        if (_1499 > 0.0)
        {
            _1668 = abs((1.0 - _1488) / _1499);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1499 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1488 + 1.0) / _1499);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1668 = frontier_phi_30_26_ladder;
        }
        float _1947;
        if (_1502 > 0.0)
        {
            _1947 = abs((1.0 - _1492) / _1502);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1492 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1947 = frontier_phi_42_37_ladder;
        }
        float _2160;
        if (_1505 > 0.0)
        {
            _2160 = abs((1.0 - _1496) / _1505);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1496 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2160 = frontier_phi_51_48_ladder;
        }
        float _2162 = isnan(_1947) ? _1668 : (isnan(_1668) ? _1947 : min(_1668, _1947));
        float _2163 = isnan(_2160) ? _2162 : (isnan(_2162) ? _2160 : min(_2162, _2160));
        float _2167 = (_2163 * _1499) + _1488;
        float _2168 = (_2163 * _1502) + _1492;
        float _2169 = (_2163 * _1505) + _1496;
        float _2170 = _2163 * 9.9999997473787516355514526367188e-05;
        float _2171 = (-1.0) - _2170;
        float _2173 = _2170 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2169 > _2173) || ((_2169 < _2171) || ((_2168 > _2173) || ((_2168 < _2171) || ((_2167 < _2171) || (_2167 > _2173))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2396 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2169, cbModelParam._m0[17u].z, fma(_2168, cbModelParam._m0[17u].y, _2167 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2169, cbModelParam._m0[18u].z, fma(_2168, cbModelParam._m0[18u].y, _2167 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2169, cbModelParam._m0[19u].z, fma(_2168, cbModelParam._m0[19u].y, _2167 * cbModelParam._m0[19u].x))), _1431);
            frontier_phi_27_51_ladder = _2396.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2396.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2396.x * cbModelParam._m0[1u].z;
        }
        _1524 = frontier_phi_27_51_ladder_2;
        _1526 = frontier_phi_27_51_ladder_1;
        _1528 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1508 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_495, _496, _497), _1431);
        _1524 = _1508.x * cbModelParam._m0[1u].z;
        _1526 = _1508.y * cbModelParam._m0[1u].z;
        _1528 = _1508.z * cbModelParam._m0[1u].z;
    }
    float _1541 = (((_522 * _472) + _523) * _487) * ((cbModelParam._m0[1u].w * (_1524 - _1422)) + _1422);
    float _1543 = (((_522 * _474) + _523) * _487) * ((cbModelParam._m0[1u].w * (_1526 - _1424)) + _1424);
    float _1545 = (((_522 * _475) + _523) * _487) * ((cbModelParam._m0[1u].w * (_1528 - _1426)) + _1426);
    float _1548 = fma(_1545, cbSceneParam._m0[89u].z, fma(_1543, cbSceneParam._m0[89u].y, _1541 * cbSceneParam._m0[89u].x));
    float _1551 = fma(_1545, cbSceneParam._m0[90u].z, fma(_1543, cbSceneParam._m0[90u].y, _1541 * cbSceneParam._m0[90u].x));
    float _1554 = fma(_1545, cbSceneParam._m0[91u].z, fma(_1543, cbSceneParam._m0[91u].y, _1541 * cbSceneParam._m0[91u].x));
    vec4 _1562 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_406, _407));
    float _1564 = _1562.w;
    float _1576 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1564);
    float _1577 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1564);
    float _1578 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1564);
    uvec4 _1582 = floatBitsToUint(cbInstanceData._m0[_446 + 5u]);
    uint _1584 = _1582.x * 14u;
    uint _1585 = _1584 + 13u;
    float _1592 = _487 + (-1.0);
    float _1597 = (cbLight._m0[_1585].x * _1592) + 1.0;
    float _1598 = (cbLight._m0[_1585].y * _1592) + 1.0;
    float _1599 = (cbLight._m0[_1585].z * _1592) + 1.0;
    float _1600 = (cbLight._m0[_1585].w * _1592) + 1.0;
    uint _1601 = _1584 + 5u;
    float _1607 = isnan(1.0) ? _1598 : (isnan(_1598) ? 1.0 : min(_1598, 1.0));
    uint _1611 = _1584 + 4u;
    float _1621 = isnan(1.0) ? _1597 : (isnan(_1597) ? 1.0 : min(_1597, 1.0));
    uint _1625 = _1584 | 1u;
    float _1636 = dot(vec3(cbLight._m0[_1584].xyz), vec3(_303, _304, _305));
    float _1639 = dot(vec3(cbLight._m0[_1625].xyz), vec3(_303, _304, _305));
    float _3856 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
    float _3867 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
    float _1644 = (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * 0.3183098733425140380859375;
    float _1646 = (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * 0.3183098733425140380859375;
    float _1653 = ((cbLight._m0[_1601].x * _1607) * _1646) + (((cbLight._m0[_1611].x * _1576) * _1621) * _1644);
    float _1654 = ((_1607 * cbLight._m0[_1601].y) * _1646) + (((cbLight._m0[_1611].y * _1577) * _1621) * _1644);
    float _1655 = ((_1607 * cbLight._m0[_1601].z) * _1646) + (((cbLight._m0[_1611].z * _1578) * _1621) * _1644);
    uvec4 _1660 = floatBitsToUint(cbLight._m0[_1584 + 12u]);
    bool _1662 = _1660.x == 0u;
    float _1673;
    float _1675;
    float _1677;
    if (_1662)
    {
        _1673 = _1653;
        _1675 = _1654;
        _1677 = _1655;
    }
    else
    {
        uint _1681 = _1584 + 6u;
        float _1697 = (dot(vec3(cbLight._m0[_1584 + 2u].xyz), vec3(_303, _304, _305)) * 0.5) + 0.5;
        float _1698 = _1697 * _1697;
        float _3878 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1700 = isnan(1.0) ? _1599 : (isnan(_1599) ? 1.0 : min(_1599, 1.0));
        _1673 = (((cbLight._m0[_1681].x * 0.3183098733425140380859375) * _1699) * _1700) + _1653;
        _1675 = (((cbLight._m0[_1681].y * 0.3183098733425140380859375) * _1699) * _1700) + _1654;
        _1677 = (((cbLight._m0[_1681].z * 0.3183098733425140380859375) * _1699) * _1700) + _1655;
    }
    bool _1680 = _1660.y == 0u;
    float _1718;
    float _1720;
    float _1722;
    if (_1680)
    {
        _1718 = _1673;
        _1720 = _1675;
        _1722 = _1677;
    }
    else
    {
        uint _1891 = _1584 + 7u;
        float _1907 = (dot(vec3(cbLight._m0[_1584 + 3u].xyz), vec3(_303, _304, _305)) * 0.5) + 0.5;
        float _1908 = _1907 * _1907;
        float _3894 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
        float _1909 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1910 = isnan(1.0) ? _1600 : (isnan(_1600) ? 1.0 : min(_1600, 1.0));
        _1718 = (((cbLight._m0[_1891].x * 0.3183098733425140380859375) * _1909) * _1910) + _1673;
        _1720 = (((cbLight._m0[_1891].y * 0.3183098733425140380859375) * _1909) * _1910) + _1675;
        _1722 = (((cbLight._m0[_1891].z * 0.3183098733425140380859375) * _1909) * _1910) + _1677;
    }
    uint _1725 = _1584 + 8u;
    float _1738 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1584].w)) * _306) * 0.949999988079071044921875);
    float _1739 = _1738 * _1738;
    float _1740 = cbLight._m0[_1584].x + _385;
    float _1741 = cbLight._m0[_1584].y + _386;
    float _1742 = cbLight._m0[_1584].z + _387;
    float _1746 = inversesqrt(dot(vec3(_1740, _1741, _1742), vec3(_1740, _1741, _1742)));
    float _1747 = _1746 * _1740;
    float _1748 = _1746 * _1741;
    float _1749 = _1746 * _1742;
    float _1750 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_1584].xyz));
    float _3910 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _1753 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _3921 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _1754 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _1755 = dot(vec3(_303, _304, _305), vec3(_1747, _1748, _1749));
    float _3932 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
    float _1758 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _1759 = dot(vec3(cbLight._m0[_1584].xyz), vec3(_1747, _1748, _1749));
    float _3943 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _1763 = _1739 * _1739;
    float _1767 = ((_1758 * _1758) * (_1763 + (-1.0))) + 1.0;
    float _1775 = exp2(log2(1.0 - (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0)))) * 5.0);
    float _1776 = 0.959999978542327880859375 - _469;
    float _1778 = 0.959999978542327880859375 - _470;
    float _1779 = 0.959999978542327880859375 - _471;
    float _1786 = 1.0 - _1739;
    float _1797 = (0.5 / (((_1754 * ((_1753 * _1786) + _1739)) + 9.9999999392252902907785028219223e-09) + (((_1754 * _1786) + _1739) * _1753))) * _1753;
    float _3954 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1799 = (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_1763 / ((_1767 * _1767) * 3.141590118408203125));
    uint _1813 = _1584 + 9u;
    float _1824 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1625].w)) * _306) * 0.949999988079071044921875);
    float _1825 = _1824 * _1824;
    float _1826 = cbLight._m0[_1625].x + _385;
    float _1827 = cbLight._m0[_1625].y + _386;
    float _1828 = cbLight._m0[_1625].z + _387;
    float _1832 = inversesqrt(dot(vec3(_1826, _1827, _1828), vec3(_1826, _1827, _1828)));
    float _1833 = _1832 * _1826;
    float _1834 = _1832 * _1827;
    float _1835 = _1832 * _1828;
    float _1836 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_1625].xyz));
    float _3965 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1839 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _1840 = dot(vec3(_303, _304, _305), vec3(_1833, _1834, _1835));
    float _3976 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1843 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _1844 = dot(vec3(cbLight._m0[_1625].xyz), vec3(_1833, _1834, _1835));
    float _3987 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1848 = _1825 * _1825;
    float _1852 = ((_1843 * _1843) * (_1848 + (-1.0))) + 1.0;
    float _1859 = exp2(log2(1.0 - (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0)))) * 5.0);
    float _1866 = 1.0 - _1825;
    float _1876 = (0.5 / (((_1754 * ((_1839 * _1866) + _1825)) + 9.9999999392252902907785028219223e-09) + (((_1754 * _1866) + _1825) * _1839))) * _1839;
    float _3998 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1878 = (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (_1848 / ((_1852 * _1852) * 3.141590118408203125));
    float _1888 = (((((_1859 * _1776) + _472) * cbLight._m0[_1813].x) * _1878) * _1607) + ((((cbLight._m0[_1725].x * _1576) * ((_1775 * _1776) + _472)) * _1799) * _1621);
    float _1889 = (((((_1859 * _1778) + _474) * cbLight._m0[_1813].y) * _1878) * _1607) + ((((cbLight._m0[_1725].y * _1577) * ((_1775 * _1778) + _474)) * _1799) * _1621);
    float _1890 = (((((_1859 * _1779) + _475) * cbLight._m0[_1813].z) * _1878) * _1607) + ((((cbLight._m0[_1725].z * _1578) * ((_1775 * _1779) + _475)) * _1799) * _1621);
    float _1952;
    float _1954;
    float _1956;
    if (_1662)
    {
        _1952 = _1888;
        _1954 = _1889;
        _1956 = _1890;
    }
    else
    {
        uint _1958 = _1584 + 2u;
        uint _1962 = _1584 + 10u;
        float _1976 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1958].w)) * _306) * 0.949999988079071044921875);
        float _1977 = _1976 * _1976;
        float _1978 = cbLight._m0[_1958].x + _385;
        float _1979 = cbLight._m0[_1958].y + _386;
        float _1980 = cbLight._m0[_1958].z + _387;
        float _1984 = inversesqrt(dot(vec3(_1978, _1979, _1980), vec3(_1978, _1979, _1980)));
        float _1985 = _1984 * _1978;
        float _1986 = _1984 * _1979;
        float _1987 = _1984 * _1980;
        float _1988 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_1958].xyz));
        float _4009 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
        float _1991 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1992 = dot(vec3(_303, _304, _305), vec3(_1985, _1986, _1987));
        float _4020 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _1995 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1996 = dot(vec3(cbLight._m0[_1958].xyz), vec3(_1985, _1986, _1987));
        float _4031 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _2000 = _1977 * _1977;
        float _2004 = ((_1995 * _1995) * (_2000 + (-1.0))) + 1.0;
        float _2011 = exp2(log2(1.0 - (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) * 5.0);
        float _2018 = 1.0 - _1977;
        float _2028 = (0.5 / (((_1754 * ((_1991 * _2018) + _1977)) + 9.9999999392252902907785028219223e-09) + (((_1754 * _2018) + _1977) * _1991))) * _1991;
        float _4042 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _2030 = (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_2000 / ((_2004 * _2004) * 3.141590118408203125));
        float _2031 = isnan(1.0) ? _1599 : (isnan(_1599) ? 1.0 : min(_1599, 1.0));
        _1952 = (((((_2011 * _1776) + _472) * cbLight._m0[_1962].x) * _2030) * _2031) + _1888;
        _1954 = (((((_2011 * _1778) + _474) * cbLight._m0[_1962].y) * _2030) * _2031) + _1889;
        _1956 = (((((_2011 * _1779) + _475) * cbLight._m0[_1962].z) * _2030) * _2031) + _1890;
    }
    float _2066;
    float _2068;
    float _2070;
    if (_1680)
    {
        _2066 = _1952;
        _2068 = _1954;
        _2070 = _1956;
    }
    else
    {
        uint _2077 = _1584 + 3u;
        uint _2081 = _1584 + 11u;
        float _2095 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2077].w)) * _306) * 0.949999988079071044921875);
        float _2096 = _2095 * _2095;
        float _2097 = cbLight._m0[_2077].x + _385;
        float _2098 = cbLight._m0[_2077].y + _386;
        float _2099 = cbLight._m0[_2077].z + _387;
        float _2103 = inversesqrt(dot(vec3(_2097, _2098, _2099), vec3(_2097, _2098, _2099)));
        float _2104 = _2103 * _2097;
        float _2105 = _2103 * _2098;
        float _2106 = _2103 * _2099;
        float _2107 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_2077].xyz));
        float _4058 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2110 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _2111 = dot(vec3(_303, _304, _305), vec3(_2104, _2105, _2106));
        float _4069 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2114 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _2115 = dot(vec3(cbLight._m0[_2077].xyz), vec3(_2104, _2105, _2106));
        float _4080 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2119 = _2096 * _2096;
        float _2123 = ((_2114 * _2114) * (_2119 + (-1.0))) + 1.0;
        float _2130 = exp2(log2(1.0 - (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) * 5.0);
        float _2137 = 1.0 - _2096;
        float _2147 = (0.5 / (((_1754 * ((_2110 * _2137) + _2096)) + 9.9999999392252902907785028219223e-09) + (((_1754 * _2137) + _2096) * _2110))) * _2110;
        float _4091 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2149 = (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_2119 / ((_2123 * _2123) * 3.141590118408203125));
        float _2150 = isnan(1.0) ? _1600 : (isnan(_1600) ? 1.0 : min(_1600, 1.0));
        _2066 = (((((_2130 * _1776) + _472) * cbLight._m0[_2081].x) * _2149) * _2150) + _1952;
        _2068 = (((((_2130 * _1778) + _474) * cbLight._m0[_2081].y) * _2149) * _2150) + _1954;
        _2070 = (((((_2130 * _1779) + _475) * cbLight._m0[_2081].z) * _2149) * _2150) + _1956;
    }
    float _2284;
    float _2286;
    float _2288;
    float _2290;
    float _2292;
    float _2294;
    if (_1582.y == 0u)
    {
        float _2225 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2226 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2225;
        float _2227 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2225;
        float _2228 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2225;
        uvec4 _2240 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2241 = _2240.x;
        uint _2252 = uint((float(_2240.y) * floor(float(uint(cbSceneParam._m0[85u].y * _407) / _2241))) + floor(float(uint(cbSceneParam._m0[85u].x * _406) / _2241)));
        float _2262 = (log2(_2228 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2263 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        uint _2266 = uint(isnan(14.0) ? _2263 : (isnan(_2263) ? 14.0 : min(_2263, 14.0)));
        uvec4 _2271 = texelFetch(g_lightClusterGridBuffer, int(((_2266 << 2u) + (_2252 << 6u)) >> 2u));
        uint _2272 = _2271.x;
        uint _2273 = _2240.z;
        float _2401;
        float _2403;
        float _2405;
        float _2407;
        float _2409;
        float _2411;
        if (((((1u << ((_2273 >> 4u) & 15u)) + 4294967295u) & _2272) == 0u) || ((_2273 & 240u) == 0u))
        {
            _2401 = 0.0;
            _2403 = 0.0;
            _2405 = 0.0;
            _2407 = 0.0;
            _2409 = 0.0;
            _2411 = 0.0;
        }
        else
        {
            float _2402;
            float _2404;
            float _2406;
            float _2408;
            float _2410;
            float _2412;
            float _2562 = 0.0;
            float _2563 = 0.0;
            float _2564 = 0.0;
            float _2565 = 0.0;
            float _2566 = 0.0;
            float _2567 = 0.0;
            uint _2568 = 0u;
            uint _2577;
            bool _2578;
            for (;;)
            {
                _2577 = texelFetch(g_lightClassification, int((((_2266 << 5u) + (_2252 << 9u)) + (_2568 << 2u)) >> 2u)).x;
                _2578 = _2577 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2578)
                {
                    frontier_phi_68_pred = _2564;
                    frontier_phi_68_pred_1 = _2567;
                    frontier_phi_68_pred_2 = _2566;
                    frontier_phi_68_pred_3 = _2565;
                    frontier_phi_68_pred_4 = _2563;
                    frontier_phi_68_pred_5 = _2562;
                }
                else
                {
                    float _2707;
                    float _2708;
                    float _2709;
                    float _2710;
                    float _2711;
                    float _2712;
                    uint _2713;
                    _2707 = _2562;
                    _2708 = _2563;
                    _2709 = _2564;
                    _2710 = _2565;
                    _2711 = _2566;
                    _2712 = _2567;
                    _2713 = _2577;
                    float _2634;
                    float _2635;
                    float _2636;
                    float _2637;
                    float _2638;
                    float _2639;
                    for (;;)
                    {
                        uint _2717 = uint(findLSB(_2713)) + (_2568 << 5u);
                        uint _2714 = (_2713 + 4294967295u) & _2713;
                        uint _2719 = _2717 * 48u;
                        vec4 _2733 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2719)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 3u)).x));
                        uint _2739 = (_2717 * 48u) + 4u;
                        vec4 _2752 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2739)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 3u)).x));
                        uint _2758 = (_2717 * 48u) + 8u;
                        vec3 _2769 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2758)).x, texelFetch(g_PointLightRenderingBuffer, int(_2758 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2758 + 2u)).x));
                        float _2773 = _2733.x - _2226;
                        float _2774 = _2733.y - _2227;
                        float _2775 = _2733.z - _2228;
                        float _2776 = dot(vec3(_2773, _2774, _2775), vec3(_2773, _2774, _2775));
                        float _2779 = inversesqrt(_2776);
                        float _2780 = _2779 * _2773;
                        float _2781 = _2779 * _2774;
                        float _2782 = _2779 * _2775;
                        float _2783 = dot(vec3(_427, _430, _433), vec3(_2780, _2781, _2782));
                        float _2788 = 1.0 - (_2776 * _2733.w);
                        float _4117 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
                        float _2789 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
                        float _2790 = sqrt(_2776) * _2752.w;
                        float _2793 = 1.39999997615814208984375 / (_2790 + 1.39999997615814208984375);
                        float _2794 = _2793 * _2793;
                        float _2797 = ((1.0 - _2794) * _2783) + _2794;
                        float _2800 = _2790 * _2790;
                        float _2804 = ((isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0))) * _2789) / ((_2800 * 0.699999988079071044921875) + 1.0);
                        float _2808 = (-0.0) - _2226;
                        float _2809 = (-0.0) - _2227;
                        float _2810 = (-0.0) - _2228;
                        float _2814 = inversesqrt(dot(vec3(_2808, _2809, _2810), vec3(_2808, _2809, _2810)));
                        float _2815 = _2814 * _2808;
                        float _2816 = _2814 * _2809;
                        float _2817 = _2814 * _2810;
                        float _2825 = exp2(log2(1.0 / ((_2800 * 3.5) + 5.0)) * 0.25);
                        float _2826 = 1.0 - _503;
                        float _2833 = sqrt(1.0 - ((1.0 - (_2826 * _2826)) * (1.0 - (_2825 * _2825))));
                        float _2834 = _2833 * _2833;
                        float _2835 = _2834 * _2834;
                        float _2836 = _2815 + _2780;
                        float _2837 = _2816 + _2781;
                        float _2838 = _2817 + _2782;
                        float _2842 = inversesqrt(dot(vec3(_2836, _2837, _2838), vec3(_2836, _2837, _2838)));
                        float _2846 = dot(vec3(_427, _430, _433), vec3(_2815, _2816, _2817));
                        float _4133 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
                        float _2849 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
                        float _2850 = dot(vec3(_427, _430, _433), vec3(_2842 * _2836, _2842 * _2837, _2842 * _2838));
                        float _4144 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
                        float _2853 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
                        float _2857 = ((_2853 * _2853) * (_2835 + (-1.0))) + 1.0;
                        float _2858 = _2793 * _2834;
                        float _2859 = _2858 * _2858;
                        float _2862 = ((1.0 - _2859) * _2783) + _2859;
                        float _4155 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
                        float _2863 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
                        float _2864 = 1.0 - _2834;
                        float _2874 = (0.5 / (((_2863 * ((_2849 * _2864) + _2834)) + 9.9999999392252902907785028219223e-09) + (((_2863 * _2864) + _2834) * _2849))) * _2863;
                        float _4166 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
                        float _2885 = (((_2835 * 3.1415927410125732421875) * (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) / ((_2857 * _2857) * ((_2800 * 2.1991131305694580078125) + 3.141590118408203125))) * _2789;
                        _2637 = (_2804 * _2752.x) + _2710;
                        _2638 = (_2804 * _2752.y) + _2711;
                        _2639 = (_2804 * _2752.z) + _2712;
                        _2634 = (_2885 * _2769.x) + _2707;
                        _2635 = (_2885 * _2769.y) + _2708;
                        _2636 = (_2885 * _2769.z) + _2709;
                        if (_2714 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2707 = _2634;
                            _2708 = _2635;
                            _2709 = _2636;
                            _2710 = _2637;
                            _2711 = _2638;
                            _2712 = _2639;
                            _2713 = _2714;
                        }
                    }
                    frontier_phi_68_pred = _2636;
                    frontier_phi_68_pred_1 = _2639;
                    frontier_phi_68_pred_2 = _2638;
                    frontier_phi_68_pred_3 = _2637;
                    frontier_phi_68_pred_4 = _2635;
                    frontier_phi_68_pred_5 = _2634;
                }
                _2406 = frontier_phi_68_pred;
                _2412 = frontier_phi_68_pred_1;
                _2410 = frontier_phi_68_pred_2;
                _2408 = frontier_phi_68_pred_3;
                _2404 = frontier_phi_68_pred_4;
                _2402 = frontier_phi_68_pred_5;
                uint _2569 = _2568 + 1u;
                if (_2569 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2562 = _2402;
                    _2563 = _2404;
                    _2564 = _2406;
                    _2565 = _2408;
                    _2566 = _2410;
                    _2567 = _2412;
                    _2568 = _2569;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2401 = _2402;
            _2403 = _2404;
            _2405 = _2406;
            _2407 = _2408;
            _2409 = _2410;
            _2411 = _2412;
        }
        uvec4 _2415 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2416 = _2415.z;
        uint _2418 = (_2416 >> 8u) & 15u;
        float _2530;
        float _2532;
        float _2534;
        float _2536;
        float _2538;
        float _2540;
        if (((4294967295u << _2418) & _2272) == 0u)
        {
            _2530 = _2401;
            _2532 = _2403;
            _2534 = _2405;
            _2536 = _2407;
            _2538 = _2409;
            _2540 = _2411;
        }
        else
        {
            float _2555 = inversesqrt(dot(vec3(_2226, _2227, _2228), vec3(_2226, _2227, _2228)));
            float _2556 = _2555 * _2226;
            float _2557 = _2555 * _2227;
            float _2558 = _2555 * _2228;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2418 < ((_2416 >> 12u) & 15u))
            {
                float _2531;
                float _2533;
                float _2535;
                float _2537;
                float _2539;
                float _2541;
                float _2690 = _2401;
                float _2691 = _2403;
                float _2692 = _2405;
                float _2693 = _2407;
                float _2694 = _2409;
                float _2695 = _2411;
                uint _2696 = _2418;
                uint _2705;
                bool _2706;
                for (;;)
                {
                    _2705 = texelFetch(g_lightClassification, int((((_2266 << 5u) + (_2252 << 9u)) + (_2696 << 2u)) >> 2u)).x;
                    _2706 = _2705 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2706)
                    {
                        frontier_phi_79_pred = _2695;
                        frontier_phi_79_pred_1 = _2694;
                        frontier_phi_79_pred_2 = _2693;
                        frontier_phi_79_pred_3 = _2692;
                        frontier_phi_79_pred_4 = _2691;
                        frontier_phi_79_pred_5 = _2690;
                    }
                    else
                    {
                        float _2899;
                        float _2900;
                        float _2901;
                        float _2902;
                        float _2903;
                        float _2904;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _2912 = _2690;
                        float _2913 = _2691;
                        float _2914 = _2692;
                        float _2915 = _2693;
                        float _2916 = _2694;
                        float _2917 = _2695;
                        uint _2918 = _2705;
                        uint _2919;
                        vec4 _2944;
                        float _2945;
                        vec4 _2960;
                        vec3 _2972;
                        vec4 _2988;
                        vec4 _3004;
                        float _3051;
                        bool _3052;
                        for (;;)
                        {
                            uint _2929 = ((_2696 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2918));
                            _2919 = (_2918 + 4294967295u) & _2918;
                            uint _2931 = _2929 * 40u;
                            _2944 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 3u)).x));
                            _2945 = _2944.w;
                            uint _2947 = (_2929 * 40u) + 4u;
                            _2960 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 3u)).x));
                            uint _2962 = (_2929 * 40u) + 8u;
                            _2972 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 2u)).x));
                            uint _2975 = (_2929 * 40u) + 16u;
                            _2988 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 3u)).x));
                            uint _2991 = (_2929 * 40u) + 20u;
                            _3004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 3u)).x));
                            uint _3007 = (_2929 * 40u) + 24u;
                            vec4 _3020 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 3u)).x));
                            uint _3026 = (_2929 * 40u) + 28u;
                            vec4 _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            _3051 = fma(_2228, _3039.z, fma(_2227, _3039.y, _3039.x * _2226)) + _3039.w;
                            _3052 = !((fma(_2228, _3020.z, fma(_2227, _3020.y, _3020.x * _2226)) + _3020.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3052)
                            {
                                float _3079 = _2944.x - _2226;
                                float _3080 = _2944.y - _2227;
                                float _3081 = _2944.z - _2228;
                                float _3082 = dot(vec3(_3079, _3080, _3081), vec3(_3079, _3080, _3081));
                                float _3085 = inversesqrt(_3082);
                                float _3086 = _3085 * _3079;
                                float _3087 = _3085 * _3080;
                                float _3088 = _3085 * _3081;
                                float _3092 = 1.0 - (_3082 / (_2945 * _2945));
                                float _4177 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                                float _3093 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
                                float _3097 = sqrt(_3082) * _2960.w;
                                float _3099 = 1.39999997615814208984375 / (_3097 + 1.39999997615814208984375);
                                float _3100 = _3099 * _3099;
                                float _3103 = ((1.0 - _3100) * dot(vec3(_3086, _3087, _3088), vec3(_427, _430, _433))) + _3100;
                                float _3106 = _3097 * _3097;
                                float _3110 = (fma(_2228, _2988.z, fma(_2227, _2988.y, _2988.x * _2226)) + _2988.w) / _3051;
                                float _3111 = (fma(_2228, _3004.z, fma(_2227, _3004.y, _3004.x * _2226)) + _3004.w) / _3051;
                                float _3115 = 1.0 - dot(vec2(_3110, _3111), vec2(_3110, _3111));
                                float _4193 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                                float _3116 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
                                float _3117 = _3116 * (((isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0))) * _3093) / ((_3106 * 0.699999988079071044921875) + 1.0));
                                float _3129 = exp2(log2(1.0 / ((_3106 * 3.5) + 5.0)) * 0.25);
                                float _3130 = 1.0 - _503;
                                float _3137 = sqrt(1.0 - ((1.0 - (_3130 * _3130)) * (1.0 - (_3129 * _3129))));
                                float _3138 = _3137 * _3137;
                                float _3139 = _3138 * _3138;
                                float _3140 = _3086 - _2556;
                                float _3141 = _3087 - _2557;
                                float _3142 = _3088 - _2558;
                                float _3146 = inversesqrt(dot(vec3(_3140, _3141, _3142), vec3(_3140, _3141, _3142)));
                                float _3150 = dot(vec3(_427, _430, _433), vec3((-0.0) - _2556, (-0.0) - _2557, (-0.0) - _2558));
                                float _4204 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                                float _3153 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                                float _3154 = dot(vec3(_427, _430, _433), vec3(_3146 * _3140, _3146 * _3141, _3146 * _3142));
                                float _4215 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                                float _3157 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                                float _3161 = ((_3157 * _3157) * (_3139 + (-1.0))) + 1.0;
                                float _3162 = _3099 * _3138;
                                float _3163 = _3162 * _3162;
                                float _3169 = ((1.0 - _3163) * dot(vec3(_427, _430, _433), vec3(_3086, _3087, _3088))) + _3163;
                                float _4226 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                                float _3170 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                                float _3171 = 1.0 - _3138;
                                float _3181 = (0.5 / (((_3170 * ((_3153 * _3171) + _3138)) + 9.9999999392252902907785028219223e-09) + (((_3170 * _3171) + _3138) * _3153))) * _3170;
                                float _4237 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3191 = (_3116 * _3093) * (((_3139 * 3.1415927410125732421875) * (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) / ((_3161 * _3161) * ((_3106 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3117 * _2960.z;
                                frontier_phi_85_pred_1 = _3117 * _2960.y;
                                frontier_phi_85_pred_2 = _3117 * _2960.x;
                                frontier_phi_85_pred_3 = _3191 * _2972.z;
                                frontier_phi_85_pred_4 = _3191 * _2972.y;
                                frontier_phi_85_pred_5 = _3191 * _2972.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3200 = frontier_phi_85_pred;
                            _3199 = frontier_phi_85_pred_1;
                            _3198 = frontier_phi_85_pred_2;
                            _3197 = frontier_phi_85_pred_3;
                            _3196 = frontier_phi_85_pred_4;
                            _3195 = frontier_phi_85_pred_5;
                            _2902 = _3198 + _2915;
                            _2903 = _3199 + _2916;
                            _2904 = _3200 + _2917;
                            _2899 = _3195 + _2912;
                            _2900 = _3196 + _2913;
                            _2901 = _3197 + _2914;
                            if (_2919 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2912 = _2899;
                                _2913 = _2900;
                                _2914 = _2901;
                                _2915 = _2902;
                                _2916 = _2903;
                                _2917 = _2904;
                                _2918 = _2919;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2904;
                        frontier_phi_79_pred_1 = _2903;
                        frontier_phi_79_pred_2 = _2902;
                        frontier_phi_79_pred_3 = _2901;
                        frontier_phi_79_pred_4 = _2900;
                        frontier_phi_79_pred_5 = _2899;
                    }
                    _2541 = frontier_phi_79_pred;
                    _2539 = frontier_phi_79_pred_1;
                    _2537 = frontier_phi_79_pred_2;
                    _2535 = frontier_phi_79_pred_3;
                    _2533 = frontier_phi_79_pred_4;
                    _2531 = frontier_phi_79_pred_5;
                    uint _2697 = _2696 + 1u;
                    if (_2697 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2690 = _2531;
                        _2691 = _2533;
                        _2692 = _2535;
                        _2693 = _2537;
                        _2694 = _2539;
                        _2695 = _2541;
                        _2696 = _2697;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2537;
                frontier_phi_60_61_ladder_1 = _2541;
                frontier_phi_60_61_ladder_2 = _2539;
                frontier_phi_60_61_ladder_3 = _2535;
                frontier_phi_60_61_ladder_4 = _2533;
                frontier_phi_60_61_ladder_5 = _2531;
            }
            else
            {
                frontier_phi_60_61_ladder = _2407;
                frontier_phi_60_61_ladder_1 = _2411;
                frontier_phi_60_61_ladder_2 = _2409;
                frontier_phi_60_61_ladder_3 = _2405;
                frontier_phi_60_61_ladder_4 = _2403;
                frontier_phi_60_61_ladder_5 = _2401;
            }
            _2530 = frontier_phi_60_61_ladder_5;
            _2532 = frontier_phi_60_61_ladder_4;
            _2534 = frontier_phi_60_61_ladder_3;
            _2536 = frontier_phi_60_61_ladder;
            _2538 = frontier_phi_60_61_ladder_2;
            _2540 = frontier_phi_60_61_ladder_1;
        }
        float _2545 = isnan(1.0) ? _487 : (isnan(_487) ? 1.0 : min(_487, 1.0));
        _2284 = (_2545 * _2536) + _1718;
        _2286 = (_2545 * _2538) + _1720;
        _2288 = (_2545 * _2540) + _1722;
        _2290 = ((_2530 * _472) * _2545) + _2066;
        _2292 = ((_2532 * _474) * _2545) + _2068;
        _2294 = ((_2534 * _475) * _2545) + _2070;
    }
    else
    {
        _2284 = _1718;
        _2286 = _1720;
        _2288 = _1722;
        _2290 = _2066;
        _2292 = _2068;
        _2294 = _2070;
    }
    uint _2300 = _448 + uint(cbMatDynParam._m0[0u].w);
    float _2306 = (_282.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2300].x;
    float _2307 = (_282.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2300].y;
    float _2308 = (_282.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2300].z;
    float _4253 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _4264 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _4275 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _2325 = (((isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2284 + ((isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0))) * _487))) + ((_2290 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _1329)) * cbPerFrame._m0[3u].x)) + _2306;
    float _2327 = (_2307 + ((_2292 + ((isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))) * _1329)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_2286 + ((isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0))) * _487)));
    float _2329 = (_2308 + ((_2294 + ((isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))) * _1329)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_2288 + ((isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0))) * _487)));
    float _2330 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2331 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2332 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2338 = cbMtdParam._m0[2u].x * _2306;
    float _2339 = cbMtdParam._m0[2u].y * _2307;
    float _2340 = cbMtdParam._m0[2u].z * _2308;
    float _4301 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2342 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
    uint _2343 = _446 + 6u;
    float _2351 = _406 / cbSceneParam._m0[86u].x;
    float _2352 = _407 / cbSceneParam._m0[86u].y;
    vec4 _2366 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2351, _2352, (log2((isnan(cbSceneParam._m0[77u].w) ? _326 : (isnan(_326) ? cbSceneParam._m0[77u].w : min(_326, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2368 = _2366.x;
    float _2369 = _2366.y;
    float _2370 = _2366.z;
    float _2371 = _2366.w;
    float _2463;
    float _2465;
    float _2467;
    float _2469;
    if (_326 > cbSceneParam._m0[78u].w)
    {
        float _2426 = isnan(_326) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _326 : min(cbSceneParam._m0[80u].w, _326));
        float _2427 = _2426 / _326;
        float _2438 = _2427 * _378;
        float _2439 = _379 * _2427;
        float _2440 = (-0.0) - _2439;
        float _2441 = _2427 * _380;
        float _2443 = (cbSceneParam._m0[77u].w * _2440) / _2426;
        float _2444 = _2443 + cbSceneParam._m0[79u].w;
        float _2445 = cbSceneParam._m0[79u].w - _2439;
        float _2451 = sqrt(((_2438 * _2438) + (_2439 * _2439)) + (_2441 * _2441));
        float _2454 = (1.0 - (cbSceneParam._m0[77u].w / _2426)) * _2451;
        float _2459 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2461 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2647;
        if (abs((_2440 - _2443) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2647 = ((((_2444 > 0.0) ? exp2(_2459 * _2444) : (2.0 - exp2(_2461 * _2444))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2454;
        }
        else
        {
            float _2591 = 1.0 / cbSceneParam._m0[80u].x;
            float _2592 = isnan(_2445) ? _2444 : (isnan(_2444) ? _2445 : max(_2444, _2445));
            float _2593 = isnan(_2445) ? _2444 : (isnan(_2444) ? _2445 : min(_2444, _2445));
            float _2602 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : min(_2592, 0.0));
            float _2603 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : min(_2593, 0.0));
            _2647 = ((abs(_2451 / _2440) * cbSceneParam._m0[80u].y) * ((((_2602 - _2603) * 2.0) - ((exp2(_2459 * (isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0)))) - exp2(_2459 * (isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0))))) * _2591)) - ((exp2(_2461 * _2602) - exp2(_2461 * _2603)) * _2591))) + (_2454 * cbSceneParam._m0[80u].z);
        }
        vec4 _2649 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2351, _2352, 1.0), 0.0);
        float _2658 = exp2((_2647 * (-1.44269502162933349609375)) * (1.0 - _2649.w));
        float _2659 = log2(_2658);
        float _2675 = log2(_2371);
        _2463 = (exp2(_2675 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2659 * cbSceneParam._m0[78u].x)) * _2649.x) / cbSceneParam._m0[78u].x)) + _2368;
        _2465 = (exp2(_2675 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2659 * cbSceneParam._m0[78u].y)) * _2649.y) / cbSceneParam._m0[78u].y)) + _2369;
        _2467 = (exp2(_2675 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2659 * cbSceneParam._m0[78u].z)) * _2649.z) / cbSceneParam._m0[78u].z)) + _2370;
        _2469 = _2658 * _2371;
    }
    else
    {
        _2463 = _2368;
        _2465 = _2369;
        _2467 = _2370;
        _2469 = _2371;
    }
    bool _2685;
    vec4 _2479;
    vec4 _2501;
    float _2503;
    float _2507;
    float _2508;
    float _2509;
    float _2512;
    float _2515;
    float _2518;
    float _2519;
    bool _2529;
    for (;;)
    {
        _2479 = cbMatDynParam._m0[0u];
        float _2481 = roundEven(_2479.y);
        bool _2482 = _2481 == 3.0;
        float _2483 = log2(_2469);
        float _2487 = exp2(_2483 * cbSceneParam._m0[78u].x);
        float _2488 = exp2(_2483 * cbSceneParam._m0[78u].y);
        float _2489 = exp2(_2483 * cbSceneParam._m0[78u].z);
        float _2490 = _2487 * _2330;
        float _2491 = _2488 * _2331;
        float _2492 = _2489 * _2332;
        float _2499 = _394 + (-0.5);
        _2501 = cbMtdParam._m0[1u];
        _2503 = _2501.y * _2499;
        float _2506 = (_2481 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2507 = _2506 * (_2482 ? _2490 : (_2490 + (cbSceneParam._m0[72u].w * _2463)));
        _2508 = _2506 * (_2482 ? _2491 : (_2491 + (cbSceneParam._m0[72u].w * _2465)));
        _2509 = _2506 * (_2482 ? _2492 : (_2492 + (cbSceneParam._m0[72u].w * _2467)));
        _2512 = ((_2338 * _2342) * _2487) * _2506;
        _2515 = ((_2339 * _2342) * _2488) * _2506;
        _2518 = ((_2340 * _2342) * _2489) * _2506;
        _2519 = _2499 * 0.999000012874603271484375;
        _2529 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2529)
        {
            if ((cbInstanceData._m0[_446 + 7u].x + _2519) < 0.5)
            {
                _2685 = true;
                break;
            }
        }
        uint _2626 = _448 + uint(_2479.w);
        if ((cbInstanceData._m0[_2626].w < 1.0) && ((cbInstanceData._m0[_2626].w + _2519) < 0.5))
        {
            _2685 = true;
            break;
        }
        if ((_2503 + 1.0) < _2501.x)
        {
            _2685 = true;
            break;
        }
        _2685 = false;
        break;
    }
    float _2890;
    if (_2685)
    {
        discard_state = true;
        _2890 = 0.0;
    }
    else
    {
        _2890 = cbInstanceData._m0[_2343].w;
    }
    SV_Target.x = _2507;
    SV_Target.y = _2508;
    SV_Target.z = _2509;
    SV_Target.w = _2890;
    SV_Target_1.x = _2512;
    SV_Target_1.y = _2515;
    SV_Target_1.z = _2518;
    SV_Target_1.w = cbInstanceData._m0[_2343].w;
    discard_exit();
}


