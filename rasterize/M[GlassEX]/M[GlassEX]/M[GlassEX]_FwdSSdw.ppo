#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_GlassEX_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _793;
uint _2265;
uint _2266;
uint _2267;
uint _2529;
uint _2530;
uint _2531;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _169 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _170 = _169 * NORMAL.x;
    float _171 = _169 * NORMAL.y;
    float _172 = _169 * NORMAL.z;
    float _177;
    float _178;
    float _179;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _177 = (-0.0) - _170;
        _178 = (-0.0) - _171;
        _179 = (-0.0) - _172;
    }
    else
    {
        _177 = _170;
        _178 = _171;
        _179 = _172;
    }
    float _224 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _234 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _224);
    float _235 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _224);
    float _236 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _224);
    vec4 _257 = texture(sampler2D(M_GlassEX_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _263 = (_257.z * 0.5) + cbMtdParam._m0[10u].z;
    float _269 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _270 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _284 = isnan(cbInstanceData._m0[8u].x) ? _269 : (isnan(_269) ? cbInstanceData._m0[8u].x : max(_269, cbInstanceData._m0[8u].x));
    float _285 = isnan(cbInstanceData._m0[8u].y) ? _270 : (isnan(_270) ? cbInstanceData._m0[8u].y : max(_270, cbInstanceData._m0[8u].y));
    vec4 _289 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _284 : (isnan(_284) ? cbInstanceData._m0[8u].z : min(_284, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _285 : (isnan(_285) ? cbInstanceData._m0[8u].w : min(_285, cbInstanceData._m0[8u].w))));
    float _311 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _319 = abs(dot(vec4(_177, _178, _179, 0.0), vec4(_311 * _234, _311 * _235, _311 * _236, 0.0))) * cbMtdParam._m0[10u].x;
    vec4 _321 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_269, _270));
    float _323 = _321.x;
    bool _330 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _345 = (_330 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _323)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _323))) - POSITION_1.w;
    float _346 = isnan(_345) ? _319 : (isnan(_319) ? _345 : min(_319, _345));
    float _347 = log2(cbMtdParam._m0[10u].y);
    float _366 = inversesqrt(dot(vec3(_177, _178, _179), vec3(_177, _178, _179)));
    float _367 = _366 * _177;
    float _368 = _366 * _178;
    float _369 = _366 * _179;
    float _2802 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _371 = isnan(1.0) ? _2802 : (isnan(_2802) ? 1.0 : min(_2802, 1.0));
    float _2813 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _372 = isnan(1.0) ? _2813 : (isnan(_2813) ? 1.0 : min(_2813, 1.0));
    float _2824 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _373 = isnan(1.0) ? _2824 : (isnan(_2824) ? 1.0 : min(_2824, 1.0));
    float _2835 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _374 = isnan(1.0) ? _2835 : (isnan(_2835) ? 1.0 : min(_2835, 1.0));
    float _379 = _330 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _419 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _428 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _419);
    float _429 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _419);
    float _430 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _419);
    float _434 = inversesqrt(dot(vec3(_428, _429, _430), vec3(_428, _429, _430)));
    float _435 = _428 * _434;
    float _436 = _429 * _434;
    float _437 = _430 * _434;
    float _442 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _443 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _464 = fma(_369, cbSceneParam._m0[5u].z, fma(_368, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _367));
    float _467 = fma(_369, cbSceneParam._m0[6u].z, fma(_368, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _367));
    float _470 = fma(_369, cbSceneParam._m0[7u].z, fma(_368, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _367));
    float _471 = _371 * 3.3333332538604736328125;
    float _473 = _372 * 3.3333332538604736328125;
    float _474 = _373 * 3.3333332538604736328125;
    float _482 = ((isnan(1.0) ? _471 : (isnan(_471) ? 1.0 : min(_471, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _484 = ((isnan(1.0) ? _473 : (isnan(_473) ? 1.0 : min(_473, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _485 = ((isnan(1.0) ? _474 : (isnan(_474) ? 1.0 : min(_474, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _491 = (_371 + (-0.0599999986588954925537109375)) + (isnan(_482) ? 0.0 : (isnan(0.0) ? _482 : max(0.0, _482)));
    float _493 = (_372 + (-0.0599999986588954925537109375)) + (isnan(_484) ? 0.0 : (isnan(0.0) ? _484 : max(0.0, _484)));
    float _495 = (_373 + (-0.0599999986588954925537109375)) + (isnan(_485) ? 0.0 : (isnan(0.0) ? _485 : max(0.0, _485)));
    float _507 = (_491 * _491) - ((0.02999999932944774627685546875 - _371) * 0.119999997317790985107421875);
    float _508 = (_493 * _493) - ((0.02999999932944774627685546875 - _372) * 0.119999997317790985107421875);
    float _509 = (_495 * _495) - ((0.02999999932944774627685546875 - _373) * 0.119999997317790985107421875);
    float _519 = (sqrt(isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0))) - _491) * 16.666667938232421875;
    float _521 = (sqrt(isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0))) - _493) * 16.666667938232421875;
    float _522 = (sqrt(isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0))) - _495) * 16.666667938232421875;
    float _523 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _524 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _525 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _536 = (((isnan(1.0) ? _524 : (isnan(_524) ? 1.0 : min(_524, 1.0))) * 0.58700001239776611328125) + ((isnan(1.0) ? _523 : (isnan(_523) ? 1.0 : min(_523, 1.0))) * 0.29890000820159912109375)) + ((isnan(1.0) ? _525 : (isnan(_525) ? 1.0 : min(_525, 1.0))) * 0.114000000059604644775390625);
    float _537 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    vec4 _546 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _442, cbSceneParam._m0[86u].y * _443));
    float _549 = _546.x * TEXCOORD.z;
    float _550 = dot(vec3(_367, _368, _369), vec3(_435, _436, _437));
    float _553 = _550 * 2.0;
    float _558 = (_553 * _367) - _435;
    float _559 = (_553 * _368) - _436;
    float _560 = (_553 * _369) - _437;
    float _564 = abs(dot(vec3(_435, _436, _437), vec3(_367, _368, _369)));
    float _2931 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _565 = isnan(1.0) ? _2931 : (isnan(_2931) ? 1.0 : min(_2931, 1.0));
    float _571 = sqrt(_374);
    float _583 = exp2((_571 * 5.0) * log2(1.0 - (_565 * 0.999000012874603271484375))) / (4.0 - (_571 * 3.0));
    float _589 = (1.0 - _583) * ((_571 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _590 = _583 * _571;
    float _618 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _622 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _626 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _792;
    float _794;
    float _795;
    float _796;
    float _797;
    float _798;
    float _799;
    float _800;
    float _801;
    float _802;
    float _803;
    float _804;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _653 = fma(_626, cbModelParam._m0[26u].z, fma(_622, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _618));
        float _657 = fma(_626, cbModelParam._m0[27u].z, fma(_622, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _618));
        float _661 = fma(_626, cbModelParam._m0[28u].z, fma(_622, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _618));
        float _685 = _618 + _367;
        float _686 = _622 + _368;
        float _687 = _626 + _369;
        float _697 = fma(_687, cbModelParam._m0[26u].z, fma(_686, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _685)) - _653;
        float _698 = fma(_687, cbModelParam._m0[27u].z, fma(_686, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _685)) - _657;
        float _699 = fma(_687, cbModelParam._m0[28u].z, fma(_686, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _685)) - _661;
        float _703 = inversesqrt(dot(vec3(_697, _698, _699), vec3(_697, _698, _699)));
        float _716 = ((_703 * _697) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_653 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _717 = ((_703 * _698) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_657 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _718 = ((_703 * _699) / cbModelParam._m0[34u].z) + ((((((_661 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _721 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_716, _717, _718), 0.0);
        vec4 _728 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_716, _717, _718), 0.0);
        vec4 _735 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_716, _717, _718), 0.0);
        vec4 _742 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_716, _717, _718), 0.0);
        float _755 = exp2((_721.w + (-0.5)) * 20.0) * 2.0;
        float _765 = exp2((_728.w + (-0.5)) * 20.0) * 2.0;
        float _775 = exp2((_735.w + (-0.5)) * 20.0) * 2.0;
        float _785 = exp2((_742.w + (-0.5)) * 20.0) * 2.0;
        float _786 = _785 * (_742.x + (-0.5));
        float _787 = _785 * (_742.y + (-0.5));
        float _788 = _785 * (_742.z + (-0.5));
        _792 = _755 * (_721.z + (-0.5));
        _794 = _755 * (_721.y + (-0.5));
        _795 = _755 * (_721.x + (-0.5));
        _796 = _765 * (_728.z + (-0.5));
        _797 = _765 * (_728.y + (-0.5));
        _798 = _765 * (_728.x + (-0.5));
        _799 = _775 * (_735.z + (-0.5));
        _800 = _775 * (_735.y + (-0.5));
        _801 = _775 * (_735.x + (-0.5));
        _802 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        _803 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        _804 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    }
    else
    {
        _792 = _793;
        _794 = _793;
        _795 = _793;
        _796 = _793;
        _797 = _793;
        _798 = _793;
        _799 = _793;
        _800 = _793;
        _801 = _793;
        _802 = _793;
        _803 = _793;
        _804 = _793;
    }
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _830 = fma(_626, cbModelParam._m0[30u].z, fma(_622, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _618));
        float _834 = fma(_626, cbModelParam._m0[31u].z, fma(_622, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _618));
        float _838 = fma(_626, cbModelParam._m0[32u].z, fma(_622, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _618));
        float _861 = _618 + _367;
        float _862 = _622 + _368;
        float _863 = _626 + _369;
        float _873 = fma(_863, cbModelParam._m0[30u].z, fma(_862, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _861)) - _830;
        float _874 = fma(_863, cbModelParam._m0[31u].z, fma(_862, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _861)) - _834;
        float _875 = fma(_863, cbModelParam._m0[32u].z, fma(_862, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _861)) - _838;
        float _879 = inversesqrt(dot(vec3(_873, _874, _875), vec3(_873, _874, _875)));
        float _892 = ((_879 * _873) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_830 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _893 = ((_879 * _874) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_834 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _894 = ((_879 * _875) / cbModelParam._m0[35u].z) + ((((((_838 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_892, _893, _894), 0.0);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_892, _893, _894), 0.0);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_892, _893, _894), 0.0);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_892, _893, _894), 0.0);
        float _929 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _939 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _949 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _959 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_917.x + (-0.5));
        float _961 = _959 * (_917.y + (-0.5));
        float _962 = _959 * (_917.z + (-0.5));
        _966 = _929 * (_896.z + (-0.5));
        _967 = _929 * (_896.y + (-0.5));
        _968 = _929 * (_896.x + (-0.5));
        _969 = _939 * (_903.z + (-0.5));
        _970 = _939 * (_903.y + (-0.5));
        _971 = _939 * (_903.x + (-0.5));
        _972 = _949 * (_910.z + (-0.5));
        _973 = _949 * (_910.y + (-0.5));
        _974 = _949 * (_910.x + (-0.5));
        _975 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        _976 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        _977 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    }
    else
    {
        _966 = _793;
        _967 = _793;
        _968 = _793;
        _969 = _793;
        _970 = _793;
        _971 = _793;
        _972 = _793;
        _973 = _793;
        _974 = _793;
        _975 = _793;
        _976 = _793;
        _977 = _793;
    }
    float _992 = _558 * 0.5;
    float _993 = _559 * 0.5;
    float _994 = _560 * 0.5;
    float _995 = dot(vec4(_992, _993, _994, 1.0), vec4(_968, _971, _974, _977));
    float _998 = dot(vec4(_992, _993, _994, 1.0), vec4(_967, _970, _973, _976));
    float _1001 = dot(vec4(_992, _993, _994, 1.0), vec4(_966, _969, _972, _975));
    float _1036;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1008 = dot(vec4(_992, _993, _994, 1.0), vec4(_792, _796, _799, _802));
        float _1012 = dot(vec4(_992, _993, _994, 1.0), vec4(_794, _797, _800, _803));
        float _1016 = dot(vec4(_992, _993, _994, 1.0), vec4(_795, _798, _801, _804));
        float _1023 = dot(vec4(cbModelParam._m0[39u]), vec4(_992, _993, _994, 1.0));
        _1036 = dot(vec3(isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0)), isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0)), isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1023) ? 0.0 : (isnan(0.0) ? _1023 : max(0.0, _1023))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1036 = 1.0;
    }
    float _1047;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1038 = dot(vec4(cbModelParam._m0[40u]), vec4(_992, _993, _994, 1.0));
        _1047 = dot(vec3(isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0)), isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0)), isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1038) ? 0.0 : (isnan(0.0) ? _1038 : max(0.0, _1038))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1047 = 1.0;
    }
    float _1051 = (_1047 * cbModelParam._m0[1u].x) + (_1036 * (1.0 - cbModelParam._m0[1u].x));
    float _1058 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _374);
    float _1059 = isnan(_1058) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1058 : min(cbModelParam._m0[25u].z, _1058));
    float _1142;
    float _1144;
    float _1146;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1109 = fma(_626, cbModelParam._m0[13u].z, fma(_622, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _618)) + cbModelParam._m0[13u].w;
        float _1113 = fma(_626, cbModelParam._m0[14u].z, fma(_622, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _618)) + cbModelParam._m0[14u].w;
        float _1117 = fma(_626, cbModelParam._m0[15u].z, fma(_622, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _618)) + cbModelParam._m0[15u].w;
        float _1120 = fma(_560, cbModelParam._m0[13u].z, fma(_559, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _558));
        float _1123 = fma(_560, cbModelParam._m0[14u].z, fma(_559, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _558));
        float _1126 = fma(_560, cbModelParam._m0[15u].z, fma(_559, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _558));
        float _1154;
        if (_1120 > 0.0)
        {
            _1154 = abs((1.0 - _1109) / _1120);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1120 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1109 + 1.0) / _1120);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1154 = frontier_phi_16_14_ladder;
        }
        float _1523;
        if (_1123 > 0.0)
        {
            _1523 = abs((1.0 - _1113) / _1123);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1123 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1113 + 1.0) / _1123);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1523 = frontier_phi_25_21_ladder;
        }
        float _1729;
        if (_1126 > 0.0)
        {
            _1729 = abs((1.0 - _1117) / _1126);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1126 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1117 + 1.0) / _1126);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1729 = frontier_phi_37_32_ladder;
        }
        float _1731 = isnan(_1523) ? _1154 : (isnan(_1154) ? _1523 : min(_1154, _1523));
        float _1732 = isnan(_1729) ? _1731 : (isnan(_1731) ? _1729 : min(_1731, _1729));
        float _1736 = (_1732 * _1120) + _1109;
        float _1737 = (_1732 * _1123) + _1113;
        float _1738 = (_1732 * _1126) + _1117;
        float _1739 = _1732 * 9.9999997473787516355514526367188e-05;
        float _1741 = (-1.0) - _1739;
        float _1743 = _1739 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1738 > _1743) || ((_1738 < _1741) || ((_1737 > _1743) || ((_1737 < _1741) || ((_1736 < _1741) || (_1736 > _1743))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1936 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1738, cbModelParam._m0[9u].z, fma(_1737, cbModelParam._m0[9u].y, _1736 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1738, cbModelParam._m0[10u].z, fma(_1737, cbModelParam._m0[10u].y, _1736 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1738, cbModelParam._m0[11u].z, fma(_1737, cbModelParam._m0[11u].y, _1736 * cbModelParam._m0[11u].x))), _1059);
            frontier_phi_15_37_ladder = _1936.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1936.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1936.x * cbModelParam._m0[1u].y;
        }
        _1142 = frontier_phi_15_37_ladder_2;
        _1144 = frontier_phi_15_37_ladder_1;
        _1146 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1130 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_558, _559, _560), _1059);
        _1142 = _1130.x * cbModelParam._m0[1u].y;
        _1144 = _1130.y * cbModelParam._m0[1u].y;
        _1146 = _1130.z * cbModelParam._m0[1u].y;
    }
    float _1150 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _374);
    float _1151 = isnan(_1150) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1150 : min(cbModelParam._m0[25u].w, _1150));
    float _1244;
    float _1246;
    float _1248;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1208 = fma(_626, cbModelParam._m0[21u].z, fma(_622, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _618)) + cbModelParam._m0[21u].w;
        float _1212 = fma(_626, cbModelParam._m0[22u].z, fma(_622, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _618)) + cbModelParam._m0[22u].w;
        float _1216 = fma(_626, cbModelParam._m0[23u].z, fma(_622, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _618)) + cbModelParam._m0[23u].w;
        float _1219 = fma(_560, cbModelParam._m0[21u].z, fma(_559, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _558));
        float _1222 = fma(_560, cbModelParam._m0[22u].z, fma(_559, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _558));
        float _1225 = fma(_560, cbModelParam._m0[23u].z, fma(_559, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _558));
        float _1528;
        if (_1219 > 0.0)
        {
            _1528 = abs((1.0 - _1208) / _1219);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1219 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1208 + 1.0) / _1219);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1528 = frontier_phi_27_23_ladder;
        }
        float _1756;
        if (_1222 > 0.0)
        {
            _1756 = abs((1.0 - _1212) / _1222);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1222 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1212 + 1.0) / _1222);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1756 = frontier_phi_39_34_ladder;
        }
        float _2050;
        if (_1225 > 0.0)
        {
            _2050 = abs((1.0 - _1216) / _1225);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1225 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1216 + 1.0) / _1225);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _2050 = frontier_phi_50_45_ladder;
        }
        float _2052 = isnan(_1756) ? _1528 : (isnan(_1528) ? _1756 : min(_1528, _1756));
        float _2053 = isnan(_2050) ? _2052 : (isnan(_2052) ? _2050 : min(_2052, _2050));
        float _2057 = (_2053 * _1219) + _1208;
        float _2058 = (_2053 * _1222) + _1212;
        float _2059 = (_2053 * _1225) + _1216;
        float _2060 = _2053 * 9.9999997473787516355514526367188e-05;
        float _2061 = (-1.0) - _2060;
        float _2063 = _2060 + 1.0;
        float frontier_phi_24_50_ladder;
        float frontier_phi_24_50_ladder_1;
        float frontier_phi_24_50_ladder_2;
        if ((_2059 > _2063) || ((_2059 < _2061) || ((_2058 > _2063) || ((_2058 < _2061) || ((_2057 < _2061) || (_2057 > _2063))))))
        {
            frontier_phi_24_50_ladder = 0.0;
            frontier_phi_24_50_ladder_1 = 0.0;
            frontier_phi_24_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2168 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2059, cbModelParam._m0[17u].z, fma(_2058, cbModelParam._m0[17u].y, _2057 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2059, cbModelParam._m0[18u].z, fma(_2058, cbModelParam._m0[18u].y, _2057 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2059, cbModelParam._m0[19u].z, fma(_2058, cbModelParam._m0[19u].y, _2057 * cbModelParam._m0[19u].x))), _1151);
            frontier_phi_24_50_ladder = _2168.x * cbModelParam._m0[1u].z;
            frontier_phi_24_50_ladder_1 = _2168.z * cbModelParam._m0[1u].z;
            frontier_phi_24_50_ladder_2 = _2168.y * cbModelParam._m0[1u].z;
        }
        _1244 = frontier_phi_24_50_ladder;
        _1246 = frontier_phi_24_50_ladder_2;
        _1248 = frontier_phi_24_50_ladder_1;
    }
    else
    {
        vec4 _1228 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_558, _559, _560), _1151);
        _1244 = _1228.x * cbModelParam._m0[1u].z;
        _1246 = _1228.y * cbModelParam._m0[1u].z;
        _1248 = _1228.z * cbModelParam._m0[1u].z;
    }
    float _1261 = (((_589 * _371) + _590) * _549) * ((cbModelParam._m0[1u].w * (_1244 - _1142)) + _1142);
    float _1263 = (((_589 * _372) + _590) * _549) * ((cbModelParam._m0[1u].w * (_1246 - _1144)) + _1144);
    float _1265 = (((_589 * _373) + _590) * _549) * ((cbModelParam._m0[1u].w * (_1248 - _1146)) + _1146);
    float _1286 = fma(_1265, cbSceneParam._m0[89u].z, fma(_1263, cbSceneParam._m0[89u].y, _1261 * cbSceneParam._m0[89u].x));
    float _1289 = fma(_1265, cbSceneParam._m0[90u].z, fma(_1263, cbSceneParam._m0[90u].y, _1261 * cbSceneParam._m0[90u].x));
    float _1292 = fma(_1265, cbSceneParam._m0[91u].z, fma(_1263, cbSceneParam._m0[91u].y, _1261 * cbSceneParam._m0[91u].x));
    vec4 _1300 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_442, _443));
    float _1302 = _1300.w;
    uint _1317 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1321 = floatBitsToUint(cbInstanceData._m0[_1317 + 5u]);
    uint _1323 = _1321.x * 14u;
    uint _1324 = _1323 + 13u;
    float _1330 = _549 + (-1.0);
    float _1335 = (cbLight._m0[_1324].x * _1330) + 1.0;
    float _1336 = (cbLight._m0[_1324].y * _1330) + 1.0;
    float _1337 = (cbLight._m0[_1324].w * _1330) + 1.0;
    uint _1341 = _1323 + 8u;
    float _1357 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1323].w)) * _374) * 0.949999988079071044921875);
    float _1358 = _1357 * _1357;
    float _1359 = cbLight._m0[_1323].x + _435;
    float _1360 = cbLight._m0[_1323].y + _436;
    float _1361 = cbLight._m0[_1323].z + _437;
    float _1365 = inversesqrt(dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361)));
    float _1366 = _1365 * _1359;
    float _1367 = _1365 * _1360;
    float _1368 = _1365 * _1361;
    float _1369 = dot(vec3(_367, _368, _369), vec3(cbLight._m0[_1323].xyz));
    float _3057 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
    float _1372 = isnan(1.0) ? _3057 : (isnan(_3057) ? 1.0 : min(_3057, 1.0));
    float _3068 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _1373 = isnan(1.0) ? _3068 : (isnan(_3068) ? 1.0 : min(_3068, 1.0));
    float _1374 = dot(vec3(_367, _368, _369), vec3(_1366, _1367, _1368));
    float _3079 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
    float _1377 = isnan(1.0) ? _3079 : (isnan(_3079) ? 1.0 : min(_3079, 1.0));
    float _1378 = dot(vec3(cbLight._m0[_1323].xyz), vec3(_1366, _1367, _1368));
    float _3090 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
    float _1382 = _1358 * _1358;
    float _1386 = ((_1377 * _1377) * (_1382 + (-1.0))) + 1.0;
    float _1394 = exp2(log2(1.0 - (isnan(1.0) ? _3090 : (isnan(_3090) ? 1.0 : min(_3090, 1.0)))) * 5.0);
    float _1395 = 1.0 - _371;
    float _1396 = 1.0 - _372;
    float _1397 = 1.0 - _373;
    float _1404 = 1.0 - _1358;
    float _1415 = (0.5 / (((_1373 * ((_1372 * _1404) + _1358)) + 9.9999999392252902907785028219223e-09) + (((_1373 * _1404) + _1358) * _1372))) * _1372;
    float _3101 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
    float _1417 = (isnan(1.0) ? _3101 : (isnan(_3101) ? 1.0 : min(_3101, 1.0))) * (_1382 / ((_1386 * _1386) * 3.141590118408203125));
    float _1418 = isnan(1.0) ? _1335 : (isnan(_1335) ? 1.0 : min(_1335, 1.0));
    uint _1431 = _1323 | 1u;
    uint _1435 = _1323 + 9u;
    float _1449 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1431].w)) * _374) * 0.949999988079071044921875);
    float _1450 = _1449 * _1449;
    float _1451 = cbLight._m0[_1431].x + _435;
    float _1452 = cbLight._m0[_1431].y + _436;
    float _1453 = cbLight._m0[_1431].z + _437;
    float _1457 = inversesqrt(dot(vec3(_1451, _1452, _1453), vec3(_1451, _1452, _1453)));
    float _1458 = _1457 * _1451;
    float _1459 = _1457 * _1452;
    float _1460 = _1457 * _1453;
    float _1461 = dot(vec3(_367, _368, _369), vec3(cbLight._m0[_1431].xyz));
    float _3117 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
    float _1464 = isnan(1.0) ? _3117 : (isnan(_3117) ? 1.0 : min(_3117, 1.0));
    float _1465 = dot(vec3(_367, _368, _369), vec3(_1458, _1459, _1460));
    float _3128 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
    float _1468 = isnan(1.0) ? _3128 : (isnan(_3128) ? 1.0 : min(_3128, 1.0));
    float _1469 = dot(vec3(cbLight._m0[_1431].xyz), vec3(_1458, _1459, _1460));
    float _3139 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
    float _1473 = _1450 * _1450;
    float _1477 = ((_1468 * _1468) * (_1473 + (-1.0))) + 1.0;
    float _1484 = exp2(log2(1.0 - (isnan(1.0) ? _3139 : (isnan(_3139) ? 1.0 : min(_3139, 1.0)))) * 5.0);
    float _1491 = 1.0 - _1450;
    float _1501 = (0.5 / (((_1373 * ((_1464 * _1491) + _1450)) + 9.9999999392252902907785028219223e-09) + (((_1373 * _1491) + _1450) * _1464))) * _1464;
    float _3150 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
    float _1503 = (isnan(1.0) ? _3150 : (isnan(_3150) ? 1.0 : min(_3150, 1.0))) * (_1473 / ((_1477 * _1477) * 3.141590118408203125));
    float _1504 = isnan(1.0) ? _1336 : (isnan(_1336) ? 1.0 : min(_1336, 1.0));
    float _1514 = (((((_1484 * _1395) + _371) * cbLight._m0[_1435].x) * _1503) * _1504) + ((((cbLight._m0[_1341].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1302))) * ((_1394 * _1395) + _371)) * _1417) * _1418);
    float _1515 = (((((_1484 * _1396) + _372) * cbLight._m0[_1435].y) * _1503) * _1504) + ((((cbLight._m0[_1341].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1302))) * ((_1394 * _1396) + _372)) * _1417) * _1418);
    float _1516 = (((((_1484 * _1397) + _373) * cbLight._m0[_1435].z) * _1503) * _1504) + ((((cbLight._m0[_1341].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1302))) * ((_1394 * _1397) + _373)) * _1417) * _1418);
    uvec4 _1520 = floatBitsToUint(cbLight._m0[_1323 + 12u]);
    float _1533;
    float _1535;
    float _1537;
    if (_1520.x == 0u)
    {
        _1533 = _1514;
        _1535 = _1515;
        _1537 = _1516;
    }
    else
    {
        float _1543 = (cbLight._m0[_1324].z * _1330) + 1.0;
        uint _1544 = _1323 + 2u;
        uint _1548 = _1323 + 10u;
        float _1562 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1544].w)) * _374) * 0.949999988079071044921875);
        float _1563 = _1562 * _1562;
        float _1564 = cbLight._m0[_1544].x + _435;
        float _1565 = cbLight._m0[_1544].y + _436;
        float _1566 = cbLight._m0[_1544].z + _437;
        float _1570 = inversesqrt(dot(vec3(_1564, _1565, _1566), vec3(_1564, _1565, _1566)));
        float _1571 = _1570 * _1564;
        float _1572 = _1570 * _1565;
        float _1573 = _1570 * _1566;
        float _1574 = dot(vec3(_367, _368, _369), vec3(cbLight._m0[_1544].xyz));
        float _3166 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1577 = isnan(1.0) ? _3166 : (isnan(_3166) ? 1.0 : min(_3166, 1.0));
        float _1578 = dot(vec3(_367, _368, _369), vec3(_1571, _1572, _1573));
        float _3177 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1581 = isnan(1.0) ? _3177 : (isnan(_3177) ? 1.0 : min(_3177, 1.0));
        float _1582 = dot(vec3(cbLight._m0[_1544].xyz), vec3(_1571, _1572, _1573));
        float _3188 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1586 = _1563 * _1563;
        float _1590 = ((_1581 * _1581) * (_1586 + (-1.0))) + 1.0;
        float _1597 = exp2(log2(1.0 - (isnan(1.0) ? _3188 : (isnan(_3188) ? 1.0 : min(_3188, 1.0)))) * 5.0);
        float _1604 = 1.0 - _1563;
        float _1614 = (0.5 / (((_1373 * ((_1577 * _1604) + _1563)) + 9.9999999392252902907785028219223e-09) + (((_1373 * _1604) + _1563) * _1577))) * _1577;
        float _3199 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1616 = (isnan(1.0) ? _3199 : (isnan(_3199) ? 1.0 : min(_3199, 1.0))) * (_1586 / ((_1590 * _1590) * 3.141590118408203125));
        float _1617 = isnan(1.0) ? _1543 : (isnan(_1543) ? 1.0 : min(_1543, 1.0));
        _1533 = (((((_1597 * _1395) + _371) * cbLight._m0[_1548].x) * _1616) * _1617) + _1514;
        _1535 = (((((_1597 * _1396) + _372) * cbLight._m0[_1548].y) * _1616) * _1617) + _1515;
        _1537 = (((((_1597 * _1397) + _373) * cbLight._m0[_1548].z) * _1616) * _1617) + _1516;
    }
    float _1635;
    float _1637;
    float _1639;
    if (_1520.y == 0u)
    {
        _1635 = _1533;
        _1637 = _1535;
        _1639 = _1537;
    }
    else
    {
        uint _1646 = _1323 + 3u;
        uint _1650 = _1323 + 11u;
        float _1664 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1646].w)) * _374) * 0.949999988079071044921875);
        float _1665 = _1664 * _1664;
        float _1666 = cbLight._m0[_1646].x + _435;
        float _1667 = cbLight._m0[_1646].y + _436;
        float _1668 = cbLight._m0[_1646].z + _437;
        float _1672 = inversesqrt(dot(vec3(_1666, _1667, _1668), vec3(_1666, _1667, _1668)));
        float _1673 = _1672 * _1666;
        float _1674 = _1672 * _1667;
        float _1675 = _1672 * _1668;
        float _1676 = dot(vec3(_367, _368, _369), vec3(cbLight._m0[_1646].xyz));
        float _3215 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1679 = isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0));
        float _1680 = dot(vec3(_367, _368, _369), vec3(_1673, _1674, _1675));
        float _3226 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1683 = isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0));
        float _1684 = dot(vec3(cbLight._m0[_1646].xyz), vec3(_1673, _1674, _1675));
        float _3237 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1688 = _1665 * _1665;
        float _1692 = ((_1683 * _1683) * (_1688 + (-1.0))) + 1.0;
        float _1699 = exp2(log2(1.0 - (isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0)))) * 5.0);
        float _1706 = 1.0 - _1665;
        float _1716 = (0.5 / (((_1373 * ((_1679 * _1706) + _1665)) + 9.9999999392252902907785028219223e-09) + (((_1373 * _1706) + _1665) * _1679))) * _1679;
        float _3248 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1718 = (isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0))) * (_1688 / ((_1692 * _1692) * 3.141590118408203125));
        float _1719 = isnan(1.0) ? _1337 : (isnan(_1337) ? 1.0 : min(_1337, 1.0));
        _1635 = (((((_1699 * _1395) + _371) * cbLight._m0[_1650].x) * _1718) * _1719) + _1533;
        _1637 = (((((_1699 * _1396) + _372) * cbLight._m0[_1650].y) * _1718) * _1719) + _1535;
        _1639 = (((((_1699 * _1397) + _373) * cbLight._m0[_1650].z) * _1718) * _1719) + _1537;
    }
    float _1860;
    float _1862;
    float _1864;
    if (_1321.y == 0u)
    {
        float _1800 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1801 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1800;
        float _1802 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1800;
        float _1803 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1800;
        uvec4 _1815 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1816 = _1815.x;
        uint _1827 = uint((float(_1815.y) * floor(float(uint(cbSceneParam._m0[85u].y * _443) / _1816))) + floor(float(uint(cbSceneParam._m0[85u].x * _442) / _1816)));
        float _1837 = (log2(_1803 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1838 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
        uint _1841 = uint(isnan(14.0) ? _1838 : (isnan(_1838) ? 14.0 : min(_1838, 14.0)));
        uvec4 _1846 = texelFetch(g_lightClusterGridBuffer, int(((_1841 << 2u) + (_1827 << 6u)) >> 2u));
        uint _1847 = _1846.x;
        uint _1848 = _1815.z;
        float _1945;
        float _1947;
        float _1949;
        if (((((1u << ((_1848 >> 4u) & 15u)) + 4294967295u) & _1847) == 0u) || ((_1848 & 240u) == 0u))
        {
            _1945 = 0.0;
            _1947 = 0.0;
            _1949 = 0.0;
        }
        else
        {
            float _1946;
            float _1948;
            float _1950;
            float _2099 = 0.0;
            float _2100 = 0.0;
            float _2101 = 0.0;
            uint _2102 = 0u;
            uint _2111;
            bool _2112;
            for (;;)
            {
                _2111 = texelFetch(g_lightClassification, int((((_1841 << 5u) + (_1827 << 9u)) + (_2102 << 2u)) >> 2u)).x;
                _2112 = _2111 == 0u;
                float frontier_phi_59_pred;
                float frontier_phi_59_pred_1;
                float frontier_phi_59_pred_2;
                if (_2112)
                {
                    frontier_phi_59_pred = _2101;
                    frontier_phi_59_pred_1 = _2100;
                    frontier_phi_59_pred_2 = _2099;
                }
                else
                {
                    float _2235;
                    float _2236;
                    float _2237;
                    uint _2238;
                    _2235 = _2099;
                    _2236 = _2100;
                    _2237 = _2101;
                    _2238 = _2111;
                    float _2173;
                    float _2174;
                    float _2175;
                    for (;;)
                    {
                        uint _2242 = uint(findLSB(_2238)) + (_2102 << 5u);
                        uint _2239 = (_2238 + 4294967295u) & _2238;
                        uint _2244 = _2242 * 48u;
                        vec4 _2258 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2244)).x, texelFetch(g_PointLightRenderingBuffer, int(_2244 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2244 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2244 + 3u)).x));
                        uint _2275 = (_2242 * 48u) + 8u;
                        vec3 _2286 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2275)).x, texelFetch(g_PointLightRenderingBuffer, int(_2275 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2275 + 2u)).x));
                        float _2290 = _2258.x - _1801;
                        float _2291 = _2258.y - _1802;
                        float _2292 = _2258.z - _1803;
                        float _2293 = dot(vec3(_2290, _2291, _2292), vec3(_2290, _2291, _2292));
                        float _2296 = inversesqrt(_2293);
                        float _2297 = _2296 * _2290;
                        float _2298 = _2296 * _2291;
                        float _2299 = _2296 * _2292;
                        float _2305 = 1.0 - (_2293 * _2258.w);
                        float _3274 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
                        float _2307 = sqrt(_2293) * uintBitsToFloat(uvec4(_2265, _2266, _2267, texelFetch(g_PointLightRenderingBuffer, int(((_2242 * 48u) + 4u) + 3u)).x)).w;
                        float _2311 = _2307 * _2307;
                        float _2312 = (-0.0) - _1801;
                        float _2313 = (-0.0) - _1802;
                        float _2314 = (-0.0) - _1803;
                        float _2318 = inversesqrt(dot(vec3(_2312, _2313, _2314), vec3(_2312, _2313, _2314)));
                        float _2319 = _2318 * _2312;
                        float _2320 = _2318 * _2313;
                        float _2321 = _2318 * _2314;
                        float _2329 = exp2(log2(1.0 / ((_2311 * 3.5) + 5.0)) * 0.25);
                        float _2330 = 1.0 - _571;
                        float _2337 = sqrt(1.0 - ((1.0 - (_2330 * _2330)) * (1.0 - (_2329 * _2329))));
                        float _2338 = _2337 * _2337;
                        float _2339 = _2338 * _2338;
                        float _2340 = _2319 + _2297;
                        float _2341 = _2320 + _2298;
                        float _2342 = _2321 + _2299;
                        float _2346 = inversesqrt(dot(vec3(_2340, _2341, _2342), vec3(_2340, _2341, _2342)));
                        float _2350 = dot(vec3(_464, _467, _470), vec3(_2319, _2320, _2321));
                        float _3285 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
                        float _2353 = isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0));
                        float _2354 = dot(vec3(_464, _467, _470), vec3(_2346 * _2340, _2346 * _2341, _2346 * _2342));
                        float _3296 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
                        float _2357 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
                        float _2361 = ((_2357 * _2357) * (_2339 + (-1.0))) + 1.0;
                        float _2362 = (1.39999997615814208984375 / (_2307 + 1.39999997615814208984375)) * _2338;
                        float _2363 = _2362 * _2362;
                        float _2366 = ((1.0 - _2363) * dot(vec3(_464, _467, _470), vec3(_2297, _2298, _2299))) + _2363;
                        float _3307 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
                        float _2367 = isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0));
                        float _2368 = 1.0 - _2338;
                        float _2378 = (0.5 / (((_2367 * ((_2353 * _2368) + _2338)) + 9.9999999392252902907785028219223e-09) + (((_2367 * _2368) + _2338) * _2353))) * _2367;
                        float _3318 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
                        float _2389 = (((_2339 * 3.1415927410125732421875) * (isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0)))) / ((_2361 * _2361) * ((_2311 * 2.1991131305694580078125) + 3.141590118408203125))) * (isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0)));
                        _2173 = (_2389 * _2286.x) + _2235;
                        _2174 = (_2389 * _2286.y) + _2236;
                        _2175 = (_2389 * _2286.z) + _2237;
                        if (_2239 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2235 = _2173;
                            _2236 = _2174;
                            _2237 = _2175;
                            _2238 = _2239;
                        }
                    }
                    frontier_phi_59_pred = _2175;
                    frontier_phi_59_pred_1 = _2174;
                    frontier_phi_59_pred_2 = _2173;
                }
                _1950 = frontier_phi_59_pred;
                _1948 = frontier_phi_59_pred_1;
                _1946 = frontier_phi_59_pred_2;
                uint _2103 = _2102 + 1u;
                if (_2103 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2099 = _1946;
                    _2100 = _1948;
                    _2101 = _1950;
                    _2102 = _2103;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1945 = _1946;
            _1947 = _1948;
            _1949 = _1950;
        }
        uvec4 _1953 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1954 = _1953.z;
        uint _1956 = (_1954 >> 8u) & 15u;
        float _2076;
        float _2078;
        float _2080;
        if (((4294967295u << _1956) & _1847) == 0u)
        {
            _2076 = _1945;
            _2078 = _1947;
            _2080 = _1949;
        }
        else
        {
            float _2092 = inversesqrt(dot(vec3(_1801, _1802, _1803), vec3(_1801, _1802, _1803)));
            float _2093 = _2092 * _1801;
            float _2094 = _2092 * _1802;
            float _2095 = _2092 * _1803;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            if (_1956 < ((_1954 >> 12u) & 15u))
            {
                float _2077;
                float _2079;
                float _2081;
                float _2221 = _1945;
                float _2222 = _1947;
                float _2223 = _1949;
                uint _2224 = _1956;
                uint _2233;
                bool _2234;
                for (;;)
                {
                    _2233 = texelFetch(g_lightClassification, int((((_1841 << 5u) + (_1827 << 9u)) + (_2224 << 2u)) >> 2u)).x;
                    _2234 = _2233 == 0u;
                    float frontier_phi_65_pred;
                    float frontier_phi_65_pred_1;
                    float frontier_phi_65_pred_2;
                    if (_2234)
                    {
                        frontier_phi_65_pred = _2223;
                        frontier_phi_65_pred_1 = _2222;
                        frontier_phi_65_pred_2 = _2221;
                    }
                    else
                    {
                        float _2394;
                        float _2395;
                        float _2396;
                        float _2660;
                        float _2661;
                        float _2662;
                        float _2404 = _2221;
                        float _2405 = _2222;
                        float _2406 = _2223;
                        uint _2407 = _2233;
                        uint _2408;
                        uint _2418;
                        vec4 _2433;
                        float _2434;
                        vec3 _2446;
                        vec4 _2462;
                        vec4 _2478;
                        float _2525;
                        bool _2526;
                        for (;;)
                        {
                            _2418 = ((_2224 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2407));
                            _2408 = (_2407 + 4294967295u) & _2407;
                            uint _2420 = _2418 * 40u;
                            _2433 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2420 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2420 + 3u)).x));
                            _2434 = _2433.w;
                            uint _2436 = (_2418 * 40u) + 8u;
                            _2446 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2436 + 2u)).x));
                            uint _2449 = (_2418 * 40u) + 16u;
                            _2462 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2449 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2449 + 3u)).x));
                            uint _2465 = (_2418 * 40u) + 20u;
                            _2478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2465 + 3u)).x));
                            uint _2481 = (_2418 * 40u) + 24u;
                            vec4 _2494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2481 + 3u)).x));
                            uint _2500 = (_2418 * 40u) + 28u;
                            vec4 _2513 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2500 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2500 + 3u)).x));
                            _2525 = fma(_1803, _2513.z, fma(_1802, _2513.y, _2513.x * _1801)) + _2513.w;
                            _2526 = !((fma(_1803, _2494.z, fma(_1802, _2494.y, _2494.x * _1801)) + _2494.w) <= 0.0);
                            float frontier_phi_71_pred;
                            float frontier_phi_71_pred_1;
                            float frontier_phi_71_pred_2;
                            if (_2526)
                            {
                                float _2560 = _2433.x - _1801;
                                float _2561 = _2433.y - _1802;
                                float _2562 = _2433.z - _1803;
                                float _2563 = dot(vec3(_2560, _2561, _2562), vec3(_2560, _2561, _2562));
                                float _2566 = inversesqrt(_2563);
                                float _2567 = _2566 * _2560;
                                float _2568 = _2566 * _2561;
                                float _2569 = _2566 * _2562;
                                float _2573 = 1.0 - (_2563 / (_2434 * _2434));
                                float _3329 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
                                float _2575 = sqrt(_2563) * uintBitsToFloat(uvec4(_2529, _2530, _2531, texelFetch(g_SpotLightRenderingBuffer, int(((_2418 * 40u) + 4u) + 3u)).x)).w;
                                float _2578 = _2575 * _2575;
                                float _2579 = (fma(_1803, _2462.z, fma(_1802, _2462.y, _2462.x * _1801)) + _2462.w) / _2525;
                                float _2580 = (fma(_1803, _2478.z, fma(_1802, _2478.y, _2478.x * _1801)) + _2478.w) / _2525;
                                float _2584 = 1.0 - dot(vec2(_2579, _2580), vec2(_2579, _2580));
                                float _3340 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
                                float _2594 = exp2(log2(1.0 / ((_2578 * 3.5) + 5.0)) * 0.25);
                                float _2595 = 1.0 - _571;
                                float _2602 = sqrt(1.0 - ((1.0 - (_2595 * _2595)) * (1.0 - (_2594 * _2594))));
                                float _2603 = _2602 * _2602;
                                float _2604 = _2603 * _2603;
                                float _2605 = _2567 - _2093;
                                float _2606 = _2568 - _2094;
                                float _2607 = _2569 - _2095;
                                float _2611 = inversesqrt(dot(vec3(_2605, _2606, _2607), vec3(_2605, _2606, _2607)));
                                float _2615 = dot(vec3(_464, _467, _470), vec3((-0.0) - _2093, (-0.0) - _2094, (-0.0) - _2095));
                                float _3351 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
                                float _2618 = isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0));
                                float _2619 = dot(vec3(_464, _467, _470), vec3(_2611 * _2605, _2611 * _2606, _2611 * _2607));
                                float _3362 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
                                float _2622 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
                                float _2626 = ((_2622 * _2622) * (_2604 + (-1.0))) + 1.0;
                                float _2627 = (1.39999997615814208984375 / (_2575 + 1.39999997615814208984375)) * _2603;
                                float _2628 = _2627 * _2627;
                                float _2634 = ((1.0 - _2628) * dot(vec3(_464, _467, _470), vec3(_2567, _2568, _2569))) + _2628;
                                float _3373 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
                                float _2635 = isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0));
                                float _2636 = 1.0 - _2603;
                                float _2646 = (0.5 / (((_2635 * ((_2618 * _2636) + _2603)) + 9.9999999392252902907785028219223e-09) + (((_2635 * _2636) + _2603) * _2618))) * _2635;
                                float _3384 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
                                float _2656 = ((isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0))) * (isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0)))) * (((_2604 * 3.1415927410125732421875) * (isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0)))) / ((_2626 * _2626) * ((_2578 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_71_pred = _2656 * _2446.z;
                                frontier_phi_71_pred_1 = _2656 * _2446.y;
                                frontier_phi_71_pred_2 = _2656 * _2446.x;
                            }
                            else
                            {
                                frontier_phi_71_pred = 0.0;
                                frontier_phi_71_pred_1 = 0.0;
                                frontier_phi_71_pred_2 = 0.0;
                            }
                            _2662 = frontier_phi_71_pred;
                            _2661 = frontier_phi_71_pred_1;
                            _2660 = frontier_phi_71_pred_2;
                            _2394 = _2660 + _2404;
                            _2395 = _2661 + _2405;
                            _2396 = _2662 + _2406;
                            if (_2408 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2404 = _2394;
                                _2405 = _2395;
                                _2406 = _2396;
                                _2407 = _2408;
                                continue;
                            }
                        }
                        frontier_phi_65_pred = _2396;
                        frontier_phi_65_pred_1 = _2395;
                        frontier_phi_65_pred_2 = _2394;
                    }
                    _2081 = frontier_phi_65_pred;
                    _2079 = frontier_phi_65_pred_1;
                    _2077 = frontier_phi_65_pred_2;
                    uint _2225 = _2224 + 1u;
                    if (_2225 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2221 = _2077;
                        _2222 = _2079;
                        _2223 = _2081;
                        _2224 = _2225;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2081;
                frontier_phi_52_53_ladder_1 = _2079;
                frontier_phi_52_53_ladder_2 = _2077;
            }
            else
            {
                frontier_phi_52_53_ladder = _1949;
                frontier_phi_52_53_ladder_1 = _1947;
                frontier_phi_52_53_ladder_2 = _1945;
            }
            _2076 = frontier_phi_52_53_ladder_2;
            _2078 = frontier_phi_52_53_ladder_1;
            _2080 = frontier_phi_52_53_ladder;
        }
        float _2085 = isnan(1.0) ? _549 : (isnan(_549) ? 1.0 : min(_549, 1.0));
        _1860 = ((_2076 * _371) * _2085) + _1635;
        _1862 = ((_2078 * _372) * _2085) + _1637;
        _1864 = ((_2080 * _373) * _2085) + _1639;
    }
    else
    {
        _1860 = _1635;
        _1862 = _1637;
        _1864 = _1639;
    }
    float _1868 = 0.959999978542327880859375 - ((isnan(1.0) ? _537 : (isnan(_537) ? 1.0 : min(_537, 1.0))) * 0.959999978542327880859375);
    float _1876 = _1868 - (exp2(log2(1.0 - _565) * 5.0) * _1868);
    uint _1883 = _1317 + 6u;
    float _1891 = _442 / cbSceneParam._m0[86u].x;
    float _1892 = _443 / cbSceneParam._m0[86u].y;
    vec4 _1906 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1891, _1892, (log2((isnan(cbSceneParam._m0[77u].w) ? _379 : (isnan(_379) ? cbSceneParam._m0[77u].w : min(_379, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1908 = _1906.x;
    float _1909 = _1906.y;
    float _1910 = _1906.z;
    float _1911 = _1906.w;
    float _2001;
    float _2003;
    float _2005;
    float _2007;
    if (_379 > cbSceneParam._m0[78u].w)
    {
        float _1964 = isnan(_379) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _379 : min(cbSceneParam._m0[80u].w, _379));
        float _1965 = _1964 / _379;
        float _1976 = _1965 * _428;
        float _1977 = _429 * _1965;
        float _1978 = (-0.0) - _1977;
        float _1979 = _1965 * _430;
        float _1981 = (cbSceneParam._m0[77u].w * _1978) / _1964;
        float _1982 = _1981 + cbSceneParam._m0[79u].w;
        float _1983 = cbSceneParam._m0[79u].w - _1977;
        float _1989 = sqrt(((_1976 * _1976) + (_1977 * _1977)) + (_1979 * _1979));
        float _1992 = (1.0 - (cbSceneParam._m0[77u].w / _1964)) * _1989;
        float _1997 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1999 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2183;
        if (abs((_1978 - _1981) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2183 = ((((_1982 > 0.0) ? exp2(_1997 * _1982) : (2.0 - exp2(_1999 * _1982))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1992;
        }
        else
        {
            float _2125 = 1.0 / cbSceneParam._m0[80u].x;
            float _2126 = isnan(_1983) ? _1982 : (isnan(_1982) ? _1983 : max(_1982, _1983));
            float _2127 = isnan(_1983) ? _1982 : (isnan(_1982) ? _1983 : min(_1982, _1983));
            float _2136 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : min(_2126, 0.0));
            float _2137 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : min(_2127, 0.0));
            _2183 = ((abs(_1989 / _1978) * cbSceneParam._m0[80u].y) * ((((_2136 - _2137) * 2.0) - ((exp2(_1997 * (isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0)))) - exp2(_1997 * (isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0))))) * _2125)) - ((exp2(_1999 * _2136) - exp2(_1999 * _2137)) * _2125))) + (_1992 * cbSceneParam._m0[80u].z);
        }
        vec4 _2185 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1891, _1892, 1.0), 0.0);
        float _2194 = exp2((_2183 * (-1.44269502162933349609375)) * (1.0 - _2185.w));
        float _2195 = log2(_2194);
        float _2211 = log2(_1911);
        _2001 = (exp2(_2211 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2195 * cbSceneParam._m0[78u].x)) * _2185.x) / cbSceneParam._m0[78u].x)) + _1908;
        _2003 = (exp2(_2211 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2195 * cbSceneParam._m0[78u].y)) * _2185.y) / cbSceneParam._m0[78u].y)) + _1909;
        _2005 = (exp2(_2211 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2195 * cbSceneParam._m0[78u].z)) * _2185.z) / cbSceneParam._m0[78u].z)) + _1910;
        _2007 = _2194 * _1911;
    }
    else
    {
        _2001 = _1908;
        _2003 = _1909;
        _2005 = _1910;
        _2007 = _1911;
    }
    float _2018 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2019 = _2018 == 3.0;
    float _2020 = log2(_2007);
    float _2027 = exp2(_2020 * cbSceneParam._m0[78u].x) * (((_1860 + ((isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0))) * _1051)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _289.x) * exp2((-0.0) - ((cbMtdParam._m0[10u].w * _346) * _347))) * _1876));
    float _2028 = exp2(_2020 * cbSceneParam._m0[78u].y) * (((_1862 + ((isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0))) * _1051)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _289.y) * exp2((-0.0) - ((cbMtdParam._m0[11u].x * _346) * _347))) * _1876));
    float _2029 = exp2(_2020 * cbSceneParam._m0[78u].z) * (((_1864 + ((isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0))) * _1051)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _289.z) * exp2((-0.0) - ((cbMtdParam._m0[11u].y * _346) * _347))) * _1876));
    float _2038 = (_2018 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2038 * (_2019 ? _2027 : (_2027 + (cbSceneParam._m0[72u].w * _2001)));
    SV_Target.y = _2038 * (_2019 ? _2028 : (_2028 + (cbSceneParam._m0[72u].w * _2003)));
    SV_Target.z = _2038 * (_2019 ? _2029 : (_2029 + (cbSceneParam._m0[72u].w * _2005)));
    SV_Target.w = cbInstanceData._m0[_1883].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1883].w;
}


