#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_GlassEX_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _836;
uint _2320;
uint _2321;
uint _2322;
uint _2593;
uint _2594;
uint _2595;
float _2854;
float _2855;
float _2856;
float _2857;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _171 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _172 = _171 * NORMAL.x;
    float _173 = _171 * NORMAL.y;
    float _174 = _171 * NORMAL.z;
    float _179;
    float _180;
    float _181;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _179 = (-0.0) - _172;
        _180 = (-0.0) - _173;
        _181 = (-0.0) - _174;
    }
    else
    {
        _179 = _172;
        _180 = _173;
        _181 = _174;
    }
    float _226 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _236 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _226);
    float _237 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _226);
    float _238 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _226);
    vec4 _259 = texture(sampler2D(M_GlassEX_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _265 = (_259.z * 0.5) + cbMtdParam._m0[10u].z;
    float _271 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _272 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _286 = isnan(cbInstanceData._m0[8u].x) ? _271 : (isnan(_271) ? cbInstanceData._m0[8u].x : max(_271, cbInstanceData._m0[8u].x));
    float _287 = isnan(cbInstanceData._m0[8u].y) ? _272 : (isnan(_272) ? cbInstanceData._m0[8u].y : max(_272, cbInstanceData._m0[8u].y));
    vec4 _291 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _286 : (isnan(_286) ? cbInstanceData._m0[8u].z : min(_286, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _287 : (isnan(_287) ? cbInstanceData._m0[8u].w : min(_287, cbInstanceData._m0[8u].w))));
    float _313 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _321 = abs(dot(vec4(_179, _180, _181, 0.0), vec4(_313 * _236, _313 * _237, _313 * _238, 0.0))) * cbMtdParam._m0[10u].x;
    vec4 _323 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_271, _272));
    float _325 = _323.x;
    bool _332 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _347 = (_332 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _325)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _325))) - POSITION_1.w;
    float _348 = isnan(_347) ? _321 : (isnan(_321) ? _347 : min(_321, _347));
    float _349 = log2(cbMtdParam._m0[10u].y);
    float _368 = inversesqrt(dot(vec3(_179, _180, _181), vec3(_179, _180, _181)));
    float _369 = _368 * _179;
    float _370 = _368 * _180;
    float _371 = _368 * _181;
    float _2891 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _373 = isnan(1.0) ? _2891 : (isnan(_2891) ? 1.0 : min(_2891, 1.0));
    float _2902 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _374 = isnan(1.0) ? _2902 : (isnan(_2902) ? 1.0 : min(_2902, 1.0));
    float _2913 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _375 = isnan(1.0) ? _2913 : (isnan(_2913) ? 1.0 : min(_2913, 1.0));
    float _2924 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _376 = isnan(1.0) ? _2924 : (isnan(_2924) ? 1.0 : min(_2924, 1.0));
    float _381 = _332 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _421 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _430 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _421);
    float _431 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _421);
    float _432 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _421);
    float _436 = inversesqrt(dot(vec3(_430, _431, _432), vec3(_430, _431, _432)));
    float _437 = _430 * _436;
    float _438 = _431 * _436;
    float _439 = _432 * _436;
    vec4 _444 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _446 = _444.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _651 = sqrt(((_430 * _430) + (_431 * _431)) + (_432 * _432));
        float _657 = (cbMatDynParam._m0[5u].x * _651) + cbMatDynParam._m0[5u].y;
        float _2935 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
        float _658 = isnan(1.0) ? _2935 : (isnan(_2935) ? 1.0 : min(_2935, 1.0));
        float _662 = (cbMatDynParam._m0[5u].z * _651) + cbMatDynParam._m0[5u].w;
        float _2946 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2946 : (isnan(_2946) ? 1.0 : min(_2946, 1.0))) - _658)) + _658) < ((_446 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _457 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _458 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _478 = fma(_371, cbSceneParam._m0[5u].z, fma(_370, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _369));
    float _481 = fma(_371, cbSceneParam._m0[6u].z, fma(_370, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _369));
    float _484 = fma(_371, cbSceneParam._m0[7u].z, fma(_370, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _369));
    float _485 = _373 * 3.3333332538604736328125;
    float _487 = _374 * 3.3333332538604736328125;
    float _488 = _375 * 3.3333332538604736328125;
    float _496 = ((isnan(1.0) ? _485 : (isnan(_485) ? 1.0 : min(_485, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _498 = ((isnan(1.0) ? _487 : (isnan(_487) ? 1.0 : min(_487, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _499 = ((isnan(1.0) ? _488 : (isnan(_488) ? 1.0 : min(_488, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _505 = (_373 + (-0.0599999986588954925537109375)) + (isnan(_496) ? 0.0 : (isnan(0.0) ? _496 : max(0.0, _496)));
    float _507 = (_374 + (-0.0599999986588954925537109375)) + (isnan(_498) ? 0.0 : (isnan(0.0) ? _498 : max(0.0, _498)));
    float _509 = (_375 + (-0.0599999986588954925537109375)) + (isnan(_499) ? 0.0 : (isnan(0.0) ? _499 : max(0.0, _499)));
    float _521 = (_505 * _505) - ((0.02999999932944774627685546875 - _373) * 0.119999997317790985107421875);
    float _522 = (_507 * _507) - ((0.02999999932944774627685546875 - _374) * 0.119999997317790985107421875);
    float _523 = (_509 * _509) - ((0.02999999932944774627685546875 - _375) * 0.119999997317790985107421875);
    float _533 = (sqrt(isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0))) - _505) * 16.666667938232421875;
    float _535 = (sqrt(isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0))) - _507) * 16.666667938232421875;
    float _536 = (sqrt(isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0))) - _509) * 16.666667938232421875;
    float _537 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _538 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _539 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _550 = (((isnan(1.0) ? _538 : (isnan(_538) ? 1.0 : min(_538, 1.0))) * 0.58700001239776611328125) + ((isnan(1.0) ? _537 : (isnan(_537) ? 1.0 : min(_537, 1.0))) * 0.29890000820159912109375)) + ((isnan(1.0) ? _539 : (isnan(_539) ? 1.0 : min(_539, 1.0))) * 0.114000000059604644775390625);
    float _551 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    vec4 _560 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _457, cbSceneParam._m0[86u].y * _458));
    float _563 = _560.x * TEXCOORD.z;
    float _564 = dot(vec3(_369, _370, _371), vec3(_437, _438, _439));
    float _567 = _564 * 2.0;
    float _572 = (_567 * _369) - _437;
    float _573 = (_567 * _370) - _438;
    float _574 = (_567 * _371) - _439;
    float _578 = abs(dot(vec3(_437, _438, _439), vec3(_369, _370, _371)));
    float _3042 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _579 = isnan(1.0) ? _3042 : (isnan(_3042) ? 1.0 : min(_3042, 1.0));
    float _585 = sqrt(_376);
    float _597 = exp2((_585 * 5.0) * log2(1.0 - (_579 * 0.999000012874603271484375))) / (4.0 - (_585 * 3.0));
    float _603 = (1.0 - _597) * ((_585 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _604 = _597 * _585;
    float _632 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _636 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _640 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _835;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _696 = fma(_640, cbModelParam._m0[26u].z, fma(_636, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _632));
        float _700 = fma(_640, cbModelParam._m0[27u].z, fma(_636, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _632));
        float _704 = fma(_640, cbModelParam._m0[28u].z, fma(_636, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _632));
        float _728 = _632 + _369;
        float _729 = _636 + _370;
        float _730 = _640 + _371;
        float _740 = fma(_730, cbModelParam._m0[26u].z, fma(_729, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _728)) - _696;
        float _741 = fma(_730, cbModelParam._m0[27u].z, fma(_729, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _728)) - _700;
        float _742 = fma(_730, cbModelParam._m0[28u].z, fma(_729, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _728)) - _704;
        float _746 = inversesqrt(dot(vec3(_740, _741, _742), vec3(_740, _741, _742)));
        float _759 = ((_746 * _740) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_696 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _760 = ((_746 * _741) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_700 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _761 = ((_746 * _742) / cbModelParam._m0[34u].z) + ((((((_704 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _764 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_759, _760, _761), 0.0);
        vec4 _771 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_759, _760, _761), 0.0);
        vec4 _778 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_759, _760, _761), 0.0);
        vec4 _785 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_759, _760, _761), 0.0);
        float _798 = exp2((_764.w + (-0.5)) * 20.0) * 2.0;
        float _808 = exp2((_771.w + (-0.5)) * 20.0) * 2.0;
        float _818 = exp2((_778.w + (-0.5)) * 20.0) * 2.0;
        float _828 = exp2((_785.w + (-0.5)) * 20.0) * 2.0;
        float _829 = _828 * (_785.x + (-0.5));
        float _830 = _828 * (_785.y + (-0.5));
        float _831 = _828 * (_785.z + (-0.5));
        _835 = _798 * (_764.z + (-0.5));
        _837 = _798 * (_764.y + (-0.5));
        _838 = _798 * (_764.x + (-0.5));
        _839 = _808 * (_771.z + (-0.5));
        _840 = _808 * (_771.y + (-0.5));
        _841 = _808 * (_771.x + (-0.5));
        _842 = _818 * (_778.z + (-0.5));
        _843 = _818 * (_778.y + (-0.5));
        _844 = _818 * (_778.x + (-0.5));
        _845 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        _846 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        _847 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    }
    else
    {
        _835 = _836;
        _837 = _836;
        _838 = _836;
        _839 = _836;
        _840 = _836;
        _841 = _836;
        _842 = _836;
        _843 = _836;
        _844 = _836;
        _845 = _836;
        _846 = _836;
        _847 = _836;
    }
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _876 = fma(_640, cbModelParam._m0[30u].z, fma(_636, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _632));
        float _880 = fma(_640, cbModelParam._m0[31u].z, fma(_636, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _632));
        float _884 = fma(_640, cbModelParam._m0[32u].z, fma(_636, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _632));
        float _907 = _632 + _369;
        float _908 = _636 + _370;
        float _909 = _640 + _371;
        float _919 = fma(_909, cbModelParam._m0[30u].z, fma(_908, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _907)) - _876;
        float _920 = fma(_909, cbModelParam._m0[31u].z, fma(_908, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _907)) - _880;
        float _921 = fma(_909, cbModelParam._m0[32u].z, fma(_908, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _907)) - _884;
        float _925 = inversesqrt(dot(vec3(_919, _920, _921), vec3(_919, _920, _921)));
        float _938 = ((_925 * _919) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_876 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _939 = ((_925 * _920) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_880 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _940 = ((_925 * _921) / cbModelParam._m0[35u].z) + ((((((_884 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _942 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _949 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        float _975 = exp2((_942.w + (-0.5)) * 20.0) * 2.0;
        float _985 = exp2((_949.w + (-0.5)) * 20.0) * 2.0;
        float _995 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_963.x + (-0.5));
        float _1007 = _1005 * (_963.y + (-0.5));
        float _1008 = _1005 * (_963.z + (-0.5));
        _1012 = _975 * (_942.z + (-0.5));
        _1013 = _975 * (_942.y + (-0.5));
        _1014 = _975 * (_942.x + (-0.5));
        _1015 = _985 * (_949.z + (-0.5));
        _1016 = _985 * (_949.y + (-0.5));
        _1017 = _985 * (_949.x + (-0.5));
        _1018 = _995 * (_956.z + (-0.5));
        _1019 = _995 * (_956.y + (-0.5));
        _1020 = _995 * (_956.x + (-0.5));
        _1021 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        _1022 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        _1023 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    }
    else
    {
        _1012 = _836;
        _1013 = _836;
        _1014 = _836;
        _1015 = _836;
        _1016 = _836;
        _1017 = _836;
        _1018 = _836;
        _1019 = _836;
        _1020 = _836;
        _1021 = _836;
        _1022 = _836;
        _1023 = _836;
    }
    float _1038 = _572 * 0.5;
    float _1039 = _573 * 0.5;
    float _1040 = _574 * 0.5;
    float _1041 = dot(vec4(_1038, _1039, _1040, 1.0), vec4(_1014, _1017, _1020, _1023));
    float _1044 = dot(vec4(_1038, _1039, _1040, 1.0), vec4(_1013, _1016, _1019, _1022));
    float _1047 = dot(vec4(_1038, _1039, _1040, 1.0), vec4(_1012, _1015, _1018, _1021));
    float _1082;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1054 = dot(vec4(_1038, _1039, _1040, 1.0), vec4(_835, _839, _842, _845));
        float _1058 = dot(vec4(_1038, _1039, _1040, 1.0), vec4(_837, _840, _843, _846));
        float _1062 = dot(vec4(_1038, _1039, _1040, 1.0), vec4(_838, _841, _844, _847));
        float _1069 = dot(vec4(cbModelParam._m0[39u]), vec4(_1038, _1039, _1040, 1.0));
        _1082 = dot(vec3(isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)), isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0)), isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1069) ? 0.0 : (isnan(0.0) ? _1069 : max(0.0, _1069))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1082 = 1.0;
    }
    float _1093;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1084 = dot(vec4(cbModelParam._m0[40u]), vec4(_1038, _1039, _1040, 1.0));
        _1093 = dot(vec3(isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0)), isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0)), isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1084) ? 0.0 : (isnan(0.0) ? _1084 : max(0.0, _1084))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1093 = 1.0;
    }
    float _1097 = (_1093 * cbModelParam._m0[1u].x) + (_1082 * (1.0 - cbModelParam._m0[1u].x));
    float _1104 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _376);
    float _1105 = isnan(_1104) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1104 : min(cbModelParam._m0[25u].z, _1104));
    float _1188;
    float _1190;
    float _1192;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1155 = fma(_640, cbModelParam._m0[13u].z, fma(_636, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _632)) + cbModelParam._m0[13u].w;
        float _1159 = fma(_640, cbModelParam._m0[14u].z, fma(_636, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _632)) + cbModelParam._m0[14u].w;
        float _1163 = fma(_640, cbModelParam._m0[15u].z, fma(_636, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _632)) + cbModelParam._m0[15u].w;
        float _1166 = fma(_574, cbModelParam._m0[13u].z, fma(_573, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _572));
        float _1169 = fma(_574, cbModelParam._m0[14u].z, fma(_573, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _572));
        float _1172 = fma(_574, cbModelParam._m0[15u].z, fma(_573, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _572));
        float _1200;
        if (_1166 > 0.0)
        {
            _1200 = abs((1.0 - _1155) / _1166);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1166 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1155 + 1.0) / _1166);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1200 = frontier_phi_19_17_ladder;
        }
        float _1548;
        if (_1169 > 0.0)
        {
            _1548 = abs((1.0 - _1159) / _1169);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1169 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1159 + 1.0) / _1169);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1548 = frontier_phi_28_24_ladder;
        }
        float _1754;
        if (_1172 > 0.0)
        {
            _1754 = abs((1.0 - _1163) / _1172);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1172 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1163 + 1.0) / _1172);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1754 = frontier_phi_40_35_ladder;
        }
        float _1756 = isnan(_1548) ? _1200 : (isnan(_1200) ? _1548 : min(_1200, _1548));
        float _1757 = isnan(_1754) ? _1756 : (isnan(_1756) ? _1754 : min(_1756, _1754));
        float _1761 = (_1757 * _1166) + _1155;
        float _1762 = (_1757 * _1169) + _1159;
        float _1763 = (_1757 * _1172) + _1163;
        float _1764 = _1757 * 9.9999997473787516355514526367188e-05;
        float _1766 = (-1.0) - _1764;
        float _1768 = _1764 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1763 > _1768) || ((_1763 < _1766) || ((_1762 > _1768) || ((_1762 < _1766) || ((_1761 < _1766) || (_1761 > _1768))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1961 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1763, cbModelParam._m0[9u].z, fma(_1762, cbModelParam._m0[9u].y, _1761 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1763, cbModelParam._m0[10u].z, fma(_1762, cbModelParam._m0[10u].y, _1761 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1763, cbModelParam._m0[11u].z, fma(_1762, cbModelParam._m0[11u].y, _1761 * cbModelParam._m0[11u].x))), _1105);
            frontier_phi_18_40_ladder = _1961.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1961.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1961.x * cbModelParam._m0[1u].y;
        }
        _1188 = frontier_phi_18_40_ladder_2;
        _1190 = frontier_phi_18_40_ladder_1;
        _1192 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1176 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_572, _573, _574), _1105);
        _1188 = _1176.x * cbModelParam._m0[1u].y;
        _1190 = _1176.y * cbModelParam._m0[1u].y;
        _1192 = _1176.z * cbModelParam._m0[1u].y;
    }
    float _1196 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _376);
    float _1197 = isnan(_1196) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1196 : min(cbModelParam._m0[25u].w, _1196));
    float _1290;
    float _1292;
    float _1294;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1254 = fma(_640, cbModelParam._m0[21u].z, fma(_636, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _632)) + cbModelParam._m0[21u].w;
        float _1258 = fma(_640, cbModelParam._m0[22u].z, fma(_636, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _632)) + cbModelParam._m0[22u].w;
        float _1262 = fma(_640, cbModelParam._m0[23u].z, fma(_636, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _632)) + cbModelParam._m0[23u].w;
        float _1265 = fma(_574, cbModelParam._m0[21u].z, fma(_573, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _572));
        float _1268 = fma(_574, cbModelParam._m0[22u].z, fma(_573, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _572));
        float _1271 = fma(_574, cbModelParam._m0[23u].z, fma(_573, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _572));
        float _1553;
        if (_1265 > 0.0)
        {
            _1553 = abs((1.0 - _1254) / _1265);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1265 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1254 + 1.0) / _1265);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1553 = frontier_phi_30_26_ladder;
        }
        float _1781;
        if (_1268 > 0.0)
        {
            _1781 = abs((1.0 - _1258) / _1268);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1268 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1258 + 1.0) / _1268);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1781 = frontier_phi_42_37_ladder;
        }
        float _2083;
        if (_1271 > 0.0)
        {
            _2083 = abs((1.0 - _1262) / _1271);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_1271 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_1262 + 1.0) / _1271);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _2083 = frontier_phi_53_48_ladder;
        }
        float _2085 = isnan(_1781) ? _1553 : (isnan(_1553) ? _1781 : min(_1553, _1781));
        float _2086 = isnan(_2083) ? _2085 : (isnan(_2085) ? _2083 : min(_2085, _2083));
        float _2090 = (_2086 * _1265) + _1254;
        float _2091 = (_2086 * _1268) + _1258;
        float _2092 = (_2086 * _1271) + _1262;
        float _2093 = _2086 * 9.9999997473787516355514526367188e-05;
        float _2094 = (-1.0) - _2093;
        float _2096 = _2093 + 1.0;
        float frontier_phi_27_53_ladder;
        float frontier_phi_27_53_ladder_1;
        float frontier_phi_27_53_ladder_2;
        if ((_2092 > _2096) || ((_2092 < _2094) || ((_2091 > _2096) || ((_2091 < _2094) || ((_2090 < _2094) || (_2090 > _2096))))))
        {
            frontier_phi_27_53_ladder = 0.0;
            frontier_phi_27_53_ladder_1 = 0.0;
            frontier_phi_27_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2218 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2092, cbModelParam._m0[17u].z, fma(_2091, cbModelParam._m0[17u].y, _2090 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2092, cbModelParam._m0[18u].z, fma(_2091, cbModelParam._m0[18u].y, _2090 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2092, cbModelParam._m0[19u].z, fma(_2091, cbModelParam._m0[19u].y, _2090 * cbModelParam._m0[19u].x))), _1197);
            frontier_phi_27_53_ladder = _2218.y * cbModelParam._m0[1u].z;
            frontier_phi_27_53_ladder_1 = _2218.x * cbModelParam._m0[1u].z;
            frontier_phi_27_53_ladder_2 = _2218.z * cbModelParam._m0[1u].z;
        }
        _1290 = frontier_phi_27_53_ladder_1;
        _1292 = frontier_phi_27_53_ladder;
        _1294 = frontier_phi_27_53_ladder_2;
    }
    else
    {
        vec4 _1274 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_572, _573, _574), _1197);
        _1290 = _1274.x * cbModelParam._m0[1u].z;
        _1292 = _1274.y * cbModelParam._m0[1u].z;
        _1294 = _1274.z * cbModelParam._m0[1u].z;
    }
    float _1307 = (((_603 * _373) + _604) * _563) * ((cbModelParam._m0[1u].w * (_1290 - _1188)) + _1188);
    float _1309 = (((_603 * _374) + _604) * _563) * ((cbModelParam._m0[1u].w * (_1292 - _1190)) + _1190);
    float _1311 = (((_603 * _375) + _604) * _563) * ((cbModelParam._m0[1u].w * (_1294 - _1192)) + _1192);
    float _1332 = fma(_1311, cbSceneParam._m0[89u].z, fma(_1309, cbSceneParam._m0[89u].y, _1307 * cbSceneParam._m0[89u].x));
    float _1335 = fma(_1311, cbSceneParam._m0[90u].z, fma(_1309, cbSceneParam._m0[90u].y, _1307 * cbSceneParam._m0[90u].x));
    float _1338 = fma(_1311, cbSceneParam._m0[91u].z, fma(_1309, cbSceneParam._m0[91u].y, _1307 * cbSceneParam._m0[91u].x));
    uint _1345 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1349 = floatBitsToUint(cbInstanceData._m0[_1345 + 5u]);
    uint _1351 = _1349.x * 14u;
    uint _1352 = _1351 + 13u;
    float _1358 = _563 + (-1.0);
    float _1363 = (cbLight._m0[_1352].x * _1358) + 1.0;
    float _1364 = (cbLight._m0[_1352].y * _1358) + 1.0;
    float _1365 = (cbLight._m0[_1352].w * _1358) + 1.0;
    uint _1369 = _1351 + 8u;
    float _1385 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1351].w)) * _376) * 0.949999988079071044921875);
    float _1386 = _1385 * _1385;
    float _1387 = cbLight._m0[_1351].x + _437;
    float _1388 = cbLight._m0[_1351].y + _438;
    float _1389 = cbLight._m0[_1351].z + _439;
    float _1393 = inversesqrt(dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389)));
    float _1394 = _1393 * _1387;
    float _1395 = _1393 * _1388;
    float _1396 = _1393 * _1389;
    float _1397 = dot(vec3(_369, _370, _371), vec3(cbLight._m0[_1351].xyz));
    float _3168 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
    float _1400 = isnan(1.0) ? _3168 : (isnan(_3168) ? 1.0 : min(_3168, 1.0));
    float _3179 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _1401 = isnan(1.0) ? _3179 : (isnan(_3179) ? 1.0 : min(_3179, 1.0));
    float _1402 = dot(vec3(_369, _370, _371), vec3(_1394, _1395, _1396));
    float _3190 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
    float _1405 = isnan(1.0) ? _3190 : (isnan(_3190) ? 1.0 : min(_3190, 1.0));
    float _1406 = dot(vec3(cbLight._m0[_1351].xyz), vec3(_1394, _1395, _1396));
    float _3201 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
    float _1410 = _1386 * _1386;
    float _1414 = ((_1405 * _1405) * (_1410 + (-1.0))) + 1.0;
    float _1422 = exp2(log2(1.0 - (isnan(1.0) ? _3201 : (isnan(_3201) ? 1.0 : min(_3201, 1.0)))) * 5.0);
    float _1423 = 1.0 - _373;
    float _1424 = 1.0 - _374;
    float _1425 = 1.0 - _375;
    float _1432 = 1.0 - _1386;
    float _1443 = (0.5 / (((_1401 * ((_1400 * _1432) + _1386)) + 9.9999999392252902907785028219223e-09) + (((_1401 * _1432) + _1386) * _1400))) * _1400;
    float _3212 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
    float _1445 = (isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0))) * (_1410 / ((_1414 * _1414) * 3.141590118408203125));
    float _1446 = isnan(1.0) ? _1363 : (isnan(_1363) ? 1.0 : min(_1363, 1.0));
    uint _1456 = _1351 | 1u;
    uint _1460 = _1351 + 9u;
    float _1474 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1456].w)) * _376) * 0.949999988079071044921875);
    float _1475 = _1474 * _1474;
    float _1476 = cbLight._m0[_1456].x + _437;
    float _1477 = cbLight._m0[_1456].y + _438;
    float _1478 = cbLight._m0[_1456].z + _439;
    float _1482 = inversesqrt(dot(vec3(_1476, _1477, _1478), vec3(_1476, _1477, _1478)));
    float _1483 = _1482 * _1476;
    float _1484 = _1482 * _1477;
    float _1485 = _1482 * _1478;
    float _1486 = dot(vec3(_369, _370, _371), vec3(cbLight._m0[_1456].xyz));
    float _3228 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
    float _1489 = isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0));
    float _1490 = dot(vec3(_369, _370, _371), vec3(_1483, _1484, _1485));
    float _3239 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
    float _1493 = isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0));
    float _1494 = dot(vec3(cbLight._m0[_1456].xyz), vec3(_1483, _1484, _1485));
    float _3250 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
    float _1498 = _1475 * _1475;
    float _1502 = ((_1493 * _1493) * (_1498 + (-1.0))) + 1.0;
    float _1509 = exp2(log2(1.0 - (isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0)))) * 5.0);
    float _1516 = 1.0 - _1475;
    float _1526 = (0.5 / (((_1401 * ((_1489 * _1516) + _1475)) + 9.9999999392252902907785028219223e-09) + (((_1401 * _1516) + _1475) * _1489))) * _1489;
    float _3261 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
    float _1528 = (isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0))) * (_1498 / ((_1502 * _1502) * 3.141590118408203125));
    float _1529 = isnan(1.0) ? _1364 : (isnan(_1364) ? 1.0 : min(_1364, 1.0));
    float _1539 = (((((_1509 * _1423) + _373) * cbLight._m0[_1460].x) * _1528) * _1529) + (((((_1422 * _1423) + _373) * cbLight._m0[_1369].x) * _1445) * _1446);
    float _1540 = (((((_1509 * _1424) + _374) * cbLight._m0[_1460].y) * _1528) * _1529) + (((((_1422 * _1424) + _374) * cbLight._m0[_1369].y) * _1445) * _1446);
    float _1541 = (((((_1509 * _1425) + _375) * cbLight._m0[_1460].z) * _1528) * _1529) + (((((_1422 * _1425) + _375) * cbLight._m0[_1369].z) * _1445) * _1446);
    uvec4 _1545 = floatBitsToUint(cbLight._m0[_1351 + 12u]);
    float _1558;
    float _1560;
    float _1562;
    if (_1545.x == 0u)
    {
        _1558 = _1539;
        _1560 = _1540;
        _1562 = _1541;
    }
    else
    {
        float _1568 = (cbLight._m0[_1352].z * _1358) + 1.0;
        uint _1569 = _1351 + 2u;
        uint _1573 = _1351 + 10u;
        float _1587 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1569].w)) * _376) * 0.949999988079071044921875);
        float _1588 = _1587 * _1587;
        float _1589 = cbLight._m0[_1569].x + _437;
        float _1590 = cbLight._m0[_1569].y + _438;
        float _1591 = cbLight._m0[_1569].z + _439;
        float _1595 = inversesqrt(dot(vec3(_1589, _1590, _1591), vec3(_1589, _1590, _1591)));
        float _1596 = _1595 * _1589;
        float _1597 = _1595 * _1590;
        float _1598 = _1595 * _1591;
        float _1599 = dot(vec3(_369, _370, _371), vec3(cbLight._m0[_1569].xyz));
        float _3277 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1602 = isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0));
        float _1603 = dot(vec3(_369, _370, _371), vec3(_1596, _1597, _1598));
        float _3288 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1606 = isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0));
        float _1607 = dot(vec3(cbLight._m0[_1569].xyz), vec3(_1596, _1597, _1598));
        float _3299 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1611 = _1588 * _1588;
        float _1615 = ((_1606 * _1606) * (_1611 + (-1.0))) + 1.0;
        float _1622 = exp2(log2(1.0 - (isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0)))) * 5.0);
        float _1629 = 1.0 - _1588;
        float _1639 = (0.5 / (((_1401 * ((_1602 * _1629) + _1588)) + 9.9999999392252902907785028219223e-09) + (((_1401 * _1629) + _1588) * _1602))) * _1602;
        float _3310 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1641 = (isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0))) * (_1611 / ((_1615 * _1615) * 3.141590118408203125));
        float _1642 = isnan(1.0) ? _1568 : (isnan(_1568) ? 1.0 : min(_1568, 1.0));
        _1558 = (((((_1622 * _1423) + _373) * cbLight._m0[_1573].x) * _1641) * _1642) + _1539;
        _1560 = (((((_1622 * _1424) + _374) * cbLight._m0[_1573].y) * _1641) * _1642) + _1540;
        _1562 = (((((_1622 * _1425) + _375) * cbLight._m0[_1573].z) * _1641) * _1642) + _1541;
    }
    float _1660;
    float _1662;
    float _1664;
    if (_1545.y == 0u)
    {
        _1660 = _1558;
        _1662 = _1560;
        _1664 = _1562;
    }
    else
    {
        uint _1671 = _1351 + 3u;
        uint _1675 = _1351 + 11u;
        float _1689 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1671].w)) * _376) * 0.949999988079071044921875);
        float _1690 = _1689 * _1689;
        float _1691 = cbLight._m0[_1671].x + _437;
        float _1692 = cbLight._m0[_1671].y + _438;
        float _1693 = cbLight._m0[_1671].z + _439;
        float _1697 = inversesqrt(dot(vec3(_1691, _1692, _1693), vec3(_1691, _1692, _1693)));
        float _1698 = _1697 * _1691;
        float _1699 = _1697 * _1692;
        float _1700 = _1697 * _1693;
        float _1701 = dot(vec3(_369, _370, _371), vec3(cbLight._m0[_1671].xyz));
        float _3326 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1704 = isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0));
        float _1705 = dot(vec3(_369, _370, _371), vec3(_1698, _1699, _1700));
        float _3337 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1708 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
        float _1709 = dot(vec3(cbLight._m0[_1671].xyz), vec3(_1698, _1699, _1700));
        float _3348 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1713 = _1690 * _1690;
        float _1717 = ((_1708 * _1708) * (_1713 + (-1.0))) + 1.0;
        float _1724 = exp2(log2(1.0 - (isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0)))) * 5.0);
        float _1731 = 1.0 - _1690;
        float _1741 = (0.5 / (((_1401 * ((_1704 * _1731) + _1690)) + 9.9999999392252902907785028219223e-09) + (((_1401 * _1731) + _1690) * _1704))) * _1704;
        float _3359 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1743 = (isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0))) * (_1713 / ((_1717 * _1717) * 3.141590118408203125));
        float _1744 = isnan(1.0) ? _1365 : (isnan(_1365) ? 1.0 : min(_1365, 1.0));
        _1660 = (((((_1724 * _1423) + _373) * cbLight._m0[_1675].x) * _1743) * _1744) + _1558;
        _1662 = (((((_1724 * _1424) + _374) * cbLight._m0[_1675].y) * _1743) * _1744) + _1560;
        _1664 = (((((_1724 * _1425) + _375) * cbLight._m0[_1675].z) * _1743) * _1744) + _1562;
    }
    float _1885;
    float _1887;
    float _1889;
    if (_1349.y == 0u)
    {
        float _1825 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1826 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1825;
        float _1827 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1825;
        float _1828 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1825;
        uvec4 _1840 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1841 = _1840.x;
        uint _1852 = uint((float(_1840.y) * floor(float(uint(cbSceneParam._m0[85u].y * _458) / _1841))) + floor(float(uint(cbSceneParam._m0[85u].x * _457) / _1841)));
        float _1862 = (log2(_1828 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1863 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        uint _1866 = uint(isnan(14.0) ? _1863 : (isnan(_1863) ? 14.0 : min(_1863, 14.0)));
        uvec4 _1871 = texelFetch(g_lightClusterGridBuffer, int(((_1866 << 2u) + (_1852 << 6u)) >> 2u));
        uint _1872 = _1871.x;
        uint _1873 = _1840.z;
        float _1970;
        float _1972;
        float _1974;
        if (((((1u << ((_1873 >> 4u) & 15u)) + 4294967295u) & _1872) == 0u) || ((_1873 & 240u) == 0u))
        {
            _1970 = 0.0;
            _1972 = 0.0;
            _1974 = 0.0;
        }
        else
        {
            float _1971;
            float _1973;
            float _1975;
            float _2132 = 0.0;
            float _2133 = 0.0;
            float _2134 = 0.0;
            uint _2135 = 0u;
            uint _2144;
            bool _2145;
            for (;;)
            {
                _2144 = texelFetch(g_lightClassification, int((((_1866 << 5u) + (_1852 << 9u)) + (_2135 << 2u)) >> 2u)).x;
                _2145 = _2144 == 0u;
                float frontier_phi_64_pred;
                float frontier_phi_64_pred_1;
                float frontier_phi_64_pred_2;
                if (_2145)
                {
                    frontier_phi_64_pred = _2134;
                    frontier_phi_64_pred_1 = _2133;
                    frontier_phi_64_pred_2 = _2132;
                }
                else
                {
                    float _2290;
                    float _2291;
                    float _2292;
                    uint _2293;
                    _2290 = _2132;
                    _2291 = _2133;
                    _2292 = _2134;
                    _2293 = _2144;
                    float _2223;
                    float _2224;
                    float _2225;
                    for (;;)
                    {
                        uint _2297 = uint(findLSB(_2293)) + (_2135 << 5u);
                        uint _2294 = (_2293 + 4294967295u) & _2293;
                        uint _2299 = _2297 * 48u;
                        vec4 _2313 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2299)).x, texelFetch(g_PointLightRenderingBuffer, int(_2299 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2299 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2299 + 3u)).x));
                        uint _2330 = (_2297 * 48u) + 8u;
                        vec3 _2341 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2330)).x, texelFetch(g_PointLightRenderingBuffer, int(_2330 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2330 + 2u)).x));
                        float _2345 = _2313.x - _1826;
                        float _2346 = _2313.y - _1827;
                        float _2347 = _2313.z - _1828;
                        float _2348 = dot(vec3(_2345, _2346, _2347), vec3(_2345, _2346, _2347));
                        float _2351 = inversesqrt(_2348);
                        float _2352 = _2351 * _2345;
                        float _2353 = _2351 * _2346;
                        float _2354 = _2351 * _2347;
                        float _2360 = 1.0 - (_2348 * _2313.w);
                        float _3385 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
                        float _2362 = sqrt(_2348) * uintBitsToFloat(uvec4(_2320, _2321, _2322, texelFetch(g_PointLightRenderingBuffer, int(((_2297 * 48u) + 4u) + 3u)).x)).w;
                        float _2366 = _2362 * _2362;
                        float _2367 = (-0.0) - _1826;
                        float _2368 = (-0.0) - _1827;
                        float _2369 = (-0.0) - _1828;
                        float _2373 = inversesqrt(dot(vec3(_2367, _2368, _2369), vec3(_2367, _2368, _2369)));
                        float _2374 = _2373 * _2367;
                        float _2375 = _2373 * _2368;
                        float _2376 = _2373 * _2369;
                        float _2384 = exp2(log2(1.0 / ((_2366 * 3.5) + 5.0)) * 0.25);
                        float _2385 = 1.0 - _585;
                        float _2392 = sqrt(1.0 - ((1.0 - (_2385 * _2385)) * (1.0 - (_2384 * _2384))));
                        float _2393 = _2392 * _2392;
                        float _2394 = _2393 * _2393;
                        float _2395 = _2374 + _2352;
                        float _2396 = _2375 + _2353;
                        float _2397 = _2376 + _2354;
                        float _2401 = inversesqrt(dot(vec3(_2395, _2396, _2397), vec3(_2395, _2396, _2397)));
                        float _2405 = dot(vec3(_478, _481, _484), vec3(_2374, _2375, _2376));
                        float _3396 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
                        float _2408 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
                        float _2409 = dot(vec3(_478, _481, _484), vec3(_2401 * _2395, _2401 * _2396, _2401 * _2397));
                        float _3407 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
                        float _2412 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
                        float _2416 = ((_2412 * _2412) * (_2394 + (-1.0))) + 1.0;
                        float _2417 = (1.39999997615814208984375 / (_2362 + 1.39999997615814208984375)) * _2393;
                        float _2418 = _2417 * _2417;
                        float _2421 = ((1.0 - _2418) * dot(vec3(_478, _481, _484), vec3(_2352, _2353, _2354))) + _2418;
                        float _3418 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
                        float _2422 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
                        float _2423 = 1.0 - _2393;
                        float _2433 = (0.5 / (((_2422 * ((_2408 * _2423) + _2393)) + 9.9999999392252902907785028219223e-09) + (((_2422 * _2423) + _2393) * _2408))) * _2422;
                        float _3429 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
                        float _2444 = (((_2394 * 3.1415927410125732421875) * (isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0)))) / ((_2416 * _2416) * ((_2366 * 2.1991131305694580078125) + 3.141590118408203125))) * (isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0)));
                        _2223 = (_2444 * _2341.x) + _2290;
                        _2224 = (_2444 * _2341.y) + _2291;
                        _2225 = (_2444 * _2341.z) + _2292;
                        if (_2294 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2290 = _2223;
                            _2291 = _2224;
                            _2292 = _2225;
                            _2293 = _2294;
                        }
                    }
                    frontier_phi_64_pred = _2225;
                    frontier_phi_64_pred_1 = _2224;
                    frontier_phi_64_pred_2 = _2223;
                }
                _1975 = frontier_phi_64_pred;
                _1973 = frontier_phi_64_pred_1;
                _1971 = frontier_phi_64_pred_2;
                uint _2136 = _2135 + 1u;
                if (_2136 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2132 = _1971;
                    _2133 = _1973;
                    _2134 = _1975;
                    _2135 = _2136;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1970 = _1971;
            _1972 = _1973;
            _1974 = _1975;
        }
        uvec4 _1978 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1979 = _1978.z;
        uint _1981 = (_1979 >> 8u) & 15u;
        float _2109;
        float _2111;
        float _2113;
        if (((4294967295u << _1981) & _1872) == 0u)
        {
            _2109 = _1970;
            _2111 = _1972;
            _2113 = _1974;
        }
        else
        {
            float _2125 = inversesqrt(dot(vec3(_1826, _1827, _1828), vec3(_1826, _1827, _1828)));
            float _2126 = _2125 * _1826;
            float _2127 = _2125 * _1827;
            float _2128 = _2125 * _1828;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            if (_1981 < ((_1979 >> 12u) & 15u))
            {
                float _2110;
                float _2112;
                float _2114;
                float _2276 = _1970;
                float _2277 = _1972;
                float _2278 = _1974;
                uint _2279 = _1981;
                uint _2288;
                bool _2289;
                for (;;)
                {
                    _2288 = texelFetch(g_lightClassification, int((((_1866 << 5u) + (_1852 << 9u)) + (_2279 << 2u)) >> 2u)).x;
                    _2289 = _2288 == 0u;
                    float frontier_phi_75_pred;
                    float frontier_phi_75_pred_1;
                    float frontier_phi_75_pred_2;
                    if (_2289)
                    {
                        frontier_phi_75_pred = _2278;
                        frontier_phi_75_pred_1 = _2277;
                        frontier_phi_75_pred_2 = _2276;
                    }
                    else
                    {
                        float _2458;
                        float _2459;
                        float _2460;
                        float _2724;
                        float _2725;
                        float _2726;
                        float _2468 = _2276;
                        float _2469 = _2277;
                        float _2470 = _2278;
                        uint _2471 = _2288;
                        uint _2472;
                        uint _2482;
                        vec4 _2497;
                        float _2498;
                        vec3 _2510;
                        vec4 _2526;
                        vec4 _2542;
                        float _2589;
                        bool _2590;
                        for (;;)
                        {
                            _2482 = ((_2279 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2471));
                            _2472 = (_2471 + 4294967295u) & _2471;
                            uint _2484 = _2482 * 40u;
                            _2497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2484 + 3u)).x));
                            _2498 = _2497.w;
                            uint _2500 = (_2482 * 40u) + 8u;
                            _2510 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2500 + 2u)).x));
                            uint _2513 = (_2482 * 40u) + 16u;
                            _2526 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2513)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2513 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2513 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2513 + 3u)).x));
                            uint _2529 = (_2482 * 40u) + 20u;
                            _2542 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2529)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2529 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2529 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2529 + 3u)).x));
                            uint _2545 = (_2482 * 40u) + 24u;
                            vec4 _2558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2545 + 3u)).x));
                            uint _2564 = (_2482 * 40u) + 28u;
                            vec4 _2577 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2564 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2564 + 3u)).x));
                            _2589 = fma(_1828, _2577.z, fma(_1827, _2577.y, _2577.x * _1826)) + _2577.w;
                            _2590 = !((fma(_1828, _2558.z, fma(_1827, _2558.y, _2558.x * _1826)) + _2558.w) <= 0.0);
                            float frontier_phi_81_pred;
                            float frontier_phi_81_pred_1;
                            float frontier_phi_81_pred_2;
                            if (_2590)
                            {
                                float _2624 = _2497.x - _1826;
                                float _2625 = _2497.y - _1827;
                                float _2626 = _2497.z - _1828;
                                float _2627 = dot(vec3(_2624, _2625, _2626), vec3(_2624, _2625, _2626));
                                float _2630 = inversesqrt(_2627);
                                float _2631 = _2630 * _2624;
                                float _2632 = _2630 * _2625;
                                float _2633 = _2630 * _2626;
                                float _2637 = 1.0 - (_2627 / (_2498 * _2498));
                                float _3440 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
                                float _2639 = sqrt(_2627) * uintBitsToFloat(uvec4(_2593, _2594, _2595, texelFetch(g_SpotLightRenderingBuffer, int(((_2482 * 40u) + 4u) + 3u)).x)).w;
                                float _2642 = _2639 * _2639;
                                float _2643 = (fma(_1828, _2526.z, fma(_1827, _2526.y, _2526.x * _1826)) + _2526.w) / _2589;
                                float _2644 = (fma(_1828, _2542.z, fma(_1827, _2542.y, _2542.x * _1826)) + _2542.w) / _2589;
                                float _2648 = 1.0 - dot(vec2(_2643, _2644), vec2(_2643, _2644));
                                float _3451 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
                                float _2658 = exp2(log2(1.0 / ((_2642 * 3.5) + 5.0)) * 0.25);
                                float _2659 = 1.0 - _585;
                                float _2666 = sqrt(1.0 - ((1.0 - (_2659 * _2659)) * (1.0 - (_2658 * _2658))));
                                float _2667 = _2666 * _2666;
                                float _2668 = _2667 * _2667;
                                float _2669 = _2631 - _2126;
                                float _2670 = _2632 - _2127;
                                float _2671 = _2633 - _2128;
                                float _2675 = inversesqrt(dot(vec3(_2669, _2670, _2671), vec3(_2669, _2670, _2671)));
                                float _2679 = dot(vec3(_478, _481, _484), vec3((-0.0) - _2126, (-0.0) - _2127, (-0.0) - _2128));
                                float _3462 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
                                float _2682 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
                                float _2683 = dot(vec3(_478, _481, _484), vec3(_2675 * _2669, _2675 * _2670, _2675 * _2671));
                                float _3473 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
                                float _2686 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
                                float _2690 = ((_2686 * _2686) * (_2668 + (-1.0))) + 1.0;
                                float _2691 = (1.39999997615814208984375 / (_2639 + 1.39999997615814208984375)) * _2667;
                                float _2692 = _2691 * _2691;
                                float _2698 = ((1.0 - _2692) * dot(vec3(_478, _481, _484), vec3(_2631, _2632, _2633))) + _2692;
                                float _3484 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
                                float _2699 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
                                float _2700 = 1.0 - _2667;
                                float _2710 = (0.5 / (((_2699 * ((_2682 * _2700) + _2667)) + 9.9999999392252902907785028219223e-09) + (((_2699 * _2700) + _2667) * _2682))) * _2699;
                                float _3495 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
                                float _2720 = ((isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0))) * (isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0)))) * (((_2668 * 3.1415927410125732421875) * (isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0)))) / ((_2690 * _2690) * ((_2642 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_81_pred = _2720 * _2510.z;
                                frontier_phi_81_pred_1 = _2720 * _2510.y;
                                frontier_phi_81_pred_2 = _2720 * _2510.x;
                            }
                            else
                            {
                                frontier_phi_81_pred = 0.0;
                                frontier_phi_81_pred_1 = 0.0;
                                frontier_phi_81_pred_2 = 0.0;
                            }
                            _2726 = frontier_phi_81_pred;
                            _2725 = frontier_phi_81_pred_1;
                            _2724 = frontier_phi_81_pred_2;
                            _2458 = _2724 + _2468;
                            _2459 = _2725 + _2469;
                            _2460 = _2726 + _2470;
                            if (_2472 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2468 = _2458;
                                _2469 = _2459;
                                _2470 = _2460;
                                _2471 = _2472;
                                continue;
                            }
                        }
                        frontier_phi_75_pred = _2460;
                        frontier_phi_75_pred_1 = _2459;
                        frontier_phi_75_pred_2 = _2458;
                    }
                    _2114 = frontier_phi_75_pred;
                    _2112 = frontier_phi_75_pred_1;
                    _2110 = frontier_phi_75_pred_2;
                    uint _2280 = _2279 + 1u;
                    if (_2280 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2276 = _2110;
                        _2277 = _2112;
                        _2278 = _2114;
                        _2279 = _2280;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2112;
                frontier_phi_55_56_ladder_1 = _2114;
                frontier_phi_55_56_ladder_2 = _2110;
            }
            else
            {
                frontier_phi_55_56_ladder = _1972;
                frontier_phi_55_56_ladder_1 = _1974;
                frontier_phi_55_56_ladder_2 = _1970;
            }
            _2109 = frontier_phi_55_56_ladder_2;
            _2111 = frontier_phi_55_56_ladder;
            _2113 = frontier_phi_55_56_ladder_1;
        }
        float _2118 = isnan(1.0) ? _563 : (isnan(_563) ? 1.0 : min(_563, 1.0));
        _1885 = ((_2109 * _373) * _2118) + _1660;
        _1887 = ((_2111 * _374) * _2118) + _1662;
        _1889 = ((_2113 * _375) * _2118) + _1664;
    }
    else
    {
        _1885 = _1660;
        _1887 = _1662;
        _1889 = _1664;
    }
    float _1893 = 0.959999978542327880859375 - ((isnan(1.0) ? _551 : (isnan(_551) ? 1.0 : min(_551, 1.0))) * 0.959999978542327880859375);
    float _1901 = _1893 - (exp2(log2(1.0 - _579) * 5.0) * _1893);
    float _1905 = ((_1885 + ((isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0))) * _1097)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _291.x) * exp2((-0.0) - ((cbMtdParam._m0[10u].w * _348) * _349))) * _1901);
    float _1906 = ((_1887 + ((isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0))) * _1097)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _291.y) * exp2((-0.0) - ((cbMtdParam._m0[11u].x * _348) * _349))) * _1901);
    float _1907 = ((_1889 + ((isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0))) * _1097)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _291.z) * exp2((-0.0) - ((cbMtdParam._m0[11u].y * _348) * _349))) * _1901);
    uint _1908 = _1345 + 6u;
    float _1916 = _457 / cbSceneParam._m0[86u].x;
    float _1917 = _458 / cbSceneParam._m0[86u].y;
    vec4 _1931 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1916, _1917, (log2((isnan(cbSceneParam._m0[77u].w) ? _381 : (isnan(_381) ? cbSceneParam._m0[77u].w : min(_381, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1933 = _1931.x;
    float _1934 = _1931.y;
    float _1935 = _1931.z;
    float _1936 = _1931.w;
    float _2026;
    float _2028;
    float _2030;
    float _2032;
    if (_381 > cbSceneParam._m0[78u].w)
    {
        float _1989 = isnan(_381) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _381 : min(cbSceneParam._m0[80u].w, _381));
        float _1990 = _1989 / _381;
        float _2001 = _1990 * _430;
        float _2002 = _431 * _1990;
        float _2003 = (-0.0) - _2002;
        float _2004 = _1990 * _432;
        float _2006 = (cbSceneParam._m0[77u].w * _2003) / _1989;
        float _2007 = _2006 + cbSceneParam._m0[79u].w;
        float _2008 = cbSceneParam._m0[79u].w - _2002;
        float _2014 = sqrt(((_2001 * _2001) + (_2002 * _2002)) + (_2004 * _2004));
        float _2017 = (1.0 - (cbSceneParam._m0[77u].w / _1989)) * _2014;
        float _2022 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2024 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2233;
        if (abs((_2003 - _2006) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2233 = ((((_2007 > 0.0) ? exp2(_2022 * _2007) : (2.0 - exp2(_2024 * _2007))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2017;
        }
        else
        {
            float _2158 = 1.0 / cbSceneParam._m0[80u].x;
            float _2159 = isnan(_2008) ? _2007 : (isnan(_2007) ? _2008 : max(_2007, _2008));
            float _2160 = isnan(_2008) ? _2007 : (isnan(_2007) ? _2008 : min(_2007, _2008));
            float _2169 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : min(_2159, 0.0));
            float _2170 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : min(_2160, 0.0));
            _2233 = ((abs(_2014 / _2003) * cbSceneParam._m0[80u].y) * ((((_2169 - _2170) * 2.0) - ((exp2(_2022 * (isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0)))) - exp2(_2022 * (isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0))))) * _2158)) - ((exp2(_2024 * _2169) - exp2(_2024 * _2170)) * _2158))) + (_2017 * cbSceneParam._m0[80u].z);
        }
        vec4 _2235 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1916, _1917, 1.0), 0.0);
        float _2244 = exp2((_2233 * (-1.44269502162933349609375)) * (1.0 - _2235.w));
        float _2245 = log2(_2244);
        float _2261 = log2(_1936);
        _2026 = (exp2(_2261 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2245 * cbSceneParam._m0[78u].x)) * _2235.x) / cbSceneParam._m0[78u].x)) + _1933;
        _2028 = (exp2(_2261 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2245 * cbSceneParam._m0[78u].y)) * _2235.y) / cbSceneParam._m0[78u].y)) + _1934;
        _2030 = (exp2(_2261 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2245 * cbSceneParam._m0[78u].z)) * _2235.z) / cbSceneParam._m0[78u].z)) + _1935;
        _2032 = _2244 * _1936;
    }
    else
    {
        _2026 = _1933;
        _2028 = _1934;
        _2030 = _1935;
        _2032 = _1936;
    }
    bool _2271;
    vec4 _2041;
    vec4 _2063;
    float _2065;
    float _2069;
    float _2070;
    float _2071;
    float _2072;
    bool _2082;
    for (;;)
    {
        _2041 = cbMatDynParam._m0[0u];
        float _2043 = roundEven(_2041.y);
        bool _2044 = _2043 == 3.0;
        float _2045 = log2(_2032);
        float _2052 = exp2(_2045 * cbSceneParam._m0[78u].x) * _1905;
        float _2053 = exp2(_2045 * cbSceneParam._m0[78u].y) * _1906;
        float _2054 = exp2(_2045 * cbSceneParam._m0[78u].z) * _1907;
        float _2061 = _446 + (-0.5);
        _2063 = cbMtdParam._m0[1u];
        _2065 = _2063.y * _2061;
        float _2068 = (_2043 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2069 = _2068 * (_2044 ? _2052 : (_2052 + (cbSceneParam._m0[72u].w * _2026)));
        _2070 = _2068 * (_2044 ? _2053 : (_2053 + (cbSceneParam._m0[72u].w * _2028)));
        _2071 = _2068 * (_2044 ? _2054 : (_2054 + (cbSceneParam._m0[72u].w * _2030)));
        _2072 = _2061 * 0.999000012874603271484375;
        _2082 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2082)
        {
            if ((cbInstanceData._m0[_1345 + 7u].x + _2072) < 0.5)
            {
                _2271 = true;
                break;
            }
        }
        uint _2194 = (_1345 + 9u) + uint(_2041.w);
        if ((cbInstanceData._m0[_2194].w < 1.0) && ((cbInstanceData._m0[_2194].w + _2072) < 0.5))
        {
            _2271 = true;
            break;
        }
        if ((_2065 + 1.0) < _2063.x)
        {
            _2271 = true;
            break;
        }
        _2271 = false;
        break;
    }
    float _2449;
    if (_2271)
    {
        discard_state = true;
        _2449 = 0.0;
    }
    else
    {
        _2449 = cbInstanceData._m0[_1908].w;
    }
    SV_Target.x = _2069;
    SV_Target.y = _2070;
    SV_Target.z = _2071;
    SV_Target.w = _2449;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1908].w;
    discard_exit();
}


