#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_GlassEX_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _840;
uint _2596;
uint _2597;
uint _2598;
uint _2868;
uint _2869;
uint _2870;
float _3138;
float _3139;
float _3140;
float _3141;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _175 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _176 = _175 * NORMAL.x;
    float _177 = _175 * NORMAL.y;
    float _178 = _175 * NORMAL.z;
    float _183;
    float _184;
    float _185;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _183 = (-0.0) - _176;
        _184 = (-0.0) - _177;
        _185 = (-0.0) - _178;
    }
    else
    {
        _183 = _176;
        _184 = _177;
        _185 = _178;
    }
    float _230 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _240 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _230);
    float _241 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _230);
    float _242 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _230);
    vec4 _263 = texture(sampler2D(M_GlassEX_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _269 = (_263.z * 0.5) + cbMtdParam._m0[10u].z;
    float _275 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _276 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _290 = isnan(cbInstanceData._m0[8u].x) ? _275 : (isnan(_275) ? cbInstanceData._m0[8u].x : max(_275, cbInstanceData._m0[8u].x));
    float _291 = isnan(cbInstanceData._m0[8u].y) ? _276 : (isnan(_276) ? cbInstanceData._m0[8u].y : max(_276, cbInstanceData._m0[8u].y));
    vec4 _295 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _290 : (isnan(_290) ? cbInstanceData._m0[8u].z : min(_290, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _291 : (isnan(_291) ? cbInstanceData._m0[8u].w : min(_291, cbInstanceData._m0[8u].w))));
    float _317 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _325 = abs(dot(vec4(_183, _184, _185, 0.0), vec4(_317 * _240, _317 * _241, _317 * _242, 0.0))) * cbMtdParam._m0[10u].x;
    vec4 _327 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_275, _276));
    float _329 = _327.x;
    bool _336 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _351 = (_336 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _329)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _329))) - POSITION_1.w;
    float _352 = isnan(_351) ? _325 : (isnan(_325) ? _351 : min(_325, _351));
    float _353 = log2(cbMtdParam._m0[10u].y);
    float _372 = inversesqrt(dot(vec3(_183, _184, _185), vec3(_183, _184, _185)));
    float _373 = _372 * _183;
    float _374 = _372 * _184;
    float _375 = _372 * _185;
    float _3175 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _377 = isnan(1.0) ? _3175 : (isnan(_3175) ? 1.0 : min(_3175, 1.0));
    float _3186 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _378 = isnan(1.0) ? _3186 : (isnan(_3186) ? 1.0 : min(_3186, 1.0));
    float _3197 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _379 = isnan(1.0) ? _3197 : (isnan(_3197) ? 1.0 : min(_3197, 1.0));
    float _3208 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _380 = isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0));
    float _385 = _336 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _425 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _434 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _425);
    float _435 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _425);
    float _436 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _425);
    float _440 = inversesqrt(dot(vec3(_434, _435, _436), vec3(_434, _435, _436)));
    float _441 = _434 * _440;
    float _442 = _435 * _440;
    float _443 = _436 * _440;
    vec4 _448 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _450 = _448.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _655 = sqrt(((_434 * _434) + (_435 * _435)) + (_436 * _436));
        float _661 = (cbMatDynParam._m0[5u].x * _655) + cbMatDynParam._m0[5u].y;
        float _3219 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
        float _662 = isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0));
        float _666 = (cbMatDynParam._m0[5u].z * _655) + cbMatDynParam._m0[5u].w;
        float _3230 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0))) - _662)) + _662) < ((_450 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _461 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _462 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _482 = fma(_375, cbSceneParam._m0[5u].z, fma(_374, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _373));
    float _485 = fma(_375, cbSceneParam._m0[6u].z, fma(_374, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _373));
    float _488 = fma(_375, cbSceneParam._m0[7u].z, fma(_374, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _373));
    float _489 = _377 * 3.3333332538604736328125;
    float _491 = _378 * 3.3333332538604736328125;
    float _492 = _379 * 3.3333332538604736328125;
    float _500 = ((isnan(1.0) ? _489 : (isnan(_489) ? 1.0 : min(_489, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _502 = ((isnan(1.0) ? _491 : (isnan(_491) ? 1.0 : min(_491, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _503 = ((isnan(1.0) ? _492 : (isnan(_492) ? 1.0 : min(_492, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _509 = (_377 + (-0.0599999986588954925537109375)) + (isnan(_500) ? 0.0 : (isnan(0.0) ? _500 : max(0.0, _500)));
    float _511 = (_378 + (-0.0599999986588954925537109375)) + (isnan(_502) ? 0.0 : (isnan(0.0) ? _502 : max(0.0, _502)));
    float _513 = (_379 + (-0.0599999986588954925537109375)) + (isnan(_503) ? 0.0 : (isnan(0.0) ? _503 : max(0.0, _503)));
    float _525 = (_509 * _509) - ((0.02999999932944774627685546875 - _377) * 0.119999997317790985107421875);
    float _526 = (_511 * _511) - ((0.02999999932944774627685546875 - _378) * 0.119999997317790985107421875);
    float _527 = (_513 * _513) - ((0.02999999932944774627685546875 - _379) * 0.119999997317790985107421875);
    float _537 = (sqrt(isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0))) - _509) * 16.666667938232421875;
    float _539 = (sqrt(isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0))) - _511) * 16.666667938232421875;
    float _540 = (sqrt(isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0))) - _513) * 16.666667938232421875;
    float _541 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _542 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _543 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _554 = (((isnan(1.0) ? _542 : (isnan(_542) ? 1.0 : min(_542, 1.0))) * 0.58700001239776611328125) + ((isnan(1.0) ? _541 : (isnan(_541) ? 1.0 : min(_541, 1.0))) * 0.29890000820159912109375)) + ((isnan(1.0) ? _543 : (isnan(_543) ? 1.0 : min(_543, 1.0))) * 0.114000000059604644775390625);
    float _555 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    vec4 _564 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _461, cbSceneParam._m0[86u].y * _462));
    float _567 = _564.x * TEXCOORD.z;
    float _568 = dot(vec3(_373, _374, _375), vec3(_441, _442, _443));
    float _571 = _568 * 2.0;
    float _576 = (_571 * _373) - _441;
    float _577 = (_571 * _374) - _442;
    float _578 = (_571 * _375) - _443;
    float _582 = abs(dot(vec3(_441, _442, _443), vec3(_373, _374, _375)));
    float _3326 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _583 = isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0));
    float _589 = sqrt(_380);
    float _601 = exp2((_589 * 5.0) * log2(1.0 - (_583 * 0.999000012874603271484375))) / (4.0 - (_589 * 3.0));
    float _607 = (1.0 - _601) * ((_589 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _608 = _601 * _589;
    float _636 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _640 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _644 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _839;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _700 = fma(_644, cbModelParam._m0[26u].z, fma(_640, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _636));
        float _704 = fma(_644, cbModelParam._m0[27u].z, fma(_640, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _636));
        float _708 = fma(_644, cbModelParam._m0[28u].z, fma(_640, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _636));
        float _732 = _636 + _373;
        float _733 = _640 + _374;
        float _734 = _644 + _375;
        float _744 = fma(_734, cbModelParam._m0[26u].z, fma(_733, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _732)) - _700;
        float _745 = fma(_734, cbModelParam._m0[27u].z, fma(_733, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _732)) - _704;
        float _746 = fma(_734, cbModelParam._m0[28u].z, fma(_733, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _732)) - _708;
        float _750 = inversesqrt(dot(vec3(_744, _745, _746), vec3(_744, _745, _746)));
        float _763 = ((_750 * _744) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_700 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _764 = ((_750 * _745) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_704 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _765 = ((_750 * _746) / cbModelParam._m0[34u].z) + ((((((_708 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _768 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_763, _764, _765), 0.0);
        vec4 _775 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_763, _764, _765), 0.0);
        vec4 _782 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_763, _764, _765), 0.0);
        vec4 _789 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_763, _764, _765), 0.0);
        float _802 = exp2((_768.w + (-0.5)) * 20.0) * 2.0;
        float _812 = exp2((_775.w + (-0.5)) * 20.0) * 2.0;
        float _822 = exp2((_782.w + (-0.5)) * 20.0) * 2.0;
        float _832 = exp2((_789.w + (-0.5)) * 20.0) * 2.0;
        float _833 = _832 * (_789.x + (-0.5));
        float _834 = _832 * (_789.y + (-0.5));
        float _835 = _832 * (_789.z + (-0.5));
        _839 = _802 * (_768.z + (-0.5));
        _841 = _802 * (_768.y + (-0.5));
        _842 = _802 * (_768.x + (-0.5));
        _843 = _812 * (_775.z + (-0.5));
        _844 = _812 * (_775.y + (-0.5));
        _845 = _812 * (_775.x + (-0.5));
        _846 = _822 * (_782.z + (-0.5));
        _847 = _822 * (_782.y + (-0.5));
        _848 = _822 * (_782.x + (-0.5));
        _849 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        _850 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        _851 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    }
    else
    {
        _839 = _840;
        _841 = _840;
        _842 = _840;
        _843 = _840;
        _844 = _840;
        _845 = _840;
        _846 = _840;
        _847 = _840;
        _848 = _840;
        _849 = _840;
        _850 = _840;
        _851 = _840;
    }
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _880 = fma(_644, cbModelParam._m0[30u].z, fma(_640, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _636));
        float _884 = fma(_644, cbModelParam._m0[31u].z, fma(_640, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _636));
        float _888 = fma(_644, cbModelParam._m0[32u].z, fma(_640, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _636));
        float _911 = _636 + _373;
        float _912 = _640 + _374;
        float _913 = _644 + _375;
        float _923 = fma(_913, cbModelParam._m0[30u].z, fma(_912, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _911)) - _880;
        float _924 = fma(_913, cbModelParam._m0[31u].z, fma(_912, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _911)) - _884;
        float _925 = fma(_913, cbModelParam._m0[32u].z, fma(_912, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _911)) - _888;
        float _929 = inversesqrt(dot(vec3(_923, _924, _925), vec3(_923, _924, _925)));
        float _942 = ((_929 * _923) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_880 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _943 = ((_929 * _924) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_884 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _944 = ((_929 * _925) / cbModelParam._m0[35u].z) + ((((((_888 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        float _979 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _989 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _999 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_967.x + (-0.5));
        float _1011 = _1009 * (_967.y + (-0.5));
        float _1012 = _1009 * (_967.z + (-0.5));
        _1016 = _979 * (_946.z + (-0.5));
        _1017 = _979 * (_946.y + (-0.5));
        _1018 = _979 * (_946.x + (-0.5));
        _1019 = _989 * (_953.z + (-0.5));
        _1020 = _989 * (_953.y + (-0.5));
        _1021 = _989 * (_953.x + (-0.5));
        _1022 = _999 * (_960.z + (-0.5));
        _1023 = _999 * (_960.y + (-0.5));
        _1024 = _999 * (_960.x + (-0.5));
        _1025 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        _1026 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        _1027 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    }
    else
    {
        _1016 = _840;
        _1017 = _840;
        _1018 = _840;
        _1019 = _840;
        _1020 = _840;
        _1021 = _840;
        _1022 = _840;
        _1023 = _840;
        _1024 = _840;
        _1025 = _840;
        _1026 = _840;
        _1027 = _840;
    }
    float _1042 = _576 * 0.5;
    float _1043 = _577 * 0.5;
    float _1044 = _578 * 0.5;
    float _1045 = dot(vec4(_1042, _1043, _1044, 1.0), vec4(_1018, _1021, _1024, _1027));
    float _1048 = dot(vec4(_1042, _1043, _1044, 1.0), vec4(_1017, _1020, _1023, _1026));
    float _1051 = dot(vec4(_1042, _1043, _1044, 1.0), vec4(_1016, _1019, _1022, _1025));
    float _1086;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1058 = dot(vec4(_1042, _1043, _1044, 1.0), vec4(_839, _843, _846, _849));
        float _1062 = dot(vec4(_1042, _1043, _1044, 1.0), vec4(_841, _844, _847, _850));
        float _1066 = dot(vec4(_1042, _1043, _1044, 1.0), vec4(_842, _845, _848, _851));
        float _1073 = dot(vec4(cbModelParam._m0[39u]), vec4(_1042, _1043, _1044, 1.0));
        _1086 = dot(vec3(isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)), isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)), isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1073) ? 0.0 : (isnan(0.0) ? _1073 : max(0.0, _1073))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1086 = 1.0;
    }
    float _1097;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1088 = dot(vec4(cbModelParam._m0[40u]), vec4(_1042, _1043, _1044, 1.0));
        _1097 = dot(vec3(isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0)), isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0)), isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1088) ? 0.0 : (isnan(0.0) ? _1088 : max(0.0, _1088))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1097 = 1.0;
    }
    float _1101 = (_1097 * cbModelParam._m0[1u].x) + (_1086 * (1.0 - cbModelParam._m0[1u].x));
    float _1108 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _380);
    float _1109 = isnan(_1108) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1108 : min(cbModelParam._m0[25u].z, _1108));
    float _1192;
    float _1194;
    float _1196;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1159 = fma(_644, cbModelParam._m0[13u].z, fma(_640, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _636)) + cbModelParam._m0[13u].w;
        float _1163 = fma(_644, cbModelParam._m0[14u].z, fma(_640, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _636)) + cbModelParam._m0[14u].w;
        float _1167 = fma(_644, cbModelParam._m0[15u].z, fma(_640, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _636)) + cbModelParam._m0[15u].w;
        float _1170 = fma(_578, cbModelParam._m0[13u].z, fma(_577, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _576));
        float _1173 = fma(_578, cbModelParam._m0[14u].z, fma(_577, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _576));
        float _1176 = fma(_578, cbModelParam._m0[15u].z, fma(_577, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _576));
        float _1204;
        if (_1170 > 0.0)
        {
            _1204 = abs((1.0 - _1159) / _1170);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1170 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1159 + 1.0) / _1170);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1204 = frontier_phi_19_17_ladder;
        }
        float _1397;
        if (_1173 > 0.0)
        {
            _1397 = abs((1.0 - _1163) / _1173);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1173 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1163 + 1.0) / _1173);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1397 = frontier_phi_28_24_ladder;
        }
        float _1816;
        if (_1176 > 0.0)
        {
            _1816 = abs((1.0 - _1167) / _1176);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1176 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1167 + 1.0) / _1176);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1816 = frontier_phi_40_35_ladder;
        }
        float _1818 = isnan(_1397) ? _1204 : (isnan(_1204) ? _1397 : min(_1204, _1397));
        float _1819 = isnan(_1816) ? _1818 : (isnan(_1818) ? _1816 : min(_1818, _1816));
        float _1823 = (_1819 * _1170) + _1159;
        float _1824 = (_1819 * _1173) + _1163;
        float _1825 = (_1819 * _1176) + _1167;
        float _1826 = _1819 * 9.9999997473787516355514526367188e-05;
        float _1828 = (-1.0) - _1826;
        float _1830 = _1826 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1825 > _1830) || ((_1825 < _1828) || ((_1824 > _1830) || ((_1824 < _1828) || ((_1823 < _1828) || (_1823 > _1830))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2027 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1825, cbModelParam._m0[9u].z, fma(_1824, cbModelParam._m0[9u].y, _1823 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1825, cbModelParam._m0[10u].z, fma(_1824, cbModelParam._m0[10u].y, _1823 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1825, cbModelParam._m0[11u].z, fma(_1824, cbModelParam._m0[11u].y, _1823 * cbModelParam._m0[11u].x))), _1109);
            frontier_phi_18_40_ladder = _2027.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2027.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2027.x * cbModelParam._m0[1u].y;
        }
        _1192 = frontier_phi_18_40_ladder_2;
        _1194 = frontier_phi_18_40_ladder_1;
        _1196 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1180 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_576, _577, _578), _1109);
        _1192 = _1180.x * cbModelParam._m0[1u].y;
        _1194 = _1180.y * cbModelParam._m0[1u].y;
        _1196 = _1180.z * cbModelParam._m0[1u].y;
    }
    float _1200 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _380);
    float _1201 = isnan(_1200) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1200 : min(cbModelParam._m0[25u].w, _1200));
    float _1294;
    float _1296;
    float _1298;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1258 = fma(_644, cbModelParam._m0[21u].z, fma(_640, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _636)) + cbModelParam._m0[21u].w;
        float _1262 = fma(_644, cbModelParam._m0[22u].z, fma(_640, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _636)) + cbModelParam._m0[22u].w;
        float _1266 = fma(_644, cbModelParam._m0[23u].z, fma(_640, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _636)) + cbModelParam._m0[23u].w;
        float _1269 = fma(_578, cbModelParam._m0[21u].z, fma(_577, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _576));
        float _1272 = fma(_578, cbModelParam._m0[22u].z, fma(_577, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _576));
        float _1275 = fma(_578, cbModelParam._m0[23u].z, fma(_577, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _576));
        float _1402;
        if (_1269 > 0.0)
        {
            _1402 = abs((1.0 - _1258) / _1269);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1269 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1258 + 1.0) / _1269);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1402 = frontier_phi_30_26_ladder;
        }
        float _1843;
        if (_1272 > 0.0)
        {
            _1843 = abs((1.0 - _1262) / _1272);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1272 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1262 + 1.0) / _1272);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1843 = frontier_phi_42_37_ladder;
        }
        float _2130;
        if (_1275 > 0.0)
        {
            _2130 = abs((1.0 - _1266) / _1275);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1275 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1266 + 1.0) / _1275);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2130 = frontier_phi_52_49_ladder;
        }
        float _2132 = isnan(_1843) ? _1402 : (isnan(_1402) ? _1843 : min(_1402, _1843));
        float _2133 = isnan(_2130) ? _2132 : (isnan(_2132) ? _2130 : min(_2132, _2130));
        float _2137 = (_2133 * _1269) + _1258;
        float _2138 = (_2133 * _1272) + _1262;
        float _2139 = (_2133 * _1275) + _1266;
        float _2140 = _2133 * 9.9999997473787516355514526367188e-05;
        float _2141 = (-1.0) - _2140;
        float _2143 = _2140 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2139 > _2143) || ((_2139 < _2141) || ((_2138 > _2143) || ((_2138 < _2141) || ((_2137 < _2141) || (_2137 > _2143))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2288 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2139, cbModelParam._m0[17u].z, fma(_2138, cbModelParam._m0[17u].y, _2137 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2139, cbModelParam._m0[18u].z, fma(_2138, cbModelParam._m0[18u].y, _2137 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2139, cbModelParam._m0[19u].z, fma(_2138, cbModelParam._m0[19u].y, _2137 * cbModelParam._m0[19u].x))), _1201);
            frontier_phi_27_52_ladder = _2288.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2288.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2288.x * cbModelParam._m0[1u].z;
        }
        _1294 = frontier_phi_27_52_ladder_2;
        _1296 = frontier_phi_27_52_ladder_1;
        _1298 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1278 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_576, _577, _578), _1201);
        _1294 = _1278.x * cbModelParam._m0[1u].z;
        _1296 = _1278.y * cbModelParam._m0[1u].z;
        _1298 = _1278.z * cbModelParam._m0[1u].z;
    }
    float _1311 = (((_607 * _377) + _608) * _567) * ((cbModelParam._m0[1u].w * (_1294 - _1192)) + _1192);
    float _1313 = (((_607 * _378) + _608) * _567) * ((cbModelParam._m0[1u].w * (_1296 - _1194)) + _1194);
    float _1315 = (((_607 * _379) + _608) * _567) * ((cbModelParam._m0[1u].w * (_1298 - _1196)) + _1196);
    float _1336 = fma(_1315, cbSceneParam._m0[89u].z, fma(_1313, cbSceneParam._m0[89u].y, _1311 * cbSceneParam._m0[89u].x));
    float _1339 = fma(_1315, cbSceneParam._m0[90u].z, fma(_1313, cbSceneParam._m0[90u].y, _1311 * cbSceneParam._m0[90u].x));
    float _1342 = fma(_1315, cbSceneParam._m0[91u].z, fma(_1313, cbSceneParam._m0[91u].y, _1311 * cbSceneParam._m0[91u].x));
    float _1376 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1380 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1384 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1388 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1389 = _1376 / _1388;
    float _1390 = _1380 / _1388;
    float _1391 = _1384 / _1388;
    float _1538;
    float _1539;
    float _1540;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1418 = ((uint(_1391 > cbSceneParam._m0[59u].y) + uint(_1391 > cbSceneParam._m0[59u].x)) + uint(_1391 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1419 = _1418 + 43u;
        uint _1427 = _1418 + 44u;
        uint _1435 = _1418 + 45u;
        uint _1443 = _1418 + 46u;
        float _1454 = fma(_1388, cbSceneParam._m0[_1419].w, fma(_1384, cbSceneParam._m0[_1419].z, fma(_1380, cbSceneParam._m0[_1419].y, _1376 * cbSceneParam._m0[_1419].x)));
        float _1458 = fma(_1388, cbSceneParam._m0[_1427].w, fma(_1384, cbSceneParam._m0[_1427].z, fma(_1380, cbSceneParam._m0[_1427].y, _1376 * cbSceneParam._m0[_1427].x)));
        float _1466 = fma(_1388, cbSceneParam._m0[_1443].w, fma(_1384, cbSceneParam._m0[_1443].z, fma(_1380, cbSceneParam._m0[_1443].y, _1376 * cbSceneParam._m0[_1443].x)));
        float _1471 = cbSceneParam._m0[33u].z * _1466;
        float _1473 = cbSceneParam._m0[33u].w * _1466;
        float _1476 = fma(_1388, cbSceneParam._m0[_1435].w, fma(_1384, cbSceneParam._m0[_1435].z, fma(_1380, cbSceneParam._m0[_1435].y, _1376 * cbSceneParam._m0[_1435].x))) / _1466;
        float _1524 = (cbSceneParam._m0[33u].x - sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391))) * cbSceneParam._m0[33u].y;
        float _3452 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1531 = (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1471 + _1454) / _1466, (_1473 + _1458) / _1466), _1476), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1473 + _1454) / _1466, (_1458 - _1471) / _1466), _1476), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1454 - _1471) / _1466, (_1458 - _1473) / _1466), _1476), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1454 - _1473) / _1466, (_1471 + _1458) / _1466), _1476), 0.0)).x), vec4(0.25)));
        _1538 = 1.0 - (_1531 * cbSceneParam._m0[34u].x);
        _1539 = 1.0 - (_1531 * cbSceneParam._m0[34u].y);
        _1540 = 1.0 - (_1531 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1538 = 1.0;
        _1539 = 1.0;
        _1540 = 1.0;
    }
    float _1604;
    float _1606;
    float _1608;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1592 = fma(_1388, cbSceneParam._m0[63u].w, fma(_1384, cbSceneParam._m0[63u].z, fma(_1380, cbSceneParam._m0[63u].y, _1376 * cbSceneParam._m0[63u].x)));
        float _1593 = fma(_1388, cbSceneParam._m0[60u].w, fma(_1384, cbSceneParam._m0[60u].z, fma(_1380, cbSceneParam._m0[60u].y, _1376 * cbSceneParam._m0[60u].x))) / _1592;
        float _1594 = fma(_1388, cbSceneParam._m0[61u].w, fma(_1384, cbSceneParam._m0[61u].z, fma(_1380, cbSceneParam._m0[61u].y, _1376 * cbSceneParam._m0[61u].x))) / _1592;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1593 >= cbSceneParam._m0[64u].x) && (_1594 >= cbSceneParam._m0[64u].y)) && (_1593 <= cbSceneParam._m0[64u].z)) && (_1594 <= cbSceneParam._m0[64u].w))
        {
            float _1856 = fma(_1388, cbSceneParam._m0[62u].w, fma(_1384, cbSceneParam._m0[62u].z, fma(_1380, cbSceneParam._m0[62u].y, _1376 * cbSceneParam._m0[62u].x))) / _1592;
            float _1860 = isnan(cbSceneParam._m0[41u].w) ? _1856 : (isnan(_1856) ? cbSceneParam._m0[41u].w : max(_1856, cbSceneParam._m0[41u].w));
            float _1903 = (cbSceneParam._m0[33u].x - sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391))) * cbSceneParam._m0[33u].y;
            float _3468 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
            float _1910 = (isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1593, cbSceneParam._m0[33u].w + _1594), _1860), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1593, _1594 - cbSceneParam._m0[33u].z), _1860), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1593 - cbSceneParam._m0[33u].z, _1594 - cbSceneParam._m0[33u].w), _1860), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1593 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1594), _1860), 0.0)).x), vec4(0.25)));
            float _1914 = 1.0 - (_1910 * cbSceneParam._m0[34u].x);
            float _1915 = 1.0 - (_1910 * cbSceneParam._m0[34u].y);
            float _1916 = 1.0 - (_1910 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_1914) ? _1538 : (isnan(_1538) ? _1914 : min(_1538, _1914));
            frontier_phi_39_38_ladder_1 = isnan(_1915) ? _1539 : (isnan(_1539) ? _1915 : min(_1539, _1915));
            frontier_phi_39_38_ladder_2 = isnan(_1916) ? _1540 : (isnan(_1540) ? _1916 : min(_1540, _1916));
        }
        else
        {
            frontier_phi_39_38_ladder = _1538;
            frontier_phi_39_38_ladder_1 = _1539;
            frontier_phi_39_38_ladder_2 = _1540;
        }
        _1604 = frontier_phi_39_38_ladder;
        _1606 = frontier_phi_39_38_ladder_1;
        _1608 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1604 = _1538;
        _1606 = _1539;
        _1608 = _1540;
    }
    uint _1610 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1614 = floatBitsToUint(cbInstanceData._m0[_1610 + 5u]);
    uint _1616 = _1614.x * 14u;
    uint _1617 = _1616 + 13u;
    float _1623 = _567 + (-1.0);
    float _1628 = (cbLight._m0[_1617].x * _1623) + 1.0;
    float _1629 = (cbLight._m0[_1617].y * _1623) + 1.0;
    float _1630 = (cbLight._m0[_1617].w * _1623) + 1.0;
    uint _1634 = _1616 + 8u;
    float _1650 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1616].w)) * _380) * 0.949999988079071044921875);
    float _1651 = _1650 * _1650;
    float _1652 = cbLight._m0[_1616].x + _441;
    float _1653 = cbLight._m0[_1616].y + _442;
    float _1654 = cbLight._m0[_1616].z + _443;
    float _1658 = inversesqrt(dot(vec3(_1652, _1653, _1654), vec3(_1652, _1653, _1654)));
    float _1659 = _1658 * _1652;
    float _1660 = _1658 * _1653;
    float _1661 = _1658 * _1654;
    float _1662 = dot(vec3(_373, _374, _375), vec3(cbLight._m0[_1616].xyz));
    float _3494 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
    float _1665 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
    float _3505 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _1666 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
    float _1667 = dot(vec3(_373, _374, _375), vec3(_1659, _1660, _1661));
    float _3516 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
    float _1670 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
    float _1671 = dot(vec3(cbLight._m0[_1616].xyz), vec3(_1659, _1660, _1661));
    float _3527 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
    float _1675 = _1651 * _1651;
    float _1679 = ((_1670 * _1670) * (_1675 + (-1.0))) + 1.0;
    float _1687 = exp2(log2(1.0 - (isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0)))) * 5.0);
    float _1688 = 1.0 - _377;
    float _1689 = 1.0 - _378;
    float _1690 = 1.0 - _379;
    float _1697 = 1.0 - _1651;
    float _1708 = (0.5 / (((_1666 * ((_1665 * _1697) + _1651)) + 9.9999999392252902907785028219223e-09) + (((_1666 * _1697) + _1651) * _1665))) * _1665;
    float _3538 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
    float _1710 = (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * (_1675 / ((_1679 * _1679) * 3.141590118408203125));
    float _1711 = isnan(1.0) ? _1628 : (isnan(_1628) ? 1.0 : min(_1628, 1.0));
    uint _1724 = _1616 | 1u;
    uint _1728 = _1616 + 9u;
    float _1742 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1724].w)) * _380) * 0.949999988079071044921875);
    float _1743 = _1742 * _1742;
    float _1744 = cbLight._m0[_1724].x + _441;
    float _1745 = cbLight._m0[_1724].y + _442;
    float _1746 = cbLight._m0[_1724].z + _443;
    float _1750 = inversesqrt(dot(vec3(_1744, _1745, _1746), vec3(_1744, _1745, _1746)));
    float _1751 = _1750 * _1744;
    float _1752 = _1750 * _1745;
    float _1753 = _1750 * _1746;
    float _1754 = dot(vec3(_373, _374, _375), vec3(cbLight._m0[_1724].xyz));
    float _3554 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _1757 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    float _1758 = dot(vec3(_373, _374, _375), vec3(_1751, _1752, _1753));
    float _3565 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
    float _1761 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _1762 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_1751, _1752, _1753));
    float _3576 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1766 = _1743 * _1743;
    float _1770 = ((_1761 * _1761) * (_1766 + (-1.0))) + 1.0;
    float _1777 = exp2(log2(1.0 - (isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0)))) * 5.0);
    float _1784 = 1.0 - _1743;
    float _1794 = (0.5 / (((_1666 * ((_1757 * _1784) + _1743)) + 9.9999999392252902907785028219223e-09) + (((_1666 * _1784) + _1743) * _1757))) * _1757;
    float _3587 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1796 = (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * (_1766 / ((_1770 * _1770) * 3.141590118408203125));
    float _1797 = isnan(1.0) ? _1629 : (isnan(_1629) ? 1.0 : min(_1629, 1.0));
    float _1807 = (((((_1777 * _1688) + _377) * cbLight._m0[_1728].x) * _1796) * _1797) + ((((cbLight._m0[_1634].x * _1604) * ((_1687 * _1688) + _377)) * _1710) * _1711);
    float _1808 = (((((_1777 * _1689) + _378) * cbLight._m0[_1728].y) * _1796) * _1797) + ((((cbLight._m0[_1634].y * _1606) * ((_1687 * _1689) + _378)) * _1710) * _1711);
    float _1809 = (((((_1777 * _1690) + _379) * cbLight._m0[_1728].z) * _1796) * _1797) + ((((cbLight._m0[_1634].z * _1608) * ((_1687 * _1690) + _379)) * _1710) * _1711);
    uvec4 _1813 = floatBitsToUint(cbLight._m0[_1616 + 12u]);
    float _1917;
    float _1919;
    float _1921;
    if (_1813.x == 0u)
    {
        _1917 = _1807;
        _1919 = _1808;
        _1921 = _1809;
    }
    else
    {
        float _1927 = (cbLight._m0[_1617].z * _1623) + 1.0;
        uint _1928 = _1616 + 2u;
        uint _1932 = _1616 + 10u;
        float _1946 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1928].w)) * _380) * 0.949999988079071044921875);
        float _1947 = _1946 * _1946;
        float _1948 = cbLight._m0[_1928].x + _441;
        float _1949 = cbLight._m0[_1928].y + _442;
        float _1950 = cbLight._m0[_1928].z + _443;
        float _1954 = inversesqrt(dot(vec3(_1948, _1949, _1950), vec3(_1948, _1949, _1950)));
        float _1955 = _1954 * _1948;
        float _1956 = _1954 * _1949;
        float _1957 = _1954 * _1950;
        float _1958 = dot(vec3(_373, _374, _375), vec3(cbLight._m0[_1928].xyz));
        float _3603 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
        float _1961 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _1962 = dot(vec3(_373, _374, _375), vec3(_1955, _1956, _1957));
        float _3614 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
        float _1965 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _1966 = dot(vec3(cbLight._m0[_1928].xyz), vec3(_1955, _1956, _1957));
        float _3625 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1970 = _1947 * _1947;
        float _1974 = ((_1965 * _1965) * (_1970 + (-1.0))) + 1.0;
        float _1981 = exp2(log2(1.0 - (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0)))) * 5.0);
        float _1988 = 1.0 - _1947;
        float _1998 = (0.5 / (((_1666 * ((_1961 * _1988) + _1947)) + 9.9999999392252902907785028219223e-09) + (((_1666 * _1988) + _1947) * _1961))) * _1961;
        float _3636 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
        float _2000 = (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * (_1970 / ((_1974 * _1974) * 3.141590118408203125));
        float _2001 = isnan(1.0) ? _1927 : (isnan(_1927) ? 1.0 : min(_1927, 1.0));
        _1917 = (((((_1981 * _1688) + _377) * cbLight._m0[_1932].x) * _2000) * _2001) + _1807;
        _1919 = (((((_1981 * _1689) + _378) * cbLight._m0[_1932].y) * _2000) * _2001) + _1808;
        _1921 = (((((_1981 * _1690) + _379) * cbLight._m0[_1932].z) * _2000) * _2001) + _1809;
    }
    float _2036;
    float _2038;
    float _2040;
    if (_1813.y == 0u)
    {
        _2036 = _1917;
        _2038 = _1919;
        _2040 = _1921;
    }
    else
    {
        uint _2047 = _1616 + 3u;
        uint _2051 = _1616 + 11u;
        float _2065 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2047].w)) * _380) * 0.949999988079071044921875);
        float _2066 = _2065 * _2065;
        float _2067 = cbLight._m0[_2047].x + _441;
        float _2068 = cbLight._m0[_2047].y + _442;
        float _2069 = cbLight._m0[_2047].z + _443;
        float _2073 = inversesqrt(dot(vec3(_2067, _2068, _2069), vec3(_2067, _2068, _2069)));
        float _2074 = _2073 * _2067;
        float _2075 = _2073 * _2068;
        float _2076 = _2073 * _2069;
        float _2077 = dot(vec3(_373, _374, _375), vec3(cbLight._m0[_2047].xyz));
        float _3652 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2080 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _2081 = dot(vec3(_373, _374, _375), vec3(_2074, _2075, _2076));
        float _3663 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2084 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _2085 = dot(vec3(cbLight._m0[_2047].xyz), vec3(_2074, _2075, _2076));
        float _3674 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2089 = _2066 * _2066;
        float _2093 = ((_2084 * _2084) * (_2089 + (-1.0))) + 1.0;
        float _2100 = exp2(log2(1.0 - (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0)))) * 5.0);
        float _2107 = 1.0 - _2066;
        float _2117 = (0.5 / (((_1666 * ((_2080 * _2107) + _2066)) + 9.9999999392252902907785028219223e-09) + (((_1666 * _2107) + _2066) * _2080))) * _2080;
        float _3685 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2119 = (isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * (_2089 / ((_2093 * _2093) * 3.141590118408203125));
        float _2120 = isnan(1.0) ? _1630 : (isnan(_1630) ? 1.0 : min(_1630, 1.0));
        _2036 = (((((_2100 * _1688) + _377) * cbLight._m0[_2051].x) * _2119) * _2120) + _1917;
        _2038 = (((((_2100 * _1689) + _378) * cbLight._m0[_2051].y) * _2119) * _2120) + _1919;
        _2040 = (((((_2100 * _1690) + _379) * cbLight._m0[_2051].z) * _2119) * _2120) + _1921;
    }
    float _2212;
    float _2214;
    float _2216;
    if (_1614.y == 0u)
    {
        uvec4 _2167 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2168 = _2167.x;
        uint _2179 = uint((float(_2167.y) * floor(float(uint(cbSceneParam._m0[85u].y * _462) / _2168))) + floor(float(uint(cbSceneParam._m0[85u].x * _461) / _2168)));
        float _2189 = (log2(_1391 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2190 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        uint _2193 = uint(isnan(14.0) ? _2190 : (isnan(_2190) ? 14.0 : min(_2190, 14.0)));
        uvec4 _2198 = texelFetch(g_lightClusterGridBuffer, int(((_2193 << 2u) + (_2179 << 6u)) >> 2u));
        uint _2199 = _2198.x;
        uint _2200 = _2167.z;
        float _2293;
        float _2295;
        float _2297;
        if (((((1u << ((_2200 >> 4u) & 15u)) + 4294967295u) & _2199) == 0u) || ((_2200 & 240u) == 0u))
        {
            _2293 = 0.0;
            _2295 = 0.0;
            _2297 = 0.0;
        }
        else
        {
            float _2294;
            float _2296;
            float _2298;
            float _2429 = 0.0;
            float _2430 = 0.0;
            float _2431 = 0.0;
            uint _2432 = 0u;
            uint _2441;
            bool _2442;
            for (;;)
            {
                _2441 = texelFetch(g_lightClassification, int((((_2193 << 5u) + (_2179 << 9u)) + (_2432 << 2u)) >> 2u)).x;
                _2442 = _2441 == 0u;
                float frontier_phi_69_pred;
                float frontier_phi_69_pred_1;
                float frontier_phi_69_pred_2;
                if (_2442)
                {
                    frontier_phi_69_pred = _2431;
                    frontier_phi_69_pred_1 = _2430;
                    frontier_phi_69_pred_2 = _2429;
                }
                else
                {
                    float _2566;
                    float _2567;
                    float _2568;
                    uint _2569;
                    _2566 = _2429;
                    _2567 = _2430;
                    _2568 = _2431;
                    _2569 = _2441;
                    float _2499;
                    float _2500;
                    float _2501;
                    for (;;)
                    {
                        uint _2573 = uint(findLSB(_2569)) + (_2432 << 5u);
                        uint _2570 = (_2569 + 4294967295u) & _2569;
                        uint _2575 = _2573 * 48u;
                        vec4 _2589 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2575)).x, texelFetch(g_PointLightRenderingBuffer, int(_2575 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2575 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2575 + 3u)).x));
                        uint _2606 = (_2573 * 48u) + 8u;
                        vec3 _2617 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2606)).x, texelFetch(g_PointLightRenderingBuffer, int(_2606 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2606 + 2u)).x));
                        float _2621 = _2589.x - _1389;
                        float _2622 = _2589.y - _1390;
                        float _2623 = _2589.z - _1391;
                        float _2624 = dot(vec3(_2621, _2622, _2623), vec3(_2621, _2622, _2623));
                        float _2627 = inversesqrt(_2624);
                        float _2628 = _2627 * _2621;
                        float _2629 = _2627 * _2622;
                        float _2630 = _2627 * _2623;
                        float _2636 = 1.0 - (_2624 * _2589.w);
                        float _3711 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
                        float _2638 = sqrt(_2624) * uintBitsToFloat(uvec4(_2596, _2597, _2598, texelFetch(g_PointLightRenderingBuffer, int(((_2573 * 48u) + 4u) + 3u)).x)).w;
                        float _2642 = _2638 * _2638;
                        float _2643 = (-0.0) - _1389;
                        float _2644 = (-0.0) - _1390;
                        float _2645 = (-0.0) - _1391;
                        float _2649 = inversesqrt(dot(vec3(_2643, _2644, _2645), vec3(_2643, _2644, _2645)));
                        float _2650 = _2649 * _2643;
                        float _2651 = _2649 * _2644;
                        float _2652 = _2649 * _2645;
                        float _2659 = exp2(log2(1.0 / ((_2642 * 3.5) + 5.0)) * 0.25);
                        float _2660 = 1.0 - _589;
                        float _2667 = sqrt(1.0 - ((1.0 - (_2660 * _2660)) * (1.0 - (_2659 * _2659))));
                        float _2668 = _2667 * _2667;
                        float _2669 = _2668 * _2668;
                        float _2670 = _2650 + _2628;
                        float _2671 = _2651 + _2629;
                        float _2672 = _2652 + _2630;
                        float _2676 = inversesqrt(dot(vec3(_2670, _2671, _2672), vec3(_2670, _2671, _2672)));
                        float _2680 = dot(vec3(_482, _485, _488), vec3(_2650, _2651, _2652));
                        float _3722 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
                        float _2683 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
                        float _2684 = dot(vec3(_482, _485, _488), vec3(_2676 * _2670, _2676 * _2671, _2676 * _2672));
                        float _3733 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
                        float _2687 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
                        float _2691 = ((_2687 * _2687) * (_2669 + (-1.0))) + 1.0;
                        float _2692 = (1.39999997615814208984375 / (_2638 + 1.39999997615814208984375)) * _2668;
                        float _2693 = _2692 * _2692;
                        float _2696 = ((1.0 - _2693) * dot(vec3(_482, _485, _488), vec3(_2628, _2629, _2630))) + _2693;
                        float _3744 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
                        float _2697 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
                        float _2698 = 1.0 - _2668;
                        float _2708 = (0.5 / (((_2697 * ((_2683 * _2698) + _2668)) + 9.9999999392252902907785028219223e-09) + (((_2697 * _2698) + _2668) * _2683))) * _2697;
                        float _3755 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
                        float _2719 = (((_2669 * 3.1415927410125732421875) * (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0)))) / ((_2691 * _2691) * ((_2642 * 2.1991131305694580078125) + 3.141590118408203125))) * (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0)));
                        _2499 = (_2719 * _2617.x) + _2566;
                        _2500 = (_2719 * _2617.y) + _2567;
                        _2501 = (_2719 * _2617.z) + _2568;
                        if (_2570 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2566 = _2499;
                            _2567 = _2500;
                            _2568 = _2501;
                            _2569 = _2570;
                        }
                    }
                    frontier_phi_69_pred = _2501;
                    frontier_phi_69_pred_1 = _2500;
                    frontier_phi_69_pred_2 = _2499;
                }
                _2298 = frontier_phi_69_pred;
                _2296 = frontier_phi_69_pred_1;
                _2294 = frontier_phi_69_pred_2;
                uint _2433 = _2432 + 1u;
                if (_2433 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2429 = _2294;
                    _2430 = _2296;
                    _2431 = _2298;
                    _2432 = _2433;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2293 = _2294;
            _2295 = _2296;
            _2297 = _2298;
        }
        uvec4 _2301 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2302 = _2301.z;
        uint _2304 = (_2302 >> 8u) & 15u;
        float _2406;
        float _2408;
        float _2410;
        if (((4294967295u << _2304) & _2199) == 0u)
        {
            _2406 = _2293;
            _2408 = _2295;
            _2410 = _2297;
        }
        else
        {
            float _2422 = inversesqrt(dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391)));
            float _2423 = _2422 * _1389;
            float _2424 = _2422 * _1390;
            float _2425 = _2422 * _1391;
            float frontier_phi_61_62_ladder;
            float frontier_phi_61_62_ladder_1;
            float frontier_phi_61_62_ladder_2;
            if (_2304 < ((_2302 >> 12u) & 15u))
            {
                float _2407;
                float _2409;
                float _2411;
                float _2552 = _2293;
                float _2553 = _2295;
                float _2554 = _2297;
                uint _2555 = _2304;
                uint _2564;
                bool _2565;
                for (;;)
                {
                    _2564 = texelFetch(g_lightClassification, int((((_2193 << 5u) + (_2179 << 9u)) + (_2555 << 2u)) >> 2u)).x;
                    _2565 = _2564 == 0u;
                    float frontier_phi_80_pred;
                    float frontier_phi_80_pred_1;
                    float frontier_phi_80_pred_2;
                    if (_2565)
                    {
                        frontier_phi_80_pred = _2554;
                        frontier_phi_80_pred_1 = _2553;
                        frontier_phi_80_pred_2 = _2552;
                    }
                    else
                    {
                        float _2733;
                        float _2734;
                        float _2735;
                        float _2999;
                        float _3000;
                        float _3001;
                        float _2743 = _2552;
                        float _2744 = _2553;
                        float _2745 = _2554;
                        uint _2746 = _2564;
                        uint _2747;
                        uint _2757;
                        vec4 _2772;
                        float _2773;
                        vec3 _2785;
                        vec4 _2801;
                        vec4 _2817;
                        float _2864;
                        bool _2865;
                        for (;;)
                        {
                            _2757 = ((_2555 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2746));
                            _2747 = (_2746 + 4294967295u) & _2746;
                            uint _2759 = _2757 * 40u;
                            _2772 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2759)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2759 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2759 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2759 + 3u)).x));
                            _2773 = _2772.w;
                            uint _2775 = (_2757 * 40u) + 8u;
                            _2785 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2775)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 2u)).x));
                            uint _2788 = (_2757 * 40u) + 16u;
                            _2801 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2788)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2788 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2788 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2788 + 3u)).x));
                            uint _2804 = (_2757 * 40u) + 20u;
                            _2817 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2804)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2804 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2804 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2804 + 3u)).x));
                            uint _2820 = (_2757 * 40u) + 24u;
                            vec4 _2833 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2820)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 3u)).x));
                            uint _2839 = (_2757 * 40u) + 28u;
                            vec4 _2852 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2839)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 3u)).x));
                            _2864 = fma(_1391, _2852.z, fma(_1390, _2852.y, _2852.x * _1389)) + _2852.w;
                            _2865 = !((fma(_1391, _2833.z, fma(_1390, _2833.y, _2833.x * _1389)) + _2833.w) <= 0.0);
                            float frontier_phi_86_pred;
                            float frontier_phi_86_pred_1;
                            float frontier_phi_86_pred_2;
                            if (_2865)
                            {
                                float _2899 = _2772.x - _1389;
                                float _2900 = _2772.y - _1390;
                                float _2901 = _2772.z - _1391;
                                float _2902 = dot(vec3(_2899, _2900, _2901), vec3(_2899, _2900, _2901));
                                float _2905 = inversesqrt(_2902);
                                float _2906 = _2905 * _2899;
                                float _2907 = _2905 * _2900;
                                float _2908 = _2905 * _2901;
                                float _2912 = 1.0 - (_2902 / (_2773 * _2773));
                                float _3766 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
                                float _2914 = sqrt(_2902) * uintBitsToFloat(uvec4(_2868, _2869, _2870, texelFetch(g_SpotLightRenderingBuffer, int(((_2757 * 40u) + 4u) + 3u)).x)).w;
                                float _2917 = _2914 * _2914;
                                float _2918 = (fma(_1391, _2801.z, fma(_1390, _2801.y, _2801.x * _1389)) + _2801.w) / _2864;
                                float _2919 = (fma(_1391, _2817.z, fma(_1390, _2817.y, _2817.x * _1389)) + _2817.w) / _2864;
                                float _2923 = 1.0 - dot(vec2(_2918, _2919), vec2(_2918, _2919));
                                float _3777 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
                                float _2933 = exp2(log2(1.0 / ((_2917 * 3.5) + 5.0)) * 0.25);
                                float _2934 = 1.0 - _589;
                                float _2941 = sqrt(1.0 - ((1.0 - (_2934 * _2934)) * (1.0 - (_2933 * _2933))));
                                float _2942 = _2941 * _2941;
                                float _2943 = _2942 * _2942;
                                float _2944 = _2906 - _2423;
                                float _2945 = _2907 - _2424;
                                float _2946 = _2908 - _2425;
                                float _2950 = inversesqrt(dot(vec3(_2944, _2945, _2946), vec3(_2944, _2945, _2946)));
                                float _2954 = dot(vec3(_482, _485, _488), vec3((-0.0) - _2423, (-0.0) - _2424, (-0.0) - _2425));
                                float _3788 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                                float _2957 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
                                float _2958 = dot(vec3(_482, _485, _488), vec3(_2950 * _2944, _2950 * _2945, _2950 * _2946));
                                float _3799 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
                                float _2961 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
                                float _2965 = ((_2961 * _2961) * (_2943 + (-1.0))) + 1.0;
                                float _2966 = (1.39999997615814208984375 / (_2914 + 1.39999997615814208984375)) * _2942;
                                float _2967 = _2966 * _2966;
                                float _2973 = ((1.0 - _2967) * dot(vec3(_482, _485, _488), vec3(_2906, _2907, _2908))) + _2967;
                                float _3810 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
                                float _2974 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
                                float _2975 = 1.0 - _2942;
                                float _2985 = (0.5 / (((_2974 * ((_2957 * _2975) + _2942)) + 9.9999999392252902907785028219223e-09) + (((_2974 * _2975) + _2942) * _2957))) * _2974;
                                float _3821 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                                float _2995 = ((isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * (isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0)))) * (((_2943 * 3.1415927410125732421875) * (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0)))) / ((_2965 * _2965) * ((_2917 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_86_pred = _2995 * _2785.z;
                                frontier_phi_86_pred_1 = _2995 * _2785.y;
                                frontier_phi_86_pred_2 = _2995 * _2785.x;
                            }
                            else
                            {
                                frontier_phi_86_pred = 0.0;
                                frontier_phi_86_pred_1 = 0.0;
                                frontier_phi_86_pred_2 = 0.0;
                            }
                            _3001 = frontier_phi_86_pred;
                            _3000 = frontier_phi_86_pred_1;
                            _2999 = frontier_phi_86_pred_2;
                            _2733 = _2999 + _2743;
                            _2734 = _3000 + _2744;
                            _2735 = _3001 + _2745;
                            if (_2747 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2743 = _2733;
                                _2744 = _2734;
                                _2745 = _2735;
                                _2746 = _2747;
                                continue;
                            }
                        }
                        frontier_phi_80_pred = _2735;
                        frontier_phi_80_pred_1 = _2734;
                        frontier_phi_80_pred_2 = _2733;
                    }
                    _2411 = frontier_phi_80_pred;
                    _2409 = frontier_phi_80_pred_1;
                    _2407 = frontier_phi_80_pred_2;
                    uint _2556 = _2555 + 1u;
                    if (_2556 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2552 = _2407;
                        _2553 = _2409;
                        _2554 = _2411;
                        _2555 = _2556;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_61_62_ladder = _2409;
                frontier_phi_61_62_ladder_1 = _2411;
                frontier_phi_61_62_ladder_2 = _2407;
            }
            else
            {
                frontier_phi_61_62_ladder = _2295;
                frontier_phi_61_62_ladder_1 = _2297;
                frontier_phi_61_62_ladder_2 = _2293;
            }
            _2406 = frontier_phi_61_62_ladder_2;
            _2408 = frontier_phi_61_62_ladder;
            _2410 = frontier_phi_61_62_ladder_1;
        }
        float _2415 = isnan(1.0) ? _567 : (isnan(_567) ? 1.0 : min(_567, 1.0));
        _2212 = ((_2406 * _377) * _2415) + _2036;
        _2214 = ((_2408 * _378) * _2415) + _2038;
        _2216 = ((_2410 * _379) * _2415) + _2040;
    }
    else
    {
        _2212 = _2036;
        _2214 = _2038;
        _2216 = _2040;
    }
    float _2220 = 0.959999978542327880859375 - ((isnan(1.0) ? _555 : (isnan(_555) ? 1.0 : min(_555, 1.0))) * 0.959999978542327880859375);
    float _2228 = _2220 - (exp2(log2(1.0 - _583) * 5.0) * _2220);
    float _2232 = ((_2212 + ((isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0))) * _1101)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _295.x) * exp2((-0.0) - ((cbMtdParam._m0[10u].w * _352) * _353))) * _2228);
    float _2233 = ((_2214 + ((isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0))) * _1101)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _295.y) * exp2((-0.0) - ((cbMtdParam._m0[11u].x * _352) * _353))) * _2228);
    float _2234 = ((_2216 + ((isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0))) * _1101)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _295.z) * exp2((-0.0) - ((cbMtdParam._m0[11u].y * _352) * _353))) * _2228);
    uint _2235 = _1610 + 6u;
    float _2243 = _461 / cbSceneParam._m0[86u].x;
    float _2244 = _462 / cbSceneParam._m0[86u].y;
    vec4 _2258 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2243, _2244, (log2((isnan(cbSceneParam._m0[77u].w) ? _385 : (isnan(_385) ? cbSceneParam._m0[77u].w : min(_385, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2260 = _2258.x;
    float _2261 = _2258.y;
    float _2262 = _2258.z;
    float _2263 = _2258.w;
    float _2349;
    float _2351;
    float _2353;
    float _2355;
    if (_385 > cbSceneParam._m0[78u].w)
    {
        float _2312 = isnan(_385) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _385 : min(cbSceneParam._m0[80u].w, _385));
        float _2313 = _2312 / _385;
        float _2324 = _2313 * _434;
        float _2325 = _435 * _2313;
        float _2326 = (-0.0) - _2325;
        float _2327 = _2313 * _436;
        float _2329 = (cbSceneParam._m0[77u].w * _2326) / _2312;
        float _2330 = _2329 + cbSceneParam._m0[79u].w;
        float _2331 = cbSceneParam._m0[79u].w - _2325;
        float _2337 = sqrt(((_2324 * _2324) + (_2325 * _2325)) + (_2327 * _2327));
        float _2340 = (1.0 - (cbSceneParam._m0[77u].w / _2312)) * _2337;
        float _2345 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2347 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2509;
        if (abs((_2326 - _2329) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2509 = ((((_2330 > 0.0) ? exp2(_2345 * _2330) : (2.0 - exp2(_2347 * _2330))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2340;
        }
        else
        {
            float _2455 = 1.0 / cbSceneParam._m0[80u].x;
            float _2456 = isnan(_2331) ? _2330 : (isnan(_2330) ? _2331 : max(_2330, _2331));
            float _2457 = isnan(_2331) ? _2330 : (isnan(_2330) ? _2331 : min(_2330, _2331));
            float _2466 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : min(_2456, 0.0));
            float _2467 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : min(_2457, 0.0));
            _2509 = ((abs(_2337 / _2326) * cbSceneParam._m0[80u].y) * ((((_2466 - _2467) * 2.0) - ((exp2(_2345 * (isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0)))) - exp2(_2345 * (isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0))))) * _2455)) - ((exp2(_2347 * _2466) - exp2(_2347 * _2467)) * _2455))) + (_2340 * cbSceneParam._m0[80u].z);
        }
        vec4 _2511 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2243, _2244, 1.0), 0.0);
        float _2520 = exp2((_2509 * (-1.44269502162933349609375)) * (1.0 - _2511.w));
        float _2521 = log2(_2520);
        float _2537 = log2(_2263);
        _2349 = (exp2(_2537 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2521 * cbSceneParam._m0[78u].x)) * _2511.x) / cbSceneParam._m0[78u].x)) + _2260;
        _2351 = (exp2(_2537 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2521 * cbSceneParam._m0[78u].y)) * _2511.y) / cbSceneParam._m0[78u].y)) + _2261;
        _2353 = (exp2(_2537 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2521 * cbSceneParam._m0[78u].z)) * _2511.z) / cbSceneParam._m0[78u].z)) + _2262;
        _2355 = _2520 * _2263;
    }
    else
    {
        _2349 = _2260;
        _2351 = _2261;
        _2353 = _2262;
        _2355 = _2263;
    }
    bool _2547;
    vec4 _2364;
    vec4 _2386;
    float _2388;
    float _2392;
    float _2393;
    float _2394;
    float _2395;
    bool _2405;
    for (;;)
    {
        _2364 = cbMatDynParam._m0[0u];
        float _2366 = roundEven(_2364.y);
        bool _2367 = _2366 == 3.0;
        float _2368 = log2(_2355);
        float _2375 = exp2(_2368 * cbSceneParam._m0[78u].x) * _2232;
        float _2376 = exp2(_2368 * cbSceneParam._m0[78u].y) * _2233;
        float _2377 = exp2(_2368 * cbSceneParam._m0[78u].z) * _2234;
        float _2384 = _450 + (-0.5);
        _2386 = cbMtdParam._m0[1u];
        _2388 = _2386.y * _2384;
        float _2391 = (_2366 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2392 = _2391 * (_2367 ? _2375 : (_2375 + (cbSceneParam._m0[72u].w * _2349)));
        _2393 = _2391 * (_2367 ? _2376 : (_2376 + (cbSceneParam._m0[72u].w * _2351)));
        _2394 = _2391 * (_2367 ? _2377 : (_2377 + (cbSceneParam._m0[72u].w * _2353)));
        _2395 = _2384 * 0.999000012874603271484375;
        _2405 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2405)
        {
            if ((cbInstanceData._m0[_1610 + 7u].x + _2395) < 0.5)
            {
                _2547 = true;
                break;
            }
        }
        uint _2491 = (_1610 + 9u) + uint(_2364.w);
        if ((cbInstanceData._m0[_2491].w < 1.0) && ((cbInstanceData._m0[_2491].w + _2395) < 0.5))
        {
            _2547 = true;
            break;
        }
        if ((_2388 + 1.0) < _2386.x)
        {
            _2547 = true;
            break;
        }
        _2547 = false;
        break;
    }
    float _2724;
    if (_2547)
    {
        discard_state = true;
        _2724 = 0.0;
    }
    else
    {
        _2724 = cbInstanceData._m0[_2235].w;
    }
    SV_Target.x = _2392;
    SV_Target.y = _2393;
    SV_Target.z = _2394;
    SV_Target.w = _2724;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2235].w;
    discard_exit();
}


