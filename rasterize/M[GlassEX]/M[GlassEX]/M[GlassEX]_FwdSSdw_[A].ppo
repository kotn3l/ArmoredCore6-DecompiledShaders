#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_GlassEX_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _838;
uint _2343;
uint _2344;
uint _2345;
uint _2616;
uint _2617;
uint _2618;
float _2877;
float _2878;
float _2879;
float _2880;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _173 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _174 = _173 * NORMAL.x;
    float _175 = _173 * NORMAL.y;
    float _176 = _173 * NORMAL.z;
    float _181;
    float _182;
    float _183;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _181 = (-0.0) - _174;
        _182 = (-0.0) - _175;
        _183 = (-0.0) - _176;
    }
    else
    {
        _181 = _174;
        _182 = _175;
        _183 = _176;
    }
    float _228 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _238 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _228);
    float _239 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _228);
    float _240 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _228);
    vec4 _261 = texture(sampler2D(M_GlassEX_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _267 = (_261.z * 0.5) + cbMtdParam._m0[10u].z;
    float _273 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _274 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _288 = isnan(cbInstanceData._m0[8u].x) ? _273 : (isnan(_273) ? cbInstanceData._m0[8u].x : max(_273, cbInstanceData._m0[8u].x));
    float _289 = isnan(cbInstanceData._m0[8u].y) ? _274 : (isnan(_274) ? cbInstanceData._m0[8u].y : max(_274, cbInstanceData._m0[8u].y));
    vec4 _293 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _288 : (isnan(_288) ? cbInstanceData._m0[8u].z : min(_288, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _289 : (isnan(_289) ? cbInstanceData._m0[8u].w : min(_289, cbInstanceData._m0[8u].w))));
    float _315 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _323 = abs(dot(vec4(_181, _182, _183, 0.0), vec4(_315 * _238, _315 * _239, _315 * _240, 0.0))) * cbMtdParam._m0[10u].x;
    vec4 _325 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_273, _274));
    float _327 = _325.x;
    bool _334 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _349 = (_334 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _327)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _327))) - POSITION_1.w;
    float _350 = isnan(_349) ? _323 : (isnan(_323) ? _349 : min(_323, _349));
    float _351 = log2(cbMtdParam._m0[10u].y);
    float _370 = inversesqrt(dot(vec3(_181, _182, _183), vec3(_181, _182, _183)));
    float _371 = _370 * _181;
    float _372 = _370 * _182;
    float _373 = _370 * _183;
    float _2914 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _375 = isnan(1.0) ? _2914 : (isnan(_2914) ? 1.0 : min(_2914, 1.0));
    float _2925 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _376 = isnan(1.0) ? _2925 : (isnan(_2925) ? 1.0 : min(_2925, 1.0));
    float _2936 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _377 = isnan(1.0) ? _2936 : (isnan(_2936) ? 1.0 : min(_2936, 1.0));
    float _2947 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _378 = isnan(1.0) ? _2947 : (isnan(_2947) ? 1.0 : min(_2947, 1.0));
    float _383 = _334 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _423 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _432 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _423);
    float _433 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _423);
    float _434 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _423);
    float _438 = inversesqrt(dot(vec3(_432, _433, _434), vec3(_432, _433, _434)));
    float _439 = _432 * _438;
    float _440 = _433 * _438;
    float _441 = _434 * _438;
    vec4 _446 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _448 = _446.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _653 = sqrt(((_432 * _432) + (_433 * _433)) + (_434 * _434));
        float _659 = (cbMatDynParam._m0[5u].x * _653) + cbMatDynParam._m0[5u].y;
        float _2958 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        float _660 = isnan(1.0) ? _2958 : (isnan(_2958) ? 1.0 : min(_2958, 1.0));
        float _664 = (cbMatDynParam._m0[5u].z * _653) + cbMatDynParam._m0[5u].w;
        float _2969 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2969 : (isnan(_2969) ? 1.0 : min(_2969, 1.0))) - _660)) + _660) < ((_448 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _459 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _460 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _480 = fma(_373, cbSceneParam._m0[5u].z, fma(_372, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _371));
    float _483 = fma(_373, cbSceneParam._m0[6u].z, fma(_372, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _371));
    float _486 = fma(_373, cbSceneParam._m0[7u].z, fma(_372, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _371));
    float _487 = _375 * 3.3333332538604736328125;
    float _489 = _376 * 3.3333332538604736328125;
    float _490 = _377 * 3.3333332538604736328125;
    float _498 = ((isnan(1.0) ? _487 : (isnan(_487) ? 1.0 : min(_487, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _500 = ((isnan(1.0) ? _489 : (isnan(_489) ? 1.0 : min(_489, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _501 = ((isnan(1.0) ? _490 : (isnan(_490) ? 1.0 : min(_490, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _507 = (_375 + (-0.0599999986588954925537109375)) + (isnan(_498) ? 0.0 : (isnan(0.0) ? _498 : max(0.0, _498)));
    float _509 = (_376 + (-0.0599999986588954925537109375)) + (isnan(_500) ? 0.0 : (isnan(0.0) ? _500 : max(0.0, _500)));
    float _511 = (_377 + (-0.0599999986588954925537109375)) + (isnan(_501) ? 0.0 : (isnan(0.0) ? _501 : max(0.0, _501)));
    float _523 = (_507 * _507) - ((0.02999999932944774627685546875 - _375) * 0.119999997317790985107421875);
    float _524 = (_509 * _509) - ((0.02999999932944774627685546875 - _376) * 0.119999997317790985107421875);
    float _525 = (_511 * _511) - ((0.02999999932944774627685546875 - _377) * 0.119999997317790985107421875);
    float _535 = (sqrt(isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0))) - _507) * 16.666667938232421875;
    float _537 = (sqrt(isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0))) - _509) * 16.666667938232421875;
    float _538 = (sqrt(isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0))) - _511) * 16.666667938232421875;
    float _539 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _540 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _541 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _552 = (((isnan(1.0) ? _540 : (isnan(_540) ? 1.0 : min(_540, 1.0))) * 0.58700001239776611328125) + ((isnan(1.0) ? _539 : (isnan(_539) ? 1.0 : min(_539, 1.0))) * 0.29890000820159912109375)) + ((isnan(1.0) ? _541 : (isnan(_541) ? 1.0 : min(_541, 1.0))) * 0.114000000059604644775390625);
    float _553 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    vec4 _562 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _459, cbSceneParam._m0[86u].y * _460));
    float _565 = _562.x * TEXCOORD.z;
    float _566 = dot(vec3(_371, _372, _373), vec3(_439, _440, _441));
    float _569 = _566 * 2.0;
    float _574 = (_569 * _371) - _439;
    float _575 = (_569 * _372) - _440;
    float _576 = (_569 * _373) - _441;
    float _580 = abs(dot(vec3(_439, _440, _441), vec3(_371, _372, _373)));
    float _3065 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _581 = isnan(1.0) ? _3065 : (isnan(_3065) ? 1.0 : min(_3065, 1.0));
    float _587 = sqrt(_378);
    float _599 = exp2((_587 * 5.0) * log2(1.0 - (_581 * 0.999000012874603271484375))) / (4.0 - (_587 * 3.0));
    float _605 = (1.0 - _599) * ((_587 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _606 = _599 * _587;
    float _634 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _638 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _642 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _837;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _698 = fma(_642, cbModelParam._m0[26u].z, fma(_638, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _634));
        float _702 = fma(_642, cbModelParam._m0[27u].z, fma(_638, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _634));
        float _706 = fma(_642, cbModelParam._m0[28u].z, fma(_638, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _634));
        float _730 = _634 + _371;
        float _731 = _638 + _372;
        float _732 = _642 + _373;
        float _742 = fma(_732, cbModelParam._m0[26u].z, fma(_731, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _730)) - _698;
        float _743 = fma(_732, cbModelParam._m0[27u].z, fma(_731, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _730)) - _702;
        float _744 = fma(_732, cbModelParam._m0[28u].z, fma(_731, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _730)) - _706;
        float _748 = inversesqrt(dot(vec3(_742, _743, _744), vec3(_742, _743, _744)));
        float _761 = ((_748 * _742) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_698 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _762 = ((_748 * _743) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_702 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _763 = ((_748 * _744) / cbModelParam._m0[34u].z) + ((((((_706 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _766 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_761, _762, _763), 0.0);
        vec4 _773 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_761, _762, _763), 0.0);
        vec4 _780 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_761, _762, _763), 0.0);
        vec4 _787 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_761, _762, _763), 0.0);
        float _800 = exp2((_766.w + (-0.5)) * 20.0) * 2.0;
        float _810 = exp2((_773.w + (-0.5)) * 20.0) * 2.0;
        float _820 = exp2((_780.w + (-0.5)) * 20.0) * 2.0;
        float _830 = exp2((_787.w + (-0.5)) * 20.0) * 2.0;
        float _831 = _830 * (_787.x + (-0.5));
        float _832 = _830 * (_787.y + (-0.5));
        float _833 = _830 * (_787.z + (-0.5));
        _837 = _800 * (_766.z + (-0.5));
        _839 = _800 * (_766.y + (-0.5));
        _840 = _800 * (_766.x + (-0.5));
        _841 = _810 * (_773.z + (-0.5));
        _842 = _810 * (_773.y + (-0.5));
        _843 = _810 * (_773.x + (-0.5));
        _844 = _820 * (_780.z + (-0.5));
        _845 = _820 * (_780.y + (-0.5));
        _846 = _820 * (_780.x + (-0.5));
        _847 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        _848 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        _849 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    }
    else
    {
        _837 = _838;
        _839 = _838;
        _840 = _838;
        _841 = _838;
        _842 = _838;
        _843 = _838;
        _844 = _838;
        _845 = _838;
        _846 = _838;
        _847 = _838;
        _848 = _838;
        _849 = _838;
    }
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _878 = fma(_642, cbModelParam._m0[30u].z, fma(_638, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _634));
        float _882 = fma(_642, cbModelParam._m0[31u].z, fma(_638, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _634));
        float _886 = fma(_642, cbModelParam._m0[32u].z, fma(_638, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _634));
        float _909 = _634 + _371;
        float _910 = _638 + _372;
        float _911 = _642 + _373;
        float _921 = fma(_911, cbModelParam._m0[30u].z, fma(_910, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _909)) - _878;
        float _922 = fma(_911, cbModelParam._m0[31u].z, fma(_910, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _909)) - _882;
        float _923 = fma(_911, cbModelParam._m0[32u].z, fma(_910, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _909)) - _886;
        float _927 = inversesqrt(dot(vec3(_921, _922, _923), vec3(_921, _922, _923)));
        float _940 = ((_927 * _921) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_878 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _941 = ((_927 * _922) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_882 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _942 = ((_927 * _923) / cbModelParam._m0[35u].z) + ((((((_886 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _944 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        vec4 _951 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        vec4 _958 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        float _977 = exp2((_944.w + (-0.5)) * 20.0) * 2.0;
        float _987 = exp2((_951.w + (-0.5)) * 20.0) * 2.0;
        float _997 = exp2((_958.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_965.x + (-0.5));
        float _1009 = _1007 * (_965.y + (-0.5));
        float _1010 = _1007 * (_965.z + (-0.5));
        _1014 = _977 * (_944.z + (-0.5));
        _1015 = _977 * (_944.y + (-0.5));
        _1016 = _977 * (_944.x + (-0.5));
        _1017 = _987 * (_951.z + (-0.5));
        _1018 = _987 * (_951.y + (-0.5));
        _1019 = _987 * (_951.x + (-0.5));
        _1020 = _997 * (_958.z + (-0.5));
        _1021 = _997 * (_958.y + (-0.5));
        _1022 = _997 * (_958.x + (-0.5));
        _1023 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        _1024 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        _1025 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    }
    else
    {
        _1014 = _838;
        _1015 = _838;
        _1016 = _838;
        _1017 = _838;
        _1018 = _838;
        _1019 = _838;
        _1020 = _838;
        _1021 = _838;
        _1022 = _838;
        _1023 = _838;
        _1024 = _838;
        _1025 = _838;
    }
    float _1040 = _574 * 0.5;
    float _1041 = _575 * 0.5;
    float _1042 = _576 * 0.5;
    float _1043 = dot(vec4(_1040, _1041, _1042, 1.0), vec4(_1016, _1019, _1022, _1025));
    float _1046 = dot(vec4(_1040, _1041, _1042, 1.0), vec4(_1015, _1018, _1021, _1024));
    float _1049 = dot(vec4(_1040, _1041, _1042, 1.0), vec4(_1014, _1017, _1020, _1023));
    float _1084;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1056 = dot(vec4(_1040, _1041, _1042, 1.0), vec4(_837, _841, _844, _847));
        float _1060 = dot(vec4(_1040, _1041, _1042, 1.0), vec4(_839, _842, _845, _848));
        float _1064 = dot(vec4(_1040, _1041, _1042, 1.0), vec4(_840, _843, _846, _849));
        float _1071 = dot(vec4(cbModelParam._m0[39u]), vec4(_1040, _1041, _1042, 1.0));
        _1084 = dot(vec3(isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)), isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0)), isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1071) ? 0.0 : (isnan(0.0) ? _1071 : max(0.0, _1071))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1084 = 1.0;
    }
    float _1095;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1086 = dot(vec4(cbModelParam._m0[40u]), vec4(_1040, _1041, _1042, 1.0));
        _1095 = dot(vec3(isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)), isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0)), isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1086) ? 0.0 : (isnan(0.0) ? _1086 : max(0.0, _1086))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1095 = 1.0;
    }
    float _1099 = (_1095 * cbModelParam._m0[1u].x) + (_1084 * (1.0 - cbModelParam._m0[1u].x));
    float _1106 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _378);
    float _1107 = isnan(_1106) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1106 : min(cbModelParam._m0[25u].z, _1106));
    float _1190;
    float _1192;
    float _1194;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1157 = fma(_642, cbModelParam._m0[13u].z, fma(_638, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _634)) + cbModelParam._m0[13u].w;
        float _1161 = fma(_642, cbModelParam._m0[14u].z, fma(_638, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _634)) + cbModelParam._m0[14u].w;
        float _1165 = fma(_642, cbModelParam._m0[15u].z, fma(_638, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _634)) + cbModelParam._m0[15u].w;
        float _1168 = fma(_576, cbModelParam._m0[13u].z, fma(_575, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _574));
        float _1171 = fma(_576, cbModelParam._m0[14u].z, fma(_575, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _574));
        float _1174 = fma(_576, cbModelParam._m0[15u].z, fma(_575, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _574));
        float _1202;
        if (_1168 > 0.0)
        {
            _1202 = abs((1.0 - _1157) / _1168);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1168 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1157 + 1.0) / _1168);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1202 = frontier_phi_19_17_ladder;
        }
        float _1571;
        if (_1171 > 0.0)
        {
            _1571 = abs((1.0 - _1161) / _1171);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1171 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1161 + 1.0) / _1171);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1571 = frontier_phi_28_24_ladder;
        }
        float _1777;
        if (_1174 > 0.0)
        {
            _1777 = abs((1.0 - _1165) / _1174);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1174 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1165 + 1.0) / _1174);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1777 = frontier_phi_40_35_ladder;
        }
        float _1779 = isnan(_1571) ? _1202 : (isnan(_1202) ? _1571 : min(_1202, _1571));
        float _1780 = isnan(_1777) ? _1779 : (isnan(_1779) ? _1777 : min(_1779, _1777));
        float _1784 = (_1780 * _1168) + _1157;
        float _1785 = (_1780 * _1171) + _1161;
        float _1786 = (_1780 * _1174) + _1165;
        float _1787 = _1780 * 9.9999997473787516355514526367188e-05;
        float _1789 = (-1.0) - _1787;
        float _1791 = _1787 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1786 > _1791) || ((_1786 < _1789) || ((_1785 > _1791) || ((_1785 < _1789) || ((_1784 < _1789) || (_1784 > _1791))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1984 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1786, cbModelParam._m0[9u].z, fma(_1785, cbModelParam._m0[9u].y, _1784 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1786, cbModelParam._m0[10u].z, fma(_1785, cbModelParam._m0[10u].y, _1784 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1786, cbModelParam._m0[11u].z, fma(_1785, cbModelParam._m0[11u].y, _1784 * cbModelParam._m0[11u].x))), _1107);
            frontier_phi_18_40_ladder = _1984.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1984.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1984.x * cbModelParam._m0[1u].y;
        }
        _1190 = frontier_phi_18_40_ladder_2;
        _1192 = frontier_phi_18_40_ladder_1;
        _1194 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1178 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_574, _575, _576), _1107);
        _1190 = _1178.x * cbModelParam._m0[1u].y;
        _1192 = _1178.y * cbModelParam._m0[1u].y;
        _1194 = _1178.z * cbModelParam._m0[1u].y;
    }
    float _1198 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _378);
    float _1199 = isnan(_1198) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1198 : min(cbModelParam._m0[25u].w, _1198));
    float _1292;
    float _1294;
    float _1296;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1256 = fma(_642, cbModelParam._m0[21u].z, fma(_638, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _634)) + cbModelParam._m0[21u].w;
        float _1260 = fma(_642, cbModelParam._m0[22u].z, fma(_638, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _634)) + cbModelParam._m0[22u].w;
        float _1264 = fma(_642, cbModelParam._m0[23u].z, fma(_638, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _634)) + cbModelParam._m0[23u].w;
        float _1267 = fma(_576, cbModelParam._m0[21u].z, fma(_575, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _574));
        float _1270 = fma(_576, cbModelParam._m0[22u].z, fma(_575, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _574));
        float _1273 = fma(_576, cbModelParam._m0[23u].z, fma(_575, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _574));
        float _1576;
        if (_1267 > 0.0)
        {
            _1576 = abs((1.0 - _1256) / _1267);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1267 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1256 + 1.0) / _1267);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1576 = frontier_phi_30_26_ladder;
        }
        float _1804;
        if (_1270 > 0.0)
        {
            _1804 = abs((1.0 - _1260) / _1270);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1270 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1260 + 1.0) / _1270);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1804 = frontier_phi_42_37_ladder;
        }
        float _2106;
        if (_1273 > 0.0)
        {
            _2106 = abs((1.0 - _1264) / _1273);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_1273 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_1264 + 1.0) / _1273);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _2106 = frontier_phi_53_48_ladder;
        }
        float _2108 = isnan(_1804) ? _1576 : (isnan(_1576) ? _1804 : min(_1576, _1804));
        float _2109 = isnan(_2106) ? _2108 : (isnan(_2108) ? _2106 : min(_2108, _2106));
        float _2113 = (_2109 * _1267) + _1256;
        float _2114 = (_2109 * _1270) + _1260;
        float _2115 = (_2109 * _1273) + _1264;
        float _2116 = _2109 * 9.9999997473787516355514526367188e-05;
        float _2117 = (-1.0) - _2116;
        float _2119 = _2116 + 1.0;
        float frontier_phi_27_53_ladder;
        float frontier_phi_27_53_ladder_1;
        float frontier_phi_27_53_ladder_2;
        if ((_2115 > _2119) || ((_2115 < _2117) || ((_2114 > _2119) || ((_2114 < _2117) || ((_2113 < _2117) || (_2113 > _2119))))))
        {
            frontier_phi_27_53_ladder = 0.0;
            frontier_phi_27_53_ladder_1 = 0.0;
            frontier_phi_27_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2241 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2115, cbModelParam._m0[17u].z, fma(_2114, cbModelParam._m0[17u].y, _2113 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2115, cbModelParam._m0[18u].z, fma(_2114, cbModelParam._m0[18u].y, _2113 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2115, cbModelParam._m0[19u].z, fma(_2114, cbModelParam._m0[19u].y, _2113 * cbModelParam._m0[19u].x))), _1199);
            frontier_phi_27_53_ladder = _2241.y * cbModelParam._m0[1u].z;
            frontier_phi_27_53_ladder_1 = _2241.x * cbModelParam._m0[1u].z;
            frontier_phi_27_53_ladder_2 = _2241.z * cbModelParam._m0[1u].z;
        }
        _1292 = frontier_phi_27_53_ladder_1;
        _1294 = frontier_phi_27_53_ladder;
        _1296 = frontier_phi_27_53_ladder_2;
    }
    else
    {
        vec4 _1276 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_574, _575, _576), _1199);
        _1292 = _1276.x * cbModelParam._m0[1u].z;
        _1294 = _1276.y * cbModelParam._m0[1u].z;
        _1296 = _1276.z * cbModelParam._m0[1u].z;
    }
    float _1309 = (((_605 * _375) + _606) * _565) * ((cbModelParam._m0[1u].w * (_1292 - _1190)) + _1190);
    float _1311 = (((_605 * _376) + _606) * _565) * ((cbModelParam._m0[1u].w * (_1294 - _1192)) + _1192);
    float _1313 = (((_605 * _377) + _606) * _565) * ((cbModelParam._m0[1u].w * (_1296 - _1194)) + _1194);
    float _1334 = fma(_1313, cbSceneParam._m0[89u].z, fma(_1311, cbSceneParam._m0[89u].y, _1309 * cbSceneParam._m0[89u].x));
    float _1337 = fma(_1313, cbSceneParam._m0[90u].z, fma(_1311, cbSceneParam._m0[90u].y, _1309 * cbSceneParam._m0[90u].x));
    float _1340 = fma(_1313, cbSceneParam._m0[91u].z, fma(_1311, cbSceneParam._m0[91u].y, _1309 * cbSceneParam._m0[91u].x));
    vec4 _1348 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_459, _460));
    float _1350 = _1348.w;
    uint _1365 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1369 = floatBitsToUint(cbInstanceData._m0[_1365 + 5u]);
    uint _1371 = _1369.x * 14u;
    uint _1372 = _1371 + 13u;
    float _1378 = _565 + (-1.0);
    float _1383 = (cbLight._m0[_1372].x * _1378) + 1.0;
    float _1384 = (cbLight._m0[_1372].y * _1378) + 1.0;
    float _1385 = (cbLight._m0[_1372].w * _1378) + 1.0;
    uint _1389 = _1371 + 8u;
    float _1405 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1371].w)) * _378) * 0.949999988079071044921875);
    float _1406 = _1405 * _1405;
    float _1407 = cbLight._m0[_1371].x + _439;
    float _1408 = cbLight._m0[_1371].y + _440;
    float _1409 = cbLight._m0[_1371].z + _441;
    float _1413 = inversesqrt(dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409)));
    float _1414 = _1413 * _1407;
    float _1415 = _1413 * _1408;
    float _1416 = _1413 * _1409;
    float _1417 = dot(vec3(_371, _372, _373), vec3(cbLight._m0[_1371].xyz));
    float _3191 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
    float _1420 = isnan(1.0) ? _3191 : (isnan(_3191) ? 1.0 : min(_3191, 1.0));
    float _3202 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _1421 = isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0));
    float _1422 = dot(vec3(_371, _372, _373), vec3(_1414, _1415, _1416));
    float _3213 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
    float _1425 = isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0));
    float _1426 = dot(vec3(cbLight._m0[_1371].xyz), vec3(_1414, _1415, _1416));
    float _3224 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
    float _1430 = _1406 * _1406;
    float _1434 = ((_1425 * _1425) * (_1430 + (-1.0))) + 1.0;
    float _1442 = exp2(log2(1.0 - (isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0)))) * 5.0);
    float _1443 = 1.0 - _375;
    float _1444 = 1.0 - _376;
    float _1445 = 1.0 - _377;
    float _1452 = 1.0 - _1406;
    float _1463 = (0.5 / (((_1421 * ((_1420 * _1452) + _1406)) + 9.9999999392252902907785028219223e-09) + (((_1421 * _1452) + _1406) * _1420))) * _1420;
    float _3235 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
    float _1465 = (isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0))) * (_1430 / ((_1434 * _1434) * 3.141590118408203125));
    float _1466 = isnan(1.0) ? _1383 : (isnan(_1383) ? 1.0 : min(_1383, 1.0));
    uint _1479 = _1371 | 1u;
    uint _1483 = _1371 + 9u;
    float _1497 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1479].w)) * _378) * 0.949999988079071044921875);
    float _1498 = _1497 * _1497;
    float _1499 = cbLight._m0[_1479].x + _439;
    float _1500 = cbLight._m0[_1479].y + _440;
    float _1501 = cbLight._m0[_1479].z + _441;
    float _1505 = inversesqrt(dot(vec3(_1499, _1500, _1501), vec3(_1499, _1500, _1501)));
    float _1506 = _1505 * _1499;
    float _1507 = _1505 * _1500;
    float _1508 = _1505 * _1501;
    float _1509 = dot(vec3(_371, _372, _373), vec3(cbLight._m0[_1479].xyz));
    float _3251 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
    float _1512 = isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0));
    float _1513 = dot(vec3(_371, _372, _373), vec3(_1506, _1507, _1508));
    float _3262 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
    float _1516 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
    float _1517 = dot(vec3(cbLight._m0[_1479].xyz), vec3(_1506, _1507, _1508));
    float _3273 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
    float _1521 = _1498 * _1498;
    float _1525 = ((_1516 * _1516) * (_1521 + (-1.0))) + 1.0;
    float _1532 = exp2(log2(1.0 - (isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0)))) * 5.0);
    float _1539 = 1.0 - _1498;
    float _1549 = (0.5 / (((_1421 * ((_1512 * _1539) + _1498)) + 9.9999999392252902907785028219223e-09) + (((_1421 * _1539) + _1498) * _1512))) * _1512;
    float _3284 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
    float _1551 = (isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0))) * (_1521 / ((_1525 * _1525) * 3.141590118408203125));
    float _1552 = isnan(1.0) ? _1384 : (isnan(_1384) ? 1.0 : min(_1384, 1.0));
    float _1562 = (((((_1532 * _1443) + _375) * cbLight._m0[_1483].x) * _1551) * _1552) + ((((cbLight._m0[_1389].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1350))) * ((_1442 * _1443) + _375)) * _1465) * _1466);
    float _1563 = (((((_1532 * _1444) + _376) * cbLight._m0[_1483].y) * _1551) * _1552) + ((((cbLight._m0[_1389].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1350))) * ((_1442 * _1444) + _376)) * _1465) * _1466);
    float _1564 = (((((_1532 * _1445) + _377) * cbLight._m0[_1483].z) * _1551) * _1552) + ((((cbLight._m0[_1389].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1350))) * ((_1442 * _1445) + _377)) * _1465) * _1466);
    uvec4 _1568 = floatBitsToUint(cbLight._m0[_1371 + 12u]);
    float _1581;
    float _1583;
    float _1585;
    if (_1568.x == 0u)
    {
        _1581 = _1562;
        _1583 = _1563;
        _1585 = _1564;
    }
    else
    {
        float _1591 = (cbLight._m0[_1372].z * _1378) + 1.0;
        uint _1592 = _1371 + 2u;
        uint _1596 = _1371 + 10u;
        float _1610 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1592].w)) * _378) * 0.949999988079071044921875);
        float _1611 = _1610 * _1610;
        float _1612 = cbLight._m0[_1592].x + _439;
        float _1613 = cbLight._m0[_1592].y + _440;
        float _1614 = cbLight._m0[_1592].z + _441;
        float _1618 = inversesqrt(dot(vec3(_1612, _1613, _1614), vec3(_1612, _1613, _1614)));
        float _1619 = _1618 * _1612;
        float _1620 = _1618 * _1613;
        float _1621 = _1618 * _1614;
        float _1622 = dot(vec3(_371, _372, _373), vec3(cbLight._m0[_1592].xyz));
        float _3300 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1625 = isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0));
        float _1626 = dot(vec3(_371, _372, _373), vec3(_1619, _1620, _1621));
        float _3311 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1629 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
        float _1630 = dot(vec3(cbLight._m0[_1592].xyz), vec3(_1619, _1620, _1621));
        float _3322 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1634 = _1611 * _1611;
        float _1638 = ((_1629 * _1629) * (_1634 + (-1.0))) + 1.0;
        float _1645 = exp2(log2(1.0 - (isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0)))) * 5.0);
        float _1652 = 1.0 - _1611;
        float _1662 = (0.5 / (((_1421 * ((_1625 * _1652) + _1611)) + 9.9999999392252902907785028219223e-09) + (((_1421 * _1652) + _1611) * _1625))) * _1625;
        float _3333 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1664 = (isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0))) * (_1634 / ((_1638 * _1638) * 3.141590118408203125));
        float _1665 = isnan(1.0) ? _1591 : (isnan(_1591) ? 1.0 : min(_1591, 1.0));
        _1581 = (((((_1645 * _1443) + _375) * cbLight._m0[_1596].x) * _1664) * _1665) + _1562;
        _1583 = (((((_1645 * _1444) + _376) * cbLight._m0[_1596].y) * _1664) * _1665) + _1563;
        _1585 = (((((_1645 * _1445) + _377) * cbLight._m0[_1596].z) * _1664) * _1665) + _1564;
    }
    float _1683;
    float _1685;
    float _1687;
    if (_1568.y == 0u)
    {
        _1683 = _1581;
        _1685 = _1583;
        _1687 = _1585;
    }
    else
    {
        uint _1694 = _1371 + 3u;
        uint _1698 = _1371 + 11u;
        float _1712 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1694].w)) * _378) * 0.949999988079071044921875);
        float _1713 = _1712 * _1712;
        float _1714 = cbLight._m0[_1694].x + _439;
        float _1715 = cbLight._m0[_1694].y + _440;
        float _1716 = cbLight._m0[_1694].z + _441;
        float _1720 = inversesqrt(dot(vec3(_1714, _1715, _1716), vec3(_1714, _1715, _1716)));
        float _1721 = _1720 * _1714;
        float _1722 = _1720 * _1715;
        float _1723 = _1720 * _1716;
        float _1724 = dot(vec3(_371, _372, _373), vec3(cbLight._m0[_1694].xyz));
        float _3349 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1727 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
        float _1728 = dot(vec3(_371, _372, _373), vec3(_1721, _1722, _1723));
        float _3360 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1731 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
        float _1732 = dot(vec3(cbLight._m0[_1694].xyz), vec3(_1721, _1722, _1723));
        float _3371 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1736 = _1713 * _1713;
        float _1740 = ((_1731 * _1731) * (_1736 + (-1.0))) + 1.0;
        float _1747 = exp2(log2(1.0 - (isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0)))) * 5.0);
        float _1754 = 1.0 - _1713;
        float _1764 = (0.5 / (((_1421 * ((_1727 * _1754) + _1713)) + 9.9999999392252902907785028219223e-09) + (((_1421 * _1754) + _1713) * _1727))) * _1727;
        float _3382 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1766 = (isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0))) * (_1736 / ((_1740 * _1740) * 3.141590118408203125));
        float _1767 = isnan(1.0) ? _1385 : (isnan(_1385) ? 1.0 : min(_1385, 1.0));
        _1683 = (((((_1747 * _1443) + _375) * cbLight._m0[_1698].x) * _1766) * _1767) + _1581;
        _1685 = (((((_1747 * _1444) + _376) * cbLight._m0[_1698].y) * _1766) * _1767) + _1583;
        _1687 = (((((_1747 * _1445) + _377) * cbLight._m0[_1698].z) * _1766) * _1767) + _1585;
    }
    float _1908;
    float _1910;
    float _1912;
    if (_1369.y == 0u)
    {
        float _1848 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1849 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1848;
        float _1850 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1848;
        float _1851 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1848;
        uvec4 _1863 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1864 = _1863.x;
        uint _1875 = uint((float(_1863.y) * floor(float(uint(cbSceneParam._m0[85u].y * _460) / _1864))) + floor(float(uint(cbSceneParam._m0[85u].x * _459) / _1864)));
        float _1885 = (log2(_1851 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1886 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
        uint _1889 = uint(isnan(14.0) ? _1886 : (isnan(_1886) ? 14.0 : min(_1886, 14.0)));
        uvec4 _1894 = texelFetch(g_lightClusterGridBuffer, int(((_1889 << 2u) + (_1875 << 6u)) >> 2u));
        uint _1895 = _1894.x;
        uint _1896 = _1863.z;
        float _1993;
        float _1995;
        float _1997;
        if (((((1u << ((_1896 >> 4u) & 15u)) + 4294967295u) & _1895) == 0u) || ((_1896 & 240u) == 0u))
        {
            _1993 = 0.0;
            _1995 = 0.0;
            _1997 = 0.0;
        }
        else
        {
            float _1994;
            float _1996;
            float _1998;
            float _2155 = 0.0;
            float _2156 = 0.0;
            float _2157 = 0.0;
            uint _2158 = 0u;
            uint _2167;
            bool _2168;
            for (;;)
            {
                _2167 = texelFetch(g_lightClassification, int((((_1889 << 5u) + (_1875 << 9u)) + (_2158 << 2u)) >> 2u)).x;
                _2168 = _2167 == 0u;
                float frontier_phi_64_pred;
                float frontier_phi_64_pred_1;
                float frontier_phi_64_pred_2;
                if (_2168)
                {
                    frontier_phi_64_pred = _2157;
                    frontier_phi_64_pred_1 = _2156;
                    frontier_phi_64_pred_2 = _2155;
                }
                else
                {
                    float _2313;
                    float _2314;
                    float _2315;
                    uint _2316;
                    _2313 = _2155;
                    _2314 = _2156;
                    _2315 = _2157;
                    _2316 = _2167;
                    float _2246;
                    float _2247;
                    float _2248;
                    for (;;)
                    {
                        uint _2320 = uint(findLSB(_2316)) + (_2158 << 5u);
                        uint _2317 = (_2316 + 4294967295u) & _2316;
                        uint _2322 = _2320 * 48u;
                        vec4 _2336 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2322)).x, texelFetch(g_PointLightRenderingBuffer, int(_2322 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2322 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2322 + 3u)).x));
                        uint _2353 = (_2320 * 48u) + 8u;
                        vec3 _2364 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2353)).x, texelFetch(g_PointLightRenderingBuffer, int(_2353 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2353 + 2u)).x));
                        float _2368 = _2336.x - _1849;
                        float _2369 = _2336.y - _1850;
                        float _2370 = _2336.z - _1851;
                        float _2371 = dot(vec3(_2368, _2369, _2370), vec3(_2368, _2369, _2370));
                        float _2374 = inversesqrt(_2371);
                        float _2375 = _2374 * _2368;
                        float _2376 = _2374 * _2369;
                        float _2377 = _2374 * _2370;
                        float _2383 = 1.0 - (_2371 * _2336.w);
                        float _3408 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
                        float _2385 = sqrt(_2371) * uintBitsToFloat(uvec4(_2343, _2344, _2345, texelFetch(g_PointLightRenderingBuffer, int(((_2320 * 48u) + 4u) + 3u)).x)).w;
                        float _2389 = _2385 * _2385;
                        float _2390 = (-0.0) - _1849;
                        float _2391 = (-0.0) - _1850;
                        float _2392 = (-0.0) - _1851;
                        float _2396 = inversesqrt(dot(vec3(_2390, _2391, _2392), vec3(_2390, _2391, _2392)));
                        float _2397 = _2396 * _2390;
                        float _2398 = _2396 * _2391;
                        float _2399 = _2396 * _2392;
                        float _2407 = exp2(log2(1.0 / ((_2389 * 3.5) + 5.0)) * 0.25);
                        float _2408 = 1.0 - _587;
                        float _2415 = sqrt(1.0 - ((1.0 - (_2408 * _2408)) * (1.0 - (_2407 * _2407))));
                        float _2416 = _2415 * _2415;
                        float _2417 = _2416 * _2416;
                        float _2418 = _2397 + _2375;
                        float _2419 = _2398 + _2376;
                        float _2420 = _2399 + _2377;
                        float _2424 = inversesqrt(dot(vec3(_2418, _2419, _2420), vec3(_2418, _2419, _2420)));
                        float _2428 = dot(vec3(_480, _483, _486), vec3(_2397, _2398, _2399));
                        float _3419 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
                        float _2431 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
                        float _2432 = dot(vec3(_480, _483, _486), vec3(_2424 * _2418, _2424 * _2419, _2424 * _2420));
                        float _3430 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
                        float _2435 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
                        float _2439 = ((_2435 * _2435) * (_2417 + (-1.0))) + 1.0;
                        float _2440 = (1.39999997615814208984375 / (_2385 + 1.39999997615814208984375)) * _2416;
                        float _2441 = _2440 * _2440;
                        float _2444 = ((1.0 - _2441) * dot(vec3(_480, _483, _486), vec3(_2375, _2376, _2377))) + _2441;
                        float _3441 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
                        float _2445 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
                        float _2446 = 1.0 - _2416;
                        float _2456 = (0.5 / (((_2445 * ((_2431 * _2446) + _2416)) + 9.9999999392252902907785028219223e-09) + (((_2445 * _2446) + _2416) * _2431))) * _2445;
                        float _3452 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
                        float _2467 = (((_2417 * 3.1415927410125732421875) * (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0)))) / ((_2439 * _2439) * ((_2389 * 2.1991131305694580078125) + 3.141590118408203125))) * (isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0)));
                        _2246 = (_2467 * _2364.x) + _2313;
                        _2247 = (_2467 * _2364.y) + _2314;
                        _2248 = (_2467 * _2364.z) + _2315;
                        if (_2317 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2313 = _2246;
                            _2314 = _2247;
                            _2315 = _2248;
                            _2316 = _2317;
                        }
                    }
                    frontier_phi_64_pred = _2248;
                    frontier_phi_64_pred_1 = _2247;
                    frontier_phi_64_pred_2 = _2246;
                }
                _1998 = frontier_phi_64_pred;
                _1996 = frontier_phi_64_pred_1;
                _1994 = frontier_phi_64_pred_2;
                uint _2159 = _2158 + 1u;
                if (_2159 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2155 = _1994;
                    _2156 = _1996;
                    _2157 = _1998;
                    _2158 = _2159;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1993 = _1994;
            _1995 = _1996;
            _1997 = _1998;
        }
        uvec4 _2001 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2002 = _2001.z;
        uint _2004 = (_2002 >> 8u) & 15u;
        float _2132;
        float _2134;
        float _2136;
        if (((4294967295u << _2004) & _1895) == 0u)
        {
            _2132 = _1993;
            _2134 = _1995;
            _2136 = _1997;
        }
        else
        {
            float _2148 = inversesqrt(dot(vec3(_1849, _1850, _1851), vec3(_1849, _1850, _1851)));
            float _2149 = _2148 * _1849;
            float _2150 = _2148 * _1850;
            float _2151 = _2148 * _1851;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            if (_2004 < ((_2002 >> 12u) & 15u))
            {
                float _2133;
                float _2135;
                float _2137;
                float _2299 = _1993;
                float _2300 = _1995;
                float _2301 = _1997;
                uint _2302 = _2004;
                uint _2311;
                bool _2312;
                for (;;)
                {
                    _2311 = texelFetch(g_lightClassification, int((((_1889 << 5u) + (_1875 << 9u)) + (_2302 << 2u)) >> 2u)).x;
                    _2312 = _2311 == 0u;
                    float frontier_phi_75_pred;
                    float frontier_phi_75_pred_1;
                    float frontier_phi_75_pred_2;
                    if (_2312)
                    {
                        frontier_phi_75_pred = _2301;
                        frontier_phi_75_pred_1 = _2300;
                        frontier_phi_75_pred_2 = _2299;
                    }
                    else
                    {
                        float _2481;
                        float _2482;
                        float _2483;
                        float _2747;
                        float _2748;
                        float _2749;
                        float _2491 = _2299;
                        float _2492 = _2300;
                        float _2493 = _2301;
                        uint _2494 = _2311;
                        uint _2495;
                        uint _2505;
                        vec4 _2520;
                        float _2521;
                        vec3 _2533;
                        vec4 _2549;
                        vec4 _2565;
                        float _2612;
                        bool _2613;
                        for (;;)
                        {
                            _2505 = ((_2302 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2494));
                            _2495 = (_2494 + 4294967295u) & _2494;
                            uint _2507 = _2505 * 40u;
                            _2520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2507 + 3u)).x));
                            _2521 = _2520.w;
                            uint _2523 = (_2505 * 40u) + 8u;
                            _2533 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2523)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2523 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2523 + 2u)).x));
                            uint _2536 = (_2505 * 40u) + 16u;
                            _2549 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2536 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2536 + 3u)).x));
                            uint _2552 = (_2505 * 40u) + 20u;
                            _2565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2552 + 3u)).x));
                            uint _2568 = (_2505 * 40u) + 24u;
                            vec4 _2581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2568 + 3u)).x));
                            uint _2587 = (_2505 * 40u) + 28u;
                            vec4 _2600 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2587)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2587 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2587 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2587 + 3u)).x));
                            _2612 = fma(_1851, _2600.z, fma(_1850, _2600.y, _2600.x * _1849)) + _2600.w;
                            _2613 = !((fma(_1851, _2581.z, fma(_1850, _2581.y, _2581.x * _1849)) + _2581.w) <= 0.0);
                            float frontier_phi_81_pred;
                            float frontier_phi_81_pred_1;
                            float frontier_phi_81_pred_2;
                            if (_2613)
                            {
                                float _2647 = _2520.x - _1849;
                                float _2648 = _2520.y - _1850;
                                float _2649 = _2520.z - _1851;
                                float _2650 = dot(vec3(_2647, _2648, _2649), vec3(_2647, _2648, _2649));
                                float _2653 = inversesqrt(_2650);
                                float _2654 = _2653 * _2647;
                                float _2655 = _2653 * _2648;
                                float _2656 = _2653 * _2649;
                                float _2660 = 1.0 - (_2650 / (_2521 * _2521));
                                float _3463 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
                                float _2662 = sqrt(_2650) * uintBitsToFloat(uvec4(_2616, _2617, _2618, texelFetch(g_SpotLightRenderingBuffer, int(((_2505 * 40u) + 4u) + 3u)).x)).w;
                                float _2665 = _2662 * _2662;
                                float _2666 = (fma(_1851, _2549.z, fma(_1850, _2549.y, _2549.x * _1849)) + _2549.w) / _2612;
                                float _2667 = (fma(_1851, _2565.z, fma(_1850, _2565.y, _2565.x * _1849)) + _2565.w) / _2612;
                                float _2671 = 1.0 - dot(vec2(_2666, _2667), vec2(_2666, _2667));
                                float _3474 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
                                float _2681 = exp2(log2(1.0 / ((_2665 * 3.5) + 5.0)) * 0.25);
                                float _2682 = 1.0 - _587;
                                float _2689 = sqrt(1.0 - ((1.0 - (_2682 * _2682)) * (1.0 - (_2681 * _2681))));
                                float _2690 = _2689 * _2689;
                                float _2691 = _2690 * _2690;
                                float _2692 = _2654 - _2149;
                                float _2693 = _2655 - _2150;
                                float _2694 = _2656 - _2151;
                                float _2698 = inversesqrt(dot(vec3(_2692, _2693, _2694), vec3(_2692, _2693, _2694)));
                                float _2702 = dot(vec3(_480, _483, _486), vec3((-0.0) - _2149, (-0.0) - _2150, (-0.0) - _2151));
                                float _3485 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
                                float _2705 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
                                float _2706 = dot(vec3(_480, _483, _486), vec3(_2698 * _2692, _2698 * _2693, _2698 * _2694));
                                float _3496 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
                                float _2709 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
                                float _2713 = ((_2709 * _2709) * (_2691 + (-1.0))) + 1.0;
                                float _2714 = (1.39999997615814208984375 / (_2662 + 1.39999997615814208984375)) * _2690;
                                float _2715 = _2714 * _2714;
                                float _2721 = ((1.0 - _2715) * dot(vec3(_480, _483, _486), vec3(_2654, _2655, _2656))) + _2715;
                                float _3507 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
                                float _2722 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
                                float _2723 = 1.0 - _2690;
                                float _2733 = (0.5 / (((_2722 * ((_2705 * _2723) + _2690)) + 9.9999999392252902907785028219223e-09) + (((_2722 * _2723) + _2690) * _2705))) * _2722;
                                float _3518 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
                                float _2743 = ((isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) * (isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0)))) * (((_2691 * 3.1415927410125732421875) * (isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0)))) / ((_2713 * _2713) * ((_2665 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_81_pred = _2743 * _2533.z;
                                frontier_phi_81_pred_1 = _2743 * _2533.y;
                                frontier_phi_81_pred_2 = _2743 * _2533.x;
                            }
                            else
                            {
                                frontier_phi_81_pred = 0.0;
                                frontier_phi_81_pred_1 = 0.0;
                                frontier_phi_81_pred_2 = 0.0;
                            }
                            _2749 = frontier_phi_81_pred;
                            _2748 = frontier_phi_81_pred_1;
                            _2747 = frontier_phi_81_pred_2;
                            _2481 = _2747 + _2491;
                            _2482 = _2748 + _2492;
                            _2483 = _2749 + _2493;
                            if (_2495 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2491 = _2481;
                                _2492 = _2482;
                                _2493 = _2483;
                                _2494 = _2495;
                                continue;
                            }
                        }
                        frontier_phi_75_pred = _2483;
                        frontier_phi_75_pred_1 = _2482;
                        frontier_phi_75_pred_2 = _2481;
                    }
                    _2137 = frontier_phi_75_pred;
                    _2135 = frontier_phi_75_pred_1;
                    _2133 = frontier_phi_75_pred_2;
                    uint _2303 = _2302 + 1u;
                    if (_2303 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2299 = _2133;
                        _2300 = _2135;
                        _2301 = _2137;
                        _2302 = _2303;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2135;
                frontier_phi_55_56_ladder_1 = _2137;
                frontier_phi_55_56_ladder_2 = _2133;
            }
            else
            {
                frontier_phi_55_56_ladder = _1995;
                frontier_phi_55_56_ladder_1 = _1997;
                frontier_phi_55_56_ladder_2 = _1993;
            }
            _2132 = frontier_phi_55_56_ladder_2;
            _2134 = frontier_phi_55_56_ladder;
            _2136 = frontier_phi_55_56_ladder_1;
        }
        float _2141 = isnan(1.0) ? _565 : (isnan(_565) ? 1.0 : min(_565, 1.0));
        _1908 = ((_2132 * _375) * _2141) + _1683;
        _1910 = ((_2134 * _376) * _2141) + _1685;
        _1912 = ((_2136 * _377) * _2141) + _1687;
    }
    else
    {
        _1908 = _1683;
        _1910 = _1685;
        _1912 = _1687;
    }
    float _1916 = 0.959999978542327880859375 - ((isnan(1.0) ? _553 : (isnan(_553) ? 1.0 : min(_553, 1.0))) * 0.959999978542327880859375);
    float _1924 = _1916 - (exp2(log2(1.0 - _581) * 5.0) * _1916);
    float _1928 = ((_1908 + ((isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0))) * _1099)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _293.x) * exp2((-0.0) - ((cbMtdParam._m0[10u].w * _350) * _351))) * _1924);
    float _1929 = ((_1910 + ((isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0))) * _1099)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _293.y) * exp2((-0.0) - ((cbMtdParam._m0[11u].x * _350) * _351))) * _1924);
    float _1930 = ((_1912 + ((isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0))) * _1099)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _293.z) * exp2((-0.0) - ((cbMtdParam._m0[11u].y * _350) * _351))) * _1924);
    uint _1931 = _1365 + 6u;
    float _1939 = _459 / cbSceneParam._m0[86u].x;
    float _1940 = _460 / cbSceneParam._m0[86u].y;
    vec4 _1954 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1939, _1940, (log2((isnan(cbSceneParam._m0[77u].w) ? _383 : (isnan(_383) ? cbSceneParam._m0[77u].w : min(_383, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1956 = _1954.x;
    float _1957 = _1954.y;
    float _1958 = _1954.z;
    float _1959 = _1954.w;
    float _2049;
    float _2051;
    float _2053;
    float _2055;
    if (_383 > cbSceneParam._m0[78u].w)
    {
        float _2012 = isnan(_383) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _383 : min(cbSceneParam._m0[80u].w, _383));
        float _2013 = _2012 / _383;
        float _2024 = _2013 * _432;
        float _2025 = _433 * _2013;
        float _2026 = (-0.0) - _2025;
        float _2027 = _2013 * _434;
        float _2029 = (cbSceneParam._m0[77u].w * _2026) / _2012;
        float _2030 = _2029 + cbSceneParam._m0[79u].w;
        float _2031 = cbSceneParam._m0[79u].w - _2025;
        float _2037 = sqrt(((_2024 * _2024) + (_2025 * _2025)) + (_2027 * _2027));
        float _2040 = (1.0 - (cbSceneParam._m0[77u].w / _2012)) * _2037;
        float _2045 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2047 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2256;
        if (abs((_2026 - _2029) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2256 = ((((_2030 > 0.0) ? exp2(_2045 * _2030) : (2.0 - exp2(_2047 * _2030))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2040;
        }
        else
        {
            float _2181 = 1.0 / cbSceneParam._m0[80u].x;
            float _2182 = isnan(_2031) ? _2030 : (isnan(_2030) ? _2031 : max(_2030, _2031));
            float _2183 = isnan(_2031) ? _2030 : (isnan(_2030) ? _2031 : min(_2030, _2031));
            float _2192 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : min(_2182, 0.0));
            float _2193 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : min(_2183, 0.0));
            _2256 = ((abs(_2037 / _2026) * cbSceneParam._m0[80u].y) * ((((_2192 - _2193) * 2.0) - ((exp2(_2045 * (isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0)))) - exp2(_2045 * (isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0))))) * _2181)) - ((exp2(_2047 * _2192) - exp2(_2047 * _2193)) * _2181))) + (_2040 * cbSceneParam._m0[80u].z);
        }
        vec4 _2258 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1939, _1940, 1.0), 0.0);
        float _2267 = exp2((_2256 * (-1.44269502162933349609375)) * (1.0 - _2258.w));
        float _2268 = log2(_2267);
        float _2284 = log2(_1959);
        _2049 = (exp2(_2284 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2268 * cbSceneParam._m0[78u].x)) * _2258.x) / cbSceneParam._m0[78u].x)) + _1956;
        _2051 = (exp2(_2284 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2268 * cbSceneParam._m0[78u].y)) * _2258.y) / cbSceneParam._m0[78u].y)) + _1957;
        _2053 = (exp2(_2284 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2268 * cbSceneParam._m0[78u].z)) * _2258.z) / cbSceneParam._m0[78u].z)) + _1958;
        _2055 = _2267 * _1959;
    }
    else
    {
        _2049 = _1956;
        _2051 = _1957;
        _2053 = _1958;
        _2055 = _1959;
    }
    bool _2294;
    vec4 _2064;
    vec4 _2086;
    float _2088;
    float _2092;
    float _2093;
    float _2094;
    float _2095;
    bool _2105;
    for (;;)
    {
        _2064 = cbMatDynParam._m0[0u];
        float _2066 = roundEven(_2064.y);
        bool _2067 = _2066 == 3.0;
        float _2068 = log2(_2055);
        float _2075 = exp2(_2068 * cbSceneParam._m0[78u].x) * _1928;
        float _2076 = exp2(_2068 * cbSceneParam._m0[78u].y) * _1929;
        float _2077 = exp2(_2068 * cbSceneParam._m0[78u].z) * _1930;
        float _2084 = _448 + (-0.5);
        _2086 = cbMtdParam._m0[1u];
        _2088 = _2086.y * _2084;
        float _2091 = (_2066 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2092 = _2091 * (_2067 ? _2075 : (_2075 + (cbSceneParam._m0[72u].w * _2049)));
        _2093 = _2091 * (_2067 ? _2076 : (_2076 + (cbSceneParam._m0[72u].w * _2051)));
        _2094 = _2091 * (_2067 ? _2077 : (_2077 + (cbSceneParam._m0[72u].w * _2053)));
        _2095 = _2084 * 0.999000012874603271484375;
        _2105 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2105)
        {
            if ((cbInstanceData._m0[_1365 + 7u].x + _2095) < 0.5)
            {
                _2294 = true;
                break;
            }
        }
        uint _2217 = (_1365 + 9u) + uint(_2064.w);
        if ((cbInstanceData._m0[_2217].w < 1.0) && ((cbInstanceData._m0[_2217].w + _2095) < 0.5))
        {
            _2294 = true;
            break;
        }
        if ((_2088 + 1.0) < _2086.x)
        {
            _2294 = true;
            break;
        }
        _2294 = false;
        break;
    }
    float _2472;
    if (_2294)
    {
        discard_state = true;
        _2472 = 0.0;
    }
    else
    {
        _2472 = cbInstanceData._m0[_1931].w;
    }
    SV_Target.x = _2092;
    SV_Target.y = _2093;
    SV_Target.z = _2094;
    SV_Target.w = _2472;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1931].w;
    discard_exit();
}


