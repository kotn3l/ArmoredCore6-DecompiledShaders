#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_GlassEX_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _791;
uint _2242;
uint _2243;
uint _2244;
uint _2506;
uint _2507;
uint _2508;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _167 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _168 = _167 * NORMAL.x;
    float _169 = _167 * NORMAL.y;
    float _170 = _167 * NORMAL.z;
    float _175;
    float _176;
    float _177;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _175 = (-0.0) - _168;
        _176 = (-0.0) - _169;
        _177 = (-0.0) - _170;
    }
    else
    {
        _175 = _168;
        _176 = _169;
        _177 = _170;
    }
    float _222 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _232 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _222);
    float _233 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _222);
    float _234 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _222);
    vec4 _255 = texture(sampler2D(M_GlassEX_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _261 = (_255.z * 0.5) + cbMtdParam._m0[10u].z;
    float _267 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _268 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _282 = isnan(cbInstanceData._m0[8u].x) ? _267 : (isnan(_267) ? cbInstanceData._m0[8u].x : max(_267, cbInstanceData._m0[8u].x));
    float _283 = isnan(cbInstanceData._m0[8u].y) ? _268 : (isnan(_268) ? cbInstanceData._m0[8u].y : max(_268, cbInstanceData._m0[8u].y));
    vec4 _287 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _282 : (isnan(_282) ? cbInstanceData._m0[8u].z : min(_282, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _283 : (isnan(_283) ? cbInstanceData._m0[8u].w : min(_283, cbInstanceData._m0[8u].w))));
    float _309 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _317 = abs(dot(vec4(_175, _176, _177, 0.0), vec4(_309 * _232, _309 * _233, _309 * _234, 0.0))) * cbMtdParam._m0[10u].x;
    vec4 _319 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_267, _268));
    float _321 = _319.x;
    bool _328 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _343 = (_328 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _321)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _321))) - POSITION_1.w;
    float _344 = isnan(_343) ? _317 : (isnan(_317) ? _343 : min(_317, _343));
    float _345 = log2(cbMtdParam._m0[10u].y);
    float _364 = inversesqrt(dot(vec3(_175, _176, _177), vec3(_175, _176, _177)));
    float _365 = _364 * _175;
    float _366 = _364 * _176;
    float _367 = _364 * _177;
    float _2779 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _369 = isnan(1.0) ? _2779 : (isnan(_2779) ? 1.0 : min(_2779, 1.0));
    float _2790 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _370 = isnan(1.0) ? _2790 : (isnan(_2790) ? 1.0 : min(_2790, 1.0));
    float _2801 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _371 = isnan(1.0) ? _2801 : (isnan(_2801) ? 1.0 : min(_2801, 1.0));
    float _2812 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _372 = isnan(1.0) ? _2812 : (isnan(_2812) ? 1.0 : min(_2812, 1.0));
    float _377 = _328 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _417 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _426 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _417);
    float _427 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _417);
    float _428 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _417);
    float _432 = inversesqrt(dot(vec3(_426, _427, _428), vec3(_426, _427, _428)));
    float _433 = _426 * _432;
    float _434 = _427 * _432;
    float _435 = _428 * _432;
    float _440 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _441 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _462 = fma(_367, cbSceneParam._m0[5u].z, fma(_366, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _365));
    float _465 = fma(_367, cbSceneParam._m0[6u].z, fma(_366, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _365));
    float _468 = fma(_367, cbSceneParam._m0[7u].z, fma(_366, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _365));
    float _469 = _369 * 3.3333332538604736328125;
    float _471 = _370 * 3.3333332538604736328125;
    float _472 = _371 * 3.3333332538604736328125;
    float _480 = ((isnan(1.0) ? _469 : (isnan(_469) ? 1.0 : min(_469, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _482 = ((isnan(1.0) ? _471 : (isnan(_471) ? 1.0 : min(_471, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _483 = ((isnan(1.0) ? _472 : (isnan(_472) ? 1.0 : min(_472, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _489 = (_369 + (-0.0599999986588954925537109375)) + (isnan(_480) ? 0.0 : (isnan(0.0) ? _480 : max(0.0, _480)));
    float _491 = (_370 + (-0.0599999986588954925537109375)) + (isnan(_482) ? 0.0 : (isnan(0.0) ? _482 : max(0.0, _482)));
    float _493 = (_371 + (-0.0599999986588954925537109375)) + (isnan(_483) ? 0.0 : (isnan(0.0) ? _483 : max(0.0, _483)));
    float _505 = (_489 * _489) - ((0.02999999932944774627685546875 - _369) * 0.119999997317790985107421875);
    float _506 = (_491 * _491) - ((0.02999999932944774627685546875 - _370) * 0.119999997317790985107421875);
    float _507 = (_493 * _493) - ((0.02999999932944774627685546875 - _371) * 0.119999997317790985107421875);
    float _517 = (sqrt(isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0))) - _489) * 16.666667938232421875;
    float _519 = (sqrt(isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0))) - _491) * 16.666667938232421875;
    float _520 = (sqrt(isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0))) - _493) * 16.666667938232421875;
    float _521 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _522 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _523 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _534 = (((isnan(1.0) ? _522 : (isnan(_522) ? 1.0 : min(_522, 1.0))) * 0.58700001239776611328125) + ((isnan(1.0) ? _521 : (isnan(_521) ? 1.0 : min(_521, 1.0))) * 0.29890000820159912109375)) + ((isnan(1.0) ? _523 : (isnan(_523) ? 1.0 : min(_523, 1.0))) * 0.114000000059604644775390625);
    float _535 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    vec4 _544 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _440, cbSceneParam._m0[86u].y * _441));
    float _547 = _544.x * TEXCOORD.z;
    float _548 = dot(vec3(_365, _366, _367), vec3(_433, _434, _435));
    float _551 = _548 * 2.0;
    float _556 = (_551 * _365) - _433;
    float _557 = (_551 * _366) - _434;
    float _558 = (_551 * _367) - _435;
    float _562 = abs(dot(vec3(_433, _434, _435), vec3(_365, _366, _367)));
    float _2908 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _563 = isnan(1.0) ? _2908 : (isnan(_2908) ? 1.0 : min(_2908, 1.0));
    float _569 = sqrt(_372);
    float _581 = exp2((_569 * 5.0) * log2(1.0 - (_563 * 0.999000012874603271484375))) / (4.0 - (_569 * 3.0));
    float _587 = (1.0 - _581) * ((_569 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _588 = _581 * _569;
    float _616 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _620 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _624 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _790;
    float _792;
    float _793;
    float _794;
    float _795;
    float _796;
    float _797;
    float _798;
    float _799;
    float _800;
    float _801;
    float _802;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _651 = fma(_624, cbModelParam._m0[26u].z, fma(_620, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _616));
        float _655 = fma(_624, cbModelParam._m0[27u].z, fma(_620, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _616));
        float _659 = fma(_624, cbModelParam._m0[28u].z, fma(_620, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _616));
        float _683 = _616 + _365;
        float _684 = _620 + _366;
        float _685 = _624 + _367;
        float _695 = fma(_685, cbModelParam._m0[26u].z, fma(_684, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _683)) - _651;
        float _696 = fma(_685, cbModelParam._m0[27u].z, fma(_684, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _683)) - _655;
        float _697 = fma(_685, cbModelParam._m0[28u].z, fma(_684, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _683)) - _659;
        float _701 = inversesqrt(dot(vec3(_695, _696, _697), vec3(_695, _696, _697)));
        float _714 = ((_701 * _695) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_651 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _715 = ((_701 * _696) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_655 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _716 = ((_701 * _697) / cbModelParam._m0[34u].z) + ((((((_659 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _719 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_714, _715, _716), 0.0);
        vec4 _726 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_714, _715, _716), 0.0);
        vec4 _733 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_714, _715, _716), 0.0);
        vec4 _740 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_714, _715, _716), 0.0);
        float _753 = exp2((_719.w + (-0.5)) * 20.0) * 2.0;
        float _763 = exp2((_726.w + (-0.5)) * 20.0) * 2.0;
        float _773 = exp2((_733.w + (-0.5)) * 20.0) * 2.0;
        float _783 = exp2((_740.w + (-0.5)) * 20.0) * 2.0;
        float _784 = _783 * (_740.x + (-0.5));
        float _785 = _783 * (_740.y + (-0.5));
        float _786 = _783 * (_740.z + (-0.5));
        _790 = _753 * (_719.z + (-0.5));
        _792 = _753 * (_719.y + (-0.5));
        _793 = _753 * (_719.x + (-0.5));
        _794 = _763 * (_726.z + (-0.5));
        _795 = _763 * (_726.y + (-0.5));
        _796 = _763 * (_726.x + (-0.5));
        _797 = _773 * (_733.z + (-0.5));
        _798 = _773 * (_733.y + (-0.5));
        _799 = _773 * (_733.x + (-0.5));
        _800 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        _801 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        _802 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    }
    else
    {
        _790 = _791;
        _792 = _791;
        _793 = _791;
        _794 = _791;
        _795 = _791;
        _796 = _791;
        _797 = _791;
        _798 = _791;
        _799 = _791;
        _800 = _791;
        _801 = _791;
        _802 = _791;
    }
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _828 = fma(_624, cbModelParam._m0[30u].z, fma(_620, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _616));
        float _832 = fma(_624, cbModelParam._m0[31u].z, fma(_620, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _616));
        float _836 = fma(_624, cbModelParam._m0[32u].z, fma(_620, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _616));
        float _859 = _616 + _365;
        float _860 = _620 + _366;
        float _861 = _624 + _367;
        float _871 = fma(_861, cbModelParam._m0[30u].z, fma(_860, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _859)) - _828;
        float _872 = fma(_861, cbModelParam._m0[31u].z, fma(_860, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _859)) - _832;
        float _873 = fma(_861, cbModelParam._m0[32u].z, fma(_860, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _859)) - _836;
        float _877 = inversesqrt(dot(vec3(_871, _872, _873), vec3(_871, _872, _873)));
        float _890 = ((_877 * _871) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_828 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _891 = ((_877 * _872) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_832 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _892 = ((_877 * _873) / cbModelParam._m0[35u].z) + ((((((_836 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _915 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        float _927 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _937 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _947 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _957 = exp2((_915.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_915.x + (-0.5));
        float _959 = _957 * (_915.y + (-0.5));
        float _960 = _957 * (_915.z + (-0.5));
        _964 = _927 * (_894.z + (-0.5));
        _965 = _927 * (_894.y + (-0.5));
        _966 = _927 * (_894.x + (-0.5));
        _967 = _937 * (_901.z + (-0.5));
        _968 = _937 * (_901.y + (-0.5));
        _969 = _937 * (_901.x + (-0.5));
        _970 = _947 * (_908.z + (-0.5));
        _971 = _947 * (_908.y + (-0.5));
        _972 = _947 * (_908.x + (-0.5));
        _973 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        _974 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        _975 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    }
    else
    {
        _964 = _791;
        _965 = _791;
        _966 = _791;
        _967 = _791;
        _968 = _791;
        _969 = _791;
        _970 = _791;
        _971 = _791;
        _972 = _791;
        _973 = _791;
        _974 = _791;
        _975 = _791;
    }
    float _990 = _556 * 0.5;
    float _991 = _557 * 0.5;
    float _992 = _558 * 0.5;
    float _993 = dot(vec4(_990, _991, _992, 1.0), vec4(_966, _969, _972, _975));
    float _996 = dot(vec4(_990, _991, _992, 1.0), vec4(_965, _968, _971, _974));
    float _999 = dot(vec4(_990, _991, _992, 1.0), vec4(_964, _967, _970, _973));
    float _1034;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1006 = dot(vec4(_990, _991, _992, 1.0), vec4(_790, _794, _797, _800));
        float _1010 = dot(vec4(_990, _991, _992, 1.0), vec4(_792, _795, _798, _801));
        float _1014 = dot(vec4(_990, _991, _992, 1.0), vec4(_793, _796, _799, _802));
        float _1021 = dot(vec4(cbModelParam._m0[39u]), vec4(_990, _991, _992, 1.0));
        _1034 = dot(vec3(isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0)), isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0)), isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1021) ? 0.0 : (isnan(0.0) ? _1021 : max(0.0, _1021))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1034 = 1.0;
    }
    float _1045;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1036 = dot(vec4(cbModelParam._m0[40u]), vec4(_990, _991, _992, 1.0));
        _1045 = dot(vec3(isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0)), isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0)), isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1036) ? 0.0 : (isnan(0.0) ? _1036 : max(0.0, _1036))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1045 = 1.0;
    }
    float _1049 = (_1045 * cbModelParam._m0[1u].x) + (_1034 * (1.0 - cbModelParam._m0[1u].x));
    float _1056 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _372);
    float _1057 = isnan(_1056) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1056 : min(cbModelParam._m0[25u].z, _1056));
    float _1140;
    float _1142;
    float _1144;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1107 = fma(_624, cbModelParam._m0[13u].z, fma(_620, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _616)) + cbModelParam._m0[13u].w;
        float _1111 = fma(_624, cbModelParam._m0[14u].z, fma(_620, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _616)) + cbModelParam._m0[14u].w;
        float _1115 = fma(_624, cbModelParam._m0[15u].z, fma(_620, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _616)) + cbModelParam._m0[15u].w;
        float _1118 = fma(_558, cbModelParam._m0[13u].z, fma(_557, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _556));
        float _1121 = fma(_558, cbModelParam._m0[14u].z, fma(_557, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _556));
        float _1124 = fma(_558, cbModelParam._m0[15u].z, fma(_557, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _556));
        float _1152;
        if (_1118 > 0.0)
        {
            _1152 = abs((1.0 - _1107) / _1118);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1118 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1107 + 1.0) / _1118);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1152 = frontier_phi_16_14_ladder;
        }
        float _1500;
        if (_1121 > 0.0)
        {
            _1500 = abs((1.0 - _1111) / _1121);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1121 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1111 + 1.0) / _1121);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1500 = frontier_phi_25_21_ladder;
        }
        float _1706;
        if (_1124 > 0.0)
        {
            _1706 = abs((1.0 - _1115) / _1124);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1124 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1115 + 1.0) / _1124);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1706 = frontier_phi_37_32_ladder;
        }
        float _1708 = isnan(_1500) ? _1152 : (isnan(_1152) ? _1500 : min(_1152, _1500));
        float _1709 = isnan(_1706) ? _1708 : (isnan(_1708) ? _1706 : min(_1708, _1706));
        float _1713 = (_1709 * _1118) + _1107;
        float _1714 = (_1709 * _1121) + _1111;
        float _1715 = (_1709 * _1124) + _1115;
        float _1716 = _1709 * 9.9999997473787516355514526367188e-05;
        float _1718 = (-1.0) - _1716;
        float _1720 = _1716 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1715 > _1720) || ((_1715 < _1718) || ((_1714 > _1720) || ((_1714 < _1718) || ((_1713 < _1718) || (_1713 > _1720))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1913 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1715, cbModelParam._m0[9u].z, fma(_1714, cbModelParam._m0[9u].y, _1713 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1715, cbModelParam._m0[10u].z, fma(_1714, cbModelParam._m0[10u].y, _1713 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1715, cbModelParam._m0[11u].z, fma(_1714, cbModelParam._m0[11u].y, _1713 * cbModelParam._m0[11u].x))), _1057);
            frontier_phi_15_37_ladder = _1913.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1913.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1913.x * cbModelParam._m0[1u].y;
        }
        _1140 = frontier_phi_15_37_ladder_2;
        _1142 = frontier_phi_15_37_ladder_1;
        _1144 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1128 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_556, _557, _558), _1057);
        _1140 = _1128.x * cbModelParam._m0[1u].y;
        _1142 = _1128.y * cbModelParam._m0[1u].y;
        _1144 = _1128.z * cbModelParam._m0[1u].y;
    }
    float _1148 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _372);
    float _1149 = isnan(_1148) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1148 : min(cbModelParam._m0[25u].w, _1148));
    float _1242;
    float _1244;
    float _1246;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1206 = fma(_624, cbModelParam._m0[21u].z, fma(_620, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _616)) + cbModelParam._m0[21u].w;
        float _1210 = fma(_624, cbModelParam._m0[22u].z, fma(_620, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _616)) + cbModelParam._m0[22u].w;
        float _1214 = fma(_624, cbModelParam._m0[23u].z, fma(_620, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _616)) + cbModelParam._m0[23u].w;
        float _1217 = fma(_558, cbModelParam._m0[21u].z, fma(_557, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _556));
        float _1220 = fma(_558, cbModelParam._m0[22u].z, fma(_557, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _556));
        float _1223 = fma(_558, cbModelParam._m0[23u].z, fma(_557, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _556));
        float _1505;
        if (_1217 > 0.0)
        {
            _1505 = abs((1.0 - _1206) / _1217);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1217 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1206 + 1.0) / _1217);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1505 = frontier_phi_27_23_ladder;
        }
        float _1733;
        if (_1220 > 0.0)
        {
            _1733 = abs((1.0 - _1210) / _1220);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1220 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1210 + 1.0) / _1220);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1733 = frontier_phi_39_34_ladder;
        }
        float _2027;
        if (_1223 > 0.0)
        {
            _2027 = abs((1.0 - _1214) / _1223);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1223 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1214 + 1.0) / _1223);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _2027 = frontier_phi_50_45_ladder;
        }
        float _2029 = isnan(_1733) ? _1505 : (isnan(_1505) ? _1733 : min(_1505, _1733));
        float _2030 = isnan(_2027) ? _2029 : (isnan(_2029) ? _2027 : min(_2029, _2027));
        float _2034 = (_2030 * _1217) + _1206;
        float _2035 = (_2030 * _1220) + _1210;
        float _2036 = (_2030 * _1223) + _1214;
        float _2037 = _2030 * 9.9999997473787516355514526367188e-05;
        float _2038 = (-1.0) - _2037;
        float _2040 = _2037 + 1.0;
        float frontier_phi_24_50_ladder;
        float frontier_phi_24_50_ladder_1;
        float frontier_phi_24_50_ladder_2;
        if ((_2036 > _2040) || ((_2036 < _2038) || ((_2035 > _2040) || ((_2035 < _2038) || ((_2034 < _2038) || (_2034 > _2040))))))
        {
            frontier_phi_24_50_ladder = 0.0;
            frontier_phi_24_50_ladder_1 = 0.0;
            frontier_phi_24_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2145 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2036, cbModelParam._m0[17u].z, fma(_2035, cbModelParam._m0[17u].y, _2034 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2036, cbModelParam._m0[18u].z, fma(_2035, cbModelParam._m0[18u].y, _2034 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2036, cbModelParam._m0[19u].z, fma(_2035, cbModelParam._m0[19u].y, _2034 * cbModelParam._m0[19u].x))), _1149);
            frontier_phi_24_50_ladder = _2145.x * cbModelParam._m0[1u].z;
            frontier_phi_24_50_ladder_1 = _2145.z * cbModelParam._m0[1u].z;
            frontier_phi_24_50_ladder_2 = _2145.y * cbModelParam._m0[1u].z;
        }
        _1242 = frontier_phi_24_50_ladder;
        _1244 = frontier_phi_24_50_ladder_2;
        _1246 = frontier_phi_24_50_ladder_1;
    }
    else
    {
        vec4 _1226 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_556, _557, _558), _1149);
        _1242 = _1226.x * cbModelParam._m0[1u].z;
        _1244 = _1226.y * cbModelParam._m0[1u].z;
        _1246 = _1226.z * cbModelParam._m0[1u].z;
    }
    float _1259 = (((_587 * _369) + _588) * _547) * ((cbModelParam._m0[1u].w * (_1242 - _1140)) + _1140);
    float _1261 = (((_587 * _370) + _588) * _547) * ((cbModelParam._m0[1u].w * (_1244 - _1142)) + _1142);
    float _1263 = (((_587 * _371) + _588) * _547) * ((cbModelParam._m0[1u].w * (_1246 - _1144)) + _1144);
    float _1284 = fma(_1263, cbSceneParam._m0[89u].z, fma(_1261, cbSceneParam._m0[89u].y, _1259 * cbSceneParam._m0[89u].x));
    float _1287 = fma(_1263, cbSceneParam._m0[90u].z, fma(_1261, cbSceneParam._m0[90u].y, _1259 * cbSceneParam._m0[90u].x));
    float _1290 = fma(_1263, cbSceneParam._m0[91u].z, fma(_1261, cbSceneParam._m0[91u].y, _1259 * cbSceneParam._m0[91u].x));
    uint _1297 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1301 = floatBitsToUint(cbInstanceData._m0[_1297 + 5u]);
    uint _1303 = _1301.x * 14u;
    uint _1304 = _1303 + 13u;
    float _1310 = _547 + (-1.0);
    float _1315 = (cbLight._m0[_1304].x * _1310) + 1.0;
    float _1316 = (cbLight._m0[_1304].y * _1310) + 1.0;
    float _1317 = (cbLight._m0[_1304].w * _1310) + 1.0;
    uint _1321 = _1303 + 8u;
    float _1337 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1303].w)) * _372) * 0.949999988079071044921875);
    float _1338 = _1337 * _1337;
    float _1339 = cbLight._m0[_1303].x + _433;
    float _1340 = cbLight._m0[_1303].y + _434;
    float _1341 = cbLight._m0[_1303].z + _435;
    float _1345 = inversesqrt(dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341)));
    float _1346 = _1345 * _1339;
    float _1347 = _1345 * _1340;
    float _1348 = _1345 * _1341;
    float _1349 = dot(vec3(_365, _366, _367), vec3(cbLight._m0[_1303].xyz));
    float _3034 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
    float _1352 = isnan(1.0) ? _3034 : (isnan(_3034) ? 1.0 : min(_3034, 1.0));
    float _3045 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _1353 = isnan(1.0) ? _3045 : (isnan(_3045) ? 1.0 : min(_3045, 1.0));
    float _1354 = dot(vec3(_365, _366, _367), vec3(_1346, _1347, _1348));
    float _3056 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
    float _1357 = isnan(1.0) ? _3056 : (isnan(_3056) ? 1.0 : min(_3056, 1.0));
    float _1358 = dot(vec3(cbLight._m0[_1303].xyz), vec3(_1346, _1347, _1348));
    float _3067 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
    float _1362 = _1338 * _1338;
    float _1366 = ((_1357 * _1357) * (_1362 + (-1.0))) + 1.0;
    float _1374 = exp2(log2(1.0 - (isnan(1.0) ? _3067 : (isnan(_3067) ? 1.0 : min(_3067, 1.0)))) * 5.0);
    float _1375 = 1.0 - _369;
    float _1376 = 1.0 - _370;
    float _1377 = 1.0 - _371;
    float _1384 = 1.0 - _1338;
    float _1395 = (0.5 / (((_1353 * ((_1352 * _1384) + _1338)) + 9.9999999392252902907785028219223e-09) + (((_1353 * _1384) + _1338) * _1352))) * _1352;
    float _3078 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
    float _1397 = (isnan(1.0) ? _3078 : (isnan(_3078) ? 1.0 : min(_3078, 1.0))) * (_1362 / ((_1366 * _1366) * 3.141590118408203125));
    float _1398 = isnan(1.0) ? _1315 : (isnan(_1315) ? 1.0 : min(_1315, 1.0));
    uint _1408 = _1303 | 1u;
    uint _1412 = _1303 + 9u;
    float _1426 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1408].w)) * _372) * 0.949999988079071044921875);
    float _1427 = _1426 * _1426;
    float _1428 = cbLight._m0[_1408].x + _433;
    float _1429 = cbLight._m0[_1408].y + _434;
    float _1430 = cbLight._m0[_1408].z + _435;
    float _1434 = inversesqrt(dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430)));
    float _1435 = _1434 * _1428;
    float _1436 = _1434 * _1429;
    float _1437 = _1434 * _1430;
    float _1438 = dot(vec3(_365, _366, _367), vec3(cbLight._m0[_1408].xyz));
    float _3094 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
    float _1441 = isnan(1.0) ? _3094 : (isnan(_3094) ? 1.0 : min(_3094, 1.0));
    float _1442 = dot(vec3(_365, _366, _367), vec3(_1435, _1436, _1437));
    float _3105 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
    float _1445 = isnan(1.0) ? _3105 : (isnan(_3105) ? 1.0 : min(_3105, 1.0));
    float _1446 = dot(vec3(cbLight._m0[_1408].xyz), vec3(_1435, _1436, _1437));
    float _3116 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
    float _1450 = _1427 * _1427;
    float _1454 = ((_1445 * _1445) * (_1450 + (-1.0))) + 1.0;
    float _1461 = exp2(log2(1.0 - (isnan(1.0) ? _3116 : (isnan(_3116) ? 1.0 : min(_3116, 1.0)))) * 5.0);
    float _1468 = 1.0 - _1427;
    float _1478 = (0.5 / (((_1353 * ((_1441 * _1468) + _1427)) + 9.9999999392252902907785028219223e-09) + (((_1353 * _1468) + _1427) * _1441))) * _1441;
    float _3127 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
    float _1480 = (isnan(1.0) ? _3127 : (isnan(_3127) ? 1.0 : min(_3127, 1.0))) * (_1450 / ((_1454 * _1454) * 3.141590118408203125));
    float _1481 = isnan(1.0) ? _1316 : (isnan(_1316) ? 1.0 : min(_1316, 1.0));
    float _1491 = (((((_1461 * _1375) + _369) * cbLight._m0[_1412].x) * _1480) * _1481) + (((((_1374 * _1375) + _369) * cbLight._m0[_1321].x) * _1397) * _1398);
    float _1492 = (((((_1461 * _1376) + _370) * cbLight._m0[_1412].y) * _1480) * _1481) + (((((_1374 * _1376) + _370) * cbLight._m0[_1321].y) * _1397) * _1398);
    float _1493 = (((((_1461 * _1377) + _371) * cbLight._m0[_1412].z) * _1480) * _1481) + (((((_1374 * _1377) + _371) * cbLight._m0[_1321].z) * _1397) * _1398);
    uvec4 _1497 = floatBitsToUint(cbLight._m0[_1303 + 12u]);
    float _1510;
    float _1512;
    float _1514;
    if (_1497.x == 0u)
    {
        _1510 = _1491;
        _1512 = _1492;
        _1514 = _1493;
    }
    else
    {
        float _1520 = (cbLight._m0[_1304].z * _1310) + 1.0;
        uint _1521 = _1303 + 2u;
        uint _1525 = _1303 + 10u;
        float _1539 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1521].w)) * _372) * 0.949999988079071044921875);
        float _1540 = _1539 * _1539;
        float _1541 = cbLight._m0[_1521].x + _433;
        float _1542 = cbLight._m0[_1521].y + _434;
        float _1543 = cbLight._m0[_1521].z + _435;
        float _1547 = inversesqrt(dot(vec3(_1541, _1542, _1543), vec3(_1541, _1542, _1543)));
        float _1548 = _1547 * _1541;
        float _1549 = _1547 * _1542;
        float _1550 = _1547 * _1543;
        float _1551 = dot(vec3(_365, _366, _367), vec3(cbLight._m0[_1521].xyz));
        float _3143 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1554 = isnan(1.0) ? _3143 : (isnan(_3143) ? 1.0 : min(_3143, 1.0));
        float _1555 = dot(vec3(_365, _366, _367), vec3(_1548, _1549, _1550));
        float _3154 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1558 = isnan(1.0) ? _3154 : (isnan(_3154) ? 1.0 : min(_3154, 1.0));
        float _1559 = dot(vec3(cbLight._m0[_1521].xyz), vec3(_1548, _1549, _1550));
        float _3165 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1563 = _1540 * _1540;
        float _1567 = ((_1558 * _1558) * (_1563 + (-1.0))) + 1.0;
        float _1574 = exp2(log2(1.0 - (isnan(1.0) ? _3165 : (isnan(_3165) ? 1.0 : min(_3165, 1.0)))) * 5.0);
        float _1581 = 1.0 - _1540;
        float _1591 = (0.5 / (((_1353 * ((_1554 * _1581) + _1540)) + 9.9999999392252902907785028219223e-09) + (((_1353 * _1581) + _1540) * _1554))) * _1554;
        float _3176 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1593 = (isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0))) * (_1563 / ((_1567 * _1567) * 3.141590118408203125));
        float _1594 = isnan(1.0) ? _1520 : (isnan(_1520) ? 1.0 : min(_1520, 1.0));
        _1510 = (((((_1574 * _1375) + _369) * cbLight._m0[_1525].x) * _1593) * _1594) + _1491;
        _1512 = (((((_1574 * _1376) + _370) * cbLight._m0[_1525].y) * _1593) * _1594) + _1492;
        _1514 = (((((_1574 * _1377) + _371) * cbLight._m0[_1525].z) * _1593) * _1594) + _1493;
    }
    float _1612;
    float _1614;
    float _1616;
    if (_1497.y == 0u)
    {
        _1612 = _1510;
        _1614 = _1512;
        _1616 = _1514;
    }
    else
    {
        uint _1623 = _1303 + 3u;
        uint _1627 = _1303 + 11u;
        float _1641 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1623].w)) * _372) * 0.949999988079071044921875);
        float _1642 = _1641 * _1641;
        float _1643 = cbLight._m0[_1623].x + _433;
        float _1644 = cbLight._m0[_1623].y + _434;
        float _1645 = cbLight._m0[_1623].z + _435;
        float _1649 = inversesqrt(dot(vec3(_1643, _1644, _1645), vec3(_1643, _1644, _1645)));
        float _1650 = _1649 * _1643;
        float _1651 = _1649 * _1644;
        float _1652 = _1649 * _1645;
        float _1653 = dot(vec3(_365, _366, _367), vec3(cbLight._m0[_1623].xyz));
        float _3192 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1656 = isnan(1.0) ? _3192 : (isnan(_3192) ? 1.0 : min(_3192, 1.0));
        float _1657 = dot(vec3(_365, _366, _367), vec3(_1650, _1651, _1652));
        float _3203 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1660 = isnan(1.0) ? _3203 : (isnan(_3203) ? 1.0 : min(_3203, 1.0));
        float _1661 = dot(vec3(cbLight._m0[_1623].xyz), vec3(_1650, _1651, _1652));
        float _3214 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1665 = _1642 * _1642;
        float _1669 = ((_1660 * _1660) * (_1665 + (-1.0))) + 1.0;
        float _1676 = exp2(log2(1.0 - (isnan(1.0) ? _3214 : (isnan(_3214) ? 1.0 : min(_3214, 1.0)))) * 5.0);
        float _1683 = 1.0 - _1642;
        float _1693 = (0.5 / (((_1353 * ((_1656 * _1683) + _1642)) + 9.9999999392252902907785028219223e-09) + (((_1353 * _1683) + _1642) * _1656))) * _1656;
        float _3225 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1695 = (isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0))) * (_1665 / ((_1669 * _1669) * 3.141590118408203125));
        float _1696 = isnan(1.0) ? _1317 : (isnan(_1317) ? 1.0 : min(_1317, 1.0));
        _1612 = (((((_1676 * _1375) + _369) * cbLight._m0[_1627].x) * _1695) * _1696) + _1510;
        _1614 = (((((_1676 * _1376) + _370) * cbLight._m0[_1627].y) * _1695) * _1696) + _1512;
        _1616 = (((((_1676 * _1377) + _371) * cbLight._m0[_1627].z) * _1695) * _1696) + _1514;
    }
    float _1837;
    float _1839;
    float _1841;
    if (_1301.y == 0u)
    {
        float _1777 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1778 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1777;
        float _1779 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1777;
        float _1780 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1777;
        uvec4 _1792 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1793 = _1792.x;
        uint _1804 = uint((float(_1792.y) * floor(float(uint(cbSceneParam._m0[85u].y * _441) / _1793))) + floor(float(uint(cbSceneParam._m0[85u].x * _440) / _1793)));
        float _1814 = (log2(_1780 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1815 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        uint _1818 = uint(isnan(14.0) ? _1815 : (isnan(_1815) ? 14.0 : min(_1815, 14.0)));
        uvec4 _1823 = texelFetch(g_lightClusterGridBuffer, int(((_1818 << 2u) + (_1804 << 6u)) >> 2u));
        uint _1824 = _1823.x;
        uint _1825 = _1792.z;
        float _1922;
        float _1924;
        float _1926;
        if (((((1u << ((_1825 >> 4u) & 15u)) + 4294967295u) & _1824) == 0u) || ((_1825 & 240u) == 0u))
        {
            _1922 = 0.0;
            _1924 = 0.0;
            _1926 = 0.0;
        }
        else
        {
            float _1923;
            float _1925;
            float _1927;
            float _2076 = 0.0;
            float _2077 = 0.0;
            float _2078 = 0.0;
            uint _2079 = 0u;
            uint _2088;
            bool _2089;
            for (;;)
            {
                _2088 = texelFetch(g_lightClassification, int((((_1818 << 5u) + (_1804 << 9u)) + (_2079 << 2u)) >> 2u)).x;
                _2089 = _2088 == 0u;
                float frontier_phi_59_pred;
                float frontier_phi_59_pred_1;
                float frontier_phi_59_pred_2;
                if (_2089)
                {
                    frontier_phi_59_pred = _2078;
                    frontier_phi_59_pred_1 = _2077;
                    frontier_phi_59_pred_2 = _2076;
                }
                else
                {
                    float _2212;
                    float _2213;
                    float _2214;
                    uint _2215;
                    _2212 = _2076;
                    _2213 = _2077;
                    _2214 = _2078;
                    _2215 = _2088;
                    float _2150;
                    float _2151;
                    float _2152;
                    for (;;)
                    {
                        uint _2219 = uint(findLSB(_2215)) + (_2079 << 5u);
                        uint _2216 = (_2215 + 4294967295u) & _2215;
                        uint _2221 = _2219 * 48u;
                        vec4 _2235 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2221)).x, texelFetch(g_PointLightRenderingBuffer, int(_2221 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2221 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2221 + 3u)).x));
                        uint _2252 = (_2219 * 48u) + 8u;
                        vec3 _2263 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2252)).x, texelFetch(g_PointLightRenderingBuffer, int(_2252 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2252 + 2u)).x));
                        float _2267 = _2235.x - _1778;
                        float _2268 = _2235.y - _1779;
                        float _2269 = _2235.z - _1780;
                        float _2270 = dot(vec3(_2267, _2268, _2269), vec3(_2267, _2268, _2269));
                        float _2273 = inversesqrt(_2270);
                        float _2274 = _2273 * _2267;
                        float _2275 = _2273 * _2268;
                        float _2276 = _2273 * _2269;
                        float _2282 = 1.0 - (_2270 * _2235.w);
                        float _3251 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
                        float _2284 = sqrt(_2270) * uintBitsToFloat(uvec4(_2242, _2243, _2244, texelFetch(g_PointLightRenderingBuffer, int(((_2219 * 48u) + 4u) + 3u)).x)).w;
                        float _2288 = _2284 * _2284;
                        float _2289 = (-0.0) - _1778;
                        float _2290 = (-0.0) - _1779;
                        float _2291 = (-0.0) - _1780;
                        float _2295 = inversesqrt(dot(vec3(_2289, _2290, _2291), vec3(_2289, _2290, _2291)));
                        float _2296 = _2295 * _2289;
                        float _2297 = _2295 * _2290;
                        float _2298 = _2295 * _2291;
                        float _2306 = exp2(log2(1.0 / ((_2288 * 3.5) + 5.0)) * 0.25);
                        float _2307 = 1.0 - _569;
                        float _2314 = sqrt(1.0 - ((1.0 - (_2307 * _2307)) * (1.0 - (_2306 * _2306))));
                        float _2315 = _2314 * _2314;
                        float _2316 = _2315 * _2315;
                        float _2317 = _2296 + _2274;
                        float _2318 = _2297 + _2275;
                        float _2319 = _2298 + _2276;
                        float _2323 = inversesqrt(dot(vec3(_2317, _2318, _2319), vec3(_2317, _2318, _2319)));
                        float _2327 = dot(vec3(_462, _465, _468), vec3(_2296, _2297, _2298));
                        float _3262 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
                        float _2330 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
                        float _2331 = dot(vec3(_462, _465, _468), vec3(_2323 * _2317, _2323 * _2318, _2323 * _2319));
                        float _3273 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
                        float _2334 = isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0));
                        float _2338 = ((_2334 * _2334) * (_2316 + (-1.0))) + 1.0;
                        float _2339 = (1.39999997615814208984375 / (_2284 + 1.39999997615814208984375)) * _2315;
                        float _2340 = _2339 * _2339;
                        float _2343 = ((1.0 - _2340) * dot(vec3(_462, _465, _468), vec3(_2274, _2275, _2276))) + _2340;
                        float _3284 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
                        float _2344 = isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0));
                        float _2345 = 1.0 - _2315;
                        float _2355 = (0.5 / (((_2344 * ((_2330 * _2345) + _2315)) + 9.9999999392252902907785028219223e-09) + (((_2344 * _2345) + _2315) * _2330))) * _2344;
                        float _3295 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
                        float _2366 = (((_2316 * 3.1415927410125732421875) * (isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0)))) / ((_2338 * _2338) * ((_2288 * 2.1991131305694580078125) + 3.141590118408203125))) * (isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0)));
                        _2150 = (_2366 * _2263.x) + _2212;
                        _2151 = (_2366 * _2263.y) + _2213;
                        _2152 = (_2366 * _2263.z) + _2214;
                        if (_2216 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2212 = _2150;
                            _2213 = _2151;
                            _2214 = _2152;
                            _2215 = _2216;
                        }
                    }
                    frontier_phi_59_pred = _2152;
                    frontier_phi_59_pred_1 = _2151;
                    frontier_phi_59_pred_2 = _2150;
                }
                _1927 = frontier_phi_59_pred;
                _1925 = frontier_phi_59_pred_1;
                _1923 = frontier_phi_59_pred_2;
                uint _2080 = _2079 + 1u;
                if (_2080 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2076 = _1923;
                    _2077 = _1925;
                    _2078 = _1927;
                    _2079 = _2080;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1922 = _1923;
            _1924 = _1925;
            _1926 = _1927;
        }
        uvec4 _1930 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1931 = _1930.z;
        uint _1933 = (_1931 >> 8u) & 15u;
        float _2053;
        float _2055;
        float _2057;
        if (((4294967295u << _1933) & _1824) == 0u)
        {
            _2053 = _1922;
            _2055 = _1924;
            _2057 = _1926;
        }
        else
        {
            float _2069 = inversesqrt(dot(vec3(_1778, _1779, _1780), vec3(_1778, _1779, _1780)));
            float _2070 = _2069 * _1778;
            float _2071 = _2069 * _1779;
            float _2072 = _2069 * _1780;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            if (_1933 < ((_1931 >> 12u) & 15u))
            {
                float _2054;
                float _2056;
                float _2058;
                float _2198 = _1922;
                float _2199 = _1924;
                float _2200 = _1926;
                uint _2201 = _1933;
                uint _2210;
                bool _2211;
                for (;;)
                {
                    _2210 = texelFetch(g_lightClassification, int((((_1818 << 5u) + (_1804 << 9u)) + (_2201 << 2u)) >> 2u)).x;
                    _2211 = _2210 == 0u;
                    float frontier_phi_65_pred;
                    float frontier_phi_65_pred_1;
                    float frontier_phi_65_pred_2;
                    if (_2211)
                    {
                        frontier_phi_65_pred = _2200;
                        frontier_phi_65_pred_1 = _2199;
                        frontier_phi_65_pred_2 = _2198;
                    }
                    else
                    {
                        float _2371;
                        float _2372;
                        float _2373;
                        float _2637;
                        float _2638;
                        float _2639;
                        float _2381 = _2198;
                        float _2382 = _2199;
                        float _2383 = _2200;
                        uint _2384 = _2210;
                        uint _2385;
                        uint _2395;
                        vec4 _2410;
                        float _2411;
                        vec3 _2423;
                        vec4 _2439;
                        vec4 _2455;
                        float _2502;
                        bool _2503;
                        for (;;)
                        {
                            _2395 = ((_2201 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2384));
                            _2385 = (_2384 + 4294967295u) & _2384;
                            uint _2397 = _2395 * 40u;
                            _2410 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2397 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2397 + 3u)).x));
                            _2411 = _2410.w;
                            uint _2413 = (_2395 * 40u) + 8u;
                            _2423 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2413 + 2u)).x));
                            uint _2426 = (_2395 * 40u) + 16u;
                            _2439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2426 + 3u)).x));
                            uint _2442 = (_2395 * 40u) + 20u;
                            _2455 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2442 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2442 + 3u)).x));
                            uint _2458 = (_2395 * 40u) + 24u;
                            vec4 _2471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2458 + 3u)).x));
                            uint _2477 = (_2395 * 40u) + 28u;
                            vec4 _2490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2477 + 3u)).x));
                            _2502 = fma(_1780, _2490.z, fma(_1779, _2490.y, _2490.x * _1778)) + _2490.w;
                            _2503 = !((fma(_1780, _2471.z, fma(_1779, _2471.y, _2471.x * _1778)) + _2471.w) <= 0.0);
                            float frontier_phi_71_pred;
                            float frontier_phi_71_pred_1;
                            float frontier_phi_71_pred_2;
                            if (_2503)
                            {
                                float _2537 = _2410.x - _1778;
                                float _2538 = _2410.y - _1779;
                                float _2539 = _2410.z - _1780;
                                float _2540 = dot(vec3(_2537, _2538, _2539), vec3(_2537, _2538, _2539));
                                float _2543 = inversesqrt(_2540);
                                float _2544 = _2543 * _2537;
                                float _2545 = _2543 * _2538;
                                float _2546 = _2543 * _2539;
                                float _2550 = 1.0 - (_2540 / (_2411 * _2411));
                                float _3306 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
                                float _2552 = sqrt(_2540) * uintBitsToFloat(uvec4(_2506, _2507, _2508, texelFetch(g_SpotLightRenderingBuffer, int(((_2395 * 40u) + 4u) + 3u)).x)).w;
                                float _2555 = _2552 * _2552;
                                float _2556 = (fma(_1780, _2439.z, fma(_1779, _2439.y, _2439.x * _1778)) + _2439.w) / _2502;
                                float _2557 = (fma(_1780, _2455.z, fma(_1779, _2455.y, _2455.x * _1778)) + _2455.w) / _2502;
                                float _2561 = 1.0 - dot(vec2(_2556, _2557), vec2(_2556, _2557));
                                float _3317 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
                                float _2571 = exp2(log2(1.0 / ((_2555 * 3.5) + 5.0)) * 0.25);
                                float _2572 = 1.0 - _569;
                                float _2579 = sqrt(1.0 - ((1.0 - (_2572 * _2572)) * (1.0 - (_2571 * _2571))));
                                float _2580 = _2579 * _2579;
                                float _2581 = _2580 * _2580;
                                float _2582 = _2544 - _2070;
                                float _2583 = _2545 - _2071;
                                float _2584 = _2546 - _2072;
                                float _2588 = inversesqrt(dot(vec3(_2582, _2583, _2584), vec3(_2582, _2583, _2584)));
                                float _2592 = dot(vec3(_462, _465, _468), vec3((-0.0) - _2070, (-0.0) - _2071, (-0.0) - _2072));
                                float _3328 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
                                float _2595 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
                                float _2596 = dot(vec3(_462, _465, _468), vec3(_2588 * _2582, _2588 * _2583, _2588 * _2584));
                                float _3339 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
                                float _2599 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
                                float _2603 = ((_2599 * _2599) * (_2581 + (-1.0))) + 1.0;
                                float _2604 = (1.39999997615814208984375 / (_2552 + 1.39999997615814208984375)) * _2580;
                                float _2605 = _2604 * _2604;
                                float _2611 = ((1.0 - _2605) * dot(vec3(_462, _465, _468), vec3(_2544, _2545, _2546))) + _2605;
                                float _3350 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
                                float _2612 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
                                float _2613 = 1.0 - _2580;
                                float _2623 = (0.5 / (((_2612 * ((_2595 * _2613) + _2580)) + 9.9999999392252902907785028219223e-09) + (((_2612 * _2613) + _2580) * _2595))) * _2612;
                                float _3361 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
                                float _2633 = ((isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0))) * (isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0)))) * (((_2581 * 3.1415927410125732421875) * (isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0)))) / ((_2603 * _2603) * ((_2555 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_71_pred = _2633 * _2423.z;
                                frontier_phi_71_pred_1 = _2633 * _2423.y;
                                frontier_phi_71_pred_2 = _2633 * _2423.x;
                            }
                            else
                            {
                                frontier_phi_71_pred = 0.0;
                                frontier_phi_71_pred_1 = 0.0;
                                frontier_phi_71_pred_2 = 0.0;
                            }
                            _2639 = frontier_phi_71_pred;
                            _2638 = frontier_phi_71_pred_1;
                            _2637 = frontier_phi_71_pred_2;
                            _2371 = _2637 + _2381;
                            _2372 = _2638 + _2382;
                            _2373 = _2639 + _2383;
                            if (_2385 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2381 = _2371;
                                _2382 = _2372;
                                _2383 = _2373;
                                _2384 = _2385;
                                continue;
                            }
                        }
                        frontier_phi_65_pred = _2373;
                        frontier_phi_65_pred_1 = _2372;
                        frontier_phi_65_pred_2 = _2371;
                    }
                    _2058 = frontier_phi_65_pred;
                    _2056 = frontier_phi_65_pred_1;
                    _2054 = frontier_phi_65_pred_2;
                    uint _2202 = _2201 + 1u;
                    if (_2202 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2198 = _2054;
                        _2199 = _2056;
                        _2200 = _2058;
                        _2201 = _2202;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2058;
                frontier_phi_52_53_ladder_1 = _2056;
                frontier_phi_52_53_ladder_2 = _2054;
            }
            else
            {
                frontier_phi_52_53_ladder = _1926;
                frontier_phi_52_53_ladder_1 = _1924;
                frontier_phi_52_53_ladder_2 = _1922;
            }
            _2053 = frontier_phi_52_53_ladder_2;
            _2055 = frontier_phi_52_53_ladder_1;
            _2057 = frontier_phi_52_53_ladder;
        }
        float _2062 = isnan(1.0) ? _547 : (isnan(_547) ? 1.0 : min(_547, 1.0));
        _1837 = ((_2053 * _369) * _2062) + _1612;
        _1839 = ((_2055 * _370) * _2062) + _1614;
        _1841 = ((_2057 * _371) * _2062) + _1616;
    }
    else
    {
        _1837 = _1612;
        _1839 = _1614;
        _1841 = _1616;
    }
    float _1845 = 0.959999978542327880859375 - ((isnan(1.0) ? _535 : (isnan(_535) ? 1.0 : min(_535, 1.0))) * 0.959999978542327880859375);
    float _1853 = _1845 - (exp2(log2(1.0 - _563) * 5.0) * _1845);
    uint _1860 = _1297 + 6u;
    float _1868 = _440 / cbSceneParam._m0[86u].x;
    float _1869 = _441 / cbSceneParam._m0[86u].y;
    vec4 _1883 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1868, _1869, (log2((isnan(cbSceneParam._m0[77u].w) ? _377 : (isnan(_377) ? cbSceneParam._m0[77u].w : min(_377, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1885 = _1883.x;
    float _1886 = _1883.y;
    float _1887 = _1883.z;
    float _1888 = _1883.w;
    float _1978;
    float _1980;
    float _1982;
    float _1984;
    if (_377 > cbSceneParam._m0[78u].w)
    {
        float _1941 = isnan(_377) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _377 : min(cbSceneParam._m0[80u].w, _377));
        float _1942 = _1941 / _377;
        float _1953 = _1942 * _426;
        float _1954 = _427 * _1942;
        float _1955 = (-0.0) - _1954;
        float _1956 = _1942 * _428;
        float _1958 = (cbSceneParam._m0[77u].w * _1955) / _1941;
        float _1959 = _1958 + cbSceneParam._m0[79u].w;
        float _1960 = cbSceneParam._m0[79u].w - _1954;
        float _1966 = sqrt(((_1953 * _1953) + (_1954 * _1954)) + (_1956 * _1956));
        float _1969 = (1.0 - (cbSceneParam._m0[77u].w / _1941)) * _1966;
        float _1974 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1976 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2160;
        if (abs((_1955 - _1958) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2160 = ((((_1959 > 0.0) ? exp2(_1974 * _1959) : (2.0 - exp2(_1976 * _1959))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1969;
        }
        else
        {
            float _2102 = 1.0 / cbSceneParam._m0[80u].x;
            float _2103 = isnan(_1960) ? _1959 : (isnan(_1959) ? _1960 : max(_1959, _1960));
            float _2104 = isnan(_1960) ? _1959 : (isnan(_1959) ? _1960 : min(_1959, _1960));
            float _2113 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : min(_2103, 0.0));
            float _2114 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : min(_2104, 0.0));
            _2160 = ((abs(_1966 / _1955) * cbSceneParam._m0[80u].y) * ((((_2113 - _2114) * 2.0) - ((exp2(_1974 * (isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0)))) - exp2(_1974 * (isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0))))) * _2102)) - ((exp2(_1976 * _2113) - exp2(_1976 * _2114)) * _2102))) + (_1969 * cbSceneParam._m0[80u].z);
        }
        vec4 _2162 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1868, _1869, 1.0), 0.0);
        float _2171 = exp2((_2160 * (-1.44269502162933349609375)) * (1.0 - _2162.w));
        float _2172 = log2(_2171);
        float _2188 = log2(_1888);
        _1978 = (exp2(_2188 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2172 * cbSceneParam._m0[78u].x)) * _2162.x) / cbSceneParam._m0[78u].x)) + _1885;
        _1980 = (exp2(_2188 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2172 * cbSceneParam._m0[78u].y)) * _2162.y) / cbSceneParam._m0[78u].y)) + _1886;
        _1982 = (exp2(_2188 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2172 * cbSceneParam._m0[78u].z)) * _2162.z) / cbSceneParam._m0[78u].z)) + _1887;
        _1984 = _2171 * _1888;
    }
    else
    {
        _1978 = _1885;
        _1980 = _1886;
        _1982 = _1887;
        _1984 = _1888;
    }
    float _1995 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1996 = _1995 == 3.0;
    float _1997 = log2(_1984);
    float _2004 = exp2(_1997 * cbSceneParam._m0[78u].x) * (((_1837 + ((isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0))) * _1049)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _287.x) * exp2((-0.0) - ((cbMtdParam._m0[10u].w * _344) * _345))) * _1853));
    float _2005 = exp2(_1997 * cbSceneParam._m0[78u].y) * (((_1839 + ((isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0))) * _1049)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _287.y) * exp2((-0.0) - ((cbMtdParam._m0[11u].x * _344) * _345))) * _1853));
    float _2006 = exp2(_1997 * cbSceneParam._m0[78u].z) * (((_1841 + ((isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0))) * _1049)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _287.z) * exp2((-0.0) - ((cbMtdParam._m0[11u].y * _344) * _345))) * _1853));
    float _2015 = (_1995 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2015 * (_1996 ? _2004 : (_2004 + (cbSceneParam._m0[72u].w * _1978)));
    SV_Target.y = _2015 * (_1996 ? _2005 : (_2005 + (cbSceneParam._m0[72u].w * _1980)));
    SV_Target.z = _2015 * (_1996 ? _2006 : (_2006 + (cbSceneParam._m0[72u].w * _1982)));
    SV_Target.w = cbInstanceData._m0[_1860].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1860].w;
}


