#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_GlassEX_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _795;
uint _2518;
uint _2519;
uint _2520;
uint _2781;
uint _2782;
uint _2783;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _171 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _172 = _171 * NORMAL.x;
    float _173 = _171 * NORMAL.y;
    float _174 = _171 * NORMAL.z;
    float _179;
    float _180;
    float _181;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _179 = (-0.0) - _172;
        _180 = (-0.0) - _173;
        _181 = (-0.0) - _174;
    }
    else
    {
        _179 = _172;
        _180 = _173;
        _181 = _174;
    }
    float _226 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _236 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _226);
    float _237 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _226);
    float _238 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _226);
    vec4 _259 = texture(sampler2D(M_GlassEX_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _265 = (_259.z * 0.5) + cbMtdParam._m0[10u].z;
    float _271 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _272 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _286 = isnan(cbInstanceData._m0[8u].x) ? _271 : (isnan(_271) ? cbInstanceData._m0[8u].x : max(_271, cbInstanceData._m0[8u].x));
    float _287 = isnan(cbInstanceData._m0[8u].y) ? _272 : (isnan(_272) ? cbInstanceData._m0[8u].y : max(_272, cbInstanceData._m0[8u].y));
    vec4 _291 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _286 : (isnan(_286) ? cbInstanceData._m0[8u].z : min(_286, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _287 : (isnan(_287) ? cbInstanceData._m0[8u].w : min(_287, cbInstanceData._m0[8u].w))));
    float _313 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _321 = abs(dot(vec4(_179, _180, _181, 0.0), vec4(_313 * _236, _313 * _237, _313 * _238, 0.0))) * cbMtdParam._m0[10u].x;
    vec4 _323 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_271, _272));
    float _325 = _323.x;
    bool _332 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _347 = (_332 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _325)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _325))) - POSITION_1.w;
    float _348 = isnan(_347) ? _321 : (isnan(_321) ? _347 : min(_321, _347));
    float _349 = log2(cbMtdParam._m0[10u].y);
    float _368 = inversesqrt(dot(vec3(_179, _180, _181), vec3(_179, _180, _181)));
    float _369 = _368 * _179;
    float _370 = _368 * _180;
    float _371 = _368 * _181;
    float _3063 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _373 = isnan(1.0) ? _3063 : (isnan(_3063) ? 1.0 : min(_3063, 1.0));
    float _3074 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _374 = isnan(1.0) ? _3074 : (isnan(_3074) ? 1.0 : min(_3074, 1.0));
    float _3085 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _375 = isnan(1.0) ? _3085 : (isnan(_3085) ? 1.0 : min(_3085, 1.0));
    float _3096 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _376 = isnan(1.0) ? _3096 : (isnan(_3096) ? 1.0 : min(_3096, 1.0));
    float _381 = _332 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _421 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _430 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _421);
    float _431 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _421);
    float _432 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _421);
    float _436 = inversesqrt(dot(vec3(_430, _431, _432), vec3(_430, _431, _432)));
    float _437 = _430 * _436;
    float _438 = _431 * _436;
    float _439 = _432 * _436;
    float _444 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _445 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _466 = fma(_371, cbSceneParam._m0[5u].z, fma(_370, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _369));
    float _469 = fma(_371, cbSceneParam._m0[6u].z, fma(_370, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _369));
    float _472 = fma(_371, cbSceneParam._m0[7u].z, fma(_370, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _369));
    float _473 = _373 * 3.3333332538604736328125;
    float _475 = _374 * 3.3333332538604736328125;
    float _476 = _375 * 3.3333332538604736328125;
    float _484 = ((isnan(1.0) ? _473 : (isnan(_473) ? 1.0 : min(_473, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _486 = ((isnan(1.0) ? _475 : (isnan(_475) ? 1.0 : min(_475, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _487 = ((isnan(1.0) ? _476 : (isnan(_476) ? 1.0 : min(_476, 1.0))) * 0.0314955823123455047607421875) + 0.0039369477890431880950927734375;
    float _493 = (_373 + (-0.0599999986588954925537109375)) + (isnan(_484) ? 0.0 : (isnan(0.0) ? _484 : max(0.0, _484)));
    float _495 = (_374 + (-0.0599999986588954925537109375)) + (isnan(_486) ? 0.0 : (isnan(0.0) ? _486 : max(0.0, _486)));
    float _497 = (_375 + (-0.0599999986588954925537109375)) + (isnan(_487) ? 0.0 : (isnan(0.0) ? _487 : max(0.0, _487)));
    float _509 = (_493 * _493) - ((0.02999999932944774627685546875 - _373) * 0.119999997317790985107421875);
    float _510 = (_495 * _495) - ((0.02999999932944774627685546875 - _374) * 0.119999997317790985107421875);
    float _511 = (_497 * _497) - ((0.02999999932944774627685546875 - _375) * 0.119999997317790985107421875);
    float _521 = (sqrt(isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0))) - _493) * 16.666667938232421875;
    float _523 = (sqrt(isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0))) - _495) * 16.666667938232421875;
    float _524 = (sqrt(isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0))) - _497) * 16.666667938232421875;
    float _525 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _526 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _527 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _538 = (((isnan(1.0) ? _526 : (isnan(_526) ? 1.0 : min(_526, 1.0))) * 0.58700001239776611328125) + ((isnan(1.0) ? _525 : (isnan(_525) ? 1.0 : min(_525, 1.0))) * 0.29890000820159912109375)) + ((isnan(1.0) ? _527 : (isnan(_527) ? 1.0 : min(_527, 1.0))) * 0.114000000059604644775390625);
    float _539 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    vec4 _548 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _444, cbSceneParam._m0[86u].y * _445));
    float _551 = _548.x * TEXCOORD.z;
    float _552 = dot(vec3(_369, _370, _371), vec3(_437, _438, _439));
    float _555 = _552 * 2.0;
    float _560 = (_555 * _369) - _437;
    float _561 = (_555 * _370) - _438;
    float _562 = (_555 * _371) - _439;
    float _566 = abs(dot(vec3(_437, _438, _439), vec3(_369, _370, _371)));
    float _3192 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _567 = isnan(1.0) ? _3192 : (isnan(_3192) ? 1.0 : min(_3192, 1.0));
    float _573 = sqrt(_376);
    float _585 = exp2((_573 * 5.0) * log2(1.0 - (_567 * 0.999000012874603271484375))) / (4.0 - (_573 * 3.0));
    float _591 = (1.0 - _585) * ((_573 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _592 = _585 * _573;
    float _620 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _624 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _628 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _794;
    float _796;
    float _797;
    float _798;
    float _799;
    float _800;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _655 = fma(_628, cbModelParam._m0[26u].z, fma(_624, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _620));
        float _659 = fma(_628, cbModelParam._m0[27u].z, fma(_624, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _620));
        float _663 = fma(_628, cbModelParam._m0[28u].z, fma(_624, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _620));
        float _687 = _620 + _369;
        float _688 = _624 + _370;
        float _689 = _628 + _371;
        float _699 = fma(_689, cbModelParam._m0[26u].z, fma(_688, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _687)) - _655;
        float _700 = fma(_689, cbModelParam._m0[27u].z, fma(_688, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _687)) - _659;
        float _701 = fma(_689, cbModelParam._m0[28u].z, fma(_688, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _687)) - _663;
        float _705 = inversesqrt(dot(vec3(_699, _700, _701), vec3(_699, _700, _701)));
        float _718 = ((_705 * _699) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_655 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _719 = ((_705 * _700) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_659 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _720 = ((_705 * _701) / cbModelParam._m0[34u].z) + ((((((_663 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _723 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_718, _719, _720), 0.0);
        vec4 _730 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_718, _719, _720), 0.0);
        vec4 _737 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_718, _719, _720), 0.0);
        vec4 _744 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_718, _719, _720), 0.0);
        float _757 = exp2((_723.w + (-0.5)) * 20.0) * 2.0;
        float _767 = exp2((_730.w + (-0.5)) * 20.0) * 2.0;
        float _777 = exp2((_737.w + (-0.5)) * 20.0) * 2.0;
        float _787 = exp2((_744.w + (-0.5)) * 20.0) * 2.0;
        float _788 = _787 * (_744.x + (-0.5));
        float _789 = _787 * (_744.y + (-0.5));
        float _790 = _787 * (_744.z + (-0.5));
        _794 = _757 * (_723.z + (-0.5));
        _796 = _757 * (_723.y + (-0.5));
        _797 = _757 * (_723.x + (-0.5));
        _798 = _767 * (_730.z + (-0.5));
        _799 = _767 * (_730.y + (-0.5));
        _800 = _767 * (_730.x + (-0.5));
        _801 = _777 * (_737.z + (-0.5));
        _802 = _777 * (_737.y + (-0.5));
        _803 = _777 * (_737.x + (-0.5));
        _804 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        _805 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        _806 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    }
    else
    {
        _794 = _795;
        _796 = _795;
        _797 = _795;
        _798 = _795;
        _799 = _795;
        _800 = _795;
        _801 = _795;
        _802 = _795;
        _803 = _795;
        _804 = _795;
        _805 = _795;
        _806 = _795;
    }
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _832 = fma(_628, cbModelParam._m0[30u].z, fma(_624, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _620));
        float _836 = fma(_628, cbModelParam._m0[31u].z, fma(_624, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _620));
        float _840 = fma(_628, cbModelParam._m0[32u].z, fma(_624, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _620));
        float _863 = _620 + _369;
        float _864 = _624 + _370;
        float _865 = _628 + _371;
        float _875 = fma(_865, cbModelParam._m0[30u].z, fma(_864, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _863)) - _832;
        float _876 = fma(_865, cbModelParam._m0[31u].z, fma(_864, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _863)) - _836;
        float _877 = fma(_865, cbModelParam._m0[32u].z, fma(_864, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _863)) - _840;
        float _881 = inversesqrt(dot(vec3(_875, _876, _877), vec3(_875, _876, _877)));
        float _894 = ((_881 * _875) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_832 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _895 = ((_881 * _876) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_836 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _896 = ((_881 * _877) / cbModelParam._m0[35u].z) + ((((((_840 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        float _931 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _941 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _951 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _961 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_919.x + (-0.5));
        float _963 = _961 * (_919.y + (-0.5));
        float _964 = _961 * (_919.z + (-0.5));
        _968 = _931 * (_898.z + (-0.5));
        _969 = _931 * (_898.y + (-0.5));
        _970 = _931 * (_898.x + (-0.5));
        _971 = _941 * (_905.z + (-0.5));
        _972 = _941 * (_905.y + (-0.5));
        _973 = _941 * (_905.x + (-0.5));
        _974 = _951 * (_912.z + (-0.5));
        _975 = _951 * (_912.y + (-0.5));
        _976 = _951 * (_912.x + (-0.5));
        _977 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        _978 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        _979 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    }
    else
    {
        _968 = _795;
        _969 = _795;
        _970 = _795;
        _971 = _795;
        _972 = _795;
        _973 = _795;
        _974 = _795;
        _975 = _795;
        _976 = _795;
        _977 = _795;
        _978 = _795;
        _979 = _795;
    }
    float _994 = _560 * 0.5;
    float _995 = _561 * 0.5;
    float _996 = _562 * 0.5;
    float _997 = dot(vec4(_994, _995, _996, 1.0), vec4(_970, _973, _976, _979));
    float _1000 = dot(vec4(_994, _995, _996, 1.0), vec4(_969, _972, _975, _978));
    float _1003 = dot(vec4(_994, _995, _996, 1.0), vec4(_968, _971, _974, _977));
    float _1038;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1010 = dot(vec4(_994, _995, _996, 1.0), vec4(_794, _798, _801, _804));
        float _1014 = dot(vec4(_994, _995, _996, 1.0), vec4(_796, _799, _802, _805));
        float _1018 = dot(vec4(_994, _995, _996, 1.0), vec4(_797, _800, _803, _806));
        float _1025 = dot(vec4(cbModelParam._m0[39u]), vec4(_994, _995, _996, 1.0));
        _1038 = dot(vec3(isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0)), isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0)), isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1025) ? 0.0 : (isnan(0.0) ? _1025 : max(0.0, _1025))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1038 = 1.0;
    }
    float _1049;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1040 = dot(vec4(cbModelParam._m0[40u]), vec4(_994, _995, _996, 1.0));
        _1049 = dot(vec3(isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0)), isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0)), isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1040) ? 0.0 : (isnan(0.0) ? _1040 : max(0.0, _1040))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1049 = 1.0;
    }
    float _1053 = (_1049 * cbModelParam._m0[1u].x) + (_1038 * (1.0 - cbModelParam._m0[1u].x));
    float _1060 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _376);
    float _1061 = isnan(_1060) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1060 : min(cbModelParam._m0[25u].z, _1060));
    float _1144;
    float _1146;
    float _1148;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1111 = fma(_628, cbModelParam._m0[13u].z, fma(_624, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _620)) + cbModelParam._m0[13u].w;
        float _1115 = fma(_628, cbModelParam._m0[14u].z, fma(_624, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _620)) + cbModelParam._m0[14u].w;
        float _1119 = fma(_628, cbModelParam._m0[15u].z, fma(_624, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _620)) + cbModelParam._m0[15u].w;
        float _1122 = fma(_562, cbModelParam._m0[13u].z, fma(_561, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _560));
        float _1125 = fma(_562, cbModelParam._m0[14u].z, fma(_561, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _560));
        float _1128 = fma(_562, cbModelParam._m0[15u].z, fma(_561, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _560));
        float _1156;
        if (_1122 > 0.0)
        {
            _1156 = abs((1.0 - _1111) / _1122);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1122 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1111 + 1.0) / _1122);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1156 = frontier_phi_16_14_ladder;
        }
        float _1349;
        if (_1125 > 0.0)
        {
            _1349 = abs((1.0 - _1115) / _1125);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1125 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1115 + 1.0) / _1125);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1349 = frontier_phi_25_21_ladder;
        }
        float _1768;
        if (_1128 > 0.0)
        {
            _1768 = abs((1.0 - _1119) / _1128);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1128 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1119 + 1.0) / _1128);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1768 = frontier_phi_37_32_ladder;
        }
        float _1770 = isnan(_1349) ? _1156 : (isnan(_1156) ? _1349 : min(_1156, _1349));
        float _1771 = isnan(_1768) ? _1770 : (isnan(_1770) ? _1768 : min(_1770, _1768));
        float _1775 = (_1771 * _1122) + _1111;
        float _1776 = (_1771 * _1125) + _1115;
        float _1777 = (_1771 * _1128) + _1119;
        float _1778 = _1771 * 9.9999997473787516355514526367188e-05;
        float _1780 = (-1.0) - _1778;
        float _1782 = _1778 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1777 > _1782) || ((_1777 < _1780) || ((_1776 > _1782) || ((_1776 < _1780) || ((_1775 < _1780) || (_1775 > _1782))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1979 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1777, cbModelParam._m0[9u].z, fma(_1776, cbModelParam._m0[9u].y, _1775 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1777, cbModelParam._m0[10u].z, fma(_1776, cbModelParam._m0[10u].y, _1775 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1777, cbModelParam._m0[11u].z, fma(_1776, cbModelParam._m0[11u].y, _1775 * cbModelParam._m0[11u].x))), _1061);
            frontier_phi_15_37_ladder = _1979.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1979.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1979.x * cbModelParam._m0[1u].y;
        }
        _1144 = frontier_phi_15_37_ladder_2;
        _1146 = frontier_phi_15_37_ladder_1;
        _1148 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1132 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_560, _561, _562), _1061);
        _1144 = _1132.x * cbModelParam._m0[1u].y;
        _1146 = _1132.y * cbModelParam._m0[1u].y;
        _1148 = _1132.z * cbModelParam._m0[1u].y;
    }
    float _1152 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _376);
    float _1153 = isnan(_1152) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1152 : min(cbModelParam._m0[25u].w, _1152));
    float _1246;
    float _1248;
    float _1250;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1210 = fma(_628, cbModelParam._m0[21u].z, fma(_624, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _620)) + cbModelParam._m0[21u].w;
        float _1214 = fma(_628, cbModelParam._m0[22u].z, fma(_624, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _620)) + cbModelParam._m0[22u].w;
        float _1218 = fma(_628, cbModelParam._m0[23u].z, fma(_624, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _620)) + cbModelParam._m0[23u].w;
        float _1221 = fma(_562, cbModelParam._m0[21u].z, fma(_561, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _560));
        float _1224 = fma(_562, cbModelParam._m0[22u].z, fma(_561, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _560));
        float _1227 = fma(_562, cbModelParam._m0[23u].z, fma(_561, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _560));
        float _1354;
        if (_1221 > 0.0)
        {
            _1354 = abs((1.0 - _1210) / _1221);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1221 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1210 + 1.0) / _1221);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1354 = frontier_phi_27_23_ladder;
        }
        float _1795;
        if (_1224 > 0.0)
        {
            _1795 = abs((1.0 - _1214) / _1224);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1224 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1214 + 1.0) / _1224);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1795 = frontier_phi_39_34_ladder;
        }
        float _2082;
        if (_1227 > 0.0)
        {
            _2082 = abs((1.0 - _1218) / _1227);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1227 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1218 + 1.0) / _1227);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2082 = frontier_phi_49_46_ladder;
        }
        float _2084 = isnan(_1795) ? _1354 : (isnan(_1354) ? _1795 : min(_1354, _1795));
        float _2085 = isnan(_2082) ? _2084 : (isnan(_2084) ? _2082 : min(_2084, _2082));
        float _2089 = (_2085 * _1221) + _1210;
        float _2090 = (_2085 * _1224) + _1214;
        float _2091 = (_2085 * _1227) + _1218;
        float _2092 = _2085 * 9.9999997473787516355514526367188e-05;
        float _2093 = (-1.0) - _2092;
        float _2095 = _2092 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2091 > _2095) || ((_2091 < _2093) || ((_2090 > _2095) || ((_2090 < _2093) || ((_2089 < _2093) || (_2089 > _2095))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2240 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2091, cbModelParam._m0[17u].z, fma(_2090, cbModelParam._m0[17u].y, _2089 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2091, cbModelParam._m0[18u].z, fma(_2090, cbModelParam._m0[18u].y, _2089 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2091, cbModelParam._m0[19u].z, fma(_2090, cbModelParam._m0[19u].y, _2089 * cbModelParam._m0[19u].x))), _1153);
            frontier_phi_24_49_ladder = _2240.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2240.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2240.x * cbModelParam._m0[1u].z;
        }
        _1246 = frontier_phi_24_49_ladder_2;
        _1248 = frontier_phi_24_49_ladder_1;
        _1250 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1230 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_560, _561, _562), _1153);
        _1246 = _1230.x * cbModelParam._m0[1u].z;
        _1248 = _1230.y * cbModelParam._m0[1u].z;
        _1250 = _1230.z * cbModelParam._m0[1u].z;
    }
    float _1263 = (((_591 * _373) + _592) * _551) * ((cbModelParam._m0[1u].w * (_1246 - _1144)) + _1144);
    float _1265 = (((_591 * _374) + _592) * _551) * ((cbModelParam._m0[1u].w * (_1248 - _1146)) + _1146);
    float _1267 = (((_591 * _375) + _592) * _551) * ((cbModelParam._m0[1u].w * (_1250 - _1148)) + _1148);
    float _1288 = fma(_1267, cbSceneParam._m0[89u].z, fma(_1265, cbSceneParam._m0[89u].y, _1263 * cbSceneParam._m0[89u].x));
    float _1291 = fma(_1267, cbSceneParam._m0[90u].z, fma(_1265, cbSceneParam._m0[90u].y, _1263 * cbSceneParam._m0[90u].x));
    float _1294 = fma(_1267, cbSceneParam._m0[91u].z, fma(_1265, cbSceneParam._m0[91u].y, _1263 * cbSceneParam._m0[91u].x));
    float _1328 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1332 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1336 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1340 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1341 = _1328 / _1340;
    float _1342 = _1332 / _1340;
    float _1343 = _1336 / _1340;
    float _1490;
    float _1491;
    float _1492;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1370 = ((uint(_1343 > cbSceneParam._m0[59u].y) + uint(_1343 > cbSceneParam._m0[59u].x)) + uint(_1343 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1371 = _1370 + 43u;
        uint _1379 = _1370 + 44u;
        uint _1387 = _1370 + 45u;
        uint _1395 = _1370 + 46u;
        float _1406 = fma(_1340, cbSceneParam._m0[_1371].w, fma(_1336, cbSceneParam._m0[_1371].z, fma(_1332, cbSceneParam._m0[_1371].y, _1328 * cbSceneParam._m0[_1371].x)));
        float _1410 = fma(_1340, cbSceneParam._m0[_1379].w, fma(_1336, cbSceneParam._m0[_1379].z, fma(_1332, cbSceneParam._m0[_1379].y, _1328 * cbSceneParam._m0[_1379].x)));
        float _1418 = fma(_1340, cbSceneParam._m0[_1395].w, fma(_1336, cbSceneParam._m0[_1395].z, fma(_1332, cbSceneParam._m0[_1395].y, _1328 * cbSceneParam._m0[_1395].x)));
        float _1423 = cbSceneParam._m0[33u].z * _1418;
        float _1425 = cbSceneParam._m0[33u].w * _1418;
        float _1428 = fma(_1340, cbSceneParam._m0[_1387].w, fma(_1336, cbSceneParam._m0[_1387].z, fma(_1332, cbSceneParam._m0[_1387].y, _1328 * cbSceneParam._m0[_1387].x))) / _1418;
        float _1476 = (cbSceneParam._m0[33u].x - sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343))) * cbSceneParam._m0[33u].y;
        float _3318 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1483 = (isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1423 + _1406) / _1418, (_1425 + _1410) / _1418), _1428), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1425 + _1406) / _1418, (_1410 - _1423) / _1418), _1428), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1406 - _1423) / _1418, (_1410 - _1425) / _1418), _1428), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1406 - _1425) / _1418, (_1423 + _1410) / _1418), _1428), 0.0)).x), vec4(0.25)));
        _1490 = 1.0 - (_1483 * cbSceneParam._m0[34u].x);
        _1491 = 1.0 - (_1483 * cbSceneParam._m0[34u].y);
        _1492 = 1.0 - (_1483 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1490 = 1.0;
        _1491 = 1.0;
        _1492 = 1.0;
    }
    float _1556;
    float _1558;
    float _1560;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1544 = fma(_1340, cbSceneParam._m0[63u].w, fma(_1336, cbSceneParam._m0[63u].z, fma(_1332, cbSceneParam._m0[63u].y, _1328 * cbSceneParam._m0[63u].x)));
        float _1545 = fma(_1340, cbSceneParam._m0[60u].w, fma(_1336, cbSceneParam._m0[60u].z, fma(_1332, cbSceneParam._m0[60u].y, _1328 * cbSceneParam._m0[60u].x))) / _1544;
        float _1546 = fma(_1340, cbSceneParam._m0[61u].w, fma(_1336, cbSceneParam._m0[61u].z, fma(_1332, cbSceneParam._m0[61u].y, _1328 * cbSceneParam._m0[61u].x))) / _1544;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1545 >= cbSceneParam._m0[64u].x) && (_1546 >= cbSceneParam._m0[64u].y)) && (_1545 <= cbSceneParam._m0[64u].z)) && (_1546 <= cbSceneParam._m0[64u].w))
        {
            float _1808 = fma(_1340, cbSceneParam._m0[62u].w, fma(_1336, cbSceneParam._m0[62u].z, fma(_1332, cbSceneParam._m0[62u].y, _1328 * cbSceneParam._m0[62u].x))) / _1544;
            float _1812 = isnan(cbSceneParam._m0[41u].w) ? _1808 : (isnan(_1808) ? cbSceneParam._m0[41u].w : max(_1808, cbSceneParam._m0[41u].w));
            float _1855 = (cbSceneParam._m0[33u].x - sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343))) * cbSceneParam._m0[33u].y;
            float _3334 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
            float _1862 = (isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1545, cbSceneParam._m0[33u].w + _1546), _1812), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1545, _1546 - cbSceneParam._m0[33u].z), _1812), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1545 - cbSceneParam._m0[33u].z, _1546 - cbSceneParam._m0[33u].w), _1812), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1545 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1546), _1812), 0.0)).x), vec4(0.25)));
            float _1866 = 1.0 - (_1862 * cbSceneParam._m0[34u].x);
            float _1867 = 1.0 - (_1862 * cbSceneParam._m0[34u].y);
            float _1868 = 1.0 - (_1862 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1868) ? _1492 : (isnan(_1492) ? _1868 : min(_1492, _1868));
            frontier_phi_36_35_ladder_1 = isnan(_1866) ? _1490 : (isnan(_1490) ? _1866 : min(_1490, _1866));
            frontier_phi_36_35_ladder_2 = isnan(_1867) ? _1491 : (isnan(_1491) ? _1867 : min(_1491, _1867));
        }
        else
        {
            frontier_phi_36_35_ladder = _1492;
            frontier_phi_36_35_ladder_1 = _1490;
            frontier_phi_36_35_ladder_2 = _1491;
        }
        _1556 = frontier_phi_36_35_ladder_1;
        _1558 = frontier_phi_36_35_ladder_2;
        _1560 = frontier_phi_36_35_ladder;
    }
    else
    {
        _1556 = _1490;
        _1558 = _1491;
        _1560 = _1492;
    }
    uint _1562 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1566 = floatBitsToUint(cbInstanceData._m0[_1562 + 5u]);
    uint _1568 = _1566.x * 14u;
    uint _1569 = _1568 + 13u;
    float _1575 = _551 + (-1.0);
    float _1580 = (cbLight._m0[_1569].x * _1575) + 1.0;
    float _1581 = (cbLight._m0[_1569].y * _1575) + 1.0;
    float _1582 = (cbLight._m0[_1569].w * _1575) + 1.0;
    uint _1586 = _1568 + 8u;
    float _1602 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1568].w)) * _376) * 0.949999988079071044921875);
    float _1603 = _1602 * _1602;
    float _1604 = cbLight._m0[_1568].x + _437;
    float _1605 = cbLight._m0[_1568].y + _438;
    float _1606 = cbLight._m0[_1568].z + _439;
    float _1610 = inversesqrt(dot(vec3(_1604, _1605, _1606), vec3(_1604, _1605, _1606)));
    float _1611 = _1610 * _1604;
    float _1612 = _1610 * _1605;
    float _1613 = _1610 * _1606;
    float _1614 = dot(vec3(_369, _370, _371), vec3(cbLight._m0[_1568].xyz));
    float _3360 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
    float _1617 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
    float _3371 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _1618 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
    float _1619 = dot(vec3(_369, _370, _371), vec3(_1611, _1612, _1613));
    float _3382 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
    float _1622 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
    float _1623 = dot(vec3(cbLight._m0[_1568].xyz), vec3(_1611, _1612, _1613));
    float _3393 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
    float _1627 = _1603 * _1603;
    float _1631 = ((_1622 * _1622) * (_1627 + (-1.0))) + 1.0;
    float _1639 = exp2(log2(1.0 - (isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0)))) * 5.0);
    float _1640 = 1.0 - _373;
    float _1641 = 1.0 - _374;
    float _1642 = 1.0 - _375;
    float _1649 = 1.0 - _1603;
    float _1660 = (0.5 / (((_1618 * ((_1617 * _1649) + _1603)) + 9.9999999392252902907785028219223e-09) + (((_1618 * _1649) + _1603) * _1617))) * _1617;
    float _3404 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
    float _1662 = (isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0))) * (_1627 / ((_1631 * _1631) * 3.141590118408203125));
    float _1663 = isnan(1.0) ? _1580 : (isnan(_1580) ? 1.0 : min(_1580, 1.0));
    uint _1676 = _1568 | 1u;
    uint _1680 = _1568 + 9u;
    float _1694 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1676].w)) * _376) * 0.949999988079071044921875);
    float _1695 = _1694 * _1694;
    float _1696 = cbLight._m0[_1676].x + _437;
    float _1697 = cbLight._m0[_1676].y + _438;
    float _1698 = cbLight._m0[_1676].z + _439;
    float _1702 = inversesqrt(dot(vec3(_1696, _1697, _1698), vec3(_1696, _1697, _1698)));
    float _1703 = _1702 * _1696;
    float _1704 = _1702 * _1697;
    float _1705 = _1702 * _1698;
    float _1706 = dot(vec3(_369, _370, _371), vec3(cbLight._m0[_1676].xyz));
    float _3420 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
    float _1709 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
    float _1710 = dot(vec3(_369, _370, _371), vec3(_1703, _1704, _1705));
    float _3431 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
    float _1713 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
    float _1714 = dot(vec3(cbLight._m0[_1676].xyz), vec3(_1703, _1704, _1705));
    float _3442 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _1718 = _1695 * _1695;
    float _1722 = ((_1713 * _1713) * (_1718 + (-1.0))) + 1.0;
    float _1729 = exp2(log2(1.0 - (isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0)))) * 5.0);
    float _1736 = 1.0 - _1695;
    float _1746 = (0.5 / (((_1618 * ((_1709 * _1736) + _1695)) + 9.9999999392252902907785028219223e-09) + (((_1618 * _1736) + _1695) * _1709))) * _1709;
    float _3453 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _1748 = (isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0))) * (_1718 / ((_1722 * _1722) * 3.141590118408203125));
    float _1749 = isnan(1.0) ? _1581 : (isnan(_1581) ? 1.0 : min(_1581, 1.0));
    float _1759 = (((((_1729 * _1640) + _373) * cbLight._m0[_1680].x) * _1748) * _1749) + ((((cbLight._m0[_1586].x * _1556) * ((_1639 * _1640) + _373)) * _1662) * _1663);
    float _1760 = (((((_1729 * _1641) + _374) * cbLight._m0[_1680].y) * _1748) * _1749) + ((((cbLight._m0[_1586].y * _1558) * ((_1639 * _1641) + _374)) * _1662) * _1663);
    float _1761 = (((((_1729 * _1642) + _375) * cbLight._m0[_1680].z) * _1748) * _1749) + ((((cbLight._m0[_1586].z * _1560) * ((_1639 * _1642) + _375)) * _1662) * _1663);
    uvec4 _1765 = floatBitsToUint(cbLight._m0[_1568 + 12u]);
    float _1869;
    float _1871;
    float _1873;
    if (_1765.x == 0u)
    {
        _1869 = _1759;
        _1871 = _1760;
        _1873 = _1761;
    }
    else
    {
        float _1879 = (cbLight._m0[_1569].z * _1575) + 1.0;
        uint _1880 = _1568 + 2u;
        uint _1884 = _1568 + 10u;
        float _1898 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1880].w)) * _376) * 0.949999988079071044921875);
        float _1899 = _1898 * _1898;
        float _1900 = cbLight._m0[_1880].x + _437;
        float _1901 = cbLight._m0[_1880].y + _438;
        float _1902 = cbLight._m0[_1880].z + _439;
        float _1906 = inversesqrt(dot(vec3(_1900, _1901, _1902), vec3(_1900, _1901, _1902)));
        float _1907 = _1906 * _1900;
        float _1908 = _1906 * _1901;
        float _1909 = _1906 * _1902;
        float _1910 = dot(vec3(_369, _370, _371), vec3(cbLight._m0[_1880].xyz));
        float _3469 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1913 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
        float _1914 = dot(vec3(_369, _370, _371), vec3(_1907, _1908, _1909));
        float _3480 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
        float _1917 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
        float _1918 = dot(vec3(cbLight._m0[_1880].xyz), vec3(_1907, _1908, _1909));
        float _3491 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1922 = _1899 * _1899;
        float _1926 = ((_1917 * _1917) * (_1922 + (-1.0))) + 1.0;
        float _1933 = exp2(log2(1.0 - (isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0)))) * 5.0);
        float _1940 = 1.0 - _1899;
        float _1950 = (0.5 / (((_1618 * ((_1913 * _1940) + _1899)) + 9.9999999392252902907785028219223e-09) + (((_1618 * _1940) + _1899) * _1913))) * _1913;
        float _3502 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
        float _1952 = (isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0))) * (_1922 / ((_1926 * _1926) * 3.141590118408203125));
        float _1953 = isnan(1.0) ? _1879 : (isnan(_1879) ? 1.0 : min(_1879, 1.0));
        _1869 = (((((_1933 * _1640) + _373) * cbLight._m0[_1884].x) * _1952) * _1953) + _1759;
        _1871 = (((((_1933 * _1641) + _374) * cbLight._m0[_1884].y) * _1952) * _1953) + _1760;
        _1873 = (((((_1933 * _1642) + _375) * cbLight._m0[_1884].z) * _1952) * _1953) + _1761;
    }
    float _1988;
    float _1990;
    float _1992;
    if (_1765.y == 0u)
    {
        _1988 = _1869;
        _1990 = _1871;
        _1992 = _1873;
    }
    else
    {
        uint _1999 = _1568 + 3u;
        uint _2003 = _1568 + 11u;
        float _2017 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1999].w)) * _376) * 0.949999988079071044921875);
        float _2018 = _2017 * _2017;
        float _2019 = cbLight._m0[_1999].x + _437;
        float _2020 = cbLight._m0[_1999].y + _438;
        float _2021 = cbLight._m0[_1999].z + _439;
        float _2025 = inversesqrt(dot(vec3(_2019, _2020, _2021), vec3(_2019, _2020, _2021)));
        float _2026 = _2025 * _2019;
        float _2027 = _2025 * _2020;
        float _2028 = _2025 * _2021;
        float _2029 = dot(vec3(_369, _370, _371), vec3(cbLight._m0[_1999].xyz));
        float _3518 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2032 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _2033 = dot(vec3(_369, _370, _371), vec3(_2026, _2027, _2028));
        float _3529 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        float _2036 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _2037 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_2026, _2027, _2028));
        float _3540 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2041 = _2018 * _2018;
        float _2045 = ((_2036 * _2036) * (_2041 + (-1.0))) + 1.0;
        float _2052 = exp2(log2(1.0 - (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0)))) * 5.0);
        float _2059 = 1.0 - _2018;
        float _2069 = (0.5 / (((_1618 * ((_2032 * _2059) + _2018)) + 9.9999999392252902907785028219223e-09) + (((_1618 * _2059) + _2018) * _2032))) * _2032;
        float _3551 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2071 = (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * (_2041 / ((_2045 * _2045) * 3.141590118408203125));
        float _2072 = isnan(1.0) ? _1582 : (isnan(_1582) ? 1.0 : min(_1582, 1.0));
        _1988 = (((((_2052 * _1640) + _373) * cbLight._m0[_2003].x) * _2071) * _2072) + _1869;
        _1990 = (((((_2052 * _1641) + _374) * cbLight._m0[_2003].y) * _2071) * _2072) + _1871;
        _1992 = (((((_2052 * _1642) + _375) * cbLight._m0[_2003].z) * _2071) * _2072) + _1873;
    }
    float _2164;
    float _2166;
    float _2168;
    if (_1566.y == 0u)
    {
        uvec4 _2119 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2120 = _2119.x;
        uint _2131 = uint((float(_2119.y) * floor(float(uint(cbSceneParam._m0[85u].y * _445) / _2120))) + floor(float(uint(cbSceneParam._m0[85u].x * _444) / _2120)));
        float _2141 = (log2(_1343 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2142 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        uint _2145 = uint(isnan(14.0) ? _2142 : (isnan(_2142) ? 14.0 : min(_2142, 14.0)));
        uvec4 _2150 = texelFetch(g_lightClusterGridBuffer, int(((_2145 << 2u) + (_2131 << 6u)) >> 2u));
        uint _2151 = _2150.x;
        uint _2152 = _2119.z;
        float _2245;
        float _2247;
        float _2249;
        if (((((1u << ((_2152 >> 4u) & 15u)) + 4294967295u) & _2151) == 0u) || ((_2152 & 240u) == 0u))
        {
            _2245 = 0.0;
            _2247 = 0.0;
            _2249 = 0.0;
        }
        else
        {
            float _2246;
            float _2248;
            float _2250;
            float _2373 = 0.0;
            float _2374 = 0.0;
            float _2375 = 0.0;
            uint _2376 = 0u;
            uint _2385;
            bool _2386;
            for (;;)
            {
                _2385 = texelFetch(g_lightClassification, int((((_2145 << 5u) + (_2131 << 9u)) + (_2376 << 2u)) >> 2u)).x;
                _2386 = _2385 == 0u;
                float frontier_phi_64_pred;
                float frontier_phi_64_pred_1;
                float frontier_phi_64_pred_2;
                if (_2386)
                {
                    frontier_phi_64_pred = _2375;
                    frontier_phi_64_pred_1 = _2374;
                    frontier_phi_64_pred_2 = _2373;
                }
                else
                {
                    float _2488;
                    float _2489;
                    float _2490;
                    uint _2491;
                    _2488 = _2373;
                    _2489 = _2374;
                    _2490 = _2375;
                    _2491 = _2385;
                    float _2426;
                    float _2427;
                    float _2428;
                    for (;;)
                    {
                        uint _2495 = uint(findLSB(_2491)) + (_2376 << 5u);
                        uint _2492 = (_2491 + 4294967295u) & _2491;
                        uint _2497 = _2495 * 48u;
                        vec4 _2511 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2497)).x, texelFetch(g_PointLightRenderingBuffer, int(_2497 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2497 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2497 + 3u)).x));
                        uint _2528 = (_2495 * 48u) + 8u;
                        vec3 _2539 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2528)).x, texelFetch(g_PointLightRenderingBuffer, int(_2528 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2528 + 2u)).x));
                        float _2543 = _2511.x - _1341;
                        float _2544 = _2511.y - _1342;
                        float _2545 = _2511.z - _1343;
                        float _2546 = dot(vec3(_2543, _2544, _2545), vec3(_2543, _2544, _2545));
                        float _2549 = inversesqrt(_2546);
                        float _2550 = _2549 * _2543;
                        float _2551 = _2549 * _2544;
                        float _2552 = _2549 * _2545;
                        float _2558 = 1.0 - (_2546 * _2511.w);
                        float _3577 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
                        float _2560 = sqrt(_2546) * uintBitsToFloat(uvec4(_2518, _2519, _2520, texelFetch(g_PointLightRenderingBuffer, int(((_2495 * 48u) + 4u) + 3u)).x)).w;
                        float _2564 = _2560 * _2560;
                        float _2565 = (-0.0) - _1341;
                        float _2566 = (-0.0) - _1342;
                        float _2567 = (-0.0) - _1343;
                        float _2571 = inversesqrt(dot(vec3(_2565, _2566, _2567), vec3(_2565, _2566, _2567)));
                        float _2572 = _2571 * _2565;
                        float _2573 = _2571 * _2566;
                        float _2574 = _2571 * _2567;
                        float _2581 = exp2(log2(1.0 / ((_2564 * 3.5) + 5.0)) * 0.25);
                        float _2582 = 1.0 - _573;
                        float _2589 = sqrt(1.0 - ((1.0 - (_2582 * _2582)) * (1.0 - (_2581 * _2581))));
                        float _2590 = _2589 * _2589;
                        float _2591 = _2590 * _2590;
                        float _2592 = _2572 + _2550;
                        float _2593 = _2573 + _2551;
                        float _2594 = _2574 + _2552;
                        float _2598 = inversesqrt(dot(vec3(_2592, _2593, _2594), vec3(_2592, _2593, _2594)));
                        float _2602 = dot(vec3(_466, _469, _472), vec3(_2572, _2573, _2574));
                        float _3588 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
                        float _2605 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
                        float _2606 = dot(vec3(_466, _469, _472), vec3(_2598 * _2592, _2598 * _2593, _2598 * _2594));
                        float _3599 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
                        float _2609 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
                        float _2613 = ((_2609 * _2609) * (_2591 + (-1.0))) + 1.0;
                        float _2614 = (1.39999997615814208984375 / (_2560 + 1.39999997615814208984375)) * _2590;
                        float _2615 = _2614 * _2614;
                        float _2618 = ((1.0 - _2615) * dot(vec3(_466, _469, _472), vec3(_2550, _2551, _2552))) + _2615;
                        float _3610 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
                        float _2619 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
                        float _2620 = 1.0 - _2590;
                        float _2630 = (0.5 / (((_2619 * ((_2605 * _2620) + _2590)) + 9.9999999392252902907785028219223e-09) + (((_2619 * _2620) + _2590) * _2605))) * _2619;
                        float _3621 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
                        float _2641 = (((_2591 * 3.1415927410125732421875) * (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0)))) / ((_2613 * _2613) * ((_2564 * 2.1991131305694580078125) + 3.141590118408203125))) * (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0)));
                        _2426 = (_2641 * _2539.x) + _2488;
                        _2427 = (_2641 * _2539.y) + _2489;
                        _2428 = (_2641 * _2539.z) + _2490;
                        if (_2492 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2488 = _2426;
                            _2489 = _2427;
                            _2490 = _2428;
                            _2491 = _2492;
                        }
                    }
                    frontier_phi_64_pred = _2428;
                    frontier_phi_64_pred_1 = _2427;
                    frontier_phi_64_pred_2 = _2426;
                }
                _2250 = frontier_phi_64_pred;
                _2248 = frontier_phi_64_pred_1;
                _2246 = frontier_phi_64_pred_2;
                uint _2377 = _2376 + 1u;
                if (_2377 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2373 = _2246;
                    _2374 = _2248;
                    _2375 = _2250;
                    _2376 = _2377;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2245 = _2246;
            _2247 = _2248;
            _2249 = _2250;
        }
        uvec4 _2253 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2254 = _2253.z;
        uint _2256 = (_2254 >> 8u) & 15u;
        float _2350;
        float _2352;
        float _2354;
        if (((4294967295u << _2256) & _2151) == 0u)
        {
            _2350 = _2245;
            _2352 = _2247;
            _2354 = _2249;
        }
        else
        {
            float _2366 = inversesqrt(dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343)));
            float _2367 = _2366 * _1341;
            float _2368 = _2366 * _1342;
            float _2369 = _2366 * _1343;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            if (_2256 < ((_2254 >> 12u) & 15u))
            {
                float _2351;
                float _2353;
                float _2355;
                float _2474 = _2245;
                float _2475 = _2247;
                float _2476 = _2249;
                uint _2477 = _2256;
                uint _2486;
                bool _2487;
                for (;;)
                {
                    _2486 = texelFetch(g_lightClassification, int((((_2145 << 5u) + (_2131 << 9u)) + (_2477 << 2u)) >> 2u)).x;
                    _2487 = _2486 == 0u;
                    float frontier_phi_70_pred;
                    float frontier_phi_70_pred_1;
                    float frontier_phi_70_pred_2;
                    if (_2487)
                    {
                        frontier_phi_70_pred = _2476;
                        frontier_phi_70_pred_1 = _2474;
                        frontier_phi_70_pred_2 = _2475;
                    }
                    else
                    {
                        float _2646;
                        float _2647;
                        float _2648;
                        float _2912;
                        float _2913;
                        float _2914;
                        float _2656 = _2474;
                        float _2657 = _2475;
                        float _2658 = _2476;
                        uint _2659 = _2486;
                        uint _2660;
                        uint _2670;
                        vec4 _2685;
                        float _2686;
                        vec3 _2698;
                        vec4 _2714;
                        vec4 _2730;
                        float _2777;
                        bool _2778;
                        for (;;)
                        {
                            _2670 = ((_2477 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2659));
                            _2660 = (_2659 + 4294967295u) & _2659;
                            uint _2672 = _2670 * 40u;
                            _2685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2672 + 3u)).x));
                            _2686 = _2685.w;
                            uint _2688 = (_2670 * 40u) + 8u;
                            _2698 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2688 + 2u)).x));
                            uint _2701 = (_2670 * 40u) + 16u;
                            _2714 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2701)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2701 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2701 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2701 + 3u)).x));
                            uint _2717 = (_2670 * 40u) + 20u;
                            _2730 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2717)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2717 + 3u)).x));
                            uint _2733 = (_2670 * 40u) + 24u;
                            vec4 _2746 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2733)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2733 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2733 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2733 + 3u)).x));
                            uint _2752 = (_2670 * 40u) + 28u;
                            vec4 _2765 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2752)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2752 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2752 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2752 + 3u)).x));
                            _2777 = fma(_1343, _2765.z, fma(_1342, _2765.y, _2765.x * _1341)) + _2765.w;
                            _2778 = !((fma(_1343, _2746.z, fma(_1342, _2746.y, _2746.x * _1341)) + _2746.w) <= 0.0);
                            float frontier_phi_76_pred;
                            float frontier_phi_76_pred_1;
                            float frontier_phi_76_pred_2;
                            if (_2778)
                            {
                                float _2812 = _2685.x - _1341;
                                float _2813 = _2685.y - _1342;
                                float _2814 = _2685.z - _1343;
                                float _2815 = dot(vec3(_2812, _2813, _2814), vec3(_2812, _2813, _2814));
                                float _2818 = inversesqrt(_2815);
                                float _2819 = _2818 * _2812;
                                float _2820 = _2818 * _2813;
                                float _2821 = _2818 * _2814;
                                float _2825 = 1.0 - (_2815 / (_2686 * _2686));
                                float _3632 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
                                float _2827 = sqrt(_2815) * uintBitsToFloat(uvec4(_2781, _2782, _2783, texelFetch(g_SpotLightRenderingBuffer, int(((_2670 * 40u) + 4u) + 3u)).x)).w;
                                float _2830 = _2827 * _2827;
                                float _2831 = (fma(_1343, _2714.z, fma(_1342, _2714.y, _2714.x * _1341)) + _2714.w) / _2777;
                                float _2832 = (fma(_1343, _2730.z, fma(_1342, _2730.y, _2730.x * _1341)) + _2730.w) / _2777;
                                float _2836 = 1.0 - dot(vec2(_2831, _2832), vec2(_2831, _2832));
                                float _3643 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
                                float _2846 = exp2(log2(1.0 / ((_2830 * 3.5) + 5.0)) * 0.25);
                                float _2847 = 1.0 - _573;
                                float _2854 = sqrt(1.0 - ((1.0 - (_2847 * _2847)) * (1.0 - (_2846 * _2846))));
                                float _2855 = _2854 * _2854;
                                float _2856 = _2855 * _2855;
                                float _2857 = _2819 - _2367;
                                float _2858 = _2820 - _2368;
                                float _2859 = _2821 - _2369;
                                float _2863 = inversesqrt(dot(vec3(_2857, _2858, _2859), vec3(_2857, _2858, _2859)));
                                float _2867 = dot(vec3(_466, _469, _472), vec3((-0.0) - _2367, (-0.0) - _2368, (-0.0) - _2369));
                                float _3654 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
                                float _2870 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
                                float _2871 = dot(vec3(_466, _469, _472), vec3(_2863 * _2857, _2863 * _2858, _2863 * _2859));
                                float _3665 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
                                float _2874 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
                                float _2878 = ((_2874 * _2874) * (_2856 + (-1.0))) + 1.0;
                                float _2879 = (1.39999997615814208984375 / (_2827 + 1.39999997615814208984375)) * _2855;
                                float _2880 = _2879 * _2879;
                                float _2886 = ((1.0 - _2880) * dot(vec3(_466, _469, _472), vec3(_2819, _2820, _2821))) + _2880;
                                float _3676 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
                                float _2887 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
                                float _2888 = 1.0 - _2855;
                                float _2898 = (0.5 / (((_2887 * ((_2870 * _2888) + _2855)) + 9.9999999392252902907785028219223e-09) + (((_2887 * _2888) + _2855) * _2870))) * _2887;
                                float _3687 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
                                float _2908 = ((isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0)))) * (((_2856 * 3.1415927410125732421875) * (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)))) / ((_2878 * _2878) * ((_2830 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_76_pred = _2908 * _2698.z;
                                frontier_phi_76_pred_1 = _2908 * _2698.y;
                                frontier_phi_76_pred_2 = _2908 * _2698.x;
                            }
                            else
                            {
                                frontier_phi_76_pred = 0.0;
                                frontier_phi_76_pred_1 = 0.0;
                                frontier_phi_76_pred_2 = 0.0;
                            }
                            _2914 = frontier_phi_76_pred;
                            _2913 = frontier_phi_76_pred_1;
                            _2912 = frontier_phi_76_pred_2;
                            _2646 = _2912 + _2656;
                            _2647 = _2913 + _2657;
                            _2648 = _2914 + _2658;
                            if (_2660 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2656 = _2646;
                                _2657 = _2647;
                                _2658 = _2648;
                                _2659 = _2660;
                                continue;
                            }
                        }
                        frontier_phi_70_pred = _2648;
                        frontier_phi_70_pred_1 = _2646;
                        frontier_phi_70_pred_2 = _2647;
                    }
                    _2355 = frontier_phi_70_pred;
                    _2351 = frontier_phi_70_pred_1;
                    _2353 = frontier_phi_70_pred_2;
                    uint _2478 = _2477 + 1u;
                    if (_2478 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2474 = _2351;
                        _2475 = _2353;
                        _2476 = _2355;
                        _2477 = _2478;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2355;
                frontier_phi_58_59_ladder_1 = _2353;
                frontier_phi_58_59_ladder_2 = _2351;
            }
            else
            {
                frontier_phi_58_59_ladder = _2249;
                frontier_phi_58_59_ladder_1 = _2247;
                frontier_phi_58_59_ladder_2 = _2245;
            }
            _2350 = frontier_phi_58_59_ladder_2;
            _2352 = frontier_phi_58_59_ladder_1;
            _2354 = frontier_phi_58_59_ladder;
        }
        float _2359 = isnan(1.0) ? _551 : (isnan(_551) ? 1.0 : min(_551, 1.0));
        _2164 = ((_2350 * _373) * _2359) + _1988;
        _2166 = ((_2352 * _374) * _2359) + _1990;
        _2168 = ((_2354 * _375) * _2359) + _1992;
    }
    else
    {
        _2164 = _1988;
        _2166 = _1990;
        _2168 = _1992;
    }
    float _2172 = 0.959999978542327880859375 - ((isnan(1.0) ? _539 : (isnan(_539) ? 1.0 : min(_539, 1.0))) * 0.959999978542327880859375);
    float _2180 = _2172 - (exp2(log2(1.0 - _567) * 5.0) * _2172);
    uint _2187 = _1562 + 6u;
    float _2195 = _444 / cbSceneParam._m0[86u].x;
    float _2196 = _445 / cbSceneParam._m0[86u].y;
    vec4 _2210 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2195, _2196, (log2((isnan(cbSceneParam._m0[77u].w) ? _381 : (isnan(_381) ? cbSceneParam._m0[77u].w : min(_381, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2212 = _2210.x;
    float _2213 = _2210.y;
    float _2214 = _2210.z;
    float _2215 = _2210.w;
    float _2301;
    float _2303;
    float _2305;
    float _2307;
    if (_381 > cbSceneParam._m0[78u].w)
    {
        float _2264 = isnan(_381) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _381 : min(cbSceneParam._m0[80u].w, _381));
        float _2265 = _2264 / _381;
        float _2276 = _2265 * _430;
        float _2277 = _431 * _2265;
        float _2278 = (-0.0) - _2277;
        float _2279 = _2265 * _432;
        float _2281 = (cbSceneParam._m0[77u].w * _2278) / _2264;
        float _2282 = _2281 + cbSceneParam._m0[79u].w;
        float _2283 = cbSceneParam._m0[79u].w - _2277;
        float _2289 = sqrt(((_2276 * _2276) + (_2277 * _2277)) + (_2279 * _2279));
        float _2292 = (1.0 - (cbSceneParam._m0[77u].w / _2264)) * _2289;
        float _2297 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2299 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2436;
        if (abs((_2278 - _2281) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2436 = ((((_2282 > 0.0) ? exp2(_2297 * _2282) : (2.0 - exp2(_2299 * _2282))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2292;
        }
        else
        {
            float _2399 = 1.0 / cbSceneParam._m0[80u].x;
            float _2400 = isnan(_2283) ? _2282 : (isnan(_2282) ? _2283 : max(_2282, _2283));
            float _2401 = isnan(_2283) ? _2282 : (isnan(_2282) ? _2283 : min(_2282, _2283));
            float _2410 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : min(_2400, 0.0));
            float _2411 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : min(_2401, 0.0));
            _2436 = ((abs(_2289 / _2278) * cbSceneParam._m0[80u].y) * ((((_2410 - _2411) * 2.0) - ((exp2(_2297 * (isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0)))) - exp2(_2297 * (isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0))))) * _2399)) - ((exp2(_2299 * _2410) - exp2(_2299 * _2411)) * _2399))) + (_2292 * cbSceneParam._m0[80u].z);
        }
        vec4 _2438 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2195, _2196, 1.0), 0.0);
        float _2447 = exp2((_2436 * (-1.44269502162933349609375)) * (1.0 - _2438.w));
        float _2448 = log2(_2447);
        float _2464 = log2(_2215);
        _2301 = (exp2(_2464 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2448 * cbSceneParam._m0[78u].x)) * _2438.x) / cbSceneParam._m0[78u].x)) + _2212;
        _2303 = (exp2(_2464 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2448 * cbSceneParam._m0[78u].y)) * _2438.y) / cbSceneParam._m0[78u].y)) + _2213;
        _2305 = (exp2(_2464 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2448 * cbSceneParam._m0[78u].z)) * _2438.z) / cbSceneParam._m0[78u].z)) + _2214;
        _2307 = _2447 * _2215;
    }
    else
    {
        _2301 = _2212;
        _2303 = _2213;
        _2305 = _2214;
        _2307 = _2215;
    }
    float _2318 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2319 = _2318 == 3.0;
    float _2320 = log2(_2307);
    float _2327 = exp2(_2320 * cbSceneParam._m0[78u].x) * (((_2164 + ((isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0))) * _1053)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _291.x) * exp2((-0.0) - ((cbMtdParam._m0[10u].w * _348) * _349))) * _2180));
    float _2328 = exp2(_2320 * cbSceneParam._m0[78u].y) * (((_2166 + ((isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))) * _1053)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _291.y) * exp2((-0.0) - ((cbMtdParam._m0[11u].x * _348) * _349))) * _2180));
    float _2329 = exp2(_2320 * cbSceneParam._m0[78u].z) * (((_2168 + ((isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0))) * _1053)) * cbPerFrame._m0[3u].x) + (((cbSceneParam._m0[72u].w * _291.z) * exp2((-0.0) - ((cbMtdParam._m0[11u].y * _348) * _349))) * _2180));
    float _2338 = (_2318 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2338 * (_2319 ? _2327 : (_2327 + (cbSceneParam._m0[72u].w * _2301)));
    SV_Target.y = _2338 * (_2319 ? _2328 : (_2328 + (cbSceneParam._m0[72u].w * _2303)));
    SV_Target.z = _2338 * (_2319 ? _2329 : (_2329 + (cbSceneParam._m0[72u].w * _2305)));
    SV_Target.w = cbInstanceData._m0[_2187].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2187].w;
}


