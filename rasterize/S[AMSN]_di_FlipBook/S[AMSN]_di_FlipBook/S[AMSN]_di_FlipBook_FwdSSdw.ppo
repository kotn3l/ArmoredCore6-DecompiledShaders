#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_di_FlipBook_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_di_FlipBook_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_di_FlipBook_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _871;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = _195 * NORMAL.x;
    float _197 = _195 * NORMAL.y;
    float _198 = _195 * NORMAL.z;
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210;
    float _211;
    float _212;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
    }
    else
    {
        _210 = _196;
        _211 = _197;
        _212 = _198;
    }
    uint _231 = uint(int(floor(cbMtdParam._m0[10u].z)));
    uint _232 = uint(int(cbMtdParam._m0[11u].x * cbMtdParam._m0[10u].w));
    float _234 = float(int(_231 - _232 * (_231 / _232)));
    float _244 = (fract(TEXCOORD_1.x) + (_234 - cbMtdParam._m0[10u].w * trunc(_234 / cbMtdParam._m0[10u].w))) * (1.0 / cbMtdParam._m0[10u].w);
    float _246 = (fract(TEXCOORD_1.y) + floor(_234 / cbMtdParam._m0[10u].w)) * (1.0 / cbMtdParam._m0[11u].x);
    vec4 _259 = texture(sampler2D(S_AMSN_di_FlipBook_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _244) + cbTextureTilingScale._m0[0u].z, (_246 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _265 = _259.x * cbMtdParam._m0[9u].x;
    float _266 = _259.y * cbMtdParam._m0[9u].y;
    float _267 = _259.z * cbMtdParam._m0[9u].z;
    vec4 _280 = texture(sampler2D(S_AMSN_di_FlipBook_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _244) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _246) + cbTextureTilingScale._m0[2u].w));
    float _283 = _280.x + cbMtdParam._m0[10u].x;
    vec4 _295 = texture(sampler2D(S_AMSN_di_FlipBook_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _244) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _246) + cbTextureTilingScale._m0[1u].w));
    float _299 = _295.z;
    float _303 = (_295.x * 2.0) + (-1.0);
    float _305 = (_295.y * 2.0) + (-1.0);
    float _306 = dot(vec2(_303, _305), vec2(_303, _305));
    float _3234 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _311 = sqrt(1.0 - (isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0))));
    float _314 = fma(_311, _210, fma(_305, _202 * TANGENT.x, (_188 * _180) * _303));
    float _317 = fma(_311, _211, fma(_305, _202 * TANGENT.y, (_188 * _181) * _303));
    float _320 = fma(_311, _212, fma(_305, _202 * TANGENT.z, (_188 * _182) * _303));
    float _324 = inversesqrt(dot(vec3(_314, _317, _320), vec3(_314, _317, _320)));
    float _325 = _324 * _314;
    float _326 = _324 * _317;
    float _327 = _324 * _320;
    float _3245 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _328 = isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0));
    float _3256 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3267 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3278 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3289 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _332 = isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0));
    float _348 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _389 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _399 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _389);
    float _400 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _389);
    float _401 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _389);
    float _405 = inversesqrt(dot(vec3(_399, _400, _401), vec3(_399, _400, _401)));
    float _406 = _399 * _405;
    float _407 = _400 * _405;
    float _408 = _401 * _405;
    float _414 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _415 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _436 = fma(_327, cbSceneParam._m0[5u].z, fma(_326, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _325));
    float _439 = fma(_327, cbSceneParam._m0[6u].z, fma(_326, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _325));
    float _442 = fma(_327, cbSceneParam._m0[7u].z, fma(_326, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _325));
    uint _455 = uint(roundEven(NORMAL.w)) * 13u;
    uint _458 = (_455 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _464 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0)))) * cbInstanceData._m0[_458].x;
    float _465 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0)))) * cbInstanceData._m0[_458].y;
    float _466 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0)))) * cbInstanceData._m0[_458].z;
    float _3300 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _467 = isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0));
    float _3311 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _468 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
    float _3322 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _469 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
    float _470 = 1.0 - _332;
    float _471 = _467 * _470;
    float _472 = _468 * _470;
    float _473 = _469 * _470;
    float _478 = (_467 + (-0.039999999105930328369140625)) * _332;
    float _479 = (_468 + (-0.039999999105930328369140625)) * _332;
    float _480 = (_469 + (-0.039999999105930328369140625)) * _332;
    float _481 = _478 + 0.039999999105930328369140625;
    float _483 = _479 + 0.039999999105930328369140625;
    float _484 = _480 + 0.039999999105930328369140625;
    vec4 _493 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _414, cbSceneParam._m0[86u].y * _415));
    float _496 = _493.x * TEXCOORD_1.w;
    float _497 = dot(vec3(_325, _326, _327), vec3(_406, _407, _408));
    float _500 = _497 * 2.0;
    float _504 = (_500 * _325) - _406;
    float _505 = (_500 * _326) - _407;
    float _506 = (_500 * _327) - _408;
    float _510 = abs(dot(vec3(_406, _407, _408), vec3(_325, _326, _327)));
    float _3333 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _512 = sqrt(_328);
    float _525 = exp2((_512 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_512 * 3.0));
    float _531 = (1.0 - _525) * ((_512 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _532 = _525 * _512;
    float _560 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _564 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _568 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _870;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _595 = fma(_568, cbModelParam._m0[26u].z, fma(_564, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _560));
        float _599 = fma(_568, cbModelParam._m0[27u].z, fma(_564, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _560));
        float _603 = fma(_568, cbModelParam._m0[28u].z, fma(_564, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _560));
        float _628 = _560 + _325;
        float _629 = _564 + _326;
        float _630 = _568 + _327;
        float _640 = fma(_630, cbModelParam._m0[26u].z, fma(_629, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _628)) - _595;
        float _641 = fma(_630, cbModelParam._m0[27u].z, fma(_629, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _628)) - _599;
        float _642 = fma(_630, cbModelParam._m0[28u].z, fma(_629, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _628)) - _603;
        float _646 = inversesqrt(dot(vec3(_640, _641, _642), vec3(_640, _641, _642)));
        float _659 = ((_646 * _640) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_595 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _660 = ((_646 * _641) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_599 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _661 = ((_646 * _642) / cbModelParam._m0[34u].z) + ((((((_603 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _664 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_659, _660, _661), 0.0);
        vec4 _671 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_659, _660, _661), 0.0);
        vec4 _678 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_659, _660, _661), 0.0);
        vec4 _685 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_659, _660, _661), 0.0);
        float _698 = exp2((_664.w + (-0.5)) * 20.0) * 2.0;
        float _699 = _698 * (_664.x + (-0.5));
        float _700 = _698 * (_664.y + (-0.5));
        float _701 = _698 * (_664.z + (-0.5));
        float _708 = exp2((_671.w + (-0.5)) * 20.0) * 2.0;
        float _709 = _708 * (_671.x + (-0.5));
        float _710 = _708 * (_671.y + (-0.5));
        float _711 = _708 * (_671.z + (-0.5));
        float _718 = exp2((_678.w + (-0.5)) * 20.0) * 2.0;
        float _719 = _718 * (_678.x + (-0.5));
        float _720 = _718 * (_678.y + (-0.5));
        float _721 = _718 * (_678.z + (-0.5));
        float _728 = exp2((_685.w + (-0.5)) * 20.0) * 2.0;
        float _729 = _728 * (_685.x + (-0.5));
        float _730 = _728 * (_685.y + (-0.5));
        float _731 = _728 * (_685.z + (-0.5));
        float _732 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _733 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _734 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _735 = _699 * 0.5;
        float _736 = _709 * 0.5;
        float _737 = _719 * 0.5;
        float _738 = dot(vec3(_735, _736, _737), vec3(_735, _736, _737));
        float _743 = (_738 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_738);
        float _752 = (dot(vec3(_325, _326, _327), vec3(_743 * _735, _743 * _736, _743 * _737)) + 1.0) * 0.5;
        float _3359 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _762 = sqrt(((_736 * _736) + (_735 * _735)) + (_737 * _737)) / (_732 + 9.9999997473787516355514526367188e-06);
        float _3370 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _763 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
        float _764 = _763 * 2.0;
        float _768 = (1.0 - _763) / (_763 + 1.0);
        float _3381 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _769 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
        float _778 = ((((1.0 - _769) * (_764 + 2.0)) * exp2(log2(isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0))) * (_764 + 1.0))) + _769) * _732;
        float _779 = _700 * 0.5;
        float _780 = _710 * 0.5;
        float _781 = _720 * 0.5;
        float _782 = dot(vec3(_779, _780, _781), vec3(_779, _780, _781));
        float _787 = (_782 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_782);
        float _795 = (dot(vec3(_325, _326, _327), vec3(_787 * _779, _787 * _780, _787 * _781)) + 1.0) * 0.5;
        float _3392 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _804 = sqrt(((_780 * _780) + (_779 * _779)) + (_781 * _781)) / (_733 + 9.9999997473787516355514526367188e-06);
        float _3403 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
        float _806 = _805 * 2.0;
        float _810 = (1.0 - _805) / (_805 + 1.0);
        float _3414 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _811 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
        float _820 = ((((1.0 - _811) * (_806 + 2.0)) * exp2(log2(isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0))) * (_806 + 1.0))) + _811) * _733;
        float _821 = _701 * 0.5;
        float _822 = _711 * 0.5;
        float _823 = _721 * 0.5;
        float _824 = dot(vec3(_821, _822, _823), vec3(_821, _822, _823));
        float _829 = (_824 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_824);
        float _837 = (dot(vec3(_325, _326, _327), vec3(_829 * _821, _829 * _822, _829 * _823)) + 1.0) * 0.5;
        float _3425 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _846 = sqrt(((_822 * _822) + (_821 * _821)) + (_823 * _823)) / (_734 + 9.9999997473787516355514526367188e-06);
        float _3436 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
        float _848 = _847 * 2.0;
        float _852 = (1.0 - _847) / (_847 + 1.0);
        float _3447 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
        float _862 = ((((1.0 - _853) * (_848 + 2.0)) * exp2(log2(isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0))) * (_848 + 1.0))) + _853) * _734;
        _870 = _701;
        _872 = _700;
        _873 = _699;
        _874 = _711;
        _875 = _710;
        _876 = _709;
        _877 = _721;
        _878 = _720;
        _879 = _719;
        _880 = _734;
        _881 = _733;
        _882 = _732;
        _883 = cbModelParam._m0[36u].z * (isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0)));
        _884 = cbModelParam._m0[36u].z * (isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0)));
        _885 = cbModelParam._m0[36u].z * (isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0)));
    }
    else
    {
        _870 = _871;
        _872 = _871;
        _873 = _871;
        _874 = _871;
        _875 = _871;
        _876 = _871;
        _877 = _871;
        _878 = _871;
        _879 = _871;
        _880 = _871;
        _881 = _871;
        _882 = _871;
        _883 = 0.0;
        _884 = 0.0;
        _885 = 0.0;
    }
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _911 = fma(_568, cbModelParam._m0[30u].z, fma(_564, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _560));
        float _915 = fma(_568, cbModelParam._m0[31u].z, fma(_564, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _560));
        float _919 = fma(_568, cbModelParam._m0[32u].z, fma(_564, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _560));
        float _942 = _560 + _325;
        float _943 = _564 + _326;
        float _944 = _568 + _327;
        float _954 = fma(_944, cbModelParam._m0[30u].z, fma(_943, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _942)) - _911;
        float _955 = fma(_944, cbModelParam._m0[31u].z, fma(_943, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _942)) - _915;
        float _956 = fma(_944, cbModelParam._m0[32u].z, fma(_943, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _942)) - _919;
        float _960 = inversesqrt(dot(vec3(_954, _955, _956), vec3(_954, _955, _956)));
        float _973 = ((_960 * _954) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_911 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _974 = ((_960 * _955) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_915 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _975 = ((_960 * _956) / cbModelParam._m0[35u].z) + ((((((_919 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        float _1010 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_977.x + (-0.5));
        float _1012 = _1010 * (_977.y + (-0.5));
        float _1013 = _1010 * (_977.z + (-0.5));
        float _1020 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_984.x + (-0.5));
        float _1022 = _1020 * (_984.y + (-0.5));
        float _1023 = _1020 * (_984.z + (-0.5));
        float _1030 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_991.x + (-0.5));
        float _1032 = _1030 * (_991.y + (-0.5));
        float _1033 = _1030 * (_991.z + (-0.5));
        float _1040 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_998.x + (-0.5));
        float _1042 = _1040 * (_998.y + (-0.5));
        float _1043 = _1040 * (_998.z + (-0.5));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1047 = _1011 * 0.5;
        float _1048 = _1021 * 0.5;
        float _1049 = _1031 * 0.5;
        float _1050 = dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049));
        float _1055 = (_1050 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1050);
        float _1063 = (dot(vec3(_325, _326, _327), vec3(_1055 * _1047, _1055 * _1048, _1055 * _1049)) + 1.0) * 0.5;
        float _3488 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1072 = sqrt(((_1048 * _1048) + (_1047 * _1047)) + (_1049 * _1049)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _3499 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _1074 = _1073 * 2.0;
        float _1078 = (1.0 - _1073) / (_1073 + 1.0);
        float _3510 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _1088 = ((((1.0 - _1079) * (_1074 + 2.0)) * exp2(log2(isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))) * (_1074 + 1.0))) + _1079) * _1044;
        float _1089 = _1012 * 0.5;
        float _1090 = _1022 * 0.5;
        float _1091 = _1032 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1105 = (dot(vec3(_325, _326, _327), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _3521 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1114 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _3532 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _1116 = _1115 * 2.0;
        float _1120 = (1.0 - _1115) / (_1115 + 1.0);
        float _3543 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _1130 = ((((1.0 - _1121) * (_1116 + 2.0)) * exp2(log2(isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))) * (_1116 + 1.0))) + _1121) * _1045;
        float _1131 = _1013 * 0.5;
        float _1132 = _1023 * 0.5;
        float _1133 = _1033 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1147 = (dot(vec3(_325, _326, _327), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3554 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1156 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1046 + 9.9999997473787516355514526367188e-06);
        float _3565 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3576 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) * (_1158 + 1.0))) + _1163) * _1046;
        _1180 = _1013;
        _1181 = _1012;
        _1182 = _1011;
        _1183 = _1023;
        _1184 = _1022;
        _1185 = _1021;
        _1186 = _1033;
        _1187 = _1032;
        _1188 = _1031;
        _1189 = _1046;
        _1190 = _1045;
        _1191 = _1044;
        _1192 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0)));
        _1193 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)));
        _1194 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
    }
    else
    {
        _1180 = _871;
        _1181 = _871;
        _1182 = _871;
        _1183 = _871;
        _1184 = _871;
        _1185 = _871;
        _1186 = _871;
        _1187 = _871;
        _1188 = _871;
        _1189 = _871;
        _1190 = _871;
        _1191 = _871;
        _1192 = 0.0;
        _1193 = 0.0;
        _1194 = 0.0;
    }
    float _1204 = (cbModelParam._m0[1u].x * (_1192 - _883)) + _883;
    float _1205 = (cbModelParam._m0[1u].x * (_1193 - _884)) + _884;
    float _1206 = (cbModelParam._m0[1u].x * (_1194 - _885)) + _885;
    float _1227 = fma(_1206, cbSceneParam._m0[89u].z, fma(_1205, cbSceneParam._m0[89u].y, _1204 * cbSceneParam._m0[89u].x));
    float _1230 = fma(_1206, cbSceneParam._m0[90u].z, fma(_1205, cbSceneParam._m0[90u].y, _1204 * cbSceneParam._m0[90u].x));
    float _1233 = fma(_1206, cbSceneParam._m0[91u].z, fma(_1205, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1204));
    float _1248 = _504 * 0.5;
    float _1249 = _505 * 0.5;
    float _1250 = _506 * 0.5;
    float _1251 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_1182, _1185, _1188, _1191));
    float _1254 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_1181, _1184, _1187, _1190));
    float _1257 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_1180, _1183, _1186, _1189));
    float _1291;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1264 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_870, _874, _877, _880));
        float _1268 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_872, _875, _878, _881));
        float _1272 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_873, _876, _879, _882));
        float _1279 = dot(vec4(cbModelParam._m0[39u]), vec4(_1248, _1249, _1250, 1.0));
        _1291 = dot(vec3(isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)), isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)), isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1279) ? 0.0 : (isnan(0.0) ? _1279 : max(0.0, _1279))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1291 = 1.0;
    }
    float _1302;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1293 = dot(vec4(cbModelParam._m0[40u]), vec4(_1248, _1249, _1250, 1.0));
        _1302 = dot(vec3(isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)), isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)), isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1293) ? 0.0 : (isnan(0.0) ? _1293 : max(0.0, _1293))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1302 = 1.0;
    }
    float _1306 = (_1302 * cbModelParam._m0[1u].x) + (_1291 * (1.0 - cbModelParam._m0[1u].x));
    float _1316 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _328);
    float _1317 = isnan(_1316) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1316 : min(cbModelParam._m0[25u].z, _1316));
    float _1399;
    float _1401;
    float _1403;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1366 = fma(_568, cbModelParam._m0[13u].z, fma(_564, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _560)) + cbModelParam._m0[13u].w;
        float _1370 = fma(_568, cbModelParam._m0[14u].z, fma(_564, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _560)) + cbModelParam._m0[14u].w;
        float _1374 = fma(_568, cbModelParam._m0[15u].z, fma(_564, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _560)) + cbModelParam._m0[15u].w;
        float _1377 = fma(_506, cbModelParam._m0[13u].z, fma(_505, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _504));
        float _1380 = fma(_506, cbModelParam._m0[14u].z, fma(_505, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _504));
        float _1383 = fma(_506, cbModelParam._m0[15u].z, fma(_505, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _504));
        float _1411;
        if (_1377 > 0.0)
        {
            _1411 = abs((1.0 - _1366) / _1377);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1377 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1366 + 1.0) / _1377);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1411 = frontier_phi_16_14_ladder;
        }
        float _1639;
        if (_1380 > 0.0)
        {
            _1639 = abs((1.0 - _1370) / _1380);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1380 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1370 + 1.0) / _1380);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1639 = frontier_phi_25_21_ladder;
        }
        float _1896;
        if (_1383 > 0.0)
        {
            _1896 = abs((1.0 - _1374) / _1383);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1383 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1374 + 1.0) / _1383);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1896 = frontier_phi_37_32_ladder;
        }
        float _1898 = isnan(_1639) ? _1411 : (isnan(_1411) ? _1639 : min(_1411, _1639));
        float _1899 = isnan(_1896) ? _1898 : (isnan(_1898) ? _1896 : min(_1898, _1896));
        float _1903 = (_1899 * _1377) + _1366;
        float _1904 = (_1899 * _1380) + _1370;
        float _1905 = (_1899 * _1383) + _1374;
        float _1906 = _1899 * 9.9999997473787516355514526367188e-05;
        float _1908 = (-1.0) - _1906;
        float _1910 = _1906 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1905 > _1910) || ((_1905 < _1908) || ((_1904 > _1910) || ((_1904 < _1908) || ((_1903 < _1908) || (_1903 > _1910))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2033 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1905, cbModelParam._m0[9u].z, fma(_1904, cbModelParam._m0[9u].y, _1903 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1905, cbModelParam._m0[10u].z, fma(_1904, cbModelParam._m0[10u].y, _1903 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1905, cbModelParam._m0[11u].z, fma(_1904, cbModelParam._m0[11u].y, _1903 * cbModelParam._m0[11u].x))), _1317);
            frontier_phi_15_37_ladder = _2033.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2033.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2033.x * cbModelParam._m0[1u].y;
        }
        _1399 = frontier_phi_15_37_ladder_2;
        _1401 = frontier_phi_15_37_ladder_1;
        _1403 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1387 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_504, _505, _506), _1317);
        _1399 = _1387.x * cbModelParam._m0[1u].y;
        _1401 = _1387.y * cbModelParam._m0[1u].y;
        _1403 = _1387.z * cbModelParam._m0[1u].y;
    }
    float _1407 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _328);
    float _1408 = isnan(_1407) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1407 : min(cbModelParam._m0[25u].w, _1407));
    float _1501;
    float _1503;
    float _1505;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1465 = fma(_568, cbModelParam._m0[21u].z, fma(_564, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _560)) + cbModelParam._m0[21u].w;
        float _1469 = fma(_568, cbModelParam._m0[22u].z, fma(_564, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _560)) + cbModelParam._m0[22u].w;
        float _1473 = fma(_568, cbModelParam._m0[23u].z, fma(_564, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _560)) + cbModelParam._m0[23u].w;
        float _1476 = fma(_506, cbModelParam._m0[21u].z, fma(_505, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _504));
        float _1479 = fma(_506, cbModelParam._m0[22u].z, fma(_505, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _504));
        float _1482 = fma(_506, cbModelParam._m0[23u].z, fma(_505, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _504));
        float _1644;
        if (_1476 > 0.0)
        {
            _1644 = abs((1.0 - _1465) / _1476);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1476 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1465 + 1.0) / _1476);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1644 = frontier_phi_27_23_ladder;
        }
        float _1923;
        if (_1479 > 0.0)
        {
            _1923 = abs((1.0 - _1469) / _1479);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1479 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1469 + 1.0) / _1479);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1923 = frontier_phi_39_34_ladder;
        }
        float _2136;
        if (_1482 > 0.0)
        {
            _2136 = abs((1.0 - _1473) / _1482);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1482 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1473 + 1.0) / _1482);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2136 = frontier_phi_48_45_ladder;
        }
        float _2138 = isnan(_1923) ? _1644 : (isnan(_1644) ? _1923 : min(_1644, _1923));
        float _2139 = isnan(_2136) ? _2138 : (isnan(_2138) ? _2136 : min(_2138, _2136));
        float _2143 = (_2139 * _1476) + _1465;
        float _2144 = (_2139 * _1479) + _1469;
        float _2145 = (_2139 * _1482) + _1473;
        float _2146 = _2139 * 9.9999997473787516355514526367188e-05;
        float _2147 = (-1.0) - _2146;
        float _2149 = _2146 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2145 > _2149) || ((_2145 < _2147) || ((_2144 > _2149) || ((_2144 < _2147) || ((_2143 < _2147) || (_2143 > _2149))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2346 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2145, cbModelParam._m0[17u].z, fma(_2144, cbModelParam._m0[17u].y, _2143 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2145, cbModelParam._m0[18u].z, fma(_2144, cbModelParam._m0[18u].y, _2143 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2145, cbModelParam._m0[19u].z, fma(_2144, cbModelParam._m0[19u].y, _2143 * cbModelParam._m0[19u].x))), _1408);
            frontier_phi_24_48_ladder = _2346.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2346.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2346.x * cbModelParam._m0[1u].z;
        }
        _1501 = frontier_phi_24_48_ladder_2;
        _1503 = frontier_phi_24_48_ladder_1;
        _1505 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1485 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_504, _505, _506), _1408);
        _1501 = _1485.x * cbModelParam._m0[1u].z;
        _1503 = _1485.y * cbModelParam._m0[1u].z;
        _1505 = _1485.z * cbModelParam._m0[1u].z;
    }
    float _1518 = (((_531 * _481) + _532) * _496) * ((cbModelParam._m0[1u].w * (_1501 - _1399)) + _1399);
    float _1520 = (((_531 * _483) + _532) * _496) * ((cbModelParam._m0[1u].w * (_1503 - _1401)) + _1401);
    float _1522 = (((_531 * _484) + _532) * _496) * ((cbModelParam._m0[1u].w * (_1505 - _1403)) + _1403);
    float _1525 = fma(_1522, cbSceneParam._m0[89u].z, fma(_1520, cbSceneParam._m0[89u].y, _1518 * cbSceneParam._m0[89u].x));
    float _1528 = fma(_1522, cbSceneParam._m0[90u].z, fma(_1520, cbSceneParam._m0[90u].y, _1518 * cbSceneParam._m0[90u].x));
    float _1531 = fma(_1522, cbSceneParam._m0[91u].z, fma(_1520, cbSceneParam._m0[91u].y, _1518 * cbSceneParam._m0[91u].x));
    vec4 _1539 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_414, _415));
    float _1541 = _1539.w;
    float _1553 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1541);
    float _1554 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1541);
    float _1555 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1541);
    uvec4 _1559 = floatBitsToUint(cbInstanceData._m0[_455 + 5u]);
    uint _1561 = _1559.x * 14u;
    uint _1562 = _1561 + 13u;
    float _1569 = _496 + (-1.0);
    float _1574 = (cbLight._m0[_1562].x * _1569) + 1.0;
    float _1575 = (cbLight._m0[_1562].y * _1569) + 1.0;
    float _1576 = (cbLight._m0[_1562].z * _1569) + 1.0;
    float _1577 = (cbLight._m0[_1562].w * _1569) + 1.0;
    uint _1578 = _1561 + 5u;
    float _1584 = isnan(1.0) ? _1575 : (isnan(_1575) ? 1.0 : min(_1575, 1.0));
    uint _1588 = _1561 + 4u;
    float _1598 = isnan(1.0) ? _1574 : (isnan(_1574) ? 1.0 : min(_1574, 1.0));
    uint _1602 = _1561 | 1u;
    float _1613 = dot(vec3(cbLight._m0[_1561].xyz), vec3(_325, _326, _327));
    float _1616 = dot(vec3(cbLight._m0[_1602].xyz), vec3(_325, _326, _327));
    float _3712 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
    float _3723 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
    float _1621 = (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * 0.3183098733425140380859375;
    float _1623 = (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * 0.3183098733425140380859375;
    float _1630 = ((cbLight._m0[_1578].x * _1584) * _1623) + (((cbLight._m0[_1588].x * _1553) * _1598) * _1621);
    float _1631 = ((_1584 * cbLight._m0[_1578].y) * _1623) + (((cbLight._m0[_1588].y * _1554) * _1598) * _1621);
    float _1632 = ((_1584 * cbLight._m0[_1578].z) * _1623) + (((cbLight._m0[_1588].z * _1555) * _1598) * _1621);
    uvec4 _1636 = floatBitsToUint(cbLight._m0[_1561 + 12u]);
    bool _1638 = _1636.x == 0u;
    float _1649;
    float _1651;
    float _1653;
    if (_1638)
    {
        _1649 = _1630;
        _1651 = _1631;
        _1653 = _1632;
    }
    else
    {
        uint _1657 = _1561 + 6u;
        float _1673 = (dot(vec3(cbLight._m0[_1561 + 2u].xyz), vec3(_325, _326, _327)) * 0.5) + 0.5;
        float _1674 = _1673 * _1673;
        float _3734 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1676 = isnan(1.0) ? _1576 : (isnan(_1576) ? 1.0 : min(_1576, 1.0));
        _1649 = (((cbLight._m0[_1657].x * 0.3183098733425140380859375) * _1675) * _1676) + _1630;
        _1651 = (((cbLight._m0[_1657].y * 0.3183098733425140380859375) * _1675) * _1676) + _1631;
        _1653 = (((cbLight._m0[_1657].z * 0.3183098733425140380859375) * _1675) * _1676) + _1632;
    }
    bool _1656 = _1636.y == 0u;
    float _1694;
    float _1696;
    float _1698;
    if (_1656)
    {
        _1694 = _1649;
        _1696 = _1651;
        _1698 = _1653;
    }
    else
    {
        uint _1867 = _1561 + 7u;
        float _1883 = (dot(vec3(cbLight._m0[_1561 + 3u].xyz), vec3(_325, _326, _327)) * 0.5) + 0.5;
        float _1884 = _1883 * _1883;
        float _3750 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
        float _1885 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1886 = isnan(1.0) ? _1577 : (isnan(_1577) ? 1.0 : min(_1577, 1.0));
        _1694 = (((cbLight._m0[_1867].x * 0.3183098733425140380859375) * _1885) * _1886) + _1649;
        _1696 = (((cbLight._m0[_1867].y * 0.3183098733425140380859375) * _1885) * _1886) + _1651;
        _1698 = (((cbLight._m0[_1867].z * 0.3183098733425140380859375) * _1885) * _1886) + _1653;
    }
    uint _1701 = _1561 + 8u;
    float _1714 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1561].w)) * _328) * 0.949999988079071044921875);
    float _1715 = _1714 * _1714;
    float _1716 = cbLight._m0[_1561].x + _406;
    float _1717 = cbLight._m0[_1561].y + _407;
    float _1718 = cbLight._m0[_1561].z + _408;
    float _1722 = inversesqrt(dot(vec3(_1716, _1717, _1718), vec3(_1716, _1717, _1718)));
    float _1723 = _1722 * _1716;
    float _1724 = _1722 * _1717;
    float _1725 = _1722 * _1718;
    float _1726 = dot(vec3(_325, _326, _327), vec3(cbLight._m0[_1561].xyz));
    float _3766 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
    float _1729 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _3777 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _1730 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _1731 = dot(vec3(_325, _326, _327), vec3(_1723, _1724, _1725));
    float _3788 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
    float _1734 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _1735 = dot(vec3(cbLight._m0[_1561].xyz), vec3(_1723, _1724, _1725));
    float _3799 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
    float _1739 = _1715 * _1715;
    float _1743 = ((_1734 * _1734) * (_1739 + (-1.0))) + 1.0;
    float _1751 = exp2(log2(1.0 - (isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0)))) * 5.0);
    float _1752 = 0.959999978542327880859375 - _478;
    float _1754 = 0.959999978542327880859375 - _479;
    float _1755 = 0.959999978542327880859375 - _480;
    float _1762 = 1.0 - _1715;
    float _1773 = (0.5 / (((_1730 * ((_1729 * _1762) + _1715)) + 9.9999999392252902907785028219223e-09) + (((_1730 * _1762) + _1715) * _1729))) * _1729;
    float _3810 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1775 = (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * (_1739 / ((_1743 * _1743) * 3.141590118408203125));
    uint _1789 = _1561 + 9u;
    float _1800 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1602].w)) * _328) * 0.949999988079071044921875);
    float _1801 = _1800 * _1800;
    float _1802 = cbLight._m0[_1602].x + _406;
    float _1803 = cbLight._m0[_1602].y + _407;
    float _1804 = cbLight._m0[_1602].z + _408;
    float _1808 = inversesqrt(dot(vec3(_1802, _1803, _1804), vec3(_1802, _1803, _1804)));
    float _1809 = _1808 * _1802;
    float _1810 = _1808 * _1803;
    float _1811 = _1808 * _1804;
    float _1812 = dot(vec3(_325, _326, _327), vec3(cbLight._m0[_1602].xyz));
    float _3821 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1815 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _1816 = dot(vec3(_325, _326, _327), vec3(_1809, _1810, _1811));
    float _3832 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
    float _1819 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _1820 = dot(vec3(cbLight._m0[_1602].xyz), vec3(_1809, _1810, _1811));
    float _3843 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1824 = _1801 * _1801;
    float _1828 = ((_1819 * _1819) * (_1824 + (-1.0))) + 1.0;
    float _1835 = exp2(log2(1.0 - (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0)))) * 5.0);
    float _1842 = 1.0 - _1801;
    float _1852 = (0.5 / (((_1730 * ((_1815 * _1842) + _1801)) + 9.9999999392252902907785028219223e-09) + (((_1730 * _1842) + _1801) * _1815))) * _1815;
    float _3854 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1854 = (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_1824 / ((_1828 * _1828) * 3.141590118408203125));
    float _1864 = (((((_1835 * _1752) + _481) * cbLight._m0[_1789].x) * _1854) * _1584) + ((((cbLight._m0[_1701].x * _1553) * ((_1751 * _1752) + _481)) * _1775) * _1598);
    float _1865 = (((((_1835 * _1754) + _483) * cbLight._m0[_1789].y) * _1854) * _1584) + ((((cbLight._m0[_1701].y * _1554) * ((_1751 * _1754) + _483)) * _1775) * _1598);
    float _1866 = (((((_1835 * _1755) + _484) * cbLight._m0[_1789].z) * _1854) * _1584) + ((((cbLight._m0[_1701].z * _1555) * ((_1751 * _1755) + _484)) * _1775) * _1598);
    float _1928;
    float _1930;
    float _1932;
    if (_1638)
    {
        _1928 = _1864;
        _1930 = _1865;
        _1932 = _1866;
    }
    else
    {
        uint _1934 = _1561 + 2u;
        uint _1938 = _1561 + 10u;
        float _1952 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1934].w)) * _328) * 0.949999988079071044921875);
        float _1953 = _1952 * _1952;
        float _1954 = cbLight._m0[_1934].x + _406;
        float _1955 = cbLight._m0[_1934].y + _407;
        float _1956 = cbLight._m0[_1934].z + _408;
        float _1960 = inversesqrt(dot(vec3(_1954, _1955, _1956), vec3(_1954, _1955, _1956)));
        float _1961 = _1960 * _1954;
        float _1962 = _1960 * _1955;
        float _1963 = _1960 * _1956;
        float _1964 = dot(vec3(_325, _326, _327), vec3(cbLight._m0[_1934].xyz));
        float _3865 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
        float _1967 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1968 = dot(vec3(_325, _326, _327), vec3(_1961, _1962, _1963));
        float _3876 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
        float _1971 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1972 = dot(vec3(cbLight._m0[_1934].xyz), vec3(_1961, _1962, _1963));
        float _3887 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
        float _1976 = _1953 * _1953;
        float _1980 = ((_1971 * _1971) * (_1976 + (-1.0))) + 1.0;
        float _1987 = exp2(log2(1.0 - (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0)))) * 5.0);
        float _1994 = 1.0 - _1953;
        float _2004 = (0.5 / (((_1730 * ((_1967 * _1994) + _1953)) + 9.9999999392252902907785028219223e-09) + (((_1730 * _1994) + _1953) * _1967))) * _1967;
        float _3898 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
        float _2006 = (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1976 / ((_1980 * _1980) * 3.141590118408203125));
        float _2007 = isnan(1.0) ? _1576 : (isnan(_1576) ? 1.0 : min(_1576, 1.0));
        _1928 = (((((_1987 * _1752) + _481) * cbLight._m0[_1938].x) * _2006) * _2007) + _1864;
        _1930 = (((((_1987 * _1754) + _483) * cbLight._m0[_1938].y) * _2006) * _2007) + _1865;
        _1932 = (((((_1987 * _1755) + _484) * cbLight._m0[_1938].z) * _2006) * _2007) + _1866;
    }
    float _2042;
    float _2044;
    float _2046;
    if (_1656)
    {
        _2042 = _1928;
        _2044 = _1930;
        _2046 = _1932;
    }
    else
    {
        uint _2053 = _1561 + 3u;
        uint _2057 = _1561 + 11u;
        float _2071 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2053].w)) * _328) * 0.949999988079071044921875);
        float _2072 = _2071 * _2071;
        float _2073 = cbLight._m0[_2053].x + _406;
        float _2074 = cbLight._m0[_2053].y + _407;
        float _2075 = cbLight._m0[_2053].z + _408;
        float _2079 = inversesqrt(dot(vec3(_2073, _2074, _2075), vec3(_2073, _2074, _2075)));
        float _2080 = _2079 * _2073;
        float _2081 = _2079 * _2074;
        float _2082 = _2079 * _2075;
        float _2083 = dot(vec3(_325, _326, _327), vec3(cbLight._m0[_2053].xyz));
        float _3914 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2086 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _2087 = dot(vec3(_325, _326, _327), vec3(_2080, _2081, _2082));
        float _3925 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2090 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _2091 = dot(vec3(cbLight._m0[_2053].xyz), vec3(_2080, _2081, _2082));
        float _3936 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2095 = _2072 * _2072;
        float _2099 = ((_2090 * _2090) * (_2095 + (-1.0))) + 1.0;
        float _2106 = exp2(log2(1.0 - (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) * 5.0);
        float _2113 = 1.0 - _2072;
        float _2123 = (0.5 / (((_1730 * ((_2086 * _2113) + _2072)) + 9.9999999392252902907785028219223e-09) + (((_1730 * _2113) + _2072) * _2086))) * _2086;
        float _3947 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2125 = (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_2095 / ((_2099 * _2099) * 3.141590118408203125));
        float _2126 = isnan(1.0) ? _1577 : (isnan(_1577) ? 1.0 : min(_1577, 1.0));
        _2042 = (((((_2106 * _1752) + _481) * cbLight._m0[_2057].x) * _2125) * _2126) + _1928;
        _2044 = (((((_2106 * _1754) + _483) * cbLight._m0[_2057].y) * _2125) * _2126) + _1930;
        _2046 = (((((_2106 * _1755) + _484) * cbLight._m0[_2057].z) * _2125) * _2126) + _1932;
    }
    float _2260;
    float _2262;
    float _2264;
    float _2266;
    float _2268;
    float _2270;
    if (_1559.y == 0u)
    {
        float _2201 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2202 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2201;
        float _2203 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2201;
        float _2204 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2201;
        uvec4 _2216 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2217 = _2216.x;
        uint _2228 = uint((float(_2216.y) * floor(float(uint(cbSceneParam._m0[85u].y * _415) / _2217))) + floor(float(uint(cbSceneParam._m0[85u].x * _414) / _2217)));
        float _2238 = (log2(_2204 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2239 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        uint _2242 = uint(isnan(14.0) ? _2239 : (isnan(_2239) ? 14.0 : min(_2239, 14.0)));
        uvec4 _2247 = texelFetch(g_lightClusterGridBuffer, int(((_2242 << 2u) + (_2228 << 6u)) >> 2u));
        uint _2248 = _2247.x;
        uint _2249 = _2216.z;
        float _2351;
        float _2353;
        float _2355;
        float _2357;
        float _2359;
        float _2361;
        if (((((1u << ((_2249 >> 4u) & 15u)) + 4294967295u) & _2248) == 0u) || ((_2249 & 240u) == 0u))
        {
            _2351 = 0.0;
            _2353 = 0.0;
            _2355 = 0.0;
            _2357 = 0.0;
            _2359 = 0.0;
            _2361 = 0.0;
        }
        else
        {
            float _2352;
            float _2354;
            float _2356;
            float _2358;
            float _2360;
            float _2362;
            float _2495 = 0.0;
            float _2496 = 0.0;
            float _2497 = 0.0;
            float _2498 = 0.0;
            float _2499 = 0.0;
            float _2500 = 0.0;
            uint _2501 = 0u;
            uint _2510;
            bool _2511;
            for (;;)
            {
                _2510 = texelFetch(g_lightClassification, int((((_2242 << 5u) + (_2228 << 9u)) + (_2501 << 2u)) >> 2u)).x;
                _2511 = _2510 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2511)
                {
                    frontier_phi_63_pred = _2500;
                    frontier_phi_63_pred_1 = _2499;
                    frontier_phi_63_pred_2 = _2498;
                    frontier_phi_63_pred_3 = _2497;
                    frontier_phi_63_pred_4 = _2496;
                    frontier_phi_63_pred_5 = _2495;
                }
                else
                {
                    float _2619;
                    float _2620;
                    float _2621;
                    float _2622;
                    float _2623;
                    float _2624;
                    uint _2625;
                    _2619 = _2495;
                    _2620 = _2496;
                    _2621 = _2497;
                    _2622 = _2498;
                    _2623 = _2499;
                    _2624 = _2500;
                    _2625 = _2510;
                    float _2551;
                    float _2552;
                    float _2553;
                    float _2554;
                    float _2555;
                    float _2556;
                    for (;;)
                    {
                        uint _2629 = uint(findLSB(_2625)) + (_2501 << 5u);
                        uint _2626 = (_2625 + 4294967295u) & _2625;
                        uint _2631 = _2629 * 48u;
                        vec4 _2645 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2631)).x, texelFetch(g_PointLightRenderingBuffer, int(_2631 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2631 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2631 + 3u)).x));
                        uint _2651 = (_2629 * 48u) + 4u;
                        vec4 _2664 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2651)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 3u)).x));
                        uint _2670 = (_2629 * 48u) + 8u;
                        vec3 _2681 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2670)).x, texelFetch(g_PointLightRenderingBuffer, int(_2670 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2670 + 2u)).x));
                        float _2685 = _2645.x - _2202;
                        float _2686 = _2645.y - _2203;
                        float _2687 = _2645.z - _2204;
                        float _2688 = dot(vec3(_2685, _2686, _2687), vec3(_2685, _2686, _2687));
                        float _2691 = inversesqrt(_2688);
                        float _2692 = _2691 * _2685;
                        float _2693 = _2691 * _2686;
                        float _2694 = _2691 * _2687;
                        float _2695 = dot(vec3(_436, _439, _442), vec3(_2692, _2693, _2694));
                        float _2700 = 1.0 - (_2688 * _2645.w);
                        float _3973 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
                        float _2701 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
                        float _2702 = sqrt(_2688) * _2664.w;
                        float _2705 = 1.39999997615814208984375 / (_2702 + 1.39999997615814208984375);
                        float _2706 = _2705 * _2705;
                        float _2709 = ((1.0 - _2706) * _2695) + _2706;
                        float _2712 = _2702 * _2702;
                        float _2716 = ((isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0))) * _2701) / ((_2712 * 0.699999988079071044921875) + 1.0);
                        float _2720 = (-0.0) - _2202;
                        float _2721 = (-0.0) - _2203;
                        float _2722 = (-0.0) - _2204;
                        float _2726 = inversesqrt(dot(vec3(_2720, _2721, _2722), vec3(_2720, _2721, _2722)));
                        float _2727 = _2726 * _2720;
                        float _2728 = _2726 * _2721;
                        float _2729 = _2726 * _2722;
                        float _2737 = exp2(log2(1.0 / ((_2712 * 3.5) + 5.0)) * 0.25);
                        float _2738 = 1.0 - _512;
                        float _2745 = sqrt(1.0 - ((1.0 - (_2738 * _2738)) * (1.0 - (_2737 * _2737))));
                        float _2746 = _2745 * _2745;
                        float _2747 = _2746 * _2746;
                        float _2748 = _2727 + _2692;
                        float _2749 = _2728 + _2693;
                        float _2750 = _2729 + _2694;
                        float _2754 = inversesqrt(dot(vec3(_2748, _2749, _2750), vec3(_2748, _2749, _2750)));
                        float _2758 = dot(vec3(_436, _439, _442), vec3(_2727, _2728, _2729));
                        float _3989 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
                        float _2761 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
                        float _2762 = dot(vec3(_436, _439, _442), vec3(_2754 * _2748, _2754 * _2749, _2754 * _2750));
                        float _4000 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
                        float _2765 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
                        float _2769 = ((_2765 * _2765) * (_2747 + (-1.0))) + 1.0;
                        float _2770 = _2705 * _2746;
                        float _2771 = _2770 * _2770;
                        float _2774 = ((1.0 - _2771) * _2695) + _2771;
                        float _4011 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
                        float _2775 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
                        float _2776 = 1.0 - _2746;
                        float _2786 = (0.5 / (((_2775 * ((_2761 * _2776) + _2746)) + 9.9999999392252902907785028219223e-09) + (((_2775 * _2776) + _2746) * _2761))) * _2775;
                        float _4022 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
                        float _2797 = (((_2747 * 3.1415927410125732421875) * (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) / ((_2769 * _2769) * ((_2712 * 2.1991131305694580078125) + 3.141590118408203125))) * _2701;
                        _2554 = (_2716 * _2664.x) + _2622;
                        _2555 = (_2716 * _2664.y) + _2623;
                        _2556 = (_2716 * _2664.z) + _2624;
                        _2551 = (_2797 * _2681.x) + _2619;
                        _2552 = (_2797 * _2681.y) + _2620;
                        _2553 = (_2797 * _2681.z) + _2621;
                        if (_2626 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2619 = _2551;
                            _2620 = _2552;
                            _2621 = _2553;
                            _2622 = _2554;
                            _2623 = _2555;
                            _2624 = _2556;
                            _2625 = _2626;
                        }
                    }
                    frontier_phi_63_pred = _2556;
                    frontier_phi_63_pred_1 = _2555;
                    frontier_phi_63_pred_2 = _2554;
                    frontier_phi_63_pred_3 = _2553;
                    frontier_phi_63_pred_4 = _2552;
                    frontier_phi_63_pred_5 = _2551;
                }
                _2362 = frontier_phi_63_pred;
                _2360 = frontier_phi_63_pred_1;
                _2358 = frontier_phi_63_pred_2;
                _2356 = frontier_phi_63_pred_3;
                _2354 = frontier_phi_63_pred_4;
                _2352 = frontier_phi_63_pred_5;
                uint _2502 = _2501 + 1u;
                if (_2502 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2495 = _2352;
                    _2496 = _2354;
                    _2497 = _2356;
                    _2498 = _2358;
                    _2499 = _2360;
                    _2500 = _2362;
                    _2501 = _2502;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2351 = _2352;
            _2353 = _2354;
            _2355 = _2356;
            _2357 = _2358;
            _2359 = _2360;
            _2361 = _2362;
        }
        uvec4 _2365 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2366 = _2365.z;
        uint _2368 = (_2366 >> 8u) & 15u;
        float _2463;
        float _2465;
        float _2467;
        float _2469;
        float _2471;
        float _2473;
        if (((4294967295u << _2368) & _2248) == 0u)
        {
            _2463 = _2351;
            _2465 = _2353;
            _2467 = _2355;
            _2469 = _2357;
            _2471 = _2359;
            _2473 = _2361;
        }
        else
        {
            float _2488 = inversesqrt(dot(vec3(_2202, _2203, _2204), vec3(_2202, _2203, _2204)));
            float _2489 = _2488 * _2202;
            float _2490 = _2488 * _2203;
            float _2491 = _2488 * _2204;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2368 < ((_2366 >> 12u) & 15u))
            {
                float _2464;
                float _2466;
                float _2468;
                float _2470;
                float _2472;
                float _2474;
                float _2602 = _2351;
                float _2603 = _2353;
                float _2604 = _2355;
                float _2605 = _2357;
                float _2606 = _2359;
                float _2607 = _2361;
                uint _2608 = _2368;
                uint _2617;
                bool _2618;
                for (;;)
                {
                    _2617 = texelFetch(g_lightClassification, int((((_2242 << 5u) + (_2228 << 9u)) + (_2608 << 2u)) >> 2u)).x;
                    _2618 = _2617 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2618)
                    {
                        frontier_phi_69_pred = _2607;
                        frontier_phi_69_pred_1 = _2606;
                        frontier_phi_69_pred_2 = _2605;
                        frontier_phi_69_pred_3 = _2604;
                        frontier_phi_69_pred_4 = _2603;
                        frontier_phi_69_pred_5 = _2602;
                    }
                    else
                    {
                        float _2802;
                        float _2803;
                        float _2804;
                        float _2805;
                        float _2806;
                        float _2807;
                        float _3098;
                        float _3099;
                        float _3100;
                        float _3101;
                        float _3102;
                        float _3103;
                        float _2815 = _2602;
                        float _2816 = _2603;
                        float _2817 = _2604;
                        float _2818 = _2605;
                        float _2819 = _2606;
                        float _2820 = _2607;
                        uint _2821 = _2617;
                        uint _2822;
                        vec4 _2847;
                        float _2848;
                        vec4 _2863;
                        vec3 _2875;
                        vec4 _2891;
                        vec4 _2907;
                        float _2954;
                        bool _2955;
                        for (;;)
                        {
                            uint _2832 = ((_2608 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2821));
                            _2822 = (_2821 + 4294967295u) & _2821;
                            uint _2834 = _2832 * 40u;
                            _2847 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2834)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 3u)).x));
                            _2848 = _2847.w;
                            uint _2850 = (_2832 * 40u) + 4u;
                            _2863 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2850)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 3u)).x));
                            uint _2865 = (_2832 * 40u) + 8u;
                            _2875 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2865)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 2u)).x));
                            uint _2878 = (_2832 * 40u) + 16u;
                            _2891 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2878)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 3u)).x));
                            uint _2894 = (_2832 * 40u) + 20u;
                            _2907 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2894)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 3u)).x));
                            uint _2910 = (_2832 * 40u) + 24u;
                            vec4 _2923 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 3u)).x));
                            uint _2929 = (_2832 * 40u) + 28u;
                            vec4 _2942 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2929)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 3u)).x));
                            _2954 = fma(_2204, _2942.z, fma(_2203, _2942.y, _2942.x * _2202)) + _2942.w;
                            _2955 = !((fma(_2204, _2923.z, fma(_2203, _2923.y, _2923.x * _2202)) + _2923.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2955)
                            {
                                float _2982 = _2847.x - _2202;
                                float _2983 = _2847.y - _2203;
                                float _2984 = _2847.z - _2204;
                                float _2985 = dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984));
                                float _2988 = inversesqrt(_2985);
                                float _2989 = _2988 * _2982;
                                float _2990 = _2988 * _2983;
                                float _2991 = _2988 * _2984;
                                float _2995 = 1.0 - (_2985 / (_2848 * _2848));
                                float _4033 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                                float _2996 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
                                float _3000 = sqrt(_2985) * _2863.w;
                                float _3002 = 1.39999997615814208984375 / (_3000 + 1.39999997615814208984375);
                                float _3003 = _3002 * _3002;
                                float _3006 = ((1.0 - _3003) * dot(vec3(_2989, _2990, _2991), vec3(_436, _439, _442))) + _3003;
                                float _3009 = _3000 * _3000;
                                float _3013 = (fma(_2204, _2891.z, fma(_2203, _2891.y, _2891.x * _2202)) + _2891.w) / _2954;
                                float _3014 = (fma(_2204, _2907.z, fma(_2203, _2907.y, _2907.x * _2202)) + _2907.w) / _2954;
                                float _3018 = 1.0 - dot(vec2(_3013, _3014), vec2(_3013, _3014));
                                float _4049 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                                float _3019 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
                                float _3020 = _3019 * (((isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0))) * _2996) / ((_3009 * 0.699999988079071044921875) + 1.0));
                                float _3032 = exp2(log2(1.0 / ((_3009 * 3.5) + 5.0)) * 0.25);
                                float _3033 = 1.0 - _512;
                                float _3040 = sqrt(1.0 - ((1.0 - (_3033 * _3033)) * (1.0 - (_3032 * _3032))));
                                float _3041 = _3040 * _3040;
                                float _3042 = _3041 * _3041;
                                float _3043 = _2989 - _2489;
                                float _3044 = _2990 - _2490;
                                float _3045 = _2991 - _2491;
                                float _3049 = inversesqrt(dot(vec3(_3043, _3044, _3045), vec3(_3043, _3044, _3045)));
                                float _3053 = dot(vec3(_436, _439, _442), vec3((-0.0) - _2489, (-0.0) - _2490, (-0.0) - _2491));
                                float _4060 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                                float _3056 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
                                float _3057 = dot(vec3(_436, _439, _442), vec3(_3049 * _3043, _3049 * _3044, _3049 * _3045));
                                float _4071 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                                float _3060 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
                                float _3064 = ((_3060 * _3060) * (_3042 + (-1.0))) + 1.0;
                                float _3065 = _3002 * _3041;
                                float _3066 = _3065 * _3065;
                                float _3072 = ((1.0 - _3066) * dot(vec3(_436, _439, _442), vec3(_2989, _2990, _2991))) + _3066;
                                float _4082 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                                float _3073 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
                                float _3074 = 1.0 - _3041;
                                float _3084 = (0.5 / (((_3073 * ((_3056 * _3074) + _3041)) + 9.9999999392252902907785028219223e-09) + (((_3073 * _3074) + _3041) * _3056))) * _3073;
                                float _4093 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                                float _3094 = (_3019 * _2996) * (((_3042 * 3.1415927410125732421875) * (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0)))) / ((_3064 * _3064) * ((_3009 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3020 * _2863.z;
                                frontier_phi_75_pred_1 = _3020 * _2863.y;
                                frontier_phi_75_pred_2 = _3020 * _2863.x;
                                frontier_phi_75_pred_3 = _3094 * _2875.z;
                                frontier_phi_75_pred_4 = _3094 * _2875.y;
                                frontier_phi_75_pred_5 = _3094 * _2875.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3103 = frontier_phi_75_pred;
                            _3102 = frontier_phi_75_pred_1;
                            _3101 = frontier_phi_75_pred_2;
                            _3100 = frontier_phi_75_pred_3;
                            _3099 = frontier_phi_75_pred_4;
                            _3098 = frontier_phi_75_pred_5;
                            _2805 = _3101 + _2818;
                            _2806 = _3102 + _2819;
                            _2807 = _3103 + _2820;
                            _2802 = _3098 + _2815;
                            _2803 = _3099 + _2816;
                            _2804 = _3100 + _2817;
                            if (_2822 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2815 = _2802;
                                _2816 = _2803;
                                _2817 = _2804;
                                _2818 = _2805;
                                _2819 = _2806;
                                _2820 = _2807;
                                _2821 = _2822;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2807;
                        frontier_phi_69_pred_1 = _2806;
                        frontier_phi_69_pred_2 = _2805;
                        frontier_phi_69_pred_3 = _2804;
                        frontier_phi_69_pred_4 = _2803;
                        frontier_phi_69_pred_5 = _2802;
                    }
                    _2474 = frontier_phi_69_pred;
                    _2472 = frontier_phi_69_pred_1;
                    _2470 = frontier_phi_69_pred_2;
                    _2468 = frontier_phi_69_pred_3;
                    _2466 = frontier_phi_69_pred_4;
                    _2464 = frontier_phi_69_pred_5;
                    uint _2609 = _2608 + 1u;
                    if (_2609 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2602 = _2464;
                        _2603 = _2466;
                        _2604 = _2468;
                        _2605 = _2470;
                        _2606 = _2472;
                        _2607 = _2474;
                        _2608 = _2609;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2474;
                frontier_phi_57_58_ladder_1 = _2472;
                frontier_phi_57_58_ladder_2 = _2470;
                frontier_phi_57_58_ladder_3 = _2468;
                frontier_phi_57_58_ladder_4 = _2466;
                frontier_phi_57_58_ladder_5 = _2464;
            }
            else
            {
                frontier_phi_57_58_ladder = _2361;
                frontier_phi_57_58_ladder_1 = _2359;
                frontier_phi_57_58_ladder_2 = _2357;
                frontier_phi_57_58_ladder_3 = _2355;
                frontier_phi_57_58_ladder_4 = _2353;
                frontier_phi_57_58_ladder_5 = _2351;
            }
            _2463 = frontier_phi_57_58_ladder_5;
            _2465 = frontier_phi_57_58_ladder_4;
            _2467 = frontier_phi_57_58_ladder_3;
            _2469 = frontier_phi_57_58_ladder_2;
            _2471 = frontier_phi_57_58_ladder_1;
            _2473 = frontier_phi_57_58_ladder;
        }
        float _2478 = isnan(1.0) ? _496 : (isnan(_496) ? 1.0 : min(_496, 1.0));
        _2260 = (_2478 * _2469) + _1694;
        _2262 = (_2478 * _2471) + _1696;
        _2264 = (_2478 * _2473) + _1698;
        _2266 = ((_2463 * _481) * _2478) + _2042;
        _2268 = ((_2465 * _483) * _2478) + _2044;
        _2270 = ((_2467 * _484) * _2478) + _2046;
    }
    else
    {
        _2260 = _1694;
        _2262 = _1696;
        _2264 = _1698;
        _2266 = _2042;
        _2268 = _2044;
        _2270 = _2046;
    }
    float _4109 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _4120 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _4131 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _2287 = ((isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_2260 + ((isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0))) * _496))) + ((_2266 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _1306)) * cbPerFrame._m0[3u].x);
    float _2288 = ((isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_2262 + ((isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0))) * _496))) + ((_2268 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _1306)) * cbPerFrame._m0[3u].x);
    float _2289 = ((isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_2264 + ((isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0))) * _496))) + ((_2270 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _1306)) * cbPerFrame._m0[3u].x);
    uint _2293 = _455 + 6u;
    float _2301 = _414 / cbSceneParam._m0[86u].x;
    float _2302 = _415 / cbSceneParam._m0[86u].y;
    vec4 _2316 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2301, _2302, (log2((isnan(cbSceneParam._m0[77u].w) ? _348 : (isnan(_348) ? cbSceneParam._m0[77u].w : min(_348, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2318 = _2316.x;
    float _2319 = _2316.y;
    float _2320 = _2316.z;
    float _2321 = _2316.w;
    float _2413;
    float _2415;
    float _2417;
    float _2419;
    if (_348 > cbSceneParam._m0[78u].w)
    {
        float _2376 = isnan(_348) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _348 : min(cbSceneParam._m0[80u].w, _348));
        float _2377 = _2376 / _348;
        float _2388 = _2377 * _399;
        float _2389 = _400 * _2377;
        float _2390 = (-0.0) - _2389;
        float _2391 = _2377 * _401;
        float _2393 = (cbSceneParam._m0[77u].w * _2390) / _2376;
        float _2394 = _2393 + cbSceneParam._m0[79u].w;
        float _2395 = cbSceneParam._m0[79u].w - _2389;
        float _2401 = sqrt(((_2388 * _2388) + (_2389 * _2389)) + (_2391 * _2391));
        float _2404 = (1.0 - (cbSceneParam._m0[77u].w / _2376)) * _2401;
        float _2409 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2411 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2564;
        if (abs((_2390 - _2393) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2564 = ((((_2394 > 0.0) ? exp2(_2409 * _2394) : (2.0 - exp2(_2411 * _2394))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2404;
        }
        else
        {
            float _2524 = 1.0 / cbSceneParam._m0[80u].x;
            float _2525 = isnan(_2395) ? _2394 : (isnan(_2394) ? _2395 : max(_2394, _2395));
            float _2526 = isnan(_2395) ? _2394 : (isnan(_2394) ? _2395 : min(_2394, _2395));
            float _2535 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : min(_2525, 0.0));
            float _2536 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : min(_2526, 0.0));
            _2564 = ((abs(_2401 / _2390) * cbSceneParam._m0[80u].y) * ((((_2535 - _2536) * 2.0) - ((exp2(_2409 * (isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0)))) - exp2(_2409 * (isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0))))) * _2524)) - ((exp2(_2411 * _2535) - exp2(_2411 * _2536)) * _2524))) + (_2404 * cbSceneParam._m0[80u].z);
        }
        vec4 _2566 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2301, _2302, 1.0), 0.0);
        float _2575 = exp2((_2564 * (-1.44269502162933349609375)) * (1.0 - _2566.w));
        float _2576 = log2(_2575);
        float _2592 = log2(_2321);
        _2413 = (exp2(_2592 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2576 * cbSceneParam._m0[78u].x)) * _2566.x) / cbSceneParam._m0[78u].x)) + _2318;
        _2415 = (exp2(_2592 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2576 * cbSceneParam._m0[78u].y)) * _2566.y) / cbSceneParam._m0[78u].y)) + _2319;
        _2417 = (exp2(_2592 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2576 * cbSceneParam._m0[78u].z)) * _2566.z) / cbSceneParam._m0[78u].z)) + _2320;
        _2419 = _2575 * _2321;
    }
    else
    {
        _2413 = _2318;
        _2415 = _2319;
        _2417 = _2320;
        _2419 = _2321;
    }
    float _2431 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2432 = _2431 == 3.0;
    float _2433 = log2(_2419);
    float _2440 = exp2(_2433 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0)));
    float _2441 = exp2(_2433 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0)));
    float _2442 = exp2(_2433 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0)));
    float _2451 = (_2431 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2451 * (_2432 ? _2440 : (_2440 + (cbSceneParam._m0[72u].w * _2413)));
    SV_Target.y = _2451 * (_2432 ? _2441 : (_2441 + (cbSceneParam._m0[72u].w * _2415)));
    SV_Target.z = _2451 * (_2432 ? _2442 : (_2442 + (cbSceneParam._m0[72u].w * _2417)));
    SV_Target.w = cbInstanceData._m0[_2293].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2293].w;
}


