#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_di_FlipBook_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_di_FlipBook_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_di_FlipBook_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _969;
float _3386;
float _3387;
float _3388;
float _3389;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = _205 * NORMAL.x;
    float _207 = _205 * NORMAL.y;
    float _208 = _205 * NORMAL.z;
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _220;
    float _221;
    float _222;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
    }
    else
    {
        _220 = _206;
        _221 = _207;
        _222 = _208;
    }
    uint _242 = uint(int(floor(cbMtdParam._m0[10u].z)));
    uint _243 = uint(int(cbMtdParam._m0[11u].x * cbMtdParam._m0[10u].w));
    float _245 = float(int(_242 - _243 * (_242 / _243)));
    float _255 = (fract(TEXCOORD_1.x) + (_245 - cbMtdParam._m0[10u].w * trunc(_245 / cbMtdParam._m0[10u].w))) * (1.0 / cbMtdParam._m0[10u].w);
    float _257 = (fract(TEXCOORD_1.y) + floor(_245 / cbMtdParam._m0[10u].w)) * (1.0 / cbMtdParam._m0[11u].x);
    vec4 _270 = texture(sampler2D(S_AMSN_di_FlipBook_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _255) + cbTextureTilingScale._m0[0u].z, (_257 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _277 = _270.x * cbMtdParam._m0[9u].x;
    float _278 = _270.y * cbMtdParam._m0[9u].y;
    float _279 = _270.z * cbMtdParam._m0[9u].z;
    vec4 _289 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _291 = _289.x;
    float _314 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _291)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _291))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _3398 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _319 = gl_FragCoord.x * 0.125;
    float _321 = gl_FragCoord.y * 0.125;
    float _331 = float((((cbMtdParam._m0[9u].w * TEXCOORD_1.z) * _270.w) * (isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0)))) >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_319, _321)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625));
    vec4 _346 = texture(sampler2D(S_AMSN_di_FlipBook_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _255) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _257) + cbTextureTilingScale._m0[2u].w));
    float _349 = _346.x + cbMtdParam._m0[10u].x;
    vec4 _361 = texture(sampler2D(S_AMSN_di_FlipBook_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _255) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _257) + cbTextureTilingScale._m0[1u].w));
    float _365 = _361.z;
    float _369 = (_361.x * 2.0) + (-1.0);
    float _371 = (_361.y * 2.0) + (-1.0);
    float _372 = dot(vec2(_369, _371), vec2(_369, _371));
    float _3409 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _377 = sqrt(1.0 - (isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0))));
    float _380 = fma(_377, _220, fma(_371, _212 * TANGENT.x, (_198 * _190) * _369));
    float _383 = fma(_377, _221, fma(_371, _212 * TANGENT.y, (_198 * _191) * _369));
    float _386 = fma(_377, _222, fma(_371, _212 * TANGENT.z, (_198 * _192) * _369));
    float _390 = inversesqrt(dot(vec3(_380, _383, _386), vec3(_380, _383, _386)));
    float _391 = _390 * _380;
    float _392 = _390 * _383;
    float _393 = _390 * _386;
    float _3420 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _394 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
    float _3431 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _3442 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3453 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _3464 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _398 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
    float _412 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _453 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _463 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _453);
    float _464 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _453);
    float _465 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _453);
    float _469 = inversesqrt(dot(vec3(_463, _464, _465), vec3(_463, _464, _465)));
    float _470 = _463 * _469;
    float _471 = _464 * _469;
    float _472 = _465 * _469;
    vec4 _473 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_319, _321));
    float _475 = _473.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _650 = sqrt(((_463 * _463) + (_464 * _464)) + (_465 * _465));
        float _656 = (cbMatDynParam._m0[5u].x * _650) + cbMatDynParam._m0[5u].y;
        float _3475 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
        float _657 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _661 = (cbMatDynParam._m0[5u].z * _650) + cbMatDynParam._m0[5u].w;
        float _3486 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0))) - _657)) + _657) < ((_475 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _486 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _487 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _507 = fma(_393, cbSceneParam._m0[5u].z, fma(_392, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _391));
    float _510 = fma(_393, cbSceneParam._m0[6u].z, fma(_392, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _391));
    float _513 = fma(_393, cbSceneParam._m0[7u].z, fma(_392, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _391));
    uint _526 = uint(roundEven(NORMAL.w)) * 13u;
    uint _528 = _526 + 9u;
    uint _529 = _528 + uint(cbMatDynParam._m0[0u].w);
    float _535 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0)))) * cbInstanceData._m0[_529].x;
    float _536 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0)))) * cbInstanceData._m0[_529].y;
    float _537 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0)))) * cbInstanceData._m0[_529].z;
    float _3497 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _538 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
    float _3508 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _539 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
    float _3519 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _540 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
    float _541 = 1.0 - _398;
    float _542 = _538 * _541;
    float _543 = _539 * _541;
    float _544 = _540 * _541;
    float _549 = (_538 + (-0.039999999105930328369140625)) * _398;
    float _550 = (_539 + (-0.039999999105930328369140625)) * _398;
    float _551 = (_540 + (-0.039999999105930328369140625)) * _398;
    float _552 = _549 + 0.039999999105930328369140625;
    float _554 = _550 + 0.039999999105930328369140625;
    float _555 = _551 + 0.039999999105930328369140625;
    vec4 _564 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _486, cbSceneParam._m0[86u].y * _487));
    float _567 = _564.x * TEXCOORD_1.w;
    float _568 = dot(vec3(_391, _392, _393), vec3(_470, _471, _472));
    float _571 = _568 * 2.0;
    float _575 = (_571 * _391) - _470;
    float _576 = (_571 * _392) - _471;
    float _577 = (_571 * _393) - _472;
    float _581 = abs(dot(vec3(_470, _471, _472), vec3(_391, _392, _393)));
    float _3530 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _583 = sqrt(_394);
    float _596 = exp2((_583 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_583 * 3.0));
    float _602 = (1.0 - _596) * ((_583 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _603 = _596 * _583;
    float _631 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _635 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _639 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _968;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _693 = fma(_639, cbModelParam._m0[26u].z, fma(_635, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _631));
        float _697 = fma(_639, cbModelParam._m0[27u].z, fma(_635, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _631));
        float _701 = fma(_639, cbModelParam._m0[28u].z, fma(_635, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _631));
        float _726 = _631 + _391;
        float _727 = _635 + _392;
        float _728 = _639 + _393;
        float _738 = fma(_728, cbModelParam._m0[26u].z, fma(_727, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _726)) - _693;
        float _739 = fma(_728, cbModelParam._m0[27u].z, fma(_727, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _726)) - _697;
        float _740 = fma(_728, cbModelParam._m0[28u].z, fma(_727, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _726)) - _701;
        float _744 = inversesqrt(dot(vec3(_738, _739, _740), vec3(_738, _739, _740)));
        float _757 = ((_744 * _738) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_693 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _758 = ((_744 * _739) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_697 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _759 = ((_744 * _740) / cbModelParam._m0[34u].z) + ((((((_701 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _762 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_757, _758, _759), 0.0);
        vec4 _769 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_757, _758, _759), 0.0);
        vec4 _776 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_757, _758, _759), 0.0);
        vec4 _783 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_757, _758, _759), 0.0);
        float _796 = exp2((_762.w + (-0.5)) * 20.0) * 2.0;
        float _797 = _796 * (_762.x + (-0.5));
        float _798 = _796 * (_762.y + (-0.5));
        float _799 = _796 * (_762.z + (-0.5));
        float _806 = exp2((_769.w + (-0.5)) * 20.0) * 2.0;
        float _807 = _806 * (_769.x + (-0.5));
        float _808 = _806 * (_769.y + (-0.5));
        float _809 = _806 * (_769.z + (-0.5));
        float _816 = exp2((_776.w + (-0.5)) * 20.0) * 2.0;
        float _817 = _816 * (_776.x + (-0.5));
        float _818 = _816 * (_776.y + (-0.5));
        float _819 = _816 * (_776.z + (-0.5));
        float _826 = exp2((_783.w + (-0.5)) * 20.0) * 2.0;
        float _827 = _826 * (_783.x + (-0.5));
        float _828 = _826 * (_783.y + (-0.5));
        float _829 = _826 * (_783.z + (-0.5));
        float _830 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _831 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _832 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _833 = _797 * 0.5;
        float _834 = _807 * 0.5;
        float _835 = _817 * 0.5;
        float _836 = dot(vec3(_833, _834, _835), vec3(_833, _834, _835));
        float _841 = (_836 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_836);
        float _850 = (dot(vec3(_391, _392, _393), vec3(_841 * _833, _841 * _834, _841 * _835)) + 1.0) * 0.5;
        float _3556 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _860 = sqrt(((_834 * _834) + (_833 * _833)) + (_835 * _835)) / (_830 + 9.9999997473787516355514526367188e-06);
        float _3567 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _861 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _862 = _861 * 2.0;
        float _866 = (1.0 - _861) / (_861 + 1.0);
        float _3578 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _876 = ((((1.0 - _867) * (_862 + 2.0)) * exp2(log2(isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * (_862 + 1.0))) + _867) * _830;
        float _877 = _798 * 0.5;
        float _878 = _808 * 0.5;
        float _879 = _818 * 0.5;
        float _880 = dot(vec3(_877, _878, _879), vec3(_877, _878, _879));
        float _885 = (_880 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_880);
        float _893 = (dot(vec3(_391, _392, _393), vec3(_885 * _877, _885 * _878, _885 * _879)) + 1.0) * 0.5;
        float _3589 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _902 = sqrt(((_878 * _878) + (_877 * _877)) + (_879 * _879)) / (_831 + 9.9999997473787516355514526367188e-06);
        float _3600 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _903 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _904 = _903 * 2.0;
        float _908 = (1.0 - _903) / (_903 + 1.0);
        float _3611 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _909 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _918 = ((((1.0 - _909) * (_904 + 2.0)) * exp2(log2(isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * (_904 + 1.0))) + _909) * _831;
        float _919 = _799 * 0.5;
        float _920 = _809 * 0.5;
        float _921 = _819 * 0.5;
        float _922 = dot(vec3(_919, _920, _921), vec3(_919, _920, _921));
        float _927 = (_922 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_922);
        float _935 = (dot(vec3(_391, _392, _393), vec3(_927 * _919, _927 * _920, _927 * _921)) + 1.0) * 0.5;
        float _3622 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _944 = sqrt(((_920 * _920) + (_919 * _919)) + (_921 * _921)) / (_832 + 9.9999997473787516355514526367188e-06);
        float _3633 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _946 = _945 * 2.0;
        float _950 = (1.0 - _945) / (_945 + 1.0);
        float _3644 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _960 = ((((1.0 - _951) * (_946 + 2.0)) * exp2(log2(isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * (_946 + 1.0))) + _951) * _832;
        _968 = _799;
        _970 = _798;
        _971 = _797;
        _972 = _809;
        _973 = _808;
        _974 = _807;
        _975 = _819;
        _976 = _818;
        _977 = _817;
        _978 = _832;
        _979 = _831;
        _980 = _830;
        _981 = cbModelParam._m0[36u].z * (isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0)));
        _982 = cbModelParam._m0[36u].z * (isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0)));
        _983 = cbModelParam._m0[36u].z * (isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0)));
    }
    else
    {
        _968 = _969;
        _970 = _969;
        _971 = _969;
        _972 = _969;
        _973 = _969;
        _974 = _969;
        _975 = _969;
        _976 = _969;
        _977 = _969;
        _978 = _969;
        _979 = _969;
        _980 = _969;
        _981 = 0.0;
        _982 = 0.0;
        _983 = 0.0;
    }
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1012 = fma(_639, cbModelParam._m0[30u].z, fma(_635, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _631));
        float _1016 = fma(_639, cbModelParam._m0[31u].z, fma(_635, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _631));
        float _1020 = fma(_639, cbModelParam._m0[32u].z, fma(_635, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _631));
        float _1043 = _631 + _391;
        float _1044 = _635 + _392;
        float _1045 = _639 + _393;
        float _1055 = fma(_1045, cbModelParam._m0[30u].z, fma(_1044, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1043)) - _1012;
        float _1056 = fma(_1045, cbModelParam._m0[31u].z, fma(_1044, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1043)) - _1016;
        float _1057 = fma(_1045, cbModelParam._m0[32u].z, fma(_1044, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1043)) - _1020;
        float _1061 = inversesqrt(dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057)));
        float _1074 = ((_1061 * _1055) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1012 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1075 = ((_1061 * _1056) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1016 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1076 = ((_1061 * _1057) / cbModelParam._m0[35u].z) + ((((((_1020 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        float _1111 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1078.x + (-0.5));
        float _1113 = _1111 * (_1078.y + (-0.5));
        float _1114 = _1111 * (_1078.z + (-0.5));
        float _1121 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1085.x + (-0.5));
        float _1123 = _1121 * (_1085.y + (-0.5));
        float _1124 = _1121 * (_1085.z + (-0.5));
        float _1131 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1092.x + (-0.5));
        float _1133 = _1131 * (_1092.y + (-0.5));
        float _1134 = _1131 * (_1092.z + (-0.5));
        float _1141 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1099.x + (-0.5));
        float _1143 = _1141 * (_1099.y + (-0.5));
        float _1144 = _1141 * (_1099.z + (-0.5));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = _1112 * 0.5;
        float _1149 = _1122 * 0.5;
        float _1150 = _1132 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1164 = (dot(vec3(_391, _392, _393), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _3685 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1173 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _3696 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _3707 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * (_1175 + 1.0))) + _1180) * _1145;
        float _1190 = _1113 * 0.5;
        float _1191 = _1123 * 0.5;
        float _1192 = _1133 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1206 = (dot(vec3(_391, _392, _393), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _3718 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1215 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _3729 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _3740 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * (_1217 + 1.0))) + _1222) * _1146;
        float _1232 = _1114 * 0.5;
        float _1233 = _1124 * 0.5;
        float _1234 = _1134 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1248 = (dot(vec3(_391, _392, _393), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _3751 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1257 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _3762 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _3773 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (_1259 + 1.0))) + _1264) * _1147;
        _1281 = _1114;
        _1282 = _1113;
        _1283 = _1112;
        _1284 = _1124;
        _1285 = _1123;
        _1286 = _1122;
        _1287 = _1134;
        _1288 = _1133;
        _1289 = _1132;
        _1290 = _1147;
        _1291 = _1146;
        _1292 = _1145;
        _1293 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
        _1294 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
        _1295 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
    }
    else
    {
        _1281 = _969;
        _1282 = _969;
        _1283 = _969;
        _1284 = _969;
        _1285 = _969;
        _1286 = _969;
        _1287 = _969;
        _1288 = _969;
        _1289 = _969;
        _1290 = _969;
        _1291 = _969;
        _1292 = _969;
        _1293 = 0.0;
        _1294 = 0.0;
        _1295 = 0.0;
    }
    float _1305 = (cbModelParam._m0[1u].x * (_1293 - _981)) + _981;
    float _1306 = (cbModelParam._m0[1u].x * (_1294 - _982)) + _982;
    float _1307 = (cbModelParam._m0[1u].x * (_1295 - _983)) + _983;
    float _1328 = fma(_1307, cbSceneParam._m0[89u].z, fma(_1306, cbSceneParam._m0[89u].y, _1305 * cbSceneParam._m0[89u].x));
    float _1331 = fma(_1307, cbSceneParam._m0[90u].z, fma(_1306, cbSceneParam._m0[90u].y, _1305 * cbSceneParam._m0[90u].x));
    float _1334 = fma(_1307, cbSceneParam._m0[91u].z, fma(_1306, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1305));
    float _1349 = _575 * 0.5;
    float _1350 = _576 * 0.5;
    float _1351 = _577 * 0.5;
    float _1352 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_1283, _1286, _1289, _1292));
    float _1355 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_1282, _1285, _1288, _1291));
    float _1358 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_1281, _1284, _1287, _1290));
    float _1392;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1365 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_968, _972, _975, _978));
        float _1369 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_970, _973, _976, _979));
        float _1373 = dot(vec4(_1349, _1350, _1351, 1.0), vec4(_971, _974, _977, _980));
        float _1380 = dot(vec4(cbModelParam._m0[39u]), vec4(_1349, _1350, _1351, 1.0));
        _1392 = dot(vec3(isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)), isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)), isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1380) ? 0.0 : (isnan(0.0) ? _1380 : max(0.0, _1380))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1392 = 1.0;
    }
    float _1403;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1394 = dot(vec4(cbModelParam._m0[40u]), vec4(_1349, _1350, _1351, 1.0));
        _1403 = dot(vec3(isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)), isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)), isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1394) ? 0.0 : (isnan(0.0) ? _1394 : max(0.0, _1394))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1403 = 1.0;
    }
    float _1407 = (_1403 * cbModelParam._m0[1u].x) + (_1392 * (1.0 - cbModelParam._m0[1u].x));
    float _1417 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _394);
    float _1418 = isnan(_1417) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1417 : min(cbModelParam._m0[25u].z, _1417));
    float _1500;
    float _1502;
    float _1504;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1467 = fma(_639, cbModelParam._m0[13u].z, fma(_635, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _631)) + cbModelParam._m0[13u].w;
        float _1471 = fma(_639, cbModelParam._m0[14u].z, fma(_635, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _631)) + cbModelParam._m0[14u].w;
        float _1475 = fma(_639, cbModelParam._m0[15u].z, fma(_635, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _631)) + cbModelParam._m0[15u].w;
        float _1478 = fma(_577, cbModelParam._m0[13u].z, fma(_576, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _575));
        float _1481 = fma(_577, cbModelParam._m0[14u].z, fma(_576, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _575));
        float _1484 = fma(_577, cbModelParam._m0[15u].z, fma(_576, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _575));
        float _1512;
        if (_1478 > 0.0)
        {
            _1512 = abs((1.0 - _1467) / _1478);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1478 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1467 + 1.0) / _1478);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1512 = frontier_phi_19_17_ladder;
        }
        float _1740;
        if (_1481 > 0.0)
        {
            _1740 = abs((1.0 - _1471) / _1481);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1481 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1471 + 1.0) / _1481);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1740 = frontier_phi_28_24_ladder;
        }
        float _1997;
        if (_1484 > 0.0)
        {
            _1997 = abs((1.0 - _1475) / _1484);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1475 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1997 = frontier_phi_40_35_ladder;
        }
        float _1999 = isnan(_1740) ? _1512 : (isnan(_1512) ? _1740 : min(_1512, _1740));
        float _2000 = isnan(_1997) ? _1999 : (isnan(_1999) ? _1997 : min(_1999, _1997));
        float _2004 = (_2000 * _1478) + _1467;
        float _2005 = (_2000 * _1481) + _1471;
        float _2006 = (_2000 * _1484) + _1475;
        float _2007 = _2000 * 9.9999997473787516355514526367188e-05;
        float _2009 = (-1.0) - _2007;
        float _2011 = _2007 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2006 > _2011) || ((_2006 < _2009) || ((_2005 > _2011) || ((_2005 < _2009) || ((_2004 < _2009) || (_2004 > _2011))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2134 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2006, cbModelParam._m0[9u].z, fma(_2005, cbModelParam._m0[9u].y, _2004 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2006, cbModelParam._m0[10u].z, fma(_2005, cbModelParam._m0[10u].y, _2004 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2006, cbModelParam._m0[11u].z, fma(_2005, cbModelParam._m0[11u].y, _2004 * cbModelParam._m0[11u].x))), _1418);
            frontier_phi_18_40_ladder = _2134.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2134.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2134.x * cbModelParam._m0[1u].y;
        }
        _1500 = frontier_phi_18_40_ladder_2;
        _1502 = frontier_phi_18_40_ladder_1;
        _1504 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1488 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_575, _576, _577), _1418);
        _1500 = _1488.x * cbModelParam._m0[1u].y;
        _1502 = _1488.y * cbModelParam._m0[1u].y;
        _1504 = _1488.z * cbModelParam._m0[1u].y;
    }
    float _1508 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _394);
    float _1509 = isnan(_1508) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1508 : min(cbModelParam._m0[25u].w, _1508));
    float _1602;
    float _1604;
    float _1606;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1566 = fma(_639, cbModelParam._m0[21u].z, fma(_635, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _631)) + cbModelParam._m0[21u].w;
        float _1570 = fma(_639, cbModelParam._m0[22u].z, fma(_635, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _631)) + cbModelParam._m0[22u].w;
        float _1574 = fma(_639, cbModelParam._m0[23u].z, fma(_635, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _631)) + cbModelParam._m0[23u].w;
        float _1577 = fma(_577, cbModelParam._m0[21u].z, fma(_576, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _575));
        float _1580 = fma(_577, cbModelParam._m0[22u].z, fma(_576, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _575));
        float _1583 = fma(_577, cbModelParam._m0[23u].z, fma(_576, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _575));
        float _1745;
        if (_1577 > 0.0)
        {
            _1745 = abs((1.0 - _1566) / _1577);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1566 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1745 = frontier_phi_30_26_ladder;
        }
        float _2024;
        if (_1580 > 0.0)
        {
            _2024 = abs((1.0 - _1570) / _1580);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1570 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2024 = frontier_phi_42_37_ladder;
        }
        float _2237;
        if (_1583 > 0.0)
        {
            _2237 = abs((1.0 - _1574) / _1583);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1574 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2237 = frontier_phi_51_48_ladder;
        }
        float _2239 = isnan(_2024) ? _1745 : (isnan(_1745) ? _2024 : min(_1745, _2024));
        float _2240 = isnan(_2237) ? _2239 : (isnan(_2239) ? _2237 : min(_2239, _2237));
        float _2244 = (_2240 * _1577) + _1566;
        float _2245 = (_2240 * _1580) + _1570;
        float _2246 = (_2240 * _1583) + _1574;
        float _2247 = _2240 * 9.9999997473787516355514526367188e-05;
        float _2248 = (-1.0) - _2247;
        float _2250 = _2247 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2246 > _2250) || ((_2246 < _2248) || ((_2245 > _2250) || ((_2245 < _2248) || ((_2244 < _2248) || (_2244 > _2250))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2447 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2246, cbModelParam._m0[17u].z, fma(_2245, cbModelParam._m0[17u].y, _2244 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2246, cbModelParam._m0[18u].z, fma(_2245, cbModelParam._m0[18u].y, _2244 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2246, cbModelParam._m0[19u].z, fma(_2245, cbModelParam._m0[19u].y, _2244 * cbModelParam._m0[19u].x))), _1509);
            frontier_phi_27_51_ladder = _2447.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2447.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2447.x * cbModelParam._m0[1u].z;
        }
        _1602 = frontier_phi_27_51_ladder_2;
        _1604 = frontier_phi_27_51_ladder_1;
        _1606 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1586 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_575, _576, _577), _1509);
        _1602 = _1586.x * cbModelParam._m0[1u].z;
        _1604 = _1586.y * cbModelParam._m0[1u].z;
        _1606 = _1586.z * cbModelParam._m0[1u].z;
    }
    float _1619 = (((_602 * _552) + _603) * _567) * ((cbModelParam._m0[1u].w * (_1602 - _1500)) + _1500);
    float _1621 = (((_602 * _554) + _603) * _567) * ((cbModelParam._m0[1u].w * (_1604 - _1502)) + _1502);
    float _1623 = (((_602 * _555) + _603) * _567) * ((cbModelParam._m0[1u].w * (_1606 - _1504)) + _1504);
    float _1626 = fma(_1623, cbSceneParam._m0[89u].z, fma(_1621, cbSceneParam._m0[89u].y, _1619 * cbSceneParam._m0[89u].x));
    float _1629 = fma(_1623, cbSceneParam._m0[90u].z, fma(_1621, cbSceneParam._m0[90u].y, _1619 * cbSceneParam._m0[90u].x));
    float _1632 = fma(_1623, cbSceneParam._m0[91u].z, fma(_1621, cbSceneParam._m0[91u].y, _1619 * cbSceneParam._m0[91u].x));
    vec4 _1640 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_486, _487));
    float _1642 = _1640.w;
    float _1654 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1642);
    float _1655 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1642);
    float _1656 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1642);
    uvec4 _1660 = floatBitsToUint(cbInstanceData._m0[_526 + 5u]);
    uint _1662 = _1660.x * 14u;
    uint _1663 = _1662 + 13u;
    float _1670 = _567 + (-1.0);
    float _1675 = (cbLight._m0[_1663].x * _1670) + 1.0;
    float _1676 = (cbLight._m0[_1663].y * _1670) + 1.0;
    float _1677 = (cbLight._m0[_1663].z * _1670) + 1.0;
    float _1678 = (cbLight._m0[_1663].w * _1670) + 1.0;
    uint _1679 = _1662 + 5u;
    float _1685 = isnan(1.0) ? _1676 : (isnan(_1676) ? 1.0 : min(_1676, 1.0));
    uint _1689 = _1662 + 4u;
    float _1699 = isnan(1.0) ? _1675 : (isnan(_1675) ? 1.0 : min(_1675, 1.0));
    uint _1703 = _1662 | 1u;
    float _1714 = dot(vec3(cbLight._m0[_1662].xyz), vec3(_391, _392, _393));
    float _1717 = dot(vec3(cbLight._m0[_1703].xyz), vec3(_391, _392, _393));
    float _3909 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _3920 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
    float _1722 = (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * 0.3183098733425140380859375;
    float _1724 = (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * 0.3183098733425140380859375;
    float _1731 = ((cbLight._m0[_1679].x * _1685) * _1724) + (((cbLight._m0[_1689].x * _1654) * _1699) * _1722);
    float _1732 = ((_1685 * cbLight._m0[_1679].y) * _1724) + (((cbLight._m0[_1689].y * _1655) * _1699) * _1722);
    float _1733 = ((_1685 * cbLight._m0[_1679].z) * _1724) + (((cbLight._m0[_1689].z * _1656) * _1699) * _1722);
    uvec4 _1737 = floatBitsToUint(cbLight._m0[_1662 + 12u]);
    bool _1739 = _1737.x == 0u;
    float _1750;
    float _1752;
    float _1754;
    if (_1739)
    {
        _1750 = _1731;
        _1752 = _1732;
        _1754 = _1733;
    }
    else
    {
        uint _1758 = _1662 + 6u;
        float _1774 = (dot(vec3(cbLight._m0[_1662 + 2u].xyz), vec3(_391, _392, _393)) * 0.5) + 0.5;
        float _1775 = _1774 * _1774;
        float _3931 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1777 = isnan(1.0) ? _1677 : (isnan(_1677) ? 1.0 : min(_1677, 1.0));
        _1750 = (((cbLight._m0[_1758].x * 0.3183098733425140380859375) * _1776) * _1777) + _1731;
        _1752 = (((cbLight._m0[_1758].y * 0.3183098733425140380859375) * _1776) * _1777) + _1732;
        _1754 = (((cbLight._m0[_1758].z * 0.3183098733425140380859375) * _1776) * _1777) + _1733;
    }
    bool _1757 = _1737.y == 0u;
    float _1795;
    float _1797;
    float _1799;
    if (_1757)
    {
        _1795 = _1750;
        _1797 = _1752;
        _1799 = _1754;
    }
    else
    {
        uint _1968 = _1662 + 7u;
        float _1984 = (dot(vec3(cbLight._m0[_1662 + 3u].xyz), vec3(_391, _392, _393)) * 0.5) + 0.5;
        float _1985 = _1984 * _1984;
        float _3947 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
        float _1986 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1987 = isnan(1.0) ? _1678 : (isnan(_1678) ? 1.0 : min(_1678, 1.0));
        _1795 = (((cbLight._m0[_1968].x * 0.3183098733425140380859375) * _1986) * _1987) + _1750;
        _1797 = (((cbLight._m0[_1968].y * 0.3183098733425140380859375) * _1986) * _1987) + _1752;
        _1799 = (((cbLight._m0[_1968].z * 0.3183098733425140380859375) * _1986) * _1987) + _1754;
    }
    uint _1802 = _1662 + 8u;
    float _1815 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1662].w)) * _394) * 0.949999988079071044921875);
    float _1816 = _1815 * _1815;
    float _1817 = cbLight._m0[_1662].x + _470;
    float _1818 = cbLight._m0[_1662].y + _471;
    float _1819 = cbLight._m0[_1662].z + _472;
    float _1823 = inversesqrt(dot(vec3(_1817, _1818, _1819), vec3(_1817, _1818, _1819)));
    float _1824 = _1823 * _1817;
    float _1825 = _1823 * _1818;
    float _1826 = _1823 * _1819;
    float _1827 = dot(vec3(_391, _392, _393), vec3(cbLight._m0[_1662].xyz));
    float _3963 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1830 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _3974 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _1831 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _1832 = dot(vec3(_391, _392, _393), vec3(_1824, _1825, _1826));
    float _3985 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1835 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _1836 = dot(vec3(cbLight._m0[_1662].xyz), vec3(_1824, _1825, _1826));
    float _3996 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1840 = _1816 * _1816;
    float _1844 = ((_1835 * _1835) * (_1840 + (-1.0))) + 1.0;
    float _1852 = exp2(log2(1.0 - (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) * 5.0);
    float _1853 = 0.959999978542327880859375 - _549;
    float _1855 = 0.959999978542327880859375 - _550;
    float _1856 = 0.959999978542327880859375 - _551;
    float _1863 = 1.0 - _1816;
    float _1874 = (0.5 / (((_1831 * ((_1830 * _1863) + _1816)) + 9.9999999392252902907785028219223e-09) + (((_1831 * _1863) + _1816) * _1830))) * _1830;
    float _4007 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1876 = (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1840 / ((_1844 * _1844) * 3.141590118408203125));
    uint _1890 = _1662 + 9u;
    float _1901 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1703].w)) * _394) * 0.949999988079071044921875);
    float _1902 = _1901 * _1901;
    float _1903 = cbLight._m0[_1703].x + _470;
    float _1904 = cbLight._m0[_1703].y + _471;
    float _1905 = cbLight._m0[_1703].z + _472;
    float _1909 = inversesqrt(dot(vec3(_1903, _1904, _1905), vec3(_1903, _1904, _1905)));
    float _1910 = _1909 * _1903;
    float _1911 = _1909 * _1904;
    float _1912 = _1909 * _1905;
    float _1913 = dot(vec3(_391, _392, _393), vec3(cbLight._m0[_1703].xyz));
    float _4018 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1916 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _1917 = dot(vec3(_391, _392, _393), vec3(_1910, _1911, _1912));
    float _4029 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1920 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _1921 = dot(vec3(cbLight._m0[_1703].xyz), vec3(_1910, _1911, _1912));
    float _4040 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
    float _1925 = _1902 * _1902;
    float _1929 = ((_1920 * _1920) * (_1925 + (-1.0))) + 1.0;
    float _1936 = exp2(log2(1.0 - (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) * 5.0);
    float _1943 = 1.0 - _1902;
    float _1953 = (0.5 / (((_1831 * ((_1916 * _1943) + _1902)) + 9.9999999392252902907785028219223e-09) + (((_1831 * _1943) + _1902) * _1916))) * _1916;
    float _4051 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1955 = (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1925 / ((_1929 * _1929) * 3.141590118408203125));
    float _1965 = (((((_1936 * _1853) + _552) * cbLight._m0[_1890].x) * _1955) * _1685) + ((((cbLight._m0[_1802].x * _1654) * ((_1852 * _1853) + _552)) * _1876) * _1699);
    float _1966 = (((((_1936 * _1855) + _554) * cbLight._m0[_1890].y) * _1955) * _1685) + ((((cbLight._m0[_1802].y * _1655) * ((_1852 * _1855) + _554)) * _1876) * _1699);
    float _1967 = (((((_1936 * _1856) + _555) * cbLight._m0[_1890].z) * _1955) * _1685) + ((((cbLight._m0[_1802].z * _1656) * ((_1852 * _1856) + _555)) * _1876) * _1699);
    float _2029;
    float _2031;
    float _2033;
    if (_1739)
    {
        _2029 = _1965;
        _2031 = _1966;
        _2033 = _1967;
    }
    else
    {
        uint _2035 = _1662 + 2u;
        uint _2039 = _1662 + 10u;
        float _2053 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2035].w)) * _394) * 0.949999988079071044921875);
        float _2054 = _2053 * _2053;
        float _2055 = cbLight._m0[_2035].x + _470;
        float _2056 = cbLight._m0[_2035].y + _471;
        float _2057 = cbLight._m0[_2035].z + _472;
        float _2061 = inversesqrt(dot(vec3(_2055, _2056, _2057), vec3(_2055, _2056, _2057)));
        float _2062 = _2061 * _2055;
        float _2063 = _2061 * _2056;
        float _2064 = _2061 * _2057;
        float _2065 = dot(vec3(_391, _392, _393), vec3(cbLight._m0[_2035].xyz));
        float _4062 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2068 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _2069 = dot(vec3(_391, _392, _393), vec3(_2062, _2063, _2064));
        float _4073 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2072 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _2073 = dot(vec3(cbLight._m0[_2035].xyz), vec3(_2062, _2063, _2064));
        float _4084 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2077 = _2054 * _2054;
        float _2081 = ((_2072 * _2072) * (_2077 + (-1.0))) + 1.0;
        float _2088 = exp2(log2(1.0 - (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * 5.0);
        float _2095 = 1.0 - _2054;
        float _2105 = (0.5 / (((_1831 * ((_2068 * _2095) + _2054)) + 9.9999999392252902907785028219223e-09) + (((_1831 * _2095) + _2054) * _2068))) * _2068;
        float _4095 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2107 = (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_2077 / ((_2081 * _2081) * 3.141590118408203125));
        float _2108 = isnan(1.0) ? _1677 : (isnan(_1677) ? 1.0 : min(_1677, 1.0));
        _2029 = (((((_2088 * _1853) + _552) * cbLight._m0[_2039].x) * _2107) * _2108) + _1965;
        _2031 = (((((_2088 * _1855) + _554) * cbLight._m0[_2039].y) * _2107) * _2108) + _1966;
        _2033 = (((((_2088 * _1856) + _555) * cbLight._m0[_2039].z) * _2107) * _2108) + _1967;
    }
    float _2143;
    float _2145;
    float _2147;
    if (_1757)
    {
        _2143 = _2029;
        _2145 = _2031;
        _2147 = _2033;
    }
    else
    {
        uint _2154 = _1662 + 3u;
        uint _2158 = _1662 + 11u;
        float _2172 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2154].w)) * _394) * 0.949999988079071044921875);
        float _2173 = _2172 * _2172;
        float _2174 = cbLight._m0[_2154].x + _470;
        float _2175 = cbLight._m0[_2154].y + _471;
        float _2176 = cbLight._m0[_2154].z + _472;
        float _2180 = inversesqrt(dot(vec3(_2174, _2175, _2176), vec3(_2174, _2175, _2176)));
        float _2181 = _2180 * _2174;
        float _2182 = _2180 * _2175;
        float _2183 = _2180 * _2176;
        float _2184 = dot(vec3(_391, _392, _393), vec3(cbLight._m0[_2154].xyz));
        float _4111 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2187 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _2188 = dot(vec3(_391, _392, _393), vec3(_2181, _2182, _2183));
        float _4122 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2191 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _2192 = dot(vec3(cbLight._m0[_2154].xyz), vec3(_2181, _2182, _2183));
        float _4133 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2196 = _2173 * _2173;
        float _2200 = ((_2191 * _2191) * (_2196 + (-1.0))) + 1.0;
        float _2207 = exp2(log2(1.0 - (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) * 5.0);
        float _2214 = 1.0 - _2173;
        float _2224 = (0.5 / (((_1831 * ((_2187 * _2214) + _2173)) + 9.9999999392252902907785028219223e-09) + (((_1831 * _2214) + _2173) * _2187))) * _2187;
        float _4144 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2226 = (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_2196 / ((_2200 * _2200) * 3.141590118408203125));
        float _2227 = isnan(1.0) ? _1678 : (isnan(_1678) ? 1.0 : min(_1678, 1.0));
        _2143 = (((((_2207 * _1853) + _552) * cbLight._m0[_2158].x) * _2226) * _2227) + _2029;
        _2145 = (((((_2207 * _1855) + _554) * cbLight._m0[_2158].y) * _2226) * _2227) + _2031;
        _2147 = (((((_2207 * _1856) + _555) * cbLight._m0[_2158].z) * _2226) * _2227) + _2033;
    }
    float _2361;
    float _2363;
    float _2365;
    float _2367;
    float _2369;
    float _2371;
    if (_1660.y == 0u)
    {
        float _2302 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2303 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2302;
        float _2304 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2302;
        float _2305 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2302;
        uvec4 _2317 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2318 = _2317.x;
        uint _2329 = uint((float(_2317.y) * floor(float(uint(cbSceneParam._m0[85u].y * _487) / _2318))) + floor(float(uint(cbSceneParam._m0[85u].x * _486) / _2318)));
        float _2339 = (log2(_2305 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2340 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        uint _2343 = uint(isnan(14.0) ? _2340 : (isnan(_2340) ? 14.0 : min(_2340, 14.0)));
        uvec4 _2348 = texelFetch(g_lightClusterGridBuffer, int(((_2343 << 2u) + (_2329 << 6u)) >> 2u));
        uint _2349 = _2348.x;
        uint _2350 = _2317.z;
        float _2452;
        float _2454;
        float _2456;
        float _2458;
        float _2460;
        float _2462;
        if (((((1u << ((_2350 >> 4u) & 15u)) + 4294967295u) & _2349) == 0u) || ((_2350 & 240u) == 0u))
        {
            _2452 = 0.0;
            _2454 = 0.0;
            _2456 = 0.0;
            _2458 = 0.0;
            _2460 = 0.0;
            _2462 = 0.0;
        }
        else
        {
            float _2453;
            float _2455;
            float _2457;
            float _2459;
            float _2461;
            float _2463;
            float _2604 = 0.0;
            float _2605 = 0.0;
            float _2606 = 0.0;
            float _2607 = 0.0;
            float _2608 = 0.0;
            float _2609 = 0.0;
            uint _2610 = 0u;
            uint _2619;
            bool _2620;
            for (;;)
            {
                _2619 = texelFetch(g_lightClassification, int((((_2343 << 5u) + (_2329 << 9u)) + (_2610 << 2u)) >> 2u)).x;
                _2620 = _2619 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2620)
                {
                    frontier_phi_68_pred = _2606;
                    frontier_phi_68_pred_1 = _2609;
                    frontier_phi_68_pred_2 = _2608;
                    frontier_phi_68_pred_3 = _2607;
                    frontier_phi_68_pred_4 = _2605;
                    frontier_phi_68_pred_5 = _2604;
                }
                else
                {
                    float _2749;
                    float _2750;
                    float _2751;
                    float _2752;
                    float _2753;
                    float _2754;
                    uint _2755;
                    _2749 = _2604;
                    _2750 = _2605;
                    _2751 = _2606;
                    _2752 = _2607;
                    _2753 = _2608;
                    _2754 = _2609;
                    _2755 = _2619;
                    float _2676;
                    float _2677;
                    float _2678;
                    float _2679;
                    float _2680;
                    float _2681;
                    for (;;)
                    {
                        uint _2759 = uint(findLSB(_2755)) + (_2610 << 5u);
                        uint _2756 = (_2755 + 4294967295u) & _2755;
                        uint _2761 = _2759 * 48u;
                        vec4 _2775 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2761)).x, texelFetch(g_PointLightRenderingBuffer, int(_2761 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2761 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2761 + 3u)).x));
                        uint _2781 = (_2759 * 48u) + 4u;
                        vec4 _2794 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2781)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 3u)).x));
                        uint _2800 = (_2759 * 48u) + 8u;
                        vec3 _2811 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2800)).x, texelFetch(g_PointLightRenderingBuffer, int(_2800 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2800 + 2u)).x));
                        float _2815 = _2775.x - _2303;
                        float _2816 = _2775.y - _2304;
                        float _2817 = _2775.z - _2305;
                        float _2818 = dot(vec3(_2815, _2816, _2817), vec3(_2815, _2816, _2817));
                        float _2821 = inversesqrt(_2818);
                        float _2822 = _2821 * _2815;
                        float _2823 = _2821 * _2816;
                        float _2824 = _2821 * _2817;
                        float _2825 = dot(vec3(_507, _510, _513), vec3(_2822, _2823, _2824));
                        float _2830 = 1.0 - (_2818 * _2775.w);
                        float _4170 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
                        float _2831 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
                        float _2832 = sqrt(_2818) * _2794.w;
                        float _2835 = 1.39999997615814208984375 / (_2832 + 1.39999997615814208984375);
                        float _2836 = _2835 * _2835;
                        float _2839 = ((1.0 - _2836) * _2825) + _2836;
                        float _2842 = _2832 * _2832;
                        float _2846 = ((isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0))) * _2831) / ((_2842 * 0.699999988079071044921875) + 1.0);
                        float _2850 = (-0.0) - _2303;
                        float _2851 = (-0.0) - _2304;
                        float _2852 = (-0.0) - _2305;
                        float _2856 = inversesqrt(dot(vec3(_2850, _2851, _2852), vec3(_2850, _2851, _2852)));
                        float _2857 = _2856 * _2850;
                        float _2858 = _2856 * _2851;
                        float _2859 = _2856 * _2852;
                        float _2867 = exp2(log2(1.0 / ((_2842 * 3.5) + 5.0)) * 0.25);
                        float _2868 = 1.0 - _583;
                        float _2875 = sqrt(1.0 - ((1.0 - (_2868 * _2868)) * (1.0 - (_2867 * _2867))));
                        float _2876 = _2875 * _2875;
                        float _2877 = _2876 * _2876;
                        float _2878 = _2857 + _2822;
                        float _2879 = _2858 + _2823;
                        float _2880 = _2859 + _2824;
                        float _2884 = inversesqrt(dot(vec3(_2878, _2879, _2880), vec3(_2878, _2879, _2880)));
                        float _2888 = dot(vec3(_507, _510, _513), vec3(_2857, _2858, _2859));
                        float _4186 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
                        float _2891 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                        float _2892 = dot(vec3(_507, _510, _513), vec3(_2884 * _2878, _2884 * _2879, _2884 * _2880));
                        float _4197 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
                        float _2895 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
                        float _2899 = ((_2895 * _2895) * (_2877 + (-1.0))) + 1.0;
                        float _2900 = _2835 * _2876;
                        float _2901 = _2900 * _2900;
                        float _2904 = ((1.0 - _2901) * _2825) + _2901;
                        float _4208 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
                        float _2905 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                        float _2906 = 1.0 - _2876;
                        float _2916 = (0.5 / (((_2905 * ((_2891 * _2906) + _2876)) + 9.9999999392252902907785028219223e-09) + (((_2905 * _2906) + _2876) * _2891))) * _2905;
                        float _4219 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
                        float _2927 = (((_2877 * 3.1415927410125732421875) * (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) / ((_2899 * _2899) * ((_2842 * 2.1991131305694580078125) + 3.141590118408203125))) * _2831;
                        _2679 = (_2846 * _2794.x) + _2752;
                        _2680 = (_2846 * _2794.y) + _2753;
                        _2681 = (_2846 * _2794.z) + _2754;
                        _2676 = (_2927 * _2811.x) + _2749;
                        _2677 = (_2927 * _2811.y) + _2750;
                        _2678 = (_2927 * _2811.z) + _2751;
                        if (_2756 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2749 = _2676;
                            _2750 = _2677;
                            _2751 = _2678;
                            _2752 = _2679;
                            _2753 = _2680;
                            _2754 = _2681;
                            _2755 = _2756;
                        }
                    }
                    frontier_phi_68_pred = _2678;
                    frontier_phi_68_pred_1 = _2681;
                    frontier_phi_68_pred_2 = _2680;
                    frontier_phi_68_pred_3 = _2679;
                    frontier_phi_68_pred_4 = _2677;
                    frontier_phi_68_pred_5 = _2676;
                }
                _2457 = frontier_phi_68_pred;
                _2463 = frontier_phi_68_pred_1;
                _2461 = frontier_phi_68_pred_2;
                _2459 = frontier_phi_68_pred_3;
                _2455 = frontier_phi_68_pred_4;
                _2453 = frontier_phi_68_pred_5;
                uint _2611 = _2610 + 1u;
                if (_2611 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2604 = _2453;
                    _2605 = _2455;
                    _2606 = _2457;
                    _2607 = _2459;
                    _2608 = _2461;
                    _2609 = _2463;
                    _2610 = _2611;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2452 = _2453;
            _2454 = _2455;
            _2456 = _2457;
            _2458 = _2459;
            _2460 = _2461;
            _2462 = _2463;
        }
        uvec4 _2466 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2467 = _2466.z;
        uint _2469 = (_2467 >> 8u) & 15u;
        float _2572;
        float _2574;
        float _2576;
        float _2578;
        float _2580;
        float _2582;
        if (((4294967295u << _2469) & _2349) == 0u)
        {
            _2572 = _2452;
            _2574 = _2454;
            _2576 = _2456;
            _2578 = _2458;
            _2580 = _2460;
            _2582 = _2462;
        }
        else
        {
            float _2597 = inversesqrt(dot(vec3(_2303, _2304, _2305), vec3(_2303, _2304, _2305)));
            float _2598 = _2597 * _2303;
            float _2599 = _2597 * _2304;
            float _2600 = _2597 * _2305;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2469 < ((_2467 >> 12u) & 15u))
            {
                float _2573;
                float _2575;
                float _2577;
                float _2579;
                float _2581;
                float _2583;
                float _2732 = _2452;
                float _2733 = _2454;
                float _2734 = _2456;
                float _2735 = _2458;
                float _2736 = _2460;
                float _2737 = _2462;
                uint _2738 = _2469;
                uint _2747;
                bool _2748;
                for (;;)
                {
                    _2747 = texelFetch(g_lightClassification, int((((_2343 << 5u) + (_2329 << 9u)) + (_2738 << 2u)) >> 2u)).x;
                    _2748 = _2747 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2748)
                    {
                        frontier_phi_79_pred = _2737;
                        frontier_phi_79_pred_1 = _2736;
                        frontier_phi_79_pred_2 = _2735;
                        frontier_phi_79_pred_3 = _2734;
                        frontier_phi_79_pred_4 = _2733;
                        frontier_phi_79_pred_5 = _2732;
                    }
                    else
                    {
                        float _2941;
                        float _2942;
                        float _2943;
                        float _2944;
                        float _2945;
                        float _2946;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _2954 = _2732;
                        float _2955 = _2733;
                        float _2956 = _2734;
                        float _2957 = _2735;
                        float _2958 = _2736;
                        float _2959 = _2737;
                        uint _2960 = _2747;
                        uint _2961;
                        vec4 _2986;
                        float _2987;
                        vec4 _3002;
                        vec3 _3014;
                        vec4 _3030;
                        vec4 _3046;
                        float _3093;
                        bool _3094;
                        for (;;)
                        {
                            uint _2971 = ((_2738 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2960));
                            _2961 = (_2960 + 4294967295u) & _2960;
                            uint _2973 = _2971 * 40u;
                            _2986 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 3u)).x));
                            _2987 = _2986.w;
                            uint _2989 = (_2971 * 40u) + 4u;
                            _3002 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2989)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 3u)).x));
                            uint _3004 = (_2971 * 40u) + 8u;
                            _3014 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3004)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 2u)).x));
                            uint _3017 = (_2971 * 40u) + 16u;
                            _3030 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 3u)).x));
                            uint _3033 = (_2971 * 40u) + 20u;
                            _3046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 3u)).x));
                            uint _3049 = (_2971 * 40u) + 24u;
                            vec4 _3062 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 3u)).x));
                            uint _3068 = (_2971 * 40u) + 28u;
                            vec4 _3081 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 3u)).x));
                            _3093 = fma(_2305, _3081.z, fma(_2304, _3081.y, _3081.x * _2303)) + _3081.w;
                            _3094 = !((fma(_2305, _3062.z, fma(_2304, _3062.y, _3062.x * _2303)) + _3062.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3094)
                            {
                                float _3121 = _2986.x - _2303;
                                float _3122 = _2986.y - _2304;
                                float _3123 = _2986.z - _2305;
                                float _3124 = dot(vec3(_3121, _3122, _3123), vec3(_3121, _3122, _3123));
                                float _3127 = inversesqrt(_3124);
                                float _3128 = _3127 * _3121;
                                float _3129 = _3127 * _3122;
                                float _3130 = _3127 * _3123;
                                float _3134 = 1.0 - (_3124 / (_2987 * _2987));
                                float _4230 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                                float _3135 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                                float _3139 = sqrt(_3124) * _3002.w;
                                float _3141 = 1.39999997615814208984375 / (_3139 + 1.39999997615814208984375);
                                float _3142 = _3141 * _3141;
                                float _3145 = ((1.0 - _3142) * dot(vec3(_3128, _3129, _3130), vec3(_507, _510, _513))) + _3142;
                                float _3148 = _3139 * _3139;
                                float _3152 = (fma(_2305, _3030.z, fma(_2304, _3030.y, _3030.x * _2303)) + _3030.w) / _3093;
                                float _3153 = (fma(_2305, _3046.z, fma(_2304, _3046.y, _3046.x * _2303)) + _3046.w) / _3093;
                                float _3157 = 1.0 - dot(vec2(_3152, _3153), vec2(_3152, _3153));
                                float _4246 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                                float _3158 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
                                float _3159 = _3158 * (((isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0))) * _3135) / ((_3148 * 0.699999988079071044921875) + 1.0));
                                float _3171 = exp2(log2(1.0 / ((_3148 * 3.5) + 5.0)) * 0.25);
                                float _3172 = 1.0 - _583;
                                float _3179 = sqrt(1.0 - ((1.0 - (_3172 * _3172)) * (1.0 - (_3171 * _3171))));
                                float _3180 = _3179 * _3179;
                                float _3181 = _3180 * _3180;
                                float _3182 = _3128 - _2598;
                                float _3183 = _3129 - _2599;
                                float _3184 = _3130 - _2600;
                                float _3188 = inversesqrt(dot(vec3(_3182, _3183, _3184), vec3(_3182, _3183, _3184)));
                                float _3192 = dot(vec3(_507, _510, _513), vec3((-0.0) - _2598, (-0.0) - _2599, (-0.0) - _2600));
                                float _4257 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                                float _3195 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                                float _3196 = dot(vec3(_507, _510, _513), vec3(_3188 * _3182, _3188 * _3183, _3188 * _3184));
                                float _4268 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                                float _3199 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                                float _3203 = ((_3199 * _3199) * (_3181 + (-1.0))) + 1.0;
                                float _3204 = _3141 * _3180;
                                float _3205 = _3204 * _3204;
                                float _3211 = ((1.0 - _3205) * dot(vec3(_507, _510, _513), vec3(_3128, _3129, _3130))) + _3205;
                                float _4279 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                                float _3212 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                                float _3213 = 1.0 - _3180;
                                float _3223 = (0.5 / (((_3212 * ((_3195 * _3213) + _3180)) + 9.9999999392252902907785028219223e-09) + (((_3212 * _3213) + _3180) * _3195))) * _3212;
                                float _4290 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                                float _3233 = (_3158 * _3135) * (((_3181 * 3.1415927410125732421875) * (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0)))) / ((_3203 * _3203) * ((_3148 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3159 * _3002.z;
                                frontier_phi_85_pred_1 = _3159 * _3002.y;
                                frontier_phi_85_pred_2 = _3159 * _3002.x;
                                frontier_phi_85_pred_3 = _3233 * _3014.z;
                                frontier_phi_85_pred_4 = _3233 * _3014.y;
                                frontier_phi_85_pred_5 = _3233 * _3014.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3242 = frontier_phi_85_pred;
                            _3241 = frontier_phi_85_pred_1;
                            _3240 = frontier_phi_85_pred_2;
                            _3239 = frontier_phi_85_pred_3;
                            _3238 = frontier_phi_85_pred_4;
                            _3237 = frontier_phi_85_pred_5;
                            _2944 = _3240 + _2957;
                            _2945 = _3241 + _2958;
                            _2946 = _3242 + _2959;
                            _2941 = _3237 + _2954;
                            _2942 = _3238 + _2955;
                            _2943 = _3239 + _2956;
                            if (_2961 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2954 = _2941;
                                _2955 = _2942;
                                _2956 = _2943;
                                _2957 = _2944;
                                _2958 = _2945;
                                _2959 = _2946;
                                _2960 = _2961;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2946;
                        frontier_phi_79_pred_1 = _2945;
                        frontier_phi_79_pred_2 = _2944;
                        frontier_phi_79_pred_3 = _2943;
                        frontier_phi_79_pred_4 = _2942;
                        frontier_phi_79_pred_5 = _2941;
                    }
                    _2583 = frontier_phi_79_pred;
                    _2581 = frontier_phi_79_pred_1;
                    _2579 = frontier_phi_79_pred_2;
                    _2577 = frontier_phi_79_pred_3;
                    _2575 = frontier_phi_79_pred_4;
                    _2573 = frontier_phi_79_pred_5;
                    uint _2739 = _2738 + 1u;
                    if (_2739 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2732 = _2573;
                        _2733 = _2575;
                        _2734 = _2577;
                        _2735 = _2579;
                        _2736 = _2581;
                        _2737 = _2583;
                        _2738 = _2739;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2579;
                frontier_phi_60_61_ladder_1 = _2583;
                frontier_phi_60_61_ladder_2 = _2581;
                frontier_phi_60_61_ladder_3 = _2577;
                frontier_phi_60_61_ladder_4 = _2575;
                frontier_phi_60_61_ladder_5 = _2573;
            }
            else
            {
                frontier_phi_60_61_ladder = _2458;
                frontier_phi_60_61_ladder_1 = _2462;
                frontier_phi_60_61_ladder_2 = _2460;
                frontier_phi_60_61_ladder_3 = _2456;
                frontier_phi_60_61_ladder_4 = _2454;
                frontier_phi_60_61_ladder_5 = _2452;
            }
            _2572 = frontier_phi_60_61_ladder_5;
            _2574 = frontier_phi_60_61_ladder_4;
            _2576 = frontier_phi_60_61_ladder_3;
            _2578 = frontier_phi_60_61_ladder;
            _2580 = frontier_phi_60_61_ladder_2;
            _2582 = frontier_phi_60_61_ladder_1;
        }
        float _2587 = isnan(1.0) ? _567 : (isnan(_567) ? 1.0 : min(_567, 1.0));
        _2361 = (_2587 * _2578) + _1795;
        _2363 = (_2587 * _2580) + _1797;
        _2365 = (_2587 * _2582) + _1799;
        _2367 = ((_2572 * _552) * _2587) + _2143;
        _2369 = ((_2574 * _554) * _2587) + _2145;
        _2371 = ((_2576 * _555) * _2587) + _2147;
    }
    else
    {
        _2361 = _1795;
        _2363 = _1797;
        _2365 = _1799;
        _2367 = _2143;
        _2369 = _2145;
        _2371 = _2147;
    }
    float _4306 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _4317 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _4328 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _2388 = ((isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_2361 + ((isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0))) * _567))) + ((_2367 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _1407)) * cbPerFrame._m0[3u].x);
    float _2389 = ((isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_2363 + ((isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0))) * _567))) + ((_2369 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _1407)) * cbPerFrame._m0[3u].x);
    float _2390 = ((isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_2365 + ((isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0))) * _567))) + ((_2371 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _1407)) * cbPerFrame._m0[3u].x);
    float _2391 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2392 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2393 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    uint _2394 = _526 + 6u;
    float _2402 = _486 / cbSceneParam._m0[86u].x;
    float _2403 = _487 / cbSceneParam._m0[86u].y;
    vec4 _2417 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2402, _2403, (log2((isnan(cbSceneParam._m0[77u].w) ? _412 : (isnan(_412) ? cbSceneParam._m0[77u].w : min(_412, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2419 = _2417.x;
    float _2420 = _2417.y;
    float _2421 = _2417.z;
    float _2422 = _2417.w;
    float _2514;
    float _2516;
    float _2518;
    float _2520;
    if (_412 > cbSceneParam._m0[78u].w)
    {
        float _2477 = isnan(_412) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _412 : min(cbSceneParam._m0[80u].w, _412));
        float _2478 = _2477 / _412;
        float _2489 = _2478 * _463;
        float _2490 = _464 * _2478;
        float _2491 = (-0.0) - _2490;
        float _2492 = _2478 * _465;
        float _2494 = (cbSceneParam._m0[77u].w * _2491) / _2477;
        float _2495 = _2494 + cbSceneParam._m0[79u].w;
        float _2496 = cbSceneParam._m0[79u].w - _2490;
        float _2502 = sqrt(((_2489 * _2489) + (_2490 * _2490)) + (_2492 * _2492));
        float _2505 = (1.0 - (cbSceneParam._m0[77u].w / _2477)) * _2502;
        float _2510 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2512 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2689;
        if (abs((_2491 - _2494) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2689 = ((((_2495 > 0.0) ? exp2(_2510 * _2495) : (2.0 - exp2(_2512 * _2495))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2505;
        }
        else
        {
            float _2633 = 1.0 / cbSceneParam._m0[80u].x;
            float _2634 = isnan(_2496) ? _2495 : (isnan(_2495) ? _2496 : max(_2495, _2496));
            float _2635 = isnan(_2496) ? _2495 : (isnan(_2495) ? _2496 : min(_2495, _2496));
            float _2644 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : min(_2634, 0.0));
            float _2645 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : min(_2635, 0.0));
            _2689 = ((abs(_2502 / _2491) * cbSceneParam._m0[80u].y) * ((((_2644 - _2645) * 2.0) - ((exp2(_2510 * (isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0)))) - exp2(_2510 * (isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0))))) * _2633)) - ((exp2(_2512 * _2644) - exp2(_2512 * _2645)) * _2633))) + (_2505 * cbSceneParam._m0[80u].z);
        }
        vec4 _2691 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2402, _2403, 1.0), 0.0);
        float _2700 = exp2((_2689 * (-1.44269502162933349609375)) * (1.0 - _2691.w));
        float _2701 = log2(_2700);
        float _2717 = log2(_2422);
        _2514 = (exp2(_2717 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2701 * cbSceneParam._m0[78u].x)) * _2691.x) / cbSceneParam._m0[78u].x)) + _2419;
        _2516 = (exp2(_2717 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2701 * cbSceneParam._m0[78u].y)) * _2691.y) / cbSceneParam._m0[78u].y)) + _2420;
        _2518 = (exp2(_2717 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2701 * cbSceneParam._m0[78u].z)) * _2691.z) / cbSceneParam._m0[78u].z)) + _2421;
        _2520 = _2700 * _2422;
    }
    else
    {
        _2514 = _2419;
        _2516 = _2420;
        _2518 = _2421;
        _2520 = _2422;
    }
    bool _2727;
    vec4 _2530;
    vec4 _2552;
    float _2554;
    float _2558;
    float _2559;
    float _2560;
    float _2561;
    bool _2571;
    for (;;)
    {
        _2530 = cbMatDynParam._m0[0u];
        float _2532 = roundEven(_2530.y);
        bool _2533 = _2532 == 3.0;
        float _2534 = log2(_2520);
        float _2541 = exp2(_2534 * cbSceneParam._m0[78u].x) * _2391;
        float _2542 = exp2(_2534 * cbSceneParam._m0[78u].y) * _2392;
        float _2543 = exp2(_2534 * cbSceneParam._m0[78u].z) * _2393;
        float _2550 = _475 + (-0.5);
        _2552 = cbMtdParam._m0[1u];
        _2554 = _2552.y * _2550;
        float _2557 = (_2532 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2558 = _2557 * (_2533 ? _2541 : (_2541 + (cbSceneParam._m0[72u].w * _2514)));
        _2559 = _2557 * (_2533 ? _2542 : (_2542 + (cbSceneParam._m0[72u].w * _2516)));
        _2560 = _2557 * (_2533 ? _2543 : (_2543 + (cbSceneParam._m0[72u].w * _2518)));
        _2561 = _2550 * 0.999000012874603271484375;
        _2571 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2571)
        {
            if ((cbInstanceData._m0[_526 + 7u].x + _2561) < 0.5)
            {
                _2727 = true;
                break;
            }
        }
        uint _2668 = _528 + uint(_2530.w);
        if ((cbInstanceData._m0[_2668].w < 1.0) && ((cbInstanceData._m0[_2668].w + _2561) < 0.5))
        {
            _2727 = true;
            break;
        }
        if ((_2554 + _331) < _2552.x)
        {
            _2727 = true;
            break;
        }
        _2727 = false;
        break;
    }
    float _2932;
    if (_2727)
    {
        discard_state = true;
        _2932 = 0.0;
    }
    else
    {
        _2932 = cbInstanceData._m0[_2394].w;
    }
    SV_Target.x = _2558;
    SV_Target.y = _2559;
    SV_Target.z = _2560;
    SV_Target.w = _2932;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2394].w;
    discard_exit();
}


