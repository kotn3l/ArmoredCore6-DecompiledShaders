#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_di_FlipBook_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_di_FlipBook_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_di_FlipBook_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _869;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _186 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _193 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _194 = _193 * NORMAL.x;
    float _195 = _193 * NORMAL.y;
    float _196 = _193 * NORMAL.z;
    float _200 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208;
    float _209;
    float _210;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _208 = (-0.0) - _194;
        _209 = (-0.0) - _195;
        _210 = (-0.0) - _196;
    }
    else
    {
        _208 = _194;
        _209 = _195;
        _210 = _196;
    }
    uint _229 = uint(int(floor(cbMtdParam._m0[10u].z)));
    uint _230 = uint(int(cbMtdParam._m0[11u].x * cbMtdParam._m0[10u].w));
    float _232 = float(int(_229 - _230 * (_229 / _230)));
    float _242 = (fract(TEXCOORD_1.x) + (_232 - cbMtdParam._m0[10u].w * trunc(_232 / cbMtdParam._m0[10u].w))) * (1.0 / cbMtdParam._m0[10u].w);
    float _244 = (fract(TEXCOORD_1.y) + floor(_232 / cbMtdParam._m0[10u].w)) * (1.0 / cbMtdParam._m0[11u].x);
    vec4 _257 = texture(sampler2D(S_AMSN_di_FlipBook_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _242) + cbTextureTilingScale._m0[0u].z, (_244 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _263 = _257.x * cbMtdParam._m0[9u].x;
    float _264 = _257.y * cbMtdParam._m0[9u].y;
    float _265 = _257.z * cbMtdParam._m0[9u].z;
    vec4 _278 = texture(sampler2D(S_AMSN_di_FlipBook_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _242) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _244) + cbTextureTilingScale._m0[2u].w));
    float _281 = _278.x + cbMtdParam._m0[10u].x;
    vec4 _293 = texture(sampler2D(S_AMSN_di_FlipBook_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _242) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _244) + cbTextureTilingScale._m0[1u].w));
    float _297 = _293.z;
    float _301 = (_293.x * 2.0) + (-1.0);
    float _303 = (_293.y * 2.0) + (-1.0);
    float _304 = dot(vec2(_301, _303), vec2(_301, _303));
    float _3208 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _309 = sqrt(1.0 - (isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0))));
    float _312 = fma(_309, _208, fma(_303, _200 * TANGENT.x, (_186 * _178) * _301));
    float _315 = fma(_309, _209, fma(_303, _200 * TANGENT.y, (_186 * _179) * _301));
    float _318 = fma(_309, _210, fma(_303, _200 * TANGENT.z, (_186 * _180) * _301));
    float _322 = inversesqrt(dot(vec3(_312, _315, _318), vec3(_312, _315, _318)));
    float _323 = _322 * _312;
    float _324 = _322 * _315;
    float _325 = _322 * _318;
    float _3219 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _326 = isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0));
    float _3230 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3241 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3252 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3263 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _330 = isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0));
    float _346 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _387 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _397 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _387);
    float _398 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _387);
    float _399 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _387);
    float _403 = inversesqrt(dot(vec3(_397, _398, _399), vec3(_397, _398, _399)));
    float _404 = _397 * _403;
    float _405 = _398 * _403;
    float _406 = _399 * _403;
    float _412 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _413 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _434 = fma(_325, cbSceneParam._m0[5u].z, fma(_324, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _323));
    float _437 = fma(_325, cbSceneParam._m0[6u].z, fma(_324, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _323));
    float _440 = fma(_325, cbSceneParam._m0[7u].z, fma(_324, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _323));
    uint _453 = uint(roundEven(NORMAL.w)) * 13u;
    uint _456 = (_453 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _462 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0)))) * cbInstanceData._m0[_456].x;
    float _463 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0)))) * cbInstanceData._m0[_456].y;
    float _464 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0)))) * cbInstanceData._m0[_456].z;
    float _3274 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _465 = isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0));
    float _3285 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _466 = isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0));
    float _3296 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _467 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
    float _468 = 1.0 - _330;
    float _469 = _465 * _468;
    float _470 = _466 * _468;
    float _471 = _467 * _468;
    float _476 = (_465 + (-0.039999999105930328369140625)) * _330;
    float _477 = (_466 + (-0.039999999105930328369140625)) * _330;
    float _478 = (_467 + (-0.039999999105930328369140625)) * _330;
    float _479 = _476 + 0.039999999105930328369140625;
    float _481 = _477 + 0.039999999105930328369140625;
    float _482 = _478 + 0.039999999105930328369140625;
    vec4 _491 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _412, cbSceneParam._m0[86u].y * _413));
    float _494 = _491.x * TEXCOORD_1.w;
    float _495 = dot(vec3(_323, _324, _325), vec3(_404, _405, _406));
    float _498 = _495 * 2.0;
    float _502 = (_498 * _323) - _404;
    float _503 = (_498 * _324) - _405;
    float _504 = (_498 * _325) - _406;
    float _508 = abs(dot(vec3(_404, _405, _406), vec3(_323, _324, _325)));
    float _3307 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _510 = sqrt(_326);
    float _523 = exp2((_510 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_510 * 3.0));
    float _529 = (1.0 - _523) * ((_510 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _530 = _523 * _510;
    float _558 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _562 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _566 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _868;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _593 = fma(_566, cbModelParam._m0[26u].z, fma(_562, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _558));
        float _597 = fma(_566, cbModelParam._m0[27u].z, fma(_562, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _558));
        float _601 = fma(_566, cbModelParam._m0[28u].z, fma(_562, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _558));
        float _626 = _558 + _323;
        float _627 = _562 + _324;
        float _628 = _566 + _325;
        float _638 = fma(_628, cbModelParam._m0[26u].z, fma(_627, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _626)) - _593;
        float _639 = fma(_628, cbModelParam._m0[27u].z, fma(_627, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _626)) - _597;
        float _640 = fma(_628, cbModelParam._m0[28u].z, fma(_627, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _626)) - _601;
        float _644 = inversesqrt(dot(vec3(_638, _639, _640), vec3(_638, _639, _640)));
        float _657 = ((_644 * _638) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_593 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _658 = ((_644 * _639) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_597 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _659 = ((_644 * _640) / cbModelParam._m0[34u].z) + ((((((_601 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _662 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_657, _658, _659), 0.0);
        vec4 _669 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_657, _658, _659), 0.0);
        vec4 _676 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_657, _658, _659), 0.0);
        vec4 _683 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_657, _658, _659), 0.0);
        float _696 = exp2((_662.w + (-0.5)) * 20.0) * 2.0;
        float _697 = _696 * (_662.x + (-0.5));
        float _698 = _696 * (_662.y + (-0.5));
        float _699 = _696 * (_662.z + (-0.5));
        float _706 = exp2((_669.w + (-0.5)) * 20.0) * 2.0;
        float _707 = _706 * (_669.x + (-0.5));
        float _708 = _706 * (_669.y + (-0.5));
        float _709 = _706 * (_669.z + (-0.5));
        float _716 = exp2((_676.w + (-0.5)) * 20.0) * 2.0;
        float _717 = _716 * (_676.x + (-0.5));
        float _718 = _716 * (_676.y + (-0.5));
        float _719 = _716 * (_676.z + (-0.5));
        float _726 = exp2((_683.w + (-0.5)) * 20.0) * 2.0;
        float _727 = _726 * (_683.x + (-0.5));
        float _728 = _726 * (_683.y + (-0.5));
        float _729 = _726 * (_683.z + (-0.5));
        float _730 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _731 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _732 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _733 = _697 * 0.5;
        float _734 = _707 * 0.5;
        float _735 = _717 * 0.5;
        float _736 = dot(vec3(_733, _734, _735), vec3(_733, _734, _735));
        float _741 = (_736 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_736);
        float _750 = (dot(vec3(_323, _324, _325), vec3(_741 * _733, _741 * _734, _741 * _735)) + 1.0) * 0.5;
        float _3333 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _760 = sqrt(((_734 * _734) + (_733 * _733)) + (_735 * _735)) / (_730 + 9.9999997473787516355514526367188e-06);
        float _3344 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _761 = isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0));
        float _762 = _761 * 2.0;
        float _766 = (1.0 - _761) / (_761 + 1.0);
        float _3355 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _767 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
        float _776 = ((((1.0 - _767) * (_762 + 2.0)) * exp2(log2(isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0))) * (_762 + 1.0))) + _767) * _730;
        float _777 = _698 * 0.5;
        float _778 = _708 * 0.5;
        float _779 = _718 * 0.5;
        float _780 = dot(vec3(_777, _778, _779), vec3(_777, _778, _779));
        float _785 = (_780 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_780);
        float _793 = (dot(vec3(_323, _324, _325), vec3(_785 * _777, _785 * _778, _785 * _779)) + 1.0) * 0.5;
        float _3366 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _802 = sqrt(((_778 * _778) + (_777 * _777)) + (_779 * _779)) / (_731 + 9.9999997473787516355514526367188e-06);
        float _3377 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
        float _804 = _803 * 2.0;
        float _808 = (1.0 - _803) / (_803 + 1.0);
        float _3388 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _809 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
        float _818 = ((((1.0 - _809) * (_804 + 2.0)) * exp2(log2(isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0))) * (_804 + 1.0))) + _809) * _731;
        float _819 = _699 * 0.5;
        float _820 = _709 * 0.5;
        float _821 = _719 * 0.5;
        float _822 = dot(vec3(_819, _820, _821), vec3(_819, _820, _821));
        float _827 = (_822 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_822);
        float _835 = (dot(vec3(_323, _324, _325), vec3(_827 * _819, _827 * _820, _827 * _821)) + 1.0) * 0.5;
        float _3399 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _844 = sqrt(((_820 * _820) + (_819 * _819)) + (_821 * _821)) / (_732 + 9.9999997473787516355514526367188e-06);
        float _3410 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
        float _846 = _845 * 2.0;
        float _850 = (1.0 - _845) / (_845 + 1.0);
        float _3421 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _851 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _860 = ((((1.0 - _851) * (_846 + 2.0)) * exp2(log2(isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0))) * (_846 + 1.0))) + _851) * _732;
        _868 = _699;
        _870 = _698;
        _871 = _697;
        _872 = _709;
        _873 = _708;
        _874 = _707;
        _875 = _719;
        _876 = _718;
        _877 = _717;
        _878 = _732;
        _879 = _731;
        _880 = _730;
        _881 = cbModelParam._m0[36u].z * (isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0)));
        _882 = cbModelParam._m0[36u].z * (isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0)));
        _883 = cbModelParam._m0[36u].z * (isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0)));
    }
    else
    {
        _868 = _869;
        _870 = _869;
        _871 = _869;
        _872 = _869;
        _873 = _869;
        _874 = _869;
        _875 = _869;
        _876 = _869;
        _877 = _869;
        _878 = _869;
        _879 = _869;
        _880 = _869;
        _881 = 0.0;
        _882 = 0.0;
        _883 = 0.0;
    }
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _909 = fma(_566, cbModelParam._m0[30u].z, fma(_562, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _558));
        float _913 = fma(_566, cbModelParam._m0[31u].z, fma(_562, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _558));
        float _917 = fma(_566, cbModelParam._m0[32u].z, fma(_562, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _558));
        float _940 = _558 + _323;
        float _941 = _562 + _324;
        float _942 = _566 + _325;
        float _952 = fma(_942, cbModelParam._m0[30u].z, fma(_941, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _940)) - _909;
        float _953 = fma(_942, cbModelParam._m0[31u].z, fma(_941, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _940)) - _913;
        float _954 = fma(_942, cbModelParam._m0[32u].z, fma(_941, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _940)) - _917;
        float _958 = inversesqrt(dot(vec3(_952, _953, _954), vec3(_952, _953, _954)));
        float _971 = ((_958 * _952) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_909 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _972 = ((_958 * _953) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_913 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _973 = ((_958 * _954) / cbModelParam._m0[35u].z) + ((((((_917 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        float _1008 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_975.x + (-0.5));
        float _1010 = _1008 * (_975.y + (-0.5));
        float _1011 = _1008 * (_975.z + (-0.5));
        float _1018 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_982.x + (-0.5));
        float _1020 = _1018 * (_982.y + (-0.5));
        float _1021 = _1018 * (_982.z + (-0.5));
        float _1028 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_989.x + (-0.5));
        float _1030 = _1028 * (_989.y + (-0.5));
        float _1031 = _1028 * (_989.z + (-0.5));
        float _1038 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_996.x + (-0.5));
        float _1040 = _1038 * (_996.y + (-0.5));
        float _1041 = _1038 * (_996.z + (-0.5));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = _1009 * 0.5;
        float _1046 = _1019 * 0.5;
        float _1047 = _1029 * 0.5;
        float _1048 = dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047));
        float _1053 = (_1048 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1048);
        float _1061 = (dot(vec3(_323, _324, _325), vec3(_1053 * _1045, _1053 * _1046, _1053 * _1047)) + 1.0) * 0.5;
        float _3462 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1070 = sqrt(((_1046 * _1046) + (_1045 * _1045)) + (_1047 * _1047)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _3473 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
        float _1072 = _1071 * 2.0;
        float _1076 = (1.0 - _1071) / (_1071 + 1.0);
        float _3484 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
        float _1086 = ((((1.0 - _1077) * (_1072 + 2.0)) * exp2(log2(isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0))) * (_1072 + 1.0))) + _1077) * _1042;
        float _1087 = _1010 * 0.5;
        float _1088 = _1020 * 0.5;
        float _1089 = _1030 * 0.5;
        float _1090 = dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089));
        float _1095 = (_1090 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1090);
        float _1103 = (dot(vec3(_323, _324, _325), vec3(_1095 * _1087, _1095 * _1088, _1095 * _1089)) + 1.0) * 0.5;
        float _3495 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1112 = sqrt(((_1088 * _1088) + (_1087 * _1087)) + (_1089 * _1089)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _3506 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _3517 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0))) * (_1114 + 1.0))) + _1119) * _1043;
        float _1129 = _1011 * 0.5;
        float _1130 = _1021 * 0.5;
        float _1131 = _1031 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1145 = (dot(vec3(_323, _324, _325), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _3528 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1154 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _3539 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _3550 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))) * (_1156 + 1.0))) + _1161) * _1044;
        _1178 = _1011;
        _1179 = _1010;
        _1180 = _1009;
        _1181 = _1021;
        _1182 = _1020;
        _1183 = _1019;
        _1184 = _1031;
        _1185 = _1030;
        _1186 = _1029;
        _1187 = _1044;
        _1188 = _1043;
        _1189 = _1042;
        _1190 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0)));
        _1191 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
        _1192 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
    }
    else
    {
        _1178 = _869;
        _1179 = _869;
        _1180 = _869;
        _1181 = _869;
        _1182 = _869;
        _1183 = _869;
        _1184 = _869;
        _1185 = _869;
        _1186 = _869;
        _1187 = _869;
        _1188 = _869;
        _1189 = _869;
        _1190 = 0.0;
        _1191 = 0.0;
        _1192 = 0.0;
    }
    float _1202 = (cbModelParam._m0[1u].x * (_1190 - _881)) + _881;
    float _1203 = (cbModelParam._m0[1u].x * (_1191 - _882)) + _882;
    float _1204 = (cbModelParam._m0[1u].x * (_1192 - _883)) + _883;
    float _1225 = fma(_1204, cbSceneParam._m0[89u].z, fma(_1203, cbSceneParam._m0[89u].y, _1202 * cbSceneParam._m0[89u].x));
    float _1228 = fma(_1204, cbSceneParam._m0[90u].z, fma(_1203, cbSceneParam._m0[90u].y, _1202 * cbSceneParam._m0[90u].x));
    float _1231 = fma(_1204, cbSceneParam._m0[91u].z, fma(_1203, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1202));
    float _1246 = _502 * 0.5;
    float _1247 = _503 * 0.5;
    float _1248 = _504 * 0.5;
    float _1249 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_1180, _1183, _1186, _1189));
    float _1252 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_1179, _1182, _1185, _1188));
    float _1255 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_1178, _1181, _1184, _1187));
    float _1289;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1262 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_868, _872, _875, _878));
        float _1266 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_870, _873, _876, _879));
        float _1270 = dot(vec4(_1246, _1247, _1248, 1.0), vec4(_871, _874, _877, _880));
        float _1277 = dot(vec4(cbModelParam._m0[39u]), vec4(_1246, _1247, _1248, 1.0));
        _1289 = dot(vec3(isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)), isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)), isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1277) ? 0.0 : (isnan(0.0) ? _1277 : max(0.0, _1277))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1289 = 1.0;
    }
    float _1300;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1291 = dot(vec4(cbModelParam._m0[40u]), vec4(_1246, _1247, _1248, 1.0));
        _1300 = dot(vec3(isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)), isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)), isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1291) ? 0.0 : (isnan(0.0) ? _1291 : max(0.0, _1291))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1300 = 1.0;
    }
    float _1304 = (_1300 * cbModelParam._m0[1u].x) + (_1289 * (1.0 - cbModelParam._m0[1u].x));
    float _1314 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _326);
    float _1315 = isnan(_1314) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1314 : min(cbModelParam._m0[25u].z, _1314));
    float _1397;
    float _1399;
    float _1401;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1364 = fma(_566, cbModelParam._m0[13u].z, fma(_562, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _558)) + cbModelParam._m0[13u].w;
        float _1368 = fma(_566, cbModelParam._m0[14u].z, fma(_562, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _558)) + cbModelParam._m0[14u].w;
        float _1372 = fma(_566, cbModelParam._m0[15u].z, fma(_562, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _558)) + cbModelParam._m0[15u].w;
        float _1375 = fma(_504, cbModelParam._m0[13u].z, fma(_503, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _502));
        float _1378 = fma(_504, cbModelParam._m0[14u].z, fma(_503, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _502));
        float _1381 = fma(_504, cbModelParam._m0[15u].z, fma(_503, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _502));
        float _1409;
        if (_1375 > 0.0)
        {
            _1409 = abs((1.0 - _1364) / _1375);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1375 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1364 + 1.0) / _1375);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1409 = frontier_phi_16_14_ladder;
        }
        float _1616;
        if (_1378 > 0.0)
        {
            _1616 = abs((1.0 - _1368) / _1378);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1378 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1368 + 1.0) / _1378);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1616 = frontier_phi_25_21_ladder;
        }
        float _1870;
        if (_1381 > 0.0)
        {
            _1870 = abs((1.0 - _1372) / _1381);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1381 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1372 + 1.0) / _1381);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1870 = frontier_phi_37_32_ladder;
        }
        float _1872 = isnan(_1616) ? _1409 : (isnan(_1409) ? _1616 : min(_1409, _1616));
        float _1873 = isnan(_1870) ? _1872 : (isnan(_1872) ? _1870 : min(_1872, _1870));
        float _1877 = (_1873 * _1375) + _1364;
        float _1878 = (_1873 * _1378) + _1368;
        float _1879 = (_1873 * _1381) + _1372;
        float _1880 = _1873 * 9.9999997473787516355514526367188e-05;
        float _1882 = (-1.0) - _1880;
        float _1884 = _1880 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1879 > _1884) || ((_1879 < _1882) || ((_1878 > _1884) || ((_1878 < _1882) || ((_1877 < _1882) || (_1877 > _1884))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2007 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1879, cbModelParam._m0[9u].z, fma(_1878, cbModelParam._m0[9u].y, _1877 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1879, cbModelParam._m0[10u].z, fma(_1878, cbModelParam._m0[10u].y, _1877 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1879, cbModelParam._m0[11u].z, fma(_1878, cbModelParam._m0[11u].y, _1877 * cbModelParam._m0[11u].x))), _1315);
            frontier_phi_15_37_ladder = _2007.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2007.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2007.x * cbModelParam._m0[1u].y;
        }
        _1397 = frontier_phi_15_37_ladder_2;
        _1399 = frontier_phi_15_37_ladder_1;
        _1401 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1385 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_502, _503, _504), _1315);
        _1397 = _1385.x * cbModelParam._m0[1u].y;
        _1399 = _1385.y * cbModelParam._m0[1u].y;
        _1401 = _1385.z * cbModelParam._m0[1u].y;
    }
    float _1405 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _326);
    float _1406 = isnan(_1405) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1405 : min(cbModelParam._m0[25u].w, _1405));
    float _1499;
    float _1501;
    float _1503;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1463 = fma(_566, cbModelParam._m0[21u].z, fma(_562, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _558)) + cbModelParam._m0[21u].w;
        float _1467 = fma(_566, cbModelParam._m0[22u].z, fma(_562, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _558)) + cbModelParam._m0[22u].w;
        float _1471 = fma(_566, cbModelParam._m0[23u].z, fma(_562, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _558)) + cbModelParam._m0[23u].w;
        float _1474 = fma(_504, cbModelParam._m0[21u].z, fma(_503, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _502));
        float _1477 = fma(_504, cbModelParam._m0[22u].z, fma(_503, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _502));
        float _1480 = fma(_504, cbModelParam._m0[23u].z, fma(_503, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _502));
        float _1621;
        if (_1474 > 0.0)
        {
            _1621 = abs((1.0 - _1463) / _1474);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1474 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1463 + 1.0) / _1474);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1621 = frontier_phi_27_23_ladder;
        }
        float _1897;
        if (_1477 > 0.0)
        {
            _1897 = abs((1.0 - _1467) / _1477);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1477 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1467 + 1.0) / _1477);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1897 = frontier_phi_39_34_ladder;
        }
        float _2110;
        if (_1480 > 0.0)
        {
            _2110 = abs((1.0 - _1471) / _1480);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1480 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1471 + 1.0) / _1480);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2110 = frontier_phi_48_45_ladder;
        }
        float _2112 = isnan(_1897) ? _1621 : (isnan(_1621) ? _1897 : min(_1621, _1897));
        float _2113 = isnan(_2110) ? _2112 : (isnan(_2112) ? _2110 : min(_2112, _2110));
        float _2117 = (_2113 * _1474) + _1463;
        float _2118 = (_2113 * _1477) + _1467;
        float _2119 = (_2113 * _1480) + _1471;
        float _2120 = _2113 * 9.9999997473787516355514526367188e-05;
        float _2121 = (-1.0) - _2120;
        float _2123 = _2120 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2119 > _2123) || ((_2119 < _2121) || ((_2118 > _2123) || ((_2118 < _2121) || ((_2117 < _2121) || (_2117 > _2123))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2320 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2119, cbModelParam._m0[17u].z, fma(_2118, cbModelParam._m0[17u].y, _2117 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2119, cbModelParam._m0[18u].z, fma(_2118, cbModelParam._m0[18u].y, _2117 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2119, cbModelParam._m0[19u].z, fma(_2118, cbModelParam._m0[19u].y, _2117 * cbModelParam._m0[19u].x))), _1406);
            frontier_phi_24_48_ladder = _2320.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2320.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2320.x * cbModelParam._m0[1u].z;
        }
        _1499 = frontier_phi_24_48_ladder_2;
        _1501 = frontier_phi_24_48_ladder_1;
        _1503 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1483 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_502, _503, _504), _1406);
        _1499 = _1483.x * cbModelParam._m0[1u].z;
        _1501 = _1483.y * cbModelParam._m0[1u].z;
        _1503 = _1483.z * cbModelParam._m0[1u].z;
    }
    float _1516 = (((_529 * _479) + _530) * _494) * ((cbModelParam._m0[1u].w * (_1499 - _1397)) + _1397);
    float _1518 = (((_529 * _481) + _530) * _494) * ((cbModelParam._m0[1u].w * (_1501 - _1399)) + _1399);
    float _1520 = (((_529 * _482) + _530) * _494) * ((cbModelParam._m0[1u].w * (_1503 - _1401)) + _1401);
    float _1523 = fma(_1520, cbSceneParam._m0[89u].z, fma(_1518, cbSceneParam._m0[89u].y, _1516 * cbSceneParam._m0[89u].x));
    float _1526 = fma(_1520, cbSceneParam._m0[90u].z, fma(_1518, cbSceneParam._m0[90u].y, _1516 * cbSceneParam._m0[90u].x));
    float _1529 = fma(_1520, cbSceneParam._m0[91u].z, fma(_1518, cbSceneParam._m0[91u].y, _1516 * cbSceneParam._m0[91u].x));
    uvec4 _1539 = floatBitsToUint(cbInstanceData._m0[_453 + 5u]);
    uint _1541 = _1539.x * 14u;
    uint _1542 = _1541 + 13u;
    float _1549 = _494 + (-1.0);
    float _1554 = (cbLight._m0[_1542].x * _1549) + 1.0;
    float _1555 = (cbLight._m0[_1542].y * _1549) + 1.0;
    float _1556 = (cbLight._m0[_1542].z * _1549) + 1.0;
    float _1557 = (cbLight._m0[_1542].w * _1549) + 1.0;
    uint _1558 = _1541 + 5u;
    float _1564 = isnan(1.0) ? _1555 : (isnan(_1555) ? 1.0 : min(_1555, 1.0));
    uint _1568 = _1541 + 4u;
    float _1575 = isnan(1.0) ? _1554 : (isnan(_1554) ? 1.0 : min(_1554, 1.0));
    uint _1579 = _1541 | 1u;
    float _1590 = dot(vec3(cbLight._m0[_1541].xyz), vec3(_323, _324, _325));
    float _1593 = dot(vec3(cbLight._m0[_1579].xyz), vec3(_323, _324, _325));
    float _3686 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
    float _3697 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
    float _1598 = (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * 0.3183098733425140380859375;
    float _1600 = (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * 0.3183098733425140380859375;
    float _1607 = ((cbLight._m0[_1558].x * _1564) * _1600) + ((cbLight._m0[_1568].x * _1575) * _1598);
    float _1608 = ((_1564 * cbLight._m0[_1558].y) * _1600) + ((_1575 * cbLight._m0[_1568].y) * _1598);
    float _1609 = ((_1564 * cbLight._m0[_1558].z) * _1600) + ((_1575 * cbLight._m0[_1568].z) * _1598);
    uvec4 _1613 = floatBitsToUint(cbLight._m0[_1541 + 12u]);
    bool _1615 = _1613.x == 0u;
    float _1626;
    float _1628;
    float _1630;
    if (_1615)
    {
        _1626 = _1607;
        _1628 = _1608;
        _1630 = _1609;
    }
    else
    {
        uint _1634 = _1541 + 6u;
        float _1650 = (dot(vec3(cbLight._m0[_1541 + 2u].xyz), vec3(_323, _324, _325)) * 0.5) + 0.5;
        float _1651 = _1650 * _1650;
        float _3708 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1653 = isnan(1.0) ? _1556 : (isnan(_1556) ? 1.0 : min(_1556, 1.0));
        _1626 = (((cbLight._m0[_1634].x * 0.3183098733425140380859375) * _1652) * _1653) + _1607;
        _1628 = (((cbLight._m0[_1634].y * 0.3183098733425140380859375) * _1652) * _1653) + _1608;
        _1630 = (((cbLight._m0[_1634].z * 0.3183098733425140380859375) * _1652) * _1653) + _1609;
    }
    bool _1633 = _1613.y == 0u;
    float _1671;
    float _1673;
    float _1675;
    if (_1633)
    {
        _1671 = _1626;
        _1673 = _1628;
        _1675 = _1630;
    }
    else
    {
        uint _1841 = _1541 + 7u;
        float _1857 = (dot(vec3(cbLight._m0[_1541 + 3u].xyz), vec3(_323, _324, _325)) * 0.5) + 0.5;
        float _1858 = _1857 * _1857;
        float _3724 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1859 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1860 = isnan(1.0) ? _1557 : (isnan(_1557) ? 1.0 : min(_1557, 1.0));
        _1671 = (((cbLight._m0[_1841].x * 0.3183098733425140380859375) * _1859) * _1860) + _1626;
        _1673 = (((cbLight._m0[_1841].y * 0.3183098733425140380859375) * _1859) * _1860) + _1628;
        _1675 = (((cbLight._m0[_1841].z * 0.3183098733425140380859375) * _1859) * _1860) + _1630;
    }
    uint _1678 = _1541 + 8u;
    float _1691 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1541].w)) * _326) * 0.949999988079071044921875);
    float _1692 = _1691 * _1691;
    float _1693 = cbLight._m0[_1541].x + _404;
    float _1694 = cbLight._m0[_1541].y + _405;
    float _1695 = cbLight._m0[_1541].z + _406;
    float _1699 = inversesqrt(dot(vec3(_1693, _1694, _1695), vec3(_1693, _1694, _1695)));
    float _1700 = _1699 * _1693;
    float _1701 = _1699 * _1694;
    float _1702 = _1699 * _1695;
    float _1703 = dot(vec3(_323, _324, _325), vec3(cbLight._m0[_1541].xyz));
    float _3740 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
    float _1706 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _3751 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _1707 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _1708 = dot(vec3(_323, _324, _325), vec3(_1700, _1701, _1702));
    float _3762 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
    float _1711 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
    float _1712 = dot(vec3(cbLight._m0[_1541].xyz), vec3(_1700, _1701, _1702));
    float _3773 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
    float _1716 = _1692 * _1692;
    float _1720 = ((_1711 * _1711) * (_1716 + (-1.0))) + 1.0;
    float _1728 = exp2(log2(1.0 - (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0)))) * 5.0);
    float _1729 = 0.959999978542327880859375 - _476;
    float _1731 = 0.959999978542327880859375 - _477;
    float _1732 = 0.959999978542327880859375 - _478;
    float _1739 = 1.0 - _1692;
    float _1750 = (0.5 / (((_1707 * ((_1706 * _1739) + _1692)) + 9.9999999392252902907785028219223e-09) + (((_1707 * _1739) + _1692) * _1706))) * _1706;
    float _3784 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _1752 = (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_1716 / ((_1720 * _1720) * 3.141590118408203125));
    uint _1763 = _1541 + 9u;
    float _1774 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1579].w)) * _326) * 0.949999988079071044921875);
    float _1775 = _1774 * _1774;
    float _1776 = cbLight._m0[_1579].x + _404;
    float _1777 = cbLight._m0[_1579].y + _405;
    float _1778 = cbLight._m0[_1579].z + _406;
    float _1782 = inversesqrt(dot(vec3(_1776, _1777, _1778), vec3(_1776, _1777, _1778)));
    float _1783 = _1782 * _1776;
    float _1784 = _1782 * _1777;
    float _1785 = _1782 * _1778;
    float _1786 = dot(vec3(_323, _324, _325), vec3(cbLight._m0[_1579].xyz));
    float _3795 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _1789 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _1790 = dot(vec3(_323, _324, _325), vec3(_1783, _1784, _1785));
    float _3806 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
    float _1793 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _1794 = dot(vec3(cbLight._m0[_1579].xyz), vec3(_1783, _1784, _1785));
    float _3817 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1798 = _1775 * _1775;
    float _1802 = ((_1793 * _1793) * (_1798 + (-1.0))) + 1.0;
    float _1809 = exp2(log2(1.0 - (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0)))) * 5.0);
    float _1816 = 1.0 - _1775;
    float _1826 = (0.5 / (((_1707 * ((_1789 * _1816) + _1775)) + 9.9999999392252902907785028219223e-09) + (((_1707 * _1816) + _1775) * _1789))) * _1789;
    float _3828 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1828 = (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1798 / ((_1802 * _1802) * 3.141590118408203125));
    float _1838 = (((((_1809 * _1729) + _479) * cbLight._m0[_1763].x) * _1828) * _1564) + (((((_1728 * _1729) + _479) * cbLight._m0[_1678].x) * _1752) * _1575);
    float _1839 = (((((_1809 * _1731) + _481) * cbLight._m0[_1763].y) * _1828) * _1564) + (((((_1728 * _1731) + _481) * cbLight._m0[_1678].y) * _1752) * _1575);
    float _1840 = (((((_1809 * _1732) + _482) * cbLight._m0[_1763].z) * _1828) * _1564) + (((((_1728 * _1732) + _482) * cbLight._m0[_1678].z) * _1752) * _1575);
    float _1902;
    float _1904;
    float _1906;
    if (_1615)
    {
        _1902 = _1838;
        _1904 = _1839;
        _1906 = _1840;
    }
    else
    {
        uint _1908 = _1541 + 2u;
        uint _1912 = _1541 + 10u;
        float _1926 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1908].w)) * _326) * 0.949999988079071044921875);
        float _1927 = _1926 * _1926;
        float _1928 = cbLight._m0[_1908].x + _404;
        float _1929 = cbLight._m0[_1908].y + _405;
        float _1930 = cbLight._m0[_1908].z + _406;
        float _1934 = inversesqrt(dot(vec3(_1928, _1929, _1930), vec3(_1928, _1929, _1930)));
        float _1935 = _1934 * _1928;
        float _1936 = _1934 * _1929;
        float _1937 = _1934 * _1930;
        float _1938 = dot(vec3(_323, _324, _325), vec3(cbLight._m0[_1908].xyz));
        float _3839 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
        float _1941 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1942 = dot(vec3(_323, _324, _325), vec3(_1935, _1936, _1937));
        float _3850 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
        float _1945 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1946 = dot(vec3(cbLight._m0[_1908].xyz), vec3(_1935, _1936, _1937));
        float _3861 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
        float _1950 = _1927 * _1927;
        float _1954 = ((_1945 * _1945) * (_1950 + (-1.0))) + 1.0;
        float _1961 = exp2(log2(1.0 - (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0)))) * 5.0);
        float _1968 = 1.0 - _1927;
        float _1978 = (0.5 / (((_1707 * ((_1941 * _1968) + _1927)) + 9.9999999392252902907785028219223e-09) + (((_1707 * _1968) + _1927) * _1941))) * _1941;
        float _3872 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        float _1980 = (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1950 / ((_1954 * _1954) * 3.141590118408203125));
        float _1981 = isnan(1.0) ? _1556 : (isnan(_1556) ? 1.0 : min(_1556, 1.0));
        _1902 = (((((_1961 * _1729) + _479) * cbLight._m0[_1912].x) * _1980) * _1981) + _1838;
        _1904 = (((((_1961 * _1731) + _481) * cbLight._m0[_1912].y) * _1980) * _1981) + _1839;
        _1906 = (((((_1961 * _1732) + _482) * cbLight._m0[_1912].z) * _1980) * _1981) + _1840;
    }
    float _2016;
    float _2018;
    float _2020;
    if (_1633)
    {
        _2016 = _1902;
        _2018 = _1904;
        _2020 = _1906;
    }
    else
    {
        uint _2027 = _1541 + 3u;
        uint _2031 = _1541 + 11u;
        float _2045 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2027].w)) * _326) * 0.949999988079071044921875);
        float _2046 = _2045 * _2045;
        float _2047 = cbLight._m0[_2027].x + _404;
        float _2048 = cbLight._m0[_2027].y + _405;
        float _2049 = cbLight._m0[_2027].z + _406;
        float _2053 = inversesqrt(dot(vec3(_2047, _2048, _2049), vec3(_2047, _2048, _2049)));
        float _2054 = _2053 * _2047;
        float _2055 = _2053 * _2048;
        float _2056 = _2053 * _2049;
        float _2057 = dot(vec3(_323, _324, _325), vec3(cbLight._m0[_2027].xyz));
        float _3888 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2060 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _2061 = dot(vec3(_323, _324, _325), vec3(_2054, _2055, _2056));
        float _3899 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        float _2064 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _2065 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_2054, _2055, _2056));
        float _3910 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2069 = _2046 * _2046;
        float _2073 = ((_2064 * _2064) * (_2069 + (-1.0))) + 1.0;
        float _2080 = exp2(log2(1.0 - (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) * 5.0);
        float _2087 = 1.0 - _2046;
        float _2097 = (0.5 / (((_1707 * ((_2060 * _2087) + _2046)) + 9.9999999392252902907785028219223e-09) + (((_1707 * _2087) + _2046) * _2060))) * _2060;
        float _3921 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2099 = (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_2069 / ((_2073 * _2073) * 3.141590118408203125));
        float _2100 = isnan(1.0) ? _1557 : (isnan(_1557) ? 1.0 : min(_1557, 1.0));
        _2016 = (((((_2080 * _1729) + _479) * cbLight._m0[_2031].x) * _2099) * _2100) + _1902;
        _2018 = (((((_2080 * _1731) + _481) * cbLight._m0[_2031].y) * _2099) * _2100) + _1904;
        _2020 = (((((_2080 * _1732) + _482) * cbLight._m0[_2031].z) * _2099) * _2100) + _1906;
    }
    float _2234;
    float _2236;
    float _2238;
    float _2240;
    float _2242;
    float _2244;
    if (_1539.y == 0u)
    {
        float _2175 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2176 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2175;
        float _2177 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2175;
        float _2178 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2175;
        uvec4 _2190 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2191 = _2190.x;
        uint _2202 = uint((float(_2190.y) * floor(float(uint(cbSceneParam._m0[85u].y * _413) / _2191))) + floor(float(uint(cbSceneParam._m0[85u].x * _412) / _2191)));
        float _2212 = (log2(_2178 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2213 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        uint _2216 = uint(isnan(14.0) ? _2213 : (isnan(_2213) ? 14.0 : min(_2213, 14.0)));
        uvec4 _2221 = texelFetch(g_lightClusterGridBuffer, int(((_2216 << 2u) + (_2202 << 6u)) >> 2u));
        uint _2222 = _2221.x;
        uint _2223 = _2190.z;
        float _2325;
        float _2327;
        float _2329;
        float _2331;
        float _2333;
        float _2335;
        if (((((1u << ((_2223 >> 4u) & 15u)) + 4294967295u) & _2222) == 0u) || ((_2223 & 240u) == 0u))
        {
            _2325 = 0.0;
            _2327 = 0.0;
            _2329 = 0.0;
            _2331 = 0.0;
            _2333 = 0.0;
            _2335 = 0.0;
        }
        else
        {
            float _2326;
            float _2328;
            float _2330;
            float _2332;
            float _2334;
            float _2336;
            float _2469 = 0.0;
            float _2470 = 0.0;
            float _2471 = 0.0;
            float _2472 = 0.0;
            float _2473 = 0.0;
            float _2474 = 0.0;
            uint _2475 = 0u;
            uint _2484;
            bool _2485;
            for (;;)
            {
                _2484 = texelFetch(g_lightClassification, int((((_2216 << 5u) + (_2202 << 9u)) + (_2475 << 2u)) >> 2u)).x;
                _2485 = _2484 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2485)
                {
                    frontier_phi_63_pred = _2474;
                    frontier_phi_63_pred_1 = _2473;
                    frontier_phi_63_pred_2 = _2472;
                    frontier_phi_63_pred_3 = _2471;
                    frontier_phi_63_pred_4 = _2470;
                    frontier_phi_63_pred_5 = _2469;
                }
                else
                {
                    float _2593;
                    float _2594;
                    float _2595;
                    float _2596;
                    float _2597;
                    float _2598;
                    uint _2599;
                    _2593 = _2469;
                    _2594 = _2470;
                    _2595 = _2471;
                    _2596 = _2472;
                    _2597 = _2473;
                    _2598 = _2474;
                    _2599 = _2484;
                    float _2525;
                    float _2526;
                    float _2527;
                    float _2528;
                    float _2529;
                    float _2530;
                    for (;;)
                    {
                        uint _2603 = uint(findLSB(_2599)) + (_2475 << 5u);
                        uint _2600 = (_2599 + 4294967295u) & _2599;
                        uint _2605 = _2603 * 48u;
                        vec4 _2619 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2605)).x, texelFetch(g_PointLightRenderingBuffer, int(_2605 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2605 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2605 + 3u)).x));
                        uint _2625 = (_2603 * 48u) + 4u;
                        vec4 _2638 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2625)).x, texelFetch(g_PointLightRenderingBuffer, int(_2625 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2625 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2625 + 3u)).x));
                        uint _2644 = (_2603 * 48u) + 8u;
                        vec3 _2655 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2644)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 2u)).x));
                        float _2659 = _2619.x - _2176;
                        float _2660 = _2619.y - _2177;
                        float _2661 = _2619.z - _2178;
                        float _2662 = dot(vec3(_2659, _2660, _2661), vec3(_2659, _2660, _2661));
                        float _2665 = inversesqrt(_2662);
                        float _2666 = _2665 * _2659;
                        float _2667 = _2665 * _2660;
                        float _2668 = _2665 * _2661;
                        float _2669 = dot(vec3(_434, _437, _440), vec3(_2666, _2667, _2668));
                        float _2674 = 1.0 - (_2662 * _2619.w);
                        float _3947 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
                        float _2675 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
                        float _2676 = sqrt(_2662) * _2638.w;
                        float _2679 = 1.39999997615814208984375 / (_2676 + 1.39999997615814208984375);
                        float _2680 = _2679 * _2679;
                        float _2683 = ((1.0 - _2680) * _2669) + _2680;
                        float _2686 = _2676 * _2676;
                        float _2690 = ((isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0))) * _2675) / ((_2686 * 0.699999988079071044921875) + 1.0);
                        float _2694 = (-0.0) - _2176;
                        float _2695 = (-0.0) - _2177;
                        float _2696 = (-0.0) - _2178;
                        float _2700 = inversesqrt(dot(vec3(_2694, _2695, _2696), vec3(_2694, _2695, _2696)));
                        float _2701 = _2700 * _2694;
                        float _2702 = _2700 * _2695;
                        float _2703 = _2700 * _2696;
                        float _2711 = exp2(log2(1.0 / ((_2686 * 3.5) + 5.0)) * 0.25);
                        float _2712 = 1.0 - _510;
                        float _2719 = sqrt(1.0 - ((1.0 - (_2712 * _2712)) * (1.0 - (_2711 * _2711))));
                        float _2720 = _2719 * _2719;
                        float _2721 = _2720 * _2720;
                        float _2722 = _2701 + _2666;
                        float _2723 = _2702 + _2667;
                        float _2724 = _2703 + _2668;
                        float _2728 = inversesqrt(dot(vec3(_2722, _2723, _2724), vec3(_2722, _2723, _2724)));
                        float _2732 = dot(vec3(_434, _437, _440), vec3(_2701, _2702, _2703));
                        float _3963 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
                        float _2735 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
                        float _2736 = dot(vec3(_434, _437, _440), vec3(_2728 * _2722, _2728 * _2723, _2728 * _2724));
                        float _3974 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
                        float _2739 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
                        float _2743 = ((_2739 * _2739) * (_2721 + (-1.0))) + 1.0;
                        float _2744 = _2679 * _2720;
                        float _2745 = _2744 * _2744;
                        float _2748 = ((1.0 - _2745) * _2669) + _2745;
                        float _3985 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
                        float _2749 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
                        float _2750 = 1.0 - _2720;
                        float _2760 = (0.5 / (((_2749 * ((_2735 * _2750) + _2720)) + 9.9999999392252902907785028219223e-09) + (((_2749 * _2750) + _2720) * _2735))) * _2749;
                        float _3996 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
                        float _2771 = (((_2721 * 3.1415927410125732421875) * (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) / ((_2743 * _2743) * ((_2686 * 2.1991131305694580078125) + 3.141590118408203125))) * _2675;
                        _2528 = (_2690 * _2638.x) + _2596;
                        _2529 = (_2690 * _2638.y) + _2597;
                        _2530 = (_2690 * _2638.z) + _2598;
                        _2525 = (_2771 * _2655.x) + _2593;
                        _2526 = (_2771 * _2655.y) + _2594;
                        _2527 = (_2771 * _2655.z) + _2595;
                        if (_2600 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2593 = _2525;
                            _2594 = _2526;
                            _2595 = _2527;
                            _2596 = _2528;
                            _2597 = _2529;
                            _2598 = _2530;
                            _2599 = _2600;
                        }
                    }
                    frontier_phi_63_pred = _2530;
                    frontier_phi_63_pred_1 = _2529;
                    frontier_phi_63_pred_2 = _2528;
                    frontier_phi_63_pred_3 = _2527;
                    frontier_phi_63_pred_4 = _2526;
                    frontier_phi_63_pred_5 = _2525;
                }
                _2336 = frontier_phi_63_pred;
                _2334 = frontier_phi_63_pred_1;
                _2332 = frontier_phi_63_pred_2;
                _2330 = frontier_phi_63_pred_3;
                _2328 = frontier_phi_63_pred_4;
                _2326 = frontier_phi_63_pred_5;
                uint _2476 = _2475 + 1u;
                if (_2476 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2469 = _2326;
                    _2470 = _2328;
                    _2471 = _2330;
                    _2472 = _2332;
                    _2473 = _2334;
                    _2474 = _2336;
                    _2475 = _2476;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2325 = _2326;
            _2327 = _2328;
            _2329 = _2330;
            _2331 = _2332;
            _2333 = _2334;
            _2335 = _2336;
        }
        uvec4 _2339 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2340 = _2339.z;
        uint _2342 = (_2340 >> 8u) & 15u;
        float _2437;
        float _2439;
        float _2441;
        float _2443;
        float _2445;
        float _2447;
        if (((4294967295u << _2342) & _2222) == 0u)
        {
            _2437 = _2325;
            _2439 = _2327;
            _2441 = _2329;
            _2443 = _2331;
            _2445 = _2333;
            _2447 = _2335;
        }
        else
        {
            float _2462 = inversesqrt(dot(vec3(_2176, _2177, _2178), vec3(_2176, _2177, _2178)));
            float _2463 = _2462 * _2176;
            float _2464 = _2462 * _2177;
            float _2465 = _2462 * _2178;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2342 < ((_2340 >> 12u) & 15u))
            {
                float _2438;
                float _2440;
                float _2442;
                float _2444;
                float _2446;
                float _2448;
                float _2576 = _2325;
                float _2577 = _2327;
                float _2578 = _2329;
                float _2579 = _2331;
                float _2580 = _2333;
                float _2581 = _2335;
                uint _2582 = _2342;
                uint _2591;
                bool _2592;
                for (;;)
                {
                    _2591 = texelFetch(g_lightClassification, int((((_2216 << 5u) + (_2202 << 9u)) + (_2582 << 2u)) >> 2u)).x;
                    _2592 = _2591 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2592)
                    {
                        frontier_phi_69_pred = _2581;
                        frontier_phi_69_pred_1 = _2580;
                        frontier_phi_69_pred_2 = _2579;
                        frontier_phi_69_pred_3 = _2578;
                        frontier_phi_69_pred_4 = _2577;
                        frontier_phi_69_pred_5 = _2576;
                    }
                    else
                    {
                        float _2776;
                        float _2777;
                        float _2778;
                        float _2779;
                        float _2780;
                        float _2781;
                        float _3072;
                        float _3073;
                        float _3074;
                        float _3075;
                        float _3076;
                        float _3077;
                        float _2789 = _2576;
                        float _2790 = _2577;
                        float _2791 = _2578;
                        float _2792 = _2579;
                        float _2793 = _2580;
                        float _2794 = _2581;
                        uint _2795 = _2591;
                        uint _2796;
                        vec4 _2821;
                        float _2822;
                        vec4 _2837;
                        vec3 _2849;
                        vec4 _2865;
                        vec4 _2881;
                        float _2928;
                        bool _2929;
                        for (;;)
                        {
                            uint _2806 = ((_2582 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2795));
                            _2796 = (_2795 + 4294967295u) & _2795;
                            uint _2808 = _2806 * 40u;
                            _2821 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2808)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2808 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2808 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2808 + 3u)).x));
                            _2822 = _2821.w;
                            uint _2824 = (_2806 * 40u) + 4u;
                            _2837 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2824)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 3u)).x));
                            uint _2839 = (_2806 * 40u) + 8u;
                            _2849 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2839)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 2u)).x));
                            uint _2852 = (_2806 * 40u) + 16u;
                            _2865 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2852)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 3u)).x));
                            uint _2868 = (_2806 * 40u) + 20u;
                            _2881 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2868)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 3u)).x));
                            uint _2884 = (_2806 * 40u) + 24u;
                            vec4 _2897 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2884)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 3u)).x));
                            uint _2903 = (_2806 * 40u) + 28u;
                            vec4 _2916 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2903)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 3u)).x));
                            _2928 = fma(_2178, _2916.z, fma(_2177, _2916.y, _2916.x * _2176)) + _2916.w;
                            _2929 = !((fma(_2178, _2897.z, fma(_2177, _2897.y, _2897.x * _2176)) + _2897.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2929)
                            {
                                float _2956 = _2821.x - _2176;
                                float _2957 = _2821.y - _2177;
                                float _2958 = _2821.z - _2178;
                                float _2959 = dot(vec3(_2956, _2957, _2958), vec3(_2956, _2957, _2958));
                                float _2962 = inversesqrt(_2959);
                                float _2963 = _2962 * _2956;
                                float _2964 = _2962 * _2957;
                                float _2965 = _2962 * _2958;
                                float _2969 = 1.0 - (_2959 / (_2822 * _2822));
                                float _4007 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                                float _2970 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
                                float _2974 = sqrt(_2959) * _2837.w;
                                float _2976 = 1.39999997615814208984375 / (_2974 + 1.39999997615814208984375);
                                float _2977 = _2976 * _2976;
                                float _2980 = ((1.0 - _2977) * dot(vec3(_2963, _2964, _2965), vec3(_434, _437, _440))) + _2977;
                                float _2983 = _2974 * _2974;
                                float _2987 = (fma(_2178, _2865.z, fma(_2177, _2865.y, _2865.x * _2176)) + _2865.w) / _2928;
                                float _2988 = (fma(_2178, _2881.z, fma(_2177, _2881.y, _2881.x * _2176)) + _2881.w) / _2928;
                                float _2992 = 1.0 - dot(vec2(_2987, _2988), vec2(_2987, _2988));
                                float _4023 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                                float _2993 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
                                float _2994 = _2993 * (((isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0))) * _2970) / ((_2983 * 0.699999988079071044921875) + 1.0));
                                float _3006 = exp2(log2(1.0 / ((_2983 * 3.5) + 5.0)) * 0.25);
                                float _3007 = 1.0 - _510;
                                float _3014 = sqrt(1.0 - ((1.0 - (_3007 * _3007)) * (1.0 - (_3006 * _3006))));
                                float _3015 = _3014 * _3014;
                                float _3016 = _3015 * _3015;
                                float _3017 = _2963 - _2463;
                                float _3018 = _2964 - _2464;
                                float _3019 = _2965 - _2465;
                                float _3023 = inversesqrt(dot(vec3(_3017, _3018, _3019), vec3(_3017, _3018, _3019)));
                                float _3027 = dot(vec3(_434, _437, _440), vec3((-0.0) - _2463, (-0.0) - _2464, (-0.0) - _2465));
                                float _4034 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                                float _3030 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
                                float _3031 = dot(vec3(_434, _437, _440), vec3(_3023 * _3017, _3023 * _3018, _3023 * _3019));
                                float _4045 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                                float _3034 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
                                float _3038 = ((_3034 * _3034) * (_3016 + (-1.0))) + 1.0;
                                float _3039 = _2976 * _3015;
                                float _3040 = _3039 * _3039;
                                float _3046 = ((1.0 - _3040) * dot(vec3(_434, _437, _440), vec3(_2963, _2964, _2965))) + _3040;
                                float _4056 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                                float _3047 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
                                float _3048 = 1.0 - _3015;
                                float _3058 = (0.5 / (((_3047 * ((_3030 * _3048) + _3015)) + 9.9999999392252902907785028219223e-09) + (((_3047 * _3048) + _3015) * _3030))) * _3047;
                                float _4067 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                                float _3068 = (_2993 * _2970) * (((_3016 * 3.1415927410125732421875) * (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) / ((_3038 * _3038) * ((_2983 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2994 * _2837.z;
                                frontier_phi_75_pred_1 = _2994 * _2837.y;
                                frontier_phi_75_pred_2 = _2994 * _2837.x;
                                frontier_phi_75_pred_3 = _3068 * _2849.z;
                                frontier_phi_75_pred_4 = _3068 * _2849.y;
                                frontier_phi_75_pred_5 = _3068 * _2849.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3077 = frontier_phi_75_pred;
                            _3076 = frontier_phi_75_pred_1;
                            _3075 = frontier_phi_75_pred_2;
                            _3074 = frontier_phi_75_pred_3;
                            _3073 = frontier_phi_75_pred_4;
                            _3072 = frontier_phi_75_pred_5;
                            _2779 = _3075 + _2792;
                            _2780 = _3076 + _2793;
                            _2781 = _3077 + _2794;
                            _2776 = _3072 + _2789;
                            _2777 = _3073 + _2790;
                            _2778 = _3074 + _2791;
                            if (_2796 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2789 = _2776;
                                _2790 = _2777;
                                _2791 = _2778;
                                _2792 = _2779;
                                _2793 = _2780;
                                _2794 = _2781;
                                _2795 = _2796;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2781;
                        frontier_phi_69_pred_1 = _2780;
                        frontier_phi_69_pred_2 = _2779;
                        frontier_phi_69_pred_3 = _2778;
                        frontier_phi_69_pred_4 = _2777;
                        frontier_phi_69_pred_5 = _2776;
                    }
                    _2448 = frontier_phi_69_pred;
                    _2446 = frontier_phi_69_pred_1;
                    _2444 = frontier_phi_69_pred_2;
                    _2442 = frontier_phi_69_pred_3;
                    _2440 = frontier_phi_69_pred_4;
                    _2438 = frontier_phi_69_pred_5;
                    uint _2583 = _2582 + 1u;
                    if (_2583 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2576 = _2438;
                        _2577 = _2440;
                        _2578 = _2442;
                        _2579 = _2444;
                        _2580 = _2446;
                        _2581 = _2448;
                        _2582 = _2583;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2448;
                frontier_phi_57_58_ladder_1 = _2446;
                frontier_phi_57_58_ladder_2 = _2444;
                frontier_phi_57_58_ladder_3 = _2442;
                frontier_phi_57_58_ladder_4 = _2440;
                frontier_phi_57_58_ladder_5 = _2438;
            }
            else
            {
                frontier_phi_57_58_ladder = _2335;
                frontier_phi_57_58_ladder_1 = _2333;
                frontier_phi_57_58_ladder_2 = _2331;
                frontier_phi_57_58_ladder_3 = _2329;
                frontier_phi_57_58_ladder_4 = _2327;
                frontier_phi_57_58_ladder_5 = _2325;
            }
            _2437 = frontier_phi_57_58_ladder_5;
            _2439 = frontier_phi_57_58_ladder_4;
            _2441 = frontier_phi_57_58_ladder_3;
            _2443 = frontier_phi_57_58_ladder_2;
            _2445 = frontier_phi_57_58_ladder_1;
            _2447 = frontier_phi_57_58_ladder;
        }
        float _2452 = isnan(1.0) ? _494 : (isnan(_494) ? 1.0 : min(_494, 1.0));
        _2234 = (_2452 * _2443) + _1671;
        _2236 = (_2452 * _2445) + _1673;
        _2238 = (_2452 * _2447) + _1675;
        _2240 = ((_2437 * _479) * _2452) + _2016;
        _2242 = ((_2439 * _481) * _2452) + _2018;
        _2244 = ((_2441 * _482) * _2452) + _2020;
    }
    else
    {
        _2234 = _1671;
        _2236 = _1673;
        _2238 = _1675;
        _2240 = _2016;
        _2242 = _2018;
        _2244 = _2020;
    }
    float _4083 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _4094 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _4105 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _2261 = ((isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_2234 + ((isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0))) * _494))) + ((_2240 + ((isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))) * _1304)) * cbPerFrame._m0[3u].x);
    float _2262 = ((isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_2236 + ((isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0))) * _494))) + ((_2242 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _1304)) * cbPerFrame._m0[3u].x);
    float _2263 = ((isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_2238 + ((isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0))) * _494))) + ((_2244 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _1304)) * cbPerFrame._m0[3u].x);
    uint _2267 = _453 + 6u;
    float _2275 = _412 / cbSceneParam._m0[86u].x;
    float _2276 = _413 / cbSceneParam._m0[86u].y;
    vec4 _2290 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2275, _2276, (log2((isnan(cbSceneParam._m0[77u].w) ? _346 : (isnan(_346) ? cbSceneParam._m0[77u].w : min(_346, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2292 = _2290.x;
    float _2293 = _2290.y;
    float _2294 = _2290.z;
    float _2295 = _2290.w;
    float _2387;
    float _2389;
    float _2391;
    float _2393;
    if (_346 > cbSceneParam._m0[78u].w)
    {
        float _2350 = isnan(_346) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _346 : min(cbSceneParam._m0[80u].w, _346));
        float _2351 = _2350 / _346;
        float _2362 = _2351 * _397;
        float _2363 = _398 * _2351;
        float _2364 = (-0.0) - _2363;
        float _2365 = _2351 * _399;
        float _2367 = (cbSceneParam._m0[77u].w * _2364) / _2350;
        float _2368 = _2367 + cbSceneParam._m0[79u].w;
        float _2369 = cbSceneParam._m0[79u].w - _2363;
        float _2375 = sqrt(((_2362 * _2362) + (_2363 * _2363)) + (_2365 * _2365));
        float _2378 = (1.0 - (cbSceneParam._m0[77u].w / _2350)) * _2375;
        float _2383 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2385 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2538;
        if (abs((_2364 - _2367) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2538 = ((((_2368 > 0.0) ? exp2(_2383 * _2368) : (2.0 - exp2(_2385 * _2368))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2378;
        }
        else
        {
            float _2498 = 1.0 / cbSceneParam._m0[80u].x;
            float _2499 = isnan(_2369) ? _2368 : (isnan(_2368) ? _2369 : max(_2368, _2369));
            float _2500 = isnan(_2369) ? _2368 : (isnan(_2368) ? _2369 : min(_2368, _2369));
            float _2509 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : min(_2499, 0.0));
            float _2510 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : min(_2500, 0.0));
            _2538 = ((abs(_2375 / _2364) * cbSceneParam._m0[80u].y) * ((((_2509 - _2510) * 2.0) - ((exp2(_2383 * (isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0)))) - exp2(_2383 * (isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0))))) * _2498)) - ((exp2(_2385 * _2509) - exp2(_2385 * _2510)) * _2498))) + (_2378 * cbSceneParam._m0[80u].z);
        }
        vec4 _2540 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2275, _2276, 1.0), 0.0);
        float _2549 = exp2((_2538 * (-1.44269502162933349609375)) * (1.0 - _2540.w));
        float _2550 = log2(_2549);
        float _2566 = log2(_2295);
        _2387 = (exp2(_2566 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2550 * cbSceneParam._m0[78u].x)) * _2540.x) / cbSceneParam._m0[78u].x)) + _2292;
        _2389 = (exp2(_2566 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2550 * cbSceneParam._m0[78u].y)) * _2540.y) / cbSceneParam._m0[78u].y)) + _2293;
        _2391 = (exp2(_2566 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2550 * cbSceneParam._m0[78u].z)) * _2540.z) / cbSceneParam._m0[78u].z)) + _2294;
        _2393 = _2549 * _2295;
    }
    else
    {
        _2387 = _2292;
        _2389 = _2293;
        _2391 = _2294;
        _2393 = _2295;
    }
    float _2405 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2406 = _2405 == 3.0;
    float _2407 = log2(_2393);
    float _2414 = exp2(_2407 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0)));
    float _2415 = exp2(_2407 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0)));
    float _2416 = exp2(_2407 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0)));
    float _2425 = (_2405 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2425 * (_2406 ? _2414 : (_2414 + (cbSceneParam._m0[72u].w * _2387)));
    SV_Target.y = _2425 * (_2406 ? _2415 : (_2415 + (cbSceneParam._m0[72u].w * _2389)));
    SV_Target.z = _2425 * (_2406 ? _2416 : (_2416 + (cbSceneParam._m0[72u].w * _2391)));
    SV_Target.w = cbInstanceData._m0[_2267].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2267].w;
}


