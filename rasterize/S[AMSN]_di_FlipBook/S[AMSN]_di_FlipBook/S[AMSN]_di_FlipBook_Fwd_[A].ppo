#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_di_FlipBook_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_di_FlipBook_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_di_FlipBook_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _967;
float _3360;
float _3361;
float _3362;
float _3363;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    uint _240 = uint(int(floor(cbMtdParam._m0[10u].z)));
    uint _241 = uint(int(cbMtdParam._m0[11u].x * cbMtdParam._m0[10u].w));
    float _243 = float(int(_240 - _241 * (_240 / _241)));
    float _253 = (fract(TEXCOORD_1.x) + (_243 - cbMtdParam._m0[10u].w * trunc(_243 / cbMtdParam._m0[10u].w))) * (1.0 / cbMtdParam._m0[10u].w);
    float _255 = (fract(TEXCOORD_1.y) + floor(_243 / cbMtdParam._m0[10u].w)) * (1.0 / cbMtdParam._m0[11u].x);
    vec4 _268 = texture(sampler2D(S_AMSN_di_FlipBook_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _253) + cbTextureTilingScale._m0[0u].z, (_255 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _275 = _268.x * cbMtdParam._m0[9u].x;
    float _276 = _268.y * cbMtdParam._m0[9u].y;
    float _277 = _268.z * cbMtdParam._m0[9u].z;
    vec4 _287 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _289 = _287.x;
    float _312 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _289)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _289))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _3372 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _317 = gl_FragCoord.x * 0.125;
    float _319 = gl_FragCoord.y * 0.125;
    float _329 = float((((cbMtdParam._m0[9u].w * TEXCOORD_1.z) * _268.w) * (isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0)))) >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_317, _319)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625));
    vec4 _344 = texture(sampler2D(S_AMSN_di_FlipBook_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _253) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _255) + cbTextureTilingScale._m0[2u].w));
    float _347 = _344.x + cbMtdParam._m0[10u].x;
    vec4 _359 = texture(sampler2D(S_AMSN_di_FlipBook_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _253) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _255) + cbTextureTilingScale._m0[1u].w));
    float _363 = _359.z;
    float _367 = (_359.x * 2.0) + (-1.0);
    float _369 = (_359.y * 2.0) + (-1.0);
    float _370 = dot(vec2(_367, _369), vec2(_367, _369));
    float _3383 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _375 = sqrt(1.0 - (isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0))));
    float _378 = fma(_375, _218, fma(_369, _210 * TANGENT.x, (_196 * _188) * _367));
    float _381 = fma(_375, _219, fma(_369, _210 * TANGENT.y, (_196 * _189) * _367));
    float _384 = fma(_375, _220, fma(_369, _210 * TANGENT.z, (_196 * _190) * _367));
    float _388 = inversesqrt(dot(vec3(_378, _381, _384), vec3(_378, _381, _384)));
    float _389 = _388 * _378;
    float _390 = _388 * _381;
    float _391 = _388 * _384;
    float _3394 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _392 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
    float _3405 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _3416 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3427 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _3438 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _396 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
    float _410 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _451 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _461 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _451);
    float _462 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _451);
    float _463 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _451);
    float _467 = inversesqrt(dot(vec3(_461, _462, _463), vec3(_461, _462, _463)));
    float _468 = _461 * _467;
    float _469 = _462 * _467;
    float _470 = _463 * _467;
    vec4 _471 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_317, _319));
    float _473 = _471.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _648 = sqrt(((_461 * _461) + (_462 * _462)) + (_463 * _463));
        float _654 = (cbMatDynParam._m0[5u].x * _648) + cbMatDynParam._m0[5u].y;
        float _3449 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
        float _655 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _659 = (cbMatDynParam._m0[5u].z * _648) + cbMatDynParam._m0[5u].w;
        float _3460 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))) - _655)) + _655) < ((_473 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _484 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _485 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _505 = fma(_391, cbSceneParam._m0[5u].z, fma(_390, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _389));
    float _508 = fma(_391, cbSceneParam._m0[6u].z, fma(_390, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _389));
    float _511 = fma(_391, cbSceneParam._m0[7u].z, fma(_390, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _389));
    uint _524 = uint(roundEven(NORMAL.w)) * 13u;
    uint _526 = _524 + 9u;
    uint _527 = _526 + uint(cbMatDynParam._m0[0u].w);
    float _533 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0)))) * cbInstanceData._m0[_527].x;
    float _534 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0)))) * cbInstanceData._m0[_527].y;
    float _535 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0)))) * cbInstanceData._m0[_527].z;
    float _3471 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _536 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
    float _3482 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _537 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
    float _3493 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _538 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
    float _539 = 1.0 - _396;
    float _540 = _536 * _539;
    float _541 = _537 * _539;
    float _542 = _538 * _539;
    float _547 = (_536 + (-0.039999999105930328369140625)) * _396;
    float _548 = (_537 + (-0.039999999105930328369140625)) * _396;
    float _549 = (_538 + (-0.039999999105930328369140625)) * _396;
    float _550 = _547 + 0.039999999105930328369140625;
    float _552 = _548 + 0.039999999105930328369140625;
    float _553 = _549 + 0.039999999105930328369140625;
    vec4 _562 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _484, cbSceneParam._m0[86u].y * _485));
    float _565 = _562.x * TEXCOORD_1.w;
    float _566 = dot(vec3(_389, _390, _391), vec3(_468, _469, _470));
    float _569 = _566 * 2.0;
    float _573 = (_569 * _389) - _468;
    float _574 = (_569 * _390) - _469;
    float _575 = (_569 * _391) - _470;
    float _579 = abs(dot(vec3(_468, _469, _470), vec3(_389, _390, _391)));
    float _3504 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _581 = sqrt(_392);
    float _594 = exp2((_581 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_581 * 3.0));
    float _600 = (1.0 - _594) * ((_581 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _601 = _594 * _581;
    float _629 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _633 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _637 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _966;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _691 = fma(_637, cbModelParam._m0[26u].z, fma(_633, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _629));
        float _695 = fma(_637, cbModelParam._m0[27u].z, fma(_633, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _629));
        float _699 = fma(_637, cbModelParam._m0[28u].z, fma(_633, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _629));
        float _724 = _629 + _389;
        float _725 = _633 + _390;
        float _726 = _637 + _391;
        float _736 = fma(_726, cbModelParam._m0[26u].z, fma(_725, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _724)) - _691;
        float _737 = fma(_726, cbModelParam._m0[27u].z, fma(_725, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _724)) - _695;
        float _738 = fma(_726, cbModelParam._m0[28u].z, fma(_725, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _724)) - _699;
        float _742 = inversesqrt(dot(vec3(_736, _737, _738), vec3(_736, _737, _738)));
        float _755 = ((_742 * _736) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_691 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _756 = ((_742 * _737) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_695 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _757 = ((_742 * _738) / cbModelParam._m0[34u].z) + ((((((_699 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _760 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_755, _756, _757), 0.0);
        vec4 _767 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_755, _756, _757), 0.0);
        vec4 _774 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_755, _756, _757), 0.0);
        vec4 _781 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_755, _756, _757), 0.0);
        float _794 = exp2((_760.w + (-0.5)) * 20.0) * 2.0;
        float _795 = _794 * (_760.x + (-0.5));
        float _796 = _794 * (_760.y + (-0.5));
        float _797 = _794 * (_760.z + (-0.5));
        float _804 = exp2((_767.w + (-0.5)) * 20.0) * 2.0;
        float _805 = _804 * (_767.x + (-0.5));
        float _806 = _804 * (_767.y + (-0.5));
        float _807 = _804 * (_767.z + (-0.5));
        float _814 = exp2((_774.w + (-0.5)) * 20.0) * 2.0;
        float _815 = _814 * (_774.x + (-0.5));
        float _816 = _814 * (_774.y + (-0.5));
        float _817 = _814 * (_774.z + (-0.5));
        float _824 = exp2((_781.w + (-0.5)) * 20.0) * 2.0;
        float _825 = _824 * (_781.x + (-0.5));
        float _826 = _824 * (_781.y + (-0.5));
        float _827 = _824 * (_781.z + (-0.5));
        float _828 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _829 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _830 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _831 = _795 * 0.5;
        float _832 = _805 * 0.5;
        float _833 = _815 * 0.5;
        float _834 = dot(vec3(_831, _832, _833), vec3(_831, _832, _833));
        float _839 = (_834 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_834);
        float _848 = (dot(vec3(_389, _390, _391), vec3(_839 * _831, _839 * _832, _839 * _833)) + 1.0) * 0.5;
        float _3530 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _858 = sqrt(((_832 * _832) + (_831 * _831)) + (_833 * _833)) / (_828 + 9.9999997473787516355514526367188e-06);
        float _3541 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _859 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _860 = _859 * 2.0;
        float _864 = (1.0 - _859) / (_859 + 1.0);
        float _3552 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _865 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _874 = ((((1.0 - _865) * (_860 + 2.0)) * exp2(log2(isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) * (_860 + 1.0))) + _865) * _828;
        float _875 = _796 * 0.5;
        float _876 = _806 * 0.5;
        float _877 = _816 * 0.5;
        float _878 = dot(vec3(_875, _876, _877), vec3(_875, _876, _877));
        float _883 = (_878 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_878);
        float _891 = (dot(vec3(_389, _390, _391), vec3(_883 * _875, _883 * _876, _883 * _877)) + 1.0) * 0.5;
        float _3563 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _900 = sqrt(((_876 * _876) + (_875 * _875)) + (_877 * _877)) / (_829 + 9.9999997473787516355514526367188e-06);
        float _3574 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _901 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _902 = _901 * 2.0;
        float _906 = (1.0 - _901) / (_901 + 1.0);
        float _3585 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _907 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _916 = ((((1.0 - _907) * (_902 + 2.0)) * exp2(log2(isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * (_902 + 1.0))) + _907) * _829;
        float _917 = _797 * 0.5;
        float _918 = _807 * 0.5;
        float _919 = _817 * 0.5;
        float _920 = dot(vec3(_917, _918, _919), vec3(_917, _918, _919));
        float _925 = (_920 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_920);
        float _933 = (dot(vec3(_389, _390, _391), vec3(_925 * _917, _925 * _918, _925 * _919)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _942 = sqrt(((_918 * _918) + (_917 * _917)) + (_919 * _919)) / (_830 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _944 = _943 * 2.0;
        float _948 = (1.0 - _943) / (_943 + 1.0);
        float _3618 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _958 = ((((1.0 - _949) * (_944 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_944 + 1.0))) + _949) * _830;
        _966 = _797;
        _968 = _796;
        _969 = _795;
        _970 = _807;
        _971 = _806;
        _972 = _805;
        _973 = _817;
        _974 = _816;
        _975 = _815;
        _976 = _830;
        _977 = _829;
        _978 = _828;
        _979 = cbModelParam._m0[36u].z * (isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0)));
        _980 = cbModelParam._m0[36u].z * (isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0)));
        _981 = cbModelParam._m0[36u].z * (isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0)));
    }
    else
    {
        _966 = _967;
        _968 = _967;
        _969 = _967;
        _970 = _967;
        _971 = _967;
        _972 = _967;
        _973 = _967;
        _974 = _967;
        _975 = _967;
        _976 = _967;
        _977 = _967;
        _978 = _967;
        _979 = 0.0;
        _980 = 0.0;
        _981 = 0.0;
    }
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1010 = fma(_637, cbModelParam._m0[30u].z, fma(_633, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _629));
        float _1014 = fma(_637, cbModelParam._m0[31u].z, fma(_633, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _629));
        float _1018 = fma(_637, cbModelParam._m0[32u].z, fma(_633, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _629));
        float _1041 = _629 + _389;
        float _1042 = _633 + _390;
        float _1043 = _637 + _391;
        float _1053 = fma(_1043, cbModelParam._m0[30u].z, fma(_1042, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1041)) - _1010;
        float _1054 = fma(_1043, cbModelParam._m0[31u].z, fma(_1042, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1041)) - _1014;
        float _1055 = fma(_1043, cbModelParam._m0[32u].z, fma(_1042, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1041)) - _1018;
        float _1059 = inversesqrt(dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055)));
        float _1072 = ((_1059 * _1053) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1010 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1073 = ((_1059 * _1054) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1014 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1074 = ((_1059 * _1055) / cbModelParam._m0[35u].z) + ((((((_1018 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        float _1109 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1076.x + (-0.5));
        float _1111 = _1109 * (_1076.y + (-0.5));
        float _1112 = _1109 * (_1076.z + (-0.5));
        float _1119 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1083.x + (-0.5));
        float _1121 = _1119 * (_1083.y + (-0.5));
        float _1122 = _1119 * (_1083.z + (-0.5));
        float _1129 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1090.x + (-0.5));
        float _1131 = _1129 * (_1090.y + (-0.5));
        float _1132 = _1129 * (_1090.z + (-0.5));
        float _1139 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1097.x + (-0.5));
        float _1141 = _1139 * (_1097.y + (-0.5));
        float _1142 = _1139 * (_1097.z + (-0.5));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = _1110 * 0.5;
        float _1147 = _1120 * 0.5;
        float _1148 = _1130 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1162 = (dot(vec3(_389, _390, _391), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _3659 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1171 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _3670 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _3681 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * (_1173 + 1.0))) + _1178) * _1143;
        float _1188 = _1111 * 0.5;
        float _1189 = _1121 * 0.5;
        float _1190 = _1131 * 0.5;
        float _1191 = dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190));
        float _1196 = (_1191 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1191);
        float _1204 = (dot(vec3(_389, _390, _391), vec3(_1196 * _1188, _1196 * _1189, _1196 * _1190)) + 1.0) * 0.5;
        float _3692 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1213 = sqrt(((_1189 * _1189) + (_1188 * _1188)) + (_1190 * _1190)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _3703 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1215 = _1214 * 2.0;
        float _1219 = (1.0 - _1214) / (_1214 + 1.0);
        float _3714 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1229 = ((((1.0 - _1220) * (_1215 + 2.0)) * exp2(log2(isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * (_1215 + 1.0))) + _1220) * _1144;
        float _1230 = _1112 * 0.5;
        float _1231 = _1122 * 0.5;
        float _1232 = _1132 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1246 = (dot(vec3(_389, _390, _391), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _3725 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1255 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _3736 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _3747 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_1257 + 1.0))) + _1262) * _1145;
        _1279 = _1112;
        _1280 = _1111;
        _1281 = _1110;
        _1282 = _1122;
        _1283 = _1121;
        _1284 = _1120;
        _1285 = _1132;
        _1286 = _1131;
        _1287 = _1130;
        _1288 = _1145;
        _1289 = _1144;
        _1290 = _1143;
        _1291 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
        _1292 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)));
        _1293 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
    }
    else
    {
        _1279 = _967;
        _1280 = _967;
        _1281 = _967;
        _1282 = _967;
        _1283 = _967;
        _1284 = _967;
        _1285 = _967;
        _1286 = _967;
        _1287 = _967;
        _1288 = _967;
        _1289 = _967;
        _1290 = _967;
        _1291 = 0.0;
        _1292 = 0.0;
        _1293 = 0.0;
    }
    float _1303 = (cbModelParam._m0[1u].x * (_1291 - _979)) + _979;
    float _1304 = (cbModelParam._m0[1u].x * (_1292 - _980)) + _980;
    float _1305 = (cbModelParam._m0[1u].x * (_1293 - _981)) + _981;
    float _1326 = fma(_1305, cbSceneParam._m0[89u].z, fma(_1304, cbSceneParam._m0[89u].y, _1303 * cbSceneParam._m0[89u].x));
    float _1329 = fma(_1305, cbSceneParam._m0[90u].z, fma(_1304, cbSceneParam._m0[90u].y, _1303 * cbSceneParam._m0[90u].x));
    float _1332 = fma(_1305, cbSceneParam._m0[91u].z, fma(_1304, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1303));
    float _1347 = _573 * 0.5;
    float _1348 = _574 * 0.5;
    float _1349 = _575 * 0.5;
    float _1350 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_1281, _1284, _1287, _1290));
    float _1353 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_1280, _1283, _1286, _1289));
    float _1356 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_1279, _1282, _1285, _1288));
    float _1390;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1363 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_966, _970, _973, _976));
        float _1367 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_968, _971, _974, _977));
        float _1371 = dot(vec4(_1347, _1348, _1349, 1.0), vec4(_969, _972, _975, _978));
        float _1378 = dot(vec4(cbModelParam._m0[39u]), vec4(_1347, _1348, _1349, 1.0));
        _1390 = dot(vec3(isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)), isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)), isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1378) ? 0.0 : (isnan(0.0) ? _1378 : max(0.0, _1378))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1390 = 1.0;
    }
    float _1401;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1392 = dot(vec4(cbModelParam._m0[40u]), vec4(_1347, _1348, _1349, 1.0));
        _1401 = dot(vec3(isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)), isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)), isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1392) ? 0.0 : (isnan(0.0) ? _1392 : max(0.0, _1392))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1401 = 1.0;
    }
    float _1405 = (_1401 * cbModelParam._m0[1u].x) + (_1390 * (1.0 - cbModelParam._m0[1u].x));
    float _1415 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _392);
    float _1416 = isnan(_1415) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1415 : min(cbModelParam._m0[25u].z, _1415));
    float _1498;
    float _1500;
    float _1502;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1465 = fma(_637, cbModelParam._m0[13u].z, fma(_633, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _629)) + cbModelParam._m0[13u].w;
        float _1469 = fma(_637, cbModelParam._m0[14u].z, fma(_633, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _629)) + cbModelParam._m0[14u].w;
        float _1473 = fma(_637, cbModelParam._m0[15u].z, fma(_633, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _629)) + cbModelParam._m0[15u].w;
        float _1476 = fma(_575, cbModelParam._m0[13u].z, fma(_574, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _573));
        float _1479 = fma(_575, cbModelParam._m0[14u].z, fma(_574, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _573));
        float _1482 = fma(_575, cbModelParam._m0[15u].z, fma(_574, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _573));
        float _1510;
        if (_1476 > 0.0)
        {
            _1510 = abs((1.0 - _1465) / _1476);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1476 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1465 + 1.0) / _1476);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1510 = frontier_phi_19_17_ladder;
        }
        float _1717;
        if (_1479 > 0.0)
        {
            _1717 = abs((1.0 - _1469) / _1479);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1479 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1469 + 1.0) / _1479);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1717 = frontier_phi_28_24_ladder;
        }
        float _1971;
        if (_1482 > 0.0)
        {
            _1971 = abs((1.0 - _1473) / _1482);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1482 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1473 + 1.0) / _1482);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1971 = frontier_phi_40_35_ladder;
        }
        float _1973 = isnan(_1717) ? _1510 : (isnan(_1510) ? _1717 : min(_1510, _1717));
        float _1974 = isnan(_1971) ? _1973 : (isnan(_1973) ? _1971 : min(_1973, _1971));
        float _1978 = (_1974 * _1476) + _1465;
        float _1979 = (_1974 * _1479) + _1469;
        float _1980 = (_1974 * _1482) + _1473;
        float _1981 = _1974 * 9.9999997473787516355514526367188e-05;
        float _1983 = (-1.0) - _1981;
        float _1985 = _1981 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1980 > _1985) || ((_1980 < _1983) || ((_1979 > _1985) || ((_1979 < _1983) || ((_1978 < _1983) || (_1978 > _1985))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2108 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1980, cbModelParam._m0[9u].z, fma(_1979, cbModelParam._m0[9u].y, _1978 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1980, cbModelParam._m0[10u].z, fma(_1979, cbModelParam._m0[10u].y, _1978 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1980, cbModelParam._m0[11u].z, fma(_1979, cbModelParam._m0[11u].y, _1978 * cbModelParam._m0[11u].x))), _1416);
            frontier_phi_18_40_ladder = _2108.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2108.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2108.x * cbModelParam._m0[1u].y;
        }
        _1498 = frontier_phi_18_40_ladder_2;
        _1500 = frontier_phi_18_40_ladder_1;
        _1502 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1486 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_573, _574, _575), _1416);
        _1498 = _1486.x * cbModelParam._m0[1u].y;
        _1500 = _1486.y * cbModelParam._m0[1u].y;
        _1502 = _1486.z * cbModelParam._m0[1u].y;
    }
    float _1506 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _392);
    float _1507 = isnan(_1506) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1506 : min(cbModelParam._m0[25u].w, _1506));
    float _1600;
    float _1602;
    float _1604;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1564 = fma(_637, cbModelParam._m0[21u].z, fma(_633, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _629)) + cbModelParam._m0[21u].w;
        float _1568 = fma(_637, cbModelParam._m0[22u].z, fma(_633, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _629)) + cbModelParam._m0[22u].w;
        float _1572 = fma(_637, cbModelParam._m0[23u].z, fma(_633, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _629)) + cbModelParam._m0[23u].w;
        float _1575 = fma(_575, cbModelParam._m0[21u].z, fma(_574, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _573));
        float _1578 = fma(_575, cbModelParam._m0[22u].z, fma(_574, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _573));
        float _1581 = fma(_575, cbModelParam._m0[23u].z, fma(_574, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _573));
        float _1722;
        if (_1575 > 0.0)
        {
            _1722 = abs((1.0 - _1564) / _1575);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1564 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1722 = frontier_phi_30_26_ladder;
        }
        float _1998;
        if (_1578 > 0.0)
        {
            _1998 = abs((1.0 - _1568) / _1578);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1568 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1998 = frontier_phi_42_37_ladder;
        }
        float _2211;
        if (_1581 > 0.0)
        {
            _2211 = abs((1.0 - _1572) / _1581);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1572 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2211 = frontier_phi_51_48_ladder;
        }
        float _2213 = isnan(_1998) ? _1722 : (isnan(_1722) ? _1998 : min(_1722, _1998));
        float _2214 = isnan(_2211) ? _2213 : (isnan(_2213) ? _2211 : min(_2213, _2211));
        float _2218 = (_2214 * _1575) + _1564;
        float _2219 = (_2214 * _1578) + _1568;
        float _2220 = (_2214 * _1581) + _1572;
        float _2221 = _2214 * 9.9999997473787516355514526367188e-05;
        float _2222 = (-1.0) - _2221;
        float _2224 = _2221 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2220 > _2224) || ((_2220 < _2222) || ((_2219 > _2224) || ((_2219 < _2222) || ((_2218 < _2222) || (_2218 > _2224))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2421 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2220, cbModelParam._m0[17u].z, fma(_2219, cbModelParam._m0[17u].y, _2218 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2220, cbModelParam._m0[18u].z, fma(_2219, cbModelParam._m0[18u].y, _2218 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2220, cbModelParam._m0[19u].z, fma(_2219, cbModelParam._m0[19u].y, _2218 * cbModelParam._m0[19u].x))), _1507);
            frontier_phi_27_51_ladder = _2421.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2421.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2421.x * cbModelParam._m0[1u].z;
        }
        _1600 = frontier_phi_27_51_ladder_2;
        _1602 = frontier_phi_27_51_ladder_1;
        _1604 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1584 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_573, _574, _575), _1507);
        _1600 = _1584.x * cbModelParam._m0[1u].z;
        _1602 = _1584.y * cbModelParam._m0[1u].z;
        _1604 = _1584.z * cbModelParam._m0[1u].z;
    }
    float _1617 = (((_600 * _550) + _601) * _565) * ((cbModelParam._m0[1u].w * (_1600 - _1498)) + _1498);
    float _1619 = (((_600 * _552) + _601) * _565) * ((cbModelParam._m0[1u].w * (_1602 - _1500)) + _1500);
    float _1621 = (((_600 * _553) + _601) * _565) * ((cbModelParam._m0[1u].w * (_1604 - _1502)) + _1502);
    float _1624 = fma(_1621, cbSceneParam._m0[89u].z, fma(_1619, cbSceneParam._m0[89u].y, _1617 * cbSceneParam._m0[89u].x));
    float _1627 = fma(_1621, cbSceneParam._m0[90u].z, fma(_1619, cbSceneParam._m0[90u].y, _1617 * cbSceneParam._m0[90u].x));
    float _1630 = fma(_1621, cbSceneParam._m0[91u].z, fma(_1619, cbSceneParam._m0[91u].y, _1617 * cbSceneParam._m0[91u].x));
    uvec4 _1640 = floatBitsToUint(cbInstanceData._m0[_524 + 5u]);
    uint _1642 = _1640.x * 14u;
    uint _1643 = _1642 + 13u;
    float _1650 = _565 + (-1.0);
    float _1655 = (cbLight._m0[_1643].x * _1650) + 1.0;
    float _1656 = (cbLight._m0[_1643].y * _1650) + 1.0;
    float _1657 = (cbLight._m0[_1643].z * _1650) + 1.0;
    float _1658 = (cbLight._m0[_1643].w * _1650) + 1.0;
    uint _1659 = _1642 + 5u;
    float _1665 = isnan(1.0) ? _1656 : (isnan(_1656) ? 1.0 : min(_1656, 1.0));
    uint _1669 = _1642 + 4u;
    float _1676 = isnan(1.0) ? _1655 : (isnan(_1655) ? 1.0 : min(_1655, 1.0));
    uint _1680 = _1642 | 1u;
    float _1691 = dot(vec3(cbLight._m0[_1642].xyz), vec3(_389, _390, _391));
    float _1694 = dot(vec3(cbLight._m0[_1680].xyz), vec3(_389, _390, _391));
    float _3883 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
    float _3894 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
    float _1699 = (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * 0.3183098733425140380859375;
    float _1701 = (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * 0.3183098733425140380859375;
    float _1708 = ((cbLight._m0[_1659].x * _1665) * _1701) + ((cbLight._m0[_1669].x * _1676) * _1699);
    float _1709 = ((_1665 * cbLight._m0[_1659].y) * _1701) + ((_1676 * cbLight._m0[_1669].y) * _1699);
    float _1710 = ((_1665 * cbLight._m0[_1659].z) * _1701) + ((_1676 * cbLight._m0[_1669].z) * _1699);
    uvec4 _1714 = floatBitsToUint(cbLight._m0[_1642 + 12u]);
    bool _1716 = _1714.x == 0u;
    float _1727;
    float _1729;
    float _1731;
    if (_1716)
    {
        _1727 = _1708;
        _1729 = _1709;
        _1731 = _1710;
    }
    else
    {
        uint _1735 = _1642 + 6u;
        float _1751 = (dot(vec3(cbLight._m0[_1642 + 2u].xyz), vec3(_389, _390, _391)) * 0.5) + 0.5;
        float _1752 = _1751 * _1751;
        float _3905 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1753 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1754 = isnan(1.0) ? _1657 : (isnan(_1657) ? 1.0 : min(_1657, 1.0));
        _1727 = (((cbLight._m0[_1735].x * 0.3183098733425140380859375) * _1753) * _1754) + _1708;
        _1729 = (((cbLight._m0[_1735].y * 0.3183098733425140380859375) * _1753) * _1754) + _1709;
        _1731 = (((cbLight._m0[_1735].z * 0.3183098733425140380859375) * _1753) * _1754) + _1710;
    }
    bool _1734 = _1714.y == 0u;
    float _1772;
    float _1774;
    float _1776;
    if (_1734)
    {
        _1772 = _1727;
        _1774 = _1729;
        _1776 = _1731;
    }
    else
    {
        uint _1942 = _1642 + 7u;
        float _1958 = (dot(vec3(cbLight._m0[_1642 + 3u].xyz), vec3(_389, _390, _391)) * 0.5) + 0.5;
        float _1959 = _1958 * _1958;
        float _3921 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1960 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1961 = isnan(1.0) ? _1658 : (isnan(_1658) ? 1.0 : min(_1658, 1.0));
        _1772 = (((cbLight._m0[_1942].x * 0.3183098733425140380859375) * _1960) * _1961) + _1727;
        _1774 = (((cbLight._m0[_1942].y * 0.3183098733425140380859375) * _1960) * _1961) + _1729;
        _1776 = (((cbLight._m0[_1942].z * 0.3183098733425140380859375) * _1960) * _1961) + _1731;
    }
    uint _1779 = _1642 + 8u;
    float _1792 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1642].w)) * _392) * 0.949999988079071044921875);
    float _1793 = _1792 * _1792;
    float _1794 = cbLight._m0[_1642].x + _468;
    float _1795 = cbLight._m0[_1642].y + _469;
    float _1796 = cbLight._m0[_1642].z + _470;
    float _1800 = inversesqrt(dot(vec3(_1794, _1795, _1796), vec3(_1794, _1795, _1796)));
    float _1801 = _1800 * _1794;
    float _1802 = _1800 * _1795;
    float _1803 = _1800 * _1796;
    float _1804 = dot(vec3(_389, _390, _391), vec3(cbLight._m0[_1642].xyz));
    float _3937 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1807 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _3948 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _1808 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _1809 = dot(vec3(_389, _390, _391), vec3(_1801, _1802, _1803));
    float _3959 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1812 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _1813 = dot(vec3(cbLight._m0[_1642].xyz), vec3(_1801, _1802, _1803));
    float _3970 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1817 = _1793 * _1793;
    float _1821 = ((_1812 * _1812) * (_1817 + (-1.0))) + 1.0;
    float _1829 = exp2(log2(1.0 - (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) * 5.0);
    float _1830 = 0.959999978542327880859375 - _547;
    float _1832 = 0.959999978542327880859375 - _548;
    float _1833 = 0.959999978542327880859375 - _549;
    float _1840 = 1.0 - _1793;
    float _1851 = (0.5 / (((_1808 * ((_1807 * _1840) + _1793)) + 9.9999999392252902907785028219223e-09) + (((_1808 * _1840) + _1793) * _1807))) * _1807;
    float _3981 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1853 = (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_1817 / ((_1821 * _1821) * 3.141590118408203125));
    uint _1864 = _1642 + 9u;
    float _1875 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1680].w)) * _392) * 0.949999988079071044921875);
    float _1876 = _1875 * _1875;
    float _1877 = cbLight._m0[_1680].x + _468;
    float _1878 = cbLight._m0[_1680].y + _469;
    float _1879 = cbLight._m0[_1680].z + _470;
    float _1883 = inversesqrt(dot(vec3(_1877, _1878, _1879), vec3(_1877, _1878, _1879)));
    float _1884 = _1883 * _1877;
    float _1885 = _1883 * _1878;
    float _1886 = _1883 * _1879;
    float _1887 = dot(vec3(_389, _390, _391), vec3(cbLight._m0[_1680].xyz));
    float _3992 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1890 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _1891 = dot(vec3(_389, _390, _391), vec3(_1884, _1885, _1886));
    float _4003 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1894 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _1895 = dot(vec3(cbLight._m0[_1680].xyz), vec3(_1884, _1885, _1886));
    float _4014 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1899 = _1876 * _1876;
    float _1903 = ((_1894 * _1894) * (_1899 + (-1.0))) + 1.0;
    float _1910 = exp2(log2(1.0 - (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) * 5.0);
    float _1917 = 1.0 - _1876;
    float _1927 = (0.5 / (((_1808 * ((_1890 * _1917) + _1876)) + 9.9999999392252902907785028219223e-09) + (((_1808 * _1917) + _1876) * _1890))) * _1890;
    float _4025 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1929 = (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1899 / ((_1903 * _1903) * 3.141590118408203125));
    float _1939 = (((((_1910 * _1830) + _550) * cbLight._m0[_1864].x) * _1929) * _1665) + (((((_1829 * _1830) + _550) * cbLight._m0[_1779].x) * _1853) * _1676);
    float _1940 = (((((_1910 * _1832) + _552) * cbLight._m0[_1864].y) * _1929) * _1665) + (((((_1829 * _1832) + _552) * cbLight._m0[_1779].y) * _1853) * _1676);
    float _1941 = (((((_1910 * _1833) + _553) * cbLight._m0[_1864].z) * _1929) * _1665) + (((((_1829 * _1833) + _553) * cbLight._m0[_1779].z) * _1853) * _1676);
    float _2003;
    float _2005;
    float _2007;
    if (_1716)
    {
        _2003 = _1939;
        _2005 = _1940;
        _2007 = _1941;
    }
    else
    {
        uint _2009 = _1642 + 2u;
        uint _2013 = _1642 + 10u;
        float _2027 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2009].w)) * _392) * 0.949999988079071044921875);
        float _2028 = _2027 * _2027;
        float _2029 = cbLight._m0[_2009].x + _468;
        float _2030 = cbLight._m0[_2009].y + _469;
        float _2031 = cbLight._m0[_2009].z + _470;
        float _2035 = inversesqrt(dot(vec3(_2029, _2030, _2031), vec3(_2029, _2030, _2031)));
        float _2036 = _2035 * _2029;
        float _2037 = _2035 * _2030;
        float _2038 = _2035 * _2031;
        float _2039 = dot(vec3(_389, _390, _391), vec3(cbLight._m0[_2009].xyz));
        float _4036 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2042 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _2043 = dot(vec3(_389, _390, _391), vec3(_2036, _2037, _2038));
        float _4047 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2046 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _2047 = dot(vec3(cbLight._m0[_2009].xyz), vec3(_2036, _2037, _2038));
        float _4058 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2051 = _2028 * _2028;
        float _2055 = ((_2046 * _2046) * (_2051 + (-1.0))) + 1.0;
        float _2062 = exp2(log2(1.0 - (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) * 5.0);
        float _2069 = 1.0 - _2028;
        float _2079 = (0.5 / (((_1808 * ((_2042 * _2069) + _2028)) + 9.9999999392252902907785028219223e-09) + (((_1808 * _2069) + _2028) * _2042))) * _2042;
        float _4069 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2081 = (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_2051 / ((_2055 * _2055) * 3.141590118408203125));
        float _2082 = isnan(1.0) ? _1657 : (isnan(_1657) ? 1.0 : min(_1657, 1.0));
        _2003 = (((((_2062 * _1830) + _550) * cbLight._m0[_2013].x) * _2081) * _2082) + _1939;
        _2005 = (((((_2062 * _1832) + _552) * cbLight._m0[_2013].y) * _2081) * _2082) + _1940;
        _2007 = (((((_2062 * _1833) + _553) * cbLight._m0[_2013].z) * _2081) * _2082) + _1941;
    }
    float _2117;
    float _2119;
    float _2121;
    if (_1734)
    {
        _2117 = _2003;
        _2119 = _2005;
        _2121 = _2007;
    }
    else
    {
        uint _2128 = _1642 + 3u;
        uint _2132 = _1642 + 11u;
        float _2146 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2128].w)) * _392) * 0.949999988079071044921875);
        float _2147 = _2146 * _2146;
        float _2148 = cbLight._m0[_2128].x + _468;
        float _2149 = cbLight._m0[_2128].y + _469;
        float _2150 = cbLight._m0[_2128].z + _470;
        float _2154 = inversesqrt(dot(vec3(_2148, _2149, _2150), vec3(_2148, _2149, _2150)));
        float _2155 = _2154 * _2148;
        float _2156 = _2154 * _2149;
        float _2157 = _2154 * _2150;
        float _2158 = dot(vec3(_389, _390, _391), vec3(cbLight._m0[_2128].xyz));
        float _4085 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
        float _2161 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _2162 = dot(vec3(_389, _390, _391), vec3(_2155, _2156, _2157));
        float _4096 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2165 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _2166 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_2155, _2156, _2157));
        float _4107 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2170 = _2147 * _2147;
        float _2174 = ((_2165 * _2165) * (_2170 + (-1.0))) + 1.0;
        float _2181 = exp2(log2(1.0 - (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) * 5.0);
        float _2188 = 1.0 - _2147;
        float _2198 = (0.5 / (((_1808 * ((_2161 * _2188) + _2147)) + 9.9999999392252902907785028219223e-09) + (((_1808 * _2188) + _2147) * _2161))) * _2161;
        float _4118 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2200 = (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_2170 / ((_2174 * _2174) * 3.141590118408203125));
        float _2201 = isnan(1.0) ? _1658 : (isnan(_1658) ? 1.0 : min(_1658, 1.0));
        _2117 = (((((_2181 * _1830) + _550) * cbLight._m0[_2132].x) * _2200) * _2201) + _2003;
        _2119 = (((((_2181 * _1832) + _552) * cbLight._m0[_2132].y) * _2200) * _2201) + _2005;
        _2121 = (((((_2181 * _1833) + _553) * cbLight._m0[_2132].z) * _2200) * _2201) + _2007;
    }
    float _2335;
    float _2337;
    float _2339;
    float _2341;
    float _2343;
    float _2345;
    if (_1640.y == 0u)
    {
        float _2276 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2277 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2276;
        float _2278 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2276;
        float _2279 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2276;
        uvec4 _2291 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2292 = _2291.x;
        uint _2303 = uint((float(_2291.y) * floor(float(uint(cbSceneParam._m0[85u].y * _485) / _2292))) + floor(float(uint(cbSceneParam._m0[85u].x * _484) / _2292)));
        float _2313 = (log2(_2279 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2314 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        uint _2317 = uint(isnan(14.0) ? _2314 : (isnan(_2314) ? 14.0 : min(_2314, 14.0)));
        uvec4 _2322 = texelFetch(g_lightClusterGridBuffer, int(((_2317 << 2u) + (_2303 << 6u)) >> 2u));
        uint _2323 = _2322.x;
        uint _2324 = _2291.z;
        float _2426;
        float _2428;
        float _2430;
        float _2432;
        float _2434;
        float _2436;
        if (((((1u << ((_2324 >> 4u) & 15u)) + 4294967295u) & _2323) == 0u) || ((_2324 & 240u) == 0u))
        {
            _2426 = 0.0;
            _2428 = 0.0;
            _2430 = 0.0;
            _2432 = 0.0;
            _2434 = 0.0;
            _2436 = 0.0;
        }
        else
        {
            float _2427;
            float _2429;
            float _2431;
            float _2433;
            float _2435;
            float _2437;
            float _2578 = 0.0;
            float _2579 = 0.0;
            float _2580 = 0.0;
            float _2581 = 0.0;
            float _2582 = 0.0;
            float _2583 = 0.0;
            uint _2584 = 0u;
            uint _2593;
            bool _2594;
            for (;;)
            {
                _2593 = texelFetch(g_lightClassification, int((((_2317 << 5u) + (_2303 << 9u)) + (_2584 << 2u)) >> 2u)).x;
                _2594 = _2593 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2594)
                {
                    frontier_phi_68_pred = _2580;
                    frontier_phi_68_pred_1 = _2583;
                    frontier_phi_68_pred_2 = _2582;
                    frontier_phi_68_pred_3 = _2581;
                    frontier_phi_68_pred_4 = _2579;
                    frontier_phi_68_pred_5 = _2578;
                }
                else
                {
                    float _2723;
                    float _2724;
                    float _2725;
                    float _2726;
                    float _2727;
                    float _2728;
                    uint _2729;
                    _2723 = _2578;
                    _2724 = _2579;
                    _2725 = _2580;
                    _2726 = _2581;
                    _2727 = _2582;
                    _2728 = _2583;
                    _2729 = _2593;
                    float _2650;
                    float _2651;
                    float _2652;
                    float _2653;
                    float _2654;
                    float _2655;
                    for (;;)
                    {
                        uint _2733 = uint(findLSB(_2729)) + (_2584 << 5u);
                        uint _2730 = (_2729 + 4294967295u) & _2729;
                        uint _2735 = _2733 * 48u;
                        vec4 _2749 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2735)).x, texelFetch(g_PointLightRenderingBuffer, int(_2735 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2735 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2735 + 3u)).x));
                        uint _2755 = (_2733 * 48u) + 4u;
                        vec4 _2768 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2755)).x, texelFetch(g_PointLightRenderingBuffer, int(_2755 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2755 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2755 + 3u)).x));
                        uint _2774 = (_2733 * 48u) + 8u;
                        vec3 _2785 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2774)).x, texelFetch(g_PointLightRenderingBuffer, int(_2774 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2774 + 2u)).x));
                        float _2789 = _2749.x - _2277;
                        float _2790 = _2749.y - _2278;
                        float _2791 = _2749.z - _2279;
                        float _2792 = dot(vec3(_2789, _2790, _2791), vec3(_2789, _2790, _2791));
                        float _2795 = inversesqrt(_2792);
                        float _2796 = _2795 * _2789;
                        float _2797 = _2795 * _2790;
                        float _2798 = _2795 * _2791;
                        float _2799 = dot(vec3(_505, _508, _511), vec3(_2796, _2797, _2798));
                        float _2804 = 1.0 - (_2792 * _2749.w);
                        float _4144 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
                        float _2805 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
                        float _2806 = sqrt(_2792) * _2768.w;
                        float _2809 = 1.39999997615814208984375 / (_2806 + 1.39999997615814208984375);
                        float _2810 = _2809 * _2809;
                        float _2813 = ((1.0 - _2810) * _2799) + _2810;
                        float _2816 = _2806 * _2806;
                        float _2820 = ((isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0))) * _2805) / ((_2816 * 0.699999988079071044921875) + 1.0);
                        float _2824 = (-0.0) - _2277;
                        float _2825 = (-0.0) - _2278;
                        float _2826 = (-0.0) - _2279;
                        float _2830 = inversesqrt(dot(vec3(_2824, _2825, _2826), vec3(_2824, _2825, _2826)));
                        float _2831 = _2830 * _2824;
                        float _2832 = _2830 * _2825;
                        float _2833 = _2830 * _2826;
                        float _2841 = exp2(log2(1.0 / ((_2816 * 3.5) + 5.0)) * 0.25);
                        float _2842 = 1.0 - _581;
                        float _2849 = sqrt(1.0 - ((1.0 - (_2842 * _2842)) * (1.0 - (_2841 * _2841))));
                        float _2850 = _2849 * _2849;
                        float _2851 = _2850 * _2850;
                        float _2852 = _2831 + _2796;
                        float _2853 = _2832 + _2797;
                        float _2854 = _2833 + _2798;
                        float _2858 = inversesqrt(dot(vec3(_2852, _2853, _2854), vec3(_2852, _2853, _2854)));
                        float _2862 = dot(vec3(_505, _508, _511), vec3(_2831, _2832, _2833));
                        float _4160 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
                        float _2865 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
                        float _2866 = dot(vec3(_505, _508, _511), vec3(_2858 * _2852, _2858 * _2853, _2858 * _2854));
                        float _4171 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
                        float _2869 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
                        float _2873 = ((_2869 * _2869) * (_2851 + (-1.0))) + 1.0;
                        float _2874 = _2809 * _2850;
                        float _2875 = _2874 * _2874;
                        float _2878 = ((1.0 - _2875) * _2799) + _2875;
                        float _4182 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
                        float _2879 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                        float _2880 = 1.0 - _2850;
                        float _2890 = (0.5 / (((_2879 * ((_2865 * _2880) + _2850)) + 9.9999999392252902907785028219223e-09) + (((_2879 * _2880) + _2850) * _2865))) * _2879;
                        float _4193 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
                        float _2901 = (((_2851 * 3.1415927410125732421875) * (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) / ((_2873 * _2873) * ((_2816 * 2.1991131305694580078125) + 3.141590118408203125))) * _2805;
                        _2653 = (_2820 * _2768.x) + _2726;
                        _2654 = (_2820 * _2768.y) + _2727;
                        _2655 = (_2820 * _2768.z) + _2728;
                        _2650 = (_2901 * _2785.x) + _2723;
                        _2651 = (_2901 * _2785.y) + _2724;
                        _2652 = (_2901 * _2785.z) + _2725;
                        if (_2730 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2723 = _2650;
                            _2724 = _2651;
                            _2725 = _2652;
                            _2726 = _2653;
                            _2727 = _2654;
                            _2728 = _2655;
                            _2729 = _2730;
                        }
                    }
                    frontier_phi_68_pred = _2652;
                    frontier_phi_68_pred_1 = _2655;
                    frontier_phi_68_pred_2 = _2654;
                    frontier_phi_68_pred_3 = _2653;
                    frontier_phi_68_pred_4 = _2651;
                    frontier_phi_68_pred_5 = _2650;
                }
                _2431 = frontier_phi_68_pred;
                _2437 = frontier_phi_68_pred_1;
                _2435 = frontier_phi_68_pred_2;
                _2433 = frontier_phi_68_pred_3;
                _2429 = frontier_phi_68_pred_4;
                _2427 = frontier_phi_68_pred_5;
                uint _2585 = _2584 + 1u;
                if (_2585 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2578 = _2427;
                    _2579 = _2429;
                    _2580 = _2431;
                    _2581 = _2433;
                    _2582 = _2435;
                    _2583 = _2437;
                    _2584 = _2585;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2426 = _2427;
            _2428 = _2429;
            _2430 = _2431;
            _2432 = _2433;
            _2434 = _2435;
            _2436 = _2437;
        }
        uvec4 _2440 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2441 = _2440.z;
        uint _2443 = (_2441 >> 8u) & 15u;
        float _2546;
        float _2548;
        float _2550;
        float _2552;
        float _2554;
        float _2556;
        if (((4294967295u << _2443) & _2323) == 0u)
        {
            _2546 = _2426;
            _2548 = _2428;
            _2550 = _2430;
            _2552 = _2432;
            _2554 = _2434;
            _2556 = _2436;
        }
        else
        {
            float _2571 = inversesqrt(dot(vec3(_2277, _2278, _2279), vec3(_2277, _2278, _2279)));
            float _2572 = _2571 * _2277;
            float _2573 = _2571 * _2278;
            float _2574 = _2571 * _2279;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2443 < ((_2441 >> 12u) & 15u))
            {
                float _2547;
                float _2549;
                float _2551;
                float _2553;
                float _2555;
                float _2557;
                float _2706 = _2426;
                float _2707 = _2428;
                float _2708 = _2430;
                float _2709 = _2432;
                float _2710 = _2434;
                float _2711 = _2436;
                uint _2712 = _2443;
                uint _2721;
                bool _2722;
                for (;;)
                {
                    _2721 = texelFetch(g_lightClassification, int((((_2317 << 5u) + (_2303 << 9u)) + (_2712 << 2u)) >> 2u)).x;
                    _2722 = _2721 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2722)
                    {
                        frontier_phi_79_pred = _2711;
                        frontier_phi_79_pred_1 = _2710;
                        frontier_phi_79_pred_2 = _2709;
                        frontier_phi_79_pred_3 = _2708;
                        frontier_phi_79_pred_4 = _2707;
                        frontier_phi_79_pred_5 = _2706;
                    }
                    else
                    {
                        float _2915;
                        float _2916;
                        float _2917;
                        float _2918;
                        float _2919;
                        float _2920;
                        float _3211;
                        float _3212;
                        float _3213;
                        float _3214;
                        float _3215;
                        float _3216;
                        float _2928 = _2706;
                        float _2929 = _2707;
                        float _2930 = _2708;
                        float _2931 = _2709;
                        float _2932 = _2710;
                        float _2933 = _2711;
                        uint _2934 = _2721;
                        uint _2935;
                        vec4 _2960;
                        float _2961;
                        vec4 _2976;
                        vec3 _2988;
                        vec4 _3004;
                        vec4 _3020;
                        float _3067;
                        bool _3068;
                        for (;;)
                        {
                            uint _2945 = ((_2712 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2934));
                            _2935 = (_2934 + 4294967295u) & _2934;
                            uint _2947 = _2945 * 40u;
                            _2960 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 3u)).x));
                            _2961 = _2960.w;
                            uint _2963 = (_2945 * 40u) + 4u;
                            _2976 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2963)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 3u)).x));
                            uint _2978 = (_2945 * 40u) + 8u;
                            _2988 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2978)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 2u)).x));
                            uint _2991 = (_2945 * 40u) + 16u;
                            _3004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 3u)).x));
                            uint _3007 = (_2945 * 40u) + 20u;
                            _3020 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 3u)).x));
                            uint _3023 = (_2945 * 40u) + 24u;
                            vec4 _3036 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3023)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 3u)).x));
                            uint _3042 = (_2945 * 40u) + 28u;
                            vec4 _3055 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 3u)).x));
                            _3067 = fma(_2279, _3055.z, fma(_2278, _3055.y, _3055.x * _2277)) + _3055.w;
                            _3068 = !((fma(_2279, _3036.z, fma(_2278, _3036.y, _3036.x * _2277)) + _3036.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3068)
                            {
                                float _3095 = _2960.x - _2277;
                                float _3096 = _2960.y - _2278;
                                float _3097 = _2960.z - _2279;
                                float _3098 = dot(vec3(_3095, _3096, _3097), vec3(_3095, _3096, _3097));
                                float _3101 = inversesqrt(_3098);
                                float _3102 = _3101 * _3095;
                                float _3103 = _3101 * _3096;
                                float _3104 = _3101 * _3097;
                                float _3108 = 1.0 - (_3098 / (_2961 * _2961));
                                float _4204 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                                float _3109 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                                float _3113 = sqrt(_3098) * _2976.w;
                                float _3115 = 1.39999997615814208984375 / (_3113 + 1.39999997615814208984375);
                                float _3116 = _3115 * _3115;
                                float _3119 = ((1.0 - _3116) * dot(vec3(_3102, _3103, _3104), vec3(_505, _508, _511))) + _3116;
                                float _3122 = _3113 * _3113;
                                float _3126 = (fma(_2279, _3004.z, fma(_2278, _3004.y, _3004.x * _2277)) + _3004.w) / _3067;
                                float _3127 = (fma(_2279, _3020.z, fma(_2278, _3020.y, _3020.x * _2277)) + _3020.w) / _3067;
                                float _3131 = 1.0 - dot(vec2(_3126, _3127), vec2(_3126, _3127));
                                float _4220 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                                float _3132 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
                                float _3133 = _3132 * (((isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0))) * _3109) / ((_3122 * 0.699999988079071044921875) + 1.0));
                                float _3145 = exp2(log2(1.0 / ((_3122 * 3.5) + 5.0)) * 0.25);
                                float _3146 = 1.0 - _581;
                                float _3153 = sqrt(1.0 - ((1.0 - (_3146 * _3146)) * (1.0 - (_3145 * _3145))));
                                float _3154 = _3153 * _3153;
                                float _3155 = _3154 * _3154;
                                float _3156 = _3102 - _2572;
                                float _3157 = _3103 - _2573;
                                float _3158 = _3104 - _2574;
                                float _3162 = inversesqrt(dot(vec3(_3156, _3157, _3158), vec3(_3156, _3157, _3158)));
                                float _3166 = dot(vec3(_505, _508, _511), vec3((-0.0) - _2572, (-0.0) - _2573, (-0.0) - _2574));
                                float _4231 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                                float _3169 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
                                float _3170 = dot(vec3(_505, _508, _511), vec3(_3162 * _3156, _3162 * _3157, _3162 * _3158));
                                float _4242 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                                float _3173 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
                                float _3177 = ((_3173 * _3173) * (_3155 + (-1.0))) + 1.0;
                                float _3178 = _3115 * _3154;
                                float _3179 = _3178 * _3178;
                                float _3185 = ((1.0 - _3179) * dot(vec3(_505, _508, _511), vec3(_3102, _3103, _3104))) + _3179;
                                float _4253 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                                float _3186 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
                                float _3187 = 1.0 - _3154;
                                float _3197 = (0.5 / (((_3186 * ((_3169 * _3187) + _3154)) + 9.9999999392252902907785028219223e-09) + (((_3186 * _3187) + _3154) * _3169))) * _3186;
                                float _4264 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                                float _3207 = (_3132 * _3109) * (((_3155 * 3.1415927410125732421875) * (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0)))) / ((_3177 * _3177) * ((_3122 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3133 * _2976.z;
                                frontier_phi_85_pred_1 = _3133 * _2976.y;
                                frontier_phi_85_pred_2 = _3133 * _2976.x;
                                frontier_phi_85_pred_3 = _3207 * _2988.z;
                                frontier_phi_85_pred_4 = _3207 * _2988.y;
                                frontier_phi_85_pred_5 = _3207 * _2988.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3216 = frontier_phi_85_pred;
                            _3215 = frontier_phi_85_pred_1;
                            _3214 = frontier_phi_85_pred_2;
                            _3213 = frontier_phi_85_pred_3;
                            _3212 = frontier_phi_85_pred_4;
                            _3211 = frontier_phi_85_pred_5;
                            _2918 = _3214 + _2931;
                            _2919 = _3215 + _2932;
                            _2920 = _3216 + _2933;
                            _2915 = _3211 + _2928;
                            _2916 = _3212 + _2929;
                            _2917 = _3213 + _2930;
                            if (_2935 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2928 = _2915;
                                _2929 = _2916;
                                _2930 = _2917;
                                _2931 = _2918;
                                _2932 = _2919;
                                _2933 = _2920;
                                _2934 = _2935;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2920;
                        frontier_phi_79_pred_1 = _2919;
                        frontier_phi_79_pred_2 = _2918;
                        frontier_phi_79_pred_3 = _2917;
                        frontier_phi_79_pred_4 = _2916;
                        frontier_phi_79_pred_5 = _2915;
                    }
                    _2557 = frontier_phi_79_pred;
                    _2555 = frontier_phi_79_pred_1;
                    _2553 = frontier_phi_79_pred_2;
                    _2551 = frontier_phi_79_pred_3;
                    _2549 = frontier_phi_79_pred_4;
                    _2547 = frontier_phi_79_pred_5;
                    uint _2713 = _2712 + 1u;
                    if (_2713 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2706 = _2547;
                        _2707 = _2549;
                        _2708 = _2551;
                        _2709 = _2553;
                        _2710 = _2555;
                        _2711 = _2557;
                        _2712 = _2713;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2553;
                frontier_phi_60_61_ladder_1 = _2557;
                frontier_phi_60_61_ladder_2 = _2555;
                frontier_phi_60_61_ladder_3 = _2551;
                frontier_phi_60_61_ladder_4 = _2549;
                frontier_phi_60_61_ladder_5 = _2547;
            }
            else
            {
                frontier_phi_60_61_ladder = _2432;
                frontier_phi_60_61_ladder_1 = _2436;
                frontier_phi_60_61_ladder_2 = _2434;
                frontier_phi_60_61_ladder_3 = _2430;
                frontier_phi_60_61_ladder_4 = _2428;
                frontier_phi_60_61_ladder_5 = _2426;
            }
            _2546 = frontier_phi_60_61_ladder_5;
            _2548 = frontier_phi_60_61_ladder_4;
            _2550 = frontier_phi_60_61_ladder_3;
            _2552 = frontier_phi_60_61_ladder;
            _2554 = frontier_phi_60_61_ladder_2;
            _2556 = frontier_phi_60_61_ladder_1;
        }
        float _2561 = isnan(1.0) ? _565 : (isnan(_565) ? 1.0 : min(_565, 1.0));
        _2335 = (_2561 * _2552) + _1772;
        _2337 = (_2561 * _2554) + _1774;
        _2339 = (_2561 * _2556) + _1776;
        _2341 = ((_2546 * _550) * _2561) + _2117;
        _2343 = ((_2548 * _552) * _2561) + _2119;
        _2345 = ((_2550 * _553) * _2561) + _2121;
    }
    else
    {
        _2335 = _1772;
        _2337 = _1774;
        _2339 = _1776;
        _2341 = _2117;
        _2343 = _2119;
        _2345 = _2121;
    }
    float _4280 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _4291 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _4302 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _2362 = ((isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_2335 + ((isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0))) * _565))) + ((_2341 + ((isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))) * _1405)) * cbPerFrame._m0[3u].x);
    float _2363 = ((isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_2337 + ((isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0))) * _565))) + ((_2343 + ((isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))) * _1405)) * cbPerFrame._m0[3u].x);
    float _2364 = ((isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_2339 + ((isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0))) * _565))) + ((_2345 + ((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _1405)) * cbPerFrame._m0[3u].x);
    float _2365 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2366 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2367 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    uint _2368 = _524 + 6u;
    float _2376 = _484 / cbSceneParam._m0[86u].x;
    float _2377 = _485 / cbSceneParam._m0[86u].y;
    vec4 _2391 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2376, _2377, (log2((isnan(cbSceneParam._m0[77u].w) ? _410 : (isnan(_410) ? cbSceneParam._m0[77u].w : min(_410, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2393 = _2391.x;
    float _2394 = _2391.y;
    float _2395 = _2391.z;
    float _2396 = _2391.w;
    float _2488;
    float _2490;
    float _2492;
    float _2494;
    if (_410 > cbSceneParam._m0[78u].w)
    {
        float _2451 = isnan(_410) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _410 : min(cbSceneParam._m0[80u].w, _410));
        float _2452 = _2451 / _410;
        float _2463 = _2452 * _461;
        float _2464 = _462 * _2452;
        float _2465 = (-0.0) - _2464;
        float _2466 = _2452 * _463;
        float _2468 = (cbSceneParam._m0[77u].w * _2465) / _2451;
        float _2469 = _2468 + cbSceneParam._m0[79u].w;
        float _2470 = cbSceneParam._m0[79u].w - _2464;
        float _2476 = sqrt(((_2463 * _2463) + (_2464 * _2464)) + (_2466 * _2466));
        float _2479 = (1.0 - (cbSceneParam._m0[77u].w / _2451)) * _2476;
        float _2484 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2486 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2663;
        if (abs((_2465 - _2468) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2663 = ((((_2469 > 0.0) ? exp2(_2484 * _2469) : (2.0 - exp2(_2486 * _2469))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2479;
        }
        else
        {
            float _2607 = 1.0 / cbSceneParam._m0[80u].x;
            float _2608 = isnan(_2470) ? _2469 : (isnan(_2469) ? _2470 : max(_2469, _2470));
            float _2609 = isnan(_2470) ? _2469 : (isnan(_2469) ? _2470 : min(_2469, _2470));
            float _2618 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : min(_2608, 0.0));
            float _2619 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : min(_2609, 0.0));
            _2663 = ((abs(_2476 / _2465) * cbSceneParam._m0[80u].y) * ((((_2618 - _2619) * 2.0) - ((exp2(_2484 * (isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0)))) - exp2(_2484 * (isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0))))) * _2607)) - ((exp2(_2486 * _2618) - exp2(_2486 * _2619)) * _2607))) + (_2479 * cbSceneParam._m0[80u].z);
        }
        vec4 _2665 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2376, _2377, 1.0), 0.0);
        float _2674 = exp2((_2663 * (-1.44269502162933349609375)) * (1.0 - _2665.w));
        float _2675 = log2(_2674);
        float _2691 = log2(_2396);
        _2488 = (exp2(_2691 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2675 * cbSceneParam._m0[78u].x)) * _2665.x) / cbSceneParam._m0[78u].x)) + _2393;
        _2490 = (exp2(_2691 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2675 * cbSceneParam._m0[78u].y)) * _2665.y) / cbSceneParam._m0[78u].y)) + _2394;
        _2492 = (exp2(_2691 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2675 * cbSceneParam._m0[78u].z)) * _2665.z) / cbSceneParam._m0[78u].z)) + _2395;
        _2494 = _2674 * _2396;
    }
    else
    {
        _2488 = _2393;
        _2490 = _2394;
        _2492 = _2395;
        _2494 = _2396;
    }
    bool _2701;
    vec4 _2504;
    vec4 _2526;
    float _2528;
    float _2532;
    float _2533;
    float _2534;
    float _2535;
    bool _2545;
    for (;;)
    {
        _2504 = cbMatDynParam._m0[0u];
        float _2506 = roundEven(_2504.y);
        bool _2507 = _2506 == 3.0;
        float _2508 = log2(_2494);
        float _2515 = exp2(_2508 * cbSceneParam._m0[78u].x) * _2365;
        float _2516 = exp2(_2508 * cbSceneParam._m0[78u].y) * _2366;
        float _2517 = exp2(_2508 * cbSceneParam._m0[78u].z) * _2367;
        float _2524 = _473 + (-0.5);
        _2526 = cbMtdParam._m0[1u];
        _2528 = _2526.y * _2524;
        float _2531 = (_2506 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2532 = _2531 * (_2507 ? _2515 : (_2515 + (cbSceneParam._m0[72u].w * _2488)));
        _2533 = _2531 * (_2507 ? _2516 : (_2516 + (cbSceneParam._m0[72u].w * _2490)));
        _2534 = _2531 * (_2507 ? _2517 : (_2517 + (cbSceneParam._m0[72u].w * _2492)));
        _2535 = _2524 * 0.999000012874603271484375;
        _2545 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2545)
        {
            if ((cbInstanceData._m0[_524 + 7u].x + _2535) < 0.5)
            {
                _2701 = true;
                break;
            }
        }
        uint _2642 = _526 + uint(_2504.w);
        if ((cbInstanceData._m0[_2642].w < 1.0) && ((cbInstanceData._m0[_2642].w + _2535) < 0.5))
        {
            _2701 = true;
            break;
        }
        if ((_2528 + _329) < _2526.x)
        {
            _2701 = true;
            break;
        }
        _2701 = false;
        break;
    }
    float _2906;
    if (_2701)
    {
        discard_state = true;
        _2906 = 0.0;
    }
    else
    {
        _2906 = cbInstanceData._m0[_2368].w;
    }
    SV_Target.x = _2532;
    SV_Target.y = _2533;
    SV_Target.z = _2534;
    SV_Target.w = _2906;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2368].w;
    discard_exit();
}


