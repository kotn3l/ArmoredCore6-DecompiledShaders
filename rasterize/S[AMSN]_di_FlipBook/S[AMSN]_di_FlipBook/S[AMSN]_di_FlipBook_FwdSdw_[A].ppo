#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_di_FlipBook_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_di_FlipBook_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_di_FlipBook_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _971;
float _3647;
float _3648;
float _3649;
float _3650;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _222;
    float _223;
    float _224;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
    }
    else
    {
        _222 = _208;
        _223 = _209;
        _224 = _210;
    }
    uint _244 = uint(int(floor(cbMtdParam._m0[10u].z)));
    uint _245 = uint(int(cbMtdParam._m0[11u].x * cbMtdParam._m0[10u].w));
    float _247 = float(int(_244 - _245 * (_244 / _245)));
    float _257 = (fract(TEXCOORD_1.x) + (_247 - cbMtdParam._m0[10u].w * trunc(_247 / cbMtdParam._m0[10u].w))) * (1.0 / cbMtdParam._m0[10u].w);
    float _259 = (fract(TEXCOORD_1.y) + floor(_247 / cbMtdParam._m0[10u].w)) * (1.0 / cbMtdParam._m0[11u].x);
    vec4 _272 = texture(sampler2D(S_AMSN_di_FlipBook_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _257) + cbTextureTilingScale._m0[0u].z, (_259 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _279 = _272.x * cbMtdParam._m0[9u].x;
    float _280 = _272.y * cbMtdParam._m0[9u].y;
    float _281 = _272.z * cbMtdParam._m0[9u].z;
    vec4 _291 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _293 = _291.x;
    float _316 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _293)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _293))) - POSITION_1.w) / cbMtdParam._m0[10u].y;
    float _3659 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _321 = gl_FragCoord.x * 0.125;
    float _323 = gl_FragCoord.y * 0.125;
    float _333 = float((((cbMtdParam._m0[9u].w * TEXCOORD_1.z) * _272.w) * (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0)))) >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_321, _323)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625));
    vec4 _348 = texture(sampler2D(S_AMSN_di_FlipBook_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _257) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _259) + cbTextureTilingScale._m0[2u].w));
    float _351 = _348.x + cbMtdParam._m0[10u].x;
    vec4 _363 = texture(sampler2D(S_AMSN_di_FlipBook_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _257) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _259) + cbTextureTilingScale._m0[1u].w));
    float _367 = _363.z;
    float _371 = (_363.x * 2.0) + (-1.0);
    float _373 = (_363.y * 2.0) + (-1.0);
    float _374 = dot(vec2(_371, _373), vec2(_371, _373));
    float _3670 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _379 = sqrt(1.0 - (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))));
    float _382 = fma(_379, _222, fma(_373, _214 * TANGENT.x, (_200 * _192) * _371));
    float _385 = fma(_379, _223, fma(_373, _214 * TANGENT.y, (_200 * _193) * _371));
    float _388 = fma(_379, _224, fma(_373, _214 * TANGENT.z, (_200 * _194) * _371));
    float _392 = inversesqrt(dot(vec3(_382, _385, _388), vec3(_382, _385, _388)));
    float _393 = _392 * _382;
    float _394 = _392 * _385;
    float _395 = _392 * _388;
    float _3681 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _396 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    float _3692 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _3703 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _3714 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _3725 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _400 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _414 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _455 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _465 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _455);
    float _466 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _455);
    float _467 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _455);
    float _471 = inversesqrt(dot(vec3(_465, _466, _467), vec3(_465, _466, _467)));
    float _472 = _465 * _471;
    float _473 = _466 * _471;
    float _474 = _467 * _471;
    vec4 _475 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_321, _323));
    float _477 = _475.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _652 = sqrt(((_465 * _465) + (_466 * _466)) + (_467 * _467));
        float _658 = (cbMatDynParam._m0[5u].x * _652) + cbMatDynParam._m0[5u].y;
        float _3736 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
        float _659 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _663 = (cbMatDynParam._m0[5u].z * _652) + cbMatDynParam._m0[5u].w;
        float _3747 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) - _659)) + _659) < ((_477 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _488 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _489 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _509 = fma(_395, cbSceneParam._m0[5u].z, fma(_394, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _393));
    float _512 = fma(_395, cbSceneParam._m0[6u].z, fma(_394, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _393));
    float _515 = fma(_395, cbSceneParam._m0[7u].z, fma(_394, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _393));
    uint _528 = uint(roundEven(NORMAL.w)) * 13u;
    uint _530 = _528 + 9u;
    uint _531 = _530 + uint(cbMatDynParam._m0[0u].w);
    float _537 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0)))) * cbInstanceData._m0[_531].x;
    float _538 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0)))) * cbInstanceData._m0[_531].y;
    float _539 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0)))) * cbInstanceData._m0[_531].z;
    float _3758 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _540 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _3769 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _541 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _3780 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _542 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _543 = 1.0 - _400;
    float _544 = _540 * _543;
    float _545 = _541 * _543;
    float _546 = _542 * _543;
    float _551 = (_540 + (-0.039999999105930328369140625)) * _400;
    float _552 = (_541 + (-0.039999999105930328369140625)) * _400;
    float _553 = (_542 + (-0.039999999105930328369140625)) * _400;
    float _554 = _551 + 0.039999999105930328369140625;
    float _556 = _552 + 0.039999999105930328369140625;
    float _557 = _553 + 0.039999999105930328369140625;
    vec4 _566 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _488, cbSceneParam._m0[86u].y * _489));
    float _569 = _566.x * TEXCOORD_1.w;
    float _570 = dot(vec3(_393, _394, _395), vec3(_472, _473, _474));
    float _573 = _570 * 2.0;
    float _577 = (_573 * _393) - _472;
    float _578 = (_573 * _394) - _473;
    float _579 = (_573 * _395) - _474;
    float _583 = abs(dot(vec3(_472, _473, _474), vec3(_393, _394, _395)));
    float _3791 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _585 = sqrt(_396);
    float _598 = exp2((_585 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_585 * 3.0));
    float _604 = (1.0 - _598) * ((_585 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _605 = _598 * _585;
    float _633 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _637 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _641 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _970;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _695 = fma(_641, cbModelParam._m0[26u].z, fma(_637, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _633));
        float _699 = fma(_641, cbModelParam._m0[27u].z, fma(_637, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _633));
        float _703 = fma(_641, cbModelParam._m0[28u].z, fma(_637, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _633));
        float _728 = _633 + _393;
        float _729 = _637 + _394;
        float _730 = _641 + _395;
        float _740 = fma(_730, cbModelParam._m0[26u].z, fma(_729, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _728)) - _695;
        float _741 = fma(_730, cbModelParam._m0[27u].z, fma(_729, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _728)) - _699;
        float _742 = fma(_730, cbModelParam._m0[28u].z, fma(_729, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _728)) - _703;
        float _746 = inversesqrt(dot(vec3(_740, _741, _742), vec3(_740, _741, _742)));
        float _759 = ((_746 * _740) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_695 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _760 = ((_746 * _741) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_699 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _761 = ((_746 * _742) / cbModelParam._m0[34u].z) + ((((((_703 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _764 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_759, _760, _761), 0.0);
        vec4 _771 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_759, _760, _761), 0.0);
        vec4 _778 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_759, _760, _761), 0.0);
        vec4 _785 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_759, _760, _761), 0.0);
        float _798 = exp2((_764.w + (-0.5)) * 20.0) * 2.0;
        float _799 = _798 * (_764.x + (-0.5));
        float _800 = _798 * (_764.y + (-0.5));
        float _801 = _798 * (_764.z + (-0.5));
        float _808 = exp2((_771.w + (-0.5)) * 20.0) * 2.0;
        float _809 = _808 * (_771.x + (-0.5));
        float _810 = _808 * (_771.y + (-0.5));
        float _811 = _808 * (_771.z + (-0.5));
        float _818 = exp2((_778.w + (-0.5)) * 20.0) * 2.0;
        float _819 = _818 * (_778.x + (-0.5));
        float _820 = _818 * (_778.y + (-0.5));
        float _821 = _818 * (_778.z + (-0.5));
        float _828 = exp2((_785.w + (-0.5)) * 20.0) * 2.0;
        float _829 = _828 * (_785.x + (-0.5));
        float _830 = _828 * (_785.y + (-0.5));
        float _831 = _828 * (_785.z + (-0.5));
        float _832 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _833 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _834 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _835 = _799 * 0.5;
        float _836 = _809 * 0.5;
        float _837 = _819 * 0.5;
        float _838 = dot(vec3(_835, _836, _837), vec3(_835, _836, _837));
        float _843 = (_838 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_838);
        float _852 = (dot(vec3(_393, _394, _395), vec3(_843 * _835, _843 * _836, _843 * _837)) + 1.0) * 0.5;
        float _3817 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _862 = sqrt(((_836 * _836) + (_835 * _835)) + (_837 * _837)) / (_832 + 9.9999997473787516355514526367188e-06);
        float _3828 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _863 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _864 = _863 * 2.0;
        float _868 = (1.0 - _863) / (_863 + 1.0);
        float _3839 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _869 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _878 = ((((1.0 - _869) * (_864 + 2.0)) * exp2(log2(isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_864 + 1.0))) + _869) * _832;
        float _879 = _800 * 0.5;
        float _880 = _810 * 0.5;
        float _881 = _820 * 0.5;
        float _882 = dot(vec3(_879, _880, _881), vec3(_879, _880, _881));
        float _887 = (_882 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_882);
        float _895 = (dot(vec3(_393, _394, _395), vec3(_887 * _879, _887 * _880, _887 * _881)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _904 = sqrt(((_880 * _880) + (_879 * _879)) + (_881 * _881)) / (_833 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _905 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _906 = _905 * 2.0;
        float _910 = (1.0 - _905) / (_905 + 1.0);
        float _3872 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _911 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _920 = ((((1.0 - _911) * (_906 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_906 + 1.0))) + _911) * _833;
        float _921 = _801 * 0.5;
        float _922 = _811 * 0.5;
        float _923 = _821 * 0.5;
        float _924 = dot(vec3(_921, _922, _923), vec3(_921, _922, _923));
        float _929 = (_924 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_924);
        float _937 = (dot(vec3(_393, _394, _395), vec3(_929 * _921, _929 * _922, _929 * _923)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _946 = sqrt(((_922 * _922) + (_921 * _921)) + (_923 * _923)) / (_834 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _948 = _947 * 2.0;
        float _952 = (1.0 - _947) / (_947 + 1.0);
        float _3905 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _962 = ((((1.0 - _953) * (_948 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_948 + 1.0))) + _953) * _834;
        _970 = _801;
        _972 = _800;
        _973 = _799;
        _974 = _811;
        _975 = _810;
        _976 = _809;
        _977 = _821;
        _978 = _820;
        _979 = _819;
        _980 = _834;
        _981 = _833;
        _982 = _832;
        _983 = cbModelParam._m0[36u].z * (isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0)));
        _984 = cbModelParam._m0[36u].z * (isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0)));
        _985 = cbModelParam._m0[36u].z * (isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0)));
    }
    else
    {
        _970 = _971;
        _972 = _971;
        _973 = _971;
        _974 = _971;
        _975 = _971;
        _976 = _971;
        _977 = _971;
        _978 = _971;
        _979 = _971;
        _980 = _971;
        _981 = _971;
        _982 = _971;
        _983 = 0.0;
        _984 = 0.0;
        _985 = 0.0;
    }
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1014 = fma(_641, cbModelParam._m0[30u].z, fma(_637, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _633));
        float _1018 = fma(_641, cbModelParam._m0[31u].z, fma(_637, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _633));
        float _1022 = fma(_641, cbModelParam._m0[32u].z, fma(_637, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _633));
        float _1045 = _633 + _393;
        float _1046 = _637 + _394;
        float _1047 = _641 + _395;
        float _1057 = fma(_1047, cbModelParam._m0[30u].z, fma(_1046, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1045)) - _1014;
        float _1058 = fma(_1047, cbModelParam._m0[31u].z, fma(_1046, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1045)) - _1018;
        float _1059 = fma(_1047, cbModelParam._m0[32u].z, fma(_1046, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1045)) - _1022;
        float _1063 = inversesqrt(dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059)));
        float _1076 = ((_1063 * _1057) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1014 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1077 = ((_1063 * _1058) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1018 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1078 = ((_1063 * _1059) / cbModelParam._m0[35u].z) + ((((((_1022 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        float _1113 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1080.x + (-0.5));
        float _1115 = _1113 * (_1080.y + (-0.5));
        float _1116 = _1113 * (_1080.z + (-0.5));
        float _1123 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1087.x + (-0.5));
        float _1125 = _1123 * (_1087.y + (-0.5));
        float _1126 = _1123 * (_1087.z + (-0.5));
        float _1133 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1094.x + (-0.5));
        float _1135 = _1133 * (_1094.y + (-0.5));
        float _1136 = _1133 * (_1094.z + (-0.5));
        float _1143 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1101.x + (-0.5));
        float _1145 = _1143 * (_1101.y + (-0.5));
        float _1146 = _1143 * (_1101.z + (-0.5));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = _1114 * 0.5;
        float _1151 = _1124 * 0.5;
        float _1152 = _1134 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1166 = (dot(vec3(_393, _394, _395), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _3946 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1175 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _3957 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _3968 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (_1177 + 1.0))) + _1182) * _1147;
        float _1192 = _1115 * 0.5;
        float _1193 = _1125 * 0.5;
        float _1194 = _1135 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1208 = (dot(vec3(_393, _394, _395), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _3979 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1217 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _3990 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _4001 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_1219 + 1.0))) + _1224) * _1148;
        float _1234 = _1116 * 0.5;
        float _1235 = _1126 * 0.5;
        float _1236 = _1136 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1250 = (dot(vec3(_393, _394, _395), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1259 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _4034 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1261 + 1.0))) + _1266) * _1149;
        _1283 = _1116;
        _1284 = _1115;
        _1285 = _1114;
        _1286 = _1126;
        _1287 = _1125;
        _1288 = _1124;
        _1289 = _1136;
        _1290 = _1135;
        _1291 = _1134;
        _1292 = _1149;
        _1293 = _1148;
        _1294 = _1147;
        _1295 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
        _1296 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
        _1297 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
    }
    else
    {
        _1283 = _971;
        _1284 = _971;
        _1285 = _971;
        _1286 = _971;
        _1287 = _971;
        _1288 = _971;
        _1289 = _971;
        _1290 = _971;
        _1291 = _971;
        _1292 = _971;
        _1293 = _971;
        _1294 = _971;
        _1295 = 0.0;
        _1296 = 0.0;
        _1297 = 0.0;
    }
    float _1307 = (cbModelParam._m0[1u].x * (_1295 - _983)) + _983;
    float _1308 = (cbModelParam._m0[1u].x * (_1296 - _984)) + _984;
    float _1309 = (cbModelParam._m0[1u].x * (_1297 - _985)) + _985;
    float _1330 = fma(_1309, cbSceneParam._m0[89u].z, fma(_1308, cbSceneParam._m0[89u].y, _1307 * cbSceneParam._m0[89u].x));
    float _1333 = fma(_1309, cbSceneParam._m0[90u].z, fma(_1308, cbSceneParam._m0[90u].y, _1307 * cbSceneParam._m0[90u].x));
    float _1336 = fma(_1309, cbSceneParam._m0[91u].z, fma(_1308, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1307));
    float _1351 = _577 * 0.5;
    float _1352 = _578 * 0.5;
    float _1353 = _579 * 0.5;
    float _1354 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_1285, _1288, _1291, _1294));
    float _1357 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_1284, _1287, _1290, _1293));
    float _1360 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_1283, _1286, _1289, _1292));
    float _1394;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1367 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_970, _974, _977, _980));
        float _1371 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_972, _975, _978, _981));
        float _1375 = dot(vec4(_1351, _1352, _1353, 1.0), vec4(_973, _976, _979, _982));
        float _1382 = dot(vec4(cbModelParam._m0[39u]), vec4(_1351, _1352, _1353, 1.0));
        _1394 = dot(vec3(isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)), isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)), isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1382) ? 0.0 : (isnan(0.0) ? _1382 : max(0.0, _1382))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1394 = 1.0;
    }
    float _1405;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1396 = dot(vec4(cbModelParam._m0[40u]), vec4(_1351, _1352, _1353, 1.0));
        _1405 = dot(vec3(isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)), isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)), isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1396) ? 0.0 : (isnan(0.0) ? _1396 : max(0.0, _1396))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1405 = 1.0;
    }
    float _1409 = (_1405 * cbModelParam._m0[1u].x) + (_1394 * (1.0 - cbModelParam._m0[1u].x));
    float _1419 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _396);
    float _1420 = isnan(_1419) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1419 : min(cbModelParam._m0[25u].z, _1419));
    float _1502;
    float _1504;
    float _1506;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1469 = fma(_641, cbModelParam._m0[13u].z, fma(_637, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _633)) + cbModelParam._m0[13u].w;
        float _1473 = fma(_641, cbModelParam._m0[14u].z, fma(_637, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _633)) + cbModelParam._m0[14u].w;
        float _1477 = fma(_641, cbModelParam._m0[15u].z, fma(_637, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _633)) + cbModelParam._m0[15u].w;
        float _1480 = fma(_579, cbModelParam._m0[13u].z, fma(_578, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _577));
        float _1483 = fma(_579, cbModelParam._m0[14u].z, fma(_578, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _577));
        float _1486 = fma(_579, cbModelParam._m0[15u].z, fma(_578, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _577));
        float _1514;
        if (_1480 > 0.0)
        {
            _1514 = abs((1.0 - _1469) / _1480);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1480 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1469 + 1.0) / _1480);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1514 = frontier_phi_19_17_ladder;
        }
        float _1689;
        if (_1483 > 0.0)
        {
            _1689 = abs((1.0 - _1473) / _1483);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1483 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1473 + 1.0) / _1483);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1689 = frontier_phi_28_24_ladder;
        }
        float _1985;
        if (_1486 > 0.0)
        {
            _1985 = abs((1.0 - _1477) / _1486);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1477 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1985 = frontier_phi_40_35_ladder;
        }
        float _1987 = isnan(_1689) ? _1514 : (isnan(_1514) ? _1689 : min(_1514, _1689));
        float _1988 = isnan(_1985) ? _1987 : (isnan(_1987) ? _1985 : min(_1987, _1985));
        float _1992 = (_1988 * _1480) + _1469;
        float _1993 = (_1988 * _1483) + _1473;
        float _1994 = (_1988 * _1486) + _1477;
        float _1995 = _1988 * 9.9999997473787516355514526367188e-05;
        float _1997 = (-1.0) - _1995;
        float _1999 = _1995 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1994 > _1999) || ((_1994 < _1997) || ((_1993 > _1999) || ((_1993 < _1997) || ((_1992 < _1997) || (_1992 > _1999))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2139 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1994, cbModelParam._m0[9u].z, fma(_1993, cbModelParam._m0[9u].y, _1992 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1994, cbModelParam._m0[10u].z, fma(_1993, cbModelParam._m0[10u].y, _1992 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1994, cbModelParam._m0[11u].z, fma(_1993, cbModelParam._m0[11u].y, _1992 * cbModelParam._m0[11u].x))), _1420);
            frontier_phi_18_40_ladder = _2139.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2139.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2139.x * cbModelParam._m0[1u].y;
        }
        _1502 = frontier_phi_18_40_ladder_2;
        _1504 = frontier_phi_18_40_ladder_1;
        _1506 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1490 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_577, _578, _579), _1420);
        _1502 = _1490.x * cbModelParam._m0[1u].y;
        _1504 = _1490.y * cbModelParam._m0[1u].y;
        _1506 = _1490.z * cbModelParam._m0[1u].y;
    }
    float _1510 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _396);
    float _1511 = isnan(_1510) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1510 : min(cbModelParam._m0[25u].w, _1510));
    float _1604;
    float _1606;
    float _1608;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1568 = fma(_641, cbModelParam._m0[21u].z, fma(_637, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _633)) + cbModelParam._m0[21u].w;
        float _1572 = fma(_641, cbModelParam._m0[22u].z, fma(_637, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _633)) + cbModelParam._m0[22u].w;
        float _1576 = fma(_641, cbModelParam._m0[23u].z, fma(_637, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _633)) + cbModelParam._m0[23u].w;
        float _1579 = fma(_579, cbModelParam._m0[21u].z, fma(_578, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _577));
        float _1582 = fma(_579, cbModelParam._m0[22u].z, fma(_578, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _577));
        float _1585 = fma(_579, cbModelParam._m0[23u].z, fma(_578, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _577));
        float _1694;
        if (_1579 > 0.0)
        {
            _1694 = abs((1.0 - _1568) / _1579);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1579 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1568 + 1.0) / _1579);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1694 = frontier_phi_30_26_ladder;
        }
        float _2012;
        if (_1582 > 0.0)
        {
            _2012 = abs((1.0 - _1572) / _1582);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1582 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1572 + 1.0) / _1582);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2012 = frontier_phi_42_37_ladder;
        }
        float _2350;
        if (_1585 > 0.0)
        {
            _2350 = abs((1.0 - _1576) / _1585);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1576 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2350 = frontier_phi_52_49_ladder;
        }
        float _2352 = isnan(_2012) ? _1694 : (isnan(_1694) ? _2012 : min(_1694, _2012));
        float _2353 = isnan(_2350) ? _2352 : (isnan(_2352) ? _2350 : min(_2352, _2350));
        float _2357 = (_2353 * _1579) + _1568;
        float _2358 = (_2353 * _1582) + _1572;
        float _2359 = (_2353 * _1585) + _1576;
        float _2360 = _2353 * 9.9999997473787516355514526367188e-05;
        float _2361 = (-1.0) - _2360;
        float _2363 = _2360 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2359 > _2363) || ((_2359 < _2361) || ((_2358 > _2363) || ((_2358 < _2361) || ((_2357 < _2361) || (_2357 > _2363))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2481 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2359, cbModelParam._m0[17u].z, fma(_2358, cbModelParam._m0[17u].y, _2357 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2359, cbModelParam._m0[18u].z, fma(_2358, cbModelParam._m0[18u].y, _2357 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2359, cbModelParam._m0[19u].z, fma(_2358, cbModelParam._m0[19u].y, _2357 * cbModelParam._m0[19u].x))), _1511);
            frontier_phi_27_52_ladder = _2481.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2481.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2481.x * cbModelParam._m0[1u].z;
        }
        _1604 = frontier_phi_27_52_ladder_2;
        _1606 = frontier_phi_27_52_ladder_1;
        _1608 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1588 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_577, _578, _579), _1511);
        _1604 = _1588.x * cbModelParam._m0[1u].z;
        _1606 = _1588.y * cbModelParam._m0[1u].z;
        _1608 = _1588.z * cbModelParam._m0[1u].z;
    }
    float _1621 = (((_604 * _554) + _605) * _569) * ((cbModelParam._m0[1u].w * (_1604 - _1502)) + _1502);
    float _1623 = (((_604 * _556) + _605) * _569) * ((cbModelParam._m0[1u].w * (_1606 - _1504)) + _1504);
    float _1625 = (((_604 * _557) + _605) * _569) * ((cbModelParam._m0[1u].w * (_1608 - _1506)) + _1506);
    float _1628 = fma(_1625, cbSceneParam._m0[89u].z, fma(_1623, cbSceneParam._m0[89u].y, _1621 * cbSceneParam._m0[89u].x));
    float _1631 = fma(_1625, cbSceneParam._m0[90u].z, fma(_1623, cbSceneParam._m0[90u].y, _1621 * cbSceneParam._m0[90u].x));
    float _1634 = fma(_1625, cbSceneParam._m0[91u].z, fma(_1623, cbSceneParam._m0[91u].y, _1621 * cbSceneParam._m0[91u].x));
    float _1668 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1672 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1676 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1680 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1681 = _1668 / _1680;
    float _1682 = _1672 / _1680;
    float _1683 = _1676 / _1680;
    float _1830;
    float _1831;
    float _1832;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1710 = ((uint(_1683 > cbSceneParam._m0[59u].y) + uint(_1683 > cbSceneParam._m0[59u].x)) + uint(_1683 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1711 = _1710 + 43u;
        uint _1719 = _1710 + 44u;
        uint _1727 = _1710 + 45u;
        uint _1735 = _1710 + 46u;
        float _1746 = fma(_1680, cbSceneParam._m0[_1711].w, fma(_1676, cbSceneParam._m0[_1711].z, fma(_1672, cbSceneParam._m0[_1711].y, _1668 * cbSceneParam._m0[_1711].x)));
        float _1750 = fma(_1680, cbSceneParam._m0[_1719].w, fma(_1676, cbSceneParam._m0[_1719].z, fma(_1672, cbSceneParam._m0[_1719].y, _1668 * cbSceneParam._m0[_1719].x)));
        float _1758 = fma(_1680, cbSceneParam._m0[_1735].w, fma(_1676, cbSceneParam._m0[_1735].z, fma(_1672, cbSceneParam._m0[_1735].y, _1668 * cbSceneParam._m0[_1735].x)));
        float _1763 = cbSceneParam._m0[33u].z * _1758;
        float _1765 = cbSceneParam._m0[33u].w * _1758;
        float _1768 = fma(_1680, cbSceneParam._m0[_1727].w, fma(_1676, cbSceneParam._m0[_1727].z, fma(_1672, cbSceneParam._m0[_1727].y, _1668 * cbSceneParam._m0[_1727].x))) / _1758;
        float _1816 = (cbSceneParam._m0[33u].x - sqrt(((_1682 * _1682) + (_1681 * _1681)) + (_1683 * _1683))) * cbSceneParam._m0[33u].y;
        float _4160 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1823 = (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1763 + _1746) / _1758, (_1765 + _1750) / _1758), _1768), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1765 + _1746) / _1758, (_1750 - _1763) / _1758), _1768), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1746 - _1763) / _1758, (_1750 - _1765) / _1758), _1768), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1746 - _1765) / _1758, (_1763 + _1750) / _1758), _1768), 0.0)).x), vec4(0.25)));
        _1830 = 1.0 - (_1823 * cbSceneParam._m0[34u].x);
        _1831 = 1.0 - (_1823 * cbSceneParam._m0[34u].y);
        _1832 = 1.0 - (_1823 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1830 = 1.0;
        _1831 = 1.0;
        _1832 = 1.0;
    }
    float _1896;
    float _1898;
    float _1900;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1884 = fma(_1680, cbSceneParam._m0[63u].w, fma(_1676, cbSceneParam._m0[63u].z, fma(_1672, cbSceneParam._m0[63u].y, _1668 * cbSceneParam._m0[63u].x)));
        float _1885 = fma(_1680, cbSceneParam._m0[60u].w, fma(_1676, cbSceneParam._m0[60u].z, fma(_1672, cbSceneParam._m0[60u].y, _1668 * cbSceneParam._m0[60u].x))) / _1884;
        float _1886 = fma(_1680, cbSceneParam._m0[61u].w, fma(_1676, cbSceneParam._m0[61u].z, fma(_1672, cbSceneParam._m0[61u].y, _1668 * cbSceneParam._m0[61u].x))) / _1884;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1885 >= cbSceneParam._m0[64u].x) && (_1886 >= cbSceneParam._m0[64u].y)) && (_1885 <= cbSceneParam._m0[64u].z)) && (_1886 <= cbSceneParam._m0[64u].w))
        {
            float _2025 = fma(_1680, cbSceneParam._m0[62u].w, fma(_1676, cbSceneParam._m0[62u].z, fma(_1672, cbSceneParam._m0[62u].y, _1668 * cbSceneParam._m0[62u].x))) / _1884;
            float _2029 = isnan(cbSceneParam._m0[41u].w) ? _2025 : (isnan(_2025) ? cbSceneParam._m0[41u].w : max(_2025, cbSceneParam._m0[41u].w));
            float _2072 = (cbSceneParam._m0[33u].x - sqrt(((_1682 * _1682) + (_1681 * _1681)) + (_1683 * _1683))) * cbSceneParam._m0[33u].y;
            float _4176 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
            float _2079 = (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1885, cbSceneParam._m0[33u].w + _1886), _2029), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1885, _1886 - cbSceneParam._m0[33u].z), _2029), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1885 - cbSceneParam._m0[33u].z, _1886 - cbSceneParam._m0[33u].w), _2029), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1885 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1886), _2029), 0.0)).x), vec4(0.25)));
            float _2083 = 1.0 - (_2079 * cbSceneParam._m0[34u].x);
            float _2084 = 1.0 - (_2079 * cbSceneParam._m0[34u].y);
            float _2085 = 1.0 - (_2079 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2084) ? _1831 : (isnan(_1831) ? _2084 : min(_1831, _2084));
            frontier_phi_39_38_ladder_1 = isnan(_2083) ? _1830 : (isnan(_1830) ? _2083 : min(_1830, _2083));
            frontier_phi_39_38_ladder_2 = isnan(_2085) ? _1832 : (isnan(_1832) ? _2085 : min(_1832, _2085));
        }
        else
        {
            frontier_phi_39_38_ladder = _1831;
            frontier_phi_39_38_ladder_1 = _1830;
            frontier_phi_39_38_ladder_2 = _1832;
        }
        _1896 = frontier_phi_39_38_ladder_1;
        _1898 = frontier_phi_39_38_ladder;
        _1900 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1896 = _1830;
        _1898 = _1831;
        _1900 = _1832;
    }
    uvec4 _1905 = floatBitsToUint(cbInstanceData._m0[_528 + 5u]);
    uint _1907 = _1905.x * 14u;
    uint _1908 = _1907 + 13u;
    float _1915 = _569 + (-1.0);
    float _1920 = (cbLight._m0[_1908].x * _1915) + 1.0;
    float _1921 = (cbLight._m0[_1908].y * _1915) + 1.0;
    float _1922 = (cbLight._m0[_1908].z * _1915) + 1.0;
    float _1923 = (cbLight._m0[_1908].w * _1915) + 1.0;
    uint _1924 = _1907 + 5u;
    float _1930 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
    uint _1934 = _1907 + 4u;
    float _1944 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
    uint _1948 = _1907 | 1u;
    float _1959 = dot(vec3(cbLight._m0[_1907].xyz), vec3(_393, _394, _395));
    float _1962 = dot(vec3(cbLight._m0[_1948].xyz), vec3(_393, _394, _395));
    float _4212 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _4223 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1967 = (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * 0.3183098733425140380859375;
    float _1969 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * 0.3183098733425140380859375;
    float _1976 = ((cbLight._m0[_1924].x * _1930) * _1969) + (((cbLight._m0[_1934].x * _1896) * _1944) * _1967);
    float _1977 = ((_1930 * cbLight._m0[_1924].y) * _1969) + (((cbLight._m0[_1934].y * _1898) * _1944) * _1967);
    float _1978 = ((_1930 * cbLight._m0[_1924].z) * _1969) + (((cbLight._m0[_1934].z * _1900) * _1944) * _1967);
    uvec4 _1982 = floatBitsToUint(cbLight._m0[_1907 + 12u]);
    bool _1984 = _1982.x == 0u;
    float _2086;
    float _2088;
    float _2090;
    if (_1984)
    {
        _2086 = _1976;
        _2088 = _1977;
        _2090 = _1978;
    }
    else
    {
        uint _2094 = _1907 + 6u;
        float _2110 = (dot(vec3(cbLight._m0[_1907 + 2u].xyz), vec3(_393, _394, _395)) * 0.5) + 0.5;
        float _2111 = _2110 * _2110;
        float _4234 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2112 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _2113 = isnan(1.0) ? _1922 : (isnan(_1922) ? 1.0 : min(_1922, 1.0));
        _2086 = (((cbLight._m0[_2094].x * 0.3183098733425140380859375) * _2112) * _2113) + _1976;
        _2088 = (((cbLight._m0[_2094].y * 0.3183098733425140380859375) * _2112) * _2113) + _1977;
        _2090 = (((cbLight._m0[_2094].z * 0.3183098733425140380859375) * _2112) * _2113) + _1978;
    }
    bool _2093 = _1982.y == 0u;
    float _2148;
    float _2150;
    float _2152;
    if (_2093)
    {
        _2148 = _2086;
        _2150 = _2088;
        _2152 = _2090;
    }
    else
    {
        uint _2321 = _1907 + 7u;
        float _2337 = (dot(vec3(cbLight._m0[_1907 + 3u].xyz), vec3(_393, _394, _395)) * 0.5) + 0.5;
        float _2338 = _2337 * _2337;
        float _4250 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2339 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _2340 = isnan(1.0) ? _1923 : (isnan(_1923) ? 1.0 : min(_1923, 1.0));
        _2148 = (((cbLight._m0[_2321].x * 0.3183098733425140380859375) * _2339) * _2340) + _2086;
        _2150 = (((cbLight._m0[_2321].y * 0.3183098733425140380859375) * _2339) * _2340) + _2088;
        _2152 = (((cbLight._m0[_2321].z * 0.3183098733425140380859375) * _2339) * _2340) + _2090;
    }
    uint _2155 = _1907 + 8u;
    float _2168 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1907].w)) * _396) * 0.949999988079071044921875);
    float _2169 = _2168 * _2168;
    float _2170 = cbLight._m0[_1907].x + _472;
    float _2171 = cbLight._m0[_1907].y + _473;
    float _2172 = cbLight._m0[_1907].z + _474;
    float _2176 = inversesqrt(dot(vec3(_2170, _2171, _2172), vec3(_2170, _2171, _2172)));
    float _2177 = _2176 * _2170;
    float _2178 = _2176 * _2171;
    float _2179 = _2176 * _2172;
    float _2180 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_1907].xyz));
    float _4266 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2183 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    float _4277 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _2184 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
    float _2185 = dot(vec3(_393, _394, _395), vec3(_2177, _2178, _2179));
    float _4288 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2188 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    float _2189 = dot(vec3(cbLight._m0[_1907].xyz), vec3(_2177, _2178, _2179));
    float _4299 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2193 = _2169 * _2169;
    float _2197 = ((_2188 * _2188) * (_2193 + (-1.0))) + 1.0;
    float _2205 = exp2(log2(1.0 - (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0)))) * 5.0);
    float _2206 = 0.959999978542327880859375 - _551;
    float _2208 = 0.959999978542327880859375 - _552;
    float _2209 = 0.959999978542327880859375 - _553;
    float _2216 = 1.0 - _2169;
    float _2227 = (0.5 / (((_2184 * ((_2183 * _2216) + _2169)) + 9.9999999392252902907785028219223e-09) + (((_2184 * _2216) + _2169) * _2183))) * _2183;
    float _4310 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2229 = (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_2193 / ((_2197 * _2197) * 3.141590118408203125));
    uint _2243 = _1907 + 9u;
    float _2254 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1948].w)) * _396) * 0.949999988079071044921875);
    float _2255 = _2254 * _2254;
    float _2256 = cbLight._m0[_1948].x + _472;
    float _2257 = cbLight._m0[_1948].y + _473;
    float _2258 = cbLight._m0[_1948].z + _474;
    float _2262 = inversesqrt(dot(vec3(_2256, _2257, _2258), vec3(_2256, _2257, _2258)));
    float _2263 = _2262 * _2256;
    float _2264 = _2262 * _2257;
    float _2265 = _2262 * _2258;
    float _2266 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_1948].xyz));
    float _4321 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2269 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
    float _2270 = dot(vec3(_393, _394, _395), vec3(_2263, _2264, _2265));
    float _4332 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2273 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
    float _2274 = dot(vec3(cbLight._m0[_1948].xyz), vec3(_2263, _2264, _2265));
    float _4343 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2278 = _2255 * _2255;
    float _2282 = ((_2273 * _2273) * (_2278 + (-1.0))) + 1.0;
    float _2289 = exp2(log2(1.0 - (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0)))) * 5.0);
    float _2296 = 1.0 - _2255;
    float _2306 = (0.5 / (((_2184 * ((_2269 * _2296) + _2255)) + 9.9999999392252902907785028219223e-09) + (((_2184 * _2296) + _2255) * _2269))) * _2269;
    float _4354 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2308 = (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_2278 / ((_2282 * _2282) * 3.141590118408203125));
    float _2318 = (((((_2289 * _2206) + _554) * cbLight._m0[_2243].x) * _2308) * _1930) + ((((cbLight._m0[_2155].x * _1896) * ((_2205 * _2206) + _554)) * _2229) * _1944);
    float _2319 = (((((_2289 * _2208) + _556) * cbLight._m0[_2243].y) * _2308) * _1930) + ((((cbLight._m0[_2155].y * _1898) * ((_2205 * _2208) + _556)) * _2229) * _1944);
    float _2320 = (((((_2289 * _2209) + _557) * cbLight._m0[_2243].z) * _2308) * _1930) + ((((cbLight._m0[_2155].z * _1900) * ((_2205 * _2209) + _557)) * _2229) * _1944);
    float _2376;
    float _2378;
    float _2380;
    if (_1984)
    {
        _2376 = _2318;
        _2378 = _2319;
        _2380 = _2320;
    }
    else
    {
        uint _2382 = _1907 + 2u;
        uint _2386 = _1907 + 10u;
        float _2400 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2382].w)) * _396) * 0.949999988079071044921875);
        float _2401 = _2400 * _2400;
        float _2402 = cbLight._m0[_2382].x + _472;
        float _2403 = cbLight._m0[_2382].y + _473;
        float _2404 = cbLight._m0[_2382].z + _474;
        float _2408 = inversesqrt(dot(vec3(_2402, _2403, _2404), vec3(_2402, _2403, _2404)));
        float _2409 = _2408 * _2402;
        float _2410 = _2408 * _2403;
        float _2411 = _2408 * _2404;
        float _2412 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_2382].xyz));
        float _4365 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2415 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _2416 = dot(vec3(_393, _394, _395), vec3(_2409, _2410, _2411));
        float _4376 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2419 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _2420 = dot(vec3(cbLight._m0[_2382].xyz), vec3(_2409, _2410, _2411));
        float _4387 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2424 = _2401 * _2401;
        float _2428 = ((_2419 * _2419) * (_2424 + (-1.0))) + 1.0;
        float _2435 = exp2(log2(1.0 - (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0)))) * 5.0);
        float _2442 = 1.0 - _2401;
        float _2452 = (0.5 / (((_2184 * ((_2415 * _2442) + _2401)) + 9.9999999392252902907785028219223e-09) + (((_2184 * _2442) + _2401) * _2415))) * _2415;
        float _4398 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        float _2454 = (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_2424 / ((_2428 * _2428) * 3.141590118408203125));
        float _2455 = isnan(1.0) ? _1922 : (isnan(_1922) ? 1.0 : min(_1922, 1.0));
        _2376 = (((((_2435 * _2206) + _554) * cbLight._m0[_2386].x) * _2454) * _2455) + _2318;
        _2378 = (((((_2435 * _2208) + _556) * cbLight._m0[_2386].y) * _2454) * _2455) + _2319;
        _2380 = (((((_2435 * _2209) + _557) * cbLight._m0[_2386].z) * _2454) * _2455) + _2320;
    }
    float _2486;
    float _2488;
    float _2490;
    if (_2093)
    {
        _2486 = _2376;
        _2488 = _2378;
        _2490 = _2380;
    }
    else
    {
        uint _2497 = _1907 + 3u;
        uint _2501 = _1907 + 11u;
        float _2515 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2497].w)) * _396) * 0.949999988079071044921875);
        float _2516 = _2515 * _2515;
        float _2517 = cbLight._m0[_2497].x + _472;
        float _2518 = cbLight._m0[_2497].y + _473;
        float _2519 = cbLight._m0[_2497].z + _474;
        float _2523 = inversesqrt(dot(vec3(_2517, _2518, _2519), vec3(_2517, _2518, _2519)));
        float _2524 = _2523 * _2517;
        float _2525 = _2523 * _2518;
        float _2526 = _2523 * _2519;
        float _2527 = dot(vec3(_393, _394, _395), vec3(cbLight._m0[_2497].xyz));
        float _4414 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2530 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _2531 = dot(vec3(_393, _394, _395), vec3(_2524, _2525, _2526));
        float _4425 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2534 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _2535 = dot(vec3(cbLight._m0[_2497].xyz), vec3(_2524, _2525, _2526));
        float _4436 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2539 = _2516 * _2516;
        float _2543 = ((_2534 * _2534) * (_2539 + (-1.0))) + 1.0;
        float _2550 = exp2(log2(1.0 - (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0)))) * 5.0);
        float _2557 = 1.0 - _2516;
        float _2567 = (0.5 / (((_2184 * ((_2530 * _2557) + _2516)) + 9.9999999392252902907785028219223e-09) + (((_2184 * _2557) + _2516) * _2530))) * _2530;
        float _4447 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2569 = (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_2539 / ((_2543 * _2543) * 3.141590118408203125));
        float _2570 = isnan(1.0) ? _1923 : (isnan(_1923) ? 1.0 : min(_1923, 1.0));
        _2486 = (((((_2550 * _2206) + _554) * cbLight._m0[_2501].x) * _2569) * _2570) + _2376;
        _2488 = (((((_2550 * _2208) + _556) * cbLight._m0[_2501].y) * _2569) * _2570) + _2378;
        _2490 = (((((_2550 * _2209) + _557) * cbLight._m0[_2501].z) * _2569) * _2570) + _2380;
    }
    float _2635;
    float _2637;
    float _2639;
    float _2641;
    float _2643;
    float _2645;
    if (_1905.y == 0u)
    {
        uvec4 _2591 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2592 = _2591.x;
        uint _2603 = uint((float(_2591.y) * floor(float(uint(cbSceneParam._m0[85u].y * _489) / _2592))) + floor(float(uint(cbSceneParam._m0[85u].x * _488) / _2592)));
        float _2613 = (log2(_1683 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2614 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        uint _2617 = uint(isnan(14.0) ? _2614 : (isnan(_2614) ? 14.0 : min(_2614, 14.0)));
        uvec4 _2622 = texelFetch(g_lightClusterGridBuffer, int(((_2617 << 2u) + (_2603 << 6u)) >> 2u));
        uint _2623 = _2622.x;
        uint _2624 = _2591.z;
        float _2705;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        float _2715;
        if (((((1u << ((_2624 >> 4u) & 15u)) + 4294967295u) & _2623) == 0u) || ((_2624 & 240u) == 0u))
        {
            _2705 = 0.0;
            _2707 = 0.0;
            _2709 = 0.0;
            _2711 = 0.0;
            _2713 = 0.0;
            _2715 = 0.0;
        }
        else
        {
            float _2706;
            float _2708;
            float _2710;
            float _2712;
            float _2714;
            float _2716;
            float _2857 = 0.0;
            float _2858 = 0.0;
            float _2859 = 0.0;
            float _2860 = 0.0;
            float _2861 = 0.0;
            float _2862 = 0.0;
            uint _2863 = 0u;
            uint _2872;
            bool _2873;
            for (;;)
            {
                _2872 = texelFetch(g_lightClassification, int((((_2617 << 5u) + (_2603 << 9u)) + (_2863 << 2u)) >> 2u)).x;
                _2873 = _2872 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2873)
                {
                    frontier_phi_73_pred = _2862;
                    frontier_phi_73_pred_1 = _2861;
                    frontier_phi_73_pred_2 = _2860;
                    frontier_phi_73_pred_3 = _2859;
                    frontier_phi_73_pred_4 = _2858;
                    frontier_phi_73_pred_5 = _2857;
                }
                else
                {
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    float _3006;
                    float _3007;
                    uint _3008;
                    _3002 = _2857;
                    _3003 = _2858;
                    _3004 = _2859;
                    _3005 = _2860;
                    _3006 = _2861;
                    _3007 = _2862;
                    _3008 = _2872;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    float _2934;
                    for (;;)
                    {
                        uint _3012 = uint(findLSB(_3008)) + (_2863 << 5u);
                        uint _3009 = (_3008 + 4294967295u) & _3008;
                        uint _3014 = _3012 * 48u;
                        vec4 _3028 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3014)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 3u)).x));
                        uint _3034 = (_3012 * 48u) + 4u;
                        vec4 _3047 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3034)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 3u)).x));
                        uint _3053 = (_3012 * 48u) + 8u;
                        vec3 _3064 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3053)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 2u)).x));
                        float _3068 = _3028.x - _1681;
                        float _3069 = _3028.y - _1682;
                        float _3070 = _3028.z - _1683;
                        float _3071 = dot(vec3(_3068, _3069, _3070), vec3(_3068, _3069, _3070));
                        float _3074 = inversesqrt(_3071);
                        float _3075 = _3074 * _3068;
                        float _3076 = _3074 * _3069;
                        float _3077 = _3074 * _3070;
                        float _3078 = dot(vec3(_509, _512, _515), vec3(_3075, _3076, _3077));
                        float _3083 = 1.0 - (_3071 * _3028.w);
                        float _4473 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                        float _3084 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                        float _3085 = sqrt(_3071) * _3047.w;
                        float _3088 = 1.39999997615814208984375 / (_3085 + 1.39999997615814208984375);
                        float _3089 = _3088 * _3088;
                        float _3092 = ((1.0 - _3089) * _3078) + _3089;
                        float _3095 = _3085 * _3085;
                        float _3099 = ((isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0))) * _3084) / ((_3095 * 0.699999988079071044921875) + 1.0);
                        float _3103 = (-0.0) - _1681;
                        float _3104 = (-0.0) - _1682;
                        float _3105 = (-0.0) - _1683;
                        float _3109 = inversesqrt(dot(vec3(_3103, _3104, _3105), vec3(_3103, _3104, _3105)));
                        float _3110 = _3109 * _3103;
                        float _3111 = _3109 * _3104;
                        float _3112 = _3109 * _3105;
                        float _3119 = exp2(log2(1.0 / ((_3095 * 3.5) + 5.0)) * 0.25);
                        float _3120 = 1.0 - _585;
                        float _3127 = sqrt(1.0 - ((1.0 - (_3120 * _3120)) * (1.0 - (_3119 * _3119))));
                        float _3128 = _3127 * _3127;
                        float _3129 = _3128 * _3128;
                        float _3130 = _3110 + _3075;
                        float _3131 = _3111 + _3076;
                        float _3132 = _3112 + _3077;
                        float _3136 = inversesqrt(dot(vec3(_3130, _3131, _3132), vec3(_3130, _3131, _3132)));
                        float _3140 = dot(vec3(_509, _512, _515), vec3(_3110, _3111, _3112));
                        float _4489 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                        float _3143 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                        float _3144 = dot(vec3(_509, _512, _515), vec3(_3136 * _3130, _3136 * _3131, _3136 * _3132));
                        float _4500 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                        float _3147 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
                        float _3151 = ((_3147 * _3147) * (_3129 + (-1.0))) + 1.0;
                        float _3152 = _3088 * _3128;
                        float _3153 = _3152 * _3152;
                        float _3156 = ((1.0 - _3153) * _3078) + _3153;
                        float _4511 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                        float _3157 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                        float _3158 = 1.0 - _3128;
                        float _3168 = (0.5 / (((_3157 * ((_3143 * _3158) + _3128)) + 9.9999999392252902907785028219223e-09) + (((_3157 * _3158) + _3128) * _3143))) * _3157;
                        float _4522 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                        float _3179 = (((_3129 * 3.1415927410125732421875) * (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0)))) / ((_3151 * _3151) * ((_3095 * 2.1991131305694580078125) + 3.141590118408203125))) * _3084;
                        _2932 = (_3099 * _3047.x) + _3005;
                        _2933 = (_3099 * _3047.y) + _3006;
                        _2934 = (_3099 * _3047.z) + _3007;
                        _2929 = (_3179 * _3064.x) + _3002;
                        _2930 = (_3179 * _3064.y) + _3003;
                        _2931 = (_3179 * _3064.z) + _3004;
                        if (_3009 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3002 = _2929;
                            _3003 = _2930;
                            _3004 = _2931;
                            _3005 = _2932;
                            _3006 = _2933;
                            _3007 = _2934;
                            _3008 = _3009;
                        }
                    }
                    frontier_phi_73_pred = _2934;
                    frontier_phi_73_pred_1 = _2933;
                    frontier_phi_73_pred_2 = _2932;
                    frontier_phi_73_pred_3 = _2931;
                    frontier_phi_73_pred_4 = _2930;
                    frontier_phi_73_pred_5 = _2929;
                }
                _2716 = frontier_phi_73_pred;
                _2714 = frontier_phi_73_pred_1;
                _2712 = frontier_phi_73_pred_2;
                _2710 = frontier_phi_73_pred_3;
                _2708 = frontier_phi_73_pred_4;
                _2706 = frontier_phi_73_pred_5;
                uint _2864 = _2863 + 1u;
                if (_2864 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2857 = _2706;
                    _2858 = _2708;
                    _2859 = _2710;
                    _2860 = _2712;
                    _2861 = _2714;
                    _2862 = _2716;
                    _2863 = _2864;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2705 = _2706;
            _2707 = _2708;
            _2709 = _2710;
            _2711 = _2712;
            _2713 = _2714;
            _2715 = _2716;
        }
        uvec4 _2719 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2720 = _2719.z;
        uint _2722 = (_2720 >> 8u) & 15u;
        float _2825;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        if (((4294967295u << _2722) & _2623) == 0u)
        {
            _2825 = _2705;
            _2827 = _2707;
            _2829 = _2709;
            _2831 = _2711;
            _2833 = _2713;
            _2835 = _2715;
        }
        else
        {
            float _2850 = inversesqrt(dot(vec3(_1681, _1682, _1683), vec3(_1681, _1682, _1683)));
            float _2851 = _2850 * _1681;
            float _2852 = _2850 * _1682;
            float _2853 = _2850 * _1683;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2722 < ((_2720 >> 12u) & 15u))
            {
                float _2826;
                float _2828;
                float _2830;
                float _2832;
                float _2834;
                float _2836;
                float _2985 = _2705;
                float _2986 = _2707;
                float _2987 = _2709;
                float _2988 = _2711;
                float _2989 = _2713;
                float _2990 = _2715;
                uint _2991 = _2722;
                uint _3000;
                bool _3001;
                for (;;)
                {
                    _3000 = texelFetch(g_lightClassification, int((((_2617 << 5u) + (_2603 << 9u)) + (_2991 << 2u)) >> 2u)).x;
                    _3001 = _3000 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3001)
                    {
                        frontier_phi_84_pred = _2989;
                        frontier_phi_84_pred_1 = _2988;
                        frontier_phi_84_pred_2 = _2987;
                        frontier_phi_84_pred_3 = _2986;
                        frontier_phi_84_pred_4 = _2985;
                        frontier_phi_84_pred_5 = _2990;
                    }
                    else
                    {
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3206 = _2985;
                        float _3207 = _2986;
                        float _3208 = _2987;
                        float _3209 = _2988;
                        float _3210 = _2989;
                        float _3211 = _2990;
                        uint _3212 = _3000;
                        uint _3213;
                        vec4 _3238;
                        float _3239;
                        vec4 _3254;
                        vec3 _3266;
                        vec4 _3282;
                        vec4 _3298;
                        float _3345;
                        bool _3346;
                        for (;;)
                        {
                            uint _3223 = ((_2991 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3212));
                            _3213 = (_3212 + 4294967295u) & _3212;
                            uint _3225 = _3223 * 40u;
                            _3238 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 3u)).x));
                            _3239 = _3238.w;
                            uint _3241 = (_3223 * 40u) + 4u;
                            _3254 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3241)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 3u)).x));
                            uint _3256 = (_3223 * 40u) + 8u;
                            _3266 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3256)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 2u)).x));
                            uint _3269 = (_3223 * 40u) + 16u;
                            _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            uint _3285 = (_3223 * 40u) + 20u;
                            _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            uint _3301 = (_3223 * 40u) + 24u;
                            vec4 _3314 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 3u)).x));
                            uint _3320 = (_3223 * 40u) + 28u;
                            vec4 _3333 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 3u)).x));
                            _3345 = fma(_1683, _3333.z, fma(_1682, _3333.y, _3333.x * _1681)) + _3333.w;
                            _3346 = !((fma(_1683, _3314.z, fma(_1682, _3314.y, _3314.x * _1681)) + _3314.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3346)
                            {
                                float _3373 = _3238.x - _1681;
                                float _3374 = _3238.y - _1682;
                                float _3375 = _3238.z - _1683;
                                float _3376 = dot(vec3(_3373, _3374, _3375), vec3(_3373, _3374, _3375));
                                float _3379 = inversesqrt(_3376);
                                float _3380 = _3379 * _3373;
                                float _3381 = _3379 * _3374;
                                float _3382 = _3379 * _3375;
                                float _3386 = 1.0 - (_3376 / (_3239 * _3239));
                                float _4533 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                                float _3387 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                                float _3391 = sqrt(_3376) * _3254.w;
                                float _3393 = 1.39999997615814208984375 / (_3391 + 1.39999997615814208984375);
                                float _3394 = _3393 * _3393;
                                float _3397 = ((1.0 - _3394) * dot(vec3(_3380, _3381, _3382), vec3(_509, _512, _515))) + _3394;
                                float _3400 = _3391 * _3391;
                                float _3404 = (fma(_1683, _3282.z, fma(_1682, _3282.y, _3282.x * _1681)) + _3282.w) / _3345;
                                float _3405 = (fma(_1683, _3298.z, fma(_1682, _3298.y, _3298.x * _1681)) + _3298.w) / _3345;
                                float _3409 = 1.0 - dot(vec2(_3404, _3405), vec2(_3404, _3405));
                                float _4549 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3410 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                                float _3411 = _3410 * (((isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0))) * _3387) / ((_3400 * 0.699999988079071044921875) + 1.0));
                                float _3423 = exp2(log2(1.0 / ((_3400 * 3.5) + 5.0)) * 0.25);
                                float _3424 = 1.0 - _585;
                                float _3431 = sqrt(1.0 - ((1.0 - (_3424 * _3424)) * (1.0 - (_3423 * _3423))));
                                float _3432 = _3431 * _3431;
                                float _3433 = _3432 * _3432;
                                float _3434 = _3380 - _2851;
                                float _3435 = _3381 - _2852;
                                float _3436 = _3382 - _2853;
                                float _3440 = inversesqrt(dot(vec3(_3434, _3435, _3436), vec3(_3434, _3435, _3436)));
                                float _3444 = dot(vec3(_509, _512, _515), vec3((-0.0) - _2851, (-0.0) - _2852, (-0.0) - _2853));
                                float _4560 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3447 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                                float _3448 = dot(vec3(_509, _512, _515), vec3(_3440 * _3434, _3440 * _3435, _3440 * _3436));
                                float _4571 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                                float _3451 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                                float _3455 = ((_3451 * _3451) * (_3433 + (-1.0))) + 1.0;
                                float _3456 = _3393 * _3432;
                                float _3457 = _3456 * _3456;
                                float _3463 = ((1.0 - _3457) * dot(vec3(_509, _512, _515), vec3(_3380, _3381, _3382))) + _3457;
                                float _4582 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                                float _3464 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                                float _3465 = 1.0 - _3432;
                                float _3475 = (0.5 / (((_3464 * ((_3447 * _3465) + _3432)) + 9.9999999392252902907785028219223e-09) + (((_3464 * _3465) + _3432) * _3447))) * _3464;
                                float _4593 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                                float _3485 = (_3410 * _3387) * (((_3433 * 3.1415927410125732421875) * (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0)))) / ((_3455 * _3455) * ((_3400 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3411 * _3254.y;
                                frontier_phi_90_pred_1 = _3411 * _3254.x;
                                frontier_phi_90_pred_2 = _3485 * _3266.z;
                                frontier_phi_90_pred_3 = _3485 * _3266.y;
                                frontier_phi_90_pred_4 = _3485 * _3266.x;
                                frontier_phi_90_pred_5 = _3411 * _3254.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3493 = frontier_phi_90_pred;
                            _3492 = frontier_phi_90_pred_1;
                            _3491 = frontier_phi_90_pred_2;
                            _3490 = frontier_phi_90_pred_3;
                            _3489 = frontier_phi_90_pred_4;
                            _3494 = frontier_phi_90_pred_5;
                            _3196 = _3492 + _3209;
                            _3197 = _3493 + _3210;
                            _3198 = _3494 + _3211;
                            _3193 = _3489 + _3206;
                            _3194 = _3490 + _3207;
                            _3195 = _3491 + _3208;
                            if (_3213 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3206 = _3193;
                                _3207 = _3194;
                                _3208 = _3195;
                                _3209 = _3196;
                                _3210 = _3197;
                                _3211 = _3198;
                                _3212 = _3213;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3197;
                        frontier_phi_84_pred_1 = _3196;
                        frontier_phi_84_pred_2 = _3195;
                        frontier_phi_84_pred_3 = _3194;
                        frontier_phi_84_pred_4 = _3193;
                        frontier_phi_84_pred_5 = _3198;
                    }
                    _2834 = frontier_phi_84_pred;
                    _2832 = frontier_phi_84_pred_1;
                    _2830 = frontier_phi_84_pred_2;
                    _2828 = frontier_phi_84_pred_3;
                    _2826 = frontier_phi_84_pred_4;
                    _2836 = frontier_phi_84_pred_5;
                    uint _2992 = _2991 + 1u;
                    if (_2992 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2985 = _2826;
                        _2986 = _2828;
                        _2987 = _2830;
                        _2988 = _2832;
                        _2989 = _2834;
                        _2990 = _2836;
                        _2991 = _2992;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2836;
                frontier_phi_65_66_ladder_1 = _2832;
                frontier_phi_65_66_ladder_2 = _2834;
                frontier_phi_65_66_ladder_3 = _2828;
                frontier_phi_65_66_ladder_4 = _2826;
                frontier_phi_65_66_ladder_5 = _2830;
            }
            else
            {
                frontier_phi_65_66_ladder = _2715;
                frontier_phi_65_66_ladder_1 = _2711;
                frontier_phi_65_66_ladder_2 = _2713;
                frontier_phi_65_66_ladder_3 = _2707;
                frontier_phi_65_66_ladder_4 = _2705;
                frontier_phi_65_66_ladder_5 = _2709;
            }
            _2825 = frontier_phi_65_66_ladder_4;
            _2827 = frontier_phi_65_66_ladder_3;
            _2829 = frontier_phi_65_66_ladder_5;
            _2831 = frontier_phi_65_66_ladder_1;
            _2833 = frontier_phi_65_66_ladder_2;
            _2835 = frontier_phi_65_66_ladder;
        }
        float _2840 = isnan(1.0) ? _569 : (isnan(_569) ? 1.0 : min(_569, 1.0));
        _2635 = (_2840 * _2831) + _2148;
        _2637 = (_2840 * _2833) + _2150;
        _2639 = (_2840 * _2835) + _2152;
        _2641 = ((_2825 * _554) * _2840) + _2486;
        _2643 = ((_2827 * _556) * _2840) + _2488;
        _2645 = ((_2829 * _557) * _2840) + _2490;
    }
    else
    {
        _2635 = _2148;
        _2637 = _2150;
        _2639 = _2152;
        _2641 = _2486;
        _2643 = _2488;
        _2645 = _2490;
    }
    float _4609 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _4620 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _4631 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _2662 = ((isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * (_2635 + ((isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0))) * _569))) + ((_2641 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _1409)) * cbPerFrame._m0[3u].x);
    float _2663 = ((isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (_2637 + ((isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0))) * _569))) + ((_2643 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _1409)) * cbPerFrame._m0[3u].x);
    float _2664 = ((isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (_2639 + ((isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0))) * _569))) + ((_2645 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _1409)) * cbPerFrame._m0[3u].x);
    float _2665 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
    float _2666 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
    float _2667 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
    uint _2668 = _528 + 6u;
    float _2676 = _488 / cbSceneParam._m0[86u].x;
    float _2677 = _489 / cbSceneParam._m0[86u].y;
    vec4 _2691 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2676, _2677, (log2((isnan(cbSceneParam._m0[77u].w) ? _414 : (isnan(_414) ? cbSceneParam._m0[77u].w : min(_414, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2693 = _2691.x;
    float _2694 = _2691.y;
    float _2695 = _2691.z;
    float _2696 = _2691.w;
    float _2767;
    float _2769;
    float _2771;
    float _2773;
    if (_414 > cbSceneParam._m0[78u].w)
    {
        float _2730 = isnan(_414) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _414 : min(cbSceneParam._m0[80u].w, _414));
        float _2731 = _2730 / _414;
        float _2742 = _2731 * _465;
        float _2743 = _466 * _2731;
        float _2744 = (-0.0) - _2743;
        float _2745 = _2731 * _467;
        float _2747 = (cbSceneParam._m0[77u].w * _2744) / _2730;
        float _2748 = _2747 + cbSceneParam._m0[79u].w;
        float _2749 = cbSceneParam._m0[79u].w - _2743;
        float _2755 = sqrt(((_2742 * _2742) + (_2743 * _2743)) + (_2745 * _2745));
        float _2758 = (1.0 - (cbSceneParam._m0[77u].w / _2730)) * _2755;
        float _2763 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2765 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2942;
        if (abs((_2744 - _2747) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2942 = ((((_2748 > 0.0) ? exp2(_2763 * _2748) : (2.0 - exp2(_2765 * _2748))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2758;
        }
        else
        {
            float _2886 = 1.0 / cbSceneParam._m0[80u].x;
            float _2887 = isnan(_2749) ? _2748 : (isnan(_2748) ? _2749 : max(_2748, _2749));
            float _2888 = isnan(_2749) ? _2748 : (isnan(_2748) ? _2749 : min(_2748, _2749));
            float _2897 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : min(_2887, 0.0));
            float _2898 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : min(_2888, 0.0));
            _2942 = ((abs(_2755 / _2744) * cbSceneParam._m0[80u].y) * ((((_2897 - _2898) * 2.0) - ((exp2(_2763 * (isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0)))) - exp2(_2763 * (isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0))))) * _2886)) - ((exp2(_2765 * _2897) - exp2(_2765 * _2898)) * _2886))) + (_2758 * cbSceneParam._m0[80u].z);
        }
        vec4 _2944 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2676, _2677, 1.0), 0.0);
        float _2953 = exp2((_2942 * (-1.44269502162933349609375)) * (1.0 - _2944.w));
        float _2954 = log2(_2953);
        float _2970 = log2(_2696);
        _2767 = (exp2(_2970 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2954 * cbSceneParam._m0[78u].x)) * _2944.x) / cbSceneParam._m0[78u].x)) + _2693;
        _2769 = (exp2(_2970 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2954 * cbSceneParam._m0[78u].y)) * _2944.y) / cbSceneParam._m0[78u].y)) + _2694;
        _2771 = (exp2(_2970 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2954 * cbSceneParam._m0[78u].z)) * _2944.z) / cbSceneParam._m0[78u].z)) + _2695;
        _2773 = _2953 * _2696;
    }
    else
    {
        _2767 = _2693;
        _2769 = _2694;
        _2771 = _2695;
        _2773 = _2696;
    }
    bool _2980;
    vec4 _2783;
    vec4 _2805;
    float _2807;
    float _2811;
    float _2812;
    float _2813;
    float _2814;
    bool _2824;
    for (;;)
    {
        _2783 = cbMatDynParam._m0[0u];
        float _2785 = roundEven(_2783.y);
        bool _2786 = _2785 == 3.0;
        float _2787 = log2(_2773);
        float _2794 = exp2(_2787 * cbSceneParam._m0[78u].x) * _2665;
        float _2795 = exp2(_2787 * cbSceneParam._m0[78u].y) * _2666;
        float _2796 = exp2(_2787 * cbSceneParam._m0[78u].z) * _2667;
        float _2803 = _477 + (-0.5);
        _2805 = cbMtdParam._m0[1u];
        _2807 = _2805.y * _2803;
        float _2810 = (_2785 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2811 = _2810 * (_2786 ? _2794 : (_2794 + (cbSceneParam._m0[72u].w * _2767)));
        _2812 = _2810 * (_2786 ? _2795 : (_2795 + (cbSceneParam._m0[72u].w * _2769)));
        _2813 = _2810 * (_2786 ? _2796 : (_2796 + (cbSceneParam._m0[72u].w * _2771)));
        _2814 = _2803 * 0.999000012874603271484375;
        _2824 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2824)
        {
            if ((cbInstanceData._m0[_528 + 7u].x + _2814) < 0.5)
            {
                _2980 = true;
                break;
            }
        }
        uint _2921 = _530 + uint(_2783.w);
        if ((cbInstanceData._m0[_2921].w < 1.0) && ((cbInstanceData._m0[_2921].w + _2814) < 0.5))
        {
            _2980 = true;
            break;
        }
        if ((_2807 + _333) < _2805.x)
        {
            _2980 = true;
            break;
        }
        _2980 = false;
        break;
    }
    float _3184;
    if (_2980)
    {
        discard_state = true;
        _3184 = 0.0;
    }
    else
    {
        _3184 = cbInstanceData._m0[_2668].w;
    }
    SV_Target.x = _2811;
    SV_Target.y = _2812;
    SV_Target.z = _2813;
    SV_Target.w = _3184;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2668].w;
    discard_exit();
}


