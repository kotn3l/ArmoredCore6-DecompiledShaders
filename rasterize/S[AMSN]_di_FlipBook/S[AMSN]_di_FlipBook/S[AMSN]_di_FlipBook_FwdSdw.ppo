#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_di_FlipBook_snp_0_Texture2D_3;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_di_FlipBook_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_di_FlipBook_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _873;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = _197 * NORMAL.x;
    float _199 = _197 * NORMAL.y;
    float _200 = _197 * NORMAL.z;
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212;
    float _213;
    float _214;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
    }
    else
    {
        _212 = _198;
        _213 = _199;
        _214 = _200;
    }
    uint _233 = uint(int(floor(cbMtdParam._m0[10u].z)));
    uint _234 = uint(int(cbMtdParam._m0[11u].x * cbMtdParam._m0[10u].w));
    float _236 = float(int(_233 - _234 * (_233 / _234)));
    float _246 = (fract(TEXCOORD_1.x) + (_236 - cbMtdParam._m0[10u].w * trunc(_236 / cbMtdParam._m0[10u].w))) * (1.0 / cbMtdParam._m0[10u].w);
    float _248 = (fract(TEXCOORD_1.y) + floor(_236 / cbMtdParam._m0[10u].w)) * (1.0 / cbMtdParam._m0[11u].x);
    vec4 _261 = texture(sampler2D(S_AMSN_di_FlipBook_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _246) + cbTextureTilingScale._m0[0u].z, (_248 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _267 = _261.x * cbMtdParam._m0[9u].x;
    float _268 = _261.y * cbMtdParam._m0[9u].y;
    float _269 = _261.z * cbMtdParam._m0[9u].z;
    vec4 _282 = texture(sampler2D(S_AMSN_di_FlipBook_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _246) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _248) + cbTextureTilingScale._m0[2u].w));
    float _285 = _282.x + cbMtdParam._m0[10u].x;
    vec4 _297 = texture(sampler2D(S_AMSN_di_FlipBook_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _246) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _248) + cbTextureTilingScale._m0[1u].w));
    float _301 = _297.z;
    float _305 = (_297.x * 2.0) + (-1.0);
    float _307 = (_297.y * 2.0) + (-1.0);
    float _308 = dot(vec2(_305, _307), vec2(_305, _307));
    float _3495 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _313 = sqrt(1.0 - (isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0))));
    float _316 = fma(_313, _212, fma(_307, _204 * TANGENT.x, (_190 * _182) * _305));
    float _319 = fma(_313, _213, fma(_307, _204 * TANGENT.y, (_190 * _183) * _305));
    float _322 = fma(_313, _214, fma(_307, _204 * TANGENT.z, (_190 * _184) * _305));
    float _326 = inversesqrt(dot(vec3(_316, _319, _322), vec3(_316, _319, _322)));
    float _327 = _326 * _316;
    float _328 = _326 * _319;
    float _329 = _326 * _322;
    float _3506 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _330 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
    float _3517 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3528 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3539 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3550 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _334 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
    float _350 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _391 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _401 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _391);
    float _402 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _391);
    float _403 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _391);
    float _407 = inversesqrt(dot(vec3(_401, _402, _403), vec3(_401, _402, _403)));
    float _408 = _401 * _407;
    float _409 = _402 * _407;
    float _410 = _403 * _407;
    float _416 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _417 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _438 = fma(_329, cbSceneParam._m0[5u].z, fma(_328, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _327));
    float _441 = fma(_329, cbSceneParam._m0[6u].z, fma(_328, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _327));
    float _444 = fma(_329, cbSceneParam._m0[7u].z, fma(_328, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _327));
    uint _457 = uint(roundEven(NORMAL.w)) * 13u;
    uint _460 = (_457 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _466 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0)))) * cbInstanceData._m0[_460].x;
    float _467 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0)))) * cbInstanceData._m0[_460].y;
    float _468 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0)))) * cbInstanceData._m0[_460].z;
    float _3561 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _469 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    float _3572 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _470 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
    float _3583 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _471 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
    float _472 = 1.0 - _334;
    float _473 = _469 * _472;
    float _474 = _470 * _472;
    float _475 = _471 * _472;
    float _480 = (_469 + (-0.039999999105930328369140625)) * _334;
    float _481 = (_470 + (-0.039999999105930328369140625)) * _334;
    float _482 = (_471 + (-0.039999999105930328369140625)) * _334;
    float _483 = _480 + 0.039999999105930328369140625;
    float _485 = _481 + 0.039999999105930328369140625;
    float _486 = _482 + 0.039999999105930328369140625;
    vec4 _495 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _416, cbSceneParam._m0[86u].y * _417));
    float _498 = _495.x * TEXCOORD_1.w;
    float _499 = dot(vec3(_327, _328, _329), vec3(_408, _409, _410));
    float _502 = _499 * 2.0;
    float _506 = (_502 * _327) - _408;
    float _507 = (_502 * _328) - _409;
    float _508 = (_502 * _329) - _410;
    float _512 = abs(dot(vec3(_408, _409, _410), vec3(_327, _328, _329)));
    float _3594 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _514 = sqrt(_330);
    float _527 = exp2((_514 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_514 * 3.0));
    float _533 = (1.0 - _527) * ((_514 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _534 = _527 * _514;
    float _562 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _566 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _570 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _872;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _597 = fma(_570, cbModelParam._m0[26u].z, fma(_566, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _562));
        float _601 = fma(_570, cbModelParam._m0[27u].z, fma(_566, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _562));
        float _605 = fma(_570, cbModelParam._m0[28u].z, fma(_566, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _562));
        float _630 = _562 + _327;
        float _631 = _566 + _328;
        float _632 = _570 + _329;
        float _642 = fma(_632, cbModelParam._m0[26u].z, fma(_631, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _630)) - _597;
        float _643 = fma(_632, cbModelParam._m0[27u].z, fma(_631, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _630)) - _601;
        float _644 = fma(_632, cbModelParam._m0[28u].z, fma(_631, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _630)) - _605;
        float _648 = inversesqrt(dot(vec3(_642, _643, _644), vec3(_642, _643, _644)));
        float _661 = ((_648 * _642) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_597 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _662 = ((_648 * _643) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_601 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _663 = ((_648 * _644) / cbModelParam._m0[34u].z) + ((((((_605 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _666 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_661, _662, _663), 0.0);
        vec4 _673 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_661, _662, _663), 0.0);
        vec4 _680 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_661, _662, _663), 0.0);
        vec4 _687 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_661, _662, _663), 0.0);
        float _700 = exp2((_666.w + (-0.5)) * 20.0) * 2.0;
        float _701 = _700 * (_666.x + (-0.5));
        float _702 = _700 * (_666.y + (-0.5));
        float _703 = _700 * (_666.z + (-0.5));
        float _710 = exp2((_673.w + (-0.5)) * 20.0) * 2.0;
        float _711 = _710 * (_673.x + (-0.5));
        float _712 = _710 * (_673.y + (-0.5));
        float _713 = _710 * (_673.z + (-0.5));
        float _720 = exp2((_680.w + (-0.5)) * 20.0) * 2.0;
        float _721 = _720 * (_680.x + (-0.5));
        float _722 = _720 * (_680.y + (-0.5));
        float _723 = _720 * (_680.z + (-0.5));
        float _730 = exp2((_687.w + (-0.5)) * 20.0) * 2.0;
        float _731 = _730 * (_687.x + (-0.5));
        float _732 = _730 * (_687.y + (-0.5));
        float _733 = _730 * (_687.z + (-0.5));
        float _734 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _735 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _736 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _737 = _701 * 0.5;
        float _738 = _711 * 0.5;
        float _739 = _721 * 0.5;
        float _740 = dot(vec3(_737, _738, _739), vec3(_737, _738, _739));
        float _745 = (_740 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_740);
        float _754 = (dot(vec3(_327, _328, _329), vec3(_745 * _737, _745 * _738, _745 * _739)) + 1.0) * 0.5;
        float _3620 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _764 = sqrt(((_738 * _738) + (_737 * _737)) + (_739 * _739)) / (_734 + 9.9999997473787516355514526367188e-06);
        float _3631 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _765 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _766 = _765 * 2.0;
        float _770 = (1.0 - _765) / (_765 + 1.0);
        float _3642 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _771 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _780 = ((((1.0 - _771) * (_766 + 2.0)) * exp2(log2(isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0))) * (_766 + 1.0))) + _771) * _734;
        float _781 = _702 * 0.5;
        float _782 = _712 * 0.5;
        float _783 = _722 * 0.5;
        float _784 = dot(vec3(_781, _782, _783), vec3(_781, _782, _783));
        float _789 = (_784 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_784);
        float _797 = (dot(vec3(_327, _328, _329), vec3(_789 * _781, _789 * _782, _789 * _783)) + 1.0) * 0.5;
        float _3653 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _806 = sqrt(((_782 * _782) + (_781 * _781)) + (_783 * _783)) / (_735 + 9.9999997473787516355514526367188e-06);
        float _3664 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _807 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _808 = _807 * 2.0;
        float _812 = (1.0 - _807) / (_807 + 1.0);
        float _3675 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _822 = ((((1.0 - _813) * (_808 + 2.0)) * exp2(log2(isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) * (_808 + 1.0))) + _813) * _735;
        float _823 = _703 * 0.5;
        float _824 = _713 * 0.5;
        float _825 = _723 * 0.5;
        float _826 = dot(vec3(_823, _824, _825), vec3(_823, _824, _825));
        float _831 = (_826 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_826);
        float _839 = (dot(vec3(_327, _328, _329), vec3(_831 * _823, _831 * _824, _831 * _825)) + 1.0) * 0.5;
        float _3686 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _848 = sqrt(((_824 * _824) + (_823 * _823)) + (_825 * _825)) / (_736 + 9.9999997473787516355514526367188e-06);
        float _3697 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _849 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _850 = _849 * 2.0;
        float _854 = (1.0 - _849) / (_849 + 1.0);
        float _3708 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _855 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _864 = ((((1.0 - _855) * (_850 + 2.0)) * exp2(log2(isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * (_850 + 1.0))) + _855) * _736;
        _872 = _703;
        _874 = _702;
        _875 = _701;
        _876 = _713;
        _877 = _712;
        _878 = _711;
        _879 = _723;
        _880 = _722;
        _881 = _721;
        _882 = _736;
        _883 = _735;
        _884 = _734;
        _885 = cbModelParam._m0[36u].z * (isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0)));
        _886 = cbModelParam._m0[36u].z * (isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0)));
        _887 = cbModelParam._m0[36u].z * (isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0)));
    }
    else
    {
        _872 = _873;
        _874 = _873;
        _875 = _873;
        _876 = _873;
        _877 = _873;
        _878 = _873;
        _879 = _873;
        _880 = _873;
        _881 = _873;
        _882 = _873;
        _883 = _873;
        _884 = _873;
        _885 = 0.0;
        _886 = 0.0;
        _887 = 0.0;
    }
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _913 = fma(_570, cbModelParam._m0[30u].z, fma(_566, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _562));
        float _917 = fma(_570, cbModelParam._m0[31u].z, fma(_566, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _562));
        float _921 = fma(_570, cbModelParam._m0[32u].z, fma(_566, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _562));
        float _944 = _562 + _327;
        float _945 = _566 + _328;
        float _946 = _570 + _329;
        float _956 = fma(_946, cbModelParam._m0[30u].z, fma(_945, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _944)) - _913;
        float _957 = fma(_946, cbModelParam._m0[31u].z, fma(_945, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _944)) - _917;
        float _958 = fma(_946, cbModelParam._m0[32u].z, fma(_945, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _944)) - _921;
        float _962 = inversesqrt(dot(vec3(_956, _957, _958), vec3(_956, _957, _958)));
        float _975 = ((_962 * _956) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_913 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _976 = ((_962 * _957) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_917 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _977 = ((_962 * _958) / cbModelParam._m0[35u].z) + ((((((_921 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_975, _976, _977), 0.0);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_975, _976, _977), 0.0);
        vec4 _993 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_975, _976, _977), 0.0);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_975, _976, _977), 0.0);
        float _1012 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_979.x + (-0.5));
        float _1014 = _1012 * (_979.y + (-0.5));
        float _1015 = _1012 * (_979.z + (-0.5));
        float _1022 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_986.x + (-0.5));
        float _1024 = _1022 * (_986.y + (-0.5));
        float _1025 = _1022 * (_986.z + (-0.5));
        float _1032 = exp2((_993.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_993.x + (-0.5));
        float _1034 = _1032 * (_993.y + (-0.5));
        float _1035 = _1032 * (_993.z + (-0.5));
        float _1042 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1000.x + (-0.5));
        float _1044 = _1042 * (_1000.y + (-0.5));
        float _1045 = _1042 * (_1000.z + (-0.5));
        float _1046 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1047 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1048 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1049 = _1013 * 0.5;
        float _1050 = _1023 * 0.5;
        float _1051 = _1033 * 0.5;
        float _1052 = dot(vec3(_1049, _1050, _1051), vec3(_1049, _1050, _1051));
        float _1057 = (_1052 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1052);
        float _1065 = (dot(vec3(_327, _328, _329), vec3(_1057 * _1049, _1057 * _1050, _1057 * _1051)) + 1.0) * 0.5;
        float _3749 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1074 = sqrt(((_1050 * _1050) + (_1049 * _1049)) + (_1051 * _1051)) / (_1046 + 9.9999997473787516355514526367188e-06);
        float _3760 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1076 = _1075 * 2.0;
        float _1080 = (1.0 - _1075) / (_1075 + 1.0);
        float _3771 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1090 = ((((1.0 - _1081) * (_1076 + 2.0)) * exp2(log2(isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * (_1076 + 1.0))) + _1081) * _1046;
        float _1091 = _1014 * 0.5;
        float _1092 = _1024 * 0.5;
        float _1093 = _1034 * 0.5;
        float _1094 = dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093));
        float _1099 = (_1094 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1094);
        float _1107 = (dot(vec3(_327, _328, _329), vec3(_1099 * _1091, _1099 * _1092, _1099 * _1093)) + 1.0) * 0.5;
        float _3782 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1116 = sqrt(((_1092 * _1092) + (_1091 * _1091)) + (_1093 * _1093)) / (_1047 + 9.9999997473787516355514526367188e-06);
        float _3793 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1118 = _1117 * 2.0;
        float _1122 = (1.0 - _1117) / (_1117 + 1.0);
        float _3804 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1132 = ((((1.0 - _1123) * (_1118 + 2.0)) * exp2(log2(isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * (_1118 + 1.0))) + _1123) * _1047;
        float _1133 = _1015 * 0.5;
        float _1134 = _1025 * 0.5;
        float _1135 = _1035 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1149 = (dot(vec3(_327, _328, _329), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _3815 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1158 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1048 + 9.9999997473787516355514526367188e-06);
        float _3826 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _3837 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * (_1160 + 1.0))) + _1165) * _1048;
        _1182 = _1015;
        _1183 = _1014;
        _1184 = _1013;
        _1185 = _1025;
        _1186 = _1024;
        _1187 = _1023;
        _1188 = _1035;
        _1189 = _1034;
        _1190 = _1033;
        _1191 = _1048;
        _1192 = _1047;
        _1193 = _1046;
        _1194 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0)));
        _1195 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)));
        _1196 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
    }
    else
    {
        _1182 = _873;
        _1183 = _873;
        _1184 = _873;
        _1185 = _873;
        _1186 = _873;
        _1187 = _873;
        _1188 = _873;
        _1189 = _873;
        _1190 = _873;
        _1191 = _873;
        _1192 = _873;
        _1193 = _873;
        _1194 = 0.0;
        _1195 = 0.0;
        _1196 = 0.0;
    }
    float _1206 = (cbModelParam._m0[1u].x * (_1194 - _885)) + _885;
    float _1207 = (cbModelParam._m0[1u].x * (_1195 - _886)) + _886;
    float _1208 = (cbModelParam._m0[1u].x * (_1196 - _887)) + _887;
    float _1229 = fma(_1208, cbSceneParam._m0[89u].z, fma(_1207, cbSceneParam._m0[89u].y, _1206 * cbSceneParam._m0[89u].x));
    float _1232 = fma(_1208, cbSceneParam._m0[90u].z, fma(_1207, cbSceneParam._m0[90u].y, _1206 * cbSceneParam._m0[90u].x));
    float _1235 = fma(_1208, cbSceneParam._m0[91u].z, fma(_1207, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1206));
    float _1250 = _506 * 0.5;
    float _1251 = _507 * 0.5;
    float _1252 = _508 * 0.5;
    float _1253 = dot(vec4(_1250, _1251, _1252, 1.0), vec4(_1184, _1187, _1190, _1193));
    float _1256 = dot(vec4(_1250, _1251, _1252, 1.0), vec4(_1183, _1186, _1189, _1192));
    float _1259 = dot(vec4(_1250, _1251, _1252, 1.0), vec4(_1182, _1185, _1188, _1191));
    float _1293;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1266 = dot(vec4(_1250, _1251, _1252, 1.0), vec4(_872, _876, _879, _882));
        float _1270 = dot(vec4(_1250, _1251, _1252, 1.0), vec4(_874, _877, _880, _883));
        float _1274 = dot(vec4(_1250, _1251, _1252, 1.0), vec4(_875, _878, _881, _884));
        float _1281 = dot(vec4(cbModelParam._m0[39u]), vec4(_1250, _1251, _1252, 1.0));
        _1293 = dot(vec3(isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)), isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)), isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1281) ? 0.0 : (isnan(0.0) ? _1281 : max(0.0, _1281))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1293 = 1.0;
    }
    float _1304;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1295 = dot(vec4(cbModelParam._m0[40u]), vec4(_1250, _1251, _1252, 1.0));
        _1304 = dot(vec3(isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)), isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)), isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1295) ? 0.0 : (isnan(0.0) ? _1295 : max(0.0, _1295))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1304 = 1.0;
    }
    float _1308 = (_1304 * cbModelParam._m0[1u].x) + (_1293 * (1.0 - cbModelParam._m0[1u].x));
    float _1318 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _330);
    float _1319 = isnan(_1318) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1318 : min(cbModelParam._m0[25u].z, _1318));
    float _1401;
    float _1403;
    float _1405;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1368 = fma(_570, cbModelParam._m0[13u].z, fma(_566, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _562)) + cbModelParam._m0[13u].w;
        float _1372 = fma(_570, cbModelParam._m0[14u].z, fma(_566, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _562)) + cbModelParam._m0[14u].w;
        float _1376 = fma(_570, cbModelParam._m0[15u].z, fma(_566, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _562)) + cbModelParam._m0[15u].w;
        float _1379 = fma(_508, cbModelParam._m0[13u].z, fma(_507, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _506));
        float _1382 = fma(_508, cbModelParam._m0[14u].z, fma(_507, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _506));
        float _1385 = fma(_508, cbModelParam._m0[15u].z, fma(_507, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _506));
        float _1413;
        if (_1379 > 0.0)
        {
            _1413 = abs((1.0 - _1368) / _1379);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1379 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1368 + 1.0) / _1379);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1413 = frontier_phi_16_14_ladder;
        }
        float _1588;
        if (_1382 > 0.0)
        {
            _1588 = abs((1.0 - _1372) / _1382);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1382 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1372 + 1.0) / _1382);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1588 = frontier_phi_25_21_ladder;
        }
        float _1884;
        if (_1385 > 0.0)
        {
            _1884 = abs((1.0 - _1376) / _1385);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1385 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1376 + 1.0) / _1385);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1884 = frontier_phi_37_32_ladder;
        }
        float _1886 = isnan(_1588) ? _1413 : (isnan(_1413) ? _1588 : min(_1413, _1588));
        float _1887 = isnan(_1884) ? _1886 : (isnan(_1886) ? _1884 : min(_1886, _1884));
        float _1891 = (_1887 * _1379) + _1368;
        float _1892 = (_1887 * _1382) + _1372;
        float _1893 = (_1887 * _1385) + _1376;
        float _1894 = _1887 * 9.9999997473787516355514526367188e-05;
        float _1896 = (-1.0) - _1894;
        float _1898 = _1894 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1893 > _1898) || ((_1893 < _1896) || ((_1892 > _1898) || ((_1892 < _1896) || ((_1891 < _1896) || (_1891 > _1898))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2038 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1893, cbModelParam._m0[9u].z, fma(_1892, cbModelParam._m0[9u].y, _1891 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1893, cbModelParam._m0[10u].z, fma(_1892, cbModelParam._m0[10u].y, _1891 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1893, cbModelParam._m0[11u].z, fma(_1892, cbModelParam._m0[11u].y, _1891 * cbModelParam._m0[11u].x))), _1319);
            frontier_phi_15_37_ladder = _2038.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2038.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2038.z * cbModelParam._m0[1u].y;
        }
        _1401 = frontier_phi_15_37_ladder_1;
        _1403 = frontier_phi_15_37_ladder;
        _1405 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1389 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_506, _507, _508), _1319);
        _1401 = _1389.x * cbModelParam._m0[1u].y;
        _1403 = _1389.y * cbModelParam._m0[1u].y;
        _1405 = _1389.z * cbModelParam._m0[1u].y;
    }
    float _1409 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _330);
    float _1410 = isnan(_1409) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1409 : min(cbModelParam._m0[25u].w, _1409));
    float _1503;
    float _1505;
    float _1507;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1467 = fma(_570, cbModelParam._m0[21u].z, fma(_566, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _562)) + cbModelParam._m0[21u].w;
        float _1471 = fma(_570, cbModelParam._m0[22u].z, fma(_566, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _562)) + cbModelParam._m0[22u].w;
        float _1475 = fma(_570, cbModelParam._m0[23u].z, fma(_566, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _562)) + cbModelParam._m0[23u].w;
        float _1478 = fma(_508, cbModelParam._m0[21u].z, fma(_507, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _506));
        float _1481 = fma(_508, cbModelParam._m0[22u].z, fma(_507, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _506));
        float _1484 = fma(_508, cbModelParam._m0[23u].z, fma(_507, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _506));
        float _1593;
        if (_1478 > 0.0)
        {
            _1593 = abs((1.0 - _1467) / _1478);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1478 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1467 + 1.0) / _1478);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1593 = frontier_phi_27_23_ladder;
        }
        float _1911;
        if (_1481 > 0.0)
        {
            _1911 = abs((1.0 - _1471) / _1481);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1481 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1471 + 1.0) / _1481);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1911 = frontier_phi_39_34_ladder;
        }
        float _2249;
        if (_1484 > 0.0)
        {
            _2249 = abs((1.0 - _1475) / _1484);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1475 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2249 = frontier_phi_49_46_ladder;
        }
        float _2251 = isnan(_1911) ? _1593 : (isnan(_1593) ? _1911 : min(_1593, _1911));
        float _2252 = isnan(_2249) ? _2251 : (isnan(_2251) ? _2249 : min(_2251, _2249));
        float _2256 = (_2252 * _1478) + _1467;
        float _2257 = (_2252 * _1481) + _1471;
        float _2258 = (_2252 * _1484) + _1475;
        float _2259 = _2252 * 9.9999997473787516355514526367188e-05;
        float _2260 = (-1.0) - _2259;
        float _2262 = _2259 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2258 > _2262) || ((_2258 < _2260) || ((_2257 > _2262) || ((_2257 < _2260) || ((_2256 < _2260) || (_2256 > _2262))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2380 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2258, cbModelParam._m0[17u].z, fma(_2257, cbModelParam._m0[17u].y, _2256 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2258, cbModelParam._m0[18u].z, fma(_2257, cbModelParam._m0[18u].y, _2256 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2258, cbModelParam._m0[19u].z, fma(_2257, cbModelParam._m0[19u].y, _2256 * cbModelParam._m0[19u].x))), _1410);
            frontier_phi_24_49_ladder = _2380.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2380.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2380.x * cbModelParam._m0[1u].z;
        }
        _1503 = frontier_phi_24_49_ladder_2;
        _1505 = frontier_phi_24_49_ladder_1;
        _1507 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1487 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_506, _507, _508), _1410);
        _1503 = _1487.x * cbModelParam._m0[1u].z;
        _1505 = _1487.y * cbModelParam._m0[1u].z;
        _1507 = _1487.z * cbModelParam._m0[1u].z;
    }
    float _1520 = (((_533 * _483) + _534) * _498) * ((cbModelParam._m0[1u].w * (_1503 - _1401)) + _1401);
    float _1522 = (((_533 * _485) + _534) * _498) * ((cbModelParam._m0[1u].w * (_1505 - _1403)) + _1403);
    float _1524 = (((_533 * _486) + _534) * _498) * ((cbModelParam._m0[1u].w * (_1507 - _1405)) + _1405);
    float _1527 = fma(_1524, cbSceneParam._m0[89u].z, fma(_1522, cbSceneParam._m0[89u].y, _1520 * cbSceneParam._m0[89u].x));
    float _1530 = fma(_1524, cbSceneParam._m0[90u].z, fma(_1522, cbSceneParam._m0[90u].y, _1520 * cbSceneParam._m0[90u].x));
    float _1533 = fma(_1524, cbSceneParam._m0[91u].z, fma(_1522, cbSceneParam._m0[91u].y, _1520 * cbSceneParam._m0[91u].x));
    float _1567 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1571 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1575 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1579 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1580 = _1567 / _1579;
    float _1581 = _1571 / _1579;
    float _1582 = _1575 / _1579;
    float _1729;
    float _1730;
    float _1731;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1609 = ((uint(_1582 > cbSceneParam._m0[59u].y) + uint(_1582 > cbSceneParam._m0[59u].x)) + uint(_1582 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1610 = _1609 + 43u;
        uint _1618 = _1609 + 44u;
        uint _1626 = _1609 + 45u;
        uint _1634 = _1609 + 46u;
        float _1645 = fma(_1579, cbSceneParam._m0[_1610].w, fma(_1575, cbSceneParam._m0[_1610].z, fma(_1571, cbSceneParam._m0[_1610].y, _1567 * cbSceneParam._m0[_1610].x)));
        float _1649 = fma(_1579, cbSceneParam._m0[_1618].w, fma(_1575, cbSceneParam._m0[_1618].z, fma(_1571, cbSceneParam._m0[_1618].y, _1567 * cbSceneParam._m0[_1618].x)));
        float _1657 = fma(_1579, cbSceneParam._m0[_1634].w, fma(_1575, cbSceneParam._m0[_1634].z, fma(_1571, cbSceneParam._m0[_1634].y, _1567 * cbSceneParam._m0[_1634].x)));
        float _1662 = cbSceneParam._m0[33u].z * _1657;
        float _1664 = cbSceneParam._m0[33u].w * _1657;
        float _1667 = fma(_1579, cbSceneParam._m0[_1626].w, fma(_1575, cbSceneParam._m0[_1626].z, fma(_1571, cbSceneParam._m0[_1626].y, _1567 * cbSceneParam._m0[_1626].x))) / _1657;
        float _1715 = (cbSceneParam._m0[33u].x - sqrt(((_1581 * _1581) + (_1580 * _1580)) + (_1582 * _1582))) * cbSceneParam._m0[33u].y;
        float _3963 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1722 = (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1662 + _1645) / _1657, (_1664 + _1649) / _1657), _1667), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1664 + _1645) / _1657, (_1649 - _1662) / _1657), _1667), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1645 - _1662) / _1657, (_1649 - _1664) / _1657), _1667), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1645 - _1664) / _1657, (_1662 + _1649) / _1657), _1667), 0.0)).x), vec4(0.25)));
        _1729 = 1.0 - (_1722 * cbSceneParam._m0[34u].x);
        _1730 = 1.0 - (_1722 * cbSceneParam._m0[34u].y);
        _1731 = 1.0 - (_1722 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1729 = 1.0;
        _1730 = 1.0;
        _1731 = 1.0;
    }
    float _1795;
    float _1797;
    float _1799;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1783 = fma(_1579, cbSceneParam._m0[63u].w, fma(_1575, cbSceneParam._m0[63u].z, fma(_1571, cbSceneParam._m0[63u].y, _1567 * cbSceneParam._m0[63u].x)));
        float _1784 = fma(_1579, cbSceneParam._m0[60u].w, fma(_1575, cbSceneParam._m0[60u].z, fma(_1571, cbSceneParam._m0[60u].y, _1567 * cbSceneParam._m0[60u].x))) / _1783;
        float _1785 = fma(_1579, cbSceneParam._m0[61u].w, fma(_1575, cbSceneParam._m0[61u].z, fma(_1571, cbSceneParam._m0[61u].y, _1567 * cbSceneParam._m0[61u].x))) / _1783;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1784 >= cbSceneParam._m0[64u].x) && (_1785 >= cbSceneParam._m0[64u].y)) && (_1784 <= cbSceneParam._m0[64u].z)) && (_1785 <= cbSceneParam._m0[64u].w))
        {
            float _1924 = fma(_1579, cbSceneParam._m0[62u].w, fma(_1575, cbSceneParam._m0[62u].z, fma(_1571, cbSceneParam._m0[62u].y, _1567 * cbSceneParam._m0[62u].x))) / _1783;
            float _1928 = isnan(cbSceneParam._m0[41u].w) ? _1924 : (isnan(_1924) ? cbSceneParam._m0[41u].w : max(_1924, cbSceneParam._m0[41u].w));
            float _1971 = (cbSceneParam._m0[33u].x - sqrt(((_1581 * _1581) + (_1580 * _1580)) + (_1582 * _1582))) * cbSceneParam._m0[33u].y;
            float _3979 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
            float _1978 = (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1784, cbSceneParam._m0[33u].w + _1785), _1928), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1784, _1785 - cbSceneParam._m0[33u].z), _1928), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1784 - cbSceneParam._m0[33u].z, _1785 - cbSceneParam._m0[33u].w), _1928), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1784 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1785), _1928), 0.0)).x), vec4(0.25)));
            float _1982 = 1.0 - (_1978 * cbSceneParam._m0[34u].x);
            float _1983 = 1.0 - (_1978 * cbSceneParam._m0[34u].y);
            float _1984 = 1.0 - (_1978 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1983) ? _1730 : (isnan(_1730) ? _1983 : min(_1730, _1983));
            frontier_phi_36_35_ladder_1 = isnan(_1984) ? _1731 : (isnan(_1731) ? _1984 : min(_1731, _1984));
            frontier_phi_36_35_ladder_2 = isnan(_1982) ? _1729 : (isnan(_1729) ? _1982 : min(_1729, _1982));
        }
        else
        {
            frontier_phi_36_35_ladder = _1730;
            frontier_phi_36_35_ladder_1 = _1731;
            frontier_phi_36_35_ladder_2 = _1729;
        }
        _1795 = frontier_phi_36_35_ladder_2;
        _1797 = frontier_phi_36_35_ladder;
        _1799 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1795 = _1729;
        _1797 = _1730;
        _1799 = _1731;
    }
    uvec4 _1804 = floatBitsToUint(cbInstanceData._m0[_457 + 5u]);
    uint _1806 = _1804.x * 14u;
    uint _1807 = _1806 + 13u;
    float _1814 = _498 + (-1.0);
    float _1819 = (cbLight._m0[_1807].x * _1814) + 1.0;
    float _1820 = (cbLight._m0[_1807].y * _1814) + 1.0;
    float _1821 = (cbLight._m0[_1807].z * _1814) + 1.0;
    float _1822 = (cbLight._m0[_1807].w * _1814) + 1.0;
    uint _1823 = _1806 + 5u;
    float _1829 = isnan(1.0) ? _1820 : (isnan(_1820) ? 1.0 : min(_1820, 1.0));
    uint _1833 = _1806 + 4u;
    float _1843 = isnan(1.0) ? _1819 : (isnan(_1819) ? 1.0 : min(_1819, 1.0));
    uint _1847 = _1806 | 1u;
    float _1858 = dot(vec3(cbLight._m0[_1806].xyz), vec3(_327, _328, _329));
    float _1861 = dot(vec3(cbLight._m0[_1847].xyz), vec3(_327, _328, _329));
    float _4015 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _4026 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1866 = (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * 0.3183098733425140380859375;
    float _1868 = (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * 0.3183098733425140380859375;
    float _1875 = ((cbLight._m0[_1823].x * _1829) * _1868) + (((cbLight._m0[_1833].x * _1795) * _1843) * _1866);
    float _1876 = ((_1829 * cbLight._m0[_1823].y) * _1868) + (((cbLight._m0[_1833].y * _1797) * _1843) * _1866);
    float _1877 = ((_1829 * cbLight._m0[_1823].z) * _1868) + (((cbLight._m0[_1833].z * _1799) * _1843) * _1866);
    uvec4 _1881 = floatBitsToUint(cbLight._m0[_1806 + 12u]);
    bool _1883 = _1881.x == 0u;
    float _1985;
    float _1987;
    float _1989;
    if (_1883)
    {
        _1985 = _1875;
        _1987 = _1876;
        _1989 = _1877;
    }
    else
    {
        uint _1993 = _1806 + 6u;
        float _2009 = (dot(vec3(cbLight._m0[_1806 + 2u].xyz), vec3(_327, _328, _329)) * 0.5) + 0.5;
        float _2010 = _2009 * _2009;
        float _4037 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        float _2011 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _2012 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
        _1985 = (((cbLight._m0[_1993].x * 0.3183098733425140380859375) * _2011) * _2012) + _1875;
        _1987 = (((cbLight._m0[_1993].y * 0.3183098733425140380859375) * _2011) * _2012) + _1876;
        _1989 = (((cbLight._m0[_1993].z * 0.3183098733425140380859375) * _2011) * _2012) + _1877;
    }
    bool _1992 = _1881.y == 0u;
    float _2047;
    float _2049;
    float _2051;
    if (_1992)
    {
        _2047 = _1985;
        _2049 = _1987;
        _2051 = _1989;
    }
    else
    {
        uint _2220 = _1806 + 7u;
        float _2236 = (dot(vec3(cbLight._m0[_1806 + 3u].xyz), vec3(_327, _328, _329)) * 0.5) + 0.5;
        float _2237 = _2236 * _2236;
        float _4053 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2238 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _2239 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
        _2047 = (((cbLight._m0[_2220].x * 0.3183098733425140380859375) * _2238) * _2239) + _1985;
        _2049 = (((cbLight._m0[_2220].y * 0.3183098733425140380859375) * _2238) * _2239) + _1987;
        _2051 = (((cbLight._m0[_2220].z * 0.3183098733425140380859375) * _2238) * _2239) + _1989;
    }
    uint _2054 = _1806 + 8u;
    float _2067 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1806].w)) * _330) * 0.949999988079071044921875);
    float _2068 = _2067 * _2067;
    float _2069 = cbLight._m0[_1806].x + _408;
    float _2070 = cbLight._m0[_1806].y + _409;
    float _2071 = cbLight._m0[_1806].z + _410;
    float _2075 = inversesqrt(dot(vec3(_2069, _2070, _2071), vec3(_2069, _2070, _2071)));
    float _2076 = _2075 * _2069;
    float _2077 = _2075 * _2070;
    float _2078 = _2075 * _2071;
    float _2079 = dot(vec3(_327, _328, _329), vec3(cbLight._m0[_1806].xyz));
    float _4069 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2082 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _4080 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _2083 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _2084 = dot(vec3(_327, _328, _329), vec3(_2076, _2077, _2078));
    float _4091 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2087 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _2088 = dot(vec3(cbLight._m0[_1806].xyz), vec3(_2076, _2077, _2078));
    float _4102 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2092 = _2068 * _2068;
    float _2096 = ((_2087 * _2087) * (_2092 + (-1.0))) + 1.0;
    float _2104 = exp2(log2(1.0 - (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) * 5.0);
    float _2105 = 0.959999978542327880859375 - _480;
    float _2107 = 0.959999978542327880859375 - _481;
    float _2108 = 0.959999978542327880859375 - _482;
    float _2115 = 1.0 - _2068;
    float _2126 = (0.5 / (((_2083 * ((_2082 * _2115) + _2068)) + 9.9999999392252902907785028219223e-09) + (((_2083 * _2115) + _2068) * _2082))) * _2082;
    float _4113 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2128 = (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_2092 / ((_2096 * _2096) * 3.141590118408203125));
    uint _2142 = _1806 + 9u;
    float _2153 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1847].w)) * _330) * 0.949999988079071044921875);
    float _2154 = _2153 * _2153;
    float _2155 = cbLight._m0[_1847].x + _408;
    float _2156 = cbLight._m0[_1847].y + _409;
    float _2157 = cbLight._m0[_1847].z + _410;
    float _2161 = inversesqrt(dot(vec3(_2155, _2156, _2157), vec3(_2155, _2156, _2157)));
    float _2162 = _2161 * _2155;
    float _2163 = _2161 * _2156;
    float _2164 = _2161 * _2157;
    float _2165 = dot(vec3(_327, _328, _329), vec3(cbLight._m0[_1847].xyz));
    float _4124 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2168 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    float _2169 = dot(vec3(_327, _328, _329), vec3(_2162, _2163, _2164));
    float _4135 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2172 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _2173 = dot(vec3(cbLight._m0[_1847].xyz), vec3(_2162, _2163, _2164));
    float _4146 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2177 = _2154 * _2154;
    float _2181 = ((_2172 * _2172) * (_2177 + (-1.0))) + 1.0;
    float _2188 = exp2(log2(1.0 - (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0)))) * 5.0);
    float _2195 = 1.0 - _2154;
    float _2205 = (0.5 / (((_2083 * ((_2168 * _2195) + _2154)) + 9.9999999392252902907785028219223e-09) + (((_2083 * _2195) + _2154) * _2168))) * _2168;
    float _4157 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2207 = (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_2177 / ((_2181 * _2181) * 3.141590118408203125));
    float _2217 = (((((_2188 * _2105) + _483) * cbLight._m0[_2142].x) * _2207) * _1829) + ((((cbLight._m0[_2054].x * _1795) * ((_2104 * _2105) + _483)) * _2128) * _1843);
    float _2218 = (((((_2188 * _2107) + _485) * cbLight._m0[_2142].y) * _2207) * _1829) + ((((cbLight._m0[_2054].y * _1797) * ((_2104 * _2107) + _485)) * _2128) * _1843);
    float _2219 = (((((_2188 * _2108) + _486) * cbLight._m0[_2142].z) * _2207) * _1829) + ((((cbLight._m0[_2054].z * _1799) * ((_2104 * _2108) + _486)) * _2128) * _1843);
    float _2275;
    float _2277;
    float _2279;
    if (_1883)
    {
        _2275 = _2217;
        _2277 = _2218;
        _2279 = _2219;
    }
    else
    {
        uint _2281 = _1806 + 2u;
        uint _2285 = _1806 + 10u;
        float _2299 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2281].w)) * _330) * 0.949999988079071044921875);
        float _2300 = _2299 * _2299;
        float _2301 = cbLight._m0[_2281].x + _408;
        float _2302 = cbLight._m0[_2281].y + _409;
        float _2303 = cbLight._m0[_2281].z + _410;
        float _2307 = inversesqrt(dot(vec3(_2301, _2302, _2303), vec3(_2301, _2302, _2303)));
        float _2308 = _2307 * _2301;
        float _2309 = _2307 * _2302;
        float _2310 = _2307 * _2303;
        float _2311 = dot(vec3(_327, _328, _329), vec3(cbLight._m0[_2281].xyz));
        float _4168 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2314 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _2315 = dot(vec3(_327, _328, _329), vec3(_2308, _2309, _2310));
        float _4179 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2318 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _2319 = dot(vec3(cbLight._m0[_2281].xyz), vec3(_2308, _2309, _2310));
        float _4190 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2323 = _2300 * _2300;
        float _2327 = ((_2318 * _2318) * (_2323 + (-1.0))) + 1.0;
        float _2334 = exp2(log2(1.0 - (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0)))) * 5.0);
        float _2341 = 1.0 - _2300;
        float _2351 = (0.5 / (((_2083 * ((_2314 * _2341) + _2300)) + 9.9999999392252902907785028219223e-09) + (((_2083 * _2341) + _2300) * _2314))) * _2314;
        float _4201 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2353 = (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_2323 / ((_2327 * _2327) * 3.141590118408203125));
        float _2354 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
        _2275 = (((((_2334 * _2105) + _483) * cbLight._m0[_2285].x) * _2353) * _2354) + _2217;
        _2277 = (((((_2334 * _2107) + _485) * cbLight._m0[_2285].y) * _2353) * _2354) + _2218;
        _2279 = (((((_2334 * _2108) + _486) * cbLight._m0[_2285].z) * _2353) * _2354) + _2219;
    }
    float _2385;
    float _2387;
    float _2389;
    if (_1992)
    {
        _2385 = _2275;
        _2387 = _2277;
        _2389 = _2279;
    }
    else
    {
        uint _2396 = _1806 + 3u;
        uint _2400 = _1806 + 11u;
        float _2414 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2396].w)) * _330) * 0.949999988079071044921875);
        float _2415 = _2414 * _2414;
        float _2416 = cbLight._m0[_2396].x + _408;
        float _2417 = cbLight._m0[_2396].y + _409;
        float _2418 = cbLight._m0[_2396].z + _410;
        float _2422 = inversesqrt(dot(vec3(_2416, _2417, _2418), vec3(_2416, _2417, _2418)));
        float _2423 = _2422 * _2416;
        float _2424 = _2422 * _2417;
        float _2425 = _2422 * _2418;
        float _2426 = dot(vec3(_327, _328, _329), vec3(cbLight._m0[_2396].xyz));
        float _4217 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2429 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _2430 = dot(vec3(_327, _328, _329), vec3(_2423, _2424, _2425));
        float _4228 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2433 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _2434 = dot(vec3(cbLight._m0[_2396].xyz), vec3(_2423, _2424, _2425));
        float _4239 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2438 = _2415 * _2415;
        float _2442 = ((_2433 * _2433) * (_2438 + (-1.0))) + 1.0;
        float _2449 = exp2(log2(1.0 - (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0)))) * 5.0);
        float _2456 = 1.0 - _2415;
        float _2466 = (0.5 / (((_2083 * ((_2429 * _2456) + _2415)) + 9.9999999392252902907785028219223e-09) + (((_2083 * _2456) + _2415) * _2429))) * _2429;
        float _4250 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2468 = (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_2438 / ((_2442 * _2442) * 3.141590118408203125));
        float _2469 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
        _2385 = (((((_2449 * _2105) + _483) * cbLight._m0[_2400].x) * _2468) * _2469) + _2275;
        _2387 = (((((_2449 * _2107) + _485) * cbLight._m0[_2400].y) * _2468) * _2469) + _2277;
        _2389 = (((((_2449 * _2108) + _486) * cbLight._m0[_2400].z) * _2468) * _2469) + _2279;
    }
    float _2534;
    float _2536;
    float _2538;
    float _2540;
    float _2542;
    float _2544;
    if (_1804.y == 0u)
    {
        uvec4 _2490 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2491 = _2490.x;
        uint _2502 = uint((float(_2490.y) * floor(float(uint(cbSceneParam._m0[85u].y * _417) / _2491))) + floor(float(uint(cbSceneParam._m0[85u].x * _416) / _2491)));
        float _2512 = (log2(_1582 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2513 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        uint _2516 = uint(isnan(14.0) ? _2513 : (isnan(_2513) ? 14.0 : min(_2513, 14.0)));
        uvec4 _2521 = texelFetch(g_lightClusterGridBuffer, int(((_2516 << 2u) + (_2502 << 6u)) >> 2u));
        uint _2522 = _2521.x;
        uint _2523 = _2490.z;
        float _2604;
        float _2606;
        float _2608;
        float _2610;
        float _2612;
        float _2614;
        if (((((1u << ((_2523 >> 4u) & 15u)) + 4294967295u) & _2522) == 0u) || ((_2523 & 240u) == 0u))
        {
            _2604 = 0.0;
            _2606 = 0.0;
            _2608 = 0.0;
            _2610 = 0.0;
            _2612 = 0.0;
            _2614 = 0.0;
        }
        else
        {
            float _2605;
            float _2607;
            float _2609;
            float _2611;
            float _2613;
            float _2615;
            float _2748 = 0.0;
            float _2749 = 0.0;
            float _2750 = 0.0;
            float _2751 = 0.0;
            float _2752 = 0.0;
            float _2753 = 0.0;
            uint _2754 = 0u;
            uint _2763;
            bool _2764;
            for (;;)
            {
                _2763 = texelFetch(g_lightClassification, int((((_2516 << 5u) + (_2502 << 9u)) + (_2754 << 2u)) >> 2u)).x;
                _2764 = _2763 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2764)
                {
                    frontier_phi_68_pred = _2753;
                    frontier_phi_68_pred_1 = _2752;
                    frontier_phi_68_pred_2 = _2751;
                    frontier_phi_68_pred_3 = _2749;
                    frontier_phi_68_pred_4 = _2748;
                    frontier_phi_68_pred_5 = _2750;
                }
                else
                {
                    float _2872;
                    float _2873;
                    float _2874;
                    float _2875;
                    float _2876;
                    float _2877;
                    uint _2878;
                    _2872 = _2748;
                    _2873 = _2749;
                    _2874 = _2750;
                    _2875 = _2751;
                    _2876 = _2752;
                    _2877 = _2753;
                    _2878 = _2763;
                    float _2804;
                    float _2805;
                    float _2806;
                    float _2807;
                    float _2808;
                    float _2809;
                    for (;;)
                    {
                        uint _2882 = uint(findLSB(_2878)) + (_2754 << 5u);
                        uint _2879 = (_2878 + 4294967295u) & _2878;
                        uint _2884 = _2882 * 48u;
                        vec4 _2898 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2884)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 3u)).x));
                        uint _2904 = (_2882 * 48u) + 4u;
                        vec4 _2917 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2904)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 3u)).x));
                        uint _2923 = (_2882 * 48u) + 8u;
                        vec3 _2934 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2923)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 2u)).x));
                        float _2938 = _2898.x - _1580;
                        float _2939 = _2898.y - _1581;
                        float _2940 = _2898.z - _1582;
                        float _2941 = dot(vec3(_2938, _2939, _2940), vec3(_2938, _2939, _2940));
                        float _2944 = inversesqrt(_2941);
                        float _2945 = _2944 * _2938;
                        float _2946 = _2944 * _2939;
                        float _2947 = _2944 * _2940;
                        float _2948 = dot(vec3(_438, _441, _444), vec3(_2945, _2946, _2947));
                        float _2953 = 1.0 - (_2941 * _2898.w);
                        float _4276 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
                        float _2954 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
                        float _2955 = sqrt(_2941) * _2917.w;
                        float _2958 = 1.39999997615814208984375 / (_2955 + 1.39999997615814208984375);
                        float _2959 = _2958 * _2958;
                        float _2962 = ((1.0 - _2959) * _2948) + _2959;
                        float _2965 = _2955 * _2955;
                        float _2969 = ((isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0))) * _2954) / ((_2965 * 0.699999988079071044921875) + 1.0);
                        float _2973 = (-0.0) - _1580;
                        float _2974 = (-0.0) - _1581;
                        float _2975 = (-0.0) - _1582;
                        float _2979 = inversesqrt(dot(vec3(_2973, _2974, _2975), vec3(_2973, _2974, _2975)));
                        float _2980 = _2979 * _2973;
                        float _2981 = _2979 * _2974;
                        float _2982 = _2979 * _2975;
                        float _2989 = exp2(log2(1.0 / ((_2965 * 3.5) + 5.0)) * 0.25);
                        float _2990 = 1.0 - _514;
                        float _2997 = sqrt(1.0 - ((1.0 - (_2990 * _2990)) * (1.0 - (_2989 * _2989))));
                        float _2998 = _2997 * _2997;
                        float _2999 = _2998 * _2998;
                        float _3000 = _2980 + _2945;
                        float _3001 = _2981 + _2946;
                        float _3002 = _2982 + _2947;
                        float _3006 = inversesqrt(dot(vec3(_3000, _3001, _3002), vec3(_3000, _3001, _3002)));
                        float _3010 = dot(vec3(_438, _441, _444), vec3(_2980, _2981, _2982));
                        float _4292 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                        float _3013 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
                        float _3014 = dot(vec3(_438, _441, _444), vec3(_3006 * _3000, _3006 * _3001, _3006 * _3002));
                        float _4303 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                        float _3017 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
                        float _3021 = ((_3017 * _3017) * (_2999 + (-1.0))) + 1.0;
                        float _3022 = _2958 * _2998;
                        float _3023 = _3022 * _3022;
                        float _3026 = ((1.0 - _3023) * _2948) + _3023;
                        float _4314 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                        float _3027 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                        float _3028 = 1.0 - _2998;
                        float _3038 = (0.5 / (((_3027 * ((_3013 * _3028) + _2998)) + 9.9999999392252902907785028219223e-09) + (((_3027 * _3028) + _2998) * _3013))) * _3027;
                        float _4325 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                        float _3049 = (((_2999 * 3.1415927410125732421875) * (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0)))) / ((_3021 * _3021) * ((_2965 * 2.1991131305694580078125) + 3.141590118408203125))) * _2954;
                        _2807 = (_2969 * _2917.x) + _2875;
                        _2808 = (_2969 * _2917.y) + _2876;
                        _2809 = (_2969 * _2917.z) + _2877;
                        _2804 = (_3049 * _2934.x) + _2872;
                        _2805 = (_3049 * _2934.y) + _2873;
                        _2806 = (_3049 * _2934.z) + _2874;
                        if (_2879 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2872 = _2804;
                            _2873 = _2805;
                            _2874 = _2806;
                            _2875 = _2807;
                            _2876 = _2808;
                            _2877 = _2809;
                            _2878 = _2879;
                        }
                    }
                    frontier_phi_68_pred = _2809;
                    frontier_phi_68_pred_1 = _2808;
                    frontier_phi_68_pred_2 = _2807;
                    frontier_phi_68_pred_3 = _2805;
                    frontier_phi_68_pred_4 = _2804;
                    frontier_phi_68_pred_5 = _2806;
                }
                _2615 = frontier_phi_68_pred;
                _2613 = frontier_phi_68_pred_1;
                _2611 = frontier_phi_68_pred_2;
                _2607 = frontier_phi_68_pred_3;
                _2605 = frontier_phi_68_pred_4;
                _2609 = frontier_phi_68_pred_5;
                uint _2755 = _2754 + 1u;
                if (_2755 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2748 = _2605;
                    _2749 = _2607;
                    _2750 = _2609;
                    _2751 = _2611;
                    _2752 = _2613;
                    _2753 = _2615;
                    _2754 = _2755;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2604 = _2605;
            _2606 = _2607;
            _2608 = _2609;
            _2610 = _2611;
            _2612 = _2613;
            _2614 = _2615;
        }
        uvec4 _2618 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2619 = _2618.z;
        uint _2621 = (_2619 >> 8u) & 15u;
        float _2716;
        float _2718;
        float _2720;
        float _2722;
        float _2724;
        float _2726;
        if (((4294967295u << _2621) & _2522) == 0u)
        {
            _2716 = _2604;
            _2718 = _2606;
            _2720 = _2608;
            _2722 = _2610;
            _2724 = _2612;
            _2726 = _2614;
        }
        else
        {
            float _2741 = inversesqrt(dot(vec3(_1580, _1581, _1582), vec3(_1580, _1581, _1582)));
            float _2742 = _2741 * _1580;
            float _2743 = _2741 * _1581;
            float _2744 = _2741 * _1582;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2621 < ((_2619 >> 12u) & 15u))
            {
                float _2717;
                float _2719;
                float _2721;
                float _2723;
                float _2725;
                float _2727;
                float _2855 = _2604;
                float _2856 = _2606;
                float _2857 = _2608;
                float _2858 = _2610;
                float _2859 = _2612;
                float _2860 = _2614;
                uint _2861 = _2621;
                uint _2870;
                bool _2871;
                for (;;)
                {
                    _2870 = texelFetch(g_lightClassification, int((((_2516 << 5u) + (_2502 << 9u)) + (_2861 << 2u)) >> 2u)).x;
                    _2871 = _2870 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2871)
                    {
                        frontier_phi_74_pred = _2857;
                        frontier_phi_74_pred_1 = _2856;
                        frontier_phi_74_pred_2 = _2855;
                        frontier_phi_74_pred_3 = _2860;
                        frontier_phi_74_pred_4 = _2859;
                        frontier_phi_74_pred_5 = _2858;
                    }
                    else
                    {
                        float _3054;
                        float _3055;
                        float _3056;
                        float _3057;
                        float _3058;
                        float _3059;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3067 = _2855;
                        float _3068 = _2856;
                        float _3069 = _2857;
                        float _3070 = _2858;
                        float _3071 = _2859;
                        float _3072 = _2860;
                        uint _3073 = _2870;
                        uint _3074;
                        vec4 _3099;
                        float _3100;
                        vec4 _3115;
                        vec3 _3127;
                        vec4 _3143;
                        vec4 _3159;
                        float _3206;
                        bool _3207;
                        for (;;)
                        {
                            uint _3084 = ((_2861 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3073));
                            _3074 = (_3073 + 4294967295u) & _3073;
                            uint _3086 = _3084 * 40u;
                            _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            _3100 = _3099.w;
                            uint _3102 = (_3084 * 40u) + 4u;
                            _3115 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 3u)).x));
                            uint _3117 = (_3084 * 40u) + 8u;
                            _3127 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3117)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 2u)).x));
                            uint _3130 = (_3084 * 40u) + 16u;
                            _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            uint _3146 = (_3084 * 40u) + 20u;
                            _3159 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3146)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 3u)).x));
                            uint _3162 = (_3084 * 40u) + 24u;
                            vec4 _3175 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3162)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 3u)).x));
                            uint _3181 = (_3084 * 40u) + 28u;
                            vec4 _3194 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 3u)).x));
                            _3206 = fma(_1582, _3194.z, fma(_1581, _3194.y, _3194.x * _1580)) + _3194.w;
                            _3207 = !((fma(_1582, _3175.z, fma(_1581, _3175.y, _3175.x * _1580)) + _3175.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3207)
                            {
                                float _3234 = _3099.x - _1580;
                                float _3235 = _3099.y - _1581;
                                float _3236 = _3099.z - _1582;
                                float _3237 = dot(vec3(_3234, _3235, _3236), vec3(_3234, _3235, _3236));
                                float _3240 = inversesqrt(_3237);
                                float _3241 = _3240 * _3234;
                                float _3242 = _3240 * _3235;
                                float _3243 = _3240 * _3236;
                                float _3247 = 1.0 - (_3237 / (_3100 * _3100));
                                float _4336 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3248 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                                float _3252 = sqrt(_3237) * _3115.w;
                                float _3254 = 1.39999997615814208984375 / (_3252 + 1.39999997615814208984375);
                                float _3255 = _3254 * _3254;
                                float _3258 = ((1.0 - _3255) * dot(vec3(_3241, _3242, _3243), vec3(_438, _441, _444))) + _3255;
                                float _3261 = _3252 * _3252;
                                float _3265 = (fma(_1582, _3143.z, fma(_1581, _3143.y, _3143.x * _1580)) + _3143.w) / _3206;
                                float _3266 = (fma(_1582, _3159.z, fma(_1581, _3159.y, _3159.x * _1580)) + _3159.w) / _3206;
                                float _3270 = 1.0 - dot(vec2(_3265, _3266), vec2(_3265, _3266));
                                float _4352 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                                float _3271 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
                                float _3272 = _3271 * (((isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0))) * _3248) / ((_3261 * 0.699999988079071044921875) + 1.0));
                                float _3284 = exp2(log2(1.0 / ((_3261 * 3.5) + 5.0)) * 0.25);
                                float _3285 = 1.0 - _514;
                                float _3292 = sqrt(1.0 - ((1.0 - (_3285 * _3285)) * (1.0 - (_3284 * _3284))));
                                float _3293 = _3292 * _3292;
                                float _3294 = _3293 * _3293;
                                float _3295 = _3241 - _2742;
                                float _3296 = _3242 - _2743;
                                float _3297 = _3243 - _2744;
                                float _3301 = inversesqrt(dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297)));
                                float _3305 = dot(vec3(_438, _441, _444), vec3((-0.0) - _2742, (-0.0) - _2743, (-0.0) - _2744));
                                float _4363 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3308 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                                float _3309 = dot(vec3(_438, _441, _444), vec3(_3301 * _3295, _3301 * _3296, _3301 * _3297));
                                float _4374 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                                float _3312 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                                float _3316 = ((_3312 * _3312) * (_3294 + (-1.0))) + 1.0;
                                float _3317 = _3254 * _3293;
                                float _3318 = _3317 * _3317;
                                float _3324 = ((1.0 - _3318) * dot(vec3(_438, _441, _444), vec3(_3241, _3242, _3243))) + _3318;
                                float _4385 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3325 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                                float _3326 = 1.0 - _3293;
                                float _3336 = (0.5 / (((_3325 * ((_3308 * _3326) + _3293)) + 9.9999999392252902907785028219223e-09) + (((_3325 * _3326) + _3293) * _3308))) * _3325;
                                float _4396 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                                float _3346 = (_3271 * _3248) * (((_3294 * 3.1415927410125732421875) * (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0)))) / ((_3316 * _3316) * ((_3261 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3346 * _3127.z;
                                frontier_phi_80_pred_1 = _3346 * _3127.y;
                                frontier_phi_80_pred_2 = _3346 * _3127.x;
                                frontier_phi_80_pred_3 = _3272 * _3115.z;
                                frontier_phi_80_pred_4 = _3272 * _3115.y;
                                frontier_phi_80_pred_5 = _3272 * _3115.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3352 = frontier_phi_80_pred;
                            _3351 = frontier_phi_80_pred_1;
                            _3350 = frontier_phi_80_pred_2;
                            _3355 = frontier_phi_80_pred_3;
                            _3354 = frontier_phi_80_pred_4;
                            _3353 = frontier_phi_80_pred_5;
                            _3057 = _3353 + _3070;
                            _3058 = _3354 + _3071;
                            _3059 = _3355 + _3072;
                            _3054 = _3350 + _3067;
                            _3055 = _3351 + _3068;
                            _3056 = _3352 + _3069;
                            if (_3074 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3067 = _3054;
                                _3068 = _3055;
                                _3069 = _3056;
                                _3070 = _3057;
                                _3071 = _3058;
                                _3072 = _3059;
                                _3073 = _3074;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3056;
                        frontier_phi_74_pred_1 = _3055;
                        frontier_phi_74_pred_2 = _3054;
                        frontier_phi_74_pred_3 = _3059;
                        frontier_phi_74_pred_4 = _3058;
                        frontier_phi_74_pred_5 = _3057;
                    }
                    _2721 = frontier_phi_74_pred;
                    _2719 = frontier_phi_74_pred_1;
                    _2717 = frontier_phi_74_pred_2;
                    _2727 = frontier_phi_74_pred_3;
                    _2725 = frontier_phi_74_pred_4;
                    _2723 = frontier_phi_74_pred_5;
                    uint _2862 = _2861 + 1u;
                    if (_2862 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2855 = _2717;
                        _2856 = _2719;
                        _2857 = _2721;
                        _2858 = _2723;
                        _2859 = _2725;
                        _2860 = _2727;
                        _2861 = _2862;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2725;
                frontier_phi_62_63_ladder_1 = _2723;
                frontier_phi_62_63_ladder_2 = _2721;
                frontier_phi_62_63_ladder_3 = _2727;
                frontier_phi_62_63_ladder_4 = _2719;
                frontier_phi_62_63_ladder_5 = _2717;
            }
            else
            {
                frontier_phi_62_63_ladder = _2612;
                frontier_phi_62_63_ladder_1 = _2610;
                frontier_phi_62_63_ladder_2 = _2608;
                frontier_phi_62_63_ladder_3 = _2614;
                frontier_phi_62_63_ladder_4 = _2606;
                frontier_phi_62_63_ladder_5 = _2604;
            }
            _2716 = frontier_phi_62_63_ladder_5;
            _2718 = frontier_phi_62_63_ladder_4;
            _2720 = frontier_phi_62_63_ladder_2;
            _2722 = frontier_phi_62_63_ladder_1;
            _2724 = frontier_phi_62_63_ladder;
            _2726 = frontier_phi_62_63_ladder_3;
        }
        float _2731 = isnan(1.0) ? _498 : (isnan(_498) ? 1.0 : min(_498, 1.0));
        _2534 = (_2731 * _2722) + _2047;
        _2536 = (_2731 * _2724) + _2049;
        _2538 = (_2731 * _2726) + _2051;
        _2540 = ((_2716 * _483) * _2731) + _2385;
        _2542 = ((_2718 * _485) * _2731) + _2387;
        _2544 = ((_2720 * _486) * _2731) + _2389;
    }
    else
    {
        _2534 = _2047;
        _2536 = _2049;
        _2538 = _2051;
        _2540 = _2385;
        _2542 = _2387;
        _2544 = _2389;
    }
    float _4412 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _4423 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _4434 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _2561 = ((isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_2534 + ((isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0))) * _498))) + ((_2540 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _1308)) * cbPerFrame._m0[3u].x);
    float _2562 = ((isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_2536 + ((isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0))) * _498))) + ((_2542 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _1308)) * cbPerFrame._m0[3u].x);
    float _2563 = ((isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_2538 + ((isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0))) * _498))) + ((_2544 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _1308)) * cbPerFrame._m0[3u].x);
    uint _2567 = _457 + 6u;
    float _2575 = _416 / cbSceneParam._m0[86u].x;
    float _2576 = _417 / cbSceneParam._m0[86u].y;
    vec4 _2590 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2575, _2576, (log2((isnan(cbSceneParam._m0[77u].w) ? _350 : (isnan(_350) ? cbSceneParam._m0[77u].w : min(_350, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2592 = _2590.x;
    float _2593 = _2590.y;
    float _2594 = _2590.z;
    float _2595 = _2590.w;
    float _2666;
    float _2668;
    float _2670;
    float _2672;
    if (_350 > cbSceneParam._m0[78u].w)
    {
        float _2629 = isnan(_350) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _350 : min(cbSceneParam._m0[80u].w, _350));
        float _2630 = _2629 / _350;
        float _2641 = _2630 * _401;
        float _2642 = _402 * _2630;
        float _2643 = (-0.0) - _2642;
        float _2644 = _2630 * _403;
        float _2646 = (cbSceneParam._m0[77u].w * _2643) / _2629;
        float _2647 = _2646 + cbSceneParam._m0[79u].w;
        float _2648 = cbSceneParam._m0[79u].w - _2642;
        float _2654 = sqrt(((_2641 * _2641) + (_2642 * _2642)) + (_2644 * _2644));
        float _2657 = (1.0 - (cbSceneParam._m0[77u].w / _2629)) * _2654;
        float _2662 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2664 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2817;
        if (abs((_2643 - _2646) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2817 = ((((_2647 > 0.0) ? exp2(_2662 * _2647) : (2.0 - exp2(_2664 * _2647))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2657;
        }
        else
        {
            float _2777 = 1.0 / cbSceneParam._m0[80u].x;
            float _2778 = isnan(_2648) ? _2647 : (isnan(_2647) ? _2648 : max(_2647, _2648));
            float _2779 = isnan(_2648) ? _2647 : (isnan(_2647) ? _2648 : min(_2647, _2648));
            float _2788 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : min(_2778, 0.0));
            float _2789 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : min(_2779, 0.0));
            _2817 = ((abs(_2654 / _2643) * cbSceneParam._m0[80u].y) * ((((_2788 - _2789) * 2.0) - ((exp2(_2662 * (isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0)))) - exp2(_2662 * (isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0))))) * _2777)) - ((exp2(_2664 * _2788) - exp2(_2664 * _2789)) * _2777))) + (_2657 * cbSceneParam._m0[80u].z);
        }
        vec4 _2819 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2575, _2576, 1.0), 0.0);
        float _2828 = exp2((_2817 * (-1.44269502162933349609375)) * (1.0 - _2819.w));
        float _2829 = log2(_2828);
        float _2845 = log2(_2595);
        _2666 = (exp2(_2845 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2829 * cbSceneParam._m0[78u].x)) * _2819.x) / cbSceneParam._m0[78u].x)) + _2592;
        _2668 = (exp2(_2845 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2829 * cbSceneParam._m0[78u].y)) * _2819.y) / cbSceneParam._m0[78u].y)) + _2593;
        _2670 = (exp2(_2845 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2829 * cbSceneParam._m0[78u].z)) * _2819.z) / cbSceneParam._m0[78u].z)) + _2594;
        _2672 = _2828 * _2595;
    }
    else
    {
        _2666 = _2592;
        _2668 = _2593;
        _2670 = _2594;
        _2672 = _2595;
    }
    float _2684 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2685 = _2684 == 3.0;
    float _2686 = log2(_2672);
    float _2693 = exp2(_2686 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0)));
    float _2694 = exp2(_2686 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0)));
    float _2695 = exp2(_2686 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0)));
    float _2704 = (_2684 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2704 * (_2685 ? _2693 : (_2693 + (cbSceneParam._m0[72u].w * _2666)));
    SV_Target.y = _2704 * (_2685 ? _2694 : (_2694 + (cbSceneParam._m0[72u].w * _2668)));
    SV_Target.z = _2704 * (_2685 ? _2695 : (_2695 + (cbSceneParam._m0[72u].w * _2670)));
    SV_Target.w = cbInstanceData._m0[_2567].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2567].w;
}


