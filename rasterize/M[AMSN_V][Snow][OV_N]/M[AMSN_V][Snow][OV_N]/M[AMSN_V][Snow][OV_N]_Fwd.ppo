#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Snow_OV_N_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Snow_OV_N_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Snow_OV_N_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Snow_OV_N_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Snow_OV_N_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Snow_OV_N_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _969;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _195 = _194 * _186;
    float _196 = _194 * _187;
    float _197 = _194 * _188;
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = _201 * NORMAL.x;
    float _203 = _201 * NORMAL.y;
    float _204 = _201 * NORMAL.z;
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _209 = _208 * TANGENT.x;
    float _210 = _208 * TANGENT.y;
    float _211 = _208 * TANGENT.z;
    float _216;
    float _217;
    float _218;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
    }
    else
    {
        _216 = _202;
        _217 = _203;
        _218 = _204;
    }
    vec4 _237 = texture(sampler2D(M_AMSN_V_Snow_OV_N_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _242 = _237.z;
    float _246 = (_237.x * 2.0) + (-1.0);
    float _248 = (_237.y * 2.0) + (-1.0);
    float _249 = dot(vec2(_246, _248), vec2(_246, _248));
    float _3283 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _255 = sqrt(1.0 - (isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0))));
    float _258 = fma(_255, _216, fma(_248, _209, _246 * _195));
    float _261 = fma(_255, _217, fma(_248, _210, _246 * _196));
    float _264 = fma(_255, _218, fma(_248, _211, _246 * _197));
    float _273 = exp2(log2(inversesqrt(dot(vec3(_258, _261, _264), vec3(_258, _261, _264))) * _261) * cbMtdParam._m0[11u].x) * cbMtdParam._m0[11u].y;
    float _3294 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _298 = ((cbMtdParam._m0[11u].w * (-1.39999997615814208984375)) * ((texture(sampler2D(M_AMSN_V_Snow_OV_N_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w)).x + (-1.0)) + ((1.0 - TEXCOORD_3.x) * 2.0))) + 1.0;
    float _3305 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _306 = (((isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0))) + 1.0) - cbMtdParam._m0[12u].x) * (isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0)));
    float _307 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _308 = isnan(1.0) ? _307 : (isnan(_307) ? 1.0 : min(_307, 1.0));
    vec4 _320 = texture(sampler2D(M_AMSN_V_Snow_OV_N_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    vec4 _345 = texture(sampler2D(M_AMSN_V_Snow_OV_N_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _356 = cbMtdParam._m0[9u].x * _345.x;
    float _357 = cbMtdParam._m0[9u].y * _345.y;
    float _358 = cbMtdParam._m0[9u].z * _345.z;
    float _365 = (((cbMtdParam._m0[10u].x * _320.x) - _356) * _308) + _356;
    float _366 = (((cbMtdParam._m0[10u].y * _320.y) - _357) * _308) + _357;
    float _367 = (((cbMtdParam._m0[10u].z * _320.z) - _358) * _308) + _358;
    vec4 _379 = texture(sampler2D(M_AMSN_V_Snow_OV_N_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _386 = (_379.x * 2.0) + (-1.0);
    float _387 = (_379.y * 2.0) + (-1.0);
    float _388 = dot(vec2(_386, _387), vec2(_386, _387));
    float _3326 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _396 = ((_379.z - _242) * _308) + _242;
    float _405 = ((sqrt(1.0 - (isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0)))) - _255) * _308) + _255;
    vec4 _419 = texture(sampler2D(M_AMSN_V_Snow_OV_N_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _429 = (((_386 - _246) * _308) + _246) + (((_419.x * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z);
    float _430 = (((_387 - _248) * _308) + _248) + (((_419.y * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z);
    float _433 = fma(_405, _216, fma(_430, _209, _429 * _195));
    float _436 = fma(_405, _217, fma(_430, _210, _429 * _196));
    float _439 = fma(_405, _218, fma(_430, _211, _429 * _197));
    float _443 = inversesqrt(dot(vec3(_433, _436, _439), vec3(_433, _436, _439)));
    float _444 = _443 * _433;
    float _445 = _443 * _436;
    float _446 = _443 * _439;
    float _3337 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _447 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
    float _3348 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _3359 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _3370 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _466 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _507 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _517 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _507);
    float _518 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _507);
    float _519 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _507);
    float _523 = inversesqrt(dot(vec3(_517, _518, _519), vec3(_517, _518, _519)));
    float _524 = _517 * _523;
    float _525 = _518 * _523;
    float _526 = _519 * _523;
    float _532 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _533 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _553 = fma(_446, cbSceneParam._m0[5u].z, fma(_445, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _444));
    float _556 = fma(_446, cbSceneParam._m0[6u].z, fma(_445, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _444));
    float _559 = fma(_446, cbSceneParam._m0[7u].z, fma(_445, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _444));
    uint _572 = uint(roundEven(NORMAL.w)) * 13u;
    uint _574 = (_572 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _580 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0)))) * cbInstanceData._m0[_574].x;
    float _581 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0)))) * cbInstanceData._m0[_574].y;
    float _582 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0)))) * cbInstanceData._m0[_574].z;
    float _3381 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _583 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
    float _3392 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _584 = isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0));
    float _3403 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _585 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
    vec4 _594 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _532, cbSceneParam._m0[86u].y * _533));
    float _597 = _594.x * TEXCOORD_3.w;
    float _598 = dot(vec3(_444, _445, _446), vec3(_524, _525, _526));
    float _601 = _598 * 2.0;
    float _605 = (_601 * _444) - _524;
    float _606 = (_601 * _445) - _525;
    float _607 = (_601 * _446) - _526;
    float _611 = abs(dot(vec3(_524, _525, _526), vec3(_444, _445, _446)));
    float _3414 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _613 = sqrt(_447);
    float _626 = exp2((_613 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_613 * 3.0));
    float _658 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _662 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _666 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _968;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _693 = fma(_666, cbModelParam._m0[26u].z, fma(_662, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _658));
        float _697 = fma(_666, cbModelParam._m0[27u].z, fma(_662, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _658));
        float _701 = fma(_666, cbModelParam._m0[28u].z, fma(_662, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _658));
        float _726 = _658 + _444;
        float _727 = _662 + _445;
        float _728 = _666 + _446;
        float _738 = fma(_728, cbModelParam._m0[26u].z, fma(_727, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _726)) - _693;
        float _739 = fma(_728, cbModelParam._m0[27u].z, fma(_727, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _726)) - _697;
        float _740 = fma(_728, cbModelParam._m0[28u].z, fma(_727, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _726)) - _701;
        float _744 = inversesqrt(dot(vec3(_738, _739, _740), vec3(_738, _739, _740)));
        float _757 = ((_744 * _738) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_693 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _758 = ((_744 * _739) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_697 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _759 = ((_744 * _740) / cbModelParam._m0[34u].z) + ((((((_701 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _762 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_757, _758, _759), 0.0);
        vec4 _769 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_757, _758, _759), 0.0);
        vec4 _776 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_757, _758, _759), 0.0);
        vec4 _783 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_757, _758, _759), 0.0);
        float _796 = exp2((_762.w + (-0.5)) * 20.0) * 2.0;
        float _797 = _796 * (_762.x + (-0.5));
        float _798 = _796 * (_762.y + (-0.5));
        float _799 = _796 * (_762.z + (-0.5));
        float _806 = exp2((_769.w + (-0.5)) * 20.0) * 2.0;
        float _807 = _806 * (_769.x + (-0.5));
        float _808 = _806 * (_769.y + (-0.5));
        float _809 = _806 * (_769.z + (-0.5));
        float _816 = exp2((_776.w + (-0.5)) * 20.0) * 2.0;
        float _817 = _816 * (_776.x + (-0.5));
        float _818 = _816 * (_776.y + (-0.5));
        float _819 = _816 * (_776.z + (-0.5));
        float _826 = exp2((_783.w + (-0.5)) * 20.0) * 2.0;
        float _827 = _826 * (_783.x + (-0.5));
        float _828 = _826 * (_783.y + (-0.5));
        float _829 = _826 * (_783.z + (-0.5));
        float _830 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _831 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _832 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _833 = _797 * 0.5;
        float _834 = _807 * 0.5;
        float _835 = _817 * 0.5;
        float _836 = dot(vec3(_833, _834, _835), vec3(_833, _834, _835));
        float _841 = (_836 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_836);
        float _850 = (dot(vec3(_444, _445, _446), vec3(_841 * _833, _841 * _834, _841 * _835)) + 1.0) * 0.5;
        float _3440 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _860 = sqrt(((_834 * _834) + (_833 * _833)) + (_835 * _835)) / (_830 + 9.9999997473787516355514526367188e-06);
        float _3451 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _861 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
        float _862 = _861 * 2.0;
        float _866 = (1.0 - _861) / (_861 + 1.0);
        float _3462 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
        float _876 = ((((1.0 - _867) * (_862 + 2.0)) * exp2(log2(isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0))) * (_862 + 1.0))) + _867) * _830;
        float _877 = _798 * 0.5;
        float _878 = _808 * 0.5;
        float _879 = _818 * 0.5;
        float _880 = dot(vec3(_877, _878, _879), vec3(_877, _878, _879));
        float _885 = (_880 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_880);
        float _893 = (dot(vec3(_444, _445, _446), vec3(_885 * _877, _885 * _878, _885 * _879)) + 1.0) * 0.5;
        float _3473 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _902 = sqrt(((_878 * _878) + (_877 * _877)) + (_879 * _879)) / (_831 + 9.9999997473787516355514526367188e-06);
        float _3484 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _903 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
        float _904 = _903 * 2.0;
        float _908 = (1.0 - _903) / (_903 + 1.0);
        float _3495 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _909 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _918 = ((((1.0 - _909) * (_904 + 2.0)) * exp2(log2(isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0))) * (_904 + 1.0))) + _909) * _831;
        float _919 = _799 * 0.5;
        float _920 = _809 * 0.5;
        float _921 = _819 * 0.5;
        float _922 = dot(vec3(_919, _920, _921), vec3(_919, _920, _921));
        float _927 = (_922 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_922);
        float _935 = (dot(vec3(_444, _445, _446), vec3(_927 * _919, _927 * _920, _927 * _921)) + 1.0) * 0.5;
        float _3506 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _944 = sqrt(((_920 * _920) + (_919 * _919)) + (_921 * _921)) / (_832 + 9.9999997473787516355514526367188e-06);
        float _3517 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _946 = _945 * 2.0;
        float _950 = (1.0 - _945) / (_945 + 1.0);
        float _3528 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _960 = ((((1.0 - _951) * (_946 + 2.0)) * exp2(log2(isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))) * (_946 + 1.0))) + _951) * _832;
        _968 = _799;
        _970 = _798;
        _971 = _797;
        _972 = _809;
        _973 = _808;
        _974 = _807;
        _975 = _819;
        _976 = _818;
        _977 = _817;
        _978 = _832;
        _979 = _831;
        _980 = _830;
        _981 = cbModelParam._m0[36u].z * (isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0)));
        _982 = cbModelParam._m0[36u].z * (isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0)));
        _983 = cbModelParam._m0[36u].z * (isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0)));
    }
    else
    {
        _968 = _969;
        _970 = _969;
        _971 = _969;
        _972 = _969;
        _973 = _969;
        _974 = _969;
        _975 = _969;
        _976 = _969;
        _977 = _969;
        _978 = _969;
        _979 = _969;
        _980 = _969;
        _981 = 0.0;
        _982 = 0.0;
        _983 = 0.0;
    }
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1009 = fma(_666, cbModelParam._m0[30u].z, fma(_662, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _658));
        float _1013 = fma(_666, cbModelParam._m0[31u].z, fma(_662, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _658));
        float _1017 = fma(_666, cbModelParam._m0[32u].z, fma(_662, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _658));
        float _1040 = _658 + _444;
        float _1041 = _662 + _445;
        float _1042 = _666 + _446;
        float _1052 = fma(_1042, cbModelParam._m0[30u].z, fma(_1041, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1040)) - _1009;
        float _1053 = fma(_1042, cbModelParam._m0[31u].z, fma(_1041, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1040)) - _1013;
        float _1054 = fma(_1042, cbModelParam._m0[32u].z, fma(_1041, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1040)) - _1017;
        float _1058 = inversesqrt(dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054)));
        float _1071 = ((_1058 * _1052) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1009 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1072 = ((_1058 * _1053) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1013 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1073 = ((_1058 * _1054) / cbModelParam._m0[35u].z) + ((((((_1017 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        float _1108 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1075.x + (-0.5));
        float _1110 = _1108 * (_1075.y + (-0.5));
        float _1111 = _1108 * (_1075.z + (-0.5));
        float _1118 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1082.x + (-0.5));
        float _1120 = _1118 * (_1082.y + (-0.5));
        float _1121 = _1118 * (_1082.z + (-0.5));
        float _1128 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1089.x + (-0.5));
        float _1130 = _1128 * (_1089.y + (-0.5));
        float _1131 = _1128 * (_1089.z + (-0.5));
        float _1138 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1096.x + (-0.5));
        float _1140 = _1138 * (_1096.y + (-0.5));
        float _1141 = _1138 * (_1096.z + (-0.5));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = _1109 * 0.5;
        float _1146 = _1119 * 0.5;
        float _1147 = _1129 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1161 = (dot(vec3(_444, _445, _446), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _3569 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1170 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _3580 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _3591 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) * (_1172 + 1.0))) + _1177) * _1142;
        float _1187 = _1110 * 0.5;
        float _1188 = _1120 * 0.5;
        float _1189 = _1130 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1203 = (dot(vec3(_444, _445, _446), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _3602 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1212 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _3613 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _3624 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * (_1214 + 1.0))) + _1219) * _1143;
        float _1229 = _1111 * 0.5;
        float _1230 = _1121 * 0.5;
        float _1231 = _1131 * 0.5;
        float _1232 = dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231));
        float _1237 = (_1232 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1232);
        float _1245 = (dot(vec3(_444, _445, _446), vec3(_1237 * _1229, _1237 * _1230, _1237 * _1231)) + 1.0) * 0.5;
        float _3635 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1254 = sqrt(((_1230 * _1230) + (_1229 * _1229)) + (_1231 * _1231)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _3646 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _3657 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) * (_1256 + 1.0))) + _1261) * _1144;
        _1278 = _1111;
        _1279 = _1110;
        _1280 = _1109;
        _1281 = _1121;
        _1282 = _1120;
        _1283 = _1119;
        _1284 = _1131;
        _1285 = _1130;
        _1286 = _1129;
        _1287 = _1144;
        _1288 = _1143;
        _1289 = _1142;
        _1290 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
        _1291 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
        _1292 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
    }
    else
    {
        _1278 = _969;
        _1279 = _969;
        _1280 = _969;
        _1281 = _969;
        _1282 = _969;
        _1283 = _969;
        _1284 = _969;
        _1285 = _969;
        _1286 = _969;
        _1287 = _969;
        _1288 = _969;
        _1289 = _969;
        _1290 = 0.0;
        _1291 = 0.0;
        _1292 = 0.0;
    }
    float _1302 = (cbModelParam._m0[1u].x * (_1290 - _981)) + _981;
    float _1303 = (cbModelParam._m0[1u].x * (_1291 - _982)) + _982;
    float _1304 = (cbModelParam._m0[1u].x * (_1292 - _983)) + _983;
    float _1325 = fma(_1304, cbSceneParam._m0[89u].z, fma(_1303, cbSceneParam._m0[89u].y, _1302 * cbSceneParam._m0[89u].x));
    float _1328 = fma(_1304, cbSceneParam._m0[90u].z, fma(_1303, cbSceneParam._m0[90u].y, _1302 * cbSceneParam._m0[90u].x));
    float _1331 = fma(_1304, cbSceneParam._m0[91u].z, fma(_1303, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1302));
    float _1346 = _605 * 0.5;
    float _1347 = _606 * 0.5;
    float _1348 = _607 * 0.5;
    float _1349 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_1280, _1283, _1286, _1289));
    float _1352 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_1279, _1282, _1285, _1288));
    float _1355 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_1278, _1281, _1284, _1287));
    float _1389;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1362 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_968, _972, _975, _978));
        float _1366 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_970, _973, _976, _979));
        float _1370 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_971, _974, _977, _980));
        float _1377 = dot(vec4(cbModelParam._m0[39u]), vec4(_1346, _1347, _1348, 1.0));
        _1389 = dot(vec3(isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)), isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)), isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1377) ? 0.0 : (isnan(0.0) ? _1377 : max(0.0, _1377))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1389 = 1.0;
    }
    float _1400;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1391 = dot(vec4(cbModelParam._m0[40u]), vec4(_1346, _1347, _1348, 1.0));
        _1400 = dot(vec3(isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)), isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)), isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1391) ? 0.0 : (isnan(0.0) ? _1391 : max(0.0, _1391))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1400 = 1.0;
    }
    float _1404 = (_1400 * cbModelParam._m0[1u].x) + (_1389 * (1.0 - cbModelParam._m0[1u].x));
    float _1414 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _447);
    float _1415 = isnan(_1414) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1414 : min(cbModelParam._m0[25u].z, _1414));
    float _1497;
    float _1499;
    float _1501;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1464 = fma(_666, cbModelParam._m0[13u].z, fma(_662, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _658)) + cbModelParam._m0[13u].w;
        float _1468 = fma(_666, cbModelParam._m0[14u].z, fma(_662, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _658)) + cbModelParam._m0[14u].w;
        float _1472 = fma(_666, cbModelParam._m0[15u].z, fma(_662, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _658)) + cbModelParam._m0[15u].w;
        float _1475 = fma(_607, cbModelParam._m0[13u].z, fma(_606, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _605));
        float _1478 = fma(_607, cbModelParam._m0[14u].z, fma(_606, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _605));
        float _1481 = fma(_607, cbModelParam._m0[15u].z, fma(_606, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _605));
        float _1509;
        if (_1475 > 0.0)
        {
            _1509 = abs((1.0 - _1464) / _1475);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1475 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1464 + 1.0) / _1475);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1509 = frontier_phi_16_14_ladder;
        }
        float _1713;
        if (_1478 > 0.0)
        {
            _1713 = abs((1.0 - _1468) / _1478);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1478 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1468 + 1.0) / _1478);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1713 = frontier_phi_25_21_ladder;
        }
        float _1956;
        if (_1481 > 0.0)
        {
            _1956 = abs((1.0 - _1472) / _1481);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1481 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1472 + 1.0) / _1481);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1956 = frontier_phi_37_32_ladder;
        }
        float _1958 = isnan(_1713) ? _1509 : (isnan(_1509) ? _1713 : min(_1509, _1713));
        float _1959 = isnan(_1956) ? _1958 : (isnan(_1958) ? _1956 : min(_1958, _1956));
        float _1963 = (_1959 * _1475) + _1464;
        float _1964 = (_1959 * _1478) + _1468;
        float _1965 = (_1959 * _1481) + _1472;
        float _1966 = _1959 * 9.9999997473787516355514526367188e-05;
        float _1968 = (-1.0) - _1966;
        float _1970 = _1966 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1965 > _1970) || ((_1965 < _1968) || ((_1964 > _1970) || ((_1964 < _1968) || ((_1963 < _1968) || (_1963 > _1970))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2089 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1965, cbModelParam._m0[9u].z, fma(_1964, cbModelParam._m0[9u].y, _1963 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1965, cbModelParam._m0[10u].z, fma(_1964, cbModelParam._m0[10u].y, _1963 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1965, cbModelParam._m0[11u].z, fma(_1964, cbModelParam._m0[11u].y, _1963 * cbModelParam._m0[11u].x))), _1415);
            frontier_phi_15_37_ladder = _2089.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2089.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2089.x * cbModelParam._m0[1u].y;
        }
        _1497 = frontier_phi_15_37_ladder_2;
        _1499 = frontier_phi_15_37_ladder_1;
        _1501 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1485 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_605, _606, _607), _1415);
        _1497 = _1485.x * cbModelParam._m0[1u].y;
        _1499 = _1485.y * cbModelParam._m0[1u].y;
        _1501 = _1485.z * cbModelParam._m0[1u].y;
    }
    float _1505 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _447);
    float _1506 = isnan(_1505) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1505 : min(cbModelParam._m0[25u].w, _1505));
    float _1599;
    float _1601;
    float _1603;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1563 = fma(_666, cbModelParam._m0[21u].z, fma(_662, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _658)) + cbModelParam._m0[21u].w;
        float _1567 = fma(_666, cbModelParam._m0[22u].z, fma(_662, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _658)) + cbModelParam._m0[22u].w;
        float _1571 = fma(_666, cbModelParam._m0[23u].z, fma(_662, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _658)) + cbModelParam._m0[23u].w;
        float _1574 = fma(_607, cbModelParam._m0[21u].z, fma(_606, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _605));
        float _1577 = fma(_607, cbModelParam._m0[22u].z, fma(_606, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _605));
        float _1580 = fma(_607, cbModelParam._m0[23u].z, fma(_606, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _605));
        float _1718;
        if (_1574 > 0.0)
        {
            _1718 = abs((1.0 - _1563) / _1574);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1574 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1563 + 1.0) / _1574);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1718 = frontier_phi_27_23_ladder;
        }
        float _1983;
        if (_1577 > 0.0)
        {
            _1983 = abs((1.0 - _1567) / _1577);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1567 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1983 = frontier_phi_39_34_ladder;
        }
        float _2188;
        if (_1580 > 0.0)
        {
            _2188 = abs((1.0 - _1571) / _1580);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1571 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2188 = frontier_phi_48_45_ladder;
        }
        float _2190 = isnan(_1983) ? _1718 : (isnan(_1718) ? _1983 : min(_1718, _1983));
        float _2191 = isnan(_2188) ? _2190 : (isnan(_2190) ? _2188 : min(_2190, _2188));
        float _2195 = (_2191 * _1574) + _1563;
        float _2196 = (_2191 * _1577) + _1567;
        float _2197 = (_2191 * _1580) + _1571;
        float _2198 = _2191 * 9.9999997473787516355514526367188e-05;
        float _2199 = (-1.0) - _2198;
        float _2201 = _2198 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2197 > _2201) || ((_2197 < _2199) || ((_2196 > _2201) || ((_2196 < _2199) || ((_2195 < _2199) || (_2195 > _2201))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2395 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2197, cbModelParam._m0[17u].z, fma(_2196, cbModelParam._m0[17u].y, _2195 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2197, cbModelParam._m0[18u].z, fma(_2196, cbModelParam._m0[18u].y, _2195 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2197, cbModelParam._m0[19u].z, fma(_2196, cbModelParam._m0[19u].y, _2195 * cbModelParam._m0[19u].x))), _1506);
            frontier_phi_24_48_ladder = _2395.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2395.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2395.x * cbModelParam._m0[1u].z;
        }
        _1599 = frontier_phi_24_48_ladder_2;
        _1601 = frontier_phi_24_48_ladder_1;
        _1603 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1583 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_605, _606, _607), _1506);
        _1599 = _1583.x * cbModelParam._m0[1u].z;
        _1601 = _1583.y * cbModelParam._m0[1u].z;
        _1603 = _1583.z * cbModelParam._m0[1u].z;
    }
    float _1615 = ((((1.0 - _626) * ((_613 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_626 * _613)) * _597;
    float _1616 = _1615 * ((cbModelParam._m0[1u].w * (_1599 - _1497)) + _1497);
    float _1617 = _1615 * ((cbModelParam._m0[1u].w * (_1601 - _1499)) + _1499);
    float _1618 = _1615 * ((cbModelParam._m0[1u].w * (_1603 - _1501)) + _1501);
    float _1621 = fma(_1618, cbSceneParam._m0[89u].z, fma(_1617, cbSceneParam._m0[89u].y, _1616 * cbSceneParam._m0[89u].x));
    float _1624 = fma(_1618, cbSceneParam._m0[90u].z, fma(_1617, cbSceneParam._m0[90u].y, _1616 * cbSceneParam._m0[90u].x));
    float _1627 = fma(_1618, cbSceneParam._m0[91u].z, fma(_1617, cbSceneParam._m0[91u].y, _1616 * cbSceneParam._m0[91u].x));
    uvec4 _1637 = floatBitsToUint(cbInstanceData._m0[_572 + 5u]);
    uint _1639 = _1637.x * 14u;
    uint _1640 = _1639 + 13u;
    float _1647 = _597 + (-1.0);
    float _1652 = (cbLight._m0[_1640].x * _1647) + 1.0;
    float _1653 = (cbLight._m0[_1640].y * _1647) + 1.0;
    float _1654 = (cbLight._m0[_1640].z * _1647) + 1.0;
    float _1655 = (cbLight._m0[_1640].w * _1647) + 1.0;
    uint _1656 = _1639 + 5u;
    float _1662 = isnan(1.0) ? _1653 : (isnan(_1653) ? 1.0 : min(_1653, 1.0));
    uint _1666 = _1639 + 4u;
    float _1672 = isnan(1.0) ? _1652 : (isnan(_1652) ? 1.0 : min(_1652, 1.0));
    uint _1676 = _1639 | 1u;
    float _1687 = dot(vec3(cbLight._m0[_1639].xyz), vec3(_444, _445, _446));
    float _1690 = dot(vec3(cbLight._m0[_1676].xyz), vec3(_444, _445, _446));
    float _3793 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
    float _3804 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
    float _1695 = (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * 0.3183098733425140380859375;
    float _1697 = (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * 0.3183098733425140380859375;
    float _1704 = ((cbLight._m0[_1656].x * _1662) * _1697) + ((cbLight._m0[_1666].x * _1672) * _1695);
    float _1705 = ((_1662 * cbLight._m0[_1656].y) * _1697) + ((_1672 * cbLight._m0[_1666].y) * _1695);
    float _1706 = ((_1662 * cbLight._m0[_1656].z) * _1697) + ((_1672 * cbLight._m0[_1666].z) * _1695);
    uvec4 _1710 = floatBitsToUint(cbLight._m0[_1639 + 12u]);
    bool _1712 = _1710.x == 0u;
    float _1723;
    float _1725;
    float _1727;
    if (_1712)
    {
        _1723 = _1704;
        _1725 = _1705;
        _1727 = _1706;
    }
    else
    {
        uint _1731 = _1639 + 6u;
        float _1747 = (dot(vec3(cbLight._m0[_1639 + 2u].xyz), vec3(_444, _445, _446)) * 0.5) + 0.5;
        float _1748 = _1747 * _1747;
        float _3815 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1749 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1750 = isnan(1.0) ? _1654 : (isnan(_1654) ? 1.0 : min(_1654, 1.0));
        _1723 = (((cbLight._m0[_1731].x * 0.3183098733425140380859375) * _1749) * _1750) + _1704;
        _1725 = (((cbLight._m0[_1731].y * 0.3183098733425140380859375) * _1749) * _1750) + _1705;
        _1727 = (((cbLight._m0[_1731].z * 0.3183098733425140380859375) * _1749) * _1750) + _1706;
    }
    bool _1730 = _1710.y == 0u;
    float _1768;
    float _1770;
    float _1772;
    if (_1730)
    {
        _1768 = _1723;
        _1770 = _1725;
        _1772 = _1727;
    }
    else
    {
        uint _1927 = _1639 + 7u;
        float _1943 = (dot(vec3(cbLight._m0[_1639 + 3u].xyz), vec3(_444, _445, _446)) * 0.5) + 0.5;
        float _1944 = _1943 * _1943;
        float _3831 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1945 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1946 = isnan(1.0) ? _1655 : (isnan(_1655) ? 1.0 : min(_1655, 1.0));
        _1768 = (((cbLight._m0[_1927].x * 0.3183098733425140380859375) * _1945) * _1946) + _1723;
        _1770 = (((cbLight._m0[_1927].y * 0.3183098733425140380859375) * _1945) * _1946) + _1725;
        _1772 = (((cbLight._m0[_1927].z * 0.3183098733425140380859375) * _1945) * _1946) + _1727;
    }
    uint _1775 = _1639 + 8u;
    float _1788 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1639].w)) * _447) * 0.949999988079071044921875);
    float _1789 = _1788 * _1788;
    float _1790 = cbLight._m0[_1639].x + _524;
    float _1791 = cbLight._m0[_1639].y + _525;
    float _1792 = cbLight._m0[_1639].z + _526;
    float _1796 = inversesqrt(dot(vec3(_1790, _1791, _1792), vec3(_1790, _1791, _1792)));
    float _1797 = _1796 * _1790;
    float _1798 = _1796 * _1791;
    float _1799 = _1796 * _1792;
    float _1800 = dot(vec3(_444, _445, _446), vec3(cbLight._m0[_1639].xyz));
    float _3847 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _1803 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _3858 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _1804 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _1805 = dot(vec3(_444, _445, _446), vec3(_1797, _1798, _1799));
    float _3869 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1808 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _1809 = dot(vec3(cbLight._m0[_1639].xyz), vec3(_1797, _1798, _1799));
    float _3880 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1813 = _1789 * _1789;
    float _1817 = ((_1808 * _1808) * (_1813 + (-1.0))) + 1.0;
    float _1828 = (exp2(log2(1.0 - (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1829 = 1.0 - _1789;
    float _1840 = (0.5 / (((_1804 * ((_1803 * _1829) + _1789)) + 9.9999999392252902907785028219223e-09) + (((_1804 * _1829) + _1789) * _1803))) * _1803;
    float _3891 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1842 = (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1813 / ((_1817 * _1817) * 3.141590118408203125));
    uint _1853 = _1639 + 9u;
    float _1864 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1676].w)) * _447) * 0.949999988079071044921875);
    float _1865 = _1864 * _1864;
    float _1866 = cbLight._m0[_1676].x + _524;
    float _1867 = cbLight._m0[_1676].y + _525;
    float _1868 = cbLight._m0[_1676].z + _526;
    float _1872 = inversesqrt(dot(vec3(_1866, _1867, _1868), vec3(_1866, _1867, _1868)));
    float _1873 = _1872 * _1866;
    float _1874 = _1872 * _1867;
    float _1875 = _1872 * _1868;
    float _1876 = dot(vec3(_444, _445, _446), vec3(cbLight._m0[_1676].xyz));
    float _3902 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1879 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _1880 = dot(vec3(_444, _445, _446), vec3(_1873, _1874, _1875));
    float _3913 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1883 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _1884 = dot(vec3(cbLight._m0[_1676].xyz), vec3(_1873, _1874, _1875));
    float _3924 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1888 = _1865 * _1865;
    float _1892 = ((_1883 * _1883) * (_1888 + (-1.0))) + 1.0;
    float _1901 = (exp2(log2(1.0 - (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1902 = 1.0 - _1865;
    float _1912 = (0.5 / (((_1804 * ((_1879 * _1902) + _1865)) + 9.9999999392252902907785028219223e-09) + (((_1804 * _1902) + _1865) * _1879))) * _1879;
    float _3935 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1914 = (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * (_1888 / ((_1892 * _1892) * 3.141590118408203125));
    float _1924 = (((_1901 * cbLight._m0[_1853].x) * _1914) * _1662) + (((_1828 * cbLight._m0[_1775].x) * _1842) * _1672);
    float _1925 = (((_1901 * cbLight._m0[_1853].y) * _1914) * _1662) + (((_1828 * cbLight._m0[_1775].y) * _1842) * _1672);
    float _1926 = (((_1901 * cbLight._m0[_1853].z) * _1914) * _1662) + (((_1828 * cbLight._m0[_1775].z) * _1842) * _1672);
    float _1988;
    float _1990;
    float _1992;
    if (_1712)
    {
        _1988 = _1924;
        _1990 = _1925;
        _1992 = _1926;
    }
    else
    {
        uint _1994 = _1639 + 2u;
        uint _1998 = _1639 + 10u;
        float _2012 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1994].w)) * _447) * 0.949999988079071044921875);
        float _2013 = _2012 * _2012;
        float _2014 = cbLight._m0[_1994].x + _524;
        float _2015 = cbLight._m0[_1994].y + _525;
        float _2016 = cbLight._m0[_1994].z + _526;
        float _2020 = inversesqrt(dot(vec3(_2014, _2015, _2016), vec3(_2014, _2015, _2016)));
        float _2021 = _2020 * _2014;
        float _2022 = _2020 * _2015;
        float _2023 = _2020 * _2016;
        float _2024 = dot(vec3(_444, _445, _446), vec3(cbLight._m0[_1994].xyz));
        float _3946 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        float _2027 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _2028 = dot(vec3(_444, _445, _446), vec3(_2021, _2022, _2023));
        float _3957 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _2031 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _2032 = dot(vec3(cbLight._m0[_1994].xyz), vec3(_2021, _2022, _2023));
        float _3968 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        float _2036 = _2013 * _2013;
        float _2040 = ((_2031 * _2031) * (_2036 + (-1.0))) + 1.0;
        float _2049 = (exp2(log2(1.0 - (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2050 = 1.0 - _2013;
        float _2060 = (0.5 / (((_1804 * ((_2027 * _2050) + _2013)) + 9.9999999392252902907785028219223e-09) + (((_1804 * _2050) + _2013) * _2027))) * _2027;
        float _3979 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
        float _2062 = (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_2036 / ((_2040 * _2040) * 3.141590118408203125));
        float _2063 = isnan(1.0) ? _1654 : (isnan(_1654) ? 1.0 : min(_1654, 1.0));
        _1988 = (((_2049 * cbLight._m0[_1998].x) * _2062) * _2063) + _1924;
        _1990 = (((_2049 * cbLight._m0[_1998].y) * _2062) * _2063) + _1925;
        _1992 = (((_2049 * cbLight._m0[_1998].z) * _2062) * _2063) + _1926;
    }
    float _2098;
    float _2100;
    float _2102;
    if (_1730)
    {
        _2098 = _1988;
        _2100 = _1990;
        _2102 = _1992;
    }
    else
    {
        uint _2109 = _1639 + 3u;
        uint _2113 = _1639 + 11u;
        float _2127 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2109].w)) * _447) * 0.949999988079071044921875);
        float _2128 = _2127 * _2127;
        float _2129 = cbLight._m0[_2109].x + _524;
        float _2130 = cbLight._m0[_2109].y + _525;
        float _2131 = cbLight._m0[_2109].z + _526;
        float _2135 = inversesqrt(dot(vec3(_2129, _2130, _2131), vec3(_2129, _2130, _2131)));
        float _2136 = _2135 * _2129;
        float _2137 = _2135 * _2130;
        float _2138 = _2135 * _2131;
        float _2139 = dot(vec3(_444, _445, _446), vec3(cbLight._m0[_2109].xyz));
        float _3995 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2142 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _2143 = dot(vec3(_444, _445, _446), vec3(_2136, _2137, _2138));
        float _4006 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2146 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _2147 = dot(vec3(cbLight._m0[_2109].xyz), vec3(_2136, _2137, _2138));
        float _4017 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2151 = _2128 * _2128;
        float _2155 = ((_2146 * _2146) * (_2151 + (-1.0))) + 1.0;
        float _2164 = (exp2(log2(1.0 - (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2165 = 1.0 - _2128;
        float _2175 = (0.5 / (((_1804 * ((_2142 * _2165) + _2128)) + 9.9999999392252902907785028219223e-09) + (((_1804 * _2165) + _2128) * _2142))) * _2142;
        float _4028 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        float _2177 = (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_2151 / ((_2155 * _2155) * 3.141590118408203125));
        float _2178 = isnan(1.0) ? _1655 : (isnan(_1655) ? 1.0 : min(_1655, 1.0));
        _2098 = (((_2164 * cbLight._m0[_2113].x) * _2177) * _2178) + _1988;
        _2100 = (((_2164 * cbLight._m0[_2113].y) * _2177) * _2178) + _1990;
        _2102 = (((_2164 * cbLight._m0[_2113].z) * _2177) * _2178) + _1992;
    }
    float _2312;
    float _2314;
    float _2316;
    float _2318;
    float _2320;
    float _2322;
    if (_1637.y == 0u)
    {
        float _2253 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2254 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2253;
        float _2255 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2253;
        float _2256 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2253;
        uvec4 _2268 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2269 = _2268.x;
        uint _2280 = uint((float(_2268.y) * floor(float(uint(cbSceneParam._m0[85u].y * _533) / _2269))) + floor(float(uint(cbSceneParam._m0[85u].x * _532) / _2269)));
        float _2290 = (log2(_2256 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2291 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        uint _2294 = uint(isnan(14.0) ? _2291 : (isnan(_2291) ? 14.0 : min(_2291, 14.0)));
        uvec4 _2299 = texelFetch(g_lightClusterGridBuffer, int(((_2294 << 2u) + (_2280 << 6u)) >> 2u));
        uint _2300 = _2299.x;
        uint _2301 = _2268.z;
        float _2400;
        float _2402;
        float _2404;
        float _2406;
        float _2408;
        float _2410;
        if (((((1u << ((_2301 >> 4u) & 15u)) + 4294967295u) & _2300) == 0u) || ((_2301 & 240u) == 0u))
        {
            _2400 = 0.0;
            _2402 = 0.0;
            _2404 = 0.0;
            _2406 = 0.0;
            _2408 = 0.0;
            _2410 = 0.0;
        }
        else
        {
            float _2401;
            float _2403;
            float _2405;
            float _2407;
            float _2409;
            float _2411;
            float _2544 = 0.0;
            float _2545 = 0.0;
            float _2546 = 0.0;
            float _2547 = 0.0;
            float _2548 = 0.0;
            float _2549 = 0.0;
            uint _2550 = 0u;
            uint _2559;
            bool _2560;
            for (;;)
            {
                _2559 = texelFetch(g_lightClassification, int((((_2294 << 5u) + (_2280 << 9u)) + (_2550 << 2u)) >> 2u)).x;
                _2560 = _2559 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2560)
                {
                    frontier_phi_63_pred = _2549;
                    frontier_phi_63_pred_1 = _2548;
                    frontier_phi_63_pred_2 = _2547;
                    frontier_phi_63_pred_3 = _2546;
                    frontier_phi_63_pred_4 = _2545;
                    frontier_phi_63_pred_5 = _2544;
                }
                else
                {
                    float _2668;
                    float _2669;
                    float _2670;
                    float _2671;
                    float _2672;
                    float _2673;
                    uint _2674;
                    _2668 = _2544;
                    _2669 = _2545;
                    _2670 = _2546;
                    _2671 = _2547;
                    _2672 = _2548;
                    _2673 = _2549;
                    _2674 = _2559;
                    float _2600;
                    float _2601;
                    float _2602;
                    float _2603;
                    float _2604;
                    float _2605;
                    for (;;)
                    {
                        uint _2678 = uint(findLSB(_2674)) + (_2550 << 5u);
                        uint _2675 = (_2674 + 4294967295u) & _2674;
                        uint _2680 = _2678 * 48u;
                        vec4 _2694 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2680)).x, texelFetch(g_PointLightRenderingBuffer, int(_2680 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2680 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2680 + 3u)).x));
                        uint _2700 = (_2678 * 48u) + 4u;
                        vec4 _2713 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2700)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 3u)).x));
                        uint _2719 = (_2678 * 48u) + 8u;
                        vec3 _2730 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2719)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 2u)).x));
                        float _2734 = _2694.x - _2254;
                        float _2735 = _2694.y - _2255;
                        float _2736 = _2694.z - _2256;
                        float _2737 = dot(vec3(_2734, _2735, _2736), vec3(_2734, _2735, _2736));
                        float _2740 = inversesqrt(_2737);
                        float _2741 = _2740 * _2734;
                        float _2742 = _2740 * _2735;
                        float _2743 = _2740 * _2736;
                        float _2744 = dot(vec3(_553, _556, _559), vec3(_2741, _2742, _2743));
                        float _2749 = 1.0 - (_2737 * _2694.w);
                        float _4054 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
                        float _2750 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
                        float _2751 = sqrt(_2737) * _2713.w;
                        float _2754 = 1.39999997615814208984375 / (_2751 + 1.39999997615814208984375);
                        float _2755 = _2754 * _2754;
                        float _2758 = ((1.0 - _2755) * _2744) + _2755;
                        float _2761 = _2751 * _2751;
                        float _2765 = ((isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0))) * _2750) / ((_2761 * 0.699999988079071044921875) + 1.0);
                        float _2769 = (-0.0) - _2254;
                        float _2770 = (-0.0) - _2255;
                        float _2771 = (-0.0) - _2256;
                        float _2775 = inversesqrt(dot(vec3(_2769, _2770, _2771), vec3(_2769, _2770, _2771)));
                        float _2776 = _2775 * _2769;
                        float _2777 = _2775 * _2770;
                        float _2778 = _2775 * _2771;
                        float _2786 = exp2(log2(1.0 / ((_2761 * 3.5) + 5.0)) * 0.25);
                        float _2787 = 1.0 - _613;
                        float _2794 = sqrt(1.0 - ((1.0 - (_2787 * _2787)) * (1.0 - (_2786 * _2786))));
                        float _2795 = _2794 * _2794;
                        float _2796 = _2795 * _2795;
                        float _2797 = _2776 + _2741;
                        float _2798 = _2777 + _2742;
                        float _2799 = _2778 + _2743;
                        float _2803 = inversesqrt(dot(vec3(_2797, _2798, _2799), vec3(_2797, _2798, _2799)));
                        float _2807 = dot(vec3(_553, _556, _559), vec3(_2776, _2777, _2778));
                        float _4070 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
                        float _2810 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
                        float _2811 = dot(vec3(_553, _556, _559), vec3(_2803 * _2797, _2803 * _2798, _2803 * _2799));
                        float _4081 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
                        float _2814 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                        float _2818 = ((_2814 * _2814) * (_2796 + (-1.0))) + 1.0;
                        float _2819 = _2754 * _2795;
                        float _2820 = _2819 * _2819;
                        float _2823 = ((1.0 - _2820) * _2744) + _2820;
                        float _4092 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
                        float _2824 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
                        float _2825 = 1.0 - _2795;
                        float _2835 = (0.5 / (((_2824 * ((_2810 * _2825) + _2795)) + 9.9999999392252902907785028219223e-09) + (((_2824 * _2825) + _2795) * _2810))) * _2824;
                        float _4103 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
                        float _2846 = (((_2796 * 3.1415927410125732421875) * (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) / ((_2818 * _2818) * ((_2761 * 2.1991131305694580078125) + 3.141590118408203125))) * _2750;
                        _2603 = (_2765 * _2713.x) + _2671;
                        _2604 = (_2765 * _2713.y) + _2672;
                        _2605 = (_2765 * _2713.z) + _2673;
                        _2600 = (_2846 * _2730.x) + _2668;
                        _2601 = (_2846 * _2730.y) + _2669;
                        _2602 = (_2846 * _2730.z) + _2670;
                        if (_2675 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2668 = _2600;
                            _2669 = _2601;
                            _2670 = _2602;
                            _2671 = _2603;
                            _2672 = _2604;
                            _2673 = _2605;
                            _2674 = _2675;
                        }
                    }
                    frontier_phi_63_pred = _2605;
                    frontier_phi_63_pred_1 = _2604;
                    frontier_phi_63_pred_2 = _2603;
                    frontier_phi_63_pred_3 = _2602;
                    frontier_phi_63_pred_4 = _2601;
                    frontier_phi_63_pred_5 = _2600;
                }
                _2411 = frontier_phi_63_pred;
                _2409 = frontier_phi_63_pred_1;
                _2407 = frontier_phi_63_pred_2;
                _2405 = frontier_phi_63_pred_3;
                _2403 = frontier_phi_63_pred_4;
                _2401 = frontier_phi_63_pred_5;
                uint _2551 = _2550 + 1u;
                if (_2551 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2544 = _2401;
                    _2545 = _2403;
                    _2546 = _2405;
                    _2547 = _2407;
                    _2548 = _2409;
                    _2549 = _2411;
                    _2550 = _2551;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2400 = _2401;
            _2402 = _2403;
            _2404 = _2405;
            _2406 = _2407;
            _2408 = _2409;
            _2410 = _2411;
        }
        uvec4 _2414 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2415 = _2414.z;
        uint _2417 = (_2415 >> 8u) & 15u;
        float _2512;
        float _2514;
        float _2516;
        float _2518;
        float _2520;
        float _2522;
        if (((4294967295u << _2417) & _2300) == 0u)
        {
            _2512 = _2400;
            _2514 = _2402;
            _2516 = _2404;
            _2518 = _2406;
            _2520 = _2408;
            _2522 = _2410;
        }
        else
        {
            float _2537 = inversesqrt(dot(vec3(_2254, _2255, _2256), vec3(_2254, _2255, _2256)));
            float _2538 = _2537 * _2254;
            float _2539 = _2537 * _2255;
            float _2540 = _2537 * _2256;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2417 < ((_2415 >> 12u) & 15u))
            {
                float _2513;
                float _2515;
                float _2517;
                float _2519;
                float _2521;
                float _2523;
                float _2651 = _2400;
                float _2652 = _2402;
                float _2653 = _2404;
                float _2654 = _2406;
                float _2655 = _2408;
                float _2656 = _2410;
                uint _2657 = _2417;
                uint _2666;
                bool _2667;
                for (;;)
                {
                    _2666 = texelFetch(g_lightClassification, int((((_2294 << 5u) + (_2280 << 9u)) + (_2657 << 2u)) >> 2u)).x;
                    _2667 = _2666 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2667)
                    {
                        frontier_phi_69_pred = _2656;
                        frontier_phi_69_pred_1 = _2655;
                        frontier_phi_69_pred_2 = _2654;
                        frontier_phi_69_pred_3 = _2653;
                        frontier_phi_69_pred_4 = _2652;
                        frontier_phi_69_pred_5 = _2651;
                    }
                    else
                    {
                        float _2851;
                        float _2852;
                        float _2853;
                        float _2854;
                        float _2855;
                        float _2856;
                        float _3147;
                        float _3148;
                        float _3149;
                        float _3150;
                        float _3151;
                        float _3152;
                        float _2864 = _2651;
                        float _2865 = _2652;
                        float _2866 = _2653;
                        float _2867 = _2654;
                        float _2868 = _2655;
                        float _2869 = _2656;
                        uint _2870 = _2666;
                        uint _2871;
                        vec4 _2896;
                        float _2897;
                        vec4 _2912;
                        vec3 _2924;
                        vec4 _2940;
                        vec4 _2956;
                        float _3003;
                        bool _3004;
                        for (;;)
                        {
                            uint _2881 = ((_2657 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2870));
                            _2871 = (_2870 + 4294967295u) & _2870;
                            uint _2883 = _2881 * 40u;
                            _2896 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2883)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 3u)).x));
                            _2897 = _2896.w;
                            uint _2899 = (_2881 * 40u) + 4u;
                            _2912 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2899)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 3u)).x));
                            uint _2914 = (_2881 * 40u) + 8u;
                            _2924 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2914)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 2u)).x));
                            uint _2927 = (_2881 * 40u) + 16u;
                            _2940 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2927)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 3u)).x));
                            uint _2943 = (_2881 * 40u) + 20u;
                            _2956 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2943)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 3u)).x));
                            uint _2959 = (_2881 * 40u) + 24u;
                            vec4 _2972 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2959)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 3u)).x));
                            uint _2978 = (_2881 * 40u) + 28u;
                            vec4 _2991 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2978)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 3u)).x));
                            _3003 = fma(_2256, _2991.z, fma(_2255, _2991.y, _2991.x * _2254)) + _2991.w;
                            _3004 = !((fma(_2256, _2972.z, fma(_2255, _2972.y, _2972.x * _2254)) + _2972.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3004)
                            {
                                float _3031 = _2896.x - _2254;
                                float _3032 = _2896.y - _2255;
                                float _3033 = _2896.z - _2256;
                                float _3034 = dot(vec3(_3031, _3032, _3033), vec3(_3031, _3032, _3033));
                                float _3037 = inversesqrt(_3034);
                                float _3038 = _3037 * _3031;
                                float _3039 = _3037 * _3032;
                                float _3040 = _3037 * _3033;
                                float _3044 = 1.0 - (_3034 / (_2897 * _2897));
                                float _4114 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                                float _3045 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
                                float _3049 = sqrt(_3034) * _2912.w;
                                float _3051 = 1.39999997615814208984375 / (_3049 + 1.39999997615814208984375);
                                float _3052 = _3051 * _3051;
                                float _3055 = ((1.0 - _3052) * dot(vec3(_3038, _3039, _3040), vec3(_553, _556, _559))) + _3052;
                                float _3058 = _3049 * _3049;
                                float _3062 = (fma(_2256, _2940.z, fma(_2255, _2940.y, _2940.x * _2254)) + _2940.w) / _3003;
                                float _3063 = (fma(_2256, _2956.z, fma(_2255, _2956.y, _2956.x * _2254)) + _2956.w) / _3003;
                                float _3067 = 1.0 - dot(vec2(_3062, _3063), vec2(_3062, _3063));
                                float _4130 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                                float _3068 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
                                float _3069 = _3068 * (((isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0))) * _3045) / ((_3058 * 0.699999988079071044921875) + 1.0));
                                float _3081 = exp2(log2(1.0 / ((_3058 * 3.5) + 5.0)) * 0.25);
                                float _3082 = 1.0 - _613;
                                float _3089 = sqrt(1.0 - ((1.0 - (_3082 * _3082)) * (1.0 - (_3081 * _3081))));
                                float _3090 = _3089 * _3089;
                                float _3091 = _3090 * _3090;
                                float _3092 = _3038 - _2538;
                                float _3093 = _3039 - _2539;
                                float _3094 = _3040 - _2540;
                                float _3098 = inversesqrt(dot(vec3(_3092, _3093, _3094), vec3(_3092, _3093, _3094)));
                                float _3102 = dot(vec3(_553, _556, _559), vec3((-0.0) - _2538, (-0.0) - _2539, (-0.0) - _2540));
                                float _4141 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                                float _3105 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                                float _3106 = dot(vec3(_553, _556, _559), vec3(_3098 * _3092, _3098 * _3093, _3098 * _3094));
                                float _4152 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                                float _3109 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                                float _3113 = ((_3109 * _3109) * (_3091 + (-1.0))) + 1.0;
                                float _3114 = _3051 * _3090;
                                float _3115 = _3114 * _3114;
                                float _3121 = ((1.0 - _3115) * dot(vec3(_553, _556, _559), vec3(_3038, _3039, _3040))) + _3115;
                                float _4163 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                                float _3122 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
                                float _3123 = 1.0 - _3090;
                                float _3133 = (0.5 / (((_3122 * ((_3105 * _3123) + _3090)) + 9.9999999392252902907785028219223e-09) + (((_3122 * _3123) + _3090) * _3105))) * _3122;
                                float _4174 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                                float _3143 = (_3068 * _3045) * (((_3091 * 3.1415927410125732421875) * (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) / ((_3113 * _3113) * ((_3058 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3069 * _2912.z;
                                frontier_phi_75_pred_1 = _3069 * _2912.y;
                                frontier_phi_75_pred_2 = _3069 * _2912.x;
                                frontier_phi_75_pred_3 = _3143 * _2924.z;
                                frontier_phi_75_pred_4 = _3143 * _2924.y;
                                frontier_phi_75_pred_5 = _3143 * _2924.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3152 = frontier_phi_75_pred;
                            _3151 = frontier_phi_75_pred_1;
                            _3150 = frontier_phi_75_pred_2;
                            _3149 = frontier_phi_75_pred_3;
                            _3148 = frontier_phi_75_pred_4;
                            _3147 = frontier_phi_75_pred_5;
                            _2854 = _3150 + _2867;
                            _2855 = _3151 + _2868;
                            _2856 = _3152 + _2869;
                            _2851 = _3147 + _2864;
                            _2852 = _3148 + _2865;
                            _2853 = _3149 + _2866;
                            if (_2871 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2864 = _2851;
                                _2865 = _2852;
                                _2866 = _2853;
                                _2867 = _2854;
                                _2868 = _2855;
                                _2869 = _2856;
                                _2870 = _2871;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2856;
                        frontier_phi_69_pred_1 = _2855;
                        frontier_phi_69_pred_2 = _2854;
                        frontier_phi_69_pred_3 = _2853;
                        frontier_phi_69_pred_4 = _2852;
                        frontier_phi_69_pred_5 = _2851;
                    }
                    _2523 = frontier_phi_69_pred;
                    _2521 = frontier_phi_69_pred_1;
                    _2519 = frontier_phi_69_pred_2;
                    _2517 = frontier_phi_69_pred_3;
                    _2515 = frontier_phi_69_pred_4;
                    _2513 = frontier_phi_69_pred_5;
                    uint _2658 = _2657 + 1u;
                    if (_2658 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2651 = _2513;
                        _2652 = _2515;
                        _2653 = _2517;
                        _2654 = _2519;
                        _2655 = _2521;
                        _2656 = _2523;
                        _2657 = _2658;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2523;
                frontier_phi_57_58_ladder_1 = _2521;
                frontier_phi_57_58_ladder_2 = _2519;
                frontier_phi_57_58_ladder_3 = _2517;
                frontier_phi_57_58_ladder_4 = _2515;
                frontier_phi_57_58_ladder_5 = _2513;
            }
            else
            {
                frontier_phi_57_58_ladder = _2410;
                frontier_phi_57_58_ladder_1 = _2408;
                frontier_phi_57_58_ladder_2 = _2406;
                frontier_phi_57_58_ladder_3 = _2404;
                frontier_phi_57_58_ladder_4 = _2402;
                frontier_phi_57_58_ladder_5 = _2400;
            }
            _2512 = frontier_phi_57_58_ladder_5;
            _2514 = frontier_phi_57_58_ladder_4;
            _2516 = frontier_phi_57_58_ladder_3;
            _2518 = frontier_phi_57_58_ladder_2;
            _2520 = frontier_phi_57_58_ladder_1;
            _2522 = frontier_phi_57_58_ladder;
        }
        float _2527 = isnan(1.0) ? _597 : (isnan(_597) ? 1.0 : min(_597, 1.0));
        _2312 = (_2527 * _2518) + _1768;
        _2314 = (_2527 * _2520) + _1770;
        _2316 = (_2527 * _2522) + _1772;
        _2318 = ((_2512 * 0.039999999105930328369140625) * _2527) + _2098;
        _2320 = ((_2514 * 0.039999999105930328369140625) * _2527) + _2100;
        _2322 = ((_2516 * 0.039999999105930328369140625) * _2527) + _2102;
    }
    else
    {
        _2312 = _1768;
        _2314 = _1770;
        _2316 = _1772;
        _2318 = _2098;
        _2320 = _2100;
        _2322 = _2102;
    }
    float _4190 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _4201 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _4212 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    uint _2342 = _572 + 6u;
    float _2350 = _532 / cbSceneParam._m0[86u].x;
    float _2351 = _533 / cbSceneParam._m0[86u].y;
    vec4 _2365 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2350, _2351, (log2((isnan(cbSceneParam._m0[77u].w) ? _466 : (isnan(_466) ? cbSceneParam._m0[77u].w : min(_466, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2367 = _2365.x;
    float _2368 = _2365.y;
    float _2369 = _2365.z;
    float _2370 = _2365.w;
    float _2462;
    float _2464;
    float _2466;
    float _2468;
    if (_466 > cbSceneParam._m0[78u].w)
    {
        float _2425 = isnan(_466) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _466 : min(cbSceneParam._m0[80u].w, _466));
        float _2426 = _2425 / _466;
        float _2437 = _2426 * _517;
        float _2438 = _518 * _2426;
        float _2439 = (-0.0) - _2438;
        float _2440 = _2426 * _519;
        float _2442 = (cbSceneParam._m0[77u].w * _2439) / _2425;
        float _2443 = _2442 + cbSceneParam._m0[79u].w;
        float _2444 = cbSceneParam._m0[79u].w - _2438;
        float _2450 = sqrt(((_2437 * _2437) + (_2438 * _2438)) + (_2440 * _2440));
        float _2453 = (1.0 - (cbSceneParam._m0[77u].w / _2425)) * _2450;
        float _2458 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2460 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2613;
        if (abs((_2439 - _2442) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2613 = ((((_2443 > 0.0) ? exp2(_2458 * _2443) : (2.0 - exp2(_2460 * _2443))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2453;
        }
        else
        {
            float _2573 = 1.0 / cbSceneParam._m0[80u].x;
            float _2574 = isnan(_2444) ? _2443 : (isnan(_2443) ? _2444 : max(_2443, _2444));
            float _2575 = isnan(_2444) ? _2443 : (isnan(_2443) ? _2444 : min(_2443, _2444));
            float _2584 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : min(_2574, 0.0));
            float _2585 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : min(_2575, 0.0));
            _2613 = ((abs(_2450 / _2439) * cbSceneParam._m0[80u].y) * ((((_2584 - _2585) * 2.0) - ((exp2(_2458 * (isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0)))) - exp2(_2458 * (isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0))))) * _2573)) - ((exp2(_2460 * _2584) - exp2(_2460 * _2585)) * _2573))) + (_2453 * cbSceneParam._m0[80u].z);
        }
        vec4 _2615 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2350, _2351, 1.0), 0.0);
        float _2624 = exp2((_2613 * (-1.44269502162933349609375)) * (1.0 - _2615.w));
        float _2625 = log2(_2624);
        float _2641 = log2(_2370);
        _2462 = (exp2(_2641 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2625 * cbSceneParam._m0[78u].x)) * _2615.x) / cbSceneParam._m0[78u].x)) + _2367;
        _2464 = (exp2(_2641 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2625 * cbSceneParam._m0[78u].y)) * _2615.y) / cbSceneParam._m0[78u].y)) + _2368;
        _2466 = (exp2(_2641 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2625 * cbSceneParam._m0[78u].z)) * _2615.z) / cbSceneParam._m0[78u].z)) + _2369;
        _2468 = _2624 * _2370;
    }
    else
    {
        _2462 = _2367;
        _2464 = _2368;
        _2466 = _2369;
        _2468 = _2370;
    }
    float _2480 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2481 = _2480 == 3.0;
    float _2482 = log2(_2468);
    float _2489 = exp2(_2482 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_2312 + ((isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0))) * _597))) + ((_2318 + ((isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))) * _1404)) * cbPerFrame._m0[3u].x));
    float _2490 = exp2(_2482 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_2314 + ((isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0))) * _597))) + ((_2320 + ((isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))) * _1404)) * cbPerFrame._m0[3u].x));
    float _2491 = exp2(_2482 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_2316 + ((isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0))) * _597))) + ((_2322 + ((isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))) * _1404)) * cbPerFrame._m0[3u].x));
    float _2500 = (_2480 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2500 * (_2481 ? _2489 : (_2489 + (cbSceneParam._m0[72u].w * _2462)));
    SV_Target.y = _2500 * (_2481 ? _2490 : (_2490 + (cbSceneParam._m0[72u].w * _2464)));
    SV_Target.z = _2500 * (_2481 ? _2491 : (_2491 + (cbSceneParam._m0[72u].w * _2466)));
    SV_Target.w = cbInstanceData._m0[_2342].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2342].w;
}


