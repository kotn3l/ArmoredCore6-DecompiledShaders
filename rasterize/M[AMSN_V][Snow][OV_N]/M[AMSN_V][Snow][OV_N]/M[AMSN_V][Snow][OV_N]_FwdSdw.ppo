#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Snow_OV_N_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Snow_OV_N_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Snow_OV_N_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Snow_OV_N_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Snow_OV_N_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Snow_OV_N_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _973;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _199 = _198 * _190;
    float _200 = _198 * _191;
    float _201 = _198 * _192;
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = _205 * NORMAL.x;
    float _207 = _205 * NORMAL.y;
    float _208 = _205 * NORMAL.z;
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213 = _212 * TANGENT.x;
    float _214 = _212 * TANGENT.y;
    float _215 = _212 * TANGENT.z;
    float _220;
    float _221;
    float _222;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
    }
    else
    {
        _220 = _206;
        _221 = _207;
        _222 = _208;
    }
    vec4 _241 = texture(sampler2D(M_AMSN_V_Snow_OV_N_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _246 = _241.z;
    float _250 = (_241.x * 2.0) + (-1.0);
    float _252 = (_241.y * 2.0) + (-1.0);
    float _253 = dot(vec2(_250, _252), vec2(_250, _252));
    float _3570 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _259 = sqrt(1.0 - (isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))));
    float _262 = fma(_259, _220, fma(_252, _213, _250 * _199));
    float _265 = fma(_259, _221, fma(_252, _214, _250 * _200));
    float _268 = fma(_259, _222, fma(_252, _215, _250 * _201));
    float _277 = exp2(log2(inversesqrt(dot(vec3(_262, _265, _268), vec3(_262, _265, _268))) * _265) * cbMtdParam._m0[11u].x) * cbMtdParam._m0[11u].y;
    float _3581 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _302 = ((cbMtdParam._m0[11u].w * (-1.39999997615814208984375)) * ((texture(sampler2D(M_AMSN_V_Snow_OV_N_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w)).x + (-1.0)) + ((1.0 - TEXCOORD_3.x) * 2.0))) + 1.0;
    float _3592 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _310 = (((isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0))) + 1.0) - cbMtdParam._m0[12u].x) * (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0)));
    float _311 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _312 = isnan(1.0) ? _311 : (isnan(_311) ? 1.0 : min(_311, 1.0));
    vec4 _324 = texture(sampler2D(M_AMSN_V_Snow_OV_N_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    vec4 _349 = texture(sampler2D(M_AMSN_V_Snow_OV_N_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _360 = cbMtdParam._m0[9u].x * _349.x;
    float _361 = cbMtdParam._m0[9u].y * _349.y;
    float _362 = cbMtdParam._m0[9u].z * _349.z;
    float _369 = (((cbMtdParam._m0[10u].x * _324.x) - _360) * _312) + _360;
    float _370 = (((cbMtdParam._m0[10u].y * _324.y) - _361) * _312) + _361;
    float _371 = (((cbMtdParam._m0[10u].z * _324.z) - _362) * _312) + _362;
    vec4 _383 = texture(sampler2D(M_AMSN_V_Snow_OV_N_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _390 = (_383.x * 2.0) + (-1.0);
    float _391 = (_383.y * 2.0) + (-1.0);
    float _392 = dot(vec2(_390, _391), vec2(_390, _391));
    float _3613 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _400 = ((_383.z - _246) * _312) + _246;
    float _409 = ((sqrt(1.0 - (isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0)))) - _259) * _312) + _259;
    vec4 _423 = texture(sampler2D(M_AMSN_V_Snow_OV_N_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _433 = (((_390 - _250) * _312) + _250) + (((_423.x * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z);
    float _434 = (((_391 - _252) * _312) + _252) + (((_423.y * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z);
    float _437 = fma(_409, _220, fma(_434, _213, _433 * _199));
    float _440 = fma(_409, _221, fma(_434, _214, _433 * _200));
    float _443 = fma(_409, _222, fma(_434, _215, _433 * _201));
    float _447 = inversesqrt(dot(vec3(_437, _440, _443), vec3(_437, _440, _443)));
    float _448 = _447 * _437;
    float _449 = _447 * _440;
    float _450 = _447 * _443;
    float _3624 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _451 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
    float _3635 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _3646 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _3657 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _470 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _511 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _521 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _511);
    float _522 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _511);
    float _523 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _511);
    float _527 = inversesqrt(dot(vec3(_521, _522, _523), vec3(_521, _522, _523)));
    float _528 = _521 * _527;
    float _529 = _522 * _527;
    float _530 = _523 * _527;
    float _536 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _537 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _557 = fma(_450, cbSceneParam._m0[5u].z, fma(_449, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _448));
    float _560 = fma(_450, cbSceneParam._m0[6u].z, fma(_449, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _448));
    float _563 = fma(_450, cbSceneParam._m0[7u].z, fma(_449, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _448));
    uint _576 = uint(roundEven(NORMAL.w)) * 13u;
    uint _578 = (_576 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _584 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0)))) * cbInstanceData._m0[_578].x;
    float _585 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0)))) * cbInstanceData._m0[_578].y;
    float _586 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0)))) * cbInstanceData._m0[_578].z;
    float _3668 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _587 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    float _3679 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _588 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
    float _3690 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _589 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
    vec4 _598 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _536, cbSceneParam._m0[86u].y * _537));
    float _601 = _598.x * TEXCOORD_3.w;
    float _602 = dot(vec3(_448, _449, _450), vec3(_528, _529, _530));
    float _605 = _602 * 2.0;
    float _609 = (_605 * _448) - _528;
    float _610 = (_605 * _449) - _529;
    float _611 = (_605 * _450) - _530;
    float _615 = abs(dot(vec3(_528, _529, _530), vec3(_448, _449, _450)));
    float _3701 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _617 = sqrt(_451);
    float _630 = exp2((_617 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_617 * 3.0));
    float _662 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _666 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _670 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _972;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _697 = fma(_670, cbModelParam._m0[26u].z, fma(_666, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _662));
        float _701 = fma(_670, cbModelParam._m0[27u].z, fma(_666, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _662));
        float _705 = fma(_670, cbModelParam._m0[28u].z, fma(_666, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _662));
        float _730 = _662 + _448;
        float _731 = _666 + _449;
        float _732 = _670 + _450;
        float _742 = fma(_732, cbModelParam._m0[26u].z, fma(_731, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _730)) - _697;
        float _743 = fma(_732, cbModelParam._m0[27u].z, fma(_731, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _730)) - _701;
        float _744 = fma(_732, cbModelParam._m0[28u].z, fma(_731, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _730)) - _705;
        float _748 = inversesqrt(dot(vec3(_742, _743, _744), vec3(_742, _743, _744)));
        float _761 = ((_748 * _742) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_697 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _762 = ((_748 * _743) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_701 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _763 = ((_748 * _744) / cbModelParam._m0[34u].z) + ((((((_705 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _766 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_761, _762, _763), 0.0);
        vec4 _773 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_761, _762, _763), 0.0);
        vec4 _780 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_761, _762, _763), 0.0);
        vec4 _787 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_761, _762, _763), 0.0);
        float _800 = exp2((_766.w + (-0.5)) * 20.0) * 2.0;
        float _801 = _800 * (_766.x + (-0.5));
        float _802 = _800 * (_766.y + (-0.5));
        float _803 = _800 * (_766.z + (-0.5));
        float _810 = exp2((_773.w + (-0.5)) * 20.0) * 2.0;
        float _811 = _810 * (_773.x + (-0.5));
        float _812 = _810 * (_773.y + (-0.5));
        float _813 = _810 * (_773.z + (-0.5));
        float _820 = exp2((_780.w + (-0.5)) * 20.0) * 2.0;
        float _821 = _820 * (_780.x + (-0.5));
        float _822 = _820 * (_780.y + (-0.5));
        float _823 = _820 * (_780.z + (-0.5));
        float _830 = exp2((_787.w + (-0.5)) * 20.0) * 2.0;
        float _831 = _830 * (_787.x + (-0.5));
        float _832 = _830 * (_787.y + (-0.5));
        float _833 = _830 * (_787.z + (-0.5));
        float _834 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _835 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _836 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _837 = _801 * 0.5;
        float _838 = _811 * 0.5;
        float _839 = _821 * 0.5;
        float _840 = dot(vec3(_837, _838, _839), vec3(_837, _838, _839));
        float _845 = (_840 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_840);
        float _854 = (dot(vec3(_448, _449, _450), vec3(_845 * _837, _845 * _838, _845 * _839)) + 1.0) * 0.5;
        float _3727 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _864 = sqrt(((_838 * _838) + (_837 * _837)) + (_839 * _839)) / (_834 + 9.9999997473787516355514526367188e-06);
        float _3738 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _865 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _866 = _865 * 2.0;
        float _870 = (1.0 - _865) / (_865 + 1.0);
        float _3749 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _880 = ((((1.0 - _871) * (_866 + 2.0)) * exp2(log2(isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * (_866 + 1.0))) + _871) * _834;
        float _881 = _802 * 0.5;
        float _882 = _812 * 0.5;
        float _883 = _822 * 0.5;
        float _884 = dot(vec3(_881, _882, _883), vec3(_881, _882, _883));
        float _889 = (_884 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_884);
        float _897 = (dot(vec3(_448, _449, _450), vec3(_889 * _881, _889 * _882, _889 * _883)) + 1.0) * 0.5;
        float _3760 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _906 = sqrt(((_882 * _882) + (_881 * _881)) + (_883 * _883)) / (_835 + 9.9999997473787516355514526367188e-06);
        float _3771 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _907 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _908 = _907 * 2.0;
        float _912 = (1.0 - _907) / (_907 + 1.0);
        float _3782 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _913 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _922 = ((((1.0 - _913) * (_908 + 2.0)) * exp2(log2(isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_908 + 1.0))) + _913) * _835;
        float _923 = _803 * 0.5;
        float _924 = _813 * 0.5;
        float _925 = _823 * 0.5;
        float _926 = dot(vec3(_923, _924, _925), vec3(_923, _924, _925));
        float _931 = (_926 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_926);
        float _939 = (dot(vec3(_448, _449, _450), vec3(_931 * _923, _931 * _924, _931 * _925)) + 1.0) * 0.5;
        float _3793 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _948 = sqrt(((_924 * _924) + (_923 * _923)) + (_925 * _925)) / (_836 + 9.9999997473787516355514526367188e-06);
        float _3804 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _950 = _949 * 2.0;
        float _954 = (1.0 - _949) / (_949 + 1.0);
        float _3815 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _964 = ((((1.0 - _955) * (_950 + 2.0)) * exp2(log2(isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_950 + 1.0))) + _955) * _836;
        _972 = _803;
        _974 = _802;
        _975 = _801;
        _976 = _813;
        _977 = _812;
        _978 = _811;
        _979 = _823;
        _980 = _822;
        _981 = _821;
        _982 = _836;
        _983 = _835;
        _984 = _834;
        _985 = cbModelParam._m0[36u].z * (isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0)));
        _986 = cbModelParam._m0[36u].z * (isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0)));
        _987 = cbModelParam._m0[36u].z * (isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0)));
    }
    else
    {
        _972 = _973;
        _974 = _973;
        _975 = _973;
        _976 = _973;
        _977 = _973;
        _978 = _973;
        _979 = _973;
        _980 = _973;
        _981 = _973;
        _982 = _973;
        _983 = _973;
        _984 = _973;
        _985 = 0.0;
        _986 = 0.0;
        _987 = 0.0;
    }
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1013 = fma(_670, cbModelParam._m0[30u].z, fma(_666, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _662));
        float _1017 = fma(_670, cbModelParam._m0[31u].z, fma(_666, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _662));
        float _1021 = fma(_670, cbModelParam._m0[32u].z, fma(_666, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _662));
        float _1044 = _662 + _448;
        float _1045 = _666 + _449;
        float _1046 = _670 + _450;
        float _1056 = fma(_1046, cbModelParam._m0[30u].z, fma(_1045, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1044)) - _1013;
        float _1057 = fma(_1046, cbModelParam._m0[31u].z, fma(_1045, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1044)) - _1017;
        float _1058 = fma(_1046, cbModelParam._m0[32u].z, fma(_1045, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1044)) - _1021;
        float _1062 = inversesqrt(dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058)));
        float _1075 = ((_1062 * _1056) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1013 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1076 = ((_1062 * _1057) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1017 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1077 = ((_1062 * _1058) / cbModelParam._m0[35u].z) + ((((((_1021 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        float _1112 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1079.x + (-0.5));
        float _1114 = _1112 * (_1079.y + (-0.5));
        float _1115 = _1112 * (_1079.z + (-0.5));
        float _1122 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1086.x + (-0.5));
        float _1124 = _1122 * (_1086.y + (-0.5));
        float _1125 = _1122 * (_1086.z + (-0.5));
        float _1132 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1093.x + (-0.5));
        float _1134 = _1132 * (_1093.y + (-0.5));
        float _1135 = _1132 * (_1093.z + (-0.5));
        float _1142 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1100.x + (-0.5));
        float _1144 = _1142 * (_1100.y + (-0.5));
        float _1145 = _1142 * (_1100.z + (-0.5));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = _1113 * 0.5;
        float _1150 = _1123 * 0.5;
        float _1151 = _1133 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1165 = (dot(vec3(_448, _449, _450), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1174 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _3878 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_1176 + 1.0))) + _1181) * _1146;
        float _1191 = _1114 * 0.5;
        float _1192 = _1124 * 0.5;
        float _1193 = _1134 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1207 = (dot(vec3(_448, _449, _450), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1216 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _3911 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1218 + 1.0))) + _1223) * _1147;
        float _1233 = _1115 * 0.5;
        float _1234 = _1125 * 0.5;
        float _1235 = _1135 * 0.5;
        float _1236 = dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235));
        float _1241 = (_1236 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1236);
        float _1249 = (dot(vec3(_448, _449, _450), vec3(_1241 * _1233, _1241 * _1234, _1241 * _1235)) + 1.0) * 0.5;
        float _3922 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1258 = sqrt(((_1234 * _1234) + (_1233 * _1233)) + (_1235 * _1235)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _3933 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _3944 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1260 + 1.0))) + _1265) * _1148;
        _1282 = _1115;
        _1283 = _1114;
        _1284 = _1113;
        _1285 = _1125;
        _1286 = _1124;
        _1287 = _1123;
        _1288 = _1135;
        _1289 = _1134;
        _1290 = _1133;
        _1291 = _1148;
        _1292 = _1147;
        _1293 = _1146;
        _1294 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
        _1295 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
        _1296 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
    }
    else
    {
        _1282 = _973;
        _1283 = _973;
        _1284 = _973;
        _1285 = _973;
        _1286 = _973;
        _1287 = _973;
        _1288 = _973;
        _1289 = _973;
        _1290 = _973;
        _1291 = _973;
        _1292 = _973;
        _1293 = _973;
        _1294 = 0.0;
        _1295 = 0.0;
        _1296 = 0.0;
    }
    float _1306 = (cbModelParam._m0[1u].x * (_1294 - _985)) + _985;
    float _1307 = (cbModelParam._m0[1u].x * (_1295 - _986)) + _986;
    float _1308 = (cbModelParam._m0[1u].x * (_1296 - _987)) + _987;
    float _1329 = fma(_1308, cbSceneParam._m0[89u].z, fma(_1307, cbSceneParam._m0[89u].y, _1306 * cbSceneParam._m0[89u].x));
    float _1332 = fma(_1308, cbSceneParam._m0[90u].z, fma(_1307, cbSceneParam._m0[90u].y, _1306 * cbSceneParam._m0[90u].x));
    float _1335 = fma(_1308, cbSceneParam._m0[91u].z, fma(_1307, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1306));
    float _1350 = _609 * 0.5;
    float _1351 = _610 * 0.5;
    float _1352 = _611 * 0.5;
    float _1353 = dot(vec4(_1350, _1351, _1352, 1.0), vec4(_1284, _1287, _1290, _1293));
    float _1356 = dot(vec4(_1350, _1351, _1352, 1.0), vec4(_1283, _1286, _1289, _1292));
    float _1359 = dot(vec4(_1350, _1351, _1352, 1.0), vec4(_1282, _1285, _1288, _1291));
    float _1393;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1366 = dot(vec4(_1350, _1351, _1352, 1.0), vec4(_972, _976, _979, _982));
        float _1370 = dot(vec4(_1350, _1351, _1352, 1.0), vec4(_974, _977, _980, _983));
        float _1374 = dot(vec4(_1350, _1351, _1352, 1.0), vec4(_975, _978, _981, _984));
        float _1381 = dot(vec4(cbModelParam._m0[39u]), vec4(_1350, _1351, _1352, 1.0));
        _1393 = dot(vec3(isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)), isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)), isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1381) ? 0.0 : (isnan(0.0) ? _1381 : max(0.0, _1381))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1393 = 1.0;
    }
    float _1404;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1395 = dot(vec4(cbModelParam._m0[40u]), vec4(_1350, _1351, _1352, 1.0));
        _1404 = dot(vec3(isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)), isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)), isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1395) ? 0.0 : (isnan(0.0) ? _1395 : max(0.0, _1395))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1404 = 1.0;
    }
    float _1408 = (_1404 * cbModelParam._m0[1u].x) + (_1393 * (1.0 - cbModelParam._m0[1u].x));
    float _1418 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _451);
    float _1419 = isnan(_1418) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1418 : min(cbModelParam._m0[25u].z, _1418));
    float _1501;
    float _1503;
    float _1505;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1468 = fma(_670, cbModelParam._m0[13u].z, fma(_666, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _662)) + cbModelParam._m0[13u].w;
        float _1472 = fma(_670, cbModelParam._m0[14u].z, fma(_666, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _662)) + cbModelParam._m0[14u].w;
        float _1476 = fma(_670, cbModelParam._m0[15u].z, fma(_666, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _662)) + cbModelParam._m0[15u].w;
        float _1479 = fma(_611, cbModelParam._m0[13u].z, fma(_610, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _609));
        float _1482 = fma(_611, cbModelParam._m0[14u].z, fma(_610, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _609));
        float _1485 = fma(_611, cbModelParam._m0[15u].z, fma(_610, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _609));
        float _1513;
        if (_1479 > 0.0)
        {
            _1513 = abs((1.0 - _1468) / _1479);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1479 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1468 + 1.0) / _1479);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1513 = frontier_phi_16_14_ladder;
        }
        float _1686;
        if (_1482 > 0.0)
        {
            _1686 = abs((1.0 - _1472) / _1482);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1482 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1472 + 1.0) / _1482);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1686 = frontier_phi_25_21_ladder;
        }
        float _1981;
        if (_1485 > 0.0)
        {
            _1981 = abs((1.0 - _1476) / _1485);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1485 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1476 + 1.0) / _1485);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1981 = frontier_phi_37_32_ladder;
        }
        float _1983 = isnan(_1686) ? _1513 : (isnan(_1513) ? _1686 : min(_1513, _1686));
        float _1984 = isnan(_1981) ? _1983 : (isnan(_1983) ? _1981 : min(_1983, _1981));
        float _1988 = (_1984 * _1479) + _1468;
        float _1989 = (_1984 * _1482) + _1472;
        float _1990 = (_1984 * _1485) + _1476;
        float _1991 = _1984 * 9.9999997473787516355514526367188e-05;
        float _1993 = (-1.0) - _1991;
        float _1995 = _1991 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1990 > _1995) || ((_1990 < _1993) || ((_1989 > _1995) || ((_1989 < _1993) || ((_1988 < _1993) || (_1988 > _1995))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2135 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1990, cbModelParam._m0[9u].z, fma(_1989, cbModelParam._m0[9u].y, _1988 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1990, cbModelParam._m0[10u].z, fma(_1989, cbModelParam._m0[10u].y, _1988 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1990, cbModelParam._m0[11u].z, fma(_1989, cbModelParam._m0[11u].y, _1988 * cbModelParam._m0[11u].x))), _1419);
            frontier_phi_15_37_ladder = _2135.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2135.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2135.z * cbModelParam._m0[1u].y;
        }
        _1501 = frontier_phi_15_37_ladder_1;
        _1503 = frontier_phi_15_37_ladder;
        _1505 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1489 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_609, _610, _611), _1419);
        _1501 = _1489.x * cbModelParam._m0[1u].y;
        _1503 = _1489.y * cbModelParam._m0[1u].y;
        _1505 = _1489.z * cbModelParam._m0[1u].y;
    }
    float _1509 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _451);
    float _1510 = isnan(_1509) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1509 : min(cbModelParam._m0[25u].w, _1509));
    float _1603;
    float _1605;
    float _1607;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1567 = fma(_670, cbModelParam._m0[21u].z, fma(_666, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _662)) + cbModelParam._m0[21u].w;
        float _1571 = fma(_670, cbModelParam._m0[22u].z, fma(_666, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _662)) + cbModelParam._m0[22u].w;
        float _1575 = fma(_670, cbModelParam._m0[23u].z, fma(_666, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _662)) + cbModelParam._m0[23u].w;
        float _1578 = fma(_611, cbModelParam._m0[21u].z, fma(_610, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _609));
        float _1581 = fma(_611, cbModelParam._m0[22u].z, fma(_610, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _609));
        float _1584 = fma(_611, cbModelParam._m0[23u].z, fma(_610, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _609));
        float _1691;
        if (_1578 > 0.0)
        {
            _1691 = abs((1.0 - _1567) / _1578);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1567 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1691 = frontier_phi_27_23_ladder;
        }
        float _2008;
        if (_1581 > 0.0)
        {
            _2008 = abs((1.0 - _1571) / _1581);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1571 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2008 = frontier_phi_39_34_ladder;
        }
        float _2335;
        if (_1584 > 0.0)
        {
            _2335 = abs((1.0 - _1575) / _1584);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1575 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2335 = frontier_phi_49_46_ladder;
        }
        float _2337 = isnan(_2008) ? _1691 : (isnan(_1691) ? _2008 : min(_1691, _2008));
        float _2338 = isnan(_2335) ? _2337 : (isnan(_2337) ? _2335 : min(_2337, _2335));
        float _2342 = (_2338 * _1578) + _1567;
        float _2343 = (_2338 * _1581) + _1571;
        float _2344 = (_2338 * _1584) + _1575;
        float _2345 = _2338 * 9.9999997473787516355514526367188e-05;
        float _2346 = (-1.0) - _2345;
        float _2348 = _2345 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2344 > _2348) || ((_2344 < _2346) || ((_2343 > _2348) || ((_2343 < _2346) || ((_2342 < _2346) || (_2342 > _2348))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2462 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2344, cbModelParam._m0[17u].z, fma(_2343, cbModelParam._m0[17u].y, _2342 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2344, cbModelParam._m0[18u].z, fma(_2343, cbModelParam._m0[18u].y, _2342 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2344, cbModelParam._m0[19u].z, fma(_2343, cbModelParam._m0[19u].y, _2342 * cbModelParam._m0[19u].x))), _1510);
            frontier_phi_24_49_ladder = _2462.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2462.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2462.x * cbModelParam._m0[1u].z;
        }
        _1603 = frontier_phi_24_49_ladder_2;
        _1605 = frontier_phi_24_49_ladder_1;
        _1607 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1587 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_609, _610, _611), _1510);
        _1603 = _1587.x * cbModelParam._m0[1u].z;
        _1605 = _1587.y * cbModelParam._m0[1u].z;
        _1607 = _1587.z * cbModelParam._m0[1u].z;
    }
    float _1619 = ((((1.0 - _630) * ((_617 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_630 * _617)) * _601;
    float _1620 = _1619 * ((cbModelParam._m0[1u].w * (_1603 - _1501)) + _1501);
    float _1621 = _1619 * ((cbModelParam._m0[1u].w * (_1605 - _1503)) + _1503);
    float _1622 = _1619 * ((cbModelParam._m0[1u].w * (_1607 - _1505)) + _1505);
    float _1625 = fma(_1622, cbSceneParam._m0[89u].z, fma(_1621, cbSceneParam._m0[89u].y, _1620 * cbSceneParam._m0[89u].x));
    float _1628 = fma(_1622, cbSceneParam._m0[90u].z, fma(_1621, cbSceneParam._m0[90u].y, _1620 * cbSceneParam._m0[90u].x));
    float _1631 = fma(_1622, cbSceneParam._m0[91u].z, fma(_1621, cbSceneParam._m0[91u].y, _1620 * cbSceneParam._m0[91u].x));
    float _1665 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1669 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1673 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1677 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1678 = _1665 / _1677;
    float _1679 = _1669 / _1677;
    float _1680 = _1673 / _1677;
    float _1827;
    float _1828;
    float _1829;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1707 = ((uint(_1680 > cbSceneParam._m0[59u].y) + uint(_1680 > cbSceneParam._m0[59u].x)) + uint(_1680 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1708 = _1707 + 43u;
        uint _1716 = _1707 + 44u;
        uint _1724 = _1707 + 45u;
        uint _1732 = _1707 + 46u;
        float _1743 = fma(_1677, cbSceneParam._m0[_1708].w, fma(_1673, cbSceneParam._m0[_1708].z, fma(_1669, cbSceneParam._m0[_1708].y, _1665 * cbSceneParam._m0[_1708].x)));
        float _1747 = fma(_1677, cbSceneParam._m0[_1716].w, fma(_1673, cbSceneParam._m0[_1716].z, fma(_1669, cbSceneParam._m0[_1716].y, _1665 * cbSceneParam._m0[_1716].x)));
        float _1755 = fma(_1677, cbSceneParam._m0[_1732].w, fma(_1673, cbSceneParam._m0[_1732].z, fma(_1669, cbSceneParam._m0[_1732].y, _1665 * cbSceneParam._m0[_1732].x)));
        float _1760 = cbSceneParam._m0[33u].z * _1755;
        float _1762 = cbSceneParam._m0[33u].w * _1755;
        float _1765 = fma(_1677, cbSceneParam._m0[_1724].w, fma(_1673, cbSceneParam._m0[_1724].z, fma(_1669, cbSceneParam._m0[_1724].y, _1665 * cbSceneParam._m0[_1724].x))) / _1755;
        float _1813 = (cbSceneParam._m0[33u].x - sqrt(((_1679 * _1679) + (_1678 * _1678)) + (_1680 * _1680))) * cbSceneParam._m0[33u].y;
        float _4070 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1820 = (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1760 + _1743) / _1755, (_1762 + _1747) / _1755), _1765), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1762 + _1743) / _1755, (_1747 - _1760) / _1755), _1765), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1743 - _1760) / _1755, (_1747 - _1762) / _1755), _1765), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1743 - _1762) / _1755, (_1760 + _1747) / _1755), _1765), 0.0)).x), vec4(0.25)));
        _1827 = 1.0 - (_1820 * cbSceneParam._m0[34u].x);
        _1828 = 1.0 - (_1820 * cbSceneParam._m0[34u].y);
        _1829 = 1.0 - (_1820 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1827 = 1.0;
        _1828 = 1.0;
        _1829 = 1.0;
    }
    float _1893;
    float _1895;
    float _1897;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1881 = fma(_1677, cbSceneParam._m0[63u].w, fma(_1673, cbSceneParam._m0[63u].z, fma(_1669, cbSceneParam._m0[63u].y, _1665 * cbSceneParam._m0[63u].x)));
        float _1882 = fma(_1677, cbSceneParam._m0[60u].w, fma(_1673, cbSceneParam._m0[60u].z, fma(_1669, cbSceneParam._m0[60u].y, _1665 * cbSceneParam._m0[60u].x))) / _1881;
        float _1883 = fma(_1677, cbSceneParam._m0[61u].w, fma(_1673, cbSceneParam._m0[61u].z, fma(_1669, cbSceneParam._m0[61u].y, _1665 * cbSceneParam._m0[61u].x))) / _1881;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1882 >= cbSceneParam._m0[64u].x) && (_1883 >= cbSceneParam._m0[64u].y)) && (_1882 <= cbSceneParam._m0[64u].z)) && (_1883 <= cbSceneParam._m0[64u].w))
        {
            float _2021 = fma(_1677, cbSceneParam._m0[62u].w, fma(_1673, cbSceneParam._m0[62u].z, fma(_1669, cbSceneParam._m0[62u].y, _1665 * cbSceneParam._m0[62u].x))) / _1881;
            float _2025 = isnan(cbSceneParam._m0[41u].w) ? _2021 : (isnan(_2021) ? cbSceneParam._m0[41u].w : max(_2021, cbSceneParam._m0[41u].w));
            float _2068 = (cbSceneParam._m0[33u].x - sqrt(((_1679 * _1679) + (_1678 * _1678)) + (_1680 * _1680))) * cbSceneParam._m0[33u].y;
            float _4086 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
            float _2075 = (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1882, cbSceneParam._m0[33u].w + _1883), _2025), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1882, _1883 - cbSceneParam._m0[33u].z), _2025), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1882 - cbSceneParam._m0[33u].z, _1883 - cbSceneParam._m0[33u].w), _2025), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1882 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1883), _2025), 0.0)).x), vec4(0.25)));
            float _2079 = 1.0 - (_2075 * cbSceneParam._m0[34u].x);
            float _2080 = 1.0 - (_2075 * cbSceneParam._m0[34u].y);
            float _2081 = 1.0 - (_2075 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2080) ? _1828 : (isnan(_1828) ? _2080 : min(_1828, _2080));
            frontier_phi_36_35_ladder_1 = isnan(_2081) ? _1829 : (isnan(_1829) ? _2081 : min(_1829, _2081));
            frontier_phi_36_35_ladder_2 = isnan(_2079) ? _1827 : (isnan(_1827) ? _2079 : min(_1827, _2079));
        }
        else
        {
            frontier_phi_36_35_ladder = _1828;
            frontier_phi_36_35_ladder_1 = _1829;
            frontier_phi_36_35_ladder_2 = _1827;
        }
        _1893 = frontier_phi_36_35_ladder_2;
        _1895 = frontier_phi_36_35_ladder;
        _1897 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1893 = _1827;
        _1895 = _1828;
        _1897 = _1829;
    }
    uvec4 _1902 = floatBitsToUint(cbInstanceData._m0[_576 + 5u]);
    uint _1904 = _1902.x * 14u;
    uint _1905 = _1904 + 13u;
    float _1912 = _601 + (-1.0);
    float _1917 = (cbLight._m0[_1905].x * _1912) + 1.0;
    float _1918 = (cbLight._m0[_1905].y * _1912) + 1.0;
    float _1919 = (cbLight._m0[_1905].z * _1912) + 1.0;
    float _1920 = (cbLight._m0[_1905].w * _1912) + 1.0;
    uint _1921 = _1904 + 5u;
    float _1927 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
    uint _1931 = _1904 + 4u;
    float _1940 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
    uint _1944 = _1904 | 1u;
    float _1955 = dot(vec3(cbLight._m0[_1904].xyz), vec3(_448, _449, _450));
    float _1958 = dot(vec3(cbLight._m0[_1944].xyz), vec3(_448, _449, _450));
    float _4122 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _4133 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1963 = (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * 0.3183098733425140380859375;
    float _1965 = (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * 0.3183098733425140380859375;
    float _1972 = ((cbLight._m0[_1921].x * _1927) * _1965) + (((cbLight._m0[_1931].x * _1893) * _1940) * _1963);
    float _1973 = ((_1927 * cbLight._m0[_1921].y) * _1965) + (((cbLight._m0[_1931].y * _1895) * _1940) * _1963);
    float _1974 = ((_1927 * cbLight._m0[_1921].z) * _1965) + (((cbLight._m0[_1931].z * _1897) * _1940) * _1963);
    uvec4 _1978 = floatBitsToUint(cbLight._m0[_1904 + 12u]);
    bool _1980 = _1978.x == 0u;
    float _2082;
    float _2084;
    float _2086;
    if (_1980)
    {
        _2082 = _1972;
        _2084 = _1973;
        _2086 = _1974;
    }
    else
    {
        uint _2090 = _1904 + 6u;
        float _2106 = (dot(vec3(cbLight._m0[_1904 + 2u].xyz), vec3(_448, _449, _450)) * 0.5) + 0.5;
        float _2107 = _2106 * _2106;
        float _4144 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2108 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _2109 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
        _2082 = (((cbLight._m0[_2090].x * 0.3183098733425140380859375) * _2108) * _2109) + _1972;
        _2084 = (((cbLight._m0[_2090].y * 0.3183098733425140380859375) * _2108) * _2109) + _1973;
        _2086 = (((cbLight._m0[_2090].z * 0.3183098733425140380859375) * _2108) * _2109) + _1974;
    }
    bool _2089 = _1978.y == 0u;
    float _2144;
    float _2146;
    float _2148;
    if (_2089)
    {
        _2144 = _2082;
        _2146 = _2084;
        _2148 = _2086;
    }
    else
    {
        uint _2306 = _1904 + 7u;
        float _2322 = (dot(vec3(cbLight._m0[_1904 + 3u].xyz), vec3(_448, _449, _450)) * 0.5) + 0.5;
        float _2323 = _2322 * _2322;
        float _4160 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2324 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _2325 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
        _2144 = (((cbLight._m0[_2306].x * 0.3183098733425140380859375) * _2324) * _2325) + _2082;
        _2146 = (((cbLight._m0[_2306].y * 0.3183098733425140380859375) * _2324) * _2325) + _2084;
        _2148 = (((cbLight._m0[_2306].z * 0.3183098733425140380859375) * _2324) * _2325) + _2086;
    }
    uint _2151 = _1904 + 8u;
    float _2164 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1904].w)) * _451) * 0.949999988079071044921875);
    float _2165 = _2164 * _2164;
    float _2166 = cbLight._m0[_1904].x + _528;
    float _2167 = cbLight._m0[_1904].y + _529;
    float _2168 = cbLight._m0[_1904].z + _530;
    float _2172 = inversesqrt(dot(vec3(_2166, _2167, _2168), vec3(_2166, _2167, _2168)));
    float _2173 = _2172 * _2166;
    float _2174 = _2172 * _2167;
    float _2175 = _2172 * _2168;
    float _2176 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_1904].xyz));
    float _4176 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2179 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _4187 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _2180 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _2181 = dot(vec3(_448, _449, _450), vec3(_2173, _2174, _2175));
    float _4198 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2184 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _2185 = dot(vec3(cbLight._m0[_1904].xyz), vec3(_2173, _2174, _2175));
    float _4209 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2189 = _2165 * _2165;
    float _2193 = ((_2184 * _2184) * (_2189 + (-1.0))) + 1.0;
    float _2204 = (exp2(log2(1.0 - (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2205 = 1.0 - _2165;
    float _2216 = (0.5 / (((_2180 * ((_2179 * _2205) + _2165)) + 9.9999999392252902907785028219223e-09) + (((_2180 * _2205) + _2165) * _2179))) * _2179;
    float _4220 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2218 = (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_2189 / ((_2193 * _2193) * 3.141590118408203125));
    uint _2232 = _1904 + 9u;
    float _2243 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1944].w)) * _451) * 0.949999988079071044921875);
    float _2244 = _2243 * _2243;
    float _2245 = cbLight._m0[_1944].x + _528;
    float _2246 = cbLight._m0[_1944].y + _529;
    float _2247 = cbLight._m0[_1944].z + _530;
    float _2251 = inversesqrt(dot(vec3(_2245, _2246, _2247), vec3(_2245, _2246, _2247)));
    float _2252 = _2251 * _2245;
    float _2253 = _2251 * _2246;
    float _2254 = _2251 * _2247;
    float _2255 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_1944].xyz));
    float _4231 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2258 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _2259 = dot(vec3(_448, _449, _450), vec3(_2252, _2253, _2254));
    float _4242 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2262 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    float _2263 = dot(vec3(cbLight._m0[_1944].xyz), vec3(_2252, _2253, _2254));
    float _4253 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2267 = _2244 * _2244;
    float _2271 = ((_2262 * _2262) * (_2267 + (-1.0))) + 1.0;
    float _2280 = (exp2(log2(1.0 - (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2281 = 1.0 - _2244;
    float _2291 = (0.5 / (((_2180 * ((_2258 * _2281) + _2244)) + 9.9999999392252902907785028219223e-09) + (((_2180 * _2281) + _2244) * _2258))) * _2258;
    float _4264 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2293 = (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_2267 / ((_2271 * _2271) * 3.141590118408203125));
    float _2303 = (((_2280 * cbLight._m0[_2232].x) * _2293) * _1927) + ((((cbLight._m0[_2151].x * _1893) * _2204) * _2218) * _1940);
    float _2304 = (((_2280 * cbLight._m0[_2232].y) * _2293) * _1927) + ((((cbLight._m0[_2151].y * _1895) * _2204) * _2218) * _1940);
    float _2305 = (((_2280 * cbLight._m0[_2232].z) * _2293) * _1927) + ((((cbLight._m0[_2151].z * _1897) * _2204) * _2218) * _1940);
    float _2361;
    float _2363;
    float _2365;
    if (_1980)
    {
        _2361 = _2303;
        _2363 = _2304;
        _2365 = _2305;
    }
    else
    {
        uint _2367 = _1904 + 2u;
        uint _2371 = _1904 + 10u;
        float _2385 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2367].w)) * _451) * 0.949999988079071044921875);
        float _2386 = _2385 * _2385;
        float _2387 = cbLight._m0[_2367].x + _528;
        float _2388 = cbLight._m0[_2367].y + _529;
        float _2389 = cbLight._m0[_2367].z + _530;
        float _2393 = inversesqrt(dot(vec3(_2387, _2388, _2389), vec3(_2387, _2388, _2389)));
        float _2394 = _2393 * _2387;
        float _2395 = _2393 * _2388;
        float _2396 = _2393 * _2389;
        float _2397 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_2367].xyz));
        float _4275 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2400 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _2401 = dot(vec3(_448, _449, _450), vec3(_2394, _2395, _2396));
        float _4286 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2404 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _2405 = dot(vec3(cbLight._m0[_2367].xyz), vec3(_2394, _2395, _2396));
        float _4297 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2409 = _2386 * _2386;
        float _2413 = ((_2404 * _2404) * (_2409 + (-1.0))) + 1.0;
        float _2422 = (exp2(log2(1.0 - (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2423 = 1.0 - _2386;
        float _2433 = (0.5 / (((_2180 * ((_2400 * _2423) + _2386)) + 9.9999999392252902907785028219223e-09) + (((_2180 * _2423) + _2386) * _2400))) * _2400;
        float _4308 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2435 = (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_2409 / ((_2413 * _2413) * 3.141590118408203125));
        float _2436 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
        _2361 = (((_2422 * cbLight._m0[_2371].x) * _2435) * _2436) + _2303;
        _2363 = (((_2422 * cbLight._m0[_2371].y) * _2435) * _2436) + _2304;
        _2365 = (((_2422 * cbLight._m0[_2371].z) * _2435) * _2436) + _2305;
    }
    float _2467;
    float _2469;
    float _2471;
    if (_2089)
    {
        _2467 = _2361;
        _2469 = _2363;
        _2471 = _2365;
    }
    else
    {
        uint _2478 = _1904 + 3u;
        uint _2482 = _1904 + 11u;
        float _2496 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2478].w)) * _451) * 0.949999988079071044921875);
        float _2497 = _2496 * _2496;
        float _2498 = cbLight._m0[_2478].x + _528;
        float _2499 = cbLight._m0[_2478].y + _529;
        float _2500 = cbLight._m0[_2478].z + _530;
        float _2504 = inversesqrt(dot(vec3(_2498, _2499, _2500), vec3(_2498, _2499, _2500)));
        float _2505 = _2504 * _2498;
        float _2506 = _2504 * _2499;
        float _2507 = _2504 * _2500;
        float _2508 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_2478].xyz));
        float _4324 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2511 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _2512 = dot(vec3(_448, _449, _450), vec3(_2505, _2506, _2507));
        float _4335 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2515 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _2516 = dot(vec3(cbLight._m0[_2478].xyz), vec3(_2505, _2506, _2507));
        float _4346 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2520 = _2497 * _2497;
        float _2524 = ((_2515 * _2515) * (_2520 + (-1.0))) + 1.0;
        float _2533 = (exp2(log2(1.0 - (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2534 = 1.0 - _2497;
        float _2544 = (0.5 / (((_2180 * ((_2511 * _2534) + _2497)) + 9.9999999392252902907785028219223e-09) + (((_2180 * _2534) + _2497) * _2511))) * _2511;
        float _4357 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2546 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2520 / ((_2524 * _2524) * 3.141590118408203125));
        float _2547 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
        _2467 = (((_2533 * cbLight._m0[_2482].x) * _2546) * _2547) + _2361;
        _2469 = (((_2533 * cbLight._m0[_2482].y) * _2546) * _2547) + _2363;
        _2471 = (((_2533 * cbLight._m0[_2482].z) * _2546) * _2547) + _2365;
    }
    float _2612;
    float _2614;
    float _2616;
    float _2618;
    float _2620;
    float _2622;
    if (_1902.y == 0u)
    {
        uvec4 _2568 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2569 = _2568.x;
        uint _2580 = uint((float(_2568.y) * floor(float(uint(cbSceneParam._m0[85u].y * _537) / _2569))) + floor(float(uint(cbSceneParam._m0[85u].x * _536) / _2569)));
        float _2590 = (log2(_1680 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2591 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        uint _2594 = uint(isnan(14.0) ? _2591 : (isnan(_2591) ? 14.0 : min(_2591, 14.0)));
        uvec4 _2599 = texelFetch(g_lightClusterGridBuffer, int(((_2594 << 2u) + (_2580 << 6u)) >> 2u));
        uint _2600 = _2599.x;
        uint _2601 = _2568.z;
        float _2679;
        float _2681;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        if (((((1u << ((_2601 >> 4u) & 15u)) + 4294967295u) & _2600) == 0u) || ((_2601 & 240u) == 0u))
        {
            _2679 = 0.0;
            _2681 = 0.0;
            _2683 = 0.0;
            _2685 = 0.0;
            _2687 = 0.0;
            _2689 = 0.0;
        }
        else
        {
            float _2680;
            float _2682;
            float _2684;
            float _2686;
            float _2688;
            float _2690;
            float _2823 = 0.0;
            float _2824 = 0.0;
            float _2825 = 0.0;
            float _2826 = 0.0;
            float _2827 = 0.0;
            float _2828 = 0.0;
            uint _2829 = 0u;
            uint _2838;
            bool _2839;
            for (;;)
            {
                _2838 = texelFetch(g_lightClassification, int((((_2594 << 5u) + (_2580 << 9u)) + (_2829 << 2u)) >> 2u)).x;
                _2839 = _2838 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2839)
                {
                    frontier_phi_68_pred = _2828;
                    frontier_phi_68_pred_1 = _2827;
                    frontier_phi_68_pred_2 = _2826;
                    frontier_phi_68_pred_3 = _2824;
                    frontier_phi_68_pred_4 = _2823;
                    frontier_phi_68_pred_5 = _2825;
                }
                else
                {
                    float _2947;
                    float _2948;
                    float _2949;
                    float _2950;
                    float _2951;
                    float _2952;
                    uint _2953;
                    _2947 = _2823;
                    _2948 = _2824;
                    _2949 = _2825;
                    _2950 = _2826;
                    _2951 = _2827;
                    _2952 = _2828;
                    _2953 = _2838;
                    float _2879;
                    float _2880;
                    float _2881;
                    float _2882;
                    float _2883;
                    float _2884;
                    for (;;)
                    {
                        uint _2957 = uint(findLSB(_2953)) + (_2829 << 5u);
                        uint _2954 = (_2953 + 4294967295u) & _2953;
                        uint _2959 = _2957 * 48u;
                        vec4 _2973 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2959)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 3u)).x));
                        uint _2979 = (_2957 * 48u) + 4u;
                        vec4 _2992 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2979)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 3u)).x));
                        uint _2998 = (_2957 * 48u) + 8u;
                        vec3 _3009 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2998)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 2u)).x));
                        float _3013 = _2973.x - _1678;
                        float _3014 = _2973.y - _1679;
                        float _3015 = _2973.z - _1680;
                        float _3016 = dot(vec3(_3013, _3014, _3015), vec3(_3013, _3014, _3015));
                        float _3019 = inversesqrt(_3016);
                        float _3020 = _3019 * _3013;
                        float _3021 = _3019 * _3014;
                        float _3022 = _3019 * _3015;
                        float _3023 = dot(vec3(_557, _560, _563), vec3(_3020, _3021, _3022));
                        float _3028 = 1.0 - (_3016 * _2973.w);
                        float _4383 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                        float _3029 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                        float _3030 = sqrt(_3016) * _2992.w;
                        float _3033 = 1.39999997615814208984375 / (_3030 + 1.39999997615814208984375);
                        float _3034 = _3033 * _3033;
                        float _3037 = ((1.0 - _3034) * _3023) + _3034;
                        float _3040 = _3030 * _3030;
                        float _3044 = ((isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0))) * _3029) / ((_3040 * 0.699999988079071044921875) + 1.0);
                        float _3048 = (-0.0) - _1678;
                        float _3049 = (-0.0) - _1679;
                        float _3050 = (-0.0) - _1680;
                        float _3054 = inversesqrt(dot(vec3(_3048, _3049, _3050), vec3(_3048, _3049, _3050)));
                        float _3055 = _3054 * _3048;
                        float _3056 = _3054 * _3049;
                        float _3057 = _3054 * _3050;
                        float _3064 = exp2(log2(1.0 / ((_3040 * 3.5) + 5.0)) * 0.25);
                        float _3065 = 1.0 - _617;
                        float _3072 = sqrt(1.0 - ((1.0 - (_3065 * _3065)) * (1.0 - (_3064 * _3064))));
                        float _3073 = _3072 * _3072;
                        float _3074 = _3073 * _3073;
                        float _3075 = _3055 + _3020;
                        float _3076 = _3056 + _3021;
                        float _3077 = _3057 + _3022;
                        float _3081 = inversesqrt(dot(vec3(_3075, _3076, _3077), vec3(_3075, _3076, _3077)));
                        float _3085 = dot(vec3(_557, _560, _563), vec3(_3055, _3056, _3057));
                        float _4399 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                        float _3088 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                        float _3089 = dot(vec3(_557, _560, _563), vec3(_3081 * _3075, _3081 * _3076, _3081 * _3077));
                        float _4410 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                        float _3092 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                        float _3096 = ((_3092 * _3092) * (_3074 + (-1.0))) + 1.0;
                        float _3097 = _3033 * _3073;
                        float _3098 = _3097 * _3097;
                        float _3101 = ((1.0 - _3098) * _3023) + _3098;
                        float _4421 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                        float _3102 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                        float _3103 = 1.0 - _3073;
                        float _3113 = (0.5 / (((_3102 * ((_3088 * _3103) + _3073)) + 9.9999999392252902907785028219223e-09) + (((_3102 * _3103) + _3073) * _3088))) * _3102;
                        float _4432 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                        float _3124 = (((_3074 * 3.1415927410125732421875) * (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) / ((_3096 * _3096) * ((_3040 * 2.1991131305694580078125) + 3.141590118408203125))) * _3029;
                        _2882 = (_3044 * _2992.x) + _2950;
                        _2883 = (_3044 * _2992.y) + _2951;
                        _2884 = (_3044 * _2992.z) + _2952;
                        _2879 = (_3124 * _3009.x) + _2947;
                        _2880 = (_3124 * _3009.y) + _2948;
                        _2881 = (_3124 * _3009.z) + _2949;
                        if (_2954 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2947 = _2879;
                            _2948 = _2880;
                            _2949 = _2881;
                            _2950 = _2882;
                            _2951 = _2883;
                            _2952 = _2884;
                            _2953 = _2954;
                        }
                    }
                    frontier_phi_68_pred = _2884;
                    frontier_phi_68_pred_1 = _2883;
                    frontier_phi_68_pred_2 = _2882;
                    frontier_phi_68_pred_3 = _2880;
                    frontier_phi_68_pred_4 = _2879;
                    frontier_phi_68_pred_5 = _2881;
                }
                _2690 = frontier_phi_68_pred;
                _2688 = frontier_phi_68_pred_1;
                _2686 = frontier_phi_68_pred_2;
                _2682 = frontier_phi_68_pred_3;
                _2680 = frontier_phi_68_pred_4;
                _2684 = frontier_phi_68_pred_5;
                uint _2830 = _2829 + 1u;
                if (_2830 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2823 = _2680;
                    _2824 = _2682;
                    _2825 = _2684;
                    _2826 = _2686;
                    _2827 = _2688;
                    _2828 = _2690;
                    _2829 = _2830;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2679 = _2680;
            _2681 = _2682;
            _2683 = _2684;
            _2685 = _2686;
            _2687 = _2688;
            _2689 = _2690;
        }
        uvec4 _2693 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2694 = _2693.z;
        uint _2696 = (_2694 >> 8u) & 15u;
        float _2791;
        float _2793;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        if (((4294967295u << _2696) & _2600) == 0u)
        {
            _2791 = _2679;
            _2793 = _2681;
            _2795 = _2683;
            _2797 = _2685;
            _2799 = _2687;
            _2801 = _2689;
        }
        else
        {
            float _2816 = inversesqrt(dot(vec3(_1678, _1679, _1680), vec3(_1678, _1679, _1680)));
            float _2817 = _2816 * _1678;
            float _2818 = _2816 * _1679;
            float _2819 = _2816 * _1680;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2696 < ((_2694 >> 12u) & 15u))
            {
                float _2792;
                float _2794;
                float _2796;
                float _2798;
                float _2800;
                float _2802;
                float _2930 = _2679;
                float _2931 = _2681;
                float _2932 = _2683;
                float _2933 = _2685;
                float _2934 = _2687;
                float _2935 = _2689;
                uint _2936 = _2696;
                uint _2945;
                bool _2946;
                for (;;)
                {
                    _2945 = texelFetch(g_lightClassification, int((((_2594 << 5u) + (_2580 << 9u)) + (_2936 << 2u)) >> 2u)).x;
                    _2946 = _2945 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2946)
                    {
                        frontier_phi_74_pred = _2932;
                        frontier_phi_74_pred_1 = _2931;
                        frontier_phi_74_pred_2 = _2930;
                        frontier_phi_74_pred_3 = _2935;
                        frontier_phi_74_pred_4 = _2934;
                        frontier_phi_74_pred_5 = _2933;
                    }
                    else
                    {
                        float _3129;
                        float _3130;
                        float _3131;
                        float _3132;
                        float _3133;
                        float _3134;
                        float _3425;
                        float _3426;
                        float _3427;
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3142 = _2930;
                        float _3143 = _2931;
                        float _3144 = _2932;
                        float _3145 = _2933;
                        float _3146 = _2934;
                        float _3147 = _2935;
                        uint _3148 = _2945;
                        uint _3149;
                        vec4 _3174;
                        float _3175;
                        vec4 _3190;
                        vec3 _3202;
                        vec4 _3218;
                        vec4 _3234;
                        float _3281;
                        bool _3282;
                        for (;;)
                        {
                            uint _3159 = ((_2936 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3148));
                            _3149 = (_3148 + 4294967295u) & _3148;
                            uint _3161 = _3159 * 40u;
                            _3174 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3161)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 3u)).x));
                            _3175 = _3174.w;
                            uint _3177 = (_3159 * 40u) + 4u;
                            _3190 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3177)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 3u)).x));
                            uint _3192 = (_3159 * 40u) + 8u;
                            _3202 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 2u)).x));
                            uint _3205 = (_3159 * 40u) + 16u;
                            _3218 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3205)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 3u)).x));
                            uint _3221 = (_3159 * 40u) + 20u;
                            _3234 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 3u)).x));
                            uint _3237 = (_3159 * 40u) + 24u;
                            vec4 _3250 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 3u)).x));
                            uint _3256 = (_3159 * 40u) + 28u;
                            vec4 _3269 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3256)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 3u)).x));
                            _3281 = fma(_1680, _3269.z, fma(_1679, _3269.y, _3269.x * _1678)) + _3269.w;
                            _3282 = !((fma(_1680, _3250.z, fma(_1679, _3250.y, _3250.x * _1678)) + _3250.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3282)
                            {
                                float _3309 = _3174.x - _1678;
                                float _3310 = _3174.y - _1679;
                                float _3311 = _3174.z - _1680;
                                float _3312 = dot(vec3(_3309, _3310, _3311), vec3(_3309, _3310, _3311));
                                float _3315 = inversesqrt(_3312);
                                float _3316 = _3315 * _3309;
                                float _3317 = _3315 * _3310;
                                float _3318 = _3315 * _3311;
                                float _3322 = 1.0 - (_3312 / (_3175 * _3175));
                                float _4443 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3323 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                                float _3327 = sqrt(_3312) * _3190.w;
                                float _3329 = 1.39999997615814208984375 / (_3327 + 1.39999997615814208984375);
                                float _3330 = _3329 * _3329;
                                float _3333 = ((1.0 - _3330) * dot(vec3(_3316, _3317, _3318), vec3(_557, _560, _563))) + _3330;
                                float _3336 = _3327 * _3327;
                                float _3340 = (fma(_1680, _3218.z, fma(_1679, _3218.y, _3218.x * _1678)) + _3218.w) / _3281;
                                float _3341 = (fma(_1680, _3234.z, fma(_1679, _3234.y, _3234.x * _1678)) + _3234.w) / _3281;
                                float _3345 = 1.0 - dot(vec2(_3340, _3341), vec2(_3340, _3341));
                                float _4459 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3346 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                                float _3347 = _3346 * (((isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0))) * _3323) / ((_3336 * 0.699999988079071044921875) + 1.0));
                                float _3359 = exp2(log2(1.0 / ((_3336 * 3.5) + 5.0)) * 0.25);
                                float _3360 = 1.0 - _617;
                                float _3367 = sqrt(1.0 - ((1.0 - (_3360 * _3360)) * (1.0 - (_3359 * _3359))));
                                float _3368 = _3367 * _3367;
                                float _3369 = _3368 * _3368;
                                float _3370 = _3316 - _2817;
                                float _3371 = _3317 - _2818;
                                float _3372 = _3318 - _2819;
                                float _3376 = inversesqrt(dot(vec3(_3370, _3371, _3372), vec3(_3370, _3371, _3372)));
                                float _3380 = dot(vec3(_557, _560, _563), vec3((-0.0) - _2817, (-0.0) - _2818, (-0.0) - _2819));
                                float _4470 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                                float _3383 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                                float _3384 = dot(vec3(_557, _560, _563), vec3(_3376 * _3370, _3376 * _3371, _3376 * _3372));
                                float _4481 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                                float _3387 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
                                float _3391 = ((_3387 * _3387) * (_3369 + (-1.0))) + 1.0;
                                float _3392 = _3329 * _3368;
                                float _3393 = _3392 * _3392;
                                float _3399 = ((1.0 - _3393) * dot(vec3(_557, _560, _563), vec3(_3316, _3317, _3318))) + _3393;
                                float _4492 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                                float _3400 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                                float _3401 = 1.0 - _3368;
                                float _3411 = (0.5 / (((_3400 * ((_3383 * _3401) + _3368)) + 9.9999999392252902907785028219223e-09) + (((_3400 * _3401) + _3368) * _3383))) * _3400;
                                float _4503 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                                float _3421 = (_3346 * _3323) * (((_3369 * 3.1415927410125732421875) * (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0)))) / ((_3391 * _3391) * ((_3336 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3421 * _3202.z;
                                frontier_phi_80_pred_1 = _3421 * _3202.y;
                                frontier_phi_80_pred_2 = _3421 * _3202.x;
                                frontier_phi_80_pred_3 = _3347 * _3190.z;
                                frontier_phi_80_pred_4 = _3347 * _3190.y;
                                frontier_phi_80_pred_5 = _3347 * _3190.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3427 = frontier_phi_80_pred;
                            _3426 = frontier_phi_80_pred_1;
                            _3425 = frontier_phi_80_pred_2;
                            _3430 = frontier_phi_80_pred_3;
                            _3429 = frontier_phi_80_pred_4;
                            _3428 = frontier_phi_80_pred_5;
                            _3132 = _3428 + _3145;
                            _3133 = _3429 + _3146;
                            _3134 = _3430 + _3147;
                            _3129 = _3425 + _3142;
                            _3130 = _3426 + _3143;
                            _3131 = _3427 + _3144;
                            if (_3149 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3142 = _3129;
                                _3143 = _3130;
                                _3144 = _3131;
                                _3145 = _3132;
                                _3146 = _3133;
                                _3147 = _3134;
                                _3148 = _3149;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3131;
                        frontier_phi_74_pred_1 = _3130;
                        frontier_phi_74_pred_2 = _3129;
                        frontier_phi_74_pred_3 = _3134;
                        frontier_phi_74_pred_4 = _3133;
                        frontier_phi_74_pred_5 = _3132;
                    }
                    _2796 = frontier_phi_74_pred;
                    _2794 = frontier_phi_74_pred_1;
                    _2792 = frontier_phi_74_pred_2;
                    _2802 = frontier_phi_74_pred_3;
                    _2800 = frontier_phi_74_pred_4;
                    _2798 = frontier_phi_74_pred_5;
                    uint _2937 = _2936 + 1u;
                    if (_2937 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2930 = _2792;
                        _2931 = _2794;
                        _2932 = _2796;
                        _2933 = _2798;
                        _2934 = _2800;
                        _2935 = _2802;
                        _2936 = _2937;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2800;
                frontier_phi_62_63_ladder_1 = _2798;
                frontier_phi_62_63_ladder_2 = _2796;
                frontier_phi_62_63_ladder_3 = _2802;
                frontier_phi_62_63_ladder_4 = _2794;
                frontier_phi_62_63_ladder_5 = _2792;
            }
            else
            {
                frontier_phi_62_63_ladder = _2687;
                frontier_phi_62_63_ladder_1 = _2685;
                frontier_phi_62_63_ladder_2 = _2683;
                frontier_phi_62_63_ladder_3 = _2689;
                frontier_phi_62_63_ladder_4 = _2681;
                frontier_phi_62_63_ladder_5 = _2679;
            }
            _2791 = frontier_phi_62_63_ladder_5;
            _2793 = frontier_phi_62_63_ladder_4;
            _2795 = frontier_phi_62_63_ladder_2;
            _2797 = frontier_phi_62_63_ladder_1;
            _2799 = frontier_phi_62_63_ladder;
            _2801 = frontier_phi_62_63_ladder_3;
        }
        float _2806 = isnan(1.0) ? _601 : (isnan(_601) ? 1.0 : min(_601, 1.0));
        _2612 = (_2806 * _2797) + _2144;
        _2614 = (_2806 * _2799) + _2146;
        _2616 = (_2806 * _2801) + _2148;
        _2618 = ((_2791 * 0.039999999105930328369140625) * _2806) + _2467;
        _2620 = ((_2793 * 0.039999999105930328369140625) * _2806) + _2469;
        _2622 = ((_2795 * 0.039999999105930328369140625) * _2806) + _2471;
    }
    else
    {
        _2612 = _2144;
        _2614 = _2146;
        _2616 = _2148;
        _2618 = _2467;
        _2620 = _2469;
        _2622 = _2471;
    }
    float _4519 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _4530 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _4541 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    uint _2642 = _576 + 6u;
    float _2650 = _536 / cbSceneParam._m0[86u].x;
    float _2651 = _537 / cbSceneParam._m0[86u].y;
    vec4 _2665 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2650, _2651, (log2((isnan(cbSceneParam._m0[77u].w) ? _470 : (isnan(_470) ? cbSceneParam._m0[77u].w : min(_470, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2667 = _2665.x;
    float _2668 = _2665.y;
    float _2669 = _2665.z;
    float _2670 = _2665.w;
    float _2741;
    float _2743;
    float _2745;
    float _2747;
    if (_470 > cbSceneParam._m0[78u].w)
    {
        float _2704 = isnan(_470) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _470 : min(cbSceneParam._m0[80u].w, _470));
        float _2705 = _2704 / _470;
        float _2716 = _2705 * _521;
        float _2717 = _522 * _2705;
        float _2718 = (-0.0) - _2717;
        float _2719 = _2705 * _523;
        float _2721 = (cbSceneParam._m0[77u].w * _2718) / _2704;
        float _2722 = _2721 + cbSceneParam._m0[79u].w;
        float _2723 = cbSceneParam._m0[79u].w - _2717;
        float _2729 = sqrt(((_2716 * _2716) + (_2717 * _2717)) + (_2719 * _2719));
        float _2732 = (1.0 - (cbSceneParam._m0[77u].w / _2704)) * _2729;
        float _2737 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2739 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2892;
        if (abs((_2718 - _2721) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2892 = ((((_2722 > 0.0) ? exp2(_2737 * _2722) : (2.0 - exp2(_2739 * _2722))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2732;
        }
        else
        {
            float _2852 = 1.0 / cbSceneParam._m0[80u].x;
            float _2853 = isnan(_2723) ? _2722 : (isnan(_2722) ? _2723 : max(_2722, _2723));
            float _2854 = isnan(_2723) ? _2722 : (isnan(_2722) ? _2723 : min(_2722, _2723));
            float _2863 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : min(_2853, 0.0));
            float _2864 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : min(_2854, 0.0));
            _2892 = ((abs(_2729 / _2718) * cbSceneParam._m0[80u].y) * ((((_2863 - _2864) * 2.0) - ((exp2(_2737 * (isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0)))) - exp2(_2737 * (isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0))))) * _2852)) - ((exp2(_2739 * _2863) - exp2(_2739 * _2864)) * _2852))) + (_2732 * cbSceneParam._m0[80u].z);
        }
        vec4 _2894 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2650, _2651, 1.0), 0.0);
        float _2903 = exp2((_2892 * (-1.44269502162933349609375)) * (1.0 - _2894.w));
        float _2904 = log2(_2903);
        float _2920 = log2(_2670);
        _2741 = (exp2(_2920 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2904 * cbSceneParam._m0[78u].x)) * _2894.x) / cbSceneParam._m0[78u].x)) + _2667;
        _2743 = (exp2(_2920 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2904 * cbSceneParam._m0[78u].y)) * _2894.y) / cbSceneParam._m0[78u].y)) + _2668;
        _2745 = (exp2(_2920 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2904 * cbSceneParam._m0[78u].z)) * _2894.z) / cbSceneParam._m0[78u].z)) + _2669;
        _2747 = _2903 * _2670;
    }
    else
    {
        _2741 = _2667;
        _2743 = _2668;
        _2745 = _2669;
        _2747 = _2670;
    }
    float _2759 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2760 = _2759 == 3.0;
    float _2761 = log2(_2747);
    float _2768 = exp2(_2761 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * (_2612 + ((isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0))) * _601))) + ((_2618 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _1408)) * cbPerFrame._m0[3u].x));
    float _2769 = exp2(_2761 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_2614 + ((isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0))) * _601))) + ((_2620 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _1408)) * cbPerFrame._m0[3u].x));
    float _2770 = exp2(_2761 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * (_2616 + ((isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0))) * _601))) + ((_2622 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _1408)) * cbPerFrame._m0[3u].x));
    float _2779 = (_2759 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2779 * (_2760 ? _2768 : (_2768 + (cbSceneParam._m0[72u].w * _2741)));
    SV_Target.y = _2779 * (_2760 ? _2769 : (_2769 + (cbSceneParam._m0[72u].w * _2743)));
    SV_Target.z = _2779 * (_2760 ? _2770 : (_2770 + (cbSceneParam._m0[72u].w * _2745)));
    SV_Target.w = cbInstanceData._m0[_2642].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2642].w;
}


