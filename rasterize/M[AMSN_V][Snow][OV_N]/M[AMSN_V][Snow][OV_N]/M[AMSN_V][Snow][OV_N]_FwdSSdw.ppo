#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Snow_OV_N_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Snow_OV_N_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Snow_OV_N_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Snow_OV_N_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Snow_OV_N_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Snow_OV_N_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _971;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _197 = _196 * _188;
    float _198 = _196 * _189;
    float _199 = _196 * _190;
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211 = _210 * TANGENT.x;
    float _212 = _210 * TANGENT.y;
    float _213 = _210 * TANGENT.z;
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    vec4 _239 = texture(sampler2D(M_AMSN_V_Snow_OV_N_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _244 = _239.z;
    float _248 = (_239.x * 2.0) + (-1.0);
    float _250 = (_239.y * 2.0) + (-1.0);
    float _251 = dot(vec2(_248, _250), vec2(_248, _250));
    float _3309 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _257 = sqrt(1.0 - (isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0))));
    float _260 = fma(_257, _218, fma(_250, _211, _248 * _197));
    float _263 = fma(_257, _219, fma(_250, _212, _248 * _198));
    float _266 = fma(_257, _220, fma(_250, _213, _248 * _199));
    float _275 = exp2(log2(inversesqrt(dot(vec3(_260, _263, _266), vec3(_260, _263, _266))) * _263) * cbMtdParam._m0[11u].x) * cbMtdParam._m0[11u].y;
    float _3320 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _300 = ((cbMtdParam._m0[11u].w * (-1.39999997615814208984375)) * ((texture(sampler2D(M_AMSN_V_Snow_OV_N_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w)).x + (-1.0)) + ((1.0 - TEXCOORD_3.x) * 2.0))) + 1.0;
    float _3331 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _308 = (((isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0))) + 1.0) - cbMtdParam._m0[12u].x) * (isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0)));
    float _309 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _310 = isnan(1.0) ? _309 : (isnan(_309) ? 1.0 : min(_309, 1.0));
    vec4 _322 = texture(sampler2D(M_AMSN_V_Snow_OV_N_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    vec4 _347 = texture(sampler2D(M_AMSN_V_Snow_OV_N_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _358 = cbMtdParam._m0[9u].x * _347.x;
    float _359 = cbMtdParam._m0[9u].y * _347.y;
    float _360 = cbMtdParam._m0[9u].z * _347.z;
    float _367 = (((cbMtdParam._m0[10u].x * _322.x) - _358) * _310) + _358;
    float _368 = (((cbMtdParam._m0[10u].y * _322.y) - _359) * _310) + _359;
    float _369 = (((cbMtdParam._m0[10u].z * _322.z) - _360) * _310) + _360;
    vec4 _381 = texture(sampler2D(M_AMSN_V_Snow_OV_N_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _388 = (_381.x * 2.0) + (-1.0);
    float _389 = (_381.y * 2.0) + (-1.0);
    float _390 = dot(vec2(_388, _389), vec2(_388, _389));
    float _3352 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _398 = ((_381.z - _244) * _310) + _244;
    float _407 = ((sqrt(1.0 - (isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0)))) - _257) * _310) + _257;
    vec4 _421 = texture(sampler2D(M_AMSN_V_Snow_OV_N_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _431 = (((_388 - _248) * _310) + _248) + (((_421.x * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z);
    float _432 = (((_389 - _250) * _310) + _250) + (((_421.y * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z);
    float _435 = fma(_407, _218, fma(_432, _211, _431 * _197));
    float _438 = fma(_407, _219, fma(_432, _212, _431 * _198));
    float _441 = fma(_407, _220, fma(_432, _213, _431 * _199));
    float _445 = inversesqrt(dot(vec3(_435, _438, _441), vec3(_435, _438, _441)));
    float _446 = _445 * _435;
    float _447 = _445 * _438;
    float _448 = _445 * _441;
    float _3363 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _449 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
    float _3374 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _3385 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _3396 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _468 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _509 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _519 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _509);
    float _520 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _509);
    float _521 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _509);
    float _525 = inversesqrt(dot(vec3(_519, _520, _521), vec3(_519, _520, _521)));
    float _526 = _519 * _525;
    float _527 = _520 * _525;
    float _528 = _521 * _525;
    float _534 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _535 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _555 = fma(_448, cbSceneParam._m0[5u].z, fma(_447, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _446));
    float _558 = fma(_448, cbSceneParam._m0[6u].z, fma(_447, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _446));
    float _561 = fma(_448, cbSceneParam._m0[7u].z, fma(_447, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _446));
    uint _574 = uint(roundEven(NORMAL.w)) * 13u;
    uint _576 = (_574 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _582 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0)))) * cbInstanceData._m0[_576].x;
    float _583 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0)))) * cbInstanceData._m0[_576].y;
    float _584 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0)))) * cbInstanceData._m0[_576].z;
    float _3407 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _585 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
    float _3418 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _586 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
    float _3429 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _587 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
    vec4 _596 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _534, cbSceneParam._m0[86u].y * _535));
    float _599 = _596.x * TEXCOORD_3.w;
    float _600 = dot(vec3(_446, _447, _448), vec3(_526, _527, _528));
    float _603 = _600 * 2.0;
    float _607 = (_603 * _446) - _526;
    float _608 = (_603 * _447) - _527;
    float _609 = (_603 * _448) - _528;
    float _613 = abs(dot(vec3(_526, _527, _528), vec3(_446, _447, _448)));
    float _3440 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _615 = sqrt(_449);
    float _628 = exp2((_615 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_615 * 3.0));
    float _660 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _664 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _668 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _970;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _695 = fma(_668, cbModelParam._m0[26u].z, fma(_664, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _660));
        float _699 = fma(_668, cbModelParam._m0[27u].z, fma(_664, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _660));
        float _703 = fma(_668, cbModelParam._m0[28u].z, fma(_664, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _660));
        float _728 = _660 + _446;
        float _729 = _664 + _447;
        float _730 = _668 + _448;
        float _740 = fma(_730, cbModelParam._m0[26u].z, fma(_729, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _728)) - _695;
        float _741 = fma(_730, cbModelParam._m0[27u].z, fma(_729, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _728)) - _699;
        float _742 = fma(_730, cbModelParam._m0[28u].z, fma(_729, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _728)) - _703;
        float _746 = inversesqrt(dot(vec3(_740, _741, _742), vec3(_740, _741, _742)));
        float _759 = ((_746 * _740) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_695 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _760 = ((_746 * _741) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_699 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _761 = ((_746 * _742) / cbModelParam._m0[34u].z) + ((((((_703 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _764 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_759, _760, _761), 0.0);
        vec4 _771 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_759, _760, _761), 0.0);
        vec4 _778 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_759, _760, _761), 0.0);
        vec4 _785 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_759, _760, _761), 0.0);
        float _798 = exp2((_764.w + (-0.5)) * 20.0) * 2.0;
        float _799 = _798 * (_764.x + (-0.5));
        float _800 = _798 * (_764.y + (-0.5));
        float _801 = _798 * (_764.z + (-0.5));
        float _808 = exp2((_771.w + (-0.5)) * 20.0) * 2.0;
        float _809 = _808 * (_771.x + (-0.5));
        float _810 = _808 * (_771.y + (-0.5));
        float _811 = _808 * (_771.z + (-0.5));
        float _818 = exp2((_778.w + (-0.5)) * 20.0) * 2.0;
        float _819 = _818 * (_778.x + (-0.5));
        float _820 = _818 * (_778.y + (-0.5));
        float _821 = _818 * (_778.z + (-0.5));
        float _828 = exp2((_785.w + (-0.5)) * 20.0) * 2.0;
        float _829 = _828 * (_785.x + (-0.5));
        float _830 = _828 * (_785.y + (-0.5));
        float _831 = _828 * (_785.z + (-0.5));
        float _832 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _833 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _834 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _835 = _799 * 0.5;
        float _836 = _809 * 0.5;
        float _837 = _819 * 0.5;
        float _838 = dot(vec3(_835, _836, _837), vec3(_835, _836, _837));
        float _843 = (_838 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_838);
        float _852 = (dot(vec3(_446, _447, _448), vec3(_843 * _835, _843 * _836, _843 * _837)) + 1.0) * 0.5;
        float _3466 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _862 = sqrt(((_836 * _836) + (_835 * _835)) + (_837 * _837)) / (_832 + 9.9999997473787516355514526367188e-06);
        float _3477 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _863 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
        float _864 = _863 * 2.0;
        float _868 = (1.0 - _863) / (_863 + 1.0);
        float _3488 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _869 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
        float _878 = ((((1.0 - _869) * (_864 + 2.0)) * exp2(log2(isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0))) * (_864 + 1.0))) + _869) * _832;
        float _879 = _800 * 0.5;
        float _880 = _810 * 0.5;
        float _881 = _820 * 0.5;
        float _882 = dot(vec3(_879, _880, _881), vec3(_879, _880, _881));
        float _887 = (_882 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_882);
        float _895 = (dot(vec3(_446, _447, _448), vec3(_887 * _879, _887 * _880, _887 * _881)) + 1.0) * 0.5;
        float _3499 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _904 = sqrt(((_880 * _880) + (_879 * _879)) + (_881 * _881)) / (_833 + 9.9999997473787516355514526367188e-06);
        float _3510 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _905 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _906 = _905 * 2.0;
        float _910 = (1.0 - _905) / (_905 + 1.0);
        float _3521 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _911 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _920 = ((((1.0 - _911) * (_906 + 2.0)) * exp2(log2(isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) * (_906 + 1.0))) + _911) * _833;
        float _921 = _801 * 0.5;
        float _922 = _811 * 0.5;
        float _923 = _821 * 0.5;
        float _924 = dot(vec3(_921, _922, _923), vec3(_921, _922, _923));
        float _929 = (_924 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_924);
        float _937 = (dot(vec3(_446, _447, _448), vec3(_929 * _921, _929 * _922, _929 * _923)) + 1.0) * 0.5;
        float _3532 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _946 = sqrt(((_922 * _922) + (_921 * _921)) + (_923 * _923)) / (_834 + 9.9999997473787516355514526367188e-06);
        float _3543 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _948 = _947 * 2.0;
        float _952 = (1.0 - _947) / (_947 + 1.0);
        float _3554 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _962 = ((((1.0 - _953) * (_948 + 2.0)) * exp2(log2(isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * (_948 + 1.0))) + _953) * _834;
        _970 = _801;
        _972 = _800;
        _973 = _799;
        _974 = _811;
        _975 = _810;
        _976 = _809;
        _977 = _821;
        _978 = _820;
        _979 = _819;
        _980 = _834;
        _981 = _833;
        _982 = _832;
        _983 = cbModelParam._m0[36u].z * (isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0)));
        _984 = cbModelParam._m0[36u].z * (isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0)));
        _985 = cbModelParam._m0[36u].z * (isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0)));
    }
    else
    {
        _970 = _971;
        _972 = _971;
        _973 = _971;
        _974 = _971;
        _975 = _971;
        _976 = _971;
        _977 = _971;
        _978 = _971;
        _979 = _971;
        _980 = _971;
        _981 = _971;
        _982 = _971;
        _983 = 0.0;
        _984 = 0.0;
        _985 = 0.0;
    }
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1011 = fma(_668, cbModelParam._m0[30u].z, fma(_664, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _660));
        float _1015 = fma(_668, cbModelParam._m0[31u].z, fma(_664, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _660));
        float _1019 = fma(_668, cbModelParam._m0[32u].z, fma(_664, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _660));
        float _1042 = _660 + _446;
        float _1043 = _664 + _447;
        float _1044 = _668 + _448;
        float _1054 = fma(_1044, cbModelParam._m0[30u].z, fma(_1043, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1042)) - _1011;
        float _1055 = fma(_1044, cbModelParam._m0[31u].z, fma(_1043, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1042)) - _1015;
        float _1056 = fma(_1044, cbModelParam._m0[32u].z, fma(_1043, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1042)) - _1019;
        float _1060 = inversesqrt(dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056)));
        float _1073 = ((_1060 * _1054) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1011 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1074 = ((_1060 * _1055) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1015 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1075 = ((_1060 * _1056) / cbModelParam._m0[35u].z) + ((((((_1019 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        float _1110 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1077.x + (-0.5));
        float _1112 = _1110 * (_1077.y + (-0.5));
        float _1113 = _1110 * (_1077.z + (-0.5));
        float _1120 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1084.x + (-0.5));
        float _1122 = _1120 * (_1084.y + (-0.5));
        float _1123 = _1120 * (_1084.z + (-0.5));
        float _1130 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1091.x + (-0.5));
        float _1132 = _1130 * (_1091.y + (-0.5));
        float _1133 = _1130 * (_1091.z + (-0.5));
        float _1140 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1098.x + (-0.5));
        float _1142 = _1140 * (_1098.y + (-0.5));
        float _1143 = _1140 * (_1098.z + (-0.5));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = _1111 * 0.5;
        float _1148 = _1121 * 0.5;
        float _1149 = _1131 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1163 = (dot(vec3(_446, _447, _448), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _3595 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1172 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _3606 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _3617 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * (_1174 + 1.0))) + _1179) * _1144;
        float _1189 = _1112 * 0.5;
        float _1190 = _1122 * 0.5;
        float _1191 = _1132 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1205 = (dot(vec3(_446, _447, _448), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _3628 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1214 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _3639 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _3650 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * (_1216 + 1.0))) + _1221) * _1145;
        float _1231 = _1113 * 0.5;
        float _1232 = _1123 * 0.5;
        float _1233 = _1133 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1247 = (dot(vec3(_446, _447, _448), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _3661 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1256 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _3672 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _3683 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * (_1258 + 1.0))) + _1263) * _1146;
        _1280 = _1113;
        _1281 = _1112;
        _1282 = _1111;
        _1283 = _1123;
        _1284 = _1122;
        _1285 = _1121;
        _1286 = _1133;
        _1287 = _1132;
        _1288 = _1131;
        _1289 = _1146;
        _1290 = _1145;
        _1291 = _1144;
        _1292 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
        _1293 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
        _1294 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
    }
    else
    {
        _1280 = _971;
        _1281 = _971;
        _1282 = _971;
        _1283 = _971;
        _1284 = _971;
        _1285 = _971;
        _1286 = _971;
        _1287 = _971;
        _1288 = _971;
        _1289 = _971;
        _1290 = _971;
        _1291 = _971;
        _1292 = 0.0;
        _1293 = 0.0;
        _1294 = 0.0;
    }
    float _1304 = (cbModelParam._m0[1u].x * (_1292 - _983)) + _983;
    float _1305 = (cbModelParam._m0[1u].x * (_1293 - _984)) + _984;
    float _1306 = (cbModelParam._m0[1u].x * (_1294 - _985)) + _985;
    float _1327 = fma(_1306, cbSceneParam._m0[89u].z, fma(_1305, cbSceneParam._m0[89u].y, _1304 * cbSceneParam._m0[89u].x));
    float _1330 = fma(_1306, cbSceneParam._m0[90u].z, fma(_1305, cbSceneParam._m0[90u].y, _1304 * cbSceneParam._m0[90u].x));
    float _1333 = fma(_1306, cbSceneParam._m0[91u].z, fma(_1305, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1304));
    float _1348 = _607 * 0.5;
    float _1349 = _608 * 0.5;
    float _1350 = _609 * 0.5;
    float _1351 = dot(vec4(_1348, _1349, _1350, 1.0), vec4(_1282, _1285, _1288, _1291));
    float _1354 = dot(vec4(_1348, _1349, _1350, 1.0), vec4(_1281, _1284, _1287, _1290));
    float _1357 = dot(vec4(_1348, _1349, _1350, 1.0), vec4(_1280, _1283, _1286, _1289));
    float _1391;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1364 = dot(vec4(_1348, _1349, _1350, 1.0), vec4(_970, _974, _977, _980));
        float _1368 = dot(vec4(_1348, _1349, _1350, 1.0), vec4(_972, _975, _978, _981));
        float _1372 = dot(vec4(_1348, _1349, _1350, 1.0), vec4(_973, _976, _979, _982));
        float _1379 = dot(vec4(cbModelParam._m0[39u]), vec4(_1348, _1349, _1350, 1.0));
        _1391 = dot(vec3(isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)), isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)), isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1379) ? 0.0 : (isnan(0.0) ? _1379 : max(0.0, _1379))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1391 = 1.0;
    }
    float _1402;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1393 = dot(vec4(cbModelParam._m0[40u]), vec4(_1348, _1349, _1350, 1.0));
        _1402 = dot(vec3(isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)), isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)), isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1393) ? 0.0 : (isnan(0.0) ? _1393 : max(0.0, _1393))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1402 = 1.0;
    }
    float _1406 = (_1402 * cbModelParam._m0[1u].x) + (_1391 * (1.0 - cbModelParam._m0[1u].x));
    float _1416 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _449);
    float _1417 = isnan(_1416) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1416 : min(cbModelParam._m0[25u].z, _1416));
    float _1499;
    float _1501;
    float _1503;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1466 = fma(_668, cbModelParam._m0[13u].z, fma(_664, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _660)) + cbModelParam._m0[13u].w;
        float _1470 = fma(_668, cbModelParam._m0[14u].z, fma(_664, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _660)) + cbModelParam._m0[14u].w;
        float _1474 = fma(_668, cbModelParam._m0[15u].z, fma(_664, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _660)) + cbModelParam._m0[15u].w;
        float _1477 = fma(_609, cbModelParam._m0[13u].z, fma(_608, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _607));
        float _1480 = fma(_609, cbModelParam._m0[14u].z, fma(_608, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _607));
        float _1483 = fma(_609, cbModelParam._m0[15u].z, fma(_608, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _607));
        float _1511;
        if (_1477 > 0.0)
        {
            _1511 = abs((1.0 - _1466) / _1477);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1477 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1466 + 1.0) / _1477);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1511 = frontier_phi_16_14_ladder;
        }
        float _1736;
        if (_1480 > 0.0)
        {
            _1736 = abs((1.0 - _1470) / _1480);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1480 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1470 + 1.0) / _1480);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1736 = frontier_phi_25_21_ladder;
        }
        float _1982;
        if (_1483 > 0.0)
        {
            _1982 = abs((1.0 - _1474) / _1483);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1483 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1474 + 1.0) / _1483);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1982 = frontier_phi_37_32_ladder;
        }
        float _1984 = isnan(_1736) ? _1511 : (isnan(_1511) ? _1736 : min(_1511, _1736));
        float _1985 = isnan(_1982) ? _1984 : (isnan(_1984) ? _1982 : min(_1984, _1982));
        float _1989 = (_1985 * _1477) + _1466;
        float _1990 = (_1985 * _1480) + _1470;
        float _1991 = (_1985 * _1483) + _1474;
        float _1992 = _1985 * 9.9999997473787516355514526367188e-05;
        float _1994 = (-1.0) - _1992;
        float _1996 = _1992 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1991 > _1996) || ((_1991 < _1994) || ((_1990 > _1996) || ((_1990 < _1994) || ((_1989 < _1994) || (_1989 > _1996))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2115 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1991, cbModelParam._m0[9u].z, fma(_1990, cbModelParam._m0[9u].y, _1989 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1991, cbModelParam._m0[10u].z, fma(_1990, cbModelParam._m0[10u].y, _1989 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1991, cbModelParam._m0[11u].z, fma(_1990, cbModelParam._m0[11u].y, _1989 * cbModelParam._m0[11u].x))), _1417);
            frontier_phi_15_37_ladder = _2115.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2115.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2115.x * cbModelParam._m0[1u].y;
        }
        _1499 = frontier_phi_15_37_ladder_2;
        _1501 = frontier_phi_15_37_ladder_1;
        _1503 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1487 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_607, _608, _609), _1417);
        _1499 = _1487.x * cbModelParam._m0[1u].y;
        _1501 = _1487.y * cbModelParam._m0[1u].y;
        _1503 = _1487.z * cbModelParam._m0[1u].y;
    }
    float _1507 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _449);
    float _1508 = isnan(_1507) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1507 : min(cbModelParam._m0[25u].w, _1507));
    float _1601;
    float _1603;
    float _1605;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1565 = fma(_668, cbModelParam._m0[21u].z, fma(_664, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _660)) + cbModelParam._m0[21u].w;
        float _1569 = fma(_668, cbModelParam._m0[22u].z, fma(_664, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _660)) + cbModelParam._m0[22u].w;
        float _1573 = fma(_668, cbModelParam._m0[23u].z, fma(_664, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _660)) + cbModelParam._m0[23u].w;
        float _1576 = fma(_609, cbModelParam._m0[21u].z, fma(_608, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _607));
        float _1579 = fma(_609, cbModelParam._m0[22u].z, fma(_608, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _607));
        float _1582 = fma(_609, cbModelParam._m0[23u].z, fma(_608, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _607));
        float _1741;
        if (_1576 > 0.0)
        {
            _1741 = abs((1.0 - _1565) / _1576);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1576 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1565 + 1.0) / _1576);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1741 = frontier_phi_27_23_ladder;
        }
        float _2009;
        if (_1579 > 0.0)
        {
            _2009 = abs((1.0 - _1569) / _1579);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1579 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1569 + 1.0) / _1579);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2009 = frontier_phi_39_34_ladder;
        }
        float _2214;
        if (_1582 > 0.0)
        {
            _2214 = abs((1.0 - _1573) / _1582);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1582 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1573 + 1.0) / _1582);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2214 = frontier_phi_48_45_ladder;
        }
        float _2216 = isnan(_2009) ? _1741 : (isnan(_1741) ? _2009 : min(_1741, _2009));
        float _2217 = isnan(_2214) ? _2216 : (isnan(_2216) ? _2214 : min(_2216, _2214));
        float _2221 = (_2217 * _1576) + _1565;
        float _2222 = (_2217 * _1579) + _1569;
        float _2223 = (_2217 * _1582) + _1573;
        float _2224 = _2217 * 9.9999997473787516355514526367188e-05;
        float _2225 = (-1.0) - _2224;
        float _2227 = _2224 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2223 > _2227) || ((_2223 < _2225) || ((_2222 > _2227) || ((_2222 < _2225) || ((_2221 < _2225) || (_2221 > _2227))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2421 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2223, cbModelParam._m0[17u].z, fma(_2222, cbModelParam._m0[17u].y, _2221 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2223, cbModelParam._m0[18u].z, fma(_2222, cbModelParam._m0[18u].y, _2221 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2223, cbModelParam._m0[19u].z, fma(_2222, cbModelParam._m0[19u].y, _2221 * cbModelParam._m0[19u].x))), _1508);
            frontier_phi_24_48_ladder = _2421.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2421.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2421.x * cbModelParam._m0[1u].z;
        }
        _1601 = frontier_phi_24_48_ladder_2;
        _1603 = frontier_phi_24_48_ladder_1;
        _1605 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1585 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_607, _608, _609), _1508);
        _1601 = _1585.x * cbModelParam._m0[1u].z;
        _1603 = _1585.y * cbModelParam._m0[1u].z;
        _1605 = _1585.z * cbModelParam._m0[1u].z;
    }
    float _1617 = ((((1.0 - _628) * ((_615 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_628 * _615)) * _599;
    float _1618 = _1617 * ((cbModelParam._m0[1u].w * (_1601 - _1499)) + _1499);
    float _1619 = _1617 * ((cbModelParam._m0[1u].w * (_1603 - _1501)) + _1501);
    float _1620 = _1617 * ((cbModelParam._m0[1u].w * (_1605 - _1503)) + _1503);
    float _1623 = fma(_1620, cbSceneParam._m0[89u].z, fma(_1619, cbSceneParam._m0[89u].y, _1618 * cbSceneParam._m0[89u].x));
    float _1626 = fma(_1620, cbSceneParam._m0[90u].z, fma(_1619, cbSceneParam._m0[90u].y, _1618 * cbSceneParam._m0[90u].x));
    float _1629 = fma(_1620, cbSceneParam._m0[91u].z, fma(_1619, cbSceneParam._m0[91u].y, _1618 * cbSceneParam._m0[91u].x));
    vec4 _1637 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_534, _535));
    float _1639 = _1637.w;
    float _1651 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1639);
    float _1652 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1639);
    float _1653 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1639);
    uvec4 _1657 = floatBitsToUint(cbInstanceData._m0[_574 + 5u]);
    uint _1659 = _1657.x * 14u;
    uint _1660 = _1659 + 13u;
    float _1667 = _599 + (-1.0);
    float _1672 = (cbLight._m0[_1660].x * _1667) + 1.0;
    float _1673 = (cbLight._m0[_1660].y * _1667) + 1.0;
    float _1674 = (cbLight._m0[_1660].z * _1667) + 1.0;
    float _1675 = (cbLight._m0[_1660].w * _1667) + 1.0;
    uint _1676 = _1659 + 5u;
    float _1682 = isnan(1.0) ? _1673 : (isnan(_1673) ? 1.0 : min(_1673, 1.0));
    uint _1686 = _1659 + 4u;
    float _1695 = isnan(1.0) ? _1672 : (isnan(_1672) ? 1.0 : min(_1672, 1.0));
    uint _1699 = _1659 | 1u;
    float _1710 = dot(vec3(cbLight._m0[_1659].xyz), vec3(_446, _447, _448));
    float _1713 = dot(vec3(cbLight._m0[_1699].xyz), vec3(_446, _447, _448));
    float _3819 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
    float _3830 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
    float _1718 = (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * 0.3183098733425140380859375;
    float _1720 = (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * 0.3183098733425140380859375;
    float _1727 = ((cbLight._m0[_1676].x * _1682) * _1720) + (((cbLight._m0[_1686].x * _1651) * _1695) * _1718);
    float _1728 = ((_1682 * cbLight._m0[_1676].y) * _1720) + (((cbLight._m0[_1686].y * _1652) * _1695) * _1718);
    float _1729 = ((_1682 * cbLight._m0[_1676].z) * _1720) + (((cbLight._m0[_1686].z * _1653) * _1695) * _1718);
    uvec4 _1733 = floatBitsToUint(cbLight._m0[_1659 + 12u]);
    bool _1735 = _1733.x == 0u;
    float _1746;
    float _1748;
    float _1750;
    if (_1735)
    {
        _1746 = _1727;
        _1748 = _1728;
        _1750 = _1729;
    }
    else
    {
        uint _1754 = _1659 + 6u;
        float _1770 = (dot(vec3(cbLight._m0[_1659 + 2u].xyz), vec3(_446, _447, _448)) * 0.5) + 0.5;
        float _1771 = _1770 * _1770;
        float _3841 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1772 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1773 = isnan(1.0) ? _1674 : (isnan(_1674) ? 1.0 : min(_1674, 1.0));
        _1746 = (((cbLight._m0[_1754].x * 0.3183098733425140380859375) * _1772) * _1773) + _1727;
        _1748 = (((cbLight._m0[_1754].y * 0.3183098733425140380859375) * _1772) * _1773) + _1728;
        _1750 = (((cbLight._m0[_1754].z * 0.3183098733425140380859375) * _1772) * _1773) + _1729;
    }
    bool _1753 = _1733.y == 0u;
    float _1791;
    float _1793;
    float _1795;
    if (_1753)
    {
        _1791 = _1746;
        _1793 = _1748;
        _1795 = _1750;
    }
    else
    {
        uint _1953 = _1659 + 7u;
        float _1969 = (dot(vec3(cbLight._m0[_1659 + 3u].xyz), vec3(_446, _447, _448)) * 0.5) + 0.5;
        float _1970 = _1969 * _1969;
        float _3857 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1971 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1972 = isnan(1.0) ? _1675 : (isnan(_1675) ? 1.0 : min(_1675, 1.0));
        _1791 = (((cbLight._m0[_1953].x * 0.3183098733425140380859375) * _1971) * _1972) + _1746;
        _1793 = (((cbLight._m0[_1953].y * 0.3183098733425140380859375) * _1971) * _1972) + _1748;
        _1795 = (((cbLight._m0[_1953].z * 0.3183098733425140380859375) * _1971) * _1972) + _1750;
    }
    uint _1798 = _1659 + 8u;
    float _1811 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1659].w)) * _449) * 0.949999988079071044921875);
    float _1812 = _1811 * _1811;
    float _1813 = cbLight._m0[_1659].x + _526;
    float _1814 = cbLight._m0[_1659].y + _527;
    float _1815 = cbLight._m0[_1659].z + _528;
    float _1819 = inversesqrt(dot(vec3(_1813, _1814, _1815), vec3(_1813, _1814, _1815)));
    float _1820 = _1819 * _1813;
    float _1821 = _1819 * _1814;
    float _1822 = _1819 * _1815;
    float _1823 = dot(vec3(_446, _447, _448), vec3(cbLight._m0[_1659].xyz));
    float _3873 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1826 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _3884 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _1827 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _1828 = dot(vec3(_446, _447, _448), vec3(_1820, _1821, _1822));
    float _3895 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1831 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _1832 = dot(vec3(cbLight._m0[_1659].xyz), vec3(_1820, _1821, _1822));
    float _3906 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1836 = _1812 * _1812;
    float _1840 = ((_1831 * _1831) * (_1836 + (-1.0))) + 1.0;
    float _1851 = (exp2(log2(1.0 - (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1852 = 1.0 - _1812;
    float _1863 = (0.5 / (((_1827 * ((_1826 * _1852) + _1812)) + 9.9999999392252902907785028219223e-09) + (((_1827 * _1852) + _1812) * _1826))) * _1826;
    float _3917 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1865 = (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1836 / ((_1840 * _1840) * 3.141590118408203125));
    uint _1879 = _1659 + 9u;
    float _1890 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1699].w)) * _449) * 0.949999988079071044921875);
    float _1891 = _1890 * _1890;
    float _1892 = cbLight._m0[_1699].x + _526;
    float _1893 = cbLight._m0[_1699].y + _527;
    float _1894 = cbLight._m0[_1699].z + _528;
    float _1898 = inversesqrt(dot(vec3(_1892, _1893, _1894), vec3(_1892, _1893, _1894)));
    float _1899 = _1898 * _1892;
    float _1900 = _1898 * _1893;
    float _1901 = _1898 * _1894;
    float _1902 = dot(vec3(_446, _447, _448), vec3(cbLight._m0[_1699].xyz));
    float _3928 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1905 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _1906 = dot(vec3(_446, _447, _448), vec3(_1899, _1900, _1901));
    float _3939 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1909 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _1910 = dot(vec3(cbLight._m0[_1699].xyz), vec3(_1899, _1900, _1901));
    float _3950 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1914 = _1891 * _1891;
    float _1918 = ((_1909 * _1909) * (_1914 + (-1.0))) + 1.0;
    float _1927 = (exp2(log2(1.0 - (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1928 = 1.0 - _1891;
    float _1938 = (0.5 / (((_1827 * ((_1905 * _1928) + _1891)) + 9.9999999392252902907785028219223e-09) + (((_1827 * _1928) + _1891) * _1905))) * _1905;
    float _3961 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1940 = (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_1914 / ((_1918 * _1918) * 3.141590118408203125));
    float _1950 = (((_1927 * cbLight._m0[_1879].x) * _1940) * _1682) + ((((cbLight._m0[_1798].x * _1651) * _1851) * _1865) * _1695);
    float _1951 = (((_1927 * cbLight._m0[_1879].y) * _1940) * _1682) + ((((cbLight._m0[_1798].y * _1652) * _1851) * _1865) * _1695);
    float _1952 = (((_1927 * cbLight._m0[_1879].z) * _1940) * _1682) + ((((cbLight._m0[_1798].z * _1653) * _1851) * _1865) * _1695);
    float _2014;
    float _2016;
    float _2018;
    if (_1735)
    {
        _2014 = _1950;
        _2016 = _1951;
        _2018 = _1952;
    }
    else
    {
        uint _2020 = _1659 + 2u;
        uint _2024 = _1659 + 10u;
        float _2038 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2020].w)) * _449) * 0.949999988079071044921875);
        float _2039 = _2038 * _2038;
        float _2040 = cbLight._m0[_2020].x + _526;
        float _2041 = cbLight._m0[_2020].y + _527;
        float _2042 = cbLight._m0[_2020].z + _528;
        float _2046 = inversesqrt(dot(vec3(_2040, _2041, _2042), vec3(_2040, _2041, _2042)));
        float _2047 = _2046 * _2040;
        float _2048 = _2046 * _2041;
        float _2049 = _2046 * _2042;
        float _2050 = dot(vec3(_446, _447, _448), vec3(cbLight._m0[_2020].xyz));
        float _3972 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        float _2053 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _2054 = dot(vec3(_446, _447, _448), vec3(_2047, _2048, _2049));
        float _3983 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2057 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _2058 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_2047, _2048, _2049));
        float _3994 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2062 = _2039 * _2039;
        float _2066 = ((_2057 * _2057) * (_2062 + (-1.0))) + 1.0;
        float _2075 = (exp2(log2(1.0 - (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2076 = 1.0 - _2039;
        float _2086 = (0.5 / (((_1827 * ((_2053 * _2076) + _2039)) + 9.9999999392252902907785028219223e-09) + (((_1827 * _2076) + _2039) * _2053))) * _2053;
        float _4005 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2088 = (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (_2062 / ((_2066 * _2066) * 3.141590118408203125));
        float _2089 = isnan(1.0) ? _1674 : (isnan(_1674) ? 1.0 : min(_1674, 1.0));
        _2014 = (((_2075 * cbLight._m0[_2024].x) * _2088) * _2089) + _1950;
        _2016 = (((_2075 * cbLight._m0[_2024].y) * _2088) * _2089) + _1951;
        _2018 = (((_2075 * cbLight._m0[_2024].z) * _2088) * _2089) + _1952;
    }
    float _2124;
    float _2126;
    float _2128;
    if (_1753)
    {
        _2124 = _2014;
        _2126 = _2016;
        _2128 = _2018;
    }
    else
    {
        uint _2135 = _1659 + 3u;
        uint _2139 = _1659 + 11u;
        float _2153 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2135].w)) * _449) * 0.949999988079071044921875);
        float _2154 = _2153 * _2153;
        float _2155 = cbLight._m0[_2135].x + _526;
        float _2156 = cbLight._m0[_2135].y + _527;
        float _2157 = cbLight._m0[_2135].z + _528;
        float _2161 = inversesqrt(dot(vec3(_2155, _2156, _2157), vec3(_2155, _2156, _2157)));
        float _2162 = _2161 * _2155;
        float _2163 = _2161 * _2156;
        float _2164 = _2161 * _2157;
        float _2165 = dot(vec3(_446, _447, _448), vec3(cbLight._m0[_2135].xyz));
        float _4021 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2168 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _2169 = dot(vec3(_446, _447, _448), vec3(_2162, _2163, _2164));
        float _4032 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2172 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _2173 = dot(vec3(cbLight._m0[_2135].xyz), vec3(_2162, _2163, _2164));
        float _4043 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2177 = _2154 * _2154;
        float _2181 = ((_2172 * _2172) * (_2177 + (-1.0))) + 1.0;
        float _2190 = (exp2(log2(1.0 - (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2191 = 1.0 - _2154;
        float _2201 = (0.5 / (((_1827 * ((_2168 * _2191) + _2154)) + 9.9999999392252902907785028219223e-09) + (((_1827 * _2191) + _2154) * _2168))) * _2168;
        float _4054 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2203 = (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_2177 / ((_2181 * _2181) * 3.141590118408203125));
        float _2204 = isnan(1.0) ? _1675 : (isnan(_1675) ? 1.0 : min(_1675, 1.0));
        _2124 = (((_2190 * cbLight._m0[_2139].x) * _2203) * _2204) + _2014;
        _2126 = (((_2190 * cbLight._m0[_2139].y) * _2203) * _2204) + _2016;
        _2128 = (((_2190 * cbLight._m0[_2139].z) * _2203) * _2204) + _2018;
    }
    float _2338;
    float _2340;
    float _2342;
    float _2344;
    float _2346;
    float _2348;
    if (_1657.y == 0u)
    {
        float _2279 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2280 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2279;
        float _2281 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2279;
        float _2282 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2279;
        uvec4 _2294 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2295 = _2294.x;
        uint _2306 = uint((float(_2294.y) * floor(float(uint(cbSceneParam._m0[85u].y * _535) / _2295))) + floor(float(uint(cbSceneParam._m0[85u].x * _534) / _2295)));
        float _2316 = (log2(_2282 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2317 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        uint _2320 = uint(isnan(14.0) ? _2317 : (isnan(_2317) ? 14.0 : min(_2317, 14.0)));
        uvec4 _2325 = texelFetch(g_lightClusterGridBuffer, int(((_2320 << 2u) + (_2306 << 6u)) >> 2u));
        uint _2326 = _2325.x;
        uint _2327 = _2294.z;
        float _2426;
        float _2428;
        float _2430;
        float _2432;
        float _2434;
        float _2436;
        if (((((1u << ((_2327 >> 4u) & 15u)) + 4294967295u) & _2326) == 0u) || ((_2327 & 240u) == 0u))
        {
            _2426 = 0.0;
            _2428 = 0.0;
            _2430 = 0.0;
            _2432 = 0.0;
            _2434 = 0.0;
            _2436 = 0.0;
        }
        else
        {
            float _2427;
            float _2429;
            float _2431;
            float _2433;
            float _2435;
            float _2437;
            float _2570 = 0.0;
            float _2571 = 0.0;
            float _2572 = 0.0;
            float _2573 = 0.0;
            float _2574 = 0.0;
            float _2575 = 0.0;
            uint _2576 = 0u;
            uint _2585;
            bool _2586;
            for (;;)
            {
                _2585 = texelFetch(g_lightClassification, int((((_2320 << 5u) + (_2306 << 9u)) + (_2576 << 2u)) >> 2u)).x;
                _2586 = _2585 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2586)
                {
                    frontier_phi_63_pred = _2575;
                    frontier_phi_63_pred_1 = _2574;
                    frontier_phi_63_pred_2 = _2573;
                    frontier_phi_63_pred_3 = _2572;
                    frontier_phi_63_pred_4 = _2571;
                    frontier_phi_63_pred_5 = _2570;
                }
                else
                {
                    float _2694;
                    float _2695;
                    float _2696;
                    float _2697;
                    float _2698;
                    float _2699;
                    uint _2700;
                    _2694 = _2570;
                    _2695 = _2571;
                    _2696 = _2572;
                    _2697 = _2573;
                    _2698 = _2574;
                    _2699 = _2575;
                    _2700 = _2585;
                    float _2626;
                    float _2627;
                    float _2628;
                    float _2629;
                    float _2630;
                    float _2631;
                    for (;;)
                    {
                        uint _2704 = uint(findLSB(_2700)) + (_2576 << 5u);
                        uint _2701 = (_2700 + 4294967295u) & _2700;
                        uint _2706 = _2704 * 48u;
                        vec4 _2720 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2706)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 3u)).x));
                        uint _2726 = (_2704 * 48u) + 4u;
                        vec4 _2739 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2726)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 3u)).x));
                        uint _2745 = (_2704 * 48u) + 8u;
                        vec3 _2756 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2745)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 2u)).x));
                        float _2760 = _2720.x - _2280;
                        float _2761 = _2720.y - _2281;
                        float _2762 = _2720.z - _2282;
                        float _2763 = dot(vec3(_2760, _2761, _2762), vec3(_2760, _2761, _2762));
                        float _2766 = inversesqrt(_2763);
                        float _2767 = _2766 * _2760;
                        float _2768 = _2766 * _2761;
                        float _2769 = _2766 * _2762;
                        float _2770 = dot(vec3(_555, _558, _561), vec3(_2767, _2768, _2769));
                        float _2775 = 1.0 - (_2763 * _2720.w);
                        float _4080 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
                        float _2776 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
                        float _2777 = sqrt(_2763) * _2739.w;
                        float _2780 = 1.39999997615814208984375 / (_2777 + 1.39999997615814208984375);
                        float _2781 = _2780 * _2780;
                        float _2784 = ((1.0 - _2781) * _2770) + _2781;
                        float _2787 = _2777 * _2777;
                        float _2791 = ((isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0))) * _2776) / ((_2787 * 0.699999988079071044921875) + 1.0);
                        float _2795 = (-0.0) - _2280;
                        float _2796 = (-0.0) - _2281;
                        float _2797 = (-0.0) - _2282;
                        float _2801 = inversesqrt(dot(vec3(_2795, _2796, _2797), vec3(_2795, _2796, _2797)));
                        float _2802 = _2801 * _2795;
                        float _2803 = _2801 * _2796;
                        float _2804 = _2801 * _2797;
                        float _2812 = exp2(log2(1.0 / ((_2787 * 3.5) + 5.0)) * 0.25);
                        float _2813 = 1.0 - _615;
                        float _2820 = sqrt(1.0 - ((1.0 - (_2813 * _2813)) * (1.0 - (_2812 * _2812))));
                        float _2821 = _2820 * _2820;
                        float _2822 = _2821 * _2821;
                        float _2823 = _2802 + _2767;
                        float _2824 = _2803 + _2768;
                        float _2825 = _2804 + _2769;
                        float _2829 = inversesqrt(dot(vec3(_2823, _2824, _2825), vec3(_2823, _2824, _2825)));
                        float _2833 = dot(vec3(_555, _558, _561), vec3(_2802, _2803, _2804));
                        float _4096 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
                        float _2836 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
                        float _2837 = dot(vec3(_555, _558, _561), vec3(_2829 * _2823, _2829 * _2824, _2829 * _2825));
                        float _4107 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
                        float _2840 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
                        float _2844 = ((_2840 * _2840) * (_2822 + (-1.0))) + 1.0;
                        float _2845 = _2780 * _2821;
                        float _2846 = _2845 * _2845;
                        float _2849 = ((1.0 - _2846) * _2770) + _2846;
                        float _4118 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
                        float _2850 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
                        float _2851 = 1.0 - _2821;
                        float _2861 = (0.5 / (((_2850 * ((_2836 * _2851) + _2821)) + 9.9999999392252902907785028219223e-09) + (((_2850 * _2851) + _2821) * _2836))) * _2850;
                        float _4129 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
                        float _2872 = (((_2822 * 3.1415927410125732421875) * (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) / ((_2844 * _2844) * ((_2787 * 2.1991131305694580078125) + 3.141590118408203125))) * _2776;
                        _2629 = (_2791 * _2739.x) + _2697;
                        _2630 = (_2791 * _2739.y) + _2698;
                        _2631 = (_2791 * _2739.z) + _2699;
                        _2626 = (_2872 * _2756.x) + _2694;
                        _2627 = (_2872 * _2756.y) + _2695;
                        _2628 = (_2872 * _2756.z) + _2696;
                        if (_2701 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2694 = _2626;
                            _2695 = _2627;
                            _2696 = _2628;
                            _2697 = _2629;
                            _2698 = _2630;
                            _2699 = _2631;
                            _2700 = _2701;
                        }
                    }
                    frontier_phi_63_pred = _2631;
                    frontier_phi_63_pred_1 = _2630;
                    frontier_phi_63_pred_2 = _2629;
                    frontier_phi_63_pred_3 = _2628;
                    frontier_phi_63_pred_4 = _2627;
                    frontier_phi_63_pred_5 = _2626;
                }
                _2437 = frontier_phi_63_pred;
                _2435 = frontier_phi_63_pred_1;
                _2433 = frontier_phi_63_pred_2;
                _2431 = frontier_phi_63_pred_3;
                _2429 = frontier_phi_63_pred_4;
                _2427 = frontier_phi_63_pred_5;
                uint _2577 = _2576 + 1u;
                if (_2577 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2570 = _2427;
                    _2571 = _2429;
                    _2572 = _2431;
                    _2573 = _2433;
                    _2574 = _2435;
                    _2575 = _2437;
                    _2576 = _2577;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2426 = _2427;
            _2428 = _2429;
            _2430 = _2431;
            _2432 = _2433;
            _2434 = _2435;
            _2436 = _2437;
        }
        uvec4 _2440 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2441 = _2440.z;
        uint _2443 = (_2441 >> 8u) & 15u;
        float _2538;
        float _2540;
        float _2542;
        float _2544;
        float _2546;
        float _2548;
        if (((4294967295u << _2443) & _2326) == 0u)
        {
            _2538 = _2426;
            _2540 = _2428;
            _2542 = _2430;
            _2544 = _2432;
            _2546 = _2434;
            _2548 = _2436;
        }
        else
        {
            float _2563 = inversesqrt(dot(vec3(_2280, _2281, _2282), vec3(_2280, _2281, _2282)));
            float _2564 = _2563 * _2280;
            float _2565 = _2563 * _2281;
            float _2566 = _2563 * _2282;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2443 < ((_2441 >> 12u) & 15u))
            {
                float _2539;
                float _2541;
                float _2543;
                float _2545;
                float _2547;
                float _2549;
                float _2677 = _2426;
                float _2678 = _2428;
                float _2679 = _2430;
                float _2680 = _2432;
                float _2681 = _2434;
                float _2682 = _2436;
                uint _2683 = _2443;
                uint _2692;
                bool _2693;
                for (;;)
                {
                    _2692 = texelFetch(g_lightClassification, int((((_2320 << 5u) + (_2306 << 9u)) + (_2683 << 2u)) >> 2u)).x;
                    _2693 = _2692 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2693)
                    {
                        frontier_phi_69_pred = _2682;
                        frontier_phi_69_pred_1 = _2681;
                        frontier_phi_69_pred_2 = _2680;
                        frontier_phi_69_pred_3 = _2679;
                        frontier_phi_69_pred_4 = _2678;
                        frontier_phi_69_pred_5 = _2677;
                    }
                    else
                    {
                        float _2877;
                        float _2878;
                        float _2879;
                        float _2880;
                        float _2881;
                        float _2882;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _2890 = _2677;
                        float _2891 = _2678;
                        float _2892 = _2679;
                        float _2893 = _2680;
                        float _2894 = _2681;
                        float _2895 = _2682;
                        uint _2896 = _2692;
                        uint _2897;
                        vec4 _2922;
                        float _2923;
                        vec4 _2938;
                        vec3 _2950;
                        vec4 _2966;
                        vec4 _2982;
                        float _3029;
                        bool _3030;
                        for (;;)
                        {
                            uint _2907 = ((_2683 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2896));
                            _2897 = (_2896 + 4294967295u) & _2896;
                            uint _2909 = _2907 * 40u;
                            _2922 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2909)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 3u)).x));
                            _2923 = _2922.w;
                            uint _2925 = (_2907 * 40u) + 4u;
                            _2938 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2925)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 3u)).x));
                            uint _2940 = (_2907 * 40u) + 8u;
                            _2950 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2940)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 2u)).x));
                            uint _2953 = (_2907 * 40u) + 16u;
                            _2966 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2953)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 3u)).x));
                            uint _2969 = (_2907 * 40u) + 20u;
                            _2982 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2969)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 3u)).x));
                            uint _2985 = (_2907 * 40u) + 24u;
                            vec4 _2998 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2985)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 3u)).x));
                            uint _3004 = (_2907 * 40u) + 28u;
                            vec4 _3017 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3004)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 3u)).x));
                            _3029 = fma(_2282, _3017.z, fma(_2281, _3017.y, _3017.x * _2280)) + _3017.w;
                            _3030 = !((fma(_2282, _2998.z, fma(_2281, _2998.y, _2998.x * _2280)) + _2998.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3030)
                            {
                                float _3057 = _2922.x - _2280;
                                float _3058 = _2922.y - _2281;
                                float _3059 = _2922.z - _2282;
                                float _3060 = dot(vec3(_3057, _3058, _3059), vec3(_3057, _3058, _3059));
                                float _3063 = inversesqrt(_3060);
                                float _3064 = _3063 * _3057;
                                float _3065 = _3063 * _3058;
                                float _3066 = _3063 * _3059;
                                float _3070 = 1.0 - (_3060 / (_2923 * _2923));
                                float _4140 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                                float _3071 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
                                float _3075 = sqrt(_3060) * _2938.w;
                                float _3077 = 1.39999997615814208984375 / (_3075 + 1.39999997615814208984375);
                                float _3078 = _3077 * _3077;
                                float _3081 = ((1.0 - _3078) * dot(vec3(_3064, _3065, _3066), vec3(_555, _558, _561))) + _3078;
                                float _3084 = _3075 * _3075;
                                float _3088 = (fma(_2282, _2966.z, fma(_2281, _2966.y, _2966.x * _2280)) + _2966.w) / _3029;
                                float _3089 = (fma(_2282, _2982.z, fma(_2281, _2982.y, _2982.x * _2280)) + _2982.w) / _3029;
                                float _3093 = 1.0 - dot(vec2(_3088, _3089), vec2(_3088, _3089));
                                float _4156 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                                float _3094 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                                float _3095 = _3094 * (((isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0))) * _3071) / ((_3084 * 0.699999988079071044921875) + 1.0));
                                float _3107 = exp2(log2(1.0 / ((_3084 * 3.5) + 5.0)) * 0.25);
                                float _3108 = 1.0 - _615;
                                float _3115 = sqrt(1.0 - ((1.0 - (_3108 * _3108)) * (1.0 - (_3107 * _3107))));
                                float _3116 = _3115 * _3115;
                                float _3117 = _3116 * _3116;
                                float _3118 = _3064 - _2564;
                                float _3119 = _3065 - _2565;
                                float _3120 = _3066 - _2566;
                                float _3124 = inversesqrt(dot(vec3(_3118, _3119, _3120), vec3(_3118, _3119, _3120)));
                                float _3128 = dot(vec3(_555, _558, _561), vec3((-0.0) - _2564, (-0.0) - _2565, (-0.0) - _2566));
                                float _4167 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                                float _3131 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
                                float _3132 = dot(vec3(_555, _558, _561), vec3(_3124 * _3118, _3124 * _3119, _3124 * _3120));
                                float _4178 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                                float _3135 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                                float _3139 = ((_3135 * _3135) * (_3117 + (-1.0))) + 1.0;
                                float _3140 = _3077 * _3116;
                                float _3141 = _3140 * _3140;
                                float _3147 = ((1.0 - _3141) * dot(vec3(_555, _558, _561), vec3(_3064, _3065, _3066))) + _3141;
                                float _4189 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                                float _3148 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                                float _3149 = 1.0 - _3116;
                                float _3159 = (0.5 / (((_3148 * ((_3131 * _3149) + _3116)) + 9.9999999392252902907785028219223e-09) + (((_3148 * _3149) + _3116) * _3131))) * _3148;
                                float _4200 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                                float _3169 = (_3094 * _3071) * (((_3117 * 3.1415927410125732421875) * (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0)))) / ((_3139 * _3139) * ((_3084 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3095 * _2938.z;
                                frontier_phi_75_pred_1 = _3095 * _2938.y;
                                frontier_phi_75_pred_2 = _3095 * _2938.x;
                                frontier_phi_75_pred_3 = _3169 * _2950.z;
                                frontier_phi_75_pred_4 = _3169 * _2950.y;
                                frontier_phi_75_pred_5 = _3169 * _2950.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3178 = frontier_phi_75_pred;
                            _3177 = frontier_phi_75_pred_1;
                            _3176 = frontier_phi_75_pred_2;
                            _3175 = frontier_phi_75_pred_3;
                            _3174 = frontier_phi_75_pred_4;
                            _3173 = frontier_phi_75_pred_5;
                            _2880 = _3176 + _2893;
                            _2881 = _3177 + _2894;
                            _2882 = _3178 + _2895;
                            _2877 = _3173 + _2890;
                            _2878 = _3174 + _2891;
                            _2879 = _3175 + _2892;
                            if (_2897 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2890 = _2877;
                                _2891 = _2878;
                                _2892 = _2879;
                                _2893 = _2880;
                                _2894 = _2881;
                                _2895 = _2882;
                                _2896 = _2897;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2882;
                        frontier_phi_69_pred_1 = _2881;
                        frontier_phi_69_pred_2 = _2880;
                        frontier_phi_69_pred_3 = _2879;
                        frontier_phi_69_pred_4 = _2878;
                        frontier_phi_69_pred_5 = _2877;
                    }
                    _2549 = frontier_phi_69_pred;
                    _2547 = frontier_phi_69_pred_1;
                    _2545 = frontier_phi_69_pred_2;
                    _2543 = frontier_phi_69_pred_3;
                    _2541 = frontier_phi_69_pred_4;
                    _2539 = frontier_phi_69_pred_5;
                    uint _2684 = _2683 + 1u;
                    if (_2684 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2677 = _2539;
                        _2678 = _2541;
                        _2679 = _2543;
                        _2680 = _2545;
                        _2681 = _2547;
                        _2682 = _2549;
                        _2683 = _2684;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2549;
                frontier_phi_57_58_ladder_1 = _2547;
                frontier_phi_57_58_ladder_2 = _2545;
                frontier_phi_57_58_ladder_3 = _2543;
                frontier_phi_57_58_ladder_4 = _2541;
                frontier_phi_57_58_ladder_5 = _2539;
            }
            else
            {
                frontier_phi_57_58_ladder = _2436;
                frontier_phi_57_58_ladder_1 = _2434;
                frontier_phi_57_58_ladder_2 = _2432;
                frontier_phi_57_58_ladder_3 = _2430;
                frontier_phi_57_58_ladder_4 = _2428;
                frontier_phi_57_58_ladder_5 = _2426;
            }
            _2538 = frontier_phi_57_58_ladder_5;
            _2540 = frontier_phi_57_58_ladder_4;
            _2542 = frontier_phi_57_58_ladder_3;
            _2544 = frontier_phi_57_58_ladder_2;
            _2546 = frontier_phi_57_58_ladder_1;
            _2548 = frontier_phi_57_58_ladder;
        }
        float _2553 = isnan(1.0) ? _599 : (isnan(_599) ? 1.0 : min(_599, 1.0));
        _2338 = (_2553 * _2544) + _1791;
        _2340 = (_2553 * _2546) + _1793;
        _2342 = (_2553 * _2548) + _1795;
        _2344 = ((_2538 * 0.039999999105930328369140625) * _2553) + _2124;
        _2346 = ((_2540 * 0.039999999105930328369140625) * _2553) + _2126;
        _2348 = ((_2542 * 0.039999999105930328369140625) * _2553) + _2128;
    }
    else
    {
        _2338 = _1791;
        _2340 = _1793;
        _2342 = _1795;
        _2344 = _2124;
        _2346 = _2126;
        _2348 = _2128;
    }
    float _4216 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _4227 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _4238 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    uint _2368 = _574 + 6u;
    float _2376 = _534 / cbSceneParam._m0[86u].x;
    float _2377 = _535 / cbSceneParam._m0[86u].y;
    vec4 _2391 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2376, _2377, (log2((isnan(cbSceneParam._m0[77u].w) ? _468 : (isnan(_468) ? cbSceneParam._m0[77u].w : min(_468, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2393 = _2391.x;
    float _2394 = _2391.y;
    float _2395 = _2391.z;
    float _2396 = _2391.w;
    float _2488;
    float _2490;
    float _2492;
    float _2494;
    if (_468 > cbSceneParam._m0[78u].w)
    {
        float _2451 = isnan(_468) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _468 : min(cbSceneParam._m0[80u].w, _468));
        float _2452 = _2451 / _468;
        float _2463 = _2452 * _519;
        float _2464 = _520 * _2452;
        float _2465 = (-0.0) - _2464;
        float _2466 = _2452 * _521;
        float _2468 = (cbSceneParam._m0[77u].w * _2465) / _2451;
        float _2469 = _2468 + cbSceneParam._m0[79u].w;
        float _2470 = cbSceneParam._m0[79u].w - _2464;
        float _2476 = sqrt(((_2463 * _2463) + (_2464 * _2464)) + (_2466 * _2466));
        float _2479 = (1.0 - (cbSceneParam._m0[77u].w / _2451)) * _2476;
        float _2484 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2486 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2639;
        if (abs((_2465 - _2468) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2639 = ((((_2469 > 0.0) ? exp2(_2484 * _2469) : (2.0 - exp2(_2486 * _2469))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2479;
        }
        else
        {
            float _2599 = 1.0 / cbSceneParam._m0[80u].x;
            float _2600 = isnan(_2470) ? _2469 : (isnan(_2469) ? _2470 : max(_2469, _2470));
            float _2601 = isnan(_2470) ? _2469 : (isnan(_2469) ? _2470 : min(_2469, _2470));
            float _2610 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : min(_2600, 0.0));
            float _2611 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : min(_2601, 0.0));
            _2639 = ((abs(_2476 / _2465) * cbSceneParam._m0[80u].y) * ((((_2610 - _2611) * 2.0) - ((exp2(_2484 * (isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0)))) - exp2(_2484 * (isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0))))) * _2599)) - ((exp2(_2486 * _2610) - exp2(_2486 * _2611)) * _2599))) + (_2479 * cbSceneParam._m0[80u].z);
        }
        vec4 _2641 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2376, _2377, 1.0), 0.0);
        float _2650 = exp2((_2639 * (-1.44269502162933349609375)) * (1.0 - _2641.w));
        float _2651 = log2(_2650);
        float _2667 = log2(_2396);
        _2488 = (exp2(_2667 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2651 * cbSceneParam._m0[78u].x)) * _2641.x) / cbSceneParam._m0[78u].x)) + _2393;
        _2490 = (exp2(_2667 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2651 * cbSceneParam._m0[78u].y)) * _2641.y) / cbSceneParam._m0[78u].y)) + _2394;
        _2492 = (exp2(_2667 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2651 * cbSceneParam._m0[78u].z)) * _2641.z) / cbSceneParam._m0[78u].z)) + _2395;
        _2494 = _2650 * _2396;
    }
    else
    {
        _2488 = _2393;
        _2490 = _2394;
        _2492 = _2395;
        _2494 = _2396;
    }
    float _2506 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2507 = _2506 == 3.0;
    float _2508 = log2(_2494);
    float _2515 = exp2(_2508 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_2338 + ((isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0))) * _599))) + ((_2344 + ((isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))) * _1406)) * cbPerFrame._m0[3u].x));
    float _2516 = exp2(_2508 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_2340 + ((isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0))) * _599))) + ((_2346 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _1406)) * cbPerFrame._m0[3u].x));
    float _2517 = exp2(_2508 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_2342 + ((isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0))) * _599))) + ((_2348 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _1406)) * cbPerFrame._m0[3u].x));
    float _2526 = (_2506 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2526 * (_2507 ? _2515 : (_2515 + (cbSceneParam._m0[72u].w * _2488)));
    SV_Target.y = _2526 * (_2507 ? _2516 : (_2516 + (cbSceneParam._m0[72u].w * _2490)));
    SV_Target.z = _2526 * (_2507 ? _2517 : (_2517 + (cbSceneParam._m0[72u].w * _2492)));
    SV_Target.w = cbInstanceData._m0[_2368].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2368].w;
}


