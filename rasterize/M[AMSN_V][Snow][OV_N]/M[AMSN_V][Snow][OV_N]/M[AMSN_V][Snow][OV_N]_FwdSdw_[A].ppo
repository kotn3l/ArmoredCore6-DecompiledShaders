#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Snow_OV_N_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Snow_OV_N_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Snow_OV_N_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Snow_OV_N_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Snow_OV_N_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Snow_OV_N_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1018;
float _3669;
float _3670;
float _3671;
float _3672;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _203 = _202 * _194;
    float _204 = _202 * _195;
    float _205 = _202 * _196;
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217 = _216 * TANGENT.x;
    float _218 = _216 * TANGENT.y;
    float _219 = _216 * TANGENT.z;
    float _224;
    float _225;
    float _226;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
        _226 = (-0.0) - _212;
    }
    else
    {
        _224 = _210;
        _225 = _211;
        _226 = _212;
    }
    vec4 _245 = texture(sampler2D(M_AMSN_V_Snow_OV_N_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _250 = _245.z;
    float _254 = (_245.x * 2.0) + (-1.0);
    float _256 = (_245.y * 2.0) + (-1.0);
    float _257 = dot(vec2(_254, _256), vec2(_254, _256));
    float _3681 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _263 = sqrt(1.0 - (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))));
    float _266 = fma(_263, _224, fma(_256, _217, _254 * _203));
    float _269 = fma(_263, _225, fma(_256, _218, _254 * _204));
    float _272 = fma(_263, _226, fma(_256, _219, _254 * _205));
    float _281 = exp2(log2(inversesqrt(dot(vec3(_266, _269, _272), vec3(_266, _269, _272))) * _269) * cbMtdParam._m0[11u].x) * cbMtdParam._m0[11u].y;
    float _3692 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _306 = ((cbMtdParam._m0[11u].w * (-1.39999997615814208984375)) * ((texture(sampler2D(M_AMSN_V_Snow_OV_N_snp_0_Texture2D_5, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w)).x + (-1.0)) + ((1.0 - TEXCOORD_3.x) * 2.0))) + 1.0;
    float _3703 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _314 = (((isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) + 1.0) - cbMtdParam._m0[12u].x) * (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0)));
    float _315 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _316 = isnan(1.0) ? _315 : (isnan(_315) ? 1.0 : min(_315, 1.0));
    vec4 _328 = texture(sampler2D(M_AMSN_V_Snow_OV_N_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    vec4 _353 = texture(sampler2D(M_AMSN_V_Snow_OV_N_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _364 = cbMtdParam._m0[9u].x * _353.x;
    float _365 = cbMtdParam._m0[9u].y * _353.y;
    float _366 = cbMtdParam._m0[9u].z * _353.z;
    float _373 = (((cbMtdParam._m0[10u].x * _328.x) - _364) * _316) + _364;
    float _374 = (((cbMtdParam._m0[10u].y * _328.y) - _365) * _316) + _365;
    float _375 = (((cbMtdParam._m0[10u].z * _328.z) - _366) * _316) + _366;
    vec4 _387 = texture(sampler2D(M_AMSN_V_Snow_OV_N_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _394 = (_387.x * 2.0) + (-1.0);
    float _395 = (_387.y * 2.0) + (-1.0);
    float _396 = dot(vec2(_394, _395), vec2(_394, _395));
    float _3724 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _404 = ((_387.z - _250) * _316) + _250;
    float _413 = ((sqrt(1.0 - (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0)))) - _263) * _316) + _263;
    vec4 _427 = texture(sampler2D(M_AMSN_V_Snow_OV_N_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _437 = (((_394 - _254) * _316) + _254) + (((_427.x * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z);
    float _438 = (((_395 - _256) * _316) + _256) + (((_427.y * 2.0) + (-1.0)) * cbMtdParam._m0[11u].z);
    float _441 = fma(_413, _224, fma(_438, _217, _437 * _203));
    float _444 = fma(_413, _225, fma(_438, _218, _437 * _204));
    float _447 = fma(_413, _226, fma(_438, _219, _437 * _205));
    float _451 = inversesqrt(dot(vec3(_441, _444, _447), vec3(_441, _444, _447)));
    float _452 = _451 * _441;
    float _453 = _451 * _444;
    float _454 = _451 * _447;
    float _3735 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _455 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _3746 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3757 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _3768 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _474 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _515 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _525 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _515);
    float _526 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _515);
    float _527 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _515);
    float _531 = inversesqrt(dot(vec3(_525, _526, _527), vec3(_525, _526, _527)));
    float _532 = _525 * _531;
    float _533 = _526 * _531;
    float _534 = _527 * _531;
    vec4 _539 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _541 = _539.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _697 = sqrt(((_525 * _525) + (_526 * _526)) + (_527 * _527));
        float _703 = (cbMatDynParam._m0[5u].x * _697) + cbMatDynParam._m0[5u].y;
        float _3779 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _704 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _708 = (cbMatDynParam._m0[5u].z * _697) + cbMatDynParam._m0[5u].w;
        float _3790 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) - _704)) + _704) < ((_541 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _553 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _554 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _573 = fma(_454, cbSceneParam._m0[5u].z, fma(_453, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _452));
    float _576 = fma(_454, cbSceneParam._m0[6u].z, fma(_453, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _452));
    float _579 = fma(_454, cbSceneParam._m0[7u].z, fma(_453, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _452));
    uint _592 = uint(roundEven(NORMAL.w)) * 13u;
    uint _593 = _592 + 9u;
    uint _594 = _593 + uint(cbMatDynParam._m0[0u].w);
    float _600 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0)))) * cbInstanceData._m0[_594].x;
    float _601 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0)))) * cbInstanceData._m0[_594].y;
    float _602 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) * cbInstanceData._m0[_594].z;
    float _3801 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _603 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _3812 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _604 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _3823 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _605 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    vec4 _614 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _553, cbSceneParam._m0[86u].y * _554));
    float _617 = _614.x * TEXCOORD_3.w;
    float _618 = dot(vec3(_452, _453, _454), vec3(_532, _533, _534));
    float _621 = _618 * 2.0;
    float _625 = (_621 * _452) - _532;
    float _626 = (_621 * _453) - _533;
    float _627 = (_621 * _454) - _534;
    float _631 = abs(dot(vec3(_532, _533, _534), vec3(_452, _453, _454)));
    float _3834 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _633 = sqrt(_455);
    float _646 = exp2((_633 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_633 * 3.0));
    float _678 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _682 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _686 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1017;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _742 = fma(_686, cbModelParam._m0[26u].z, fma(_682, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _678));
        float _746 = fma(_686, cbModelParam._m0[27u].z, fma(_682, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _678));
        float _750 = fma(_686, cbModelParam._m0[28u].z, fma(_682, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _678));
        float _775 = _678 + _452;
        float _776 = _682 + _453;
        float _777 = _686 + _454;
        float _787 = fma(_777, cbModelParam._m0[26u].z, fma(_776, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _775)) - _742;
        float _788 = fma(_777, cbModelParam._m0[27u].z, fma(_776, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _775)) - _746;
        float _789 = fma(_777, cbModelParam._m0[28u].z, fma(_776, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _775)) - _750;
        float _793 = inversesqrt(dot(vec3(_787, _788, _789), vec3(_787, _788, _789)));
        float _806 = ((_793 * _787) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_742 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _807 = ((_793 * _788) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_746 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _808 = ((_793 * _789) / cbModelParam._m0[34u].z) + ((((((_750 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _811 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _818 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _825 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        vec4 _832 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_806, _807, _808), 0.0);
        float _845 = exp2((_811.w + (-0.5)) * 20.0) * 2.0;
        float _846 = _845 * (_811.x + (-0.5));
        float _847 = _845 * (_811.y + (-0.5));
        float _848 = _845 * (_811.z + (-0.5));
        float _855 = exp2((_818.w + (-0.5)) * 20.0) * 2.0;
        float _856 = _855 * (_818.x + (-0.5));
        float _857 = _855 * (_818.y + (-0.5));
        float _858 = _855 * (_818.z + (-0.5));
        float _865 = exp2((_825.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_825.x + (-0.5));
        float _867 = _865 * (_825.y + (-0.5));
        float _868 = _865 * (_825.z + (-0.5));
        float _875 = exp2((_832.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_832.x + (-0.5));
        float _877 = _875 * (_832.y + (-0.5));
        float _878 = _875 * (_832.z + (-0.5));
        float _879 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _880 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _881 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _882 = _846 * 0.5;
        float _883 = _856 * 0.5;
        float _884 = _866 * 0.5;
        float _885 = dot(vec3(_882, _883, _884), vec3(_882, _883, _884));
        float _890 = (_885 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_885);
        float _899 = (dot(vec3(_452, _453, _454), vec3(_890 * _882, _890 * _883, _890 * _884)) + 1.0) * 0.5;
        float _3860 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _909 = sqrt(((_883 * _883) + (_882 * _882)) + (_884 * _884)) / (_879 + 9.9999997473787516355514526367188e-06);
        float _3871 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _911 = _910 * 2.0;
        float _915 = (1.0 - _910) / (_910 + 1.0);
        float _3882 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _925 = ((((1.0 - _916) * (_911 + 2.0)) * exp2(log2(isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_911 + 1.0))) + _916) * _879;
        float _926 = _847 * 0.5;
        float _927 = _857 * 0.5;
        float _928 = _867 * 0.5;
        float _929 = dot(vec3(_926, _927, _928), vec3(_926, _927, _928));
        float _934 = (_929 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_929);
        float _942 = (dot(vec3(_452, _453, _454), vec3(_934 * _926, _934 * _927, _934 * _928)) + 1.0) * 0.5;
        float _3893 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _951 = sqrt(((_927 * _927) + (_926 * _926)) + (_928 * _928)) / (_880 + 9.9999997473787516355514526367188e-06);
        float _3904 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _953 = _952 * 2.0;
        float _957 = (1.0 - _952) / (_952 + 1.0);
        float _3915 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _967 = ((((1.0 - _958) * (_953 + 2.0)) * exp2(log2(isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_953 + 1.0))) + _958) * _880;
        float _968 = _848 * 0.5;
        float _969 = _858 * 0.5;
        float _970 = _868 * 0.5;
        float _971 = dot(vec3(_968, _969, _970), vec3(_968, _969, _970));
        float _976 = (_971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_971);
        float _984 = (dot(vec3(_452, _453, _454), vec3(_976 * _968, _976 * _969, _976 * _970)) + 1.0) * 0.5;
        float _3926 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _993 = sqrt(((_969 * _969) + (_968 * _968)) + (_970 * _970)) / (_881 + 9.9999997473787516355514526367188e-06);
        float _3937 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3948 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_995 + 1.0))) + _1000) * _881;
        _1017 = _848;
        _1019 = _847;
        _1020 = _846;
        _1021 = _858;
        _1022 = _857;
        _1023 = _856;
        _1024 = _868;
        _1025 = _867;
        _1026 = _866;
        _1027 = _881;
        _1028 = _880;
        _1029 = _879;
        _1030 = cbModelParam._m0[36u].z * (isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0)));
        _1031 = cbModelParam._m0[36u].z * (isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0)));
        _1032 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
    }
    else
    {
        _1017 = _1018;
        _1019 = _1018;
        _1020 = _1018;
        _1021 = _1018;
        _1022 = _1018;
        _1023 = _1018;
        _1024 = _1018;
        _1025 = _1018;
        _1026 = _1018;
        _1027 = _1018;
        _1028 = _1018;
        _1029 = _1018;
        _1030 = 0.0;
        _1031 = 0.0;
        _1032 = 0.0;
    }
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1061 = fma(_686, cbModelParam._m0[30u].z, fma(_682, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _678));
        float _1065 = fma(_686, cbModelParam._m0[31u].z, fma(_682, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _678));
        float _1069 = fma(_686, cbModelParam._m0[32u].z, fma(_682, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _678));
        float _1092 = _678 + _452;
        float _1093 = _682 + _453;
        float _1094 = _686 + _454;
        float _1104 = fma(_1094, cbModelParam._m0[30u].z, fma(_1093, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1092)) - _1061;
        float _1105 = fma(_1094, cbModelParam._m0[31u].z, fma(_1093, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1092)) - _1065;
        float _1106 = fma(_1094, cbModelParam._m0[32u].z, fma(_1093, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1092)) - _1069;
        float _1110 = inversesqrt(dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106)));
        float _1123 = ((_1110 * _1104) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1061 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1124 = ((_1110 * _1105) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1065 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1125 = ((_1110 * _1106) / cbModelParam._m0[35u].z) + ((((((_1069 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        float _1160 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1127.x + (-0.5));
        float _1162 = _1160 * (_1127.y + (-0.5));
        float _1163 = _1160 * (_1127.z + (-0.5));
        float _1170 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1134.x + (-0.5));
        float _1172 = _1170 * (_1134.y + (-0.5));
        float _1173 = _1170 * (_1134.z + (-0.5));
        float _1180 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1141.x + (-0.5));
        float _1182 = _1180 * (_1141.y + (-0.5));
        float _1183 = _1180 * (_1141.z + (-0.5));
        float _1190 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1148.x + (-0.5));
        float _1192 = _1190 * (_1148.y + (-0.5));
        float _1193 = _1190 * (_1148.z + (-0.5));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = _1161 * 0.5;
        float _1198 = _1171 * 0.5;
        float _1199 = _1181 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1213 = (dot(vec3(_452, _453, _454), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _3989 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1222 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _4000 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _4011 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_1224 + 1.0))) + _1229) * _1194;
        float _1239 = _1162 * 0.5;
        float _1240 = _1172 * 0.5;
        float _1241 = _1182 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1255 = (dot(vec3(_452, _453, _454), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _4022 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1264 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _4033 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _4044 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_1266 + 1.0))) + _1271) * _1195;
        float _1281 = _1163 * 0.5;
        float _1282 = _1173 * 0.5;
        float _1283 = _1183 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(_452, _453, _454), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _4055 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _4066 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _4077 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1308 + 1.0))) + _1313) * _1196;
        _1330 = _1163;
        _1331 = _1162;
        _1332 = _1161;
        _1333 = _1173;
        _1334 = _1172;
        _1335 = _1171;
        _1336 = _1183;
        _1337 = _1182;
        _1338 = _1181;
        _1339 = _1196;
        _1340 = _1195;
        _1341 = _1194;
        _1342 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
        _1343 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
        _1344 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
    }
    else
    {
        _1330 = _1018;
        _1331 = _1018;
        _1332 = _1018;
        _1333 = _1018;
        _1334 = _1018;
        _1335 = _1018;
        _1336 = _1018;
        _1337 = _1018;
        _1338 = _1018;
        _1339 = _1018;
        _1340 = _1018;
        _1341 = _1018;
        _1342 = 0.0;
        _1343 = 0.0;
        _1344 = 0.0;
    }
    float _1354 = (cbModelParam._m0[1u].x * (_1342 - _1030)) + _1030;
    float _1355 = (cbModelParam._m0[1u].x * (_1343 - _1031)) + _1031;
    float _1356 = (cbModelParam._m0[1u].x * (_1344 - _1032)) + _1032;
    float _1377 = fma(_1356, cbSceneParam._m0[89u].z, fma(_1355, cbSceneParam._m0[89u].y, _1354 * cbSceneParam._m0[89u].x));
    float _1380 = fma(_1356, cbSceneParam._m0[90u].z, fma(_1355, cbSceneParam._m0[90u].y, _1354 * cbSceneParam._m0[90u].x));
    float _1383 = fma(_1356, cbSceneParam._m0[91u].z, fma(_1355, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1354));
    float _1398 = _625 * 0.5;
    float _1399 = _626 * 0.5;
    float _1400 = _627 * 0.5;
    float _1401 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1332, _1335, _1338, _1341));
    float _1404 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1331, _1334, _1337, _1340));
    float _1407 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1330, _1333, _1336, _1339));
    float _1441;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1414 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1017, _1021, _1024, _1027));
        float _1418 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1019, _1022, _1025, _1028));
        float _1422 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1020, _1023, _1026, _1029));
        float _1429 = dot(vec4(cbModelParam._m0[39u]), vec4(_1398, _1399, _1400, 1.0));
        _1441 = dot(vec3(isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)), isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)), isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1429) ? 0.0 : (isnan(0.0) ? _1429 : max(0.0, _1429))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1441 = 1.0;
    }
    float _1452;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1443 = dot(vec4(cbModelParam._m0[40u]), vec4(_1398, _1399, _1400, 1.0));
        _1452 = dot(vec3(isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)), isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)), isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1443) ? 0.0 : (isnan(0.0) ? _1443 : max(0.0, _1443))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1452 = 1.0;
    }
    float _1456 = (_1452 * cbModelParam._m0[1u].x) + (_1441 * (1.0 - cbModelParam._m0[1u].x));
    float _1466 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _455);
    float _1467 = isnan(_1466) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1466 : min(cbModelParam._m0[25u].z, _1466));
    float _1549;
    float _1551;
    float _1553;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1516 = fma(_686, cbModelParam._m0[13u].z, fma(_682, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _678)) + cbModelParam._m0[13u].w;
        float _1520 = fma(_686, cbModelParam._m0[14u].z, fma(_682, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _678)) + cbModelParam._m0[14u].w;
        float _1524 = fma(_686, cbModelParam._m0[15u].z, fma(_682, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _678)) + cbModelParam._m0[15u].w;
        float _1527 = fma(_627, cbModelParam._m0[13u].z, fma(_626, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _625));
        float _1530 = fma(_627, cbModelParam._m0[14u].z, fma(_626, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _625));
        float _1533 = fma(_627, cbModelParam._m0[15u].z, fma(_626, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _625));
        float _1561;
        if (_1527 > 0.0)
        {
            _1561 = abs((1.0 - _1516) / _1527);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1516 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1561 = frontier_phi_19_17_ladder;
        }
        float _1734;
        if (_1530 > 0.0)
        {
            _1734 = abs((1.0 - _1520) / _1530);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1530 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1520 + 1.0) / _1530);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1734 = frontier_phi_28_24_ladder;
        }
        float _2029;
        if (_1533 > 0.0)
        {
            _2029 = abs((1.0 - _1524) / _1533);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1533 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1524 + 1.0) / _1533);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2029 = frontier_phi_40_35_ladder;
        }
        float _2031 = isnan(_1734) ? _1561 : (isnan(_1561) ? _1734 : min(_1561, _1734));
        float _2032 = isnan(_2029) ? _2031 : (isnan(_2031) ? _2029 : min(_2031, _2029));
        float _2036 = (_2032 * _1527) + _1516;
        float _2037 = (_2032 * _1530) + _1520;
        float _2038 = (_2032 * _1533) + _1524;
        float _2039 = _2032 * 9.9999997473787516355514526367188e-05;
        float _2041 = (-1.0) - _2039;
        float _2043 = _2039 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2038 > _2043) || ((_2038 < _2041) || ((_2037 > _2043) || ((_2037 < _2041) || ((_2036 < _2041) || (_2036 > _2043))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2183 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2038, cbModelParam._m0[9u].z, fma(_2037, cbModelParam._m0[9u].y, _2036 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2038, cbModelParam._m0[10u].z, fma(_2037, cbModelParam._m0[10u].y, _2036 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2038, cbModelParam._m0[11u].z, fma(_2037, cbModelParam._m0[11u].y, _2036 * cbModelParam._m0[11u].x))), _1467);
            frontier_phi_18_40_ladder = _2183.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2183.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2183.x * cbModelParam._m0[1u].y;
        }
        _1549 = frontier_phi_18_40_ladder_2;
        _1551 = frontier_phi_18_40_ladder_1;
        _1553 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1537 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_625, _626, _627), _1467);
        _1549 = _1537.x * cbModelParam._m0[1u].y;
        _1551 = _1537.y * cbModelParam._m0[1u].y;
        _1553 = _1537.z * cbModelParam._m0[1u].y;
    }
    float _1557 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _455);
    float _1558 = isnan(_1557) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1557 : min(cbModelParam._m0[25u].w, _1557));
    float _1651;
    float _1653;
    float _1655;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1615 = fma(_686, cbModelParam._m0[21u].z, fma(_682, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _678)) + cbModelParam._m0[21u].w;
        float _1619 = fma(_686, cbModelParam._m0[22u].z, fma(_682, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _678)) + cbModelParam._m0[22u].w;
        float _1623 = fma(_686, cbModelParam._m0[23u].z, fma(_682, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _678)) + cbModelParam._m0[23u].w;
        float _1626 = fma(_627, cbModelParam._m0[21u].z, fma(_626, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _625));
        float _1629 = fma(_627, cbModelParam._m0[22u].z, fma(_626, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _625));
        float _1632 = fma(_627, cbModelParam._m0[23u].z, fma(_626, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _625));
        float _1739;
        if (_1626 > 0.0)
        {
            _1739 = abs((1.0 - _1615) / _1626);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1615 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1739 = frontier_phi_30_26_ladder;
        }
        float _2056;
        if (_1629 > 0.0)
        {
            _2056 = abs((1.0 - _1619) / _1629);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1619 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2056 = frontier_phi_42_37_ladder;
        }
        float _2383;
        if (_1632 > 0.0)
        {
            _2383 = abs((1.0 - _1623) / _1632);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1623 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2383 = frontier_phi_52_49_ladder;
        }
        float _2385 = isnan(_2056) ? _1739 : (isnan(_1739) ? _2056 : min(_1739, _2056));
        float _2386 = isnan(_2383) ? _2385 : (isnan(_2385) ? _2383 : min(_2385, _2383));
        float _2390 = (_2386 * _1626) + _1615;
        float _2391 = (_2386 * _1629) + _1619;
        float _2392 = (_2386 * _1632) + _1623;
        float _2393 = _2386 * 9.9999997473787516355514526367188e-05;
        float _2394 = (-1.0) - _2393;
        float _2396 = _2393 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2392 > _2396) || ((_2392 < _2394) || ((_2391 > _2396) || ((_2391 < _2394) || ((_2390 < _2394) || (_2390 > _2396))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2510 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2392, cbModelParam._m0[17u].z, fma(_2391, cbModelParam._m0[17u].y, _2390 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2392, cbModelParam._m0[18u].z, fma(_2391, cbModelParam._m0[18u].y, _2390 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2392, cbModelParam._m0[19u].z, fma(_2391, cbModelParam._m0[19u].y, _2390 * cbModelParam._m0[19u].x))), _1558);
            frontier_phi_27_52_ladder = _2510.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2510.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2510.x * cbModelParam._m0[1u].z;
        }
        _1651 = frontier_phi_27_52_ladder_2;
        _1653 = frontier_phi_27_52_ladder_1;
        _1655 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1635 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_625, _626, _627), _1558);
        _1651 = _1635.x * cbModelParam._m0[1u].z;
        _1653 = _1635.y * cbModelParam._m0[1u].z;
        _1655 = _1635.z * cbModelParam._m0[1u].z;
    }
    float _1667 = ((((1.0 - _646) * ((_633 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_646 * _633)) * _617;
    float _1668 = _1667 * ((cbModelParam._m0[1u].w * (_1651 - _1549)) + _1549);
    float _1669 = _1667 * ((cbModelParam._m0[1u].w * (_1653 - _1551)) + _1551);
    float _1670 = _1667 * ((cbModelParam._m0[1u].w * (_1655 - _1553)) + _1553);
    float _1673 = fma(_1670, cbSceneParam._m0[89u].z, fma(_1669, cbSceneParam._m0[89u].y, _1668 * cbSceneParam._m0[89u].x));
    float _1676 = fma(_1670, cbSceneParam._m0[90u].z, fma(_1669, cbSceneParam._m0[90u].y, _1668 * cbSceneParam._m0[90u].x));
    float _1679 = fma(_1670, cbSceneParam._m0[91u].z, fma(_1669, cbSceneParam._m0[91u].y, _1668 * cbSceneParam._m0[91u].x));
    float _1713 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1717 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1721 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1725 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1726 = _1713 / _1725;
    float _1727 = _1717 / _1725;
    float _1728 = _1721 / _1725;
    float _1875;
    float _1876;
    float _1877;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1755 = ((uint(_1728 > cbSceneParam._m0[59u].y) + uint(_1728 > cbSceneParam._m0[59u].x)) + uint(_1728 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1756 = _1755 + 43u;
        uint _1764 = _1755 + 44u;
        uint _1772 = _1755 + 45u;
        uint _1780 = _1755 + 46u;
        float _1791 = fma(_1725, cbSceneParam._m0[_1756].w, fma(_1721, cbSceneParam._m0[_1756].z, fma(_1717, cbSceneParam._m0[_1756].y, _1713 * cbSceneParam._m0[_1756].x)));
        float _1795 = fma(_1725, cbSceneParam._m0[_1764].w, fma(_1721, cbSceneParam._m0[_1764].z, fma(_1717, cbSceneParam._m0[_1764].y, _1713 * cbSceneParam._m0[_1764].x)));
        float _1803 = fma(_1725, cbSceneParam._m0[_1780].w, fma(_1721, cbSceneParam._m0[_1780].z, fma(_1717, cbSceneParam._m0[_1780].y, _1713 * cbSceneParam._m0[_1780].x)));
        float _1808 = cbSceneParam._m0[33u].z * _1803;
        float _1810 = cbSceneParam._m0[33u].w * _1803;
        float _1813 = fma(_1725, cbSceneParam._m0[_1772].w, fma(_1721, cbSceneParam._m0[_1772].z, fma(_1717, cbSceneParam._m0[_1772].y, _1713 * cbSceneParam._m0[_1772].x))) / _1803;
        float _1861 = (cbSceneParam._m0[33u].x - sqrt(((_1727 * _1727) + (_1726 * _1726)) + (_1728 * _1728))) * cbSceneParam._m0[33u].y;
        float _4203 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1868 = (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1808 + _1791) / _1803, (_1810 + _1795) / _1803), _1813), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1810 + _1791) / _1803, (_1795 - _1808) / _1803), _1813), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1791 - _1808) / _1803, (_1795 - _1810) / _1803), _1813), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1791 - _1810) / _1803, (_1808 + _1795) / _1803), _1813), 0.0)).x), vec4(0.25)));
        _1875 = 1.0 - (_1868 * cbSceneParam._m0[34u].x);
        _1876 = 1.0 - (_1868 * cbSceneParam._m0[34u].y);
        _1877 = 1.0 - (_1868 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1875 = 1.0;
        _1876 = 1.0;
        _1877 = 1.0;
    }
    float _1941;
    float _1943;
    float _1945;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1929 = fma(_1725, cbSceneParam._m0[63u].w, fma(_1721, cbSceneParam._m0[63u].z, fma(_1717, cbSceneParam._m0[63u].y, _1713 * cbSceneParam._m0[63u].x)));
        float _1930 = fma(_1725, cbSceneParam._m0[60u].w, fma(_1721, cbSceneParam._m0[60u].z, fma(_1717, cbSceneParam._m0[60u].y, _1713 * cbSceneParam._m0[60u].x))) / _1929;
        float _1931 = fma(_1725, cbSceneParam._m0[61u].w, fma(_1721, cbSceneParam._m0[61u].z, fma(_1717, cbSceneParam._m0[61u].y, _1713 * cbSceneParam._m0[61u].x))) / _1929;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1930 >= cbSceneParam._m0[64u].x) && (_1931 >= cbSceneParam._m0[64u].y)) && (_1930 <= cbSceneParam._m0[64u].z)) && (_1931 <= cbSceneParam._m0[64u].w))
        {
            float _2069 = fma(_1725, cbSceneParam._m0[62u].w, fma(_1721, cbSceneParam._m0[62u].z, fma(_1717, cbSceneParam._m0[62u].y, _1713 * cbSceneParam._m0[62u].x))) / _1929;
            float _2073 = isnan(cbSceneParam._m0[41u].w) ? _2069 : (isnan(_2069) ? cbSceneParam._m0[41u].w : max(_2069, cbSceneParam._m0[41u].w));
            float _2116 = (cbSceneParam._m0[33u].x - sqrt(((_1727 * _1727) + (_1726 * _1726)) + (_1728 * _1728))) * cbSceneParam._m0[33u].y;
            float _4219 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
            float _2123 = (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1930, cbSceneParam._m0[33u].w + _1931), _2073), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1930, _1931 - cbSceneParam._m0[33u].z), _2073), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1930 - cbSceneParam._m0[33u].z, _1931 - cbSceneParam._m0[33u].w), _2073), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1930 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1931), _2073), 0.0)).x), vec4(0.25)));
            float _2127 = 1.0 - (_2123 * cbSceneParam._m0[34u].x);
            float _2128 = 1.0 - (_2123 * cbSceneParam._m0[34u].y);
            float _2129 = 1.0 - (_2123 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2128) ? _1876 : (isnan(_1876) ? _2128 : min(_1876, _2128));
            frontier_phi_39_38_ladder_1 = isnan(_2127) ? _1875 : (isnan(_1875) ? _2127 : min(_1875, _2127));
            frontier_phi_39_38_ladder_2 = isnan(_2129) ? _1877 : (isnan(_1877) ? _2129 : min(_1877, _2129));
        }
        else
        {
            frontier_phi_39_38_ladder = _1876;
            frontier_phi_39_38_ladder_1 = _1875;
            frontier_phi_39_38_ladder_2 = _1877;
        }
        _1941 = frontier_phi_39_38_ladder_1;
        _1943 = frontier_phi_39_38_ladder;
        _1945 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1941 = _1875;
        _1943 = _1876;
        _1945 = _1877;
    }
    uvec4 _1950 = floatBitsToUint(cbInstanceData._m0[_592 + 5u]);
    uint _1952 = _1950.x * 14u;
    uint _1953 = _1952 + 13u;
    float _1960 = _617 + (-1.0);
    float _1965 = (cbLight._m0[_1953].x * _1960) + 1.0;
    float _1966 = (cbLight._m0[_1953].y * _1960) + 1.0;
    float _1967 = (cbLight._m0[_1953].z * _1960) + 1.0;
    float _1968 = (cbLight._m0[_1953].w * _1960) + 1.0;
    uint _1969 = _1952 + 5u;
    float _1975 = isnan(1.0) ? _1966 : (isnan(_1966) ? 1.0 : min(_1966, 1.0));
    uint _1979 = _1952 + 4u;
    float _1988 = isnan(1.0) ? _1965 : (isnan(_1965) ? 1.0 : min(_1965, 1.0));
    uint _1992 = _1952 | 1u;
    float _2003 = dot(vec3(cbLight._m0[_1952].xyz), vec3(_452, _453, _454));
    float _2006 = dot(vec3(cbLight._m0[_1992].xyz), vec3(_452, _453, _454));
    float _4255 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _4266 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2011 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * 0.3183098733425140380859375;
    float _2013 = (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * 0.3183098733425140380859375;
    float _2020 = ((cbLight._m0[_1969].x * _1975) * _2013) + (((cbLight._m0[_1979].x * _1941) * _1988) * _2011);
    float _2021 = ((_1975 * cbLight._m0[_1969].y) * _2013) + (((cbLight._m0[_1979].y * _1943) * _1988) * _2011);
    float _2022 = ((_1975 * cbLight._m0[_1969].z) * _2013) + (((cbLight._m0[_1979].z * _1945) * _1988) * _2011);
    uvec4 _2026 = floatBitsToUint(cbLight._m0[_1952 + 12u]);
    bool _2028 = _2026.x == 0u;
    float _2130;
    float _2132;
    float _2134;
    if (_2028)
    {
        _2130 = _2020;
        _2132 = _2021;
        _2134 = _2022;
    }
    else
    {
        uint _2138 = _1952 + 6u;
        float _2154 = (dot(vec3(cbLight._m0[_1952 + 2u].xyz), vec3(_452, _453, _454)) * 0.5) + 0.5;
        float _2155 = _2154 * _2154;
        float _4277 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2156 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _2157 = isnan(1.0) ? _1967 : (isnan(_1967) ? 1.0 : min(_1967, 1.0));
        _2130 = (((cbLight._m0[_2138].x * 0.3183098733425140380859375) * _2156) * _2157) + _2020;
        _2132 = (((cbLight._m0[_2138].y * 0.3183098733425140380859375) * _2156) * _2157) + _2021;
        _2134 = (((cbLight._m0[_2138].z * 0.3183098733425140380859375) * _2156) * _2157) + _2022;
    }
    bool _2137 = _2026.y == 0u;
    float _2192;
    float _2194;
    float _2196;
    if (_2137)
    {
        _2192 = _2130;
        _2194 = _2132;
        _2196 = _2134;
    }
    else
    {
        uint _2354 = _1952 + 7u;
        float _2370 = (dot(vec3(cbLight._m0[_1952 + 3u].xyz), vec3(_452, _453, _454)) * 0.5) + 0.5;
        float _2371 = _2370 * _2370;
        float _4293 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2372 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _2373 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
        _2192 = (((cbLight._m0[_2354].x * 0.3183098733425140380859375) * _2372) * _2373) + _2130;
        _2194 = (((cbLight._m0[_2354].y * 0.3183098733425140380859375) * _2372) * _2373) + _2132;
        _2196 = (((cbLight._m0[_2354].z * 0.3183098733425140380859375) * _2372) * _2373) + _2134;
    }
    uint _2199 = _1952 + 8u;
    float _2212 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1952].w)) * _455) * 0.949999988079071044921875);
    float _2213 = _2212 * _2212;
    float _2214 = cbLight._m0[_1952].x + _532;
    float _2215 = cbLight._m0[_1952].y + _533;
    float _2216 = cbLight._m0[_1952].z + _534;
    float _2220 = inversesqrt(dot(vec3(_2214, _2215, _2216), vec3(_2214, _2215, _2216)));
    float _2221 = _2220 * _2214;
    float _2222 = _2220 * _2215;
    float _2223 = _2220 * _2216;
    float _2224 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_1952].xyz));
    float _4309 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2227 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _4320 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _2228 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _2229 = dot(vec3(_452, _453, _454), vec3(_2221, _2222, _2223));
    float _4331 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2232 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
    float _2233 = dot(vec3(cbLight._m0[_1952].xyz), vec3(_2221, _2222, _2223));
    float _4342 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2237 = _2213 * _2213;
    float _2241 = ((_2232 * _2232) * (_2237 + (-1.0))) + 1.0;
    float _2252 = (exp2(log2(1.0 - (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2253 = 1.0 - _2213;
    float _2264 = (0.5 / (((_2228 * ((_2227 * _2253) + _2213)) + 9.9999999392252902907785028219223e-09) + (((_2228 * _2253) + _2213) * _2227))) * _2227;
    float _4353 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2266 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2237 / ((_2241 * _2241) * 3.141590118408203125));
    uint _2280 = _1952 + 9u;
    float _2291 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1992].w)) * _455) * 0.949999988079071044921875);
    float _2292 = _2291 * _2291;
    float _2293 = cbLight._m0[_1992].x + _532;
    float _2294 = cbLight._m0[_1992].y + _533;
    float _2295 = cbLight._m0[_1992].z + _534;
    float _2299 = inversesqrt(dot(vec3(_2293, _2294, _2295), vec3(_2293, _2294, _2295)));
    float _2300 = _2299 * _2293;
    float _2301 = _2299 * _2294;
    float _2302 = _2299 * _2295;
    float _2303 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_1992].xyz));
    float _4364 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2306 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
    float _2307 = dot(vec3(_452, _453, _454), vec3(_2300, _2301, _2302));
    float _4375 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2310 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
    float _2311 = dot(vec3(cbLight._m0[_1992].xyz), vec3(_2300, _2301, _2302));
    float _4386 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2315 = _2292 * _2292;
    float _2319 = ((_2310 * _2310) * (_2315 + (-1.0))) + 1.0;
    float _2328 = (exp2(log2(1.0 - (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2329 = 1.0 - _2292;
    float _2339 = (0.5 / (((_2228 * ((_2306 * _2329) + _2292)) + 9.9999999392252902907785028219223e-09) + (((_2228 * _2329) + _2292) * _2306))) * _2306;
    float _4397 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2341 = (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_2315 / ((_2319 * _2319) * 3.141590118408203125));
    float _2351 = (((_2328 * cbLight._m0[_2280].x) * _2341) * _1975) + ((((cbLight._m0[_2199].x * _1941) * _2252) * _2266) * _1988);
    float _2352 = (((_2328 * cbLight._m0[_2280].y) * _2341) * _1975) + ((((cbLight._m0[_2199].y * _1943) * _2252) * _2266) * _1988);
    float _2353 = (((_2328 * cbLight._m0[_2280].z) * _2341) * _1975) + ((((cbLight._m0[_2199].z * _1945) * _2252) * _2266) * _1988);
    float _2409;
    float _2411;
    float _2413;
    if (_2028)
    {
        _2409 = _2351;
        _2411 = _2352;
        _2413 = _2353;
    }
    else
    {
        uint _2415 = _1952 + 2u;
        uint _2419 = _1952 + 10u;
        float _2433 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2415].w)) * _455) * 0.949999988079071044921875);
        float _2434 = _2433 * _2433;
        float _2435 = cbLight._m0[_2415].x + _532;
        float _2436 = cbLight._m0[_2415].y + _533;
        float _2437 = cbLight._m0[_2415].z + _534;
        float _2441 = inversesqrt(dot(vec3(_2435, _2436, _2437), vec3(_2435, _2436, _2437)));
        float _2442 = _2441 * _2435;
        float _2443 = _2441 * _2436;
        float _2444 = _2441 * _2437;
        float _2445 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_2415].xyz));
        float _4408 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2448 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2449 = dot(vec3(_452, _453, _454), vec3(_2442, _2443, _2444));
        float _4419 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2452 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2453 = dot(vec3(cbLight._m0[_2415].xyz), vec3(_2442, _2443, _2444));
        float _4430 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2457 = _2434 * _2434;
        float _2461 = ((_2452 * _2452) * (_2457 + (-1.0))) + 1.0;
        float _2470 = (exp2(log2(1.0 - (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2471 = 1.0 - _2434;
        float _2481 = (0.5 / (((_2228 * ((_2448 * _2471) + _2434)) + 9.9999999392252902907785028219223e-09) + (((_2228 * _2471) + _2434) * _2448))) * _2448;
        float _4441 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2483 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_2457 / ((_2461 * _2461) * 3.141590118408203125));
        float _2484 = isnan(1.0) ? _1967 : (isnan(_1967) ? 1.0 : min(_1967, 1.0));
        _2409 = (((_2470 * cbLight._m0[_2419].x) * _2483) * _2484) + _2351;
        _2411 = (((_2470 * cbLight._m0[_2419].y) * _2483) * _2484) + _2352;
        _2413 = (((_2470 * cbLight._m0[_2419].z) * _2483) * _2484) + _2353;
    }
    float _2515;
    float _2517;
    float _2519;
    if (_2137)
    {
        _2515 = _2409;
        _2517 = _2411;
        _2519 = _2413;
    }
    else
    {
        uint _2526 = _1952 + 3u;
        uint _2530 = _1952 + 11u;
        float _2544 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2526].w)) * _455) * 0.949999988079071044921875);
        float _2545 = _2544 * _2544;
        float _2546 = cbLight._m0[_2526].x + _532;
        float _2547 = cbLight._m0[_2526].y + _533;
        float _2548 = cbLight._m0[_2526].z + _534;
        float _2552 = inversesqrt(dot(vec3(_2546, _2547, _2548), vec3(_2546, _2547, _2548)));
        float _2553 = _2552 * _2546;
        float _2554 = _2552 * _2547;
        float _2555 = _2552 * _2548;
        float _2556 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_2526].xyz));
        float _4457 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2559 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _2560 = dot(vec3(_452, _453, _454), vec3(_2553, _2554, _2555));
        float _4468 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2563 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _2564 = dot(vec3(cbLight._m0[_2526].xyz), vec3(_2553, _2554, _2555));
        float _4479 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2568 = _2545 * _2545;
        float _2572 = ((_2563 * _2563) * (_2568 + (-1.0))) + 1.0;
        float _2581 = (exp2(log2(1.0 - (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2582 = 1.0 - _2545;
        float _2592 = (0.5 / (((_2228 * ((_2559 * _2582) + _2545)) + 9.9999999392252902907785028219223e-09) + (((_2228 * _2582) + _2545) * _2559))) * _2559;
        float _4490 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2594 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2568 / ((_2572 * _2572) * 3.141590118408203125));
        float _2595 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
        _2515 = (((_2581 * cbLight._m0[_2530].x) * _2594) * _2595) + _2409;
        _2517 = (((_2581 * cbLight._m0[_2530].y) * _2594) * _2595) + _2411;
        _2519 = (((_2581 * cbLight._m0[_2530].z) * _2594) * _2595) + _2413;
    }
    float _2660;
    float _2662;
    float _2664;
    float _2666;
    float _2668;
    float _2670;
    if (_1950.y == 0u)
    {
        uvec4 _2616 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2617 = _2616.x;
        uint _2628 = uint((float(_2616.y) * floor(float(uint(cbSceneParam._m0[85u].y * _554) / _2617))) + floor(float(uint(cbSceneParam._m0[85u].x * _553) / _2617)));
        float _2638 = (log2(_1728 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2639 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        uint _2642 = uint(isnan(14.0) ? _2639 : (isnan(_2639) ? 14.0 : min(_2639, 14.0)));
        uvec4 _2647 = texelFetch(g_lightClusterGridBuffer, int(((_2642 << 2u) + (_2628 << 6u)) >> 2u));
        uint _2648 = _2647.x;
        uint _2649 = _2616.z;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        if (((((1u << ((_2649 >> 4u) & 15u)) + 4294967295u) & _2648) == 0u) || ((_2649 & 240u) == 0u))
        {
            _2727 = 0.0;
            _2729 = 0.0;
            _2731 = 0.0;
            _2733 = 0.0;
            _2735 = 0.0;
            _2737 = 0.0;
        }
        else
        {
            float _2728;
            float _2730;
            float _2732;
            float _2734;
            float _2736;
            float _2738;
            float _2879 = 0.0;
            float _2880 = 0.0;
            float _2881 = 0.0;
            float _2882 = 0.0;
            float _2883 = 0.0;
            float _2884 = 0.0;
            uint _2885 = 0u;
            uint _2894;
            bool _2895;
            for (;;)
            {
                _2894 = texelFetch(g_lightClassification, int((((_2642 << 5u) + (_2628 << 9u)) + (_2885 << 2u)) >> 2u)).x;
                _2895 = _2894 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2895)
                {
                    frontier_phi_73_pred = _2884;
                    frontier_phi_73_pred_1 = _2883;
                    frontier_phi_73_pred_2 = _2882;
                    frontier_phi_73_pred_3 = _2881;
                    frontier_phi_73_pred_4 = _2880;
                    frontier_phi_73_pred_5 = _2879;
                }
                else
                {
                    float _3024;
                    float _3025;
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    uint _3030;
                    _3024 = _2879;
                    _3025 = _2880;
                    _3026 = _2881;
                    _3027 = _2882;
                    _3028 = _2883;
                    _3029 = _2884;
                    _3030 = _2894;
                    float _2951;
                    float _2952;
                    float _2953;
                    float _2954;
                    float _2955;
                    float _2956;
                    for (;;)
                    {
                        uint _3034 = uint(findLSB(_3030)) + (_2885 << 5u);
                        uint _3031 = (_3030 + 4294967295u) & _3030;
                        uint _3036 = _3034 * 48u;
                        vec4 _3050 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3036)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 3u)).x));
                        uint _3056 = (_3034 * 48u) + 4u;
                        vec4 _3069 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3056)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 3u)).x));
                        uint _3075 = (_3034 * 48u) + 8u;
                        vec3 _3086 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3075)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 2u)).x));
                        float _3090 = _3050.x - _1726;
                        float _3091 = _3050.y - _1727;
                        float _3092 = _3050.z - _1728;
                        float _3093 = dot(vec3(_3090, _3091, _3092), vec3(_3090, _3091, _3092));
                        float _3096 = inversesqrt(_3093);
                        float _3097 = _3096 * _3090;
                        float _3098 = _3096 * _3091;
                        float _3099 = _3096 * _3092;
                        float _3100 = dot(vec3(_573, _576, _579), vec3(_3097, _3098, _3099));
                        float _3105 = 1.0 - (_3093 * _3050.w);
                        float _4516 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                        float _3106 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                        float _3107 = sqrt(_3093) * _3069.w;
                        float _3110 = 1.39999997615814208984375 / (_3107 + 1.39999997615814208984375);
                        float _3111 = _3110 * _3110;
                        float _3114 = ((1.0 - _3111) * _3100) + _3111;
                        float _3117 = _3107 * _3107;
                        float _3121 = ((isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0))) * _3106) / ((_3117 * 0.699999988079071044921875) + 1.0);
                        float _3125 = (-0.0) - _1726;
                        float _3126 = (-0.0) - _1727;
                        float _3127 = (-0.0) - _1728;
                        float _3131 = inversesqrt(dot(vec3(_3125, _3126, _3127), vec3(_3125, _3126, _3127)));
                        float _3132 = _3131 * _3125;
                        float _3133 = _3131 * _3126;
                        float _3134 = _3131 * _3127;
                        float _3141 = exp2(log2(1.0 / ((_3117 * 3.5) + 5.0)) * 0.25);
                        float _3142 = 1.0 - _633;
                        float _3149 = sqrt(1.0 - ((1.0 - (_3142 * _3142)) * (1.0 - (_3141 * _3141))));
                        float _3150 = _3149 * _3149;
                        float _3151 = _3150 * _3150;
                        float _3152 = _3132 + _3097;
                        float _3153 = _3133 + _3098;
                        float _3154 = _3134 + _3099;
                        float _3158 = inversesqrt(dot(vec3(_3152, _3153, _3154), vec3(_3152, _3153, _3154)));
                        float _3162 = dot(vec3(_573, _576, _579), vec3(_3132, _3133, _3134));
                        float _4532 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                        float _3165 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                        float _3166 = dot(vec3(_573, _576, _579), vec3(_3158 * _3152, _3158 * _3153, _3158 * _3154));
                        float _4543 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                        float _3169 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                        float _3173 = ((_3169 * _3169) * (_3151 + (-1.0))) + 1.0;
                        float _3174 = _3110 * _3150;
                        float _3175 = _3174 * _3174;
                        float _3178 = ((1.0 - _3175) * _3100) + _3175;
                        float _4554 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                        float _3179 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                        float _3180 = 1.0 - _3150;
                        float _3190 = (0.5 / (((_3179 * ((_3165 * _3180) + _3150)) + 9.9999999392252902907785028219223e-09) + (((_3179 * _3180) + _3150) * _3165))) * _3179;
                        float _4565 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                        float _3201 = (((_3151 * 3.1415927410125732421875) * (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0)))) / ((_3173 * _3173) * ((_3117 * 2.1991131305694580078125) + 3.141590118408203125))) * _3106;
                        _2954 = (_3121 * _3069.x) + _3027;
                        _2955 = (_3121 * _3069.y) + _3028;
                        _2956 = (_3121 * _3069.z) + _3029;
                        _2951 = (_3201 * _3086.x) + _3024;
                        _2952 = (_3201 * _3086.y) + _3025;
                        _2953 = (_3201 * _3086.z) + _3026;
                        if (_3031 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3024 = _2951;
                            _3025 = _2952;
                            _3026 = _2953;
                            _3027 = _2954;
                            _3028 = _2955;
                            _3029 = _2956;
                            _3030 = _3031;
                        }
                    }
                    frontier_phi_73_pred = _2956;
                    frontier_phi_73_pred_1 = _2955;
                    frontier_phi_73_pred_2 = _2954;
                    frontier_phi_73_pred_3 = _2953;
                    frontier_phi_73_pred_4 = _2952;
                    frontier_phi_73_pred_5 = _2951;
                }
                _2738 = frontier_phi_73_pred;
                _2736 = frontier_phi_73_pred_1;
                _2734 = frontier_phi_73_pred_2;
                _2732 = frontier_phi_73_pred_3;
                _2730 = frontier_phi_73_pred_4;
                _2728 = frontier_phi_73_pred_5;
                uint _2886 = _2885 + 1u;
                if (_2886 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2879 = _2728;
                    _2880 = _2730;
                    _2881 = _2732;
                    _2882 = _2734;
                    _2883 = _2736;
                    _2884 = _2738;
                    _2885 = _2886;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2727 = _2728;
            _2729 = _2730;
            _2731 = _2732;
            _2733 = _2734;
            _2735 = _2736;
            _2737 = _2738;
        }
        uvec4 _2741 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2742 = _2741.z;
        uint _2744 = (_2742 >> 8u) & 15u;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        if (((4294967295u << _2744) & _2648) == 0u)
        {
            _2847 = _2727;
            _2849 = _2729;
            _2851 = _2731;
            _2853 = _2733;
            _2855 = _2735;
            _2857 = _2737;
        }
        else
        {
            float _2872 = inversesqrt(dot(vec3(_1726, _1727, _1728), vec3(_1726, _1727, _1728)));
            float _2873 = _2872 * _1726;
            float _2874 = _2872 * _1727;
            float _2875 = _2872 * _1728;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2744 < ((_2742 >> 12u) & 15u))
            {
                float _2848;
                float _2850;
                float _2852;
                float _2854;
                float _2856;
                float _2858;
                float _3007 = _2727;
                float _3008 = _2729;
                float _3009 = _2731;
                float _3010 = _2733;
                float _3011 = _2735;
                float _3012 = _2737;
                uint _3013 = _2744;
                uint _3022;
                bool _3023;
                for (;;)
                {
                    _3022 = texelFetch(g_lightClassification, int((((_2642 << 5u) + (_2628 << 9u)) + (_3013 << 2u)) >> 2u)).x;
                    _3023 = _3022 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3023)
                    {
                        frontier_phi_84_pred = _3011;
                        frontier_phi_84_pred_1 = _3010;
                        frontier_phi_84_pred_2 = _3009;
                        frontier_phi_84_pred_3 = _3008;
                        frontier_phi_84_pred_4 = _3007;
                        frontier_phi_84_pred_5 = _3012;
                    }
                    else
                    {
                        float _3215;
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3228 = _3007;
                        float _3229 = _3008;
                        float _3230 = _3009;
                        float _3231 = _3010;
                        float _3232 = _3011;
                        float _3233 = _3012;
                        uint _3234 = _3022;
                        uint _3235;
                        vec4 _3260;
                        float _3261;
                        vec4 _3276;
                        vec3 _3288;
                        vec4 _3304;
                        vec4 _3320;
                        float _3367;
                        bool _3368;
                        for (;;)
                        {
                            uint _3245 = ((_3013 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3234));
                            _3235 = (_3234 + 4294967295u) & _3234;
                            uint _3247 = _3245 * 40u;
                            _3260 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 3u)).x));
                            _3261 = _3260.w;
                            uint _3263 = (_3245 * 40u) + 4u;
                            _3276 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 3u)).x));
                            uint _3278 = (_3245 * 40u) + 8u;
                            _3288 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x));
                            uint _3291 = (_3245 * 40u) + 16u;
                            _3304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 3u)).x));
                            uint _3307 = (_3245 * 40u) + 20u;
                            _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            uint _3323 = (_3245 * 40u) + 24u;
                            vec4 _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            uint _3342 = (_3245 * 40u) + 28u;
                            vec4 _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            _3367 = fma(_1728, _3355.z, fma(_1727, _3355.y, _3355.x * _1726)) + _3355.w;
                            _3368 = !((fma(_1728, _3336.z, fma(_1727, _3336.y, _3336.x * _1726)) + _3336.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3368)
                            {
                                float _3395 = _3260.x - _1726;
                                float _3396 = _3260.y - _1727;
                                float _3397 = _3260.z - _1728;
                                float _3398 = dot(vec3(_3395, _3396, _3397), vec3(_3395, _3396, _3397));
                                float _3401 = inversesqrt(_3398);
                                float _3402 = _3401 * _3395;
                                float _3403 = _3401 * _3396;
                                float _3404 = _3401 * _3397;
                                float _3408 = 1.0 - (_3398 / (_3261 * _3261));
                                float _4576 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3409 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                                float _3413 = sqrt(_3398) * _3276.w;
                                float _3415 = 1.39999997615814208984375 / (_3413 + 1.39999997615814208984375);
                                float _3416 = _3415 * _3415;
                                float _3419 = ((1.0 - _3416) * dot(vec3(_3402, _3403, _3404), vec3(_573, _576, _579))) + _3416;
                                float _3422 = _3413 * _3413;
                                float _3426 = (fma(_1728, _3304.z, fma(_1727, _3304.y, _3304.x * _1726)) + _3304.w) / _3367;
                                float _3427 = (fma(_1728, _3320.z, fma(_1727, _3320.y, _3320.x * _1726)) + _3320.w) / _3367;
                                float _3431 = 1.0 - dot(vec2(_3426, _3427), vec2(_3426, _3427));
                                float _4592 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                                float _3432 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                                float _3433 = _3432 * (((isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0))) * _3409) / ((_3422 * 0.699999988079071044921875) + 1.0));
                                float _3445 = exp2(log2(1.0 / ((_3422 * 3.5) + 5.0)) * 0.25);
                                float _3446 = 1.0 - _633;
                                float _3453 = sqrt(1.0 - ((1.0 - (_3446 * _3446)) * (1.0 - (_3445 * _3445))));
                                float _3454 = _3453 * _3453;
                                float _3455 = _3454 * _3454;
                                float _3456 = _3402 - _2873;
                                float _3457 = _3403 - _2874;
                                float _3458 = _3404 - _2875;
                                float _3462 = inversesqrt(dot(vec3(_3456, _3457, _3458), vec3(_3456, _3457, _3458)));
                                float _3466 = dot(vec3(_573, _576, _579), vec3((-0.0) - _2873, (-0.0) - _2874, (-0.0) - _2875));
                                float _4603 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                                float _3469 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                                float _3470 = dot(vec3(_573, _576, _579), vec3(_3462 * _3456, _3462 * _3457, _3462 * _3458));
                                float _4614 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                                float _3473 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                                float _3477 = ((_3473 * _3473) * (_3455 + (-1.0))) + 1.0;
                                float _3478 = _3415 * _3454;
                                float _3479 = _3478 * _3478;
                                float _3485 = ((1.0 - _3479) * dot(vec3(_573, _576, _579), vec3(_3402, _3403, _3404))) + _3479;
                                float _4625 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3486 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                                float _3487 = 1.0 - _3454;
                                float _3497 = (0.5 / (((_3486 * ((_3469 * _3487) + _3454)) + 9.9999999392252902907785028219223e-09) + (((_3486 * _3487) + _3454) * _3469))) * _3486;
                                float _4636 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3507 = (_3432 * _3409) * (((_3455 * 3.1415927410125732421875) * (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0)))) / ((_3477 * _3477) * ((_3422 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3433 * _3276.y;
                                frontier_phi_90_pred_1 = _3433 * _3276.x;
                                frontier_phi_90_pred_2 = _3507 * _3288.z;
                                frontier_phi_90_pred_3 = _3507 * _3288.y;
                                frontier_phi_90_pred_4 = _3507 * _3288.x;
                                frontier_phi_90_pred_5 = _3433 * _3276.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3515 = frontier_phi_90_pred;
                            _3514 = frontier_phi_90_pred_1;
                            _3513 = frontier_phi_90_pred_2;
                            _3512 = frontier_phi_90_pred_3;
                            _3511 = frontier_phi_90_pred_4;
                            _3516 = frontier_phi_90_pred_5;
                            _3218 = _3514 + _3231;
                            _3219 = _3515 + _3232;
                            _3220 = _3516 + _3233;
                            _3215 = _3511 + _3228;
                            _3216 = _3512 + _3229;
                            _3217 = _3513 + _3230;
                            if (_3235 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3228 = _3215;
                                _3229 = _3216;
                                _3230 = _3217;
                                _3231 = _3218;
                                _3232 = _3219;
                                _3233 = _3220;
                                _3234 = _3235;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3219;
                        frontier_phi_84_pred_1 = _3218;
                        frontier_phi_84_pred_2 = _3217;
                        frontier_phi_84_pred_3 = _3216;
                        frontier_phi_84_pred_4 = _3215;
                        frontier_phi_84_pred_5 = _3220;
                    }
                    _2856 = frontier_phi_84_pred;
                    _2854 = frontier_phi_84_pred_1;
                    _2852 = frontier_phi_84_pred_2;
                    _2850 = frontier_phi_84_pred_3;
                    _2848 = frontier_phi_84_pred_4;
                    _2858 = frontier_phi_84_pred_5;
                    uint _3014 = _3013 + 1u;
                    if (_3014 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3007 = _2848;
                        _3008 = _2850;
                        _3009 = _2852;
                        _3010 = _2854;
                        _3011 = _2856;
                        _3012 = _2858;
                        _3013 = _3014;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2858;
                frontier_phi_65_66_ladder_1 = _2854;
                frontier_phi_65_66_ladder_2 = _2856;
                frontier_phi_65_66_ladder_3 = _2850;
                frontier_phi_65_66_ladder_4 = _2848;
                frontier_phi_65_66_ladder_5 = _2852;
            }
            else
            {
                frontier_phi_65_66_ladder = _2737;
                frontier_phi_65_66_ladder_1 = _2733;
                frontier_phi_65_66_ladder_2 = _2735;
                frontier_phi_65_66_ladder_3 = _2729;
                frontier_phi_65_66_ladder_4 = _2727;
                frontier_phi_65_66_ladder_5 = _2731;
            }
            _2847 = frontier_phi_65_66_ladder_4;
            _2849 = frontier_phi_65_66_ladder_3;
            _2851 = frontier_phi_65_66_ladder_5;
            _2853 = frontier_phi_65_66_ladder_1;
            _2855 = frontier_phi_65_66_ladder_2;
            _2857 = frontier_phi_65_66_ladder;
        }
        float _2862 = isnan(1.0) ? _617 : (isnan(_617) ? 1.0 : min(_617, 1.0));
        _2660 = (_2862 * _2853) + _2192;
        _2662 = (_2862 * _2855) + _2194;
        _2664 = (_2862 * _2857) + _2196;
        _2666 = ((_2847 * 0.039999999105930328369140625) * _2862) + _2515;
        _2668 = ((_2849 * 0.039999999105930328369140625) * _2862) + _2517;
        _2670 = ((_2851 * 0.039999999105930328369140625) * _2862) + _2519;
    }
    else
    {
        _2660 = _2192;
        _2662 = _2194;
        _2664 = _2196;
        _2666 = _2515;
        _2668 = _2517;
        _2670 = _2519;
    }
    float _4652 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _4663 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _4674 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _2687 = ((isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (_2660 + ((isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))) * _617))) + ((_2666 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _1456)) * cbPerFrame._m0[3u].x);
    float _2688 = ((isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2662 + ((isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))) * _617))) + ((_2668 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _1456)) * cbPerFrame._m0[3u].x);
    float _2689 = ((isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (_2664 + ((isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))) * _617))) + ((_2670 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _1456)) * cbPerFrame._m0[3u].x);
    uint _2690 = _592 + 6u;
    float _2698 = _553 / cbSceneParam._m0[86u].x;
    float _2699 = _554 / cbSceneParam._m0[86u].y;
    vec4 _2713 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2698, _2699, (log2((isnan(cbSceneParam._m0[77u].w) ? _474 : (isnan(_474) ? cbSceneParam._m0[77u].w : min(_474, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2715 = _2713.x;
    float _2716 = _2713.y;
    float _2717 = _2713.z;
    float _2718 = _2713.w;
    float _2789;
    float _2791;
    float _2793;
    float _2795;
    if (_474 > cbSceneParam._m0[78u].w)
    {
        float _2752 = isnan(_474) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _474 : min(cbSceneParam._m0[80u].w, _474));
        float _2753 = _2752 / _474;
        float _2764 = _2753 * _525;
        float _2765 = _526 * _2753;
        float _2766 = (-0.0) - _2765;
        float _2767 = _2753 * _527;
        float _2769 = (cbSceneParam._m0[77u].w * _2766) / _2752;
        float _2770 = _2769 + cbSceneParam._m0[79u].w;
        float _2771 = cbSceneParam._m0[79u].w - _2765;
        float _2777 = sqrt(((_2764 * _2764) + (_2765 * _2765)) + (_2767 * _2767));
        float _2780 = (1.0 - (cbSceneParam._m0[77u].w / _2752)) * _2777;
        float _2785 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2787 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2964;
        if (abs((_2766 - _2769) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2964 = ((((_2770 > 0.0) ? exp2(_2785 * _2770) : (2.0 - exp2(_2787 * _2770))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2780;
        }
        else
        {
            float _2908 = 1.0 / cbSceneParam._m0[80u].x;
            float _2909 = isnan(_2771) ? _2770 : (isnan(_2770) ? _2771 : max(_2770, _2771));
            float _2910 = isnan(_2771) ? _2770 : (isnan(_2770) ? _2771 : min(_2770, _2771));
            float _2919 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : min(_2909, 0.0));
            float _2920 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : min(_2910, 0.0));
            _2964 = ((abs(_2777 / _2766) * cbSceneParam._m0[80u].y) * ((((_2919 - _2920) * 2.0) - ((exp2(_2785 * (isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0)))) - exp2(_2785 * (isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0))))) * _2908)) - ((exp2(_2787 * _2919) - exp2(_2787 * _2920)) * _2908))) + (_2780 * cbSceneParam._m0[80u].z);
        }
        vec4 _2966 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2698, _2699, 1.0), 0.0);
        float _2975 = exp2((_2964 * (-1.44269502162933349609375)) * (1.0 - _2966.w));
        float _2976 = log2(_2975);
        float _2992 = log2(_2718);
        _2789 = (exp2(_2992 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2976 * cbSceneParam._m0[78u].x)) * _2966.x) / cbSceneParam._m0[78u].x)) + _2715;
        _2791 = (exp2(_2992 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2976 * cbSceneParam._m0[78u].y)) * _2966.y) / cbSceneParam._m0[78u].y)) + _2716;
        _2793 = (exp2(_2992 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2976 * cbSceneParam._m0[78u].z)) * _2966.z) / cbSceneParam._m0[78u].z)) + _2717;
        _2795 = _2975 * _2718;
    }
    else
    {
        _2789 = _2715;
        _2791 = _2716;
        _2793 = _2717;
        _2795 = _2718;
    }
    bool _3002;
    vec4 _2805;
    vec4 _2827;
    float _2829;
    float _2833;
    float _2834;
    float _2835;
    float _2836;
    bool _2846;
    for (;;)
    {
        _2805 = cbMatDynParam._m0[0u];
        float _2807 = roundEven(_2805.y);
        bool _2808 = _2807 == 3.0;
        float _2809 = log2(_2795);
        float _2816 = exp2(_2809 * cbSceneParam._m0[78u].x) * _2687;
        float _2817 = exp2(_2809 * cbSceneParam._m0[78u].y) * _2688;
        float _2818 = exp2(_2809 * cbSceneParam._m0[78u].z) * _2689;
        float _2825 = _541 + (-0.5);
        _2827 = cbMtdParam._m0[1u];
        _2829 = _2827.y * _2825;
        float _2832 = (_2807 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2833 = _2832 * (_2808 ? _2816 : (_2816 + (cbSceneParam._m0[72u].w * _2789)));
        _2834 = _2832 * (_2808 ? _2817 : (_2817 + (cbSceneParam._m0[72u].w * _2791)));
        _2835 = _2832 * (_2808 ? _2818 : (_2818 + (cbSceneParam._m0[72u].w * _2793)));
        _2836 = _2825 * 0.999000012874603271484375;
        _2846 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2846)
        {
            if ((cbInstanceData._m0[_592 + 7u].x + _2836) < 0.5)
            {
                _3002 = true;
                break;
            }
        }
        uint _2943 = _593 + uint(_2805.w);
        if ((cbInstanceData._m0[_2943].w < 1.0) && ((cbInstanceData._m0[_2943].w + _2836) < 0.5))
        {
            _3002 = true;
            break;
        }
        if ((_2829 + 1.0) < _2827.x)
        {
            _3002 = true;
            break;
        }
        _3002 = false;
        break;
    }
    float _3206;
    if (_3002)
    {
        discard_state = true;
        _3206 = 0.0;
    }
    else
    {
        _3206 = cbInstanceData._m0[_2690].w;
    }
    SV_Target.x = _2833;
    SV_Target.y = _2834;
    SV_Target.z = _2835;
    SV_Target.w = _3206;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2690].w;
    discard_exit();
}


