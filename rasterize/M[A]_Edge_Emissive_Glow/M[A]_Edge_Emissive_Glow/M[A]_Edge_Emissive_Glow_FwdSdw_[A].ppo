#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_Edge_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_Edge_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _770;
float _3257;
float _3258;
float _3259;
float _3260;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _171 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _172 = _171 * NORMAL.x;
    float _173 = _171 * NORMAL.y;
    float _174 = _171 * NORMAL.z;
    float _179;
    float _180;
    float _181;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _179 = (-0.0) - _172;
        _180 = (-0.0) - _173;
        _181 = (-0.0) - _174;
    }
    else
    {
        _179 = _172;
        _180 = _173;
        _181 = _174;
    }
    vec4 _195 = texture(sampler2D(M_A_Edge_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _198 = _195.x;
    float _199 = _195.y;
    float _200 = _195.z;
    float _201 = _195.w;
    vec4 _217 = texture(sampler2D(M_A_Edge_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _228 = inversesqrt(dot(vec3(_179, _180, _181), vec3(_179, _180, _181)));
    float _229 = _228 * _179;
    float _230 = _228 * _180;
    float _231 = _228 * _181;
    float _3269 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _3280 = isnan(0.0) ? _199 : (isnan(_199) ? 0.0 : max(_199, 0.0));
    float _3291 = isnan(0.0) ? _200 : (isnan(_200) ? 0.0 : max(_200, 0.0));
    float _251 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _293 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _303 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _293);
    float _304 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _293);
    float _305 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _293);
    float _309 = inversesqrt(dot(vec3(_303, _304, _305), vec3(_303, _304, _305)));
    float _310 = _303 * _309;
    float _311 = _304 * _309;
    float _312 = _305 * _309;
    vec4 _317 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _319 = _317.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _449 = sqrt(((_303 * _303) + (_304 * _304)) + (_305 * _305));
        float _455 = (cbMatDynParam._m0[5u].x * _449) + cbMatDynParam._m0[5u].y;
        float _3302 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
        float _456 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
        float _460 = (cbMatDynParam._m0[5u].z * _449) + cbMatDynParam._m0[5u].w;
        float _3313 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0))) - _456)) + _456) < ((_319 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _331 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _332 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _352 = fma(_231, cbSceneParam._m0[5u].z, fma(_230, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _229));
    float _355 = fma(_231, cbSceneParam._m0[6u].z, fma(_230, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _229));
    float _358 = fma(_231, cbSceneParam._m0[7u].z, fma(_230, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _229));
    uint _371 = uint(roundEven(NORMAL.w)) * 13u;
    uint _373 = _371 + 9u;
    uint _374 = _373 + uint(cbMatDynParam._m0[0u].w);
    float _380 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0)))) * cbInstanceData._m0[_374].x;
    float _381 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0)))) * cbInstanceData._m0[_374].y;
    float _382 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0)))) * cbInstanceData._m0[_374].z;
    float _3324 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _383 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
    float _3335 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _384 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
    float _3346 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _385 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
    vec4 _394 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _331, cbSceneParam._m0[86u].y * _332));
    float _397 = _394.x * TEXCOORD.z;
    float _398 = dot(vec3(_229, _230, _231), vec3(_310, _311, _312));
    float _401 = _398 * 2.0;
    float _406 = (_401 * _229) - _310;
    float _407 = (_401 * _230) - _311;
    float _408 = (_401 * _231) - _312;
    float _430 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _434 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _438 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _769;
    float _771;
    float _772;
    float _773;
    float _774;
    float _775;
    float _776;
    float _777;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    float _784;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _494 = fma(_438, cbModelParam._m0[26u].z, fma(_434, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _430));
        float _498 = fma(_438, cbModelParam._m0[27u].z, fma(_434, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _430));
        float _502 = fma(_438, cbModelParam._m0[28u].z, fma(_434, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _430));
        float _527 = _430 + _229;
        float _528 = _434 + _230;
        float _529 = _438 + _231;
        float _539 = fma(_529, cbModelParam._m0[26u].z, fma(_528, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _527)) - _494;
        float _540 = fma(_529, cbModelParam._m0[27u].z, fma(_528, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _527)) - _498;
        float _541 = fma(_529, cbModelParam._m0[28u].z, fma(_528, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _527)) - _502;
        float _545 = inversesqrt(dot(vec3(_539, _540, _541), vec3(_539, _540, _541)));
        float _558 = ((_545 * _539) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_494 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _559 = ((_545 * _540) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_498 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _560 = ((_545 * _541) / cbModelParam._m0[34u].z) + ((((((_502 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _563 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_558, _559, _560), 0.0);
        vec4 _570 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_558, _559, _560), 0.0);
        vec4 _577 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_558, _559, _560), 0.0);
        vec4 _584 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_558, _559, _560), 0.0);
        float _597 = exp2((_563.w + (-0.5)) * 20.0) * 2.0;
        float _598 = _597 * (_563.x + (-0.5));
        float _599 = _597 * (_563.y + (-0.5));
        float _600 = _597 * (_563.z + (-0.5));
        float _607 = exp2((_570.w + (-0.5)) * 20.0) * 2.0;
        float _608 = _607 * (_570.x + (-0.5));
        float _609 = _607 * (_570.y + (-0.5));
        float _610 = _607 * (_570.z + (-0.5));
        float _617 = exp2((_577.w + (-0.5)) * 20.0) * 2.0;
        float _618 = _617 * (_577.x + (-0.5));
        float _619 = _617 * (_577.y + (-0.5));
        float _620 = _617 * (_577.z + (-0.5));
        float _627 = exp2((_584.w + (-0.5)) * 20.0) * 2.0;
        float _628 = _627 * (_584.x + (-0.5));
        float _629 = _627 * (_584.y + (-0.5));
        float _630 = _627 * (_584.z + (-0.5));
        float _631 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
        float _632 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
        float _633 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
        float _634 = _598 * 0.5;
        float _635 = _608 * 0.5;
        float _636 = _618 * 0.5;
        float _637 = dot(vec3(_634, _635, _636), vec3(_634, _635, _636));
        float _642 = (_637 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_637);
        float _651 = (dot(vec3(_229, _230, _231), vec3(_642 * _634, _642 * _635, _642 * _636)) + 1.0) * 0.5;
        float _3372 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
        float _661 = sqrt(((_635 * _635) + (_634 * _634)) + (_636 * _636)) / (_631 + 9.9999997473787516355514526367188e-06);
        float _3383 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
        float _662 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
        float _663 = _662 * 2.0;
        float _667 = (1.0 - _662) / (_662 + 1.0);
        float _3394 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
        float _668 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _677 = ((((1.0 - _668) * (_663 + 2.0)) * exp2(log2(isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0))) * (_663 + 1.0))) + _668) * _631;
        float _678 = _599 * 0.5;
        float _679 = _609 * 0.5;
        float _680 = _619 * 0.5;
        float _681 = dot(vec3(_678, _679, _680), vec3(_678, _679, _680));
        float _686 = (_681 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_681);
        float _694 = (dot(vec3(_229, _230, _231), vec3(_686 * _678, _686 * _679, _686 * _680)) + 1.0) * 0.5;
        float _3405 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _703 = sqrt(((_679 * _679) + (_678 * _678)) + (_680 * _680)) / (_632 + 9.9999997473787516355514526367188e-06);
        float _3416 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _704 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _705 = _704 * 2.0;
        float _709 = (1.0 - _704) / (_704 + 1.0);
        float _3427 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _710 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _719 = ((((1.0 - _710) * (_705 + 2.0)) * exp2(log2(isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0))) * (_705 + 1.0))) + _710) * _632;
        float _720 = _600 * 0.5;
        float _721 = _610 * 0.5;
        float _722 = _620 * 0.5;
        float _723 = dot(vec3(_720, _721, _722), vec3(_720, _721, _722));
        float _728 = (_723 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_723);
        float _736 = (dot(vec3(_229, _230, _231), vec3(_728 * _720, _728 * _721, _728 * _722)) + 1.0) * 0.5;
        float _3438 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _745 = sqrt(((_721 * _721) + (_720 * _720)) + (_722 * _722)) / (_633 + 9.9999997473787516355514526367188e-06);
        float _3449 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _746 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _747 = _746 * 2.0;
        float _751 = (1.0 - _746) / (_746 + 1.0);
        float _3460 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _752 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
        float _761 = ((((1.0 - _752) * (_747 + 2.0)) * exp2(log2(isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))) * (_747 + 1.0))) + _752) * _633;
        _769 = _600;
        _771 = _599;
        _772 = _598;
        _773 = _610;
        _774 = _609;
        _775 = _608;
        _776 = _620;
        _777 = _619;
        _778 = _618;
        _779 = _633;
        _780 = _632;
        _781 = _631;
        _782 = cbModelParam._m0[36u].z * (isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0)));
        _783 = cbModelParam._m0[36u].z * (isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0)));
        _784 = cbModelParam._m0[36u].z * (isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0)));
    }
    else
    {
        _769 = _770;
        _771 = _770;
        _772 = _770;
        _773 = _770;
        _774 = _770;
        _775 = _770;
        _776 = _770;
        _777 = _770;
        _778 = _770;
        _779 = _770;
        _780 = _770;
        _781 = _770;
        _782 = 0.0;
        _783 = 0.0;
        _784 = 0.0;
    }
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _813 = fma(_438, cbModelParam._m0[30u].z, fma(_434, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _430));
        float _817 = fma(_438, cbModelParam._m0[31u].z, fma(_434, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _430));
        float _821 = fma(_438, cbModelParam._m0[32u].z, fma(_434, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _430));
        float _844 = _430 + _229;
        float _845 = _434 + _230;
        float _846 = _438 + _231;
        float _856 = fma(_846, cbModelParam._m0[30u].z, fma(_845, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _844)) - _813;
        float _857 = fma(_846, cbModelParam._m0[31u].z, fma(_845, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _844)) - _817;
        float _858 = fma(_846, cbModelParam._m0[32u].z, fma(_845, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _844)) - _821;
        float _862 = inversesqrt(dot(vec3(_856, _857, _858), vec3(_856, _857, _858)));
        float _875 = ((_862 * _856) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_813 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _876 = ((_862 * _857) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_817 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _877 = ((_862 * _858) / cbModelParam._m0[35u].z) + ((((((_821 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _879 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        vec4 _886 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        vec4 _893 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        vec4 _900 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        float _912 = exp2((_879.w + (-0.5)) * 20.0) * 2.0;
        float _913 = _912 * (_879.x + (-0.5));
        float _914 = _912 * (_879.y + (-0.5));
        float _915 = _912 * (_879.z + (-0.5));
        float _922 = exp2((_886.w + (-0.5)) * 20.0) * 2.0;
        float _923 = _922 * (_886.x + (-0.5));
        float _924 = _922 * (_886.y + (-0.5));
        float _925 = _922 * (_886.z + (-0.5));
        float _932 = exp2((_893.w + (-0.5)) * 20.0) * 2.0;
        float _933 = _932 * (_893.x + (-0.5));
        float _934 = _932 * (_893.y + (-0.5));
        float _935 = _932 * (_893.z + (-0.5));
        float _942 = exp2((_900.w + (-0.5)) * 20.0) * 2.0;
        float _943 = _942 * (_900.x + (-0.5));
        float _944 = _942 * (_900.y + (-0.5));
        float _945 = _942 * (_900.z + (-0.5));
        float _946 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _947 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _948 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _949 = _913 * 0.5;
        float _950 = _923 * 0.5;
        float _951 = _933 * 0.5;
        float _952 = dot(vec3(_949, _950, _951), vec3(_949, _950, _951));
        float _957 = (_952 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_952);
        float _965 = (dot(vec3(_229, _230, _231), vec3(_957 * _949, _957 * _950, _957 * _951)) + 1.0) * 0.5;
        float _3501 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _974 = sqrt(((_950 * _950) + (_949 * _949)) + (_951 * _951)) / (_946 + 9.9999997473787516355514526367188e-06);
        float _3512 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _976 = _975 * 2.0;
        float _980 = (1.0 - _975) / (_975 + 1.0);
        float _3523 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _990 = ((((1.0 - _981) * (_976 + 2.0)) * exp2(log2(isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))) * (_976 + 1.0))) + _981) * _946;
        float _991 = _914 * 0.5;
        float _992 = _924 * 0.5;
        float _993 = _934 * 0.5;
        float _994 = dot(vec3(_991, _992, _993), vec3(_991, _992, _993));
        float _999 = (_994 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_994);
        float _1007 = (dot(vec3(_229, _230, _231), vec3(_999 * _991, _999 * _992, _999 * _993)) + 1.0) * 0.5;
        float _3534 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1016 = sqrt(((_992 * _992) + (_991 * _991)) + (_993 * _993)) / (_947 + 9.9999997473787516355514526367188e-06);
        float _3545 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _1018 = _1017 * 2.0;
        float _1022 = (1.0 - _1017) / (_1017 + 1.0);
        float _3556 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _1032 = ((((1.0 - _1023) * (_1018 + 2.0)) * exp2(log2(isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * (_1018 + 1.0))) + _1023) * _947;
        float _1033 = _915 * 0.5;
        float _1034 = _925 * 0.5;
        float _1035 = _935 * 0.5;
        float _1036 = dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035));
        float _1041 = (_1036 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1036);
        float _1049 = (dot(vec3(_229, _230, _231), vec3(_1041 * _1033, _1041 * _1034, _1041 * _1035)) + 1.0) * 0.5;
        float _3567 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1058 = sqrt(((_1034 * _1034) + (_1033 * _1033)) + (_1035 * _1035)) / (_948 + 9.9999997473787516355514526367188e-06);
        float _3578 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _1060 = _1059 * 2.0;
        float _1064 = (1.0 - _1059) / (_1059 + 1.0);
        float _3589 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _1074 = ((((1.0 - _1065) * (_1060 + 2.0)) * exp2(log2(isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) * (_1060 + 1.0))) + _1065) * _948;
        _1082 = _915;
        _1083 = _914;
        _1084 = _913;
        _1085 = _925;
        _1086 = _924;
        _1087 = _923;
        _1088 = _935;
        _1089 = _934;
        _1090 = _933;
        _1091 = _948;
        _1092 = _947;
        _1093 = _946;
        _1094 = cbModelParam._m0[36u].w * (isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0)));
        _1095 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0)));
        _1096 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0)));
    }
    else
    {
        _1082 = _770;
        _1083 = _770;
        _1084 = _770;
        _1085 = _770;
        _1086 = _770;
        _1087 = _770;
        _1088 = _770;
        _1089 = _770;
        _1090 = _770;
        _1091 = _770;
        _1092 = _770;
        _1093 = _770;
        _1094 = 0.0;
        _1095 = 0.0;
        _1096 = 0.0;
    }
    float _1106 = (cbModelParam._m0[1u].x * (_1094 - _782)) + _782;
    float _1107 = (cbModelParam._m0[1u].x * (_1095 - _783)) + _783;
    float _1108 = (cbModelParam._m0[1u].x * (_1096 - _784)) + _784;
    float _1129 = fma(_1108, cbSceneParam._m0[89u].z, fma(_1107, cbSceneParam._m0[89u].y, _1106 * cbSceneParam._m0[89u].x));
    float _1132 = fma(_1108, cbSceneParam._m0[90u].z, fma(_1107, cbSceneParam._m0[90u].y, _1106 * cbSceneParam._m0[90u].x));
    float _1135 = fma(_1108, cbSceneParam._m0[91u].z, fma(_1107, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1106));
    float _1150 = _406 * 0.5;
    float _1151 = _407 * 0.5;
    float _1152 = _408 * 0.5;
    float _1153 = dot(vec4(_1150, _1151, _1152, 1.0), vec4(_1084, _1087, _1090, _1093));
    float _1156 = dot(vec4(_1150, _1151, _1152, 1.0), vec4(_1083, _1086, _1089, _1092));
    float _1159 = dot(vec4(_1150, _1151, _1152, 1.0), vec4(_1082, _1085, _1088, _1091));
    float _1193;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1166 = dot(vec4(_1150, _1151, _1152, 1.0), vec4(_769, _773, _776, _779));
        float _1170 = dot(vec4(_1150, _1151, _1152, 1.0), vec4(_771, _774, _777, _780));
        float _1174 = dot(vec4(_1150, _1151, _1152, 1.0), vec4(_772, _775, _778, _781));
        float _1181 = dot(vec4(cbModelParam._m0[39u]), vec4(_1150, _1151, _1152, 1.0));
        _1193 = dot(vec3(isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)), isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)), isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1181) ? 0.0 : (isnan(0.0) ? _1181 : max(0.0, _1181))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1193 = 1.0;
    }
    float _1204;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1195 = dot(vec4(cbModelParam._m0[40u]), vec4(_1150, _1151, _1152, 1.0));
        _1204 = dot(vec3(isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)), isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)), isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1195) ? 0.0 : (isnan(0.0) ? _1195 : max(0.0, _1195))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1204 = 1.0;
    }
    float _1208 = (_1204 * cbModelParam._m0[1u].x) + (_1193 * (1.0 - cbModelParam._m0[1u].x));
    float _1217 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1299;
    float _1301;
    float _1303;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1266 = fma(_438, cbModelParam._m0[13u].z, fma(_434, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _430)) + cbModelParam._m0[13u].w;
        float _1270 = fma(_438, cbModelParam._m0[14u].z, fma(_434, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _430)) + cbModelParam._m0[14u].w;
        float _1274 = fma(_438, cbModelParam._m0[15u].z, fma(_434, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _430)) + cbModelParam._m0[15u].w;
        float _1277 = fma(_408, cbModelParam._m0[13u].z, fma(_407, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _406));
        float _1280 = fma(_408, cbModelParam._m0[14u].z, fma(_407, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _406));
        float _1283 = fma(_408, cbModelParam._m0[15u].z, fma(_407, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _406));
        float _1309;
        if (_1277 > 0.0)
        {
            _1309 = abs((1.0 - _1266) / _1277);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1277 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1266 + 1.0) / _1277);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1309 = frontier_phi_19_17_ladder;
        }
        float _1484;
        if (_1280 > 0.0)
        {
            _1484 = abs((1.0 - _1270) / _1280);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1280 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1270 + 1.0) / _1280);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1484 = frontier_phi_28_24_ladder;
        }
        float _1781;
        if (_1283 > 0.0)
        {
            _1781 = abs((1.0 - _1274) / _1283);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1283 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1274 + 1.0) / _1283);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1781 = frontier_phi_40_35_ladder;
        }
        float _1783 = isnan(_1484) ? _1309 : (isnan(_1309) ? _1484 : min(_1309, _1484));
        float _1784 = isnan(_1781) ? _1783 : (isnan(_1783) ? _1781 : min(_1783, _1781));
        float _1788 = (_1784 * _1277) + _1266;
        float _1789 = (_1784 * _1280) + _1270;
        float _1790 = (_1784 * _1283) + _1274;
        float _1791 = _1784 * 9.9999997473787516355514526367188e-05;
        float _1793 = (-1.0) - _1791;
        float _1795 = _1791 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1790 > _1795) || ((_1790 < _1793) || ((_1789 > _1795) || ((_1789 < _1793) || ((_1788 < _1793) || (_1788 > _1795))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1935 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1790, cbModelParam._m0[9u].z, fma(_1789, cbModelParam._m0[9u].y, _1788 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1790, cbModelParam._m0[10u].z, fma(_1789, cbModelParam._m0[10u].y, _1788 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1790, cbModelParam._m0[11u].z, fma(_1789, cbModelParam._m0[11u].y, _1788 * cbModelParam._m0[11u].x))), _1217);
            frontier_phi_18_40_ladder = _1935.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1935.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1935.x * cbModelParam._m0[1u].y;
        }
        _1299 = frontier_phi_18_40_ladder_2;
        _1301 = frontier_phi_18_40_ladder_1;
        _1303 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1287 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_406, _407, _408), _1217);
        _1299 = _1287.x * cbModelParam._m0[1u].y;
        _1301 = _1287.y * cbModelParam._m0[1u].y;
        _1303 = _1287.z * cbModelParam._m0[1u].y;
    }
    float _1306 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1399;
    float _1401;
    float _1403;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1363 = fma(_438, cbModelParam._m0[21u].z, fma(_434, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _430)) + cbModelParam._m0[21u].w;
        float _1367 = fma(_438, cbModelParam._m0[22u].z, fma(_434, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _430)) + cbModelParam._m0[22u].w;
        float _1371 = fma(_438, cbModelParam._m0[23u].z, fma(_434, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _430)) + cbModelParam._m0[23u].w;
        float _1374 = fma(_408, cbModelParam._m0[21u].z, fma(_407, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _406));
        float _1377 = fma(_408, cbModelParam._m0[22u].z, fma(_407, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _406));
        float _1380 = fma(_408, cbModelParam._m0[23u].z, fma(_407, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _406));
        float _1489;
        if (_1374 > 0.0)
        {
            _1489 = abs((1.0 - _1363) / _1374);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1374 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1363 + 1.0) / _1374);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1489 = frontier_phi_30_26_ladder;
        }
        float _1808;
        if (_1377 > 0.0)
        {
            _1808 = abs((1.0 - _1367) / _1377);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1377 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1367 + 1.0) / _1377);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1808 = frontier_phi_42_37_ladder;
        }
        float _2081;
        if (_1380 > 0.0)
        {
            _2081 = abs((1.0 - _1371) / _1380);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1380 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1371 + 1.0) / _1380);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2081 = frontier_phi_52_49_ladder;
        }
        float _2083 = isnan(_1808) ? _1489 : (isnan(_1489) ? _1808 : min(_1489, _1808));
        float _2084 = isnan(_2081) ? _2083 : (isnan(_2083) ? _2081 : min(_2083, _2081));
        float _2088 = (_2084 * _1374) + _1363;
        float _2089 = (_2084 * _1377) + _1367;
        float _2090 = (_2084 * _1380) + _1371;
        float _2091 = _2084 * 9.9999997473787516355514526367188e-05;
        float _2092 = (-1.0) - _2091;
        float _2094 = _2091 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2090 > _2094) || ((_2090 < _2092) || ((_2089 > _2094) || ((_2089 < _2092) || ((_2088 < _2092) || (_2088 > _2094))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2181 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2090, cbModelParam._m0[17u].z, fma(_2089, cbModelParam._m0[17u].y, _2088 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2090, cbModelParam._m0[18u].z, fma(_2089, cbModelParam._m0[18u].y, _2088 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2090, cbModelParam._m0[19u].z, fma(_2089, cbModelParam._m0[19u].y, _2088 * cbModelParam._m0[19u].x))), _1306);
            frontier_phi_27_52_ladder = _2181.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2181.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2181.x * cbModelParam._m0[1u].z;
        }
        _1399 = frontier_phi_27_52_ladder_2;
        _1401 = frontier_phi_27_52_ladder_1;
        _1403 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1383 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_406, _407, _408), _1306);
        _1399 = _1383.x * cbModelParam._m0[1u].z;
        _1401 = _1383.y * cbModelParam._m0[1u].z;
        _1403 = _1383.z * cbModelParam._m0[1u].z;
    }
    float _1415 = _397 * 0.01200000010430812835693359375;
    float _1417 = _1415 * ((cbModelParam._m0[1u].w * (_1399 - _1299)) + _1299);
    float _1418 = _1415 * ((cbModelParam._m0[1u].w * (_1401 - _1301)) + _1301);
    float _1419 = _1415 * ((cbModelParam._m0[1u].w * (_1403 - _1303)) + _1303);
    float _1422 = fma(_1419, cbSceneParam._m0[89u].z, fma(_1418, cbSceneParam._m0[89u].y, _1417 * cbSceneParam._m0[89u].x));
    float _1425 = fma(_1419, cbSceneParam._m0[90u].z, fma(_1418, cbSceneParam._m0[90u].y, _1417 * cbSceneParam._m0[90u].x));
    float _1428 = fma(_1419, cbSceneParam._m0[91u].z, fma(_1418, cbSceneParam._m0[91u].y, _1417 * cbSceneParam._m0[91u].x));
    float _1463 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1467 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1471 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1475 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1476 = _1463 / _1475;
    float _1477 = _1467 / _1475;
    float _1478 = _1471 / _1475;
    float _1625;
    float _1626;
    float _1627;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1505 = ((uint(_1478 > cbSceneParam._m0[59u].y) + uint(_1478 > cbSceneParam._m0[59u].x)) + uint(_1478 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1506 = _1505 + 43u;
        uint _1514 = _1505 + 44u;
        uint _1522 = _1505 + 45u;
        uint _1530 = _1505 + 46u;
        float _1541 = fma(_1475, cbSceneParam._m0[_1506].w, fma(_1471, cbSceneParam._m0[_1506].z, fma(_1467, cbSceneParam._m0[_1506].y, _1463 * cbSceneParam._m0[_1506].x)));
        float _1545 = fma(_1475, cbSceneParam._m0[_1514].w, fma(_1471, cbSceneParam._m0[_1514].z, fma(_1467, cbSceneParam._m0[_1514].y, _1463 * cbSceneParam._m0[_1514].x)));
        float _1553 = fma(_1475, cbSceneParam._m0[_1530].w, fma(_1471, cbSceneParam._m0[_1530].z, fma(_1467, cbSceneParam._m0[_1530].y, _1463 * cbSceneParam._m0[_1530].x)));
        float _1558 = cbSceneParam._m0[33u].z * _1553;
        float _1560 = cbSceneParam._m0[33u].w * _1553;
        float _1563 = fma(_1475, cbSceneParam._m0[_1522].w, fma(_1471, cbSceneParam._m0[_1522].z, fma(_1467, cbSceneParam._m0[_1522].y, _1463 * cbSceneParam._m0[_1522].x))) / _1553;
        float _1611 = (cbSceneParam._m0[33u].x - sqrt(((_1477 * _1477) + (_1476 * _1476)) + (_1478 * _1478))) * cbSceneParam._m0[33u].y;
        float _3715 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1618 = (isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1558 + _1541) / _1553, (_1560 + _1545) / _1553), _1563), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1560 + _1541) / _1553, (_1545 - _1558) / _1553), _1563), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1541 - _1558) / _1553, (_1545 - _1560) / _1553), _1563), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1541 - _1560) / _1553, (_1558 + _1545) / _1553), _1563), 0.0)).x), vec4(0.25)));
        _1625 = 1.0 - (_1618 * cbSceneParam._m0[34u].x);
        _1626 = 1.0 - (_1618 * cbSceneParam._m0[34u].y);
        _1627 = 1.0 - (_1618 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1625 = 1.0;
        _1626 = 1.0;
        _1627 = 1.0;
    }
    float _1691;
    float _1693;
    float _1695;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1679 = fma(_1475, cbSceneParam._m0[63u].w, fma(_1471, cbSceneParam._m0[63u].z, fma(_1467, cbSceneParam._m0[63u].y, _1463 * cbSceneParam._m0[63u].x)));
        float _1680 = fma(_1475, cbSceneParam._m0[60u].w, fma(_1471, cbSceneParam._m0[60u].z, fma(_1467, cbSceneParam._m0[60u].y, _1463 * cbSceneParam._m0[60u].x))) / _1679;
        float _1681 = fma(_1475, cbSceneParam._m0[61u].w, fma(_1471, cbSceneParam._m0[61u].z, fma(_1467, cbSceneParam._m0[61u].y, _1463 * cbSceneParam._m0[61u].x))) / _1679;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1680 >= cbSceneParam._m0[64u].x) && (_1681 >= cbSceneParam._m0[64u].y)) && (_1680 <= cbSceneParam._m0[64u].z)) && (_1681 <= cbSceneParam._m0[64u].w))
        {
            float _1821 = fma(_1475, cbSceneParam._m0[62u].w, fma(_1471, cbSceneParam._m0[62u].z, fma(_1467, cbSceneParam._m0[62u].y, _1463 * cbSceneParam._m0[62u].x))) / _1679;
            float _1825 = isnan(cbSceneParam._m0[41u].w) ? _1821 : (isnan(_1821) ? cbSceneParam._m0[41u].w : max(_1821, cbSceneParam._m0[41u].w));
            float _1868 = (cbSceneParam._m0[33u].x - sqrt(((_1477 * _1477) + (_1476 * _1476)) + (_1478 * _1478))) * cbSceneParam._m0[33u].y;
            float _3731 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
            float _1875 = (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1680, cbSceneParam._m0[33u].w + _1681), _1825), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1680, _1681 - cbSceneParam._m0[33u].z), _1825), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1680 - cbSceneParam._m0[33u].z, _1681 - cbSceneParam._m0[33u].w), _1825), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1680 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1681), _1825), 0.0)).x), vec4(0.25)));
            float _1879 = 1.0 - (_1875 * cbSceneParam._m0[34u].x);
            float _1880 = 1.0 - (_1875 * cbSceneParam._m0[34u].y);
            float _1881 = 1.0 - (_1875 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_1880) ? _1626 : (isnan(_1626) ? _1880 : min(_1626, _1880));
            frontier_phi_39_38_ladder_1 = isnan(_1879) ? _1625 : (isnan(_1625) ? _1879 : min(_1625, _1879));
            frontier_phi_39_38_ladder_2 = isnan(_1881) ? _1627 : (isnan(_1627) ? _1881 : min(_1627, _1881));
        }
        else
        {
            frontier_phi_39_38_ladder = _1626;
            frontier_phi_39_38_ladder_1 = _1625;
            frontier_phi_39_38_ladder_2 = _1627;
        }
        _1691 = frontier_phi_39_38_ladder_1;
        _1693 = frontier_phi_39_38_ladder;
        _1695 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1691 = _1625;
        _1693 = _1626;
        _1695 = _1627;
    }
    uvec4 _1700 = floatBitsToUint(cbInstanceData._m0[_371 + 5u]);
    uint _1702 = _1700.x * 14u;
    uint _1703 = _1702 + 13u;
    float _1710 = _397 + (-1.0);
    float _1716 = (cbLight._m0[_1703].x * _1710) + 1.0;
    float _1717 = (cbLight._m0[_1703].y * _1710) + 1.0;
    float _1718 = (cbLight._m0[_1703].z * _1710) + 1.0;
    float _1719 = (cbLight._m0[_1703].w * _1710) + 1.0;
    uint _1720 = _1702 + 5u;
    float _1726 = isnan(1.0) ? _1717 : (isnan(_1717) ? 1.0 : min(_1717, 1.0));
    uint _1730 = _1702 + 4u;
    float _1740 = isnan(1.0) ? _1716 : (isnan(_1716) ? 1.0 : min(_1716, 1.0));
    uint _1744 = _1702 | 1u;
    float _1755 = dot(vec3(cbLight._m0[_1702].xyz), vec3(_229, _230, _231));
    float _1758 = dot(vec3(cbLight._m0[_1744].xyz), vec3(_229, _230, _231));
    float _3767 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
    float _3778 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
    float _1763 = (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * 0.3183098733425140380859375;
    float _1765 = (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * 0.3183098733425140380859375;
    float _1772 = ((cbLight._m0[_1720].x * _1726) * _1765) + (((cbLight._m0[_1730].x * _1691) * _1740) * _1763);
    float _1773 = ((_1726 * cbLight._m0[_1720].y) * _1765) + (((cbLight._m0[_1730].y * _1693) * _1740) * _1763);
    float _1774 = ((_1726 * cbLight._m0[_1720].z) * _1765) + (((cbLight._m0[_1730].z * _1695) * _1740) * _1763);
    uvec4 _1778 = floatBitsToUint(cbLight._m0[_1702 + 12u]);
    bool _1780 = _1778.x == 0u;
    float _1882;
    float _1884;
    float _1886;
    if (_1780)
    {
        _1882 = _1772;
        _1884 = _1773;
        _1886 = _1774;
    }
    else
    {
        uint _1890 = _1702 + 6u;
        float _1906 = (dot(vec3(cbLight._m0[_1702 + 2u].xyz), vec3(_229, _230, _231)) * 0.5) + 0.5;
        float _1907 = _1906 * _1906;
        float _3789 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
        float _1908 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1909 = isnan(1.0) ? _1718 : (isnan(_1718) ? 1.0 : min(_1718, 1.0));
        _1882 = (((cbLight._m0[_1890].x * 0.3183098733425140380859375) * _1908) * _1909) + _1772;
        _1884 = (((cbLight._m0[_1890].y * 0.3183098733425140380859375) * _1908) * _1909) + _1773;
        _1886 = (((cbLight._m0[_1890].z * 0.3183098733425140380859375) * _1908) * _1909) + _1774;
    }
    bool _1889 = _1778.y == 0u;
    float _1944;
    float _1946;
    float _1948;
    if (_1889)
    {
        _1944 = _1882;
        _1946 = _1884;
        _1948 = _1886;
    }
    else
    {
        uint _2052 = _1702 + 7u;
        float _2068 = (dot(vec3(cbLight._m0[_1702 + 3u].xyz), vec3(_229, _230, _231)) * 0.5) + 0.5;
        float _2069 = _2068 * _2068;
        float _3805 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2070 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _2071 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
        _1944 = (((cbLight._m0[_2052].x * 0.3183098733425140380859375) * _2070) * _2071) + _1882;
        _1946 = (((cbLight._m0[_2052].y * 0.3183098733425140380859375) * _2070) * _2071) + _1884;
        _1948 = (((cbLight._m0[_2052].z * 0.3183098733425140380859375) * _2070) * _2071) + _1886;
    }
    uint _1950 = _1702 + 8u;
    float _1956 = cbLight._m0[_1702].x + _310;
    float _1957 = cbLight._m0[_1702].y + _311;
    float _1958 = cbLight._m0[_1702].z + _312;
    float _1962 = inversesqrt(dot(vec3(_1956, _1957, _1958), vec3(_1956, _1957, _1958)));
    float _1966 = dot(vec3(_229, _230, _231), vec3(cbLight._m0[_1702].xyz));
    float _3821 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1969 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _3832 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _1970 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _1971 = dot(vec3(cbLight._m0[_1702].xyz), vec3(_1956 * _1962, _1957 * _1962, _1958 * _1962));
    float _3843 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1982 = (exp2(log2(1.0 - (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1988 = (0.5 / ((_1969 + 9.9999999392252902907785028219223e-09) + _1970)) * _1969;
    float _3854 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1990 = (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * 0.31831014156341552734375;
    uint _2004 = _1702 + 9u;
    float _2010 = cbLight._m0[_1744].x + _310;
    float _2011 = cbLight._m0[_1744].y + _311;
    float _2012 = cbLight._m0[_1744].z + _312;
    float _2016 = inversesqrt(dot(vec3(_2010, _2011, _2012), vec3(_2010, _2011, _2012)));
    float _2020 = dot(vec3(_229, _230, _231), vec3(cbLight._m0[_1744].xyz));
    float _3865 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2023 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _2024 = dot(vec3(cbLight._m0[_1744].xyz), vec3(_2010 * _2016, _2011 * _2016, _2012 * _2016));
    float _3876 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2033 = (exp2(log2(1.0 - (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2037 = (0.5 / ((_2023 + 9.9999999392252902907785028219223e-09) + _1970)) * _2023;
    float _3887 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2039 = (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * 0.31831014156341552734375;
    float _2049 = (((_2033 * cbLight._m0[_2004].x) * _2039) * _1726) + ((((cbLight._m0[_1950].x * _1691) * _1982) * _1990) * _1740);
    float _2050 = (((_2033 * cbLight._m0[_2004].y) * _2039) * _1726) + ((((cbLight._m0[_1950].y * _1693) * _1982) * _1990) * _1740);
    float _2051 = (((_2033 * cbLight._m0[_2004].z) * _2039) * _1726) + ((((cbLight._m0[_1950].z * _1695) * _1982) * _1990) * _1740);
    float _2107;
    float _2109;
    float _2111;
    if (_1780)
    {
        _2107 = _2049;
        _2109 = _2050;
        _2111 = _2051;
    }
    else
    {
        uint _2113 = _1702 + 10u;
        uint _2119 = _1702 + 2u;
        float _2125 = cbLight._m0[_2119].x + _310;
        float _2126 = cbLight._m0[_2119].y + _311;
        float _2127 = cbLight._m0[_2119].z + _312;
        float _2131 = inversesqrt(dot(vec3(_2125, _2126, _2127), vec3(_2125, _2126, _2127)));
        float _2135 = dot(vec3(_229, _230, _231), vec3(cbLight._m0[_2119].xyz));
        float _3898 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2138 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _2139 = dot(vec3(cbLight._m0[_2119].xyz), vec3(_2125 * _2131, _2126 * _2131, _2127 * _2131));
        float _3909 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2148 = (exp2(log2(1.0 - (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2152 = (0.5 / ((_2138 + 9.9999999392252902907785028219223e-09) + _1970)) * _2138;
        float _3920 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2154 = (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * 0.31831014156341552734375;
        float _2155 = isnan(1.0) ? _1718 : (isnan(_1718) ? 1.0 : min(_1718, 1.0));
        _2107 = (((_2148 * cbLight._m0[_2113].x) * _2154) * _2155) + _2049;
        _2109 = (((_2148 * cbLight._m0[_2113].y) * _2154) * _2155) + _2050;
        _2111 = (((_2148 * cbLight._m0[_2113].z) * _2154) * _2155) + _2051;
    }
    float _2186;
    float _2188;
    float _2190;
    if (_1889)
    {
        _2186 = _2107;
        _2188 = _2109;
        _2190 = _2111;
    }
    else
    {
        uint _2197 = _1702 + 11u;
        uint _2203 = _1702 + 3u;
        float _2209 = cbLight._m0[_2203].x + _310;
        float _2210 = cbLight._m0[_2203].y + _311;
        float _2211 = cbLight._m0[_2203].z + _312;
        float _2215 = inversesqrt(dot(vec3(_2209, _2210, _2211), vec3(_2209, _2210, _2211)));
        float _2219 = dot(vec3(_229, _230, _231), vec3(cbLight._m0[_2203].xyz));
        float _3936 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2222 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _2223 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_2209 * _2215, _2210 * _2215, _2211 * _2215));
        float _3947 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2232 = (exp2(log2(1.0 - (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2236 = (0.5 / ((_2222 + 9.9999999392252902907785028219223e-09) + _1970)) * _2222;
        float _3958 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2238 = (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * 0.31831014156341552734375;
        float _2239 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
        _2186 = (((_2232 * cbLight._m0[_2197].x) * _2238) * _2239) + _2107;
        _2188 = (((_2232 * cbLight._m0[_2197].y) * _2238) * _2239) + _2109;
        _2190 = (((_2232 * cbLight._m0[_2197].z) * _2238) * _2239) + _2111;
    }
    float _2304;
    float _2306;
    float _2308;
    float _2310;
    float _2312;
    float _2314;
    if (_1700.y == 0u)
    {
        uvec4 _2260 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2261 = _2260.x;
        uint _2272 = uint((float(_2260.y) * floor(float(uint(cbSceneParam._m0[85u].y * _332) / _2261))) + floor(float(uint(cbSceneParam._m0[85u].x * _331) / _2261)));
        float _2282 = (log2(_1478 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2283 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        uint _2286 = uint(isnan(14.0) ? _2283 : (isnan(_2283) ? 14.0 : min(_2283, 14.0)));
        uvec4 _2291 = texelFetch(g_lightClusterGridBuffer, int(((_2286 << 2u) + (_2272 << 6u)) >> 2u));
        uint _2292 = _2291.x;
        uint _2293 = _2260.z;
        float _2400;
        float _2402;
        float _2404;
        float _2406;
        float _2408;
        float _2410;
        if (((((1u << ((_2293 >> 4u) & 15u)) + 4294967295u) & _2292) == 0u) || ((_2293 & 240u) == 0u))
        {
            _2400 = 0.0;
            _2402 = 0.0;
            _2404 = 0.0;
            _2406 = 0.0;
            _2408 = 0.0;
            _2410 = 0.0;
        }
        else
        {
            float _2401;
            float _2403;
            float _2405;
            float _2407;
            float _2409;
            float _2411;
            float _2560 = 0.0;
            float _2561 = 0.0;
            float _2562 = 0.0;
            float _2563 = 0.0;
            float _2564 = 0.0;
            float _2565 = 0.0;
            uint _2566 = 0u;
            uint _2575;
            bool _2576;
            for (;;)
            {
                _2575 = texelFetch(g_lightClassification, int((((_2286 << 5u) + (_2272 << 9u)) + (_2566 << 2u)) >> 2u)).x;
                _2576 = _2575 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2576)
                {
                    frontier_phi_73_pred = _2565;
                    frontier_phi_73_pred_1 = _2564;
                    frontier_phi_73_pred_2 = _2563;
                    frontier_phi_73_pred_3 = _2562;
                    frontier_phi_73_pred_4 = _2561;
                    frontier_phi_73_pred_5 = _2560;
                }
                else
                {
                    float _2705;
                    float _2706;
                    float _2707;
                    float _2708;
                    float _2709;
                    float _2710;
                    uint _2711;
                    _2705 = _2560;
                    _2706 = _2561;
                    _2707 = _2562;
                    _2708 = _2563;
                    _2709 = _2564;
                    _2710 = _2565;
                    _2711 = _2575;
                    float _2632;
                    float _2633;
                    float _2634;
                    float _2635;
                    float _2636;
                    float _2637;
                    for (;;)
                    {
                        uint _2715 = uint(findLSB(_2711)) + (_2566 << 5u);
                        uint _2712 = (_2711 + 4294967295u) & _2711;
                        uint _2717 = _2715 * 48u;
                        vec4 _2731 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2717)).x, texelFetch(g_PointLightRenderingBuffer, int(_2717 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2717 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2717 + 3u)).x));
                        uint _2737 = (_2715 * 48u) + 4u;
                        vec4 _2750 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2737)).x, texelFetch(g_PointLightRenderingBuffer, int(_2737 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2737 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2737 + 3u)).x));
                        uint _2756 = (_2715 * 48u) + 8u;
                        vec3 _2767 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2756)).x, texelFetch(g_PointLightRenderingBuffer, int(_2756 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2756 + 2u)).x));
                        float _2771 = _2731.x - _1476;
                        float _2772 = _2731.y - _1477;
                        float _2773 = _2731.z - _1478;
                        float _2774 = dot(vec3(_2771, _2772, _2773), vec3(_2771, _2772, _2773));
                        float _2777 = inversesqrt(_2774);
                        float _2786 = 1.0 - (_2774 * _2731.w);
                        float _3984 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
                        float _2787 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
                        float _2788 = sqrt(_2774) * _2750.w;
                        float _2791 = 1.39999997615814208984375 / (_2788 + 1.39999997615814208984375);
                        float _2792 = _2791 * _2791;
                        float _2795 = ((1.0 - _2792) * dot(vec3(_352, _355, _358), vec3(_2777 * _2771, _2777 * _2772, _2777 * _2773))) + _2792;
                        float _2798 = _2788 * _2788;
                        float _2802 = ((isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0))) * _2787) / ((_2798 * 0.699999988079071044921875) + 1.0);
                        float _2806 = (-0.0) - _1476;
                        float _2807 = (-0.0) - _1477;
                        float _2808 = (-0.0) - _1478;
                        float _2812 = inversesqrt(dot(vec3(_2806, _2807, _2808), vec3(_2806, _2807, _2808)));
                        float _2816 = dot(vec3(_352, _355, _358), vec3(_2812 * _2806, _2812 * _2807, _2812 * _2808));
                        float _4000 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
                        float _4011 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
                        float _2820 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
                        float _2824 = (0.5 / (((isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) + 9.9999999392252902907785028219223e-09) + _2820)) * _2820;
                        float _4022 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
                        float _2833 = (((isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * 3.1415927410125732421875) / ((_2798 * 2.1991131305694580078125) + 3.141590118408203125)) * _2787;
                        _2635 = (_2802 * _2750.x) + _2708;
                        _2636 = (_2802 * _2750.y) + _2709;
                        _2637 = (_2802 * _2750.z) + _2710;
                        _2632 = (_2833 * _2767.x) + _2705;
                        _2633 = (_2833 * _2767.y) + _2706;
                        _2634 = (_2833 * _2767.z) + _2707;
                        if (_2712 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2705 = _2632;
                            _2706 = _2633;
                            _2707 = _2634;
                            _2708 = _2635;
                            _2709 = _2636;
                            _2710 = _2637;
                            _2711 = _2712;
                        }
                    }
                    frontier_phi_73_pred = _2637;
                    frontier_phi_73_pred_1 = _2636;
                    frontier_phi_73_pred_2 = _2635;
                    frontier_phi_73_pred_3 = _2634;
                    frontier_phi_73_pred_4 = _2633;
                    frontier_phi_73_pred_5 = _2632;
                }
                _2411 = frontier_phi_73_pred;
                _2409 = frontier_phi_73_pred_1;
                _2407 = frontier_phi_73_pred_2;
                _2405 = frontier_phi_73_pred_3;
                _2403 = frontier_phi_73_pred_4;
                _2401 = frontier_phi_73_pred_5;
                uint _2567 = _2566 + 1u;
                if (_2567 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2560 = _2401;
                    _2561 = _2403;
                    _2562 = _2405;
                    _2563 = _2407;
                    _2564 = _2409;
                    _2565 = _2411;
                    _2566 = _2567;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2400 = _2401;
            _2402 = _2403;
            _2404 = _2405;
            _2406 = _2407;
            _2408 = _2409;
            _2410 = _2411;
        }
        uvec4 _2414 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2415 = _2414.z;
        uint _2417 = (_2415 >> 8u) & 15u;
        float _2531;
        float _2533;
        float _2535;
        float _2537;
        float _2539;
        float _2541;
        if (((4294967295u << _2417) & _2292) == 0u)
        {
            _2531 = _2400;
            _2533 = _2402;
            _2535 = _2404;
            _2537 = _2406;
            _2539 = _2408;
            _2541 = _2410;
        }
        else
        {
            float _2556 = inversesqrt(dot(vec3(_1476, _1477, _1478), vec3(_1476, _1477, _1478)));
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2417 < ((_2415 >> 12u) & 15u))
            {
                float _2532;
                float _2534;
                float _2536;
                float _2538;
                float _2540;
                float _2542;
                float _2688 = _2400;
                float _2689 = _2402;
                float _2690 = _2404;
                float _2691 = _2406;
                float _2692 = _2408;
                float _2693 = _2410;
                uint _2694 = _2417;
                uint _2703;
                bool _2704;
                for (;;)
                {
                    _2703 = texelFetch(g_lightClassification, int((((_2286 << 5u) + (_2272 << 9u)) + (_2694 << 2u)) >> 2u)).x;
                    _2704 = _2703 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2704)
                    {
                        frontier_phi_84_pred = _2692;
                        frontier_phi_84_pred_1 = _2691;
                        frontier_phi_84_pred_2 = _2690;
                        frontier_phi_84_pred_3 = _2689;
                        frontier_phi_84_pred_4 = _2688;
                        frontier_phi_84_pred_5 = _2693;
                    }
                    else
                    {
                        float _2847;
                        float _2848;
                        float _2849;
                        float _2850;
                        float _2851;
                        float _2852;
                        float _3099;
                        float _3100;
                        float _3101;
                        float _3102;
                        float _3103;
                        float _3104;
                        float _2860 = _2688;
                        float _2861 = _2689;
                        float _2862 = _2690;
                        float _2863 = _2691;
                        float _2864 = _2692;
                        float _2865 = _2693;
                        uint _2866 = _2703;
                        uint _2867;
                        vec4 _2892;
                        float _2893;
                        vec4 _2908;
                        vec3 _2920;
                        vec4 _2936;
                        vec4 _2952;
                        float _2999;
                        bool _3000;
                        for (;;)
                        {
                            uint _2877 = ((_2694 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2866));
                            _2867 = (_2866 + 4294967295u) & _2866;
                            uint _2879 = _2877 * 40u;
                            _2892 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2879)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 3u)).x));
                            _2893 = _2892.w;
                            uint _2895 = (_2877 * 40u) + 4u;
                            _2908 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 3u)).x));
                            uint _2910 = (_2877 * 40u) + 8u;
                            _2920 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 2u)).x));
                            uint _2923 = (_2877 * 40u) + 16u;
                            _2936 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2923)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 3u)).x));
                            uint _2939 = (_2877 * 40u) + 20u;
                            _2952 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2939)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 3u)).x));
                            uint _2955 = (_2877 * 40u) + 24u;
                            vec4 _2968 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 3u)).x));
                            uint _2974 = (_2877 * 40u) + 28u;
                            vec4 _2987 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2974)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 3u)).x));
                            _2999 = fma(_1478, _2987.z, fma(_1477, _2987.y, _2987.x * _1476)) + _2987.w;
                            _3000 = !((fma(_1478, _2968.z, fma(_1477, _2968.y, _2968.x * _1476)) + _2968.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3000)
                            {
                                float _3027 = _2892.x - _1476;
                                float _3028 = _2892.y - _1477;
                                float _3029 = _2892.z - _1478;
                                float _3030 = dot(vec3(_3027, _3028, _3029), vec3(_3027, _3028, _3029));
                                float _3033 = inversesqrt(_3030);
                                float _3034 = _3033 * _3027;
                                float _3035 = _3033 * _3028;
                                float _3036 = _3033 * _3029;
                                float _3040 = 1.0 - (_3030 / (_2893 * _2893));
                                float _4033 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                                float _3041 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
                                float _3045 = sqrt(_3030) * _2908.w;
                                float _3047 = 1.39999997615814208984375 / (_3045 + 1.39999997615814208984375);
                                float _3048 = _3047 * _3047;
                                float _3049 = 1.0 - _3048;
                                float _3051 = (_3049 * dot(vec3(_3034, _3035, _3036), vec3(_352, _355, _358))) + _3048;
                                float _3054 = _3045 * _3045;
                                float _3058 = (fma(_1478, _2936.z, fma(_1477, _2936.y, _2936.x * _1476)) + _2936.w) / _2999;
                                float _3059 = (fma(_1478, _2952.z, fma(_1477, _2952.y, _2952.x * _1476)) + _2952.w) / _2999;
                                float _3063 = 1.0 - dot(vec2(_3058, _3059), vec2(_3058, _3059));
                                float _4049 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                                float _3064 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
                                float _3065 = _3064 * (((isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0))) * _3041) / ((_3054 * 0.699999988079071044921875) + 1.0));
                                float _3075 = dot(vec3(_352, _355, _358), vec3((-0.0) - (_1476 * _2556), (-0.0) - (_1477 * _2556), (-0.0) - (_1478 * _2556)));
                                float _4060 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                                float _3083 = (_3049 * dot(vec3(_352, _355, _358), vec3(_3034, _3035, _3036))) + _3048;
                                float _4071 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                                float _3084 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
                                float _3088 = (0.5 / (((isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) + 9.9999999392252902907785028219223e-09) + _3084)) * _3084;
                                float _4082 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                                float _3095 = (_3064 * _3041) * (((isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * 3.1415927410125732421875) / ((_3054 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_90_pred = _3065 * _2908.y;
                                frontier_phi_90_pred_1 = _3065 * _2908.x;
                                frontier_phi_90_pred_2 = _3095 * _2920.z;
                                frontier_phi_90_pred_3 = _3095 * _2920.y;
                                frontier_phi_90_pred_4 = _3095 * _2920.x;
                                frontier_phi_90_pred_5 = _3065 * _2908.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3103 = frontier_phi_90_pred;
                            _3102 = frontier_phi_90_pred_1;
                            _3101 = frontier_phi_90_pred_2;
                            _3100 = frontier_phi_90_pred_3;
                            _3099 = frontier_phi_90_pred_4;
                            _3104 = frontier_phi_90_pred_5;
                            _2850 = _3102 + _2863;
                            _2851 = _3103 + _2864;
                            _2852 = _3104 + _2865;
                            _2847 = _3099 + _2860;
                            _2848 = _3100 + _2861;
                            _2849 = _3101 + _2862;
                            if (_2867 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2860 = _2847;
                                _2861 = _2848;
                                _2862 = _2849;
                                _2863 = _2850;
                                _2864 = _2851;
                                _2865 = _2852;
                                _2866 = _2867;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _2851;
                        frontier_phi_84_pred_1 = _2850;
                        frontier_phi_84_pred_2 = _2849;
                        frontier_phi_84_pred_3 = _2848;
                        frontier_phi_84_pred_4 = _2847;
                        frontier_phi_84_pred_5 = _2852;
                    }
                    _2540 = frontier_phi_84_pred;
                    _2538 = frontier_phi_84_pred_1;
                    _2536 = frontier_phi_84_pred_2;
                    _2534 = frontier_phi_84_pred_3;
                    _2532 = frontier_phi_84_pred_4;
                    _2542 = frontier_phi_84_pred_5;
                    uint _2695 = _2694 + 1u;
                    if (_2695 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2688 = _2532;
                        _2689 = _2534;
                        _2690 = _2536;
                        _2691 = _2538;
                        _2692 = _2540;
                        _2693 = _2542;
                        _2694 = _2695;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2542;
                frontier_phi_65_66_ladder_1 = _2538;
                frontier_phi_65_66_ladder_2 = _2540;
                frontier_phi_65_66_ladder_3 = _2534;
                frontier_phi_65_66_ladder_4 = _2532;
                frontier_phi_65_66_ladder_5 = _2536;
            }
            else
            {
                frontier_phi_65_66_ladder = _2410;
                frontier_phi_65_66_ladder_1 = _2406;
                frontier_phi_65_66_ladder_2 = _2408;
                frontier_phi_65_66_ladder_3 = _2402;
                frontier_phi_65_66_ladder_4 = _2400;
                frontier_phi_65_66_ladder_5 = _2404;
            }
            _2531 = frontier_phi_65_66_ladder_4;
            _2533 = frontier_phi_65_66_ladder_3;
            _2535 = frontier_phi_65_66_ladder_5;
            _2537 = frontier_phi_65_66_ladder_1;
            _2539 = frontier_phi_65_66_ladder_2;
            _2541 = frontier_phi_65_66_ladder;
        }
        float _2546 = isnan(1.0) ? _397 : (isnan(_397) ? 1.0 : min(_397, 1.0));
        _2304 = (_2546 * _2537) + _1944;
        _2306 = (_2546 * _2539) + _1946;
        _2308 = (_2546 * _2541) + _1948;
        _2310 = ((_2531 * 0.039999999105930328369140625) * _2546) + _2186;
        _2312 = ((_2533 * 0.039999999105930328369140625) * _2546) + _2188;
        _2314 = ((_2535 * 0.039999999105930328369140625) * _2546) + _2190;
    }
    else
    {
        _2304 = _1944;
        _2306 = _1946;
        _2308 = _1948;
        _2310 = _2186;
        _2312 = _2188;
        _2314 = _2190;
    }
    uint _2320 = _373 + uint(cbMatDynParam._m0[0u].w);
    float _2326 = (_217.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2320].x;
    float _2327 = (_217.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2320].y;
    float _2328 = (_217.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2320].z;
    float _4098 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _4109 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _4120 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _2345 = (((isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_2304 + ((isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0))) * _397))) + ((_2310 + ((isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))) * _1208)) * cbPerFrame._m0[3u].x)) + _2326;
    float _2347 = (_2327 + ((_2312 + ((isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))) * _1208)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_2306 + ((isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0))) * _397)));
    float _2349 = (_2328 + ((_2314 + ((isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))) * _1208)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_2308 + ((isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0))) * _397)));
    float _2350 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2351 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2352 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2358 = cbMtdParam._m0[2u].x * _2326;
    float _2359 = cbMtdParam._m0[2u].y * _2327;
    float _2360 = cbMtdParam._m0[2u].z * _2328;
    float _4146 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2362 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    uint _2363 = _371 + 6u;
    float _2371 = _331 / cbSceneParam._m0[86u].x;
    float _2372 = _332 / cbSceneParam._m0[86u].y;
    vec4 _2386 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2371, _2372, (log2((isnan(cbSceneParam._m0[77u].w) ? _251 : (isnan(_251) ? cbSceneParam._m0[77u].w : min(_251, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2388 = _2386.x;
    float _2389 = _2386.y;
    float _2390 = _2386.z;
    float _2391 = _2386.w;
    float _2462;
    float _2464;
    float _2466;
    float _2468;
    if (_251 > cbSceneParam._m0[78u].w)
    {
        float _2425 = isnan(_251) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _251 : min(cbSceneParam._m0[80u].w, _251));
        float _2426 = _2425 / _251;
        float _2437 = _2426 * _303;
        float _2438 = _304 * _2426;
        float _2439 = (-0.0) - _2438;
        float _2440 = _2426 * _305;
        float _2442 = (cbSceneParam._m0[77u].w * _2439) / _2425;
        float _2443 = _2442 + cbSceneParam._m0[79u].w;
        float _2444 = cbSceneParam._m0[79u].w - _2438;
        float _2450 = sqrt(((_2437 * _2437) + (_2438 * _2438)) + (_2440 * _2440));
        float _2453 = (1.0 - (cbSceneParam._m0[77u].w / _2425)) * _2450;
        float _2458 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2460 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2645;
        if (abs((_2439 - _2442) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2645 = ((((_2443 > 0.0) ? exp2(_2458 * _2443) : (2.0 - exp2(_2460 * _2443))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2453;
        }
        else
        {
            float _2589 = 1.0 / cbSceneParam._m0[80u].x;
            float _2590 = isnan(_2444) ? _2443 : (isnan(_2443) ? _2444 : max(_2443, _2444));
            float _2591 = isnan(_2444) ? _2443 : (isnan(_2443) ? _2444 : min(_2443, _2444));
            float _2600 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : min(_2590, 0.0));
            float _2601 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : min(_2591, 0.0));
            _2645 = ((abs(_2450 / _2439) * cbSceneParam._m0[80u].y) * ((((_2600 - _2601) * 2.0) - ((exp2(_2458 * (isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0)))) - exp2(_2458 * (isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0))))) * _2589)) - ((exp2(_2460 * _2600) - exp2(_2460 * _2601)) * _2589))) + (_2453 * cbSceneParam._m0[80u].z);
        }
        vec4 _2647 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2371, _2372, 1.0), 0.0);
        float _2656 = exp2((_2645 * (-1.44269502162933349609375)) * (1.0 - _2647.w));
        float _2657 = log2(_2656);
        float _2673 = log2(_2391);
        _2462 = (exp2(_2673 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2657 * cbSceneParam._m0[78u].x)) * _2647.x) / cbSceneParam._m0[78u].x)) + _2388;
        _2464 = (exp2(_2673 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2657 * cbSceneParam._m0[78u].y)) * _2647.y) / cbSceneParam._m0[78u].y)) + _2389;
        _2466 = (exp2(_2673 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2657 * cbSceneParam._m0[78u].z)) * _2647.z) / cbSceneParam._m0[78u].z)) + _2390;
        _2468 = _2656 * _2391;
    }
    else
    {
        _2462 = _2388;
        _2464 = _2389;
        _2466 = _2390;
        _2468 = _2391;
    }
    bool _2683;
    vec4 _2478;
    vec4 _2501;
    float _2503;
    float _2507;
    float _2508;
    float _2509;
    float _2512;
    float _2515;
    float _2518;
    float _2519;
    bool _2530;
    for (;;)
    {
        _2478 = cbMatDynParam._m0[0u];
        float _2480 = roundEven(_2478.y);
        bool _2481 = _2480 == 3.0;
        float _2483 = log2(_2468);
        float _2487 = exp2(_2483 * cbSceneParam._m0[78u].x);
        float _2488 = exp2(_2483 * cbSceneParam._m0[78u].y);
        float _2489 = exp2(_2483 * cbSceneParam._m0[78u].z);
        float _2490 = _2487 * _2350;
        float _2491 = _2488 * _2351;
        float _2492 = _2489 * _2352;
        float _2499 = _319 + (-0.5);
        _2501 = cbMtdParam._m0[1u];
        _2503 = _2501.y * _2499;
        float _2506 = (_2480 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2507 = _2506 * (_2481 ? _2490 : (_2490 + (cbSceneParam._m0[72u].w * _2462)));
        _2508 = _2506 * (_2481 ? _2491 : (_2491 + (cbSceneParam._m0[72u].w * _2464)));
        _2509 = _2506 * (_2481 ? _2492 : (_2492 + (cbSceneParam._m0[72u].w * _2466)));
        _2512 = ((_2358 * _2362) * _2487) * _2506;
        _2515 = ((_2359 * _2362) * _2488) * _2506;
        _2518 = ((_2360 * _2362) * _2489) * _2506;
        _2519 = _2499 * 0.999000012874603271484375;
        _2530 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2530)
        {
            if ((cbInstanceData._m0[_371 + 7u].x + _2519) < 0.5)
            {
                _2683 = true;
                break;
            }
        }
        uint _2624 = _373 + uint(_2478.w);
        if ((cbInstanceData._m0[_2624].w < 1.0) && ((cbInstanceData._m0[_2624].w + _2519) < 0.5))
        {
            _2683 = true;
            break;
        }
        if ((_2503 + _201) < _2501.x)
        {
            _2683 = true;
            break;
        }
        _2683 = false;
        break;
    }
    float _2838;
    if (_2683)
    {
        discard_state = true;
        _2838 = 0.0;
    }
    else
    {
        _2838 = cbInstanceData._m0[_2363].w;
    }
    SV_Target.x = _2507;
    SV_Target.y = _2508;
    SV_Target.z = _2509;
    SV_Target.w = _2838;
    SV_Target_1.x = _2512;
    SV_Target_1.y = _2515;
    SV_Target_1.z = _2518;
    SV_Target_1.w = cbInstanceData._m0[_2363].w;
    discard_exit();
}


