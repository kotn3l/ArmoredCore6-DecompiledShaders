#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_Edge_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_Edge_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _768;
float _2995;
float _2996;
float _2997;
float _2998;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _169 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _170 = _169 * NORMAL.x;
    float _171 = _169 * NORMAL.y;
    float _172 = _169 * NORMAL.z;
    float _177;
    float _178;
    float _179;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _177 = (-0.0) - _170;
        _178 = (-0.0) - _171;
        _179 = (-0.0) - _172;
    }
    else
    {
        _177 = _170;
        _178 = _171;
        _179 = _172;
    }
    vec4 _193 = texture(sampler2D(M_A_Edge_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _196 = _193.x;
    float _197 = _193.y;
    float _198 = _193.z;
    float _199 = _193.w;
    vec4 _215 = texture(sampler2D(M_A_Edge_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _226 = inversesqrt(dot(vec3(_177, _178, _179), vec3(_177, _178, _179)));
    float _227 = _226 * _177;
    float _228 = _226 * _178;
    float _229 = _226 * _179;
    float _3007 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _3018 = isnan(0.0) ? _197 : (isnan(_197) ? 0.0 : max(_197, 0.0));
    float _3029 = isnan(0.0) ? _198 : (isnan(_198) ? 0.0 : max(_198, 0.0));
    float _249 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _291 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _301 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _291);
    float _302 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _291);
    float _303 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _291);
    float _307 = inversesqrt(dot(vec3(_301, _302, _303), vec3(_301, _302, _303)));
    float _308 = _301 * _307;
    float _309 = _302 * _307;
    float _310 = _303 * _307;
    vec4 _315 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _317 = _315.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _447 = sqrt(((_301 * _301) + (_302 * _302)) + (_303 * _303));
        float _453 = (cbMatDynParam._m0[5u].x * _447) + cbMatDynParam._m0[5u].y;
        float _3040 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
        float _454 = isnan(1.0) ? _3040 : (isnan(_3040) ? 1.0 : min(_3040, 1.0));
        float _458 = (cbMatDynParam._m0[5u].z * _447) + cbMatDynParam._m0[5u].w;
        float _3051 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3051 : (isnan(_3051) ? 1.0 : min(_3051, 1.0))) - _454)) + _454) < ((_317 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _329 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _330 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _350 = fma(_229, cbSceneParam._m0[5u].z, fma(_228, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _227));
    float _353 = fma(_229, cbSceneParam._m0[6u].z, fma(_228, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _227));
    float _356 = fma(_229, cbSceneParam._m0[7u].z, fma(_228, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _227));
    uint _369 = uint(roundEven(NORMAL.w)) * 13u;
    uint _371 = _369 + 9u;
    uint _372 = _371 + uint(cbMatDynParam._m0[0u].w);
    float _378 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3007 : (isnan(_3007) ? 1.0 : min(_3007, 1.0)))) * cbInstanceData._m0[_372].x;
    float _379 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3018 : (isnan(_3018) ? 1.0 : min(_3018, 1.0)))) * cbInstanceData._m0[_372].y;
    float _380 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3029 : (isnan(_3029) ? 1.0 : min(_3029, 1.0)))) * cbInstanceData._m0[_372].z;
    float _3062 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _381 = isnan(1.0) ? _3062 : (isnan(_3062) ? 1.0 : min(_3062, 1.0));
    float _3073 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _382 = isnan(1.0) ? _3073 : (isnan(_3073) ? 1.0 : min(_3073, 1.0));
    float _3084 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _383 = isnan(1.0) ? _3084 : (isnan(_3084) ? 1.0 : min(_3084, 1.0));
    vec4 _392 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _329, cbSceneParam._m0[86u].y * _330));
    float _395 = _392.x * TEXCOORD.z;
    float _396 = dot(vec3(_227, _228, _229), vec3(_308, _309, _310));
    float _399 = _396 * 2.0;
    float _404 = (_399 * _227) - _308;
    float _405 = (_399 * _228) - _309;
    float _406 = (_399 * _229) - _310;
    float _428 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _432 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _436 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _767;
    float _769;
    float _770;
    float _771;
    float _772;
    float _773;
    float _774;
    float _775;
    float _776;
    float _777;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _492 = fma(_436, cbModelParam._m0[26u].z, fma(_432, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _428));
        float _496 = fma(_436, cbModelParam._m0[27u].z, fma(_432, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _428));
        float _500 = fma(_436, cbModelParam._m0[28u].z, fma(_432, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _428));
        float _525 = _428 + _227;
        float _526 = _432 + _228;
        float _527 = _436 + _229;
        float _537 = fma(_527, cbModelParam._m0[26u].z, fma(_526, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _525)) - _492;
        float _538 = fma(_527, cbModelParam._m0[27u].z, fma(_526, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _525)) - _496;
        float _539 = fma(_527, cbModelParam._m0[28u].z, fma(_526, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _525)) - _500;
        float _543 = inversesqrt(dot(vec3(_537, _538, _539), vec3(_537, _538, _539)));
        float _556 = ((_543 * _537) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_492 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _557 = ((_543 * _538) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_496 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _558 = ((_543 * _539) / cbModelParam._m0[34u].z) + ((((((_500 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _561 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_556, _557, _558), 0.0);
        vec4 _568 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_556, _557, _558), 0.0);
        vec4 _575 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_556, _557, _558), 0.0);
        vec4 _582 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_556, _557, _558), 0.0);
        float _595 = exp2((_561.w + (-0.5)) * 20.0) * 2.0;
        float _596 = _595 * (_561.x + (-0.5));
        float _597 = _595 * (_561.y + (-0.5));
        float _598 = _595 * (_561.z + (-0.5));
        float _605 = exp2((_568.w + (-0.5)) * 20.0) * 2.0;
        float _606 = _605 * (_568.x + (-0.5));
        float _607 = _605 * (_568.y + (-0.5));
        float _608 = _605 * (_568.z + (-0.5));
        float _615 = exp2((_575.w + (-0.5)) * 20.0) * 2.0;
        float _616 = _615 * (_575.x + (-0.5));
        float _617 = _615 * (_575.y + (-0.5));
        float _618 = _615 * (_575.z + (-0.5));
        float _625 = exp2((_582.w + (-0.5)) * 20.0) * 2.0;
        float _626 = _625 * (_582.x + (-0.5));
        float _627 = _625 * (_582.y + (-0.5));
        float _628 = _625 * (_582.z + (-0.5));
        float _629 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
        float _630 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
        float _631 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
        float _632 = _596 * 0.5;
        float _633 = _606 * 0.5;
        float _634 = _616 * 0.5;
        float _635 = dot(vec3(_632, _633, _634), vec3(_632, _633, _634));
        float _640 = (_635 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_635);
        float _649 = (dot(vec3(_227, _228, _229), vec3(_640 * _632, _640 * _633, _640 * _634)) + 1.0) * 0.5;
        float _3110 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
        float _659 = sqrt(((_633 * _633) + (_632 * _632)) + (_634 * _634)) / (_629 + 9.9999997473787516355514526367188e-06);
        float _3121 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        float _660 = isnan(1.0) ? _3121 : (isnan(_3121) ? 1.0 : min(_3121, 1.0));
        float _661 = _660 * 2.0;
        float _665 = (1.0 - _660) / (_660 + 1.0);
        float _3132 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
        float _666 = isnan(1.0) ? _3132 : (isnan(_3132) ? 1.0 : min(_3132, 1.0));
        float _675 = ((((1.0 - _666) * (_661 + 2.0)) * exp2(log2(isnan(1.0) ? _3110 : (isnan(_3110) ? 1.0 : min(_3110, 1.0))) * (_661 + 1.0))) + _666) * _629;
        float _676 = _597 * 0.5;
        float _677 = _607 * 0.5;
        float _678 = _617 * 0.5;
        float _679 = dot(vec3(_676, _677, _678), vec3(_676, _677, _678));
        float _684 = (_679 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_679);
        float _692 = (dot(vec3(_227, _228, _229), vec3(_684 * _676, _684 * _677, _684 * _678)) + 1.0) * 0.5;
        float _3143 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _701 = sqrt(((_677 * _677) + (_676 * _676)) + (_678 * _678)) / (_630 + 9.9999997473787516355514526367188e-06);
        float _3154 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _702 = isnan(1.0) ? _3154 : (isnan(_3154) ? 1.0 : min(_3154, 1.0));
        float _703 = _702 * 2.0;
        float _707 = (1.0 - _702) / (_702 + 1.0);
        float _3165 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _708 = isnan(1.0) ? _3165 : (isnan(_3165) ? 1.0 : min(_3165, 1.0));
        float _717 = ((((1.0 - _708) * (_703 + 2.0)) * exp2(log2(isnan(1.0) ? _3143 : (isnan(_3143) ? 1.0 : min(_3143, 1.0))) * (_703 + 1.0))) + _708) * _630;
        float _718 = _598 * 0.5;
        float _719 = _608 * 0.5;
        float _720 = _618 * 0.5;
        float _721 = dot(vec3(_718, _719, _720), vec3(_718, _719, _720));
        float _726 = (_721 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_721);
        float _734 = (dot(vec3(_227, _228, _229), vec3(_726 * _718, _726 * _719, _726 * _720)) + 1.0) * 0.5;
        float _3176 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _743 = sqrt(((_719 * _719) + (_718 * _718)) + (_720 * _720)) / (_631 + 9.9999997473787516355514526367188e-06);
        float _3187 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _744 = isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0));
        float _745 = _744 * 2.0;
        float _749 = (1.0 - _744) / (_744 + 1.0);
        float _3198 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _750 = isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0));
        float _759 = ((((1.0 - _750) * (_745 + 2.0)) * exp2(log2(isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0))) * (_745 + 1.0))) + _750) * _631;
        _767 = _598;
        _769 = _597;
        _770 = _596;
        _771 = _608;
        _772 = _607;
        _773 = _606;
        _774 = _618;
        _775 = _617;
        _776 = _616;
        _777 = _631;
        _778 = _630;
        _779 = _629;
        _780 = cbModelParam._m0[36u].z * (isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0)));
        _781 = cbModelParam._m0[36u].z * (isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0)));
        _782 = cbModelParam._m0[36u].z * (isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0)));
    }
    else
    {
        _767 = _768;
        _769 = _768;
        _770 = _768;
        _771 = _768;
        _772 = _768;
        _773 = _768;
        _774 = _768;
        _775 = _768;
        _776 = _768;
        _777 = _768;
        _778 = _768;
        _779 = _768;
        _780 = 0.0;
        _781 = 0.0;
        _782 = 0.0;
    }
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _811 = fma(_436, cbModelParam._m0[30u].z, fma(_432, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _428));
        float _815 = fma(_436, cbModelParam._m0[31u].z, fma(_432, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _428));
        float _819 = fma(_436, cbModelParam._m0[32u].z, fma(_432, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _428));
        float _842 = _428 + _227;
        float _843 = _432 + _228;
        float _844 = _436 + _229;
        float _854 = fma(_844, cbModelParam._m0[30u].z, fma(_843, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _842)) - _811;
        float _855 = fma(_844, cbModelParam._m0[31u].z, fma(_843, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _842)) - _815;
        float _856 = fma(_844, cbModelParam._m0[32u].z, fma(_843, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _842)) - _819;
        float _860 = inversesqrt(dot(vec3(_854, _855, _856), vec3(_854, _855, _856)));
        float _873 = ((_860 * _854) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_811 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _874 = ((_860 * _855) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_815 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _875 = ((_860 * _856) / cbModelParam._m0[35u].z) + ((((((_819 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _877 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        vec4 _884 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        vec4 _891 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        float _910 = exp2((_877.w + (-0.5)) * 20.0) * 2.0;
        float _911 = _910 * (_877.x + (-0.5));
        float _912 = _910 * (_877.y + (-0.5));
        float _913 = _910 * (_877.z + (-0.5));
        float _920 = exp2((_884.w + (-0.5)) * 20.0) * 2.0;
        float _921 = _920 * (_884.x + (-0.5));
        float _922 = _920 * (_884.y + (-0.5));
        float _923 = _920 * (_884.z + (-0.5));
        float _930 = exp2((_891.w + (-0.5)) * 20.0) * 2.0;
        float _931 = _930 * (_891.x + (-0.5));
        float _932 = _930 * (_891.y + (-0.5));
        float _933 = _930 * (_891.z + (-0.5));
        float _940 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _941 = _940 * (_898.x + (-0.5));
        float _942 = _940 * (_898.y + (-0.5));
        float _943 = _940 * (_898.z + (-0.5));
        float _944 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _945 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _946 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _947 = _911 * 0.5;
        float _948 = _921 * 0.5;
        float _949 = _931 * 0.5;
        float _950 = dot(vec3(_947, _948, _949), vec3(_947, _948, _949));
        float _955 = (_950 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_950);
        float _963 = (dot(vec3(_227, _228, _229), vec3(_955 * _947, _955 * _948, _955 * _949)) + 1.0) * 0.5;
        float _3239 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _972 = sqrt(((_948 * _948) + (_947 * _947)) + (_949 * _949)) / (_944 + 9.9999997473787516355514526367188e-06);
        float _3250 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0));
        float _974 = _973 * 2.0;
        float _978 = (1.0 - _973) / (_973 + 1.0);
        float _3261 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0));
        float _988 = ((((1.0 - _979) * (_974 + 2.0)) * exp2(log2(isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0))) * (_974 + 1.0))) + _979) * _944;
        float _989 = _912 * 0.5;
        float _990 = _922 * 0.5;
        float _991 = _932 * 0.5;
        float _992 = dot(vec3(_989, _990, _991), vec3(_989, _990, _991));
        float _997 = (_992 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_992);
        float _1005 = (dot(vec3(_227, _228, _229), vec3(_997 * _989, _997 * _990, _997 * _991)) + 1.0) * 0.5;
        float _3272 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1014 = sqrt(((_990 * _990) + (_989 * _989)) + (_991 * _991)) / (_945 + 9.9999997473787516355514526367188e-06);
        float _3283 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
        float _1016 = _1015 * 2.0;
        float _1020 = (1.0 - _1015) / (_1015 + 1.0);
        float _3294 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0));
        float _1030 = ((((1.0 - _1021) * (_1016 + 2.0)) * exp2(log2(isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0))) * (_1016 + 1.0))) + _1021) * _945;
        float _1031 = _913 * 0.5;
        float _1032 = _923 * 0.5;
        float _1033 = _933 * 0.5;
        float _1034 = dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033));
        float _1039 = (_1034 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1034);
        float _1047 = (dot(vec3(_227, _228, _229), vec3(_1039 * _1031, _1039 * _1032, _1039 * _1033)) + 1.0) * 0.5;
        float _3305 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1056 = sqrt(((_1032 * _1032) + (_1031 * _1031)) + (_1033 * _1033)) / (_946 + 9.9999997473787516355514526367188e-06);
        float _3316 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
        float _1058 = _1057 * 2.0;
        float _1062 = (1.0 - _1057) / (_1057 + 1.0);
        float _3327 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
        float _1072 = ((((1.0 - _1063) * (_1058 + 2.0)) * exp2(log2(isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0))) * (_1058 + 1.0))) + _1063) * _946;
        _1080 = _913;
        _1081 = _912;
        _1082 = _911;
        _1083 = _923;
        _1084 = _922;
        _1085 = _921;
        _1086 = _933;
        _1087 = _932;
        _1088 = _931;
        _1089 = _946;
        _1090 = _945;
        _1091 = _944;
        _1092 = cbModelParam._m0[36u].w * (isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0)));
        _1093 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0)));
        _1094 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0)));
    }
    else
    {
        _1080 = _768;
        _1081 = _768;
        _1082 = _768;
        _1083 = _768;
        _1084 = _768;
        _1085 = _768;
        _1086 = _768;
        _1087 = _768;
        _1088 = _768;
        _1089 = _768;
        _1090 = _768;
        _1091 = _768;
        _1092 = 0.0;
        _1093 = 0.0;
        _1094 = 0.0;
    }
    float _1104 = (cbModelParam._m0[1u].x * (_1092 - _780)) + _780;
    float _1105 = (cbModelParam._m0[1u].x * (_1093 - _781)) + _781;
    float _1106 = (cbModelParam._m0[1u].x * (_1094 - _782)) + _782;
    float _1127 = fma(_1106, cbSceneParam._m0[89u].z, fma(_1105, cbSceneParam._m0[89u].y, _1104 * cbSceneParam._m0[89u].x));
    float _1130 = fma(_1106, cbSceneParam._m0[90u].z, fma(_1105, cbSceneParam._m0[90u].y, _1104 * cbSceneParam._m0[90u].x));
    float _1133 = fma(_1106, cbSceneParam._m0[91u].z, fma(_1105, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1104));
    float _1148 = _404 * 0.5;
    float _1149 = _405 * 0.5;
    float _1150 = _406 * 0.5;
    float _1151 = dot(vec4(_1148, _1149, _1150, 1.0), vec4(_1082, _1085, _1088, _1091));
    float _1154 = dot(vec4(_1148, _1149, _1150, 1.0), vec4(_1081, _1084, _1087, _1090));
    float _1157 = dot(vec4(_1148, _1149, _1150, 1.0), vec4(_1080, _1083, _1086, _1089));
    float _1191;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1164 = dot(vec4(_1148, _1149, _1150, 1.0), vec4(_767, _771, _774, _777));
        float _1168 = dot(vec4(_1148, _1149, _1150, 1.0), vec4(_769, _772, _775, _778));
        float _1172 = dot(vec4(_1148, _1149, _1150, 1.0), vec4(_770, _773, _776, _779));
        float _1179 = dot(vec4(cbModelParam._m0[39u]), vec4(_1148, _1149, _1150, 1.0));
        _1191 = dot(vec3(isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)), isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)), isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1179) ? 0.0 : (isnan(0.0) ? _1179 : max(0.0, _1179))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1191 = 1.0;
    }
    float _1202;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1193 = dot(vec4(cbModelParam._m0[40u]), vec4(_1148, _1149, _1150, 1.0));
        _1202 = dot(vec3(isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)), isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)), isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1193) ? 0.0 : (isnan(0.0) ? _1193 : max(0.0, _1193))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1202 = 1.0;
    }
    float _1206 = (_1202 * cbModelParam._m0[1u].x) + (_1191 * (1.0 - cbModelParam._m0[1u].x));
    float _1215 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1297;
    float _1299;
    float _1301;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1264 = fma(_436, cbModelParam._m0[13u].z, fma(_432, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _428)) + cbModelParam._m0[13u].w;
        float _1268 = fma(_436, cbModelParam._m0[14u].z, fma(_432, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _428)) + cbModelParam._m0[14u].w;
        float _1272 = fma(_436, cbModelParam._m0[15u].z, fma(_432, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _428)) + cbModelParam._m0[15u].w;
        float _1275 = fma(_406, cbModelParam._m0[13u].z, fma(_405, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _404));
        float _1278 = fma(_406, cbModelParam._m0[14u].z, fma(_405, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _404));
        float _1281 = fma(_406, cbModelParam._m0[15u].z, fma(_405, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _404));
        float _1307;
        if (_1275 > 0.0)
        {
            _1307 = abs((1.0 - _1264) / _1275);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1275 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1264 + 1.0) / _1275);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1307 = frontier_phi_19_17_ladder;
        }
        float _1536;
        if (_1278 > 0.0)
        {
            _1536 = abs((1.0 - _1268) / _1278);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1278 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1268 + 1.0) / _1278);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1536 = frontier_phi_28_24_ladder;
        }
        float _1728;
        if (_1281 > 0.0)
        {
            _1728 = abs((1.0 - _1272) / _1281);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1281 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1272 + 1.0) / _1281);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1728 = frontier_phi_40_35_ladder;
        }
        float _1730 = isnan(_1536) ? _1307 : (isnan(_1307) ? _1536 : min(_1307, _1536));
        float _1731 = isnan(_1728) ? _1730 : (isnan(_1730) ? _1728 : min(_1730, _1728));
        float _1735 = (_1731 * _1275) + _1264;
        float _1736 = (_1731 * _1278) + _1268;
        float _1737 = (_1731 * _1281) + _1272;
        float _1738 = _1731 * 9.9999997473787516355514526367188e-05;
        float _1740 = (-1.0) - _1738;
        float _1742 = _1738 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1737 > _1742) || ((_1737 < _1740) || ((_1736 > _1742) || ((_1736 < _1740) || ((_1735 < _1740) || (_1735 > _1742))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1834 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1737, cbModelParam._m0[9u].z, fma(_1736, cbModelParam._m0[9u].y, _1735 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1737, cbModelParam._m0[10u].z, fma(_1736, cbModelParam._m0[10u].y, _1735 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1737, cbModelParam._m0[11u].z, fma(_1736, cbModelParam._m0[11u].y, _1735 * cbModelParam._m0[11u].x))), _1215);
            frontier_phi_18_40_ladder = _1834.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1834.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1834.x * cbModelParam._m0[1u].y;
        }
        _1297 = frontier_phi_18_40_ladder_2;
        _1299 = frontier_phi_18_40_ladder_1;
        _1301 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1285 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_404, _405, _406), _1215);
        _1297 = _1285.x * cbModelParam._m0[1u].y;
        _1299 = _1285.y * cbModelParam._m0[1u].y;
        _1301 = _1285.z * cbModelParam._m0[1u].y;
    }
    float _1304 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1397;
    float _1399;
    float _1401;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1361 = fma(_436, cbModelParam._m0[21u].z, fma(_432, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _428)) + cbModelParam._m0[21u].w;
        float _1365 = fma(_436, cbModelParam._m0[22u].z, fma(_432, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _428)) + cbModelParam._m0[22u].w;
        float _1369 = fma(_436, cbModelParam._m0[23u].z, fma(_432, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _428)) + cbModelParam._m0[23u].w;
        float _1372 = fma(_406, cbModelParam._m0[21u].z, fma(_405, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _404));
        float _1375 = fma(_406, cbModelParam._m0[22u].z, fma(_405, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _404));
        float _1378 = fma(_406, cbModelParam._m0[23u].z, fma(_405, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _404));
        float _1541;
        if (_1372 > 0.0)
        {
            _1541 = abs((1.0 - _1361) / _1372);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1372 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1361 + 1.0) / _1372);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1541 = frontier_phi_30_26_ladder;
        }
        float _1755;
        if (_1375 > 0.0)
        {
            _1755 = abs((1.0 - _1365) / _1375);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1375 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1365 + 1.0) / _1375);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1755 = frontier_phi_42_37_ladder;
        }
        float _1906;
        if (_1378 > 0.0)
        {
            _1906 = abs((1.0 - _1369) / _1378);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1378 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1369 + 1.0) / _1378);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _1906 = frontier_phi_51_48_ladder;
        }
        float _1908 = isnan(_1755) ? _1541 : (isnan(_1541) ? _1755 : min(_1541, _1755));
        float _1909 = isnan(_1906) ? _1908 : (isnan(_1908) ? _1906 : min(_1908, _1906));
        float _1913 = (_1909 * _1372) + _1361;
        float _1914 = (_1909 * _1375) + _1365;
        float _1915 = (_1909 * _1378) + _1369;
        float _1916 = _1909 * 9.9999997473787516355514526367188e-05;
        float _1917 = (-1.0) - _1916;
        float _1919 = _1916 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_1915 > _1919) || ((_1915 < _1917) || ((_1914 > _1919) || ((_1914 < _1917) || ((_1913 < _1917) || (_1913 > _1919))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2142 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1915, cbModelParam._m0[17u].z, fma(_1914, cbModelParam._m0[17u].y, _1913 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1915, cbModelParam._m0[18u].z, fma(_1914, cbModelParam._m0[18u].y, _1913 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1915, cbModelParam._m0[19u].z, fma(_1914, cbModelParam._m0[19u].y, _1913 * cbModelParam._m0[19u].x))), _1304);
            frontier_phi_27_51_ladder = _2142.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2142.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2142.x * cbModelParam._m0[1u].z;
        }
        _1397 = frontier_phi_27_51_ladder_2;
        _1399 = frontier_phi_27_51_ladder_1;
        _1401 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1381 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_404, _405, _406), _1304);
        _1397 = _1381.x * cbModelParam._m0[1u].z;
        _1399 = _1381.y * cbModelParam._m0[1u].z;
        _1401 = _1381.z * cbModelParam._m0[1u].z;
    }
    float _1413 = _395 * 0.01200000010430812835693359375;
    float _1415 = _1413 * ((cbModelParam._m0[1u].w * (_1397 - _1297)) + _1297);
    float _1416 = _1413 * ((cbModelParam._m0[1u].w * (_1399 - _1299)) + _1299);
    float _1417 = _1413 * ((cbModelParam._m0[1u].w * (_1401 - _1301)) + _1301);
    float _1420 = fma(_1417, cbSceneParam._m0[89u].z, fma(_1416, cbSceneParam._m0[89u].y, _1415 * cbSceneParam._m0[89u].x));
    float _1423 = fma(_1417, cbSceneParam._m0[90u].z, fma(_1416, cbSceneParam._m0[90u].y, _1415 * cbSceneParam._m0[90u].x));
    float _1426 = fma(_1417, cbSceneParam._m0[91u].z, fma(_1416, cbSceneParam._m0[91u].y, _1415 * cbSceneParam._m0[91u].x));
    vec4 _1434 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_329, _330));
    float _1436 = _1434.w;
    float _1448 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1436);
    float _1449 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1436);
    float _1450 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1436);
    uvec4 _1454 = floatBitsToUint(cbInstanceData._m0[_369 + 5u]);
    uint _1456 = _1454.x * 14u;
    uint _1457 = _1456 + 13u;
    float _1464 = _395 + (-1.0);
    float _1470 = (cbLight._m0[_1457].x * _1464) + 1.0;
    float _1471 = (cbLight._m0[_1457].y * _1464) + 1.0;
    float _1472 = (cbLight._m0[_1457].z * _1464) + 1.0;
    float _1473 = (cbLight._m0[_1457].w * _1464) + 1.0;
    uint _1474 = _1456 + 5u;
    float _1480 = isnan(1.0) ? _1471 : (isnan(_1471) ? 1.0 : min(_1471, 1.0));
    uint _1484 = _1456 + 4u;
    float _1494 = isnan(1.0) ? _1470 : (isnan(_1470) ? 1.0 : min(_1470, 1.0));
    uint _1498 = _1456 | 1u;
    float _1509 = dot(vec3(cbLight._m0[_1456].xyz), vec3(_227, _228, _229));
    float _1512 = dot(vec3(cbLight._m0[_1498].xyz), vec3(_227, _228, _229));
    float _3463 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
    float _3474 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
    float _1517 = (isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0))) * 0.3183098733425140380859375;
    float _1519 = (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) * 0.3183098733425140380859375;
    float _1526 = ((cbLight._m0[_1474].x * _1480) * _1519) + (((cbLight._m0[_1484].x * _1448) * _1494) * _1517);
    float _1527 = ((_1480 * cbLight._m0[_1474].y) * _1519) + (((cbLight._m0[_1484].y * _1449) * _1494) * _1517);
    float _1528 = ((_1480 * cbLight._m0[_1474].z) * _1519) + (((cbLight._m0[_1484].z * _1450) * _1494) * _1517);
    uvec4 _1533 = floatBitsToUint(cbLight._m0[_1456 + 12u]);
    bool _1535 = _1533.x == 0u;
    float _1546;
    float _1548;
    float _1550;
    if (_1535)
    {
        _1546 = _1526;
        _1548 = _1527;
        _1550 = _1528;
    }
    else
    {
        uint _1554 = _1456 + 6u;
        float _1570 = (dot(vec3(cbLight._m0[_1456 + 2u].xyz), vec3(_227, _228, _229)) * 0.5) + 0.5;
        float _1571 = _1570 * _1570;
        float _3485 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _1573 = isnan(1.0) ? _1472 : (isnan(_1472) ? 1.0 : min(_1472, 1.0));
        _1546 = (((cbLight._m0[_1554].x * 0.3183098733425140380859375) * _1572) * _1573) + _1526;
        _1548 = (((cbLight._m0[_1554].y * 0.3183098733425140380859375) * _1572) * _1573) + _1527;
        _1550 = (((cbLight._m0[_1554].z * 0.3183098733425140380859375) * _1572) * _1573) + _1528;
    }
    bool _1553 = _1533.y == 0u;
    float _1591;
    float _1593;
    float _1595;
    if (_1553)
    {
        _1591 = _1546;
        _1593 = _1548;
        _1595 = _1550;
    }
    else
    {
        uint _1699 = _1456 + 7u;
        float _1715 = (dot(vec3(cbLight._m0[_1456 + 3u].xyz), vec3(_227, _228, _229)) * 0.5) + 0.5;
        float _1716 = _1715 * _1715;
        float _3501 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
        float _1718 = isnan(1.0) ? _1473 : (isnan(_1473) ? 1.0 : min(_1473, 1.0));
        _1591 = (((cbLight._m0[_1699].x * 0.3183098733425140380859375) * _1717) * _1718) + _1546;
        _1593 = (((cbLight._m0[_1699].y * 0.3183098733425140380859375) * _1717) * _1718) + _1548;
        _1595 = (((cbLight._m0[_1699].z * 0.3183098733425140380859375) * _1717) * _1718) + _1550;
    }
    uint _1597 = _1456 + 8u;
    float _1603 = cbLight._m0[_1456].x + _308;
    float _1604 = cbLight._m0[_1456].y + _309;
    float _1605 = cbLight._m0[_1456].z + _310;
    float _1609 = inversesqrt(dot(vec3(_1603, _1604, _1605), vec3(_1603, _1604, _1605)));
    float _1613 = dot(vec3(_227, _228, _229), vec3(cbLight._m0[_1456].xyz));
    float _3517 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
    float _1616 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    float _3528 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _1617 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
    float _1618 = dot(vec3(cbLight._m0[_1456].xyz), vec3(_1603 * _1609, _1604 * _1609, _1605 * _1609));
    float _3539 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
    float _1629 = (exp2(log2(1.0 - (isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1635 = (0.5 / ((_1616 + 9.9999999392252902907785028219223e-09) + _1617)) * _1616;
    float _3550 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
    float _1637 = (isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0))) * 0.31831014156341552734375;
    uint _1651 = _1456 + 9u;
    float _1657 = cbLight._m0[_1498].x + _308;
    float _1658 = cbLight._m0[_1498].y + _309;
    float _1659 = cbLight._m0[_1498].z + _310;
    float _1663 = inversesqrt(dot(vec3(_1657, _1658, _1659), vec3(_1657, _1658, _1659)));
    float _1667 = dot(vec3(_227, _228, _229), vec3(cbLight._m0[_1498].xyz));
    float _3561 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
    float _1670 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    float _1671 = dot(vec3(cbLight._m0[_1498].xyz), vec3(_1657 * _1663, _1658 * _1663, _1659 * _1663));
    float _3572 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
    float _1680 = (exp2(log2(1.0 - (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1684 = (0.5 / ((_1670 + 9.9999999392252902907785028219223e-09) + _1617)) * _1670;
    float _3583 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
    float _1686 = (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) * 0.31831014156341552734375;
    float _1696 = (((_1680 * cbLight._m0[_1651].x) * _1686) * _1480) + ((((cbLight._m0[_1597].x * _1448) * _1629) * _1637) * _1494);
    float _1697 = (((_1680 * cbLight._m0[_1651].y) * _1686) * _1480) + ((((cbLight._m0[_1597].y * _1449) * _1629) * _1637) * _1494);
    float _1698 = (((_1680 * cbLight._m0[_1651].z) * _1686) * _1480) + ((((cbLight._m0[_1597].z * _1450) * _1629) * _1637) * _1494);
    float _1760;
    float _1762;
    float _1764;
    if (_1535)
    {
        _1760 = _1696;
        _1762 = _1697;
        _1764 = _1698;
    }
    else
    {
        uint _1766 = _1456 + 10u;
        uint _1772 = _1456 + 2u;
        float _1778 = cbLight._m0[_1772].x + _308;
        float _1779 = cbLight._m0[_1772].y + _309;
        float _1780 = cbLight._m0[_1772].z + _310;
        float _1784 = inversesqrt(dot(vec3(_1778, _1779, _1780), vec3(_1778, _1779, _1780)));
        float _1788 = dot(vec3(_227, _228, _229), vec3(cbLight._m0[_1772].xyz));
        float _3594 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
        float _1791 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _1792 = dot(vec3(cbLight._m0[_1772].xyz), vec3(_1778 * _1784, _1779 * _1784, _1780 * _1784));
        float _3605 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
        float _1801 = (exp2(log2(1.0 - (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1805 = (0.5 / ((_1791 + 9.9999999392252902907785028219223e-09) + _1617)) * _1791;
        float _3616 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1807 = (isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * 0.31831014156341552734375;
        float _1808 = isnan(1.0) ? _1472 : (isnan(_1472) ? 1.0 : min(_1472, 1.0));
        _1760 = (((_1801 * cbLight._m0[_1766].x) * _1807) * _1808) + _1696;
        _1762 = (((_1801 * cbLight._m0[_1766].y) * _1807) * _1808) + _1697;
        _1764 = (((_1801 * cbLight._m0[_1766].z) * _1807) * _1808) + _1698;
    }
    float _1843;
    float _1845;
    float _1847;
    if (_1553)
    {
        _1843 = _1760;
        _1845 = _1762;
        _1847 = _1764;
    }
    else
    {
        uint _1854 = _1456 + 11u;
        uint _1860 = _1456 + 3u;
        float _1866 = cbLight._m0[_1860].x + _308;
        float _1867 = cbLight._m0[_1860].y + _309;
        float _1868 = cbLight._m0[_1860].z + _310;
        float _1872 = inversesqrt(dot(vec3(_1866, _1867, _1868), vec3(_1866, _1867, _1868)));
        float _1876 = dot(vec3(_227, _228, _229), vec3(cbLight._m0[_1860].xyz));
        float _3632 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
        float _1879 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1880 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_1866 * _1872, _1867 * _1872, _1868 * _1872));
        float _3643 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
        float _1889 = (exp2(log2(1.0 - (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1893 = (0.5 / ((_1879 + 9.9999999392252902907785028219223e-09) + _1617)) * _1879;
        float _3654 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
        float _1895 = (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * 0.31831014156341552734375;
        float _1896 = isnan(1.0) ? _1473 : (isnan(_1473) ? 1.0 : min(_1473, 1.0));
        _1843 = (((_1889 * cbLight._m0[_1854].x) * _1895) * _1896) + _1760;
        _1845 = (((_1889 * cbLight._m0[_1854].y) * _1895) * _1896) + _1762;
        _1847 = (((_1889 * cbLight._m0[_1854].z) * _1895) * _1896) + _1764;
    }
    float _2030;
    float _2032;
    float _2034;
    float _2036;
    float _2038;
    float _2040;
    if (_1454.y == 0u)
    {
        float _1971 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1972 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1971;
        float _1973 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1971;
        float _1974 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1971;
        uvec4 _1986 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1987 = _1986.x;
        uint _1998 = uint((float(_1986.y) * floor(float(uint(cbSceneParam._m0[85u].y * _330) / _1987))) + floor(float(uint(cbSceneParam._m0[85u].x * _329) / _1987)));
        float _2008 = (log2(_1974 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2009 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
        uint _2012 = uint(isnan(14.0) ? _2009 : (isnan(_2009) ? 14.0 : min(_2009, 14.0)));
        uvec4 _2017 = texelFetch(g_lightClusterGridBuffer, int(((_2012 << 2u) + (_1998 << 6u)) >> 2u));
        uint _2018 = _2017.x;
        uint _2019 = _1986.z;
        float _2147;
        float _2149;
        float _2151;
        float _2153;
        float _2155;
        float _2157;
        if (((((1u << ((_2019 >> 4u) & 15u)) + 4294967295u) & _2018) == 0u) || ((_2019 & 240u) == 0u))
        {
            _2147 = 0.0;
            _2149 = 0.0;
            _2151 = 0.0;
            _2153 = 0.0;
            _2155 = 0.0;
            _2157 = 0.0;
        }
        else
        {
            float _2148;
            float _2150;
            float _2152;
            float _2154;
            float _2156;
            float _2158;
            float _2307 = 0.0;
            float _2308 = 0.0;
            float _2309 = 0.0;
            float _2310 = 0.0;
            float _2311 = 0.0;
            float _2312 = 0.0;
            uint _2313 = 0u;
            uint _2322;
            bool _2323;
            for (;;)
            {
                _2322 = texelFetch(g_lightClassification, int((((_2012 << 5u) + (_1998 << 9u)) + (_2313 << 2u)) >> 2u)).x;
                _2323 = _2322 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2323)
                {
                    frontier_phi_68_pred = _2309;
                    frontier_phi_68_pred_1 = _2312;
                    frontier_phi_68_pred_2 = _2311;
                    frontier_phi_68_pred_3 = _2310;
                    frontier_phi_68_pred_4 = _2308;
                    frontier_phi_68_pred_5 = _2307;
                }
                else
                {
                    float _2452;
                    float _2453;
                    float _2454;
                    float _2455;
                    float _2456;
                    float _2457;
                    uint _2458;
                    _2452 = _2307;
                    _2453 = _2308;
                    _2454 = _2309;
                    _2455 = _2310;
                    _2456 = _2311;
                    _2457 = _2312;
                    _2458 = _2322;
                    float _2379;
                    float _2380;
                    float _2381;
                    float _2382;
                    float _2383;
                    float _2384;
                    for (;;)
                    {
                        uint _2462 = uint(findLSB(_2458)) + (_2313 << 5u);
                        uint _2459 = (_2458 + 4294967295u) & _2458;
                        uint _2464 = _2462 * 48u;
                        vec4 _2478 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2464)).x, texelFetch(g_PointLightRenderingBuffer, int(_2464 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2464 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2464 + 3u)).x));
                        uint _2484 = (_2462 * 48u) + 4u;
                        vec4 _2497 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2484)).x, texelFetch(g_PointLightRenderingBuffer, int(_2484 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2484 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2484 + 3u)).x));
                        uint _2503 = (_2462 * 48u) + 8u;
                        vec3 _2514 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2503)).x, texelFetch(g_PointLightRenderingBuffer, int(_2503 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2503 + 2u)).x));
                        float _2518 = _2478.x - _1972;
                        float _2519 = _2478.y - _1973;
                        float _2520 = _2478.z - _1974;
                        float _2521 = dot(vec3(_2518, _2519, _2520), vec3(_2518, _2519, _2520));
                        float _2524 = inversesqrt(_2521);
                        float _2533 = 1.0 - (_2521 * _2478.w);
                        float _3680 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
                        float _2534 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
                        float _2535 = sqrt(_2521) * _2497.w;
                        float _2538 = 1.39999997615814208984375 / (_2535 + 1.39999997615814208984375);
                        float _2539 = _2538 * _2538;
                        float _2542 = ((1.0 - _2539) * dot(vec3(_350, _353, _356), vec3(_2524 * _2518, _2524 * _2519, _2524 * _2520))) + _2539;
                        float _2545 = _2535 * _2535;
                        float _2549 = ((isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0))) * _2534) / ((_2545 * 0.699999988079071044921875) + 1.0);
                        float _2553 = (-0.0) - _1972;
                        float _2554 = (-0.0) - _1973;
                        float _2555 = (-0.0) - _1974;
                        float _2559 = inversesqrt(dot(vec3(_2553, _2554, _2555), vec3(_2553, _2554, _2555)));
                        float _2563 = dot(vec3(_350, _353, _356), vec3(_2559 * _2553, _2559 * _2554, _2559 * _2555));
                        float _3696 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
                        float _3707 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
                        float _2567 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
                        float _2571 = (0.5 / (((isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) + 9.9999999392252902907785028219223e-09) + _2567)) * _2567;
                        float _3718 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
                        float _2580 = (((isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * 3.1415927410125732421875) / ((_2545 * 2.1991131305694580078125) + 3.141590118408203125)) * _2534;
                        _2382 = (_2549 * _2497.x) + _2455;
                        _2383 = (_2549 * _2497.y) + _2456;
                        _2384 = (_2549 * _2497.z) + _2457;
                        _2379 = (_2580 * _2514.x) + _2452;
                        _2380 = (_2580 * _2514.y) + _2453;
                        _2381 = (_2580 * _2514.z) + _2454;
                        if (_2459 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2452 = _2379;
                            _2453 = _2380;
                            _2454 = _2381;
                            _2455 = _2382;
                            _2456 = _2383;
                            _2457 = _2384;
                            _2458 = _2459;
                        }
                    }
                    frontier_phi_68_pred = _2381;
                    frontier_phi_68_pred_1 = _2384;
                    frontier_phi_68_pred_2 = _2383;
                    frontier_phi_68_pred_3 = _2382;
                    frontier_phi_68_pred_4 = _2380;
                    frontier_phi_68_pred_5 = _2379;
                }
                _2152 = frontier_phi_68_pred;
                _2158 = frontier_phi_68_pred_1;
                _2156 = frontier_phi_68_pred_2;
                _2154 = frontier_phi_68_pred_3;
                _2150 = frontier_phi_68_pred_4;
                _2148 = frontier_phi_68_pred_5;
                uint _2314 = _2313 + 1u;
                if (_2314 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2307 = _2148;
                    _2308 = _2150;
                    _2309 = _2152;
                    _2310 = _2154;
                    _2311 = _2156;
                    _2312 = _2158;
                    _2313 = _2314;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2147 = _2148;
            _2149 = _2150;
            _2151 = _2152;
            _2153 = _2154;
            _2155 = _2156;
            _2157 = _2158;
        }
        uvec4 _2161 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2162 = _2161.z;
        uint _2164 = (_2162 >> 8u) & 15u;
        float _2278;
        float _2280;
        float _2282;
        float _2284;
        float _2286;
        float _2288;
        if (((4294967295u << _2164) & _2018) == 0u)
        {
            _2278 = _2147;
            _2280 = _2149;
            _2282 = _2151;
            _2284 = _2153;
            _2286 = _2155;
            _2288 = _2157;
        }
        else
        {
            float _2303 = inversesqrt(dot(vec3(_1972, _1973, _1974), vec3(_1972, _1973, _1974)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2164 < ((_2162 >> 12u) & 15u))
            {
                float _2279;
                float _2281;
                float _2283;
                float _2285;
                float _2287;
                float _2289;
                float _2435 = _2147;
                float _2436 = _2149;
                float _2437 = _2151;
                float _2438 = _2153;
                float _2439 = _2155;
                float _2440 = _2157;
                uint _2441 = _2164;
                uint _2450;
                bool _2451;
                for (;;)
                {
                    _2450 = texelFetch(g_lightClassification, int((((_2012 << 5u) + (_1998 << 9u)) + (_2441 << 2u)) >> 2u)).x;
                    _2451 = _2450 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2451)
                    {
                        frontier_phi_79_pred = _2440;
                        frontier_phi_79_pred_1 = _2439;
                        frontier_phi_79_pred_2 = _2438;
                        frontier_phi_79_pred_3 = _2437;
                        frontier_phi_79_pred_4 = _2436;
                        frontier_phi_79_pred_5 = _2435;
                    }
                    else
                    {
                        float _2594;
                        float _2595;
                        float _2596;
                        float _2597;
                        float _2598;
                        float _2599;
                        float _2846;
                        float _2847;
                        float _2848;
                        float _2849;
                        float _2850;
                        float _2851;
                        float _2607 = _2435;
                        float _2608 = _2436;
                        float _2609 = _2437;
                        float _2610 = _2438;
                        float _2611 = _2439;
                        float _2612 = _2440;
                        uint _2613 = _2450;
                        uint _2614;
                        vec4 _2639;
                        float _2640;
                        vec4 _2655;
                        vec3 _2667;
                        vec4 _2683;
                        vec4 _2699;
                        float _2746;
                        bool _2747;
                        for (;;)
                        {
                            uint _2624 = ((_2441 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2613));
                            _2614 = (_2613 + 4294967295u) & _2613;
                            uint _2626 = _2624 * 40u;
                            _2639 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2626)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2626 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2626 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2626 + 3u)).x));
                            _2640 = _2639.w;
                            uint _2642 = (_2624 * 40u) + 4u;
                            _2655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2642 + 3u)).x));
                            uint _2657 = (_2624 * 40u) + 8u;
                            _2667 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2657 + 2u)).x));
                            uint _2670 = (_2624 * 40u) + 16u;
                            _2683 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2670)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2670 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2670 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2670 + 3u)).x));
                            uint _2686 = (_2624 * 40u) + 20u;
                            _2699 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2686)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2686 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2686 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2686 + 3u)).x));
                            uint _2702 = (_2624 * 40u) + 24u;
                            vec4 _2715 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2702)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2702 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2702 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2702 + 3u)).x));
                            uint _2721 = (_2624 * 40u) + 28u;
                            vec4 _2734 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2721)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2721 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2721 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2721 + 3u)).x));
                            _2746 = fma(_1974, _2734.z, fma(_1973, _2734.y, _2734.x * _1972)) + _2734.w;
                            _2747 = !((fma(_1974, _2715.z, fma(_1973, _2715.y, _2715.x * _1972)) + _2715.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2747)
                            {
                                float _2774 = _2639.x - _1972;
                                float _2775 = _2639.y - _1973;
                                float _2776 = _2639.z - _1974;
                                float _2777 = dot(vec3(_2774, _2775, _2776), vec3(_2774, _2775, _2776));
                                float _2780 = inversesqrt(_2777);
                                float _2781 = _2780 * _2774;
                                float _2782 = _2780 * _2775;
                                float _2783 = _2780 * _2776;
                                float _2787 = 1.0 - (_2777 / (_2640 * _2640));
                                float _3729 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
                                float _2788 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
                                float _2792 = sqrt(_2777) * _2655.w;
                                float _2794 = 1.39999997615814208984375 / (_2792 + 1.39999997615814208984375);
                                float _2795 = _2794 * _2794;
                                float _2796 = 1.0 - _2795;
                                float _2798 = (_2796 * dot(vec3(_2781, _2782, _2783), vec3(_350, _353, _356))) + _2795;
                                float _2801 = _2792 * _2792;
                                float _2805 = (fma(_1974, _2683.z, fma(_1973, _2683.y, _2683.x * _1972)) + _2683.w) / _2746;
                                float _2806 = (fma(_1974, _2699.z, fma(_1973, _2699.y, _2699.x * _1972)) + _2699.w) / _2746;
                                float _2810 = 1.0 - dot(vec2(_2805, _2806), vec2(_2805, _2806));
                                float _3745 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
                                float _2811 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
                                float _2812 = _2811 * (((isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0))) * _2788) / ((_2801 * 0.699999988079071044921875) + 1.0));
                                float _2822 = dot(vec3(_350, _353, _356), vec3((-0.0) - (_1972 * _2303), (-0.0) - (_1973 * _2303), (-0.0) - (_1974 * _2303)));
                                float _3756 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
                                float _2830 = (_2796 * dot(vec3(_350, _353, _356), vec3(_2781, _2782, _2783))) + _2795;
                                float _3767 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
                                float _2831 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
                                float _2835 = (0.5 / (((isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) + 9.9999999392252902907785028219223e-09) + _2831)) * _2831;
                                float _3778 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
                                float _2842 = (_2811 * _2788) * (((isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * 3.1415927410125732421875) / ((_2801 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _2812 * _2655.z;
                                frontier_phi_85_pred_1 = _2812 * _2655.y;
                                frontier_phi_85_pred_2 = _2812 * _2655.x;
                                frontier_phi_85_pred_3 = _2842 * _2667.z;
                                frontier_phi_85_pred_4 = _2842 * _2667.y;
                                frontier_phi_85_pred_5 = _2842 * _2667.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _2851 = frontier_phi_85_pred;
                            _2850 = frontier_phi_85_pred_1;
                            _2849 = frontier_phi_85_pred_2;
                            _2848 = frontier_phi_85_pred_3;
                            _2847 = frontier_phi_85_pred_4;
                            _2846 = frontier_phi_85_pred_5;
                            _2597 = _2849 + _2610;
                            _2598 = _2850 + _2611;
                            _2599 = _2851 + _2612;
                            _2594 = _2846 + _2607;
                            _2595 = _2847 + _2608;
                            _2596 = _2848 + _2609;
                            if (_2614 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2607 = _2594;
                                _2608 = _2595;
                                _2609 = _2596;
                                _2610 = _2597;
                                _2611 = _2598;
                                _2612 = _2599;
                                _2613 = _2614;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2599;
                        frontier_phi_79_pred_1 = _2598;
                        frontier_phi_79_pred_2 = _2597;
                        frontier_phi_79_pred_3 = _2596;
                        frontier_phi_79_pred_4 = _2595;
                        frontier_phi_79_pred_5 = _2594;
                    }
                    _2289 = frontier_phi_79_pred;
                    _2287 = frontier_phi_79_pred_1;
                    _2285 = frontier_phi_79_pred_2;
                    _2283 = frontier_phi_79_pred_3;
                    _2281 = frontier_phi_79_pred_4;
                    _2279 = frontier_phi_79_pred_5;
                    uint _2442 = _2441 + 1u;
                    if (_2442 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2435 = _2279;
                        _2436 = _2281;
                        _2437 = _2283;
                        _2438 = _2285;
                        _2439 = _2287;
                        _2440 = _2289;
                        _2441 = _2442;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2285;
                frontier_phi_60_61_ladder_1 = _2289;
                frontier_phi_60_61_ladder_2 = _2287;
                frontier_phi_60_61_ladder_3 = _2283;
                frontier_phi_60_61_ladder_4 = _2281;
                frontier_phi_60_61_ladder_5 = _2279;
            }
            else
            {
                frontier_phi_60_61_ladder = _2153;
                frontier_phi_60_61_ladder_1 = _2157;
                frontier_phi_60_61_ladder_2 = _2155;
                frontier_phi_60_61_ladder_3 = _2151;
                frontier_phi_60_61_ladder_4 = _2149;
                frontier_phi_60_61_ladder_5 = _2147;
            }
            _2278 = frontier_phi_60_61_ladder_5;
            _2280 = frontier_phi_60_61_ladder_4;
            _2282 = frontier_phi_60_61_ladder_3;
            _2284 = frontier_phi_60_61_ladder;
            _2286 = frontier_phi_60_61_ladder_2;
            _2288 = frontier_phi_60_61_ladder_1;
        }
        float _2293 = isnan(1.0) ? _395 : (isnan(_395) ? 1.0 : min(_395, 1.0));
        _2030 = (_2293 * _2284) + _1591;
        _2032 = (_2293 * _2286) + _1593;
        _2034 = (_2293 * _2288) + _1595;
        _2036 = ((_2278 * 0.039999999105930328369140625) * _2293) + _1843;
        _2038 = ((_2280 * 0.039999999105930328369140625) * _2293) + _1845;
        _2040 = ((_2282 * 0.039999999105930328369140625) * _2293) + _1847;
    }
    else
    {
        _2030 = _1591;
        _2032 = _1593;
        _2034 = _1595;
        _2036 = _1843;
        _2038 = _1845;
        _2040 = _1847;
    }
    uint _2046 = _371 + uint(cbMatDynParam._m0[0u].w);
    float _2052 = (_215.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2046].x;
    float _2053 = (_215.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2046].y;
    float _2054 = (_215.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2046].z;
    float _3794 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _3805 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _3816 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _2071 = (((isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_2030 + ((isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0))) * _395))) + ((_2036 + ((isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))) * _1206)) * cbPerFrame._m0[3u].x)) + _2052;
    float _2073 = (_2053 + ((_2038 + ((isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))) * _1206)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_2032 + ((isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0))) * _395)));
    float _2075 = (_2054 + ((_2040 + ((isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))) * _1206)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_2034 + ((isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0))) * _395)));
    float _2076 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2077 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2078 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2084 = cbMtdParam._m0[2u].x * _2052;
    float _2085 = cbMtdParam._m0[2u].y * _2053;
    float _2086 = cbMtdParam._m0[2u].z * _2054;
    float _3842 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2088 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    uint _2089 = _369 + 6u;
    float _2097 = _329 / cbSceneParam._m0[86u].x;
    float _2098 = _330 / cbSceneParam._m0[86u].y;
    vec4 _2112 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2097, _2098, (log2((isnan(cbSceneParam._m0[77u].w) ? _249 : (isnan(_249) ? cbSceneParam._m0[77u].w : min(_249, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2114 = _2112.x;
    float _2115 = _2112.y;
    float _2116 = _2112.z;
    float _2117 = _2112.w;
    float _2209;
    float _2211;
    float _2213;
    float _2215;
    if (_249 > cbSceneParam._m0[78u].w)
    {
        float _2172 = isnan(_249) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _249 : min(cbSceneParam._m0[80u].w, _249));
        float _2173 = _2172 / _249;
        float _2184 = _2173 * _301;
        float _2185 = _302 * _2173;
        float _2186 = (-0.0) - _2185;
        float _2187 = _2173 * _303;
        float _2189 = (cbSceneParam._m0[77u].w * _2186) / _2172;
        float _2190 = _2189 + cbSceneParam._m0[79u].w;
        float _2191 = cbSceneParam._m0[79u].w - _2185;
        float _2197 = sqrt(((_2184 * _2184) + (_2185 * _2185)) + (_2187 * _2187));
        float _2200 = (1.0 - (cbSceneParam._m0[77u].w / _2172)) * _2197;
        float _2205 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2207 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2392;
        if (abs((_2186 - _2189) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2392 = ((((_2190 > 0.0) ? exp2(_2205 * _2190) : (2.0 - exp2(_2207 * _2190))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2200;
        }
        else
        {
            float _2336 = 1.0 / cbSceneParam._m0[80u].x;
            float _2337 = isnan(_2191) ? _2190 : (isnan(_2190) ? _2191 : max(_2190, _2191));
            float _2338 = isnan(_2191) ? _2190 : (isnan(_2190) ? _2191 : min(_2190, _2191));
            float _2347 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : min(_2337, 0.0));
            float _2348 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : min(_2338, 0.0));
            _2392 = ((abs(_2197 / _2186) * cbSceneParam._m0[80u].y) * ((((_2347 - _2348) * 2.0) - ((exp2(_2205 * (isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0)))) - exp2(_2205 * (isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0))))) * _2336)) - ((exp2(_2207 * _2347) - exp2(_2207 * _2348)) * _2336))) + (_2200 * cbSceneParam._m0[80u].z);
        }
        vec4 _2394 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2097, _2098, 1.0), 0.0);
        float _2403 = exp2((_2392 * (-1.44269502162933349609375)) * (1.0 - _2394.w));
        float _2404 = log2(_2403);
        float _2420 = log2(_2117);
        _2209 = (exp2(_2420 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2404 * cbSceneParam._m0[78u].x)) * _2394.x) / cbSceneParam._m0[78u].x)) + _2114;
        _2211 = (exp2(_2420 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2404 * cbSceneParam._m0[78u].y)) * _2394.y) / cbSceneParam._m0[78u].y)) + _2115;
        _2213 = (exp2(_2420 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2404 * cbSceneParam._m0[78u].z)) * _2394.z) / cbSceneParam._m0[78u].z)) + _2116;
        _2215 = _2403 * _2117;
    }
    else
    {
        _2209 = _2114;
        _2211 = _2115;
        _2213 = _2116;
        _2215 = _2117;
    }
    bool _2430;
    vec4 _2225;
    vec4 _2248;
    float _2250;
    float _2254;
    float _2255;
    float _2256;
    float _2259;
    float _2262;
    float _2265;
    float _2266;
    bool _2277;
    for (;;)
    {
        _2225 = cbMatDynParam._m0[0u];
        float _2227 = roundEven(_2225.y);
        bool _2228 = _2227 == 3.0;
        float _2230 = log2(_2215);
        float _2234 = exp2(_2230 * cbSceneParam._m0[78u].x);
        float _2235 = exp2(_2230 * cbSceneParam._m0[78u].y);
        float _2236 = exp2(_2230 * cbSceneParam._m0[78u].z);
        float _2237 = _2234 * _2076;
        float _2238 = _2235 * _2077;
        float _2239 = _2236 * _2078;
        float _2246 = _317 + (-0.5);
        _2248 = cbMtdParam._m0[1u];
        _2250 = _2248.y * _2246;
        float _2253 = (_2227 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2254 = _2253 * (_2228 ? _2237 : (_2237 + (cbSceneParam._m0[72u].w * _2209)));
        _2255 = _2253 * (_2228 ? _2238 : (_2238 + (cbSceneParam._m0[72u].w * _2211)));
        _2256 = _2253 * (_2228 ? _2239 : (_2239 + (cbSceneParam._m0[72u].w * _2213)));
        _2259 = ((_2084 * _2088) * _2234) * _2253;
        _2262 = ((_2085 * _2088) * _2235) * _2253;
        _2265 = ((_2086 * _2088) * _2236) * _2253;
        _2266 = _2246 * 0.999000012874603271484375;
        _2277 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2277)
        {
            if ((cbInstanceData._m0[_369 + 7u].x + _2266) < 0.5)
            {
                _2430 = true;
                break;
            }
        }
        uint _2371 = _371 + uint(_2225.w);
        if ((cbInstanceData._m0[_2371].w < 1.0) && ((cbInstanceData._m0[_2371].w + _2266) < 0.5))
        {
            _2430 = true;
            break;
        }
        if ((_2250 + _199) < _2248.x)
        {
            _2430 = true;
            break;
        }
        _2430 = false;
        break;
    }
    float _2585;
    if (_2430)
    {
        discard_state = true;
        _2585 = 0.0;
    }
    else
    {
        _2585 = cbInstanceData._m0[_2089].w;
    }
    SV_Target.x = _2254;
    SV_Target.y = _2255;
    SV_Target.z = _2256;
    SV_Target.w = _2585;
    SV_Target_1.x = _2259;
    SV_Target_1.y = _2262;
    SV_Target_1.z = _2265;
    SV_Target_1.w = cbInstanceData._m0[_2089].w;
    discard_exit();
}


