#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_Edge_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_Edge_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _766;
float _2969;
float _2970;
float _2971;
float _2972;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _167 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _168 = _167 * NORMAL.x;
    float _169 = _167 * NORMAL.y;
    float _170 = _167 * NORMAL.z;
    float _175;
    float _176;
    float _177;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _175 = (-0.0) - _168;
        _176 = (-0.0) - _169;
        _177 = (-0.0) - _170;
    }
    else
    {
        _175 = _168;
        _176 = _169;
        _177 = _170;
    }
    vec4 _191 = texture(sampler2D(M_A_Edge_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _194 = _191.x;
    float _195 = _191.y;
    float _196 = _191.z;
    float _197 = _191.w;
    vec4 _213 = texture(sampler2D(M_A_Edge_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _224 = inversesqrt(dot(vec3(_175, _176, _177), vec3(_175, _176, _177)));
    float _225 = _224 * _175;
    float _226 = _224 * _176;
    float _227 = _224 * _177;
    float _2981 = isnan(0.0) ? _194 : (isnan(_194) ? 0.0 : max(_194, 0.0));
    float _2992 = isnan(0.0) ? _195 : (isnan(_195) ? 0.0 : max(_195, 0.0));
    float _3003 = isnan(0.0) ? _196 : (isnan(_196) ? 0.0 : max(_196, 0.0));
    float _247 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _289 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _299 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _289);
    float _300 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _289);
    float _301 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _289);
    float _305 = inversesqrt(dot(vec3(_299, _300, _301), vec3(_299, _300, _301)));
    float _306 = _299 * _305;
    float _307 = _300 * _305;
    float _308 = _301 * _305;
    vec4 _313 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _315 = _313.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _445 = sqrt(((_299 * _299) + (_300 * _300)) + (_301 * _301));
        float _451 = (cbMatDynParam._m0[5u].x * _445) + cbMatDynParam._m0[5u].y;
        float _3014 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
        float _452 = isnan(1.0) ? _3014 : (isnan(_3014) ? 1.0 : min(_3014, 1.0));
        float _456 = (cbMatDynParam._m0[5u].z * _445) + cbMatDynParam._m0[5u].w;
        float _3025 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3025 : (isnan(_3025) ? 1.0 : min(_3025, 1.0))) - _452)) + _452) < ((_315 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _327 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _328 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _348 = fma(_227, cbSceneParam._m0[5u].z, fma(_226, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _225));
    float _351 = fma(_227, cbSceneParam._m0[6u].z, fma(_226, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _225));
    float _354 = fma(_227, cbSceneParam._m0[7u].z, fma(_226, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _225));
    uint _367 = uint(roundEven(NORMAL.w)) * 13u;
    uint _369 = _367 + 9u;
    uint _370 = _369 + uint(cbMatDynParam._m0[0u].w);
    float _376 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2981 : (isnan(_2981) ? 1.0 : min(_2981, 1.0)))) * cbInstanceData._m0[_370].x;
    float _377 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2992 : (isnan(_2992) ? 1.0 : min(_2992, 1.0)))) * cbInstanceData._m0[_370].y;
    float _378 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3003 : (isnan(_3003) ? 1.0 : min(_3003, 1.0)))) * cbInstanceData._m0[_370].z;
    float _3036 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _379 = isnan(1.0) ? _3036 : (isnan(_3036) ? 1.0 : min(_3036, 1.0));
    float _3047 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _380 = isnan(1.0) ? _3047 : (isnan(_3047) ? 1.0 : min(_3047, 1.0));
    float _3058 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _381 = isnan(1.0) ? _3058 : (isnan(_3058) ? 1.0 : min(_3058, 1.0));
    vec4 _390 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _327, cbSceneParam._m0[86u].y * _328));
    float _393 = _390.x * TEXCOORD.z;
    float _394 = dot(vec3(_225, _226, _227), vec3(_306, _307, _308));
    float _397 = _394 * 2.0;
    float _402 = (_397 * _225) - _306;
    float _403 = (_397 * _226) - _307;
    float _404 = (_397 * _227) - _308;
    float _426 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _430 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _434 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _765;
    float _767;
    float _768;
    float _769;
    float _770;
    float _771;
    float _772;
    float _773;
    float _774;
    float _775;
    float _776;
    float _777;
    float _778;
    float _779;
    float _780;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _490 = fma(_434, cbModelParam._m0[26u].z, fma(_430, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _426));
        float _494 = fma(_434, cbModelParam._m0[27u].z, fma(_430, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _426));
        float _498 = fma(_434, cbModelParam._m0[28u].z, fma(_430, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _426));
        float _523 = _426 + _225;
        float _524 = _430 + _226;
        float _525 = _434 + _227;
        float _535 = fma(_525, cbModelParam._m0[26u].z, fma(_524, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _523)) - _490;
        float _536 = fma(_525, cbModelParam._m0[27u].z, fma(_524, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _523)) - _494;
        float _537 = fma(_525, cbModelParam._m0[28u].z, fma(_524, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _523)) - _498;
        float _541 = inversesqrt(dot(vec3(_535, _536, _537), vec3(_535, _536, _537)));
        float _554 = ((_541 * _535) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_490 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _555 = ((_541 * _536) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_494 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _556 = ((_541 * _537) / cbModelParam._m0[34u].z) + ((((((_498 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _559 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_554, _555, _556), 0.0);
        vec4 _566 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_554, _555, _556), 0.0);
        vec4 _573 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_554, _555, _556), 0.0);
        vec4 _580 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_554, _555, _556), 0.0);
        float _593 = exp2((_559.w + (-0.5)) * 20.0) * 2.0;
        float _594 = _593 * (_559.x + (-0.5));
        float _595 = _593 * (_559.y + (-0.5));
        float _596 = _593 * (_559.z + (-0.5));
        float _603 = exp2((_566.w + (-0.5)) * 20.0) * 2.0;
        float _604 = _603 * (_566.x + (-0.5));
        float _605 = _603 * (_566.y + (-0.5));
        float _606 = _603 * (_566.z + (-0.5));
        float _613 = exp2((_573.w + (-0.5)) * 20.0) * 2.0;
        float _614 = _613 * (_573.x + (-0.5));
        float _615 = _613 * (_573.y + (-0.5));
        float _616 = _613 * (_573.z + (-0.5));
        float _623 = exp2((_580.w + (-0.5)) * 20.0) * 2.0;
        float _624 = _623 * (_580.x + (-0.5));
        float _625 = _623 * (_580.y + (-0.5));
        float _626 = _623 * (_580.z + (-0.5));
        float _627 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
        float _628 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
        float _629 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
        float _630 = _594 * 0.5;
        float _631 = _604 * 0.5;
        float _632 = _614 * 0.5;
        float _633 = dot(vec3(_630, _631, _632), vec3(_630, _631, _632));
        float _638 = (_633 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_633);
        float _647 = (dot(vec3(_225, _226, _227), vec3(_638 * _630, _638 * _631, _638 * _632)) + 1.0) * 0.5;
        float _3084 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
        float _657 = sqrt(((_631 * _631) + (_630 * _630)) + (_632 * _632)) / (_627 + 9.9999997473787516355514526367188e-06);
        float _3095 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
        float _658 = isnan(1.0) ? _3095 : (isnan(_3095) ? 1.0 : min(_3095, 1.0));
        float _659 = _658 * 2.0;
        float _663 = (1.0 - _658) / (_658 + 1.0);
        float _3106 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
        float _664 = isnan(1.0) ? _3106 : (isnan(_3106) ? 1.0 : min(_3106, 1.0));
        float _673 = ((((1.0 - _664) * (_659 + 2.0)) * exp2(log2(isnan(1.0) ? _3084 : (isnan(_3084) ? 1.0 : min(_3084, 1.0))) * (_659 + 1.0))) + _664) * _627;
        float _674 = _595 * 0.5;
        float _675 = _605 * 0.5;
        float _676 = _615 * 0.5;
        float _677 = dot(vec3(_674, _675, _676), vec3(_674, _675, _676));
        float _682 = (_677 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_677);
        float _690 = (dot(vec3(_225, _226, _227), vec3(_682 * _674, _682 * _675, _682 * _676)) + 1.0) * 0.5;
        float _3117 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _699 = sqrt(((_675 * _675) + (_674 * _674)) + (_676 * _676)) / (_628 + 9.9999997473787516355514526367188e-06);
        float _3128 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
        float _700 = isnan(1.0) ? _3128 : (isnan(_3128) ? 1.0 : min(_3128, 1.0));
        float _701 = _700 * 2.0;
        float _705 = (1.0 - _700) / (_700 + 1.0);
        float _3139 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _706 = isnan(1.0) ? _3139 : (isnan(_3139) ? 1.0 : min(_3139, 1.0));
        float _715 = ((((1.0 - _706) * (_701 + 2.0)) * exp2(log2(isnan(1.0) ? _3117 : (isnan(_3117) ? 1.0 : min(_3117, 1.0))) * (_701 + 1.0))) + _706) * _628;
        float _716 = _596 * 0.5;
        float _717 = _606 * 0.5;
        float _718 = _616 * 0.5;
        float _719 = dot(vec3(_716, _717, _718), vec3(_716, _717, _718));
        float _724 = (_719 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_719);
        float _732 = (dot(vec3(_225, _226, _227), vec3(_724 * _716, _724 * _717, _724 * _718)) + 1.0) * 0.5;
        float _3150 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _741 = sqrt(((_717 * _717) + (_716 * _716)) + (_718 * _718)) / (_629 + 9.9999997473787516355514526367188e-06);
        float _3161 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _742 = isnan(1.0) ? _3161 : (isnan(_3161) ? 1.0 : min(_3161, 1.0));
        float _743 = _742 * 2.0;
        float _747 = (1.0 - _742) / (_742 + 1.0);
        float _3172 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _748 = isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0));
        float _757 = ((((1.0 - _748) * (_743 + 2.0)) * exp2(log2(isnan(1.0) ? _3150 : (isnan(_3150) ? 1.0 : min(_3150, 1.0))) * (_743 + 1.0))) + _748) * _629;
        _765 = _596;
        _767 = _595;
        _768 = _594;
        _769 = _606;
        _770 = _605;
        _771 = _604;
        _772 = _616;
        _773 = _615;
        _774 = _614;
        _775 = _629;
        _776 = _628;
        _777 = _627;
        _778 = cbModelParam._m0[36u].z * (isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0)));
        _779 = cbModelParam._m0[36u].z * (isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0)));
        _780 = cbModelParam._m0[36u].z * (isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0)));
    }
    else
    {
        _765 = _766;
        _767 = _766;
        _768 = _766;
        _769 = _766;
        _770 = _766;
        _771 = _766;
        _772 = _766;
        _773 = _766;
        _774 = _766;
        _775 = _766;
        _776 = _766;
        _777 = _766;
        _778 = 0.0;
        _779 = 0.0;
        _780 = 0.0;
    }
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _809 = fma(_434, cbModelParam._m0[30u].z, fma(_430, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _426));
        float _813 = fma(_434, cbModelParam._m0[31u].z, fma(_430, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _426));
        float _817 = fma(_434, cbModelParam._m0[32u].z, fma(_430, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _426));
        float _840 = _426 + _225;
        float _841 = _430 + _226;
        float _842 = _434 + _227;
        float _852 = fma(_842, cbModelParam._m0[30u].z, fma(_841, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _840)) - _809;
        float _853 = fma(_842, cbModelParam._m0[31u].z, fma(_841, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _840)) - _813;
        float _854 = fma(_842, cbModelParam._m0[32u].z, fma(_841, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _840)) - _817;
        float _858 = inversesqrt(dot(vec3(_852, _853, _854), vec3(_852, _853, _854)));
        float _871 = ((_858 * _852) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_809 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _872 = ((_858 * _853) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_813 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _873 = ((_858 * _854) / cbModelParam._m0[35u].z) + ((((((_817 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_871, _872, _873), 0.0);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_871, _872, _873), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_871, _872, _873), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_871, _872, _873), 0.0);
        float _908 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_875.x + (-0.5));
        float _910 = _908 * (_875.y + (-0.5));
        float _911 = _908 * (_875.z + (-0.5));
        float _918 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_882.x + (-0.5));
        float _920 = _918 * (_882.y + (-0.5));
        float _921 = _918 * (_882.z + (-0.5));
        float _928 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _929 = _928 * (_889.x + (-0.5));
        float _930 = _928 * (_889.y + (-0.5));
        float _931 = _928 * (_889.z + (-0.5));
        float _938 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _939 = _938 * (_896.x + (-0.5));
        float _940 = _938 * (_896.y + (-0.5));
        float _941 = _938 * (_896.z + (-0.5));
        float _942 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _943 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _944 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _945 = _909 * 0.5;
        float _946 = _919 * 0.5;
        float _947 = _929 * 0.5;
        float _948 = dot(vec3(_945, _946, _947), vec3(_945, _946, _947));
        float _953 = (_948 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_948);
        float _961 = (dot(vec3(_225, _226, _227), vec3(_953 * _945, _953 * _946, _953 * _947)) + 1.0) * 0.5;
        float _3213 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _970 = sqrt(((_946 * _946) + (_945 * _945)) + (_947 * _947)) / (_942 + 9.9999997473787516355514526367188e-06);
        float _3224 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0));
        float _972 = _971 * 2.0;
        float _976 = (1.0 - _971) / (_971 + 1.0);
        float _3235 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0));
        float _986 = ((((1.0 - _977) * (_972 + 2.0)) * exp2(log2(isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0))) * (_972 + 1.0))) + _977) * _942;
        float _987 = _910 * 0.5;
        float _988 = _920 * 0.5;
        float _989 = _930 * 0.5;
        float _990 = dot(vec3(_987, _988, _989), vec3(_987, _988, _989));
        float _995 = (_990 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_990);
        float _1003 = (dot(vec3(_225, _226, _227), vec3(_995 * _987, _995 * _988, _995 * _989)) + 1.0) * 0.5;
        float _3246 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1012 = sqrt(((_988 * _988) + (_987 * _987)) + (_989 * _989)) / (_943 + 9.9999997473787516355514526367188e-06);
        float _3257 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0));
        float _1014 = _1013 * 2.0;
        float _1018 = (1.0 - _1013) / (_1013 + 1.0);
        float _3268 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0));
        float _1028 = ((((1.0 - _1019) * (_1014 + 2.0)) * exp2(log2(isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0))) * (_1014 + 1.0))) + _1019) * _943;
        float _1029 = _911 * 0.5;
        float _1030 = _921 * 0.5;
        float _1031 = _931 * 0.5;
        float _1032 = dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031));
        float _1037 = (_1032 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1032);
        float _1045 = (dot(vec3(_225, _226, _227), vec3(_1037 * _1029, _1037 * _1030, _1037 * _1031)) + 1.0) * 0.5;
        float _3279 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1054 = sqrt(((_1030 * _1030) + (_1029 * _1029)) + (_1031 * _1031)) / (_944 + 9.9999997473787516355514526367188e-06);
        float _3290 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0));
        float _1056 = _1055 * 2.0;
        float _1060 = (1.0 - _1055) / (_1055 + 1.0);
        float _3301 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0));
        float _1070 = ((((1.0 - _1061) * (_1056 + 2.0)) * exp2(log2(isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0))) * (_1056 + 1.0))) + _1061) * _944;
        _1078 = _911;
        _1079 = _910;
        _1080 = _909;
        _1081 = _921;
        _1082 = _920;
        _1083 = _919;
        _1084 = _931;
        _1085 = _930;
        _1086 = _929;
        _1087 = _944;
        _1088 = _943;
        _1089 = _942;
        _1090 = cbModelParam._m0[36u].w * (isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0)));
        _1091 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0)));
        _1092 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0)));
    }
    else
    {
        _1078 = _766;
        _1079 = _766;
        _1080 = _766;
        _1081 = _766;
        _1082 = _766;
        _1083 = _766;
        _1084 = _766;
        _1085 = _766;
        _1086 = _766;
        _1087 = _766;
        _1088 = _766;
        _1089 = _766;
        _1090 = 0.0;
        _1091 = 0.0;
        _1092 = 0.0;
    }
    float _1102 = (cbModelParam._m0[1u].x * (_1090 - _778)) + _778;
    float _1103 = (cbModelParam._m0[1u].x * (_1091 - _779)) + _779;
    float _1104 = (cbModelParam._m0[1u].x * (_1092 - _780)) + _780;
    float _1125 = fma(_1104, cbSceneParam._m0[89u].z, fma(_1103, cbSceneParam._m0[89u].y, _1102 * cbSceneParam._m0[89u].x));
    float _1128 = fma(_1104, cbSceneParam._m0[90u].z, fma(_1103, cbSceneParam._m0[90u].y, _1102 * cbSceneParam._m0[90u].x));
    float _1131 = fma(_1104, cbSceneParam._m0[91u].z, fma(_1103, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1102));
    float _1146 = _402 * 0.5;
    float _1147 = _403 * 0.5;
    float _1148 = _404 * 0.5;
    float _1149 = dot(vec4(_1146, _1147, _1148, 1.0), vec4(_1080, _1083, _1086, _1089));
    float _1152 = dot(vec4(_1146, _1147, _1148, 1.0), vec4(_1079, _1082, _1085, _1088));
    float _1155 = dot(vec4(_1146, _1147, _1148, 1.0), vec4(_1078, _1081, _1084, _1087));
    float _1189;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1162 = dot(vec4(_1146, _1147, _1148, 1.0), vec4(_765, _769, _772, _775));
        float _1166 = dot(vec4(_1146, _1147, _1148, 1.0), vec4(_767, _770, _773, _776));
        float _1170 = dot(vec4(_1146, _1147, _1148, 1.0), vec4(_768, _771, _774, _777));
        float _1177 = dot(vec4(cbModelParam._m0[39u]), vec4(_1146, _1147, _1148, 1.0));
        _1189 = dot(vec3(isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)), isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)), isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1177) ? 0.0 : (isnan(0.0) ? _1177 : max(0.0, _1177))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1189 = 1.0;
    }
    float _1200;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1191 = dot(vec4(cbModelParam._m0[40u]), vec4(_1146, _1147, _1148, 1.0));
        _1200 = dot(vec3(isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)), isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)), isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1191) ? 0.0 : (isnan(0.0) ? _1191 : max(0.0, _1191))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1200 = 1.0;
    }
    float _1204 = (_1200 * cbModelParam._m0[1u].x) + (_1189 * (1.0 - cbModelParam._m0[1u].x));
    float _1213 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1295;
    float _1297;
    float _1299;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1262 = fma(_434, cbModelParam._m0[13u].z, fma(_430, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _426)) + cbModelParam._m0[13u].w;
        float _1266 = fma(_434, cbModelParam._m0[14u].z, fma(_430, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _426)) + cbModelParam._m0[14u].w;
        float _1270 = fma(_434, cbModelParam._m0[15u].z, fma(_430, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _426)) + cbModelParam._m0[15u].w;
        float _1273 = fma(_404, cbModelParam._m0[13u].z, fma(_403, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _402));
        float _1276 = fma(_404, cbModelParam._m0[14u].z, fma(_403, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _402));
        float _1279 = fma(_404, cbModelParam._m0[15u].z, fma(_403, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _402));
        float _1305;
        if (_1273 > 0.0)
        {
            _1305 = abs((1.0 - _1262) / _1273);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1273 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1262 + 1.0) / _1273);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1305 = frontier_phi_19_17_ladder;
        }
        float _1513;
        if (_1276 > 0.0)
        {
            _1513 = abs((1.0 - _1266) / _1276);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1276 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1266 + 1.0) / _1276);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1513 = frontier_phi_28_24_ladder;
        }
        float _1702;
        if (_1279 > 0.0)
        {
            _1702 = abs((1.0 - _1270) / _1279);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1279 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1270 + 1.0) / _1279);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1702 = frontier_phi_40_35_ladder;
        }
        float _1704 = isnan(_1513) ? _1305 : (isnan(_1305) ? _1513 : min(_1305, _1513));
        float _1705 = isnan(_1702) ? _1704 : (isnan(_1704) ? _1702 : min(_1704, _1702));
        float _1709 = (_1705 * _1273) + _1262;
        float _1710 = (_1705 * _1276) + _1266;
        float _1711 = (_1705 * _1279) + _1270;
        float _1712 = _1705 * 9.9999997473787516355514526367188e-05;
        float _1714 = (-1.0) - _1712;
        float _1716 = _1712 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1711 > _1716) || ((_1711 < _1714) || ((_1710 > _1716) || ((_1710 < _1714) || ((_1709 < _1714) || (_1709 > _1716))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1808 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1711, cbModelParam._m0[9u].z, fma(_1710, cbModelParam._m0[9u].y, _1709 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1711, cbModelParam._m0[10u].z, fma(_1710, cbModelParam._m0[10u].y, _1709 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1711, cbModelParam._m0[11u].z, fma(_1710, cbModelParam._m0[11u].y, _1709 * cbModelParam._m0[11u].x))), _1213);
            frontier_phi_18_40_ladder = _1808.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1808.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1808.x * cbModelParam._m0[1u].y;
        }
        _1295 = frontier_phi_18_40_ladder_2;
        _1297 = frontier_phi_18_40_ladder_1;
        _1299 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1283 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_402, _403, _404), _1213);
        _1295 = _1283.x * cbModelParam._m0[1u].y;
        _1297 = _1283.y * cbModelParam._m0[1u].y;
        _1299 = _1283.z * cbModelParam._m0[1u].y;
    }
    float _1302 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1395;
    float _1397;
    float _1399;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1359 = fma(_434, cbModelParam._m0[21u].z, fma(_430, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _426)) + cbModelParam._m0[21u].w;
        float _1363 = fma(_434, cbModelParam._m0[22u].z, fma(_430, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _426)) + cbModelParam._m0[22u].w;
        float _1367 = fma(_434, cbModelParam._m0[23u].z, fma(_430, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _426)) + cbModelParam._m0[23u].w;
        float _1370 = fma(_404, cbModelParam._m0[21u].z, fma(_403, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _402));
        float _1373 = fma(_404, cbModelParam._m0[22u].z, fma(_403, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _402));
        float _1376 = fma(_404, cbModelParam._m0[23u].z, fma(_403, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _402));
        float _1518;
        if (_1370 > 0.0)
        {
            _1518 = abs((1.0 - _1359) / _1370);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1370 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1359 + 1.0) / _1370);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1518 = frontier_phi_30_26_ladder;
        }
        float _1729;
        if (_1373 > 0.0)
        {
            _1729 = abs((1.0 - _1363) / _1373);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1373 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1363 + 1.0) / _1373);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1729 = frontier_phi_42_37_ladder;
        }
        float _1880;
        if (_1376 > 0.0)
        {
            _1880 = abs((1.0 - _1367) / _1376);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1376 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1367 + 1.0) / _1376);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _1880 = frontier_phi_51_48_ladder;
        }
        float _1882 = isnan(_1729) ? _1518 : (isnan(_1518) ? _1729 : min(_1518, _1729));
        float _1883 = isnan(_1880) ? _1882 : (isnan(_1882) ? _1880 : min(_1882, _1880));
        float _1887 = (_1883 * _1370) + _1359;
        float _1888 = (_1883 * _1373) + _1363;
        float _1889 = (_1883 * _1376) + _1367;
        float _1890 = _1883 * 9.9999997473787516355514526367188e-05;
        float _1891 = (-1.0) - _1890;
        float _1893 = _1890 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_1889 > _1893) || ((_1889 < _1891) || ((_1888 > _1893) || ((_1888 < _1891) || ((_1887 < _1891) || (_1887 > _1893))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2116 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1889, cbModelParam._m0[17u].z, fma(_1888, cbModelParam._m0[17u].y, _1887 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1889, cbModelParam._m0[18u].z, fma(_1888, cbModelParam._m0[18u].y, _1887 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1889, cbModelParam._m0[19u].z, fma(_1888, cbModelParam._m0[19u].y, _1887 * cbModelParam._m0[19u].x))), _1302);
            frontier_phi_27_51_ladder = _2116.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2116.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2116.x * cbModelParam._m0[1u].z;
        }
        _1395 = frontier_phi_27_51_ladder_2;
        _1397 = frontier_phi_27_51_ladder_1;
        _1399 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1379 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_402, _403, _404), _1302);
        _1395 = _1379.x * cbModelParam._m0[1u].z;
        _1397 = _1379.y * cbModelParam._m0[1u].z;
        _1399 = _1379.z * cbModelParam._m0[1u].z;
    }
    float _1411 = _393 * 0.01200000010430812835693359375;
    float _1413 = _1411 * ((cbModelParam._m0[1u].w * (_1395 - _1295)) + _1295);
    float _1414 = _1411 * ((cbModelParam._m0[1u].w * (_1397 - _1297)) + _1297);
    float _1415 = _1411 * ((cbModelParam._m0[1u].w * (_1399 - _1299)) + _1299);
    float _1418 = fma(_1415, cbSceneParam._m0[89u].z, fma(_1414, cbSceneParam._m0[89u].y, _1413 * cbSceneParam._m0[89u].x));
    float _1421 = fma(_1415, cbSceneParam._m0[90u].z, fma(_1414, cbSceneParam._m0[90u].y, _1413 * cbSceneParam._m0[90u].x));
    float _1424 = fma(_1415, cbSceneParam._m0[91u].z, fma(_1414, cbSceneParam._m0[91u].y, _1413 * cbSceneParam._m0[91u].x));
    uvec4 _1434 = floatBitsToUint(cbInstanceData._m0[_367 + 5u]);
    uint _1436 = _1434.x * 14u;
    uint _1437 = _1436 + 13u;
    float _1444 = _393 + (-1.0);
    float _1450 = (cbLight._m0[_1437].x * _1444) + 1.0;
    float _1451 = (cbLight._m0[_1437].y * _1444) + 1.0;
    float _1452 = (cbLight._m0[_1437].z * _1444) + 1.0;
    float _1453 = (cbLight._m0[_1437].w * _1444) + 1.0;
    uint _1454 = _1436 + 5u;
    float _1460 = isnan(1.0) ? _1451 : (isnan(_1451) ? 1.0 : min(_1451, 1.0));
    uint _1464 = _1436 + 4u;
    float _1471 = isnan(1.0) ? _1450 : (isnan(_1450) ? 1.0 : min(_1450, 1.0));
    uint _1475 = _1436 | 1u;
    float _1486 = dot(vec3(cbLight._m0[_1436].xyz), vec3(_225, _226, _227));
    float _1489 = dot(vec3(cbLight._m0[_1475].xyz), vec3(_225, _226, _227));
    float _3437 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
    float _3448 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
    float _1494 = (isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0))) * 0.3183098733425140380859375;
    float _1496 = (isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))) * 0.3183098733425140380859375;
    float _1503 = ((cbLight._m0[_1454].x * _1460) * _1496) + ((cbLight._m0[_1464].x * _1471) * _1494);
    float _1504 = ((_1460 * cbLight._m0[_1454].y) * _1496) + ((_1471 * cbLight._m0[_1464].y) * _1494);
    float _1505 = ((_1460 * cbLight._m0[_1454].z) * _1496) + ((_1471 * cbLight._m0[_1464].z) * _1494);
    uvec4 _1510 = floatBitsToUint(cbLight._m0[_1436 + 12u]);
    bool _1512 = _1510.x == 0u;
    float _1523;
    float _1525;
    float _1527;
    if (_1512)
    {
        _1523 = _1503;
        _1525 = _1504;
        _1527 = _1505;
    }
    else
    {
        uint _1531 = _1436 + 6u;
        float _1547 = (dot(vec3(cbLight._m0[_1436 + 2u].xyz), vec3(_225, _226, _227)) * 0.5) + 0.5;
        float _1548 = _1547 * _1547;
        float _3459 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
        float _1550 = isnan(1.0) ? _1452 : (isnan(_1452) ? 1.0 : min(_1452, 1.0));
        _1523 = (((cbLight._m0[_1531].x * 0.3183098733425140380859375) * _1549) * _1550) + _1503;
        _1525 = (((cbLight._m0[_1531].y * 0.3183098733425140380859375) * _1549) * _1550) + _1504;
        _1527 = (((cbLight._m0[_1531].z * 0.3183098733425140380859375) * _1549) * _1550) + _1505;
    }
    bool _1530 = _1510.y == 0u;
    float _1568;
    float _1570;
    float _1572;
    if (_1530)
    {
        _1568 = _1523;
        _1570 = _1525;
        _1572 = _1527;
    }
    else
    {
        uint _1673 = _1436 + 7u;
        float _1689 = (dot(vec3(cbLight._m0[_1436 + 3u].xyz), vec3(_225, _226, _227)) * 0.5) + 0.5;
        float _1690 = _1689 * _1689;
        float _3475 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1691 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _1692 = isnan(1.0) ? _1453 : (isnan(_1453) ? 1.0 : min(_1453, 1.0));
        _1568 = (((cbLight._m0[_1673].x * 0.3183098733425140380859375) * _1691) * _1692) + _1523;
        _1570 = (((cbLight._m0[_1673].y * 0.3183098733425140380859375) * _1691) * _1692) + _1525;
        _1572 = (((cbLight._m0[_1673].z * 0.3183098733425140380859375) * _1691) * _1692) + _1527;
    }
    uint _1574 = _1436 + 8u;
    float _1580 = cbLight._m0[_1436].x + _306;
    float _1581 = cbLight._m0[_1436].y + _307;
    float _1582 = cbLight._m0[_1436].z + _308;
    float _1586 = inversesqrt(dot(vec3(_1580, _1581, _1582), vec3(_1580, _1581, _1582)));
    float _1590 = dot(vec3(_225, _226, _227), vec3(cbLight._m0[_1436].xyz));
    float _3491 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
    float _1593 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
    float _3502 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _1594 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
    float _1595 = dot(vec3(cbLight._m0[_1436].xyz), vec3(_1580 * _1586, _1581 * _1586, _1582 * _1586));
    float _3513 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
    float _1606 = (exp2(log2(1.0 - (isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1612 = (0.5 / ((_1593 + 9.9999999392252902907785028219223e-09) + _1594)) * _1593;
    float _3524 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
    float _1614 = (isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0))) * 0.31831014156341552734375;
    uint _1625 = _1436 + 9u;
    float _1631 = cbLight._m0[_1475].x + _306;
    float _1632 = cbLight._m0[_1475].y + _307;
    float _1633 = cbLight._m0[_1475].z + _308;
    float _1637 = inversesqrt(dot(vec3(_1631, _1632, _1633), vec3(_1631, _1632, _1633)));
    float _1641 = dot(vec3(_225, _226, _227), vec3(cbLight._m0[_1475].xyz));
    float _3535 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
    float _1644 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
    float _1645 = dot(vec3(cbLight._m0[_1475].xyz), vec3(_1631 * _1637, _1632 * _1637, _1633 * _1637));
    float _3546 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
    float _1654 = (exp2(log2(1.0 - (isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1658 = (0.5 / ((_1644 + 9.9999999392252902907785028219223e-09) + _1594)) * _1644;
    float _3557 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
    float _1660 = (isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0))) * 0.31831014156341552734375;
    float _1670 = (((_1654 * cbLight._m0[_1625].x) * _1660) * _1460) + (((_1606 * cbLight._m0[_1574].x) * _1614) * _1471);
    float _1671 = (((_1654 * cbLight._m0[_1625].y) * _1660) * _1460) + (((_1606 * cbLight._m0[_1574].y) * _1614) * _1471);
    float _1672 = (((_1654 * cbLight._m0[_1625].z) * _1660) * _1460) + (((_1606 * cbLight._m0[_1574].z) * _1614) * _1471);
    float _1734;
    float _1736;
    float _1738;
    if (_1512)
    {
        _1734 = _1670;
        _1736 = _1671;
        _1738 = _1672;
    }
    else
    {
        uint _1740 = _1436 + 10u;
        uint _1746 = _1436 + 2u;
        float _1752 = cbLight._m0[_1746].x + _306;
        float _1753 = cbLight._m0[_1746].y + _307;
        float _1754 = cbLight._m0[_1746].z + _308;
        float _1758 = inversesqrt(dot(vec3(_1752, _1753, _1754), vec3(_1752, _1753, _1754)));
        float _1762 = dot(vec3(_225, _226, _227), vec3(cbLight._m0[_1746].xyz));
        float _3568 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1765 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _1766 = dot(vec3(cbLight._m0[_1746].xyz), vec3(_1752 * _1758, _1753 * _1758, _1754 * _1758));
        float _3579 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1775 = (exp2(log2(1.0 - (isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1779 = (0.5 / ((_1765 + 9.9999999392252902907785028219223e-09) + _1594)) * _1765;
        float _3590 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1781 = (isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))) * 0.31831014156341552734375;
        float _1782 = isnan(1.0) ? _1452 : (isnan(_1452) ? 1.0 : min(_1452, 1.0));
        _1734 = (((_1775 * cbLight._m0[_1740].x) * _1781) * _1782) + _1670;
        _1736 = (((_1775 * cbLight._m0[_1740].y) * _1781) * _1782) + _1671;
        _1738 = (((_1775 * cbLight._m0[_1740].z) * _1781) * _1782) + _1672;
    }
    float _1817;
    float _1819;
    float _1821;
    if (_1530)
    {
        _1817 = _1734;
        _1819 = _1736;
        _1821 = _1738;
    }
    else
    {
        uint _1828 = _1436 + 11u;
        uint _1834 = _1436 + 3u;
        float _1840 = cbLight._m0[_1834].x + _306;
        float _1841 = cbLight._m0[_1834].y + _307;
        float _1842 = cbLight._m0[_1834].z + _308;
        float _1846 = inversesqrt(dot(vec3(_1840, _1841, _1842), vec3(_1840, _1841, _1842)));
        float _1850 = dot(vec3(_225, _226, _227), vec3(cbLight._m0[_1834].xyz));
        float _3606 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1853 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _1854 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_1840 * _1846, _1841 * _1846, _1842 * _1846));
        float _3617 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
        float _1863 = (exp2(log2(1.0 - (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1867 = (0.5 / ((_1853 + 9.9999999392252902907785028219223e-09) + _1594)) * _1853;
        float _3628 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1869 = (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * 0.31831014156341552734375;
        float _1870 = isnan(1.0) ? _1453 : (isnan(_1453) ? 1.0 : min(_1453, 1.0));
        _1817 = (((_1863 * cbLight._m0[_1828].x) * _1869) * _1870) + _1734;
        _1819 = (((_1863 * cbLight._m0[_1828].y) * _1869) * _1870) + _1736;
        _1821 = (((_1863 * cbLight._m0[_1828].z) * _1869) * _1870) + _1738;
    }
    float _2004;
    float _2006;
    float _2008;
    float _2010;
    float _2012;
    float _2014;
    if (_1434.y == 0u)
    {
        float _1945 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1946 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1945;
        float _1947 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1945;
        float _1948 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1945;
        uvec4 _1960 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1961 = _1960.x;
        uint _1972 = uint((float(_1960.y) * floor(float(uint(cbSceneParam._m0[85u].y * _328) / _1961))) + floor(float(uint(cbSceneParam._m0[85u].x * _327) / _1961)));
        float _1982 = (log2(_1948 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1983 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        uint _1986 = uint(isnan(14.0) ? _1983 : (isnan(_1983) ? 14.0 : min(_1983, 14.0)));
        uvec4 _1991 = texelFetch(g_lightClusterGridBuffer, int(((_1986 << 2u) + (_1972 << 6u)) >> 2u));
        uint _1992 = _1991.x;
        uint _1993 = _1960.z;
        float _2121;
        float _2123;
        float _2125;
        float _2127;
        float _2129;
        float _2131;
        if (((((1u << ((_1993 >> 4u) & 15u)) + 4294967295u) & _1992) == 0u) || ((_1993 & 240u) == 0u))
        {
            _2121 = 0.0;
            _2123 = 0.0;
            _2125 = 0.0;
            _2127 = 0.0;
            _2129 = 0.0;
            _2131 = 0.0;
        }
        else
        {
            float _2122;
            float _2124;
            float _2126;
            float _2128;
            float _2130;
            float _2132;
            float _2281 = 0.0;
            float _2282 = 0.0;
            float _2283 = 0.0;
            float _2284 = 0.0;
            float _2285 = 0.0;
            float _2286 = 0.0;
            uint _2287 = 0u;
            uint _2296;
            bool _2297;
            for (;;)
            {
                _2296 = texelFetch(g_lightClassification, int((((_1986 << 5u) + (_1972 << 9u)) + (_2287 << 2u)) >> 2u)).x;
                _2297 = _2296 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2297)
                {
                    frontier_phi_68_pred = _2283;
                    frontier_phi_68_pred_1 = _2286;
                    frontier_phi_68_pred_2 = _2285;
                    frontier_phi_68_pred_3 = _2284;
                    frontier_phi_68_pred_4 = _2282;
                    frontier_phi_68_pred_5 = _2281;
                }
                else
                {
                    float _2426;
                    float _2427;
                    float _2428;
                    float _2429;
                    float _2430;
                    float _2431;
                    uint _2432;
                    _2426 = _2281;
                    _2427 = _2282;
                    _2428 = _2283;
                    _2429 = _2284;
                    _2430 = _2285;
                    _2431 = _2286;
                    _2432 = _2296;
                    float _2353;
                    float _2354;
                    float _2355;
                    float _2356;
                    float _2357;
                    float _2358;
                    for (;;)
                    {
                        uint _2436 = uint(findLSB(_2432)) + (_2287 << 5u);
                        uint _2433 = (_2432 + 4294967295u) & _2432;
                        uint _2438 = _2436 * 48u;
                        vec4 _2452 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2438)).x, texelFetch(g_PointLightRenderingBuffer, int(_2438 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2438 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2438 + 3u)).x));
                        uint _2458 = (_2436 * 48u) + 4u;
                        vec4 _2471 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2458)).x, texelFetch(g_PointLightRenderingBuffer, int(_2458 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2458 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2458 + 3u)).x));
                        uint _2477 = (_2436 * 48u) + 8u;
                        vec3 _2488 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2477)).x, texelFetch(g_PointLightRenderingBuffer, int(_2477 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2477 + 2u)).x));
                        float _2492 = _2452.x - _1946;
                        float _2493 = _2452.y - _1947;
                        float _2494 = _2452.z - _1948;
                        float _2495 = dot(vec3(_2492, _2493, _2494), vec3(_2492, _2493, _2494));
                        float _2498 = inversesqrt(_2495);
                        float _2507 = 1.0 - (_2495 * _2452.w);
                        float _3654 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
                        float _2508 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
                        float _2509 = sqrt(_2495) * _2471.w;
                        float _2512 = 1.39999997615814208984375 / (_2509 + 1.39999997615814208984375);
                        float _2513 = _2512 * _2512;
                        float _2516 = ((1.0 - _2513) * dot(vec3(_348, _351, _354), vec3(_2498 * _2492, _2498 * _2493, _2498 * _2494))) + _2513;
                        float _2519 = _2509 * _2509;
                        float _2523 = ((isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0))) * _2508) / ((_2519 * 0.699999988079071044921875) + 1.0);
                        float _2527 = (-0.0) - _1946;
                        float _2528 = (-0.0) - _1947;
                        float _2529 = (-0.0) - _1948;
                        float _2533 = inversesqrt(dot(vec3(_2527, _2528, _2529), vec3(_2527, _2528, _2529)));
                        float _2537 = dot(vec3(_348, _351, _354), vec3(_2533 * _2527, _2533 * _2528, _2533 * _2529));
                        float _3670 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
                        float _3681 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
                        float _2541 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
                        float _2545 = (0.5 / (((isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) + 9.9999999392252902907785028219223e-09) + _2541)) * _2541;
                        float _3692 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
                        float _2554 = (((isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * 3.1415927410125732421875) / ((_2519 * 2.1991131305694580078125) + 3.141590118408203125)) * _2508;
                        _2356 = (_2523 * _2471.x) + _2429;
                        _2357 = (_2523 * _2471.y) + _2430;
                        _2358 = (_2523 * _2471.z) + _2431;
                        _2353 = (_2554 * _2488.x) + _2426;
                        _2354 = (_2554 * _2488.y) + _2427;
                        _2355 = (_2554 * _2488.z) + _2428;
                        if (_2433 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2426 = _2353;
                            _2427 = _2354;
                            _2428 = _2355;
                            _2429 = _2356;
                            _2430 = _2357;
                            _2431 = _2358;
                            _2432 = _2433;
                        }
                    }
                    frontier_phi_68_pred = _2355;
                    frontier_phi_68_pred_1 = _2358;
                    frontier_phi_68_pred_2 = _2357;
                    frontier_phi_68_pred_3 = _2356;
                    frontier_phi_68_pred_4 = _2354;
                    frontier_phi_68_pred_5 = _2353;
                }
                _2126 = frontier_phi_68_pred;
                _2132 = frontier_phi_68_pred_1;
                _2130 = frontier_phi_68_pred_2;
                _2128 = frontier_phi_68_pred_3;
                _2124 = frontier_phi_68_pred_4;
                _2122 = frontier_phi_68_pred_5;
                uint _2288 = _2287 + 1u;
                if (_2288 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2281 = _2122;
                    _2282 = _2124;
                    _2283 = _2126;
                    _2284 = _2128;
                    _2285 = _2130;
                    _2286 = _2132;
                    _2287 = _2288;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2121 = _2122;
            _2123 = _2124;
            _2125 = _2126;
            _2127 = _2128;
            _2129 = _2130;
            _2131 = _2132;
        }
        uvec4 _2135 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2136 = _2135.z;
        uint _2138 = (_2136 >> 8u) & 15u;
        float _2252;
        float _2254;
        float _2256;
        float _2258;
        float _2260;
        float _2262;
        if (((4294967295u << _2138) & _1992) == 0u)
        {
            _2252 = _2121;
            _2254 = _2123;
            _2256 = _2125;
            _2258 = _2127;
            _2260 = _2129;
            _2262 = _2131;
        }
        else
        {
            float _2277 = inversesqrt(dot(vec3(_1946, _1947, _1948), vec3(_1946, _1947, _1948)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2138 < ((_2136 >> 12u) & 15u))
            {
                float _2253;
                float _2255;
                float _2257;
                float _2259;
                float _2261;
                float _2263;
                float _2409 = _2121;
                float _2410 = _2123;
                float _2411 = _2125;
                float _2412 = _2127;
                float _2413 = _2129;
                float _2414 = _2131;
                uint _2415 = _2138;
                uint _2424;
                bool _2425;
                for (;;)
                {
                    _2424 = texelFetch(g_lightClassification, int((((_1986 << 5u) + (_1972 << 9u)) + (_2415 << 2u)) >> 2u)).x;
                    _2425 = _2424 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2425)
                    {
                        frontier_phi_79_pred = _2414;
                        frontier_phi_79_pred_1 = _2413;
                        frontier_phi_79_pred_2 = _2412;
                        frontier_phi_79_pred_3 = _2411;
                        frontier_phi_79_pred_4 = _2410;
                        frontier_phi_79_pred_5 = _2409;
                    }
                    else
                    {
                        float _2568;
                        float _2569;
                        float _2570;
                        float _2571;
                        float _2572;
                        float _2573;
                        float _2820;
                        float _2821;
                        float _2822;
                        float _2823;
                        float _2824;
                        float _2825;
                        float _2581 = _2409;
                        float _2582 = _2410;
                        float _2583 = _2411;
                        float _2584 = _2412;
                        float _2585 = _2413;
                        float _2586 = _2414;
                        uint _2587 = _2424;
                        uint _2588;
                        vec4 _2613;
                        float _2614;
                        vec4 _2629;
                        vec3 _2641;
                        vec4 _2657;
                        vec4 _2673;
                        float _2720;
                        bool _2721;
                        for (;;)
                        {
                            uint _2598 = ((_2415 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2587));
                            _2588 = (_2587 + 4294967295u) & _2587;
                            uint _2600 = _2598 * 40u;
                            _2613 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2600 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2600 + 3u)).x));
                            _2614 = _2613.w;
                            uint _2616 = (_2598 * 40u) + 4u;
                            _2629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2616 + 3u)).x));
                            uint _2631 = (_2598 * 40u) + 8u;
                            _2641 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 2u)).x));
                            uint _2644 = (_2598 * 40u) + 16u;
                            _2657 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2644)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2644 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2644 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2644 + 3u)).x));
                            uint _2660 = (_2598 * 40u) + 20u;
                            _2673 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2660)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2660 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2660 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2660 + 3u)).x));
                            uint _2676 = (_2598 * 40u) + 24u;
                            vec4 _2689 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2676)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2676 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2676 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2676 + 3u)).x));
                            uint _2695 = (_2598 * 40u) + 28u;
                            vec4 _2708 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2695)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2695 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2695 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2695 + 3u)).x));
                            _2720 = fma(_1948, _2708.z, fma(_1947, _2708.y, _2708.x * _1946)) + _2708.w;
                            _2721 = !((fma(_1948, _2689.z, fma(_1947, _2689.y, _2689.x * _1946)) + _2689.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2721)
                            {
                                float _2748 = _2613.x - _1946;
                                float _2749 = _2613.y - _1947;
                                float _2750 = _2613.z - _1948;
                                float _2751 = dot(vec3(_2748, _2749, _2750), vec3(_2748, _2749, _2750));
                                float _2754 = inversesqrt(_2751);
                                float _2755 = _2754 * _2748;
                                float _2756 = _2754 * _2749;
                                float _2757 = _2754 * _2750;
                                float _2761 = 1.0 - (_2751 / (_2614 * _2614));
                                float _3703 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
                                float _2762 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
                                float _2766 = sqrt(_2751) * _2629.w;
                                float _2768 = 1.39999997615814208984375 / (_2766 + 1.39999997615814208984375);
                                float _2769 = _2768 * _2768;
                                float _2770 = 1.0 - _2769;
                                float _2772 = (_2770 * dot(vec3(_2755, _2756, _2757), vec3(_348, _351, _354))) + _2769;
                                float _2775 = _2766 * _2766;
                                float _2779 = (fma(_1948, _2657.z, fma(_1947, _2657.y, _2657.x * _1946)) + _2657.w) / _2720;
                                float _2780 = (fma(_1948, _2673.z, fma(_1947, _2673.y, _2673.x * _1946)) + _2673.w) / _2720;
                                float _2784 = 1.0 - dot(vec2(_2779, _2780), vec2(_2779, _2780));
                                float _3719 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
                                float _2785 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
                                float _2786 = _2785 * (((isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0))) * _2762) / ((_2775 * 0.699999988079071044921875) + 1.0));
                                float _2796 = dot(vec3(_348, _351, _354), vec3((-0.0) - (_1946 * _2277), (-0.0) - (_1947 * _2277), (-0.0) - (_1948 * _2277)));
                                float _3730 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
                                float _2804 = (_2770 * dot(vec3(_348, _351, _354), vec3(_2755, _2756, _2757))) + _2769;
                                float _3741 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
                                float _2805 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
                                float _2809 = (0.5 / (((isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) + 9.9999999392252902907785028219223e-09) + _2805)) * _2805;
                                float _3752 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
                                float _2816 = (_2785 * _2762) * (((isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * 3.1415927410125732421875) / ((_2775 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _2786 * _2629.z;
                                frontier_phi_85_pred_1 = _2786 * _2629.y;
                                frontier_phi_85_pred_2 = _2786 * _2629.x;
                                frontier_phi_85_pred_3 = _2816 * _2641.z;
                                frontier_phi_85_pred_4 = _2816 * _2641.y;
                                frontier_phi_85_pred_5 = _2816 * _2641.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _2825 = frontier_phi_85_pred;
                            _2824 = frontier_phi_85_pred_1;
                            _2823 = frontier_phi_85_pred_2;
                            _2822 = frontier_phi_85_pred_3;
                            _2821 = frontier_phi_85_pred_4;
                            _2820 = frontier_phi_85_pred_5;
                            _2571 = _2823 + _2584;
                            _2572 = _2824 + _2585;
                            _2573 = _2825 + _2586;
                            _2568 = _2820 + _2581;
                            _2569 = _2821 + _2582;
                            _2570 = _2822 + _2583;
                            if (_2588 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2581 = _2568;
                                _2582 = _2569;
                                _2583 = _2570;
                                _2584 = _2571;
                                _2585 = _2572;
                                _2586 = _2573;
                                _2587 = _2588;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2573;
                        frontier_phi_79_pred_1 = _2572;
                        frontier_phi_79_pred_2 = _2571;
                        frontier_phi_79_pred_3 = _2570;
                        frontier_phi_79_pred_4 = _2569;
                        frontier_phi_79_pred_5 = _2568;
                    }
                    _2263 = frontier_phi_79_pred;
                    _2261 = frontier_phi_79_pred_1;
                    _2259 = frontier_phi_79_pred_2;
                    _2257 = frontier_phi_79_pred_3;
                    _2255 = frontier_phi_79_pred_4;
                    _2253 = frontier_phi_79_pred_5;
                    uint _2416 = _2415 + 1u;
                    if (_2416 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2409 = _2253;
                        _2410 = _2255;
                        _2411 = _2257;
                        _2412 = _2259;
                        _2413 = _2261;
                        _2414 = _2263;
                        _2415 = _2416;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2259;
                frontier_phi_60_61_ladder_1 = _2263;
                frontier_phi_60_61_ladder_2 = _2261;
                frontier_phi_60_61_ladder_3 = _2257;
                frontier_phi_60_61_ladder_4 = _2255;
                frontier_phi_60_61_ladder_5 = _2253;
            }
            else
            {
                frontier_phi_60_61_ladder = _2127;
                frontier_phi_60_61_ladder_1 = _2131;
                frontier_phi_60_61_ladder_2 = _2129;
                frontier_phi_60_61_ladder_3 = _2125;
                frontier_phi_60_61_ladder_4 = _2123;
                frontier_phi_60_61_ladder_5 = _2121;
            }
            _2252 = frontier_phi_60_61_ladder_5;
            _2254 = frontier_phi_60_61_ladder_4;
            _2256 = frontier_phi_60_61_ladder_3;
            _2258 = frontier_phi_60_61_ladder;
            _2260 = frontier_phi_60_61_ladder_2;
            _2262 = frontier_phi_60_61_ladder_1;
        }
        float _2267 = isnan(1.0) ? _393 : (isnan(_393) ? 1.0 : min(_393, 1.0));
        _2004 = (_2267 * _2258) + _1568;
        _2006 = (_2267 * _2260) + _1570;
        _2008 = (_2267 * _2262) + _1572;
        _2010 = ((_2252 * 0.039999999105930328369140625) * _2267) + _1817;
        _2012 = ((_2254 * 0.039999999105930328369140625) * _2267) + _1819;
        _2014 = ((_2256 * 0.039999999105930328369140625) * _2267) + _1821;
    }
    else
    {
        _2004 = _1568;
        _2006 = _1570;
        _2008 = _1572;
        _2010 = _1817;
        _2012 = _1819;
        _2014 = _1821;
    }
    uint _2020 = _369 + uint(cbMatDynParam._m0[0u].w);
    float _2026 = (_213.x * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2020].x;
    float _2027 = (_213.y * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2020].y;
    float _2028 = (_213.z * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2020].z;
    float _3768 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _3779 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _3790 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _2045 = (((isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * (_2004 + ((isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0))) * _393))) + ((_2010 + ((isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))) * _1204)) * cbPerFrame._m0[3u].x)) + _2026;
    float _2047 = (_2027 + ((_2012 + ((isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))) * _1204)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_2006 + ((isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0))) * _393)));
    float _2049 = (_2028 + ((_2014 + ((isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))) * _1204)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * (_2008 + ((isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0))) * _393)));
    float _2050 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2051 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2052 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2058 = cbMtdParam._m0[2u].x * _2026;
    float _2059 = cbMtdParam._m0[2u].y * _2027;
    float _2060 = cbMtdParam._m0[2u].z * _2028;
    float _3816 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2062 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    uint _2063 = _367 + 6u;
    float _2071 = _327 / cbSceneParam._m0[86u].x;
    float _2072 = _328 / cbSceneParam._m0[86u].y;
    vec4 _2086 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2071, _2072, (log2((isnan(cbSceneParam._m0[77u].w) ? _247 : (isnan(_247) ? cbSceneParam._m0[77u].w : min(_247, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2088 = _2086.x;
    float _2089 = _2086.y;
    float _2090 = _2086.z;
    float _2091 = _2086.w;
    float _2183;
    float _2185;
    float _2187;
    float _2189;
    if (_247 > cbSceneParam._m0[78u].w)
    {
        float _2146 = isnan(_247) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _247 : min(cbSceneParam._m0[80u].w, _247));
        float _2147 = _2146 / _247;
        float _2158 = _2147 * _299;
        float _2159 = _300 * _2147;
        float _2160 = (-0.0) - _2159;
        float _2161 = _2147 * _301;
        float _2163 = (cbSceneParam._m0[77u].w * _2160) / _2146;
        float _2164 = _2163 + cbSceneParam._m0[79u].w;
        float _2165 = cbSceneParam._m0[79u].w - _2159;
        float _2171 = sqrt(((_2158 * _2158) + (_2159 * _2159)) + (_2161 * _2161));
        float _2174 = (1.0 - (cbSceneParam._m0[77u].w / _2146)) * _2171;
        float _2179 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2181 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2366;
        if (abs((_2160 - _2163) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2366 = ((((_2164 > 0.0) ? exp2(_2179 * _2164) : (2.0 - exp2(_2181 * _2164))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2174;
        }
        else
        {
            float _2310 = 1.0 / cbSceneParam._m0[80u].x;
            float _2311 = isnan(_2165) ? _2164 : (isnan(_2164) ? _2165 : max(_2164, _2165));
            float _2312 = isnan(_2165) ? _2164 : (isnan(_2164) ? _2165 : min(_2164, _2165));
            float _2321 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : min(_2311, 0.0));
            float _2322 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : min(_2312, 0.0));
            _2366 = ((abs(_2171 / _2160) * cbSceneParam._m0[80u].y) * ((((_2321 - _2322) * 2.0) - ((exp2(_2179 * (isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0)))) - exp2(_2179 * (isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0))))) * _2310)) - ((exp2(_2181 * _2321) - exp2(_2181 * _2322)) * _2310))) + (_2174 * cbSceneParam._m0[80u].z);
        }
        vec4 _2368 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2071, _2072, 1.0), 0.0);
        float _2377 = exp2((_2366 * (-1.44269502162933349609375)) * (1.0 - _2368.w));
        float _2378 = log2(_2377);
        float _2394 = log2(_2091);
        _2183 = (exp2(_2394 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2378 * cbSceneParam._m0[78u].x)) * _2368.x) / cbSceneParam._m0[78u].x)) + _2088;
        _2185 = (exp2(_2394 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2378 * cbSceneParam._m0[78u].y)) * _2368.y) / cbSceneParam._m0[78u].y)) + _2089;
        _2187 = (exp2(_2394 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2378 * cbSceneParam._m0[78u].z)) * _2368.z) / cbSceneParam._m0[78u].z)) + _2090;
        _2189 = _2377 * _2091;
    }
    else
    {
        _2183 = _2088;
        _2185 = _2089;
        _2187 = _2090;
        _2189 = _2091;
    }
    bool _2404;
    vec4 _2199;
    vec4 _2222;
    float _2224;
    float _2228;
    float _2229;
    float _2230;
    float _2233;
    float _2236;
    float _2239;
    float _2240;
    bool _2251;
    for (;;)
    {
        _2199 = cbMatDynParam._m0[0u];
        float _2201 = roundEven(_2199.y);
        bool _2202 = _2201 == 3.0;
        float _2204 = log2(_2189);
        float _2208 = exp2(_2204 * cbSceneParam._m0[78u].x);
        float _2209 = exp2(_2204 * cbSceneParam._m0[78u].y);
        float _2210 = exp2(_2204 * cbSceneParam._m0[78u].z);
        float _2211 = _2208 * _2050;
        float _2212 = _2209 * _2051;
        float _2213 = _2210 * _2052;
        float _2220 = _315 + (-0.5);
        _2222 = cbMtdParam._m0[1u];
        _2224 = _2222.y * _2220;
        float _2227 = (_2201 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2228 = _2227 * (_2202 ? _2211 : (_2211 + (cbSceneParam._m0[72u].w * _2183)));
        _2229 = _2227 * (_2202 ? _2212 : (_2212 + (cbSceneParam._m0[72u].w * _2185)));
        _2230 = _2227 * (_2202 ? _2213 : (_2213 + (cbSceneParam._m0[72u].w * _2187)));
        _2233 = ((_2058 * _2062) * _2208) * _2227;
        _2236 = ((_2059 * _2062) * _2209) * _2227;
        _2239 = ((_2060 * _2062) * _2210) * _2227;
        _2240 = _2220 * 0.999000012874603271484375;
        _2251 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2251)
        {
            if ((cbInstanceData._m0[_367 + 7u].x + _2240) < 0.5)
            {
                _2404 = true;
                break;
            }
        }
        uint _2345 = _369 + uint(_2199.w);
        if ((cbInstanceData._m0[_2345].w < 1.0) && ((cbInstanceData._m0[_2345].w + _2240) < 0.5))
        {
            _2404 = true;
            break;
        }
        if ((_2224 + _197) < _2222.x)
        {
            _2404 = true;
            break;
        }
        _2404 = false;
        break;
    }
    float _2559;
    if (_2404)
    {
        discard_state = true;
        _2559 = 0.0;
    }
    else
    {
        _2559 = cbInstanceData._m0[_2063].w;
    }
    SV_Target.x = _2228;
    SV_Target.y = _2229;
    SV_Target.z = _2230;
    SV_Target.w = _2559;
    SV_Target_1.x = _2233;
    SV_Target_1.y = _2236;
    SV_Target_1.z = _2239;
    SV_Target_1.w = cbInstanceData._m0[_2063].w;
    discard_exit();
}


