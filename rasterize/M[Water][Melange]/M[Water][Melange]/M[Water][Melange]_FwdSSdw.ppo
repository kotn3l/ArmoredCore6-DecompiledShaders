#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[43];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 52) uniform texture2D g_ScreenSpaceShadowTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Melange_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Melange_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Melange_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_Melange_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Water_Melange_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Water_Melange_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_Water_Melange_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D M_Water_Melange_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_Water_Melange_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D M_Water_Melange_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1900;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _230 = _229 * _221;
    float _231 = _229 * _222;
    float _232 = _229 * _223;
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = _236 * NORMAL.x;
    float _238 = _236 * NORMAL.y;
    float _239 = _236 * NORMAL.z;
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = _243 * TANGENT.x;
    float _245 = _243 * TANGENT.y;
    float _246 = _243 * TANGENT.z;
    float _251;
    float _252;
    float _253;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _251 = (-0.0) - _237;
        _252 = (-0.0) - _238;
        _253 = (-0.0) - _239;
    }
    else
    {
        _251 = _237;
        _252 = _238;
        _253 = _239;
    }
    float _297 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _307 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _297);
    float _308 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _297);
    float _309 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _297);
    float _325 = cbMtdParam._m0[21u].x - cbMtdParam._m0[20u].w;
    float _327 = (sqrt(((_307 * _307) + (_308 * _308)) + (_309 * _309)) - cbMtdParam._m0[20u].w) / (isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0)));
    float _331 = _327 / cbMtdParam._m0[22u].z;
    float _332 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _333 = isnan(8.0) ? _332 : (isnan(_332) ? 8.0 : min(_332, 8.0));
    float _340 = cbMtdParam._m0[10u].x * _333;
    float _341 = cbMtdParam._m0[10u].y * _333;
    float _342 = cbMtdParam._m0[10u].z * _333;
    float _343 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _344 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _345 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _356 = cbMtdParam._m0[21u].y + _327;
    float _360 = _356 * cbMtdParam._m0[23u].z;
    float _4328 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    vec4 _378 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _381 = _378.x;
    float _404 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _381)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _381))) - POSITION_1.w) / cbMtdParam._m0[20u].x;
    float _4339 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _405 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
    float _410 = 1.0 - (isnan(cbMtdParam._m0[25u].y) ? _405 : (isnan(_405) ? cbMtdParam._m0[25u].y : max(_405, cbMtdParam._m0[25u].y)));
    float _412 = (cbMtdParam._m0[25u].x + TEXCOORD_3.x) - (_410 * cbMtdParam._m0[20u].z);
    float _423 = cbMtdParam._m0[19u].z * cbPerFrame._m0[22u].x;
    float _428 = cbMtdParam._m0[35u].x * TEXCOORD.x;
    float _429 = cbMtdParam._m0[35u].y * TEXCOORD.y;
    vec4 _443 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_2, SS_BumpMap), vec2(((_428 + (_423 * cbMtdParam._m0[35u].z)) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_429 + (_423 * cbMtdParam._m0[35u].w)) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _445 = _443.x;
    float _446 = _443.y;
    float _4355 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _449 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
    float _450 = _443.z - _449;
    float _4366 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _451 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
    float _463 = (_451 * 0.00999999977648258209228515625) + TEXCOORD.x;
    float _465 = (_451 * (-0.00999999977648258209228515625)) + TEXCOORD.y;
    vec4 _478 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_0, SS_BumpMap), vec2(((_463 + (cbMtdParam._m0[30u].z * _423)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_465 + (cbMtdParam._m0[30u].w * _423)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _482 = _478.z;
    vec4 _493 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_0, SS_BumpMap), vec2(((_463 + (cbMtdParam._m0[30u].x * _423)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_465 + (cbMtdParam._m0[30u].y * _423)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _497 = _493.z;
    float _500 = (_410 - _443.w) + (isnan(_497) ? _482 : (isnan(_482) ? _497 : max(_482, _497)));
    float _4382 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _502 = (_412 * (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) * (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0)));
    float _515 = (_502 + cbMtdParam._m0[9u].x) + (cbMtdParam._m0[14u].x * _451);
    float _516 = (_502 + cbMtdParam._m0[9u].y) + (cbMtdParam._m0[14u].y * _451);
    float _517 = (_502 + cbMtdParam._m0[9u].z) + (cbMtdParam._m0[14u].z * _451);
    vec4 _563 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * ((fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / cbMtdParam._m0[21u].z) + (cbMtdParam._m0[36u].x * _423))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * ((fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / cbMtdParam._m0[21u].z) + (cbMtdParam._m0[36u].y * _423))) + cbTextureTilingScale._m0[1u].w));
    float _568 = _563.z * 0.099999986588954925537109375;
    float _4393 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _570 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
    float _574 = cbMtdParam._m0[23u].x * _327;
    float _4404 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _575 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
    float _589 = (_515 + (isnan(0.07999999821186065673828125) ? _343 : (isnan(_343) ? 0.07999999821186065673828125 : min(_343, 0.07999999821186065673828125)))) + (_575 * (((1.0 - _515) - _570) + _568));
    float _591 = (_516 + (isnan(0.07999999821186065673828125) ? _344 : (isnan(_344) ? 0.07999999821186065673828125 : min(_344, 0.07999999821186065673828125)))) + (_575 * (((1.0 - _516) - _570) + _568));
    float _593 = (_517 + (isnan(0.07999999821186065673828125) ? _345 : (isnan(_345) ? 0.07999999821186065673828125 : min(_345, 0.07999999821186065673828125)))) + (_575 * (((1.0 - _517) + _568) - _570));
    float _4415 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _594 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
    float _4426 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _595 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
    float _4437 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _596 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
    float _602 = _327 / cbMtdParam._m0[24u].z;
    float _4448 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _605 = (1.0 - (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) * cbMtdParam._m0[24u].y;
    float _612 = ((cbMtdParam._m0[20u].y - cbMtdParam._m0[19u].x) * _449) + cbMtdParam._m0[19u].x;
    float _619 = (POSITION_1.w - cbMtdParam._m0[28u].z) * (1.0 / cbMtdParam._m0[28u].y);
    float _4459 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _620 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _633 = (cbMtdParam._m0[33u].z * _423) + _428;
    float _634 = (cbMtdParam._m0[33u].w * _423) + _429;
    vec4 _662 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * ((cbMtdParam._m0[32u].z * _423) + _428)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((cbMtdParam._m0[32u].w * _423) + _429)) + cbTextureTilingScale._m0[3u].w));
    float _669 = (_662.x * 2.0) + (-1.0);
    float _671 = (_662.y * 2.0) + (-1.0);
    float _675 = 1.0 - dot(vec2(_669, _671), vec2(_669, _671));
    float _4470 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _677 = sqrt(isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0)));
    float _680 = fma(_677, _251, fma(_671, _244, _669 * _230));
    float _683 = fma(_677, _252, fma(_671, _245, _669 * _231));
    float _686 = fma(_677, _253, fma(_671, _246, _669 * _232));
    float _690 = inversesqrt(dot(vec3(_680, _683, _686), vec3(_680, _683, _686)));
    float _691 = cbPerFrame._m0[22u].x * 2.0;
    float _692 = _691 * cbMtdParam._m0[26u].w;
    float _696 = ((_680 * 0.5) * _690) + (-0.25);
    float _700 = ((_683 * 0.5) * _690) + (-0.25);
    float _701 = _700 * cbMtdParam._m0[27u].x;
    float _703 = (-0.0) - (cbMtdParam._m0[27u].x * _696);
    float _704 = fract(_692);
    float _706 = fract(_692 + 0.5);
    float _717 = abs((_704 * 2.0) + (-1.0));
    vec4 _734 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_704 * _703) + _633) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_701 * _704) + _634) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _736 = _734.x;
    float _737 = _734.y;
    float _738 = _734.z;
    vec4 _739 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_706 * _703) + _633) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_701 * _706) + _634) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _750 = ((_739.x - _736) * _717) + _736;
    float _751 = ((_739.y - _737) * _717) + _737;
    float _752 = ((_739.z - _738) * _717) + _738;
    float _766 = (cbMtdParam._m0[32u].x * _423) + _428;
    float _767 = (cbMtdParam._m0[32u].y * _423) + _429;
    float _770 = _691 * cbMtdParam._m0[26u].x;
    float _771 = _700 * cbMtdParam._m0[25u].w;
    float _773 = (-0.0) - (cbMtdParam._m0[25u].w * _696);
    float _774 = fract(_770);
    float _776 = fract(_770 + 0.5);
    float _787 = abs((_774 * 2.0) + (-1.0));
    vec4 _804 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_774 * _773) + _766) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_771 * _774) + _767) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _806 = _804.x;
    float _807 = _804.y;
    float _808 = _804.z;
    vec4 _809 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_776 * _773) + _766) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_771 * _776) + _767) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _849 = (cbMtdParam._m0[33u].x * _423) + _428;
    float _850 = (cbMtdParam._m0[33u].y * _423) + _429;
    float _853 = _691 * cbMtdParam._m0[26u].z;
    float _854 = _700 * cbMtdParam._m0[26u].y;
    float _856 = (-0.0) - (cbMtdParam._m0[26u].y * _696);
    float _857 = fract(_853);
    float _859 = fract(_853 + 0.5);
    float _870 = abs((_857 * 2.0) + (-1.0));
    vec4 _887 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_857 * _856) + _849) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_854 * _857) + _850) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _889 = _887.x;
    float _890 = _887.y;
    float _891 = _887.z;
    vec4 _892 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_859 * _856) + _849) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_854 * _859) + _850) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _912 = (((((_892.x - _889) * _870) + _889) * cbMtdParam._m0[16u].x) + (_750 * cbMtdParam._m0[17u].x)) + (((((cbMtdParam._m0[15u].x - cbMtdParam._m0[18u].x) * _750) * cbMtdParam._m0[28u].w) + cbMtdParam._m0[18u].x) * (((_809.x - _806) * _787) + _806));
    float _916 = (((((_892.y - _890) * _870) + _890) * cbMtdParam._m0[16u].y) + (_751 * cbMtdParam._m0[17u].y)) + (((((cbMtdParam._m0[15u].y - cbMtdParam._m0[18u].y) * _751) * cbMtdParam._m0[28u].w) + cbMtdParam._m0[18u].y) * (((_809.y - _807) * _787) + _807));
    float _920 = (((((_892.z - _891) * _870) + _891) * cbMtdParam._m0[16u].z) + (_752 * cbMtdParam._m0[17u].z)) + ((((cbMtdParam._m0[28u].w * _752) * (cbMtdParam._m0[15u].z - cbMtdParam._m0[18u].z)) + cbMtdParam._m0[18u].z) * (((_809.z - _808) * _787) + _808));
    float _924 = _912 - (_912 * _620);
    float _925 = _916 - (_916 * _620);
    float _926 = _920 - (_920 * _620);
    float _931 = (POSITION_1.w - cbMtdParam._m0[28u].x) * (1.0 / cbMtdParam._m0[27u].w);
    float _4481 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _932 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
    float _945 = (cbMtdParam._m0[34u].z * _423) + _428;
    float _946 = (cbMtdParam._m0[34u].w * _423) + _429;
    vec4 _958 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_8, SS_DiffuseMap), vec2((_945 * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (_946 * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _960 = _958.x;
    float _961 = _958.y;
    float _962 = _958.z;
    vec4 _983 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * _945) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _946) + cbTextureTilingScale._m0[9u].w));
    float _4492 = isnan(0.0) ? TEXCOORD_3.y : (isnan(TEXCOORD_3.y) ? 0.0 : max(TEXCOORD_3.y, 0.0));
    float _1025 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
    float _1035 = _327 / cbMtdParam._m0[22u].w;
    float _4503 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _1036 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
    float _1037 = _451 * 0.23999999463558197021484375;
    float _1039 = _451 * (-0.20000000298023223876953125);
    float _1050 = cbMtdParam._m0[37u].x * TEXCOORD.x;
    float _1051 = cbMtdParam._m0[37u].y * TEXCOORD.y;
    vec4 _1066 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[36u].z * _423) + _1037) + _1050) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[36u].w * _423) + _1039) + _1051) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _1082 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_0, SS_BumpMap), vec2((((_1050 + _1037) + (cbMtdParam._m0[37u].z * _423)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_1051 + _1039) + (cbMtdParam._m0[37u].w * _423)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _1100 = (((_493.x + (-0.5)) * 0.5) + _478.x) + (((_1066.x + (-1.0)) + _1082.x) * cbMtdParam._m0[24u].w);
    float _1101 = (((_493.y + (-0.5)) * 0.5) + _478.y) + (((_1066.y + (-1.0)) + _1082.y) * cbMtdParam._m0[24u].w);
    float _1106 = ((_563.x - _1100) * _1036) + _1100;
    float _1107 = ((_563.y - _1101) * _1036) + _1101;
    float _1109 = _327 / cbMtdParam._m0[22u].y;
    float _4514 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _1110 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
    float _1126 = ((((_1025 * (0.5 - _445)) + _445) + (((_1106 + (-0.5)) + ((0.5 - _1106) * _1110)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1127 = ((((_1025 * (0.5 - _446)) + _446) + (((_1107 + (-0.5)) + ((0.5 - _1107) * _1110)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1128 = dot(vec2(_1126, _1127), vec2(_1126, _1127));
    float _4525 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
    float _1133 = sqrt(1.0 - (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))));
    float _1137 = cbMtdParam._m0[23u].w * _356;
    float _4536 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
    float _1146 = cbMtdParam._m0[21u].w * _356;
    float _4547 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _1148 = (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * cbMtdParam._m0[27u].y;
    float _4558 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
    float _1149 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
    float _1164 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1165 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1175 = ((_1164 / cbSceneParam._m0[86u].x) * 2.0) + (-1.0);
    float _1176 = 1.0 - ((_1165 / cbSceneParam._m0[86u].y) * 2.0);
    vec4 _1177 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_1164, _1165), 0.0);
    float _1179 = _1177.x;
    float _1219 = fma(_1179, cbSceneParam._m0[15u].z, fma(_1176, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * _1175)) + cbSceneParam._m0[15u].w;
    float _1220 = (fma(_1179, cbSceneParam._m0[12u].z, fma(_1176, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * _1175)) + cbSceneParam._m0[12u].w) / _1219;
    float _1221 = (fma(_1179, cbSceneParam._m0[13u].z, fma(_1176, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * _1175)) + cbSceneParam._m0[13u].w) / _1219;
    float _1222 = (fma(_1179, cbSceneParam._m0[14u].z, fma(_1176, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * _1175)) + cbSceneParam._m0[14u].w) / _1219;
    vec4 _1269 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * ((((fma(_1222, cbSceneParam._m0[20u].z, fma(_1221, cbSceneParam._m0[20u].y, cbSceneParam._m0[20u].x * _1220)) + cbSceneParam._m0[20u].w) - cbSceneParam._m0[92u].x) / cbMtdParam._m0[27u].z) + (cbMtdParam._m0[34u].x * _423))) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((((fma(_1222, cbSceneParam._m0[22u].z, fma(_1221, cbSceneParam._m0[22u].y, cbSceneParam._m0[22u].x * _1220)) + cbSceneParam._m0[22u].w) - cbSceneParam._m0[92u].z) / cbMtdParam._m0[27u].z) + (cbMtdParam._m0[34u].y * _423))) + cbTextureTilingScale._m0[7u].w));
    float _1274 = _1269.x * cbMtdParam._m0[42u].y;
    float _1275 = _1269.y * cbMtdParam._m0[42u].z;
    float _1276 = _1269.z * cbMtdParam._m0[42u].w;
    float _1293 = ((cbMtdParam._m0[24u].x - cbMtdParam._m0[22u].x) * (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0)))) + cbMtdParam._m0[22u].x;
    float _1298 = _1126 - (_1293 * _1126);
    float _1299 = _1127 - (_1293 * _1127);
    float _1300 = (_1293 * (1.0 - _1133)) + _1133;
    float _1319 = fma(_1133, _251, fma(_1127, _244, _1126 * _230));
    float _1322 = fma(_1133, _252, fma(_1127, _245, _1126 * _231));
    float _1325 = fma(_1133, _253, fma(_1127, _246, _1126 * _232));
    float _1329 = inversesqrt(dot(vec3(_1319, _1322, _1325), vec3(_1319, _1322, _1325)));
    float _1330 = _1329 * _1319;
    float _1331 = _1329 * _1322;
    float _1332 = _1329 * _1325;
    float _1335 = fma(_1300, _251, fma(_1299, _244, _1298 * _230));
    float _1338 = fma(_1300, _252, fma(_1299, _245, _1298 * _231));
    float _1341 = fma(_1300, _253, fma(_1299, _246, _1298 * _232));
    float _1345 = inversesqrt(dot(vec3(_1335, _1338, _1341), vec3(_1335, _1338, _1341)));
    float _1346 = _1345 * _1335;
    float _1347 = _1345 * _1338;
    float _1348 = _1345 * _1341;
    float _4569 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _4580 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _1350 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
    float _4591 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _4602 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _4613 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _1367 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1407 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1416 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1407);
    float _1417 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1407);
    float _1418 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1407);
    float _1422 = inversesqrt(dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418)));
    float _1423 = _1416 * _1422;
    float _1424 = _1417 * _1422;
    float _1425 = _1418 * _1422;
    vec4 _1427 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1436 = (_1427.x * 2.0) + (-1.0);
    float _1437 = (_1427.y * 2.0) + (-1.0);
    float _1438 = (_1427.z * 2.0) + (-1.0);
    float _1442 = inversesqrt(dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438)));
    float _1453 = ((TEXCOORD.w >= 1.0) || (((TEXCOORD.z <= 0.0) || (TEXCOORD.z >= 1.0)) || (TEXCOORD.w <= 0.0))) ? 0.0 : _1427.w;
    float _1460 = (((_1436 * _1442) - _1330) * _1453) + _1330;
    float _1461 = (((_1437 * _1442) - _1331) * _1453) + _1331;
    float _1462 = (((_1438 * _1442) - _1332) * _1453) + _1332;
    float _1480 = fma(_1462, cbSceneParam._m0[5u].z, fma(_1461, cbSceneParam._m0[5u].y, _1460 * cbSceneParam._m0[5u].x));
    float _1483 = fma(_1462, cbSceneParam._m0[6u].z, fma(_1461, cbSceneParam._m0[6u].y, _1460 * cbSceneParam._m0[6u].x));
    float _1486 = fma(_1462, cbSceneParam._m0[7u].z, fma(_1461, cbSceneParam._m0[7u].y, _1460 * cbSceneParam._m0[7u].x));
    uint _1499 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1500 = _1499 + 9u;
    uint _1501 = _1500 + uint(cbMatDynParam._m0[0u].w);
    float _1507 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) * cbInstanceData._m0[_1501].x;
    float _1508 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0)))) * cbInstanceData._m0[_1501].y;
    float _1509 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0)))) * cbInstanceData._m0[_1501].z;
    float _4624 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
    float _1510 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
    float _4635 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
    float _1511 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
    float _4646 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
    float _1512 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
    vec4 _1520 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1164, cbSceneParam._m0[86u].y * _1165));
    float _1523 = _1520.x * TEXCOORD_3.w;
    float _1527 = abs(dot(vec3(_1423, _1424, _1425), vec3(_1460, _1461, _1462)));
    float _4657 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
    float _1540 = dot(vec3(_1346, _1347, _1348), vec3(_1423, _1424, _1425)) * 2.0;
    float _1544 = (_1540 * _1346) - _1423;
    float _1545 = (_1540 * _1347) - _1424;
    float _1546 = (_1540 * _1348) - _1425;
    float _1550 = abs(dot(vec3(_1423, _1424, _1425), vec3(_1346, _1347, _1348)));
    float _4668 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
    float _1552 = sqrt(_1350);
    float _1564 = exp2((_1552 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1552 * 3.0));
    float _1595 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1599 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1603 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1899;
    float _1901;
    float _1902;
    float _1903;
    float _1904;
    float _1905;
    float _1906;
    float _1907;
    float _1908;
    float _1909;
    float _1910;
    float _1911;
    float _1912;
    float _1913;
    float _1914;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1628 = fma(_1603, cbModelParam._m0[26u].z, fma(_1599, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1595));
        float _1632 = fma(_1603, cbModelParam._m0[27u].z, fma(_1599, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1595));
        float _1636 = fma(_1603, cbModelParam._m0[28u].z, fma(_1599, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1595));
        float _1658 = _1595 + _1346;
        float _1659 = _1599 + _1347;
        float _1660 = _1603 + _1348;
        float _1670 = fma(_1660, cbModelParam._m0[26u].z, fma(_1659, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1658)) - _1628;
        float _1671 = fma(_1660, cbModelParam._m0[27u].z, fma(_1659, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1658)) - _1632;
        float _1672 = fma(_1660, cbModelParam._m0[28u].z, fma(_1659, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1658)) - _1636;
        float _1676 = inversesqrt(dot(vec3(_1670, _1671, _1672), vec3(_1670, _1671, _1672)));
        float _1688 = ((_1676 * _1670) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1628 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1689 = ((_1676 * _1671) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1632 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1690 = ((_1676 * _1672) / cbModelParam._m0[34u].z) + ((((((_1636 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1693 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1688, _1689, _1690), 0.0);
        vec4 _1700 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1688, _1689, _1690), 0.0);
        vec4 _1707 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1688, _1689, _1690), 0.0);
        vec4 _1714 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1688, _1689, _1690), 0.0);
        float _1727 = exp2((_1693.w + (-0.5)) * 20.0) * 2.0;
        float _1728 = _1727 * (_1693.x + (-0.5));
        float _1729 = _1727 * (_1693.y + (-0.5));
        float _1730 = _1727 * (_1693.z + (-0.5));
        float _1737 = exp2((_1700.w + (-0.5)) * 20.0) * 2.0;
        float _1738 = _1737 * (_1700.x + (-0.5));
        float _1739 = _1737 * (_1700.y + (-0.5));
        float _1740 = _1737 * (_1700.z + (-0.5));
        float _1747 = exp2((_1707.w + (-0.5)) * 20.0) * 2.0;
        float _1748 = _1747 * (_1707.x + (-0.5));
        float _1749 = _1747 * (_1707.y + (-0.5));
        float _1750 = _1747 * (_1707.z + (-0.5));
        float _1757 = exp2((_1714.w + (-0.5)) * 20.0) * 2.0;
        float _1758 = _1757 * (_1714.x + (-0.5));
        float _1759 = _1757 * (_1714.y + (-0.5));
        float _1760 = _1757 * (_1714.z + (-0.5));
        float _1761 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1762 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1763 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1764 = _1728 * 0.5;
        float _1765 = _1738 * 0.5;
        float _1766 = _1748 * 0.5;
        float _1767 = dot(vec3(_1764, _1765, _1766), vec3(_1764, _1765, _1766));
        float _1772 = (_1767 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1767);
        float _1781 = (dot(vec3(_1346, _1347, _1348), vec3(_1772 * _1764, _1772 * _1765, _1772 * _1766)) + 1.0) * 0.5;
        float _4694 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1791 = sqrt(((_1765 * _1765) + (_1764 * _1764)) + (_1766 * _1766)) / (_1761 + 9.9999997473787516355514526367188e-06);
        float _4705 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1792 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
        float _1793 = _1792 * 2.0;
        float _1797 = (1.0 - _1792) / (_1792 + 1.0);
        float _4716 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1798 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
        float _1807 = ((((1.0 - _1798) * (_1793 + 2.0)) * exp2(log2(isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * (_1793 + 1.0))) + _1798) * _1761;
        float _1808 = _1729 * 0.5;
        float _1809 = _1739 * 0.5;
        float _1810 = _1749 * 0.5;
        float _1811 = dot(vec3(_1808, _1809, _1810), vec3(_1808, _1809, _1810));
        float _1816 = (_1811 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1811);
        float _1824 = (dot(vec3(_1346, _1347, _1348), vec3(_1816 * _1808, _1816 * _1809, _1816 * _1810)) + 1.0) * 0.5;
        float _4727 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1833 = sqrt(((_1809 * _1809) + (_1808 * _1808)) + (_1810 * _1810)) / (_1762 + 9.9999997473787516355514526367188e-06);
        float _4738 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1834 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
        float _1835 = _1834 * 2.0;
        float _1839 = (1.0 - _1834) / (_1834 + 1.0);
        float _4749 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
        float _1840 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
        float _1849 = ((((1.0 - _1840) * (_1835 + 2.0)) * exp2(log2(isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * (_1835 + 1.0))) + _1840) * _1762;
        float _1850 = _1730 * 0.5;
        float _1851 = _1740 * 0.5;
        float _1852 = _1750 * 0.5;
        float _1853 = dot(vec3(_1850, _1851, _1852), vec3(_1850, _1851, _1852));
        float _1858 = (_1853 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1853);
        float _1866 = (dot(vec3(_1346, _1347, _1348), vec3(_1858 * _1850, _1858 * _1851, _1858 * _1852)) + 1.0) * 0.5;
        float _4760 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1875 = sqrt(((_1851 * _1851) + (_1850 * _1850)) + (_1852 * _1852)) / (_1763 + 9.9999997473787516355514526367188e-06);
        float _4771 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
        float _1876 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
        float _1877 = _1876 * 2.0;
        float _1881 = (1.0 - _1876) / (_1876 + 1.0);
        float _4782 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
        float _1882 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
        float _1891 = ((((1.0 - _1882) * (_1877 + 2.0)) * exp2(log2(isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * (_1877 + 1.0))) + _1882) * _1763;
        _1899 = _1730;
        _1901 = _1729;
        _1902 = _1728;
        _1903 = _1740;
        _1904 = _1739;
        _1905 = _1738;
        _1906 = _1750;
        _1907 = _1749;
        _1908 = _1748;
        _1909 = _1763;
        _1910 = _1762;
        _1911 = _1761;
        _1912 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0)));
        _1913 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0)));
        _1914 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0)));
    }
    else
    {
        _1899 = _1900;
        _1901 = _1900;
        _1902 = _1900;
        _1903 = _1900;
        _1904 = _1900;
        _1905 = _1900;
        _1906 = _1900;
        _1907 = _1900;
        _1908 = _1900;
        _1909 = _1900;
        _1910 = _1900;
        _1911 = _1900;
        _1912 = 0.0;
        _1913 = 0.0;
        _1914 = 0.0;
    }
    float _2205;
    float _2206;
    float _2207;
    float _2208;
    float _2209;
    float _2210;
    float _2211;
    float _2212;
    float _2213;
    float _2214;
    float _2215;
    float _2216;
    float _2217;
    float _2218;
    float _2219;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1938 = fma(_1603, cbModelParam._m0[30u].z, fma(_1599, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1595));
        float _1942 = fma(_1603, cbModelParam._m0[31u].z, fma(_1599, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1595));
        float _1946 = fma(_1603, cbModelParam._m0[32u].z, fma(_1599, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1595));
        float _1968 = _1595 + _1346;
        float _1969 = _1599 + _1347;
        float _1970 = _1603 + _1348;
        float _1980 = fma(_1970, cbModelParam._m0[30u].z, fma(_1969, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1968)) - _1938;
        float _1981 = fma(_1970, cbModelParam._m0[31u].z, fma(_1969, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1968)) - _1942;
        float _1982 = fma(_1970, cbModelParam._m0[32u].z, fma(_1969, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1968)) - _1946;
        float _1986 = inversesqrt(dot(vec3(_1980, _1981, _1982), vec3(_1980, _1981, _1982)));
        float _1998 = ((_1986 * _1980) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1938 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1999 = ((_1986 * _1981) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1942 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _2000 = ((_1986 * _1982) / cbModelParam._m0[35u].z) + ((((((_1946 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _2002 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1998, _1999, _2000), 0.0);
        vec4 _2009 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1998, _1999, _2000), 0.0);
        vec4 _2016 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1998, _1999, _2000), 0.0);
        vec4 _2023 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1998, _1999, _2000), 0.0);
        float _2035 = exp2((_2002.w + (-0.5)) * 20.0) * 2.0;
        float _2036 = _2035 * (_2002.x + (-0.5));
        float _2037 = _2035 * (_2002.y + (-0.5));
        float _2038 = _2035 * (_2002.z + (-0.5));
        float _2045 = exp2((_2009.w + (-0.5)) * 20.0) * 2.0;
        float _2046 = _2045 * (_2009.x + (-0.5));
        float _2047 = _2045 * (_2009.y + (-0.5));
        float _2048 = _2045 * (_2009.z + (-0.5));
        float _2055 = exp2((_2016.w + (-0.5)) * 20.0) * 2.0;
        float _2056 = _2055 * (_2016.x + (-0.5));
        float _2057 = _2055 * (_2016.y + (-0.5));
        float _2058 = _2055 * (_2016.z + (-0.5));
        float _2065 = exp2((_2023.w + (-0.5)) * 20.0) * 2.0;
        float _2066 = _2065 * (_2023.x + (-0.5));
        float _2067 = _2065 * (_2023.y + (-0.5));
        float _2068 = _2065 * (_2023.z + (-0.5));
        float _2069 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2070 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2071 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
        float _2072 = _2036 * 0.5;
        float _2073 = _2046 * 0.5;
        float _2074 = _2056 * 0.5;
        float _2075 = dot(vec3(_2072, _2073, _2074), vec3(_2072, _2073, _2074));
        float _2080 = (_2075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2075);
        float _2088 = (dot(vec3(_1346, _1347, _1348), vec3(_2080 * _2072, _2080 * _2073, _2080 * _2074)) + 1.0) * 0.5;
        float _4823 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2097 = sqrt(((_2073 * _2073) + (_2072 * _2072)) + (_2074 * _2074)) / (_2069 + 9.9999997473787516355514526367188e-06);
        float _4834 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2098 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
        float _2099 = _2098 * 2.0;
        float _2103 = (1.0 - _2098) / (_2098 + 1.0);
        float _4845 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2104 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
        float _2113 = ((((1.0 - _2104) * (_2099 + 2.0)) * exp2(log2(isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0))) * (_2099 + 1.0))) + _2104) * _2069;
        float _2114 = _2037 * 0.5;
        float _2115 = _2047 * 0.5;
        float _2116 = _2057 * 0.5;
        float _2117 = dot(vec3(_2114, _2115, _2116), vec3(_2114, _2115, _2116));
        float _2122 = (_2117 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2117);
        float _2130 = (dot(vec3(_1346, _1347, _1348), vec3(_2122 * _2114, _2122 * _2115, _2122 * _2116)) + 1.0) * 0.5;
        float _4856 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2139 = sqrt(((_2115 * _2115) + (_2114 * _2114)) + (_2116 * _2116)) / (_2070 + 9.9999997473787516355514526367188e-06);
        float _4867 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2140 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
        float _2141 = _2140 * 2.0;
        float _2145 = (1.0 - _2140) / (_2140 + 1.0);
        float _4878 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2146 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
        float _2155 = ((((1.0 - _2146) * (_2141 + 2.0)) * exp2(log2(isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0))) * (_2141 + 1.0))) + _2146) * _2070;
        float _2156 = _2038 * 0.5;
        float _2157 = _2048 * 0.5;
        float _2158 = _2058 * 0.5;
        float _2159 = dot(vec3(_2156, _2157, _2158), vec3(_2156, _2157, _2158));
        float _2164 = (_2159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2159);
        float _2172 = (dot(vec3(_1346, _1347, _1348), vec3(_2164 * _2156, _2164 * _2157, _2164 * _2158)) + 1.0) * 0.5;
        float _4889 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2181 = sqrt(((_2157 * _2157) + (_2156 * _2156)) + (_2158 * _2158)) / (_2071 + 9.9999997473787516355514526367188e-06);
        float _4900 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2182 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
        float _2183 = _2182 * 2.0;
        float _2187 = (1.0 - _2182) / (_2182 + 1.0);
        float _4911 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2188 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
        float _2197 = ((((1.0 - _2188) * (_2183 + 2.0)) * exp2(log2(isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0))) * (_2183 + 1.0))) + _2188) * _2071;
        _2205 = _2038;
        _2206 = _2037;
        _2207 = _2036;
        _2208 = _2048;
        _2209 = _2047;
        _2210 = _2046;
        _2211 = _2058;
        _2212 = _2057;
        _2213 = _2056;
        _2214 = _2071;
        _2215 = _2070;
        _2216 = _2069;
        _2217 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0)));
        _2218 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0)));
        _2219 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0)));
    }
    else
    {
        _2205 = _1900;
        _2206 = _1900;
        _2207 = _1900;
        _2208 = _1900;
        _2209 = _1900;
        _2210 = _1900;
        _2211 = _1900;
        _2212 = _1900;
        _2213 = _1900;
        _2214 = _1900;
        _2215 = _1900;
        _2216 = _1900;
        _2217 = 0.0;
        _2218 = 0.0;
        _2219 = 0.0;
    }
    float _2229 = (cbModelParam._m0[1u].x * (_2217 - _1912)) + _1912;
    float _2230 = (cbModelParam._m0[1u].x * (_2218 - _1913)) + _1913;
    float _2231 = (cbModelParam._m0[1u].x * (_2219 - _1914)) + _1914;
    float _2252 = fma(_2231, cbSceneParam._m0[89u].z, fma(_2230, cbSceneParam._m0[89u].y, _2229 * cbSceneParam._m0[89u].x));
    float _2255 = fma(_2231, cbSceneParam._m0[90u].z, fma(_2230, cbSceneParam._m0[90u].y, _2229 * cbSceneParam._m0[90u].x));
    float _2258 = fma(_2231, cbSceneParam._m0[91u].z, fma(_2230, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2229));
    float _2271 = _1544 * 0.5;
    float _2272 = _1545 * 0.5;
    float _2273 = _1546 * 0.5;
    float _2274 = dot(vec4(_2271, _2272, _2273, 1.0), vec4(_2207, _2210, _2213, _2216));
    float _2277 = dot(vec4(_2271, _2272, _2273, 1.0), vec4(_2206, _2209, _2212, _2215));
    float _2280 = dot(vec4(_2271, _2272, _2273, 1.0), vec4(_2205, _2208, _2211, _2214));
    float _2314;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2287 = dot(vec4(_2271, _2272, _2273, 1.0), vec4(_1899, _1903, _1906, _1909));
        float _2291 = dot(vec4(_2271, _2272, _2273, 1.0), vec4(_1901, _1904, _1907, _1910));
        float _2295 = dot(vec4(_2271, _2272, _2273, 1.0), vec4(_1902, _1905, _1908, _1911));
        float _2302 = dot(vec4(cbModelParam._m0[39u]), vec4(_2271, _2272, _2273, 1.0));
        _2314 = dot(vec3(isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0)), isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0)), isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2302) ? 0.0 : (isnan(0.0) ? _2302 : max(0.0, _2302))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2314 = 1.0;
    }
    float _2325;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2316 = dot(vec4(cbModelParam._m0[40u]), vec4(_2271, _2272, _2273, 1.0));
        _2325 = dot(vec3(isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0)), isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0)), isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2316) ? 0.0 : (isnan(0.0) ? _2316 : max(0.0, _2316))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2325 = 1.0;
    }
    float _2329 = (_2325 * cbModelParam._m0[1u].x) + (_2314 * (1.0 - cbModelParam._m0[1u].x));
    float _2339 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1350);
    float _2340 = isnan(_2339) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2339 : min(cbModelParam._m0[25u].z, _2339));
    float _2420;
    float _2422;
    float _2424;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2387 = fma(_1603, cbModelParam._m0[13u].z, fma(_1599, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1595)) + cbModelParam._m0[13u].w;
        float _2391 = fma(_1603, cbModelParam._m0[14u].z, fma(_1599, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1595)) + cbModelParam._m0[14u].w;
        float _2395 = fma(_1603, cbModelParam._m0[15u].z, fma(_1599, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1595)) + cbModelParam._m0[15u].w;
        float _2398 = fma(_1546, cbModelParam._m0[13u].z, fma(_1545, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1544));
        float _2401 = fma(_1546, cbModelParam._m0[14u].z, fma(_1545, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1544));
        float _2404 = fma(_1546, cbModelParam._m0[15u].z, fma(_1545, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1544));
        float _2432;
        if (_2398 > 0.0)
        {
            _2432 = abs((1.0 - _2387) / _2398);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_2398 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_2387 + 1.0) / _2398);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _2432 = frontier_phi_16_14_ladder;
        }
        float _2844;
        if (_2401 > 0.0)
        {
            _2844 = abs((1.0 - _2391) / _2401);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2401 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2391 + 1.0) / _2401);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2844 = frontier_phi_25_21_ladder;
        }
        float _3296;
        if (_2404 > 0.0)
        {
            _3296 = abs((1.0 - _2395) / _2404);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_2404 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_2395 + 1.0) / _2404);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _3296 = frontier_phi_39_32_ladder;
        }
        float _3298 = isnan(_2844) ? _2432 : (isnan(_2432) ? _2844 : min(_2432, _2844));
        float _3299 = isnan(_3296) ? _3298 : (isnan(_3298) ? _3296 : min(_3298, _3296));
        float _3303 = (_3299 * _2398) + _2387;
        float _3304 = (_3299 * _2401) + _2391;
        float _3305 = (_3299 * _2404) + _2395;
        float _3306 = _3299 * 9.9999997473787516355514526367188e-05;
        float _3308 = (-1.0) - _3306;
        float _3310 = _3306 + 1.0;
        float frontier_phi_15_39_ladder;
        float frontier_phi_15_39_ladder_1;
        float frontier_phi_15_39_ladder_2;
        if ((_3305 > _3310) || ((_3305 < _3308) || ((_3304 > _3310) || ((_3304 < _3308) || ((_3303 < _3308) || (_3303 > _3310))))))
        {
            frontier_phi_15_39_ladder = 0.0;
            frontier_phi_15_39_ladder_1 = 0.0;
            frontier_phi_15_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3514 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_3305, cbModelParam._m0[9u].z, fma(_3304, cbModelParam._m0[9u].y, _3303 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_3305, cbModelParam._m0[10u].z, fma(_3304, cbModelParam._m0[10u].y, _3303 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_3305, cbModelParam._m0[11u].z, fma(_3304, cbModelParam._m0[11u].y, _3303 * cbModelParam._m0[11u].x))), _2340);
            frontier_phi_15_39_ladder = _3514.z * cbModelParam._m0[1u].y;
            frontier_phi_15_39_ladder_1 = _3514.y * cbModelParam._m0[1u].y;
            frontier_phi_15_39_ladder_2 = _3514.x * cbModelParam._m0[1u].y;
        }
        _2420 = frontier_phi_15_39_ladder_2;
        _2422 = frontier_phi_15_39_ladder_1;
        _2424 = frontier_phi_15_39_ladder;
    }
    else
    {
        vec4 _2408 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1544, _1545, _1546), _2340);
        _2420 = _2408.x * cbModelParam._m0[1u].y;
        _2422 = _2408.y * cbModelParam._m0[1u].y;
        _2424 = _2408.z * cbModelParam._m0[1u].y;
    }
    float _2428 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1350);
    float _2429 = isnan(_2428) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2428 : min(cbModelParam._m0[25u].w, _2428));
    float _2518;
    float _2520;
    float _2522;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2482 = fma(_1603, cbModelParam._m0[21u].z, fma(_1599, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1595)) + cbModelParam._m0[21u].w;
        float _2486 = fma(_1603, cbModelParam._m0[22u].z, fma(_1599, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1595)) + cbModelParam._m0[22u].w;
        float _2490 = fma(_1603, cbModelParam._m0[23u].z, fma(_1599, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1595)) + cbModelParam._m0[23u].w;
        float _2493 = fma(_1546, cbModelParam._m0[21u].z, fma(_1545, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1544));
        float _2496 = fma(_1546, cbModelParam._m0[22u].z, fma(_1545, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1544));
        float _2499 = fma(_1546, cbModelParam._m0[23u].z, fma(_1545, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1544));
        float _2849;
        if (_2493 > 0.0)
        {
            _2849 = abs((1.0 - _2482) / _2493);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_2493 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_2482 + 1.0) / _2493);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2849 = frontier_phi_27_23_ladder;
        }
        float _3323;
        if (_2496 > 0.0)
        {
            _3323 = abs((1.0 - _2486) / _2496);
        }
        else
        {
            float frontier_phi_41_34_ladder;
            if (_2496 < 0.0)
            {
                frontier_phi_41_34_ladder = abs((_2486 + 1.0) / _2496);
            }
            else
            {
                frontier_phi_41_34_ladder = 5000.0;
            }
            _3323 = frontier_phi_41_34_ladder;
        }
        float _3575;
        if (_2499 > 0.0)
        {
            _3575 = abs((1.0 - _2490) / _2499);
        }
        else
        {
            float frontier_phi_56_50_ladder;
            if (_2499 < 0.0)
            {
                frontier_phi_56_50_ladder = abs((_2490 + 1.0) / _2499);
            }
            else
            {
                frontier_phi_56_50_ladder = 5000.0;
            }
            _3575 = frontier_phi_56_50_ladder;
        }
        float _3577 = isnan(_3323) ? _2849 : (isnan(_2849) ? _3323 : min(_2849, _3323));
        float _3578 = isnan(_3575) ? _3577 : (isnan(_3577) ? _3575 : min(_3577, _3575));
        float _3582 = (_3578 * _2493) + _2482;
        float _3583 = (_3578 * _2496) + _2486;
        float _3584 = (_3578 * _2499) + _2490;
        float _3585 = _3578 * 9.9999997473787516355514526367188e-05;
        float _3586 = (-1.0) - _3585;
        float _3588 = _3585 + 1.0;
        float frontier_phi_24_56_ladder;
        float frontier_phi_24_56_ladder_1;
        float frontier_phi_24_56_ladder_2;
        if ((_3584 > _3588) || ((_3584 < _3586) || ((_3583 > _3588) || ((_3583 < _3586) || ((_3582 < _3586) || (_3582 > _3588))))))
        {
            frontier_phi_24_56_ladder = 0.0;
            frontier_phi_24_56_ladder_1 = 0.0;
            frontier_phi_24_56_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3855 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3584, cbModelParam._m0[17u].z, fma(_3583, cbModelParam._m0[17u].y, _3582 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3584, cbModelParam._m0[18u].z, fma(_3583, cbModelParam._m0[18u].y, _3582 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3584, cbModelParam._m0[19u].z, fma(_3583, cbModelParam._m0[19u].y, _3582 * cbModelParam._m0[19u].x))), _2429);
            frontier_phi_24_56_ladder = _3855.y * cbModelParam._m0[1u].z;
            frontier_phi_24_56_ladder_1 = _3855.z * cbModelParam._m0[1u].z;
            frontier_phi_24_56_ladder_2 = _3855.x * cbModelParam._m0[1u].z;
        }
        _2518 = frontier_phi_24_56_ladder_2;
        _2520 = frontier_phi_24_56_ladder;
        _2522 = frontier_phi_24_56_ladder_1;
    }
    else
    {
        vec4 _2502 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1544, _1545, _1546), _2429);
        _2518 = _2502.x * cbModelParam._m0[1u].z;
        _2520 = _2502.y * cbModelParam._m0[1u].z;
        _2522 = _2502.z * cbModelParam._m0[1u].z;
    }
    float _2534 = ((((1.0 - _1564) * ((_1552 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1564 * _1552)) * _1523;
    float _2535 = _2534 * ((cbModelParam._m0[1u].w * (_2518 - _2420)) + _2420);
    float _2536 = _2534 * ((cbModelParam._m0[1u].w * (_2520 - _2422)) + _2422);
    float _2537 = _2534 * ((cbModelParam._m0[1u].w * (_2522 - _2424)) + _2424);
    float _2540 = fma(_2537, cbSceneParam._m0[89u].z, fma(_2536, cbSceneParam._m0[89u].y, _2535 * cbSceneParam._m0[89u].x));
    float _2543 = fma(_2537, cbSceneParam._m0[90u].z, fma(_2536, cbSceneParam._m0[90u].y, _2535 * cbSceneParam._m0[90u].x));
    float _2546 = fma(_2537, cbSceneParam._m0[91u].z, fma(_2536, cbSceneParam._m0[91u].y, _2535 * cbSceneParam._m0[91u].x));
    float _2565 = (cbSceneParam._m0[88u].y * (1.0 - _1350)) + cbSceneParam._m0[88u].z;
    float _5037 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    vec4 _2569 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(_1164, _1165), (isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0))) * 5.0);
    float _2585 = 1.0 - _2569.w;
    vec4 _2593 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1164, _1165));
    float _2595 = _2593.w;
    float _2607 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2595);
    float _2608 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2595);
    float _2609 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2595);
    uint _2610 = _1499 + 5u;
    uvec4 _2613 = floatBitsToUint(cbInstanceData._m0[_2610]);
    uint _2615 = _2613.x * 14u;
    uint _2616 = _2615 + 13u;
    float _2621 = _1523 + (-1.0);
    float _2624 = (cbLight._m0[_2616].x * _2621) + 1.0;
    float _2625 = (cbLight._m0[_2616].y * _2621) + 1.0;
    uint _2626 = _2615 + 5u;
    float _2632 = isnan(1.0) ? _2625 : (isnan(_2625) ? 1.0 : min(_2625, 1.0));
    uint _2636 = _2615 + 4u;
    float _2645 = isnan(1.0) ? _2624 : (isnan(_2624) ? 1.0 : min(_2624, 1.0));
    uint _2649 = _2615 | 1u;
    float _2660 = dot(vec3(cbLight._m0[_2615].xyz), vec3(_1460, _1461, _1462));
    float _2663 = dot(vec3(cbLight._m0[_2649].xyz), vec3(_1460, _1461, _1462));
    float _5058 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
    float _5069 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
    float _2668 = (isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0))) * 0.3183098733425140380859375;
    float _2670 = (isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0))) * 0.3183098733425140380859375;
    float _2677 = ((cbLight._m0[_2626].x * _2632) * _2670) + (((cbLight._m0[_2636].x * _2607) * _2645) * _2668);
    float _2678 = ((_2632 * cbLight._m0[_2626].y) * _2670) + (((cbLight._m0[_2636].y * _2608) * _2645) * _2668);
    float _2679 = ((_2632 * cbLight._m0[_2626].z) * _2670) + (((cbLight._m0[_2636].z * _2609) * _2645) * _2668);
    uint _2681 = _2615 + 8u;
    float _2694 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2615].w)) * _1350) * 0.949999988079071044921875);
    float _2695 = _2694 * _2694;
    float _2696 = cbLight._m0[_2615].x + _1423;
    float _2697 = cbLight._m0[_2615].y + _1424;
    float _2698 = cbLight._m0[_2615].z + _1425;
    float _2702 = inversesqrt(dot(vec3(_2696, _2697, _2698), vec3(_2696, _2697, _2698)));
    float _2703 = _2702 * _2696;
    float _2704 = _2702 * _2697;
    float _2705 = _2702 * _2698;
    float _2706 = dot(vec3(_1460, _1461, _1462), vec3(cbLight._m0[_2615].xyz));
    float _5080 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
    float _2709 = isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0));
    float _2710 = dot(vec3(_1460, _1461, _1462), vec3(_1423, _1424, _1425));
    float _5091 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
    float _2713 = isnan(1.0) ? _5091 : (isnan(_5091) ? 1.0 : min(_5091, 1.0));
    float _2714 = dot(vec3(_1460, _1461, _1462), vec3(_2703, _2704, _2705));
    float _5102 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
    float _2717 = isnan(1.0) ? _5102 : (isnan(_5102) ? 1.0 : min(_5102, 1.0));
    float _2718 = dot(vec3(cbLight._m0[_2615].xyz), vec3(_2703, _2704, _2705));
    float _5113 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
    float _2722 = _2695 * _2695;
    float _2726 = ((_2717 * _2717) * (_2722 + (-1.0))) + 1.0;
    float _2737 = (exp2(log2(1.0 - (isnan(1.0) ? _5113 : (isnan(_5113) ? 1.0 : min(_5113, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2738 = 1.0 - _2695;
    float _2749 = (0.5 / (((_2713 * ((_2709 * _2738) + _2695)) + 9.9999999392252902907785028219223e-09) + (((_2713 * _2738) + _2695) * _2709))) * _2709;
    float _5124 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
    float _2751 = (isnan(1.0) ? _5124 : (isnan(_5124) ? 1.0 : min(_5124, 1.0))) * (_2722 / ((_2726 * _2726) * 3.141590118408203125));
    uint _2765 = _2615 + 9u;
    float _2776 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2649].w)) * _1350) * 0.949999988079071044921875);
    float _2777 = _2776 * _2776;
    float _2778 = cbLight._m0[_2649].x + _1423;
    float _2779 = cbLight._m0[_2649].y + _1424;
    float _2780 = cbLight._m0[_2649].z + _1425;
    float _2784 = inversesqrt(dot(vec3(_2778, _2779, _2780), vec3(_2778, _2779, _2780)));
    float _2785 = _2784 * _2778;
    float _2786 = _2784 * _2779;
    float _2787 = _2784 * _2780;
    float _2788 = dot(vec3(_1460, _1461, _1462), vec3(cbLight._m0[_2649].xyz));
    float _5135 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
    float _2791 = isnan(1.0) ? _5135 : (isnan(_5135) ? 1.0 : min(_5135, 1.0));
    float _2792 = dot(vec3(_1460, _1461, _1462), vec3(_2785, _2786, _2787));
    float _5146 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
    float _2795 = isnan(1.0) ? _5146 : (isnan(_5146) ? 1.0 : min(_5146, 1.0));
    float _2796 = dot(vec3(cbLight._m0[_2649].xyz), vec3(_2785, _2786, _2787));
    float _5157 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
    float _2800 = _2777 * _2777;
    float _2804 = ((_2795 * _2795) * (_2800 + (-1.0))) + 1.0;
    float _2813 = (exp2(log2(1.0 - (isnan(1.0) ? _5157 : (isnan(_5157) ? 1.0 : min(_5157, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2814 = 1.0 - _2777;
    float _2824 = (0.5 / (((_2713 * ((_2791 * _2814) + _2777)) + 9.9999999392252902907785028219223e-09) + (((_2713 * _2814) + _2777) * _2791))) * _2791;
    float _5168 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
    float _2826 = (isnan(1.0) ? _5168 : (isnan(_5168) ? 1.0 : min(_5168, 1.0))) * (_2800 / ((_2804 * _2804) * 3.141590118408203125));
    float _2836 = (((_2813 * cbLight._m0[_2765].x) * _2826) * _2632) + ((((cbLight._m0[_2681].x * _2607) * _2737) * _2751) * _2645);
    float _2837 = (((_2813 * cbLight._m0[_2765].y) * _2826) * _2632) + ((((cbLight._m0[_2681].y * _2608) * _2737) * _2751) * _2645);
    float _2838 = (((_2813 * cbLight._m0[_2765].z) * _2826) * _2632) + ((((cbLight._m0[_2681].z * _2609) * _2737) * _2751) * _2645);
    float _2952;
    float _2954;
    float _2956;
    float _2958;
    float _2960;
    float _2962;
    if (_2613.y == 0u)
    {
        float _2893 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2894 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2893;
        float _2895 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2893;
        float _2896 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2893;
        uvec4 _2908 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2909 = _2908.x;
        uint _2920 = uint((float(_2908.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1165) / _2909))) + floor(float(uint(cbSceneParam._m0[85u].x * _1164) / _2909)));
        float _2930 = (log2(_2896 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2931 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
        uint _2934 = uint(isnan(14.0) ? _2931 : (isnan(_2931) ? 14.0 : min(_2931, 14.0)));
        uvec4 _2939 = texelFetch(g_lightClusterGridBuffer, int(((_2934 << 2u) + (_2920 << 6u)) >> 2u));
        uint _2940 = _2939.x;
        uint _2941 = _2908.z;
        float _3114;
        float _3116;
        float _3118;
        float _3120;
        float _3122;
        float _3124;
        if (((((1u << ((_2941 >> 4u) & 15u)) + 4294967295u) & _2940) == 0u) || ((_2941 & 240u) == 0u))
        {
            _3114 = 0.0;
            _3116 = 0.0;
            _3118 = 0.0;
            _3120 = 0.0;
            _3122 = 0.0;
            _3124 = 0.0;
        }
        else
        {
            float _3115;
            float _3117;
            float _3119;
            float _3121;
            float _3123;
            float _3125;
            float _3360 = 0.0;
            float _3361 = 0.0;
            float _3362 = 0.0;
            float _3363 = 0.0;
            float _3364 = 0.0;
            float _3365 = 0.0;
            uint _3366 = 0u;
            uint _3375;
            bool _3376;
            for (;;)
            {
                _3375 = texelFetch(g_lightClassification, int((((_2934 << 5u) + (_2920 << 9u)) + (_3366 << 2u)) >> 2u)).x;
                _3376 = _3375 == 0u;
                float frontier_phi_52_pred;
                float frontier_phi_52_pred_1;
                float frontier_phi_52_pred_2;
                float frontier_phi_52_pred_3;
                float frontier_phi_52_pred_4;
                float frontier_phi_52_pred_5;
                if (_3376)
                {
                    frontier_phi_52_pred = _3362;
                    frontier_phi_52_pred_1 = _3365;
                    frontier_phi_52_pred_2 = _3364;
                    frontier_phi_52_pred_3 = _3363;
                    frontier_phi_52_pred_4 = _3361;
                    frontier_phi_52_pred_5 = _3360;
                }
                else
                {
                    float _3618;
                    float _3619;
                    float _3620;
                    float _3621;
                    float _3622;
                    float _3623;
                    uint _3624;
                    _3618 = _3360;
                    _3619 = _3361;
                    _3620 = _3362;
                    _3621 = _3363;
                    _3622 = _3364;
                    _3623 = _3365;
                    _3624 = _3375;
                    float _3523;
                    float _3524;
                    float _3525;
                    float _3526;
                    float _3527;
                    float _3528;
                    for (;;)
                    {
                        uint _3628 = uint(findLSB(_3624)) + (_3366 << 5u);
                        uint _3625 = (_3624 + 4294967295u) & _3624;
                        uint _3630 = _3628 * 48u;
                        vec4 _3644 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3630)).x, texelFetch(g_PointLightRenderingBuffer, int(_3630 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3630 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3630 + 3u)).x));
                        uint _3650 = (_3628 * 48u) + 4u;
                        vec4 _3663 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3650)).x, texelFetch(g_PointLightRenderingBuffer, int(_3650 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3650 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3650 + 3u)).x));
                        uint _3669 = (_3628 * 48u) + 8u;
                        vec3 _3680 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3669)).x, texelFetch(g_PointLightRenderingBuffer, int(_3669 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3669 + 2u)).x));
                        float _3684 = _3644.x - _2894;
                        float _3685 = _3644.y - _2895;
                        float _3686 = _3644.z - _2896;
                        float _3687 = dot(vec3(_3684, _3685, _3686), vec3(_3684, _3685, _3686));
                        float _3690 = inversesqrt(_3687);
                        float _3691 = _3690 * _3684;
                        float _3692 = _3690 * _3685;
                        float _3693 = _3690 * _3686;
                        float _3694 = dot(vec3(_1480, _1483, _1486), vec3(_3691, _3692, _3693));
                        float _3699 = 1.0 - (_3687 * _3644.w);
                        float _5189 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                        float _3700 = isnan(1.0) ? _5189 : (isnan(_5189) ? 1.0 : min(_5189, 1.0));
                        float _3701 = sqrt(_3687) * _3663.w;
                        float _3704 = 1.39999997615814208984375 / (_3701 + 1.39999997615814208984375);
                        float _3705 = _3704 * _3704;
                        float _3708 = ((1.0 - _3705) * _3694) + _3705;
                        float _3711 = _3701 * _3701;
                        float _3715 = ((isnan(0.0) ? _3708 : (isnan(_3708) ? 0.0 : max(_3708, 0.0))) * _3700) / ((_3711 * 0.699999988079071044921875) + 1.0);
                        float _3719 = (-0.0) - _2894;
                        float _3720 = (-0.0) - _2895;
                        float _3721 = (-0.0) - _2896;
                        float _3725 = inversesqrt(dot(vec3(_3719, _3720, _3721), vec3(_3719, _3720, _3721)));
                        float _3726 = _3725 * _3719;
                        float _3727 = _3725 * _3720;
                        float _3728 = _3725 * _3721;
                        float _3736 = exp2(log2(1.0 / ((_3711 * 3.5) + 5.0)) * 0.25);
                        float _3737 = 1.0 - _1552;
                        float _3744 = sqrt(1.0 - ((1.0 - (_3737 * _3737)) * (1.0 - (_3736 * _3736))));
                        float _3745 = _3744 * _3744;
                        float _3746 = _3745 * _3745;
                        float _3747 = _3726 + _3691;
                        float _3748 = _3727 + _3692;
                        float _3749 = _3728 + _3693;
                        float _3753 = inversesqrt(dot(vec3(_3747, _3748, _3749), vec3(_3747, _3748, _3749)));
                        float _3757 = dot(vec3(_1480, _1483, _1486), vec3(_3726, _3727, _3728));
                        float _5205 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                        float _3760 = isnan(1.0) ? _5205 : (isnan(_5205) ? 1.0 : min(_5205, 1.0));
                        float _3761 = dot(vec3(_1480, _1483, _1486), vec3(_3753 * _3747, _3753 * _3748, _3753 * _3749));
                        float _5216 = isnan(0.0) ? _3761 : (isnan(_3761) ? 0.0 : max(_3761, 0.0));
                        float _3764 = isnan(1.0) ? _5216 : (isnan(_5216) ? 1.0 : min(_5216, 1.0));
                        float _3768 = ((_3764 * _3764) * (_3746 + (-1.0))) + 1.0;
                        float _3769 = _3704 * _3745;
                        float _3770 = _3769 * _3769;
                        float _3773 = ((1.0 - _3770) * _3694) + _3770;
                        float _5227 = isnan(0.0) ? _3773 : (isnan(_3773) ? 0.0 : max(_3773, 0.0));
                        float _3774 = isnan(1.0) ? _5227 : (isnan(_5227) ? 1.0 : min(_5227, 1.0));
                        float _3775 = 1.0 - _3745;
                        float _3785 = (0.5 / (((_3774 * ((_3760 * _3775) + _3745)) + 9.9999999392252902907785028219223e-09) + (((_3774 * _3775) + _3745) * _3760))) * _3774;
                        float _5238 = isnan(0.0) ? _3785 : (isnan(_3785) ? 0.0 : max(_3785, 0.0));
                        float _3796 = (((_3746 * 3.1415927410125732421875) * (isnan(1.0) ? _5238 : (isnan(_5238) ? 1.0 : min(_5238, 1.0)))) / ((_3768 * _3768) * ((_3711 * 2.1991131305694580078125) + 3.141590118408203125))) * _3700;
                        _3526 = (_3715 * _3663.x) + _3621;
                        _3527 = (_3715 * _3663.y) + _3622;
                        _3528 = (_3715 * _3663.z) + _3623;
                        _3523 = (_3796 * _3680.x) + _3618;
                        _3524 = (_3796 * _3680.y) + _3619;
                        _3525 = (_3796 * _3680.z) + _3620;
                        if (_3625 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3618 = _3523;
                            _3619 = _3524;
                            _3620 = _3525;
                            _3621 = _3526;
                            _3622 = _3527;
                            _3623 = _3528;
                            _3624 = _3625;
                        }
                    }
                    frontier_phi_52_pred = _3525;
                    frontier_phi_52_pred_1 = _3528;
                    frontier_phi_52_pred_2 = _3527;
                    frontier_phi_52_pred_3 = _3526;
                    frontier_phi_52_pred_4 = _3524;
                    frontier_phi_52_pred_5 = _3523;
                }
                _3119 = frontier_phi_52_pred;
                _3125 = frontier_phi_52_pred_1;
                _3123 = frontier_phi_52_pred_2;
                _3121 = frontier_phi_52_pred_3;
                _3117 = frontier_phi_52_pred_4;
                _3115 = frontier_phi_52_pred_5;
                uint _3367 = _3366 + 1u;
                if (_3367 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3360 = _3115;
                    _3361 = _3117;
                    _3362 = _3119;
                    _3363 = _3121;
                    _3364 = _3123;
                    _3365 = _3125;
                    _3366 = _3367;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3114 = _3115;
            _3116 = _3117;
            _3118 = _3119;
            _3120 = _3121;
            _3122 = _3123;
            _3124 = _3125;
        }
        uvec4 _3128 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3129 = _3128.z;
        uint _3131 = (_3129 >> 8u) & 15u;
        float _3328;
        float _3330;
        float _3332;
        float _3334;
        float _3336;
        float _3338;
        if (((4294967295u << _3131) & _2940) == 0u)
        {
            _3328 = _3114;
            _3330 = _3116;
            _3332 = _3118;
            _3334 = _3120;
            _3336 = _3122;
            _3338 = _3124;
        }
        else
        {
            float _3353 = inversesqrt(dot(vec3(_2894, _2895, _2896), vec3(_2894, _2895, _2896)));
            float _3354 = _3353 * _2894;
            float _3355 = _3353 * _2895;
            float _3356 = _3353 * _2896;
            float frontier_phi_43_44_ladder;
            float frontier_phi_43_44_ladder_1;
            float frontier_phi_43_44_ladder_2;
            float frontier_phi_43_44_ladder_3;
            float frontier_phi_43_44_ladder_4;
            float frontier_phi_43_44_ladder_5;
            if (_3131 < ((_3129 >> 12u) & 15u))
            {
                float _3329;
                float _3331;
                float _3333;
                float _3335;
                float _3337;
                float _3339;
                float _3601 = _3114;
                float _3602 = _3116;
                float _3603 = _3118;
                float _3604 = _3120;
                float _3605 = _3122;
                float _3606 = _3124;
                uint _3607 = _3131;
                uint _3616;
                bool _3617;
                for (;;)
                {
                    _3616 = texelFetch(g_lightClassification, int((((_2934 << 5u) + (_2920 << 9u)) + (_3607 << 2u)) >> 2u)).x;
                    _3617 = _3616 == 0u;
                    float frontier_phi_63_pred;
                    float frontier_phi_63_pred_1;
                    float frontier_phi_63_pred_2;
                    float frontier_phi_63_pred_3;
                    float frontier_phi_63_pred_4;
                    float frontier_phi_63_pred_5;
                    if (_3617)
                    {
                        frontier_phi_63_pred = _3606;
                        frontier_phi_63_pred_1 = _3605;
                        frontier_phi_63_pred_2 = _3604;
                        frontier_phi_63_pred_3 = _3603;
                        frontier_phi_63_pred_4 = _3602;
                        frontier_phi_63_pred_5 = _3601;
                    }
                    else
                    {
                        float _3860;
                        float _3861;
                        float _3862;
                        float _3863;
                        float _3864;
                        float _3865;
                        float _4153;
                        float _4154;
                        float _4155;
                        float _4156;
                        float _4157;
                        float _4158;
                        float _3873 = _3601;
                        float _3874 = _3602;
                        float _3875 = _3603;
                        float _3876 = _3604;
                        float _3877 = _3605;
                        float _3878 = _3606;
                        uint _3879 = _3616;
                        uint _3880;
                        vec4 _3905;
                        float _3906;
                        vec4 _3921;
                        vec3 _3933;
                        vec4 _3948;
                        vec4 _3963;
                        float _4009;
                        bool _4010;
                        for (;;)
                        {
                            uint _3890 = ((_3607 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3879));
                            _3880 = (_3879 + 4294967295u) & _3879;
                            uint _3892 = _3890 * 40u;
                            _3905 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3892)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3892 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3892 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3892 + 3u)).x));
                            _3906 = _3905.w;
                            uint _3908 = (_3890 * 40u) + 4u;
                            _3921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3908 + 3u)).x));
                            uint _3923 = (_3890 * 40u) + 8u;
                            _3933 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3923)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3923 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3923 + 2u)).x));
                            uint _3935 = (_3890 * 40u) + 16u;
                            _3948 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3935)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3935 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3935 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3935 + 3u)).x));
                            uint _3950 = (_3890 * 40u) + 20u;
                            _3963 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3950 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3950 + 3u)).x));
                            uint _3965 = (_3890 * 40u) + 24u;
                            vec4 _3978 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3965 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3965 + 3u)).x));
                            uint _3984 = (_3890 * 40u) + 28u;
                            vec4 _3997 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3984)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3984 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3984 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3984 + 3u)).x));
                            _4009 = fma(_2896, _3997.z, fma(_2895, _3997.y, _3997.x * _2894)) + _3997.w;
                            _4010 = !((fma(_2896, _3978.z, fma(_2895, _3978.y, _3978.x * _2894)) + _3978.w) <= 0.0);
                            float frontier_phi_69_pred;
                            float frontier_phi_69_pred_1;
                            float frontier_phi_69_pred_2;
                            float frontier_phi_69_pred_3;
                            float frontier_phi_69_pred_4;
                            float frontier_phi_69_pred_5;
                            if (_4010)
                            {
                                float _4037 = _3905.x - _2894;
                                float _4038 = _3905.y - _2895;
                                float _4039 = _3905.z - _2896;
                                float _4040 = dot(vec3(_4037, _4038, _4039), vec3(_4037, _4038, _4039));
                                float _4043 = inversesqrt(_4040);
                                float _4044 = _4043 * _4037;
                                float _4045 = _4043 * _4038;
                                float _4046 = _4043 * _4039;
                                float _4050 = 1.0 - (_4040 / (_3906 * _3906));
                                float _5249 = isnan(0.0) ? _4050 : (isnan(_4050) ? 0.0 : max(_4050, 0.0));
                                float _4051 = isnan(1.0) ? _5249 : (isnan(_5249) ? 1.0 : min(_5249, 1.0));
                                float _4055 = sqrt(_4040) * _3921.w;
                                float _4057 = 1.39999997615814208984375 / (_4055 + 1.39999997615814208984375);
                                float _4058 = _4057 * _4057;
                                float _4061 = ((1.0 - _4058) * dot(vec3(_4044, _4045, _4046), vec3(_1480, _1483, _1486))) + _4058;
                                float _4064 = _4055 * _4055;
                                float _4068 = (fma(_2896, _3948.z, fma(_2895, _3948.y, _3948.x * _2894)) + _3948.w) / _4009;
                                float _4069 = (fma(_2896, _3963.z, fma(_2895, _3963.y, _3963.x * _2894)) + _3963.w) / _4009;
                                float _4073 = 1.0 - dot(vec2(_4068, _4069), vec2(_4068, _4069));
                                float _5265 = isnan(0.0) ? _4073 : (isnan(_4073) ? 0.0 : max(_4073, 0.0));
                                float _4074 = isnan(1.0) ? _5265 : (isnan(_5265) ? 1.0 : min(_5265, 1.0));
                                float _4075 = _4074 * (((isnan(0.0) ? _4061 : (isnan(_4061) ? 0.0 : max(_4061, 0.0))) * _4051) / ((_4064 * 0.699999988079071044921875) + 1.0));
                                float _4087 = exp2(log2(1.0 / ((_4064 * 3.5) + 5.0)) * 0.25);
                                float _4088 = 1.0 - _1552;
                                float _4095 = sqrt(1.0 - ((1.0 - (_4088 * _4088)) * (1.0 - (_4087 * _4087))));
                                float _4096 = _4095 * _4095;
                                float _4097 = _4096 * _4096;
                                float _4098 = _4044 - _3354;
                                float _4099 = _4045 - _3355;
                                float _4100 = _4046 - _3356;
                                float _4104 = inversesqrt(dot(vec3(_4098, _4099, _4100), vec3(_4098, _4099, _4100)));
                                float _4108 = dot(vec3(_1480, _1483, _1486), vec3((-0.0) - _3354, (-0.0) - _3355, (-0.0) - _3356));
                                float _5276 = isnan(0.0) ? _4108 : (isnan(_4108) ? 0.0 : max(_4108, 0.0));
                                float _4111 = isnan(1.0) ? _5276 : (isnan(_5276) ? 1.0 : min(_5276, 1.0));
                                float _4112 = dot(vec3(_1480, _1483, _1486), vec3(_4104 * _4098, _4104 * _4099, _4104 * _4100));
                                float _5287 = isnan(0.0) ? _4112 : (isnan(_4112) ? 0.0 : max(_4112, 0.0));
                                float _4115 = isnan(1.0) ? _5287 : (isnan(_5287) ? 1.0 : min(_5287, 1.0));
                                float _4119 = ((_4115 * _4115) * (_4097 + (-1.0))) + 1.0;
                                float _4120 = _4057 * _4096;
                                float _4121 = _4120 * _4120;
                                float _4127 = ((1.0 - _4121) * dot(vec3(_1480, _1483, _1486), vec3(_4044, _4045, _4046))) + _4121;
                                float _5298 = isnan(0.0) ? _4127 : (isnan(_4127) ? 0.0 : max(_4127, 0.0));
                                float _4128 = isnan(1.0) ? _5298 : (isnan(_5298) ? 1.0 : min(_5298, 1.0));
                                float _4129 = 1.0 - _4096;
                                float _4139 = (0.5 / (((_4128 * ((_4111 * _4129) + _4096)) + 9.9999999392252902907785028219223e-09) + (((_4128 * _4129) + _4096) * _4111))) * _4128;
                                float _5309 = isnan(0.0) ? _4139 : (isnan(_4139) ? 0.0 : max(_4139, 0.0));
                                float _4149 = (_4074 * _4051) * (((_4097 * 3.1415927410125732421875) * (isnan(1.0) ? _5309 : (isnan(_5309) ? 1.0 : min(_5309, 1.0)))) / ((_4119 * _4119) * ((_4064 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_69_pred = _4149 * _3933.z;
                                frontier_phi_69_pred_1 = _4075 * _3921.z;
                                frontier_phi_69_pred_2 = _4075 * _3921.y;
                                frontier_phi_69_pred_3 = _4075 * _3921.x;
                                frontier_phi_69_pred_4 = _4149 * _3933.y;
                                frontier_phi_69_pred_5 = _4149 * _3933.x;
                            }
                            else
                            {
                                frontier_phi_69_pred = 0.0;
                                frontier_phi_69_pred_1 = 0.0;
                                frontier_phi_69_pred_2 = 0.0;
                                frontier_phi_69_pred_3 = 0.0;
                                frontier_phi_69_pred_4 = 0.0;
                                frontier_phi_69_pred_5 = 0.0;
                            }
                            _4155 = frontier_phi_69_pred;
                            _4158 = frontier_phi_69_pred_1;
                            _4157 = frontier_phi_69_pred_2;
                            _4156 = frontier_phi_69_pred_3;
                            _4154 = frontier_phi_69_pred_4;
                            _4153 = frontier_phi_69_pred_5;
                            _3863 = _4156 + _3876;
                            _3864 = _4157 + _3877;
                            _3865 = _4158 + _3878;
                            _3860 = _4153 + _3873;
                            _3861 = _4154 + _3874;
                            _3862 = _4155 + _3875;
                            if (_3880 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3873 = _3860;
                                _3874 = _3861;
                                _3875 = _3862;
                                _3876 = _3863;
                                _3877 = _3864;
                                _3878 = _3865;
                                _3879 = _3880;
                                continue;
                            }
                        }
                        frontier_phi_63_pred = _3865;
                        frontier_phi_63_pred_1 = _3864;
                        frontier_phi_63_pred_2 = _3863;
                        frontier_phi_63_pred_3 = _3862;
                        frontier_phi_63_pred_4 = _3861;
                        frontier_phi_63_pred_5 = _3860;
                    }
                    _3339 = frontier_phi_63_pred;
                    _3337 = frontier_phi_63_pred_1;
                    _3335 = frontier_phi_63_pred_2;
                    _3333 = frontier_phi_63_pred_3;
                    _3331 = frontier_phi_63_pred_4;
                    _3329 = frontier_phi_63_pred_5;
                    uint _3608 = _3607 + 1u;
                    if (_3608 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3601 = _3329;
                        _3602 = _3331;
                        _3603 = _3333;
                        _3604 = _3335;
                        _3605 = _3337;
                        _3606 = _3339;
                        _3607 = _3608;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_43_44_ladder = _3339;
                frontier_phi_43_44_ladder_1 = _3329;
                frontier_phi_43_44_ladder_2 = _3337;
                frontier_phi_43_44_ladder_3 = _3335;
                frontier_phi_43_44_ladder_4 = _3333;
                frontier_phi_43_44_ladder_5 = _3331;
            }
            else
            {
                frontier_phi_43_44_ladder = _3124;
                frontier_phi_43_44_ladder_1 = _3114;
                frontier_phi_43_44_ladder_2 = _3122;
                frontier_phi_43_44_ladder_3 = _3120;
                frontier_phi_43_44_ladder_4 = _3118;
                frontier_phi_43_44_ladder_5 = _3116;
            }
            _3328 = frontier_phi_43_44_ladder_1;
            _3330 = frontier_phi_43_44_ladder_5;
            _3332 = frontier_phi_43_44_ladder_4;
            _3334 = frontier_phi_43_44_ladder_3;
            _3336 = frontier_phi_43_44_ladder_2;
            _3338 = frontier_phi_43_44_ladder;
        }
        float _3343 = isnan(1.0) ? _1523 : (isnan(_1523) ? 1.0 : min(_1523, 1.0));
        _2952 = (_3343 * _3334) + _2677;
        _2954 = (_3343 * _3336) + _2678;
        _2956 = (_3343 * _3338) + _2679;
        _2958 = ((_3328 * 0.039999999105930328369140625) * _3343) + _2836;
        _2960 = ((_3330 * 0.039999999105930328369140625) * _3343) + _2837;
        _2962 = ((_3332 * 0.039999999105930328369140625) * _3343) + _2838;
    }
    else
    {
        _2952 = _2677;
        _2954 = _2678;
        _2956 = _2679;
        _2958 = _2836;
        _2960 = _2837;
        _2962 = _2838;
    }
    uint _2968 = _1500 + uint(cbMatDynParam._m0[0u].w);
    float _2995 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2996 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2997 = cbSceneParam._m0[86u].x * ((_1164 / cbSceneParam._m0[86u].x) + (((10.0 / (_1367 + 10.0)) * cbMtdParam._m0[19u].y) * dot(vec3(_1460, _1461, _1462), vec3(_230, _231, _232))));
    float _2998 = isnan(_2995) ? _2997 : (isnan(_2997) ? _2995 : min(_2997, _2995));
    float _2999 = isnan(_2996) ? _1165 : (isnan(_1165) ? _2996 : min(_1165, _2996));
    vec4 _3001 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2998, _2999), 0.0);
    float _3003 = _3001.x;
    bool _3023 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3003)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3003))) > _1367;
    float _3024 = _3023 ? _2998 : _1164;
    float _3025 = _3023 ? _2999 : _1165;
    vec4 _3027 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_3024, _3025));
    vec4 _3033 = texture(sampler2D(g_ScreenSpaceShadowTexture, SS_WrapLinear), vec2(_3024, _3025));
    float _3035 = _3033.w;
    vec4 _3048 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_3024, _3025));
    float _3050 = _3048.x;
    bool _3055 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _3064 = (-0.0) - cbSceneParam._m0[2u].z;
    float _3070 = (_3055 ? (_3064 / (cbSceneParam._m0[2u].x - _3050)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3050))) - _1367;
    float _3072 = cbMtdParam._m0[40u].x + cbMtdParam._m0[38u].z;
    float _3073 = cbMtdParam._m0[40u].y + cbMtdParam._m0[38u].w;
    float _3074 = cbMtdParam._m0[40u].z + cbMtdParam._m0[39u].x;
    bool _3080 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _3084 = (isnan(_3070) ? 0.0 : (isnan(0.0) ? _3070 : max(0.0, _3070))) * (-1.44269502162933349609375);
    float _5340 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
    float _5351 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
    float _5362 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
    float _3217;
    float _3218;
    float _3219;
    if ((1.0 - _1149) > 0.00999999977648258209228515625)
    {
        vec4 _3136 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_3024, _3025), 0.0);
        float _3138 = _3136.x;
        float _3144 = (_3055 ? (_3064 / (cbSceneParam._m0[2u].x - _3138)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3138))) - _1367;
        uint _3150 = floatBitsToUint(cbInstanceData._m0[_2610]).x * 14u;
        uint _3156 = _3150 + 4u;
        float _3165 = dot(vec3(cbLight._m0[_3150].xyz), vec3(_251, _252, _253));
        float _3173 = dot(vec3((-0.0) - _1423, (-0.0) - _1424, (-0.0) - _1425), vec3((-0.0) - _251, (-0.0) - _252, (-0.0) - _253));
        float _3178 = ((isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0))) / (isnan(0.001000000047497451305389404296875) ? _3165 : (isnan(_3165) ? 0.001000000047497451305389404296875 : max(_3165, 0.001000000047497451305389404296875)))) + 1.0;
        float _3180 = (-0.0) - ((isnan(_3144) ? 0.0 : (isnan(0.0) ? _3144 : max(0.0, _3144))) * _3178);
        _3217 = _3080 ? 0.0 : ((((cbMtdParam._m0[38u].z * 0.079577468335628509521484375) * cbLight._m0[_3156].x) / ((_3178 * _3072) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_3072 * 1.44269502162933349609375) * _3180)));
        _3218 = _3080 ? 0.0 : ((((cbMtdParam._m0[38u].w * 0.079577468335628509521484375) * cbLight._m0[_3156].y) / ((_3178 * _3073) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_3073 * 1.44269502162933349609375) * _3180)));
        _3219 = _3080 ? 0.0 : ((((cbMtdParam._m0[39u].x * 0.079577468335628509521484375) * cbLight._m0[_3156].z) / ((_3178 * _3074) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_3074 * 1.44269502162933349609375) * _3180)));
    }
    else
    {
        _3217 = 0.0;
        _3218 = 0.0;
        _3219 = 0.0;
    }
    float _3236 = 0.959999978542327880859375 - (exp2(log2(1.0 - (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0)))) * 5.0) * 0.959999978542327880859375);
    float _3237 = (_3217 + ((exp2(_3084 * (_3080 ? 0.0 : _3072)) * (((_3035 * (((cbMtdParam._m0[29u].y - _1274) * _620) + _1274)) * cbSceneParam._m0[72u].z) + _3027.x)) * cbSceneParam._m0[72u].w)) * _3236;
    float _3238 = (_3218 + ((exp2(_3084 * (_3080 ? 0.0 : _3073)) * (((_3035 * (((cbMtdParam._m0[29u].y - _1275) * _620) + _1275)) * cbSceneParam._m0[72u].z) + _3027.y)) * cbSceneParam._m0[72u].w)) * _3236;
    float _3239 = (_3219 + ((exp2(_3084 * (_3080 ? 0.0 : _3074)) * (((_3035 * (((cbMtdParam._m0[29u].y - _1276) * _620) + _1276)) * cbSceneParam._m0[72u].z) + _3027.z)) * cbSceneParam._m0[72u].w)) * _3236;
    float _3248 = (((cbInstanceData._m0[_2968].x * (((((_960 * cbMtdParam._m0[11u].x) - _924) + (((((cbMtdParam._m0[13u].x - cbMtdParam._m0[12u].x) * _960) * cbMtdParam._m0[29u].x) + cbMtdParam._m0[12u].x) * _983.x)) * _932) + _924)) + (((((_2534 * _2569.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0))) * _2329) * _2585)) + _2958) * cbPerFrame._m0[3u].x)) + _3237) + ((((isnan(1.0) ? _5340 : (isnan(_5340) ? 1.0 : min(_5340, 1.0))) * (_2952 + ((isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0))) * _1523))) - _3237) * _1149);
    float _3251 = (((cbInstanceData._m0[_2968].y * (((((_961 * cbMtdParam._m0[11u].y) - _925) + (((((cbMtdParam._m0[13u].y - cbMtdParam._m0[12u].y) * _961) * cbMtdParam._m0[29u].x) + cbMtdParam._m0[12u].y) * _983.y)) * _932) + _925)) + (((((_2534 * _2569.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0))) * _2329) * _2585)) + _2960) * cbPerFrame._m0[3u].x)) + _3238) + ((((isnan(1.0) ? _5351 : (isnan(_5351) ? 1.0 : min(_5351, 1.0))) * (_2954 + ((isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0))) * _1523))) - _3238) * _1149);
    float _3254 = (((cbInstanceData._m0[_2968].z * (((((_962 * cbMtdParam._m0[11u].z) - _926) + ((((cbMtdParam._m0[29u].x * _962) * (cbMtdParam._m0[13u].z - cbMtdParam._m0[12u].z)) + cbMtdParam._m0[12u].z) * _983.z)) * _932) + _926)) + (((((_2534 * _2569.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0))) * _2329) * _2585)) + _2962) * cbPerFrame._m0[3u].x)) + _3239) + ((((isnan(1.0) ? _5362 : (isnan(_5362) ? 1.0 : min(_5362, 1.0))) * (_2956 + ((isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0))) * _1523))) - _3239) * _1149);
    float _3267 = _1164 / cbSceneParam._m0[86u].x;
    float _3268 = _1165 / cbSceneParam._m0[86u].y;
    vec4 _3282 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3267, _3268, (log2((isnan(cbSceneParam._m0[77u].w) ? _1367 : (isnan(_1367) ? cbSceneParam._m0[77u].w : min(_1367, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3284 = _3282.x;
    float _3285 = _3282.y;
    float _3286 = _3282.z;
    float _3287 = _3282.w;
    float _3416;
    float _3418;
    float _3420;
    float _3422;
    if (_1367 > cbSceneParam._m0[78u].w)
    {
        float _3381 = isnan(_1367) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1367 : min(cbSceneParam._m0[80u].w, _1367));
        float _3382 = _3381 / _1367;
        float _3393 = _3382 * _1416;
        float _3394 = _1417 * _3382;
        float _3395 = (-0.0) - _3394;
        float _3396 = _3382 * _1418;
        float _3398 = (cbSceneParam._m0[77u].w * _3395) / _3381;
        float _3399 = _3398 + cbSceneParam._m0[79u].w;
        float _3400 = cbSceneParam._m0[79u].w - _3394;
        float _3406 = sqrt(((_3393 * _3393) + (_3394 * _3394)) + (_3396 * _3396));
        float _3409 = (1.0 - (cbSceneParam._m0[77u].w / _3381)) * _3406;
        float _3414 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3415 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3801;
        if (abs((_3395 - _3398) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3801 = ((((_3399 > 0.0) ? exp2(_3414 * _3399) : (2.0 - exp2(_3415 * _3399))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3409;
        }
        else
        {
            float _3548 = 1.0 / cbSceneParam._m0[80u].x;
            float _3549 = isnan(_3400) ? _3399 : (isnan(_3399) ? _3400 : max(_3399, _3400));
            float _3550 = isnan(_3400) ? _3399 : (isnan(_3399) ? _3400 : min(_3399, _3400));
            float _3559 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : min(_3549, 0.0));
            float _3560 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : min(_3550, 0.0));
            _3801 = ((abs(_3406 / _3395) * cbSceneParam._m0[80u].y) * ((((_3559 - _3560) * 2.0) - ((exp2(_3414 * (isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0)))) - exp2(_3414 * (isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0))))) * _3548)) - ((exp2(_3415 * _3559) - exp2(_3415 * _3560)) * _3548))) + (_3409 * cbSceneParam._m0[80u].z);
        }
        vec4 _3803 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3267, _3268, 1.0), 0.0);
        float _3812 = exp2((_3801 * (-1.44269502162933349609375)) * (1.0 - _3803.w));
        float _3813 = log2(_3812);
        float _3829 = log2(_3287);
        _3416 = (exp2(_3829 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3813 * cbSceneParam._m0[78u].x)) * _3803.x) / cbSceneParam._m0[78u].x)) + _3284;
        _3418 = (exp2(_3829 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3813 * cbSceneParam._m0[78u].y)) * _3803.y) / cbSceneParam._m0[78u].y)) + _3285;
        _3420 = (exp2(_3829 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3813 * cbSceneParam._m0[78u].z)) * _3803.z) / cbSceneParam._m0[78u].z)) + _3286;
        _3422 = _3812 * _3287;
    }
    else
    {
        _3416 = _3284;
        _3418 = _3285;
        _3420 = _3286;
        _3422 = _3287;
    }
    bool _3434 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _3435 = log2(_3422);
    float _3442 = exp2(_3435 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0)));
    float _3443 = exp2(_3435 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0)));
    float _3444 = exp2(_3435 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0)));
    vec4 _3452 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_1164, _1165));
    float _3454 = _3452.x;
    float _3475 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3454)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3454))) - _1367) * cbMtdParam._m0[23u].y;
    float _5443 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
    float _3477 = (cbInstanceData._m0[_1499 + 6u].w * (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) * (isnan(1.0) ? _5443 : (isnan(_5443) ? 1.0 : min(_5443, 1.0)));
    float _3486 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3486 * (_3434 ? _3442 : (_3442 + (cbSceneParam._m0[72u].w * _3416)));
    SV_Target.y = _3486 * (_3434 ? _3443 : (_3443 + (cbSceneParam._m0[72u].w * _3418)));
    SV_Target.z = _3486 * (_3434 ? _3444 : (_3444 + (cbSceneParam._m0[72u].w * _3420)));
    SV_Target.w = _3477;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3477;
}


