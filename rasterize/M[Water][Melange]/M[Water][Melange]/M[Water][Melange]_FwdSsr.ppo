#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[43];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 0, std140) uniform cbPerSceneUBO
{
    vec4 _m0[39];
} cbPerScene;

layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 26) uniform texture2D g_PrevFrameTexture;
layout(set = 0, binding = 27) uniform texture2D g_ConvertedDepthTexture;
layout(set = 0, binding = 0) uniform texture2D M_Water_Melange_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Melange_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Melange_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    float _129 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _130 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _131 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _137 = inversesqrt(dot(vec3(_129, _130, _131), vec3(_129, _130, _131)));
    float _144 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _145 = _144 * NORMAL.x;
    float _146 = _144 * NORMAL.y;
    float _147 = _144 * NORMAL.z;
    float _151 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _159;
    float _160;
    float _161;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _159 = (-0.0) - _145;
        _160 = (-0.0) - _146;
        _161 = (-0.0) - _147;
    }
    else
    {
        _159 = _145;
        _160 = _146;
        _161 = _147;
    }
    float _193 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _201 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _205 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _215 = cbSceneParam._m0[71u].x - (_193 / _205);
    float _216 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _205);
    float _217 = cbSceneParam._m0[71u].z - (_201 / _205);
    float _233 = cbMtdParam._m0[21u].x - cbMtdParam._m0[20u].w;
    float _235 = (sqrt(((_215 * _215) + (_216 * _216)) + (_217 * _217)) - cbMtdParam._m0[20u].w) / (isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0)));
    float _245 = cbMtdParam._m0[19u].z * cbPerFrame._m0[22u].x;
    vec4 _266 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_2, SS_BumpMap), vec2((((cbMtdParam._m0[35u].x * TEXCOORD.x) + (_245 * cbMtdParam._m0[35u].z)) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[35u].y * TEXCOORD.y) + (_245 * cbMtdParam._m0[35u].w)) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _269 = _266.x;
    float _270 = _266.y;
    float _1060 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _273 = isnan(1.0) ? _1060 : (isnan(_1060) ? 1.0 : min(_1060, 1.0));
    float _274 = _266.z - _273;
    float _1071 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _275 = isnan(1.0) ? _1071 : (isnan(_1071) ? 1.0 : min(_1071, 1.0));
    float _287 = (_275 * 0.00999999977648258209228515625) + TEXCOORD.x;
    float _289 = (_275 * (-0.00999999977648258209228515625)) + TEXCOORD.y;
    vec4 _302 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_0, SS_BumpMap), vec2(((_287 + (cbMtdParam._m0[30u].z * _245)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_289 + (cbMtdParam._m0[30u].w * _245)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _316 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_0, SS_BumpMap), vec2(((_287 + (cbMtdParam._m0[30u].x * _245)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_289 + (cbMtdParam._m0[30u].y * _245)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _343 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * ((_193 / cbMtdParam._m0[21u].z) + (cbMtdParam._m0[36u].x * _245))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * ((_201 / cbMtdParam._m0[21u].z) + (cbMtdParam._m0[36u].y * _245))) + cbTextureTilingScale._m0[1u].w));
    float _351 = ((cbMtdParam._m0[20u].y - cbMtdParam._m0[19u].x) * _273) + cbMtdParam._m0[19u].x;
    float _1082 = isnan(0.0) ? TEXCOORD_3.y : (isnan(TEXCOORD_3.y) ? 0.0 : max(TEXCOORD_3.y, 0.0));
    float _352 = isnan(1.0) ? _1082 : (isnan(_1082) ? 1.0 : min(_1082, 1.0));
    float _363 = _235 / cbMtdParam._m0[22u].w;
    float _1093 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _364 = isnan(1.0) ? _1093 : (isnan(_1093) ? 1.0 : min(_1093, 1.0));
    float _365 = _275 * 0.23999999463558197021484375;
    float _367 = _275 * (-0.20000000298023223876953125);
    float _378 = cbMtdParam._m0[37u].x * TEXCOORD.x;
    float _379 = cbMtdParam._m0[37u].y * TEXCOORD.y;
    vec4 _388 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[36u].z * _245) + _365) + _378) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[36u].w * _245) + _367) + _379) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _404 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_0, SS_BumpMap), vec2((((_378 + _365) + (cbMtdParam._m0[37u].z * _245)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_379 + _367) + (cbMtdParam._m0[37u].w * _245)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _426 = (((_316.x + (-0.5)) * 0.5) + _302.x) + (((_388.x + (-1.0)) + _404.x) * cbMtdParam._m0[24u].w);
    float _427 = (((_316.y + (-0.5)) * 0.5) + _302.y) + (((_388.y + (-1.0)) + _404.y) * cbMtdParam._m0[24u].w);
    float _432 = ((_343.x - _426) * _364) + _426;
    float _433 = ((_343.y - _427) * _364) + _427;
    float _435 = _235 / cbMtdParam._m0[22u].y;
    float _1104 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _436 = isnan(1.0) ? _1104 : (isnan(_1104) ? 1.0 : min(_1104, 1.0));
    float _453 = ((((_352 * (0.5 - _269)) + _269) + (((_432 + (-0.5)) + ((0.5 - _432) * _436)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _454 = ((((_352 * (0.5 - _270)) + _270) + (((_433 + (-0.5)) + ((0.5 - _433) * _436)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _455 = dot(vec2(_453, _454), vec2(_453, _454));
    float _1115 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _460 = sqrt(1.0 - (isnan(1.0) ? _1115 : (isnan(_1115) ? 1.0 : min(_1115, 1.0))));
    float _463 = fma(_460, _159, fma(_454, _151 * TANGENT.x, (_137 * _129) * _453));
    float _466 = fma(_460, _160, fma(_454, _151 * TANGENT.y, (_137 * _130) * _453));
    float _469 = fma(_460, _161, fma(_454, _151 * TANGENT.z, (_137 * _131) * _453));
    float _473 = inversesqrt(dot(vec3(_463, _466, _469), vec3(_463, _466, _469)));
    float _474 = _473 * _463;
    float _475 = _473 * _466;
    float _476 = _473 * _469;
    float _1126 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _477 = isnan(1.0) ? _1126 : (isnan(_1126) ? 1.0 : min(_1126, 1.0));
    float _491 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _493 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _502 = (_493.x * 2.0) + (-1.0);
    float _503 = (_493.y * 2.0) + (-1.0);
    float _504 = (_493.z * 2.0) + (-1.0);
    float _508 = inversesqrt(dot(vec3(_502, _503, _504), vec3(_502, _503, _504)));
    float _519 = ((TEXCOORD.w >= 1.0) || (((TEXCOORD.z <= 0.0) || (TEXCOORD.z >= 1.0)) || (TEXCOORD.w <= 0.0))) ? 0.0 : _493.w;
    float _526 = (((_502 * _508) - _474) * _519) + _474;
    float _527 = (((_503 * _508) - _475) * _519) + _475;
    float _528 = (((_504 * _508) - _476) * _519) + _476;
    float _529 = POSITION_1.x / POSITION_1.w;
    float _530 = POSITION_1.y / POSITION_1.w;
    float _533 = (_529 * 0.5) + 0.5;
    float _534 = 0.5 - (_530 * 0.5);
    float _539;
    float _541;
    float _543;
    float _545;
    if (_477 < cbPerScene._m0[22u].z)
    {
        _539 = 0.0;
        _541 = 0.0;
        _543 = 0.0;
        _545 = 0.0;
    }
    else
    {
        float _551 = 1.0 / _491;
        float frontier_phi_3_4_ladder;
        float frontier_phi_3_4_ladder_1;
        float frontier_phi_3_4_ladder_2;
        float frontier_phi_3_4_ladder_3;
        if (!(cbPerScene._m0[21u].y >= _551))
        {
            float _573 = fma(_528, cbPerScene._m0[8u].z, fma(_527, cbPerScene._m0[8u].y, cbPerScene._m0[8u].x * _526));
            float _576 = fma(_528, cbPerScene._m0[9u].z, fma(_527, cbPerScene._m0[9u].y, cbPerScene._m0[9u].x * _526));
            float _579 = fma(_528, cbPerScene._m0[10u].z, fma(_527, cbPerScene._m0[10u].y, cbPerScene._m0[10u].x * _526));
            float _586 = (_529 * _491) * cbPerScene._m0[28u].x;
            float _588 = (_530 * _491) * cbPerScene._m0[28u].y;
            float _592 = inversesqrt(dot(vec3(_586, _588, _491), vec3(_586, _588, _491)));
            float _593 = _586 * _592;
            float _594 = _588 * _592;
            float _595 = _592 * _491;
            float _599 = dot(vec3(_593, _594, _595), vec3(_573, _576, _579)) * 2.0;
            float _603 = _593 - (_599 * _573);
            float _604 = _594 - (_599 * _576);
            float _605 = _595 - (_599 * _579);
            float _609 = inversesqrt(dot(vec3(_603, _604, _605), vec3(_603, _604, _605)));
            float _612 = _605 * _609;
            float frontier_phi_3_4_ladder_5_ladder;
            float frontier_phi_3_4_ladder_5_ladder_1;
            float frontier_phi_3_4_ladder_5_ladder_2;
            float frontier_phi_3_4_ladder_5_ladder_3;
            if (_612 < cbPerScene._m0[16u].x)
            {
                frontier_phi_3_4_ladder_5_ladder = 0.0;
                frontier_phi_3_4_ladder_5_ladder_1 = 0.0;
                frontier_phi_3_4_ladder_5_ladder_2 = 0.0;
                frontier_phi_3_4_ladder_5_ladder_3 = 0.0;
            }
            else
            {
                float _624 = abs(dot(vec3((-0.0) - _593, (-0.0) - _594, (-0.0) - _595), vec3(_573, _576, _579)));
                float _1137 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
                float _635 = (((_477 * _477) * 0.959999978542327880859375) * exp2(log2(1.0 - (isnan(1.0) ? _1137 : (isnan(_1137) ? 1.0 : min(_1137, 1.0)))) * 5.0)) + 0.039999999105930328369140625;
                float _644 = (cbPerScene._m0[29u].x * (1.0 - _477)) + cbPerScene._m0[29u].y;
                float _1148 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
                float _652 = ((cbPerScene._m0[23u].w - cbPerScene._m0[23u].z) * (isnan(1.0) ? _1148 : (isnan(_1148) ? 1.0 : min(_1148, 1.0)))) + cbPerScene._m0[23u].z;
                float frontier_phi_3_4_ladder_5_ladder_6_ladder;
                float frontier_phi_3_4_ladder_5_ladder_6_ladder_1;
                float frontier_phi_3_4_ladder_5_ladder_6_ladder_2;
                float frontier_phi_3_4_ladder_5_ladder_6_ladder_3;
                if (_635 < cbPerScene._m0[22u].x)
                {
                    frontier_phi_3_4_ladder_5_ladder_6_ladder = 0.0;
                    frontier_phi_3_4_ladder_5_ladder_6_ladder_1 = 0.0;
                    frontier_phi_3_4_ladder_5_ladder_6_ladder_2 = 0.0;
                    frontier_phi_3_4_ladder_5_ladder_6_ladder_3 = 0.0;
                }
                else
                {
                    float _655 = _612 - cbPerScene._m0[16u].x;
                    float _1159 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
                    float _656 = isnan(1.0) ? _1159 : (isnan(_1159) ? 1.0 : min(_1159, 1.0));
                    float _657 = _656 * _656;
                    float _659 = (_635 - cbPerScene._m0[22u].x) * 10.0;
                    float _1170 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
                    float _661 = isnan(1.0) ? _1170 : (isnan(_1170) ? 1.0 : min(_1170, 1.0));
                    float _662 = isnan(_661) ? _657 : (isnan(_657) ? _661 : min(_657, _661));
                    float _666 = (cbPerScene._m0[21u].x - _491) * cbPerScene._m0[21u].z;
                    float _1186 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
                    float _667 = isnan(1.0) ? _1186 : (isnan(_1186) ? 1.0 : min(_1186, 1.0));
                    float _668 = isnan(_667) ? _662 : (isnan(_662) ? _667 : min(_662, _667));
                    float _669 = (_603 * _609) + _586;
                    float _670 = (_604 * _609) + _588;
                    float _671 = _612 + _491;
                    float _704 = fma(_671, cbPerScene._m0[7u].z, fma(_670, cbPerScene._m0[7u].y, cbPerScene._m0[7u].x * _669)) + cbPerScene._m0[7u].w;
                    float _708 = ((fma(_671, cbPerScene._m0[4u].z, fma(_670, cbPerScene._m0[4u].y, cbPerScene._m0[4u].x * _669)) + cbPerScene._m0[4u].w) / _704) - _533;
                    float _709 = ((fma(_671, cbPerScene._m0[5u].z, fma(_670, cbPerScene._m0[5u].y, cbPerScene._m0[5u].x * _669)) + cbPerScene._m0[5u].w) / _704) - _534;
                    float _716 = cbPerScene._m0[18u].x * _708;
                    float _717 = cbPerScene._m0[18u].y * _709;
                    float _722 = sqrt((_716 * _716) + (_717 * _717)) + 9.9999997473787516355514526367188e-06;
                    float _727 = (_708 / _722) * _652;
                    float _728 = (_709 / _722) * _652;
                    float _729 = (((1.0 / _671) - _551) / _722) * _652;
                    float _756 = abs(float(_727 > 0.0) - _533) / (abs(_727) + 1.0000000116860974230803549289703e-07);
                    float _757 = abs(float(_728 > 0.0) - _534) / (abs(_728) + 1.0000000116860974230803549289703e-07);
                    float _759 = (abs(((_729 > 0.0) ? cbPerScene._m0[20u].x : cbPerScene._m0[20u].y) - _551) / (abs(_729) + 1.0000000116860974230803549289703e-07)) + 2.0;
                    float _760 = isnan(_757) ? _756 : (isnan(_756) ? _757 : min(_756, _757));
                    float _761 = isnan(_759) ? _760 : (isnan(_760) ? _759 : min(_760, _759));
                    uint _764 = uint(int(isnan(cbPerScene._m0[23u].y) ? _761 : (isnan(_761) ? cbPerScene._m0[23u].y : min(_761, cbPerScene._m0[23u].y))));
                    float _546;
                    float _769;
                    float _771;
                    float _773;
                    if (int(_764) > int(0u))
                    {
                        float _766 = _729 + _551;
                        float _767 = _728 + _534;
                        float _768 = _727 + _533;
                        float _770;
                        float _772;
                        float _774;
                        float _775;
                        uint _786;
                        float _788;
                        float _790;
                        float _792;
                        float _794;
                        float _796;
                        float _798;
                        float _800;
                        uint _802;
                        float _804;
                        float _806;
                        float _808;
                        float _781 = 0.0;
                        float _782 = 0.0;
                        float _783 = 0.0;
                        float _784 = 0.0;
                        uint _785 = 0u;
                        float _787 = _551;
                        float _789 = _768;
                        float _791 = _767;
                        float _793 = _766;
                        float _795 = _533;
                        float _797 = _534;
                        float _799 = _551;
                        uint _801 = 1u;
                        float _803 = 0.0;
                        float _805 = 0.0;
                        float _807 = 0.0;
                        float _819;
                        float _825;
                        float _826;
                        float _827;
                        float _828;
                        float _829;
                        float _830;
                        uint _831;
                        float _832;
                        bool _838;
                        for (;;)
                        {
                            _819 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _789, cbSceneParam._m0[86u].y * _791), 0.0).x;
                            bool _824 = _785 == (_764 + 4294967295u);
                            _825 = _824 ? _803 : _789;
                            _826 = _824 ? _805 : _791;
                            _827 = _824 ? _807 : _793;
                            _828 = _824 ? _803 : _795;
                            _829 = _824 ? _805 : _797;
                            _830 = _824 ? _807 : _799;
                            _831 = _824 ? 1u : _801;
                            _832 = _824 ? (-1.0) : (_793 - _819);
                            _838 = (_831 != 0u) && ((_832 <= 0.0) && ((_824 ? (-1.0) : (_819 - (_787 * cbPerScene._m0[19u].y))) < 0.0));
                            float frontier_phi_16_pred;
                            float frontier_phi_16_pred_1;
                            float frontier_phi_16_pred_2;
                            float frontier_phi_16_pred_3;
                            float frontier_phi_16_pred_4;
                            float frontier_phi_16_pred_5;
                            float frontier_phi_16_pred_6;
                            uint frontier_phi_16_pred_7;
                            float frontier_phi_16_pred_8;
                            float frontier_phi_16_pred_9;
                            float frontier_phi_16_pred_10;
                            float frontier_phi_16_pred_11;
                            float frontier_phi_16_pred_12;
                            float frontier_phi_16_pred_13;
                            float frontier_phi_16_pred_14;
                            uint frontier_phi_16_pred_15;
                            if (_838)
                            {
                                uint _848 = uint(int(log2(_652) + 0.999000012874603271484375));
                                float _859;
                                float _861;
                                float _863;
                                float _865;
                                float _867;
                                float _869;
                                float _871;
                                if (int(_848) > int(0u))
                                {
                                    uint _968;
                                    float _970;
                                    float _971;
                                    float _972;
                                    float _973;
                                    float _974;
                                    float _975;
                                    float _976;
                                    _968 = 0u;
                                    _970 = _825;
                                    _971 = _826;
                                    _972 = _827;
                                    _973 = _828;
                                    _974 = _829;
                                    _975 = _830;
                                    _976 = _819;
                                    float _860;
                                    float _862;
                                    float _864;
                                    float _866;
                                    float _868;
                                    float _870;
                                    float _872;
                                    for (;;)
                                    {
                                        float _980 = (_973 + _970) * 0.5;
                                        float _981 = (_974 + _971) * 0.5;
                                        float _982 = (_975 + _972) * 0.5;
                                        vec4 _990 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _980, cbSceneParam._m0[86u].y * _981), 0.0);
                                        float _992 = _990.x;
                                        bool _994 = (_982 - _992) < 0.0;
                                        _860 = _994 ? _980 : _970;
                                        _862 = _994 ? _981 : _971;
                                        _864 = _994 ? _982 : _972;
                                        _866 = _994 ? _973 : _980;
                                        _868 = _994 ? _974 : _981;
                                        _870 = _994 ? _975 : _982;
                                        _872 = _994 ? _992 : _976;
                                        uint _969 = _968 + 1u;
                                        if (_969 == _848)
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            _968 = _969;
                                            _970 = _860;
                                            _971 = _862;
                                            _972 = _864;
                                            _973 = _866;
                                            _974 = _868;
                                            _975 = _870;
                                            _976 = _872;
                                        }
                                    }
                                    _859 = _860;
                                    _861 = _862;
                                    _863 = _864;
                                    _865 = _866;
                                    _867 = _868;
                                    _869 = _870;
                                    _871 = _872;
                                }
                                else
                                {
                                    _859 = _825;
                                    _861 = _826;
                                    _863 = _827;
                                    _865 = _828;
                                    _867 = _829;
                                    _869 = _830;
                                    _871 = _819;
                                }
                                float _881 = cbPerScene._m0[28u].x * ((_859 * 2.0) + (-1.0));
                                float _882 = cbPerScene._m0[28u].y * (1.0 - (_861 * 2.0));
                                float _913 = fma(_871, cbPerScene._m0[27u].w, fma(_882, cbPerScene._m0[27u].y, cbPerScene._m0[27u].x * _881) + cbPerScene._m0[27u].z);
                                float _914 = fma(_871, cbPerScene._m0[24u].w, fma(_882, cbPerScene._m0[24u].y, _881 * cbPerScene._m0[24u].x) + cbPerScene._m0[24u].z) / _913;
                                float _915 = fma(_871, cbPerScene._m0[25u].w, fma(_882, cbPerScene._m0[25u].y, cbPerScene._m0[25u].x * _881) + cbPerScene._m0[25u].z) / _913;
                                vec4 _924 = textureLod(sampler2D(g_PrevFrameTexture, SS_ClampLinear), vec2(cbSceneParam._m0[87u].z * _914, cbSceneParam._m0[87u].w * _915), 0.0);
                                float _929 = isnan(_668) ? 1.0 : (isnan(1.0) ? _668 : min(1.0, _668));
                                float _930 = 0.5 - _914;
                                float _931 = 0.5 - _915;
                                float _932 = _930 * 2.0;
                                float _933 = _931 * 2.0;
                                float _934 = _932 * _932;
                                float _935 = _933 * _933;
                                float _1222 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
                                float _1233 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
                                float _944 = inversesqrt(dot(vec2(_727, _728), vec2(_727, _728)));
                                float _950 = inversesqrt(dot(vec2(_932, _933), vec2(_932, _933)));
                                float _956 = dot(vec2((_930 * (-2.0)) * _950, (_931 * (-2.0)) * _950), vec2(_944 * _727, _944 * _728));
                                float _1244 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
                                float _963 = ((1.0 - (isnan(1.0) ? _1233 : (isnan(_1233) ? 1.0 : min(_1233, 1.0)))) * (1.0 - (isnan(1.0) ? _1222 : (isnan(_1222) ? 1.0 : min(_1222, 1.0))))) * (4.0 - ((isnan(1.0) ? _1244 : (isnan(_1244) ? 1.0 : min(_1244, 1.0))) * 2.0));
                                float _1255 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
                                float _964 = isnan(1.0) ? _1255 : (isnan(_1255) ? 1.0 : min(_1255, 1.0));
                                float _965 = _964 * _964;
                                frontier_phi_16_pred = _869;
                                frontier_phi_16_pred_1 = _867;
                                frontier_phi_16_pred_2 = _805;
                                frontier_phi_16_pred_3 = _865;
                                frontier_phi_16_pred_4 = _863;
                                frontier_phi_16_pred_5 = _861;
                                frontier_phi_16_pred_6 = _787;
                                frontier_phi_16_pred_7 = _764;
                                frontier_phi_16_pred_8 = isnan(_965) ? _929 : (isnan(_929) ? _965 : min(_929, _965));
                                frontier_phi_16_pred_9 = _924.z;
                                frontier_phi_16_pred_10 = _924.y;
                                frontier_phi_16_pred_11 = _924.x;
                                frontier_phi_16_pred_12 = _859;
                                frontier_phi_16_pred_13 = _807;
                                frontier_phi_16_pred_14 = _803;
                                frontier_phi_16_pred_15 = _831;
                            }
                            else
                            {
                                bool _850 = _832 > 0.0;
                                frontier_phi_16_pred = _827;
                                frontier_phi_16_pred_1 = _826;
                                frontier_phi_16_pred_2 = _850 ? _826 : _805;
                                frontier_phi_16_pred_3 = _825;
                                frontier_phi_16_pred_4 = _827 + _729;
                                frontier_phi_16_pred_5 = _826 + _728;
                                frontier_phi_16_pred_6 = _819;
                                frontier_phi_16_pred_7 = _785 + 1u;
                                frontier_phi_16_pred_8 = _784;
                                frontier_phi_16_pred_9 = _783;
                                frontier_phi_16_pred_10 = _782;
                                frontier_phi_16_pred_11 = _781;
                                frontier_phi_16_pred_12 = _825 + _727;
                                frontier_phi_16_pred_13 = _850 ? _827 : _807;
                                frontier_phi_16_pred_14 = _850 ? _825 : _803;
                                frontier_phi_16_pred_15 = uint(_850);
                            }
                            _800 = frontier_phi_16_pred;
                            _798 = frontier_phi_16_pred_1;
                            _806 = frontier_phi_16_pred_2;
                            _796 = frontier_phi_16_pred_3;
                            _794 = frontier_phi_16_pred_4;
                            _792 = frontier_phi_16_pred_5;
                            _788 = frontier_phi_16_pred_6;
                            _786 = frontier_phi_16_pred_7;
                            _775 = frontier_phi_16_pred_8;
                            _774 = frontier_phi_16_pred_9;
                            _772 = frontier_phi_16_pred_10;
                            _770 = frontier_phi_16_pred_11;
                            _790 = frontier_phi_16_pred_12;
                            _808 = frontier_phi_16_pred_13;
                            _804 = frontier_phi_16_pred_14;
                            _802 = frontier_phi_16_pred_15;
                            if (int(_786) < int(_764))
                            {
                                _781 = _770;
                                _782 = _772;
                                _783 = _774;
                                _784 = _775;
                                _785 = _786;
                                _787 = _788;
                                _789 = _790;
                                _791 = _792;
                                _793 = _794;
                                _795 = _796;
                                _797 = _798;
                                _799 = _800;
                                _801 = _802;
                                _803 = _804;
                                _805 = _806;
                                _807 = _808;
                                continue;
                            }
                            else
                            {
                                break;
                            }
                        }
                        _769 = _770;
                        _771 = _772;
                        _773 = _774;
                        _546 = _775;
                    }
                    else
                    {
                        _769 = 0.0;
                        _771 = 0.0;
                        _773 = 0.0;
                        _546 = 0.0;
                    }
                    float frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder;
                    float frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_1;
                    float frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_2;
                    float frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_3;
                    if ((isnan(_769) || isnan(_771)) || isnan(_773))
                    {
                        frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder = 0.0;
                        frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_1 = 0.0;
                        frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_2 = 0.0;
                        frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_3 = 0.0;
                    }
                    else
                    {
                        frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder = (_546 * _769) * cbPerScene._m0[28u].w;
                        frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_1 = _546;
                        frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_2 = (_546 * _773) * cbPerScene._m0[28u].w;
                        frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_3 = (_546 * _771) * cbPerScene._m0[28u].w;
                    }
                    frontier_phi_3_4_ladder_5_ladder_6_ladder = frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder;
                    frontier_phi_3_4_ladder_5_ladder_6_ladder_1 = frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_1;
                    frontier_phi_3_4_ladder_5_ladder_6_ladder_2 = frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_2;
                    frontier_phi_3_4_ladder_5_ladder_6_ladder_3 = frontier_phi_3_4_ladder_5_ladder_6_ladder_9_ladder_3;
                }
                frontier_phi_3_4_ladder_5_ladder = frontier_phi_3_4_ladder_5_ladder_6_ladder;
                frontier_phi_3_4_ladder_5_ladder_1 = frontier_phi_3_4_ladder_5_ladder_6_ladder_1;
                frontier_phi_3_4_ladder_5_ladder_2 = frontier_phi_3_4_ladder_5_ladder_6_ladder_2;
                frontier_phi_3_4_ladder_5_ladder_3 = frontier_phi_3_4_ladder_5_ladder_6_ladder_3;
            }
            frontier_phi_3_4_ladder = frontier_phi_3_4_ladder_5_ladder;
            frontier_phi_3_4_ladder_1 = frontier_phi_3_4_ladder_5_ladder_1;
            frontier_phi_3_4_ladder_2 = frontier_phi_3_4_ladder_5_ladder_2;
            frontier_phi_3_4_ladder_3 = frontier_phi_3_4_ladder_5_ladder_3;
        }
        else
        {
            frontier_phi_3_4_ladder = 0.0;
            frontier_phi_3_4_ladder_1 = 0.0;
            frontier_phi_3_4_ladder_2 = 0.0;
            frontier_phi_3_4_ladder_3 = 0.0;
        }
        _539 = frontier_phi_3_4_ladder;
        _541 = frontier_phi_3_4_ladder_3;
        _543 = frontier_phi_3_4_ladder_2;
        _545 = frontier_phi_3_4_ladder_1;
    }
    SV_Target.x = _539;
    SV_Target.y = _541;
    SV_Target.z = _543;
    SV_Target.w = _545;
}


