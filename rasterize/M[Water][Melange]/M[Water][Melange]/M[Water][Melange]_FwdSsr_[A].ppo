#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[43];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 0, std140) uniform cbPerSceneUBO
{
    vec4 _m0[39];
} cbPerScene;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 26) uniform texture2D g_PrevFrameTexture;
layout(set = 0, binding = 27) uniform texture2D g_ConvertedDepthTexture;
layout(set = 0, binding = 0) uniform texture2D M_Water_Melange_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Melange_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Melange_snp_0_Texture2D_2;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
bool discard_state;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    float _142 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _143 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _144 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _150 = inversesqrt(dot(vec3(_142, _143, _144), vec3(_142, _143, _144)));
    float _157 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _158 = _157 * NORMAL.x;
    float _159 = _157 * NORMAL.y;
    float _160 = _157 * NORMAL.z;
    float _164 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _172;
    float _173;
    float _174;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _172 = (-0.0) - _158;
        _173 = (-0.0) - _159;
        _174 = (-0.0) - _160;
    }
    else
    {
        _172 = _158;
        _173 = _159;
        _174 = _160;
    }
    float _206 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _214 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _218 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _228 = cbSceneParam._m0[71u].x - (_206 / _218);
    float _229 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _218);
    float _230 = cbSceneParam._m0[71u].z - (_214 / _218);
    float _240 = sqrt(((_228 * _228) + (_229 * _229)) + (_230 * _230));
    float _246 = cbMtdParam._m0[21u].x - cbMtdParam._m0[20u].w;
    float _248 = (_240 - cbMtdParam._m0[20u].w) / (isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0)));
    float _258 = cbMtdParam._m0[19u].z * cbPerFrame._m0[22u].x;
    vec4 _279 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_2, SS_BumpMap), vec2((((cbMtdParam._m0[35u].x * TEXCOORD.x) + (_258 * cbMtdParam._m0[35u].z)) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((cbMtdParam._m0[35u].y * TEXCOORD.y) + (_258 * cbMtdParam._m0[35u].w)) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _282 = _279.x;
    float _283 = _279.y;
    float _1123 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _286 = isnan(1.0) ? _1123 : (isnan(_1123) ? 1.0 : min(_1123, 1.0));
    float _287 = _279.z - _286;
    float _1134 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _288 = isnan(1.0) ? _1134 : (isnan(_1134) ? 1.0 : min(_1134, 1.0));
    float _300 = (_288 * 0.00999999977648258209228515625) + TEXCOORD.x;
    float _302 = (_288 * (-0.00999999977648258209228515625)) + TEXCOORD.y;
    vec4 _315 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_0, SS_BumpMap), vec2(((_300 + (cbMtdParam._m0[30u].z * _258)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_302 + (cbMtdParam._m0[30u].w * _258)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _329 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_0, SS_BumpMap), vec2(((_300 + (cbMtdParam._m0[30u].x * _258)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_302 + (cbMtdParam._m0[30u].y * _258)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _356 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * ((_206 / cbMtdParam._m0[21u].z) + (cbMtdParam._m0[36u].x * _258))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * ((_214 / cbMtdParam._m0[21u].z) + (cbMtdParam._m0[36u].y * _258))) + cbTextureTilingScale._m0[1u].w));
    float _364 = ((cbMtdParam._m0[20u].y - cbMtdParam._m0[19u].x) * _286) + cbMtdParam._m0[19u].x;
    float _1145 = isnan(0.0) ? TEXCOORD_3.y : (isnan(TEXCOORD_3.y) ? 0.0 : max(TEXCOORD_3.y, 0.0));
    float _365 = isnan(1.0) ? _1145 : (isnan(_1145) ? 1.0 : min(_1145, 1.0));
    float _376 = _248 / cbMtdParam._m0[22u].w;
    float _1156 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _377 = isnan(1.0) ? _1156 : (isnan(_1156) ? 1.0 : min(_1156, 1.0));
    float _378 = _288 * 0.23999999463558197021484375;
    float _380 = _288 * (-0.20000000298023223876953125);
    float _391 = cbMtdParam._m0[37u].x * TEXCOORD.x;
    float _392 = cbMtdParam._m0[37u].y * TEXCOORD.y;
    vec4 _401 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[36u].z * _258) + _378) + _391) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[36u].w * _258) + _380) + _392) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _417 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_0, SS_BumpMap), vec2((((_391 + _378) + (cbMtdParam._m0[37u].z * _258)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_392 + _380) + (cbMtdParam._m0[37u].w * _258)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _439 = (((_329.x + (-0.5)) * 0.5) + _315.x) + (((_401.x + (-1.0)) + _417.x) * cbMtdParam._m0[24u].w);
    float _440 = (((_329.y + (-0.5)) * 0.5) + _315.y) + (((_401.y + (-1.0)) + _417.y) * cbMtdParam._m0[24u].w);
    float _445 = ((_356.x - _439) * _377) + _439;
    float _446 = ((_356.y - _440) * _377) + _440;
    float _448 = _248 / cbMtdParam._m0[22u].y;
    float _1167 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _449 = isnan(1.0) ? _1167 : (isnan(_1167) ? 1.0 : min(_1167, 1.0));
    float _466 = ((((_365 * (0.5 - _282)) + _282) + (((_445 + (-0.5)) + ((0.5 - _445) * _449)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _467 = ((((_365 * (0.5 - _283)) + _283) + (((_446 + (-0.5)) + ((0.5 - _446) * _449)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _468 = dot(vec2(_466, _467), vec2(_466, _467));
    float _1178 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _473 = sqrt(1.0 - (isnan(1.0) ? _1178 : (isnan(_1178) ? 1.0 : min(_1178, 1.0))));
    float _476 = fma(_473, _172, fma(_467, _164 * TANGENT.x, (_150 * _142) * _466));
    float _479 = fma(_473, _173, fma(_467, _164 * TANGENT.y, (_150 * _143) * _466));
    float _482 = fma(_473, _174, fma(_467, _164 * TANGENT.z, (_150 * _144) * _466));
    float _486 = inversesqrt(dot(vec3(_476, _479, _482), vec3(_476, _479, _482)));
    float _487 = _486 * _476;
    float _488 = _486 * _479;
    float _489 = _486 * _482;
    float _1189 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _490 = isnan(1.0) ? _1189 : (isnan(_1189) ? 1.0 : min(_1189, 1.0));
    float _504 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _571 = (cbMatDynParam._m0[5u].x * _240) + cbMatDynParam._m0[5u].y;
        float _1200 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
        float _572 = isnan(1.0) ? _1200 : (isnan(_1200) ? 1.0 : min(_1200, 1.0));
        float _576 = (cbMatDynParam._m0[5u].z * _240) + cbMatDynParam._m0[5u].w;
        float _1211 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _1211 : (isnan(_1211) ? 1.0 : min(_1211, 1.0))) - _572)) + _572) < ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    vec4 _515 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _524 = (_515.x * 2.0) + (-1.0);
    float _525 = (_515.y * 2.0) + (-1.0);
    float _526 = (_515.z * 2.0) + (-1.0);
    float _530 = inversesqrt(dot(vec3(_524, _525, _526), vec3(_524, _525, _526)));
    float _541 = ((TEXCOORD.w >= 1.0) || (((TEXCOORD.z <= 0.0) || (TEXCOORD.z >= 1.0)) || (TEXCOORD.w <= 0.0))) ? 0.0 : _515.w;
    float _548 = (((_524 * _530) - _487) * _541) + _487;
    float _549 = (((_525 * _530) - _488) * _541) + _488;
    float _550 = (((_526 * _530) - _489) * _541) + _489;
    float _551 = POSITION_1.x / POSITION_1.w;
    float _552 = POSITION_1.y / POSITION_1.w;
    float _555 = (_551 * 0.5) + 0.5;
    float _556 = 0.5 - (_552 * 0.5);
    float _588;
    float _590;
    float _592;
    float _594;
    if (_490 < cbPerScene._m0[22u].z)
    {
        _588 = 0.0;
        _590 = 0.0;
        _592 = 0.0;
        _594 = 0.0;
    }
    else
    {
        float _600 = 1.0 / _504;
        float frontier_phi_5_6_ladder;
        float frontier_phi_5_6_ladder_1;
        float frontier_phi_5_6_ladder_2;
        float frontier_phi_5_6_ladder_3;
        if (!(cbPerScene._m0[21u].y >= _600))
        {
            float _625 = fma(_550, cbPerScene._m0[8u].z, fma(_549, cbPerScene._m0[8u].y, cbPerScene._m0[8u].x * _548));
            float _628 = fma(_550, cbPerScene._m0[9u].z, fma(_549, cbPerScene._m0[9u].y, cbPerScene._m0[9u].x * _548));
            float _631 = fma(_550, cbPerScene._m0[10u].z, fma(_549, cbPerScene._m0[10u].y, cbPerScene._m0[10u].x * _548));
            float _638 = (_551 * _504) * cbPerScene._m0[28u].x;
            float _640 = (_552 * _504) * cbPerScene._m0[28u].y;
            float _644 = inversesqrt(dot(vec3(_638, _640, _504), vec3(_638, _640, _504)));
            float _645 = _638 * _644;
            float _646 = _640 * _644;
            float _647 = _644 * _504;
            float _651 = dot(vec3(_645, _646, _647), vec3(_625, _628, _631)) * 2.0;
            float _655 = _645 - (_651 * _625);
            float _656 = _646 - (_651 * _628);
            float _657 = _647 - (_651 * _631);
            float _661 = inversesqrt(dot(vec3(_655, _656, _657), vec3(_655, _656, _657)));
            float _664 = _657 * _661;
            float frontier_phi_5_6_ladder_8_ladder;
            float frontier_phi_5_6_ladder_8_ladder_1;
            float frontier_phi_5_6_ladder_8_ladder_2;
            float frontier_phi_5_6_ladder_8_ladder_3;
            if (_664 < cbPerScene._m0[16u].x)
            {
                frontier_phi_5_6_ladder_8_ladder = 0.0;
                frontier_phi_5_6_ladder_8_ladder_1 = 0.0;
                frontier_phi_5_6_ladder_8_ladder_2 = 0.0;
                frontier_phi_5_6_ladder_8_ladder_3 = 0.0;
            }
            else
            {
                float _676 = abs(dot(vec3((-0.0) - _645, (-0.0) - _646, (-0.0) - _647), vec3(_625, _628, _631)));
                float _1222 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
                float _687 = (((_490 * _490) * 0.959999978542327880859375) * exp2(log2(1.0 - (isnan(1.0) ? _1222 : (isnan(_1222) ? 1.0 : min(_1222, 1.0)))) * 5.0)) + 0.039999999105930328369140625;
                float _696 = (cbPerScene._m0[29u].x * (1.0 - _490)) + cbPerScene._m0[29u].y;
                float _1233 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
                float _704 = ((cbPerScene._m0[23u].w - cbPerScene._m0[23u].z) * (isnan(1.0) ? _1233 : (isnan(_1233) ? 1.0 : min(_1233, 1.0)))) + cbPerScene._m0[23u].z;
                float frontier_phi_5_6_ladder_8_ladder_9_ladder;
                float frontier_phi_5_6_ladder_8_ladder_9_ladder_1;
                float frontier_phi_5_6_ladder_8_ladder_9_ladder_2;
                float frontier_phi_5_6_ladder_8_ladder_9_ladder_3;
                if (_687 < cbPerScene._m0[22u].x)
                {
                    frontier_phi_5_6_ladder_8_ladder_9_ladder = 0.0;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_1 = 0.0;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_2 = 0.0;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_3 = 0.0;
                }
                else
                {
                    float _707 = _664 - cbPerScene._m0[16u].x;
                    float _1244 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
                    float _708 = isnan(1.0) ? _1244 : (isnan(_1244) ? 1.0 : min(_1244, 1.0));
                    float _709 = _708 * _708;
                    float _711 = (_687 - cbPerScene._m0[22u].x) * 10.0;
                    float _1255 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
                    float _713 = isnan(1.0) ? _1255 : (isnan(_1255) ? 1.0 : min(_1255, 1.0));
                    float _714 = isnan(_713) ? _709 : (isnan(_709) ? _713 : min(_709, _713));
                    float _718 = (cbPerScene._m0[21u].x - _504) * cbPerScene._m0[21u].z;
                    float _1271 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
                    float _719 = isnan(1.0) ? _1271 : (isnan(_1271) ? 1.0 : min(_1271, 1.0));
                    float _720 = isnan(_719) ? _714 : (isnan(_714) ? _719 : min(_714, _719));
                    float _721 = (_655 * _661) + _638;
                    float _722 = (_656 * _661) + _640;
                    float _723 = _664 + _504;
                    float _755 = fma(_723, cbPerScene._m0[7u].z, fma(_722, cbPerScene._m0[7u].y, cbPerScene._m0[7u].x * _721)) + cbPerScene._m0[7u].w;
                    float _759 = ((fma(_723, cbPerScene._m0[4u].z, fma(_722, cbPerScene._m0[4u].y, cbPerScene._m0[4u].x * _721)) + cbPerScene._m0[4u].w) / _755) - _555;
                    float _760 = ((fma(_723, cbPerScene._m0[5u].z, fma(_722, cbPerScene._m0[5u].y, cbPerScene._m0[5u].x * _721)) + cbPerScene._m0[5u].w) / _755) - _556;
                    float _767 = cbPerScene._m0[18u].x * _759;
                    float _768 = cbPerScene._m0[18u].y * _760;
                    float _773 = sqrt((_767 * _767) + (_768 * _768)) + 9.9999997473787516355514526367188e-06;
                    float _778 = (_759 / _773) * _704;
                    float _779 = (_760 / _773) * _704;
                    float _780 = (((1.0 / _723) - _600) / _773) * _704;
                    float _807 = abs(float(_778 > 0.0) - _555) / (abs(_778) + 1.0000000116860974230803549289703e-07);
                    float _808 = abs(float(_779 > 0.0) - _556) / (abs(_779) + 1.0000000116860974230803549289703e-07);
                    float _810 = (abs(((_780 > 0.0) ? cbPerScene._m0[20u].x : cbPerScene._m0[20u].y) - _600) / (abs(_780) + 1.0000000116860974230803549289703e-07)) + 2.0;
                    float _811 = isnan(_808) ? _807 : (isnan(_807) ? _808 : min(_807, _808));
                    float _812 = isnan(_810) ? _811 : (isnan(_811) ? _810 : min(_811, _810));
                    uint _815 = uint(int(isnan(cbPerScene._m0[23u].y) ? _812 : (isnan(_812) ? cbPerScene._m0[23u].y : min(_812, cbPerScene._m0[23u].y))));
                    float _595;
                    float _820;
                    float _822;
                    float _824;
                    if (int(_815) > int(0u))
                    {
                        float _817 = _780 + _600;
                        float _818 = _779 + _556;
                        float _819 = _778 + _555;
                        float _821;
                        float _823;
                        float _825;
                        float _826;
                        uint _837;
                        float _839;
                        float _841;
                        float _843;
                        float _845;
                        float _847;
                        float _849;
                        float _851;
                        uint _853;
                        float _855;
                        float _857;
                        float _859;
                        float _832 = 0.0;
                        float _833 = 0.0;
                        float _834 = 0.0;
                        float _835 = 0.0;
                        uint _836 = 0u;
                        float _838 = _600;
                        float _840 = _819;
                        float _842 = _818;
                        float _844 = _817;
                        float _846 = _555;
                        float _848 = _556;
                        float _850 = _600;
                        uint _852 = 1u;
                        float _854 = 0.0;
                        float _856 = 0.0;
                        float _858 = 0.0;
                        float _870;
                        float _876;
                        float _877;
                        float _878;
                        float _879;
                        float _880;
                        float _881;
                        uint _882;
                        float _883;
                        bool _889;
                        for (;;)
                        {
                            _870 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _840, cbSceneParam._m0[86u].y * _842), 0.0).x;
                            bool _875 = _836 == (_815 + 4294967295u);
                            _876 = _875 ? _854 : _840;
                            _877 = _875 ? _856 : _842;
                            _878 = _875 ? _858 : _844;
                            _879 = _875 ? _854 : _846;
                            _880 = _875 ? _856 : _848;
                            _881 = _875 ? _858 : _850;
                            _882 = _875 ? 1u : _852;
                            _883 = _875 ? (-1.0) : (_844 - _870);
                            _889 = (_882 != 0u) && ((_883 <= 0.0) && ((_875 ? (-1.0) : (_870 - (_838 * cbPerScene._m0[19u].y))) < 0.0));
                            float frontier_phi_19_pred;
                            float frontier_phi_19_pred_1;
                            float frontier_phi_19_pred_2;
                            float frontier_phi_19_pred_3;
                            float frontier_phi_19_pred_4;
                            float frontier_phi_19_pred_5;
                            float frontier_phi_19_pred_6;
                            uint frontier_phi_19_pred_7;
                            float frontier_phi_19_pred_8;
                            float frontier_phi_19_pred_9;
                            float frontier_phi_19_pred_10;
                            float frontier_phi_19_pred_11;
                            float frontier_phi_19_pred_12;
                            float frontier_phi_19_pred_13;
                            float frontier_phi_19_pred_14;
                            uint frontier_phi_19_pred_15;
                            if (_889)
                            {
                                uint _899 = uint(int(log2(_704) + 0.999000012874603271484375));
                                float _910;
                                float _912;
                                float _914;
                                float _916;
                                float _918;
                                float _920;
                                float _922;
                                if (int(_899) > int(0u))
                                {
                                    uint _1019;
                                    float _1021;
                                    float _1022;
                                    float _1023;
                                    float _1024;
                                    float _1025;
                                    float _1026;
                                    float _1027;
                                    _1019 = 0u;
                                    _1021 = _876;
                                    _1022 = _877;
                                    _1023 = _878;
                                    _1024 = _879;
                                    _1025 = _880;
                                    _1026 = _881;
                                    _1027 = _870;
                                    float _911;
                                    float _913;
                                    float _915;
                                    float _917;
                                    float _919;
                                    float _921;
                                    float _923;
                                    for (;;)
                                    {
                                        float _1031 = (_1024 + _1021) * 0.5;
                                        float _1032 = (_1025 + _1022) * 0.5;
                                        float _1033 = (_1026 + _1023) * 0.5;
                                        vec4 _1041 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _1031, cbSceneParam._m0[86u].y * _1032), 0.0);
                                        float _1043 = _1041.x;
                                        bool _1045 = (_1033 - _1043) < 0.0;
                                        _911 = _1045 ? _1031 : _1021;
                                        _913 = _1045 ? _1032 : _1022;
                                        _915 = _1045 ? _1033 : _1023;
                                        _917 = _1045 ? _1024 : _1031;
                                        _919 = _1045 ? _1025 : _1032;
                                        _921 = _1045 ? _1026 : _1033;
                                        _923 = _1045 ? _1043 : _1027;
                                        uint _1020 = _1019 + 1u;
                                        if (_1020 == _899)
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            _1019 = _1020;
                                            _1021 = _911;
                                            _1022 = _913;
                                            _1023 = _915;
                                            _1024 = _917;
                                            _1025 = _919;
                                            _1026 = _921;
                                            _1027 = _923;
                                        }
                                    }
                                    _910 = _911;
                                    _912 = _913;
                                    _914 = _915;
                                    _916 = _917;
                                    _918 = _919;
                                    _920 = _921;
                                    _922 = _923;
                                }
                                else
                                {
                                    _910 = _876;
                                    _912 = _877;
                                    _914 = _878;
                                    _916 = _879;
                                    _918 = _880;
                                    _920 = _881;
                                    _922 = _870;
                                }
                                float _932 = cbPerScene._m0[28u].x * ((_910 * 2.0) + (-1.0));
                                float _933 = cbPerScene._m0[28u].y * (1.0 - (_912 * 2.0));
                                float _964 = fma(_922, cbPerScene._m0[27u].w, fma(_933, cbPerScene._m0[27u].y, cbPerScene._m0[27u].x * _932) + cbPerScene._m0[27u].z);
                                float _965 = fma(_922, cbPerScene._m0[24u].w, fma(_933, cbPerScene._m0[24u].y, _932 * cbPerScene._m0[24u].x) + cbPerScene._m0[24u].z) / _964;
                                float _966 = fma(_922, cbPerScene._m0[25u].w, fma(_933, cbPerScene._m0[25u].y, cbPerScene._m0[25u].x * _932) + cbPerScene._m0[25u].z) / _964;
                                vec4 _975 = textureLod(sampler2D(g_PrevFrameTexture, SS_ClampLinear), vec2(cbSceneParam._m0[87u].z * _965, cbSceneParam._m0[87u].w * _966), 0.0);
                                float _980 = isnan(_720) ? 1.0 : (isnan(1.0) ? _720 : min(1.0, _720));
                                float _981 = 0.5 - _965;
                                float _982 = 0.5 - _966;
                                float _983 = _981 * 2.0;
                                float _984 = _982 * 2.0;
                                float _985 = _983 * _983;
                                float _986 = _984 * _984;
                                float _1307 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
                                float _1318 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
                                float _995 = inversesqrt(dot(vec2(_778, _779), vec2(_778, _779)));
                                float _1001 = inversesqrt(dot(vec2(_983, _984), vec2(_983, _984)));
                                float _1007 = dot(vec2((_981 * (-2.0)) * _1001, (_982 * (-2.0)) * _1001), vec2(_995 * _778, _995 * _779));
                                float _1329 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
                                float _1014 = ((1.0 - (isnan(1.0) ? _1318 : (isnan(_1318) ? 1.0 : min(_1318, 1.0)))) * (1.0 - (isnan(1.0) ? _1307 : (isnan(_1307) ? 1.0 : min(_1307, 1.0))))) * (4.0 - ((isnan(1.0) ? _1329 : (isnan(_1329) ? 1.0 : min(_1329, 1.0))) * 2.0));
                                float _1340 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
                                float _1015 = isnan(1.0) ? _1340 : (isnan(_1340) ? 1.0 : min(_1340, 1.0));
                                float _1016 = _1015 * _1015;
                                frontier_phi_19_pred = _920;
                                frontier_phi_19_pred_1 = _918;
                                frontier_phi_19_pred_2 = _856;
                                frontier_phi_19_pred_3 = _916;
                                frontier_phi_19_pred_4 = _914;
                                frontier_phi_19_pred_5 = _912;
                                frontier_phi_19_pred_6 = _838;
                                frontier_phi_19_pred_7 = _815;
                                frontier_phi_19_pred_8 = isnan(_1016) ? _980 : (isnan(_980) ? _1016 : min(_980, _1016));
                                frontier_phi_19_pred_9 = _975.z;
                                frontier_phi_19_pred_10 = _975.y;
                                frontier_phi_19_pred_11 = _975.x;
                                frontier_phi_19_pred_12 = _910;
                                frontier_phi_19_pred_13 = _858;
                                frontier_phi_19_pred_14 = _854;
                                frontier_phi_19_pred_15 = _882;
                            }
                            else
                            {
                                bool _901 = _883 > 0.0;
                                frontier_phi_19_pred = _878;
                                frontier_phi_19_pred_1 = _877;
                                frontier_phi_19_pred_2 = _901 ? _877 : _856;
                                frontier_phi_19_pred_3 = _876;
                                frontier_phi_19_pred_4 = _878 + _780;
                                frontier_phi_19_pred_5 = _877 + _779;
                                frontier_phi_19_pred_6 = _870;
                                frontier_phi_19_pred_7 = _836 + 1u;
                                frontier_phi_19_pred_8 = _835;
                                frontier_phi_19_pred_9 = _834;
                                frontier_phi_19_pred_10 = _833;
                                frontier_phi_19_pred_11 = _832;
                                frontier_phi_19_pred_12 = _876 + _778;
                                frontier_phi_19_pred_13 = _901 ? _878 : _858;
                                frontier_phi_19_pred_14 = _901 ? _876 : _854;
                                frontier_phi_19_pred_15 = uint(_901);
                            }
                            _851 = frontier_phi_19_pred;
                            _849 = frontier_phi_19_pred_1;
                            _857 = frontier_phi_19_pred_2;
                            _847 = frontier_phi_19_pred_3;
                            _845 = frontier_phi_19_pred_4;
                            _843 = frontier_phi_19_pred_5;
                            _839 = frontier_phi_19_pred_6;
                            _837 = frontier_phi_19_pred_7;
                            _826 = frontier_phi_19_pred_8;
                            _825 = frontier_phi_19_pred_9;
                            _823 = frontier_phi_19_pred_10;
                            _821 = frontier_phi_19_pred_11;
                            _841 = frontier_phi_19_pred_12;
                            _859 = frontier_phi_19_pred_13;
                            _855 = frontier_phi_19_pred_14;
                            _853 = frontier_phi_19_pred_15;
                            if (int(_837) < int(_815))
                            {
                                _832 = _821;
                                _833 = _823;
                                _834 = _825;
                                _835 = _826;
                                _836 = _837;
                                _838 = _839;
                                _840 = _841;
                                _842 = _843;
                                _844 = _845;
                                _846 = _847;
                                _848 = _849;
                                _850 = _851;
                                _852 = _853;
                                _854 = _855;
                                _856 = _857;
                                _858 = _859;
                                continue;
                            }
                            else
                            {
                                break;
                            }
                        }
                        _820 = _821;
                        _822 = _823;
                        _824 = _825;
                        _595 = _826;
                    }
                    else
                    {
                        _820 = 0.0;
                        _822 = 0.0;
                        _824 = 0.0;
                        _595 = 0.0;
                    }
                    float frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder;
                    float frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_1;
                    float frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_2;
                    float frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_3;
                    if ((isnan(_820) || isnan(_822)) || isnan(_824))
                    {
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder = 0.0;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_1 = 0.0;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_2 = 0.0;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_3 = 0.0;
                    }
                    else
                    {
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder = (_595 * _820) * cbPerScene._m0[28u].w;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_1 = _595;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_2 = (_595 * _824) * cbPerScene._m0[28u].w;
                        frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_3 = (_595 * _822) * cbPerScene._m0[28u].w;
                    }
                    frontier_phi_5_6_ladder_8_ladder_9_ladder = frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_1 = frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_1;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_2 = frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_2;
                    frontier_phi_5_6_ladder_8_ladder_9_ladder_3 = frontier_phi_5_6_ladder_8_ladder_9_ladder_12_ladder_3;
                }
                frontier_phi_5_6_ladder_8_ladder = frontier_phi_5_6_ladder_8_ladder_9_ladder;
                frontier_phi_5_6_ladder_8_ladder_1 = frontier_phi_5_6_ladder_8_ladder_9_ladder_1;
                frontier_phi_5_6_ladder_8_ladder_2 = frontier_phi_5_6_ladder_8_ladder_9_ladder_2;
                frontier_phi_5_6_ladder_8_ladder_3 = frontier_phi_5_6_ladder_8_ladder_9_ladder_3;
            }
            frontier_phi_5_6_ladder = frontier_phi_5_6_ladder_8_ladder;
            frontier_phi_5_6_ladder_1 = frontier_phi_5_6_ladder_8_ladder_1;
            frontier_phi_5_6_ladder_2 = frontier_phi_5_6_ladder_8_ladder_2;
            frontier_phi_5_6_ladder_3 = frontier_phi_5_6_ladder_8_ladder_3;
        }
        else
        {
            frontier_phi_5_6_ladder = 0.0;
            frontier_phi_5_6_ladder_1 = 0.0;
            frontier_phi_5_6_ladder_2 = 0.0;
            frontier_phi_5_6_ladder_3 = 0.0;
        }
        _588 = frontier_phi_5_6_ladder;
        _590 = frontier_phi_5_6_ladder_3;
        _592 = frontier_phi_5_6_ladder_2;
        _594 = frontier_phi_5_6_ladder_1;
    }
    SV_Target.x = _588;
    SV_Target.y = _590;
    SV_Target.z = _592;
    SV_Target.w = _594;
    discard_exit();
}


