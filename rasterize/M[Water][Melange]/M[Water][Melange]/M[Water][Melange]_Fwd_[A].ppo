#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[43];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Melange_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Melange_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Melange_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_Melange_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Water_Melange_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Water_Melange_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_Water_Melange_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D M_Water_Melange_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_Water_Melange_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D M_Water_Melange_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1946;
float _4346;
float _4347;
float _4348;
float _4349;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _230 = _229 * _221;
    float _231 = _229 * _222;
    float _232 = _229 * _223;
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = _236 * NORMAL.x;
    float _238 = _236 * NORMAL.y;
    float _239 = _236 * NORMAL.z;
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = _243 * TANGENT.x;
    float _245 = _243 * TANGENT.y;
    float _246 = _243 * TANGENT.z;
    float _251;
    float _252;
    float _253;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _251 = (-0.0) - _237;
        _252 = (-0.0) - _238;
        _253 = (-0.0) - _239;
    }
    else
    {
        _251 = _237;
        _252 = _238;
        _253 = _239;
    }
    float _297 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _307 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _297);
    float _308 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _297);
    float _309 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _297);
    float _325 = cbMtdParam._m0[21u].x - cbMtdParam._m0[20u].w;
    float _327 = (sqrt(((_307 * _307) + (_308 * _308)) + (_309 * _309)) - cbMtdParam._m0[20u].w) / (isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0)));
    float _331 = _327 / cbMtdParam._m0[22u].z;
    float _332 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _333 = isnan(8.0) ? _332 : (isnan(_332) ? 8.0 : min(_332, 8.0));
    float _340 = cbMtdParam._m0[10u].x * _333;
    float _341 = cbMtdParam._m0[10u].y * _333;
    float _342 = cbMtdParam._m0[10u].z * _333;
    float _343 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _344 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _345 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _356 = cbMtdParam._m0[21u].y + _327;
    float _360 = _356 * cbMtdParam._m0[23u].z;
    float _4403 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    vec4 _378 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _381 = _378.x;
    float _404 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _381)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _381))) - POSITION_1.w) / cbMtdParam._m0[20u].x;
    float _4414 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _405 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _410 = 1.0 - (isnan(cbMtdParam._m0[25u].y) ? _405 : (isnan(_405) ? cbMtdParam._m0[25u].y : max(_405, cbMtdParam._m0[25u].y)));
    float _412 = (cbMtdParam._m0[25u].x + TEXCOORD_3.x) - (_410 * cbMtdParam._m0[20u].z);
    float _423 = cbMtdParam._m0[19u].z * cbPerFrame._m0[22u].x;
    float _428 = cbMtdParam._m0[35u].x * TEXCOORD.x;
    float _429 = cbMtdParam._m0[35u].y * TEXCOORD.y;
    vec4 _443 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_2, SS_BumpMap), vec2(((_428 + (_423 * cbMtdParam._m0[35u].z)) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_429 + (_423 * cbMtdParam._m0[35u].w)) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _445 = _443.x;
    float _446 = _443.y;
    float _4430 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _449 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
    float _450 = _443.z - _449;
    float _4441 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _451 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
    float _463 = (_451 * 0.00999999977648258209228515625) + TEXCOORD.x;
    float _465 = (_451 * (-0.00999999977648258209228515625)) + TEXCOORD.y;
    vec4 _478 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_0, SS_BumpMap), vec2(((_463 + (cbMtdParam._m0[30u].z * _423)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_465 + (cbMtdParam._m0[30u].w * _423)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _482 = _478.z;
    vec4 _493 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_0, SS_BumpMap), vec2(((_463 + (cbMtdParam._m0[30u].x * _423)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_465 + (cbMtdParam._m0[30u].y * _423)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _497 = _493.z;
    float _500 = (_410 - _443.w) + (isnan(_497) ? _482 : (isnan(_482) ? _497 : max(_482, _497)));
    float _4457 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _502 = (_412 * (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0)))) * (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)));
    float _515 = (_502 + cbMtdParam._m0[9u].x) + (cbMtdParam._m0[14u].x * _451);
    float _516 = (_502 + cbMtdParam._m0[9u].y) + (cbMtdParam._m0[14u].y * _451);
    float _517 = (_502 + cbMtdParam._m0[9u].z) + (cbMtdParam._m0[14u].z * _451);
    vec4 _563 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * ((fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / cbMtdParam._m0[21u].z) + (cbMtdParam._m0[36u].x * _423))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * ((fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / cbMtdParam._m0[21u].z) + (cbMtdParam._m0[36u].y * _423))) + cbTextureTilingScale._m0[1u].w));
    float _568 = _563.z * 0.099999986588954925537109375;
    float _4468 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _570 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
    float _574 = cbMtdParam._m0[23u].x * _327;
    float _4479 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _575 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
    float _589 = (_515 + (isnan(0.07999999821186065673828125) ? _343 : (isnan(_343) ? 0.07999999821186065673828125 : min(_343, 0.07999999821186065673828125)))) + (_575 * (((1.0 - _515) - _570) + _568));
    float _591 = (_516 + (isnan(0.07999999821186065673828125) ? _344 : (isnan(_344) ? 0.07999999821186065673828125 : min(_344, 0.07999999821186065673828125)))) + (_575 * (((1.0 - _516) - _570) + _568));
    float _593 = (_517 + (isnan(0.07999999821186065673828125) ? _345 : (isnan(_345) ? 0.07999999821186065673828125 : min(_345, 0.07999999821186065673828125)))) + (_575 * (((1.0 - _517) + _568) - _570));
    float _4490 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _594 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
    float _4501 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _595 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
    float _4512 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _596 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
    float _602 = _327 / cbMtdParam._m0[24u].z;
    float _4523 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _605 = (1.0 - (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0)))) * cbMtdParam._m0[24u].y;
    float _612 = ((cbMtdParam._m0[20u].y - cbMtdParam._m0[19u].x) * _449) + cbMtdParam._m0[19u].x;
    float _619 = (POSITION_1.w - cbMtdParam._m0[28u].z) * (1.0 / cbMtdParam._m0[28u].y);
    float _4534 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _620 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
    float _633 = (cbMtdParam._m0[33u].z * _423) + _428;
    float _634 = (cbMtdParam._m0[33u].w * _423) + _429;
    vec4 _662 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * ((cbMtdParam._m0[32u].z * _423) + _428)) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * ((cbMtdParam._m0[32u].w * _423) + _429)) + cbTextureTilingScale._m0[3u].w));
    float _669 = (_662.x * 2.0) + (-1.0);
    float _671 = (_662.y * 2.0) + (-1.0);
    float _675 = 1.0 - dot(vec2(_669, _671), vec2(_669, _671));
    float _4545 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _677 = sqrt(isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)));
    float _680 = fma(_677, _251, fma(_671, _244, _669 * _230));
    float _683 = fma(_677, _252, fma(_671, _245, _669 * _231));
    float _686 = fma(_677, _253, fma(_671, _246, _669 * _232));
    float _690 = inversesqrt(dot(vec3(_680, _683, _686), vec3(_680, _683, _686)));
    float _691 = cbPerFrame._m0[22u].x * 2.0;
    float _692 = _691 * cbMtdParam._m0[26u].w;
    float _696 = ((_680 * 0.5) * _690) + (-0.25);
    float _700 = ((_683 * 0.5) * _690) + (-0.25);
    float _701 = _700 * cbMtdParam._m0[27u].x;
    float _703 = (-0.0) - (cbMtdParam._m0[27u].x * _696);
    float _704 = fract(_692);
    float _706 = fract(_692 + 0.5);
    float _717 = abs((_704 * 2.0) + (-1.0));
    vec4 _734 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_704 * _703) + _633) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_701 * _704) + _634) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _736 = _734.x;
    float _737 = _734.y;
    float _738 = _734.z;
    vec4 _739 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_706 * _703) + _633) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_701 * _706) + _634) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _750 = ((_739.x - _736) * _717) + _736;
    float _751 = ((_739.y - _737) * _717) + _737;
    float _752 = ((_739.z - _738) * _717) + _738;
    float _766 = (cbMtdParam._m0[32u].x * _423) + _428;
    float _767 = (cbMtdParam._m0[32u].y * _423) + _429;
    float _770 = _691 * cbMtdParam._m0[26u].x;
    float _771 = _700 * cbMtdParam._m0[25u].w;
    float _773 = (-0.0) - (cbMtdParam._m0[25u].w * _696);
    float _774 = fract(_770);
    float _776 = fract(_770 + 0.5);
    float _787 = abs((_774 * 2.0) + (-1.0));
    vec4 _804 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_774 * _773) + _766) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_771 * _774) + _767) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _806 = _804.x;
    float _807 = _804.y;
    float _808 = _804.z;
    vec4 _809 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_776 * _773) + _766) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_771 * _776) + _767) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _849 = (cbMtdParam._m0[33u].x * _423) + _428;
    float _850 = (cbMtdParam._m0[33u].y * _423) + _429;
    float _853 = _691 * cbMtdParam._m0[26u].z;
    float _854 = _700 * cbMtdParam._m0[26u].y;
    float _856 = (-0.0) - (cbMtdParam._m0[26u].y * _696);
    float _857 = fract(_853);
    float _859 = fract(_853 + 0.5);
    float _870 = abs((_857 * 2.0) + (-1.0));
    vec4 _887 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_857 * _856) + _849) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_854 * _857) + _850) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _889 = _887.x;
    float _890 = _887.y;
    float _891 = _887.z;
    vec4 _892 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_859 * _856) + _849) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (((_854 * _859) + _850) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _912 = (((((_892.x - _889) * _870) + _889) * cbMtdParam._m0[16u].x) + (_750 * cbMtdParam._m0[17u].x)) + (((((cbMtdParam._m0[15u].x - cbMtdParam._m0[18u].x) * _750) * cbMtdParam._m0[28u].w) + cbMtdParam._m0[18u].x) * (((_809.x - _806) * _787) + _806));
    float _916 = (((((_892.y - _890) * _870) + _890) * cbMtdParam._m0[16u].y) + (_751 * cbMtdParam._m0[17u].y)) + (((((cbMtdParam._m0[15u].y - cbMtdParam._m0[18u].y) * _751) * cbMtdParam._m0[28u].w) + cbMtdParam._m0[18u].y) * (((_809.y - _807) * _787) + _807));
    float _920 = (((((_892.z - _891) * _870) + _891) * cbMtdParam._m0[16u].z) + (_752 * cbMtdParam._m0[17u].z)) + ((((cbMtdParam._m0[28u].w * _752) * (cbMtdParam._m0[15u].z - cbMtdParam._m0[18u].z)) + cbMtdParam._m0[18u].z) * (((_809.z - _808) * _787) + _808));
    float _924 = _912 - (_912 * _620);
    float _925 = _916 - (_916 * _620);
    float _926 = _920 - (_920 * _620);
    float _931 = (POSITION_1.w - cbMtdParam._m0[28u].x) * (1.0 / cbMtdParam._m0[27u].w);
    float _4556 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _932 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
    float _945 = (cbMtdParam._m0[34u].z * _423) + _428;
    float _946 = (cbMtdParam._m0[34u].w * _423) + _429;
    vec4 _958 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_8, SS_DiffuseMap), vec2((_945 * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (_946 * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _960 = _958.x;
    float _961 = _958.y;
    float _962 = _958.z;
    vec4 _983 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * _945) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _946) + cbTextureTilingScale._m0[9u].w));
    float _4567 = isnan(0.0) ? TEXCOORD_3.y : (isnan(TEXCOORD_3.y) ? 0.0 : max(TEXCOORD_3.y, 0.0));
    float _1025 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
    float _1035 = _327 / cbMtdParam._m0[22u].w;
    float _4578 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _1036 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
    float _1037 = _451 * 0.23999999463558197021484375;
    float _1039 = _451 * (-0.20000000298023223876953125);
    float _1050 = cbMtdParam._m0[37u].x * TEXCOORD.x;
    float _1051 = cbMtdParam._m0[37u].y * TEXCOORD.y;
    vec4 _1066 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[36u].z * _423) + _1037) + _1050) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[36u].w * _423) + _1039) + _1051) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _1082 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_0, SS_BumpMap), vec2((((_1050 + _1037) + (cbMtdParam._m0[37u].z * _423)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_1051 + _1039) + (cbMtdParam._m0[37u].w * _423)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _1100 = (((_493.x + (-0.5)) * 0.5) + _478.x) + (((_1066.x + (-1.0)) + _1082.x) * cbMtdParam._m0[24u].w);
    float _1101 = (((_493.y + (-0.5)) * 0.5) + _478.y) + (((_1066.y + (-1.0)) + _1082.y) * cbMtdParam._m0[24u].w);
    float _1106 = ((_563.x - _1100) * _1036) + _1100;
    float _1107 = ((_563.y - _1101) * _1036) + _1101;
    float _1109 = _327 / cbMtdParam._m0[22u].y;
    float _4589 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _1110 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
    float _1126 = ((((_1025 * (0.5 - _445)) + _445) + (((_1106 + (-0.5)) + ((0.5 - _1106) * _1110)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1127 = ((((_1025 * (0.5 - _446)) + _446) + (((_1107 + (-0.5)) + ((0.5 - _1107) * _1110)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1128 = dot(vec2(_1126, _1127), vec2(_1126, _1127));
    float _4600 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
    float _1133 = sqrt(1.0 - (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))));
    float _1137 = cbMtdParam._m0[23u].w * _356;
    float _4611 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
    float _1146 = cbMtdParam._m0[21u].w * _356;
    float _4622 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _1148 = (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * cbMtdParam._m0[27u].y;
    float _4633 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
    float _1149 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
    float _1164 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1165 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1175 = ((_1164 / cbSceneParam._m0[86u].x) * 2.0) + (-1.0);
    float _1176 = 1.0 - ((_1165 / cbSceneParam._m0[86u].y) * 2.0);
    vec4 _1177 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_1164, _1165), 0.0);
    float _1179 = _1177.x;
    float _1219 = fma(_1179, cbSceneParam._m0[15u].z, fma(_1176, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * _1175)) + cbSceneParam._m0[15u].w;
    float _1220 = (fma(_1179, cbSceneParam._m0[12u].z, fma(_1176, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * _1175)) + cbSceneParam._m0[12u].w) / _1219;
    float _1221 = (fma(_1179, cbSceneParam._m0[13u].z, fma(_1176, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * _1175)) + cbSceneParam._m0[13u].w) / _1219;
    float _1222 = (fma(_1179, cbSceneParam._m0[14u].z, fma(_1176, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * _1175)) + cbSceneParam._m0[14u].w) / _1219;
    vec4 _1269 = texture(sampler2D(M_Water_Melange_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * ((((fma(_1222, cbSceneParam._m0[20u].z, fma(_1221, cbSceneParam._m0[20u].y, cbSceneParam._m0[20u].x * _1220)) + cbSceneParam._m0[20u].w) - cbSceneParam._m0[92u].x) / cbMtdParam._m0[27u].z) + (cbMtdParam._m0[34u].x * _423))) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * ((((fma(_1222, cbSceneParam._m0[22u].z, fma(_1221, cbSceneParam._m0[22u].y, cbSceneParam._m0[22u].x * _1220)) + cbSceneParam._m0[22u].w) - cbSceneParam._m0[92u].z) / cbMtdParam._m0[27u].z) + (cbMtdParam._m0[34u].y * _423))) + cbTextureTilingScale._m0[7u].w));
    float _1274 = _1269.x * cbMtdParam._m0[42u].y;
    float _1275 = _1269.y * cbMtdParam._m0[42u].z;
    float _1276 = _1269.z * cbMtdParam._m0[42u].w;
    float _1293 = ((cbMtdParam._m0[24u].x - cbMtdParam._m0[22u].x) * (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0)))) + cbMtdParam._m0[22u].x;
    float _1298 = _1126 - (_1293 * _1126);
    float _1299 = _1127 - (_1293 * _1127);
    float _1300 = (_1293 * (1.0 - _1133)) + _1133;
    float _1319 = fma(_1133, _251, fma(_1127, _244, _1126 * _230));
    float _1322 = fma(_1133, _252, fma(_1127, _245, _1126 * _231));
    float _1325 = fma(_1133, _253, fma(_1127, _246, _1126 * _232));
    float _1329 = inversesqrt(dot(vec3(_1319, _1322, _1325), vec3(_1319, _1322, _1325)));
    float _1330 = _1329 * _1319;
    float _1331 = _1329 * _1322;
    float _1332 = _1329 * _1325;
    float _1335 = fma(_1300, _251, fma(_1299, _244, _1298 * _230));
    float _1338 = fma(_1300, _252, fma(_1299, _245, _1298 * _231));
    float _1341 = fma(_1300, _253, fma(_1299, _246, _1298 * _232));
    float _1345 = inversesqrt(dot(vec3(_1335, _1338, _1341), vec3(_1335, _1338, _1341)));
    float _1346 = _1345 * _1335;
    float _1347 = _1345 * _1338;
    float _1348 = _1345 * _1341;
    float _4644 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _4655 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _1350 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
    float _4666 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _4677 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _4688 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _1367 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1407 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1416 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1407);
    float _1417 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1407);
    float _1418 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1407);
    float _1422 = inversesqrt(dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418)));
    float _1423 = _1416 * _1422;
    float _1424 = _1417 * _1422;
    float _1425 = _1418 * _1422;
    vec4 _1430 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1432 = _1430.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1631 = sqrt(((_1416 * _1416) + (_1417 * _1417)) + (_1418 * _1418));
        float _1637 = (cbMatDynParam._m0[5u].x * _1631) + cbMatDynParam._m0[5u].y;
        float _4699 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
        float _1642 = (cbMatDynParam._m0[5u].z * _1631) + cbMatDynParam._m0[5u].w;
        float _4710 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) - _1638)) + _1638) < ((_1432 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1442 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1443 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1445 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1454 = (_1445.x * 2.0) + (-1.0);
    float _1455 = (_1445.y * 2.0) + (-1.0);
    float _1456 = (_1445.z * 2.0) + (-1.0);
    float _1460 = inversesqrt(dot(vec3(_1454, _1455, _1456), vec3(_1454, _1455, _1456)));
    float _1471 = ((TEXCOORD.w >= 1.0) || (((TEXCOORD.z <= 0.0) || (TEXCOORD.z >= 1.0)) || (TEXCOORD.w <= 0.0))) ? 0.0 : _1445.w;
    float _1478 = (((_1454 * _1460) - _1330) * _1471) + _1330;
    float _1479 = (((_1455 * _1460) - _1331) * _1471) + _1331;
    float _1480 = (((_1456 * _1460) - _1332) * _1471) + _1332;
    float _1498 = fma(_1480, cbSceneParam._m0[5u].z, fma(_1479, cbSceneParam._m0[5u].y, _1478 * cbSceneParam._m0[5u].x));
    float _1501 = fma(_1480, cbSceneParam._m0[6u].z, fma(_1479, cbSceneParam._m0[6u].y, _1478 * cbSceneParam._m0[6u].x));
    float _1504 = fma(_1480, cbSceneParam._m0[7u].z, fma(_1479, cbSceneParam._m0[7u].y, _1478 * cbSceneParam._m0[7u].x));
    uint _1517 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1518 = _1517 + 9u;
    uint _1519 = _1518 + uint(cbMatDynParam._m0[0u].w);
    float _1525 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0)))) * cbInstanceData._m0[_1519].x;
    float _1526 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) * cbInstanceData._m0[_1519].y;
    float _1527 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0)))) * cbInstanceData._m0[_1519].z;
    float _4721 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
    float _1528 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
    float _4732 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
    float _1529 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
    float _4743 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
    float _1530 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
    vec4 _1538 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1442, cbSceneParam._m0[86u].y * _1443));
    float _1541 = _1538.x * TEXCOORD_3.w;
    float _1545 = abs(dot(vec3(_1423, _1424, _1425), vec3(_1478, _1479, _1480)));
    float _4754 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
    float _1558 = dot(vec3(_1346, _1347, _1348), vec3(_1423, _1424, _1425)) * 2.0;
    float _1562 = (_1558 * _1346) - _1423;
    float _1563 = (_1558 * _1347) - _1424;
    float _1564 = (_1558 * _1348) - _1425;
    float _1568 = abs(dot(vec3(_1423, _1424, _1425), vec3(_1346, _1347, _1348)));
    float _4765 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
    float _1570 = sqrt(_1350);
    float _1582 = exp2((_1570 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1570 * 3.0));
    float _1613 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1617 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1621 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1945;
    float _1947;
    float _1948;
    float _1949;
    float _1950;
    float _1951;
    float _1952;
    float _1953;
    float _1954;
    float _1955;
    float _1956;
    float _1957;
    float _1958;
    float _1959;
    float _1960;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1674 = fma(_1621, cbModelParam._m0[26u].z, fma(_1617, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1613));
        float _1678 = fma(_1621, cbModelParam._m0[27u].z, fma(_1617, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1613));
        float _1682 = fma(_1621, cbModelParam._m0[28u].z, fma(_1617, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1613));
        float _1704 = _1613 + _1346;
        float _1705 = _1617 + _1347;
        float _1706 = _1621 + _1348;
        float _1716 = fma(_1706, cbModelParam._m0[26u].z, fma(_1705, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1704)) - _1674;
        float _1717 = fma(_1706, cbModelParam._m0[27u].z, fma(_1705, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1704)) - _1678;
        float _1718 = fma(_1706, cbModelParam._m0[28u].z, fma(_1705, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1704)) - _1682;
        float _1722 = inversesqrt(dot(vec3(_1716, _1717, _1718), vec3(_1716, _1717, _1718)));
        float _1734 = ((_1722 * _1716) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1674 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1735 = ((_1722 * _1717) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1678 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1736 = ((_1722 * _1718) / cbModelParam._m0[34u].z) + ((((((_1682 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1739 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1734, _1735, _1736), 0.0);
        vec4 _1746 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1734, _1735, _1736), 0.0);
        vec4 _1753 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1734, _1735, _1736), 0.0);
        vec4 _1760 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1734, _1735, _1736), 0.0);
        float _1773 = exp2((_1739.w + (-0.5)) * 20.0) * 2.0;
        float _1774 = _1773 * (_1739.x + (-0.5));
        float _1775 = _1773 * (_1739.y + (-0.5));
        float _1776 = _1773 * (_1739.z + (-0.5));
        float _1783 = exp2((_1746.w + (-0.5)) * 20.0) * 2.0;
        float _1784 = _1783 * (_1746.x + (-0.5));
        float _1785 = _1783 * (_1746.y + (-0.5));
        float _1786 = _1783 * (_1746.z + (-0.5));
        float _1793 = exp2((_1753.w + (-0.5)) * 20.0) * 2.0;
        float _1794 = _1793 * (_1753.x + (-0.5));
        float _1795 = _1793 * (_1753.y + (-0.5));
        float _1796 = _1793 * (_1753.z + (-0.5));
        float _1803 = exp2((_1760.w + (-0.5)) * 20.0) * 2.0;
        float _1804 = _1803 * (_1760.x + (-0.5));
        float _1805 = _1803 * (_1760.y + (-0.5));
        float _1806 = _1803 * (_1760.z + (-0.5));
        float _1807 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1808 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1809 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1810 = _1774 * 0.5;
        float _1811 = _1784 * 0.5;
        float _1812 = _1794 * 0.5;
        float _1813 = dot(vec3(_1810, _1811, _1812), vec3(_1810, _1811, _1812));
        float _1818 = (_1813 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1813);
        float _1827 = (dot(vec3(_1346, _1347, _1348), vec3(_1818 * _1810, _1818 * _1811, _1818 * _1812)) + 1.0) * 0.5;
        float _4791 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1837 = sqrt(((_1811 * _1811) + (_1810 * _1810)) + (_1812 * _1812)) / (_1807 + 9.9999997473787516355514526367188e-06);
        float _4802 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
        float _1838 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
        float _1839 = _1838 * 2.0;
        float _1843 = (1.0 - _1838) / (_1838 + 1.0);
        float _4813 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
        float _1844 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
        float _1853 = ((((1.0 - _1844) * (_1839 + 2.0)) * exp2(log2(isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * (_1839 + 1.0))) + _1844) * _1807;
        float _1854 = _1775 * 0.5;
        float _1855 = _1785 * 0.5;
        float _1856 = _1795 * 0.5;
        float _1857 = dot(vec3(_1854, _1855, _1856), vec3(_1854, _1855, _1856));
        float _1862 = (_1857 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1857);
        float _1870 = (dot(vec3(_1346, _1347, _1348), vec3(_1862 * _1854, _1862 * _1855, _1862 * _1856)) + 1.0) * 0.5;
        float _4824 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
        float _1879 = sqrt(((_1855 * _1855) + (_1854 * _1854)) + (_1856 * _1856)) / (_1808 + 9.9999997473787516355514526367188e-06);
        float _4835 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
        float _1880 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
        float _1881 = _1880 * 2.0;
        float _1885 = (1.0 - _1880) / (_1880 + 1.0);
        float _4846 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
        float _1886 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
        float _1895 = ((((1.0 - _1886) * (_1881 + 2.0)) * exp2(log2(isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0))) * (_1881 + 1.0))) + _1886) * _1808;
        float _1896 = _1776 * 0.5;
        float _1897 = _1786 * 0.5;
        float _1898 = _1796 * 0.5;
        float _1899 = dot(vec3(_1896, _1897, _1898), vec3(_1896, _1897, _1898));
        float _1904 = (_1899 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1899);
        float _1912 = (dot(vec3(_1346, _1347, _1348), vec3(_1904 * _1896, _1904 * _1897, _1904 * _1898)) + 1.0) * 0.5;
        float _4857 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
        float _1921 = sqrt(((_1897 * _1897) + (_1896 * _1896)) + (_1898 * _1898)) / (_1809 + 9.9999997473787516355514526367188e-06);
        float _4868 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
        float _1922 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
        float _1923 = _1922 * 2.0;
        float _1927 = (1.0 - _1922) / (_1922 + 1.0);
        float _4879 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
        float _1928 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
        float _1937 = ((((1.0 - _1928) * (_1923 + 2.0)) * exp2(log2(isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0))) * (_1923 + 1.0))) + _1928) * _1809;
        _1945 = _1776;
        _1947 = _1775;
        _1948 = _1774;
        _1949 = _1786;
        _1950 = _1785;
        _1951 = _1784;
        _1952 = _1796;
        _1953 = _1795;
        _1954 = _1794;
        _1955 = _1809;
        _1956 = _1808;
        _1957 = _1807;
        _1958 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0)));
        _1959 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0)));
        _1960 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0)));
    }
    else
    {
        _1945 = _1946;
        _1947 = _1946;
        _1948 = _1946;
        _1949 = _1946;
        _1950 = _1946;
        _1951 = _1946;
        _1952 = _1946;
        _1953 = _1946;
        _1954 = _1946;
        _1955 = _1946;
        _1956 = _1946;
        _1957 = _1946;
        _1958 = 0.0;
        _1959 = 0.0;
        _1960 = 0.0;
    }
    float _2254;
    float _2255;
    float _2256;
    float _2257;
    float _2258;
    float _2259;
    float _2260;
    float _2261;
    float _2262;
    float _2263;
    float _2264;
    float _2265;
    float _2266;
    float _2267;
    float _2268;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1987 = fma(_1621, cbModelParam._m0[30u].z, fma(_1617, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1613));
        float _1991 = fma(_1621, cbModelParam._m0[31u].z, fma(_1617, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1613));
        float _1995 = fma(_1621, cbModelParam._m0[32u].z, fma(_1617, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1613));
        float _2017 = _1613 + _1346;
        float _2018 = _1617 + _1347;
        float _2019 = _1621 + _1348;
        float _2029 = fma(_2019, cbModelParam._m0[30u].z, fma(_2018, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _2017)) - _1987;
        float _2030 = fma(_2019, cbModelParam._m0[31u].z, fma(_2018, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _2017)) - _1991;
        float _2031 = fma(_2019, cbModelParam._m0[32u].z, fma(_2018, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _2017)) - _1995;
        float _2035 = inversesqrt(dot(vec3(_2029, _2030, _2031), vec3(_2029, _2030, _2031)));
        float _2047 = ((_2035 * _2029) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1987 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _2048 = ((_2035 * _2030) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1991 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _2049 = ((_2035 * _2031) / cbModelParam._m0[35u].z) + ((((((_1995 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _2051 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_2047, _2048, _2049), 0.0);
        vec4 _2058 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_2047, _2048, _2049), 0.0);
        vec4 _2065 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_2047, _2048, _2049), 0.0);
        vec4 _2072 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_2047, _2048, _2049), 0.0);
        float _2084 = exp2((_2051.w + (-0.5)) * 20.0) * 2.0;
        float _2085 = _2084 * (_2051.x + (-0.5));
        float _2086 = _2084 * (_2051.y + (-0.5));
        float _2087 = _2084 * (_2051.z + (-0.5));
        float _2094 = exp2((_2058.w + (-0.5)) * 20.0) * 2.0;
        float _2095 = _2094 * (_2058.x + (-0.5));
        float _2096 = _2094 * (_2058.y + (-0.5));
        float _2097 = _2094 * (_2058.z + (-0.5));
        float _2104 = exp2((_2065.w + (-0.5)) * 20.0) * 2.0;
        float _2105 = _2104 * (_2065.x + (-0.5));
        float _2106 = _2104 * (_2065.y + (-0.5));
        float _2107 = _2104 * (_2065.z + (-0.5));
        float _2114 = exp2((_2072.w + (-0.5)) * 20.0) * 2.0;
        float _2115 = _2114 * (_2072.x + (-0.5));
        float _2116 = _2114 * (_2072.y + (-0.5));
        float _2117 = _2114 * (_2072.z + (-0.5));
        float _2118 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2119 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2120 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2121 = _2085 * 0.5;
        float _2122 = _2095 * 0.5;
        float _2123 = _2105 * 0.5;
        float _2124 = dot(vec3(_2121, _2122, _2123), vec3(_2121, _2122, _2123));
        float _2129 = (_2124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2124);
        float _2137 = (dot(vec3(_1346, _1347, _1348), vec3(_2129 * _2121, _2129 * _2122, _2129 * _2123)) + 1.0) * 0.5;
        float _4920 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2146 = sqrt(((_2122 * _2122) + (_2121 * _2121)) + (_2123 * _2123)) / (_2118 + 9.9999997473787516355514526367188e-06);
        float _4931 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2147 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
        float _2148 = _2147 * 2.0;
        float _2152 = (1.0 - _2147) / (_2147 + 1.0);
        float _4942 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2153 = isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0));
        float _2162 = ((((1.0 - _2153) * (_2148 + 2.0)) * exp2(log2(isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0))) * (_2148 + 1.0))) + _2153) * _2118;
        float _2163 = _2086 * 0.5;
        float _2164 = _2096 * 0.5;
        float _2165 = _2106 * 0.5;
        float _2166 = dot(vec3(_2163, _2164, _2165), vec3(_2163, _2164, _2165));
        float _2171 = (_2166 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2166);
        float _2179 = (dot(vec3(_1346, _1347, _1348), vec3(_2171 * _2163, _2171 * _2164, _2171 * _2165)) + 1.0) * 0.5;
        float _4953 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2188 = sqrt(((_2164 * _2164) + (_2163 * _2163)) + (_2165 * _2165)) / (_2119 + 9.9999997473787516355514526367188e-06);
        float _4964 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2189 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
        float _2190 = _2189 * 2.0;
        float _2194 = (1.0 - _2189) / (_2189 + 1.0);
        float _4975 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        float _2195 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
        float _2204 = ((((1.0 - _2195) * (_2190 + 2.0)) * exp2(log2(isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0))) * (_2190 + 1.0))) + _2195) * _2119;
        float _2205 = _2087 * 0.5;
        float _2206 = _2097 * 0.5;
        float _2207 = _2107 * 0.5;
        float _2208 = dot(vec3(_2205, _2206, _2207), vec3(_2205, _2206, _2207));
        float _2213 = (_2208 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2208);
        float _2221 = (dot(vec3(_1346, _1347, _1348), vec3(_2213 * _2205, _2213 * _2206, _2213 * _2207)) + 1.0) * 0.5;
        float _4986 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2230 = sqrt(((_2206 * _2206) + (_2205 * _2205)) + (_2207 * _2207)) / (_2120 + 9.9999997473787516355514526367188e-06);
        float _4997 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2231 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
        float _2232 = _2231 * 2.0;
        float _2236 = (1.0 - _2231) / (_2231 + 1.0);
        float _5008 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2237 = isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0));
        float _2246 = ((((1.0 - _2237) * (_2232 + 2.0)) * exp2(log2(isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0))) * (_2232 + 1.0))) + _2237) * _2120;
        _2254 = _2087;
        _2255 = _2086;
        _2256 = _2085;
        _2257 = _2097;
        _2258 = _2096;
        _2259 = _2095;
        _2260 = _2107;
        _2261 = _2106;
        _2262 = _2105;
        _2263 = _2120;
        _2264 = _2119;
        _2265 = _2118;
        _2266 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0)));
        _2267 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0)));
        _2268 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0)));
    }
    else
    {
        _2254 = _1946;
        _2255 = _1946;
        _2256 = _1946;
        _2257 = _1946;
        _2258 = _1946;
        _2259 = _1946;
        _2260 = _1946;
        _2261 = _1946;
        _2262 = _1946;
        _2263 = _1946;
        _2264 = _1946;
        _2265 = _1946;
        _2266 = 0.0;
        _2267 = 0.0;
        _2268 = 0.0;
    }
    float _2278 = (cbModelParam._m0[1u].x * (_2266 - _1958)) + _1958;
    float _2279 = (cbModelParam._m0[1u].x * (_2267 - _1959)) + _1959;
    float _2280 = (cbModelParam._m0[1u].x * (_2268 - _1960)) + _1960;
    float _2301 = fma(_2280, cbSceneParam._m0[89u].z, fma(_2279, cbSceneParam._m0[89u].y, _2278 * cbSceneParam._m0[89u].x));
    float _2304 = fma(_2280, cbSceneParam._m0[90u].z, fma(_2279, cbSceneParam._m0[90u].y, _2278 * cbSceneParam._m0[90u].x));
    float _2307 = fma(_2280, cbSceneParam._m0[91u].z, fma(_2279, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2278));
    float _2320 = _1562 * 0.5;
    float _2321 = _1563 * 0.5;
    float _2322 = _1564 * 0.5;
    float _2323 = dot(vec4(_2320, _2321, _2322, 1.0), vec4(_2256, _2259, _2262, _2265));
    float _2326 = dot(vec4(_2320, _2321, _2322, 1.0), vec4(_2255, _2258, _2261, _2264));
    float _2329 = dot(vec4(_2320, _2321, _2322, 1.0), vec4(_2254, _2257, _2260, _2263));
    float _2363;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2336 = dot(vec4(_2320, _2321, _2322, 1.0), vec4(_1945, _1949, _1952, _1955));
        float _2340 = dot(vec4(_2320, _2321, _2322, 1.0), vec4(_1947, _1950, _1953, _1956));
        float _2344 = dot(vec4(_2320, _2321, _2322, 1.0), vec4(_1948, _1951, _1954, _1957));
        float _2351 = dot(vec4(cbModelParam._m0[39u]), vec4(_2320, _2321, _2322, 1.0));
        _2363 = dot(vec3(isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0)), isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0)), isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2351) ? 0.0 : (isnan(0.0) ? _2351 : max(0.0, _2351))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2363 = 1.0;
    }
    float _2374;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2365 = dot(vec4(cbModelParam._m0[40u]), vec4(_2320, _2321, _2322, 1.0));
        _2374 = dot(vec3(isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0)), isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0)), isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2365) ? 0.0 : (isnan(0.0) ? _2365 : max(0.0, _2365))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2374 = 1.0;
    }
    float _2378 = (_2374 * cbModelParam._m0[1u].x) + (_2363 * (1.0 - cbModelParam._m0[1u].x));
    float _2388 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1350);
    float _2389 = isnan(_2388) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2388 : min(cbModelParam._m0[25u].z, _2388));
    float _2469;
    float _2471;
    float _2473;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2436 = fma(_1621, cbModelParam._m0[13u].z, fma(_1617, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1613)) + cbModelParam._m0[13u].w;
        float _2440 = fma(_1621, cbModelParam._m0[14u].z, fma(_1617, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1613)) + cbModelParam._m0[14u].w;
        float _2444 = fma(_1621, cbModelParam._m0[15u].z, fma(_1617, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1613)) + cbModelParam._m0[15u].w;
        float _2447 = fma(_1564, cbModelParam._m0[13u].z, fma(_1563, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1562));
        float _2450 = fma(_1564, cbModelParam._m0[14u].z, fma(_1563, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1562));
        float _2453 = fma(_1564, cbModelParam._m0[15u].z, fma(_1563, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1562));
        float _2481;
        if (_2447 > 0.0)
        {
            _2481 = abs((1.0 - _2436) / _2447);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2447 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_2436 + 1.0) / _2447);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2481 = frontier_phi_19_17_ladder;
        }
        float _2869;
        if (_2450 > 0.0)
        {
            _2869 = abs((1.0 - _2440) / _2450);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2450 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2440 + 1.0) / _2450);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2869 = frontier_phi_28_24_ladder;
        }
        float _3308;
        if (_2453 > 0.0)
        {
            _3308 = abs((1.0 - _2444) / _2453);
        }
        else
        {
            float frontier_phi_42_35_ladder;
            if (_2453 < 0.0)
            {
                frontier_phi_42_35_ladder = abs((_2444 + 1.0) / _2453);
            }
            else
            {
                frontier_phi_42_35_ladder = 5000.0;
            }
            _3308 = frontier_phi_42_35_ladder;
        }
        float _3310 = isnan(_2869) ? _2481 : (isnan(_2481) ? _2869 : min(_2481, _2869));
        float _3311 = isnan(_3308) ? _3310 : (isnan(_3310) ? _3308 : min(_3310, _3308));
        float _3315 = (_3311 * _2447) + _2436;
        float _3316 = (_3311 * _2450) + _2440;
        float _3317 = (_3311 * _2453) + _2444;
        float _3318 = _3311 * 9.9999997473787516355514526367188e-05;
        float _3320 = (-1.0) - _3318;
        float _3322 = _3318 + 1.0;
        float frontier_phi_18_42_ladder;
        float frontier_phi_18_42_ladder_1;
        float frontier_phi_18_42_ladder_2;
        if ((_3317 > _3322) || ((_3317 < _3320) || ((_3316 > _3322) || ((_3316 < _3320) || ((_3315 < _3320) || (_3315 > _3322))))))
        {
            frontier_phi_18_42_ladder = 0.0;
            frontier_phi_18_42_ladder_1 = 0.0;
            frontier_phi_18_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3534 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_3317, cbModelParam._m0[9u].z, fma(_3316, cbModelParam._m0[9u].y, _3315 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_3317, cbModelParam._m0[10u].z, fma(_3316, cbModelParam._m0[10u].y, _3315 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_3317, cbModelParam._m0[11u].z, fma(_3316, cbModelParam._m0[11u].y, _3315 * cbModelParam._m0[11u].x))), _2389);
            frontier_phi_18_42_ladder = _3534.z * cbModelParam._m0[1u].y;
            frontier_phi_18_42_ladder_1 = _3534.y * cbModelParam._m0[1u].y;
            frontier_phi_18_42_ladder_2 = _3534.x * cbModelParam._m0[1u].y;
        }
        _2469 = frontier_phi_18_42_ladder_2;
        _2471 = frontier_phi_18_42_ladder_1;
        _2473 = frontier_phi_18_42_ladder;
    }
    else
    {
        vec4 _2457 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1562, _1563, _1564), _2389);
        _2469 = _2457.x * cbModelParam._m0[1u].y;
        _2471 = _2457.y * cbModelParam._m0[1u].y;
        _2473 = _2457.z * cbModelParam._m0[1u].y;
    }
    float _2477 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1350);
    float _2478 = isnan(_2477) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2477 : min(cbModelParam._m0[25u].w, _2477));
    float _2567;
    float _2569;
    float _2571;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2531 = fma(_1621, cbModelParam._m0[21u].z, fma(_1617, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1613)) + cbModelParam._m0[21u].w;
        float _2535 = fma(_1621, cbModelParam._m0[22u].z, fma(_1617, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1613)) + cbModelParam._m0[22u].w;
        float _2539 = fma(_1621, cbModelParam._m0[23u].z, fma(_1617, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1613)) + cbModelParam._m0[23u].w;
        float _2542 = fma(_1564, cbModelParam._m0[21u].z, fma(_1563, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1562));
        float _2545 = fma(_1564, cbModelParam._m0[22u].z, fma(_1563, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1562));
        float _2548 = fma(_1564, cbModelParam._m0[23u].z, fma(_1563, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1562));
        float _2874;
        if (_2542 > 0.0)
        {
            _2874 = abs((1.0 - _2531) / _2542);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2542 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2531 + 1.0) / _2542);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2874 = frontier_phi_30_26_ladder;
        }
        float _3335;
        if (_2545 > 0.0)
        {
            _3335 = abs((1.0 - _2535) / _2545);
        }
        else
        {
            float frontier_phi_44_37_ladder;
            if (_2545 < 0.0)
            {
                frontier_phi_44_37_ladder = abs((_2535 + 1.0) / _2545);
            }
            else
            {
                frontier_phi_44_37_ladder = 5000.0;
            }
            _3335 = frontier_phi_44_37_ladder;
        }
        float _3611;
        if (_2548 > 0.0)
        {
            _3611 = abs((1.0 - _2539) / _2548);
        }
        else
        {
            float frontier_phi_61_53_ladder;
            if (_2548 < 0.0)
            {
                frontier_phi_61_53_ladder = abs((_2539 + 1.0) / _2548);
            }
            else
            {
                frontier_phi_61_53_ladder = 5000.0;
            }
            _3611 = frontier_phi_61_53_ladder;
        }
        float _3613 = isnan(_3335) ? _2874 : (isnan(_2874) ? _3335 : min(_2874, _3335));
        float _3614 = isnan(_3611) ? _3613 : (isnan(_3613) ? _3611 : min(_3613, _3611));
        float _3618 = (_3614 * _2542) + _2531;
        float _3619 = (_3614 * _2545) + _2535;
        float _3620 = (_3614 * _2548) + _2539;
        float _3621 = _3614 * 9.9999997473787516355514526367188e-05;
        float _3622 = (-1.0) - _3621;
        float _3624 = _3621 + 1.0;
        float frontier_phi_27_61_ladder;
        float frontier_phi_27_61_ladder_1;
        float frontier_phi_27_61_ladder_2;
        if ((_3620 > _3624) || ((_3620 < _3622) || ((_3619 > _3624) || ((_3619 < _3622) || ((_3618 < _3622) || (_3618 > _3624))))))
        {
            frontier_phi_27_61_ladder = 0.0;
            frontier_phi_27_61_ladder_1 = 0.0;
            frontier_phi_27_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3896 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3620, cbModelParam._m0[17u].z, fma(_3619, cbModelParam._m0[17u].y, _3618 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3620, cbModelParam._m0[18u].z, fma(_3619, cbModelParam._m0[18u].y, _3618 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3620, cbModelParam._m0[19u].z, fma(_3619, cbModelParam._m0[19u].y, _3618 * cbModelParam._m0[19u].x))), _2478);
            frontier_phi_27_61_ladder = _3896.y * cbModelParam._m0[1u].z;
            frontier_phi_27_61_ladder_1 = _3896.z * cbModelParam._m0[1u].z;
            frontier_phi_27_61_ladder_2 = _3896.x * cbModelParam._m0[1u].z;
        }
        _2567 = frontier_phi_27_61_ladder_2;
        _2569 = frontier_phi_27_61_ladder;
        _2571 = frontier_phi_27_61_ladder_1;
    }
    else
    {
        vec4 _2551 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1562, _1563, _1564), _2478);
        _2567 = _2551.x * cbModelParam._m0[1u].z;
        _2569 = _2551.y * cbModelParam._m0[1u].z;
        _2571 = _2551.z * cbModelParam._m0[1u].z;
    }
    float _2583 = ((((1.0 - _1582) * ((_1570 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1582 * _1570)) * _1541;
    float _2584 = _2583 * ((cbModelParam._m0[1u].w * (_2567 - _2469)) + _2469);
    float _2585 = _2583 * ((cbModelParam._m0[1u].w * (_2569 - _2471)) + _2471);
    float _2586 = _2583 * ((cbModelParam._m0[1u].w * (_2571 - _2473)) + _2473);
    float _2589 = fma(_2586, cbSceneParam._m0[89u].z, fma(_2585, cbSceneParam._m0[89u].y, _2584 * cbSceneParam._m0[89u].x));
    float _2592 = fma(_2586, cbSceneParam._m0[90u].z, fma(_2585, cbSceneParam._m0[90u].y, _2584 * cbSceneParam._m0[90u].x));
    float _2595 = fma(_2586, cbSceneParam._m0[91u].z, fma(_2585, cbSceneParam._m0[91u].y, _2584 * cbSceneParam._m0[91u].x));
    float _2614 = (cbSceneParam._m0[88u].y * (1.0 - _1350)) + cbSceneParam._m0[88u].z;
    float _5134 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
    vec4 _2618 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(_1442, _1443), (isnan(1.0) ? _5134 : (isnan(_5134) ? 1.0 : min(_5134, 1.0))) * 5.0);
    float _2634 = 1.0 - _2618.w;
    uint _2641 = _1517 + 5u;
    uvec4 _2644 = floatBitsToUint(cbInstanceData._m0[_2641]);
    uint _2646 = _2644.x * 14u;
    uint _2647 = _2646 + 13u;
    float _2652 = _1541 + (-1.0);
    float _2655 = (cbLight._m0[_2647].x * _2652) + 1.0;
    float _2656 = (cbLight._m0[_2647].y * _2652) + 1.0;
    uint _2657 = _2646 + 5u;
    float _2663 = isnan(1.0) ? _2656 : (isnan(_2656) ? 1.0 : min(_2656, 1.0));
    uint _2667 = _2646 + 4u;
    float _2673 = isnan(1.0) ? _2655 : (isnan(_2655) ? 1.0 : min(_2655, 1.0));
    uint _2677 = _2646 | 1u;
    float _2688 = dot(vec3(cbLight._m0[_2646].xyz), vec3(_1478, _1479, _1480));
    float _2691 = dot(vec3(cbLight._m0[_2677].xyz), vec3(_1478, _1479, _1480));
    float _5155 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
    float _5166 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
    float _2696 = (isnan(1.0) ? _5155 : (isnan(_5155) ? 1.0 : min(_5155, 1.0))) * 0.3183098733425140380859375;
    float _2698 = (isnan(1.0) ? _5166 : (isnan(_5166) ? 1.0 : min(_5166, 1.0))) * 0.3183098733425140380859375;
    float _2705 = ((cbLight._m0[_2657].x * _2663) * _2698) + ((cbLight._m0[_2667].x * _2673) * _2696);
    float _2706 = ((_2663 * cbLight._m0[_2657].y) * _2698) + ((_2673 * cbLight._m0[_2667].y) * _2696);
    float _2707 = ((_2663 * cbLight._m0[_2657].z) * _2698) + ((_2673 * cbLight._m0[_2667].z) * _2696);
    uint _2709 = _2646 + 8u;
    float _2722 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2646].w)) * _1350) * 0.949999988079071044921875);
    float _2723 = _2722 * _2722;
    float _2724 = cbLight._m0[_2646].x + _1423;
    float _2725 = cbLight._m0[_2646].y + _1424;
    float _2726 = cbLight._m0[_2646].z + _1425;
    float _2730 = inversesqrt(dot(vec3(_2724, _2725, _2726), vec3(_2724, _2725, _2726)));
    float _2731 = _2730 * _2724;
    float _2732 = _2730 * _2725;
    float _2733 = _2730 * _2726;
    float _2734 = dot(vec3(_1478, _1479, _1480), vec3(cbLight._m0[_2646].xyz));
    float _5177 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
    float _2737 = isnan(1.0) ? _5177 : (isnan(_5177) ? 1.0 : min(_5177, 1.0));
    float _2738 = dot(vec3(_1478, _1479, _1480), vec3(_1423, _1424, _1425));
    float _5188 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
    float _2741 = isnan(1.0) ? _5188 : (isnan(_5188) ? 1.0 : min(_5188, 1.0));
    float _2742 = dot(vec3(_1478, _1479, _1480), vec3(_2731, _2732, _2733));
    float _5199 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
    float _2745 = isnan(1.0) ? _5199 : (isnan(_5199) ? 1.0 : min(_5199, 1.0));
    float _2746 = dot(vec3(cbLight._m0[_2646].xyz), vec3(_2731, _2732, _2733));
    float _5210 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
    float _2750 = _2723 * _2723;
    float _2754 = ((_2745 * _2745) * (_2750 + (-1.0))) + 1.0;
    float _2765 = (exp2(log2(1.0 - (isnan(1.0) ? _5210 : (isnan(_5210) ? 1.0 : min(_5210, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2766 = 1.0 - _2723;
    float _2777 = (0.5 / (((_2741 * ((_2737 * _2766) + _2723)) + 9.9999999392252902907785028219223e-09) + (((_2741 * _2766) + _2723) * _2737))) * _2737;
    float _5221 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
    float _2779 = (isnan(1.0) ? _5221 : (isnan(_5221) ? 1.0 : min(_5221, 1.0))) * (_2750 / ((_2754 * _2754) * 3.141590118408203125));
    uint _2790 = _2646 + 9u;
    float _2801 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2677].w)) * _1350) * 0.949999988079071044921875);
    float _2802 = _2801 * _2801;
    float _2803 = cbLight._m0[_2677].x + _1423;
    float _2804 = cbLight._m0[_2677].y + _1424;
    float _2805 = cbLight._m0[_2677].z + _1425;
    float _2809 = inversesqrt(dot(vec3(_2803, _2804, _2805), vec3(_2803, _2804, _2805)));
    float _2810 = _2809 * _2803;
    float _2811 = _2809 * _2804;
    float _2812 = _2809 * _2805;
    float _2813 = dot(vec3(_1478, _1479, _1480), vec3(cbLight._m0[_2677].xyz));
    float _5232 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
    float _2816 = isnan(1.0) ? _5232 : (isnan(_5232) ? 1.0 : min(_5232, 1.0));
    float _2817 = dot(vec3(_1478, _1479, _1480), vec3(_2810, _2811, _2812));
    float _5243 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
    float _2820 = isnan(1.0) ? _5243 : (isnan(_5243) ? 1.0 : min(_5243, 1.0));
    float _2821 = dot(vec3(cbLight._m0[_2677].xyz), vec3(_2810, _2811, _2812));
    float _5254 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
    float _2825 = _2802 * _2802;
    float _2829 = ((_2820 * _2820) * (_2825 + (-1.0))) + 1.0;
    float _2838 = (exp2(log2(1.0 - (isnan(1.0) ? _5254 : (isnan(_5254) ? 1.0 : min(_5254, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2839 = 1.0 - _2802;
    float _2849 = (0.5 / (((_2741 * ((_2816 * _2839) + _2802)) + 9.9999999392252902907785028219223e-09) + (((_2741 * _2839) + _2802) * _2816))) * _2816;
    float _5265 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
    float _2851 = (isnan(1.0) ? _5265 : (isnan(_5265) ? 1.0 : min(_5265, 1.0))) * (_2825 / ((_2829 * _2829) * 3.141590118408203125));
    float _2861 = (((_2838 * cbLight._m0[_2790].x) * _2851) * _2663) + (((_2765 * cbLight._m0[_2709].x) * _2779) * _2673);
    float _2862 = (((_2838 * cbLight._m0[_2790].y) * _2851) * _2663) + (((_2765 * cbLight._m0[_2709].y) * _2779) * _2673);
    float _2863 = (((_2838 * cbLight._m0[_2790].z) * _2851) * _2663) + (((_2765 * cbLight._m0[_2709].z) * _2779) * _2673);
    float _2977;
    float _2979;
    float _2981;
    float _2983;
    float _2985;
    float _2987;
    if (_2644.y == 0u)
    {
        float _2918 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2919 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2918;
        float _2920 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2918;
        float _2921 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2918;
        uvec4 _2933 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2934 = _2933.x;
        uint _2945 = uint((float(_2933.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1443) / _2934))) + floor(float(uint(cbSceneParam._m0[85u].x * _1442) / _2934)));
        float _2955 = (log2(_2921 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2956 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
        uint _2959 = uint(isnan(14.0) ? _2956 : (isnan(_2956) ? 14.0 : min(_2956, 14.0)));
        uvec4 _2964 = texelFetch(g_lightClusterGridBuffer, int(((_2959 << 2u) + (_2945 << 6u)) >> 2u));
        uint _2965 = _2964.x;
        uint _2966 = _2933.z;
        float _3126;
        float _3128;
        float _3130;
        float _3132;
        float _3134;
        float _3136;
        if (((((1u << ((_2966 >> 4u) & 15u)) + 4294967295u) & _2965) == 0u) || ((_2966 & 240u) == 0u))
        {
            _3126 = 0.0;
            _3128 = 0.0;
            _3130 = 0.0;
            _3132 = 0.0;
            _3134 = 0.0;
            _3136 = 0.0;
        }
        else
        {
            float _3127;
            float _3129;
            float _3131;
            float _3133;
            float _3135;
            float _3137;
            float _3372 = 0.0;
            float _3373 = 0.0;
            float _3374 = 0.0;
            float _3375 = 0.0;
            float _3376 = 0.0;
            float _3377 = 0.0;
            uint _3378 = 0u;
            uint _3387;
            bool _3388;
            for (;;)
            {
                _3387 = texelFetch(g_lightClassification, int((((_2959 << 5u) + (_2945 << 9u)) + (_3378 << 2u)) >> 2u)).x;
                _3388 = _3387 == 0u;
                float frontier_phi_55_pred;
                float frontier_phi_55_pred_1;
                float frontier_phi_55_pred_2;
                float frontier_phi_55_pred_3;
                float frontier_phi_55_pred_4;
                float frontier_phi_55_pred_5;
                if (_3388)
                {
                    frontier_phi_55_pred = _3376;
                    frontier_phi_55_pred_1 = _3377;
                    frontier_phi_55_pred_2 = _3375;
                    frontier_phi_55_pred_3 = _3374;
                    frontier_phi_55_pred_4 = _3373;
                    frontier_phi_55_pred_5 = _3372;
                }
                else
                {
                    float _3654;
                    float _3655;
                    float _3656;
                    float _3657;
                    float _3658;
                    float _3659;
                    uint _3660;
                    _3654 = _3372;
                    _3655 = _3373;
                    _3656 = _3374;
                    _3657 = _3375;
                    _3658 = _3376;
                    _3659 = _3377;
                    _3660 = _3387;
                    float _3543;
                    float _3544;
                    float _3545;
                    float _3546;
                    float _3547;
                    float _3548;
                    for (;;)
                    {
                        uint _3664 = uint(findLSB(_3660)) + (_3378 << 5u);
                        uint _3661 = (_3660 + 4294967295u) & _3660;
                        uint _3666 = _3664 * 48u;
                        vec4 _3680 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3666)).x, texelFetch(g_PointLightRenderingBuffer, int(_3666 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3666 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3666 + 3u)).x));
                        uint _3686 = (_3664 * 48u) + 4u;
                        vec4 _3699 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3686)).x, texelFetch(g_PointLightRenderingBuffer, int(_3686 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3686 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3686 + 3u)).x));
                        uint _3705 = (_3664 * 48u) + 8u;
                        vec3 _3716 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3705)).x, texelFetch(g_PointLightRenderingBuffer, int(_3705 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3705 + 2u)).x));
                        float _3720 = _3680.x - _2919;
                        float _3721 = _3680.y - _2920;
                        float _3722 = _3680.z - _2921;
                        float _3723 = dot(vec3(_3720, _3721, _3722), vec3(_3720, _3721, _3722));
                        float _3726 = inversesqrt(_3723);
                        float _3727 = _3726 * _3720;
                        float _3728 = _3726 * _3721;
                        float _3729 = _3726 * _3722;
                        float _3730 = dot(vec3(_1498, _1501, _1504), vec3(_3727, _3728, _3729));
                        float _3735 = 1.0 - (_3723 * _3680.w);
                        float _5286 = isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0));
                        float _3736 = isnan(1.0) ? _5286 : (isnan(_5286) ? 1.0 : min(_5286, 1.0));
                        float _3737 = sqrt(_3723) * _3699.w;
                        float _3740 = 1.39999997615814208984375 / (_3737 + 1.39999997615814208984375);
                        float _3741 = _3740 * _3740;
                        float _3744 = ((1.0 - _3741) * _3730) + _3741;
                        float _3747 = _3737 * _3737;
                        float _3751 = ((isnan(0.0) ? _3744 : (isnan(_3744) ? 0.0 : max(_3744, 0.0))) * _3736) / ((_3747 * 0.699999988079071044921875) + 1.0);
                        float _3755 = (-0.0) - _2919;
                        float _3756 = (-0.0) - _2920;
                        float _3757 = (-0.0) - _2921;
                        float _3761 = inversesqrt(dot(vec3(_3755, _3756, _3757), vec3(_3755, _3756, _3757)));
                        float _3762 = _3761 * _3755;
                        float _3763 = _3761 * _3756;
                        float _3764 = _3761 * _3757;
                        float _3772 = exp2(log2(1.0 / ((_3747 * 3.5) + 5.0)) * 0.25);
                        float _3773 = 1.0 - _1570;
                        float _3780 = sqrt(1.0 - ((1.0 - (_3773 * _3773)) * (1.0 - (_3772 * _3772))));
                        float _3781 = _3780 * _3780;
                        float _3782 = _3781 * _3781;
                        float _3783 = _3762 + _3727;
                        float _3784 = _3763 + _3728;
                        float _3785 = _3764 + _3729;
                        float _3789 = inversesqrt(dot(vec3(_3783, _3784, _3785), vec3(_3783, _3784, _3785)));
                        float _3793 = dot(vec3(_1498, _1501, _1504), vec3(_3762, _3763, _3764));
                        float _5302 = isnan(0.0) ? _3793 : (isnan(_3793) ? 0.0 : max(_3793, 0.0));
                        float _3796 = isnan(1.0) ? _5302 : (isnan(_5302) ? 1.0 : min(_5302, 1.0));
                        float _3797 = dot(vec3(_1498, _1501, _1504), vec3(_3789 * _3783, _3789 * _3784, _3789 * _3785));
                        float _5313 = isnan(0.0) ? _3797 : (isnan(_3797) ? 0.0 : max(_3797, 0.0));
                        float _3800 = isnan(1.0) ? _5313 : (isnan(_5313) ? 1.0 : min(_5313, 1.0));
                        float _3804 = ((_3800 * _3800) * (_3782 + (-1.0))) + 1.0;
                        float _3805 = _3740 * _3781;
                        float _3806 = _3805 * _3805;
                        float _3809 = ((1.0 - _3806) * _3730) + _3806;
                        float _5324 = isnan(0.0) ? _3809 : (isnan(_3809) ? 0.0 : max(_3809, 0.0));
                        float _3810 = isnan(1.0) ? _5324 : (isnan(_5324) ? 1.0 : min(_5324, 1.0));
                        float _3811 = 1.0 - _3781;
                        float _3821 = (0.5 / (((_3810 * ((_3796 * _3811) + _3781)) + 9.9999999392252902907785028219223e-09) + (((_3810 * _3811) + _3781) * _3796))) * _3810;
                        float _5335 = isnan(0.0) ? _3821 : (isnan(_3821) ? 0.0 : max(_3821, 0.0));
                        float _3832 = (((_3782 * 3.1415927410125732421875) * (isnan(1.0) ? _5335 : (isnan(_5335) ? 1.0 : min(_5335, 1.0)))) / ((_3804 * _3804) * ((_3747 * 2.1991131305694580078125) + 3.141590118408203125))) * _3736;
                        _3546 = (_3751 * _3699.x) + _3657;
                        _3547 = (_3751 * _3699.y) + _3658;
                        _3548 = (_3751 * _3699.z) + _3659;
                        _3543 = (_3832 * _3716.x) + _3654;
                        _3544 = (_3832 * _3716.y) + _3655;
                        _3545 = (_3832 * _3716.z) + _3656;
                        if (_3661 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3654 = _3543;
                            _3655 = _3544;
                            _3656 = _3545;
                            _3657 = _3546;
                            _3658 = _3547;
                            _3659 = _3548;
                            _3660 = _3661;
                        }
                    }
                    frontier_phi_55_pred = _3547;
                    frontier_phi_55_pred_1 = _3548;
                    frontier_phi_55_pred_2 = _3546;
                    frontier_phi_55_pred_3 = _3545;
                    frontier_phi_55_pred_4 = _3544;
                    frontier_phi_55_pred_5 = _3543;
                }
                _3135 = frontier_phi_55_pred;
                _3137 = frontier_phi_55_pred_1;
                _3133 = frontier_phi_55_pred_2;
                _3131 = frontier_phi_55_pred_3;
                _3129 = frontier_phi_55_pred_4;
                _3127 = frontier_phi_55_pred_5;
                uint _3379 = _3378 + 1u;
                if (_3379 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3372 = _3127;
                    _3373 = _3129;
                    _3374 = _3131;
                    _3375 = _3133;
                    _3376 = _3135;
                    _3377 = _3137;
                    _3378 = _3379;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3126 = _3127;
            _3128 = _3129;
            _3130 = _3131;
            _3132 = _3133;
            _3134 = _3135;
            _3136 = _3137;
        }
        uvec4 _3140 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3141 = _3140.z;
        uint _3143 = (_3141 >> 8u) & 15u;
        float _3340;
        float _3342;
        float _3344;
        float _3346;
        float _3348;
        float _3350;
        if (((4294967295u << _3143) & _2965) == 0u)
        {
            _3340 = _3126;
            _3342 = _3128;
            _3344 = _3130;
            _3346 = _3132;
            _3348 = _3134;
            _3350 = _3136;
        }
        else
        {
            float _3365 = inversesqrt(dot(vec3(_2919, _2920, _2921), vec3(_2919, _2920, _2921)));
            float _3366 = _3365 * _2919;
            float _3367 = _3365 * _2920;
            float _3368 = _3365 * _2921;
            float frontier_phi_46_47_ladder;
            float frontier_phi_46_47_ladder_1;
            float frontier_phi_46_47_ladder_2;
            float frontier_phi_46_47_ladder_3;
            float frontier_phi_46_47_ladder_4;
            float frontier_phi_46_47_ladder_5;
            if (_3143 < ((_3141 >> 12u) & 15u))
            {
                float _3341;
                float _3343;
                float _3345;
                float _3347;
                float _3349;
                float _3351;
                float _3637 = _3126;
                float _3638 = _3128;
                float _3639 = _3130;
                float _3640 = _3132;
                float _3641 = _3134;
                float _3642 = _3136;
                uint _3643 = _3143;
                uint _3652;
                bool _3653;
                for (;;)
                {
                    _3652 = texelFetch(g_lightClassification, int((((_2959 << 5u) + (_2945 << 9u)) + (_3643 << 2u)) >> 2u)).x;
                    _3653 = _3652 == 0u;
                    float frontier_phi_70_pred;
                    float frontier_phi_70_pred_1;
                    float frontier_phi_70_pred_2;
                    float frontier_phi_70_pred_3;
                    float frontier_phi_70_pred_4;
                    float frontier_phi_70_pred_5;
                    if (_3653)
                    {
                        frontier_phi_70_pred = _3637;
                        frontier_phi_70_pred_1 = _3642;
                        frontier_phi_70_pred_2 = _3641;
                        frontier_phi_70_pred_3 = _3640;
                        frontier_phi_70_pred_4 = _3639;
                        frontier_phi_70_pred_5 = _3638;
                    }
                    else
                    {
                        float _3901;
                        float _3902;
                        float _3903;
                        float _3904;
                        float _3905;
                        float _3906;
                        float _4203;
                        float _4204;
                        float _4205;
                        float _4206;
                        float _4207;
                        float _4208;
                        float _3923 = _3637;
                        float _3924 = _3638;
                        float _3925 = _3639;
                        float _3926 = _3640;
                        float _3927 = _3641;
                        float _3928 = _3642;
                        uint _3929 = _3652;
                        uint _3930;
                        vec4 _3955;
                        float _3956;
                        vec4 _3971;
                        vec3 _3983;
                        vec4 _3998;
                        vec4 _4013;
                        float _4059;
                        bool _4060;
                        for (;;)
                        {
                            uint _3940 = ((_3643 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3929));
                            _3930 = (_3929 + 4294967295u) & _3929;
                            uint _3942 = _3940 * 40u;
                            _3955 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3942 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3942 + 3u)).x));
                            _3956 = _3955.w;
                            uint _3958 = (_3940 * 40u) + 4u;
                            _3971 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3958)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3958 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3958 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3958 + 3u)).x));
                            uint _3973 = (_3940 * 40u) + 8u;
                            _3983 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3973 + 2u)).x));
                            uint _3985 = (_3940 * 40u) + 16u;
                            _3998 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3985)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3985 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3985 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3985 + 3u)).x));
                            uint _4000 = (_3940 * 40u) + 20u;
                            _4013 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4000)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4000 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4000 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4000 + 3u)).x));
                            uint _4015 = (_3940 * 40u) + 24u;
                            vec4 _4028 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4015)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4015 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4015 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4015 + 3u)).x));
                            uint _4034 = (_3940 * 40u) + 28u;
                            vec4 _4047 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4034)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4034 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4034 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4034 + 3u)).x));
                            _4059 = fma(_2921, _4047.z, fma(_2920, _4047.y, _4047.x * _2919)) + _4047.w;
                            _4060 = !((fma(_2921, _4028.z, fma(_2920, _4028.y, _4028.x * _2919)) + _4028.w) <= 0.0);
                            float frontier_phi_79_pred;
                            float frontier_phi_79_pred_1;
                            float frontier_phi_79_pred_2;
                            float frontier_phi_79_pred_3;
                            float frontier_phi_79_pred_4;
                            float frontier_phi_79_pred_5;
                            if (_4060)
                            {
                                float _4087 = _3955.x - _2919;
                                float _4088 = _3955.y - _2920;
                                float _4089 = _3955.z - _2921;
                                float _4090 = dot(vec3(_4087, _4088, _4089), vec3(_4087, _4088, _4089));
                                float _4093 = inversesqrt(_4090);
                                float _4094 = _4093 * _4087;
                                float _4095 = _4093 * _4088;
                                float _4096 = _4093 * _4089;
                                float _4100 = 1.0 - (_4090 / (_3956 * _3956));
                                float _5346 = isnan(0.0) ? _4100 : (isnan(_4100) ? 0.0 : max(_4100, 0.0));
                                float _4101 = isnan(1.0) ? _5346 : (isnan(_5346) ? 1.0 : min(_5346, 1.0));
                                float _4105 = sqrt(_4090) * _3971.w;
                                float _4107 = 1.39999997615814208984375 / (_4105 + 1.39999997615814208984375);
                                float _4108 = _4107 * _4107;
                                float _4111 = ((1.0 - _4108) * dot(vec3(_4094, _4095, _4096), vec3(_1498, _1501, _1504))) + _4108;
                                float _4114 = _4105 * _4105;
                                float _4118 = (fma(_2921, _3998.z, fma(_2920, _3998.y, _3998.x * _2919)) + _3998.w) / _4059;
                                float _4119 = (fma(_2921, _4013.z, fma(_2920, _4013.y, _4013.x * _2919)) + _4013.w) / _4059;
                                float _4123 = 1.0 - dot(vec2(_4118, _4119), vec2(_4118, _4119));
                                float _5362 = isnan(0.0) ? _4123 : (isnan(_4123) ? 0.0 : max(_4123, 0.0));
                                float _4124 = isnan(1.0) ? _5362 : (isnan(_5362) ? 1.0 : min(_5362, 1.0));
                                float _4125 = _4124 * (((isnan(0.0) ? _4111 : (isnan(_4111) ? 0.0 : max(_4111, 0.0))) * _4101) / ((_4114 * 0.699999988079071044921875) + 1.0));
                                float _4137 = exp2(log2(1.0 / ((_4114 * 3.5) + 5.0)) * 0.25);
                                float _4138 = 1.0 - _1570;
                                float _4145 = sqrt(1.0 - ((1.0 - (_4138 * _4138)) * (1.0 - (_4137 * _4137))));
                                float _4146 = _4145 * _4145;
                                float _4147 = _4146 * _4146;
                                float _4148 = _4094 - _3366;
                                float _4149 = _4095 - _3367;
                                float _4150 = _4096 - _3368;
                                float _4154 = inversesqrt(dot(vec3(_4148, _4149, _4150), vec3(_4148, _4149, _4150)));
                                float _4158 = dot(vec3(_1498, _1501, _1504), vec3((-0.0) - _3366, (-0.0) - _3367, (-0.0) - _3368));
                                float _5373 = isnan(0.0) ? _4158 : (isnan(_4158) ? 0.0 : max(_4158, 0.0));
                                float _4161 = isnan(1.0) ? _5373 : (isnan(_5373) ? 1.0 : min(_5373, 1.0));
                                float _4162 = dot(vec3(_1498, _1501, _1504), vec3(_4154 * _4148, _4154 * _4149, _4154 * _4150));
                                float _5384 = isnan(0.0) ? _4162 : (isnan(_4162) ? 0.0 : max(_4162, 0.0));
                                float _4165 = isnan(1.0) ? _5384 : (isnan(_5384) ? 1.0 : min(_5384, 1.0));
                                float _4169 = ((_4165 * _4165) * (_4147 + (-1.0))) + 1.0;
                                float _4170 = _4107 * _4146;
                                float _4171 = _4170 * _4170;
                                float _4177 = ((1.0 - _4171) * dot(vec3(_1498, _1501, _1504), vec3(_4094, _4095, _4096))) + _4171;
                                float _5395 = isnan(0.0) ? _4177 : (isnan(_4177) ? 0.0 : max(_4177, 0.0));
                                float _4178 = isnan(1.0) ? _5395 : (isnan(_5395) ? 1.0 : min(_5395, 1.0));
                                float _4179 = 1.0 - _4146;
                                float _4189 = (0.5 / (((_4178 * ((_4161 * _4179) + _4146)) + 9.9999999392252902907785028219223e-09) + (((_4178 * _4179) + _4146) * _4161))) * _4178;
                                float _5406 = isnan(0.0) ? _4189 : (isnan(_4189) ? 0.0 : max(_4189, 0.0));
                                float _4199 = (_4124 * _4101) * (((_4147 * 3.1415927410125732421875) * (isnan(1.0) ? _5406 : (isnan(_5406) ? 1.0 : min(_5406, 1.0)))) / ((_4169 * _4169) * ((_4114 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_79_pred = _4199 * _3983.z;
                                frontier_phi_79_pred_1 = _4125 * _3971.z;
                                frontier_phi_79_pred_2 = _4125 * _3971.y;
                                frontier_phi_79_pred_3 = _4125 * _3971.x;
                                frontier_phi_79_pred_4 = _4199 * _3983.y;
                                frontier_phi_79_pred_5 = _4199 * _3983.x;
                            }
                            else
                            {
                                frontier_phi_79_pred = 0.0;
                                frontier_phi_79_pred_1 = 0.0;
                                frontier_phi_79_pred_2 = 0.0;
                                frontier_phi_79_pred_3 = 0.0;
                                frontier_phi_79_pred_4 = 0.0;
                                frontier_phi_79_pred_5 = 0.0;
                            }
                            _4205 = frontier_phi_79_pred;
                            _4208 = frontier_phi_79_pred_1;
                            _4207 = frontier_phi_79_pred_2;
                            _4206 = frontier_phi_79_pred_3;
                            _4204 = frontier_phi_79_pred_4;
                            _4203 = frontier_phi_79_pred_5;
                            _3904 = _4206 + _3926;
                            _3905 = _4207 + _3927;
                            _3906 = _4208 + _3928;
                            _3901 = _4203 + _3923;
                            _3902 = _4204 + _3924;
                            _3903 = _4205 + _3925;
                            if (_3930 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3923 = _3901;
                                _3924 = _3902;
                                _3925 = _3903;
                                _3926 = _3904;
                                _3927 = _3905;
                                _3928 = _3906;
                                _3929 = _3930;
                                continue;
                            }
                        }
                        frontier_phi_70_pred = _3901;
                        frontier_phi_70_pred_1 = _3906;
                        frontier_phi_70_pred_2 = _3905;
                        frontier_phi_70_pred_3 = _3904;
                        frontier_phi_70_pred_4 = _3903;
                        frontier_phi_70_pred_5 = _3902;
                    }
                    _3341 = frontier_phi_70_pred;
                    _3351 = frontier_phi_70_pred_1;
                    _3349 = frontier_phi_70_pred_2;
                    _3347 = frontier_phi_70_pred_3;
                    _3345 = frontier_phi_70_pred_4;
                    _3343 = frontier_phi_70_pred_5;
                    uint _3644 = _3643 + 1u;
                    if (_3644 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3637 = _3341;
                        _3638 = _3343;
                        _3639 = _3345;
                        _3640 = _3347;
                        _3641 = _3349;
                        _3642 = _3351;
                        _3643 = _3644;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_46_47_ladder = _3345;
                frontier_phi_46_47_ladder_1 = _3347;
                frontier_phi_46_47_ladder_2 = _3349;
                frontier_phi_46_47_ladder_3 = _3351;
                frontier_phi_46_47_ladder_4 = _3343;
                frontier_phi_46_47_ladder_5 = _3341;
            }
            else
            {
                frontier_phi_46_47_ladder = _3130;
                frontier_phi_46_47_ladder_1 = _3132;
                frontier_phi_46_47_ladder_2 = _3134;
                frontier_phi_46_47_ladder_3 = _3136;
                frontier_phi_46_47_ladder_4 = _3128;
                frontier_phi_46_47_ladder_5 = _3126;
            }
            _3340 = frontier_phi_46_47_ladder_5;
            _3342 = frontier_phi_46_47_ladder_4;
            _3344 = frontier_phi_46_47_ladder;
            _3346 = frontier_phi_46_47_ladder_1;
            _3348 = frontier_phi_46_47_ladder_2;
            _3350 = frontier_phi_46_47_ladder_3;
        }
        float _3355 = isnan(1.0) ? _1541 : (isnan(_1541) ? 1.0 : min(_1541, 1.0));
        _2977 = (_3355 * _3346) + _2705;
        _2979 = (_3355 * _3348) + _2706;
        _2981 = (_3355 * _3350) + _2707;
        _2983 = ((_3340 * 0.039999999105930328369140625) * _3355) + _2861;
        _2985 = ((_3342 * 0.039999999105930328369140625) * _3355) + _2862;
        _2987 = ((_3344 * 0.039999999105930328369140625) * _3355) + _2863;
    }
    else
    {
        _2977 = _2705;
        _2979 = _2706;
        _2981 = _2707;
        _2983 = _2861;
        _2985 = _2862;
        _2987 = _2863;
    }
    uint _2993 = _1518 + uint(cbMatDynParam._m0[0u].w);
    float _3014 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _3015 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _3016 = cbSceneParam._m0[86u].x * ((_1442 / cbSceneParam._m0[86u].x) + (((10.0 / (_1367 + 10.0)) * cbMtdParam._m0[19u].y) * dot(vec3(_1478, _1479, _1480), vec3(_230, _231, _232))));
    float _3017 = isnan(_3014) ? _3016 : (isnan(_3016) ? _3014 : min(_3016, _3014));
    float _3018 = isnan(_3015) ? _1443 : (isnan(_1443) ? _3015 : min(_1443, _3015));
    vec4 _3020 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_3017, _3018), 0.0);
    float _3022 = _3020.x;
    bool _3042 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3022)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3022))) > _1367;
    float _3043 = _3042 ? _3017 : _1442;
    float _3044 = _3042 ? _3018 : _1443;
    vec4 _3046 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_3043, _3044));
    vec4 _3060 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_3043, _3044));
    float _3062 = _3060.x;
    bool _3067 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _3076 = (-0.0) - cbSceneParam._m0[2u].z;
    float _3082 = (_3067 ? (_3076 / (cbSceneParam._m0[2u].x - _3062)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3062))) - _1367;
    float _3084 = cbMtdParam._m0[40u].x + cbMtdParam._m0[38u].z;
    float _3085 = cbMtdParam._m0[40u].y + cbMtdParam._m0[38u].w;
    float _3086 = cbMtdParam._m0[40u].z + cbMtdParam._m0[39u].x;
    bool _3092 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _3096 = (isnan(_3082) ? 0.0 : (isnan(0.0) ? _3082 : max(0.0, _3082))) * (-1.44269502162933349609375);
    float _5437 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
    float _5448 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
    float _5459 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
    float _3229;
    float _3230;
    float _3231;
    if ((1.0 - _1149) > 0.00999999977648258209228515625)
    {
        vec4 _3148 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_3043, _3044), 0.0);
        float _3150 = _3148.x;
        float _3156 = (_3067 ? (_3076 / (cbSceneParam._m0[2u].x - _3150)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3150))) - _1367;
        uint _3162 = floatBitsToUint(cbInstanceData._m0[_2641]).x * 14u;
        uint _3168 = _3162 + 4u;
        float _3177 = dot(vec3(cbLight._m0[_3162].xyz), vec3(_251, _252, _253));
        float _3185 = dot(vec3((-0.0) - _1423, (-0.0) - _1424, (-0.0) - _1425), vec3((-0.0) - _251, (-0.0) - _252, (-0.0) - _253));
        float _3190 = ((isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0))) / (isnan(0.001000000047497451305389404296875) ? _3177 : (isnan(_3177) ? 0.001000000047497451305389404296875 : max(_3177, 0.001000000047497451305389404296875)))) + 1.0;
        float _3192 = (-0.0) - ((isnan(_3156) ? 0.0 : (isnan(0.0) ? _3156 : max(0.0, _3156))) * _3190);
        _3229 = _3092 ? 0.0 : ((((cbMtdParam._m0[38u].z * 0.079577468335628509521484375) * cbLight._m0[_3168].x) / ((_3190 * _3084) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_3084 * 1.44269502162933349609375) * _3192)));
        _3230 = _3092 ? 0.0 : ((((cbMtdParam._m0[38u].w * 0.079577468335628509521484375) * cbLight._m0[_3168].y) / ((_3190 * _3085) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_3085 * 1.44269502162933349609375) * _3192)));
        _3231 = _3092 ? 0.0 : ((((cbMtdParam._m0[39u].x * 0.079577468335628509521484375) * cbLight._m0[_3168].z) / ((_3190 * _3086) + 9.9999999747524270787835121154785e-07)) * (1.0 - exp2((_3086 * 1.44269502162933349609375) * _3192)));
    }
    else
    {
        _3229 = 0.0;
        _3230 = 0.0;
        _3231 = 0.0;
    }
    float _3248 = 0.959999978542327880859375 - (exp2(log2(1.0 - (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0)))) * 5.0) * 0.959999978542327880859375);
    float _3249 = (_3229 + ((exp2(_3096 * (_3092 ? 0.0 : _3084)) * ((cbSceneParam._m0[72u].z * (((cbMtdParam._m0[29u].y - _1274) * _620) + _1274)) + _3046.x)) * cbSceneParam._m0[72u].w)) * _3248;
    float _3250 = (_3230 + ((exp2(_3096 * (_3092 ? 0.0 : _3085)) * ((cbSceneParam._m0[72u].z * (((cbMtdParam._m0[29u].y - _1275) * _620) + _1275)) + _3046.y)) * cbSceneParam._m0[72u].w)) * _3248;
    float _3251 = (_3231 + ((exp2(_3096 * (_3092 ? 0.0 : _3086)) * ((cbSceneParam._m0[72u].z * (((cbMtdParam._m0[29u].y - _1276) * _620) + _1276)) + _3046.z)) * cbSceneParam._m0[72u].w)) * _3248;
    float _3260 = (((cbInstanceData._m0[_2993].x * (((((_960 * cbMtdParam._m0[11u].x) - _924) + (((((cbMtdParam._m0[13u].x - cbMtdParam._m0[12u].x) * _960) * cbMtdParam._m0[29u].x) + cbMtdParam._m0[12u].x) * _983.x)) * _932) + _924)) + (((((_2583 * _2618.x) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0))) * _2378) * _2634)) + _2983) * cbPerFrame._m0[3u].x)) + _3249) + ((((isnan(1.0) ? _5437 : (isnan(_5437) ? 1.0 : min(_5437, 1.0))) * (_2977 + ((isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0))) * _1541))) - _3249) * _1149);
    float _3263 = (((cbInstanceData._m0[_2993].y * (((((_961 * cbMtdParam._m0[11u].y) - _925) + (((((cbMtdParam._m0[13u].y - cbMtdParam._m0[12u].y) * _961) * cbMtdParam._m0[29u].x) + cbMtdParam._m0[12u].y) * _983.y)) * _932) + _925)) + (((((_2583 * _2618.y) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0))) * _2378) * _2634)) + _2985) * cbPerFrame._m0[3u].x)) + _3250) + ((((isnan(1.0) ? _5448 : (isnan(_5448) ? 1.0 : min(_5448, 1.0))) * (_2979 + ((isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0))) * _1541))) - _3250) * _1149);
    float _3266 = (((cbInstanceData._m0[_2993].z * (((((_962 * cbMtdParam._m0[11u].z) - _926) + ((((cbMtdParam._m0[29u].x * _962) * (cbMtdParam._m0[13u].z - cbMtdParam._m0[12u].z)) + cbMtdParam._m0[12u].z) * _983.z)) * _932) + _926)) + (((((_2583 * _2618.z) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0))) * _2378) * _2634)) + _2987) * cbPerFrame._m0[3u].x)) + _3251) + ((((isnan(1.0) ? _5459 : (isnan(_5459) ? 1.0 : min(_5459, 1.0))) * (_2981 + ((isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0))) * _1541))) - _3251) * _1149);
    float _3267 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
    float _3268 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
    float _3269 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
    float _3274 = cbInstanceData._m0[_1517 + 6u].w * (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0)));
    float _3279 = _1442 / cbSceneParam._m0[86u].x;
    float _3280 = _1443 / cbSceneParam._m0[86u].y;
    vec4 _3294 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3279, _3280, (log2((isnan(cbSceneParam._m0[77u].w) ? _1367 : (isnan(_1367) ? cbSceneParam._m0[77u].w : min(_1367, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3296 = _3294.x;
    float _3297 = _3294.y;
    float _3298 = _3294.z;
    float _3299 = _3294.w;
    float _3428;
    float _3430;
    float _3432;
    float _3434;
    if (_1367 > cbSceneParam._m0[78u].w)
    {
        float _3393 = isnan(_1367) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1367 : min(cbSceneParam._m0[80u].w, _1367));
        float _3394 = _3393 / _1367;
        float _3405 = _3394 * _1416;
        float _3406 = _1417 * _3394;
        float _3407 = (-0.0) - _3406;
        float _3408 = _3394 * _1418;
        float _3410 = (cbSceneParam._m0[77u].w * _3407) / _3393;
        float _3411 = _3410 + cbSceneParam._m0[79u].w;
        float _3412 = cbSceneParam._m0[79u].w - _3406;
        float _3418 = sqrt(((_3405 * _3405) + (_3406 * _3406)) + (_3408 * _3408));
        float _3421 = (1.0 - (cbSceneParam._m0[77u].w / _3393)) * _3418;
        float _3426 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3427 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3837;
        if (abs((_3407 - _3410) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3837 = ((((_3411 > 0.0) ? exp2(_3426 * _3411) : (2.0 - exp2(_3427 * _3411))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3421;
        }
        else
        {
            float _3568 = 1.0 / cbSceneParam._m0[80u].x;
            float _3569 = isnan(_3412) ? _3411 : (isnan(_3411) ? _3412 : max(_3411, _3412));
            float _3570 = isnan(_3412) ? _3411 : (isnan(_3411) ? _3412 : min(_3411, _3412));
            float _3579 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : min(_3569, 0.0));
            float _3580 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : min(_3570, 0.0));
            _3837 = ((abs(_3418 / _3407) * cbSceneParam._m0[80u].y) * ((((_3579 - _3580) * 2.0) - ((exp2(_3426 * (isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0)))) - exp2(_3426 * (isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0))))) * _3568)) - ((exp2(_3427 * _3579) - exp2(_3427 * _3580)) * _3568))) + (_3421 * cbSceneParam._m0[80u].z);
        }
        vec4 _3839 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3279, _3280, 1.0), 0.0);
        float _3848 = exp2((_3837 * (-1.44269502162933349609375)) * (1.0 - _3839.w));
        float _3849 = log2(_3848);
        float _3865 = log2(_3299);
        _3428 = (exp2(_3865 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3849 * cbSceneParam._m0[78u].x)) * _3839.x) / cbSceneParam._m0[78u].x)) + _3296;
        _3430 = (exp2(_3865 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3849 * cbSceneParam._m0[78u].y)) * _3839.y) / cbSceneParam._m0[78u].y)) + _3297;
        _3432 = (exp2(_3865 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3849 * cbSceneParam._m0[78u].z)) * _3839.z) / cbSceneParam._m0[78u].z)) + _3298;
        _3434 = _3848 * _3299;
    }
    else
    {
        _3428 = _3296;
        _3430 = _3297;
        _3432 = _3298;
        _3434 = _3299;
    }
    bool _3875;
    float _3489;
    vec4 _3492;
    float _3494;
    vec4 _3496;
    float _3504;
    float _3505;
    float _3506;
    float _3507;
    bool _3517;
    for (;;)
    {
        bool _3446 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _3447 = log2(_3434);
        float _3454 = exp2(_3447 * cbSceneParam._m0[78u].x) * _3267;
        float _3455 = exp2(_3447 * cbSceneParam._m0[78u].y) * _3268;
        float _3456 = exp2(_3447 * cbSceneParam._m0[78u].z) * _3269;
        vec4 _3464 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_1442, _1443));
        float _3466 = _3464.x;
        float _3487 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3466)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3466))) - _1367) * cbMtdParam._m0[23u].y;
        float _5540 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
        _3489 = _3274 * (isnan(1.0) ? _5540 : (isnan(_5540) ? 1.0 : min(_5540, 1.0)));
        float _3490 = _1432 + (-0.5);
        _3492 = cbMtdParam._m0[1u];
        _3494 = _3492.y * _3490;
        _3496 = cbMatDynParam._m0[0u];
        float _3503 = (roundEven(_3496.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3504 = _3503 * (_3446 ? _3454 : (_3454 + (cbSceneParam._m0[72u].w * _3428)));
        _3505 = _3503 * (_3446 ? _3455 : (_3455 + (cbSceneParam._m0[72u].w * _3430)));
        _3506 = _3503 * (_3446 ? _3456 : (_3456 + (cbSceneParam._m0[72u].w * _3432)));
        _3507 = _3490 * 0.999000012874603271484375;
        _3517 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3517)
        {
            if ((cbInstanceData._m0[_1517 + 7u].x + _3507) < 0.5)
            {
                _3875 = true;
                break;
            }
        }
        uint _3603 = _1518 + uint(_3496.w);
        if ((cbInstanceData._m0[_3603].w < 1.0) && ((cbInstanceData._m0[_3603].w + _3507) < 0.5))
        {
            _3875 = true;
            break;
        }
        if ((_3494 + 1.0) < _3492.x)
        {
            _3875 = true;
            break;
        }
        _3875 = false;
        break;
    }
    float _3914;
    if (_3875)
    {
        discard_state = true;
        _3914 = 0.0;
    }
    else
    {
        _3914 = _3489;
    }
    SV_Target.x = _3504;
    SV_Target.y = _3505;
    SV_Target.z = _3506;
    SV_Target.w = _3914;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3489;
    discard_exit();
}


