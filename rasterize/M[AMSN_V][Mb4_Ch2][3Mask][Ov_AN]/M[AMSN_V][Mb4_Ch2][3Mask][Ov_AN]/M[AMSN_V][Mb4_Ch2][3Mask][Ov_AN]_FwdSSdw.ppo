#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1195;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _220 = _219 * _211;
    float _221 = _219 * _212;
    float _222 = _219 * _213;
    float _232 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _233 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _234 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _238 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = _245 * NORMAL.x;
    float _247 = _245 * NORMAL.y;
    float _248 = _245 * NORMAL.z;
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = _252 * TANGENT.x;
    float _254 = _252 * TANGENT.y;
    float _255 = _252 * TANGENT.z;
    float _259 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _267;
    float _268;
    float _269;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _267 = (-0.0) - _246;
        _268 = (-0.0) - _247;
        _269 = (-0.0) - _248;
    }
    else
    {
        _267 = _246;
        _268 = _247;
        _269 = _248;
    }
    vec4 _289 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _295 = _289.x * cbMtdParam._m0[10u].x;
    float _296 = _289.y * cbMtdParam._m0[10u].y;
    float _297 = _289.z * cbMtdParam._m0[10u].z;
    vec4 _316 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    vec4 _335 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _363 = cbMtdParam._m0[15u].x * texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x;
    float _374 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * (((1.0 - _335.x) * 2.0) - _363)) + 1.0;
    float _3530 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _375 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    float _382 = (_375 * ((_316.x * cbMtdParam._m0[11u].x) - _295)) + _295;
    float _383 = (_375 * ((_316.y * cbMtdParam._m0[11u].y) - _296)) + _296;
    float _384 = (_375 * ((_316.z * cbMtdParam._m0[11u].z) - _297)) + _297;
    vec4 _402 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.z) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.w) + cbTextureTilingScale._m0[11u].w));
    float _415 = (((((1.0 - _335.y) * 2.0) - _363) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].z) + 1.0;
    float _3541 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _416 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    float _423 = (((_402.x * cbMtdParam._m0[12u].x) - _382) * _416) + _382;
    float _424 = (_416 * ((_402.y * cbMtdParam._m0[12u].y) - _383)) + _383;
    float _425 = (_416 * ((_402.z * cbMtdParam._m0[12u].z) - _384)) + _384;
    vec4 _443 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _456 = (((((1.0 - _335.z) * 2.0) - _363) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].w) + 1.0;
    float _3552 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    vec4 _484 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _492 = ((((((_443.x * cbMtdParam._m0[13u].x) - _423) * _457) + _423) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _484.x;
    float _495 = ((((_457 * ((_443.y * cbMtdParam._m0[13u].y) - _424)) + _424) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _484.y;
    float _498 = ((((_457 * ((_443.z * cbMtdParam._m0[13u].z) - _425)) + _425) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _484.z;
    vec4 _511 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _513 = _511.x;
    float _514 = _511.y;
    float _515 = _511.z;
    vec4 _527 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w));
    float _538 = ((_527.x - _513) * _375) + _513;
    float _539 = ((_527.y - _514) * _375) + _514;
    float _540 = ((_527.z - _515) * _375) + _515;
    vec4 _553 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _564 = ((_553.x - _538) * _416) + _538;
    float _565 = ((_553.y - _539) * _416) + _539;
    float _566 = ((_553.z - _540) * _416) + _540;
    vec4 _579 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _592 = ((_579.z - _566) * _457) + _566;
    float _595 = ((((_579.x - _564) * _457) + _564) * 2.0) + (-1.0);
    float _597 = ((((_579.y - _565) * _457) + _565) * 2.0) + (-1.0);
    float _598 = dot(vec2(_595, _597), vec2(_595, _597));
    float _3563 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _603 = sqrt(1.0 - (isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))));
    float _606 = fma(_603, _267, fma(_597, _259 * TANGENT_2.x, (_238 * _232) * _595));
    float _609 = fma(_603, _268, fma(_597, _259 * TANGENT_2.y, (_238 * _233) * _595));
    float _612 = fma(_603, _269, fma(_597, _259 * TANGENT_2.z, (_238 * _234) * _595));
    float _616 = inversesqrt(dot(vec3(_606, _609, _612), vec3(_606, _609, _612)));
    float _617 = _616 * _606;
    float _618 = _616 * _609;
    float _619 = _616 * _612;
    float _622 = fma(_619, _222, fma(_618, _221, _617 * _220));
    float _625 = fma(_619, _255, fma(_618, _254, _617 * _253));
    float _628 = fma(_619, _269, fma(_618, _268, _617 * _267));
    float _632 = inversesqrt(dot(vec3(_622, _625, _628), vec3(_622, _625, _628)));
    float _635 = _632 * _628;
    vec4 _648 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _658 = (((_648.x * 2.0) + (-1.0)) * cbMtdParam._m0[14u].y) + (_632 * _622);
    float _659 = (((_648.y * 2.0) + (-1.0)) * cbMtdParam._m0[14u].y) + (_632 * _625);
    float _662 = fma(_635, _267, fma(_659, _253, _658 * _220));
    float _665 = fma(_635, _268, fma(_659, _254, _658 * _221));
    float _668 = fma(_635, _269, fma(_659, _255, _658 * _222));
    float _672 = inversesqrt(dot(vec3(_662, _665, _668), vec3(_662, _665, _668)));
    float _673 = _672 * _662;
    float _674 = _672 * _665;
    float _675 = _672 * _668;
    float _3574 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _676 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
    float _3585 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _3596 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _3607 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _695 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _735 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _745 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _735);
    float _746 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _735);
    float _747 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _735);
    float _751 = inversesqrt(dot(vec3(_745, _746, _747), vec3(_745, _746, _747)));
    float _752 = _745 * _751;
    float _753 = _746 * _751;
    float _754 = _747 * _751;
    float _760 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _761 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _779 = fma(_675, cbSceneParam._m0[5u].z, fma(_674, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _673));
    float _782 = fma(_675, cbSceneParam._m0[6u].z, fma(_674, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _673));
    float _785 = fma(_675, cbSceneParam._m0[7u].z, fma(_674, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _673));
    uint _798 = uint(roundEven(NORMAL.w)) * 13u;
    uint _800 = (_798 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _806 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0)))) * cbInstanceData._m0[_800].x;
    float _807 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0)))) * cbInstanceData._m0[_800].y;
    float _808 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0)))) * cbInstanceData._m0[_800].z;
    float _3618 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _809 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
    float _3629 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _810 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    float _3640 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _811 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    vec4 _820 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _760, cbSceneParam._m0[86u].y * _761));
    float _823 = _820.x * TEXCOORD_4;
    float _824 = dot(vec3(_673, _674, _675), vec3(_752, _753, _754));
    float _827 = _824 * 2.0;
    float _831 = (_827 * _673) - _752;
    float _832 = (_827 * _674) - _753;
    float _833 = (_827 * _675) - _754;
    float _837 = abs(dot(vec3(_752, _753, _754), vec3(_673, _674, _675)));
    float _3651 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _839 = sqrt(_676);
    float _852 = exp2((_839 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_839 * 3.0));
    float _884 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _888 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _892 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1194;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _919 = fma(_892, cbModelParam._m0[26u].z, fma(_888, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _884));
        float _923 = fma(_892, cbModelParam._m0[27u].z, fma(_888, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _884));
        float _927 = fma(_892, cbModelParam._m0[28u].z, fma(_888, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _884));
        float _952 = _884 + _673;
        float _953 = _888 + _674;
        float _954 = _892 + _675;
        float _964 = fma(_954, cbModelParam._m0[26u].z, fma(_953, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _952)) - _919;
        float _965 = fma(_954, cbModelParam._m0[27u].z, fma(_953, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _952)) - _923;
        float _966 = fma(_954, cbModelParam._m0[28u].z, fma(_953, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _952)) - _927;
        float _970 = inversesqrt(dot(vec3(_964, _965, _966), vec3(_964, _965, _966)));
        float _983 = ((_970 * _964) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_919 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _984 = ((_970 * _965) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_923 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _985 = ((_970 * _966) / cbModelParam._m0[34u].z) + ((((((_927 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        float _1022 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_988.x + (-0.5));
        float _1024 = _1022 * (_988.y + (-0.5));
        float _1025 = _1022 * (_988.z + (-0.5));
        float _1032 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_995.x + (-0.5));
        float _1034 = _1032 * (_995.y + (-0.5));
        float _1035 = _1032 * (_995.z + (-0.5));
        float _1042 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1002.x + (-0.5));
        float _1044 = _1042 * (_1002.y + (-0.5));
        float _1045 = _1042 * (_1002.z + (-0.5));
        float _1052 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1009.x + (-0.5));
        float _1054 = _1052 * (_1009.y + (-0.5));
        float _1055 = _1052 * (_1009.z + (-0.5));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = _1023 * 0.5;
        float _1060 = _1033 * 0.5;
        float _1061 = _1043 * 0.5;
        float _1062 = dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061));
        float _1067 = (_1062 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1062);
        float _1076 = (dot(vec3(_673, _674, _675), vec3(_1067 * _1059, _1067 * _1060, _1067 * _1061)) + 1.0) * 0.5;
        float _3677 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1086 = sqrt(((_1060 * _1060) + (_1059 * _1059)) + (_1061 * _1061)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3688 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1088 = _1087 * 2.0;
        float _1092 = (1.0 - _1087) / (_1087 + 1.0);
        float _3699 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1102 = ((((1.0 - _1093) * (_1088 + 2.0)) * exp2(log2(isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * (_1088 + 1.0))) + _1093) * _1056;
        float _1103 = _1024 * 0.5;
        float _1104 = _1034 * 0.5;
        float _1105 = _1044 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1119 = (dot(vec3(_673, _674, _675), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _3710 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1128 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3721 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1130 = _1129 * 2.0;
        float _1134 = (1.0 - _1129) / (_1129 + 1.0);
        float _3732 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1144 = ((((1.0 - _1135) * (_1130 + 2.0)) * exp2(log2(isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * (_1130 + 1.0))) + _1135) * _1057;
        float _1145 = _1025 * 0.5;
        float _1146 = _1035 * 0.5;
        float _1147 = _1045 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1161 = (dot(vec3(_673, _674, _675), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _3743 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1170 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3754 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _3765 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * (_1172 + 1.0))) + _1177) * _1058;
        _1194 = _1025;
        _1196 = _1024;
        _1197 = _1023;
        _1198 = _1035;
        _1199 = _1034;
        _1200 = _1033;
        _1201 = _1045;
        _1202 = _1044;
        _1203 = _1043;
        _1204 = _1058;
        _1205 = _1057;
        _1206 = _1056;
        _1207 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)));
        _1208 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)));
        _1209 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
    }
    else
    {
        _1194 = _1195;
        _1196 = _1195;
        _1197 = _1195;
        _1198 = _1195;
        _1199 = _1195;
        _1200 = _1195;
        _1201 = _1195;
        _1202 = _1195;
        _1203 = _1195;
        _1204 = _1195;
        _1205 = _1195;
        _1206 = _1195;
        _1207 = 0.0;
        _1208 = 0.0;
        _1209 = 0.0;
    }
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1235 = fma(_892, cbModelParam._m0[30u].z, fma(_888, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _884));
        float _1239 = fma(_892, cbModelParam._m0[31u].z, fma(_888, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _884));
        float _1243 = fma(_892, cbModelParam._m0[32u].z, fma(_888, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _884));
        float _1266 = _884 + _673;
        float _1267 = _888 + _674;
        float _1268 = _892 + _675;
        float _1278 = fma(_1268, cbModelParam._m0[30u].z, fma(_1267, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1266)) - _1235;
        float _1279 = fma(_1268, cbModelParam._m0[31u].z, fma(_1267, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1266)) - _1239;
        float _1280 = fma(_1268, cbModelParam._m0[32u].z, fma(_1267, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1266)) - _1243;
        float _1284 = inversesqrt(dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280)));
        float _1297 = ((_1284 * _1278) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1235 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1298 = ((_1284 * _1279) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1239 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1299 = ((_1284 * _1280) / cbModelParam._m0[35u].z) + ((((((_1243 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        float _1334 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1301.x + (-0.5));
        float _1336 = _1334 * (_1301.y + (-0.5));
        float _1337 = _1334 * (_1301.z + (-0.5));
        float _1344 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1308.x + (-0.5));
        float _1346 = _1344 * (_1308.y + (-0.5));
        float _1347 = _1344 * (_1308.z + (-0.5));
        float _1354 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1315.x + (-0.5));
        float _1356 = _1354 * (_1315.y + (-0.5));
        float _1357 = _1354 * (_1315.z + (-0.5));
        float _1364 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1365 = _1364 * (_1322.x + (-0.5));
        float _1366 = _1364 * (_1322.y + (-0.5));
        float _1367 = _1364 * (_1322.z + (-0.5));
        float _1368 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1369 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = _1335 * 0.5;
        float _1372 = _1345 * 0.5;
        float _1373 = _1355 * 0.5;
        float _1374 = dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373));
        float _1379 = (_1374 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1374);
        float _1387 = (dot(vec3(_673, _674, _675), vec3(_1379 * _1371, _1379 * _1372, _1379 * _1373)) + 1.0) * 0.5;
        float _3806 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1396 = sqrt(((_1372 * _1372) + (_1371 * _1371)) + (_1373 * _1373)) / (_1368 + 9.9999997473787516355514526367188e-06);
        float _3817 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1398 = _1397 * 2.0;
        float _1402 = (1.0 - _1397) / (_1397 + 1.0);
        float _3828 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1412 = ((((1.0 - _1403) * (_1398 + 2.0)) * exp2(log2(isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * (_1398 + 1.0))) + _1403) * _1368;
        float _1413 = _1336 * 0.5;
        float _1414 = _1346 * 0.5;
        float _1415 = _1356 * 0.5;
        float _1416 = dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415));
        float _1421 = (_1416 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1416);
        float _1429 = (dot(vec3(_673, _674, _675), vec3(_1421 * _1413, _1421 * _1414, _1421 * _1415)) + 1.0) * 0.5;
        float _3839 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1438 = sqrt(((_1414 * _1414) + (_1413 * _1413)) + (_1415 * _1415)) / (_1369 + 9.9999997473787516355514526367188e-06);
        float _3850 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _3861 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * (_1440 + 1.0))) + _1445) * _1369;
        float _1455 = _1337 * 0.5;
        float _1456 = _1347 * 0.5;
        float _1457 = _1357 * 0.5;
        float _1458 = dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457));
        float _1463 = (_1458 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1458);
        float _1471 = (dot(vec3(_673, _674, _675), vec3(_1463 * _1455, _1463 * _1456, _1463 * _1457)) + 1.0) * 0.5;
        float _3872 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1480 = sqrt(((_1456 * _1456) + (_1455 * _1455)) + (_1457 * _1457)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _3883 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1482 = _1481 * 2.0;
        float _1486 = (1.0 - _1481) / (_1481 + 1.0);
        float _3894 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1496 = ((((1.0 - _1487) * (_1482 + 2.0)) * exp2(log2(isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1482 + 1.0))) + _1487) * _1370;
        _1504 = _1337;
        _1505 = _1336;
        _1506 = _1335;
        _1507 = _1347;
        _1508 = _1346;
        _1509 = _1345;
        _1510 = _1357;
        _1511 = _1356;
        _1512 = _1355;
        _1513 = _1370;
        _1514 = _1369;
        _1515 = _1368;
        _1516 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)));
        _1517 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
        _1518 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)));
    }
    else
    {
        _1504 = _1195;
        _1505 = _1195;
        _1506 = _1195;
        _1507 = _1195;
        _1508 = _1195;
        _1509 = _1195;
        _1510 = _1195;
        _1511 = _1195;
        _1512 = _1195;
        _1513 = _1195;
        _1514 = _1195;
        _1515 = _1195;
        _1516 = 0.0;
        _1517 = 0.0;
        _1518 = 0.0;
    }
    float _1528 = (cbModelParam._m0[1u].x * (_1516 - _1207)) + _1207;
    float _1529 = (cbModelParam._m0[1u].x * (_1517 - _1208)) + _1208;
    float _1530 = (cbModelParam._m0[1u].x * (_1518 - _1209)) + _1209;
    float _1551 = fma(_1530, cbSceneParam._m0[89u].z, fma(_1529, cbSceneParam._m0[89u].y, _1528 * cbSceneParam._m0[89u].x));
    float _1554 = fma(_1530, cbSceneParam._m0[90u].z, fma(_1529, cbSceneParam._m0[90u].y, _1528 * cbSceneParam._m0[90u].x));
    float _1557 = fma(_1530, cbSceneParam._m0[91u].z, fma(_1529, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1528));
    float _1572 = _831 * 0.5;
    float _1573 = _832 * 0.5;
    float _1574 = _833 * 0.5;
    float _1575 = dot(vec4(_1572, _1573, _1574, 1.0), vec4(_1506, _1509, _1512, _1515));
    float _1578 = dot(vec4(_1572, _1573, _1574, 1.0), vec4(_1505, _1508, _1511, _1514));
    float _1581 = dot(vec4(_1572, _1573, _1574, 1.0), vec4(_1504, _1507, _1510, _1513));
    float _1615;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1588 = dot(vec4(_1572, _1573, _1574, 1.0), vec4(_1194, _1198, _1201, _1204));
        float _1592 = dot(vec4(_1572, _1573, _1574, 1.0), vec4(_1196, _1199, _1202, _1205));
        float _1596 = dot(vec4(_1572, _1573, _1574, 1.0), vec4(_1197, _1200, _1203, _1206));
        float _1603 = dot(vec4(cbModelParam._m0[39u]), vec4(_1572, _1573, _1574, 1.0));
        _1615 = dot(vec3(isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)), isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)), isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1603) ? 0.0 : (isnan(0.0) ? _1603 : max(0.0, _1603))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1615 = 1.0;
    }
    float _1626;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1617 = dot(vec4(cbModelParam._m0[40u]), vec4(_1572, _1573, _1574, 1.0));
        _1626 = dot(vec3(isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)), isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)), isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1617) ? 0.0 : (isnan(0.0) ? _1617 : max(0.0, _1617))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1626 = 1.0;
    }
    float _1630 = (_1626 * cbModelParam._m0[1u].x) + (_1615 * (1.0 - cbModelParam._m0[1u].x));
    float _1640 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _676);
    float _1641 = isnan(_1640) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1640 : min(cbModelParam._m0[25u].z, _1640));
    float _1721;
    float _1723;
    float _1725;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1688 = fma(_892, cbModelParam._m0[13u].z, fma(_888, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _884)) + cbModelParam._m0[13u].w;
        float _1692 = fma(_892, cbModelParam._m0[14u].z, fma(_888, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _884)) + cbModelParam._m0[14u].w;
        float _1696 = fma(_892, cbModelParam._m0[15u].z, fma(_888, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _884)) + cbModelParam._m0[15u].w;
        float _1699 = fma(_833, cbModelParam._m0[13u].z, fma(_832, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _831));
        float _1702 = fma(_833, cbModelParam._m0[14u].z, fma(_832, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _831));
        float _1705 = fma(_833, cbModelParam._m0[15u].z, fma(_832, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _831));
        float _1733;
        if (_1699 > 0.0)
        {
            _1733 = abs((1.0 - _1688) / _1699);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1699 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1688 + 1.0) / _1699);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1733 = frontier_phi_16_14_ladder;
        }
        float _1958;
        if (_1702 > 0.0)
        {
            _1958 = abs((1.0 - _1692) / _1702);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1702 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1692 + 1.0) / _1702);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1958 = frontier_phi_25_21_ladder;
        }
        float _2204;
        if (_1705 > 0.0)
        {
            _2204 = abs((1.0 - _1696) / _1705);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1705 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1696 + 1.0) / _1705);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2204 = frontier_phi_37_32_ladder;
        }
        float _2206 = isnan(_1958) ? _1733 : (isnan(_1733) ? _1958 : min(_1733, _1958));
        float _2207 = isnan(_2204) ? _2206 : (isnan(_2206) ? _2204 : min(_2206, _2204));
        float _2211 = (_2207 * _1699) + _1688;
        float _2212 = (_2207 * _1702) + _1692;
        float _2213 = (_2207 * _1705) + _1696;
        float _2214 = _2207 * 9.9999997473787516355514526367188e-05;
        float _2216 = (-1.0) - _2214;
        float _2218 = _2214 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2213 > _2218) || ((_2213 < _2216) || ((_2212 > _2218) || ((_2212 < _2216) || ((_2211 < _2216) || (_2211 > _2218))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2337 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2213, cbModelParam._m0[9u].z, fma(_2212, cbModelParam._m0[9u].y, _2211 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2213, cbModelParam._m0[10u].z, fma(_2212, cbModelParam._m0[10u].y, _2211 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2213, cbModelParam._m0[11u].z, fma(_2212, cbModelParam._m0[11u].y, _2211 * cbModelParam._m0[11u].x))), _1641);
            frontier_phi_15_37_ladder = _2337.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2337.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2337.x * cbModelParam._m0[1u].y;
        }
        _1721 = frontier_phi_15_37_ladder_2;
        _1723 = frontier_phi_15_37_ladder_1;
        _1725 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1709 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_831, _832, _833), _1641);
        _1721 = _1709.x * cbModelParam._m0[1u].y;
        _1723 = _1709.y * cbModelParam._m0[1u].y;
        _1725 = _1709.z * cbModelParam._m0[1u].y;
    }
    float _1729 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _676);
    float _1730 = isnan(_1729) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1729 : min(cbModelParam._m0[25u].w, _1729));
    float _1823;
    float _1825;
    float _1827;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1787 = fma(_892, cbModelParam._m0[21u].z, fma(_888, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _884)) + cbModelParam._m0[21u].w;
        float _1791 = fma(_892, cbModelParam._m0[22u].z, fma(_888, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _884)) + cbModelParam._m0[22u].w;
        float _1795 = fma(_892, cbModelParam._m0[23u].z, fma(_888, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _884)) + cbModelParam._m0[23u].w;
        float _1798 = fma(_833, cbModelParam._m0[21u].z, fma(_832, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _831));
        float _1801 = fma(_833, cbModelParam._m0[22u].z, fma(_832, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _831));
        float _1804 = fma(_833, cbModelParam._m0[23u].z, fma(_832, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _831));
        float _1963;
        if (_1798 > 0.0)
        {
            _1963 = abs((1.0 - _1787) / _1798);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1798 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1787 + 1.0) / _1798);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1963 = frontier_phi_27_23_ladder;
        }
        float _2231;
        if (_1801 > 0.0)
        {
            _2231 = abs((1.0 - _1791) / _1801);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1791 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2231 = frontier_phi_39_34_ladder;
        }
        float _2436;
        if (_1804 > 0.0)
        {
            _2436 = abs((1.0 - _1795) / _1804);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1795 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2436 = frontier_phi_48_45_ladder;
        }
        float _2438 = isnan(_2231) ? _1963 : (isnan(_1963) ? _2231 : min(_1963, _2231));
        float _2439 = isnan(_2436) ? _2438 : (isnan(_2438) ? _2436 : min(_2438, _2436));
        float _2443 = (_2439 * _1798) + _1787;
        float _2444 = (_2439 * _1801) + _1791;
        float _2445 = (_2439 * _1804) + _1795;
        float _2446 = _2439 * 9.9999997473787516355514526367188e-05;
        float _2447 = (-1.0) - _2446;
        float _2449 = _2446 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2445 > _2449) || ((_2445 < _2447) || ((_2444 > _2449) || ((_2444 < _2447) || ((_2443 < _2447) || (_2443 > _2449))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2643 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2445, cbModelParam._m0[17u].z, fma(_2444, cbModelParam._m0[17u].y, _2443 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2445, cbModelParam._m0[18u].z, fma(_2444, cbModelParam._m0[18u].y, _2443 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2445, cbModelParam._m0[19u].z, fma(_2444, cbModelParam._m0[19u].y, _2443 * cbModelParam._m0[19u].x))), _1730);
            frontier_phi_24_48_ladder = _2643.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2643.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2643.x * cbModelParam._m0[1u].z;
        }
        _1823 = frontier_phi_24_48_ladder_2;
        _1825 = frontier_phi_24_48_ladder_1;
        _1827 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1807 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_831, _832, _833), _1730);
        _1823 = _1807.x * cbModelParam._m0[1u].z;
        _1825 = _1807.y * cbModelParam._m0[1u].z;
        _1827 = _1807.z * cbModelParam._m0[1u].z;
    }
    float _1839 = ((((1.0 - _852) * ((_839 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_852 * _839)) * _823;
    float _1840 = _1839 * ((cbModelParam._m0[1u].w * (_1823 - _1721)) + _1721);
    float _1841 = _1839 * ((cbModelParam._m0[1u].w * (_1825 - _1723)) + _1723);
    float _1842 = _1839 * ((cbModelParam._m0[1u].w * (_1827 - _1725)) + _1725);
    float _1845 = fma(_1842, cbSceneParam._m0[89u].z, fma(_1841, cbSceneParam._m0[89u].y, _1840 * cbSceneParam._m0[89u].x));
    float _1848 = fma(_1842, cbSceneParam._m0[90u].z, fma(_1841, cbSceneParam._m0[90u].y, _1840 * cbSceneParam._m0[90u].x));
    float _1851 = fma(_1842, cbSceneParam._m0[91u].z, fma(_1841, cbSceneParam._m0[91u].y, _1840 * cbSceneParam._m0[91u].x));
    vec4 _1859 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_760, _761));
    float _1861 = _1859.w;
    float _1873 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1861);
    float _1874 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1861);
    float _1875 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1861);
    uvec4 _1879 = floatBitsToUint(cbInstanceData._m0[_798 + 5u]);
    uint _1881 = _1879.x * 14u;
    uint _1882 = _1881 + 13u;
    float _1889 = _823 + (-1.0);
    float _1894 = (cbLight._m0[_1882].x * _1889) + 1.0;
    float _1895 = (cbLight._m0[_1882].y * _1889) + 1.0;
    float _1896 = (cbLight._m0[_1882].z * _1889) + 1.0;
    float _1897 = (cbLight._m0[_1882].w * _1889) + 1.0;
    uint _1898 = _1881 + 5u;
    float _1904 = isnan(1.0) ? _1895 : (isnan(_1895) ? 1.0 : min(_1895, 1.0));
    uint _1908 = _1881 + 4u;
    float _1917 = isnan(1.0) ? _1894 : (isnan(_1894) ? 1.0 : min(_1894, 1.0));
    uint _1921 = _1881 | 1u;
    float _1932 = dot(vec3(cbLight._m0[_1881].xyz), vec3(_673, _674, _675));
    float _1935 = dot(vec3(cbLight._m0[_1921].xyz), vec3(_673, _674, _675));
    float _4030 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _4041 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1940 = (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * 0.3183098733425140380859375;
    float _1942 = (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * 0.3183098733425140380859375;
    float _1949 = ((cbLight._m0[_1898].x * _1904) * _1942) + (((cbLight._m0[_1908].x * _1873) * _1917) * _1940);
    float _1950 = ((_1904 * cbLight._m0[_1898].y) * _1942) + (((cbLight._m0[_1908].y * _1874) * _1917) * _1940);
    float _1951 = ((_1904 * cbLight._m0[_1898].z) * _1942) + (((cbLight._m0[_1908].z * _1875) * _1917) * _1940);
    uvec4 _1955 = floatBitsToUint(cbLight._m0[_1881 + 12u]);
    bool _1957 = _1955.x == 0u;
    float _1968;
    float _1970;
    float _1972;
    if (_1957)
    {
        _1968 = _1949;
        _1970 = _1950;
        _1972 = _1951;
    }
    else
    {
        uint _1976 = _1881 + 6u;
        float _1992 = (dot(vec3(cbLight._m0[_1881 + 2u].xyz), vec3(_673, _674, _675)) * 0.5) + 0.5;
        float _1993 = _1992 * _1992;
        float _4052 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
        float _1994 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1995 = isnan(1.0) ? _1896 : (isnan(_1896) ? 1.0 : min(_1896, 1.0));
        _1968 = (((cbLight._m0[_1976].x * 0.3183098733425140380859375) * _1994) * _1995) + _1949;
        _1970 = (((cbLight._m0[_1976].y * 0.3183098733425140380859375) * _1994) * _1995) + _1950;
        _1972 = (((cbLight._m0[_1976].z * 0.3183098733425140380859375) * _1994) * _1995) + _1951;
    }
    bool _1975 = _1955.y == 0u;
    float _2013;
    float _2015;
    float _2017;
    if (_1975)
    {
        _2013 = _1968;
        _2015 = _1970;
        _2017 = _1972;
    }
    else
    {
        uint _2175 = _1881 + 7u;
        float _2191 = (dot(vec3(cbLight._m0[_1881 + 3u].xyz), vec3(_673, _674, _675)) * 0.5) + 0.5;
        float _2192 = _2191 * _2191;
        float _4068 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2193 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _2194 = isnan(1.0) ? _1897 : (isnan(_1897) ? 1.0 : min(_1897, 1.0));
        _2013 = (((cbLight._m0[_2175].x * 0.3183098733425140380859375) * _2193) * _2194) + _1968;
        _2015 = (((cbLight._m0[_2175].y * 0.3183098733425140380859375) * _2193) * _2194) + _1970;
        _2017 = (((cbLight._m0[_2175].z * 0.3183098733425140380859375) * _2193) * _2194) + _1972;
    }
    uint _2020 = _1881 + 8u;
    float _2033 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1881].w)) * _676) * 0.949999988079071044921875);
    float _2034 = _2033 * _2033;
    float _2035 = cbLight._m0[_1881].x + _752;
    float _2036 = cbLight._m0[_1881].y + _753;
    float _2037 = cbLight._m0[_1881].z + _754;
    float _2041 = inversesqrt(dot(vec3(_2035, _2036, _2037), vec3(_2035, _2036, _2037)));
    float _2042 = _2041 * _2035;
    float _2043 = _2041 * _2036;
    float _2044 = _2041 * _2037;
    float _2045 = dot(vec3(_673, _674, _675), vec3(cbLight._m0[_1881].xyz));
    float _4084 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2048 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _4095 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _2049 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _2050 = dot(vec3(_673, _674, _675), vec3(_2042, _2043, _2044));
    float _4106 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2053 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _2054 = dot(vec3(cbLight._m0[_1881].xyz), vec3(_2042, _2043, _2044));
    float _4117 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2058 = _2034 * _2034;
    float _2062 = ((_2053 * _2053) * (_2058 + (-1.0))) + 1.0;
    float _2073 = (exp2(log2(1.0 - (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2074 = 1.0 - _2034;
    float _2085 = (0.5 / (((_2049 * ((_2048 * _2074) + _2034)) + 9.9999999392252902907785028219223e-09) + (((_2049 * _2074) + _2034) * _2048))) * _2048;
    float _4128 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2087 = (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_2058 / ((_2062 * _2062) * 3.141590118408203125));
    uint _2101 = _1881 + 9u;
    float _2112 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1921].w)) * _676) * 0.949999988079071044921875);
    float _2113 = _2112 * _2112;
    float _2114 = cbLight._m0[_1921].x + _752;
    float _2115 = cbLight._m0[_1921].y + _753;
    float _2116 = cbLight._m0[_1921].z + _754;
    float _2120 = inversesqrt(dot(vec3(_2114, _2115, _2116), vec3(_2114, _2115, _2116)));
    float _2121 = _2120 * _2114;
    float _2122 = _2120 * _2115;
    float _2123 = _2120 * _2116;
    float _2124 = dot(vec3(_673, _674, _675), vec3(cbLight._m0[_1921].xyz));
    float _4139 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2127 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _2128 = dot(vec3(_673, _674, _675), vec3(_2121, _2122, _2123));
    float _4150 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2131 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _2132 = dot(vec3(cbLight._m0[_1921].xyz), vec3(_2121, _2122, _2123));
    float _4161 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2136 = _2113 * _2113;
    float _2140 = ((_2131 * _2131) * (_2136 + (-1.0))) + 1.0;
    float _2149 = (exp2(log2(1.0 - (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2150 = 1.0 - _2113;
    float _2160 = (0.5 / (((_2049 * ((_2127 * _2150) + _2113)) + 9.9999999392252902907785028219223e-09) + (((_2049 * _2150) + _2113) * _2127))) * _2127;
    float _4172 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2162 = (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_2136 / ((_2140 * _2140) * 3.141590118408203125));
    float _2172 = (((_2149 * cbLight._m0[_2101].x) * _2162) * _1904) + ((((cbLight._m0[_2020].x * _1873) * _2073) * _2087) * _1917);
    float _2173 = (((_2149 * cbLight._m0[_2101].y) * _2162) * _1904) + ((((cbLight._m0[_2020].y * _1874) * _2073) * _2087) * _1917);
    float _2174 = (((_2149 * cbLight._m0[_2101].z) * _2162) * _1904) + ((((cbLight._m0[_2020].z * _1875) * _2073) * _2087) * _1917);
    float _2236;
    float _2238;
    float _2240;
    if (_1957)
    {
        _2236 = _2172;
        _2238 = _2173;
        _2240 = _2174;
    }
    else
    {
        uint _2242 = _1881 + 2u;
        uint _2246 = _1881 + 10u;
        float _2260 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2242].w)) * _676) * 0.949999988079071044921875);
        float _2261 = _2260 * _2260;
        float _2262 = cbLight._m0[_2242].x + _752;
        float _2263 = cbLight._m0[_2242].y + _753;
        float _2264 = cbLight._m0[_2242].z + _754;
        float _2268 = inversesqrt(dot(vec3(_2262, _2263, _2264), vec3(_2262, _2263, _2264)));
        float _2269 = _2268 * _2262;
        float _2270 = _2268 * _2263;
        float _2271 = _2268 * _2264;
        float _2272 = dot(vec3(_673, _674, _675), vec3(cbLight._m0[_2242].xyz));
        float _4183 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2275 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _2276 = dot(vec3(_673, _674, _675), vec3(_2269, _2270, _2271));
        float _4194 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2279 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _2280 = dot(vec3(cbLight._m0[_2242].xyz), vec3(_2269, _2270, _2271));
        float _4205 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2284 = _2261 * _2261;
        float _2288 = ((_2279 * _2279) * (_2284 + (-1.0))) + 1.0;
        float _2297 = (exp2(log2(1.0 - (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2298 = 1.0 - _2261;
        float _2308 = (0.5 / (((_2049 * ((_2275 * _2298) + _2261)) + 9.9999999392252902907785028219223e-09) + (((_2049 * _2298) + _2261) * _2275))) * _2275;
        float _4216 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2310 = (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_2284 / ((_2288 * _2288) * 3.141590118408203125));
        float _2311 = isnan(1.0) ? _1896 : (isnan(_1896) ? 1.0 : min(_1896, 1.0));
        _2236 = (((_2297 * cbLight._m0[_2246].x) * _2310) * _2311) + _2172;
        _2238 = (((_2297 * cbLight._m0[_2246].y) * _2310) * _2311) + _2173;
        _2240 = (((_2297 * cbLight._m0[_2246].z) * _2310) * _2311) + _2174;
    }
    float _2346;
    float _2348;
    float _2350;
    if (_1975)
    {
        _2346 = _2236;
        _2348 = _2238;
        _2350 = _2240;
    }
    else
    {
        uint _2357 = _1881 + 3u;
        uint _2361 = _1881 + 11u;
        float _2375 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2357].w)) * _676) * 0.949999988079071044921875);
        float _2376 = _2375 * _2375;
        float _2377 = cbLight._m0[_2357].x + _752;
        float _2378 = cbLight._m0[_2357].y + _753;
        float _2379 = cbLight._m0[_2357].z + _754;
        float _2383 = inversesqrt(dot(vec3(_2377, _2378, _2379), vec3(_2377, _2378, _2379)));
        float _2384 = _2383 * _2377;
        float _2385 = _2383 * _2378;
        float _2386 = _2383 * _2379;
        float _2387 = dot(vec3(_673, _674, _675), vec3(cbLight._m0[_2357].xyz));
        float _4232 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2390 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _2391 = dot(vec3(_673, _674, _675), vec3(_2384, _2385, _2386));
        float _4243 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2394 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _2395 = dot(vec3(cbLight._m0[_2357].xyz), vec3(_2384, _2385, _2386));
        float _4254 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2399 = _2376 * _2376;
        float _2403 = ((_2394 * _2394) * (_2399 + (-1.0))) + 1.0;
        float _2412 = (exp2(log2(1.0 - (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2413 = 1.0 - _2376;
        float _2423 = (0.5 / (((_2049 * ((_2390 * _2413) + _2376)) + 9.9999999392252902907785028219223e-09) + (((_2049 * _2413) + _2376) * _2390))) * _2390;
        float _4265 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2425 = (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_2399 / ((_2403 * _2403) * 3.141590118408203125));
        float _2426 = isnan(1.0) ? _1897 : (isnan(_1897) ? 1.0 : min(_1897, 1.0));
        _2346 = (((_2412 * cbLight._m0[_2361].x) * _2425) * _2426) + _2236;
        _2348 = (((_2412 * cbLight._m0[_2361].y) * _2425) * _2426) + _2238;
        _2350 = (((_2412 * cbLight._m0[_2361].z) * _2425) * _2426) + _2240;
    }
    float _2560;
    float _2562;
    float _2564;
    float _2566;
    float _2568;
    float _2570;
    if (_1879.y == 0u)
    {
        float _2501 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2502 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2501;
        float _2503 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2501;
        float _2504 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2501;
        uvec4 _2516 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2517 = _2516.x;
        uint _2528 = uint((float(_2516.y) * floor(float(uint(cbSceneParam._m0[85u].y * _761) / _2517))) + floor(float(uint(cbSceneParam._m0[85u].x * _760) / _2517)));
        float _2538 = (log2(_2504 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2539 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        uint _2542 = uint(isnan(14.0) ? _2539 : (isnan(_2539) ? 14.0 : min(_2539, 14.0)));
        uvec4 _2547 = texelFetch(g_lightClusterGridBuffer, int(((_2542 << 2u) + (_2528 << 6u)) >> 2u));
        uint _2548 = _2547.x;
        uint _2549 = _2516.z;
        float _2648;
        float _2650;
        float _2652;
        float _2654;
        float _2656;
        float _2658;
        if (((((1u << ((_2549 >> 4u) & 15u)) + 4294967295u) & _2548) == 0u) || ((_2549 & 240u) == 0u))
        {
            _2648 = 0.0;
            _2650 = 0.0;
            _2652 = 0.0;
            _2654 = 0.0;
            _2656 = 0.0;
            _2658 = 0.0;
        }
        else
        {
            float _2649;
            float _2651;
            float _2653;
            float _2655;
            float _2657;
            float _2659;
            float _2792 = 0.0;
            float _2793 = 0.0;
            float _2794 = 0.0;
            float _2795 = 0.0;
            float _2796 = 0.0;
            float _2797 = 0.0;
            uint _2798 = 0u;
            uint _2807;
            bool _2808;
            for (;;)
            {
                _2807 = texelFetch(g_lightClassification, int((((_2542 << 5u) + (_2528 << 9u)) + (_2798 << 2u)) >> 2u)).x;
                _2808 = _2807 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2808)
                {
                    frontier_phi_63_pred = _2797;
                    frontier_phi_63_pred_1 = _2796;
                    frontier_phi_63_pred_2 = _2795;
                    frontier_phi_63_pred_3 = _2794;
                    frontier_phi_63_pred_4 = _2793;
                    frontier_phi_63_pred_5 = _2792;
                }
                else
                {
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    uint _2922;
                    _2916 = _2792;
                    _2917 = _2793;
                    _2918 = _2794;
                    _2919 = _2795;
                    _2920 = _2796;
                    _2921 = _2797;
                    _2922 = _2807;
                    float _2848;
                    float _2849;
                    float _2850;
                    float _2851;
                    float _2852;
                    float _2853;
                    for (;;)
                    {
                        uint _2926 = uint(findLSB(_2922)) + (_2798 << 5u);
                        uint _2923 = (_2922 + 4294967295u) & _2922;
                        uint _2928 = _2926 * 48u;
                        vec4 _2942 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2928)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 3u)).x));
                        uint _2948 = (_2926 * 48u) + 4u;
                        vec4 _2961 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2948)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 3u)).x));
                        uint _2967 = (_2926 * 48u) + 8u;
                        vec3 _2978 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2967)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 2u)).x));
                        float _2982 = _2942.x - _2502;
                        float _2983 = _2942.y - _2503;
                        float _2984 = _2942.z - _2504;
                        float _2985 = dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984));
                        float _2988 = inversesqrt(_2985);
                        float _2989 = _2988 * _2982;
                        float _2990 = _2988 * _2983;
                        float _2991 = _2988 * _2984;
                        float _2992 = dot(vec3(_779, _782, _785), vec3(_2989, _2990, _2991));
                        float _2997 = 1.0 - (_2985 * _2942.w);
                        float _4291 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                        float _2998 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                        float _2999 = sqrt(_2985) * _2961.w;
                        float _3002 = 1.39999997615814208984375 / (_2999 + 1.39999997615814208984375);
                        float _3003 = _3002 * _3002;
                        float _3006 = ((1.0 - _3003) * _2992) + _3003;
                        float _3009 = _2999 * _2999;
                        float _3013 = ((isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0))) * _2998) / ((_3009 * 0.699999988079071044921875) + 1.0);
                        float _3017 = (-0.0) - _2502;
                        float _3018 = (-0.0) - _2503;
                        float _3019 = (-0.0) - _2504;
                        float _3023 = inversesqrt(dot(vec3(_3017, _3018, _3019), vec3(_3017, _3018, _3019)));
                        float _3024 = _3023 * _3017;
                        float _3025 = _3023 * _3018;
                        float _3026 = _3023 * _3019;
                        float _3034 = exp2(log2(1.0 / ((_3009 * 3.5) + 5.0)) * 0.25);
                        float _3035 = 1.0 - _839;
                        float _3042 = sqrt(1.0 - ((1.0 - (_3035 * _3035)) * (1.0 - (_3034 * _3034))));
                        float _3043 = _3042 * _3042;
                        float _3044 = _3043 * _3043;
                        float _3045 = _3024 + _2989;
                        float _3046 = _3025 + _2990;
                        float _3047 = _3026 + _2991;
                        float _3051 = inversesqrt(dot(vec3(_3045, _3046, _3047), vec3(_3045, _3046, _3047)));
                        float _3055 = dot(vec3(_779, _782, _785), vec3(_3024, _3025, _3026));
                        float _4307 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                        float _3058 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                        float _3059 = dot(vec3(_779, _782, _785), vec3(_3051 * _3045, _3051 * _3046, _3051 * _3047));
                        float _4318 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                        float _3062 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                        float _3066 = ((_3062 * _3062) * (_3044 + (-1.0))) + 1.0;
                        float _3067 = _3002 * _3043;
                        float _3068 = _3067 * _3067;
                        float _3071 = ((1.0 - _3068) * _2992) + _3068;
                        float _4329 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                        float _3072 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                        float _3073 = 1.0 - _3043;
                        float _3083 = (0.5 / (((_3072 * ((_3058 * _3073) + _3043)) + 9.9999999392252902907785028219223e-09) + (((_3072 * _3073) + _3043) * _3058))) * _3072;
                        float _4340 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                        float _3094 = (((_3044 * 3.1415927410125732421875) * (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0)))) / ((_3066 * _3066) * ((_3009 * 2.1991131305694580078125) + 3.141590118408203125))) * _2998;
                        _2851 = (_3013 * _2961.x) + _2919;
                        _2852 = (_3013 * _2961.y) + _2920;
                        _2853 = (_3013 * _2961.z) + _2921;
                        _2848 = (_3094 * _2978.x) + _2916;
                        _2849 = (_3094 * _2978.y) + _2917;
                        _2850 = (_3094 * _2978.z) + _2918;
                        if (_2923 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2916 = _2848;
                            _2917 = _2849;
                            _2918 = _2850;
                            _2919 = _2851;
                            _2920 = _2852;
                            _2921 = _2853;
                            _2922 = _2923;
                        }
                    }
                    frontier_phi_63_pred = _2853;
                    frontier_phi_63_pred_1 = _2852;
                    frontier_phi_63_pred_2 = _2851;
                    frontier_phi_63_pred_3 = _2850;
                    frontier_phi_63_pred_4 = _2849;
                    frontier_phi_63_pred_5 = _2848;
                }
                _2659 = frontier_phi_63_pred;
                _2657 = frontier_phi_63_pred_1;
                _2655 = frontier_phi_63_pred_2;
                _2653 = frontier_phi_63_pred_3;
                _2651 = frontier_phi_63_pred_4;
                _2649 = frontier_phi_63_pred_5;
                uint _2799 = _2798 + 1u;
                if (_2799 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2792 = _2649;
                    _2793 = _2651;
                    _2794 = _2653;
                    _2795 = _2655;
                    _2796 = _2657;
                    _2797 = _2659;
                    _2798 = _2799;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2648 = _2649;
            _2650 = _2651;
            _2652 = _2653;
            _2654 = _2655;
            _2656 = _2657;
            _2658 = _2659;
        }
        uvec4 _2662 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2663 = _2662.z;
        uint _2665 = (_2663 >> 8u) & 15u;
        float _2760;
        float _2762;
        float _2764;
        float _2766;
        float _2768;
        float _2770;
        if (((4294967295u << _2665) & _2548) == 0u)
        {
            _2760 = _2648;
            _2762 = _2650;
            _2764 = _2652;
            _2766 = _2654;
            _2768 = _2656;
            _2770 = _2658;
        }
        else
        {
            float _2785 = inversesqrt(dot(vec3(_2502, _2503, _2504), vec3(_2502, _2503, _2504)));
            float _2786 = _2785 * _2502;
            float _2787 = _2785 * _2503;
            float _2788 = _2785 * _2504;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2665 < ((_2663 >> 12u) & 15u))
            {
                float _2761;
                float _2763;
                float _2765;
                float _2767;
                float _2769;
                float _2771;
                float _2899 = _2648;
                float _2900 = _2650;
                float _2901 = _2652;
                float _2902 = _2654;
                float _2903 = _2656;
                float _2904 = _2658;
                uint _2905 = _2665;
                uint _2914;
                bool _2915;
                for (;;)
                {
                    _2914 = texelFetch(g_lightClassification, int((((_2542 << 5u) + (_2528 << 9u)) + (_2905 << 2u)) >> 2u)).x;
                    _2915 = _2914 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2915)
                    {
                        frontier_phi_69_pred = _2904;
                        frontier_phi_69_pred_1 = _2903;
                        frontier_phi_69_pred_2 = _2902;
                        frontier_phi_69_pred_3 = _2901;
                        frontier_phi_69_pred_4 = _2900;
                        frontier_phi_69_pred_5 = _2899;
                    }
                    else
                    {
                        float _3099;
                        float _3100;
                        float _3101;
                        float _3102;
                        float _3103;
                        float _3104;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3112 = _2899;
                        float _3113 = _2900;
                        float _3114 = _2901;
                        float _3115 = _2902;
                        float _3116 = _2903;
                        float _3117 = _2904;
                        uint _3118 = _2914;
                        uint _3119;
                        vec4 _3144;
                        float _3145;
                        vec4 _3160;
                        vec3 _3172;
                        vec4 _3187;
                        vec4 _3203;
                        float _3250;
                        bool _3251;
                        for (;;)
                        {
                            uint _3129 = ((_2905 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3118));
                            _3119 = (_3118 + 4294967295u) & _3118;
                            uint _3131 = _3129 * 40u;
                            _3144 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 3u)).x));
                            _3145 = _3144.w;
                            uint _3147 = (_3129 * 40u) + 4u;
                            _3160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 3u)).x));
                            uint _3162 = (_3129 * 40u) + 8u;
                            _3172 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3162)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 2u)).x));
                            uint _3174 = (_3129 * 40u) + 16u;
                            _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            uint _3190 = (_3129 * 40u) + 20u;
                            _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            uint _3206 = (_3129 * 40u) + 24u;
                            vec4 _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            uint _3225 = (_3129 * 40u) + 28u;
                            vec4 _3238 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 3u)).x));
                            _3250 = fma(_2504, _3238.z, fma(_2503, _3238.y, _3238.x * _2502)) + _3238.w;
                            _3251 = !((fma(_2504, _3219.z, fma(_2503, _3219.y, _3219.x * _2502)) + _3219.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3251)
                            {
                                float _3278 = _3144.x - _2502;
                                float _3279 = _3144.y - _2503;
                                float _3280 = _3144.z - _2504;
                                float _3281 = dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280));
                                float _3284 = inversesqrt(_3281);
                                float _3285 = _3284 * _3278;
                                float _3286 = _3284 * _3279;
                                float _3287 = _3284 * _3280;
                                float _3291 = 1.0 - (_3281 / (_3145 * _3145));
                                float _4351 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                                float _3292 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
                                float _3296 = sqrt(_3281) * _3160.w;
                                float _3298 = 1.39999997615814208984375 / (_3296 + 1.39999997615814208984375);
                                float _3299 = _3298 * _3298;
                                float _3302 = ((1.0 - _3299) * dot(vec3(_3285, _3286, _3287), vec3(_779, _782, _785))) + _3299;
                                float _3305 = _3296 * _3296;
                                float _3309 = (fma(_2504, _3187.z, fma(_2503, _3187.y, _3187.x * _2502)) + _3187.w) / _3250;
                                float _3310 = (fma(_2504, _3203.z, fma(_2503, _3203.y, _3203.x * _2502)) + _3203.w) / _3250;
                                float _3314 = 1.0 - dot(vec2(_3309, _3310), vec2(_3309, _3310));
                                float _4367 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                                float _3315 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                                float _3316 = _3315 * (((isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0))) * _3292) / ((_3305 * 0.699999988079071044921875) + 1.0));
                                float _3328 = exp2(log2(1.0 / ((_3305 * 3.5) + 5.0)) * 0.25);
                                float _3329 = 1.0 - _839;
                                float _3336 = sqrt(1.0 - ((1.0 - (_3329 * _3329)) * (1.0 - (_3328 * _3328))));
                                float _3337 = _3336 * _3336;
                                float _3338 = _3337 * _3337;
                                float _3339 = _3285 - _2786;
                                float _3340 = _3286 - _2787;
                                float _3341 = _3287 - _2788;
                                float _3345 = inversesqrt(dot(vec3(_3339, _3340, _3341), vec3(_3339, _3340, _3341)));
                                float _3349 = dot(vec3(_779, _782, _785), vec3((-0.0) - _2786, (-0.0) - _2787, (-0.0) - _2788));
                                float _4378 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                                float _3352 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                                float _3353 = dot(vec3(_779, _782, _785), vec3(_3345 * _3339, _3345 * _3340, _3345 * _3341));
                                float _4389 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                                float _3356 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                                float _3360 = ((_3356 * _3356) * (_3338 + (-1.0))) + 1.0;
                                float _3361 = _3298 * _3337;
                                float _3362 = _3361 * _3361;
                                float _3368 = ((1.0 - _3362) * dot(vec3(_779, _782, _785), vec3(_3285, _3286, _3287))) + _3362;
                                float _4400 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3369 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                                float _3370 = 1.0 - _3337;
                                float _3380 = (0.5 / (((_3369 * ((_3352 * _3370) + _3337)) + 9.9999999392252902907785028219223e-09) + (((_3369 * _3370) + _3337) * _3352))) * _3369;
                                float _4411 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                                float _3390 = (_3315 * _3292) * (((_3338 * 3.1415927410125732421875) * (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) / ((_3360 * _3360) * ((_3305 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3316 * _3160.z;
                                frontier_phi_75_pred_1 = _3316 * _3160.y;
                                frontier_phi_75_pred_2 = _3316 * _3160.x;
                                frontier_phi_75_pred_3 = _3390 * _3172.z;
                                frontier_phi_75_pred_4 = _3390 * _3172.y;
                                frontier_phi_75_pred_5 = _3390 * _3172.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3399 = frontier_phi_75_pred;
                            _3398 = frontier_phi_75_pred_1;
                            _3397 = frontier_phi_75_pred_2;
                            _3396 = frontier_phi_75_pred_3;
                            _3395 = frontier_phi_75_pred_4;
                            _3394 = frontier_phi_75_pred_5;
                            _3102 = _3397 + _3115;
                            _3103 = _3398 + _3116;
                            _3104 = _3399 + _3117;
                            _3099 = _3394 + _3112;
                            _3100 = _3395 + _3113;
                            _3101 = _3396 + _3114;
                            if (_3119 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3112 = _3099;
                                _3113 = _3100;
                                _3114 = _3101;
                                _3115 = _3102;
                                _3116 = _3103;
                                _3117 = _3104;
                                _3118 = _3119;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3104;
                        frontier_phi_69_pred_1 = _3103;
                        frontier_phi_69_pred_2 = _3102;
                        frontier_phi_69_pred_3 = _3101;
                        frontier_phi_69_pred_4 = _3100;
                        frontier_phi_69_pred_5 = _3099;
                    }
                    _2771 = frontier_phi_69_pred;
                    _2769 = frontier_phi_69_pred_1;
                    _2767 = frontier_phi_69_pred_2;
                    _2765 = frontier_phi_69_pred_3;
                    _2763 = frontier_phi_69_pred_4;
                    _2761 = frontier_phi_69_pred_5;
                    uint _2906 = _2905 + 1u;
                    if (_2906 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2899 = _2761;
                        _2900 = _2763;
                        _2901 = _2765;
                        _2902 = _2767;
                        _2903 = _2769;
                        _2904 = _2771;
                        _2905 = _2906;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2771;
                frontier_phi_57_58_ladder_1 = _2769;
                frontier_phi_57_58_ladder_2 = _2767;
                frontier_phi_57_58_ladder_3 = _2765;
                frontier_phi_57_58_ladder_4 = _2763;
                frontier_phi_57_58_ladder_5 = _2761;
            }
            else
            {
                frontier_phi_57_58_ladder = _2658;
                frontier_phi_57_58_ladder_1 = _2656;
                frontier_phi_57_58_ladder_2 = _2654;
                frontier_phi_57_58_ladder_3 = _2652;
                frontier_phi_57_58_ladder_4 = _2650;
                frontier_phi_57_58_ladder_5 = _2648;
            }
            _2760 = frontier_phi_57_58_ladder_5;
            _2762 = frontier_phi_57_58_ladder_4;
            _2764 = frontier_phi_57_58_ladder_3;
            _2766 = frontier_phi_57_58_ladder_2;
            _2768 = frontier_phi_57_58_ladder_1;
            _2770 = frontier_phi_57_58_ladder;
        }
        float _2775 = isnan(1.0) ? _823 : (isnan(_823) ? 1.0 : min(_823, 1.0));
        _2560 = (_2775 * _2766) + _2013;
        _2562 = (_2775 * _2768) + _2015;
        _2564 = (_2775 * _2770) + _2017;
        _2566 = ((_2760 * 0.039999999105930328369140625) * _2775) + _2346;
        _2568 = ((_2762 * 0.039999999105930328369140625) * _2775) + _2348;
        _2570 = ((_2764 * 0.039999999105930328369140625) * _2775) + _2350;
    }
    else
    {
        _2560 = _2013;
        _2562 = _2015;
        _2564 = _2017;
        _2566 = _2346;
        _2568 = _2348;
        _2570 = _2350;
    }
    float _4427 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _4438 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _4449 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    uint _2590 = _798 + 6u;
    float _2598 = _760 / cbSceneParam._m0[86u].x;
    float _2599 = _761 / cbSceneParam._m0[86u].y;
    vec4 _2613 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2598, _2599, (log2((isnan(cbSceneParam._m0[77u].w) ? _695 : (isnan(_695) ? cbSceneParam._m0[77u].w : min(_695, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2615 = _2613.x;
    float _2616 = _2613.y;
    float _2617 = _2613.z;
    float _2618 = _2613.w;
    float _2710;
    float _2712;
    float _2714;
    float _2716;
    if (_695 > cbSceneParam._m0[78u].w)
    {
        float _2673 = isnan(_695) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _695 : min(cbSceneParam._m0[80u].w, _695));
        float _2674 = _2673 / _695;
        float _2685 = _2674 * _745;
        float _2686 = _746 * _2674;
        float _2687 = (-0.0) - _2686;
        float _2688 = _2674 * _747;
        float _2690 = (cbSceneParam._m0[77u].w * _2687) / _2673;
        float _2691 = _2690 + cbSceneParam._m0[79u].w;
        float _2692 = cbSceneParam._m0[79u].w - _2686;
        float _2698 = sqrt(((_2685 * _2685) + (_2686 * _2686)) + (_2688 * _2688));
        float _2701 = (1.0 - (cbSceneParam._m0[77u].w / _2673)) * _2698;
        float _2706 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2708 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2861;
        if (abs((_2687 - _2690) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2861 = ((((_2691 > 0.0) ? exp2(_2706 * _2691) : (2.0 - exp2(_2708 * _2691))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2701;
        }
        else
        {
            float _2821 = 1.0 / cbSceneParam._m0[80u].x;
            float _2822 = isnan(_2692) ? _2691 : (isnan(_2691) ? _2692 : max(_2691, _2692));
            float _2823 = isnan(_2692) ? _2691 : (isnan(_2691) ? _2692 : min(_2691, _2692));
            float _2832 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : min(_2822, 0.0));
            float _2833 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : min(_2823, 0.0));
            _2861 = ((abs(_2698 / _2687) * cbSceneParam._m0[80u].y) * ((((_2832 - _2833) * 2.0) - ((exp2(_2706 * (isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0)))) - exp2(_2706 * (isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0))))) * _2821)) - ((exp2(_2708 * _2832) - exp2(_2708 * _2833)) * _2821))) + (_2701 * cbSceneParam._m0[80u].z);
        }
        vec4 _2863 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2598, _2599, 1.0), 0.0);
        float _2872 = exp2((_2861 * (-1.44269502162933349609375)) * (1.0 - _2863.w));
        float _2873 = log2(_2872);
        float _2889 = log2(_2618);
        _2710 = (exp2(_2889 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2873 * cbSceneParam._m0[78u].x)) * _2863.x) / cbSceneParam._m0[78u].x)) + _2615;
        _2712 = (exp2(_2889 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2873 * cbSceneParam._m0[78u].y)) * _2863.y) / cbSceneParam._m0[78u].y)) + _2616;
        _2714 = (exp2(_2889 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2873 * cbSceneParam._m0[78u].z)) * _2863.z) / cbSceneParam._m0[78u].z)) + _2617;
        _2716 = _2872 * _2618;
    }
    else
    {
        _2710 = _2615;
        _2712 = _2616;
        _2714 = _2617;
        _2716 = _2618;
    }
    float _2728 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2729 = _2728 == 3.0;
    float _2730 = log2(_2716);
    float _2737 = exp2(_2730 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_2560 + ((isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))) * _823))) + ((_2566 + ((isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))) * _1630)) * cbPerFrame._m0[3u].x));
    float _2738 = exp2(_2730 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2562 + ((isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))) * _823))) + ((_2568 + ((isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))) * _1630)) * cbPerFrame._m0[3u].x));
    float _2739 = exp2(_2730 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_2564 + ((isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))) * _823))) + ((_2570 + ((isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0))) * _1630)) * cbPerFrame._m0[3u].x));
    float _2748 = (_2728 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2748 * (_2729 ? _2737 : (_2737 + (cbSceneParam._m0[72u].w * _2710)));
    SV_Target.y = _2748 * (_2729 ? _2738 : (_2738 + (cbSceneParam._m0[72u].w * _2712)));
    SV_Target.z = _2748 * (_2729 ? _2739 : (_2739 + (cbSceneParam._m0[72u].w * _2714)));
    SV_Target.w = cbInstanceData._m0[_2590].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2590].w;
}


