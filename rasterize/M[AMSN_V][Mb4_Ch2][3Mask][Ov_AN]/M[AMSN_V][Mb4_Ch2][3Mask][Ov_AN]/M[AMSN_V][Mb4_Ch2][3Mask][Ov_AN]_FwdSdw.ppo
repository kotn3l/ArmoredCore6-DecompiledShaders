#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1197;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _222 = _221 * _213;
    float _223 = _221 * _214;
    float _224 = _221 * _215;
    float _234 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _235 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _236 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _240 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = _247 * NORMAL.x;
    float _249 = _247 * NORMAL.y;
    float _250 = _247 * NORMAL.z;
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = _254 * TANGENT.x;
    float _256 = _254 * TANGENT.y;
    float _257 = _254 * TANGENT.z;
    float _261 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _269;
    float _270;
    float _271;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _269 = (-0.0) - _248;
        _270 = (-0.0) - _249;
        _271 = (-0.0) - _250;
    }
    else
    {
        _269 = _248;
        _270 = _249;
        _271 = _250;
    }
    vec4 _291 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _297 = _291.x * cbMtdParam._m0[10u].x;
    float _298 = _291.y * cbMtdParam._m0[10u].y;
    float _299 = _291.z * cbMtdParam._m0[10u].z;
    vec4 _318 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    vec4 _337 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _365 = cbMtdParam._m0[15u].x * texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x;
    float _376 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * (((1.0 - _337.x) * 2.0) - _365)) + 1.0;
    float _3791 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _377 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _384 = (_377 * ((_318.x * cbMtdParam._m0[11u].x) - _297)) + _297;
    float _385 = (_377 * ((_318.y * cbMtdParam._m0[11u].y) - _298)) + _298;
    float _386 = (_377 * ((_318.z * cbMtdParam._m0[11u].z) - _299)) + _299;
    vec4 _404 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.z) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.w) + cbTextureTilingScale._m0[11u].w));
    float _417 = (((((1.0 - _337.y) * 2.0) - _365) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].z) + 1.0;
    float _3802 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _418 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _425 = (((_404.x * cbMtdParam._m0[12u].x) - _384) * _418) + _384;
    float _426 = (_418 * ((_404.y * cbMtdParam._m0[12u].y) - _385)) + _385;
    float _427 = (_418 * ((_404.z * cbMtdParam._m0[12u].z) - _386)) + _386;
    vec4 _445 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _458 = (((((1.0 - _337.z) * 2.0) - _365) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].w) + 1.0;
    float _3813 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _459 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    vec4 _486 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _494 = ((((((_445.x * cbMtdParam._m0[13u].x) - _425) * _459) + _425) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _486.x;
    float _497 = ((((_459 * ((_445.y * cbMtdParam._m0[13u].y) - _426)) + _426) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _486.y;
    float _500 = ((((_459 * ((_445.z * cbMtdParam._m0[13u].z) - _427)) + _427) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _486.z;
    vec4 _513 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _515 = _513.x;
    float _516 = _513.y;
    float _517 = _513.z;
    vec4 _529 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w));
    float _540 = ((_529.x - _515) * _377) + _515;
    float _541 = ((_529.y - _516) * _377) + _516;
    float _542 = ((_529.z - _517) * _377) + _517;
    vec4 _555 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _566 = ((_555.x - _540) * _418) + _540;
    float _567 = ((_555.y - _541) * _418) + _541;
    float _568 = ((_555.z - _542) * _418) + _542;
    vec4 _581 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _594 = ((_581.z - _568) * _459) + _568;
    float _597 = ((((_581.x - _566) * _459) + _566) * 2.0) + (-1.0);
    float _599 = ((((_581.y - _567) * _459) + _567) * 2.0) + (-1.0);
    float _600 = dot(vec2(_597, _599), vec2(_597, _599));
    float _3824 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _605 = sqrt(1.0 - (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))));
    float _608 = fma(_605, _269, fma(_599, _261 * TANGENT_2.x, (_240 * _234) * _597));
    float _611 = fma(_605, _270, fma(_599, _261 * TANGENT_2.y, (_240 * _235) * _597));
    float _614 = fma(_605, _271, fma(_599, _261 * TANGENT_2.z, (_240 * _236) * _597));
    float _618 = inversesqrt(dot(vec3(_608, _611, _614), vec3(_608, _611, _614)));
    float _619 = _618 * _608;
    float _620 = _618 * _611;
    float _621 = _618 * _614;
    float _624 = fma(_621, _224, fma(_620, _223, _619 * _222));
    float _627 = fma(_621, _257, fma(_620, _256, _619 * _255));
    float _630 = fma(_621, _271, fma(_620, _270, _619 * _269));
    float _634 = inversesqrt(dot(vec3(_624, _627, _630), vec3(_624, _627, _630)));
    float _637 = _634 * _630;
    vec4 _650 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _660 = (((_650.x * 2.0) + (-1.0)) * cbMtdParam._m0[14u].y) + (_634 * _624);
    float _661 = (((_650.y * 2.0) + (-1.0)) * cbMtdParam._m0[14u].y) + (_634 * _627);
    float _664 = fma(_637, _269, fma(_661, _255, _660 * _222));
    float _667 = fma(_637, _270, fma(_661, _256, _660 * _223));
    float _670 = fma(_637, _271, fma(_661, _257, _660 * _224));
    float _674 = inversesqrt(dot(vec3(_664, _667, _670), vec3(_664, _667, _670)));
    float _675 = _674 * _664;
    float _676 = _674 * _667;
    float _677 = _674 * _670;
    float _3835 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _678 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _3846 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _3857 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _3868 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _697 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _737 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _747 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _737);
    float _748 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _737);
    float _749 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _737);
    float _753 = inversesqrt(dot(vec3(_747, _748, _749), vec3(_747, _748, _749)));
    float _754 = _747 * _753;
    float _755 = _748 * _753;
    float _756 = _749 * _753;
    float _762 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _763 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _781 = fma(_677, cbSceneParam._m0[5u].z, fma(_676, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _675));
    float _784 = fma(_677, cbSceneParam._m0[6u].z, fma(_676, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _675));
    float _787 = fma(_677, cbSceneParam._m0[7u].z, fma(_676, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _675));
    uint _800 = uint(roundEven(NORMAL.w)) * 13u;
    uint _802 = (_800 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _808 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0)))) * cbInstanceData._m0[_802].x;
    float _809 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0)))) * cbInstanceData._m0[_802].y;
    float _810 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) * cbInstanceData._m0[_802].z;
    float _3879 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _811 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _3890 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _812 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _3901 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _813 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    vec4 _822 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _762, cbSceneParam._m0[86u].y * _763));
    float _825 = _822.x * TEXCOORD_4;
    float _826 = dot(vec3(_675, _676, _677), vec3(_754, _755, _756));
    float _829 = _826 * 2.0;
    float _833 = (_829 * _675) - _754;
    float _834 = (_829 * _676) - _755;
    float _835 = (_829 * _677) - _756;
    float _839 = abs(dot(vec3(_754, _755, _756), vec3(_675, _676, _677)));
    float _3912 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _841 = sqrt(_678);
    float _854 = exp2((_841 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_841 * 3.0));
    float _886 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _890 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _894 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1196;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _921 = fma(_894, cbModelParam._m0[26u].z, fma(_890, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _886));
        float _925 = fma(_894, cbModelParam._m0[27u].z, fma(_890, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _886));
        float _929 = fma(_894, cbModelParam._m0[28u].z, fma(_890, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _886));
        float _954 = _886 + _675;
        float _955 = _890 + _676;
        float _956 = _894 + _677;
        float _966 = fma(_956, cbModelParam._m0[26u].z, fma(_955, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _954)) - _921;
        float _967 = fma(_956, cbModelParam._m0[27u].z, fma(_955, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _954)) - _925;
        float _968 = fma(_956, cbModelParam._m0[28u].z, fma(_955, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _954)) - _929;
        float _972 = inversesqrt(dot(vec3(_966, _967, _968), vec3(_966, _967, _968)));
        float _985 = ((_972 * _966) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_921 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _986 = ((_972 * _967) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_925 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _987 = ((_972 * _968) / cbModelParam._m0[34u].z) + ((((((_929 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        float _1024 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_990.x + (-0.5));
        float _1026 = _1024 * (_990.y + (-0.5));
        float _1027 = _1024 * (_990.z + (-0.5));
        float _1034 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_997.x + (-0.5));
        float _1036 = _1034 * (_997.y + (-0.5));
        float _1037 = _1034 * (_997.z + (-0.5));
        float _1044 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1004.x + (-0.5));
        float _1046 = _1044 * (_1004.y + (-0.5));
        float _1047 = _1044 * (_1004.z + (-0.5));
        float _1054 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1011.x + (-0.5));
        float _1056 = _1054 * (_1011.y + (-0.5));
        float _1057 = _1054 * (_1011.z + (-0.5));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = _1025 * 0.5;
        float _1062 = _1035 * 0.5;
        float _1063 = _1045 * 0.5;
        float _1064 = dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063));
        float _1069 = (_1064 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1064);
        float _1078 = (dot(vec3(_675, _676, _677), vec3(_1069 * _1061, _1069 * _1062, _1069 * _1063)) + 1.0) * 0.5;
        float _3938 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1088 = sqrt(((_1062 * _1062) + (_1061 * _1061)) + (_1063 * _1063)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3949 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3960 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_1090 + 1.0))) + _1095) * _1058;
        float _1105 = _1026 * 0.5;
        float _1106 = _1036 * 0.5;
        float _1107 = _1046 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1121 = (dot(vec3(_675, _676, _677), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3971 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1130 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _3982 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _3993 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1132 + 1.0))) + _1137) * _1059;
        float _1147 = _1027 * 0.5;
        float _1148 = _1037 * 0.5;
        float _1149 = _1047 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1163 = (dot(vec3(_675, _676, _677), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _4004 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1172 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _4015 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _4026 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1174 + 1.0))) + _1179) * _1060;
        _1196 = _1027;
        _1198 = _1026;
        _1199 = _1025;
        _1200 = _1037;
        _1201 = _1036;
        _1202 = _1035;
        _1203 = _1047;
        _1204 = _1046;
        _1205 = _1045;
        _1206 = _1060;
        _1207 = _1059;
        _1208 = _1058;
        _1209 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
        _1210 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
        _1211 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
    }
    else
    {
        _1196 = _1197;
        _1198 = _1197;
        _1199 = _1197;
        _1200 = _1197;
        _1201 = _1197;
        _1202 = _1197;
        _1203 = _1197;
        _1204 = _1197;
        _1205 = _1197;
        _1206 = _1197;
        _1207 = _1197;
        _1208 = _1197;
        _1209 = 0.0;
        _1210 = 0.0;
        _1211 = 0.0;
    }
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1237 = fma(_894, cbModelParam._m0[30u].z, fma(_890, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _886));
        float _1241 = fma(_894, cbModelParam._m0[31u].z, fma(_890, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _886));
        float _1245 = fma(_894, cbModelParam._m0[32u].z, fma(_890, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _886));
        float _1268 = _886 + _675;
        float _1269 = _890 + _676;
        float _1270 = _894 + _677;
        float _1280 = fma(_1270, cbModelParam._m0[30u].z, fma(_1269, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1268)) - _1237;
        float _1281 = fma(_1270, cbModelParam._m0[31u].z, fma(_1269, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1268)) - _1241;
        float _1282 = fma(_1270, cbModelParam._m0[32u].z, fma(_1269, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1268)) - _1245;
        float _1286 = inversesqrt(dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282)));
        float _1299 = ((_1286 * _1280) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1237 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1300 = ((_1286 * _1281) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1241 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1301 = ((_1286 * _1282) / cbModelParam._m0[35u].z) + ((((((_1245 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        float _1336 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1303.x + (-0.5));
        float _1338 = _1336 * (_1303.y + (-0.5));
        float _1339 = _1336 * (_1303.z + (-0.5));
        float _1346 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1310.x + (-0.5));
        float _1348 = _1346 * (_1310.y + (-0.5));
        float _1349 = _1346 * (_1310.z + (-0.5));
        float _1356 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1317.x + (-0.5));
        float _1358 = _1356 * (_1317.y + (-0.5));
        float _1359 = _1356 * (_1317.z + (-0.5));
        float _1366 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1324.x + (-0.5));
        float _1368 = _1366 * (_1324.y + (-0.5));
        float _1369 = _1366 * (_1324.z + (-0.5));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1373 = _1337 * 0.5;
        float _1374 = _1347 * 0.5;
        float _1375 = _1357 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1389 = (dot(vec3(_675, _676, _677), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _4067 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1398 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _4078 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _4089 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_1400 + 1.0))) + _1405) * _1370;
        float _1415 = _1338 * 0.5;
        float _1416 = _1348 * 0.5;
        float _1417 = _1358 * 0.5;
        float _1418 = dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417));
        float _1423 = (_1418 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1418);
        float _1431 = (dot(vec3(_675, _676, _677), vec3(_1423 * _1415, _1423 * _1416, _1423 * _1417)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1440 = sqrt(((_1416 * _1416) + (_1415 * _1415)) + (_1417 * _1417)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _4122 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1442 + 1.0))) + _1447) * _1371;
        float _1457 = _1339 * 0.5;
        float _1458 = _1349 * 0.5;
        float _1459 = _1359 * 0.5;
        float _1460 = dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459));
        float _1465 = (_1460 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1460);
        float _1473 = (dot(vec3(_675, _676, _677), vec3(_1465 * _1457, _1465 * _1458, _1465 * _1459)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1482 = sqrt(((_1458 * _1458) + (_1457 * _1457)) + (_1459 * _1459)) / (_1372 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1484 = _1483 * 2.0;
        float _1488 = (1.0 - _1483) / (_1483 + 1.0);
        float _4155 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1498 = ((((1.0 - _1489) * (_1484 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1484 + 1.0))) + _1489) * _1372;
        _1506 = _1339;
        _1507 = _1338;
        _1508 = _1337;
        _1509 = _1349;
        _1510 = _1348;
        _1511 = _1347;
        _1512 = _1359;
        _1513 = _1358;
        _1514 = _1357;
        _1515 = _1372;
        _1516 = _1371;
        _1517 = _1370;
        _1518 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
        _1519 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
        _1520 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)));
    }
    else
    {
        _1506 = _1197;
        _1507 = _1197;
        _1508 = _1197;
        _1509 = _1197;
        _1510 = _1197;
        _1511 = _1197;
        _1512 = _1197;
        _1513 = _1197;
        _1514 = _1197;
        _1515 = _1197;
        _1516 = _1197;
        _1517 = _1197;
        _1518 = 0.0;
        _1519 = 0.0;
        _1520 = 0.0;
    }
    float _1530 = (cbModelParam._m0[1u].x * (_1518 - _1209)) + _1209;
    float _1531 = (cbModelParam._m0[1u].x * (_1519 - _1210)) + _1210;
    float _1532 = (cbModelParam._m0[1u].x * (_1520 - _1211)) + _1211;
    float _1553 = fma(_1532, cbSceneParam._m0[89u].z, fma(_1531, cbSceneParam._m0[89u].y, _1530 * cbSceneParam._m0[89u].x));
    float _1556 = fma(_1532, cbSceneParam._m0[90u].z, fma(_1531, cbSceneParam._m0[90u].y, _1530 * cbSceneParam._m0[90u].x));
    float _1559 = fma(_1532, cbSceneParam._m0[91u].z, fma(_1531, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1530));
    float _1574 = _833 * 0.5;
    float _1575 = _834 * 0.5;
    float _1576 = _835 * 0.5;
    float _1577 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1508, _1511, _1514, _1517));
    float _1580 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1507, _1510, _1513, _1516));
    float _1583 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1506, _1509, _1512, _1515));
    float _1617;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1590 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1196, _1200, _1203, _1206));
        float _1594 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1198, _1201, _1204, _1207));
        float _1598 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1199, _1202, _1205, _1208));
        float _1605 = dot(vec4(cbModelParam._m0[39u]), vec4(_1574, _1575, _1576, 1.0));
        _1617 = dot(vec3(isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)), isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)), isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1605) ? 0.0 : (isnan(0.0) ? _1605 : max(0.0, _1605))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1617 = 1.0;
    }
    float _1628;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1619 = dot(vec4(cbModelParam._m0[40u]), vec4(_1574, _1575, _1576, 1.0));
        _1628 = dot(vec3(isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)), isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)), isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1619) ? 0.0 : (isnan(0.0) ? _1619 : max(0.0, _1619))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1628 = 1.0;
    }
    float _1632 = (_1628 * cbModelParam._m0[1u].x) + (_1617 * (1.0 - cbModelParam._m0[1u].x));
    float _1642 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _678);
    float _1643 = isnan(_1642) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1642 : min(cbModelParam._m0[25u].z, _1642));
    float _1723;
    float _1725;
    float _1727;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1690 = fma(_894, cbModelParam._m0[13u].z, fma(_890, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _886)) + cbModelParam._m0[13u].w;
        float _1694 = fma(_894, cbModelParam._m0[14u].z, fma(_890, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _886)) + cbModelParam._m0[14u].w;
        float _1698 = fma(_894, cbModelParam._m0[15u].z, fma(_890, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _886)) + cbModelParam._m0[15u].w;
        float _1701 = fma(_835, cbModelParam._m0[13u].z, fma(_834, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _833));
        float _1704 = fma(_835, cbModelParam._m0[14u].z, fma(_834, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _833));
        float _1707 = fma(_835, cbModelParam._m0[15u].z, fma(_834, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _833));
        float _1735;
        if (_1701 > 0.0)
        {
            _1735 = abs((1.0 - _1690) / _1701);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1690 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1735 = frontier_phi_16_14_ladder;
        }
        float _1908;
        if (_1704 > 0.0)
        {
            _1908 = abs((1.0 - _1694) / _1704);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1704 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1694 + 1.0) / _1704);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1908 = frontier_phi_25_21_ladder;
        }
        float _2203;
        if (_1707 > 0.0)
        {
            _2203 = abs((1.0 - _1698) / _1707);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1707 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1698 + 1.0) / _1707);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2203 = frontier_phi_37_32_ladder;
        }
        float _2205 = isnan(_1908) ? _1735 : (isnan(_1735) ? _1908 : min(_1735, _1908));
        float _2206 = isnan(_2203) ? _2205 : (isnan(_2205) ? _2203 : min(_2205, _2203));
        float _2210 = (_2206 * _1701) + _1690;
        float _2211 = (_2206 * _1704) + _1694;
        float _2212 = (_2206 * _1707) + _1698;
        float _2213 = _2206 * 9.9999997473787516355514526367188e-05;
        float _2215 = (-1.0) - _2213;
        float _2217 = _2213 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2212 > _2217) || ((_2212 < _2215) || ((_2211 > _2217) || ((_2211 < _2215) || ((_2210 < _2215) || (_2210 > _2217))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2357 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2212, cbModelParam._m0[9u].z, fma(_2211, cbModelParam._m0[9u].y, _2210 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2212, cbModelParam._m0[10u].z, fma(_2211, cbModelParam._m0[10u].y, _2210 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2212, cbModelParam._m0[11u].z, fma(_2211, cbModelParam._m0[11u].y, _2210 * cbModelParam._m0[11u].x))), _1643);
            frontier_phi_15_37_ladder = _2357.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2357.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2357.z * cbModelParam._m0[1u].y;
        }
        _1723 = frontier_phi_15_37_ladder_1;
        _1725 = frontier_phi_15_37_ladder;
        _1727 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1711 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_833, _834, _835), _1643);
        _1723 = _1711.x * cbModelParam._m0[1u].y;
        _1725 = _1711.y * cbModelParam._m0[1u].y;
        _1727 = _1711.z * cbModelParam._m0[1u].y;
    }
    float _1731 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _678);
    float _1732 = isnan(_1731) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1731 : min(cbModelParam._m0[25u].w, _1731));
    float _1825;
    float _1827;
    float _1829;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1789 = fma(_894, cbModelParam._m0[21u].z, fma(_890, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _886)) + cbModelParam._m0[21u].w;
        float _1793 = fma(_894, cbModelParam._m0[22u].z, fma(_890, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _886)) + cbModelParam._m0[22u].w;
        float _1797 = fma(_894, cbModelParam._m0[23u].z, fma(_890, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _886)) + cbModelParam._m0[23u].w;
        float _1800 = fma(_835, cbModelParam._m0[21u].z, fma(_834, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _833));
        float _1803 = fma(_835, cbModelParam._m0[22u].z, fma(_834, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _833));
        float _1806 = fma(_835, cbModelParam._m0[23u].z, fma(_834, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _833));
        float _1913;
        if (_1800 > 0.0)
        {
            _1913 = abs((1.0 - _1789) / _1800);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1789 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1913 = frontier_phi_27_23_ladder;
        }
        float _2230;
        if (_1803 > 0.0)
        {
            _2230 = abs((1.0 - _1793) / _1803);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1793 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2230 = frontier_phi_39_34_ladder;
        }
        float _2557;
        if (_1806 > 0.0)
        {
            _2557 = abs((1.0 - _1797) / _1806);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1797 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2557 = frontier_phi_49_46_ladder;
        }
        float _2559 = isnan(_2230) ? _1913 : (isnan(_1913) ? _2230 : min(_1913, _2230));
        float _2560 = isnan(_2557) ? _2559 : (isnan(_2559) ? _2557 : min(_2559, _2557));
        float _2564 = (_2560 * _1800) + _1789;
        float _2565 = (_2560 * _1803) + _1793;
        float _2566 = (_2560 * _1806) + _1797;
        float _2567 = _2560 * 9.9999997473787516355514526367188e-05;
        float _2568 = (-1.0) - _2567;
        float _2570 = _2567 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2566 > _2570) || ((_2566 < _2568) || ((_2565 > _2570) || ((_2565 < _2568) || ((_2564 < _2568) || (_2564 > _2570))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2684 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2566, cbModelParam._m0[17u].z, fma(_2565, cbModelParam._m0[17u].y, _2564 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2566, cbModelParam._m0[18u].z, fma(_2565, cbModelParam._m0[18u].y, _2564 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2566, cbModelParam._m0[19u].z, fma(_2565, cbModelParam._m0[19u].y, _2564 * cbModelParam._m0[19u].x))), _1732);
            frontier_phi_24_49_ladder = _2684.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2684.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2684.x * cbModelParam._m0[1u].z;
        }
        _1825 = frontier_phi_24_49_ladder_2;
        _1827 = frontier_phi_24_49_ladder_1;
        _1829 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1809 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_833, _834, _835), _1732);
        _1825 = _1809.x * cbModelParam._m0[1u].z;
        _1827 = _1809.y * cbModelParam._m0[1u].z;
        _1829 = _1809.z * cbModelParam._m0[1u].z;
    }
    float _1841 = ((((1.0 - _854) * ((_841 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_854 * _841)) * _825;
    float _1842 = _1841 * ((cbModelParam._m0[1u].w * (_1825 - _1723)) + _1723);
    float _1843 = _1841 * ((cbModelParam._m0[1u].w * (_1827 - _1725)) + _1725);
    float _1844 = _1841 * ((cbModelParam._m0[1u].w * (_1829 - _1727)) + _1727);
    float _1847 = fma(_1844, cbSceneParam._m0[89u].z, fma(_1843, cbSceneParam._m0[89u].y, _1842 * cbSceneParam._m0[89u].x));
    float _1850 = fma(_1844, cbSceneParam._m0[90u].z, fma(_1843, cbSceneParam._m0[90u].y, _1842 * cbSceneParam._m0[90u].x));
    float _1853 = fma(_1844, cbSceneParam._m0[91u].z, fma(_1843, cbSceneParam._m0[91u].y, _1842 * cbSceneParam._m0[91u].x));
    float _1887 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1891 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1895 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1899 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1900 = _1887 / _1899;
    float _1901 = _1891 / _1899;
    float _1902 = _1895 / _1899;
    float _2049;
    float _2050;
    float _2051;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1929 = ((uint(_1902 > cbSceneParam._m0[59u].y) + uint(_1902 > cbSceneParam._m0[59u].x)) + uint(_1902 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1930 = _1929 + 43u;
        uint _1938 = _1929 + 44u;
        uint _1946 = _1929 + 45u;
        uint _1954 = _1929 + 46u;
        float _1965 = fma(_1899, cbSceneParam._m0[_1930].w, fma(_1895, cbSceneParam._m0[_1930].z, fma(_1891, cbSceneParam._m0[_1930].y, _1887 * cbSceneParam._m0[_1930].x)));
        float _1969 = fma(_1899, cbSceneParam._m0[_1938].w, fma(_1895, cbSceneParam._m0[_1938].z, fma(_1891, cbSceneParam._m0[_1938].y, _1887 * cbSceneParam._m0[_1938].x)));
        float _1977 = fma(_1899, cbSceneParam._m0[_1954].w, fma(_1895, cbSceneParam._m0[_1954].z, fma(_1891, cbSceneParam._m0[_1954].y, _1887 * cbSceneParam._m0[_1954].x)));
        float _1982 = cbSceneParam._m0[33u].z * _1977;
        float _1984 = cbSceneParam._m0[33u].w * _1977;
        float _1987 = fma(_1899, cbSceneParam._m0[_1946].w, fma(_1895, cbSceneParam._m0[_1946].z, fma(_1891, cbSceneParam._m0[_1946].y, _1887 * cbSceneParam._m0[_1946].x))) / _1977;
        float _2035 = (cbSceneParam._m0[33u].x - sqrt(((_1901 * _1901) + (_1900 * _1900)) + (_1902 * _1902))) * cbSceneParam._m0[33u].y;
        float _4281 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2042 = (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1982 + _1965) / _1977, (_1984 + _1969) / _1977), _1987), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1984 + _1965) / _1977, (_1969 - _1982) / _1977), _1987), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1965 - _1982) / _1977, (_1969 - _1984) / _1977), _1987), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1965 - _1984) / _1977, (_1982 + _1969) / _1977), _1987), 0.0)).x), vec4(0.25)));
        _2049 = 1.0 - (_2042 * cbSceneParam._m0[34u].x);
        _2050 = 1.0 - (_2042 * cbSceneParam._m0[34u].y);
        _2051 = 1.0 - (_2042 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2049 = 1.0;
        _2050 = 1.0;
        _2051 = 1.0;
    }
    float _2115;
    float _2117;
    float _2119;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2103 = fma(_1899, cbSceneParam._m0[63u].w, fma(_1895, cbSceneParam._m0[63u].z, fma(_1891, cbSceneParam._m0[63u].y, _1887 * cbSceneParam._m0[63u].x)));
        float _2104 = fma(_1899, cbSceneParam._m0[60u].w, fma(_1895, cbSceneParam._m0[60u].z, fma(_1891, cbSceneParam._m0[60u].y, _1887 * cbSceneParam._m0[60u].x))) / _2103;
        float _2105 = fma(_1899, cbSceneParam._m0[61u].w, fma(_1895, cbSceneParam._m0[61u].z, fma(_1891, cbSceneParam._m0[61u].y, _1887 * cbSceneParam._m0[61u].x))) / _2103;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2104 >= cbSceneParam._m0[64u].x) && (_2105 >= cbSceneParam._m0[64u].y)) && (_2104 <= cbSceneParam._m0[64u].z)) && (_2105 <= cbSceneParam._m0[64u].w))
        {
            float _2243 = fma(_1899, cbSceneParam._m0[62u].w, fma(_1895, cbSceneParam._m0[62u].z, fma(_1891, cbSceneParam._m0[62u].y, _1887 * cbSceneParam._m0[62u].x))) / _2103;
            float _2247 = isnan(cbSceneParam._m0[41u].w) ? _2243 : (isnan(_2243) ? cbSceneParam._m0[41u].w : max(_2243, cbSceneParam._m0[41u].w));
            float _2290 = (cbSceneParam._m0[33u].x - sqrt(((_1901 * _1901) + (_1900 * _1900)) + (_1902 * _1902))) * cbSceneParam._m0[33u].y;
            float _4297 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
            float _2297 = (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2104, cbSceneParam._m0[33u].w + _2105), _2247), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2104, _2105 - cbSceneParam._m0[33u].z), _2247), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2104 - cbSceneParam._m0[33u].z, _2105 - cbSceneParam._m0[33u].w), _2247), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2104 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2105), _2247), 0.0)).x), vec4(0.25)));
            float _2301 = 1.0 - (_2297 * cbSceneParam._m0[34u].x);
            float _2302 = 1.0 - (_2297 * cbSceneParam._m0[34u].y);
            float _2303 = 1.0 - (_2297 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2302) ? _2050 : (isnan(_2050) ? _2302 : min(_2050, _2302));
            frontier_phi_36_35_ladder_1 = isnan(_2303) ? _2051 : (isnan(_2051) ? _2303 : min(_2051, _2303));
            frontier_phi_36_35_ladder_2 = isnan(_2301) ? _2049 : (isnan(_2049) ? _2301 : min(_2049, _2301));
        }
        else
        {
            frontier_phi_36_35_ladder = _2050;
            frontier_phi_36_35_ladder_1 = _2051;
            frontier_phi_36_35_ladder_2 = _2049;
        }
        _2115 = frontier_phi_36_35_ladder_2;
        _2117 = frontier_phi_36_35_ladder;
        _2119 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2115 = _2049;
        _2117 = _2050;
        _2119 = _2051;
    }
    uvec4 _2124 = floatBitsToUint(cbInstanceData._m0[_800 + 5u]);
    uint _2126 = _2124.x * 14u;
    uint _2127 = _2126 + 13u;
    float _2134 = _825 + (-1.0);
    float _2139 = (cbLight._m0[_2127].x * _2134) + 1.0;
    float _2140 = (cbLight._m0[_2127].y * _2134) + 1.0;
    float _2141 = (cbLight._m0[_2127].z * _2134) + 1.0;
    float _2142 = (cbLight._m0[_2127].w * _2134) + 1.0;
    uint _2143 = _2126 + 5u;
    float _2149 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
    uint _2153 = _2126 + 4u;
    float _2162 = isnan(1.0) ? _2139 : (isnan(_2139) ? 1.0 : min(_2139, 1.0));
    uint _2166 = _2126 | 1u;
    float _2177 = dot(vec3(cbLight._m0[_2126].xyz), vec3(_675, _676, _677));
    float _2180 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_675, _676, _677));
    float _4333 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _4344 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2185 = (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * 0.3183098733425140380859375;
    float _2187 = (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * 0.3183098733425140380859375;
    float _2194 = ((cbLight._m0[_2143].x * _2149) * _2187) + (((cbLight._m0[_2153].x * _2115) * _2162) * _2185);
    float _2195 = ((_2149 * cbLight._m0[_2143].y) * _2187) + (((cbLight._m0[_2153].y * _2117) * _2162) * _2185);
    float _2196 = ((_2149 * cbLight._m0[_2143].z) * _2187) + (((cbLight._m0[_2153].z * _2119) * _2162) * _2185);
    uvec4 _2200 = floatBitsToUint(cbLight._m0[_2126 + 12u]);
    bool _2202 = _2200.x == 0u;
    float _2304;
    float _2306;
    float _2308;
    if (_2202)
    {
        _2304 = _2194;
        _2306 = _2195;
        _2308 = _2196;
    }
    else
    {
        uint _2312 = _2126 + 6u;
        float _2328 = (dot(vec3(cbLight._m0[_2126 + 2u].xyz), vec3(_675, _676, _677)) * 0.5) + 0.5;
        float _2329 = _2328 * _2328;
        float _4355 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2330 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _2331 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
        _2304 = (((cbLight._m0[_2312].x * 0.3183098733425140380859375) * _2330) * _2331) + _2194;
        _2306 = (((cbLight._m0[_2312].y * 0.3183098733425140380859375) * _2330) * _2331) + _2195;
        _2308 = (((cbLight._m0[_2312].z * 0.3183098733425140380859375) * _2330) * _2331) + _2196;
    }
    bool _2311 = _2200.y == 0u;
    float _2366;
    float _2368;
    float _2370;
    if (_2311)
    {
        _2366 = _2304;
        _2368 = _2306;
        _2370 = _2308;
    }
    else
    {
        uint _2528 = _2126 + 7u;
        float _2544 = (dot(vec3(cbLight._m0[_2126 + 3u].xyz), vec3(_675, _676, _677)) * 0.5) + 0.5;
        float _2545 = _2544 * _2544;
        float _4371 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2546 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2547 = isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0));
        _2366 = (((cbLight._m0[_2528].x * 0.3183098733425140380859375) * _2546) * _2547) + _2304;
        _2368 = (((cbLight._m0[_2528].y * 0.3183098733425140380859375) * _2546) * _2547) + _2306;
        _2370 = (((cbLight._m0[_2528].z * 0.3183098733425140380859375) * _2546) * _2547) + _2308;
    }
    uint _2373 = _2126 + 8u;
    float _2386 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2126].w)) * _678) * 0.949999988079071044921875);
    float _2387 = _2386 * _2386;
    float _2388 = cbLight._m0[_2126].x + _754;
    float _2389 = cbLight._m0[_2126].y + _755;
    float _2390 = cbLight._m0[_2126].z + _756;
    float _2394 = inversesqrt(dot(vec3(_2388, _2389, _2390), vec3(_2388, _2389, _2390)));
    float _2395 = _2394 * _2388;
    float _2396 = _2394 * _2389;
    float _2397 = _2394 * _2390;
    float _2398 = dot(vec3(_675, _676, _677), vec3(cbLight._m0[_2126].xyz));
    float _4387 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2401 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
    float _4398 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _2402 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
    float _2403 = dot(vec3(_675, _676, _677), vec3(_2395, _2396, _2397));
    float _4409 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2406 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
    float _2407 = dot(vec3(cbLight._m0[_2126].xyz), vec3(_2395, _2396, _2397));
    float _4420 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2411 = _2387 * _2387;
    float _2415 = ((_2406 * _2406) * (_2411 + (-1.0))) + 1.0;
    float _2426 = (exp2(log2(1.0 - (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2427 = 1.0 - _2387;
    float _2438 = (0.5 / (((_2402 * ((_2401 * _2427) + _2387)) + 9.9999999392252902907785028219223e-09) + (((_2402 * _2427) + _2387) * _2401))) * _2401;
    float _4431 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2440 = (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_2411 / ((_2415 * _2415) * 3.141590118408203125));
    uint _2454 = _2126 + 9u;
    float _2465 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2166].w)) * _678) * 0.949999988079071044921875);
    float _2466 = _2465 * _2465;
    float _2467 = cbLight._m0[_2166].x + _754;
    float _2468 = cbLight._m0[_2166].y + _755;
    float _2469 = cbLight._m0[_2166].z + _756;
    float _2473 = inversesqrt(dot(vec3(_2467, _2468, _2469), vec3(_2467, _2468, _2469)));
    float _2474 = _2473 * _2467;
    float _2475 = _2473 * _2468;
    float _2476 = _2473 * _2469;
    float _2477 = dot(vec3(_675, _676, _677), vec3(cbLight._m0[_2166].xyz));
    float _4442 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2480 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
    float _2481 = dot(vec3(_675, _676, _677), vec3(_2474, _2475, _2476));
    float _4453 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2484 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
    float _2485 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_2474, _2475, _2476));
    float _4464 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2489 = _2466 * _2466;
    float _2493 = ((_2484 * _2484) * (_2489 + (-1.0))) + 1.0;
    float _2502 = (exp2(log2(1.0 - (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2503 = 1.0 - _2466;
    float _2513 = (0.5 / (((_2402 * ((_2480 * _2503) + _2466)) + 9.9999999392252902907785028219223e-09) + (((_2402 * _2503) + _2466) * _2480))) * _2480;
    float _4475 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
    float _2515 = (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2489 / ((_2493 * _2493) * 3.141590118408203125));
    float _2525 = (((_2502 * cbLight._m0[_2454].x) * _2515) * _2149) + ((((cbLight._m0[_2373].x * _2115) * _2426) * _2440) * _2162);
    float _2526 = (((_2502 * cbLight._m0[_2454].y) * _2515) * _2149) + ((((cbLight._m0[_2373].y * _2117) * _2426) * _2440) * _2162);
    float _2527 = (((_2502 * cbLight._m0[_2454].z) * _2515) * _2149) + ((((cbLight._m0[_2373].z * _2119) * _2426) * _2440) * _2162);
    float _2583;
    float _2585;
    float _2587;
    if (_2202)
    {
        _2583 = _2525;
        _2585 = _2526;
        _2587 = _2527;
    }
    else
    {
        uint _2589 = _2126 + 2u;
        uint _2593 = _2126 + 10u;
        float _2607 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2589].w)) * _678) * 0.949999988079071044921875);
        float _2608 = _2607 * _2607;
        float _2609 = cbLight._m0[_2589].x + _754;
        float _2610 = cbLight._m0[_2589].y + _755;
        float _2611 = cbLight._m0[_2589].z + _756;
        float _2615 = inversesqrt(dot(vec3(_2609, _2610, _2611), vec3(_2609, _2610, _2611)));
        float _2616 = _2615 * _2609;
        float _2617 = _2615 * _2610;
        float _2618 = _2615 * _2611;
        float _2619 = dot(vec3(_675, _676, _677), vec3(cbLight._m0[_2589].xyz));
        float _4486 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2622 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _2623 = dot(vec3(_675, _676, _677), vec3(_2616, _2617, _2618));
        float _4497 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2626 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
        float _2627 = dot(vec3(cbLight._m0[_2589].xyz), vec3(_2616, _2617, _2618));
        float _4508 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2631 = _2608 * _2608;
        float _2635 = ((_2626 * _2626) * (_2631 + (-1.0))) + 1.0;
        float _2644 = (exp2(log2(1.0 - (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2645 = 1.0 - _2608;
        float _2655 = (0.5 / (((_2402 * ((_2622 * _2645) + _2608)) + 9.9999999392252902907785028219223e-09) + (((_2402 * _2645) + _2608) * _2622))) * _2622;
        float _4519 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2657 = (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * (_2631 / ((_2635 * _2635) * 3.141590118408203125));
        float _2658 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
        _2583 = (((_2644 * cbLight._m0[_2593].x) * _2657) * _2658) + _2525;
        _2585 = (((_2644 * cbLight._m0[_2593].y) * _2657) * _2658) + _2526;
        _2587 = (((_2644 * cbLight._m0[_2593].z) * _2657) * _2658) + _2527;
    }
    float _2689;
    float _2691;
    float _2693;
    if (_2311)
    {
        _2689 = _2583;
        _2691 = _2585;
        _2693 = _2587;
    }
    else
    {
        uint _2700 = _2126 + 3u;
        uint _2704 = _2126 + 11u;
        float _2718 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2700].w)) * _678) * 0.949999988079071044921875);
        float _2719 = _2718 * _2718;
        float _2720 = cbLight._m0[_2700].x + _754;
        float _2721 = cbLight._m0[_2700].y + _755;
        float _2722 = cbLight._m0[_2700].z + _756;
        float _2726 = inversesqrt(dot(vec3(_2720, _2721, _2722), vec3(_2720, _2721, _2722)));
        float _2727 = _2726 * _2720;
        float _2728 = _2726 * _2721;
        float _2729 = _2726 * _2722;
        float _2730 = dot(vec3(_675, _676, _677), vec3(cbLight._m0[_2700].xyz));
        float _4535 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2733 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _2734 = dot(vec3(_675, _676, _677), vec3(_2727, _2728, _2729));
        float _4546 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        float _2737 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _2738 = dot(vec3(cbLight._m0[_2700].xyz), vec3(_2727, _2728, _2729));
        float _4557 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        float _2742 = _2719 * _2719;
        float _2746 = ((_2737 * _2737) * (_2742 + (-1.0))) + 1.0;
        float _2755 = (exp2(log2(1.0 - (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2756 = 1.0 - _2719;
        float _2766 = (0.5 / (((_2402 * ((_2733 * _2756) + _2719)) + 9.9999999392252902907785028219223e-09) + (((_2402 * _2756) + _2719) * _2733))) * _2733;
        float _4568 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        float _2768 = (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_2742 / ((_2746 * _2746) * 3.141590118408203125));
        float _2769 = isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0));
        _2689 = (((_2755 * cbLight._m0[_2704].x) * _2768) * _2769) + _2583;
        _2691 = (((_2755 * cbLight._m0[_2704].y) * _2768) * _2769) + _2585;
        _2693 = (((_2755 * cbLight._m0[_2704].z) * _2768) * _2769) + _2587;
    }
    float _2834;
    float _2836;
    float _2838;
    float _2840;
    float _2842;
    float _2844;
    if (_2124.y == 0u)
    {
        uvec4 _2790 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2791 = _2790.x;
        uint _2802 = uint((float(_2790.y) * floor(float(uint(cbSceneParam._m0[85u].y * _763) / _2791))) + floor(float(uint(cbSceneParam._m0[85u].x * _762) / _2791)));
        float _2812 = (log2(_1902 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2813 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        uint _2816 = uint(isnan(14.0) ? _2813 : (isnan(_2813) ? 14.0 : min(_2813, 14.0)));
        uvec4 _2821 = texelFetch(g_lightClusterGridBuffer, int(((_2816 << 2u) + (_2802 << 6u)) >> 2u));
        uint _2822 = _2821.x;
        uint _2823 = _2790.z;
        float _2901;
        float _2903;
        float _2905;
        float _2907;
        float _2909;
        float _2911;
        if (((((1u << ((_2823 >> 4u) & 15u)) + 4294967295u) & _2822) == 0u) || ((_2823 & 240u) == 0u))
        {
            _2901 = 0.0;
            _2903 = 0.0;
            _2905 = 0.0;
            _2907 = 0.0;
            _2909 = 0.0;
            _2911 = 0.0;
        }
        else
        {
            float _2902;
            float _2904;
            float _2906;
            float _2908;
            float _2910;
            float _2912;
            float _3045 = 0.0;
            float _3046 = 0.0;
            float _3047 = 0.0;
            float _3048 = 0.0;
            float _3049 = 0.0;
            float _3050 = 0.0;
            uint _3051 = 0u;
            uint _3060;
            bool _3061;
            for (;;)
            {
                _3060 = texelFetch(g_lightClassification, int((((_2816 << 5u) + (_2802 << 9u)) + (_3051 << 2u)) >> 2u)).x;
                _3061 = _3060 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3061)
                {
                    frontier_phi_68_pred = _3050;
                    frontier_phi_68_pred_1 = _3049;
                    frontier_phi_68_pred_2 = _3048;
                    frontier_phi_68_pred_3 = _3046;
                    frontier_phi_68_pred_4 = _3045;
                    frontier_phi_68_pred_5 = _3047;
                }
                else
                {
                    float _3169;
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    float _3174;
                    uint _3175;
                    _3169 = _3045;
                    _3170 = _3046;
                    _3171 = _3047;
                    _3172 = _3048;
                    _3173 = _3049;
                    _3174 = _3050;
                    _3175 = _3060;
                    float _3101;
                    float _3102;
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    for (;;)
                    {
                        uint _3179 = uint(findLSB(_3175)) + (_3051 << 5u);
                        uint _3176 = (_3175 + 4294967295u) & _3175;
                        uint _3181 = _3179 * 48u;
                        vec4 _3195 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3181)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 3u)).x));
                        uint _3201 = (_3179 * 48u) + 4u;
                        vec4 _3214 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3201)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 3u)).x));
                        uint _3220 = (_3179 * 48u) + 8u;
                        vec3 _3231 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3220)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 2u)).x));
                        float _3235 = _3195.x - _1900;
                        float _3236 = _3195.y - _1901;
                        float _3237 = _3195.z - _1902;
                        float _3238 = dot(vec3(_3235, _3236, _3237), vec3(_3235, _3236, _3237));
                        float _3241 = inversesqrt(_3238);
                        float _3242 = _3241 * _3235;
                        float _3243 = _3241 * _3236;
                        float _3244 = _3241 * _3237;
                        float _3245 = dot(vec3(_781, _784, _787), vec3(_3242, _3243, _3244));
                        float _3250 = 1.0 - (_3238 * _3195.w);
                        float _4594 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                        float _3251 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                        float _3252 = sqrt(_3238) * _3214.w;
                        float _3255 = 1.39999997615814208984375 / (_3252 + 1.39999997615814208984375);
                        float _3256 = _3255 * _3255;
                        float _3259 = ((1.0 - _3256) * _3245) + _3256;
                        float _3262 = _3252 * _3252;
                        float _3266 = ((isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0))) * _3251) / ((_3262 * 0.699999988079071044921875) + 1.0);
                        float _3270 = (-0.0) - _1900;
                        float _3271 = (-0.0) - _1901;
                        float _3272 = (-0.0) - _1902;
                        float _3276 = inversesqrt(dot(vec3(_3270, _3271, _3272), vec3(_3270, _3271, _3272)));
                        float _3277 = _3276 * _3270;
                        float _3278 = _3276 * _3271;
                        float _3279 = _3276 * _3272;
                        float _3286 = exp2(log2(1.0 / ((_3262 * 3.5) + 5.0)) * 0.25);
                        float _3287 = 1.0 - _841;
                        float _3294 = sqrt(1.0 - ((1.0 - (_3287 * _3287)) * (1.0 - (_3286 * _3286))));
                        float _3295 = _3294 * _3294;
                        float _3296 = _3295 * _3295;
                        float _3297 = _3277 + _3242;
                        float _3298 = _3278 + _3243;
                        float _3299 = _3279 + _3244;
                        float _3303 = inversesqrt(dot(vec3(_3297, _3298, _3299), vec3(_3297, _3298, _3299)));
                        float _3307 = dot(vec3(_781, _784, _787), vec3(_3277, _3278, _3279));
                        float _4610 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                        float _3310 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                        float _3311 = dot(vec3(_781, _784, _787), vec3(_3303 * _3297, _3303 * _3298, _3303 * _3299));
                        float _4621 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                        float _3314 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
                        float _3318 = ((_3314 * _3314) * (_3296 + (-1.0))) + 1.0;
                        float _3319 = _3255 * _3295;
                        float _3320 = _3319 * _3319;
                        float _3323 = ((1.0 - _3320) * _3245) + _3320;
                        float _4632 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                        float _3324 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                        float _3325 = 1.0 - _3295;
                        float _3335 = (0.5 / (((_3324 * ((_3310 * _3325) + _3295)) + 9.9999999392252902907785028219223e-09) + (((_3324 * _3325) + _3295) * _3310))) * _3324;
                        float _4643 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                        float _3346 = (((_3296 * 3.1415927410125732421875) * (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0)))) / ((_3318 * _3318) * ((_3262 * 2.1991131305694580078125) + 3.141590118408203125))) * _3251;
                        _3104 = (_3266 * _3214.x) + _3172;
                        _3105 = (_3266 * _3214.y) + _3173;
                        _3106 = (_3266 * _3214.z) + _3174;
                        _3101 = (_3346 * _3231.x) + _3169;
                        _3102 = (_3346 * _3231.y) + _3170;
                        _3103 = (_3346 * _3231.z) + _3171;
                        if (_3176 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3169 = _3101;
                            _3170 = _3102;
                            _3171 = _3103;
                            _3172 = _3104;
                            _3173 = _3105;
                            _3174 = _3106;
                            _3175 = _3176;
                        }
                    }
                    frontier_phi_68_pred = _3106;
                    frontier_phi_68_pred_1 = _3105;
                    frontier_phi_68_pred_2 = _3104;
                    frontier_phi_68_pred_3 = _3102;
                    frontier_phi_68_pred_4 = _3101;
                    frontier_phi_68_pred_5 = _3103;
                }
                _2912 = frontier_phi_68_pred;
                _2910 = frontier_phi_68_pred_1;
                _2908 = frontier_phi_68_pred_2;
                _2904 = frontier_phi_68_pred_3;
                _2902 = frontier_phi_68_pred_4;
                _2906 = frontier_phi_68_pred_5;
                uint _3052 = _3051 + 1u;
                if (_3052 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3045 = _2902;
                    _3046 = _2904;
                    _3047 = _2906;
                    _3048 = _2908;
                    _3049 = _2910;
                    _3050 = _2912;
                    _3051 = _3052;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2901 = _2902;
            _2903 = _2904;
            _2905 = _2906;
            _2907 = _2908;
            _2909 = _2910;
            _2911 = _2912;
        }
        uvec4 _2915 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2916 = _2915.z;
        uint _2918 = (_2916 >> 8u) & 15u;
        float _3013;
        float _3015;
        float _3017;
        float _3019;
        float _3021;
        float _3023;
        if (((4294967295u << _2918) & _2822) == 0u)
        {
            _3013 = _2901;
            _3015 = _2903;
            _3017 = _2905;
            _3019 = _2907;
            _3021 = _2909;
            _3023 = _2911;
        }
        else
        {
            float _3038 = inversesqrt(dot(vec3(_1900, _1901, _1902), vec3(_1900, _1901, _1902)));
            float _3039 = _3038 * _1900;
            float _3040 = _3038 * _1901;
            float _3041 = _3038 * _1902;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2918 < ((_2916 >> 12u) & 15u))
            {
                float _3014;
                float _3016;
                float _3018;
                float _3020;
                float _3022;
                float _3024;
                float _3152 = _2901;
                float _3153 = _2903;
                float _3154 = _2905;
                float _3155 = _2907;
                float _3156 = _2909;
                float _3157 = _2911;
                uint _3158 = _2918;
                uint _3167;
                bool _3168;
                for (;;)
                {
                    _3167 = texelFetch(g_lightClassification, int((((_2816 << 5u) + (_2802 << 9u)) + (_3158 << 2u)) >> 2u)).x;
                    _3168 = _3167 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3168)
                    {
                        frontier_phi_74_pred = _3154;
                        frontier_phi_74_pred_1 = _3153;
                        frontier_phi_74_pred_2 = _3152;
                        frontier_phi_74_pred_3 = _3157;
                        frontier_phi_74_pred_4 = _3156;
                        frontier_phi_74_pred_5 = _3155;
                    }
                    else
                    {
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3364 = _3152;
                        float _3365 = _3153;
                        float _3366 = _3154;
                        float _3367 = _3155;
                        float _3368 = _3156;
                        float _3369 = _3157;
                        uint _3370 = _3167;
                        uint _3371;
                        vec4 _3396;
                        float _3397;
                        vec4 _3412;
                        vec3 _3424;
                        vec4 _3439;
                        vec4 _3455;
                        float _3502;
                        bool _3503;
                        for (;;)
                        {
                            uint _3381 = ((_3158 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3370));
                            _3371 = (_3370 + 4294967295u) & _3370;
                            uint _3383 = _3381 * 40u;
                            _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            _3397 = _3396.w;
                            uint _3399 = (_3381 * 40u) + 4u;
                            _3412 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 3u)).x));
                            uint _3414 = (_3381 * 40u) + 8u;
                            _3424 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x));
                            uint _3426 = (_3381 * 40u) + 16u;
                            _3439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 3u)).x));
                            uint _3442 = (_3381 * 40u) + 20u;
                            _3455 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 3u)).x));
                            uint _3458 = (_3381 * 40u) + 24u;
                            vec4 _3471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 3u)).x));
                            uint _3477 = (_3381 * 40u) + 28u;
                            vec4 _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            _3502 = fma(_1902, _3490.z, fma(_1901, _3490.y, _3490.x * _1900)) + _3490.w;
                            _3503 = !((fma(_1902, _3471.z, fma(_1901, _3471.y, _3471.x * _1900)) + _3471.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3503)
                            {
                                float _3530 = _3396.x - _1900;
                                float _3531 = _3396.y - _1901;
                                float _3532 = _3396.z - _1902;
                                float _3533 = dot(vec3(_3530, _3531, _3532), vec3(_3530, _3531, _3532));
                                float _3536 = inversesqrt(_3533);
                                float _3537 = _3536 * _3530;
                                float _3538 = _3536 * _3531;
                                float _3539 = _3536 * _3532;
                                float _3543 = 1.0 - (_3533 / (_3397 * _3397));
                                float _4654 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3544 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
                                float _3548 = sqrt(_3533) * _3412.w;
                                float _3550 = 1.39999997615814208984375 / (_3548 + 1.39999997615814208984375);
                                float _3551 = _3550 * _3550;
                                float _3554 = ((1.0 - _3551) * dot(vec3(_3537, _3538, _3539), vec3(_781, _784, _787))) + _3551;
                                float _3557 = _3548 * _3548;
                                float _3561 = (fma(_1902, _3439.z, fma(_1901, _3439.y, _3439.x * _1900)) + _3439.w) / _3502;
                                float _3562 = (fma(_1902, _3455.z, fma(_1901, _3455.y, _3455.x * _1900)) + _3455.w) / _3502;
                                float _3566 = 1.0 - dot(vec2(_3561, _3562), vec2(_3561, _3562));
                                float _4670 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                                float _3567 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                                float _3568 = _3567 * (((isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0))) * _3544) / ((_3557 * 0.699999988079071044921875) + 1.0));
                                float _3580 = exp2(log2(1.0 / ((_3557 * 3.5) + 5.0)) * 0.25);
                                float _3581 = 1.0 - _841;
                                float _3588 = sqrt(1.0 - ((1.0 - (_3581 * _3581)) * (1.0 - (_3580 * _3580))));
                                float _3589 = _3588 * _3588;
                                float _3590 = _3589 * _3589;
                                float _3591 = _3537 - _3039;
                                float _3592 = _3538 - _3040;
                                float _3593 = _3539 - _3041;
                                float _3597 = inversesqrt(dot(vec3(_3591, _3592, _3593), vec3(_3591, _3592, _3593)));
                                float _3601 = dot(vec3(_781, _784, _787), vec3((-0.0) - _3039, (-0.0) - _3040, (-0.0) - _3041));
                                float _4681 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3604 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                                float _3605 = dot(vec3(_781, _784, _787), vec3(_3597 * _3591, _3597 * _3592, _3597 * _3593));
                                float _4692 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3608 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                                float _3612 = ((_3608 * _3608) * (_3590 + (-1.0))) + 1.0;
                                float _3613 = _3550 * _3589;
                                float _3614 = _3613 * _3613;
                                float _3620 = ((1.0 - _3614) * dot(vec3(_781, _784, _787), vec3(_3537, _3538, _3539))) + _3614;
                                float _4703 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                                float _3621 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
                                float _3622 = 1.0 - _3589;
                                float _3632 = (0.5 / (((_3621 * ((_3604 * _3622) + _3589)) + 9.9999999392252902907785028219223e-09) + (((_3621 * _3622) + _3589) * _3604))) * _3621;
                                float _4714 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                                float _3642 = (_3567 * _3544) * (((_3590 * 3.1415927410125732421875) * (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0)))) / ((_3612 * _3612) * ((_3557 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3642 * _3424.z;
                                frontier_phi_80_pred_1 = _3642 * _3424.y;
                                frontier_phi_80_pred_2 = _3642 * _3424.x;
                                frontier_phi_80_pred_3 = _3568 * _3412.z;
                                frontier_phi_80_pred_4 = _3568 * _3412.y;
                                frontier_phi_80_pred_5 = _3568 * _3412.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3648 = frontier_phi_80_pred;
                            _3647 = frontier_phi_80_pred_1;
                            _3646 = frontier_phi_80_pred_2;
                            _3651 = frontier_phi_80_pred_3;
                            _3650 = frontier_phi_80_pred_4;
                            _3649 = frontier_phi_80_pred_5;
                            _3354 = _3649 + _3367;
                            _3355 = _3650 + _3368;
                            _3356 = _3651 + _3369;
                            _3351 = _3646 + _3364;
                            _3352 = _3647 + _3365;
                            _3353 = _3648 + _3366;
                            if (_3371 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3364 = _3351;
                                _3365 = _3352;
                                _3366 = _3353;
                                _3367 = _3354;
                                _3368 = _3355;
                                _3369 = _3356;
                                _3370 = _3371;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3353;
                        frontier_phi_74_pred_1 = _3352;
                        frontier_phi_74_pred_2 = _3351;
                        frontier_phi_74_pred_3 = _3356;
                        frontier_phi_74_pred_4 = _3355;
                        frontier_phi_74_pred_5 = _3354;
                    }
                    _3018 = frontier_phi_74_pred;
                    _3016 = frontier_phi_74_pred_1;
                    _3014 = frontier_phi_74_pred_2;
                    _3024 = frontier_phi_74_pred_3;
                    _3022 = frontier_phi_74_pred_4;
                    _3020 = frontier_phi_74_pred_5;
                    uint _3159 = _3158 + 1u;
                    if (_3159 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3152 = _3014;
                        _3153 = _3016;
                        _3154 = _3018;
                        _3155 = _3020;
                        _3156 = _3022;
                        _3157 = _3024;
                        _3158 = _3159;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3022;
                frontier_phi_62_63_ladder_1 = _3020;
                frontier_phi_62_63_ladder_2 = _3018;
                frontier_phi_62_63_ladder_3 = _3024;
                frontier_phi_62_63_ladder_4 = _3016;
                frontier_phi_62_63_ladder_5 = _3014;
            }
            else
            {
                frontier_phi_62_63_ladder = _2909;
                frontier_phi_62_63_ladder_1 = _2907;
                frontier_phi_62_63_ladder_2 = _2905;
                frontier_phi_62_63_ladder_3 = _2911;
                frontier_phi_62_63_ladder_4 = _2903;
                frontier_phi_62_63_ladder_5 = _2901;
            }
            _3013 = frontier_phi_62_63_ladder_5;
            _3015 = frontier_phi_62_63_ladder_4;
            _3017 = frontier_phi_62_63_ladder_2;
            _3019 = frontier_phi_62_63_ladder_1;
            _3021 = frontier_phi_62_63_ladder;
            _3023 = frontier_phi_62_63_ladder_3;
        }
        float _3028 = isnan(1.0) ? _825 : (isnan(_825) ? 1.0 : min(_825, 1.0));
        _2834 = (_3028 * _3019) + _2366;
        _2836 = (_3028 * _3021) + _2368;
        _2838 = (_3028 * _3023) + _2370;
        _2840 = ((_3013 * 0.039999999105930328369140625) * _3028) + _2689;
        _2842 = ((_3015 * 0.039999999105930328369140625) * _3028) + _2691;
        _2844 = ((_3017 * 0.039999999105930328369140625) * _3028) + _2693;
    }
    else
    {
        _2834 = _2366;
        _2836 = _2368;
        _2838 = _2370;
        _2840 = _2689;
        _2842 = _2691;
        _2844 = _2693;
    }
    float _4730 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _4741 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _4752 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    uint _2864 = _800 + 6u;
    float _2872 = _762 / cbSceneParam._m0[86u].x;
    float _2873 = _763 / cbSceneParam._m0[86u].y;
    vec4 _2887 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2872, _2873, (log2((isnan(cbSceneParam._m0[77u].w) ? _697 : (isnan(_697) ? cbSceneParam._m0[77u].w : min(_697, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2889 = _2887.x;
    float _2890 = _2887.y;
    float _2891 = _2887.z;
    float _2892 = _2887.w;
    float _2963;
    float _2965;
    float _2967;
    float _2969;
    if (_697 > cbSceneParam._m0[78u].w)
    {
        float _2926 = isnan(_697) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _697 : min(cbSceneParam._m0[80u].w, _697));
        float _2927 = _2926 / _697;
        float _2938 = _2927 * _747;
        float _2939 = _748 * _2927;
        float _2940 = (-0.0) - _2939;
        float _2941 = _2927 * _749;
        float _2943 = (cbSceneParam._m0[77u].w * _2940) / _2926;
        float _2944 = _2943 + cbSceneParam._m0[79u].w;
        float _2945 = cbSceneParam._m0[79u].w - _2939;
        float _2951 = sqrt(((_2938 * _2938) + (_2939 * _2939)) + (_2941 * _2941));
        float _2954 = (1.0 - (cbSceneParam._m0[77u].w / _2926)) * _2951;
        float _2959 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2961 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3114;
        if (abs((_2940 - _2943) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3114 = ((((_2944 > 0.0) ? exp2(_2959 * _2944) : (2.0 - exp2(_2961 * _2944))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2954;
        }
        else
        {
            float _3074 = 1.0 / cbSceneParam._m0[80u].x;
            float _3075 = isnan(_2945) ? _2944 : (isnan(_2944) ? _2945 : max(_2944, _2945));
            float _3076 = isnan(_2945) ? _2944 : (isnan(_2944) ? _2945 : min(_2944, _2945));
            float _3085 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : min(_3075, 0.0));
            float _3086 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : min(_3076, 0.0));
            _3114 = ((abs(_2951 / _2940) * cbSceneParam._m0[80u].y) * ((((_3085 - _3086) * 2.0) - ((exp2(_2959 * (isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0)))) - exp2(_2959 * (isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0))))) * _3074)) - ((exp2(_2961 * _3085) - exp2(_2961 * _3086)) * _3074))) + (_2954 * cbSceneParam._m0[80u].z);
        }
        vec4 _3116 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2872, _2873, 1.0), 0.0);
        float _3125 = exp2((_3114 * (-1.44269502162933349609375)) * (1.0 - _3116.w));
        float _3126 = log2(_3125);
        float _3142 = log2(_2892);
        _2963 = (exp2(_3142 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3126 * cbSceneParam._m0[78u].x)) * _3116.x) / cbSceneParam._m0[78u].x)) + _2889;
        _2965 = (exp2(_3142 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3126 * cbSceneParam._m0[78u].y)) * _3116.y) / cbSceneParam._m0[78u].y)) + _2890;
        _2967 = (exp2(_3142 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3126 * cbSceneParam._m0[78u].z)) * _3116.z) / cbSceneParam._m0[78u].z)) + _2891;
        _2969 = _3125 * _2892;
    }
    else
    {
        _2963 = _2889;
        _2965 = _2890;
        _2967 = _2891;
        _2969 = _2892;
    }
    float _2981 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2982 = _2981 == 3.0;
    float _2983 = log2(_2969);
    float _2990 = exp2(_2983 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_2834 + ((isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))) * _825))) + ((_2840 + ((isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))) * _1632)) * cbPerFrame._m0[3u].x));
    float _2991 = exp2(_2983 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0))) * (_2836 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _825))) + ((_2842 + ((isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))) * _1632)) * cbPerFrame._m0[3u].x));
    float _2992 = exp2(_2983 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0))) * (_2838 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _825))) + ((_2844 + ((isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))) * _1632)) * cbPerFrame._m0[3u].x));
    float _3001 = (_2981 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3001 * (_2982 ? _2990 : (_2990 + (cbSceneParam._m0[72u].w * _2963)));
    SV_Target.y = _3001 * (_2982 ? _2991 : (_2991 + (cbSceneParam._m0[72u].w * _2965)));
    SV_Target.z = _3001 * (_2982 ? _2992 : (_2992 + (cbSceneParam._m0[72u].w * _2967)));
    SV_Target.w = cbInstanceData._m0[_2864].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2864].w;
}


