#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1242;
float _3890;
float _3891;
float _3892;
float _3893;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _226 = _225 * _217;
    float _227 = _225 * _218;
    float _228 = _225 * _219;
    float _238 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _239 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _240 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _244 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = _251 * NORMAL.x;
    float _253 = _251 * NORMAL.y;
    float _254 = _251 * NORMAL.z;
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = _258 * TANGENT.x;
    float _260 = _258 * TANGENT.y;
    float _261 = _258 * TANGENT.z;
    float _265 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _273;
    float _274;
    float _275;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _273 = (-0.0) - _252;
        _274 = (-0.0) - _253;
        _275 = (-0.0) - _254;
    }
    else
    {
        _273 = _252;
        _274 = _253;
        _275 = _254;
    }
    vec4 _295 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _301 = _295.x * cbMtdParam._m0[10u].x;
    float _302 = _295.y * cbMtdParam._m0[10u].y;
    float _303 = _295.z * cbMtdParam._m0[10u].z;
    vec4 _322 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    vec4 _341 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _369 = cbMtdParam._m0[15u].x * texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x;
    float _380 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * (((1.0 - _341.x) * 2.0) - _369)) + 1.0;
    float _3902 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _381 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _388 = (_381 * ((_322.x * cbMtdParam._m0[11u].x) - _301)) + _301;
    float _389 = (_381 * ((_322.y * cbMtdParam._m0[11u].y) - _302)) + _302;
    float _390 = (_381 * ((_322.z * cbMtdParam._m0[11u].z) - _303)) + _303;
    vec4 _408 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.z) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.w) + cbTextureTilingScale._m0[11u].w));
    float _421 = (((((1.0 - _341.y) * 2.0) - _369) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].z) + 1.0;
    float _3913 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _422 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _429 = (((_408.x * cbMtdParam._m0[12u].x) - _388) * _422) + _388;
    float _430 = (_422 * ((_408.y * cbMtdParam._m0[12u].y) - _389)) + _389;
    float _431 = (_422 * ((_408.z * cbMtdParam._m0[12u].z) - _390)) + _390;
    vec4 _449 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _462 = (((((1.0 - _341.z) * 2.0) - _369) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].w) + 1.0;
    float _3924 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _463 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    vec4 _490 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _498 = ((((((_449.x * cbMtdParam._m0[13u].x) - _429) * _463) + _429) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _490.x;
    float _501 = ((((_463 * ((_449.y * cbMtdParam._m0[13u].y) - _430)) + _430) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _490.y;
    float _504 = ((((_463 * ((_449.z * cbMtdParam._m0[13u].z) - _431)) + _431) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _490.z;
    vec4 _517 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _519 = _517.x;
    float _520 = _517.y;
    float _521 = _517.z;
    vec4 _533 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w));
    float _544 = ((_533.x - _519) * _381) + _519;
    float _545 = ((_533.y - _520) * _381) + _520;
    float _546 = ((_533.z - _521) * _381) + _521;
    vec4 _559 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _570 = ((_559.x - _544) * _422) + _544;
    float _571 = ((_559.y - _545) * _422) + _545;
    float _572 = ((_559.z - _546) * _422) + _546;
    vec4 _585 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _598 = ((_585.z - _572) * _463) + _572;
    float _601 = ((((_585.x - _570) * _463) + _570) * 2.0) + (-1.0);
    float _603 = ((((_585.y - _571) * _463) + _571) * 2.0) + (-1.0);
    float _604 = dot(vec2(_601, _603), vec2(_601, _603));
    float _3935 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _609 = sqrt(1.0 - (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))));
    float _612 = fma(_609, _273, fma(_603, _265 * TANGENT_2.x, (_244 * _238) * _601));
    float _615 = fma(_609, _274, fma(_603, _265 * TANGENT_2.y, (_244 * _239) * _601));
    float _618 = fma(_609, _275, fma(_603, _265 * TANGENT_2.z, (_244 * _240) * _601));
    float _622 = inversesqrt(dot(vec3(_612, _615, _618), vec3(_612, _615, _618)));
    float _623 = _622 * _612;
    float _624 = _622 * _615;
    float _625 = _622 * _618;
    float _628 = fma(_625, _228, fma(_624, _227, _623 * _226));
    float _631 = fma(_625, _261, fma(_624, _260, _623 * _259));
    float _634 = fma(_625, _275, fma(_624, _274, _623 * _273));
    float _638 = inversesqrt(dot(vec3(_628, _631, _634), vec3(_628, _631, _634)));
    float _641 = _638 * _634;
    vec4 _654 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _664 = (((_654.x * 2.0) + (-1.0)) * cbMtdParam._m0[14u].y) + (_638 * _628);
    float _665 = (((_654.y * 2.0) + (-1.0)) * cbMtdParam._m0[14u].y) + (_638 * _631);
    float _668 = fma(_641, _273, fma(_665, _259, _664 * _226));
    float _671 = fma(_641, _274, fma(_665, _260, _664 * _227));
    float _674 = fma(_641, _275, fma(_665, _261, _664 * _228));
    float _678 = inversesqrt(dot(vec3(_668, _671, _674), vec3(_668, _671, _674)));
    float _679 = _678 * _668;
    float _680 = _678 * _671;
    float _681 = _678 * _674;
    float _3946 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _682 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _3957 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _3968 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _3979 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _701 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _751 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _741);
    float _752 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _741);
    float _753 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _741);
    float _757 = inversesqrt(dot(vec3(_751, _752, _753), vec3(_751, _752, _753)));
    float _758 = _751 * _757;
    float _759 = _752 * _757;
    float _760 = _753 * _757;
    vec4 _765 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _767 = _765.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _921 = sqrt(((_751 * _751) + (_752 * _752)) + (_753 * _753));
        float _927 = (cbMatDynParam._m0[5u].x * _921) + cbMatDynParam._m0[5u].y;
        float _3990 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _932 = (cbMatDynParam._m0[5u].z * _921) + cbMatDynParam._m0[5u].w;
        float _4001 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) - _928)) + _928) < ((_767 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _778 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _779 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _797 = fma(_681, cbSceneParam._m0[5u].z, fma(_680, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _679));
    float _800 = fma(_681, cbSceneParam._m0[6u].z, fma(_680, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _679));
    float _803 = fma(_681, cbSceneParam._m0[7u].z, fma(_680, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _679));
    uint _816 = uint(roundEven(NORMAL.w)) * 13u;
    uint _817 = _816 + 9u;
    uint _818 = _817 + uint(cbMatDynParam._m0[0u].w);
    float _824 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0)))) * cbInstanceData._m0[_818].x;
    float _825 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0)))) * cbInstanceData._m0[_818].y;
    float _826 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0)))) * cbInstanceData._m0[_818].z;
    float _4012 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _827 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _4023 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _828 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _4034 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _829 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    vec4 _838 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _778, cbSceneParam._m0[86u].y * _779));
    float _841 = _838.x * TEXCOORD_4;
    float _842 = dot(vec3(_679, _680, _681), vec3(_758, _759, _760));
    float _845 = _842 * 2.0;
    float _849 = (_845 * _679) - _758;
    float _850 = (_845 * _680) - _759;
    float _851 = (_845 * _681) - _760;
    float _855 = abs(dot(vec3(_758, _759, _760), vec3(_679, _680, _681)));
    float _4045 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _857 = sqrt(_682);
    float _870 = exp2((_857 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_857 * 3.0));
    float _902 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _906 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _910 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1241;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _966 = fma(_910, cbModelParam._m0[26u].z, fma(_906, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _902));
        float _970 = fma(_910, cbModelParam._m0[27u].z, fma(_906, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _902));
        float _974 = fma(_910, cbModelParam._m0[28u].z, fma(_906, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _902));
        float _999 = _902 + _679;
        float _1000 = _906 + _680;
        float _1001 = _910 + _681;
        float _1011 = fma(_1001, cbModelParam._m0[26u].z, fma(_1000, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _999)) - _966;
        float _1012 = fma(_1001, cbModelParam._m0[27u].z, fma(_1000, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _999)) - _970;
        float _1013 = fma(_1001, cbModelParam._m0[28u].z, fma(_1000, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _999)) - _974;
        float _1017 = inversesqrt(dot(vec3(_1011, _1012, _1013), vec3(_1011, _1012, _1013)));
        float _1030 = ((_1017 * _1011) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_966 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1031 = ((_1017 * _1012) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_970 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1032 = ((_1017 * _1013) / cbModelParam._m0[34u].z) + ((((((_974 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1030, _1031, _1032), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1030, _1031, _1032), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1030, _1031, _1032), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1030, _1031, _1032), 0.0);
        float _1069 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1035.x + (-0.5));
        float _1071 = _1069 * (_1035.y + (-0.5));
        float _1072 = _1069 * (_1035.z + (-0.5));
        float _1079 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1042.x + (-0.5));
        float _1081 = _1079 * (_1042.y + (-0.5));
        float _1082 = _1079 * (_1042.z + (-0.5));
        float _1089 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1049.x + (-0.5));
        float _1091 = _1089 * (_1049.y + (-0.5));
        float _1092 = _1089 * (_1049.z + (-0.5));
        float _1099 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1056.x + (-0.5));
        float _1101 = _1099 * (_1056.y + (-0.5));
        float _1102 = _1099 * (_1056.z + (-0.5));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = _1070 * 0.5;
        float _1107 = _1080 * 0.5;
        float _1108 = _1090 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1123 = (dot(vec3(_679, _680, _681), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _4071 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1133 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _4082 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _4093 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_1135 + 1.0))) + _1140) * _1103;
        float _1150 = _1071 * 0.5;
        float _1151 = _1081 * 0.5;
        float _1152 = _1091 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1166 = (dot(vec3(_679, _680, _681), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _4104 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1175 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _4115 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _4126 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_1177 + 1.0))) + _1182) * _1104;
        float _1192 = _1072 * 0.5;
        float _1193 = _1082 * 0.5;
        float _1194 = _1092 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1208 = (dot(vec3(_679, _680, _681), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _4137 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1217 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _4148 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _4159 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_1219 + 1.0))) + _1224) * _1105;
        _1241 = _1072;
        _1243 = _1071;
        _1244 = _1070;
        _1245 = _1082;
        _1246 = _1081;
        _1247 = _1080;
        _1248 = _1092;
        _1249 = _1091;
        _1250 = _1090;
        _1251 = _1105;
        _1252 = _1104;
        _1253 = _1103;
        _1254 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
        _1255 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
        _1256 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
    }
    else
    {
        _1241 = _1242;
        _1243 = _1242;
        _1244 = _1242;
        _1245 = _1242;
        _1246 = _1242;
        _1247 = _1242;
        _1248 = _1242;
        _1249 = _1242;
        _1250 = _1242;
        _1251 = _1242;
        _1252 = _1242;
        _1253 = _1242;
        _1254 = 0.0;
        _1255 = 0.0;
        _1256 = 0.0;
    }
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1285 = fma(_910, cbModelParam._m0[30u].z, fma(_906, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _902));
        float _1289 = fma(_910, cbModelParam._m0[31u].z, fma(_906, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _902));
        float _1293 = fma(_910, cbModelParam._m0[32u].z, fma(_906, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _902));
        float _1316 = _902 + _679;
        float _1317 = _906 + _680;
        float _1318 = _910 + _681;
        float _1328 = fma(_1318, cbModelParam._m0[30u].z, fma(_1317, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1316)) - _1285;
        float _1329 = fma(_1318, cbModelParam._m0[31u].z, fma(_1317, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1316)) - _1289;
        float _1330 = fma(_1318, cbModelParam._m0[32u].z, fma(_1317, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1316)) - _1293;
        float _1334 = inversesqrt(dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330)));
        float _1347 = ((_1334 * _1328) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1285 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1348 = ((_1334 * _1329) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1289 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1349 = ((_1334 * _1330) / cbModelParam._m0[35u].z) + ((((((_1293 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1351 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1347, _1348, _1349), 0.0);
        vec4 _1358 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1347, _1348, _1349), 0.0);
        vec4 _1365 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1347, _1348, _1349), 0.0);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1347, _1348, _1349), 0.0);
        float _1384 = exp2((_1351.w + (-0.5)) * 20.0) * 2.0;
        float _1385 = _1384 * (_1351.x + (-0.5));
        float _1386 = _1384 * (_1351.y + (-0.5));
        float _1387 = _1384 * (_1351.z + (-0.5));
        float _1394 = exp2((_1358.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1358.x + (-0.5));
        float _1396 = _1394 * (_1358.y + (-0.5));
        float _1397 = _1394 * (_1358.z + (-0.5));
        float _1404 = exp2((_1365.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1365.x + (-0.5));
        float _1406 = _1404 * (_1365.y + (-0.5));
        float _1407 = _1404 * (_1365.z + (-0.5));
        float _1414 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1372.x + (-0.5));
        float _1416 = _1414 * (_1372.y + (-0.5));
        float _1417 = _1414 * (_1372.z + (-0.5));
        float _1418 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1419 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1420 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1421 = _1385 * 0.5;
        float _1422 = _1395 * 0.5;
        float _1423 = _1405 * 0.5;
        float _1424 = dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423));
        float _1429 = (_1424 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1424);
        float _1437 = (dot(vec3(_679, _680, _681), vec3(_1429 * _1421, _1429 * _1422, _1429 * _1423)) + 1.0) * 0.5;
        float _4200 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1446 = sqrt(((_1422 * _1422) + (_1421 * _1421)) + (_1423 * _1423)) / (_1418 + 9.9999997473787516355514526367188e-06);
        float _4211 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1448 = _1447 * 2.0;
        float _1452 = (1.0 - _1447) / (_1447 + 1.0);
        float _4222 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1462 = ((((1.0 - _1453) * (_1448 + 2.0)) * exp2(log2(isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_1448 + 1.0))) + _1453) * _1418;
        float _1463 = _1386 * 0.5;
        float _1464 = _1396 * 0.5;
        float _1465 = _1406 * 0.5;
        float _1466 = dot(vec3(_1463, _1464, _1465), vec3(_1463, _1464, _1465));
        float _1471 = (_1466 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1466);
        float _1479 = (dot(vec3(_679, _680, _681), vec3(_1471 * _1463, _1471 * _1464, _1471 * _1465)) + 1.0) * 0.5;
        float _4233 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1488 = sqrt(((_1464 * _1464) + (_1463 * _1463)) + (_1465 * _1465)) / (_1419 + 9.9999997473787516355514526367188e-06);
        float _4244 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1490 = _1489 * 2.0;
        float _1494 = (1.0 - _1489) / (_1489 + 1.0);
        float _4255 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1504 = ((((1.0 - _1495) * (_1490 + 2.0)) * exp2(log2(isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_1490 + 1.0))) + _1495) * _1419;
        float _1505 = _1387 * 0.5;
        float _1506 = _1397 * 0.5;
        float _1507 = _1407 * 0.5;
        float _1508 = dot(vec3(_1505, _1506, _1507), vec3(_1505, _1506, _1507));
        float _1513 = (_1508 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1508);
        float _1521 = (dot(vec3(_679, _680, _681), vec3(_1513 * _1505, _1513 * _1506, _1513 * _1507)) + 1.0) * 0.5;
        float _4266 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1530 = sqrt(((_1506 * _1506) + (_1505 * _1505)) + (_1507 * _1507)) / (_1420 + 9.9999997473787516355514526367188e-06);
        float _4277 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1532 = _1531 * 2.0;
        float _1536 = (1.0 - _1531) / (_1531 + 1.0);
        float _4288 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1546 = ((((1.0 - _1537) * (_1532 + 2.0)) * exp2(log2(isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_1532 + 1.0))) + _1537) * _1420;
        _1554 = _1387;
        _1555 = _1386;
        _1556 = _1385;
        _1557 = _1397;
        _1558 = _1396;
        _1559 = _1395;
        _1560 = _1407;
        _1561 = _1406;
        _1562 = _1405;
        _1563 = _1420;
        _1564 = _1419;
        _1565 = _1418;
        _1566 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)));
        _1567 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)));
        _1568 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)));
    }
    else
    {
        _1554 = _1242;
        _1555 = _1242;
        _1556 = _1242;
        _1557 = _1242;
        _1558 = _1242;
        _1559 = _1242;
        _1560 = _1242;
        _1561 = _1242;
        _1562 = _1242;
        _1563 = _1242;
        _1564 = _1242;
        _1565 = _1242;
        _1566 = 0.0;
        _1567 = 0.0;
        _1568 = 0.0;
    }
    float _1578 = (cbModelParam._m0[1u].x * (_1566 - _1254)) + _1254;
    float _1579 = (cbModelParam._m0[1u].x * (_1567 - _1255)) + _1255;
    float _1580 = (cbModelParam._m0[1u].x * (_1568 - _1256)) + _1256;
    float _1601 = fma(_1580, cbSceneParam._m0[89u].z, fma(_1579, cbSceneParam._m0[89u].y, _1578 * cbSceneParam._m0[89u].x));
    float _1604 = fma(_1580, cbSceneParam._m0[90u].z, fma(_1579, cbSceneParam._m0[90u].y, _1578 * cbSceneParam._m0[90u].x));
    float _1607 = fma(_1580, cbSceneParam._m0[91u].z, fma(_1579, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1578));
    float _1622 = _849 * 0.5;
    float _1623 = _850 * 0.5;
    float _1624 = _851 * 0.5;
    float _1625 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1556, _1559, _1562, _1565));
    float _1628 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1555, _1558, _1561, _1564));
    float _1631 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1554, _1557, _1560, _1563));
    float _1665;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1638 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1241, _1245, _1248, _1251));
        float _1642 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1243, _1246, _1249, _1252));
        float _1646 = dot(vec4(_1622, _1623, _1624, 1.0), vec4(_1244, _1247, _1250, _1253));
        float _1653 = dot(vec4(cbModelParam._m0[39u]), vec4(_1622, _1623, _1624, 1.0));
        _1665 = dot(vec3(isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)), isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)), isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1653) ? 0.0 : (isnan(0.0) ? _1653 : max(0.0, _1653))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1665 = 1.0;
    }
    float _1676;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1667 = dot(vec4(cbModelParam._m0[40u]), vec4(_1622, _1623, _1624, 1.0));
        _1676 = dot(vec3(isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)), isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)), isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1667) ? 0.0 : (isnan(0.0) ? _1667 : max(0.0, _1667))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1676 = 1.0;
    }
    float _1680 = (_1676 * cbModelParam._m0[1u].x) + (_1665 * (1.0 - cbModelParam._m0[1u].x));
    float _1690 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _682);
    float _1691 = isnan(_1690) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1690 : min(cbModelParam._m0[25u].z, _1690));
    float _1771;
    float _1773;
    float _1775;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1738 = fma(_910, cbModelParam._m0[13u].z, fma(_906, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _902)) + cbModelParam._m0[13u].w;
        float _1742 = fma(_910, cbModelParam._m0[14u].z, fma(_906, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _902)) + cbModelParam._m0[14u].w;
        float _1746 = fma(_910, cbModelParam._m0[15u].z, fma(_906, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _902)) + cbModelParam._m0[15u].w;
        float _1749 = fma(_851, cbModelParam._m0[13u].z, fma(_850, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _849));
        float _1752 = fma(_851, cbModelParam._m0[14u].z, fma(_850, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _849));
        float _1755 = fma(_851, cbModelParam._m0[15u].z, fma(_850, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _849));
        float _1783;
        if (_1749 > 0.0)
        {
            _1783 = abs((1.0 - _1738) / _1749);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1738 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1783 = frontier_phi_19_17_ladder;
        }
        float _1956;
        if (_1752 > 0.0)
        {
            _1956 = abs((1.0 - _1742) / _1752);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1742 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1956 = frontier_phi_28_24_ladder;
        }
        float _2251;
        if (_1755 > 0.0)
        {
            _2251 = abs((1.0 - _1746) / _1755);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1755 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1746 + 1.0) / _1755);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2251 = frontier_phi_40_35_ladder;
        }
        float _2253 = isnan(_1956) ? _1783 : (isnan(_1783) ? _1956 : min(_1783, _1956));
        float _2254 = isnan(_2251) ? _2253 : (isnan(_2253) ? _2251 : min(_2253, _2251));
        float _2258 = (_2254 * _1749) + _1738;
        float _2259 = (_2254 * _1752) + _1742;
        float _2260 = (_2254 * _1755) + _1746;
        float _2261 = _2254 * 9.9999997473787516355514526367188e-05;
        float _2263 = (-1.0) - _2261;
        float _2265 = _2261 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2260 > _2265) || ((_2260 < _2263) || ((_2259 > _2265) || ((_2259 < _2263) || ((_2258 < _2263) || (_2258 > _2265))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2405 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2260, cbModelParam._m0[9u].z, fma(_2259, cbModelParam._m0[9u].y, _2258 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2260, cbModelParam._m0[10u].z, fma(_2259, cbModelParam._m0[10u].y, _2258 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2260, cbModelParam._m0[11u].z, fma(_2259, cbModelParam._m0[11u].y, _2258 * cbModelParam._m0[11u].x))), _1691);
            frontier_phi_18_40_ladder = _2405.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2405.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2405.x * cbModelParam._m0[1u].y;
        }
        _1771 = frontier_phi_18_40_ladder_2;
        _1773 = frontier_phi_18_40_ladder_1;
        _1775 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1759 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_849, _850, _851), _1691);
        _1771 = _1759.x * cbModelParam._m0[1u].y;
        _1773 = _1759.y * cbModelParam._m0[1u].y;
        _1775 = _1759.z * cbModelParam._m0[1u].y;
    }
    float _1779 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _682);
    float _1780 = isnan(_1779) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1779 : min(cbModelParam._m0[25u].w, _1779));
    float _1873;
    float _1875;
    float _1877;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1837 = fma(_910, cbModelParam._m0[21u].z, fma(_906, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _902)) + cbModelParam._m0[21u].w;
        float _1841 = fma(_910, cbModelParam._m0[22u].z, fma(_906, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _902)) + cbModelParam._m0[22u].w;
        float _1845 = fma(_910, cbModelParam._m0[23u].z, fma(_906, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _902)) + cbModelParam._m0[23u].w;
        float _1848 = fma(_851, cbModelParam._m0[21u].z, fma(_850, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _849));
        float _1851 = fma(_851, cbModelParam._m0[22u].z, fma(_850, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _849));
        float _1854 = fma(_851, cbModelParam._m0[23u].z, fma(_850, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _849));
        float _1961;
        if (_1848 > 0.0)
        {
            _1961 = abs((1.0 - _1837) / _1848);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1837 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1961 = frontier_phi_30_26_ladder;
        }
        float _2278;
        if (_1851 > 0.0)
        {
            _2278 = abs((1.0 - _1841) / _1851);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1841 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2278 = frontier_phi_42_37_ladder;
        }
        float _2605;
        if (_1854 > 0.0)
        {
            _2605 = abs((1.0 - _1845) / _1854);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1845 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2605 = frontier_phi_52_49_ladder;
        }
        float _2607 = isnan(_2278) ? _1961 : (isnan(_1961) ? _2278 : min(_1961, _2278));
        float _2608 = isnan(_2605) ? _2607 : (isnan(_2607) ? _2605 : min(_2607, _2605));
        float _2612 = (_2608 * _1848) + _1837;
        float _2613 = (_2608 * _1851) + _1841;
        float _2614 = (_2608 * _1854) + _1845;
        float _2615 = _2608 * 9.9999997473787516355514526367188e-05;
        float _2616 = (-1.0) - _2615;
        float _2618 = _2615 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2614 > _2618) || ((_2614 < _2616) || ((_2613 > _2618) || ((_2613 < _2616) || ((_2612 < _2616) || (_2612 > _2618))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2732 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2614, cbModelParam._m0[17u].z, fma(_2613, cbModelParam._m0[17u].y, _2612 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2614, cbModelParam._m0[18u].z, fma(_2613, cbModelParam._m0[18u].y, _2612 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2614, cbModelParam._m0[19u].z, fma(_2613, cbModelParam._m0[19u].y, _2612 * cbModelParam._m0[19u].x))), _1780);
            frontier_phi_27_52_ladder = _2732.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2732.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2732.x * cbModelParam._m0[1u].z;
        }
        _1873 = frontier_phi_27_52_ladder_2;
        _1875 = frontier_phi_27_52_ladder_1;
        _1877 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1857 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_849, _850, _851), _1780);
        _1873 = _1857.x * cbModelParam._m0[1u].z;
        _1875 = _1857.y * cbModelParam._m0[1u].z;
        _1877 = _1857.z * cbModelParam._m0[1u].z;
    }
    float _1889 = ((((1.0 - _870) * ((_857 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_870 * _857)) * _841;
    float _1890 = _1889 * ((cbModelParam._m0[1u].w * (_1873 - _1771)) + _1771);
    float _1891 = _1889 * ((cbModelParam._m0[1u].w * (_1875 - _1773)) + _1773);
    float _1892 = _1889 * ((cbModelParam._m0[1u].w * (_1877 - _1775)) + _1775);
    float _1895 = fma(_1892, cbSceneParam._m0[89u].z, fma(_1891, cbSceneParam._m0[89u].y, _1890 * cbSceneParam._m0[89u].x));
    float _1898 = fma(_1892, cbSceneParam._m0[90u].z, fma(_1891, cbSceneParam._m0[90u].y, _1890 * cbSceneParam._m0[90u].x));
    float _1901 = fma(_1892, cbSceneParam._m0[91u].z, fma(_1891, cbSceneParam._m0[91u].y, _1890 * cbSceneParam._m0[91u].x));
    float _1935 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1939 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1943 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1947 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1948 = _1935 / _1947;
    float _1949 = _1939 / _1947;
    float _1950 = _1943 / _1947;
    float _2097;
    float _2098;
    float _2099;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1977 = ((uint(_1950 > cbSceneParam._m0[59u].y) + uint(_1950 > cbSceneParam._m0[59u].x)) + uint(_1950 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1978 = _1977 + 43u;
        uint _1986 = _1977 + 44u;
        uint _1994 = _1977 + 45u;
        uint _2002 = _1977 + 46u;
        float _2013 = fma(_1947, cbSceneParam._m0[_1978].w, fma(_1943, cbSceneParam._m0[_1978].z, fma(_1939, cbSceneParam._m0[_1978].y, _1935 * cbSceneParam._m0[_1978].x)));
        float _2017 = fma(_1947, cbSceneParam._m0[_1986].w, fma(_1943, cbSceneParam._m0[_1986].z, fma(_1939, cbSceneParam._m0[_1986].y, _1935 * cbSceneParam._m0[_1986].x)));
        float _2025 = fma(_1947, cbSceneParam._m0[_2002].w, fma(_1943, cbSceneParam._m0[_2002].z, fma(_1939, cbSceneParam._m0[_2002].y, _1935 * cbSceneParam._m0[_2002].x)));
        float _2030 = cbSceneParam._m0[33u].z * _2025;
        float _2032 = cbSceneParam._m0[33u].w * _2025;
        float _2035 = fma(_1947, cbSceneParam._m0[_1994].w, fma(_1943, cbSceneParam._m0[_1994].z, fma(_1939, cbSceneParam._m0[_1994].y, _1935 * cbSceneParam._m0[_1994].x))) / _2025;
        float _2083 = (cbSceneParam._m0[33u].x - sqrt(((_1949 * _1949) + (_1948 * _1948)) + (_1950 * _1950))) * cbSceneParam._m0[33u].y;
        float _4414 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2090 = (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2030 + _2013) / _2025, (_2032 + _2017) / _2025), _2035), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2032 + _2013) / _2025, (_2017 - _2030) / _2025), _2035), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2013 - _2030) / _2025, (_2017 - _2032) / _2025), _2035), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2013 - _2032) / _2025, (_2030 + _2017) / _2025), _2035), 0.0)).x), vec4(0.25)));
        _2097 = 1.0 - (_2090 * cbSceneParam._m0[34u].x);
        _2098 = 1.0 - (_2090 * cbSceneParam._m0[34u].y);
        _2099 = 1.0 - (_2090 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2097 = 1.0;
        _2098 = 1.0;
        _2099 = 1.0;
    }
    float _2163;
    float _2165;
    float _2167;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2151 = fma(_1947, cbSceneParam._m0[63u].w, fma(_1943, cbSceneParam._m0[63u].z, fma(_1939, cbSceneParam._m0[63u].y, _1935 * cbSceneParam._m0[63u].x)));
        float _2152 = fma(_1947, cbSceneParam._m0[60u].w, fma(_1943, cbSceneParam._m0[60u].z, fma(_1939, cbSceneParam._m0[60u].y, _1935 * cbSceneParam._m0[60u].x))) / _2151;
        float _2153 = fma(_1947, cbSceneParam._m0[61u].w, fma(_1943, cbSceneParam._m0[61u].z, fma(_1939, cbSceneParam._m0[61u].y, _1935 * cbSceneParam._m0[61u].x))) / _2151;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2152 >= cbSceneParam._m0[64u].x) && (_2153 >= cbSceneParam._m0[64u].y)) && (_2152 <= cbSceneParam._m0[64u].z)) && (_2153 <= cbSceneParam._m0[64u].w))
        {
            float _2291 = fma(_1947, cbSceneParam._m0[62u].w, fma(_1943, cbSceneParam._m0[62u].z, fma(_1939, cbSceneParam._m0[62u].y, _1935 * cbSceneParam._m0[62u].x))) / _2151;
            float _2295 = isnan(cbSceneParam._m0[41u].w) ? _2291 : (isnan(_2291) ? cbSceneParam._m0[41u].w : max(_2291, cbSceneParam._m0[41u].w));
            float _2338 = (cbSceneParam._m0[33u].x - sqrt(((_1949 * _1949) + (_1948 * _1948)) + (_1950 * _1950))) * cbSceneParam._m0[33u].y;
            float _4430 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
            float _2345 = (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2152, cbSceneParam._m0[33u].w + _2153), _2295), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2152, _2153 - cbSceneParam._m0[33u].z), _2295), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2152 - cbSceneParam._m0[33u].z, _2153 - cbSceneParam._m0[33u].w), _2295), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2152 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2153), _2295), 0.0)).x), vec4(0.25)));
            float _2349 = 1.0 - (_2345 * cbSceneParam._m0[34u].x);
            float _2350 = 1.0 - (_2345 * cbSceneParam._m0[34u].y);
            float _2351 = 1.0 - (_2345 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2350) ? _2098 : (isnan(_2098) ? _2350 : min(_2098, _2350));
            frontier_phi_39_38_ladder_1 = isnan(_2349) ? _2097 : (isnan(_2097) ? _2349 : min(_2097, _2349));
            frontier_phi_39_38_ladder_2 = isnan(_2351) ? _2099 : (isnan(_2099) ? _2351 : min(_2099, _2351));
        }
        else
        {
            frontier_phi_39_38_ladder = _2098;
            frontier_phi_39_38_ladder_1 = _2097;
            frontier_phi_39_38_ladder_2 = _2099;
        }
        _2163 = frontier_phi_39_38_ladder_1;
        _2165 = frontier_phi_39_38_ladder;
        _2167 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2163 = _2097;
        _2165 = _2098;
        _2167 = _2099;
    }
    uvec4 _2172 = floatBitsToUint(cbInstanceData._m0[_816 + 5u]);
    uint _2174 = _2172.x * 14u;
    uint _2175 = _2174 + 13u;
    float _2182 = _841 + (-1.0);
    float _2187 = (cbLight._m0[_2175].x * _2182) + 1.0;
    float _2188 = (cbLight._m0[_2175].y * _2182) + 1.0;
    float _2189 = (cbLight._m0[_2175].z * _2182) + 1.0;
    float _2190 = (cbLight._m0[_2175].w * _2182) + 1.0;
    uint _2191 = _2174 + 5u;
    float _2197 = isnan(1.0) ? _2188 : (isnan(_2188) ? 1.0 : min(_2188, 1.0));
    uint _2201 = _2174 + 4u;
    float _2210 = isnan(1.0) ? _2187 : (isnan(_2187) ? 1.0 : min(_2187, 1.0));
    uint _2214 = _2174 | 1u;
    float _2225 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_679, _680, _681));
    float _2228 = dot(vec3(cbLight._m0[_2214].xyz), vec3(_679, _680, _681));
    float _4466 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _4477 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2233 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * 0.3183098733425140380859375;
    float _2235 = (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * 0.3183098733425140380859375;
    float _2242 = ((cbLight._m0[_2191].x * _2197) * _2235) + (((cbLight._m0[_2201].x * _2163) * _2210) * _2233);
    float _2243 = ((_2197 * cbLight._m0[_2191].y) * _2235) + (((cbLight._m0[_2201].y * _2165) * _2210) * _2233);
    float _2244 = ((_2197 * cbLight._m0[_2191].z) * _2235) + (((cbLight._m0[_2201].z * _2167) * _2210) * _2233);
    uvec4 _2248 = floatBitsToUint(cbLight._m0[_2174 + 12u]);
    bool _2250 = _2248.x == 0u;
    float _2352;
    float _2354;
    float _2356;
    if (_2250)
    {
        _2352 = _2242;
        _2354 = _2243;
        _2356 = _2244;
    }
    else
    {
        uint _2360 = _2174 + 6u;
        float _2376 = (dot(vec3(cbLight._m0[_2174 + 2u].xyz), vec3(_679, _680, _681)) * 0.5) + 0.5;
        float _2377 = _2376 * _2376;
        float _4488 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2378 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _2379 = isnan(1.0) ? _2189 : (isnan(_2189) ? 1.0 : min(_2189, 1.0));
        _2352 = (((cbLight._m0[_2360].x * 0.3183098733425140380859375) * _2378) * _2379) + _2242;
        _2354 = (((cbLight._m0[_2360].y * 0.3183098733425140380859375) * _2378) * _2379) + _2243;
        _2356 = (((cbLight._m0[_2360].z * 0.3183098733425140380859375) * _2378) * _2379) + _2244;
    }
    bool _2359 = _2248.y == 0u;
    float _2414;
    float _2416;
    float _2418;
    if (_2359)
    {
        _2414 = _2352;
        _2416 = _2354;
        _2418 = _2356;
    }
    else
    {
        uint _2576 = _2174 + 7u;
        float _2592 = (dot(vec3(cbLight._m0[_2174 + 3u].xyz), vec3(_679, _680, _681)) * 0.5) + 0.5;
        float _2593 = _2592 * _2592;
        float _4504 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2594 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _2595 = isnan(1.0) ? _2190 : (isnan(_2190) ? 1.0 : min(_2190, 1.0));
        _2414 = (((cbLight._m0[_2576].x * 0.3183098733425140380859375) * _2594) * _2595) + _2352;
        _2416 = (((cbLight._m0[_2576].y * 0.3183098733425140380859375) * _2594) * _2595) + _2354;
        _2418 = (((cbLight._m0[_2576].z * 0.3183098733425140380859375) * _2594) * _2595) + _2356;
    }
    uint _2421 = _2174 + 8u;
    float _2434 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2174].w)) * _682) * 0.949999988079071044921875);
    float _2435 = _2434 * _2434;
    float _2436 = cbLight._m0[_2174].x + _758;
    float _2437 = cbLight._m0[_2174].y + _759;
    float _2438 = cbLight._m0[_2174].z + _760;
    float _2442 = inversesqrt(dot(vec3(_2436, _2437, _2438), vec3(_2436, _2437, _2438)));
    float _2443 = _2442 * _2436;
    float _2444 = _2442 * _2437;
    float _2445 = _2442 * _2438;
    float _2446 = dot(vec3(_679, _680, _681), vec3(cbLight._m0[_2174].xyz));
    float _4520 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2449 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
    float _4531 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _2450 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
    float _2451 = dot(vec3(_679, _680, _681), vec3(_2443, _2444, _2445));
    float _4542 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
    float _2454 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
    float _2455 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_2443, _2444, _2445));
    float _4553 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2459 = _2435 * _2435;
    float _2463 = ((_2454 * _2454) * (_2459 + (-1.0))) + 1.0;
    float _2474 = (exp2(log2(1.0 - (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2475 = 1.0 - _2435;
    float _2486 = (0.5 / (((_2450 * ((_2449 * _2475) + _2435)) + 9.9999999392252902907785028219223e-09) + (((_2450 * _2475) + _2435) * _2449))) * _2449;
    float _4564 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2488 = (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2459 / ((_2463 * _2463) * 3.141590118408203125));
    uint _2502 = _2174 + 9u;
    float _2513 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2214].w)) * _682) * 0.949999988079071044921875);
    float _2514 = _2513 * _2513;
    float _2515 = cbLight._m0[_2214].x + _758;
    float _2516 = cbLight._m0[_2214].y + _759;
    float _2517 = cbLight._m0[_2214].z + _760;
    float _2521 = inversesqrt(dot(vec3(_2515, _2516, _2517), vec3(_2515, _2516, _2517)));
    float _2522 = _2521 * _2515;
    float _2523 = _2521 * _2516;
    float _2524 = _2521 * _2517;
    float _2525 = dot(vec3(_679, _680, _681), vec3(cbLight._m0[_2214].xyz));
    float _4575 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2528 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
    float _2529 = dot(vec3(_679, _680, _681), vec3(_2522, _2523, _2524));
    float _4586 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2532 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
    float _2533 = dot(vec3(cbLight._m0[_2214].xyz), vec3(_2522, _2523, _2524));
    float _4597 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
    float _2537 = _2514 * _2514;
    float _2541 = ((_2532 * _2532) * (_2537 + (-1.0))) + 1.0;
    float _2550 = (exp2(log2(1.0 - (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2551 = 1.0 - _2514;
    float _2561 = (0.5 / (((_2450 * ((_2528 * _2551) + _2514)) + 9.9999999392252902907785028219223e-09) + (((_2450 * _2551) + _2514) * _2528))) * _2528;
    float _4608 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _2563 = (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * (_2537 / ((_2541 * _2541) * 3.141590118408203125));
    float _2573 = (((_2550 * cbLight._m0[_2502].x) * _2563) * _2197) + ((((cbLight._m0[_2421].x * _2163) * _2474) * _2488) * _2210);
    float _2574 = (((_2550 * cbLight._m0[_2502].y) * _2563) * _2197) + ((((cbLight._m0[_2421].y * _2165) * _2474) * _2488) * _2210);
    float _2575 = (((_2550 * cbLight._m0[_2502].z) * _2563) * _2197) + ((((cbLight._m0[_2421].z * _2167) * _2474) * _2488) * _2210);
    float _2631;
    float _2633;
    float _2635;
    if (_2250)
    {
        _2631 = _2573;
        _2633 = _2574;
        _2635 = _2575;
    }
    else
    {
        uint _2637 = _2174 + 2u;
        uint _2641 = _2174 + 10u;
        float _2655 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2637].w)) * _682) * 0.949999988079071044921875);
        float _2656 = _2655 * _2655;
        float _2657 = cbLight._m0[_2637].x + _758;
        float _2658 = cbLight._m0[_2637].y + _759;
        float _2659 = cbLight._m0[_2637].z + _760;
        float _2663 = inversesqrt(dot(vec3(_2657, _2658, _2659), vec3(_2657, _2658, _2659)));
        float _2664 = _2663 * _2657;
        float _2665 = _2663 * _2658;
        float _2666 = _2663 * _2659;
        float _2667 = dot(vec3(_679, _680, _681), vec3(cbLight._m0[_2637].xyz));
        float _4619 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2670 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
        float _2671 = dot(vec3(_679, _680, _681), vec3(_2664, _2665, _2666));
        float _4630 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2674 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
        float _2675 = dot(vec3(cbLight._m0[_2637].xyz), vec3(_2664, _2665, _2666));
        float _4641 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2679 = _2656 * _2656;
        float _2683 = ((_2674 * _2674) * (_2679 + (-1.0))) + 1.0;
        float _2692 = (exp2(log2(1.0 - (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2693 = 1.0 - _2656;
        float _2703 = (0.5 / (((_2450 * ((_2670 * _2693) + _2656)) + 9.9999999392252902907785028219223e-09) + (((_2450 * _2693) + _2656) * _2670))) * _2670;
        float _4652 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2705 = (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (_2679 / ((_2683 * _2683) * 3.141590118408203125));
        float _2706 = isnan(1.0) ? _2189 : (isnan(_2189) ? 1.0 : min(_2189, 1.0));
        _2631 = (((_2692 * cbLight._m0[_2641].x) * _2705) * _2706) + _2573;
        _2633 = (((_2692 * cbLight._m0[_2641].y) * _2705) * _2706) + _2574;
        _2635 = (((_2692 * cbLight._m0[_2641].z) * _2705) * _2706) + _2575;
    }
    float _2737;
    float _2739;
    float _2741;
    if (_2359)
    {
        _2737 = _2631;
        _2739 = _2633;
        _2741 = _2635;
    }
    else
    {
        uint _2748 = _2174 + 3u;
        uint _2752 = _2174 + 11u;
        float _2766 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2748].w)) * _682) * 0.949999988079071044921875);
        float _2767 = _2766 * _2766;
        float _2768 = cbLight._m0[_2748].x + _758;
        float _2769 = cbLight._m0[_2748].y + _759;
        float _2770 = cbLight._m0[_2748].z + _760;
        float _2774 = inversesqrt(dot(vec3(_2768, _2769, _2770), vec3(_2768, _2769, _2770)));
        float _2775 = _2774 * _2768;
        float _2776 = _2774 * _2769;
        float _2777 = _2774 * _2770;
        float _2778 = dot(vec3(_679, _680, _681), vec3(cbLight._m0[_2748].xyz));
        float _4668 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
        float _2781 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
        float _2782 = dot(vec3(_679, _680, _681), vec3(_2775, _2776, _2777));
        float _4679 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        float _2785 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
        float _2786 = dot(vec3(cbLight._m0[_2748].xyz), vec3(_2775, _2776, _2777));
        float _4690 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2790 = _2767 * _2767;
        float _2794 = ((_2785 * _2785) * (_2790 + (-1.0))) + 1.0;
        float _2803 = (exp2(log2(1.0 - (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2804 = 1.0 - _2767;
        float _2814 = (0.5 / (((_2450 * ((_2781 * _2804) + _2767)) + 9.9999999392252902907785028219223e-09) + (((_2450 * _2804) + _2767) * _2781))) * _2781;
        float _4701 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2816 = (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_2790 / ((_2794 * _2794) * 3.141590118408203125));
        float _2817 = isnan(1.0) ? _2190 : (isnan(_2190) ? 1.0 : min(_2190, 1.0));
        _2737 = (((_2803 * cbLight._m0[_2752].x) * _2816) * _2817) + _2631;
        _2739 = (((_2803 * cbLight._m0[_2752].y) * _2816) * _2817) + _2633;
        _2741 = (((_2803 * cbLight._m0[_2752].z) * _2816) * _2817) + _2635;
    }
    float _2882;
    float _2884;
    float _2886;
    float _2888;
    float _2890;
    float _2892;
    if (_2172.y == 0u)
    {
        uvec4 _2838 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2839 = _2838.x;
        uint _2850 = uint((float(_2838.y) * floor(float(uint(cbSceneParam._m0[85u].y * _779) / _2839))) + floor(float(uint(cbSceneParam._m0[85u].x * _778) / _2839)));
        float _2860 = (log2(_1950 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2861 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
        uint _2864 = uint(isnan(14.0) ? _2861 : (isnan(_2861) ? 14.0 : min(_2861, 14.0)));
        uvec4 _2869 = texelFetch(g_lightClusterGridBuffer, int(((_2864 << 2u) + (_2850 << 6u)) >> 2u));
        uint _2870 = _2869.x;
        uint _2871 = _2838.z;
        float _2949;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        float _2959;
        if (((((1u << ((_2871 >> 4u) & 15u)) + 4294967295u) & _2870) == 0u) || ((_2871 & 240u) == 0u))
        {
            _2949 = 0.0;
            _2951 = 0.0;
            _2953 = 0.0;
            _2955 = 0.0;
            _2957 = 0.0;
            _2959 = 0.0;
        }
        else
        {
            float _2950;
            float _2952;
            float _2954;
            float _2956;
            float _2958;
            float _2960;
            float _3101 = 0.0;
            float _3102 = 0.0;
            float _3103 = 0.0;
            float _3104 = 0.0;
            float _3105 = 0.0;
            float _3106 = 0.0;
            uint _3107 = 0u;
            uint _3116;
            bool _3117;
            for (;;)
            {
                _3116 = texelFetch(g_lightClassification, int((((_2864 << 5u) + (_2850 << 9u)) + (_3107 << 2u)) >> 2u)).x;
                _3117 = _3116 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3117)
                {
                    frontier_phi_73_pred = _3106;
                    frontier_phi_73_pred_1 = _3105;
                    frontier_phi_73_pred_2 = _3104;
                    frontier_phi_73_pred_3 = _3103;
                    frontier_phi_73_pred_4 = _3102;
                    frontier_phi_73_pred_5 = _3101;
                }
                else
                {
                    float _3246;
                    float _3247;
                    float _3248;
                    float _3249;
                    float _3250;
                    float _3251;
                    uint _3252;
                    _3246 = _3101;
                    _3247 = _3102;
                    _3248 = _3103;
                    _3249 = _3104;
                    _3250 = _3105;
                    _3251 = _3106;
                    _3252 = _3116;
                    float _3173;
                    float _3174;
                    float _3175;
                    float _3176;
                    float _3177;
                    float _3178;
                    for (;;)
                    {
                        uint _3256 = uint(findLSB(_3252)) + (_3107 << 5u);
                        uint _3253 = (_3252 + 4294967295u) & _3252;
                        uint _3258 = _3256 * 48u;
                        vec4 _3272 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3258)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 3u)).x));
                        uint _3278 = (_3256 * 48u) + 4u;
                        vec4 _3291 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3278)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3278 + 3u)).x));
                        uint _3297 = (_3256 * 48u) + 8u;
                        vec3 _3308 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3297)).x, texelFetch(g_PointLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3297 + 2u)).x));
                        float _3312 = _3272.x - _1948;
                        float _3313 = _3272.y - _1949;
                        float _3314 = _3272.z - _1950;
                        float _3315 = dot(vec3(_3312, _3313, _3314), vec3(_3312, _3313, _3314));
                        float _3318 = inversesqrt(_3315);
                        float _3319 = _3318 * _3312;
                        float _3320 = _3318 * _3313;
                        float _3321 = _3318 * _3314;
                        float _3322 = dot(vec3(_797, _800, _803), vec3(_3319, _3320, _3321));
                        float _3327 = 1.0 - (_3315 * _3272.w);
                        float _4727 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                        float _3328 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                        float _3329 = sqrt(_3315) * _3291.w;
                        float _3332 = 1.39999997615814208984375 / (_3329 + 1.39999997615814208984375);
                        float _3333 = _3332 * _3332;
                        float _3336 = ((1.0 - _3333) * _3322) + _3333;
                        float _3339 = _3329 * _3329;
                        float _3343 = ((isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0))) * _3328) / ((_3339 * 0.699999988079071044921875) + 1.0);
                        float _3347 = (-0.0) - _1948;
                        float _3348 = (-0.0) - _1949;
                        float _3349 = (-0.0) - _1950;
                        float _3353 = inversesqrt(dot(vec3(_3347, _3348, _3349), vec3(_3347, _3348, _3349)));
                        float _3354 = _3353 * _3347;
                        float _3355 = _3353 * _3348;
                        float _3356 = _3353 * _3349;
                        float _3363 = exp2(log2(1.0 / ((_3339 * 3.5) + 5.0)) * 0.25);
                        float _3364 = 1.0 - _857;
                        float _3371 = sqrt(1.0 - ((1.0 - (_3364 * _3364)) * (1.0 - (_3363 * _3363))));
                        float _3372 = _3371 * _3371;
                        float _3373 = _3372 * _3372;
                        float _3374 = _3354 + _3319;
                        float _3375 = _3355 + _3320;
                        float _3376 = _3356 + _3321;
                        float _3380 = inversesqrt(dot(vec3(_3374, _3375, _3376), vec3(_3374, _3375, _3376)));
                        float _3384 = dot(vec3(_797, _800, _803), vec3(_3354, _3355, _3356));
                        float _4743 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                        float _3387 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
                        float _3388 = dot(vec3(_797, _800, _803), vec3(_3380 * _3374, _3380 * _3375, _3380 * _3376));
                        float _4754 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                        float _3391 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                        float _3395 = ((_3391 * _3391) * (_3373 + (-1.0))) + 1.0;
                        float _3396 = _3332 * _3372;
                        float _3397 = _3396 * _3396;
                        float _3400 = ((1.0 - _3397) * _3322) + _3397;
                        float _4765 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                        float _3401 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                        float _3402 = 1.0 - _3372;
                        float _3412 = (0.5 / (((_3401 * ((_3387 * _3402) + _3372)) + 9.9999999392252902907785028219223e-09) + (((_3401 * _3402) + _3372) * _3387))) * _3401;
                        float _4776 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                        float _3423 = (((_3373 * 3.1415927410125732421875) * (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0)))) / ((_3395 * _3395) * ((_3339 * 2.1991131305694580078125) + 3.141590118408203125))) * _3328;
                        _3176 = (_3343 * _3291.x) + _3249;
                        _3177 = (_3343 * _3291.y) + _3250;
                        _3178 = (_3343 * _3291.z) + _3251;
                        _3173 = (_3423 * _3308.x) + _3246;
                        _3174 = (_3423 * _3308.y) + _3247;
                        _3175 = (_3423 * _3308.z) + _3248;
                        if (_3253 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3246 = _3173;
                            _3247 = _3174;
                            _3248 = _3175;
                            _3249 = _3176;
                            _3250 = _3177;
                            _3251 = _3178;
                            _3252 = _3253;
                        }
                    }
                    frontier_phi_73_pred = _3178;
                    frontier_phi_73_pred_1 = _3177;
                    frontier_phi_73_pred_2 = _3176;
                    frontier_phi_73_pred_3 = _3175;
                    frontier_phi_73_pred_4 = _3174;
                    frontier_phi_73_pred_5 = _3173;
                }
                _2960 = frontier_phi_73_pred;
                _2958 = frontier_phi_73_pred_1;
                _2956 = frontier_phi_73_pred_2;
                _2954 = frontier_phi_73_pred_3;
                _2952 = frontier_phi_73_pred_4;
                _2950 = frontier_phi_73_pred_5;
                uint _3108 = _3107 + 1u;
                if (_3108 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3101 = _2950;
                    _3102 = _2952;
                    _3103 = _2954;
                    _3104 = _2956;
                    _3105 = _2958;
                    _3106 = _2960;
                    _3107 = _3108;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2949 = _2950;
            _2951 = _2952;
            _2953 = _2954;
            _2955 = _2956;
            _2957 = _2958;
            _2959 = _2960;
        }
        uvec4 _2963 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2964 = _2963.z;
        uint _2966 = (_2964 >> 8u) & 15u;
        float _3069;
        float _3071;
        float _3073;
        float _3075;
        float _3077;
        float _3079;
        if (((4294967295u << _2966) & _2870) == 0u)
        {
            _3069 = _2949;
            _3071 = _2951;
            _3073 = _2953;
            _3075 = _2955;
            _3077 = _2957;
            _3079 = _2959;
        }
        else
        {
            float _3094 = inversesqrt(dot(vec3(_1948, _1949, _1950), vec3(_1948, _1949, _1950)));
            float _3095 = _3094 * _1948;
            float _3096 = _3094 * _1949;
            float _3097 = _3094 * _1950;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2966 < ((_2964 >> 12u) & 15u))
            {
                float _3070;
                float _3072;
                float _3074;
                float _3076;
                float _3078;
                float _3080;
                float _3229 = _2949;
                float _3230 = _2951;
                float _3231 = _2953;
                float _3232 = _2955;
                float _3233 = _2957;
                float _3234 = _2959;
                uint _3235 = _2966;
                uint _3244;
                bool _3245;
                for (;;)
                {
                    _3244 = texelFetch(g_lightClassification, int((((_2864 << 5u) + (_2850 << 9u)) + (_3235 << 2u)) >> 2u)).x;
                    _3245 = _3244 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3245)
                    {
                        frontier_phi_84_pred = _3233;
                        frontier_phi_84_pred_1 = _3232;
                        frontier_phi_84_pred_2 = _3231;
                        frontier_phi_84_pred_3 = _3230;
                        frontier_phi_84_pred_4 = _3229;
                        frontier_phi_84_pred_5 = _3234;
                    }
                    else
                    {
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3441;
                        float _3442;
                        float _3732;
                        float _3733;
                        float _3734;
                        float _3735;
                        float _3736;
                        float _3737;
                        float _3450 = _3229;
                        float _3451 = _3230;
                        float _3452 = _3231;
                        float _3453 = _3232;
                        float _3454 = _3233;
                        float _3455 = _3234;
                        uint _3456 = _3244;
                        uint _3457;
                        vec4 _3482;
                        float _3483;
                        vec4 _3498;
                        vec3 _3510;
                        vec4 _3525;
                        vec4 _3541;
                        float _3588;
                        bool _3589;
                        for (;;)
                        {
                            uint _3467 = ((_3235 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3456));
                            _3457 = (_3456 + 4294967295u) & _3456;
                            uint _3469 = _3467 * 40u;
                            _3482 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 3u)).x));
                            _3483 = _3482.w;
                            uint _3485 = (_3467 * 40u) + 4u;
                            _3498 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3485)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 3u)).x));
                            uint _3500 = (_3467 * 40u) + 8u;
                            _3510 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 2u)).x));
                            uint _3512 = (_3467 * 40u) + 16u;
                            _3525 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 3u)).x));
                            uint _3528 = (_3467 * 40u) + 20u;
                            _3541 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 3u)).x));
                            uint _3544 = (_3467 * 40u) + 24u;
                            vec4 _3557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 3u)).x));
                            uint _3563 = (_3467 * 40u) + 28u;
                            vec4 _3576 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 3u)).x));
                            _3588 = fma(_1950, _3576.z, fma(_1949, _3576.y, _3576.x * _1948)) + _3576.w;
                            _3589 = !((fma(_1950, _3557.z, fma(_1949, _3557.y, _3557.x * _1948)) + _3557.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3589)
                            {
                                float _3616 = _3482.x - _1948;
                                float _3617 = _3482.y - _1949;
                                float _3618 = _3482.z - _1950;
                                float _3619 = dot(vec3(_3616, _3617, _3618), vec3(_3616, _3617, _3618));
                                float _3622 = inversesqrt(_3619);
                                float _3623 = _3622 * _3616;
                                float _3624 = _3622 * _3617;
                                float _3625 = _3622 * _3618;
                                float _3629 = 1.0 - (_3619 / (_3483 * _3483));
                                float _4787 = isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0));
                                float _3630 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                                float _3634 = sqrt(_3619) * _3498.w;
                                float _3636 = 1.39999997615814208984375 / (_3634 + 1.39999997615814208984375);
                                float _3637 = _3636 * _3636;
                                float _3640 = ((1.0 - _3637) * dot(vec3(_3623, _3624, _3625), vec3(_797, _800, _803))) + _3637;
                                float _3643 = _3634 * _3634;
                                float _3647 = (fma(_1950, _3525.z, fma(_1949, _3525.y, _3525.x * _1948)) + _3525.w) / _3588;
                                float _3648 = (fma(_1950, _3541.z, fma(_1949, _3541.y, _3541.x * _1948)) + _3541.w) / _3588;
                                float _3652 = 1.0 - dot(vec2(_3647, _3648), vec2(_3647, _3648));
                                float _4803 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                                float _3653 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                                float _3654 = _3653 * (((isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0))) * _3630) / ((_3643 * 0.699999988079071044921875) + 1.0));
                                float _3666 = exp2(log2(1.0 / ((_3643 * 3.5) + 5.0)) * 0.25);
                                float _3667 = 1.0 - _857;
                                float _3674 = sqrt(1.0 - ((1.0 - (_3667 * _3667)) * (1.0 - (_3666 * _3666))));
                                float _3675 = _3674 * _3674;
                                float _3676 = _3675 * _3675;
                                float _3677 = _3623 - _3095;
                                float _3678 = _3624 - _3096;
                                float _3679 = _3625 - _3097;
                                float _3683 = inversesqrt(dot(vec3(_3677, _3678, _3679), vec3(_3677, _3678, _3679)));
                                float _3687 = dot(vec3(_797, _800, _803), vec3((-0.0) - _3095, (-0.0) - _3096, (-0.0) - _3097));
                                float _4814 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                                float _3690 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                                float _3691 = dot(vec3(_797, _800, _803), vec3(_3683 * _3677, _3683 * _3678, _3683 * _3679));
                                float _4825 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                                float _3694 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                                float _3698 = ((_3694 * _3694) * (_3676 + (-1.0))) + 1.0;
                                float _3699 = _3636 * _3675;
                                float _3700 = _3699 * _3699;
                                float _3706 = ((1.0 - _3700) * dot(vec3(_797, _800, _803), vec3(_3623, _3624, _3625))) + _3700;
                                float _4836 = isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0));
                                float _3707 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                                float _3708 = 1.0 - _3675;
                                float _3718 = (0.5 / (((_3707 * ((_3690 * _3708) + _3675)) + 9.9999999392252902907785028219223e-09) + (((_3707 * _3708) + _3675) * _3690))) * _3707;
                                float _4847 = isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0));
                                float _3728 = (_3653 * _3630) * (((_3676 * 3.1415927410125732421875) * (isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0)))) / ((_3698 * _3698) * ((_3643 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3654 * _3498.y;
                                frontier_phi_90_pred_1 = _3654 * _3498.x;
                                frontier_phi_90_pred_2 = _3728 * _3510.z;
                                frontier_phi_90_pred_3 = _3728 * _3510.y;
                                frontier_phi_90_pred_4 = _3728 * _3510.x;
                                frontier_phi_90_pred_5 = _3654 * _3498.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3736 = frontier_phi_90_pred;
                            _3735 = frontier_phi_90_pred_1;
                            _3734 = frontier_phi_90_pred_2;
                            _3733 = frontier_phi_90_pred_3;
                            _3732 = frontier_phi_90_pred_4;
                            _3737 = frontier_phi_90_pred_5;
                            _3440 = _3735 + _3453;
                            _3441 = _3736 + _3454;
                            _3442 = _3737 + _3455;
                            _3437 = _3732 + _3450;
                            _3438 = _3733 + _3451;
                            _3439 = _3734 + _3452;
                            if (_3457 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3450 = _3437;
                                _3451 = _3438;
                                _3452 = _3439;
                                _3453 = _3440;
                                _3454 = _3441;
                                _3455 = _3442;
                                _3456 = _3457;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3441;
                        frontier_phi_84_pred_1 = _3440;
                        frontier_phi_84_pred_2 = _3439;
                        frontier_phi_84_pred_3 = _3438;
                        frontier_phi_84_pred_4 = _3437;
                        frontier_phi_84_pred_5 = _3442;
                    }
                    _3078 = frontier_phi_84_pred;
                    _3076 = frontier_phi_84_pred_1;
                    _3074 = frontier_phi_84_pred_2;
                    _3072 = frontier_phi_84_pred_3;
                    _3070 = frontier_phi_84_pred_4;
                    _3080 = frontier_phi_84_pred_5;
                    uint _3236 = _3235 + 1u;
                    if (_3236 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3229 = _3070;
                        _3230 = _3072;
                        _3231 = _3074;
                        _3232 = _3076;
                        _3233 = _3078;
                        _3234 = _3080;
                        _3235 = _3236;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3080;
                frontier_phi_65_66_ladder_1 = _3076;
                frontier_phi_65_66_ladder_2 = _3078;
                frontier_phi_65_66_ladder_3 = _3072;
                frontier_phi_65_66_ladder_4 = _3070;
                frontier_phi_65_66_ladder_5 = _3074;
            }
            else
            {
                frontier_phi_65_66_ladder = _2959;
                frontier_phi_65_66_ladder_1 = _2955;
                frontier_phi_65_66_ladder_2 = _2957;
                frontier_phi_65_66_ladder_3 = _2951;
                frontier_phi_65_66_ladder_4 = _2949;
                frontier_phi_65_66_ladder_5 = _2953;
            }
            _3069 = frontier_phi_65_66_ladder_4;
            _3071 = frontier_phi_65_66_ladder_3;
            _3073 = frontier_phi_65_66_ladder_5;
            _3075 = frontier_phi_65_66_ladder_1;
            _3077 = frontier_phi_65_66_ladder_2;
            _3079 = frontier_phi_65_66_ladder;
        }
        float _3084 = isnan(1.0) ? _841 : (isnan(_841) ? 1.0 : min(_841, 1.0));
        _2882 = (_3084 * _3075) + _2414;
        _2884 = (_3084 * _3077) + _2416;
        _2886 = (_3084 * _3079) + _2418;
        _2888 = ((_3069 * 0.039999999105930328369140625) * _3084) + _2737;
        _2890 = ((_3071 * 0.039999999105930328369140625) * _3084) + _2739;
        _2892 = ((_3073 * 0.039999999105930328369140625) * _3084) + _2741;
    }
    else
    {
        _2882 = _2414;
        _2884 = _2416;
        _2886 = _2418;
        _2888 = _2737;
        _2890 = _2739;
        _2892 = _2741;
    }
    float _4863 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _4874 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _4885 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _2909 = ((isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0))) * (_2882 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _841))) + ((_2888 + ((isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))) * _1680)) * cbPerFrame._m0[3u].x);
    float _2910 = ((isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0))) * (_2884 + ((isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))) * _841))) + ((_2890 + ((isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))) * _1680)) * cbPerFrame._m0[3u].x);
    float _2911 = ((isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0))) * (_2886 + ((isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))) * _841))) + ((_2892 + ((isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))) * _1680)) * cbPerFrame._m0[3u].x);
    uint _2912 = _816 + 6u;
    float _2920 = _778 / cbSceneParam._m0[86u].x;
    float _2921 = _779 / cbSceneParam._m0[86u].y;
    vec4 _2935 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2920, _2921, (log2((isnan(cbSceneParam._m0[77u].w) ? _701 : (isnan(_701) ? cbSceneParam._m0[77u].w : min(_701, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2937 = _2935.x;
    float _2938 = _2935.y;
    float _2939 = _2935.z;
    float _2940 = _2935.w;
    float _3011;
    float _3013;
    float _3015;
    float _3017;
    if (_701 > cbSceneParam._m0[78u].w)
    {
        float _2974 = isnan(_701) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _701 : min(cbSceneParam._m0[80u].w, _701));
        float _2975 = _2974 / _701;
        float _2986 = _2975 * _751;
        float _2987 = _752 * _2975;
        float _2988 = (-0.0) - _2987;
        float _2989 = _2975 * _753;
        float _2991 = (cbSceneParam._m0[77u].w * _2988) / _2974;
        float _2992 = _2991 + cbSceneParam._m0[79u].w;
        float _2993 = cbSceneParam._m0[79u].w - _2987;
        float _2999 = sqrt(((_2986 * _2986) + (_2987 * _2987)) + (_2989 * _2989));
        float _3002 = (1.0 - (cbSceneParam._m0[77u].w / _2974)) * _2999;
        float _3007 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3009 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3186;
        if (abs((_2988 - _2991) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3186 = ((((_2992 > 0.0) ? exp2(_3007 * _2992) : (2.0 - exp2(_3009 * _2992))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3002;
        }
        else
        {
            float _3130 = 1.0 / cbSceneParam._m0[80u].x;
            float _3131 = isnan(_2993) ? _2992 : (isnan(_2992) ? _2993 : max(_2992, _2993));
            float _3132 = isnan(_2993) ? _2992 : (isnan(_2992) ? _2993 : min(_2992, _2993));
            float _3141 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : min(_3131, 0.0));
            float _3142 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : min(_3132, 0.0));
            _3186 = ((abs(_2999 / _2988) * cbSceneParam._m0[80u].y) * ((((_3141 - _3142) * 2.0) - ((exp2(_3007 * (isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0)))) - exp2(_3007 * (isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0))))) * _3130)) - ((exp2(_3009 * _3141) - exp2(_3009 * _3142)) * _3130))) + (_3002 * cbSceneParam._m0[80u].z);
        }
        vec4 _3188 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2920, _2921, 1.0), 0.0);
        float _3197 = exp2((_3186 * (-1.44269502162933349609375)) * (1.0 - _3188.w));
        float _3198 = log2(_3197);
        float _3214 = log2(_2940);
        _3011 = (exp2(_3214 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3198 * cbSceneParam._m0[78u].x)) * _3188.x) / cbSceneParam._m0[78u].x)) + _2937;
        _3013 = (exp2(_3214 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3198 * cbSceneParam._m0[78u].y)) * _3188.y) / cbSceneParam._m0[78u].y)) + _2938;
        _3015 = (exp2(_3214 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3198 * cbSceneParam._m0[78u].z)) * _3188.z) / cbSceneParam._m0[78u].z)) + _2939;
        _3017 = _3197 * _2940;
    }
    else
    {
        _3011 = _2937;
        _3013 = _2938;
        _3015 = _2939;
        _3017 = _2940;
    }
    bool _3224;
    vec4 _3027;
    vec4 _3049;
    float _3051;
    float _3055;
    float _3056;
    float _3057;
    float _3058;
    bool _3068;
    for (;;)
    {
        _3027 = cbMatDynParam._m0[0u];
        float _3029 = roundEven(_3027.y);
        bool _3030 = _3029 == 3.0;
        float _3031 = log2(_3017);
        float _3038 = exp2(_3031 * cbSceneParam._m0[78u].x) * _2909;
        float _3039 = exp2(_3031 * cbSceneParam._m0[78u].y) * _2910;
        float _3040 = exp2(_3031 * cbSceneParam._m0[78u].z) * _2911;
        float _3047 = _767 + (-0.5);
        _3049 = cbMtdParam._m0[1u];
        _3051 = _3049.y * _3047;
        float _3054 = (_3029 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3055 = _3054 * (_3030 ? _3038 : (_3038 + (cbSceneParam._m0[72u].w * _3011)));
        _3056 = _3054 * (_3030 ? _3039 : (_3039 + (cbSceneParam._m0[72u].w * _3013)));
        _3057 = _3054 * (_3030 ? _3040 : (_3040 + (cbSceneParam._m0[72u].w * _3015)));
        _3058 = _3047 * 0.999000012874603271484375;
        _3068 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3068)
        {
            if ((cbInstanceData._m0[_816 + 7u].x + _3058) < 0.5)
            {
                _3224 = true;
                break;
            }
        }
        uint _3165 = _817 + uint(_3027.w);
        if ((cbInstanceData._m0[_3165].w < 1.0) && ((cbInstanceData._m0[_3165].w + _3058) < 0.5))
        {
            _3224 = true;
            break;
        }
        if ((_3051 + 1.0) < _3049.x)
        {
            _3224 = true;
            break;
        }
        _3224 = false;
        break;
    }
    float _3428;
    if (_3224)
    {
        discard_state = true;
        _3428 = 0.0;
    }
    else
    {
        _3428 = cbInstanceData._m0[_2912].w;
    }
    SV_Target.x = _3055;
    SV_Target.y = _3056;
    SV_Target.z = _3057;
    SV_Target.w = _3428;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2912].w;
    discard_exit();
}


