#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1193;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _218 = _217 * _209;
    float _219 = _217 * _210;
    float _220 = _217 * _211;
    float _230 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _231 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _232 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _236 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = _243 * NORMAL.x;
    float _245 = _243 * NORMAL.y;
    float _246 = _243 * NORMAL.z;
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = _250 * TANGENT.x;
    float _252 = _250 * TANGENT.y;
    float _253 = _250 * TANGENT.z;
    float _257 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _265;
    float _266;
    float _267;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _265 = (-0.0) - _244;
        _266 = (-0.0) - _245;
        _267 = (-0.0) - _246;
    }
    else
    {
        _265 = _244;
        _266 = _245;
        _267 = _246;
    }
    vec4 _287 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _293 = _287.x * cbMtdParam._m0[10u].x;
    float _294 = _287.y * cbMtdParam._m0[10u].y;
    float _295 = _287.z * cbMtdParam._m0[10u].z;
    vec4 _314 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    vec4 _333 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _361 = cbMtdParam._m0[15u].x * texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x;
    float _372 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * (((1.0 - _333.x) * 2.0) - _361)) + 1.0;
    float _3504 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _373 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
    float _380 = (_373 * ((_314.x * cbMtdParam._m0[11u].x) - _293)) + _293;
    float _381 = (_373 * ((_314.y * cbMtdParam._m0[11u].y) - _294)) + _294;
    float _382 = (_373 * ((_314.z * cbMtdParam._m0[11u].z) - _295)) + _295;
    vec4 _400 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.z) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.w) + cbTextureTilingScale._m0[11u].w));
    float _413 = (((((1.0 - _333.y) * 2.0) - _361) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].z) + 1.0;
    float _3515 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _414 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
    float _421 = (((_400.x * cbMtdParam._m0[12u].x) - _380) * _414) + _380;
    float _422 = (_414 * ((_400.y * cbMtdParam._m0[12u].y) - _381)) + _381;
    float _423 = (_414 * ((_400.z * cbMtdParam._m0[12u].z) - _382)) + _382;
    vec4 _441 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _454 = (((((1.0 - _333.z) * 2.0) - _361) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].w) + 1.0;
    float _3526 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
    vec4 _482 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _490 = ((((((_441.x * cbMtdParam._m0[13u].x) - _421) * _455) + _421) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _482.x;
    float _493 = ((((_455 * ((_441.y * cbMtdParam._m0[13u].y) - _422)) + _422) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _482.y;
    float _496 = ((((_455 * ((_441.z * cbMtdParam._m0[13u].z) - _423)) + _423) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _482.z;
    vec4 _509 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _511 = _509.x;
    float _512 = _509.y;
    float _513 = _509.z;
    vec4 _525 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w));
    float _536 = ((_525.x - _511) * _373) + _511;
    float _537 = ((_525.y - _512) * _373) + _512;
    float _538 = ((_525.z - _513) * _373) + _513;
    vec4 _551 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _562 = ((_551.x - _536) * _414) + _536;
    float _563 = ((_551.y - _537) * _414) + _537;
    float _564 = ((_551.z - _538) * _414) + _538;
    vec4 _577 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _590 = ((_577.z - _564) * _455) + _564;
    float _593 = ((((_577.x - _562) * _455) + _562) * 2.0) + (-1.0);
    float _595 = ((((_577.y - _563) * _455) + _563) * 2.0) + (-1.0);
    float _596 = dot(vec2(_593, _595), vec2(_593, _595));
    float _3537 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _601 = sqrt(1.0 - (isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))));
    float _604 = fma(_601, _265, fma(_595, _257 * TANGENT_2.x, (_236 * _230) * _593));
    float _607 = fma(_601, _266, fma(_595, _257 * TANGENT_2.y, (_236 * _231) * _593));
    float _610 = fma(_601, _267, fma(_595, _257 * TANGENT_2.z, (_236 * _232) * _593));
    float _614 = inversesqrt(dot(vec3(_604, _607, _610), vec3(_604, _607, _610)));
    float _615 = _614 * _604;
    float _616 = _614 * _607;
    float _617 = _614 * _610;
    float _620 = fma(_617, _220, fma(_616, _219, _615 * _218));
    float _623 = fma(_617, _253, fma(_616, _252, _615 * _251));
    float _626 = fma(_617, _267, fma(_616, _266, _615 * _265));
    float _630 = inversesqrt(dot(vec3(_620, _623, _626), vec3(_620, _623, _626)));
    float _633 = _630 * _626;
    vec4 _646 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _656 = (((_646.x * 2.0) + (-1.0)) * cbMtdParam._m0[14u].y) + (_630 * _620);
    float _657 = (((_646.y * 2.0) + (-1.0)) * cbMtdParam._m0[14u].y) + (_630 * _623);
    float _660 = fma(_633, _265, fma(_657, _251, _656 * _218));
    float _663 = fma(_633, _266, fma(_657, _252, _656 * _219));
    float _666 = fma(_633, _267, fma(_657, _253, _656 * _220));
    float _670 = inversesqrt(dot(vec3(_660, _663, _666), vec3(_660, _663, _666)));
    float _671 = _670 * _660;
    float _672 = _670 * _663;
    float _673 = _670 * _666;
    float _3548 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _674 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
    float _3559 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _3570 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _3581 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _693 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _743 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _733);
    float _744 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _733);
    float _745 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _733);
    float _749 = inversesqrt(dot(vec3(_743, _744, _745), vec3(_743, _744, _745)));
    float _750 = _743 * _749;
    float _751 = _744 * _749;
    float _752 = _745 * _749;
    float _758 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _759 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _777 = fma(_673, cbSceneParam._m0[5u].z, fma(_672, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _671));
    float _780 = fma(_673, cbSceneParam._m0[6u].z, fma(_672, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _671));
    float _783 = fma(_673, cbSceneParam._m0[7u].z, fma(_672, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _671));
    uint _796 = uint(roundEven(NORMAL.w)) * 13u;
    uint _798 = (_796 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _804 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0)))) * cbInstanceData._m0[_798].x;
    float _805 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0)))) * cbInstanceData._m0[_798].y;
    float _806 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0)))) * cbInstanceData._m0[_798].z;
    float _3592 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _807 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
    float _3603 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _808 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    float _3614 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _809 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    vec4 _818 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _758, cbSceneParam._m0[86u].y * _759));
    float _821 = _818.x * TEXCOORD_4;
    float _822 = dot(vec3(_671, _672, _673), vec3(_750, _751, _752));
    float _825 = _822 * 2.0;
    float _829 = (_825 * _671) - _750;
    float _830 = (_825 * _672) - _751;
    float _831 = (_825 * _673) - _752;
    float _835 = abs(dot(vec3(_750, _751, _752), vec3(_671, _672, _673)));
    float _3625 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _837 = sqrt(_674);
    float _850 = exp2((_837 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_837 * 3.0));
    float _882 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _886 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _890 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1192;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _917 = fma(_890, cbModelParam._m0[26u].z, fma(_886, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _882));
        float _921 = fma(_890, cbModelParam._m0[27u].z, fma(_886, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _882));
        float _925 = fma(_890, cbModelParam._m0[28u].z, fma(_886, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _882));
        float _950 = _882 + _671;
        float _951 = _886 + _672;
        float _952 = _890 + _673;
        float _962 = fma(_952, cbModelParam._m0[26u].z, fma(_951, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _950)) - _917;
        float _963 = fma(_952, cbModelParam._m0[27u].z, fma(_951, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _950)) - _921;
        float _964 = fma(_952, cbModelParam._m0[28u].z, fma(_951, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _950)) - _925;
        float _968 = inversesqrt(dot(vec3(_962, _963, _964), vec3(_962, _963, _964)));
        float _981 = ((_968 * _962) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_917 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _982 = ((_968 * _963) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_921 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _983 = ((_968 * _964) / cbModelParam._m0[34u].z) + ((((((_925 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _993 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        float _1020 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_986.x + (-0.5));
        float _1022 = _1020 * (_986.y + (-0.5));
        float _1023 = _1020 * (_986.z + (-0.5));
        float _1030 = exp2((_993.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_993.x + (-0.5));
        float _1032 = _1030 * (_993.y + (-0.5));
        float _1033 = _1030 * (_993.z + (-0.5));
        float _1040 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1000.x + (-0.5));
        float _1042 = _1040 * (_1000.y + (-0.5));
        float _1043 = _1040 * (_1000.z + (-0.5));
        float _1050 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1007.x + (-0.5));
        float _1052 = _1050 * (_1007.y + (-0.5));
        float _1053 = _1050 * (_1007.z + (-0.5));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = _1021 * 0.5;
        float _1058 = _1031 * 0.5;
        float _1059 = _1041 * 0.5;
        float _1060 = dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059));
        float _1065 = (_1060 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1060);
        float _1074 = (dot(vec3(_671, _672, _673), vec3(_1065 * _1057, _1065 * _1058, _1065 * _1059)) + 1.0) * 0.5;
        float _3651 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1084 = sqrt(((_1058 * _1058) + (_1057 * _1057)) + (_1059 * _1059)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _3662 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1086 = _1085 * 2.0;
        float _1090 = (1.0 - _1085) / (_1085 + 1.0);
        float _3673 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1100 = ((((1.0 - _1091) * (_1086 + 2.0)) * exp2(log2(isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * (_1086 + 1.0))) + _1091) * _1054;
        float _1101 = _1022 * 0.5;
        float _1102 = _1032 * 0.5;
        float _1103 = _1042 * 0.5;
        float _1104 = dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103));
        float _1109 = (_1104 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1104);
        float _1117 = (dot(vec3(_671, _672, _673), vec3(_1109 * _1101, _1109 * _1102, _1109 * _1103)) + 1.0) * 0.5;
        float _3684 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1126 = sqrt(((_1102 * _1102) + (_1101 * _1101)) + (_1103 * _1103)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3695 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1128 = _1127 * 2.0;
        float _1132 = (1.0 - _1127) / (_1127 + 1.0);
        float _3706 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1142 = ((((1.0 - _1133) * (_1128 + 2.0)) * exp2(log2(isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * (_1128 + 1.0))) + _1133) * _1055;
        float _1143 = _1023 * 0.5;
        float _1144 = _1033 * 0.5;
        float _1145 = _1043 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1159 = (dot(vec3(_671, _672, _673), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _3717 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1168 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3728 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _3739 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_1170 + 1.0))) + _1175) * _1056;
        _1192 = _1023;
        _1194 = _1022;
        _1195 = _1021;
        _1196 = _1033;
        _1197 = _1032;
        _1198 = _1031;
        _1199 = _1043;
        _1200 = _1042;
        _1201 = _1041;
        _1202 = _1056;
        _1203 = _1055;
        _1204 = _1054;
        _1205 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)));
        _1206 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)));
        _1207 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
    }
    else
    {
        _1192 = _1193;
        _1194 = _1193;
        _1195 = _1193;
        _1196 = _1193;
        _1197 = _1193;
        _1198 = _1193;
        _1199 = _1193;
        _1200 = _1193;
        _1201 = _1193;
        _1202 = _1193;
        _1203 = _1193;
        _1204 = _1193;
        _1205 = 0.0;
        _1206 = 0.0;
        _1207 = 0.0;
    }
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1233 = fma(_890, cbModelParam._m0[30u].z, fma(_886, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _882));
        float _1237 = fma(_890, cbModelParam._m0[31u].z, fma(_886, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _882));
        float _1241 = fma(_890, cbModelParam._m0[32u].z, fma(_886, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _882));
        float _1264 = _882 + _671;
        float _1265 = _886 + _672;
        float _1266 = _890 + _673;
        float _1276 = fma(_1266, cbModelParam._m0[30u].z, fma(_1265, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1264)) - _1233;
        float _1277 = fma(_1266, cbModelParam._m0[31u].z, fma(_1265, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1264)) - _1237;
        float _1278 = fma(_1266, cbModelParam._m0[32u].z, fma(_1265, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1264)) - _1241;
        float _1282 = inversesqrt(dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278)));
        float _1295 = ((_1282 * _1276) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1233 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1296 = ((_1282 * _1277) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1237 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1297 = ((_1282 * _1278) / cbModelParam._m0[35u].z) + ((((((_1241 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        float _1332 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1299.x + (-0.5));
        float _1334 = _1332 * (_1299.y + (-0.5));
        float _1335 = _1332 * (_1299.z + (-0.5));
        float _1342 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1306.x + (-0.5));
        float _1344 = _1342 * (_1306.y + (-0.5));
        float _1345 = _1342 * (_1306.z + (-0.5));
        float _1352 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1313.x + (-0.5));
        float _1354 = _1352 * (_1313.y + (-0.5));
        float _1355 = _1352 * (_1313.z + (-0.5));
        float _1362 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1320.x + (-0.5));
        float _1364 = _1362 * (_1320.y + (-0.5));
        float _1365 = _1362 * (_1320.z + (-0.5));
        float _1366 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1367 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1368 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1369 = _1333 * 0.5;
        float _1370 = _1343 * 0.5;
        float _1371 = _1353 * 0.5;
        float _1372 = dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371));
        float _1377 = (_1372 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1372);
        float _1385 = (dot(vec3(_671, _672, _673), vec3(_1377 * _1369, _1377 * _1370, _1377 * _1371)) + 1.0) * 0.5;
        float _3780 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1394 = sqrt(((_1370 * _1370) + (_1369 * _1369)) + (_1371 * _1371)) / (_1366 + 9.9999997473787516355514526367188e-06);
        float _3791 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1396 = _1395 * 2.0;
        float _1400 = (1.0 - _1395) / (_1395 + 1.0);
        float _3802 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1410 = ((((1.0 - _1401) * (_1396 + 2.0)) * exp2(log2(isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * (_1396 + 1.0))) + _1401) * _1366;
        float _1411 = _1334 * 0.5;
        float _1412 = _1344 * 0.5;
        float _1413 = _1354 * 0.5;
        float _1414 = dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413));
        float _1419 = (_1414 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1414);
        float _1427 = (dot(vec3(_671, _672, _673), vec3(_1419 * _1411, _1419 * _1412, _1419 * _1413)) + 1.0) * 0.5;
        float _3813 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1436 = sqrt(((_1412 * _1412) + (_1411 * _1411)) + (_1413 * _1413)) / (_1367 + 9.9999997473787516355514526367188e-06);
        float _3824 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1438 = _1437 * 2.0;
        float _1442 = (1.0 - _1437) / (_1437 + 1.0);
        float _3835 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1452 = ((((1.0 - _1443) * (_1438 + 2.0)) * exp2(log2(isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * (_1438 + 1.0))) + _1443) * _1367;
        float _1453 = _1335 * 0.5;
        float _1454 = _1345 * 0.5;
        float _1455 = _1355 * 0.5;
        float _1456 = dot(vec3(_1453, _1454, _1455), vec3(_1453, _1454, _1455));
        float _1461 = (_1456 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1456);
        float _1469 = (dot(vec3(_671, _672, _673), vec3(_1461 * _1453, _1461 * _1454, _1461 * _1455)) + 1.0) * 0.5;
        float _3846 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1478 = sqrt(((_1454 * _1454) + (_1453 * _1453)) + (_1455 * _1455)) / (_1368 + 9.9999997473787516355514526367188e-06);
        float _3857 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1480 = _1479 * 2.0;
        float _1484 = (1.0 - _1479) / (_1479 + 1.0);
        float _3868 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1494 = ((((1.0 - _1485) * (_1480 + 2.0)) * exp2(log2(isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * (_1480 + 1.0))) + _1485) * _1368;
        _1502 = _1335;
        _1503 = _1334;
        _1504 = _1333;
        _1505 = _1345;
        _1506 = _1344;
        _1507 = _1343;
        _1508 = _1355;
        _1509 = _1354;
        _1510 = _1353;
        _1511 = _1368;
        _1512 = _1367;
        _1513 = _1366;
        _1514 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)));
        _1515 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)));
        _1516 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)));
    }
    else
    {
        _1502 = _1193;
        _1503 = _1193;
        _1504 = _1193;
        _1505 = _1193;
        _1506 = _1193;
        _1507 = _1193;
        _1508 = _1193;
        _1509 = _1193;
        _1510 = _1193;
        _1511 = _1193;
        _1512 = _1193;
        _1513 = _1193;
        _1514 = 0.0;
        _1515 = 0.0;
        _1516 = 0.0;
    }
    float _1526 = (cbModelParam._m0[1u].x * (_1514 - _1205)) + _1205;
    float _1527 = (cbModelParam._m0[1u].x * (_1515 - _1206)) + _1206;
    float _1528 = (cbModelParam._m0[1u].x * (_1516 - _1207)) + _1207;
    float _1549 = fma(_1528, cbSceneParam._m0[89u].z, fma(_1527, cbSceneParam._m0[89u].y, _1526 * cbSceneParam._m0[89u].x));
    float _1552 = fma(_1528, cbSceneParam._m0[90u].z, fma(_1527, cbSceneParam._m0[90u].y, _1526 * cbSceneParam._m0[90u].x));
    float _1555 = fma(_1528, cbSceneParam._m0[91u].z, fma(_1527, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1526));
    float _1570 = _829 * 0.5;
    float _1571 = _830 * 0.5;
    float _1572 = _831 * 0.5;
    float _1573 = dot(vec4(_1570, _1571, _1572, 1.0), vec4(_1504, _1507, _1510, _1513));
    float _1576 = dot(vec4(_1570, _1571, _1572, 1.0), vec4(_1503, _1506, _1509, _1512));
    float _1579 = dot(vec4(_1570, _1571, _1572, 1.0), vec4(_1502, _1505, _1508, _1511));
    float _1613;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1586 = dot(vec4(_1570, _1571, _1572, 1.0), vec4(_1192, _1196, _1199, _1202));
        float _1590 = dot(vec4(_1570, _1571, _1572, 1.0), vec4(_1194, _1197, _1200, _1203));
        float _1594 = dot(vec4(_1570, _1571, _1572, 1.0), vec4(_1195, _1198, _1201, _1204));
        float _1601 = dot(vec4(cbModelParam._m0[39u]), vec4(_1570, _1571, _1572, 1.0));
        _1613 = dot(vec3(isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)), isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)), isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1601) ? 0.0 : (isnan(0.0) ? _1601 : max(0.0, _1601))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1613 = 1.0;
    }
    float _1624;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1615 = dot(vec4(cbModelParam._m0[40u]), vec4(_1570, _1571, _1572, 1.0));
        _1624 = dot(vec3(isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)), isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)), isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1615) ? 0.0 : (isnan(0.0) ? _1615 : max(0.0, _1615))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1624 = 1.0;
    }
    float _1628 = (_1624 * cbModelParam._m0[1u].x) + (_1613 * (1.0 - cbModelParam._m0[1u].x));
    float _1638 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _674);
    float _1639 = isnan(_1638) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1638 : min(cbModelParam._m0[25u].z, _1638));
    float _1719;
    float _1721;
    float _1723;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1686 = fma(_890, cbModelParam._m0[13u].z, fma(_886, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _882)) + cbModelParam._m0[13u].w;
        float _1690 = fma(_890, cbModelParam._m0[14u].z, fma(_886, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _882)) + cbModelParam._m0[14u].w;
        float _1694 = fma(_890, cbModelParam._m0[15u].z, fma(_886, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _882)) + cbModelParam._m0[15u].w;
        float _1697 = fma(_831, cbModelParam._m0[13u].z, fma(_830, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _829));
        float _1700 = fma(_831, cbModelParam._m0[14u].z, fma(_830, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _829));
        float _1703 = fma(_831, cbModelParam._m0[15u].z, fma(_830, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _829));
        float _1731;
        if (_1697 > 0.0)
        {
            _1731 = abs((1.0 - _1686) / _1697);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1697 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1686 + 1.0) / _1697);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1731 = frontier_phi_16_14_ladder;
        }
        float _1935;
        if (_1700 > 0.0)
        {
            _1935 = abs((1.0 - _1690) / _1700);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1700 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1690 + 1.0) / _1700);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1935 = frontier_phi_25_21_ladder;
        }
        float _2178;
        if (_1703 > 0.0)
        {
            _2178 = abs((1.0 - _1694) / _1703);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1694 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2178 = frontier_phi_37_32_ladder;
        }
        float _2180 = isnan(_1935) ? _1731 : (isnan(_1731) ? _1935 : min(_1731, _1935));
        float _2181 = isnan(_2178) ? _2180 : (isnan(_2180) ? _2178 : min(_2180, _2178));
        float _2185 = (_2181 * _1697) + _1686;
        float _2186 = (_2181 * _1700) + _1690;
        float _2187 = (_2181 * _1703) + _1694;
        float _2188 = _2181 * 9.9999997473787516355514526367188e-05;
        float _2190 = (-1.0) - _2188;
        float _2192 = _2188 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2187 > _2192) || ((_2187 < _2190) || ((_2186 > _2192) || ((_2186 < _2190) || ((_2185 < _2190) || (_2185 > _2192))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2311 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2187, cbModelParam._m0[9u].z, fma(_2186, cbModelParam._m0[9u].y, _2185 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2187, cbModelParam._m0[10u].z, fma(_2186, cbModelParam._m0[10u].y, _2185 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2187, cbModelParam._m0[11u].z, fma(_2186, cbModelParam._m0[11u].y, _2185 * cbModelParam._m0[11u].x))), _1639);
            frontier_phi_15_37_ladder = _2311.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2311.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2311.x * cbModelParam._m0[1u].y;
        }
        _1719 = frontier_phi_15_37_ladder_2;
        _1721 = frontier_phi_15_37_ladder_1;
        _1723 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1707 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_829, _830, _831), _1639);
        _1719 = _1707.x * cbModelParam._m0[1u].y;
        _1721 = _1707.y * cbModelParam._m0[1u].y;
        _1723 = _1707.z * cbModelParam._m0[1u].y;
    }
    float _1727 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _674);
    float _1728 = isnan(_1727) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1727 : min(cbModelParam._m0[25u].w, _1727));
    float _1821;
    float _1823;
    float _1825;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1785 = fma(_890, cbModelParam._m0[21u].z, fma(_886, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _882)) + cbModelParam._m0[21u].w;
        float _1789 = fma(_890, cbModelParam._m0[22u].z, fma(_886, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _882)) + cbModelParam._m0[22u].w;
        float _1793 = fma(_890, cbModelParam._m0[23u].z, fma(_886, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _882)) + cbModelParam._m0[23u].w;
        float _1796 = fma(_831, cbModelParam._m0[21u].z, fma(_830, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _829));
        float _1799 = fma(_831, cbModelParam._m0[22u].z, fma(_830, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _829));
        float _1802 = fma(_831, cbModelParam._m0[23u].z, fma(_830, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _829));
        float _1940;
        if (_1796 > 0.0)
        {
            _1940 = abs((1.0 - _1785) / _1796);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1785 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1940 = frontier_phi_27_23_ladder;
        }
        float _2205;
        if (_1799 > 0.0)
        {
            _2205 = abs((1.0 - _1789) / _1799);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1789 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2205 = frontier_phi_39_34_ladder;
        }
        float _2410;
        if (_1802 > 0.0)
        {
            _2410 = abs((1.0 - _1793) / _1802);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1793 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2410 = frontier_phi_48_45_ladder;
        }
        float _2412 = isnan(_2205) ? _1940 : (isnan(_1940) ? _2205 : min(_1940, _2205));
        float _2413 = isnan(_2410) ? _2412 : (isnan(_2412) ? _2410 : min(_2412, _2410));
        float _2417 = (_2413 * _1796) + _1785;
        float _2418 = (_2413 * _1799) + _1789;
        float _2419 = (_2413 * _1802) + _1793;
        float _2420 = _2413 * 9.9999997473787516355514526367188e-05;
        float _2421 = (-1.0) - _2420;
        float _2423 = _2420 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2419 > _2423) || ((_2419 < _2421) || ((_2418 > _2423) || ((_2418 < _2421) || ((_2417 < _2421) || (_2417 > _2423))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2617 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2419, cbModelParam._m0[17u].z, fma(_2418, cbModelParam._m0[17u].y, _2417 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2419, cbModelParam._m0[18u].z, fma(_2418, cbModelParam._m0[18u].y, _2417 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2419, cbModelParam._m0[19u].z, fma(_2418, cbModelParam._m0[19u].y, _2417 * cbModelParam._m0[19u].x))), _1728);
            frontier_phi_24_48_ladder = _2617.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2617.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2617.x * cbModelParam._m0[1u].z;
        }
        _1821 = frontier_phi_24_48_ladder_2;
        _1823 = frontier_phi_24_48_ladder_1;
        _1825 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1805 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_829, _830, _831), _1728);
        _1821 = _1805.x * cbModelParam._m0[1u].z;
        _1823 = _1805.y * cbModelParam._m0[1u].z;
        _1825 = _1805.z * cbModelParam._m0[1u].z;
    }
    float _1837 = ((((1.0 - _850) * ((_837 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_850 * _837)) * _821;
    float _1838 = _1837 * ((cbModelParam._m0[1u].w * (_1821 - _1719)) + _1719);
    float _1839 = _1837 * ((cbModelParam._m0[1u].w * (_1823 - _1721)) + _1721);
    float _1840 = _1837 * ((cbModelParam._m0[1u].w * (_1825 - _1723)) + _1723);
    float _1843 = fma(_1840, cbSceneParam._m0[89u].z, fma(_1839, cbSceneParam._m0[89u].y, _1838 * cbSceneParam._m0[89u].x));
    float _1846 = fma(_1840, cbSceneParam._m0[90u].z, fma(_1839, cbSceneParam._m0[90u].y, _1838 * cbSceneParam._m0[90u].x));
    float _1849 = fma(_1840, cbSceneParam._m0[91u].z, fma(_1839, cbSceneParam._m0[91u].y, _1838 * cbSceneParam._m0[91u].x));
    uvec4 _1859 = floatBitsToUint(cbInstanceData._m0[_796 + 5u]);
    uint _1861 = _1859.x * 14u;
    uint _1862 = _1861 + 13u;
    float _1869 = _821 + (-1.0);
    float _1874 = (cbLight._m0[_1862].x * _1869) + 1.0;
    float _1875 = (cbLight._m0[_1862].y * _1869) + 1.0;
    float _1876 = (cbLight._m0[_1862].z * _1869) + 1.0;
    float _1877 = (cbLight._m0[_1862].w * _1869) + 1.0;
    uint _1878 = _1861 + 5u;
    float _1884 = isnan(1.0) ? _1875 : (isnan(_1875) ? 1.0 : min(_1875, 1.0));
    uint _1888 = _1861 + 4u;
    float _1894 = isnan(1.0) ? _1874 : (isnan(_1874) ? 1.0 : min(_1874, 1.0));
    uint _1898 = _1861 | 1u;
    float _1909 = dot(vec3(cbLight._m0[_1861].xyz), vec3(_671, _672, _673));
    float _1912 = dot(vec3(cbLight._m0[_1898].xyz), vec3(_671, _672, _673));
    float _4004 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _4015 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1917 = (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * 0.3183098733425140380859375;
    float _1919 = (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * 0.3183098733425140380859375;
    float _1926 = ((cbLight._m0[_1878].x * _1884) * _1919) + ((cbLight._m0[_1888].x * _1894) * _1917);
    float _1927 = ((_1884 * cbLight._m0[_1878].y) * _1919) + ((_1894 * cbLight._m0[_1888].y) * _1917);
    float _1928 = ((_1884 * cbLight._m0[_1878].z) * _1919) + ((_1894 * cbLight._m0[_1888].z) * _1917);
    uvec4 _1932 = floatBitsToUint(cbLight._m0[_1861 + 12u]);
    bool _1934 = _1932.x == 0u;
    float _1945;
    float _1947;
    float _1949;
    if (_1934)
    {
        _1945 = _1926;
        _1947 = _1927;
        _1949 = _1928;
    }
    else
    {
        uint _1953 = _1861 + 6u;
        float _1969 = (dot(vec3(cbLight._m0[_1861 + 2u].xyz), vec3(_671, _672, _673)) * 0.5) + 0.5;
        float _1970 = _1969 * _1969;
        float _4026 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1971 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1972 = isnan(1.0) ? _1876 : (isnan(_1876) ? 1.0 : min(_1876, 1.0));
        _1945 = (((cbLight._m0[_1953].x * 0.3183098733425140380859375) * _1971) * _1972) + _1926;
        _1947 = (((cbLight._m0[_1953].y * 0.3183098733425140380859375) * _1971) * _1972) + _1927;
        _1949 = (((cbLight._m0[_1953].z * 0.3183098733425140380859375) * _1971) * _1972) + _1928;
    }
    bool _1952 = _1932.y == 0u;
    float _1990;
    float _1992;
    float _1994;
    if (_1952)
    {
        _1990 = _1945;
        _1992 = _1947;
        _1994 = _1949;
    }
    else
    {
        uint _2149 = _1861 + 7u;
        float _2165 = (dot(vec3(cbLight._m0[_1861 + 3u].xyz), vec3(_671, _672, _673)) * 0.5) + 0.5;
        float _2166 = _2165 * _2165;
        float _4042 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2167 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _2168 = isnan(1.0) ? _1877 : (isnan(_1877) ? 1.0 : min(_1877, 1.0));
        _1990 = (((cbLight._m0[_2149].x * 0.3183098733425140380859375) * _2167) * _2168) + _1945;
        _1992 = (((cbLight._m0[_2149].y * 0.3183098733425140380859375) * _2167) * _2168) + _1947;
        _1994 = (((cbLight._m0[_2149].z * 0.3183098733425140380859375) * _2167) * _2168) + _1949;
    }
    uint _1997 = _1861 + 8u;
    float _2010 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1861].w)) * _674) * 0.949999988079071044921875);
    float _2011 = _2010 * _2010;
    float _2012 = cbLight._m0[_1861].x + _750;
    float _2013 = cbLight._m0[_1861].y + _751;
    float _2014 = cbLight._m0[_1861].z + _752;
    float _2018 = inversesqrt(dot(vec3(_2012, _2013, _2014), vec3(_2012, _2013, _2014)));
    float _2019 = _2018 * _2012;
    float _2020 = _2018 * _2013;
    float _2021 = _2018 * _2014;
    float _2022 = dot(vec3(_671, _672, _673), vec3(cbLight._m0[_1861].xyz));
    float _4058 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2025 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _4069 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _2026 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _2027 = dot(vec3(_671, _672, _673), vec3(_2019, _2020, _2021));
    float _4080 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2030 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _2031 = dot(vec3(cbLight._m0[_1861].xyz), vec3(_2019, _2020, _2021));
    float _4091 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2035 = _2011 * _2011;
    float _2039 = ((_2030 * _2030) * (_2035 + (-1.0))) + 1.0;
    float _2050 = (exp2(log2(1.0 - (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2051 = 1.0 - _2011;
    float _2062 = (0.5 / (((_2026 * ((_2025 * _2051) + _2011)) + 9.9999999392252902907785028219223e-09) + (((_2026 * _2051) + _2011) * _2025))) * _2025;
    float _4102 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2064 = (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_2035 / ((_2039 * _2039) * 3.141590118408203125));
    uint _2075 = _1861 + 9u;
    float _2086 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1898].w)) * _674) * 0.949999988079071044921875);
    float _2087 = _2086 * _2086;
    float _2088 = cbLight._m0[_1898].x + _750;
    float _2089 = cbLight._m0[_1898].y + _751;
    float _2090 = cbLight._m0[_1898].z + _752;
    float _2094 = inversesqrt(dot(vec3(_2088, _2089, _2090), vec3(_2088, _2089, _2090)));
    float _2095 = _2094 * _2088;
    float _2096 = _2094 * _2089;
    float _2097 = _2094 * _2090;
    float _2098 = dot(vec3(_671, _672, _673), vec3(cbLight._m0[_1898].xyz));
    float _4113 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2101 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _2102 = dot(vec3(_671, _672, _673), vec3(_2095, _2096, _2097));
    float _4124 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2105 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    float _2106 = dot(vec3(cbLight._m0[_1898].xyz), vec3(_2095, _2096, _2097));
    float _4135 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2110 = _2087 * _2087;
    float _2114 = ((_2105 * _2105) * (_2110 + (-1.0))) + 1.0;
    float _2123 = (exp2(log2(1.0 - (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2124 = 1.0 - _2087;
    float _2134 = (0.5 / (((_2026 * ((_2101 * _2124) + _2087)) + 9.9999999392252902907785028219223e-09) + (((_2026 * _2124) + _2087) * _2101))) * _2101;
    float _4146 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2136 = (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_2110 / ((_2114 * _2114) * 3.141590118408203125));
    float _2146 = (((_2123 * cbLight._m0[_2075].x) * _2136) * _1884) + (((_2050 * cbLight._m0[_1997].x) * _2064) * _1894);
    float _2147 = (((_2123 * cbLight._m0[_2075].y) * _2136) * _1884) + (((_2050 * cbLight._m0[_1997].y) * _2064) * _1894);
    float _2148 = (((_2123 * cbLight._m0[_2075].z) * _2136) * _1884) + (((_2050 * cbLight._m0[_1997].z) * _2064) * _1894);
    float _2210;
    float _2212;
    float _2214;
    if (_1934)
    {
        _2210 = _2146;
        _2212 = _2147;
        _2214 = _2148;
    }
    else
    {
        uint _2216 = _1861 + 2u;
        uint _2220 = _1861 + 10u;
        float _2234 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2216].w)) * _674) * 0.949999988079071044921875);
        float _2235 = _2234 * _2234;
        float _2236 = cbLight._m0[_2216].x + _750;
        float _2237 = cbLight._m0[_2216].y + _751;
        float _2238 = cbLight._m0[_2216].z + _752;
        float _2242 = inversesqrt(dot(vec3(_2236, _2237, _2238), vec3(_2236, _2237, _2238)));
        float _2243 = _2242 * _2236;
        float _2244 = _2242 * _2237;
        float _2245 = _2242 * _2238;
        float _2246 = dot(vec3(_671, _672, _673), vec3(cbLight._m0[_2216].xyz));
        float _4157 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2249 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _2250 = dot(vec3(_671, _672, _673), vec3(_2243, _2244, _2245));
        float _4168 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2253 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _2254 = dot(vec3(cbLight._m0[_2216].xyz), vec3(_2243, _2244, _2245));
        float _4179 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2258 = _2235 * _2235;
        float _2262 = ((_2253 * _2253) * (_2258 + (-1.0))) + 1.0;
        float _2271 = (exp2(log2(1.0 - (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2272 = 1.0 - _2235;
        float _2282 = (0.5 / (((_2026 * ((_2249 * _2272) + _2235)) + 9.9999999392252902907785028219223e-09) + (((_2026 * _2272) + _2235) * _2249))) * _2249;
        float _4190 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2284 = (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_2258 / ((_2262 * _2262) * 3.141590118408203125));
        float _2285 = isnan(1.0) ? _1876 : (isnan(_1876) ? 1.0 : min(_1876, 1.0));
        _2210 = (((_2271 * cbLight._m0[_2220].x) * _2284) * _2285) + _2146;
        _2212 = (((_2271 * cbLight._m0[_2220].y) * _2284) * _2285) + _2147;
        _2214 = (((_2271 * cbLight._m0[_2220].z) * _2284) * _2285) + _2148;
    }
    float _2320;
    float _2322;
    float _2324;
    if (_1952)
    {
        _2320 = _2210;
        _2322 = _2212;
        _2324 = _2214;
    }
    else
    {
        uint _2331 = _1861 + 3u;
        uint _2335 = _1861 + 11u;
        float _2349 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2331].w)) * _674) * 0.949999988079071044921875);
        float _2350 = _2349 * _2349;
        float _2351 = cbLight._m0[_2331].x + _750;
        float _2352 = cbLight._m0[_2331].y + _751;
        float _2353 = cbLight._m0[_2331].z + _752;
        float _2357 = inversesqrt(dot(vec3(_2351, _2352, _2353), vec3(_2351, _2352, _2353)));
        float _2358 = _2357 * _2351;
        float _2359 = _2357 * _2352;
        float _2360 = _2357 * _2353;
        float _2361 = dot(vec3(_671, _672, _673), vec3(cbLight._m0[_2331].xyz));
        float _4206 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2364 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _2365 = dot(vec3(_671, _672, _673), vec3(_2358, _2359, _2360));
        float _4217 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2368 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _2369 = dot(vec3(cbLight._m0[_2331].xyz), vec3(_2358, _2359, _2360));
        float _4228 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2373 = _2350 * _2350;
        float _2377 = ((_2368 * _2368) * (_2373 + (-1.0))) + 1.0;
        float _2386 = (exp2(log2(1.0 - (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2387 = 1.0 - _2350;
        float _2397 = (0.5 / (((_2026 * ((_2364 * _2387) + _2350)) + 9.9999999392252902907785028219223e-09) + (((_2026 * _2387) + _2350) * _2364))) * _2364;
        float _4239 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2399 = (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_2373 / ((_2377 * _2377) * 3.141590118408203125));
        float _2400 = isnan(1.0) ? _1877 : (isnan(_1877) ? 1.0 : min(_1877, 1.0));
        _2320 = (((_2386 * cbLight._m0[_2335].x) * _2399) * _2400) + _2210;
        _2322 = (((_2386 * cbLight._m0[_2335].y) * _2399) * _2400) + _2212;
        _2324 = (((_2386 * cbLight._m0[_2335].z) * _2399) * _2400) + _2214;
    }
    float _2534;
    float _2536;
    float _2538;
    float _2540;
    float _2542;
    float _2544;
    if (_1859.y == 0u)
    {
        float _2475 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2476 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2475;
        float _2477 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2475;
        float _2478 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2475;
        uvec4 _2490 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2491 = _2490.x;
        uint _2502 = uint((float(_2490.y) * floor(float(uint(cbSceneParam._m0[85u].y * _759) / _2491))) + floor(float(uint(cbSceneParam._m0[85u].x * _758) / _2491)));
        float _2512 = (log2(_2478 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2513 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        uint _2516 = uint(isnan(14.0) ? _2513 : (isnan(_2513) ? 14.0 : min(_2513, 14.0)));
        uvec4 _2521 = texelFetch(g_lightClusterGridBuffer, int(((_2516 << 2u) + (_2502 << 6u)) >> 2u));
        uint _2522 = _2521.x;
        uint _2523 = _2490.z;
        float _2622;
        float _2624;
        float _2626;
        float _2628;
        float _2630;
        float _2632;
        if (((((1u << ((_2523 >> 4u) & 15u)) + 4294967295u) & _2522) == 0u) || ((_2523 & 240u) == 0u))
        {
            _2622 = 0.0;
            _2624 = 0.0;
            _2626 = 0.0;
            _2628 = 0.0;
            _2630 = 0.0;
            _2632 = 0.0;
        }
        else
        {
            float _2623;
            float _2625;
            float _2627;
            float _2629;
            float _2631;
            float _2633;
            float _2766 = 0.0;
            float _2767 = 0.0;
            float _2768 = 0.0;
            float _2769 = 0.0;
            float _2770 = 0.0;
            float _2771 = 0.0;
            uint _2772 = 0u;
            uint _2781;
            bool _2782;
            for (;;)
            {
                _2781 = texelFetch(g_lightClassification, int((((_2516 << 5u) + (_2502 << 9u)) + (_2772 << 2u)) >> 2u)).x;
                _2782 = _2781 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2782)
                {
                    frontier_phi_63_pred = _2771;
                    frontier_phi_63_pred_1 = _2770;
                    frontier_phi_63_pred_2 = _2769;
                    frontier_phi_63_pred_3 = _2768;
                    frontier_phi_63_pred_4 = _2767;
                    frontier_phi_63_pred_5 = _2766;
                }
                else
                {
                    float _2890;
                    float _2891;
                    float _2892;
                    float _2893;
                    float _2894;
                    float _2895;
                    uint _2896;
                    _2890 = _2766;
                    _2891 = _2767;
                    _2892 = _2768;
                    _2893 = _2769;
                    _2894 = _2770;
                    _2895 = _2771;
                    _2896 = _2781;
                    float _2822;
                    float _2823;
                    float _2824;
                    float _2825;
                    float _2826;
                    float _2827;
                    for (;;)
                    {
                        uint _2900 = uint(findLSB(_2896)) + (_2772 << 5u);
                        uint _2897 = (_2896 + 4294967295u) & _2896;
                        uint _2902 = _2900 * 48u;
                        vec4 _2916 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2902)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 3u)).x));
                        uint _2922 = (_2900 * 48u) + 4u;
                        vec4 _2935 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2922)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 3u)).x));
                        uint _2941 = (_2900 * 48u) + 8u;
                        vec3 _2952 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2941)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 2u)).x));
                        float _2956 = _2916.x - _2476;
                        float _2957 = _2916.y - _2477;
                        float _2958 = _2916.z - _2478;
                        float _2959 = dot(vec3(_2956, _2957, _2958), vec3(_2956, _2957, _2958));
                        float _2962 = inversesqrt(_2959);
                        float _2963 = _2962 * _2956;
                        float _2964 = _2962 * _2957;
                        float _2965 = _2962 * _2958;
                        float _2966 = dot(vec3(_777, _780, _783), vec3(_2963, _2964, _2965));
                        float _2971 = 1.0 - (_2959 * _2916.w);
                        float _4265 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                        float _2972 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
                        float _2973 = sqrt(_2959) * _2935.w;
                        float _2976 = 1.39999997615814208984375 / (_2973 + 1.39999997615814208984375);
                        float _2977 = _2976 * _2976;
                        float _2980 = ((1.0 - _2977) * _2966) + _2977;
                        float _2983 = _2973 * _2973;
                        float _2987 = ((isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0))) * _2972) / ((_2983 * 0.699999988079071044921875) + 1.0);
                        float _2991 = (-0.0) - _2476;
                        float _2992 = (-0.0) - _2477;
                        float _2993 = (-0.0) - _2478;
                        float _2997 = inversesqrt(dot(vec3(_2991, _2992, _2993), vec3(_2991, _2992, _2993)));
                        float _2998 = _2997 * _2991;
                        float _2999 = _2997 * _2992;
                        float _3000 = _2997 * _2993;
                        float _3008 = exp2(log2(1.0 / ((_2983 * 3.5) + 5.0)) * 0.25);
                        float _3009 = 1.0 - _837;
                        float _3016 = sqrt(1.0 - ((1.0 - (_3009 * _3009)) * (1.0 - (_3008 * _3008))));
                        float _3017 = _3016 * _3016;
                        float _3018 = _3017 * _3017;
                        float _3019 = _2998 + _2963;
                        float _3020 = _2999 + _2964;
                        float _3021 = _3000 + _2965;
                        float _3025 = inversesqrt(dot(vec3(_3019, _3020, _3021), vec3(_3019, _3020, _3021)));
                        float _3029 = dot(vec3(_777, _780, _783), vec3(_2998, _2999, _3000));
                        float _4281 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                        float _3032 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
                        float _3033 = dot(vec3(_777, _780, _783), vec3(_3025 * _3019, _3025 * _3020, _3025 * _3021));
                        float _4292 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                        float _3036 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
                        float _3040 = ((_3036 * _3036) * (_3018 + (-1.0))) + 1.0;
                        float _3041 = _2976 * _3017;
                        float _3042 = _3041 * _3041;
                        float _3045 = ((1.0 - _3042) * _2966) + _3042;
                        float _4303 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                        float _3046 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
                        float _3047 = 1.0 - _3017;
                        float _3057 = (0.5 / (((_3046 * ((_3032 * _3047) + _3017)) + 9.9999999392252902907785028219223e-09) + (((_3046 * _3047) + _3017) * _3032))) * _3046;
                        float _4314 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                        float _3068 = (((_3018 * 3.1415927410125732421875) * (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0)))) / ((_3040 * _3040) * ((_2983 * 2.1991131305694580078125) + 3.141590118408203125))) * _2972;
                        _2825 = (_2987 * _2935.x) + _2893;
                        _2826 = (_2987 * _2935.y) + _2894;
                        _2827 = (_2987 * _2935.z) + _2895;
                        _2822 = (_3068 * _2952.x) + _2890;
                        _2823 = (_3068 * _2952.y) + _2891;
                        _2824 = (_3068 * _2952.z) + _2892;
                        if (_2897 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2890 = _2822;
                            _2891 = _2823;
                            _2892 = _2824;
                            _2893 = _2825;
                            _2894 = _2826;
                            _2895 = _2827;
                            _2896 = _2897;
                        }
                    }
                    frontier_phi_63_pred = _2827;
                    frontier_phi_63_pred_1 = _2826;
                    frontier_phi_63_pred_2 = _2825;
                    frontier_phi_63_pred_3 = _2824;
                    frontier_phi_63_pred_4 = _2823;
                    frontier_phi_63_pred_5 = _2822;
                }
                _2633 = frontier_phi_63_pred;
                _2631 = frontier_phi_63_pred_1;
                _2629 = frontier_phi_63_pred_2;
                _2627 = frontier_phi_63_pred_3;
                _2625 = frontier_phi_63_pred_4;
                _2623 = frontier_phi_63_pred_5;
                uint _2773 = _2772 + 1u;
                if (_2773 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2766 = _2623;
                    _2767 = _2625;
                    _2768 = _2627;
                    _2769 = _2629;
                    _2770 = _2631;
                    _2771 = _2633;
                    _2772 = _2773;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2622 = _2623;
            _2624 = _2625;
            _2626 = _2627;
            _2628 = _2629;
            _2630 = _2631;
            _2632 = _2633;
        }
        uvec4 _2636 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2637 = _2636.z;
        uint _2639 = (_2637 >> 8u) & 15u;
        float _2734;
        float _2736;
        float _2738;
        float _2740;
        float _2742;
        float _2744;
        if (((4294967295u << _2639) & _2522) == 0u)
        {
            _2734 = _2622;
            _2736 = _2624;
            _2738 = _2626;
            _2740 = _2628;
            _2742 = _2630;
            _2744 = _2632;
        }
        else
        {
            float _2759 = inversesqrt(dot(vec3(_2476, _2477, _2478), vec3(_2476, _2477, _2478)));
            float _2760 = _2759 * _2476;
            float _2761 = _2759 * _2477;
            float _2762 = _2759 * _2478;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2639 < ((_2637 >> 12u) & 15u))
            {
                float _2735;
                float _2737;
                float _2739;
                float _2741;
                float _2743;
                float _2745;
                float _2873 = _2622;
                float _2874 = _2624;
                float _2875 = _2626;
                float _2876 = _2628;
                float _2877 = _2630;
                float _2878 = _2632;
                uint _2879 = _2639;
                uint _2888;
                bool _2889;
                for (;;)
                {
                    _2888 = texelFetch(g_lightClassification, int((((_2516 << 5u) + (_2502 << 9u)) + (_2879 << 2u)) >> 2u)).x;
                    _2889 = _2888 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2889)
                    {
                        frontier_phi_69_pred = _2878;
                        frontier_phi_69_pred_1 = _2877;
                        frontier_phi_69_pred_2 = _2876;
                        frontier_phi_69_pred_3 = _2875;
                        frontier_phi_69_pred_4 = _2874;
                        frontier_phi_69_pred_5 = _2873;
                    }
                    else
                    {
                        float _3073;
                        float _3074;
                        float _3075;
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3086 = _2873;
                        float _3087 = _2874;
                        float _3088 = _2875;
                        float _3089 = _2876;
                        float _3090 = _2877;
                        float _3091 = _2878;
                        uint _3092 = _2888;
                        uint _3093;
                        vec4 _3118;
                        float _3119;
                        vec4 _3134;
                        vec3 _3146;
                        vec4 _3161;
                        vec4 _3177;
                        float _3224;
                        bool _3225;
                        for (;;)
                        {
                            uint _3103 = ((_2879 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3092));
                            _3093 = (_3092 + 4294967295u) & _3092;
                            uint _3105 = _3103 * 40u;
                            _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            _3119 = _3118.w;
                            uint _3121 = (_3103 * 40u) + 4u;
                            _3134 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3121)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 3u)).x));
                            uint _3136 = (_3103 * 40u) + 8u;
                            _3146 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x));
                            uint _3148 = (_3103 * 40u) + 16u;
                            _3161 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 3u)).x));
                            uint _3164 = (_3103 * 40u) + 20u;
                            _3177 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3164)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 3u)).x));
                            uint _3180 = (_3103 * 40u) + 24u;
                            vec4 _3193 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 3u)).x));
                            uint _3199 = (_3103 * 40u) + 28u;
                            vec4 _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            _3224 = fma(_2478, _3212.z, fma(_2477, _3212.y, _3212.x * _2476)) + _3212.w;
                            _3225 = !((fma(_2478, _3193.z, fma(_2477, _3193.y, _3193.x * _2476)) + _3193.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3225)
                            {
                                float _3252 = _3118.x - _2476;
                                float _3253 = _3118.y - _2477;
                                float _3254 = _3118.z - _2478;
                                float _3255 = dot(vec3(_3252, _3253, _3254), vec3(_3252, _3253, _3254));
                                float _3258 = inversesqrt(_3255);
                                float _3259 = _3258 * _3252;
                                float _3260 = _3258 * _3253;
                                float _3261 = _3258 * _3254;
                                float _3265 = 1.0 - (_3255 / (_3119 * _3119));
                                float _4325 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3266 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                                float _3270 = sqrt(_3255) * _3134.w;
                                float _3272 = 1.39999997615814208984375 / (_3270 + 1.39999997615814208984375);
                                float _3273 = _3272 * _3272;
                                float _3276 = ((1.0 - _3273) * dot(vec3(_3259, _3260, _3261), vec3(_777, _780, _783))) + _3273;
                                float _3279 = _3270 * _3270;
                                float _3283 = (fma(_2478, _3161.z, fma(_2477, _3161.y, _3161.x * _2476)) + _3161.w) / _3224;
                                float _3284 = (fma(_2478, _3177.z, fma(_2477, _3177.y, _3177.x * _2476)) + _3177.w) / _3224;
                                float _3288 = 1.0 - dot(vec2(_3283, _3284), vec2(_3283, _3284));
                                float _4341 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                                float _3289 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                                float _3290 = _3289 * (((isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0))) * _3266) / ((_3279 * 0.699999988079071044921875) + 1.0));
                                float _3302 = exp2(log2(1.0 / ((_3279 * 3.5) + 5.0)) * 0.25);
                                float _3303 = 1.0 - _837;
                                float _3310 = sqrt(1.0 - ((1.0 - (_3303 * _3303)) * (1.0 - (_3302 * _3302))));
                                float _3311 = _3310 * _3310;
                                float _3312 = _3311 * _3311;
                                float _3313 = _3259 - _2760;
                                float _3314 = _3260 - _2761;
                                float _3315 = _3261 - _2762;
                                float _3319 = inversesqrt(dot(vec3(_3313, _3314, _3315), vec3(_3313, _3314, _3315)));
                                float _3323 = dot(vec3(_777, _780, _783), vec3((-0.0) - _2760, (-0.0) - _2761, (-0.0) - _2762));
                                float _4352 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                                float _3326 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
                                float _3327 = dot(vec3(_777, _780, _783), vec3(_3319 * _3313, _3319 * _3314, _3319 * _3315));
                                float _4363 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3330 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                                float _3334 = ((_3330 * _3330) * (_3312 + (-1.0))) + 1.0;
                                float _3335 = _3272 * _3311;
                                float _3336 = _3335 * _3335;
                                float _3342 = ((1.0 - _3336) * dot(vec3(_777, _780, _783), vec3(_3259, _3260, _3261))) + _3336;
                                float _4374 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                                float _3343 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                                float _3344 = 1.0 - _3311;
                                float _3354 = (0.5 / (((_3343 * ((_3326 * _3344) + _3311)) + 9.9999999392252902907785028219223e-09) + (((_3343 * _3344) + _3311) * _3326))) * _3343;
                                float _4385 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3364 = (_3289 * _3266) * (((_3312 * 3.1415927410125732421875) * (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0)))) / ((_3334 * _3334) * ((_3279 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3290 * _3134.z;
                                frontier_phi_75_pred_1 = _3290 * _3134.y;
                                frontier_phi_75_pred_2 = _3290 * _3134.x;
                                frontier_phi_75_pred_3 = _3364 * _3146.z;
                                frontier_phi_75_pred_4 = _3364 * _3146.y;
                                frontier_phi_75_pred_5 = _3364 * _3146.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3373 = frontier_phi_75_pred;
                            _3372 = frontier_phi_75_pred_1;
                            _3371 = frontier_phi_75_pred_2;
                            _3370 = frontier_phi_75_pred_3;
                            _3369 = frontier_phi_75_pred_4;
                            _3368 = frontier_phi_75_pred_5;
                            _3076 = _3371 + _3089;
                            _3077 = _3372 + _3090;
                            _3078 = _3373 + _3091;
                            _3073 = _3368 + _3086;
                            _3074 = _3369 + _3087;
                            _3075 = _3370 + _3088;
                            if (_3093 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3086 = _3073;
                                _3087 = _3074;
                                _3088 = _3075;
                                _3089 = _3076;
                                _3090 = _3077;
                                _3091 = _3078;
                                _3092 = _3093;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3078;
                        frontier_phi_69_pred_1 = _3077;
                        frontier_phi_69_pred_2 = _3076;
                        frontier_phi_69_pred_3 = _3075;
                        frontier_phi_69_pred_4 = _3074;
                        frontier_phi_69_pred_5 = _3073;
                    }
                    _2745 = frontier_phi_69_pred;
                    _2743 = frontier_phi_69_pred_1;
                    _2741 = frontier_phi_69_pred_2;
                    _2739 = frontier_phi_69_pred_3;
                    _2737 = frontier_phi_69_pred_4;
                    _2735 = frontier_phi_69_pred_5;
                    uint _2880 = _2879 + 1u;
                    if (_2880 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2873 = _2735;
                        _2874 = _2737;
                        _2875 = _2739;
                        _2876 = _2741;
                        _2877 = _2743;
                        _2878 = _2745;
                        _2879 = _2880;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2745;
                frontier_phi_57_58_ladder_1 = _2743;
                frontier_phi_57_58_ladder_2 = _2741;
                frontier_phi_57_58_ladder_3 = _2739;
                frontier_phi_57_58_ladder_4 = _2737;
                frontier_phi_57_58_ladder_5 = _2735;
            }
            else
            {
                frontier_phi_57_58_ladder = _2632;
                frontier_phi_57_58_ladder_1 = _2630;
                frontier_phi_57_58_ladder_2 = _2628;
                frontier_phi_57_58_ladder_3 = _2626;
                frontier_phi_57_58_ladder_4 = _2624;
                frontier_phi_57_58_ladder_5 = _2622;
            }
            _2734 = frontier_phi_57_58_ladder_5;
            _2736 = frontier_phi_57_58_ladder_4;
            _2738 = frontier_phi_57_58_ladder_3;
            _2740 = frontier_phi_57_58_ladder_2;
            _2742 = frontier_phi_57_58_ladder_1;
            _2744 = frontier_phi_57_58_ladder;
        }
        float _2749 = isnan(1.0) ? _821 : (isnan(_821) ? 1.0 : min(_821, 1.0));
        _2534 = (_2749 * _2740) + _1990;
        _2536 = (_2749 * _2742) + _1992;
        _2538 = (_2749 * _2744) + _1994;
        _2540 = ((_2734 * 0.039999999105930328369140625) * _2749) + _2320;
        _2542 = ((_2736 * 0.039999999105930328369140625) * _2749) + _2322;
        _2544 = ((_2738 * 0.039999999105930328369140625) * _2749) + _2324;
    }
    else
    {
        _2534 = _1990;
        _2536 = _1992;
        _2538 = _1994;
        _2540 = _2320;
        _2542 = _2322;
        _2544 = _2324;
    }
    float _4401 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _4412 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _4423 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    uint _2564 = _796 + 6u;
    float _2572 = _758 / cbSceneParam._m0[86u].x;
    float _2573 = _759 / cbSceneParam._m0[86u].y;
    vec4 _2587 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2572, _2573, (log2((isnan(cbSceneParam._m0[77u].w) ? _693 : (isnan(_693) ? cbSceneParam._m0[77u].w : min(_693, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2589 = _2587.x;
    float _2590 = _2587.y;
    float _2591 = _2587.z;
    float _2592 = _2587.w;
    float _2684;
    float _2686;
    float _2688;
    float _2690;
    if (_693 > cbSceneParam._m0[78u].w)
    {
        float _2647 = isnan(_693) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _693 : min(cbSceneParam._m0[80u].w, _693));
        float _2648 = _2647 / _693;
        float _2659 = _2648 * _743;
        float _2660 = _744 * _2648;
        float _2661 = (-0.0) - _2660;
        float _2662 = _2648 * _745;
        float _2664 = (cbSceneParam._m0[77u].w * _2661) / _2647;
        float _2665 = _2664 + cbSceneParam._m0[79u].w;
        float _2666 = cbSceneParam._m0[79u].w - _2660;
        float _2672 = sqrt(((_2659 * _2659) + (_2660 * _2660)) + (_2662 * _2662));
        float _2675 = (1.0 - (cbSceneParam._m0[77u].w / _2647)) * _2672;
        float _2680 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2682 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2835;
        if (abs((_2661 - _2664) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2835 = ((((_2665 > 0.0) ? exp2(_2680 * _2665) : (2.0 - exp2(_2682 * _2665))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2675;
        }
        else
        {
            float _2795 = 1.0 / cbSceneParam._m0[80u].x;
            float _2796 = isnan(_2666) ? _2665 : (isnan(_2665) ? _2666 : max(_2665, _2666));
            float _2797 = isnan(_2666) ? _2665 : (isnan(_2665) ? _2666 : min(_2665, _2666));
            float _2806 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : min(_2796, 0.0));
            float _2807 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : min(_2797, 0.0));
            _2835 = ((abs(_2672 / _2661) * cbSceneParam._m0[80u].y) * ((((_2806 - _2807) * 2.0) - ((exp2(_2680 * (isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0)))) - exp2(_2680 * (isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0))))) * _2795)) - ((exp2(_2682 * _2806) - exp2(_2682 * _2807)) * _2795))) + (_2675 * cbSceneParam._m0[80u].z);
        }
        vec4 _2837 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2572, _2573, 1.0), 0.0);
        float _2846 = exp2((_2835 * (-1.44269502162933349609375)) * (1.0 - _2837.w));
        float _2847 = log2(_2846);
        float _2863 = log2(_2592);
        _2684 = (exp2(_2863 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2847 * cbSceneParam._m0[78u].x)) * _2837.x) / cbSceneParam._m0[78u].x)) + _2589;
        _2686 = (exp2(_2863 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2847 * cbSceneParam._m0[78u].y)) * _2837.y) / cbSceneParam._m0[78u].y)) + _2590;
        _2688 = (exp2(_2863 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2847 * cbSceneParam._m0[78u].z)) * _2837.z) / cbSceneParam._m0[78u].z)) + _2591;
        _2690 = _2846 * _2592;
    }
    else
    {
        _2684 = _2589;
        _2686 = _2590;
        _2688 = _2591;
        _2690 = _2592;
    }
    float _2702 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2703 = _2702 == 3.0;
    float _2704 = log2(_2690);
    float _2711 = exp2(_2704 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_2534 + ((isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))) * _821))) + ((_2540 + ((isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))) * _1628)) * cbPerFrame._m0[3u].x));
    float _2712 = exp2(_2704 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_2536 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _821))) + ((_2542 + ((isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) * _1628)) * cbPerFrame._m0[3u].x));
    float _2713 = exp2(_2704 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_2538 + ((isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))) * _821))) + ((_2544 + ((isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))) * _1628)) * cbPerFrame._m0[3u].x));
    float _2722 = (_2702 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2722 * (_2703 ? _2711 : (_2711 + (cbSceneParam._m0[72u].w * _2684)));
    SV_Target.y = _2722 * (_2703 ? _2712 : (_2712 + (cbSceneParam._m0[72u].w * _2686)));
    SV_Target.z = _2722 * (_2703 ? _2713 : (_2713 + (cbSceneParam._m0[72u].w * _2688)));
    SV_Target.w = cbInstanceData._m0[_2564].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2564].w;
}


