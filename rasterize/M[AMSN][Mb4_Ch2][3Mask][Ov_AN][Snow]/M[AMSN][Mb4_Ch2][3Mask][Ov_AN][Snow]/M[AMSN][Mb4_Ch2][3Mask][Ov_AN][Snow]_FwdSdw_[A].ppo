#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1373;
float _4041;
float _4042;
float _4043;
float _4044;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = _237 * NORMAL.x;
    float _239 = _237 * NORMAL.y;
    float _240 = _237 * NORMAL.z;
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252;
    float _253;
    float _254;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _252 = (-0.0) - _238;
        _253 = (-0.0) - _239;
        _254 = (-0.0) - _240;
    }
    else
    {
        _252 = _238;
        _253 = _239;
        _254 = _240;
    }
    vec4 _274 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _301 = cbMtdParam._m0[15u].y * texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _309 = ((cbMtdParam._m0[14u].z * (-1.39999997615814208984375)) * (((1.0 - _274.x) * 2.0) - _301)) + 1.0;
    float _4053 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _310 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    vec4 _323 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    vec4 _340 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _342 = _340.x;
    float _343 = _340.y;
    float _344 = _340.z;
    float _351 = ((_323.x - _342) * _310) + _342;
    float _352 = ((_323.y - _343) * _310) + _343;
    float _353 = ((_323.z - _344) * _310) + _344;
    float _359 = (((((1.0 - _274.y) * 2.0) - _301) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].w) + 1.0;
    float _4064 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _360 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    vec4 _372 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _383 = ((_372.x - _351) * _360) + _351;
    float _384 = ((_372.y - _352) * _360) + _352;
    float _385 = ((_372.z - _353) * _360) + _353;
    float _391 = (((((1.0 - _274.z) * 2.0) - _301) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].z) + 1.0;
    float _4075 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    vec4 _404 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.z) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.w) + cbTextureTilingScale._m0[17u].w));
    float _417 = ((_404.z - _385) * _392) + _385;
    float _420 = ((((_404.x - _383) * _392) + _383) * 2.0) + (-1.0);
    float _422 = ((((_404.y - _384) * _392) + _384) * 2.0) + (-1.0);
    float _423 = dot(vec2(_420, _422), vec2(_420, _422));
    float _4086 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _428 = sqrt(1.0 - (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))));
    float _429 = fma(_428, _252, 0.0);
    float _430 = fma(_428, _253, 0.0);
    float _431 = fma(_428, _254, 0.0);
    float _440 = exp2(log2(inversesqrt(dot(vec3(_429, _430, _431), vec3(_429, _430, _431))) * _430) * cbMtdParam._m0[14u].x) * cbMtdParam._m0[14u].y;
    float _4097 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    vec4 _460 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _465 = _460.x * cbMtdParam._m0[10u].x;
    float _466 = _460.y * cbMtdParam._m0[10u].y;
    float _467 = _460.z * cbMtdParam._m0[10u].z;
    vec4 _486 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _500 = (((_486.x * cbMtdParam._m0[11u].x) - _465) * _310) + _465;
    float _501 = (((_486.y * cbMtdParam._m0[11u].y) - _466) * _310) + _466;
    float _502 = (((_486.z * cbMtdParam._m0[11u].z) - _467) * _310) + _467;
    vec4 _520 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _534 = (((_520.x * cbMtdParam._m0[12u].x) - _500) * _360) + _500;
    float _535 = (((_520.y * cbMtdParam._m0[12u].y) - _501) * _360) + _501;
    float _536 = (((_520.z * cbMtdParam._m0[12u].z) - _502) * _360) + _502;
    vec4 _555 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w));
    vec4 _589 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _597 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * ((((_555.x * cbMtdParam._m0[13u].x) - _534) * _392) + _534)) * _589.x;
    float _600 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * ((((_555.y * cbMtdParam._m0[13u].y) - _535) * _392) + _535)) * _589.y;
    float _603 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * ((((_555.z * cbMtdParam._m0[13u].z) - _536) * _392) + _536)) * _589.z;
    vec4 _615 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _626 = ((_615.x - _597) * _441) + _597;
    float _627 = ((_615.y - _600) * _441) + _600;
    float _628 = ((_615.z - _603) * _441) + _603;
    vec4 _641 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _643 = _641.x;
    float _660 = ((texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w)).x - _643) * _310) + _643;
    float _677 = ((texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w)).x - _660) * _360) + _660;
    vec4 _706 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _708 = _706.x;
    float _4108 = isnan(0.0) ? cbMtdParam._m0[14u].w : (isnan(cbMtdParam._m0[14u].w) ? 0.0 : max(cbMtdParam._m0[14u].w, 0.0));
    float _712 = (((((texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.z) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.w) + cbTextureTilingScale._m0[10u].w)).x - _677) * _392) + _677) - _708) * (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) + _708;
    float _714 = _712 - (_712 * _441);
    vec4 _726 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _733 = (_726.x * 2.0) + (-1.0);
    float _734 = (_726.y * 2.0) + (-1.0);
    float _735 = dot(vec2(_733, _734), vec2(_733, _734));
    float _4119 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _743 = ((_726.z - _417) * _441) + _417;
    float _752 = ((sqrt(1.0 - (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) - _428) * _441) + _428;
    vec4 _766 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _776 = (((_733 - _420) * _441) + _420) + (((_766.x * 2.0) + (-1.0)) * cbMtdParam._m0[15u].x);
    float _777 = (((_734 - _422) * _441) + _422) + (((_766.y * 2.0) + (-1.0)) * cbMtdParam._m0[15u].x);
    float _780 = fma(_752, _252, fma(_777, _244 * TANGENT.x, (_230 * _222) * _776));
    float _783 = fma(_752, _253, fma(_777, _244 * TANGENT.y, (_230 * _223) * _776));
    float _786 = fma(_752, _254, fma(_777, _244 * TANGENT.z, (_230 * _224) * _776));
    float _790 = inversesqrt(dot(vec3(_780, _783, _786), vec3(_780, _783, _786)));
    float _791 = _790 * _780;
    float _792 = _790 * _783;
    float _793 = _790 * _786;
    float _4130 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _794 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _4141 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _4152 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _4163 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _4174 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _798 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    float _814 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _854 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _864 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _854);
    float _865 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _854);
    float _866 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _854);
    float _870 = inversesqrt(dot(vec3(_864, _865, _866), vec3(_864, _865, _866)));
    float _871 = _864 * _870;
    float _872 = _865 * _870;
    float _873 = _866 * _870;
    vec4 _878 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _880 = _878.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1052 = sqrt(((_864 * _864) + (_865 * _865)) + (_866 * _866));
        float _1058 = (cbMatDynParam._m0[5u].x * _1052) + cbMatDynParam._m0[5u].y;
        float _4185 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1063 = (cbMatDynParam._m0[5u].z * _1052) + cbMatDynParam._m0[5u].w;
        float _4196 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) - _1059)) + _1059) < ((_880 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _891 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _892 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _910 = fma(_793, cbSceneParam._m0[5u].z, fma(_792, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _791));
    float _913 = fma(_793, cbSceneParam._m0[6u].z, fma(_792, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _791));
    float _916 = fma(_793, cbSceneParam._m0[7u].z, fma(_792, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _791));
    uint _929 = uint(roundEven(NORMAL.w)) * 13u;
    uint _930 = _929 + 9u;
    uint _931 = _930 + uint(cbMatDynParam._m0[0u].w);
    float _937 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) * cbInstanceData._m0[_931].x;
    float _938 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) * cbInstanceData._m0[_931].y;
    float _939 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * cbInstanceData._m0[_931].z;
    float _4207 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _940 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _4218 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _941 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _4229 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _942 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _943 = 1.0 - _798;
    float _944 = _940 * _943;
    float _945 = _941 * _943;
    float _946 = _942 * _943;
    float _951 = (_940 + (-0.039999999105930328369140625)) * _798;
    float _952 = (_941 + (-0.039999999105930328369140625)) * _798;
    float _953 = (_942 + (-0.039999999105930328369140625)) * _798;
    float _954 = _951 + 0.039999999105930328369140625;
    float _956 = _952 + 0.039999999105930328369140625;
    float _957 = _953 + 0.039999999105930328369140625;
    vec4 _966 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _891, cbSceneParam._m0[86u].y * _892));
    float _969 = _966.x * TEXCOORD_4;
    float _970 = dot(vec3(_791, _792, _793), vec3(_871, _872, _873));
    float _973 = _970 * 2.0;
    float _977 = (_973 * _791) - _871;
    float _978 = (_973 * _792) - _872;
    float _979 = (_973 * _793) - _873;
    float _983 = abs(dot(vec3(_871, _872, _873), vec3(_791, _792, _793)));
    float _4240 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _985 = sqrt(_794);
    float _998 = exp2((_985 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_985 * 3.0));
    float _1004 = (1.0 - _998) * ((_985 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1005 = _998 * _985;
    float _1033 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1037 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1041 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1372;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1097 = fma(_1041, cbModelParam._m0[26u].z, fma(_1037, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1033));
        float _1101 = fma(_1041, cbModelParam._m0[27u].z, fma(_1037, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1033));
        float _1105 = fma(_1041, cbModelParam._m0[28u].z, fma(_1037, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1033));
        float _1130 = _1033 + _791;
        float _1131 = _1037 + _792;
        float _1132 = _1041 + _793;
        float _1142 = fma(_1132, cbModelParam._m0[26u].z, fma(_1131, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1130)) - _1097;
        float _1143 = fma(_1132, cbModelParam._m0[27u].z, fma(_1131, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1130)) - _1101;
        float _1144 = fma(_1132, cbModelParam._m0[28u].z, fma(_1131, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1130)) - _1105;
        float _1148 = inversesqrt(dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144)));
        float _1161 = ((_1148 * _1142) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1097 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1162 = ((_1148 * _1143) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1101 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1163 = ((_1148 * _1144) / cbModelParam._m0[34u].z) + ((((((_1105 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        float _1200 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1166.x + (-0.5));
        float _1202 = _1200 * (_1166.y + (-0.5));
        float _1203 = _1200 * (_1166.z + (-0.5));
        float _1210 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1173.x + (-0.5));
        float _1212 = _1210 * (_1173.y + (-0.5));
        float _1213 = _1210 * (_1173.z + (-0.5));
        float _1220 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1180.x + (-0.5));
        float _1222 = _1220 * (_1180.y + (-0.5));
        float _1223 = _1220 * (_1180.z + (-0.5));
        float _1230 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1187.x + (-0.5));
        float _1232 = _1230 * (_1187.y + (-0.5));
        float _1233 = _1230 * (_1187.z + (-0.5));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = _1201 * 0.5;
        float _1238 = _1211 * 0.5;
        float _1239 = _1221 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1254 = (dot(vec3(_791, _792, _793), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _4266 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1264 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _4277 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _4288 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_1266 + 1.0))) + _1271) * _1234;
        float _1281 = _1202 * 0.5;
        float _1282 = _1212 * 0.5;
        float _1283 = _1222 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(_791, _792, _793), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _4299 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _4310 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _4321 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_1308 + 1.0))) + _1313) * _1235;
        float _1323 = _1203 * 0.5;
        float _1324 = _1213 * 0.5;
        float _1325 = _1223 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1339 = (dot(vec3(_791, _792, _793), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _4332 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1348 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _4343 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _4354 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_1350 + 1.0))) + _1355) * _1236;
        _1372 = _1203;
        _1374 = _1202;
        _1375 = _1201;
        _1376 = _1213;
        _1377 = _1212;
        _1378 = _1211;
        _1379 = _1223;
        _1380 = _1222;
        _1381 = _1221;
        _1382 = _1236;
        _1383 = _1235;
        _1384 = _1234;
        _1385 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
        _1386 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
        _1387 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
    }
    else
    {
        _1372 = _1373;
        _1374 = _1373;
        _1375 = _1373;
        _1376 = _1373;
        _1377 = _1373;
        _1378 = _1373;
        _1379 = _1373;
        _1380 = _1373;
        _1381 = _1373;
        _1382 = _1373;
        _1383 = _1373;
        _1384 = _1373;
        _1385 = 0.0;
        _1386 = 0.0;
        _1387 = 0.0;
    }
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1416 = fma(_1041, cbModelParam._m0[30u].z, fma(_1037, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1033));
        float _1420 = fma(_1041, cbModelParam._m0[31u].z, fma(_1037, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1033));
        float _1424 = fma(_1041, cbModelParam._m0[32u].z, fma(_1037, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1033));
        float _1447 = _1033 + _791;
        float _1448 = _1037 + _792;
        float _1449 = _1041 + _793;
        float _1459 = fma(_1449, cbModelParam._m0[30u].z, fma(_1448, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1447)) - _1416;
        float _1460 = fma(_1449, cbModelParam._m0[31u].z, fma(_1448, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1447)) - _1420;
        float _1461 = fma(_1449, cbModelParam._m0[32u].z, fma(_1448, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1447)) - _1424;
        float _1465 = inversesqrt(dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461)));
        float _1478 = ((_1465 * _1459) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1416 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1479 = ((_1465 * _1460) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1420 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1480 = ((_1465 * _1461) / cbModelParam._m0[35u].z) + ((((((_1424 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1482 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        vec4 _1489 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        vec4 _1496 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        vec4 _1503 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        float _1515 = exp2((_1482.w + (-0.5)) * 20.0) * 2.0;
        float _1516 = _1515 * (_1482.x + (-0.5));
        float _1517 = _1515 * (_1482.y + (-0.5));
        float _1518 = _1515 * (_1482.z + (-0.5));
        float _1525 = exp2((_1489.w + (-0.5)) * 20.0) * 2.0;
        float _1526 = _1525 * (_1489.x + (-0.5));
        float _1527 = _1525 * (_1489.y + (-0.5));
        float _1528 = _1525 * (_1489.z + (-0.5));
        float _1535 = exp2((_1496.w + (-0.5)) * 20.0) * 2.0;
        float _1536 = _1535 * (_1496.x + (-0.5));
        float _1537 = _1535 * (_1496.y + (-0.5));
        float _1538 = _1535 * (_1496.z + (-0.5));
        float _1545 = exp2((_1503.w + (-0.5)) * 20.0) * 2.0;
        float _1546 = _1545 * (_1503.x + (-0.5));
        float _1547 = _1545 * (_1503.y + (-0.5));
        float _1548 = _1545 * (_1503.z + (-0.5));
        float _1549 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1550 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1551 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1552 = _1516 * 0.5;
        float _1553 = _1526 * 0.5;
        float _1554 = _1536 * 0.5;
        float _1555 = dot(vec3(_1552, _1553, _1554), vec3(_1552, _1553, _1554));
        float _1560 = (_1555 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1555);
        float _1568 = (dot(vec3(_791, _792, _793), vec3(_1560 * _1552, _1560 * _1553, _1560 * _1554)) + 1.0) * 0.5;
        float _4395 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1577 = sqrt(((_1553 * _1553) + (_1552 * _1552)) + (_1554 * _1554)) / (_1549 + 9.9999997473787516355514526367188e-06);
        float _4406 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _1579 = _1578 * 2.0;
        float _1583 = (1.0 - _1578) / (_1578 + 1.0);
        float _4417 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _1593 = ((((1.0 - _1584) * (_1579 + 2.0)) * exp2(log2(isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_1579 + 1.0))) + _1584) * _1549;
        float _1594 = _1517 * 0.5;
        float _1595 = _1527 * 0.5;
        float _1596 = _1537 * 0.5;
        float _1597 = dot(vec3(_1594, _1595, _1596), vec3(_1594, _1595, _1596));
        float _1602 = (_1597 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1597);
        float _1610 = (dot(vec3(_791, _792, _793), vec3(_1602 * _1594, _1602 * _1595, _1602 * _1596)) + 1.0) * 0.5;
        float _4428 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1619 = sqrt(((_1595 * _1595) + (_1594 * _1594)) + (_1596 * _1596)) / (_1550 + 9.9999997473787516355514526367188e-06);
        float _4439 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _1621 = _1620 * 2.0;
        float _1625 = (1.0 - _1620) / (_1620 + 1.0);
        float _4450 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _1635 = ((((1.0 - _1626) * (_1621 + 2.0)) * exp2(log2(isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_1621 + 1.0))) + _1626) * _1550;
        float _1636 = _1518 * 0.5;
        float _1637 = _1528 * 0.5;
        float _1638 = _1538 * 0.5;
        float _1639 = dot(vec3(_1636, _1637, _1638), vec3(_1636, _1637, _1638));
        float _1644 = (_1639 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1639);
        float _1652 = (dot(vec3(_791, _792, _793), vec3(_1644 * _1636, _1644 * _1637, _1644 * _1638)) + 1.0) * 0.5;
        float _4461 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1661 = sqrt(((_1637 * _1637) + (_1636 * _1636)) + (_1638 * _1638)) / (_1551 + 9.9999997473787516355514526367188e-06);
        float _4472 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _1663 = _1662 * 2.0;
        float _1667 = (1.0 - _1662) / (_1662 + 1.0);
        float _4483 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _1677 = ((((1.0 - _1668) * (_1663 + 2.0)) * exp2(log2(isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_1663 + 1.0))) + _1668) * _1551;
        _1685 = _1518;
        _1686 = _1517;
        _1687 = _1516;
        _1688 = _1528;
        _1689 = _1527;
        _1690 = _1526;
        _1691 = _1538;
        _1692 = _1537;
        _1693 = _1536;
        _1694 = _1551;
        _1695 = _1550;
        _1696 = _1549;
        _1697 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)));
        _1698 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)));
        _1699 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)));
    }
    else
    {
        _1685 = _1373;
        _1686 = _1373;
        _1687 = _1373;
        _1688 = _1373;
        _1689 = _1373;
        _1690 = _1373;
        _1691 = _1373;
        _1692 = _1373;
        _1693 = _1373;
        _1694 = _1373;
        _1695 = _1373;
        _1696 = _1373;
        _1697 = 0.0;
        _1698 = 0.0;
        _1699 = 0.0;
    }
    float _1709 = (cbModelParam._m0[1u].x * (_1697 - _1385)) + _1385;
    float _1710 = (cbModelParam._m0[1u].x * (_1698 - _1386)) + _1386;
    float _1711 = (cbModelParam._m0[1u].x * (_1699 - _1387)) + _1387;
    float _1732 = fma(_1711, cbSceneParam._m0[89u].z, fma(_1710, cbSceneParam._m0[89u].y, _1709 * cbSceneParam._m0[89u].x));
    float _1735 = fma(_1711, cbSceneParam._m0[90u].z, fma(_1710, cbSceneParam._m0[90u].y, _1709 * cbSceneParam._m0[90u].x));
    float _1738 = fma(_1711, cbSceneParam._m0[91u].z, fma(_1710, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1709));
    float _1753 = _977 * 0.5;
    float _1754 = _978 * 0.5;
    float _1755 = _979 * 0.5;
    float _1756 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1687, _1690, _1693, _1696));
    float _1759 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1686, _1689, _1692, _1695));
    float _1762 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1685, _1688, _1691, _1694));
    float _1796;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1769 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1372, _1376, _1379, _1382));
        float _1773 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1374, _1377, _1380, _1383));
        float _1777 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1375, _1378, _1381, _1384));
        float _1784 = dot(vec4(cbModelParam._m0[39u]), vec4(_1753, _1754, _1755, 1.0));
        _1796 = dot(vec3(isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)), isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1784) ? 0.0 : (isnan(0.0) ? _1784 : max(0.0, _1784))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1796 = 1.0;
    }
    float _1807;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1798 = dot(vec4(cbModelParam._m0[40u]), vec4(_1753, _1754, _1755, 1.0));
        _1807 = dot(vec3(isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)), isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1798) ? 0.0 : (isnan(0.0) ? _1798 : max(0.0, _1798))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1807 = 1.0;
    }
    float _1811 = (_1807 * cbModelParam._m0[1u].x) + (_1796 * (1.0 - cbModelParam._m0[1u].x));
    float _1821 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _794);
    float _1822 = isnan(_1821) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1821 : min(cbModelParam._m0[25u].z, _1821));
    float _1902;
    float _1904;
    float _1906;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1869 = fma(_1041, cbModelParam._m0[13u].z, fma(_1037, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1033)) + cbModelParam._m0[13u].w;
        float _1873 = fma(_1041, cbModelParam._m0[14u].z, fma(_1037, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1033)) + cbModelParam._m0[14u].w;
        float _1877 = fma(_1041, cbModelParam._m0[15u].z, fma(_1037, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1033)) + cbModelParam._m0[15u].w;
        float _1880 = fma(_979, cbModelParam._m0[13u].z, fma(_978, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _977));
        float _1883 = fma(_979, cbModelParam._m0[14u].z, fma(_978, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _977));
        float _1886 = fma(_979, cbModelParam._m0[15u].z, fma(_978, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _977));
        float _1914;
        if (_1880 > 0.0)
        {
            _1914 = abs((1.0 - _1869) / _1880);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1869 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1914 = frontier_phi_19_17_ladder;
        }
        float _2088;
        if (_1883 > 0.0)
        {
            _2088 = abs((1.0 - _1873) / _1883);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1873 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2088 = frontier_phi_28_24_ladder;
        }
        float _2383;
        if (_1886 > 0.0)
        {
            _2383 = abs((1.0 - _1877) / _1886);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1877 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2383 = frontier_phi_40_35_ladder;
        }
        float _2385 = isnan(_2088) ? _1914 : (isnan(_1914) ? _2088 : min(_1914, _2088));
        float _2386 = isnan(_2383) ? _2385 : (isnan(_2385) ? _2383 : min(_2385, _2383));
        float _2390 = (_2386 * _1880) + _1869;
        float _2391 = (_2386 * _1883) + _1873;
        float _2392 = (_2386 * _1886) + _1877;
        float _2393 = _2386 * 9.9999997473787516355514526367188e-05;
        float _2395 = (-1.0) - _2393;
        float _2397 = _2393 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2392 > _2397) || ((_2392 < _2395) || ((_2391 > _2397) || ((_2391 < _2395) || ((_2390 < _2395) || (_2390 > _2397))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2537 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2392, cbModelParam._m0[9u].z, fma(_2391, cbModelParam._m0[9u].y, _2390 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2392, cbModelParam._m0[10u].z, fma(_2391, cbModelParam._m0[10u].y, _2390 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2392, cbModelParam._m0[11u].z, fma(_2391, cbModelParam._m0[11u].y, _2390 * cbModelParam._m0[11u].x))), _1822);
            frontier_phi_18_40_ladder = _2537.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2537.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2537.x * cbModelParam._m0[1u].y;
        }
        _1902 = frontier_phi_18_40_ladder_2;
        _1904 = frontier_phi_18_40_ladder_1;
        _1906 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1890 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_977, _978, _979), _1822);
        _1902 = _1890.x * cbModelParam._m0[1u].y;
        _1904 = _1890.y * cbModelParam._m0[1u].y;
        _1906 = _1890.z * cbModelParam._m0[1u].y;
    }
    float _1910 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _794);
    float _1911 = isnan(_1910) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1910 : min(cbModelParam._m0[25u].w, _1910));
    float _2003;
    float _2005;
    float _2007;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1967 = fma(_1041, cbModelParam._m0[21u].z, fma(_1037, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1033)) + cbModelParam._m0[21u].w;
        float _1971 = fma(_1041, cbModelParam._m0[22u].z, fma(_1037, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1033)) + cbModelParam._m0[22u].w;
        float _1975 = fma(_1041, cbModelParam._m0[23u].z, fma(_1037, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1033)) + cbModelParam._m0[23u].w;
        float _1978 = fma(_979, cbModelParam._m0[21u].z, fma(_978, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _977));
        float _1981 = fma(_979, cbModelParam._m0[22u].z, fma(_978, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _977));
        float _1984 = fma(_979, cbModelParam._m0[23u].z, fma(_978, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _977));
        float _2093;
        if (_1978 > 0.0)
        {
            _2093 = abs((1.0 - _1967) / _1978);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1967 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2093 = frontier_phi_30_26_ladder;
        }
        float _2410;
        if (_1981 > 0.0)
        {
            _2410 = abs((1.0 - _1971) / _1981);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1971 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2410 = frontier_phi_42_37_ladder;
        }
        float _2748;
        if (_1984 > 0.0)
        {
            _2748 = abs((1.0 - _1975) / _1984);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1984 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1975 + 1.0) / _1984);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2748 = frontier_phi_52_49_ladder;
        }
        float _2750 = isnan(_2410) ? _2093 : (isnan(_2093) ? _2410 : min(_2093, _2410));
        float _2751 = isnan(_2748) ? _2750 : (isnan(_2750) ? _2748 : min(_2750, _2748));
        float _2755 = (_2751 * _1978) + _1967;
        float _2756 = (_2751 * _1981) + _1971;
        float _2757 = (_2751 * _1984) + _1975;
        float _2758 = _2751 * 9.9999997473787516355514526367188e-05;
        float _2759 = (-1.0) - _2758;
        float _2761 = _2758 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2757 > _2761) || ((_2757 < _2759) || ((_2756 > _2761) || ((_2756 < _2759) || ((_2755 < _2759) || (_2755 > _2761))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2879 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2757, cbModelParam._m0[17u].z, fma(_2756, cbModelParam._m0[17u].y, _2755 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2757, cbModelParam._m0[18u].z, fma(_2756, cbModelParam._m0[18u].y, _2755 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2757, cbModelParam._m0[19u].z, fma(_2756, cbModelParam._m0[19u].y, _2755 * cbModelParam._m0[19u].x))), _1911);
            frontier_phi_27_52_ladder = _2879.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2879.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2879.x * cbModelParam._m0[1u].z;
        }
        _2003 = frontier_phi_27_52_ladder_2;
        _2005 = frontier_phi_27_52_ladder_1;
        _2007 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1987 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_977, _978, _979), _1911);
        _2003 = _1987.x * cbModelParam._m0[1u].z;
        _2005 = _1987.y * cbModelParam._m0[1u].z;
        _2007 = _1987.z * cbModelParam._m0[1u].z;
    }
    float _2020 = (((_1004 * _954) + _1005) * _969) * ((cbModelParam._m0[1u].w * (_2003 - _1902)) + _1902);
    float _2022 = (((_1004 * _956) + _1005) * _969) * ((cbModelParam._m0[1u].w * (_2005 - _1904)) + _1904);
    float _2024 = (((_1004 * _957) + _1005) * _969) * ((cbModelParam._m0[1u].w * (_2007 - _1906)) + _1906);
    float _2027 = fma(_2024, cbSceneParam._m0[89u].z, fma(_2022, cbSceneParam._m0[89u].y, _2020 * cbSceneParam._m0[89u].x));
    float _2030 = fma(_2024, cbSceneParam._m0[90u].z, fma(_2022, cbSceneParam._m0[90u].y, _2020 * cbSceneParam._m0[90u].x));
    float _2033 = fma(_2024, cbSceneParam._m0[91u].z, fma(_2022, cbSceneParam._m0[91u].y, _2020 * cbSceneParam._m0[91u].x));
    float _2067 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2071 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2075 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2079 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2080 = _2067 / _2079;
    float _2081 = _2071 / _2079;
    float _2082 = _2075 / _2079;
    float _2229;
    float _2230;
    float _2231;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2109 = ((uint(_2082 > cbSceneParam._m0[59u].y) + uint(_2082 > cbSceneParam._m0[59u].x)) + uint(_2082 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2110 = _2109 + 43u;
        uint _2118 = _2109 + 44u;
        uint _2126 = _2109 + 45u;
        uint _2134 = _2109 + 46u;
        float _2145 = fma(_2079, cbSceneParam._m0[_2110].w, fma(_2075, cbSceneParam._m0[_2110].z, fma(_2071, cbSceneParam._m0[_2110].y, _2067 * cbSceneParam._m0[_2110].x)));
        float _2149 = fma(_2079, cbSceneParam._m0[_2118].w, fma(_2075, cbSceneParam._m0[_2118].z, fma(_2071, cbSceneParam._m0[_2118].y, _2067 * cbSceneParam._m0[_2118].x)));
        float _2157 = fma(_2079, cbSceneParam._m0[_2134].w, fma(_2075, cbSceneParam._m0[_2134].z, fma(_2071, cbSceneParam._m0[_2134].y, _2067 * cbSceneParam._m0[_2134].x)));
        float _2162 = cbSceneParam._m0[33u].z * _2157;
        float _2164 = cbSceneParam._m0[33u].w * _2157;
        float _2167 = fma(_2079, cbSceneParam._m0[_2126].w, fma(_2075, cbSceneParam._m0[_2126].z, fma(_2071, cbSceneParam._m0[_2126].y, _2067 * cbSceneParam._m0[_2126].x))) / _2157;
        float _2215 = (cbSceneParam._m0[33u].x - sqrt(((_2081 * _2081) + (_2080 * _2080)) + (_2082 * _2082))) * cbSceneParam._m0[33u].y;
        float _4609 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2222 = (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2162 + _2145) / _2157, (_2164 + _2149) / _2157), _2167), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2164 + _2145) / _2157, (_2149 - _2162) / _2157), _2167), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2145 - _2162) / _2157, (_2149 - _2164) / _2157), _2167), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2145 - _2164) / _2157, (_2162 + _2149) / _2157), _2167), 0.0)).x), vec4(0.25)));
        _2229 = 1.0 - (_2222 * cbSceneParam._m0[34u].x);
        _2230 = 1.0 - (_2222 * cbSceneParam._m0[34u].y);
        _2231 = 1.0 - (_2222 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2229 = 1.0;
        _2230 = 1.0;
        _2231 = 1.0;
    }
    float _2295;
    float _2297;
    float _2299;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2283 = fma(_2079, cbSceneParam._m0[63u].w, fma(_2075, cbSceneParam._m0[63u].z, fma(_2071, cbSceneParam._m0[63u].y, _2067 * cbSceneParam._m0[63u].x)));
        float _2284 = fma(_2079, cbSceneParam._m0[60u].w, fma(_2075, cbSceneParam._m0[60u].z, fma(_2071, cbSceneParam._m0[60u].y, _2067 * cbSceneParam._m0[60u].x))) / _2283;
        float _2285 = fma(_2079, cbSceneParam._m0[61u].w, fma(_2075, cbSceneParam._m0[61u].z, fma(_2071, cbSceneParam._m0[61u].y, _2067 * cbSceneParam._m0[61u].x))) / _2283;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2284 >= cbSceneParam._m0[64u].x) && (_2285 >= cbSceneParam._m0[64u].y)) && (_2284 <= cbSceneParam._m0[64u].z)) && (_2285 <= cbSceneParam._m0[64u].w))
        {
            float _2423 = fma(_2079, cbSceneParam._m0[62u].w, fma(_2075, cbSceneParam._m0[62u].z, fma(_2071, cbSceneParam._m0[62u].y, _2067 * cbSceneParam._m0[62u].x))) / _2283;
            float _2427 = isnan(cbSceneParam._m0[41u].w) ? _2423 : (isnan(_2423) ? cbSceneParam._m0[41u].w : max(_2423, cbSceneParam._m0[41u].w));
            float _2470 = (cbSceneParam._m0[33u].x - sqrt(((_2081 * _2081) + (_2080 * _2080)) + (_2082 * _2082))) * cbSceneParam._m0[33u].y;
            float _4625 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
            float _2477 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2284, cbSceneParam._m0[33u].w + _2285), _2427), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2284, _2285 - cbSceneParam._m0[33u].z), _2427), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2284 - cbSceneParam._m0[33u].z, _2285 - cbSceneParam._m0[33u].w), _2427), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2284 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2285), _2427), 0.0)).x), vec4(0.25)));
            float _2481 = 1.0 - (_2477 * cbSceneParam._m0[34u].x);
            float _2482 = 1.0 - (_2477 * cbSceneParam._m0[34u].y);
            float _2483 = 1.0 - (_2477 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2482) ? _2230 : (isnan(_2230) ? _2482 : min(_2230, _2482));
            frontier_phi_39_38_ladder_1 = isnan(_2481) ? _2229 : (isnan(_2229) ? _2481 : min(_2229, _2481));
            frontier_phi_39_38_ladder_2 = isnan(_2483) ? _2231 : (isnan(_2231) ? _2483 : min(_2231, _2483));
        }
        else
        {
            frontier_phi_39_38_ladder = _2230;
            frontier_phi_39_38_ladder_1 = _2229;
            frontier_phi_39_38_ladder_2 = _2231;
        }
        _2295 = frontier_phi_39_38_ladder_1;
        _2297 = frontier_phi_39_38_ladder;
        _2299 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2295 = _2229;
        _2297 = _2230;
        _2299 = _2231;
    }
    uvec4 _2304 = floatBitsToUint(cbInstanceData._m0[_929 + 5u]);
    uint _2306 = _2304.x * 14u;
    uint _2307 = _2306 + 13u;
    float _2314 = _969 + (-1.0);
    float _2319 = (cbLight._m0[_2307].x * _2314) + 1.0;
    float _2320 = (cbLight._m0[_2307].y * _2314) + 1.0;
    float _2321 = (cbLight._m0[_2307].z * _2314) + 1.0;
    float _2322 = (cbLight._m0[_2307].w * _2314) + 1.0;
    uint _2323 = _2306 + 5u;
    float _2329 = isnan(1.0) ? _2320 : (isnan(_2320) ? 1.0 : min(_2320, 1.0));
    uint _2333 = _2306 + 4u;
    float _2342 = isnan(1.0) ? _2319 : (isnan(_2319) ? 1.0 : min(_2319, 1.0));
    uint _2346 = _2306 | 1u;
    float _2357 = dot(vec3(cbLight._m0[_2306].xyz), vec3(_791, _792, _793));
    float _2360 = dot(vec3(cbLight._m0[_2346].xyz), vec3(_791, _792, _793));
    float _4661 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _4672 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2365 = (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * 0.3183098733425140380859375;
    float _2367 = (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * 0.3183098733425140380859375;
    float _2374 = ((cbLight._m0[_2323].x * _2329) * _2367) + (((cbLight._m0[_2333].x * _2295) * _2342) * _2365);
    float _2375 = ((_2329 * cbLight._m0[_2323].y) * _2367) + (((cbLight._m0[_2333].y * _2297) * _2342) * _2365);
    float _2376 = ((_2329 * cbLight._m0[_2323].z) * _2367) + (((cbLight._m0[_2333].z * _2299) * _2342) * _2365);
    uvec4 _2380 = floatBitsToUint(cbLight._m0[_2306 + 12u]);
    bool _2382 = _2380.x == 0u;
    float _2484;
    float _2486;
    float _2488;
    if (_2382)
    {
        _2484 = _2374;
        _2486 = _2375;
        _2488 = _2376;
    }
    else
    {
        uint _2492 = _2306 + 6u;
        float _2508 = (dot(vec3(cbLight._m0[_2306 + 2u].xyz), vec3(_791, _792, _793)) * 0.5) + 0.5;
        float _2509 = _2508 * _2508;
        float _4683 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2510 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
        float _2511 = isnan(1.0) ? _2321 : (isnan(_2321) ? 1.0 : min(_2321, 1.0));
        _2484 = (((cbLight._m0[_2492].x * 0.3183098733425140380859375) * _2510) * _2511) + _2374;
        _2486 = (((cbLight._m0[_2492].y * 0.3183098733425140380859375) * _2510) * _2511) + _2375;
        _2488 = (((cbLight._m0[_2492].z * 0.3183098733425140380859375) * _2510) * _2511) + _2376;
    }
    bool _2491 = _2380.y == 0u;
    float _2546;
    float _2548;
    float _2550;
    if (_2491)
    {
        _2546 = _2484;
        _2548 = _2486;
        _2550 = _2488;
    }
    else
    {
        uint _2719 = _2306 + 7u;
        float _2735 = (dot(vec3(cbLight._m0[_2306 + 3u].xyz), vec3(_791, _792, _793)) * 0.5) + 0.5;
        float _2736 = _2735 * _2735;
        float _4699 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2737 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
        float _2738 = isnan(1.0) ? _2322 : (isnan(_2322) ? 1.0 : min(_2322, 1.0));
        _2546 = (((cbLight._m0[_2719].x * 0.3183098733425140380859375) * _2737) * _2738) + _2484;
        _2548 = (((cbLight._m0[_2719].y * 0.3183098733425140380859375) * _2737) * _2738) + _2486;
        _2550 = (((cbLight._m0[_2719].z * 0.3183098733425140380859375) * _2737) * _2738) + _2488;
    }
    uint _2553 = _2306 + 8u;
    float _2566 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2306].w)) * _794) * 0.949999988079071044921875);
    float _2567 = _2566 * _2566;
    float _2568 = cbLight._m0[_2306].x + _871;
    float _2569 = cbLight._m0[_2306].y + _872;
    float _2570 = cbLight._m0[_2306].z + _873;
    float _2574 = inversesqrt(dot(vec3(_2568, _2569, _2570), vec3(_2568, _2569, _2570)));
    float _2575 = _2574 * _2568;
    float _2576 = _2574 * _2569;
    float _2577 = _2574 * _2570;
    float _2578 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2306].xyz));
    float _4715 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2581 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
    float _4726 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _2582 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
    float _2583 = dot(vec3(_791, _792, _793), vec3(_2575, _2576, _2577));
    float _4737 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2586 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
    float _2587 = dot(vec3(cbLight._m0[_2306].xyz), vec3(_2575, _2576, _2577));
    float _4748 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
    float _2591 = _2567 * _2567;
    float _2595 = ((_2586 * _2586) * (_2591 + (-1.0))) + 1.0;
    float _2603 = exp2(log2(1.0 - (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0)))) * 5.0);
    float _2604 = 0.959999978542327880859375 - _951;
    float _2606 = 0.959999978542327880859375 - _952;
    float _2607 = 0.959999978542327880859375 - _953;
    float _2614 = 1.0 - _2567;
    float _2625 = (0.5 / (((_2582 * ((_2581 * _2614) + _2567)) + 9.9999999392252902907785028219223e-09) + (((_2582 * _2614) + _2567) * _2581))) * _2581;
    float _4759 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
    float _2627 = (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_2591 / ((_2595 * _2595) * 3.141590118408203125));
    uint _2641 = _2306 + 9u;
    float _2652 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2346].w)) * _794) * 0.949999988079071044921875);
    float _2653 = _2652 * _2652;
    float _2654 = cbLight._m0[_2346].x + _871;
    float _2655 = cbLight._m0[_2346].y + _872;
    float _2656 = cbLight._m0[_2346].z + _873;
    float _2660 = inversesqrt(dot(vec3(_2654, _2655, _2656), vec3(_2654, _2655, _2656)));
    float _2661 = _2660 * _2654;
    float _2662 = _2660 * _2655;
    float _2663 = _2660 * _2656;
    float _2664 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2346].xyz));
    float _4770 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
    float _2667 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
    float _2668 = dot(vec3(_791, _792, _793), vec3(_2661, _2662, _2663));
    float _4781 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
    float _2671 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
    float _2672 = dot(vec3(cbLight._m0[_2346].xyz), vec3(_2661, _2662, _2663));
    float _4792 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
    float _2676 = _2653 * _2653;
    float _2680 = ((_2671 * _2671) * (_2676 + (-1.0))) + 1.0;
    float _2687 = exp2(log2(1.0 - (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0)))) * 5.0);
    float _2694 = 1.0 - _2653;
    float _2704 = (0.5 / (((_2582 * ((_2667 * _2694) + _2653)) + 9.9999999392252902907785028219223e-09) + (((_2582 * _2694) + _2653) * _2667))) * _2667;
    float _4803 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
    float _2706 = (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0))) * (_2676 / ((_2680 * _2680) * 3.141590118408203125));
    float _2716 = (((((_2687 * _2604) + _954) * cbLight._m0[_2641].x) * _2706) * _2329) + ((((cbLight._m0[_2553].x * _2295) * ((_2603 * _2604) + _954)) * _2627) * _2342);
    float _2717 = (((((_2687 * _2606) + _956) * cbLight._m0[_2641].y) * _2706) * _2329) + ((((cbLight._m0[_2553].y * _2297) * ((_2603 * _2606) + _956)) * _2627) * _2342);
    float _2718 = (((((_2687 * _2607) + _957) * cbLight._m0[_2641].z) * _2706) * _2329) + ((((cbLight._m0[_2553].z * _2299) * ((_2603 * _2607) + _957)) * _2627) * _2342);
    float _2774;
    float _2776;
    float _2778;
    if (_2382)
    {
        _2774 = _2716;
        _2776 = _2717;
        _2778 = _2718;
    }
    else
    {
        uint _2780 = _2306 + 2u;
        uint _2784 = _2306 + 10u;
        float _2798 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2780].w)) * _794) * 0.949999988079071044921875);
        float _2799 = _2798 * _2798;
        float _2800 = cbLight._m0[_2780].x + _871;
        float _2801 = cbLight._m0[_2780].y + _872;
        float _2802 = cbLight._m0[_2780].z + _873;
        float _2806 = inversesqrt(dot(vec3(_2800, _2801, _2802), vec3(_2800, _2801, _2802)));
        float _2807 = _2806 * _2800;
        float _2808 = _2806 * _2801;
        float _2809 = _2806 * _2802;
        float _2810 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2780].xyz));
        float _4814 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2813 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
        float _2814 = dot(vec3(_791, _792, _793), vec3(_2807, _2808, _2809));
        float _4825 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2817 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
        float _2818 = dot(vec3(cbLight._m0[_2780].xyz), vec3(_2807, _2808, _2809));
        float _4836 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        float _2822 = _2799 * _2799;
        float _2826 = ((_2817 * _2817) * (_2822 + (-1.0))) + 1.0;
        float _2833 = exp2(log2(1.0 - (isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0)))) * 5.0);
        float _2840 = 1.0 - _2799;
        float _2850 = (0.5 / (((_2582 * ((_2813 * _2840) + _2799)) + 9.9999999392252902907785028219223e-09) + (((_2582 * _2840) + _2799) * _2813))) * _2813;
        float _4847 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
        float _2852 = (isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0))) * (_2822 / ((_2826 * _2826) * 3.141590118408203125));
        float _2853 = isnan(1.0) ? _2321 : (isnan(_2321) ? 1.0 : min(_2321, 1.0));
        _2774 = (((((_2833 * _2604) + _954) * cbLight._m0[_2784].x) * _2852) * _2853) + _2716;
        _2776 = (((((_2833 * _2606) + _956) * cbLight._m0[_2784].y) * _2852) * _2853) + _2717;
        _2778 = (((((_2833 * _2607) + _957) * cbLight._m0[_2784].z) * _2852) * _2853) + _2718;
    }
    float _2884;
    float _2886;
    float _2888;
    if (_2491)
    {
        _2884 = _2774;
        _2886 = _2776;
        _2888 = _2778;
    }
    else
    {
        uint _2895 = _2306 + 3u;
        uint _2899 = _2306 + 11u;
        float _2913 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2895].w)) * _794) * 0.949999988079071044921875);
        float _2914 = _2913 * _2913;
        float _2915 = cbLight._m0[_2895].x + _871;
        float _2916 = cbLight._m0[_2895].y + _872;
        float _2917 = cbLight._m0[_2895].z + _873;
        float _2921 = inversesqrt(dot(vec3(_2915, _2916, _2917), vec3(_2915, _2916, _2917)));
        float _2922 = _2921 * _2915;
        float _2923 = _2921 * _2916;
        float _2924 = _2921 * _2917;
        float _2925 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2895].xyz));
        float _4863 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
        float _2928 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
        float _2929 = dot(vec3(_791, _792, _793), vec3(_2922, _2923, _2924));
        float _4874 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
        float _2932 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
        float _2933 = dot(vec3(cbLight._m0[_2895].xyz), vec3(_2922, _2923, _2924));
        float _4885 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
        float _2937 = _2914 * _2914;
        float _2941 = ((_2932 * _2932) * (_2937 + (-1.0))) + 1.0;
        float _2948 = exp2(log2(1.0 - (isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0)))) * 5.0);
        float _2955 = 1.0 - _2914;
        float _2965 = (0.5 / (((_2582 * ((_2928 * _2955) + _2914)) + 9.9999999392252902907785028219223e-09) + (((_2582 * _2955) + _2914) * _2928))) * _2928;
        float _4896 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
        float _2967 = (isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0))) * (_2937 / ((_2941 * _2941) * 3.141590118408203125));
        float _2968 = isnan(1.0) ? _2322 : (isnan(_2322) ? 1.0 : min(_2322, 1.0));
        _2884 = (((((_2948 * _2604) + _954) * cbLight._m0[_2899].x) * _2967) * _2968) + _2774;
        _2886 = (((((_2948 * _2606) + _956) * cbLight._m0[_2899].y) * _2967) * _2968) + _2776;
        _2888 = (((((_2948 * _2607) + _957) * cbLight._m0[_2899].z) * _2967) * _2968) + _2778;
    }
    float _3033;
    float _3035;
    float _3037;
    float _3039;
    float _3041;
    float _3043;
    if (_2304.y == 0u)
    {
        uvec4 _2989 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2990 = _2989.x;
        uint _3001 = uint((float(_2989.y) * floor(float(uint(cbSceneParam._m0[85u].y * _892) / _2990))) + floor(float(uint(cbSceneParam._m0[85u].x * _891) / _2990)));
        float _3011 = (log2(_2082 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3012 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
        uint _3015 = uint(isnan(14.0) ? _3012 : (isnan(_3012) ? 14.0 : min(_3012, 14.0)));
        uvec4 _3020 = texelFetch(g_lightClusterGridBuffer, int(((_3015 << 2u) + (_3001 << 6u)) >> 2u));
        uint _3021 = _3020.x;
        uint _3022 = _2989.z;
        float _3100;
        float _3102;
        float _3104;
        float _3106;
        float _3108;
        float _3110;
        if (((((1u << ((_3022 >> 4u) & 15u)) + 4294967295u) & _3021) == 0u) || ((_3022 & 240u) == 0u))
        {
            _3100 = 0.0;
            _3102 = 0.0;
            _3104 = 0.0;
            _3106 = 0.0;
            _3108 = 0.0;
            _3110 = 0.0;
        }
        else
        {
            float _3101;
            float _3103;
            float _3105;
            float _3107;
            float _3109;
            float _3111;
            float _3252 = 0.0;
            float _3253 = 0.0;
            float _3254 = 0.0;
            float _3255 = 0.0;
            float _3256 = 0.0;
            float _3257 = 0.0;
            uint _3258 = 0u;
            uint _3267;
            bool _3268;
            for (;;)
            {
                _3267 = texelFetch(g_lightClassification, int((((_3015 << 5u) + (_3001 << 9u)) + (_3258 << 2u)) >> 2u)).x;
                _3268 = _3267 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3268)
                {
                    frontier_phi_73_pred = _3257;
                    frontier_phi_73_pred_1 = _3256;
                    frontier_phi_73_pred_2 = _3255;
                    frontier_phi_73_pred_3 = _3254;
                    frontier_phi_73_pred_4 = _3253;
                    frontier_phi_73_pred_5 = _3252;
                }
                else
                {
                    float _3397;
                    float _3398;
                    float _3399;
                    float _3400;
                    float _3401;
                    float _3402;
                    uint _3403;
                    _3397 = _3252;
                    _3398 = _3253;
                    _3399 = _3254;
                    _3400 = _3255;
                    _3401 = _3256;
                    _3402 = _3257;
                    _3403 = _3267;
                    float _3324;
                    float _3325;
                    float _3326;
                    float _3327;
                    float _3328;
                    float _3329;
                    for (;;)
                    {
                        uint _3407 = uint(findLSB(_3403)) + (_3258 << 5u);
                        uint _3404 = (_3403 + 4294967295u) & _3403;
                        uint _3409 = _3407 * 48u;
                        vec4 _3423 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3409)).x, texelFetch(g_PointLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3409 + 3u)).x));
                        uint _3429 = (_3407 * 48u) + 4u;
                        vec4 _3442 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3429)).x, texelFetch(g_PointLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3429 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3429 + 3u)).x));
                        uint _3448 = (_3407 * 48u) + 8u;
                        vec3 _3459 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3448)).x, texelFetch(g_PointLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3448 + 2u)).x));
                        float _3463 = _3423.x - _2080;
                        float _3464 = _3423.y - _2081;
                        float _3465 = _3423.z - _2082;
                        float _3466 = dot(vec3(_3463, _3464, _3465), vec3(_3463, _3464, _3465));
                        float _3469 = inversesqrt(_3466);
                        float _3470 = _3469 * _3463;
                        float _3471 = _3469 * _3464;
                        float _3472 = _3469 * _3465;
                        float _3473 = dot(vec3(_910, _913, _916), vec3(_3470, _3471, _3472));
                        float _3478 = 1.0 - (_3466 * _3423.w);
                        float _4922 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                        float _3479 = isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0));
                        float _3480 = sqrt(_3466) * _3442.w;
                        float _3483 = 1.39999997615814208984375 / (_3480 + 1.39999997615814208984375);
                        float _3484 = _3483 * _3483;
                        float _3487 = ((1.0 - _3484) * _3473) + _3484;
                        float _3490 = _3480 * _3480;
                        float _3494 = ((isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0))) * _3479) / ((_3490 * 0.699999988079071044921875) + 1.0);
                        float _3498 = (-0.0) - _2080;
                        float _3499 = (-0.0) - _2081;
                        float _3500 = (-0.0) - _2082;
                        float _3504 = inversesqrt(dot(vec3(_3498, _3499, _3500), vec3(_3498, _3499, _3500)));
                        float _3505 = _3504 * _3498;
                        float _3506 = _3504 * _3499;
                        float _3507 = _3504 * _3500;
                        float _3514 = exp2(log2(1.0 / ((_3490 * 3.5) + 5.0)) * 0.25);
                        float _3515 = 1.0 - _985;
                        float _3522 = sqrt(1.0 - ((1.0 - (_3515 * _3515)) * (1.0 - (_3514 * _3514))));
                        float _3523 = _3522 * _3522;
                        float _3524 = _3523 * _3523;
                        float _3525 = _3505 + _3470;
                        float _3526 = _3506 + _3471;
                        float _3527 = _3507 + _3472;
                        float _3531 = inversesqrt(dot(vec3(_3525, _3526, _3527), vec3(_3525, _3526, _3527)));
                        float _3535 = dot(vec3(_910, _913, _916), vec3(_3505, _3506, _3507));
                        float _4938 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                        float _3538 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                        float _3539 = dot(vec3(_910, _913, _916), vec3(_3531 * _3525, _3531 * _3526, _3531 * _3527));
                        float _4949 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                        float _3542 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
                        float _3546 = ((_3542 * _3542) * (_3524 + (-1.0))) + 1.0;
                        float _3547 = _3483 * _3523;
                        float _3548 = _3547 * _3547;
                        float _3551 = ((1.0 - _3548) * _3473) + _3548;
                        float _4960 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                        float _3552 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
                        float _3553 = 1.0 - _3523;
                        float _3563 = (0.5 / (((_3552 * ((_3538 * _3553) + _3523)) + 9.9999999392252902907785028219223e-09) + (((_3552 * _3553) + _3523) * _3538))) * _3552;
                        float _4971 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                        float _3574 = (((_3524 * 3.1415927410125732421875) * (isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0)))) / ((_3546 * _3546) * ((_3490 * 2.1991131305694580078125) + 3.141590118408203125))) * _3479;
                        _3327 = (_3494 * _3442.x) + _3400;
                        _3328 = (_3494 * _3442.y) + _3401;
                        _3329 = (_3494 * _3442.z) + _3402;
                        _3324 = (_3574 * _3459.x) + _3397;
                        _3325 = (_3574 * _3459.y) + _3398;
                        _3326 = (_3574 * _3459.z) + _3399;
                        if (_3404 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3397 = _3324;
                            _3398 = _3325;
                            _3399 = _3326;
                            _3400 = _3327;
                            _3401 = _3328;
                            _3402 = _3329;
                            _3403 = _3404;
                        }
                    }
                    frontier_phi_73_pred = _3329;
                    frontier_phi_73_pred_1 = _3328;
                    frontier_phi_73_pred_2 = _3327;
                    frontier_phi_73_pred_3 = _3326;
                    frontier_phi_73_pred_4 = _3325;
                    frontier_phi_73_pred_5 = _3324;
                }
                _3111 = frontier_phi_73_pred;
                _3109 = frontier_phi_73_pred_1;
                _3107 = frontier_phi_73_pred_2;
                _3105 = frontier_phi_73_pred_3;
                _3103 = frontier_phi_73_pred_4;
                _3101 = frontier_phi_73_pred_5;
                uint _3259 = _3258 + 1u;
                if (_3259 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3252 = _3101;
                    _3253 = _3103;
                    _3254 = _3105;
                    _3255 = _3107;
                    _3256 = _3109;
                    _3257 = _3111;
                    _3258 = _3259;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3100 = _3101;
            _3102 = _3103;
            _3104 = _3105;
            _3106 = _3107;
            _3108 = _3109;
            _3110 = _3111;
        }
        uvec4 _3114 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3115 = _3114.z;
        uint _3117 = (_3115 >> 8u) & 15u;
        float _3220;
        float _3222;
        float _3224;
        float _3226;
        float _3228;
        float _3230;
        if (((4294967295u << _3117) & _3021) == 0u)
        {
            _3220 = _3100;
            _3222 = _3102;
            _3224 = _3104;
            _3226 = _3106;
            _3228 = _3108;
            _3230 = _3110;
        }
        else
        {
            float _3245 = inversesqrt(dot(vec3(_2080, _2081, _2082), vec3(_2080, _2081, _2082)));
            float _3246 = _3245 * _2080;
            float _3247 = _3245 * _2081;
            float _3248 = _3245 * _2082;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3117 < ((_3115 >> 12u) & 15u))
            {
                float _3221;
                float _3223;
                float _3225;
                float _3227;
                float _3229;
                float _3231;
                float _3380 = _3100;
                float _3381 = _3102;
                float _3382 = _3104;
                float _3383 = _3106;
                float _3384 = _3108;
                float _3385 = _3110;
                uint _3386 = _3117;
                uint _3395;
                bool _3396;
                for (;;)
                {
                    _3395 = texelFetch(g_lightClassification, int((((_3015 << 5u) + (_3001 << 9u)) + (_3386 << 2u)) >> 2u)).x;
                    _3396 = _3395 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3396)
                    {
                        frontier_phi_84_pred = _3384;
                        frontier_phi_84_pred_1 = _3383;
                        frontier_phi_84_pred_2 = _3382;
                        frontier_phi_84_pred_3 = _3381;
                        frontier_phi_84_pred_4 = _3380;
                        frontier_phi_84_pred_5 = _3385;
                    }
                    else
                    {
                        float _3588;
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3883;
                        float _3884;
                        float _3885;
                        float _3886;
                        float _3887;
                        float _3888;
                        float _3601 = _3380;
                        float _3602 = _3381;
                        float _3603 = _3382;
                        float _3604 = _3383;
                        float _3605 = _3384;
                        float _3606 = _3385;
                        uint _3607 = _3395;
                        uint _3608;
                        vec4 _3633;
                        float _3634;
                        vec4 _3649;
                        vec3 _3661;
                        vec4 _3676;
                        vec4 _3692;
                        float _3739;
                        bool _3740;
                        for (;;)
                        {
                            uint _3618 = ((_3386 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3607));
                            _3608 = (_3607 + 4294967295u) & _3607;
                            uint _3620 = _3618 * 40u;
                            _3633 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3620)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 3u)).x));
                            _3634 = _3633.w;
                            uint _3636 = (_3618 * 40u) + 4u;
                            _3649 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3636)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 3u)).x));
                            uint _3651 = (_3618 * 40u) + 8u;
                            _3661 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3651)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 2u)).x));
                            uint _3663 = (_3618 * 40u) + 16u;
                            _3676 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3663)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 3u)).x));
                            uint _3679 = (_3618 * 40u) + 20u;
                            _3692 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3679)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 3u)).x));
                            uint _3695 = (_3618 * 40u) + 24u;
                            vec4 _3708 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3695)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 3u)).x));
                            uint _3714 = (_3618 * 40u) + 28u;
                            vec4 _3727 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3714)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 3u)).x));
                            _3739 = fma(_2082, _3727.z, fma(_2081, _3727.y, _3727.x * _2080)) + _3727.w;
                            _3740 = !((fma(_2082, _3708.z, fma(_2081, _3708.y, _3708.x * _2080)) + _3708.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3740)
                            {
                                float _3767 = _3633.x - _2080;
                                float _3768 = _3633.y - _2081;
                                float _3769 = _3633.z - _2082;
                                float _3770 = dot(vec3(_3767, _3768, _3769), vec3(_3767, _3768, _3769));
                                float _3773 = inversesqrt(_3770);
                                float _3774 = _3773 * _3767;
                                float _3775 = _3773 * _3768;
                                float _3776 = _3773 * _3769;
                                float _3780 = 1.0 - (_3770 / (_3634 * _3634));
                                float _4982 = isnan(0.0) ? _3780 : (isnan(_3780) ? 0.0 : max(_3780, 0.0));
                                float _3781 = isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0));
                                float _3785 = sqrt(_3770) * _3649.w;
                                float _3787 = 1.39999997615814208984375 / (_3785 + 1.39999997615814208984375);
                                float _3788 = _3787 * _3787;
                                float _3791 = ((1.0 - _3788) * dot(vec3(_3774, _3775, _3776), vec3(_910, _913, _916))) + _3788;
                                float _3794 = _3785 * _3785;
                                float _3798 = (fma(_2082, _3676.z, fma(_2081, _3676.y, _3676.x * _2080)) + _3676.w) / _3739;
                                float _3799 = (fma(_2082, _3692.z, fma(_2081, _3692.y, _3692.x * _2080)) + _3692.w) / _3739;
                                float _3803 = 1.0 - dot(vec2(_3798, _3799), vec2(_3798, _3799));
                                float _4998 = isnan(0.0) ? _3803 : (isnan(_3803) ? 0.0 : max(_3803, 0.0));
                                float _3804 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
                                float _3805 = _3804 * (((isnan(0.0) ? _3791 : (isnan(_3791) ? 0.0 : max(_3791, 0.0))) * _3781) / ((_3794 * 0.699999988079071044921875) + 1.0));
                                float _3817 = exp2(log2(1.0 / ((_3794 * 3.5) + 5.0)) * 0.25);
                                float _3818 = 1.0 - _985;
                                float _3825 = sqrt(1.0 - ((1.0 - (_3818 * _3818)) * (1.0 - (_3817 * _3817))));
                                float _3826 = _3825 * _3825;
                                float _3827 = _3826 * _3826;
                                float _3828 = _3774 - _3246;
                                float _3829 = _3775 - _3247;
                                float _3830 = _3776 - _3248;
                                float _3834 = inversesqrt(dot(vec3(_3828, _3829, _3830), vec3(_3828, _3829, _3830)));
                                float _3838 = dot(vec3(_910, _913, _916), vec3((-0.0) - _3246, (-0.0) - _3247, (-0.0) - _3248));
                                float _5009 = isnan(0.0) ? _3838 : (isnan(_3838) ? 0.0 : max(_3838, 0.0));
                                float _3841 = isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0));
                                float _3842 = dot(vec3(_910, _913, _916), vec3(_3834 * _3828, _3834 * _3829, _3834 * _3830));
                                float _5020 = isnan(0.0) ? _3842 : (isnan(_3842) ? 0.0 : max(_3842, 0.0));
                                float _3845 = isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0));
                                float _3849 = ((_3845 * _3845) * (_3827 + (-1.0))) + 1.0;
                                float _3850 = _3787 * _3826;
                                float _3851 = _3850 * _3850;
                                float _3857 = ((1.0 - _3851) * dot(vec3(_910, _913, _916), vec3(_3774, _3775, _3776))) + _3851;
                                float _5031 = isnan(0.0) ? _3857 : (isnan(_3857) ? 0.0 : max(_3857, 0.0));
                                float _3858 = isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0));
                                float _3859 = 1.0 - _3826;
                                float _3869 = (0.5 / (((_3858 * ((_3841 * _3859) + _3826)) + 9.9999999392252902907785028219223e-09) + (((_3858 * _3859) + _3826) * _3841))) * _3858;
                                float _5042 = isnan(0.0) ? _3869 : (isnan(_3869) ? 0.0 : max(_3869, 0.0));
                                float _3879 = (_3804 * _3781) * (((_3827 * 3.1415927410125732421875) * (isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0)))) / ((_3849 * _3849) * ((_3794 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3805 * _3649.y;
                                frontier_phi_90_pred_1 = _3805 * _3649.x;
                                frontier_phi_90_pred_2 = _3879 * _3661.z;
                                frontier_phi_90_pred_3 = _3879 * _3661.y;
                                frontier_phi_90_pred_4 = _3879 * _3661.x;
                                frontier_phi_90_pred_5 = _3805 * _3649.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3887 = frontier_phi_90_pred;
                            _3886 = frontier_phi_90_pred_1;
                            _3885 = frontier_phi_90_pred_2;
                            _3884 = frontier_phi_90_pred_3;
                            _3883 = frontier_phi_90_pred_4;
                            _3888 = frontier_phi_90_pred_5;
                            _3591 = _3886 + _3604;
                            _3592 = _3887 + _3605;
                            _3593 = _3888 + _3606;
                            _3588 = _3883 + _3601;
                            _3589 = _3884 + _3602;
                            _3590 = _3885 + _3603;
                            if (_3608 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3601 = _3588;
                                _3602 = _3589;
                                _3603 = _3590;
                                _3604 = _3591;
                                _3605 = _3592;
                                _3606 = _3593;
                                _3607 = _3608;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3592;
                        frontier_phi_84_pred_1 = _3591;
                        frontier_phi_84_pred_2 = _3590;
                        frontier_phi_84_pred_3 = _3589;
                        frontier_phi_84_pred_4 = _3588;
                        frontier_phi_84_pred_5 = _3593;
                    }
                    _3229 = frontier_phi_84_pred;
                    _3227 = frontier_phi_84_pred_1;
                    _3225 = frontier_phi_84_pred_2;
                    _3223 = frontier_phi_84_pred_3;
                    _3221 = frontier_phi_84_pred_4;
                    _3231 = frontier_phi_84_pred_5;
                    uint _3387 = _3386 + 1u;
                    if (_3387 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3380 = _3221;
                        _3381 = _3223;
                        _3382 = _3225;
                        _3383 = _3227;
                        _3384 = _3229;
                        _3385 = _3231;
                        _3386 = _3387;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3231;
                frontier_phi_65_66_ladder_1 = _3227;
                frontier_phi_65_66_ladder_2 = _3229;
                frontier_phi_65_66_ladder_3 = _3223;
                frontier_phi_65_66_ladder_4 = _3221;
                frontier_phi_65_66_ladder_5 = _3225;
            }
            else
            {
                frontier_phi_65_66_ladder = _3110;
                frontier_phi_65_66_ladder_1 = _3106;
                frontier_phi_65_66_ladder_2 = _3108;
                frontier_phi_65_66_ladder_3 = _3102;
                frontier_phi_65_66_ladder_4 = _3100;
                frontier_phi_65_66_ladder_5 = _3104;
            }
            _3220 = frontier_phi_65_66_ladder_4;
            _3222 = frontier_phi_65_66_ladder_3;
            _3224 = frontier_phi_65_66_ladder_5;
            _3226 = frontier_phi_65_66_ladder_1;
            _3228 = frontier_phi_65_66_ladder_2;
            _3230 = frontier_phi_65_66_ladder;
        }
        float _3235 = isnan(1.0) ? _969 : (isnan(_969) ? 1.0 : min(_969, 1.0));
        _3033 = (_3235 * _3226) + _2546;
        _3035 = (_3235 * _3228) + _2548;
        _3037 = (_3235 * _3230) + _2550;
        _3039 = ((_3220 * _954) * _3235) + _2884;
        _3041 = ((_3222 * _956) * _3235) + _2886;
        _3043 = ((_3224 * _957) * _3235) + _2888;
    }
    else
    {
        _3033 = _2546;
        _3035 = _2548;
        _3037 = _2550;
        _3039 = _2884;
        _3041 = _2886;
        _3043 = _2888;
    }
    float _5058 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _5069 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _5080 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _3060 = ((isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0))) * (_3033 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _969))) + ((_3039 + ((isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0))) * _1811)) * cbPerFrame._m0[3u].x);
    float _3061 = ((isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0))) * (_3035 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _969))) + ((_3041 + ((isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0))) * _1811)) * cbPerFrame._m0[3u].x);
    float _3062 = ((isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0))) * (_3037 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _969))) + ((_3043 + ((isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0))) * _1811)) * cbPerFrame._m0[3u].x);
    uint _3063 = _929 + 6u;
    float _3071 = _891 / cbSceneParam._m0[86u].x;
    float _3072 = _892 / cbSceneParam._m0[86u].y;
    vec4 _3086 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3071, _3072, (log2((isnan(cbSceneParam._m0[77u].w) ? _814 : (isnan(_814) ? cbSceneParam._m0[77u].w : min(_814, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3088 = _3086.x;
    float _3089 = _3086.y;
    float _3090 = _3086.z;
    float _3091 = _3086.w;
    float _3162;
    float _3164;
    float _3166;
    float _3168;
    if (_814 > cbSceneParam._m0[78u].w)
    {
        float _3125 = isnan(_814) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _814 : min(cbSceneParam._m0[80u].w, _814));
        float _3126 = _3125 / _814;
        float _3137 = _3126 * _864;
        float _3138 = _865 * _3126;
        float _3139 = (-0.0) - _3138;
        float _3140 = _3126 * _866;
        float _3142 = (cbSceneParam._m0[77u].w * _3139) / _3125;
        float _3143 = _3142 + cbSceneParam._m0[79u].w;
        float _3144 = cbSceneParam._m0[79u].w - _3138;
        float _3150 = sqrt(((_3137 * _3137) + (_3138 * _3138)) + (_3140 * _3140));
        float _3153 = (1.0 - (cbSceneParam._m0[77u].w / _3125)) * _3150;
        float _3158 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3160 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3337;
        if (abs((_3139 - _3142) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3337 = ((((_3143 > 0.0) ? exp2(_3158 * _3143) : (2.0 - exp2(_3160 * _3143))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3153;
        }
        else
        {
            float _3281 = 1.0 / cbSceneParam._m0[80u].x;
            float _3282 = isnan(_3144) ? _3143 : (isnan(_3143) ? _3144 : max(_3143, _3144));
            float _3283 = isnan(_3144) ? _3143 : (isnan(_3143) ? _3144 : min(_3143, _3144));
            float _3292 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : min(_3282, 0.0));
            float _3293 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : min(_3283, 0.0));
            _3337 = ((abs(_3150 / _3139) * cbSceneParam._m0[80u].y) * ((((_3292 - _3293) * 2.0) - ((exp2(_3158 * (isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0)))) - exp2(_3158 * (isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0))))) * _3281)) - ((exp2(_3160 * _3292) - exp2(_3160 * _3293)) * _3281))) + (_3153 * cbSceneParam._m0[80u].z);
        }
        vec4 _3339 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3071, _3072, 1.0), 0.0);
        float _3348 = exp2((_3337 * (-1.44269502162933349609375)) * (1.0 - _3339.w));
        float _3349 = log2(_3348);
        float _3365 = log2(_3091);
        _3162 = (exp2(_3365 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3349 * cbSceneParam._m0[78u].x)) * _3339.x) / cbSceneParam._m0[78u].x)) + _3088;
        _3164 = (exp2(_3365 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3349 * cbSceneParam._m0[78u].y)) * _3339.y) / cbSceneParam._m0[78u].y)) + _3089;
        _3166 = (exp2(_3365 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3349 * cbSceneParam._m0[78u].z)) * _3339.z) / cbSceneParam._m0[78u].z)) + _3090;
        _3168 = _3348 * _3091;
    }
    else
    {
        _3162 = _3088;
        _3164 = _3089;
        _3166 = _3090;
        _3168 = _3091;
    }
    bool _3375;
    vec4 _3178;
    vec4 _3200;
    float _3202;
    float _3206;
    float _3207;
    float _3208;
    float _3209;
    bool _3219;
    for (;;)
    {
        _3178 = cbMatDynParam._m0[0u];
        float _3180 = roundEven(_3178.y);
        bool _3181 = _3180 == 3.0;
        float _3182 = log2(_3168);
        float _3189 = exp2(_3182 * cbSceneParam._m0[78u].x) * _3060;
        float _3190 = exp2(_3182 * cbSceneParam._m0[78u].y) * _3061;
        float _3191 = exp2(_3182 * cbSceneParam._m0[78u].z) * _3062;
        float _3198 = _880 + (-0.5);
        _3200 = cbMtdParam._m0[1u];
        _3202 = _3200.y * _3198;
        float _3205 = (_3180 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3206 = _3205 * (_3181 ? _3189 : (_3189 + (cbSceneParam._m0[72u].w * _3162)));
        _3207 = _3205 * (_3181 ? _3190 : (_3190 + (cbSceneParam._m0[72u].w * _3164)));
        _3208 = _3205 * (_3181 ? _3191 : (_3191 + (cbSceneParam._m0[72u].w * _3166)));
        _3209 = _3198 * 0.999000012874603271484375;
        _3219 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3219)
        {
            if ((cbInstanceData._m0[_929 + 7u].x + _3209) < 0.5)
            {
                _3375 = true;
                break;
            }
        }
        uint _3316 = _930 + uint(_3178.w);
        if ((cbInstanceData._m0[_3316].w < 1.0) && ((cbInstanceData._m0[_3316].w + _3209) < 0.5))
        {
            _3375 = true;
            break;
        }
        if ((_3202 + 1.0) < _3200.x)
        {
            _3375 = true;
            break;
        }
        _3375 = false;
        break;
    }
    float _3579;
    if (_3375)
    {
        discard_state = true;
        _3579 = 0.0;
    }
    else
    {
        _3579 = cbInstanceData._m0[_3063].w;
    }
    SV_Target.x = _3206;
    SV_Target.y = _3207;
    SV_Target.z = _3208;
    SV_Target.w = _3579;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3063].w;
    discard_exit();
}


