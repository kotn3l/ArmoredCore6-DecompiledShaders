#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1371;
float _3780;
float _3781;
float _3782;
float _3783;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250;
    float _251;
    float _252;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _250 = (-0.0) - _236;
        _251 = (-0.0) - _237;
        _252 = (-0.0) - _238;
    }
    else
    {
        _250 = _236;
        _251 = _237;
        _252 = _238;
    }
    vec4 _272 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _299 = cbMtdParam._m0[15u].y * texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _307 = ((cbMtdParam._m0[14u].z * (-1.39999997615814208984375)) * (((1.0 - _272.x) * 2.0) - _299)) + 1.0;
    float _3792 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _308 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    vec4 _321 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    vec4 _338 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _340 = _338.x;
    float _341 = _338.y;
    float _342 = _338.z;
    float _349 = ((_321.x - _340) * _308) + _340;
    float _350 = ((_321.y - _341) * _308) + _341;
    float _351 = ((_321.z - _342) * _308) + _342;
    float _357 = (((((1.0 - _272.y) * 2.0) - _299) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].w) + 1.0;
    float _3803 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _358 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    vec4 _370 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _381 = ((_370.x - _349) * _358) + _349;
    float _382 = ((_370.y - _350) * _358) + _350;
    float _383 = ((_370.z - _351) * _358) + _351;
    float _389 = (((((1.0 - _272.z) * 2.0) - _299) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].z) + 1.0;
    float _3814 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    vec4 _402 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.z) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.w) + cbTextureTilingScale._m0[17u].w));
    float _415 = ((_402.z - _383) * _390) + _383;
    float _418 = ((((_402.x - _381) * _390) + _381) * 2.0) + (-1.0);
    float _420 = ((((_402.y - _382) * _390) + _382) * 2.0) + (-1.0);
    float _421 = dot(vec2(_418, _420), vec2(_418, _420));
    float _3825 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _426 = sqrt(1.0 - (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))));
    float _427 = fma(_426, _250, 0.0);
    float _428 = fma(_426, _251, 0.0);
    float _429 = fma(_426, _252, 0.0);
    float _438 = exp2(log2(inversesqrt(dot(vec3(_427, _428, _429), vec3(_427, _428, _429))) * _428) * cbMtdParam._m0[14u].x) * cbMtdParam._m0[14u].y;
    float _3836 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    vec4 _458 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _463 = _458.x * cbMtdParam._m0[10u].x;
    float _464 = _458.y * cbMtdParam._m0[10u].y;
    float _465 = _458.z * cbMtdParam._m0[10u].z;
    vec4 _484 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _498 = (((_484.x * cbMtdParam._m0[11u].x) - _463) * _308) + _463;
    float _499 = (((_484.y * cbMtdParam._m0[11u].y) - _464) * _308) + _464;
    float _500 = (((_484.z * cbMtdParam._m0[11u].z) - _465) * _308) + _465;
    vec4 _518 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _532 = (((_518.x * cbMtdParam._m0[12u].x) - _498) * _358) + _498;
    float _533 = (((_518.y * cbMtdParam._m0[12u].y) - _499) * _358) + _499;
    float _534 = (((_518.z * cbMtdParam._m0[12u].z) - _500) * _358) + _500;
    vec4 _553 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w));
    vec4 _587 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _595 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * ((((_553.x * cbMtdParam._m0[13u].x) - _532) * _390) + _532)) * _587.x;
    float _598 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * ((((_553.y * cbMtdParam._m0[13u].y) - _533) * _390) + _533)) * _587.y;
    float _601 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * ((((_553.z * cbMtdParam._m0[13u].z) - _534) * _390) + _534)) * _587.z;
    vec4 _613 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _624 = ((_613.x - _595) * _439) + _595;
    float _625 = ((_613.y - _598) * _439) + _598;
    float _626 = ((_613.z - _601) * _439) + _601;
    vec4 _639 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _641 = _639.x;
    float _658 = ((texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w)).x - _641) * _308) + _641;
    float _675 = ((texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w)).x - _658) * _358) + _658;
    vec4 _704 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _706 = _704.x;
    float _3847 = isnan(0.0) ? cbMtdParam._m0[14u].w : (isnan(cbMtdParam._m0[14u].w) ? 0.0 : max(cbMtdParam._m0[14u].w, 0.0));
    float _710 = (((((texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.z) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.w) + cbTextureTilingScale._m0[10u].w)).x - _675) * _390) + _675) - _706) * (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0)))) + _706;
    float _712 = _710 - (_710 * _439);
    vec4 _724 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _731 = (_724.x * 2.0) + (-1.0);
    float _732 = (_724.y * 2.0) + (-1.0);
    float _733 = dot(vec2(_731, _732), vec2(_731, _732));
    float _3858 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _741 = ((_724.z - _415) * _439) + _415;
    float _750 = ((sqrt(1.0 - (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0)))) - _426) * _439) + _426;
    vec4 _764 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _774 = (((_731 - _418) * _439) + _418) + (((_764.x * 2.0) + (-1.0)) * cbMtdParam._m0[15u].x);
    float _775 = (((_732 - _420) * _439) + _420) + (((_764.y * 2.0) + (-1.0)) * cbMtdParam._m0[15u].x);
    float _778 = fma(_750, _250, fma(_775, _242 * TANGENT.x, (_228 * _220) * _774));
    float _781 = fma(_750, _251, fma(_775, _242 * TANGENT.y, (_228 * _221) * _774));
    float _784 = fma(_750, _252, fma(_775, _242 * TANGENT.z, (_228 * _222) * _774));
    float _788 = inversesqrt(dot(vec3(_778, _781, _784), vec3(_778, _781, _784)));
    float _789 = _788 * _778;
    float _790 = _788 * _781;
    float _791 = _788 * _784;
    float _3869 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _792 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _3880 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _3891 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _3902 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _3913 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _796 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _812 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _852 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _862 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _852);
    float _863 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _852);
    float _864 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _852);
    float _868 = inversesqrt(dot(vec3(_862, _863, _864), vec3(_862, _863, _864)));
    float _869 = _862 * _868;
    float _870 = _863 * _868;
    float _871 = _864 * _868;
    vec4 _876 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _878 = _876.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1050 = sqrt(((_862 * _862) + (_863 * _863)) + (_864 * _864));
        float _1056 = (cbMatDynParam._m0[5u].x * _1050) + cbMatDynParam._m0[5u].y;
        float _3924 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1061 = (cbMatDynParam._m0[5u].z * _1050) + cbMatDynParam._m0[5u].w;
        float _3935 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) - _1057)) + _1057) < ((_878 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _889 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _890 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _908 = fma(_791, cbSceneParam._m0[5u].z, fma(_790, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _789));
    float _911 = fma(_791, cbSceneParam._m0[6u].z, fma(_790, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _789));
    float _914 = fma(_791, cbSceneParam._m0[7u].z, fma(_790, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _789));
    uint _927 = uint(roundEven(NORMAL.w)) * 13u;
    uint _928 = _927 + 9u;
    uint _929 = _928 + uint(cbMatDynParam._m0[0u].w);
    float _935 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) * cbInstanceData._m0[_929].x;
    float _936 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) * cbInstanceData._m0[_929].y;
    float _937 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) * cbInstanceData._m0[_929].z;
    float _3946 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _938 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _3957 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _939 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _3968 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _940 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _941 = 1.0 - _796;
    float _942 = _938 * _941;
    float _943 = _939 * _941;
    float _944 = _940 * _941;
    float _949 = (_938 + (-0.039999999105930328369140625)) * _796;
    float _950 = (_939 + (-0.039999999105930328369140625)) * _796;
    float _951 = (_940 + (-0.039999999105930328369140625)) * _796;
    float _952 = _949 + 0.039999999105930328369140625;
    float _954 = _950 + 0.039999999105930328369140625;
    float _955 = _951 + 0.039999999105930328369140625;
    vec4 _964 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _889, cbSceneParam._m0[86u].y * _890));
    float _967 = _964.x * TEXCOORD_4;
    float _968 = dot(vec3(_789, _790, _791), vec3(_869, _870, _871));
    float _971 = _968 * 2.0;
    float _975 = (_971 * _789) - _869;
    float _976 = (_971 * _790) - _870;
    float _977 = (_971 * _791) - _871;
    float _981 = abs(dot(vec3(_869, _870, _871), vec3(_789, _790, _791)));
    float _3979 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _983 = sqrt(_792);
    float _996 = exp2((_983 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_983 * 3.0));
    float _1002 = (1.0 - _996) * ((_983 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1003 = _996 * _983;
    float _1031 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1035 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1039 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1370;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1095 = fma(_1039, cbModelParam._m0[26u].z, fma(_1035, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1031));
        float _1099 = fma(_1039, cbModelParam._m0[27u].z, fma(_1035, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1031));
        float _1103 = fma(_1039, cbModelParam._m0[28u].z, fma(_1035, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1031));
        float _1128 = _1031 + _789;
        float _1129 = _1035 + _790;
        float _1130 = _1039 + _791;
        float _1140 = fma(_1130, cbModelParam._m0[26u].z, fma(_1129, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1128)) - _1095;
        float _1141 = fma(_1130, cbModelParam._m0[27u].z, fma(_1129, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1128)) - _1099;
        float _1142 = fma(_1130, cbModelParam._m0[28u].z, fma(_1129, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1128)) - _1103;
        float _1146 = inversesqrt(dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142)));
        float _1159 = ((_1146 * _1140) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1095 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1160 = ((_1146 * _1141) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1099 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1161 = ((_1146 * _1142) / cbModelParam._m0[34u].z) + ((((((_1103 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        float _1198 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1164.x + (-0.5));
        float _1200 = _1198 * (_1164.y + (-0.5));
        float _1201 = _1198 * (_1164.z + (-0.5));
        float _1208 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1171.x + (-0.5));
        float _1210 = _1208 * (_1171.y + (-0.5));
        float _1211 = _1208 * (_1171.z + (-0.5));
        float _1218 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1178.x + (-0.5));
        float _1220 = _1218 * (_1178.y + (-0.5));
        float _1221 = _1218 * (_1178.z + (-0.5));
        float _1228 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1185.x + (-0.5));
        float _1230 = _1228 * (_1185.y + (-0.5));
        float _1231 = _1228 * (_1185.z + (-0.5));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = _1199 * 0.5;
        float _1236 = _1209 * 0.5;
        float _1237 = _1219 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1252 = (dot(vec3(_789, _790, _791), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _4005 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1262 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _4016 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _4027 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (_1264 + 1.0))) + _1269) * _1232;
        float _1279 = _1200 * 0.5;
        float _1280 = _1210 * 0.5;
        float _1281 = _1220 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_789, _790, _791), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _4038 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _4049 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _4060 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_1306 + 1.0))) + _1311) * _1233;
        float _1321 = _1201 * 0.5;
        float _1322 = _1211 * 0.5;
        float _1323 = _1221 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1337 = (dot(vec3(_789, _790, _791), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _4071 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1346 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _4082 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _4093 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_1348 + 1.0))) + _1353) * _1234;
        _1370 = _1201;
        _1372 = _1200;
        _1373 = _1199;
        _1374 = _1211;
        _1375 = _1210;
        _1376 = _1209;
        _1377 = _1221;
        _1378 = _1220;
        _1379 = _1219;
        _1380 = _1234;
        _1381 = _1233;
        _1382 = _1232;
        _1383 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1384 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
        _1385 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
    }
    else
    {
        _1370 = _1371;
        _1372 = _1371;
        _1373 = _1371;
        _1374 = _1371;
        _1375 = _1371;
        _1376 = _1371;
        _1377 = _1371;
        _1378 = _1371;
        _1379 = _1371;
        _1380 = _1371;
        _1381 = _1371;
        _1382 = _1371;
        _1383 = 0.0;
        _1384 = 0.0;
        _1385 = 0.0;
    }
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1414 = fma(_1039, cbModelParam._m0[30u].z, fma(_1035, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1031));
        float _1418 = fma(_1039, cbModelParam._m0[31u].z, fma(_1035, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1031));
        float _1422 = fma(_1039, cbModelParam._m0[32u].z, fma(_1035, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1031));
        float _1445 = _1031 + _789;
        float _1446 = _1035 + _790;
        float _1447 = _1039 + _791;
        float _1457 = fma(_1447, cbModelParam._m0[30u].z, fma(_1446, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1445)) - _1414;
        float _1458 = fma(_1447, cbModelParam._m0[31u].z, fma(_1446, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1445)) - _1418;
        float _1459 = fma(_1447, cbModelParam._m0[32u].z, fma(_1446, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1445)) - _1422;
        float _1463 = inversesqrt(dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459)));
        float _1476 = ((_1463 * _1457) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1414 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1477 = ((_1463 * _1458) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1418 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1478 = ((_1463 * _1459) / cbModelParam._m0[35u].z) + ((((((_1422 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1480 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1487 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1494 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1501 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        float _1513 = exp2((_1480.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1480.x + (-0.5));
        float _1515 = _1513 * (_1480.y + (-0.5));
        float _1516 = _1513 * (_1480.z + (-0.5));
        float _1523 = exp2((_1487.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1487.x + (-0.5));
        float _1525 = _1523 * (_1487.y + (-0.5));
        float _1526 = _1523 * (_1487.z + (-0.5));
        float _1533 = exp2((_1494.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1494.x + (-0.5));
        float _1535 = _1533 * (_1494.y + (-0.5));
        float _1536 = _1533 * (_1494.z + (-0.5));
        float _1543 = exp2((_1501.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1501.x + (-0.5));
        float _1545 = _1543 * (_1501.y + (-0.5));
        float _1546 = _1543 * (_1501.z + (-0.5));
        float _1547 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1548 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1549 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1550 = _1514 * 0.5;
        float _1551 = _1524 * 0.5;
        float _1552 = _1534 * 0.5;
        float _1553 = dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552));
        float _1558 = (_1553 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1553);
        float _1566 = (dot(vec3(_789, _790, _791), vec3(_1558 * _1550, _1558 * _1551, _1558 * _1552)) + 1.0) * 0.5;
        float _4134 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1575 = sqrt(((_1551 * _1551) + (_1550 * _1550)) + (_1552 * _1552)) / (_1547 + 9.9999997473787516355514526367188e-06);
        float _4145 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1577 = _1576 * 2.0;
        float _1581 = (1.0 - _1576) / (_1576 + 1.0);
        float _4156 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1591 = ((((1.0 - _1582) * (_1577 + 2.0)) * exp2(log2(isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_1577 + 1.0))) + _1582) * _1547;
        float _1592 = _1515 * 0.5;
        float _1593 = _1525 * 0.5;
        float _1594 = _1535 * 0.5;
        float _1595 = dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594));
        float _1600 = (_1595 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1595);
        float _1608 = (dot(vec3(_789, _790, _791), vec3(_1600 * _1592, _1600 * _1593, _1600 * _1594)) + 1.0) * 0.5;
        float _4167 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1617 = sqrt(((_1593 * _1593) + (_1592 * _1592)) + (_1594 * _1594)) / (_1548 + 9.9999997473787516355514526367188e-06);
        float _4178 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1619 = _1618 * 2.0;
        float _1623 = (1.0 - _1618) / (_1618 + 1.0);
        float _4189 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1633 = ((((1.0 - _1624) * (_1619 + 2.0)) * exp2(log2(isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_1619 + 1.0))) + _1624) * _1548;
        float _1634 = _1516 * 0.5;
        float _1635 = _1526 * 0.5;
        float _1636 = _1536 * 0.5;
        float _1637 = dot(vec3(_1634, _1635, _1636), vec3(_1634, _1635, _1636));
        float _1642 = (_1637 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1637);
        float _1650 = (dot(vec3(_789, _790, _791), vec3(_1642 * _1634, _1642 * _1635, _1642 * _1636)) + 1.0) * 0.5;
        float _4200 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1659 = sqrt(((_1635 * _1635) + (_1634 * _1634)) + (_1636 * _1636)) / (_1549 + 9.9999997473787516355514526367188e-06);
        float _4211 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1661 = _1660 * 2.0;
        float _1665 = (1.0 - _1660) / (_1660 + 1.0);
        float _4222 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1675 = ((((1.0 - _1666) * (_1661 + 2.0)) * exp2(log2(isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_1661 + 1.0))) + _1666) * _1549;
        _1683 = _1516;
        _1684 = _1515;
        _1685 = _1514;
        _1686 = _1526;
        _1687 = _1525;
        _1688 = _1524;
        _1689 = _1536;
        _1690 = _1535;
        _1691 = _1534;
        _1692 = _1549;
        _1693 = _1548;
        _1694 = _1547;
        _1695 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)));
        _1696 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)));
        _1697 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)));
    }
    else
    {
        _1683 = _1371;
        _1684 = _1371;
        _1685 = _1371;
        _1686 = _1371;
        _1687 = _1371;
        _1688 = _1371;
        _1689 = _1371;
        _1690 = _1371;
        _1691 = _1371;
        _1692 = _1371;
        _1693 = _1371;
        _1694 = _1371;
        _1695 = 0.0;
        _1696 = 0.0;
        _1697 = 0.0;
    }
    float _1707 = (cbModelParam._m0[1u].x * (_1695 - _1383)) + _1383;
    float _1708 = (cbModelParam._m0[1u].x * (_1696 - _1384)) + _1384;
    float _1709 = (cbModelParam._m0[1u].x * (_1697 - _1385)) + _1385;
    float _1730 = fma(_1709, cbSceneParam._m0[89u].z, fma(_1708, cbSceneParam._m0[89u].y, _1707 * cbSceneParam._m0[89u].x));
    float _1733 = fma(_1709, cbSceneParam._m0[90u].z, fma(_1708, cbSceneParam._m0[90u].y, _1707 * cbSceneParam._m0[90u].x));
    float _1736 = fma(_1709, cbSceneParam._m0[91u].z, fma(_1708, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1707));
    float _1751 = _975 * 0.5;
    float _1752 = _976 * 0.5;
    float _1753 = _977 * 0.5;
    float _1754 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1685, _1688, _1691, _1694));
    float _1757 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1684, _1687, _1690, _1693));
    float _1760 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1683, _1686, _1689, _1692));
    float _1794;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1767 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1370, _1374, _1377, _1380));
        float _1771 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1372, _1375, _1378, _1381));
        float _1775 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1373, _1376, _1379, _1382));
        float _1782 = dot(vec4(cbModelParam._m0[39u]), vec4(_1751, _1752, _1753, 1.0));
        _1794 = dot(vec3(isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)), isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1782) ? 0.0 : (isnan(0.0) ? _1782 : max(0.0, _1782))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1794 = 1.0;
    }
    float _1805;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1796 = dot(vec4(cbModelParam._m0[40u]), vec4(_1751, _1752, _1753, 1.0));
        _1805 = dot(vec3(isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)), isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1796) ? 0.0 : (isnan(0.0) ? _1796 : max(0.0, _1796))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1805 = 1.0;
    }
    float _1809 = (_1805 * cbModelParam._m0[1u].x) + (_1794 * (1.0 - cbModelParam._m0[1u].x));
    float _1819 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _792);
    float _1820 = isnan(_1819) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1819 : min(cbModelParam._m0[25u].z, _1819));
    float _1900;
    float _1902;
    float _1904;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1867 = fma(_1039, cbModelParam._m0[13u].z, fma(_1035, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1031)) + cbModelParam._m0[13u].w;
        float _1871 = fma(_1039, cbModelParam._m0[14u].z, fma(_1035, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1031)) + cbModelParam._m0[14u].w;
        float _1875 = fma(_1039, cbModelParam._m0[15u].z, fma(_1035, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1031)) + cbModelParam._m0[15u].w;
        float _1878 = fma(_977, cbModelParam._m0[13u].z, fma(_976, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _975));
        float _1881 = fma(_977, cbModelParam._m0[14u].z, fma(_976, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _975));
        float _1884 = fma(_977, cbModelParam._m0[15u].z, fma(_976, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _975));
        float _1912;
        if (_1878 > 0.0)
        {
            _1912 = abs((1.0 - _1867) / _1878);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1867 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1912 = frontier_phi_19_17_ladder;
        }
        float _2138;
        if (_1881 > 0.0)
        {
            _2138 = abs((1.0 - _1871) / _1881);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1871 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2138 = frontier_phi_28_24_ladder;
        }
        float _2395;
        if (_1884 > 0.0)
        {
            _2395 = abs((1.0 - _1875) / _1884);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1875 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2395 = frontier_phi_40_35_ladder;
        }
        float _2397 = isnan(_2138) ? _1912 : (isnan(_1912) ? _2138 : min(_1912, _2138));
        float _2398 = isnan(_2395) ? _2397 : (isnan(_2397) ? _2395 : min(_2397, _2395));
        float _2402 = (_2398 * _1878) + _1867;
        float _2403 = (_2398 * _1881) + _1871;
        float _2404 = (_2398 * _1884) + _1875;
        float _2405 = _2398 * 9.9999997473787516355514526367188e-05;
        float _2407 = (-1.0) - _2405;
        float _2409 = _2405 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2404 > _2409) || ((_2404 < _2407) || ((_2403 > _2409) || ((_2403 < _2407) || ((_2402 < _2407) || (_2402 > _2409))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2532 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2404, cbModelParam._m0[9u].z, fma(_2403, cbModelParam._m0[9u].y, _2402 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2404, cbModelParam._m0[10u].z, fma(_2403, cbModelParam._m0[10u].y, _2402 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2404, cbModelParam._m0[11u].z, fma(_2403, cbModelParam._m0[11u].y, _2402 * cbModelParam._m0[11u].x))), _1820);
            frontier_phi_18_40_ladder = _2532.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2532.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2532.x * cbModelParam._m0[1u].y;
        }
        _1900 = frontier_phi_18_40_ladder_2;
        _1902 = frontier_phi_18_40_ladder_1;
        _1904 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1888 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_975, _976, _977), _1820);
        _1900 = _1888.x * cbModelParam._m0[1u].y;
        _1902 = _1888.y * cbModelParam._m0[1u].y;
        _1904 = _1888.z * cbModelParam._m0[1u].y;
    }
    float _1908 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _792);
    float _1909 = isnan(_1908) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1908 : min(cbModelParam._m0[25u].w, _1908));
    float _2001;
    float _2003;
    float _2005;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1965 = fma(_1039, cbModelParam._m0[21u].z, fma(_1035, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1031)) + cbModelParam._m0[21u].w;
        float _1969 = fma(_1039, cbModelParam._m0[22u].z, fma(_1035, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1031)) + cbModelParam._m0[22u].w;
        float _1973 = fma(_1039, cbModelParam._m0[23u].z, fma(_1035, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1031)) + cbModelParam._m0[23u].w;
        float _1976 = fma(_977, cbModelParam._m0[21u].z, fma(_976, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _975));
        float _1979 = fma(_977, cbModelParam._m0[22u].z, fma(_976, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _975));
        float _1982 = fma(_977, cbModelParam._m0[23u].z, fma(_976, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _975));
        float _2143;
        if (_1976 > 0.0)
        {
            _2143 = abs((1.0 - _1965) / _1976);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1976 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1965 + 1.0) / _1976);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2143 = frontier_phi_30_26_ladder;
        }
        float _2422;
        if (_1979 > 0.0)
        {
            _2422 = abs((1.0 - _1969) / _1979);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1969 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2422 = frontier_phi_42_37_ladder;
        }
        float _2635;
        if (_1982 > 0.0)
        {
            _2635 = abs((1.0 - _1973) / _1982);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1973 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2635 = frontier_phi_51_48_ladder;
        }
        float _2637 = isnan(_2422) ? _2143 : (isnan(_2143) ? _2422 : min(_2143, _2422));
        float _2638 = isnan(_2635) ? _2637 : (isnan(_2637) ? _2635 : min(_2637, _2635));
        float _2642 = (_2638 * _1976) + _1965;
        float _2643 = (_2638 * _1979) + _1969;
        float _2644 = (_2638 * _1982) + _1973;
        float _2645 = _2638 * 9.9999997473787516355514526367188e-05;
        float _2646 = (-1.0) - _2645;
        float _2648 = _2645 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2644 > _2648) || ((_2644 < _2646) || ((_2643 > _2648) || ((_2643 < _2646) || ((_2642 < _2646) || (_2642 > _2648))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2842 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2644, cbModelParam._m0[17u].z, fma(_2643, cbModelParam._m0[17u].y, _2642 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2644, cbModelParam._m0[18u].z, fma(_2643, cbModelParam._m0[18u].y, _2642 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2644, cbModelParam._m0[19u].z, fma(_2643, cbModelParam._m0[19u].y, _2642 * cbModelParam._m0[19u].x))), _1909);
            frontier_phi_27_51_ladder = _2842.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2842.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2842.x * cbModelParam._m0[1u].z;
        }
        _2001 = frontier_phi_27_51_ladder_2;
        _2003 = frontier_phi_27_51_ladder_1;
        _2005 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1985 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_975, _976, _977), _1909);
        _2001 = _1985.x * cbModelParam._m0[1u].z;
        _2003 = _1985.y * cbModelParam._m0[1u].z;
        _2005 = _1985.z * cbModelParam._m0[1u].z;
    }
    float _2018 = (((_1002 * _952) + _1003) * _967) * ((cbModelParam._m0[1u].w * (_2001 - _1900)) + _1900);
    float _2020 = (((_1002 * _954) + _1003) * _967) * ((cbModelParam._m0[1u].w * (_2003 - _1902)) + _1902);
    float _2022 = (((_1002 * _955) + _1003) * _967) * ((cbModelParam._m0[1u].w * (_2005 - _1904)) + _1904);
    float _2025 = fma(_2022, cbSceneParam._m0[89u].z, fma(_2020, cbSceneParam._m0[89u].y, _2018 * cbSceneParam._m0[89u].x));
    float _2028 = fma(_2022, cbSceneParam._m0[90u].z, fma(_2020, cbSceneParam._m0[90u].y, _2018 * cbSceneParam._m0[90u].x));
    float _2031 = fma(_2022, cbSceneParam._m0[91u].z, fma(_2020, cbSceneParam._m0[91u].y, _2018 * cbSceneParam._m0[91u].x));
    vec4 _2039 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_889, _890));
    float _2041 = _2039.w;
    float _2053 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2041);
    float _2054 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2041);
    float _2055 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2041);
    uvec4 _2059 = floatBitsToUint(cbInstanceData._m0[_927 + 5u]);
    uint _2061 = _2059.x * 14u;
    uint _2062 = _2061 + 13u;
    float _2069 = _967 + (-1.0);
    float _2074 = (cbLight._m0[_2062].x * _2069) + 1.0;
    float _2075 = (cbLight._m0[_2062].y * _2069) + 1.0;
    float _2076 = (cbLight._m0[_2062].z * _2069) + 1.0;
    float _2077 = (cbLight._m0[_2062].w * _2069) + 1.0;
    uint _2078 = _2061 + 5u;
    float _2084 = isnan(1.0) ? _2075 : (isnan(_2075) ? 1.0 : min(_2075, 1.0));
    uint _2088 = _2061 + 4u;
    float _2097 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
    uint _2101 = _2061 | 1u;
    float _2112 = dot(vec3(cbLight._m0[_2061].xyz), vec3(_789, _790, _791));
    float _2115 = dot(vec3(cbLight._m0[_2101].xyz), vec3(_789, _790, _791));
    float _4358 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _4369 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2120 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * 0.3183098733425140380859375;
    float _2122 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * 0.3183098733425140380859375;
    float _2129 = ((cbLight._m0[_2078].x * _2084) * _2122) + (((cbLight._m0[_2088].x * _2053) * _2097) * _2120);
    float _2130 = ((_2084 * cbLight._m0[_2078].y) * _2122) + (((cbLight._m0[_2088].y * _2054) * _2097) * _2120);
    float _2131 = ((_2084 * cbLight._m0[_2078].z) * _2122) + (((cbLight._m0[_2088].z * _2055) * _2097) * _2120);
    uvec4 _2135 = floatBitsToUint(cbLight._m0[_2061 + 12u]);
    bool _2137 = _2135.x == 0u;
    float _2148;
    float _2150;
    float _2152;
    if (_2137)
    {
        _2148 = _2129;
        _2150 = _2130;
        _2152 = _2131;
    }
    else
    {
        uint _2156 = _2061 + 6u;
        float _2172 = (dot(vec3(cbLight._m0[_2061 + 2u].xyz), vec3(_789, _790, _791)) * 0.5) + 0.5;
        float _2173 = _2172 * _2172;
        float _4380 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2174 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _2175 = isnan(1.0) ? _2076 : (isnan(_2076) ? 1.0 : min(_2076, 1.0));
        _2148 = (((cbLight._m0[_2156].x * 0.3183098733425140380859375) * _2174) * _2175) + _2129;
        _2150 = (((cbLight._m0[_2156].y * 0.3183098733425140380859375) * _2174) * _2175) + _2130;
        _2152 = (((cbLight._m0[_2156].z * 0.3183098733425140380859375) * _2174) * _2175) + _2131;
    }
    bool _2155 = _2135.y == 0u;
    float _2193;
    float _2195;
    float _2197;
    if (_2155)
    {
        _2193 = _2148;
        _2195 = _2150;
        _2197 = _2152;
    }
    else
    {
        uint _2366 = _2061 + 7u;
        float _2382 = (dot(vec3(cbLight._m0[_2061 + 3u].xyz), vec3(_789, _790, _791)) * 0.5) + 0.5;
        float _2383 = _2382 * _2382;
        float _4396 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2384 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _2385 = isnan(1.0) ? _2077 : (isnan(_2077) ? 1.0 : min(_2077, 1.0));
        _2193 = (((cbLight._m0[_2366].x * 0.3183098733425140380859375) * _2384) * _2385) + _2148;
        _2195 = (((cbLight._m0[_2366].y * 0.3183098733425140380859375) * _2384) * _2385) + _2150;
        _2197 = (((cbLight._m0[_2366].z * 0.3183098733425140380859375) * _2384) * _2385) + _2152;
    }
    uint _2200 = _2061 + 8u;
    float _2213 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2061].w)) * _792) * 0.949999988079071044921875);
    float _2214 = _2213 * _2213;
    float _2215 = cbLight._m0[_2061].x + _869;
    float _2216 = cbLight._m0[_2061].y + _870;
    float _2217 = cbLight._m0[_2061].z + _871;
    float _2221 = inversesqrt(dot(vec3(_2215, _2216, _2217), vec3(_2215, _2216, _2217)));
    float _2222 = _2221 * _2215;
    float _2223 = _2221 * _2216;
    float _2224 = _2221 * _2217;
    float _2225 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2061].xyz));
    float _4412 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2228 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
    float _4423 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _2229 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
    float _2230 = dot(vec3(_789, _790, _791), vec3(_2222, _2223, _2224));
    float _4434 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2233 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
    float _2234 = dot(vec3(cbLight._m0[_2061].xyz), vec3(_2222, _2223, _2224));
    float _4445 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2238 = _2214 * _2214;
    float _2242 = ((_2233 * _2233) * (_2238 + (-1.0))) + 1.0;
    float _2250 = exp2(log2(1.0 - (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0)))) * 5.0);
    float _2251 = 0.959999978542327880859375 - _949;
    float _2253 = 0.959999978542327880859375 - _950;
    float _2254 = 0.959999978542327880859375 - _951;
    float _2261 = 1.0 - _2214;
    float _2272 = (0.5 / (((_2229 * ((_2228 * _2261) + _2214)) + 9.9999999392252902907785028219223e-09) + (((_2229 * _2261) + _2214) * _2228))) * _2228;
    float _4456 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2274 = (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_2238 / ((_2242 * _2242) * 3.141590118408203125));
    uint _2288 = _2061 + 9u;
    float _2299 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2101].w)) * _792) * 0.949999988079071044921875);
    float _2300 = _2299 * _2299;
    float _2301 = cbLight._m0[_2101].x + _869;
    float _2302 = cbLight._m0[_2101].y + _870;
    float _2303 = cbLight._m0[_2101].z + _871;
    float _2307 = inversesqrt(dot(vec3(_2301, _2302, _2303), vec3(_2301, _2302, _2303)));
    float _2308 = _2307 * _2301;
    float _2309 = _2307 * _2302;
    float _2310 = _2307 * _2303;
    float _2311 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2101].xyz));
    float _4467 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2314 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
    float _2315 = dot(vec3(_789, _790, _791), vec3(_2308, _2309, _2310));
    float _4478 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2318 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
    float _2319 = dot(vec3(cbLight._m0[_2101].xyz), vec3(_2308, _2309, _2310));
    float _4489 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2323 = _2300 * _2300;
    float _2327 = ((_2318 * _2318) * (_2323 + (-1.0))) + 1.0;
    float _2334 = exp2(log2(1.0 - (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0)))) * 5.0);
    float _2341 = 1.0 - _2300;
    float _2351 = (0.5 / (((_2229 * ((_2314 * _2341) + _2300)) + 9.9999999392252902907785028219223e-09) + (((_2229 * _2341) + _2300) * _2314))) * _2314;
    float _4500 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2353 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_2323 / ((_2327 * _2327) * 3.141590118408203125));
    float _2363 = (((((_2334 * _2251) + _952) * cbLight._m0[_2288].x) * _2353) * _2084) + ((((cbLight._m0[_2200].x * _2053) * ((_2250 * _2251) + _952)) * _2274) * _2097);
    float _2364 = (((((_2334 * _2253) + _954) * cbLight._m0[_2288].y) * _2353) * _2084) + ((((cbLight._m0[_2200].y * _2054) * ((_2250 * _2253) + _954)) * _2274) * _2097);
    float _2365 = (((((_2334 * _2254) + _955) * cbLight._m0[_2288].z) * _2353) * _2084) + ((((cbLight._m0[_2200].z * _2055) * ((_2250 * _2254) + _955)) * _2274) * _2097);
    float _2427;
    float _2429;
    float _2431;
    if (_2137)
    {
        _2427 = _2363;
        _2429 = _2364;
        _2431 = _2365;
    }
    else
    {
        uint _2433 = _2061 + 2u;
        uint _2437 = _2061 + 10u;
        float _2451 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2433].w)) * _792) * 0.949999988079071044921875);
        float _2452 = _2451 * _2451;
        float _2453 = cbLight._m0[_2433].x + _869;
        float _2454 = cbLight._m0[_2433].y + _870;
        float _2455 = cbLight._m0[_2433].z + _871;
        float _2459 = inversesqrt(dot(vec3(_2453, _2454, _2455), vec3(_2453, _2454, _2455)));
        float _2460 = _2459 * _2453;
        float _2461 = _2459 * _2454;
        float _2462 = _2459 * _2455;
        float _2463 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2433].xyz));
        float _4511 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2466 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _2467 = dot(vec3(_789, _790, _791), vec3(_2460, _2461, _2462));
        float _4522 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2470 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2471 = dot(vec3(cbLight._m0[_2433].xyz), vec3(_2460, _2461, _2462));
        float _4533 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2475 = _2452 * _2452;
        float _2479 = ((_2470 * _2470) * (_2475 + (-1.0))) + 1.0;
        float _2486 = exp2(log2(1.0 - (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0)))) * 5.0);
        float _2493 = 1.0 - _2452;
        float _2503 = (0.5 / (((_2229 * ((_2466 * _2493) + _2452)) + 9.9999999392252902907785028219223e-09) + (((_2229 * _2493) + _2452) * _2466))) * _2466;
        float _4544 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2505 = (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_2475 / ((_2479 * _2479) * 3.141590118408203125));
        float _2506 = isnan(1.0) ? _2076 : (isnan(_2076) ? 1.0 : min(_2076, 1.0));
        _2427 = (((((_2486 * _2251) + _952) * cbLight._m0[_2437].x) * _2505) * _2506) + _2363;
        _2429 = (((((_2486 * _2253) + _954) * cbLight._m0[_2437].y) * _2505) * _2506) + _2364;
        _2431 = (((((_2486 * _2254) + _955) * cbLight._m0[_2437].z) * _2505) * _2506) + _2365;
    }
    float _2541;
    float _2543;
    float _2545;
    if (_2155)
    {
        _2541 = _2427;
        _2543 = _2429;
        _2545 = _2431;
    }
    else
    {
        uint _2552 = _2061 + 3u;
        uint _2556 = _2061 + 11u;
        float _2570 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2552].w)) * _792) * 0.949999988079071044921875);
        float _2571 = _2570 * _2570;
        float _2572 = cbLight._m0[_2552].x + _869;
        float _2573 = cbLight._m0[_2552].y + _870;
        float _2574 = cbLight._m0[_2552].z + _871;
        float _2578 = inversesqrt(dot(vec3(_2572, _2573, _2574), vec3(_2572, _2573, _2574)));
        float _2579 = _2578 * _2572;
        float _2580 = _2578 * _2573;
        float _2581 = _2578 * _2574;
        float _2582 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2552].xyz));
        float _4560 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2585 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _2586 = dot(vec3(_789, _790, _791), vec3(_2579, _2580, _2581));
        float _4571 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2589 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _2590 = dot(vec3(cbLight._m0[_2552].xyz), vec3(_2579, _2580, _2581));
        float _4582 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2594 = _2571 * _2571;
        float _2598 = ((_2589 * _2589) * (_2594 + (-1.0))) + 1.0;
        float _2605 = exp2(log2(1.0 - (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0)))) * 5.0);
        float _2612 = 1.0 - _2571;
        float _2622 = (0.5 / (((_2229 * ((_2585 * _2612) + _2571)) + 9.9999999392252902907785028219223e-09) + (((_2229 * _2612) + _2571) * _2585))) * _2585;
        float _4593 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2624 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2594 / ((_2598 * _2598) * 3.141590118408203125));
        float _2625 = isnan(1.0) ? _2077 : (isnan(_2077) ? 1.0 : min(_2077, 1.0));
        _2541 = (((((_2605 * _2251) + _952) * cbLight._m0[_2556].x) * _2624) * _2625) + _2427;
        _2543 = (((((_2605 * _2253) + _954) * cbLight._m0[_2556].y) * _2624) * _2625) + _2429;
        _2545 = (((((_2605 * _2254) + _955) * cbLight._m0[_2556].z) * _2624) * _2625) + _2431;
    }
    float _2759;
    float _2761;
    float _2763;
    float _2765;
    float _2767;
    float _2769;
    if (_2059.y == 0u)
    {
        float _2700 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2701 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2700;
        float _2702 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2700;
        float _2703 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2700;
        uvec4 _2715 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2716 = _2715.x;
        uint _2727 = uint((float(_2715.y) * floor(float(uint(cbSceneParam._m0[85u].y * _890) / _2716))) + floor(float(uint(cbSceneParam._m0[85u].x * _889) / _2716)));
        float _2737 = (log2(_2703 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2738 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        uint _2741 = uint(isnan(14.0) ? _2738 : (isnan(_2738) ? 14.0 : min(_2738, 14.0)));
        uvec4 _2746 = texelFetch(g_lightClusterGridBuffer, int(((_2741 << 2u) + (_2727 << 6u)) >> 2u));
        uint _2747 = _2746.x;
        uint _2748 = _2715.z;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        if (((((1u << ((_2748 >> 4u) & 15u)) + 4294967295u) & _2747) == 0u) || ((_2748 & 240u) == 0u))
        {
            _2847 = 0.0;
            _2849 = 0.0;
            _2851 = 0.0;
            _2853 = 0.0;
            _2855 = 0.0;
            _2857 = 0.0;
        }
        else
        {
            float _2848;
            float _2850;
            float _2852;
            float _2854;
            float _2856;
            float _2858;
            float _2999 = 0.0;
            float _3000 = 0.0;
            float _3001 = 0.0;
            float _3002 = 0.0;
            float _3003 = 0.0;
            float _3004 = 0.0;
            uint _3005 = 0u;
            uint _3014;
            bool _3015;
            for (;;)
            {
                _3014 = texelFetch(g_lightClassification, int((((_2741 << 5u) + (_2727 << 9u)) + (_3005 << 2u)) >> 2u)).x;
                _3015 = _3014 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3015)
                {
                    frontier_phi_68_pred = _3001;
                    frontier_phi_68_pred_1 = _3004;
                    frontier_phi_68_pred_2 = _3003;
                    frontier_phi_68_pred_3 = _3002;
                    frontier_phi_68_pred_4 = _3000;
                    frontier_phi_68_pred_5 = _2999;
                }
                else
                {
                    float _3144;
                    float _3145;
                    float _3146;
                    float _3147;
                    float _3148;
                    float _3149;
                    uint _3150;
                    _3144 = _2999;
                    _3145 = _3000;
                    _3146 = _3001;
                    _3147 = _3002;
                    _3148 = _3003;
                    _3149 = _3004;
                    _3150 = _3014;
                    float _3071;
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    for (;;)
                    {
                        uint _3154 = uint(findLSB(_3150)) + (_3005 << 5u);
                        uint _3151 = (_3150 + 4294967295u) & _3150;
                        uint _3156 = _3154 * 48u;
                        vec4 _3170 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3156)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 3u)).x));
                        uint _3176 = (_3154 * 48u) + 4u;
                        vec4 _3189 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3176)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 3u)).x));
                        uint _3195 = (_3154 * 48u) + 8u;
                        vec3 _3206 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3195)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 2u)).x));
                        float _3210 = _3170.x - _2701;
                        float _3211 = _3170.y - _2702;
                        float _3212 = _3170.z - _2703;
                        float _3213 = dot(vec3(_3210, _3211, _3212), vec3(_3210, _3211, _3212));
                        float _3216 = inversesqrt(_3213);
                        float _3217 = _3216 * _3210;
                        float _3218 = _3216 * _3211;
                        float _3219 = _3216 * _3212;
                        float _3220 = dot(vec3(_908, _911, _914), vec3(_3217, _3218, _3219));
                        float _3225 = 1.0 - (_3213 * _3170.w);
                        float _4619 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                        float _3226 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                        float _3227 = sqrt(_3213) * _3189.w;
                        float _3230 = 1.39999997615814208984375 / (_3227 + 1.39999997615814208984375);
                        float _3231 = _3230 * _3230;
                        float _3234 = ((1.0 - _3231) * _3220) + _3231;
                        float _3237 = _3227 * _3227;
                        float _3241 = ((isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0))) * _3226) / ((_3237 * 0.699999988079071044921875) + 1.0);
                        float _3245 = (-0.0) - _2701;
                        float _3246 = (-0.0) - _2702;
                        float _3247 = (-0.0) - _2703;
                        float _3251 = inversesqrt(dot(vec3(_3245, _3246, _3247), vec3(_3245, _3246, _3247)));
                        float _3252 = _3251 * _3245;
                        float _3253 = _3251 * _3246;
                        float _3254 = _3251 * _3247;
                        float _3262 = exp2(log2(1.0 / ((_3237 * 3.5) + 5.0)) * 0.25);
                        float _3263 = 1.0 - _983;
                        float _3270 = sqrt(1.0 - ((1.0 - (_3263 * _3263)) * (1.0 - (_3262 * _3262))));
                        float _3271 = _3270 * _3270;
                        float _3272 = _3271 * _3271;
                        float _3273 = _3252 + _3217;
                        float _3274 = _3253 + _3218;
                        float _3275 = _3254 + _3219;
                        float _3279 = inversesqrt(dot(vec3(_3273, _3274, _3275), vec3(_3273, _3274, _3275)));
                        float _3283 = dot(vec3(_908, _911, _914), vec3(_3252, _3253, _3254));
                        float _4635 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                        float _3286 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                        float _3287 = dot(vec3(_908, _911, _914), vec3(_3279 * _3273, _3279 * _3274, _3279 * _3275));
                        float _4646 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                        float _3290 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                        float _3294 = ((_3290 * _3290) * (_3272 + (-1.0))) + 1.0;
                        float _3295 = _3230 * _3271;
                        float _3296 = _3295 * _3295;
                        float _3299 = ((1.0 - _3296) * _3220) + _3296;
                        float _4657 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                        float _3300 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                        float _3301 = 1.0 - _3271;
                        float _3311 = (0.5 / (((_3300 * ((_3286 * _3301) + _3271)) + 9.9999999392252902907785028219223e-09) + (((_3300 * _3301) + _3271) * _3286))) * _3300;
                        float _4668 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                        float _3322 = (((_3272 * 3.1415927410125732421875) * (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0)))) / ((_3294 * _3294) * ((_3237 * 2.1991131305694580078125) + 3.141590118408203125))) * _3226;
                        _3074 = (_3241 * _3189.x) + _3147;
                        _3075 = (_3241 * _3189.y) + _3148;
                        _3076 = (_3241 * _3189.z) + _3149;
                        _3071 = (_3322 * _3206.x) + _3144;
                        _3072 = (_3322 * _3206.y) + _3145;
                        _3073 = (_3322 * _3206.z) + _3146;
                        if (_3151 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3144 = _3071;
                            _3145 = _3072;
                            _3146 = _3073;
                            _3147 = _3074;
                            _3148 = _3075;
                            _3149 = _3076;
                            _3150 = _3151;
                        }
                    }
                    frontier_phi_68_pred = _3073;
                    frontier_phi_68_pred_1 = _3076;
                    frontier_phi_68_pred_2 = _3075;
                    frontier_phi_68_pred_3 = _3074;
                    frontier_phi_68_pred_4 = _3072;
                    frontier_phi_68_pred_5 = _3071;
                }
                _2852 = frontier_phi_68_pred;
                _2858 = frontier_phi_68_pred_1;
                _2856 = frontier_phi_68_pred_2;
                _2854 = frontier_phi_68_pred_3;
                _2850 = frontier_phi_68_pred_4;
                _2848 = frontier_phi_68_pred_5;
                uint _3006 = _3005 + 1u;
                if (_3006 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2999 = _2848;
                    _3000 = _2850;
                    _3001 = _2852;
                    _3002 = _2854;
                    _3003 = _2856;
                    _3004 = _2858;
                    _3005 = _3006;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2847 = _2848;
            _2849 = _2850;
            _2851 = _2852;
            _2853 = _2854;
            _2855 = _2856;
            _2857 = _2858;
        }
        uvec4 _2861 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2862 = _2861.z;
        uint _2864 = (_2862 >> 8u) & 15u;
        float _2967;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        float _2977;
        if (((4294967295u << _2864) & _2747) == 0u)
        {
            _2967 = _2847;
            _2969 = _2849;
            _2971 = _2851;
            _2973 = _2853;
            _2975 = _2855;
            _2977 = _2857;
        }
        else
        {
            float _2992 = inversesqrt(dot(vec3(_2701, _2702, _2703), vec3(_2701, _2702, _2703)));
            float _2993 = _2992 * _2701;
            float _2994 = _2992 * _2702;
            float _2995 = _2992 * _2703;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2864 < ((_2862 >> 12u) & 15u))
            {
                float _2968;
                float _2970;
                float _2972;
                float _2974;
                float _2976;
                float _2978;
                float _3127 = _2847;
                float _3128 = _2849;
                float _3129 = _2851;
                float _3130 = _2853;
                float _3131 = _2855;
                float _3132 = _2857;
                uint _3133 = _2864;
                uint _3142;
                bool _3143;
                for (;;)
                {
                    _3142 = texelFetch(g_lightClassification, int((((_2741 << 5u) + (_2727 << 9u)) + (_3133 << 2u)) >> 2u)).x;
                    _3143 = _3142 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3143)
                    {
                        frontier_phi_79_pred = _3132;
                        frontier_phi_79_pred_1 = _3131;
                        frontier_phi_79_pred_2 = _3130;
                        frontier_phi_79_pred_3 = _3129;
                        frontier_phi_79_pred_4 = _3128;
                        frontier_phi_79_pred_5 = _3127;
                    }
                    else
                    {
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3636;
                        float _3349 = _3127;
                        float _3350 = _3128;
                        float _3351 = _3129;
                        float _3352 = _3130;
                        float _3353 = _3131;
                        float _3354 = _3132;
                        uint _3355 = _3142;
                        uint _3356;
                        vec4 _3381;
                        float _3382;
                        vec4 _3397;
                        vec3 _3409;
                        vec4 _3424;
                        vec4 _3440;
                        float _3487;
                        bool _3488;
                        for (;;)
                        {
                            uint _3366 = ((_3133 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3355));
                            _3356 = (_3355 + 4294967295u) & _3355;
                            uint _3368 = _3366 * 40u;
                            _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            _3382 = _3381.w;
                            uint _3384 = (_3366 * 40u) + 4u;
                            _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            uint _3399 = (_3366 * 40u) + 8u;
                            _3409 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x));
                            uint _3411 = (_3366 * 40u) + 16u;
                            _3424 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 3u)).x));
                            uint _3427 = (_3366 * 40u) + 20u;
                            _3440 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 3u)).x));
                            uint _3443 = (_3366 * 40u) + 24u;
                            vec4 _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            uint _3462 = (_3366 * 40u) + 28u;
                            vec4 _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            _3487 = fma(_2703, _3475.z, fma(_2702, _3475.y, _3475.x * _2701)) + _3475.w;
                            _3488 = !((fma(_2703, _3456.z, fma(_2702, _3456.y, _3456.x * _2701)) + _3456.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3488)
                            {
                                float _3515 = _3381.x - _2701;
                                float _3516 = _3381.y - _2702;
                                float _3517 = _3381.z - _2703;
                                float _3518 = dot(vec3(_3515, _3516, _3517), vec3(_3515, _3516, _3517));
                                float _3521 = inversesqrt(_3518);
                                float _3522 = _3521 * _3515;
                                float _3523 = _3521 * _3516;
                                float _3524 = _3521 * _3517;
                                float _3528 = 1.0 - (_3518 / (_3382 * _3382));
                                float _4679 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                                float _3529 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                                float _3533 = sqrt(_3518) * _3397.w;
                                float _3535 = 1.39999997615814208984375 / (_3533 + 1.39999997615814208984375);
                                float _3536 = _3535 * _3535;
                                float _3539 = ((1.0 - _3536) * dot(vec3(_3522, _3523, _3524), vec3(_908, _911, _914))) + _3536;
                                float _3542 = _3533 * _3533;
                                float _3546 = (fma(_2703, _3424.z, fma(_2702, _3424.y, _3424.x * _2701)) + _3424.w) / _3487;
                                float _3547 = (fma(_2703, _3440.z, fma(_2702, _3440.y, _3440.x * _2701)) + _3440.w) / _3487;
                                float _3551 = 1.0 - dot(vec2(_3546, _3547), vec2(_3546, _3547));
                                float _4695 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                                float _3552 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
                                float _3553 = _3552 * (((isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0))) * _3529) / ((_3542 * 0.699999988079071044921875) + 1.0));
                                float _3565 = exp2(log2(1.0 / ((_3542 * 3.5) + 5.0)) * 0.25);
                                float _3566 = 1.0 - _983;
                                float _3573 = sqrt(1.0 - ((1.0 - (_3566 * _3566)) * (1.0 - (_3565 * _3565))));
                                float _3574 = _3573 * _3573;
                                float _3575 = _3574 * _3574;
                                float _3576 = _3522 - _2993;
                                float _3577 = _3523 - _2994;
                                float _3578 = _3524 - _2995;
                                float _3582 = inversesqrt(dot(vec3(_3576, _3577, _3578), vec3(_3576, _3577, _3578)));
                                float _3586 = dot(vec3(_908, _911, _914), vec3((-0.0) - _2993, (-0.0) - _2994, (-0.0) - _2995));
                                float _4706 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3589 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                                float _3590 = dot(vec3(_908, _911, _914), vec3(_3582 * _3576, _3582 * _3577, _3582 * _3578));
                                float _4717 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                                float _3593 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                                float _3597 = ((_3593 * _3593) * (_3575 + (-1.0))) + 1.0;
                                float _3598 = _3535 * _3574;
                                float _3599 = _3598 * _3598;
                                float _3605 = ((1.0 - _3599) * dot(vec3(_908, _911, _914), vec3(_3522, _3523, _3524))) + _3599;
                                float _4728 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3606 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                                float _3607 = 1.0 - _3574;
                                float _3617 = (0.5 / (((_3606 * ((_3589 * _3607) + _3574)) + 9.9999999392252902907785028219223e-09) + (((_3606 * _3607) + _3574) * _3589))) * _3606;
                                float _4739 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3627 = (_3552 * _3529) * (((_3575 * 3.1415927410125732421875) * (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0)))) / ((_3597 * _3597) * ((_3542 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3553 * _3397.z;
                                frontier_phi_85_pred_1 = _3553 * _3397.y;
                                frontier_phi_85_pred_2 = _3553 * _3397.x;
                                frontier_phi_85_pred_3 = _3627 * _3409.z;
                                frontier_phi_85_pred_4 = _3627 * _3409.y;
                                frontier_phi_85_pred_5 = _3627 * _3409.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3636 = frontier_phi_85_pred;
                            _3635 = frontier_phi_85_pred_1;
                            _3634 = frontier_phi_85_pred_2;
                            _3633 = frontier_phi_85_pred_3;
                            _3632 = frontier_phi_85_pred_4;
                            _3631 = frontier_phi_85_pred_5;
                            _3339 = _3634 + _3352;
                            _3340 = _3635 + _3353;
                            _3341 = _3636 + _3354;
                            _3336 = _3631 + _3349;
                            _3337 = _3632 + _3350;
                            _3338 = _3633 + _3351;
                            if (_3356 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3349 = _3336;
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3340;
                                _3354 = _3341;
                                _3355 = _3356;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3341;
                        frontier_phi_79_pred_1 = _3340;
                        frontier_phi_79_pred_2 = _3339;
                        frontier_phi_79_pred_3 = _3338;
                        frontier_phi_79_pred_4 = _3337;
                        frontier_phi_79_pred_5 = _3336;
                    }
                    _2978 = frontier_phi_79_pred;
                    _2976 = frontier_phi_79_pred_1;
                    _2974 = frontier_phi_79_pred_2;
                    _2972 = frontier_phi_79_pred_3;
                    _2970 = frontier_phi_79_pred_4;
                    _2968 = frontier_phi_79_pred_5;
                    uint _3134 = _3133 + 1u;
                    if (_3134 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3127 = _2968;
                        _3128 = _2970;
                        _3129 = _2972;
                        _3130 = _2974;
                        _3131 = _2976;
                        _3132 = _2978;
                        _3133 = _3134;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2974;
                frontier_phi_60_61_ladder_1 = _2978;
                frontier_phi_60_61_ladder_2 = _2976;
                frontier_phi_60_61_ladder_3 = _2972;
                frontier_phi_60_61_ladder_4 = _2970;
                frontier_phi_60_61_ladder_5 = _2968;
            }
            else
            {
                frontier_phi_60_61_ladder = _2853;
                frontier_phi_60_61_ladder_1 = _2857;
                frontier_phi_60_61_ladder_2 = _2855;
                frontier_phi_60_61_ladder_3 = _2851;
                frontier_phi_60_61_ladder_4 = _2849;
                frontier_phi_60_61_ladder_5 = _2847;
            }
            _2967 = frontier_phi_60_61_ladder_5;
            _2969 = frontier_phi_60_61_ladder_4;
            _2971 = frontier_phi_60_61_ladder_3;
            _2973 = frontier_phi_60_61_ladder;
            _2975 = frontier_phi_60_61_ladder_2;
            _2977 = frontier_phi_60_61_ladder_1;
        }
        float _2982 = isnan(1.0) ? _967 : (isnan(_967) ? 1.0 : min(_967, 1.0));
        _2759 = (_2982 * _2973) + _2193;
        _2761 = (_2982 * _2975) + _2195;
        _2763 = (_2982 * _2977) + _2197;
        _2765 = ((_2967 * _952) * _2982) + _2541;
        _2767 = ((_2969 * _954) * _2982) + _2543;
        _2769 = ((_2971 * _955) * _2982) + _2545;
    }
    else
    {
        _2759 = _2193;
        _2761 = _2195;
        _2763 = _2197;
        _2765 = _2541;
        _2767 = _2543;
        _2769 = _2545;
    }
    float _4755 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _4766 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _4777 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _2786 = ((isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_2759 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _967))) + ((_2765 + ((isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0))) * _1809)) * cbPerFrame._m0[3u].x);
    float _2787 = ((isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_2761 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _967))) + ((_2767 + ((isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0))) * _1809)) * cbPerFrame._m0[3u].x);
    float _2788 = ((isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (_2763 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _967))) + ((_2769 + ((isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0))) * _1809)) * cbPerFrame._m0[3u].x);
    uint _2789 = _927 + 6u;
    float _2797 = _889 / cbSceneParam._m0[86u].x;
    float _2798 = _890 / cbSceneParam._m0[86u].y;
    vec4 _2812 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2797, _2798, (log2((isnan(cbSceneParam._m0[77u].w) ? _812 : (isnan(_812) ? cbSceneParam._m0[77u].w : min(_812, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2814 = _2812.x;
    float _2815 = _2812.y;
    float _2816 = _2812.z;
    float _2817 = _2812.w;
    float _2909;
    float _2911;
    float _2913;
    float _2915;
    if (_812 > cbSceneParam._m0[78u].w)
    {
        float _2872 = isnan(_812) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _812 : min(cbSceneParam._m0[80u].w, _812));
        float _2873 = _2872 / _812;
        float _2884 = _2873 * _862;
        float _2885 = _863 * _2873;
        float _2886 = (-0.0) - _2885;
        float _2887 = _2873 * _864;
        float _2889 = (cbSceneParam._m0[77u].w * _2886) / _2872;
        float _2890 = _2889 + cbSceneParam._m0[79u].w;
        float _2891 = cbSceneParam._m0[79u].w - _2885;
        float _2897 = sqrt(((_2884 * _2884) + (_2885 * _2885)) + (_2887 * _2887));
        float _2900 = (1.0 - (cbSceneParam._m0[77u].w / _2872)) * _2897;
        float _2905 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2907 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3084;
        if (abs((_2886 - _2889) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3084 = ((((_2890 > 0.0) ? exp2(_2905 * _2890) : (2.0 - exp2(_2907 * _2890))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2900;
        }
        else
        {
            float _3028 = 1.0 / cbSceneParam._m0[80u].x;
            float _3029 = isnan(_2891) ? _2890 : (isnan(_2890) ? _2891 : max(_2890, _2891));
            float _3030 = isnan(_2891) ? _2890 : (isnan(_2890) ? _2891 : min(_2890, _2891));
            float _3039 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : min(_3029, 0.0));
            float _3040 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : min(_3030, 0.0));
            _3084 = ((abs(_2897 / _2886) * cbSceneParam._m0[80u].y) * ((((_3039 - _3040) * 2.0) - ((exp2(_2905 * (isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0)))) - exp2(_2905 * (isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0))))) * _3028)) - ((exp2(_2907 * _3039) - exp2(_2907 * _3040)) * _3028))) + (_2900 * cbSceneParam._m0[80u].z);
        }
        vec4 _3086 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2797, _2798, 1.0), 0.0);
        float _3095 = exp2((_3084 * (-1.44269502162933349609375)) * (1.0 - _3086.w));
        float _3096 = log2(_3095);
        float _3112 = log2(_2817);
        _2909 = (exp2(_3112 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3096 * cbSceneParam._m0[78u].x)) * _3086.x) / cbSceneParam._m0[78u].x)) + _2814;
        _2911 = (exp2(_3112 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3096 * cbSceneParam._m0[78u].y)) * _3086.y) / cbSceneParam._m0[78u].y)) + _2815;
        _2913 = (exp2(_3112 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3096 * cbSceneParam._m0[78u].z)) * _3086.z) / cbSceneParam._m0[78u].z)) + _2816;
        _2915 = _3095 * _2817;
    }
    else
    {
        _2909 = _2814;
        _2911 = _2815;
        _2913 = _2816;
        _2915 = _2817;
    }
    bool _3122;
    vec4 _2925;
    vec4 _2947;
    float _2949;
    float _2953;
    float _2954;
    float _2955;
    float _2956;
    bool _2966;
    for (;;)
    {
        _2925 = cbMatDynParam._m0[0u];
        float _2927 = roundEven(_2925.y);
        bool _2928 = _2927 == 3.0;
        float _2929 = log2(_2915);
        float _2936 = exp2(_2929 * cbSceneParam._m0[78u].x) * _2786;
        float _2937 = exp2(_2929 * cbSceneParam._m0[78u].y) * _2787;
        float _2938 = exp2(_2929 * cbSceneParam._m0[78u].z) * _2788;
        float _2945 = _878 + (-0.5);
        _2947 = cbMtdParam._m0[1u];
        _2949 = _2947.y * _2945;
        float _2952 = (_2927 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2953 = _2952 * (_2928 ? _2936 : (_2936 + (cbSceneParam._m0[72u].w * _2909)));
        _2954 = _2952 * (_2928 ? _2937 : (_2937 + (cbSceneParam._m0[72u].w * _2911)));
        _2955 = _2952 * (_2928 ? _2938 : (_2938 + (cbSceneParam._m0[72u].w * _2913)));
        _2956 = _2945 * 0.999000012874603271484375;
        _2966 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2966)
        {
            if ((cbInstanceData._m0[_927 + 7u].x + _2956) < 0.5)
            {
                _3122 = true;
                break;
            }
        }
        uint _3063 = _928 + uint(_2925.w);
        if ((cbInstanceData._m0[_3063].w < 1.0) && ((cbInstanceData._m0[_3063].w + _2956) < 0.5))
        {
            _3122 = true;
            break;
        }
        if ((_2949 + 1.0) < _2947.x)
        {
            _3122 = true;
            break;
        }
        _3122 = false;
        break;
    }
    float _3327;
    if (_3122)
    {
        discard_state = true;
        _3327 = 0.0;
    }
    else
    {
        _3327 = cbInstanceData._m0[_2789].w;
    }
    SV_Target.x = _2953;
    SV_Target.y = _2954;
    SV_Target.z = _2955;
    SV_Target.w = _3327;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2789].w;
    discard_exit();
}


