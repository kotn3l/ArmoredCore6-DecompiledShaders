#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1328;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = _233 * NORMAL.x;
    float _235 = _233 * NORMAL.y;
    float _236 = _233 * NORMAL.z;
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248;
    float _249;
    float _250;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _248 = (-0.0) - _234;
        _249 = (-0.0) - _235;
        _250 = (-0.0) - _236;
    }
    else
    {
        _248 = _234;
        _249 = _235;
        _250 = _236;
    }
    vec4 _270 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _297 = cbMtdParam._m0[15u].y * texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _305 = ((cbMtdParam._m0[14u].z * (-1.39999997615814208984375)) * (((1.0 - _270.x) * 2.0) - _297)) + 1.0;
    float _3942 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _306 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    vec4 _319 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    vec4 _336 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _338 = _336.x;
    float _339 = _336.y;
    float _340 = _336.z;
    float _347 = ((_319.x - _338) * _306) + _338;
    float _348 = ((_319.y - _339) * _306) + _339;
    float _349 = ((_319.z - _340) * _306) + _340;
    float _355 = (((((1.0 - _270.y) * 2.0) - _297) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].w) + 1.0;
    float _3953 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _356 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    vec4 _368 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _379 = ((_368.x - _347) * _356) + _347;
    float _380 = ((_368.y - _348) * _356) + _348;
    float _381 = ((_368.z - _349) * _356) + _349;
    float _387 = (((((1.0 - _270.z) * 2.0) - _297) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].z) + 1.0;
    float _3964 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    vec4 _400 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.z) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.w) + cbTextureTilingScale._m0[17u].w));
    float _413 = ((_400.z - _381) * _388) + _381;
    float _416 = ((((_400.x - _379) * _388) + _379) * 2.0) + (-1.0);
    float _418 = ((((_400.y - _380) * _388) + _380) * 2.0) + (-1.0);
    float _419 = dot(vec2(_416, _418), vec2(_416, _418));
    float _3975 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _424 = sqrt(1.0 - (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))));
    float _425 = fma(_424, _248, 0.0);
    float _426 = fma(_424, _249, 0.0);
    float _427 = fma(_424, _250, 0.0);
    float _436 = exp2(log2(inversesqrt(dot(vec3(_425, _426, _427), vec3(_425, _426, _427))) * _426) * cbMtdParam._m0[14u].x) * cbMtdParam._m0[14u].y;
    float _3986 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    vec4 _456 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _461 = _456.x * cbMtdParam._m0[10u].x;
    float _462 = _456.y * cbMtdParam._m0[10u].y;
    float _463 = _456.z * cbMtdParam._m0[10u].z;
    vec4 _482 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _496 = (((_482.x * cbMtdParam._m0[11u].x) - _461) * _306) + _461;
    float _497 = (((_482.y * cbMtdParam._m0[11u].y) - _462) * _306) + _462;
    float _498 = (((_482.z * cbMtdParam._m0[11u].z) - _463) * _306) + _463;
    vec4 _516 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _530 = (((_516.x * cbMtdParam._m0[12u].x) - _496) * _356) + _496;
    float _531 = (((_516.y * cbMtdParam._m0[12u].y) - _497) * _356) + _497;
    float _532 = (((_516.z * cbMtdParam._m0[12u].z) - _498) * _356) + _498;
    vec4 _551 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w));
    vec4 _585 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _593 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * ((((_551.x * cbMtdParam._m0[13u].x) - _530) * _388) + _530)) * _585.x;
    float _596 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * ((((_551.y * cbMtdParam._m0[13u].y) - _531) * _388) + _531)) * _585.y;
    float _599 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * ((((_551.z * cbMtdParam._m0[13u].z) - _532) * _388) + _532)) * _585.z;
    vec4 _611 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _622 = ((_611.x - _593) * _437) + _593;
    float _623 = ((_611.y - _596) * _437) + _596;
    float _624 = ((_611.z - _599) * _437) + _599;
    vec4 _637 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _639 = _637.x;
    float _656 = ((texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w)).x - _639) * _306) + _639;
    float _673 = ((texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w)).x - _656) * _356) + _656;
    vec4 _702 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _704 = _702.x;
    float _3997 = isnan(0.0) ? cbMtdParam._m0[14u].w : (isnan(cbMtdParam._m0[14u].w) ? 0.0 : max(cbMtdParam._m0[14u].w, 0.0));
    float _708 = (((((texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.z) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.w) + cbTextureTilingScale._m0[10u].w)).x - _673) * _388) + _673) - _704) * (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) + _704;
    float _710 = _708 - (_708 * _437);
    vec4 _722 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _729 = (_722.x * 2.0) + (-1.0);
    float _730 = (_722.y * 2.0) + (-1.0);
    float _731 = dot(vec2(_729, _730), vec2(_729, _730));
    float _4008 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _739 = ((_722.z - _413) * _437) + _413;
    float _748 = ((sqrt(1.0 - (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) - _424) * _437) + _424;
    vec4 _762 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _772 = (((_729 - _416) * _437) + _416) + (((_762.x * 2.0) + (-1.0)) * cbMtdParam._m0[15u].x);
    float _773 = (((_730 - _418) * _437) + _418) + (((_762.y * 2.0) + (-1.0)) * cbMtdParam._m0[15u].x);
    float _776 = fma(_748, _248, fma(_773, _240 * TANGENT.x, (_226 * _218) * _772));
    float _779 = fma(_748, _249, fma(_773, _240 * TANGENT.y, (_226 * _219) * _772));
    float _782 = fma(_748, _250, fma(_773, _240 * TANGENT.z, (_226 * _220) * _772));
    float _786 = inversesqrt(dot(vec3(_776, _779, _782), vec3(_776, _779, _782)));
    float _787 = _786 * _776;
    float _788 = _786 * _779;
    float _789 = _786 * _782;
    float _4019 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _790 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _4030 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _4041 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _4052 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _4063 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _794 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _810 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _850 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _860 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _850);
    float _861 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _850);
    float _862 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _850);
    float _866 = inversesqrt(dot(vec3(_860, _861, _862), vec3(_860, _861, _862)));
    float _867 = _860 * _866;
    float _868 = _861 * _866;
    float _869 = _862 * _866;
    float _875 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _876 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _894 = fma(_789, cbSceneParam._m0[5u].z, fma(_788, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _787));
    float _897 = fma(_789, cbSceneParam._m0[6u].z, fma(_788, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _787));
    float _900 = fma(_789, cbSceneParam._m0[7u].z, fma(_788, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _787));
    uint _913 = uint(roundEven(NORMAL.w)) * 13u;
    uint _915 = (_913 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _921 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) * cbInstanceData._m0[_915].x;
    float _922 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * cbInstanceData._m0[_915].y;
    float _923 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * cbInstanceData._m0[_915].z;
    float _4074 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _924 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _4085 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _925 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _4096 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _926 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _927 = 1.0 - _794;
    float _928 = _924 * _927;
    float _929 = _925 * _927;
    float _930 = _926 * _927;
    float _935 = (_924 + (-0.039999999105930328369140625)) * _794;
    float _936 = (_925 + (-0.039999999105930328369140625)) * _794;
    float _937 = (_926 + (-0.039999999105930328369140625)) * _794;
    float _938 = _935 + 0.039999999105930328369140625;
    float _940 = _936 + 0.039999999105930328369140625;
    float _941 = _937 + 0.039999999105930328369140625;
    vec4 _950 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _875, cbSceneParam._m0[86u].y * _876));
    float _953 = _950.x * TEXCOORD_4;
    float _954 = dot(vec3(_787, _788, _789), vec3(_867, _868, _869));
    float _957 = _954 * 2.0;
    float _961 = (_957 * _787) - _867;
    float _962 = (_957 * _788) - _868;
    float _963 = (_957 * _789) - _869;
    float _967 = abs(dot(vec3(_867, _868, _869), vec3(_787, _788, _789)));
    float _4107 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _969 = sqrt(_790);
    float _982 = exp2((_969 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_969 * 3.0));
    float _988 = (1.0 - _982) * ((_969 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _989 = _982 * _969;
    float _1017 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1021 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1025 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1327;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1052 = fma(_1025, cbModelParam._m0[26u].z, fma(_1021, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1017));
        float _1056 = fma(_1025, cbModelParam._m0[27u].z, fma(_1021, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1017));
        float _1060 = fma(_1025, cbModelParam._m0[28u].z, fma(_1021, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1017));
        float _1085 = _1017 + _787;
        float _1086 = _1021 + _788;
        float _1087 = _1025 + _789;
        float _1097 = fma(_1087, cbModelParam._m0[26u].z, fma(_1086, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1085)) - _1052;
        float _1098 = fma(_1087, cbModelParam._m0[27u].z, fma(_1086, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1085)) - _1056;
        float _1099 = fma(_1087, cbModelParam._m0[28u].z, fma(_1086, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1085)) - _1060;
        float _1103 = inversesqrt(dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099)));
        float _1116 = ((_1103 * _1097) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1052 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1117 = ((_1103 * _1098) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1056 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1118 = ((_1103 * _1099) / cbModelParam._m0[34u].z) + ((((((_1060 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        float _1155 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1121.x + (-0.5));
        float _1157 = _1155 * (_1121.y + (-0.5));
        float _1158 = _1155 * (_1121.z + (-0.5));
        float _1165 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1128.x + (-0.5));
        float _1167 = _1165 * (_1128.y + (-0.5));
        float _1168 = _1165 * (_1128.z + (-0.5));
        float _1175 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1135.x + (-0.5));
        float _1177 = _1175 * (_1135.y + (-0.5));
        float _1178 = _1175 * (_1135.z + (-0.5));
        float _1185 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1142.x + (-0.5));
        float _1187 = _1185 * (_1142.y + (-0.5));
        float _1188 = _1185 * (_1142.z + (-0.5));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = _1156 * 0.5;
        float _1193 = _1166 * 0.5;
        float _1194 = _1176 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1209 = (dot(vec3(_787, _788, _789), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1219 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _4155 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1221 + 1.0))) + _1226) * _1189;
        float _1236 = _1157 * 0.5;
        float _1237 = _1167 * 0.5;
        float _1238 = _1177 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1252 = (dot(vec3(_787, _788, _789), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1261 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _4188 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1263 + 1.0))) + _1268) * _1190;
        float _1278 = _1158 * 0.5;
        float _1279 = _1168 * 0.5;
        float _1280 = _1178 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1294 = (dot(vec3(_787, _788, _789), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _4199 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1303 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _4210 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _4221 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_1305 + 1.0))) + _1310) * _1191;
        _1327 = _1158;
        _1329 = _1157;
        _1330 = _1156;
        _1331 = _1168;
        _1332 = _1167;
        _1333 = _1166;
        _1334 = _1178;
        _1335 = _1177;
        _1336 = _1176;
        _1337 = _1191;
        _1338 = _1190;
        _1339 = _1189;
        _1340 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
        _1341 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
        _1342 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
    }
    else
    {
        _1327 = _1328;
        _1329 = _1328;
        _1330 = _1328;
        _1331 = _1328;
        _1332 = _1328;
        _1333 = _1328;
        _1334 = _1328;
        _1335 = _1328;
        _1336 = _1328;
        _1337 = _1328;
        _1338 = _1328;
        _1339 = _1328;
        _1340 = 0.0;
        _1341 = 0.0;
        _1342 = 0.0;
    }
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1368 = fma(_1025, cbModelParam._m0[30u].z, fma(_1021, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1017));
        float _1372 = fma(_1025, cbModelParam._m0[31u].z, fma(_1021, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1017));
        float _1376 = fma(_1025, cbModelParam._m0[32u].z, fma(_1021, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1017));
        float _1399 = _1017 + _787;
        float _1400 = _1021 + _788;
        float _1401 = _1025 + _789;
        float _1411 = fma(_1401, cbModelParam._m0[30u].z, fma(_1400, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1399)) - _1368;
        float _1412 = fma(_1401, cbModelParam._m0[31u].z, fma(_1400, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1399)) - _1372;
        float _1413 = fma(_1401, cbModelParam._m0[32u].z, fma(_1400, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1399)) - _1376;
        float _1417 = inversesqrt(dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413)));
        float _1430 = ((_1417 * _1411) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1368 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1431 = ((_1417 * _1412) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1372 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1432 = ((_1417 * _1413) / cbModelParam._m0[35u].z) + ((((((_1376 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        float _1467 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1434.x + (-0.5));
        float _1469 = _1467 * (_1434.y + (-0.5));
        float _1470 = _1467 * (_1434.z + (-0.5));
        float _1477 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1478 = _1477 * (_1441.x + (-0.5));
        float _1479 = _1477 * (_1441.y + (-0.5));
        float _1480 = _1477 * (_1441.z + (-0.5));
        float _1487 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1488 = _1487 * (_1448.x + (-0.5));
        float _1489 = _1487 * (_1448.y + (-0.5));
        float _1490 = _1487 * (_1448.z + (-0.5));
        float _1497 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1498 = _1497 * (_1455.x + (-0.5));
        float _1499 = _1497 * (_1455.y + (-0.5));
        float _1500 = _1497 * (_1455.z + (-0.5));
        float _1501 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1502 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1503 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1504 = _1468 * 0.5;
        float _1505 = _1478 * 0.5;
        float _1506 = _1488 * 0.5;
        float _1507 = dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506));
        float _1512 = (_1507 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1507);
        float _1520 = (dot(vec3(_787, _788, _789), vec3(_1512 * _1504, _1512 * _1505, _1512 * _1506)) + 1.0) * 0.5;
        float _4262 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1529 = sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506)) / (_1501 + 9.9999997473787516355514526367188e-06);
        float _4273 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1531 = _1530 * 2.0;
        float _1535 = (1.0 - _1530) / (_1530 + 1.0);
        float _4284 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1545 = ((((1.0 - _1536) * (_1531 + 2.0)) * exp2(log2(isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_1531 + 1.0))) + _1536) * _1501;
        float _1546 = _1469 * 0.5;
        float _1547 = _1479 * 0.5;
        float _1548 = _1489 * 0.5;
        float _1549 = dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548));
        float _1554 = (_1549 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1549);
        float _1562 = (dot(vec3(_787, _788, _789), vec3(_1554 * _1546, _1554 * _1547, _1554 * _1548)) + 1.0) * 0.5;
        float _4295 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1571 = sqrt(((_1547 * _1547) + (_1546 * _1546)) + (_1548 * _1548)) / (_1502 + 9.9999997473787516355514526367188e-06);
        float _4306 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1573 = _1572 * 2.0;
        float _1577 = (1.0 - _1572) / (_1572 + 1.0);
        float _4317 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1587 = ((((1.0 - _1578) * (_1573 + 2.0)) * exp2(log2(isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_1573 + 1.0))) + _1578) * _1502;
        float _1588 = _1470 * 0.5;
        float _1589 = _1480 * 0.5;
        float _1590 = _1490 * 0.5;
        float _1591 = dot(vec3(_1588, _1589, _1590), vec3(_1588, _1589, _1590));
        float _1596 = (_1591 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1591);
        float _1604 = (dot(vec3(_787, _788, _789), vec3(_1596 * _1588, _1596 * _1589, _1596 * _1590)) + 1.0) * 0.5;
        float _4328 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1613 = sqrt(((_1589 * _1589) + (_1588 * _1588)) + (_1590 * _1590)) / (_1503 + 9.9999997473787516355514526367188e-06);
        float _4339 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1615 = _1614 * 2.0;
        float _1619 = (1.0 - _1614) / (_1614 + 1.0);
        float _4350 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1629 = ((((1.0 - _1620) * (_1615 + 2.0)) * exp2(log2(isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_1615 + 1.0))) + _1620) * _1503;
        _1637 = _1470;
        _1638 = _1469;
        _1639 = _1468;
        _1640 = _1480;
        _1641 = _1479;
        _1642 = _1478;
        _1643 = _1490;
        _1644 = _1489;
        _1645 = _1488;
        _1646 = _1503;
        _1647 = _1502;
        _1648 = _1501;
        _1649 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)));
        _1650 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)));
        _1651 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)));
    }
    else
    {
        _1637 = _1328;
        _1638 = _1328;
        _1639 = _1328;
        _1640 = _1328;
        _1641 = _1328;
        _1642 = _1328;
        _1643 = _1328;
        _1644 = _1328;
        _1645 = _1328;
        _1646 = _1328;
        _1647 = _1328;
        _1648 = _1328;
        _1649 = 0.0;
        _1650 = 0.0;
        _1651 = 0.0;
    }
    float _1661 = (cbModelParam._m0[1u].x * (_1649 - _1340)) + _1340;
    float _1662 = (cbModelParam._m0[1u].x * (_1650 - _1341)) + _1341;
    float _1663 = (cbModelParam._m0[1u].x * (_1651 - _1342)) + _1342;
    float _1684 = fma(_1663, cbSceneParam._m0[89u].z, fma(_1662, cbSceneParam._m0[89u].y, _1661 * cbSceneParam._m0[89u].x));
    float _1687 = fma(_1663, cbSceneParam._m0[90u].z, fma(_1662, cbSceneParam._m0[90u].y, _1661 * cbSceneParam._m0[90u].x));
    float _1690 = fma(_1663, cbSceneParam._m0[91u].z, fma(_1662, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1661));
    float _1705 = _961 * 0.5;
    float _1706 = _962 * 0.5;
    float _1707 = _963 * 0.5;
    float _1708 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1639, _1642, _1645, _1648));
    float _1711 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1638, _1641, _1644, _1647));
    float _1714 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1637, _1640, _1643, _1646));
    float _1748;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1721 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1327, _1331, _1334, _1337));
        float _1725 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1329, _1332, _1335, _1338));
        float _1729 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1330, _1333, _1336, _1339));
        float _1736 = dot(vec4(cbModelParam._m0[39u]), vec4(_1705, _1706, _1707, 1.0));
        _1748 = dot(vec3(isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)), isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)), isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1736) ? 0.0 : (isnan(0.0) ? _1736 : max(0.0, _1736))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1748 = 1.0;
    }
    float _1759;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1750 = dot(vec4(cbModelParam._m0[40u]), vec4(_1705, _1706, _1707, 1.0));
        _1759 = dot(vec3(isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)), isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)), isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1750) ? 0.0 : (isnan(0.0) ? _1750 : max(0.0, _1750))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1759 = 1.0;
    }
    float _1763 = (_1759 * cbModelParam._m0[1u].x) + (_1748 * (1.0 - cbModelParam._m0[1u].x));
    float _1773 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _790);
    float _1774 = isnan(_1773) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1773 : min(cbModelParam._m0[25u].z, _1773));
    float _1854;
    float _1856;
    float _1858;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1821 = fma(_1025, cbModelParam._m0[13u].z, fma(_1021, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1017)) + cbModelParam._m0[13u].w;
        float _1825 = fma(_1025, cbModelParam._m0[14u].z, fma(_1021, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1017)) + cbModelParam._m0[14u].w;
        float _1829 = fma(_1025, cbModelParam._m0[15u].z, fma(_1021, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1017)) + cbModelParam._m0[15u].w;
        float _1832 = fma(_963, cbModelParam._m0[13u].z, fma(_962, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _961));
        float _1835 = fma(_963, cbModelParam._m0[14u].z, fma(_962, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _961));
        float _1838 = fma(_963, cbModelParam._m0[15u].z, fma(_962, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _961));
        float _1866;
        if (_1832 > 0.0)
        {
            _1866 = abs((1.0 - _1821) / _1832);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1821 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1866 = frontier_phi_16_14_ladder;
        }
        float _2040;
        if (_1835 > 0.0)
        {
            _2040 = abs((1.0 - _1825) / _1835);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1825 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2040 = frontier_phi_25_21_ladder;
        }
        float _2335;
        if (_1838 > 0.0)
        {
            _2335 = abs((1.0 - _1829) / _1838);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1829 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2335 = frontier_phi_37_32_ladder;
        }
        float _2337 = isnan(_2040) ? _1866 : (isnan(_1866) ? _2040 : min(_1866, _2040));
        float _2338 = isnan(_2335) ? _2337 : (isnan(_2337) ? _2335 : min(_2337, _2335));
        float _2342 = (_2338 * _1832) + _1821;
        float _2343 = (_2338 * _1835) + _1825;
        float _2344 = (_2338 * _1838) + _1829;
        float _2345 = _2338 * 9.9999997473787516355514526367188e-05;
        float _2347 = (-1.0) - _2345;
        float _2349 = _2345 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2344 > _2349) || ((_2344 < _2347) || ((_2343 > _2349) || ((_2343 < _2347) || ((_2342 < _2347) || (_2342 > _2349))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2489 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2344, cbModelParam._m0[9u].z, fma(_2343, cbModelParam._m0[9u].y, _2342 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2344, cbModelParam._m0[10u].z, fma(_2343, cbModelParam._m0[10u].y, _2342 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2344, cbModelParam._m0[11u].z, fma(_2343, cbModelParam._m0[11u].y, _2342 * cbModelParam._m0[11u].x))), _1774);
            frontier_phi_15_37_ladder = _2489.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2489.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2489.z * cbModelParam._m0[1u].y;
        }
        _1854 = frontier_phi_15_37_ladder_1;
        _1856 = frontier_phi_15_37_ladder;
        _1858 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1842 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_961, _962, _963), _1774);
        _1854 = _1842.x * cbModelParam._m0[1u].y;
        _1856 = _1842.y * cbModelParam._m0[1u].y;
        _1858 = _1842.z * cbModelParam._m0[1u].y;
    }
    float _1862 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _790);
    float _1863 = isnan(_1862) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1862 : min(cbModelParam._m0[25u].w, _1862));
    float _1955;
    float _1957;
    float _1959;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1919 = fma(_1025, cbModelParam._m0[21u].z, fma(_1021, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1017)) + cbModelParam._m0[21u].w;
        float _1923 = fma(_1025, cbModelParam._m0[22u].z, fma(_1021, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1017)) + cbModelParam._m0[22u].w;
        float _1927 = fma(_1025, cbModelParam._m0[23u].z, fma(_1021, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1017)) + cbModelParam._m0[23u].w;
        float _1930 = fma(_963, cbModelParam._m0[21u].z, fma(_962, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _961));
        float _1933 = fma(_963, cbModelParam._m0[22u].z, fma(_962, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _961));
        float _1936 = fma(_963, cbModelParam._m0[23u].z, fma(_962, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _961));
        float _2045;
        if (_1930 > 0.0)
        {
            _2045 = abs((1.0 - _1919) / _1930);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1919 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2045 = frontier_phi_27_23_ladder;
        }
        float _2362;
        if (_1933 > 0.0)
        {
            _2362 = abs((1.0 - _1923) / _1933);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1923 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2362 = frontier_phi_39_34_ladder;
        }
        float _2700;
        if (_1936 > 0.0)
        {
            _2700 = abs((1.0 - _1927) / _1936);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1927 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2700 = frontier_phi_49_46_ladder;
        }
        float _2702 = isnan(_2362) ? _2045 : (isnan(_2045) ? _2362 : min(_2045, _2362));
        float _2703 = isnan(_2700) ? _2702 : (isnan(_2702) ? _2700 : min(_2702, _2700));
        float _2707 = (_2703 * _1930) + _1919;
        float _2708 = (_2703 * _1933) + _1923;
        float _2709 = (_2703 * _1936) + _1927;
        float _2710 = _2703 * 9.9999997473787516355514526367188e-05;
        float _2711 = (-1.0) - _2710;
        float _2713 = _2710 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2709 > _2713) || ((_2709 < _2711) || ((_2708 > _2713) || ((_2708 < _2711) || ((_2707 < _2711) || (_2707 > _2713))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2831 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2709, cbModelParam._m0[17u].z, fma(_2708, cbModelParam._m0[17u].y, _2707 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2709, cbModelParam._m0[18u].z, fma(_2708, cbModelParam._m0[18u].y, _2707 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2709, cbModelParam._m0[19u].z, fma(_2708, cbModelParam._m0[19u].y, _2707 * cbModelParam._m0[19u].x))), _1863);
            frontier_phi_24_49_ladder = _2831.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2831.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2831.x * cbModelParam._m0[1u].z;
        }
        _1955 = frontier_phi_24_49_ladder_2;
        _1957 = frontier_phi_24_49_ladder_1;
        _1959 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1939 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_961, _962, _963), _1863);
        _1955 = _1939.x * cbModelParam._m0[1u].z;
        _1957 = _1939.y * cbModelParam._m0[1u].z;
        _1959 = _1939.z * cbModelParam._m0[1u].z;
    }
    float _1972 = (((_988 * _938) + _989) * _953) * ((cbModelParam._m0[1u].w * (_1955 - _1854)) + _1854);
    float _1974 = (((_988 * _940) + _989) * _953) * ((cbModelParam._m0[1u].w * (_1957 - _1856)) + _1856);
    float _1976 = (((_988 * _941) + _989) * _953) * ((cbModelParam._m0[1u].w * (_1959 - _1858)) + _1858);
    float _1979 = fma(_1976, cbSceneParam._m0[89u].z, fma(_1974, cbSceneParam._m0[89u].y, _1972 * cbSceneParam._m0[89u].x));
    float _1982 = fma(_1976, cbSceneParam._m0[90u].z, fma(_1974, cbSceneParam._m0[90u].y, _1972 * cbSceneParam._m0[90u].x));
    float _1985 = fma(_1976, cbSceneParam._m0[91u].z, fma(_1974, cbSceneParam._m0[91u].y, _1972 * cbSceneParam._m0[91u].x));
    float _2019 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2023 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2027 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2031 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2032 = _2019 / _2031;
    float _2033 = _2023 / _2031;
    float _2034 = _2027 / _2031;
    float _2181;
    float _2182;
    float _2183;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2061 = ((uint(_2034 > cbSceneParam._m0[59u].y) + uint(_2034 > cbSceneParam._m0[59u].x)) + uint(_2034 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2062 = _2061 + 43u;
        uint _2070 = _2061 + 44u;
        uint _2078 = _2061 + 45u;
        uint _2086 = _2061 + 46u;
        float _2097 = fma(_2031, cbSceneParam._m0[_2062].w, fma(_2027, cbSceneParam._m0[_2062].z, fma(_2023, cbSceneParam._m0[_2062].y, _2019 * cbSceneParam._m0[_2062].x)));
        float _2101 = fma(_2031, cbSceneParam._m0[_2070].w, fma(_2027, cbSceneParam._m0[_2070].z, fma(_2023, cbSceneParam._m0[_2070].y, _2019 * cbSceneParam._m0[_2070].x)));
        float _2109 = fma(_2031, cbSceneParam._m0[_2086].w, fma(_2027, cbSceneParam._m0[_2086].z, fma(_2023, cbSceneParam._m0[_2086].y, _2019 * cbSceneParam._m0[_2086].x)));
        float _2114 = cbSceneParam._m0[33u].z * _2109;
        float _2116 = cbSceneParam._m0[33u].w * _2109;
        float _2119 = fma(_2031, cbSceneParam._m0[_2078].w, fma(_2027, cbSceneParam._m0[_2078].z, fma(_2023, cbSceneParam._m0[_2078].y, _2019 * cbSceneParam._m0[_2078].x))) / _2109;
        float _2167 = (cbSceneParam._m0[33u].x - sqrt(((_2033 * _2033) + (_2032 * _2032)) + (_2034 * _2034))) * cbSceneParam._m0[33u].y;
        float _4476 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2174 = (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2114 + _2097) / _2109, (_2116 + _2101) / _2109), _2119), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2116 + _2097) / _2109, (_2101 - _2114) / _2109), _2119), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2097 - _2114) / _2109, (_2101 - _2116) / _2109), _2119), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2097 - _2116) / _2109, (_2114 + _2101) / _2109), _2119), 0.0)).x), vec4(0.25)));
        _2181 = 1.0 - (_2174 * cbSceneParam._m0[34u].x);
        _2182 = 1.0 - (_2174 * cbSceneParam._m0[34u].y);
        _2183 = 1.0 - (_2174 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2181 = 1.0;
        _2182 = 1.0;
        _2183 = 1.0;
    }
    float _2247;
    float _2249;
    float _2251;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2235 = fma(_2031, cbSceneParam._m0[63u].w, fma(_2027, cbSceneParam._m0[63u].z, fma(_2023, cbSceneParam._m0[63u].y, _2019 * cbSceneParam._m0[63u].x)));
        float _2236 = fma(_2031, cbSceneParam._m0[60u].w, fma(_2027, cbSceneParam._m0[60u].z, fma(_2023, cbSceneParam._m0[60u].y, _2019 * cbSceneParam._m0[60u].x))) / _2235;
        float _2237 = fma(_2031, cbSceneParam._m0[61u].w, fma(_2027, cbSceneParam._m0[61u].z, fma(_2023, cbSceneParam._m0[61u].y, _2019 * cbSceneParam._m0[61u].x))) / _2235;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2236 >= cbSceneParam._m0[64u].x) && (_2237 >= cbSceneParam._m0[64u].y)) && (_2236 <= cbSceneParam._m0[64u].z)) && (_2237 <= cbSceneParam._m0[64u].w))
        {
            float _2375 = fma(_2031, cbSceneParam._m0[62u].w, fma(_2027, cbSceneParam._m0[62u].z, fma(_2023, cbSceneParam._m0[62u].y, _2019 * cbSceneParam._m0[62u].x))) / _2235;
            float _2379 = isnan(cbSceneParam._m0[41u].w) ? _2375 : (isnan(_2375) ? cbSceneParam._m0[41u].w : max(_2375, cbSceneParam._m0[41u].w));
            float _2422 = (cbSceneParam._m0[33u].x - sqrt(((_2033 * _2033) + (_2032 * _2032)) + (_2034 * _2034))) * cbSceneParam._m0[33u].y;
            float _4492 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
            float _2429 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2236, cbSceneParam._m0[33u].w + _2237), _2379), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2236, _2237 - cbSceneParam._m0[33u].z), _2379), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2236 - cbSceneParam._m0[33u].z, _2237 - cbSceneParam._m0[33u].w), _2379), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2236 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2237), _2379), 0.0)).x), vec4(0.25)));
            float _2433 = 1.0 - (_2429 * cbSceneParam._m0[34u].x);
            float _2434 = 1.0 - (_2429 * cbSceneParam._m0[34u].y);
            float _2435 = 1.0 - (_2429 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2434) ? _2182 : (isnan(_2182) ? _2434 : min(_2182, _2434));
            frontier_phi_36_35_ladder_1 = isnan(_2435) ? _2183 : (isnan(_2183) ? _2435 : min(_2183, _2435));
            frontier_phi_36_35_ladder_2 = isnan(_2433) ? _2181 : (isnan(_2181) ? _2433 : min(_2181, _2433));
        }
        else
        {
            frontier_phi_36_35_ladder = _2182;
            frontier_phi_36_35_ladder_1 = _2183;
            frontier_phi_36_35_ladder_2 = _2181;
        }
        _2247 = frontier_phi_36_35_ladder_2;
        _2249 = frontier_phi_36_35_ladder;
        _2251 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2247 = _2181;
        _2249 = _2182;
        _2251 = _2183;
    }
    uvec4 _2256 = floatBitsToUint(cbInstanceData._m0[_913 + 5u]);
    uint _2258 = _2256.x * 14u;
    uint _2259 = _2258 + 13u;
    float _2266 = _953 + (-1.0);
    float _2271 = (cbLight._m0[_2259].x * _2266) + 1.0;
    float _2272 = (cbLight._m0[_2259].y * _2266) + 1.0;
    float _2273 = (cbLight._m0[_2259].z * _2266) + 1.0;
    float _2274 = (cbLight._m0[_2259].w * _2266) + 1.0;
    uint _2275 = _2258 + 5u;
    float _2281 = isnan(1.0) ? _2272 : (isnan(_2272) ? 1.0 : min(_2272, 1.0));
    uint _2285 = _2258 + 4u;
    float _2294 = isnan(1.0) ? _2271 : (isnan(_2271) ? 1.0 : min(_2271, 1.0));
    uint _2298 = _2258 | 1u;
    float _2309 = dot(vec3(cbLight._m0[_2258].xyz), vec3(_787, _788, _789));
    float _2312 = dot(vec3(cbLight._m0[_2298].xyz), vec3(_787, _788, _789));
    float _4528 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _4539 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2317 = (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * 0.3183098733425140380859375;
    float _2319 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * 0.3183098733425140380859375;
    float _2326 = ((cbLight._m0[_2275].x * _2281) * _2319) + (((cbLight._m0[_2285].x * _2247) * _2294) * _2317);
    float _2327 = ((_2281 * cbLight._m0[_2275].y) * _2319) + (((cbLight._m0[_2285].y * _2249) * _2294) * _2317);
    float _2328 = ((_2281 * cbLight._m0[_2275].z) * _2319) + (((cbLight._m0[_2285].z * _2251) * _2294) * _2317);
    uvec4 _2332 = floatBitsToUint(cbLight._m0[_2258 + 12u]);
    bool _2334 = _2332.x == 0u;
    float _2436;
    float _2438;
    float _2440;
    if (_2334)
    {
        _2436 = _2326;
        _2438 = _2327;
        _2440 = _2328;
    }
    else
    {
        uint _2444 = _2258 + 6u;
        float _2460 = (dot(vec3(cbLight._m0[_2258 + 2u].xyz), vec3(_787, _788, _789)) * 0.5) + 0.5;
        float _2461 = _2460 * _2460;
        float _4550 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2462 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _2463 = isnan(1.0) ? _2273 : (isnan(_2273) ? 1.0 : min(_2273, 1.0));
        _2436 = (((cbLight._m0[_2444].x * 0.3183098733425140380859375) * _2462) * _2463) + _2326;
        _2438 = (((cbLight._m0[_2444].y * 0.3183098733425140380859375) * _2462) * _2463) + _2327;
        _2440 = (((cbLight._m0[_2444].z * 0.3183098733425140380859375) * _2462) * _2463) + _2328;
    }
    bool _2443 = _2332.y == 0u;
    float _2498;
    float _2500;
    float _2502;
    if (_2443)
    {
        _2498 = _2436;
        _2500 = _2438;
        _2502 = _2440;
    }
    else
    {
        uint _2671 = _2258 + 7u;
        float _2687 = (dot(vec3(cbLight._m0[_2258 + 3u].xyz), vec3(_787, _788, _789)) * 0.5) + 0.5;
        float _2688 = _2687 * _2687;
        float _4566 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        float _2689 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _2690 = isnan(1.0) ? _2274 : (isnan(_2274) ? 1.0 : min(_2274, 1.0));
        _2498 = (((cbLight._m0[_2671].x * 0.3183098733425140380859375) * _2689) * _2690) + _2436;
        _2500 = (((cbLight._m0[_2671].y * 0.3183098733425140380859375) * _2689) * _2690) + _2438;
        _2502 = (((cbLight._m0[_2671].z * 0.3183098733425140380859375) * _2689) * _2690) + _2440;
    }
    uint _2505 = _2258 + 8u;
    float _2518 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2258].w)) * _790) * 0.949999988079071044921875);
    float _2519 = _2518 * _2518;
    float _2520 = cbLight._m0[_2258].x + _867;
    float _2521 = cbLight._m0[_2258].y + _868;
    float _2522 = cbLight._m0[_2258].z + _869;
    float _2526 = inversesqrt(dot(vec3(_2520, _2521, _2522), vec3(_2520, _2521, _2522)));
    float _2527 = _2526 * _2520;
    float _2528 = _2526 * _2521;
    float _2529 = _2526 * _2522;
    float _2530 = dot(vec3(_787, _788, _789), vec3(cbLight._m0[_2258].xyz));
    float _4582 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
    float _2533 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
    float _4593 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _2534 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
    float _2535 = dot(vec3(_787, _788, _789), vec3(_2527, _2528, _2529));
    float _4604 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    float _2538 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    float _2539 = dot(vec3(cbLight._m0[_2258].xyz), vec3(_2527, _2528, _2529));
    float _4615 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
    float _2543 = _2519 * _2519;
    float _2547 = ((_2538 * _2538) * (_2543 + (-1.0))) + 1.0;
    float _2555 = exp2(log2(1.0 - (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)))) * 5.0);
    float _2556 = 0.959999978542327880859375 - _935;
    float _2558 = 0.959999978542327880859375 - _936;
    float _2559 = 0.959999978542327880859375 - _937;
    float _2566 = 1.0 - _2519;
    float _2577 = (0.5 / (((_2534 * ((_2533 * _2566) + _2519)) + 9.9999999392252902907785028219223e-09) + (((_2534 * _2566) + _2519) * _2533))) * _2533;
    float _4626 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
    float _2579 = (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2543 / ((_2547 * _2547) * 3.141590118408203125));
    uint _2593 = _2258 + 9u;
    float _2604 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2298].w)) * _790) * 0.949999988079071044921875);
    float _2605 = _2604 * _2604;
    float _2606 = cbLight._m0[_2298].x + _867;
    float _2607 = cbLight._m0[_2298].y + _868;
    float _2608 = cbLight._m0[_2298].z + _869;
    float _2612 = inversesqrt(dot(vec3(_2606, _2607, _2608), vec3(_2606, _2607, _2608)));
    float _2613 = _2612 * _2606;
    float _2614 = _2612 * _2607;
    float _2615 = _2612 * _2608;
    float _2616 = dot(vec3(_787, _788, _789), vec3(cbLight._m0[_2298].xyz));
    float _4637 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
    float _2619 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
    float _2620 = dot(vec3(_787, _788, _789), vec3(_2613, _2614, _2615));
    float _4648 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
    float _2623 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
    float _2624 = dot(vec3(cbLight._m0[_2298].xyz), vec3(_2613, _2614, _2615));
    float _4659 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
    float _2628 = _2605 * _2605;
    float _2632 = ((_2623 * _2623) * (_2628 + (-1.0))) + 1.0;
    float _2639 = exp2(log2(1.0 - (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0)))) * 5.0);
    float _2646 = 1.0 - _2605;
    float _2656 = (0.5 / (((_2534 * ((_2619 * _2646) + _2605)) + 9.9999999392252902907785028219223e-09) + (((_2534 * _2646) + _2605) * _2619))) * _2619;
    float _4670 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
    float _2658 = (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (_2628 / ((_2632 * _2632) * 3.141590118408203125));
    float _2668 = (((((_2639 * _2556) + _938) * cbLight._m0[_2593].x) * _2658) * _2281) + ((((cbLight._m0[_2505].x * _2247) * ((_2555 * _2556) + _938)) * _2579) * _2294);
    float _2669 = (((((_2639 * _2558) + _940) * cbLight._m0[_2593].y) * _2658) * _2281) + ((((cbLight._m0[_2505].y * _2249) * ((_2555 * _2558) + _940)) * _2579) * _2294);
    float _2670 = (((((_2639 * _2559) + _941) * cbLight._m0[_2593].z) * _2658) * _2281) + ((((cbLight._m0[_2505].z * _2251) * ((_2555 * _2559) + _941)) * _2579) * _2294);
    float _2726;
    float _2728;
    float _2730;
    if (_2334)
    {
        _2726 = _2668;
        _2728 = _2669;
        _2730 = _2670;
    }
    else
    {
        uint _2732 = _2258 + 2u;
        uint _2736 = _2258 + 10u;
        float _2750 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2732].w)) * _790) * 0.949999988079071044921875);
        float _2751 = _2750 * _2750;
        float _2752 = cbLight._m0[_2732].x + _867;
        float _2753 = cbLight._m0[_2732].y + _868;
        float _2754 = cbLight._m0[_2732].z + _869;
        float _2758 = inversesqrt(dot(vec3(_2752, _2753, _2754), vec3(_2752, _2753, _2754)));
        float _2759 = _2758 * _2752;
        float _2760 = _2758 * _2753;
        float _2761 = _2758 * _2754;
        float _2762 = dot(vec3(_787, _788, _789), vec3(cbLight._m0[_2732].xyz));
        float _4681 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        float _2765 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
        float _2766 = dot(vec3(_787, _788, _789), vec3(_2759, _2760, _2761));
        float _4692 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        float _2769 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _2770 = dot(vec3(cbLight._m0[_2732].xyz), vec3(_2759, _2760, _2761));
        float _4703 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        float _2774 = _2751 * _2751;
        float _2778 = ((_2769 * _2769) * (_2774 + (-1.0))) + 1.0;
        float _2785 = exp2(log2(1.0 - (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0)))) * 5.0);
        float _2792 = 1.0 - _2751;
        float _2802 = (0.5 / (((_2534 * ((_2765 * _2792) + _2751)) + 9.9999999392252902907785028219223e-09) + (((_2534 * _2792) + _2751) * _2765))) * _2765;
        float _4714 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
        float _2804 = (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * (_2774 / ((_2778 * _2778) * 3.141590118408203125));
        float _2805 = isnan(1.0) ? _2273 : (isnan(_2273) ? 1.0 : min(_2273, 1.0));
        _2726 = (((((_2785 * _2556) + _938) * cbLight._m0[_2736].x) * _2804) * _2805) + _2668;
        _2728 = (((((_2785 * _2558) + _940) * cbLight._m0[_2736].y) * _2804) * _2805) + _2669;
        _2730 = (((((_2785 * _2559) + _941) * cbLight._m0[_2736].z) * _2804) * _2805) + _2670;
    }
    float _2836;
    float _2838;
    float _2840;
    if (_2443)
    {
        _2836 = _2726;
        _2838 = _2728;
        _2840 = _2730;
    }
    else
    {
        uint _2847 = _2258 + 3u;
        uint _2851 = _2258 + 11u;
        float _2865 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2847].w)) * _790) * 0.949999988079071044921875);
        float _2866 = _2865 * _2865;
        float _2867 = cbLight._m0[_2847].x + _867;
        float _2868 = cbLight._m0[_2847].y + _868;
        float _2869 = cbLight._m0[_2847].z + _869;
        float _2873 = inversesqrt(dot(vec3(_2867, _2868, _2869), vec3(_2867, _2868, _2869)));
        float _2874 = _2873 * _2867;
        float _2875 = _2873 * _2868;
        float _2876 = _2873 * _2869;
        float _2877 = dot(vec3(_787, _788, _789), vec3(cbLight._m0[_2847].xyz));
        float _4730 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
        float _2880 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
        float _2881 = dot(vec3(_787, _788, _789), vec3(_2874, _2875, _2876));
        float _4741 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
        float _2884 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
        float _2885 = dot(vec3(cbLight._m0[_2847].xyz), vec3(_2874, _2875, _2876));
        float _4752 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
        float _2889 = _2866 * _2866;
        float _2893 = ((_2884 * _2884) * (_2889 + (-1.0))) + 1.0;
        float _2900 = exp2(log2(1.0 - (isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0)))) * 5.0);
        float _2907 = 1.0 - _2866;
        float _2917 = (0.5 / (((_2534 * ((_2880 * _2907) + _2866)) + 9.9999999392252902907785028219223e-09) + (((_2534 * _2907) + _2866) * _2880))) * _2880;
        float _4763 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
        float _2919 = (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0))) * (_2889 / ((_2893 * _2893) * 3.141590118408203125));
        float _2920 = isnan(1.0) ? _2274 : (isnan(_2274) ? 1.0 : min(_2274, 1.0));
        _2836 = (((((_2900 * _2556) + _938) * cbLight._m0[_2851].x) * _2919) * _2920) + _2726;
        _2838 = (((((_2900 * _2558) + _940) * cbLight._m0[_2851].y) * _2919) * _2920) + _2728;
        _2840 = (((((_2900 * _2559) + _941) * cbLight._m0[_2851].z) * _2919) * _2920) + _2730;
    }
    float _2985;
    float _2987;
    float _2989;
    float _2991;
    float _2993;
    float _2995;
    if (_2256.y == 0u)
    {
        uvec4 _2941 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2942 = _2941.x;
        uint _2953 = uint((float(_2941.y) * floor(float(uint(cbSceneParam._m0[85u].y * _876) / _2942))) + floor(float(uint(cbSceneParam._m0[85u].x * _875) / _2942)));
        float _2963 = (log2(_2034 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2964 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
        uint _2967 = uint(isnan(14.0) ? _2964 : (isnan(_2964) ? 14.0 : min(_2964, 14.0)));
        uvec4 _2972 = texelFetch(g_lightClusterGridBuffer, int(((_2967 << 2u) + (_2953 << 6u)) >> 2u));
        uint _2973 = _2972.x;
        uint _2974 = _2941.z;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        if (((((1u << ((_2974 >> 4u) & 15u)) + 4294967295u) & _2973) == 0u) || ((_2974 & 240u) == 0u))
        {
            _3052 = 0.0;
            _3054 = 0.0;
            _3056 = 0.0;
            _3058 = 0.0;
            _3060 = 0.0;
            _3062 = 0.0;
        }
        else
        {
            float _3053;
            float _3055;
            float _3057;
            float _3059;
            float _3061;
            float _3063;
            float _3196 = 0.0;
            float _3197 = 0.0;
            float _3198 = 0.0;
            float _3199 = 0.0;
            float _3200 = 0.0;
            float _3201 = 0.0;
            uint _3202 = 0u;
            uint _3211;
            bool _3212;
            for (;;)
            {
                _3211 = texelFetch(g_lightClassification, int((((_2967 << 5u) + (_2953 << 9u)) + (_3202 << 2u)) >> 2u)).x;
                _3212 = _3211 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3212)
                {
                    frontier_phi_68_pred = _3201;
                    frontier_phi_68_pred_1 = _3200;
                    frontier_phi_68_pred_2 = _3199;
                    frontier_phi_68_pred_3 = _3197;
                    frontier_phi_68_pred_4 = _3196;
                    frontier_phi_68_pred_5 = _3198;
                }
                else
                {
                    float _3320;
                    float _3321;
                    float _3322;
                    float _3323;
                    float _3324;
                    float _3325;
                    uint _3326;
                    _3320 = _3196;
                    _3321 = _3197;
                    _3322 = _3198;
                    _3323 = _3199;
                    _3324 = _3200;
                    _3325 = _3201;
                    _3326 = _3211;
                    float _3252;
                    float _3253;
                    float _3254;
                    float _3255;
                    float _3256;
                    float _3257;
                    for (;;)
                    {
                        uint _3330 = uint(findLSB(_3326)) + (_3202 << 5u);
                        uint _3327 = (_3326 + 4294967295u) & _3326;
                        uint _3332 = _3330 * 48u;
                        vec4 _3346 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3332)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 3u)).x));
                        uint _3352 = (_3330 * 48u) + 4u;
                        vec4 _3365 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3352)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 3u)).x));
                        uint _3371 = (_3330 * 48u) + 8u;
                        vec3 _3382 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3371)).x, texelFetch(g_PointLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3371 + 2u)).x));
                        float _3386 = _3346.x - _2032;
                        float _3387 = _3346.y - _2033;
                        float _3388 = _3346.z - _2034;
                        float _3389 = dot(vec3(_3386, _3387, _3388), vec3(_3386, _3387, _3388));
                        float _3392 = inversesqrt(_3389);
                        float _3393 = _3392 * _3386;
                        float _3394 = _3392 * _3387;
                        float _3395 = _3392 * _3388;
                        float _3396 = dot(vec3(_894, _897, _900), vec3(_3393, _3394, _3395));
                        float _3401 = 1.0 - (_3389 * _3346.w);
                        float _4789 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                        float _3402 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
                        float _3403 = sqrt(_3389) * _3365.w;
                        float _3406 = 1.39999997615814208984375 / (_3403 + 1.39999997615814208984375);
                        float _3407 = _3406 * _3406;
                        float _3410 = ((1.0 - _3407) * _3396) + _3407;
                        float _3413 = _3403 * _3403;
                        float _3417 = ((isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0))) * _3402) / ((_3413 * 0.699999988079071044921875) + 1.0);
                        float _3421 = (-0.0) - _2032;
                        float _3422 = (-0.0) - _2033;
                        float _3423 = (-0.0) - _2034;
                        float _3427 = inversesqrt(dot(vec3(_3421, _3422, _3423), vec3(_3421, _3422, _3423)));
                        float _3428 = _3427 * _3421;
                        float _3429 = _3427 * _3422;
                        float _3430 = _3427 * _3423;
                        float _3437 = exp2(log2(1.0 / ((_3413 * 3.5) + 5.0)) * 0.25);
                        float _3438 = 1.0 - _969;
                        float _3445 = sqrt(1.0 - ((1.0 - (_3438 * _3438)) * (1.0 - (_3437 * _3437))));
                        float _3446 = _3445 * _3445;
                        float _3447 = _3446 * _3446;
                        float _3448 = _3428 + _3393;
                        float _3449 = _3429 + _3394;
                        float _3450 = _3430 + _3395;
                        float _3454 = inversesqrt(dot(vec3(_3448, _3449, _3450), vec3(_3448, _3449, _3450)));
                        float _3458 = dot(vec3(_894, _897, _900), vec3(_3428, _3429, _3430));
                        float _4805 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                        float _3461 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                        float _3462 = dot(vec3(_894, _897, _900), vec3(_3454 * _3448, _3454 * _3449, _3454 * _3450));
                        float _4816 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                        float _3465 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                        float _3469 = ((_3465 * _3465) * (_3447 + (-1.0))) + 1.0;
                        float _3470 = _3406 * _3446;
                        float _3471 = _3470 * _3470;
                        float _3474 = ((1.0 - _3471) * _3396) + _3471;
                        float _4827 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                        float _3475 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                        float _3476 = 1.0 - _3446;
                        float _3486 = (0.5 / (((_3475 * ((_3461 * _3476) + _3446)) + 9.9999999392252902907785028219223e-09) + (((_3475 * _3476) + _3446) * _3461))) * _3475;
                        float _4838 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                        float _3497 = (((_3447 * 3.1415927410125732421875) * (isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0)))) / ((_3469 * _3469) * ((_3413 * 2.1991131305694580078125) + 3.141590118408203125))) * _3402;
                        _3255 = (_3417 * _3365.x) + _3323;
                        _3256 = (_3417 * _3365.y) + _3324;
                        _3257 = (_3417 * _3365.z) + _3325;
                        _3252 = (_3497 * _3382.x) + _3320;
                        _3253 = (_3497 * _3382.y) + _3321;
                        _3254 = (_3497 * _3382.z) + _3322;
                        if (_3327 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3320 = _3252;
                            _3321 = _3253;
                            _3322 = _3254;
                            _3323 = _3255;
                            _3324 = _3256;
                            _3325 = _3257;
                            _3326 = _3327;
                        }
                    }
                    frontier_phi_68_pred = _3257;
                    frontier_phi_68_pred_1 = _3256;
                    frontier_phi_68_pred_2 = _3255;
                    frontier_phi_68_pred_3 = _3253;
                    frontier_phi_68_pred_4 = _3252;
                    frontier_phi_68_pred_5 = _3254;
                }
                _3063 = frontier_phi_68_pred;
                _3061 = frontier_phi_68_pred_1;
                _3059 = frontier_phi_68_pred_2;
                _3055 = frontier_phi_68_pred_3;
                _3053 = frontier_phi_68_pred_4;
                _3057 = frontier_phi_68_pred_5;
                uint _3203 = _3202 + 1u;
                if (_3203 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3196 = _3053;
                    _3197 = _3055;
                    _3198 = _3057;
                    _3199 = _3059;
                    _3200 = _3061;
                    _3201 = _3063;
                    _3202 = _3203;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3052 = _3053;
            _3054 = _3055;
            _3056 = _3057;
            _3058 = _3059;
            _3060 = _3061;
            _3062 = _3063;
        }
        uvec4 _3066 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3067 = _3066.z;
        uint _3069 = (_3067 >> 8u) & 15u;
        float _3164;
        float _3166;
        float _3168;
        float _3170;
        float _3172;
        float _3174;
        if (((4294967295u << _3069) & _2973) == 0u)
        {
            _3164 = _3052;
            _3166 = _3054;
            _3168 = _3056;
            _3170 = _3058;
            _3172 = _3060;
            _3174 = _3062;
        }
        else
        {
            float _3189 = inversesqrt(dot(vec3(_2032, _2033, _2034), vec3(_2032, _2033, _2034)));
            float _3190 = _3189 * _2032;
            float _3191 = _3189 * _2033;
            float _3192 = _3189 * _2034;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3069 < ((_3067 >> 12u) & 15u))
            {
                float _3165;
                float _3167;
                float _3169;
                float _3171;
                float _3173;
                float _3175;
                float _3303 = _3052;
                float _3304 = _3054;
                float _3305 = _3056;
                float _3306 = _3058;
                float _3307 = _3060;
                float _3308 = _3062;
                uint _3309 = _3069;
                uint _3318;
                bool _3319;
                for (;;)
                {
                    _3318 = texelFetch(g_lightClassification, int((((_2967 << 5u) + (_2953 << 9u)) + (_3309 << 2u)) >> 2u)).x;
                    _3319 = _3318 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3319)
                    {
                        frontier_phi_74_pred = _3305;
                        frontier_phi_74_pred_1 = _3304;
                        frontier_phi_74_pred_2 = _3303;
                        frontier_phi_74_pred_3 = _3308;
                        frontier_phi_74_pred_4 = _3307;
                        frontier_phi_74_pred_5 = _3306;
                    }
                    else
                    {
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3507;
                        float _3797;
                        float _3798;
                        float _3799;
                        float _3800;
                        float _3801;
                        float _3802;
                        float _3515 = _3303;
                        float _3516 = _3304;
                        float _3517 = _3305;
                        float _3518 = _3306;
                        float _3519 = _3307;
                        float _3520 = _3308;
                        uint _3521 = _3318;
                        uint _3522;
                        vec4 _3547;
                        float _3548;
                        vec4 _3563;
                        vec3 _3575;
                        vec4 _3590;
                        vec4 _3606;
                        float _3653;
                        bool _3654;
                        for (;;)
                        {
                            uint _3532 = ((_3309 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3521));
                            _3522 = (_3521 + 4294967295u) & _3521;
                            uint _3534 = _3532 * 40u;
                            _3547 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3534)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 3u)).x));
                            _3548 = _3547.w;
                            uint _3550 = (_3532 * 40u) + 4u;
                            _3563 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3550)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 3u)).x));
                            uint _3565 = (_3532 * 40u) + 8u;
                            _3575 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3565)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 2u)).x));
                            uint _3577 = (_3532 * 40u) + 16u;
                            _3590 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 3u)).x));
                            uint _3593 = (_3532 * 40u) + 20u;
                            _3606 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 3u)).x));
                            uint _3609 = (_3532 * 40u) + 24u;
                            vec4 _3622 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3609)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 3u)).x));
                            uint _3628 = (_3532 * 40u) + 28u;
                            vec4 _3641 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3628)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 3u)).x));
                            _3653 = fma(_2034, _3641.z, fma(_2033, _3641.y, _3641.x * _2032)) + _3641.w;
                            _3654 = !((fma(_2034, _3622.z, fma(_2033, _3622.y, _3622.x * _2032)) + _3622.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3654)
                            {
                                float _3681 = _3547.x - _2032;
                                float _3682 = _3547.y - _2033;
                                float _3683 = _3547.z - _2034;
                                float _3684 = dot(vec3(_3681, _3682, _3683), vec3(_3681, _3682, _3683));
                                float _3687 = inversesqrt(_3684);
                                float _3688 = _3687 * _3681;
                                float _3689 = _3687 * _3682;
                                float _3690 = _3687 * _3683;
                                float _3694 = 1.0 - (_3684 / (_3548 * _3548));
                                float _4849 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                                float _3695 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                                float _3699 = sqrt(_3684) * _3563.w;
                                float _3701 = 1.39999997615814208984375 / (_3699 + 1.39999997615814208984375);
                                float _3702 = _3701 * _3701;
                                float _3705 = ((1.0 - _3702) * dot(vec3(_3688, _3689, _3690), vec3(_894, _897, _900))) + _3702;
                                float _3708 = _3699 * _3699;
                                float _3712 = (fma(_2034, _3590.z, fma(_2033, _3590.y, _3590.x * _2032)) + _3590.w) / _3653;
                                float _3713 = (fma(_2034, _3606.z, fma(_2033, _3606.y, _3606.x * _2032)) + _3606.w) / _3653;
                                float _3717 = 1.0 - dot(vec2(_3712, _3713), vec2(_3712, _3713));
                                float _4865 = isnan(0.0) ? _3717 : (isnan(_3717) ? 0.0 : max(_3717, 0.0));
                                float _3718 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                                float _3719 = _3718 * (((isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0))) * _3695) / ((_3708 * 0.699999988079071044921875) + 1.0));
                                float _3731 = exp2(log2(1.0 / ((_3708 * 3.5) + 5.0)) * 0.25);
                                float _3732 = 1.0 - _969;
                                float _3739 = sqrt(1.0 - ((1.0 - (_3732 * _3732)) * (1.0 - (_3731 * _3731))));
                                float _3740 = _3739 * _3739;
                                float _3741 = _3740 * _3740;
                                float _3742 = _3688 - _3190;
                                float _3743 = _3689 - _3191;
                                float _3744 = _3690 - _3192;
                                float _3748 = inversesqrt(dot(vec3(_3742, _3743, _3744), vec3(_3742, _3743, _3744)));
                                float _3752 = dot(vec3(_894, _897, _900), vec3((-0.0) - _3190, (-0.0) - _3191, (-0.0) - _3192));
                                float _4876 = isnan(0.0) ? _3752 : (isnan(_3752) ? 0.0 : max(_3752, 0.0));
                                float _3755 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
                                float _3756 = dot(vec3(_894, _897, _900), vec3(_3748 * _3742, _3748 * _3743, _3748 * _3744));
                                float _4887 = isnan(0.0) ? _3756 : (isnan(_3756) ? 0.0 : max(_3756, 0.0));
                                float _3759 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                                float _3763 = ((_3759 * _3759) * (_3741 + (-1.0))) + 1.0;
                                float _3764 = _3701 * _3740;
                                float _3765 = _3764 * _3764;
                                float _3771 = ((1.0 - _3765) * dot(vec3(_894, _897, _900), vec3(_3688, _3689, _3690))) + _3765;
                                float _4898 = isnan(0.0) ? _3771 : (isnan(_3771) ? 0.0 : max(_3771, 0.0));
                                float _3772 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                                float _3773 = 1.0 - _3740;
                                float _3783 = (0.5 / (((_3772 * ((_3755 * _3773) + _3740)) + 9.9999999392252902907785028219223e-09) + (((_3772 * _3773) + _3740) * _3755))) * _3772;
                                float _4909 = isnan(0.0) ? _3783 : (isnan(_3783) ? 0.0 : max(_3783, 0.0));
                                float _3793 = (_3718 * _3695) * (((_3741 * 3.1415927410125732421875) * (isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0)))) / ((_3763 * _3763) * ((_3708 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3793 * _3575.z;
                                frontier_phi_80_pred_1 = _3793 * _3575.y;
                                frontier_phi_80_pred_2 = _3793 * _3575.x;
                                frontier_phi_80_pred_3 = _3719 * _3563.z;
                                frontier_phi_80_pred_4 = _3719 * _3563.y;
                                frontier_phi_80_pred_5 = _3719 * _3563.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3799 = frontier_phi_80_pred;
                            _3798 = frontier_phi_80_pred_1;
                            _3797 = frontier_phi_80_pred_2;
                            _3802 = frontier_phi_80_pred_3;
                            _3801 = frontier_phi_80_pred_4;
                            _3800 = frontier_phi_80_pred_5;
                            _3505 = _3800 + _3518;
                            _3506 = _3801 + _3519;
                            _3507 = _3802 + _3520;
                            _3502 = _3797 + _3515;
                            _3503 = _3798 + _3516;
                            _3504 = _3799 + _3517;
                            if (_3522 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3515 = _3502;
                                _3516 = _3503;
                                _3517 = _3504;
                                _3518 = _3505;
                                _3519 = _3506;
                                _3520 = _3507;
                                _3521 = _3522;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3504;
                        frontier_phi_74_pred_1 = _3503;
                        frontier_phi_74_pred_2 = _3502;
                        frontier_phi_74_pred_3 = _3507;
                        frontier_phi_74_pred_4 = _3506;
                        frontier_phi_74_pred_5 = _3505;
                    }
                    _3169 = frontier_phi_74_pred;
                    _3167 = frontier_phi_74_pred_1;
                    _3165 = frontier_phi_74_pred_2;
                    _3175 = frontier_phi_74_pred_3;
                    _3173 = frontier_phi_74_pred_4;
                    _3171 = frontier_phi_74_pred_5;
                    uint _3310 = _3309 + 1u;
                    if (_3310 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3303 = _3165;
                        _3304 = _3167;
                        _3305 = _3169;
                        _3306 = _3171;
                        _3307 = _3173;
                        _3308 = _3175;
                        _3309 = _3310;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3173;
                frontier_phi_62_63_ladder_1 = _3171;
                frontier_phi_62_63_ladder_2 = _3169;
                frontier_phi_62_63_ladder_3 = _3175;
                frontier_phi_62_63_ladder_4 = _3167;
                frontier_phi_62_63_ladder_5 = _3165;
            }
            else
            {
                frontier_phi_62_63_ladder = _3060;
                frontier_phi_62_63_ladder_1 = _3058;
                frontier_phi_62_63_ladder_2 = _3056;
                frontier_phi_62_63_ladder_3 = _3062;
                frontier_phi_62_63_ladder_4 = _3054;
                frontier_phi_62_63_ladder_5 = _3052;
            }
            _3164 = frontier_phi_62_63_ladder_5;
            _3166 = frontier_phi_62_63_ladder_4;
            _3168 = frontier_phi_62_63_ladder_2;
            _3170 = frontier_phi_62_63_ladder_1;
            _3172 = frontier_phi_62_63_ladder;
            _3174 = frontier_phi_62_63_ladder_3;
        }
        float _3179 = isnan(1.0) ? _953 : (isnan(_953) ? 1.0 : min(_953, 1.0));
        _2985 = (_3179 * _3170) + _2498;
        _2987 = (_3179 * _3172) + _2500;
        _2989 = (_3179 * _3174) + _2502;
        _2991 = ((_3164 * _938) * _3179) + _2836;
        _2993 = ((_3166 * _940) * _3179) + _2838;
        _2995 = ((_3168 * _941) * _3179) + _2840;
    }
    else
    {
        _2985 = _2498;
        _2987 = _2500;
        _2989 = _2502;
        _2991 = _2836;
        _2993 = _2838;
        _2995 = _2840;
    }
    float _4925 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _4936 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _4947 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    uint _3015 = _913 + 6u;
    float _3023 = _875 / cbSceneParam._m0[86u].x;
    float _3024 = _876 / cbSceneParam._m0[86u].y;
    vec4 _3038 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3023, _3024, (log2((isnan(cbSceneParam._m0[77u].w) ? _810 : (isnan(_810) ? cbSceneParam._m0[77u].w : min(_810, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3040 = _3038.x;
    float _3041 = _3038.y;
    float _3042 = _3038.z;
    float _3043 = _3038.w;
    float _3114;
    float _3116;
    float _3118;
    float _3120;
    if (_810 > cbSceneParam._m0[78u].w)
    {
        float _3077 = isnan(_810) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _810 : min(cbSceneParam._m0[80u].w, _810));
        float _3078 = _3077 / _810;
        float _3089 = _3078 * _860;
        float _3090 = _861 * _3078;
        float _3091 = (-0.0) - _3090;
        float _3092 = _3078 * _862;
        float _3094 = (cbSceneParam._m0[77u].w * _3091) / _3077;
        float _3095 = _3094 + cbSceneParam._m0[79u].w;
        float _3096 = cbSceneParam._m0[79u].w - _3090;
        float _3102 = sqrt(((_3089 * _3089) + (_3090 * _3090)) + (_3092 * _3092));
        float _3105 = (1.0 - (cbSceneParam._m0[77u].w / _3077)) * _3102;
        float _3110 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3112 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3265;
        if (abs((_3091 - _3094) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3265 = ((((_3095 > 0.0) ? exp2(_3110 * _3095) : (2.0 - exp2(_3112 * _3095))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3105;
        }
        else
        {
            float _3225 = 1.0 / cbSceneParam._m0[80u].x;
            float _3226 = isnan(_3096) ? _3095 : (isnan(_3095) ? _3096 : max(_3095, _3096));
            float _3227 = isnan(_3096) ? _3095 : (isnan(_3095) ? _3096 : min(_3095, _3096));
            float _3236 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : min(_3226, 0.0));
            float _3237 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : min(_3227, 0.0));
            _3265 = ((abs(_3102 / _3091) * cbSceneParam._m0[80u].y) * ((((_3236 - _3237) * 2.0) - ((exp2(_3110 * (isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0)))) - exp2(_3110 * (isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0))))) * _3225)) - ((exp2(_3112 * _3236) - exp2(_3112 * _3237)) * _3225))) + (_3105 * cbSceneParam._m0[80u].z);
        }
        vec4 _3267 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3023, _3024, 1.0), 0.0);
        float _3276 = exp2((_3265 * (-1.44269502162933349609375)) * (1.0 - _3267.w));
        float _3277 = log2(_3276);
        float _3293 = log2(_3043);
        _3114 = (exp2(_3293 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3277 * cbSceneParam._m0[78u].x)) * _3267.x) / cbSceneParam._m0[78u].x)) + _3040;
        _3116 = (exp2(_3293 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3277 * cbSceneParam._m0[78u].y)) * _3267.y) / cbSceneParam._m0[78u].y)) + _3041;
        _3118 = (exp2(_3293 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3277 * cbSceneParam._m0[78u].z)) * _3267.z) / cbSceneParam._m0[78u].z)) + _3042;
        _3120 = _3276 * _3043;
    }
    else
    {
        _3114 = _3040;
        _3116 = _3041;
        _3118 = _3042;
        _3120 = _3043;
    }
    float _3132 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3133 = _3132 == 3.0;
    float _3134 = log2(_3120);
    float _3141 = exp2(_3134 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0))) * (_2985 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _953))) + ((_2991 + ((isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0))) * _1763)) * cbPerFrame._m0[3u].x));
    float _3142 = exp2(_3134 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0))) * (_2987 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _953))) + ((_2993 + ((isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0))) * _1763)) * cbPerFrame._m0[3u].x));
    float _3143 = exp2(_3134 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0))) * (_2989 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _953))) + ((_2995 + ((isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0))) * _1763)) * cbPerFrame._m0[3u].x));
    float _3152 = (_3132 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3152 * (_3133 ? _3141 : (_3141 + (cbSceneParam._m0[72u].w * _3114)));
    SV_Target.y = _3152 * (_3133 ? _3142 : (_3142 + (cbSceneParam._m0[72u].w * _3116)));
    SV_Target.z = _3152 * (_3133 ? _3143 : (_3143 + (cbSceneParam._m0[72u].w * _3118)));
    SV_Target.w = cbInstanceData._m0[_3015].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3015].w;
}


