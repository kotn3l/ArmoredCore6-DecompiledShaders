#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 14) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1326;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = _231 * NORMAL.x;
    float _233 = _231 * NORMAL.y;
    float _234 = _231 * NORMAL.z;
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246;
    float _247;
    float _248;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _246 = (-0.0) - _232;
        _247 = (-0.0) - _233;
        _248 = (-0.0) - _234;
    }
    else
    {
        _246 = _232;
        _247 = _233;
        _248 = _234;
    }
    vec4 _268 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _295 = cbMtdParam._m0[15u].y * texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w)).x;
    float _303 = ((cbMtdParam._m0[14u].z * (-1.39999997615814208984375)) * (((1.0 - _268.x) * 2.0) - _295)) + 1.0;
    float _3681 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _304 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    vec4 _317 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    vec4 _334 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _336 = _334.x;
    float _337 = _334.y;
    float _338 = _334.z;
    float _345 = ((_317.x - _336) * _304) + _336;
    float _346 = ((_317.y - _337) * _304) + _337;
    float _347 = ((_317.z - _338) * _304) + _338;
    float _353 = (((((1.0 - _268.y) * 2.0) - _295) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].w) + 1.0;
    float _3692 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _354 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    vec4 _366 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _377 = ((_366.x - _345) * _354) + _345;
    float _378 = ((_366.y - _346) * _354) + _346;
    float _379 = ((_366.z - _347) * _354) + _347;
    float _385 = (((((1.0 - _268.z) * 2.0) - _295) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].z) + 1.0;
    float _3703 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    vec4 _398 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.z) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.w) + cbTextureTilingScale._m0[17u].w));
    float _411 = ((_398.z - _379) * _386) + _379;
    float _414 = ((((_398.x - _377) * _386) + _377) * 2.0) + (-1.0);
    float _416 = ((((_398.y - _378) * _386) + _378) * 2.0) + (-1.0);
    float _417 = dot(vec2(_414, _416), vec2(_414, _416));
    float _3714 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _422 = sqrt(1.0 - (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))));
    float _423 = fma(_422, _246, 0.0);
    float _424 = fma(_422, _247, 0.0);
    float _425 = fma(_422, _248, 0.0);
    float _434 = exp2(log2(inversesqrt(dot(vec3(_423, _424, _425), vec3(_423, _424, _425))) * _424) * cbMtdParam._m0[14u].x) * cbMtdParam._m0[14u].y;
    float _3725 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _435 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    vec4 _454 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _459 = _454.x * cbMtdParam._m0[10u].x;
    float _460 = _454.y * cbMtdParam._m0[10u].y;
    float _461 = _454.z * cbMtdParam._m0[10u].z;
    vec4 _480 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _494 = (((_480.x * cbMtdParam._m0[11u].x) - _459) * _304) + _459;
    float _495 = (((_480.y * cbMtdParam._m0[11u].y) - _460) * _304) + _460;
    float _496 = (((_480.z * cbMtdParam._m0[11u].z) - _461) * _304) + _461;
    vec4 _514 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _528 = (((_514.x * cbMtdParam._m0[12u].x) - _494) * _354) + _494;
    float _529 = (((_514.y * cbMtdParam._m0[12u].y) - _495) * _354) + _495;
    float _530 = (((_514.z * cbMtdParam._m0[12u].z) - _496) * _354) + _496;
    vec4 _549 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w));
    vec4 _583 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _591 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * ((((_549.x * cbMtdParam._m0[13u].x) - _528) * _386) + _528)) * _583.x;
    float _594 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * ((((_549.y * cbMtdParam._m0[13u].y) - _529) * _386) + _529)) * _583.y;
    float _597 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * ((((_549.z * cbMtdParam._m0[13u].z) - _530) * _386) + _530)) * _583.z;
    vec4 _609 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _620 = ((_609.x - _591) * _435) + _591;
    float _621 = ((_609.y - _594) * _435) + _594;
    float _622 = ((_609.z - _597) * _435) + _597;
    vec4 _635 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _637 = _635.x;
    float _654 = ((texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w)).x - _637) * _304) + _637;
    float _671 = ((texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w)).x - _654) * _354) + _654;
    vec4 _700 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _702 = _700.x;
    float _3736 = isnan(0.0) ? cbMtdParam._m0[14u].w : (isnan(cbMtdParam._m0[14u].w) ? 0.0 : max(cbMtdParam._m0[14u].w, 0.0));
    float _706 = (((((texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.z) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.w) + cbTextureTilingScale._m0[10u].w)).x - _671) * _386) + _671) - _702) * (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0)))) + _702;
    float _708 = _706 - (_706 * _435);
    vec4 _720 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _727 = (_720.x * 2.0) + (-1.0);
    float _728 = (_720.y * 2.0) + (-1.0);
    float _729 = dot(vec2(_727, _728), vec2(_727, _728));
    float _3747 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _737 = ((_720.z - _411) * _435) + _411;
    float _746 = ((sqrt(1.0 - (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) - _422) * _435) + _422;
    vec4 _760 = texture(sampler2D(M_AMSN_Mb4_Ch2_3Mask_Ov_AN_Snow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _770 = (((_727 - _414) * _435) + _414) + (((_760.x * 2.0) + (-1.0)) * cbMtdParam._m0[15u].x);
    float _771 = (((_728 - _416) * _435) + _416) + (((_760.y * 2.0) + (-1.0)) * cbMtdParam._m0[15u].x);
    float _774 = fma(_746, _246, fma(_771, _238 * TANGENT.x, (_224 * _216) * _770));
    float _777 = fma(_746, _247, fma(_771, _238 * TANGENT.y, (_224 * _217) * _770));
    float _780 = fma(_746, _248, fma(_771, _238 * TANGENT.z, (_224 * _218) * _770));
    float _784 = inversesqrt(dot(vec3(_774, _777, _780), vec3(_774, _777, _780)));
    float _785 = _784 * _774;
    float _786 = _784 * _777;
    float _787 = _784 * _780;
    float _3758 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _788 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _3769 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _3780 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _3791 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _3802 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _792 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _808 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _858 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _848);
    float _859 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _848);
    float _860 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _848);
    float _864 = inversesqrt(dot(vec3(_858, _859, _860), vec3(_858, _859, _860)));
    float _865 = _858 * _864;
    float _866 = _859 * _864;
    float _867 = _860 * _864;
    float _873 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _874 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _892 = fma(_787, cbSceneParam._m0[5u].z, fma(_786, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _785));
    float _895 = fma(_787, cbSceneParam._m0[6u].z, fma(_786, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _785));
    float _898 = fma(_787, cbSceneParam._m0[7u].z, fma(_786, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _785));
    uint _911 = uint(roundEven(NORMAL.w)) * 13u;
    uint _913 = (_911 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _919 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) * cbInstanceData._m0[_913].x;
    float _920 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) * cbInstanceData._m0[_913].y;
    float _921 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) * cbInstanceData._m0[_913].z;
    float _3813 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _922 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _3824 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _923 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _3835 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _924 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _925 = 1.0 - _792;
    float _926 = _922 * _925;
    float _927 = _923 * _925;
    float _928 = _924 * _925;
    float _933 = (_922 + (-0.039999999105930328369140625)) * _792;
    float _934 = (_923 + (-0.039999999105930328369140625)) * _792;
    float _935 = (_924 + (-0.039999999105930328369140625)) * _792;
    float _936 = _933 + 0.039999999105930328369140625;
    float _938 = _934 + 0.039999999105930328369140625;
    float _939 = _935 + 0.039999999105930328369140625;
    vec4 _948 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _873, cbSceneParam._m0[86u].y * _874));
    float _951 = _948.x * TEXCOORD_4;
    float _952 = dot(vec3(_785, _786, _787), vec3(_865, _866, _867));
    float _955 = _952 * 2.0;
    float _959 = (_955 * _785) - _865;
    float _960 = (_955 * _786) - _866;
    float _961 = (_955 * _787) - _867;
    float _965 = abs(dot(vec3(_865, _866, _867), vec3(_785, _786, _787)));
    float _3846 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _967 = sqrt(_788);
    float _980 = exp2((_967 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_967 * 3.0));
    float _986 = (1.0 - _980) * ((_967 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _987 = _980 * _967;
    float _1015 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1019 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1023 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1325;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1050 = fma(_1023, cbModelParam._m0[26u].z, fma(_1019, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1015));
        float _1054 = fma(_1023, cbModelParam._m0[27u].z, fma(_1019, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1015));
        float _1058 = fma(_1023, cbModelParam._m0[28u].z, fma(_1019, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1015));
        float _1083 = _1015 + _785;
        float _1084 = _1019 + _786;
        float _1085 = _1023 + _787;
        float _1095 = fma(_1085, cbModelParam._m0[26u].z, fma(_1084, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1083)) - _1050;
        float _1096 = fma(_1085, cbModelParam._m0[27u].z, fma(_1084, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1083)) - _1054;
        float _1097 = fma(_1085, cbModelParam._m0[28u].z, fma(_1084, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1083)) - _1058;
        float _1101 = inversesqrt(dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097)));
        float _1114 = ((_1101 * _1095) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1050 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1115 = ((_1101 * _1096) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1054 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1116 = ((_1101 * _1097) / cbModelParam._m0[34u].z) + ((((((_1058 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        float _1153 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1119.x + (-0.5));
        float _1155 = _1153 * (_1119.y + (-0.5));
        float _1156 = _1153 * (_1119.z + (-0.5));
        float _1163 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1126.x + (-0.5));
        float _1165 = _1163 * (_1126.y + (-0.5));
        float _1166 = _1163 * (_1126.z + (-0.5));
        float _1173 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1133.x + (-0.5));
        float _1175 = _1173 * (_1133.y + (-0.5));
        float _1176 = _1173 * (_1133.z + (-0.5));
        float _1183 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1140.x + (-0.5));
        float _1185 = _1183 * (_1140.y + (-0.5));
        float _1186 = _1183 * (_1140.z + (-0.5));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = _1154 * 0.5;
        float _1191 = _1164 * 0.5;
        float _1192 = _1174 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1207 = (dot(vec3(_785, _786, _787), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _3872 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1217 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _3883 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _3894 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1219 + 1.0))) + _1224) * _1187;
        float _1234 = _1155 * 0.5;
        float _1235 = _1165 * 0.5;
        float _1236 = _1175 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1250 = (dot(vec3(_785, _786, _787), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _3905 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1259 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _3916 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _3927 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1261 + 1.0))) + _1266) * _1188;
        float _1276 = _1156 * 0.5;
        float _1277 = _1166 * 0.5;
        float _1278 = _1176 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_785, _786, _787), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _3938 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _3949 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _3960 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_1303 + 1.0))) + _1308) * _1189;
        _1325 = _1156;
        _1327 = _1155;
        _1328 = _1154;
        _1329 = _1166;
        _1330 = _1165;
        _1331 = _1164;
        _1332 = _1176;
        _1333 = _1175;
        _1334 = _1174;
        _1335 = _1189;
        _1336 = _1188;
        _1337 = _1187;
        _1338 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
        _1339 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
        _1340 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
    }
    else
    {
        _1325 = _1326;
        _1327 = _1326;
        _1328 = _1326;
        _1329 = _1326;
        _1330 = _1326;
        _1331 = _1326;
        _1332 = _1326;
        _1333 = _1326;
        _1334 = _1326;
        _1335 = _1326;
        _1336 = _1326;
        _1337 = _1326;
        _1338 = 0.0;
        _1339 = 0.0;
        _1340 = 0.0;
    }
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1366 = fma(_1023, cbModelParam._m0[30u].z, fma(_1019, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1015));
        float _1370 = fma(_1023, cbModelParam._m0[31u].z, fma(_1019, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1015));
        float _1374 = fma(_1023, cbModelParam._m0[32u].z, fma(_1019, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1015));
        float _1397 = _1015 + _785;
        float _1398 = _1019 + _786;
        float _1399 = _1023 + _787;
        float _1409 = fma(_1399, cbModelParam._m0[30u].z, fma(_1398, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1397)) - _1366;
        float _1410 = fma(_1399, cbModelParam._m0[31u].z, fma(_1398, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1397)) - _1370;
        float _1411 = fma(_1399, cbModelParam._m0[32u].z, fma(_1398, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1397)) - _1374;
        float _1415 = inversesqrt(dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411)));
        float _1428 = ((_1415 * _1409) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1366 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1429 = ((_1415 * _1410) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1370 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1430 = ((_1415 * _1411) / cbModelParam._m0[35u].z) + ((((((_1374 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        vec4 _1439 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        float _1465 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1432.x + (-0.5));
        float _1467 = _1465 * (_1432.y + (-0.5));
        float _1468 = _1465 * (_1432.z + (-0.5));
        float _1475 = exp2((_1439.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1439.x + (-0.5));
        float _1477 = _1475 * (_1439.y + (-0.5));
        float _1478 = _1475 * (_1439.z + (-0.5));
        float _1485 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1486 = _1485 * (_1446.x + (-0.5));
        float _1487 = _1485 * (_1446.y + (-0.5));
        float _1488 = _1485 * (_1446.z + (-0.5));
        float _1495 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1496 = _1495 * (_1453.x + (-0.5));
        float _1497 = _1495 * (_1453.y + (-0.5));
        float _1498 = _1495 * (_1453.z + (-0.5));
        float _1499 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1500 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1501 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1502 = _1466 * 0.5;
        float _1503 = _1476 * 0.5;
        float _1504 = _1486 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_785, _786, _787), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4001 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1499 + 9.9999997473787516355514526367188e-06);
        float _4012 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4023 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_1529 + 1.0))) + _1534) * _1499;
        float _1544 = _1467 * 0.5;
        float _1545 = _1477 * 0.5;
        float _1546 = _1487 * 0.5;
        float _1547 = dot(vec3(_1544, _1545, _1546), vec3(_1544, _1545, _1546));
        float _1552 = (_1547 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1547);
        float _1560 = (dot(vec3(_785, _786, _787), vec3(_1552 * _1544, _1552 * _1545, _1552 * _1546)) + 1.0) * 0.5;
        float _4034 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1569 = sqrt(((_1545 * _1545) + (_1544 * _1544)) + (_1546 * _1546)) / (_1500 + 9.9999997473787516355514526367188e-06);
        float _4045 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1571 = _1570 * 2.0;
        float _1575 = (1.0 - _1570) / (_1570 + 1.0);
        float _4056 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1585 = ((((1.0 - _1576) * (_1571 + 2.0)) * exp2(log2(isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1571 + 1.0))) + _1576) * _1500;
        float _1586 = _1468 * 0.5;
        float _1587 = _1478 * 0.5;
        float _1588 = _1488 * 0.5;
        float _1589 = dot(vec3(_1586, _1587, _1588), vec3(_1586, _1587, _1588));
        float _1594 = (_1589 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1589);
        float _1602 = (dot(vec3(_785, _786, _787), vec3(_1594 * _1586, _1594 * _1587, _1594 * _1588)) + 1.0) * 0.5;
        float _4067 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1611 = sqrt(((_1587 * _1587) + (_1586 * _1586)) + (_1588 * _1588)) / (_1501 + 9.9999997473787516355514526367188e-06);
        float _4078 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1613 = _1612 * 2.0;
        float _1617 = (1.0 - _1612) / (_1612 + 1.0);
        float _4089 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1627 = ((((1.0 - _1618) * (_1613 + 2.0)) * exp2(log2(isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_1613 + 1.0))) + _1618) * _1501;
        _1635 = _1468;
        _1636 = _1467;
        _1637 = _1466;
        _1638 = _1478;
        _1639 = _1477;
        _1640 = _1476;
        _1641 = _1488;
        _1642 = _1487;
        _1643 = _1486;
        _1644 = _1501;
        _1645 = _1500;
        _1646 = _1499;
        _1647 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
        _1648 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)));
        _1649 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)));
    }
    else
    {
        _1635 = _1326;
        _1636 = _1326;
        _1637 = _1326;
        _1638 = _1326;
        _1639 = _1326;
        _1640 = _1326;
        _1641 = _1326;
        _1642 = _1326;
        _1643 = _1326;
        _1644 = _1326;
        _1645 = _1326;
        _1646 = _1326;
        _1647 = 0.0;
        _1648 = 0.0;
        _1649 = 0.0;
    }
    float _1659 = (cbModelParam._m0[1u].x * (_1647 - _1338)) + _1338;
    float _1660 = (cbModelParam._m0[1u].x * (_1648 - _1339)) + _1339;
    float _1661 = (cbModelParam._m0[1u].x * (_1649 - _1340)) + _1340;
    float _1682 = fma(_1661, cbSceneParam._m0[89u].z, fma(_1660, cbSceneParam._m0[89u].y, _1659 * cbSceneParam._m0[89u].x));
    float _1685 = fma(_1661, cbSceneParam._m0[90u].z, fma(_1660, cbSceneParam._m0[90u].y, _1659 * cbSceneParam._m0[90u].x));
    float _1688 = fma(_1661, cbSceneParam._m0[91u].z, fma(_1660, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1659));
    float _1703 = _959 * 0.5;
    float _1704 = _960 * 0.5;
    float _1705 = _961 * 0.5;
    float _1706 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1637, _1640, _1643, _1646));
    float _1709 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1636, _1639, _1642, _1645));
    float _1712 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1635, _1638, _1641, _1644));
    float _1746;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1719 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1325, _1329, _1332, _1335));
        float _1723 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1327, _1330, _1333, _1336));
        float _1727 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1328, _1331, _1334, _1337));
        float _1734 = dot(vec4(cbModelParam._m0[39u]), vec4(_1703, _1704, _1705, 1.0));
        _1746 = dot(vec3(isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)), isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)), isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1734) ? 0.0 : (isnan(0.0) ? _1734 : max(0.0, _1734))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1746 = 1.0;
    }
    float _1757;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1748 = dot(vec4(cbModelParam._m0[40u]), vec4(_1703, _1704, _1705, 1.0));
        _1757 = dot(vec3(isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)), isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)), isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1748) ? 0.0 : (isnan(0.0) ? _1748 : max(0.0, _1748))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1757 = 1.0;
    }
    float _1761 = (_1757 * cbModelParam._m0[1u].x) + (_1746 * (1.0 - cbModelParam._m0[1u].x));
    float _1771 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _788);
    float _1772 = isnan(_1771) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1771 : min(cbModelParam._m0[25u].z, _1771));
    float _1852;
    float _1854;
    float _1856;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1819 = fma(_1023, cbModelParam._m0[13u].z, fma(_1019, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1015)) + cbModelParam._m0[13u].w;
        float _1823 = fma(_1023, cbModelParam._m0[14u].z, fma(_1019, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1015)) + cbModelParam._m0[14u].w;
        float _1827 = fma(_1023, cbModelParam._m0[15u].z, fma(_1019, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1015)) + cbModelParam._m0[15u].w;
        float _1830 = fma(_961, cbModelParam._m0[13u].z, fma(_960, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _959));
        float _1833 = fma(_961, cbModelParam._m0[14u].z, fma(_960, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _959));
        float _1836 = fma(_961, cbModelParam._m0[15u].z, fma(_960, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _959));
        float _1864;
        if (_1830 > 0.0)
        {
            _1864 = abs((1.0 - _1819) / _1830);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1819 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1864 = frontier_phi_16_14_ladder;
        }
        float _2090;
        if (_1833 > 0.0)
        {
            _2090 = abs((1.0 - _1823) / _1833);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1823 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2090 = frontier_phi_25_21_ladder;
        }
        float _2347;
        if (_1836 > 0.0)
        {
            _2347 = abs((1.0 - _1827) / _1836);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1827 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2347 = frontier_phi_37_32_ladder;
        }
        float _2349 = isnan(_2090) ? _1864 : (isnan(_1864) ? _2090 : min(_1864, _2090));
        float _2350 = isnan(_2347) ? _2349 : (isnan(_2349) ? _2347 : min(_2349, _2347));
        float _2354 = (_2350 * _1830) + _1819;
        float _2355 = (_2350 * _1833) + _1823;
        float _2356 = (_2350 * _1836) + _1827;
        float _2357 = _2350 * 9.9999997473787516355514526367188e-05;
        float _2359 = (-1.0) - _2357;
        float _2361 = _2357 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2356 > _2361) || ((_2356 < _2359) || ((_2355 > _2361) || ((_2355 < _2359) || ((_2354 < _2359) || (_2354 > _2361))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2484 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2356, cbModelParam._m0[9u].z, fma(_2355, cbModelParam._m0[9u].y, _2354 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2356, cbModelParam._m0[10u].z, fma(_2355, cbModelParam._m0[10u].y, _2354 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2356, cbModelParam._m0[11u].z, fma(_2355, cbModelParam._m0[11u].y, _2354 * cbModelParam._m0[11u].x))), _1772);
            frontier_phi_15_37_ladder = _2484.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2484.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2484.x * cbModelParam._m0[1u].y;
        }
        _1852 = frontier_phi_15_37_ladder_2;
        _1854 = frontier_phi_15_37_ladder_1;
        _1856 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1840 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_959, _960, _961), _1772);
        _1852 = _1840.x * cbModelParam._m0[1u].y;
        _1854 = _1840.y * cbModelParam._m0[1u].y;
        _1856 = _1840.z * cbModelParam._m0[1u].y;
    }
    float _1860 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _788);
    float _1861 = isnan(_1860) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1860 : min(cbModelParam._m0[25u].w, _1860));
    float _1953;
    float _1955;
    float _1957;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1917 = fma(_1023, cbModelParam._m0[21u].z, fma(_1019, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1015)) + cbModelParam._m0[21u].w;
        float _1921 = fma(_1023, cbModelParam._m0[22u].z, fma(_1019, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1015)) + cbModelParam._m0[22u].w;
        float _1925 = fma(_1023, cbModelParam._m0[23u].z, fma(_1019, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1015)) + cbModelParam._m0[23u].w;
        float _1928 = fma(_961, cbModelParam._m0[21u].z, fma(_960, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _959));
        float _1931 = fma(_961, cbModelParam._m0[22u].z, fma(_960, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _959));
        float _1934 = fma(_961, cbModelParam._m0[23u].z, fma(_960, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _959));
        float _2095;
        if (_1928 > 0.0)
        {
            _2095 = abs((1.0 - _1917) / _1928);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1928 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1917 + 1.0) / _1928);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2095 = frontier_phi_27_23_ladder;
        }
        float _2374;
        if (_1931 > 0.0)
        {
            _2374 = abs((1.0 - _1921) / _1931);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1921 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2374 = frontier_phi_39_34_ladder;
        }
        float _2587;
        if (_1934 > 0.0)
        {
            _2587 = abs((1.0 - _1925) / _1934);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1925 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2587 = frontier_phi_48_45_ladder;
        }
        float _2589 = isnan(_2374) ? _2095 : (isnan(_2095) ? _2374 : min(_2095, _2374));
        float _2590 = isnan(_2587) ? _2589 : (isnan(_2589) ? _2587 : min(_2589, _2587));
        float _2594 = (_2590 * _1928) + _1917;
        float _2595 = (_2590 * _1931) + _1921;
        float _2596 = (_2590 * _1934) + _1925;
        float _2597 = _2590 * 9.9999997473787516355514526367188e-05;
        float _2598 = (-1.0) - _2597;
        float _2600 = _2597 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2596 > _2600) || ((_2596 < _2598) || ((_2595 > _2600) || ((_2595 < _2598) || ((_2594 < _2598) || (_2594 > _2600))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2794 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2596, cbModelParam._m0[17u].z, fma(_2595, cbModelParam._m0[17u].y, _2594 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2596, cbModelParam._m0[18u].z, fma(_2595, cbModelParam._m0[18u].y, _2594 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2596, cbModelParam._m0[19u].z, fma(_2595, cbModelParam._m0[19u].y, _2594 * cbModelParam._m0[19u].x))), _1861);
            frontier_phi_24_48_ladder = _2794.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2794.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2794.x * cbModelParam._m0[1u].z;
        }
        _1953 = frontier_phi_24_48_ladder_2;
        _1955 = frontier_phi_24_48_ladder_1;
        _1957 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1937 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_959, _960, _961), _1861);
        _1953 = _1937.x * cbModelParam._m0[1u].z;
        _1955 = _1937.y * cbModelParam._m0[1u].z;
        _1957 = _1937.z * cbModelParam._m0[1u].z;
    }
    float _1970 = (((_986 * _936) + _987) * _951) * ((cbModelParam._m0[1u].w * (_1953 - _1852)) + _1852);
    float _1972 = (((_986 * _938) + _987) * _951) * ((cbModelParam._m0[1u].w * (_1955 - _1854)) + _1854);
    float _1974 = (((_986 * _939) + _987) * _951) * ((cbModelParam._m0[1u].w * (_1957 - _1856)) + _1856);
    float _1977 = fma(_1974, cbSceneParam._m0[89u].z, fma(_1972, cbSceneParam._m0[89u].y, _1970 * cbSceneParam._m0[89u].x));
    float _1980 = fma(_1974, cbSceneParam._m0[90u].z, fma(_1972, cbSceneParam._m0[90u].y, _1970 * cbSceneParam._m0[90u].x));
    float _1983 = fma(_1974, cbSceneParam._m0[91u].z, fma(_1972, cbSceneParam._m0[91u].y, _1970 * cbSceneParam._m0[91u].x));
    vec4 _1991 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_873, _874));
    float _1993 = _1991.w;
    float _2005 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1993);
    float _2006 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1993);
    float _2007 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1993);
    uvec4 _2011 = floatBitsToUint(cbInstanceData._m0[_911 + 5u]);
    uint _2013 = _2011.x * 14u;
    uint _2014 = _2013 + 13u;
    float _2021 = _951 + (-1.0);
    float _2026 = (cbLight._m0[_2014].x * _2021) + 1.0;
    float _2027 = (cbLight._m0[_2014].y * _2021) + 1.0;
    float _2028 = (cbLight._m0[_2014].z * _2021) + 1.0;
    float _2029 = (cbLight._m0[_2014].w * _2021) + 1.0;
    uint _2030 = _2013 + 5u;
    float _2036 = isnan(1.0) ? _2027 : (isnan(_2027) ? 1.0 : min(_2027, 1.0));
    uint _2040 = _2013 + 4u;
    float _2049 = isnan(1.0) ? _2026 : (isnan(_2026) ? 1.0 : min(_2026, 1.0));
    uint _2053 = _2013 | 1u;
    float _2064 = dot(vec3(cbLight._m0[_2013].xyz), vec3(_785, _786, _787));
    float _2067 = dot(vec3(cbLight._m0[_2053].xyz), vec3(_785, _786, _787));
    float _4225 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _4236 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2072 = (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * 0.3183098733425140380859375;
    float _2074 = (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * 0.3183098733425140380859375;
    float _2081 = ((cbLight._m0[_2030].x * _2036) * _2074) + (((cbLight._m0[_2040].x * _2005) * _2049) * _2072);
    float _2082 = ((_2036 * cbLight._m0[_2030].y) * _2074) + (((cbLight._m0[_2040].y * _2006) * _2049) * _2072);
    float _2083 = ((_2036 * cbLight._m0[_2030].z) * _2074) + (((cbLight._m0[_2040].z * _2007) * _2049) * _2072);
    uvec4 _2087 = floatBitsToUint(cbLight._m0[_2013 + 12u]);
    bool _2089 = _2087.x == 0u;
    float _2100;
    float _2102;
    float _2104;
    if (_2089)
    {
        _2100 = _2081;
        _2102 = _2082;
        _2104 = _2083;
    }
    else
    {
        uint _2108 = _2013 + 6u;
        float _2124 = (dot(vec3(cbLight._m0[_2013 + 2u].xyz), vec3(_785, _786, _787)) * 0.5) + 0.5;
        float _2125 = _2124 * _2124;
        float _4247 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2126 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _2127 = isnan(1.0) ? _2028 : (isnan(_2028) ? 1.0 : min(_2028, 1.0));
        _2100 = (((cbLight._m0[_2108].x * 0.3183098733425140380859375) * _2126) * _2127) + _2081;
        _2102 = (((cbLight._m0[_2108].y * 0.3183098733425140380859375) * _2126) * _2127) + _2082;
        _2104 = (((cbLight._m0[_2108].z * 0.3183098733425140380859375) * _2126) * _2127) + _2083;
    }
    bool _2107 = _2087.y == 0u;
    float _2145;
    float _2147;
    float _2149;
    if (_2107)
    {
        _2145 = _2100;
        _2147 = _2102;
        _2149 = _2104;
    }
    else
    {
        uint _2318 = _2013 + 7u;
        float _2334 = (dot(vec3(cbLight._m0[_2013 + 3u].xyz), vec3(_785, _786, _787)) * 0.5) + 0.5;
        float _2335 = _2334 * _2334;
        float _4263 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2336 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _2337 = isnan(1.0) ? _2029 : (isnan(_2029) ? 1.0 : min(_2029, 1.0));
        _2145 = (((cbLight._m0[_2318].x * 0.3183098733425140380859375) * _2336) * _2337) + _2100;
        _2147 = (((cbLight._m0[_2318].y * 0.3183098733425140380859375) * _2336) * _2337) + _2102;
        _2149 = (((cbLight._m0[_2318].z * 0.3183098733425140380859375) * _2336) * _2337) + _2104;
    }
    uint _2152 = _2013 + 8u;
    float _2165 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2013].w)) * _788) * 0.949999988079071044921875);
    float _2166 = _2165 * _2165;
    float _2167 = cbLight._m0[_2013].x + _865;
    float _2168 = cbLight._m0[_2013].y + _866;
    float _2169 = cbLight._m0[_2013].z + _867;
    float _2173 = inversesqrt(dot(vec3(_2167, _2168, _2169), vec3(_2167, _2168, _2169)));
    float _2174 = _2173 * _2167;
    float _2175 = _2173 * _2168;
    float _2176 = _2173 * _2169;
    float _2177 = dot(vec3(_785, _786, _787), vec3(cbLight._m0[_2013].xyz));
    float _4279 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2180 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
    float _4290 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _2181 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
    float _2182 = dot(vec3(_785, _786, _787), vec3(_2174, _2175, _2176));
    float _4301 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2185 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
    float _2186 = dot(vec3(cbLight._m0[_2013].xyz), vec3(_2174, _2175, _2176));
    float _4312 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2190 = _2166 * _2166;
    float _2194 = ((_2185 * _2185) * (_2190 + (-1.0))) + 1.0;
    float _2202 = exp2(log2(1.0 - (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0)))) * 5.0);
    float _2203 = 0.959999978542327880859375 - _933;
    float _2205 = 0.959999978542327880859375 - _934;
    float _2206 = 0.959999978542327880859375 - _935;
    float _2213 = 1.0 - _2166;
    float _2224 = (0.5 / (((_2181 * ((_2180 * _2213) + _2166)) + 9.9999999392252902907785028219223e-09) + (((_2181 * _2213) + _2166) * _2180))) * _2180;
    float _4323 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2226 = (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_2190 / ((_2194 * _2194) * 3.141590118408203125));
    uint _2240 = _2013 + 9u;
    float _2251 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2053].w)) * _788) * 0.949999988079071044921875);
    float _2252 = _2251 * _2251;
    float _2253 = cbLight._m0[_2053].x + _865;
    float _2254 = cbLight._m0[_2053].y + _866;
    float _2255 = cbLight._m0[_2053].z + _867;
    float _2259 = inversesqrt(dot(vec3(_2253, _2254, _2255), vec3(_2253, _2254, _2255)));
    float _2260 = _2259 * _2253;
    float _2261 = _2259 * _2254;
    float _2262 = _2259 * _2255;
    float _2263 = dot(vec3(_785, _786, _787), vec3(cbLight._m0[_2053].xyz));
    float _4334 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2266 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
    float _2267 = dot(vec3(_785, _786, _787), vec3(_2260, _2261, _2262));
    float _4345 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2270 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _2271 = dot(vec3(cbLight._m0[_2053].xyz), vec3(_2260, _2261, _2262));
    float _4356 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2275 = _2252 * _2252;
    float _2279 = ((_2270 * _2270) * (_2275 + (-1.0))) + 1.0;
    float _2286 = exp2(log2(1.0 - (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) * 5.0);
    float _2293 = 1.0 - _2252;
    float _2303 = (0.5 / (((_2181 * ((_2266 * _2293) + _2252)) + 9.9999999392252902907785028219223e-09) + (((_2181 * _2293) + _2252) * _2266))) * _2266;
    float _4367 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2305 = (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_2275 / ((_2279 * _2279) * 3.141590118408203125));
    float _2315 = (((((_2286 * _2203) + _936) * cbLight._m0[_2240].x) * _2305) * _2036) + ((((cbLight._m0[_2152].x * _2005) * ((_2202 * _2203) + _936)) * _2226) * _2049);
    float _2316 = (((((_2286 * _2205) + _938) * cbLight._m0[_2240].y) * _2305) * _2036) + ((((cbLight._m0[_2152].y * _2006) * ((_2202 * _2205) + _938)) * _2226) * _2049);
    float _2317 = (((((_2286 * _2206) + _939) * cbLight._m0[_2240].z) * _2305) * _2036) + ((((cbLight._m0[_2152].z * _2007) * ((_2202 * _2206) + _939)) * _2226) * _2049);
    float _2379;
    float _2381;
    float _2383;
    if (_2089)
    {
        _2379 = _2315;
        _2381 = _2316;
        _2383 = _2317;
    }
    else
    {
        uint _2385 = _2013 + 2u;
        uint _2389 = _2013 + 10u;
        float _2403 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2385].w)) * _788) * 0.949999988079071044921875);
        float _2404 = _2403 * _2403;
        float _2405 = cbLight._m0[_2385].x + _865;
        float _2406 = cbLight._m0[_2385].y + _866;
        float _2407 = cbLight._m0[_2385].z + _867;
        float _2411 = inversesqrt(dot(vec3(_2405, _2406, _2407), vec3(_2405, _2406, _2407)));
        float _2412 = _2411 * _2405;
        float _2413 = _2411 * _2406;
        float _2414 = _2411 * _2407;
        float _2415 = dot(vec3(_785, _786, _787), vec3(cbLight._m0[_2385].xyz));
        float _4378 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2418 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _2419 = dot(vec3(_785, _786, _787), vec3(_2412, _2413, _2414));
        float _4389 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2422 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2423 = dot(vec3(cbLight._m0[_2385].xyz), vec3(_2412, _2413, _2414));
        float _4400 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2427 = _2404 * _2404;
        float _2431 = ((_2422 * _2422) * (_2427 + (-1.0))) + 1.0;
        float _2438 = exp2(log2(1.0 - (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0)))) * 5.0);
        float _2445 = 1.0 - _2404;
        float _2455 = (0.5 / (((_2181 * ((_2418 * _2445) + _2404)) + 9.9999999392252902907785028219223e-09) + (((_2181 * _2445) + _2404) * _2418))) * _2418;
        float _4411 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2457 = (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2427 / ((_2431 * _2431) * 3.141590118408203125));
        float _2458 = isnan(1.0) ? _2028 : (isnan(_2028) ? 1.0 : min(_2028, 1.0));
        _2379 = (((((_2438 * _2203) + _936) * cbLight._m0[_2389].x) * _2457) * _2458) + _2315;
        _2381 = (((((_2438 * _2205) + _938) * cbLight._m0[_2389].y) * _2457) * _2458) + _2316;
        _2383 = (((((_2438 * _2206) + _939) * cbLight._m0[_2389].z) * _2457) * _2458) + _2317;
    }
    float _2493;
    float _2495;
    float _2497;
    if (_2107)
    {
        _2493 = _2379;
        _2495 = _2381;
        _2497 = _2383;
    }
    else
    {
        uint _2504 = _2013 + 3u;
        uint _2508 = _2013 + 11u;
        float _2522 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2504].w)) * _788) * 0.949999988079071044921875);
        float _2523 = _2522 * _2522;
        float _2524 = cbLight._m0[_2504].x + _865;
        float _2525 = cbLight._m0[_2504].y + _866;
        float _2526 = cbLight._m0[_2504].z + _867;
        float _2530 = inversesqrt(dot(vec3(_2524, _2525, _2526), vec3(_2524, _2525, _2526)));
        float _2531 = _2530 * _2524;
        float _2532 = _2530 * _2525;
        float _2533 = _2530 * _2526;
        float _2534 = dot(vec3(_785, _786, _787), vec3(cbLight._m0[_2504].xyz));
        float _4427 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2537 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _2538 = dot(vec3(_785, _786, _787), vec3(_2531, _2532, _2533));
        float _4438 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2541 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _2542 = dot(vec3(cbLight._m0[_2504].xyz), vec3(_2531, _2532, _2533));
        float _4449 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2546 = _2523 * _2523;
        float _2550 = ((_2541 * _2541) * (_2546 + (-1.0))) + 1.0;
        float _2557 = exp2(log2(1.0 - (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0)))) * 5.0);
        float _2564 = 1.0 - _2523;
        float _2574 = (0.5 / (((_2181 * ((_2537 * _2564) + _2523)) + 9.9999999392252902907785028219223e-09) + (((_2181 * _2564) + _2523) * _2537))) * _2537;
        float _4460 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2576 = (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_2546 / ((_2550 * _2550) * 3.141590118408203125));
        float _2577 = isnan(1.0) ? _2029 : (isnan(_2029) ? 1.0 : min(_2029, 1.0));
        _2493 = (((((_2557 * _2203) + _936) * cbLight._m0[_2508].x) * _2576) * _2577) + _2379;
        _2495 = (((((_2557 * _2205) + _938) * cbLight._m0[_2508].y) * _2576) * _2577) + _2381;
        _2497 = (((((_2557 * _2206) + _939) * cbLight._m0[_2508].z) * _2576) * _2577) + _2383;
    }
    float _2711;
    float _2713;
    float _2715;
    float _2717;
    float _2719;
    float _2721;
    if (_2011.y == 0u)
    {
        float _2652 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2653 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2652;
        float _2654 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2652;
        float _2655 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2652;
        uvec4 _2667 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2668 = _2667.x;
        uint _2679 = uint((float(_2667.y) * floor(float(uint(cbSceneParam._m0[85u].y * _874) / _2668))) + floor(float(uint(cbSceneParam._m0[85u].x * _873) / _2668)));
        float _2689 = (log2(_2655 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2690 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        uint _2693 = uint(isnan(14.0) ? _2690 : (isnan(_2690) ? 14.0 : min(_2690, 14.0)));
        uvec4 _2698 = texelFetch(g_lightClusterGridBuffer, int(((_2693 << 2u) + (_2679 << 6u)) >> 2u));
        uint _2699 = _2698.x;
        uint _2700 = _2667.z;
        float _2799;
        float _2801;
        float _2803;
        float _2805;
        float _2807;
        float _2809;
        if (((((1u << ((_2700 >> 4u) & 15u)) + 4294967295u) & _2699) == 0u) || ((_2700 & 240u) == 0u))
        {
            _2799 = 0.0;
            _2801 = 0.0;
            _2803 = 0.0;
            _2805 = 0.0;
            _2807 = 0.0;
            _2809 = 0.0;
        }
        else
        {
            float _2800;
            float _2802;
            float _2804;
            float _2806;
            float _2808;
            float _2810;
            float _2943 = 0.0;
            float _2944 = 0.0;
            float _2945 = 0.0;
            float _2946 = 0.0;
            float _2947 = 0.0;
            float _2948 = 0.0;
            uint _2949 = 0u;
            uint _2958;
            bool _2959;
            for (;;)
            {
                _2958 = texelFetch(g_lightClassification, int((((_2693 << 5u) + (_2679 << 9u)) + (_2949 << 2u)) >> 2u)).x;
                _2959 = _2958 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2959)
                {
                    frontier_phi_63_pred = _2948;
                    frontier_phi_63_pred_1 = _2947;
                    frontier_phi_63_pred_2 = _2946;
                    frontier_phi_63_pred_3 = _2945;
                    frontier_phi_63_pred_4 = _2944;
                    frontier_phi_63_pred_5 = _2943;
                }
                else
                {
                    float _3067;
                    float _3068;
                    float _3069;
                    float _3070;
                    float _3071;
                    float _3072;
                    uint _3073;
                    _3067 = _2943;
                    _3068 = _2944;
                    _3069 = _2945;
                    _3070 = _2946;
                    _3071 = _2947;
                    _3072 = _2948;
                    _3073 = _2958;
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    for (;;)
                    {
                        uint _3077 = uint(findLSB(_3073)) + (_2949 << 5u);
                        uint _3074 = (_3073 + 4294967295u) & _3073;
                        uint _3079 = _3077 * 48u;
                        vec4 _3093 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3079)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 3u)).x));
                        uint _3099 = (_3077 * 48u) + 4u;
                        vec4 _3112 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3099)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 3u)).x));
                        uint _3118 = (_3077 * 48u) + 8u;
                        vec3 _3129 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3118)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 2u)).x));
                        float _3133 = _3093.x - _2653;
                        float _3134 = _3093.y - _2654;
                        float _3135 = _3093.z - _2655;
                        float _3136 = dot(vec3(_3133, _3134, _3135), vec3(_3133, _3134, _3135));
                        float _3139 = inversesqrt(_3136);
                        float _3140 = _3139 * _3133;
                        float _3141 = _3139 * _3134;
                        float _3142 = _3139 * _3135;
                        float _3143 = dot(vec3(_892, _895, _898), vec3(_3140, _3141, _3142));
                        float _3148 = 1.0 - (_3136 * _3093.w);
                        float _4486 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                        float _3149 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                        float _3150 = sqrt(_3136) * _3112.w;
                        float _3153 = 1.39999997615814208984375 / (_3150 + 1.39999997615814208984375);
                        float _3154 = _3153 * _3153;
                        float _3157 = ((1.0 - _3154) * _3143) + _3154;
                        float _3160 = _3150 * _3150;
                        float _3164 = ((isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0))) * _3149) / ((_3160 * 0.699999988079071044921875) + 1.0);
                        float _3168 = (-0.0) - _2653;
                        float _3169 = (-0.0) - _2654;
                        float _3170 = (-0.0) - _2655;
                        float _3174 = inversesqrt(dot(vec3(_3168, _3169, _3170), vec3(_3168, _3169, _3170)));
                        float _3175 = _3174 * _3168;
                        float _3176 = _3174 * _3169;
                        float _3177 = _3174 * _3170;
                        float _3185 = exp2(log2(1.0 / ((_3160 * 3.5) + 5.0)) * 0.25);
                        float _3186 = 1.0 - _967;
                        float _3193 = sqrt(1.0 - ((1.0 - (_3186 * _3186)) * (1.0 - (_3185 * _3185))));
                        float _3194 = _3193 * _3193;
                        float _3195 = _3194 * _3194;
                        float _3196 = _3175 + _3140;
                        float _3197 = _3176 + _3141;
                        float _3198 = _3177 + _3142;
                        float _3202 = inversesqrt(dot(vec3(_3196, _3197, _3198), vec3(_3196, _3197, _3198)));
                        float _3206 = dot(vec3(_892, _895, _898), vec3(_3175, _3176, _3177));
                        float _4502 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                        float _3209 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                        float _3210 = dot(vec3(_892, _895, _898), vec3(_3202 * _3196, _3202 * _3197, _3202 * _3198));
                        float _4513 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                        float _3213 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                        float _3217 = ((_3213 * _3213) * (_3195 + (-1.0))) + 1.0;
                        float _3218 = _3153 * _3194;
                        float _3219 = _3218 * _3218;
                        float _3222 = ((1.0 - _3219) * _3143) + _3219;
                        float _4524 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                        float _3223 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                        float _3224 = 1.0 - _3194;
                        float _3234 = (0.5 / (((_3223 * ((_3209 * _3224) + _3194)) + 9.9999999392252902907785028219223e-09) + (((_3223 * _3224) + _3194) * _3209))) * _3223;
                        float _4535 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                        float _3245 = (((_3195 * 3.1415927410125732421875) * (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0)))) / ((_3217 * _3217) * ((_3160 * 2.1991131305694580078125) + 3.141590118408203125))) * _3149;
                        _3002 = (_3164 * _3112.x) + _3070;
                        _3003 = (_3164 * _3112.y) + _3071;
                        _3004 = (_3164 * _3112.z) + _3072;
                        _2999 = (_3245 * _3129.x) + _3067;
                        _3000 = (_3245 * _3129.y) + _3068;
                        _3001 = (_3245 * _3129.z) + _3069;
                        if (_3074 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3067 = _2999;
                            _3068 = _3000;
                            _3069 = _3001;
                            _3070 = _3002;
                            _3071 = _3003;
                            _3072 = _3004;
                            _3073 = _3074;
                        }
                    }
                    frontier_phi_63_pred = _3004;
                    frontier_phi_63_pred_1 = _3003;
                    frontier_phi_63_pred_2 = _3002;
                    frontier_phi_63_pred_3 = _3001;
                    frontier_phi_63_pred_4 = _3000;
                    frontier_phi_63_pred_5 = _2999;
                }
                _2810 = frontier_phi_63_pred;
                _2808 = frontier_phi_63_pred_1;
                _2806 = frontier_phi_63_pred_2;
                _2804 = frontier_phi_63_pred_3;
                _2802 = frontier_phi_63_pred_4;
                _2800 = frontier_phi_63_pred_5;
                uint _2950 = _2949 + 1u;
                if (_2950 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2943 = _2800;
                    _2944 = _2802;
                    _2945 = _2804;
                    _2946 = _2806;
                    _2947 = _2808;
                    _2948 = _2810;
                    _2949 = _2950;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2799 = _2800;
            _2801 = _2802;
            _2803 = _2804;
            _2805 = _2806;
            _2807 = _2808;
            _2809 = _2810;
        }
        uvec4 _2813 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2814 = _2813.z;
        uint _2816 = (_2814 >> 8u) & 15u;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        if (((4294967295u << _2816) & _2699) == 0u)
        {
            _2911 = _2799;
            _2913 = _2801;
            _2915 = _2803;
            _2917 = _2805;
            _2919 = _2807;
            _2921 = _2809;
        }
        else
        {
            float _2936 = inversesqrt(dot(vec3(_2653, _2654, _2655), vec3(_2653, _2654, _2655)));
            float _2937 = _2936 * _2653;
            float _2938 = _2936 * _2654;
            float _2939 = _2936 * _2655;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2816 < ((_2814 >> 12u) & 15u))
            {
                float _2912;
                float _2914;
                float _2916;
                float _2918;
                float _2920;
                float _2922;
                float _3050 = _2799;
                float _3051 = _2801;
                float _3052 = _2803;
                float _3053 = _2805;
                float _3054 = _2807;
                float _3055 = _2809;
                uint _3056 = _2816;
                uint _3065;
                bool _3066;
                for (;;)
                {
                    _3065 = texelFetch(g_lightClassification, int((((_2693 << 5u) + (_2679 << 9u)) + (_3056 << 2u)) >> 2u)).x;
                    _3066 = _3065 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3066)
                    {
                        frontier_phi_69_pred = _3055;
                        frontier_phi_69_pred_1 = _3054;
                        frontier_phi_69_pred_2 = _3053;
                        frontier_phi_69_pred_3 = _3052;
                        frontier_phi_69_pred_4 = _3051;
                        frontier_phi_69_pred_5 = _3050;
                    }
                    else
                    {
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3548;
                        float _3549;
                        float _3550;
                        float _3263 = _3050;
                        float _3264 = _3051;
                        float _3265 = _3052;
                        float _3266 = _3053;
                        float _3267 = _3054;
                        float _3268 = _3055;
                        uint _3269 = _3065;
                        uint _3270;
                        vec4 _3295;
                        float _3296;
                        vec4 _3311;
                        vec3 _3323;
                        vec4 _3338;
                        vec4 _3354;
                        float _3401;
                        bool _3402;
                        for (;;)
                        {
                            uint _3280 = ((_3056 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3269));
                            _3270 = (_3269 + 4294967295u) & _3269;
                            uint _3282 = _3280 * 40u;
                            _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            _3296 = _3295.w;
                            uint _3298 = (_3280 * 40u) + 4u;
                            _3311 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 3u)).x));
                            uint _3313 = (_3280 * 40u) + 8u;
                            _3323 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x));
                            uint _3325 = (_3280 * 40u) + 16u;
                            _3338 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 3u)).x));
                            uint _3341 = (_3280 * 40u) + 20u;
                            _3354 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3341)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 3u)).x));
                            uint _3357 = (_3280 * 40u) + 24u;
                            vec4 _3370 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3357)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 3u)).x));
                            uint _3376 = (_3280 * 40u) + 28u;
                            vec4 _3389 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3376)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 3u)).x));
                            _3401 = fma(_2655, _3389.z, fma(_2654, _3389.y, _3389.x * _2653)) + _3389.w;
                            _3402 = !((fma(_2655, _3370.z, fma(_2654, _3370.y, _3370.x * _2653)) + _3370.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3402)
                            {
                                float _3429 = _3295.x - _2653;
                                float _3430 = _3295.y - _2654;
                                float _3431 = _3295.z - _2655;
                                float _3432 = dot(vec3(_3429, _3430, _3431), vec3(_3429, _3430, _3431));
                                float _3435 = inversesqrt(_3432);
                                float _3436 = _3435 * _3429;
                                float _3437 = _3435 * _3430;
                                float _3438 = _3435 * _3431;
                                float _3442 = 1.0 - (_3432 / (_3296 * _3296));
                                float _4546 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                                float _3443 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                                float _3447 = sqrt(_3432) * _3311.w;
                                float _3449 = 1.39999997615814208984375 / (_3447 + 1.39999997615814208984375);
                                float _3450 = _3449 * _3449;
                                float _3453 = ((1.0 - _3450) * dot(vec3(_3436, _3437, _3438), vec3(_892, _895, _898))) + _3450;
                                float _3456 = _3447 * _3447;
                                float _3460 = (fma(_2655, _3338.z, fma(_2654, _3338.y, _3338.x * _2653)) + _3338.w) / _3401;
                                float _3461 = (fma(_2655, _3354.z, fma(_2654, _3354.y, _3354.x * _2653)) + _3354.w) / _3401;
                                float _3465 = 1.0 - dot(vec2(_3460, _3461), vec2(_3460, _3461));
                                float _4562 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                                float _3466 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
                                float _3467 = _3466 * (((isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0))) * _3443) / ((_3456 * 0.699999988079071044921875) + 1.0));
                                float _3479 = exp2(log2(1.0 / ((_3456 * 3.5) + 5.0)) * 0.25);
                                float _3480 = 1.0 - _967;
                                float _3487 = sqrt(1.0 - ((1.0 - (_3480 * _3480)) * (1.0 - (_3479 * _3479))));
                                float _3488 = _3487 * _3487;
                                float _3489 = _3488 * _3488;
                                float _3490 = _3436 - _2937;
                                float _3491 = _3437 - _2938;
                                float _3492 = _3438 - _2939;
                                float _3496 = inversesqrt(dot(vec3(_3490, _3491, _3492), vec3(_3490, _3491, _3492)));
                                float _3500 = dot(vec3(_892, _895, _898), vec3((-0.0) - _2937, (-0.0) - _2938, (-0.0) - _2939));
                                float _4573 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                                float _3503 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                                float _3504 = dot(vec3(_892, _895, _898), vec3(_3496 * _3490, _3496 * _3491, _3496 * _3492));
                                float _4584 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                                float _3507 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                                float _3511 = ((_3507 * _3507) * (_3489 + (-1.0))) + 1.0;
                                float _3512 = _3449 * _3488;
                                float _3513 = _3512 * _3512;
                                float _3519 = ((1.0 - _3513) * dot(vec3(_892, _895, _898), vec3(_3436, _3437, _3438))) + _3513;
                                float _4595 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                                float _3520 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                                float _3521 = 1.0 - _3488;
                                float _3531 = (0.5 / (((_3520 * ((_3503 * _3521) + _3488)) + 9.9999999392252902907785028219223e-09) + (((_3520 * _3521) + _3488) * _3503))) * _3520;
                                float _4606 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                                float _3541 = (_3466 * _3443) * (((_3489 * 3.1415927410125732421875) * (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0)))) / ((_3511 * _3511) * ((_3456 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3467 * _3311.z;
                                frontier_phi_75_pred_1 = _3467 * _3311.y;
                                frontier_phi_75_pred_2 = _3467 * _3311.x;
                                frontier_phi_75_pred_3 = _3541 * _3323.z;
                                frontier_phi_75_pred_4 = _3541 * _3323.y;
                                frontier_phi_75_pred_5 = _3541 * _3323.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3550 = frontier_phi_75_pred;
                            _3549 = frontier_phi_75_pred_1;
                            _3548 = frontier_phi_75_pred_2;
                            _3547 = frontier_phi_75_pred_3;
                            _3546 = frontier_phi_75_pred_4;
                            _3545 = frontier_phi_75_pred_5;
                            _3253 = _3548 + _3266;
                            _3254 = _3549 + _3267;
                            _3255 = _3550 + _3268;
                            _3250 = _3545 + _3263;
                            _3251 = _3546 + _3264;
                            _3252 = _3547 + _3265;
                            if (_3270 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3263 = _3250;
                                _3264 = _3251;
                                _3265 = _3252;
                                _3266 = _3253;
                                _3267 = _3254;
                                _3268 = _3255;
                                _3269 = _3270;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3255;
                        frontier_phi_69_pred_1 = _3254;
                        frontier_phi_69_pred_2 = _3253;
                        frontier_phi_69_pred_3 = _3252;
                        frontier_phi_69_pred_4 = _3251;
                        frontier_phi_69_pred_5 = _3250;
                    }
                    _2922 = frontier_phi_69_pred;
                    _2920 = frontier_phi_69_pred_1;
                    _2918 = frontier_phi_69_pred_2;
                    _2916 = frontier_phi_69_pred_3;
                    _2914 = frontier_phi_69_pred_4;
                    _2912 = frontier_phi_69_pred_5;
                    uint _3057 = _3056 + 1u;
                    if (_3057 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3050 = _2912;
                        _3051 = _2914;
                        _3052 = _2916;
                        _3053 = _2918;
                        _3054 = _2920;
                        _3055 = _2922;
                        _3056 = _3057;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2922;
                frontier_phi_57_58_ladder_1 = _2920;
                frontier_phi_57_58_ladder_2 = _2918;
                frontier_phi_57_58_ladder_3 = _2916;
                frontier_phi_57_58_ladder_4 = _2914;
                frontier_phi_57_58_ladder_5 = _2912;
            }
            else
            {
                frontier_phi_57_58_ladder = _2809;
                frontier_phi_57_58_ladder_1 = _2807;
                frontier_phi_57_58_ladder_2 = _2805;
                frontier_phi_57_58_ladder_3 = _2803;
                frontier_phi_57_58_ladder_4 = _2801;
                frontier_phi_57_58_ladder_5 = _2799;
            }
            _2911 = frontier_phi_57_58_ladder_5;
            _2913 = frontier_phi_57_58_ladder_4;
            _2915 = frontier_phi_57_58_ladder_3;
            _2917 = frontier_phi_57_58_ladder_2;
            _2919 = frontier_phi_57_58_ladder_1;
            _2921 = frontier_phi_57_58_ladder;
        }
        float _2926 = isnan(1.0) ? _951 : (isnan(_951) ? 1.0 : min(_951, 1.0));
        _2711 = (_2926 * _2917) + _2145;
        _2713 = (_2926 * _2919) + _2147;
        _2715 = (_2926 * _2921) + _2149;
        _2717 = ((_2911 * _936) * _2926) + _2493;
        _2719 = ((_2913 * _938) * _2926) + _2495;
        _2721 = ((_2915 * _939) * _2926) + _2497;
    }
    else
    {
        _2711 = _2145;
        _2713 = _2147;
        _2715 = _2149;
        _2717 = _2493;
        _2719 = _2495;
        _2721 = _2497;
    }
    float _4622 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _4633 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _4644 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    uint _2741 = _911 + 6u;
    float _2749 = _873 / cbSceneParam._m0[86u].x;
    float _2750 = _874 / cbSceneParam._m0[86u].y;
    vec4 _2764 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2749, _2750, (log2((isnan(cbSceneParam._m0[77u].w) ? _808 : (isnan(_808) ? cbSceneParam._m0[77u].w : min(_808, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2766 = _2764.x;
    float _2767 = _2764.y;
    float _2768 = _2764.z;
    float _2769 = _2764.w;
    float _2861;
    float _2863;
    float _2865;
    float _2867;
    if (_808 > cbSceneParam._m0[78u].w)
    {
        float _2824 = isnan(_808) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _808 : min(cbSceneParam._m0[80u].w, _808));
        float _2825 = _2824 / _808;
        float _2836 = _2825 * _858;
        float _2837 = _859 * _2825;
        float _2838 = (-0.0) - _2837;
        float _2839 = _2825 * _860;
        float _2841 = (cbSceneParam._m0[77u].w * _2838) / _2824;
        float _2842 = _2841 + cbSceneParam._m0[79u].w;
        float _2843 = cbSceneParam._m0[79u].w - _2837;
        float _2849 = sqrt(((_2836 * _2836) + (_2837 * _2837)) + (_2839 * _2839));
        float _2852 = (1.0 - (cbSceneParam._m0[77u].w / _2824)) * _2849;
        float _2857 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2859 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3012;
        if (abs((_2838 - _2841) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3012 = ((((_2842 > 0.0) ? exp2(_2857 * _2842) : (2.0 - exp2(_2859 * _2842))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2852;
        }
        else
        {
            float _2972 = 1.0 / cbSceneParam._m0[80u].x;
            float _2973 = isnan(_2843) ? _2842 : (isnan(_2842) ? _2843 : max(_2842, _2843));
            float _2974 = isnan(_2843) ? _2842 : (isnan(_2842) ? _2843 : min(_2842, _2843));
            float _2983 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : min(_2973, 0.0));
            float _2984 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : min(_2974, 0.0));
            _3012 = ((abs(_2849 / _2838) * cbSceneParam._m0[80u].y) * ((((_2983 - _2984) * 2.0) - ((exp2(_2857 * (isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0)))) - exp2(_2857 * (isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0))))) * _2972)) - ((exp2(_2859 * _2983) - exp2(_2859 * _2984)) * _2972))) + (_2852 * cbSceneParam._m0[80u].z);
        }
        vec4 _3014 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2749, _2750, 1.0), 0.0);
        float _3023 = exp2((_3012 * (-1.44269502162933349609375)) * (1.0 - _3014.w));
        float _3024 = log2(_3023);
        float _3040 = log2(_2769);
        _2861 = (exp2(_3040 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3024 * cbSceneParam._m0[78u].x)) * _3014.x) / cbSceneParam._m0[78u].x)) + _2766;
        _2863 = (exp2(_3040 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3024 * cbSceneParam._m0[78u].y)) * _3014.y) / cbSceneParam._m0[78u].y)) + _2767;
        _2865 = (exp2(_3040 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3024 * cbSceneParam._m0[78u].z)) * _3014.z) / cbSceneParam._m0[78u].z)) + _2768;
        _2867 = _3023 * _2769;
    }
    else
    {
        _2861 = _2766;
        _2863 = _2767;
        _2865 = _2768;
        _2867 = _2769;
    }
    float _2879 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2880 = _2879 == 3.0;
    float _2881 = log2(_2867);
    float _2888 = exp2(_2881 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (_2711 + ((isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))) * _951))) + ((_2717 + ((isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0))) * _1761)) * cbPerFrame._m0[3u].x));
    float _2889 = exp2(_2881 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2713 + ((isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))) * _951))) + ((_2719 + ((isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0))) * _1761)) * cbPerFrame._m0[3u].x));
    float _2890 = exp2(_2881 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2715 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _951))) + ((_2721 + ((isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))) * _1761)) * cbPerFrame._m0[3u].x));
    float _2899 = (_2879 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2899 * (_2880 ? _2888 : (_2888 + (cbSceneParam._m0[72u].w * _2861)));
    SV_Target.y = _2899 * (_2880 ? _2889 : (_2889 + (cbSceneParam._m0[72u].w * _2863)));
    SV_Target.z = _2899 * (_2880 ? _2890 : (_2890 + (cbSceneParam._m0[72u].w * _2865)));
    SV_Target.w = cbInstanceData._m0[_2741].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2741].w;
}


