#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _728;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _154 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _155 = _154 * NORMAL.x;
    float _156 = _154 * NORMAL.y;
    float _157 = _154 * NORMAL.z;
    float _162;
    float _163;
    float _164;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _162 = (-0.0) - _155;
        _163 = (-0.0) - _156;
        _164 = (-0.0) - _157;
    }
    else
    {
        _162 = _155;
        _163 = _156;
        _164 = _157;
    }
    vec4 _187 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _190 = _187.x;
    bool _197 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _217 = ((_197 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _190)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _190))) - POSITION_1.w) / cbMtdParam._m0[11u].x;
    float _2861 = isnan(0.0) ? _217 : (isnan(_217) ? 0.0 : max(_217, 0.0));
    float _220 = 1.0 - (isnan(1.0) ? _2861 : (isnan(_2861) ? 1.0 : min(_2861, 1.0)));
    float _2872 = isnan(0.0) ? _220 : (isnan(_220) ? 0.0 : max(_220, 0.0));
    float _221 = isnan(1.0) ? _2872 : (isnan(_2872) ? 1.0 : min(_2872, 1.0));
    float _224 = 3.0 - (_221 * 2.0);
    float _229 = _221 * _221;
    float _236 = ((_229 * (cbMtdParam._m0[9u].x - cbMtdParam._m0[10u].x)) * _224) + cbMtdParam._m0[10u].x;
    float _237 = ((_229 * (cbMtdParam._m0[9u].y - cbMtdParam._m0[10u].y)) * _224) + cbMtdParam._m0[10u].y;
    float _238 = ((_229 * (cbMtdParam._m0[9u].z - cbMtdParam._m0[10u].z)) * _224) + cbMtdParam._m0[10u].z;
    float _242 = inversesqrt(dot(vec3(_162, _163, _164), vec3(_162, _163, _164)));
    float _243 = _242 * _162;
    float _244 = _242 * _163;
    float _245 = _242 * _164;
    float _2883 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _2894 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _2905 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _253 = _197 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _294 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _304 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _294);
    float _305 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _294);
    float _306 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _294);
    float _310 = inversesqrt(dot(vec3(_304, _305, _306), vec3(_304, _305, _306)));
    float _311 = _304 * _310;
    float _312 = _305 * _310;
    float _313 = _306 * _310;
    float _318 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _319 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _340 = fma(_245, cbSceneParam._m0[5u].z, fma(_244, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _243));
    float _343 = fma(_245, cbSceneParam._m0[6u].z, fma(_244, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _243));
    float _346 = fma(_245, cbSceneParam._m0[7u].z, fma(_244, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _243));
    uint _359 = uint(roundEven(NORMAL.w)) * 13u;
    uint _362 = (_359 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _368 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2883 : (isnan(_2883) ? 1.0 : min(_2883, 1.0)))) * cbInstanceData._m0[_362].x;
    float _369 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2894 : (isnan(_2894) ? 1.0 : min(_2894, 1.0)))) * cbInstanceData._m0[_362].y;
    float _370 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2905 : (isnan(_2905) ? 1.0 : min(_2905, 1.0)))) * cbInstanceData._m0[_362].z;
    float _2916 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _371 = isnan(1.0) ? _2916 : (isnan(_2916) ? 1.0 : min(_2916, 1.0));
    float _2927 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _372 = isnan(1.0) ? _2927 : (isnan(_2927) ? 1.0 : min(_2927, 1.0));
    float _2938 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _373 = isnan(1.0) ? _2938 : (isnan(_2938) ? 1.0 : min(_2938, 1.0));
    vec4 _382 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _318, cbSceneParam._m0[86u].y * _319));
    float _385 = _382.x * TEXCOORD.z;
    float _386 = dot(vec3(_243, _244, _245), vec3(_311, _312, _313));
    float _389 = _386 * 2.0;
    float _393 = (_389 * _243) - _311;
    float _394 = (_389 * _244) - _312;
    float _395 = (_389 * _245) - _313;
    float _417 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _421 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _425 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _727;
    float _729;
    float _730;
    float _731;
    float _732;
    float _733;
    float _734;
    float _735;
    float _736;
    float _737;
    float _738;
    float _739;
    float _740;
    float _741;
    float _742;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _452 = fma(_425, cbModelParam._m0[26u].z, fma(_421, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _417));
        float _456 = fma(_425, cbModelParam._m0[27u].z, fma(_421, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _417));
        float _460 = fma(_425, cbModelParam._m0[28u].z, fma(_421, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _417));
        float _485 = _417 + _243;
        float _486 = _421 + _244;
        float _487 = _425 + _245;
        float _497 = fma(_487, cbModelParam._m0[26u].z, fma(_486, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _485)) - _452;
        float _498 = fma(_487, cbModelParam._m0[27u].z, fma(_486, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _485)) - _456;
        float _499 = fma(_487, cbModelParam._m0[28u].z, fma(_486, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _485)) - _460;
        float _503 = inversesqrt(dot(vec3(_497, _498, _499), vec3(_497, _498, _499)));
        float _516 = ((_503 * _497) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_452 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _517 = ((_503 * _498) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_456 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _518 = ((_503 * _499) / cbModelParam._m0[34u].z) + ((((((_460 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _521 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_516, _517, _518), 0.0);
        vec4 _528 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_516, _517, _518), 0.0);
        vec4 _535 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_516, _517, _518), 0.0);
        vec4 _542 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_516, _517, _518), 0.0);
        float _555 = exp2((_521.w + (-0.5)) * 20.0) * 2.0;
        float _556 = _555 * (_521.x + (-0.5));
        float _557 = _555 * (_521.y + (-0.5));
        float _558 = _555 * (_521.z + (-0.5));
        float _565 = exp2((_528.w + (-0.5)) * 20.0) * 2.0;
        float _566 = _565 * (_528.x + (-0.5));
        float _567 = _565 * (_528.y + (-0.5));
        float _568 = _565 * (_528.z + (-0.5));
        float _575 = exp2((_535.w + (-0.5)) * 20.0) * 2.0;
        float _576 = _575 * (_535.x + (-0.5));
        float _577 = _575 * (_535.y + (-0.5));
        float _578 = _575 * (_535.z + (-0.5));
        float _585 = exp2((_542.w + (-0.5)) * 20.0) * 2.0;
        float _586 = _585 * (_542.x + (-0.5));
        float _587 = _585 * (_542.y + (-0.5));
        float _588 = _585 * (_542.z + (-0.5));
        float _589 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
        float _590 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
        float _591 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
        float _592 = _556 * 0.5;
        float _593 = _566 * 0.5;
        float _594 = _576 * 0.5;
        float _595 = dot(vec3(_592, _593, _594), vec3(_592, _593, _594));
        float _600 = (_595 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_595);
        float _609 = (dot(vec3(_243, _244, _245), vec3(_600 * _592, _600 * _593, _600 * _594)) + 1.0) * 0.5;
        float _2964 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
        float _619 = sqrt(((_593 * _593) + (_592 * _592)) + (_594 * _594)) / (_589 + 9.9999997473787516355514526367188e-06);
        float _2975 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
        float _620 = isnan(1.0) ? _2975 : (isnan(_2975) ? 1.0 : min(_2975, 1.0));
        float _621 = _620 * 2.0;
        float _625 = (1.0 - _620) / (_620 + 1.0);
        float _2986 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
        float _626 = isnan(1.0) ? _2986 : (isnan(_2986) ? 1.0 : min(_2986, 1.0));
        float _635 = ((((1.0 - _626) * (_621 + 2.0)) * exp2(log2(isnan(1.0) ? _2964 : (isnan(_2964) ? 1.0 : min(_2964, 1.0))) * (_621 + 1.0))) + _626) * _589;
        float _636 = _557 * 0.5;
        float _637 = _567 * 0.5;
        float _638 = _577 * 0.5;
        float _639 = dot(vec3(_636, _637, _638), vec3(_636, _637, _638));
        float _644 = (_639 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_639);
        float _652 = (dot(vec3(_243, _244, _245), vec3(_644 * _636, _644 * _637, _644 * _638)) + 1.0) * 0.5;
        float _2997 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
        float _661 = sqrt(((_637 * _637) + (_636 * _636)) + (_638 * _638)) / (_590 + 9.9999997473787516355514526367188e-06);
        float _3008 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
        float _662 = isnan(1.0) ? _3008 : (isnan(_3008) ? 1.0 : min(_3008, 1.0));
        float _663 = _662 * 2.0;
        float _667 = (1.0 - _662) / (_662 + 1.0);
        float _3019 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
        float _668 = isnan(1.0) ? _3019 : (isnan(_3019) ? 1.0 : min(_3019, 1.0));
        float _677 = ((((1.0 - _668) * (_663 + 2.0)) * exp2(log2(isnan(1.0) ? _2997 : (isnan(_2997) ? 1.0 : min(_2997, 1.0))) * (_663 + 1.0))) + _668) * _590;
        float _678 = _558 * 0.5;
        float _679 = _568 * 0.5;
        float _680 = _578 * 0.5;
        float _681 = dot(vec3(_678, _679, _680), vec3(_678, _679, _680));
        float _686 = (_681 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_681);
        float _694 = (dot(vec3(_243, _244, _245), vec3(_686 * _678, _686 * _679, _686 * _680)) + 1.0) * 0.5;
        float _3030 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _703 = sqrt(((_679 * _679) + (_678 * _678)) + (_680 * _680)) / (_591 + 9.9999997473787516355514526367188e-06);
        float _3041 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _704 = isnan(1.0) ? _3041 : (isnan(_3041) ? 1.0 : min(_3041, 1.0));
        float _705 = _704 * 2.0;
        float _709 = (1.0 - _704) / (_704 + 1.0);
        float _3052 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _710 = isnan(1.0) ? _3052 : (isnan(_3052) ? 1.0 : min(_3052, 1.0));
        float _719 = ((((1.0 - _710) * (_705 + 2.0)) * exp2(log2(isnan(1.0) ? _3030 : (isnan(_3030) ? 1.0 : min(_3030, 1.0))) * (_705 + 1.0))) + _710) * _591;
        _727 = _558;
        _729 = _557;
        _730 = _556;
        _731 = _568;
        _732 = _567;
        _733 = _566;
        _734 = _578;
        _735 = _577;
        _736 = _576;
        _737 = _591;
        _738 = _590;
        _739 = _589;
        _740 = cbModelParam._m0[36u].z * (isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0)));
        _741 = cbModelParam._m0[36u].z * (isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0)));
        _742 = cbModelParam._m0[36u].z * (isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0)));
    }
    else
    {
        _727 = _728;
        _729 = _728;
        _730 = _728;
        _731 = _728;
        _732 = _728;
        _733 = _728;
        _734 = _728;
        _735 = _728;
        _736 = _728;
        _737 = _728;
        _738 = _728;
        _739 = _728;
        _740 = 0.0;
        _741 = 0.0;
        _742 = 0.0;
    }
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _768 = fma(_425, cbModelParam._m0[30u].z, fma(_421, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _417));
        float _772 = fma(_425, cbModelParam._m0[31u].z, fma(_421, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _417));
        float _776 = fma(_425, cbModelParam._m0[32u].z, fma(_421, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _417));
        float _799 = _417 + _243;
        float _800 = _421 + _244;
        float _801 = _425 + _245;
        float _811 = fma(_801, cbModelParam._m0[30u].z, fma(_800, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _799)) - _768;
        float _812 = fma(_801, cbModelParam._m0[31u].z, fma(_800, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _799)) - _772;
        float _813 = fma(_801, cbModelParam._m0[32u].z, fma(_800, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _799)) - _776;
        float _817 = inversesqrt(dot(vec3(_811, _812, _813), vec3(_811, _812, _813)));
        float _830 = ((_817 * _811) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_768 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _831 = ((_817 * _812) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_772 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _832 = ((_817 * _813) / cbModelParam._m0[35u].z) + ((((((_776 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _834 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        vec4 _841 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        float _867 = exp2((_834.w + (-0.5)) * 20.0) * 2.0;
        float _868 = _867 * (_834.x + (-0.5));
        float _869 = _867 * (_834.y + (-0.5));
        float _870 = _867 * (_834.z + (-0.5));
        float _877 = exp2((_841.w + (-0.5)) * 20.0) * 2.0;
        float _878 = _877 * (_841.x + (-0.5));
        float _879 = _877 * (_841.y + (-0.5));
        float _880 = _877 * (_841.z + (-0.5));
        float _887 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_848.x + (-0.5));
        float _889 = _887 * (_848.y + (-0.5));
        float _890 = _887 * (_848.z + (-0.5));
        float _897 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _898 = _897 * (_855.x + (-0.5));
        float _899 = _897 * (_855.y + (-0.5));
        float _900 = _897 * (_855.z + (-0.5));
        float _901 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _902 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _903 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _904 = _868 * 0.5;
        float _905 = _878 * 0.5;
        float _906 = _888 * 0.5;
        float _907 = dot(vec3(_904, _905, _906), vec3(_904, _905, _906));
        float _912 = (_907 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_907);
        float _920 = (dot(vec3(_243, _244, _245), vec3(_912 * _904, _912 * _905, _912 * _906)) + 1.0) * 0.5;
        float _3093 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _929 = sqrt(((_905 * _905) + (_904 * _904)) + (_906 * _906)) / (_901 + 9.9999997473787516355514526367188e-06);
        float _3104 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3104 : (isnan(_3104) ? 1.0 : min(_3104, 1.0));
        float _931 = _930 * 2.0;
        float _935 = (1.0 - _930) / (_930 + 1.0);
        float _3115 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3115 : (isnan(_3115) ? 1.0 : min(_3115, 1.0));
        float _945 = ((((1.0 - _936) * (_931 + 2.0)) * exp2(log2(isnan(1.0) ? _3093 : (isnan(_3093) ? 1.0 : min(_3093, 1.0))) * (_931 + 1.0))) + _936) * _901;
        float _946 = _869 * 0.5;
        float _947 = _879 * 0.5;
        float _948 = _889 * 0.5;
        float _949 = dot(vec3(_946, _947, _948), vec3(_946, _947, _948));
        float _954 = (_949 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_949);
        float _962 = (dot(vec3(_243, _244, _245), vec3(_954 * _946, _954 * _947, _954 * _948)) + 1.0) * 0.5;
        float _3126 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _971 = sqrt(((_947 * _947) + (_946 * _946)) + (_948 * _948)) / (_902 + 9.9999997473787516355514526367188e-06);
        float _3137 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3137 : (isnan(_3137) ? 1.0 : min(_3137, 1.0));
        float _973 = _972 * 2.0;
        float _977 = (1.0 - _972) / (_972 + 1.0);
        float _3148 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3148 : (isnan(_3148) ? 1.0 : min(_3148, 1.0));
        float _987 = ((((1.0 - _978) * (_973 + 2.0)) * exp2(log2(isnan(1.0) ? _3126 : (isnan(_3126) ? 1.0 : min(_3126, 1.0))) * (_973 + 1.0))) + _978) * _902;
        float _988 = _870 * 0.5;
        float _989 = _880 * 0.5;
        float _990 = _890 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1004 = (dot(vec3(_243, _244, _245), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3159 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1013 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_903 + 9.9999997473787516355514526367188e-06);
        float _3170 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3170 : (isnan(_3170) ? 1.0 : min(_3170, 1.0));
        float _1015 = _1014 * 2.0;
        float _1019 = (1.0 - _1014) / (_1014 + 1.0);
        float _3181 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3181 : (isnan(_3181) ? 1.0 : min(_3181, 1.0));
        float _1029 = ((((1.0 - _1020) * (_1015 + 2.0)) * exp2(log2(isnan(1.0) ? _3159 : (isnan(_3159) ? 1.0 : min(_3159, 1.0))) * (_1015 + 1.0))) + _1020) * _903;
        _1037 = _870;
        _1038 = _869;
        _1039 = _868;
        _1040 = _880;
        _1041 = _879;
        _1042 = _878;
        _1043 = _890;
        _1044 = _889;
        _1045 = _888;
        _1046 = _903;
        _1047 = _902;
        _1048 = _901;
        _1049 = cbModelParam._m0[36u].w * (isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0)));
        _1050 = cbModelParam._m0[36u].w * (isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0)));
        _1051 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)));
    }
    else
    {
        _1037 = _728;
        _1038 = _728;
        _1039 = _728;
        _1040 = _728;
        _1041 = _728;
        _1042 = _728;
        _1043 = _728;
        _1044 = _728;
        _1045 = _728;
        _1046 = _728;
        _1047 = _728;
        _1048 = _728;
        _1049 = 0.0;
        _1050 = 0.0;
        _1051 = 0.0;
    }
    float _1061 = (cbModelParam._m0[1u].x * (_1049 - _740)) + _740;
    float _1062 = (cbModelParam._m0[1u].x * (_1050 - _741)) + _741;
    float _1063 = (cbModelParam._m0[1u].x * (_1051 - _742)) + _742;
    float _1084 = fma(_1063, cbSceneParam._m0[89u].z, fma(_1062, cbSceneParam._m0[89u].y, _1061 * cbSceneParam._m0[89u].x));
    float _1087 = fma(_1063, cbSceneParam._m0[90u].z, fma(_1062, cbSceneParam._m0[90u].y, _1061 * cbSceneParam._m0[90u].x));
    float _1090 = fma(_1063, cbSceneParam._m0[91u].z, fma(_1062, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1061));
    float _1105 = _393 * 0.5;
    float _1106 = _394 * 0.5;
    float _1107 = _395 * 0.5;
    float _1108 = dot(vec4(_1105, _1106, _1107, 1.0), vec4(_1039, _1042, _1045, _1048));
    float _1111 = dot(vec4(_1105, _1106, _1107, 1.0), vec4(_1038, _1041, _1044, _1047));
    float _1114 = dot(vec4(_1105, _1106, _1107, 1.0), vec4(_1037, _1040, _1043, _1046));
    float _1148;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1121 = dot(vec4(_1105, _1106, _1107, 1.0), vec4(_727, _731, _734, _737));
        float _1125 = dot(vec4(_1105, _1106, _1107, 1.0), vec4(_729, _732, _735, _738));
        float _1129 = dot(vec4(_1105, _1106, _1107, 1.0), vec4(_730, _733, _736, _739));
        float _1136 = dot(vec4(cbModelParam._m0[39u]), vec4(_1105, _1106, _1107, 1.0));
        _1148 = dot(vec3(isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)), isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)), isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1136) ? 0.0 : (isnan(0.0) ? _1136 : max(0.0, _1136))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1148 = 1.0;
    }
    float _1159;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1150 = dot(vec4(cbModelParam._m0[40u]), vec4(_1105, _1106, _1107, 1.0));
        _1159 = dot(vec3(isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)), isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)), isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1150) ? 0.0 : (isnan(0.0) ? _1150 : max(0.0, _1150))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1159 = 1.0;
    }
    float _1163 = (_1159 * cbModelParam._m0[1u].x) + (_1148 * (1.0 - cbModelParam._m0[1u].x));
    float _1173 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1255;
    float _1257;
    float _1259;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1222 = fma(_425, cbModelParam._m0[13u].z, fma(_421, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _417)) + cbModelParam._m0[13u].w;
        float _1226 = fma(_425, cbModelParam._m0[14u].z, fma(_421, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _417)) + cbModelParam._m0[14u].w;
        float _1230 = fma(_425, cbModelParam._m0[15u].z, fma(_421, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _417)) + cbModelParam._m0[15u].w;
        float _1233 = fma(_395, cbModelParam._m0[13u].z, fma(_394, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _393));
        float _1236 = fma(_395, cbModelParam._m0[14u].z, fma(_394, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _393));
        float _1239 = fma(_395, cbModelParam._m0[15u].z, fma(_394, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _393));
        float _1265;
        if (_1233 > 0.0)
        {
            _1265 = abs((1.0 - _1222) / _1233);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1233 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1222 + 1.0) / _1233);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1265 = frontier_phi_16_14_ladder;
        }
        float _1493;
        if (_1236 > 0.0)
        {
            _1493 = abs((1.0 - _1226) / _1236);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1236 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1226 + 1.0) / _1236);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1493 = frontier_phi_25_21_ladder;
        }
        float _1685;
        if (_1239 > 0.0)
        {
            _1685 = abs((1.0 - _1230) / _1239);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1239 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1230 + 1.0) / _1239);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1685 = frontier_phi_37_32_ladder;
        }
        float _1687 = isnan(_1493) ? _1265 : (isnan(_1265) ? _1493 : min(_1265, _1493));
        float _1688 = isnan(_1685) ? _1687 : (isnan(_1687) ? _1685 : min(_1687, _1685));
        float _1692 = (_1688 * _1233) + _1222;
        float _1693 = (_1688 * _1236) + _1226;
        float _1694 = (_1688 * _1239) + _1230;
        float _1695 = _1688 * 9.9999997473787516355514526367188e-05;
        float _1697 = (-1.0) - _1695;
        float _1699 = _1695 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1694 > _1699) || ((_1694 < _1697) || ((_1693 > _1699) || ((_1693 < _1697) || ((_1692 < _1697) || (_1692 > _1699))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1791 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1694, cbModelParam._m0[9u].z, fma(_1693, cbModelParam._m0[9u].y, _1692 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1694, cbModelParam._m0[10u].z, fma(_1693, cbModelParam._m0[10u].y, _1692 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1694, cbModelParam._m0[11u].z, fma(_1693, cbModelParam._m0[11u].y, _1692 * cbModelParam._m0[11u].x))), _1173);
            frontier_phi_15_37_ladder = _1791.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1791.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1791.x * cbModelParam._m0[1u].y;
        }
        _1255 = frontier_phi_15_37_ladder_2;
        _1257 = frontier_phi_15_37_ladder_1;
        _1259 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1243 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_393, _394, _395), _1173);
        _1255 = _1243.x * cbModelParam._m0[1u].y;
        _1257 = _1243.y * cbModelParam._m0[1u].y;
        _1259 = _1243.z * cbModelParam._m0[1u].y;
    }
    float _1262 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1355;
    float _1357;
    float _1359;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1319 = fma(_425, cbModelParam._m0[21u].z, fma(_421, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _417)) + cbModelParam._m0[21u].w;
        float _1323 = fma(_425, cbModelParam._m0[22u].z, fma(_421, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _417)) + cbModelParam._m0[22u].w;
        float _1327 = fma(_425, cbModelParam._m0[23u].z, fma(_421, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _417)) + cbModelParam._m0[23u].w;
        float _1330 = fma(_395, cbModelParam._m0[21u].z, fma(_394, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _393));
        float _1333 = fma(_395, cbModelParam._m0[22u].z, fma(_394, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _393));
        float _1336 = fma(_395, cbModelParam._m0[23u].z, fma(_394, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _393));
        float _1498;
        if (_1330 > 0.0)
        {
            _1498 = abs((1.0 - _1319) / _1330);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1330 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1319 + 1.0) / _1330);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1498 = frontier_phi_27_23_ladder;
        }
        float _1712;
        if (_1333 > 0.0)
        {
            _1712 = abs((1.0 - _1323) / _1333);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1333 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1323 + 1.0) / _1333);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1712 = frontier_phi_39_34_ladder;
        }
        float _1863;
        if (_1336 > 0.0)
        {
            _1863 = abs((1.0 - _1327) / _1336);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1336 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1327 + 1.0) / _1336);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _1863 = frontier_phi_48_45_ladder;
        }
        float _1865 = isnan(_1712) ? _1498 : (isnan(_1498) ? _1712 : min(_1498, _1712));
        float _1866 = isnan(_1863) ? _1865 : (isnan(_1865) ? _1863 : min(_1865, _1863));
        float _1870 = (_1866 * _1330) + _1319;
        float _1871 = (_1866 * _1333) + _1323;
        float _1872 = (_1866 * _1336) + _1327;
        float _1873 = _1866 * 9.9999997473787516355514526367188e-05;
        float _1874 = (-1.0) - _1873;
        float _1876 = _1873 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1872 > _1876) || ((_1872 < _1874) || ((_1871 > _1876) || ((_1871 < _1874) || ((_1870 < _1874) || (_1870 > _1876))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2070 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1872, cbModelParam._m0[17u].z, fma(_1871, cbModelParam._m0[17u].y, _1870 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1872, cbModelParam._m0[18u].z, fma(_1871, cbModelParam._m0[18u].y, _1870 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1872, cbModelParam._m0[19u].z, fma(_1871, cbModelParam._m0[19u].y, _1870 * cbModelParam._m0[19u].x))), _1262);
            frontier_phi_24_48_ladder = _2070.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2070.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2070.x * cbModelParam._m0[1u].z;
        }
        _1355 = frontier_phi_24_48_ladder_2;
        _1357 = frontier_phi_24_48_ladder_1;
        _1359 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1339 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_393, _394, _395), _1262);
        _1355 = _1339.x * cbModelParam._m0[1u].z;
        _1357 = _1339.y * cbModelParam._m0[1u].z;
        _1359 = _1339.z * cbModelParam._m0[1u].z;
    }
    float _1371 = _385 * 0.01200000010430812835693359375;
    float _1373 = _1371 * ((cbModelParam._m0[1u].w * (_1355 - _1255)) + _1255);
    float _1374 = _1371 * ((cbModelParam._m0[1u].w * (_1357 - _1257)) + _1257);
    float _1375 = _1371 * ((cbModelParam._m0[1u].w * (_1359 - _1259)) + _1259);
    float _1378 = fma(_1375, cbSceneParam._m0[89u].z, fma(_1374, cbSceneParam._m0[89u].y, _1373 * cbSceneParam._m0[89u].x));
    float _1381 = fma(_1375, cbSceneParam._m0[90u].z, fma(_1374, cbSceneParam._m0[90u].y, _1373 * cbSceneParam._m0[90u].x));
    float _1384 = fma(_1375, cbSceneParam._m0[91u].z, fma(_1374, cbSceneParam._m0[91u].y, _1373 * cbSceneParam._m0[91u].x));
    vec4 _1392 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_318, _319));
    float _1394 = _1392.w;
    float _1406 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1394);
    float _1407 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1394);
    float _1408 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1394);
    uvec4 _1412 = floatBitsToUint(cbInstanceData._m0[_359 + 5u]);
    uint _1414 = _1412.x * 14u;
    uint _1415 = _1414 + 13u;
    float _1422 = _385 + (-1.0);
    float _1428 = (cbLight._m0[_1415].x * _1422) + 1.0;
    float _1429 = (cbLight._m0[_1415].y * _1422) + 1.0;
    float _1430 = (cbLight._m0[_1415].z * _1422) + 1.0;
    float _1431 = (cbLight._m0[_1415].w * _1422) + 1.0;
    uint _1432 = _1414 + 5u;
    float _1438 = isnan(1.0) ? _1429 : (isnan(_1429) ? 1.0 : min(_1429, 1.0));
    uint _1442 = _1414 + 4u;
    float _1452 = isnan(1.0) ? _1428 : (isnan(_1428) ? 1.0 : min(_1428, 1.0));
    uint _1456 = _1414 | 1u;
    float _1467 = dot(vec3(cbLight._m0[_1414].xyz), vec3(_243, _244, _245));
    float _1470 = dot(vec3(cbLight._m0[_1456].xyz), vec3(_243, _244, _245));
    float _3317 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
    float _3328 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
    float _1475 = (isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0))) * 0.3183098733425140380859375;
    float _1477 = (isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0))) * 0.3183098733425140380859375;
    float _1484 = ((cbLight._m0[_1432].x * _1438) * _1477) + (((cbLight._m0[_1442].x * _1406) * _1452) * _1475);
    float _1485 = ((_1438 * cbLight._m0[_1432].y) * _1477) + (((cbLight._m0[_1442].y * _1407) * _1452) * _1475);
    float _1486 = ((_1438 * cbLight._m0[_1432].z) * _1477) + (((cbLight._m0[_1442].z * _1408) * _1452) * _1475);
    uvec4 _1490 = floatBitsToUint(cbLight._m0[_1414 + 12u]);
    bool _1492 = _1490.x == 0u;
    float _1503;
    float _1505;
    float _1507;
    if (_1492)
    {
        _1503 = _1484;
        _1505 = _1485;
        _1507 = _1486;
    }
    else
    {
        uint _1511 = _1414 + 6u;
        float _1527 = (dot(vec3(cbLight._m0[_1414 + 2u].xyz), vec3(_243, _244, _245)) * 0.5) + 0.5;
        float _1528 = _1527 * _1527;
        float _3339 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
        float _1530 = isnan(1.0) ? _1430 : (isnan(_1430) ? 1.0 : min(_1430, 1.0));
        _1503 = (((cbLight._m0[_1511].x * 0.3183098733425140380859375) * _1529) * _1530) + _1484;
        _1505 = (((cbLight._m0[_1511].y * 0.3183098733425140380859375) * _1529) * _1530) + _1485;
        _1507 = (((cbLight._m0[_1511].z * 0.3183098733425140380859375) * _1529) * _1530) + _1486;
    }
    bool _1510 = _1490.y == 0u;
    float _1548;
    float _1550;
    float _1552;
    if (_1510)
    {
        _1548 = _1503;
        _1550 = _1505;
        _1552 = _1507;
    }
    else
    {
        uint _1656 = _1414 + 7u;
        float _1672 = (dot(vec3(cbLight._m0[_1414 + 3u].xyz), vec3(_243, _244, _245)) * 0.5) + 0.5;
        float _1673 = _1672 * _1672;
        float _3355 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
        float _1675 = isnan(1.0) ? _1431 : (isnan(_1431) ? 1.0 : min(_1431, 1.0));
        _1548 = (((cbLight._m0[_1656].x * 0.3183098733425140380859375) * _1674) * _1675) + _1503;
        _1550 = (((cbLight._m0[_1656].y * 0.3183098733425140380859375) * _1674) * _1675) + _1505;
        _1552 = (((cbLight._m0[_1656].z * 0.3183098733425140380859375) * _1674) * _1675) + _1507;
    }
    uint _1554 = _1414 + 8u;
    float _1560 = cbLight._m0[_1414].x + _311;
    float _1561 = cbLight._m0[_1414].y + _312;
    float _1562 = cbLight._m0[_1414].z + _313;
    float _1566 = inversesqrt(dot(vec3(_1560, _1561, _1562), vec3(_1560, _1561, _1562)));
    float _1570 = dot(vec3(_243, _244, _245), vec3(cbLight._m0[_1414].xyz));
    float _3371 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
    float _1573 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
    float _3382 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _1574 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
    float _1575 = dot(vec3(cbLight._m0[_1414].xyz), vec3(_1560 * _1566, _1561 * _1566, _1562 * _1566));
    float _3393 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
    float _1586 = (exp2(log2(1.0 - (isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1592 = (0.5 / ((_1573 + 9.9999999392252902907785028219223e-09) + _1574)) * _1573;
    float _3404 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
    float _1594 = (isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0))) * 0.31831014156341552734375;
    uint _1608 = _1414 + 9u;
    float _1614 = cbLight._m0[_1456].x + _311;
    float _1615 = cbLight._m0[_1456].y + _312;
    float _1616 = cbLight._m0[_1456].z + _313;
    float _1620 = inversesqrt(dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616)));
    float _1624 = dot(vec3(_243, _244, _245), vec3(cbLight._m0[_1456].xyz));
    float _3415 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
    float _1627 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
    float _1628 = dot(vec3(cbLight._m0[_1456].xyz), vec3(_1614 * _1620, _1615 * _1620, _1616 * _1620));
    float _3426 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
    float _1637 = (exp2(log2(1.0 - (isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1641 = (0.5 / ((_1627 + 9.9999999392252902907785028219223e-09) + _1574)) * _1627;
    float _3437 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
    float _1643 = (isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0))) * 0.31831014156341552734375;
    float _1653 = (((_1637 * cbLight._m0[_1608].x) * _1643) * _1438) + ((((cbLight._m0[_1554].x * _1406) * _1586) * _1594) * _1452);
    float _1654 = (((_1637 * cbLight._m0[_1608].y) * _1643) * _1438) + ((((cbLight._m0[_1554].y * _1407) * _1586) * _1594) * _1452);
    float _1655 = (((_1637 * cbLight._m0[_1608].z) * _1643) * _1438) + ((((cbLight._m0[_1554].z * _1408) * _1586) * _1594) * _1452);
    float _1717;
    float _1719;
    float _1721;
    if (_1492)
    {
        _1717 = _1653;
        _1719 = _1654;
        _1721 = _1655;
    }
    else
    {
        uint _1723 = _1414 + 10u;
        uint _1729 = _1414 + 2u;
        float _1735 = cbLight._m0[_1729].x + _311;
        float _1736 = cbLight._m0[_1729].y + _312;
        float _1737 = cbLight._m0[_1729].z + _313;
        float _1741 = inversesqrt(dot(vec3(_1735, _1736, _1737), vec3(_1735, _1736, _1737)));
        float _1745 = dot(vec3(_243, _244, _245), vec3(cbLight._m0[_1729].xyz));
        float _3448 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1748 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _1749 = dot(vec3(cbLight._m0[_1729].xyz), vec3(_1735 * _1741, _1736 * _1741, _1737 * _1741));
        float _3459 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1758 = (exp2(log2(1.0 - (isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1762 = (0.5 / ((_1748 + 9.9999999392252902907785028219223e-09) + _1574)) * _1748;
        float _3470 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1764 = (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))) * 0.31831014156341552734375;
        float _1765 = isnan(1.0) ? _1430 : (isnan(_1430) ? 1.0 : min(_1430, 1.0));
        _1717 = (((_1758 * cbLight._m0[_1723].x) * _1764) * _1765) + _1653;
        _1719 = (((_1758 * cbLight._m0[_1723].y) * _1764) * _1765) + _1654;
        _1721 = (((_1758 * cbLight._m0[_1723].z) * _1764) * _1765) + _1655;
    }
    float _1800;
    float _1802;
    float _1804;
    if (_1510)
    {
        _1800 = _1717;
        _1802 = _1719;
        _1804 = _1721;
    }
    else
    {
        uint _1811 = _1414 + 11u;
        uint _1817 = _1414 + 3u;
        float _1823 = cbLight._m0[_1817].x + _311;
        float _1824 = cbLight._m0[_1817].y + _312;
        float _1825 = cbLight._m0[_1817].z + _313;
        float _1829 = inversesqrt(dot(vec3(_1823, _1824, _1825), vec3(_1823, _1824, _1825)));
        float _1833 = dot(vec3(_243, _244, _245), vec3(cbLight._m0[_1817].xyz));
        float _3486 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1836 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _1837 = dot(vec3(cbLight._m0[_1817].xyz), vec3(_1823 * _1829, _1824 * _1829, _1825 * _1829));
        float _3497 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
        float _1846 = (exp2(log2(1.0 - (isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1850 = (0.5 / ((_1836 + 9.9999999392252902907785028219223e-09) + _1574)) * _1836;
        float _3508 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1852 = (isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * 0.31831014156341552734375;
        float _1853 = isnan(1.0) ? _1431 : (isnan(_1431) ? 1.0 : min(_1431, 1.0));
        _1800 = (((_1846 * cbLight._m0[_1811].x) * _1852) * _1853) + _1717;
        _1802 = (((_1846 * cbLight._m0[_1811].y) * _1852) * _1853) + _1719;
        _1804 = (((_1846 * cbLight._m0[_1811].z) * _1852) * _1853) + _1721;
    }
    float _1987;
    float _1989;
    float _1991;
    float _1993;
    float _1995;
    float _1997;
    if (_1412.y == 0u)
    {
        float _1928 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1929 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1928;
        float _1930 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1928;
        float _1931 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1928;
        uvec4 _1943 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1944 = _1943.x;
        uint _1955 = uint((float(_1943.y) * floor(float(uint(cbSceneParam._m0[85u].y * _319) / _1944))) + floor(float(uint(cbSceneParam._m0[85u].x * _318) / _1944)));
        float _1965 = (log2(_1931 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1966 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
        uint _1969 = uint(isnan(14.0) ? _1966 : (isnan(_1966) ? 14.0 : min(_1966, 14.0)));
        uvec4 _1974 = texelFetch(g_lightClusterGridBuffer, int(((_1969 << 2u) + (_1955 << 6u)) >> 2u));
        uint _1975 = _1974.x;
        uint _1976 = _1943.z;
        float _2075;
        float _2077;
        float _2079;
        float _2081;
        float _2083;
        float _2085;
        if (((((1u << ((_1976 >> 4u) & 15u)) + 4294967295u) & _1975) == 0u) || ((_1976 & 240u) == 0u))
        {
            _2075 = 0.0;
            _2077 = 0.0;
            _2079 = 0.0;
            _2081 = 0.0;
            _2083 = 0.0;
            _2085 = 0.0;
        }
        else
        {
            float _2076;
            float _2078;
            float _2080;
            float _2082;
            float _2084;
            float _2086;
            float _2216 = 0.0;
            float _2217 = 0.0;
            float _2218 = 0.0;
            float _2219 = 0.0;
            float _2220 = 0.0;
            float _2221 = 0.0;
            uint _2222 = 0u;
            uint _2231;
            bool _2232;
            for (;;)
            {
                _2231 = texelFetch(g_lightClassification, int((((_1969 << 5u) + (_1955 << 9u)) + (_2222 << 2u)) >> 2u)).x;
                _2232 = _2231 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2232)
                {
                    frontier_phi_63_pred = _2221;
                    frontier_phi_63_pred_1 = _2220;
                    frontier_phi_63_pred_2 = _2219;
                    frontier_phi_63_pred_3 = _2218;
                    frontier_phi_63_pred_4 = _2217;
                    frontier_phi_63_pred_5 = _2216;
                }
                else
                {
                    float _2340;
                    float _2341;
                    float _2342;
                    float _2343;
                    float _2344;
                    float _2345;
                    uint _2346;
                    _2340 = _2216;
                    _2341 = _2217;
                    _2342 = _2218;
                    _2343 = _2219;
                    _2344 = _2220;
                    _2345 = _2221;
                    _2346 = _2231;
                    float _2272;
                    float _2273;
                    float _2274;
                    float _2275;
                    float _2276;
                    float _2277;
                    for (;;)
                    {
                        uint _2350 = uint(findLSB(_2346)) + (_2222 << 5u);
                        uint _2347 = (_2346 + 4294967295u) & _2346;
                        uint _2352 = _2350 * 48u;
                        vec4 _2366 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2352)).x, texelFetch(g_PointLightRenderingBuffer, int(_2352 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2352 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2352 + 3u)).x));
                        uint _2372 = (_2350 * 48u) + 4u;
                        vec4 _2385 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2372)).x, texelFetch(g_PointLightRenderingBuffer, int(_2372 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2372 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2372 + 3u)).x));
                        uint _2391 = (_2350 * 48u) + 8u;
                        vec3 _2402 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2391)).x, texelFetch(g_PointLightRenderingBuffer, int(_2391 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2391 + 2u)).x));
                        float _2406 = _2366.x - _1929;
                        float _2407 = _2366.y - _1930;
                        float _2408 = _2366.z - _1931;
                        float _2409 = dot(vec3(_2406, _2407, _2408), vec3(_2406, _2407, _2408));
                        float _2412 = inversesqrt(_2409);
                        float _2421 = 1.0 - (_2409 * _2366.w);
                        float _3534 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
                        float _2422 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
                        float _2423 = sqrt(_2409) * _2385.w;
                        float _2426 = 1.39999997615814208984375 / (_2423 + 1.39999997615814208984375);
                        float _2427 = _2426 * _2426;
                        float _2430 = ((1.0 - _2427) * dot(vec3(_340, _343, _346), vec3(_2412 * _2406, _2412 * _2407, _2412 * _2408))) + _2427;
                        float _2433 = _2423 * _2423;
                        float _2437 = ((isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0))) * _2422) / ((_2433 * 0.699999988079071044921875) + 1.0);
                        float _2441 = (-0.0) - _1929;
                        float _2442 = (-0.0) - _1930;
                        float _2443 = (-0.0) - _1931;
                        float _2447 = inversesqrt(dot(vec3(_2441, _2442, _2443), vec3(_2441, _2442, _2443)));
                        float _2451 = dot(vec3(_340, _343, _346), vec3(_2447 * _2441, _2447 * _2442, _2447 * _2443));
                        float _3550 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
                        float _3561 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
                        float _2455 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
                        float _2459 = (0.5 / (((isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0))) + 9.9999999392252902907785028219223e-09) + _2455)) * _2455;
                        float _3572 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
                        float _2468 = (((isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * 3.1415927410125732421875) / ((_2433 * 2.1991131305694580078125) + 3.141590118408203125)) * _2422;
                        _2275 = (_2437 * _2385.x) + _2343;
                        _2276 = (_2437 * _2385.y) + _2344;
                        _2277 = (_2437 * _2385.z) + _2345;
                        _2272 = (_2468 * _2402.x) + _2340;
                        _2273 = (_2468 * _2402.y) + _2341;
                        _2274 = (_2468 * _2402.z) + _2342;
                        if (_2347 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2340 = _2272;
                            _2341 = _2273;
                            _2342 = _2274;
                            _2343 = _2275;
                            _2344 = _2276;
                            _2345 = _2277;
                            _2346 = _2347;
                        }
                    }
                    frontier_phi_63_pred = _2277;
                    frontier_phi_63_pred_1 = _2276;
                    frontier_phi_63_pred_2 = _2275;
                    frontier_phi_63_pred_3 = _2274;
                    frontier_phi_63_pred_4 = _2273;
                    frontier_phi_63_pred_5 = _2272;
                }
                _2086 = frontier_phi_63_pred;
                _2084 = frontier_phi_63_pred_1;
                _2082 = frontier_phi_63_pred_2;
                _2080 = frontier_phi_63_pred_3;
                _2078 = frontier_phi_63_pred_4;
                _2076 = frontier_phi_63_pred_5;
                uint _2223 = _2222 + 1u;
                if (_2223 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2216 = _2076;
                    _2217 = _2078;
                    _2218 = _2080;
                    _2219 = _2082;
                    _2220 = _2084;
                    _2221 = _2086;
                    _2222 = _2223;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2075 = _2076;
            _2077 = _2078;
            _2079 = _2080;
            _2081 = _2082;
            _2083 = _2084;
            _2085 = _2086;
        }
        uvec4 _2089 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2090 = _2089.z;
        uint _2092 = (_2090 >> 8u) & 15u;
        float _2187;
        float _2189;
        float _2191;
        float _2193;
        float _2195;
        float _2197;
        if (((4294967295u << _2092) & _1975) == 0u)
        {
            _2187 = _2075;
            _2189 = _2077;
            _2191 = _2079;
            _2193 = _2081;
            _2195 = _2083;
            _2197 = _2085;
        }
        else
        {
            float _2212 = inversesqrt(dot(vec3(_1929, _1930, _1931), vec3(_1929, _1930, _1931)));
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2092 < ((_2090 >> 12u) & 15u))
            {
                float _2188;
                float _2190;
                float _2192;
                float _2194;
                float _2196;
                float _2198;
                float _2323 = _2075;
                float _2324 = _2077;
                float _2325 = _2079;
                float _2326 = _2081;
                float _2327 = _2083;
                float _2328 = _2085;
                uint _2329 = _2092;
                uint _2338;
                bool _2339;
                for (;;)
                {
                    _2338 = texelFetch(g_lightClassification, int((((_1969 << 5u) + (_1955 << 9u)) + (_2329 << 2u)) >> 2u)).x;
                    _2339 = _2338 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2339)
                    {
                        frontier_phi_69_pred = _2328;
                        frontier_phi_69_pred_1 = _2327;
                        frontier_phi_69_pred_2 = _2326;
                        frontier_phi_69_pred_3 = _2325;
                        frontier_phi_69_pred_4 = _2324;
                        frontier_phi_69_pred_5 = _2323;
                    }
                    else
                    {
                        float _2473;
                        float _2474;
                        float _2475;
                        float _2476;
                        float _2477;
                        float _2478;
                        float _2725;
                        float _2726;
                        float _2727;
                        float _2728;
                        float _2729;
                        float _2730;
                        float _2486 = _2323;
                        float _2487 = _2324;
                        float _2488 = _2325;
                        float _2489 = _2326;
                        float _2490 = _2327;
                        float _2491 = _2328;
                        uint _2492 = _2338;
                        uint _2493;
                        vec4 _2518;
                        float _2519;
                        vec4 _2534;
                        vec3 _2546;
                        vec4 _2562;
                        vec4 _2578;
                        float _2625;
                        bool _2626;
                        for (;;)
                        {
                            uint _2503 = ((_2329 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2492));
                            _2493 = (_2492 + 4294967295u) & _2492;
                            uint _2505 = _2503 * 40u;
                            _2518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2505 + 3u)).x));
                            _2519 = _2518.w;
                            uint _2521 = (_2503 * 40u) + 4u;
                            _2534 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2521)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2521 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2521 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2521 + 3u)).x));
                            uint _2536 = (_2503 * 40u) + 8u;
                            _2546 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2536 + 2u)).x));
                            uint _2549 = (_2503 * 40u) + 16u;
                            _2562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2549 + 3u)).x));
                            uint _2565 = (_2503 * 40u) + 20u;
                            _2578 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2565)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2565 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2565 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2565 + 3u)).x));
                            uint _2581 = (_2503 * 40u) + 24u;
                            vec4 _2594 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2581 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2581 + 3u)).x));
                            uint _2600 = (_2503 * 40u) + 28u;
                            vec4 _2613 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2600 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2600 + 3u)).x));
                            _2625 = fma(_1931, _2613.z, fma(_1930, _2613.y, _2613.x * _1929)) + _2613.w;
                            _2626 = !((fma(_1931, _2594.z, fma(_1930, _2594.y, _2594.x * _1929)) + _2594.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2626)
                            {
                                float _2653 = _2518.x - _1929;
                                float _2654 = _2518.y - _1930;
                                float _2655 = _2518.z - _1931;
                                float _2656 = dot(vec3(_2653, _2654, _2655), vec3(_2653, _2654, _2655));
                                float _2659 = inversesqrt(_2656);
                                float _2660 = _2659 * _2653;
                                float _2661 = _2659 * _2654;
                                float _2662 = _2659 * _2655;
                                float _2666 = 1.0 - (_2656 / (_2519 * _2519));
                                float _3583 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
                                float _2667 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
                                float _2671 = sqrt(_2656) * _2534.w;
                                float _2673 = 1.39999997615814208984375 / (_2671 + 1.39999997615814208984375);
                                float _2674 = _2673 * _2673;
                                float _2675 = 1.0 - _2674;
                                float _2677 = (_2675 * dot(vec3(_2660, _2661, _2662), vec3(_340, _343, _346))) + _2674;
                                float _2680 = _2671 * _2671;
                                float _2684 = (fma(_1931, _2562.z, fma(_1930, _2562.y, _2562.x * _1929)) + _2562.w) / _2625;
                                float _2685 = (fma(_1931, _2578.z, fma(_1930, _2578.y, _2578.x * _1929)) + _2578.w) / _2625;
                                float _2689 = 1.0 - dot(vec2(_2684, _2685), vec2(_2684, _2685));
                                float _3599 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
                                float _2690 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
                                float _2691 = _2690 * (((isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0))) * _2667) / ((_2680 * 0.699999988079071044921875) + 1.0));
                                float _2701 = dot(vec3(_340, _343, _346), vec3((-0.0) - (_1929 * _2212), (-0.0) - (_1930 * _2212), (-0.0) - (_1931 * _2212)));
                                float _3610 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
                                float _2709 = (_2675 * dot(vec3(_340, _343, _346), vec3(_2660, _2661, _2662))) + _2674;
                                float _3621 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
                                float _2710 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
                                float _2714 = (0.5 / (((isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) + 9.9999999392252902907785028219223e-09) + _2710)) * _2710;
                                float _3632 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
                                float _2721 = (_2690 * _2667) * (((isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * 3.1415927410125732421875) / ((_2680 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_75_pred = _2691 * _2534.z;
                                frontier_phi_75_pred_1 = _2691 * _2534.y;
                                frontier_phi_75_pred_2 = _2691 * _2534.x;
                                frontier_phi_75_pred_3 = _2721 * _2546.z;
                                frontier_phi_75_pred_4 = _2721 * _2546.y;
                                frontier_phi_75_pred_5 = _2721 * _2546.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2730 = frontier_phi_75_pred;
                            _2729 = frontier_phi_75_pred_1;
                            _2728 = frontier_phi_75_pred_2;
                            _2727 = frontier_phi_75_pred_3;
                            _2726 = frontier_phi_75_pred_4;
                            _2725 = frontier_phi_75_pred_5;
                            _2476 = _2728 + _2489;
                            _2477 = _2729 + _2490;
                            _2478 = _2730 + _2491;
                            _2473 = _2725 + _2486;
                            _2474 = _2726 + _2487;
                            _2475 = _2727 + _2488;
                            if (_2493 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2486 = _2473;
                                _2487 = _2474;
                                _2488 = _2475;
                                _2489 = _2476;
                                _2490 = _2477;
                                _2491 = _2478;
                                _2492 = _2493;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2478;
                        frontier_phi_69_pred_1 = _2477;
                        frontier_phi_69_pred_2 = _2476;
                        frontier_phi_69_pred_3 = _2475;
                        frontier_phi_69_pred_4 = _2474;
                        frontier_phi_69_pred_5 = _2473;
                    }
                    _2198 = frontier_phi_69_pred;
                    _2196 = frontier_phi_69_pred_1;
                    _2194 = frontier_phi_69_pred_2;
                    _2192 = frontier_phi_69_pred_3;
                    _2190 = frontier_phi_69_pred_4;
                    _2188 = frontier_phi_69_pred_5;
                    uint _2330 = _2329 + 1u;
                    if (_2330 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2323 = _2188;
                        _2324 = _2190;
                        _2325 = _2192;
                        _2326 = _2194;
                        _2327 = _2196;
                        _2328 = _2198;
                        _2329 = _2330;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2198;
                frontier_phi_57_58_ladder_1 = _2196;
                frontier_phi_57_58_ladder_2 = _2194;
                frontier_phi_57_58_ladder_3 = _2192;
                frontier_phi_57_58_ladder_4 = _2190;
                frontier_phi_57_58_ladder_5 = _2188;
            }
            else
            {
                frontier_phi_57_58_ladder = _2085;
                frontier_phi_57_58_ladder_1 = _2083;
                frontier_phi_57_58_ladder_2 = _2081;
                frontier_phi_57_58_ladder_3 = _2079;
                frontier_phi_57_58_ladder_4 = _2077;
                frontier_phi_57_58_ladder_5 = _2075;
            }
            _2187 = frontier_phi_57_58_ladder_5;
            _2189 = frontier_phi_57_58_ladder_4;
            _2191 = frontier_phi_57_58_ladder_3;
            _2193 = frontier_phi_57_58_ladder_2;
            _2195 = frontier_phi_57_58_ladder_1;
            _2197 = frontier_phi_57_58_ladder;
        }
        float _2202 = isnan(1.0) ? _385 : (isnan(_385) ? 1.0 : min(_385, 1.0));
        _1987 = (_2202 * _2193) + _1548;
        _1989 = (_2202 * _2195) + _1550;
        _1991 = (_2202 * _2197) + _1552;
        _1993 = ((_2187 * 0.039999999105930328369140625) * _2202) + _1800;
        _1995 = ((_2189 * 0.039999999105930328369140625) * _2202) + _1802;
        _1997 = ((_2191 * 0.039999999105930328369140625) * _2202) + _1804;
    }
    else
    {
        _1987 = _1548;
        _1989 = _1550;
        _1991 = _1552;
        _1993 = _1800;
        _1995 = _1802;
        _1997 = _1804;
    }
    float _3648 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _3659 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _3670 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    uint _2017 = _359 + 6u;
    float _2025 = _318 / cbSceneParam._m0[86u].x;
    float _2026 = _319 / cbSceneParam._m0[86u].y;
    vec4 _2040 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2025, _2026, (log2((isnan(cbSceneParam._m0[77u].w) ? _253 : (isnan(_253) ? cbSceneParam._m0[77u].w : min(_253, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2042 = _2040.x;
    float _2043 = _2040.y;
    float _2044 = _2040.z;
    float _2045 = _2040.w;
    float _2137;
    float _2139;
    float _2141;
    float _2143;
    if (_253 > cbSceneParam._m0[78u].w)
    {
        float _2100 = isnan(_253) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _253 : min(cbSceneParam._m0[80u].w, _253));
        float _2101 = _2100 / _253;
        float _2112 = _2101 * _304;
        float _2113 = _305 * _2101;
        float _2114 = (-0.0) - _2113;
        float _2115 = _2101 * _306;
        float _2117 = (cbSceneParam._m0[77u].w * _2114) / _2100;
        float _2118 = _2117 + cbSceneParam._m0[79u].w;
        float _2119 = cbSceneParam._m0[79u].w - _2113;
        float _2125 = sqrt(((_2112 * _2112) + (_2113 * _2113)) + (_2115 * _2115));
        float _2128 = (1.0 - (cbSceneParam._m0[77u].w / _2100)) * _2125;
        float _2133 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2135 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2285;
        if (abs((_2114 - _2117) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2285 = ((((_2118 > 0.0) ? exp2(_2133 * _2118) : (2.0 - exp2(_2135 * _2118))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2128;
        }
        else
        {
            float _2245 = 1.0 / cbSceneParam._m0[80u].x;
            float _2246 = isnan(_2119) ? _2118 : (isnan(_2118) ? _2119 : max(_2118, _2119));
            float _2247 = isnan(_2119) ? _2118 : (isnan(_2118) ? _2119 : min(_2118, _2119));
            float _2256 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : min(_2246, 0.0));
            float _2257 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : min(_2247, 0.0));
            _2285 = ((abs(_2125 / _2114) * cbSceneParam._m0[80u].y) * ((((_2256 - _2257) * 2.0) - ((exp2(_2133 * (isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0)))) - exp2(_2133 * (isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0))))) * _2245)) - ((exp2(_2135 * _2256) - exp2(_2135 * _2257)) * _2245))) + (_2128 * cbSceneParam._m0[80u].z);
        }
        vec4 _2287 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2025, _2026, 1.0), 0.0);
        float _2296 = exp2((_2285 * (-1.44269502162933349609375)) * (1.0 - _2287.w));
        float _2297 = log2(_2296);
        float _2313 = log2(_2045);
        _2137 = (exp2(_2313 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2297 * cbSceneParam._m0[78u].x)) * _2287.x) / cbSceneParam._m0[78u].x)) + _2042;
        _2139 = (exp2(_2313 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2297 * cbSceneParam._m0[78u].y)) * _2287.y) / cbSceneParam._m0[78u].y)) + _2043;
        _2141 = (exp2(_2313 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2297 * cbSceneParam._m0[78u].z)) * _2287.z) / cbSceneParam._m0[78u].z)) + _2044;
        _2143 = _2296 * _2045;
    }
    else
    {
        _2137 = _2042;
        _2139 = _2043;
        _2141 = _2044;
        _2143 = _2045;
    }
    float _2155 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2156 = _2155 == 3.0;
    float _2157 = log2(_2143);
    float _2164 = exp2(_2157 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) * (_1987 + ((isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0))) * _385))) + ((_1993 + ((isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0))) * _1163)) * cbPerFrame._m0[3u].x));
    float _2165 = exp2(_2157 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * (_1989 + ((isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0))) * _385))) + ((_1995 + ((isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))) * _1163)) * cbPerFrame._m0[3u].x));
    float _2166 = exp2(_2157 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * (_1991 + ((isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0))) * _385))) + ((_1997 + ((isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))) * _1163)) * cbPerFrame._m0[3u].x));
    float _2175 = (_2155 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2175 * (_2156 ? _2164 : (_2164 + (cbSceneParam._m0[72u].w * _2137)));
    SV_Target.y = _2175 * (_2156 ? _2165 : (_2165 + (cbSceneParam._m0[72u].w * _2139)));
    SV_Target.z = _2175 * (_2156 ? _2166 : (_2166 + (cbSceneParam._m0[72u].w * _2141)));
    SV_Target.w = cbInstanceData._m0[_2017].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2017].w;
}


