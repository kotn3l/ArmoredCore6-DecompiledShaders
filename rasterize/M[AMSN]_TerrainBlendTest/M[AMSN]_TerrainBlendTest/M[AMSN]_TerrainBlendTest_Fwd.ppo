#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _726;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _152 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _153 = _152 * NORMAL.x;
    float _154 = _152 * NORMAL.y;
    float _155 = _152 * NORMAL.z;
    float _160;
    float _161;
    float _162;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _160 = (-0.0) - _153;
        _161 = (-0.0) - _154;
        _162 = (-0.0) - _155;
    }
    else
    {
        _160 = _153;
        _161 = _154;
        _162 = _155;
    }
    vec4 _185 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _188 = _185.x;
    bool _195 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _215 = ((_195 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _188)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _188))) - POSITION_1.w) / cbMtdParam._m0[11u].x;
    float _2835 = isnan(0.0) ? _215 : (isnan(_215) ? 0.0 : max(_215, 0.0));
    float _218 = 1.0 - (isnan(1.0) ? _2835 : (isnan(_2835) ? 1.0 : min(_2835, 1.0)));
    float _2846 = isnan(0.0) ? _218 : (isnan(_218) ? 0.0 : max(_218, 0.0));
    float _219 = isnan(1.0) ? _2846 : (isnan(_2846) ? 1.0 : min(_2846, 1.0));
    float _222 = 3.0 - (_219 * 2.0);
    float _227 = _219 * _219;
    float _234 = ((_227 * (cbMtdParam._m0[9u].x - cbMtdParam._m0[10u].x)) * _222) + cbMtdParam._m0[10u].x;
    float _235 = ((_227 * (cbMtdParam._m0[9u].y - cbMtdParam._m0[10u].y)) * _222) + cbMtdParam._m0[10u].y;
    float _236 = ((_227 * (cbMtdParam._m0[9u].z - cbMtdParam._m0[10u].z)) * _222) + cbMtdParam._m0[10u].z;
    float _240 = inversesqrt(dot(vec3(_160, _161, _162), vec3(_160, _161, _162)));
    float _241 = _240 * _160;
    float _242 = _240 * _161;
    float _243 = _240 * _162;
    float _2857 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _2868 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _2879 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _251 = _195 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _292 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _302 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _292);
    float _303 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _292);
    float _304 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _292);
    float _308 = inversesqrt(dot(vec3(_302, _303, _304), vec3(_302, _303, _304)));
    float _309 = _302 * _308;
    float _310 = _303 * _308;
    float _311 = _304 * _308;
    float _316 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _317 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _338 = fma(_243, cbSceneParam._m0[5u].z, fma(_242, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _241));
    float _341 = fma(_243, cbSceneParam._m0[6u].z, fma(_242, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _241));
    float _344 = fma(_243, cbSceneParam._m0[7u].z, fma(_242, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _241));
    uint _357 = uint(roundEven(NORMAL.w)) * 13u;
    uint _360 = (_357 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _366 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2857 : (isnan(_2857) ? 1.0 : min(_2857, 1.0)))) * cbInstanceData._m0[_360].x;
    float _367 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2868 : (isnan(_2868) ? 1.0 : min(_2868, 1.0)))) * cbInstanceData._m0[_360].y;
    float _368 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2879 : (isnan(_2879) ? 1.0 : min(_2879, 1.0)))) * cbInstanceData._m0[_360].z;
    float _2890 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _369 = isnan(1.0) ? _2890 : (isnan(_2890) ? 1.0 : min(_2890, 1.0));
    float _2901 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _370 = isnan(1.0) ? _2901 : (isnan(_2901) ? 1.0 : min(_2901, 1.0));
    float _2912 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _371 = isnan(1.0) ? _2912 : (isnan(_2912) ? 1.0 : min(_2912, 1.0));
    vec4 _380 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _316, cbSceneParam._m0[86u].y * _317));
    float _383 = _380.x * TEXCOORD.z;
    float _384 = dot(vec3(_241, _242, _243), vec3(_309, _310, _311));
    float _387 = _384 * 2.0;
    float _391 = (_387 * _241) - _309;
    float _392 = (_387 * _242) - _310;
    float _393 = (_387 * _243) - _311;
    float _415 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _419 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _423 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _725;
    float _727;
    float _728;
    float _729;
    float _730;
    float _731;
    float _732;
    float _733;
    float _734;
    float _735;
    float _736;
    float _737;
    float _738;
    float _739;
    float _740;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _450 = fma(_423, cbModelParam._m0[26u].z, fma(_419, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _415));
        float _454 = fma(_423, cbModelParam._m0[27u].z, fma(_419, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _415));
        float _458 = fma(_423, cbModelParam._m0[28u].z, fma(_419, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _415));
        float _483 = _415 + _241;
        float _484 = _419 + _242;
        float _485 = _423 + _243;
        float _495 = fma(_485, cbModelParam._m0[26u].z, fma(_484, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _483)) - _450;
        float _496 = fma(_485, cbModelParam._m0[27u].z, fma(_484, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _483)) - _454;
        float _497 = fma(_485, cbModelParam._m0[28u].z, fma(_484, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _483)) - _458;
        float _501 = inversesqrt(dot(vec3(_495, _496, _497), vec3(_495, _496, _497)));
        float _514 = ((_501 * _495) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_450 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _515 = ((_501 * _496) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_454 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _516 = ((_501 * _497) / cbModelParam._m0[34u].z) + ((((((_458 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _519 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_514, _515, _516), 0.0);
        vec4 _526 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_514, _515, _516), 0.0);
        vec4 _533 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_514, _515, _516), 0.0);
        vec4 _540 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_514, _515, _516), 0.0);
        float _553 = exp2((_519.w + (-0.5)) * 20.0) * 2.0;
        float _554 = _553 * (_519.x + (-0.5));
        float _555 = _553 * (_519.y + (-0.5));
        float _556 = _553 * (_519.z + (-0.5));
        float _563 = exp2((_526.w + (-0.5)) * 20.0) * 2.0;
        float _564 = _563 * (_526.x + (-0.5));
        float _565 = _563 * (_526.y + (-0.5));
        float _566 = _563 * (_526.z + (-0.5));
        float _573 = exp2((_533.w + (-0.5)) * 20.0) * 2.0;
        float _574 = _573 * (_533.x + (-0.5));
        float _575 = _573 * (_533.y + (-0.5));
        float _576 = _573 * (_533.z + (-0.5));
        float _583 = exp2((_540.w + (-0.5)) * 20.0) * 2.0;
        float _584 = _583 * (_540.x + (-0.5));
        float _585 = _583 * (_540.y + (-0.5));
        float _586 = _583 * (_540.z + (-0.5));
        float _587 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
        float _588 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
        float _589 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
        float _590 = _554 * 0.5;
        float _591 = _564 * 0.5;
        float _592 = _574 * 0.5;
        float _593 = dot(vec3(_590, _591, _592), vec3(_590, _591, _592));
        float _598 = (_593 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_593);
        float _607 = (dot(vec3(_241, _242, _243), vec3(_598 * _590, _598 * _591, _598 * _592)) + 1.0) * 0.5;
        float _2938 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
        float _617 = sqrt(((_591 * _591) + (_590 * _590)) + (_592 * _592)) / (_587 + 9.9999997473787516355514526367188e-06);
        float _2949 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
        float _618 = isnan(1.0) ? _2949 : (isnan(_2949) ? 1.0 : min(_2949, 1.0));
        float _619 = _618 * 2.0;
        float _623 = (1.0 - _618) / (_618 + 1.0);
        float _2960 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
        float _624 = isnan(1.0) ? _2960 : (isnan(_2960) ? 1.0 : min(_2960, 1.0));
        float _633 = ((((1.0 - _624) * (_619 + 2.0)) * exp2(log2(isnan(1.0) ? _2938 : (isnan(_2938) ? 1.0 : min(_2938, 1.0))) * (_619 + 1.0))) + _624) * _587;
        float _634 = _555 * 0.5;
        float _635 = _565 * 0.5;
        float _636 = _575 * 0.5;
        float _637 = dot(vec3(_634, _635, _636), vec3(_634, _635, _636));
        float _642 = (_637 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_637);
        float _650 = (dot(vec3(_241, _242, _243), vec3(_642 * _634, _642 * _635, _642 * _636)) + 1.0) * 0.5;
        float _2971 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
        float _659 = sqrt(((_635 * _635) + (_634 * _634)) + (_636 * _636)) / (_588 + 9.9999997473787516355514526367188e-06);
        float _2982 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        float _660 = isnan(1.0) ? _2982 : (isnan(_2982) ? 1.0 : min(_2982, 1.0));
        float _661 = _660 * 2.0;
        float _665 = (1.0 - _660) / (_660 + 1.0);
        float _2993 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
        float _666 = isnan(1.0) ? _2993 : (isnan(_2993) ? 1.0 : min(_2993, 1.0));
        float _675 = ((((1.0 - _666) * (_661 + 2.0)) * exp2(log2(isnan(1.0) ? _2971 : (isnan(_2971) ? 1.0 : min(_2971, 1.0))) * (_661 + 1.0))) + _666) * _588;
        float _676 = _556 * 0.5;
        float _677 = _566 * 0.5;
        float _678 = _576 * 0.5;
        float _679 = dot(vec3(_676, _677, _678), vec3(_676, _677, _678));
        float _684 = (_679 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_679);
        float _692 = (dot(vec3(_241, _242, _243), vec3(_684 * _676, _684 * _677, _684 * _678)) + 1.0) * 0.5;
        float _3004 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _701 = sqrt(((_677 * _677) + (_676 * _676)) + (_678 * _678)) / (_589 + 9.9999997473787516355514526367188e-06);
        float _3015 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _702 = isnan(1.0) ? _3015 : (isnan(_3015) ? 1.0 : min(_3015, 1.0));
        float _703 = _702 * 2.0;
        float _707 = (1.0 - _702) / (_702 + 1.0);
        float _3026 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _708 = isnan(1.0) ? _3026 : (isnan(_3026) ? 1.0 : min(_3026, 1.0));
        float _717 = ((((1.0 - _708) * (_703 + 2.0)) * exp2(log2(isnan(1.0) ? _3004 : (isnan(_3004) ? 1.0 : min(_3004, 1.0))) * (_703 + 1.0))) + _708) * _589;
        _725 = _556;
        _727 = _555;
        _728 = _554;
        _729 = _566;
        _730 = _565;
        _731 = _564;
        _732 = _576;
        _733 = _575;
        _734 = _574;
        _735 = _589;
        _736 = _588;
        _737 = _587;
        _738 = cbModelParam._m0[36u].z * (isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0)));
        _739 = cbModelParam._m0[36u].z * (isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0)));
        _740 = cbModelParam._m0[36u].z * (isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0)));
    }
    else
    {
        _725 = _726;
        _727 = _726;
        _728 = _726;
        _729 = _726;
        _730 = _726;
        _731 = _726;
        _732 = _726;
        _733 = _726;
        _734 = _726;
        _735 = _726;
        _736 = _726;
        _737 = _726;
        _738 = 0.0;
        _739 = 0.0;
        _740 = 0.0;
    }
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _766 = fma(_423, cbModelParam._m0[30u].z, fma(_419, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _415));
        float _770 = fma(_423, cbModelParam._m0[31u].z, fma(_419, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _415));
        float _774 = fma(_423, cbModelParam._m0[32u].z, fma(_419, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _415));
        float _797 = _415 + _241;
        float _798 = _419 + _242;
        float _799 = _423 + _243;
        float _809 = fma(_799, cbModelParam._m0[30u].z, fma(_798, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _797)) - _766;
        float _810 = fma(_799, cbModelParam._m0[31u].z, fma(_798, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _797)) - _770;
        float _811 = fma(_799, cbModelParam._m0[32u].z, fma(_798, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _797)) - _774;
        float _815 = inversesqrt(dot(vec3(_809, _810, _811), vec3(_809, _810, _811)));
        float _828 = ((_815 * _809) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_766 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _829 = ((_815 * _810) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_770 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _830 = ((_815 * _811) / cbModelParam._m0[35u].z) + ((((((_774 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _832 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        vec4 _839 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        vec4 _846 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        float _865 = exp2((_832.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_832.x + (-0.5));
        float _867 = _865 * (_832.y + (-0.5));
        float _868 = _865 * (_832.z + (-0.5));
        float _875 = exp2((_839.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_839.x + (-0.5));
        float _877 = _875 * (_839.y + (-0.5));
        float _878 = _875 * (_839.z + (-0.5));
        float _885 = exp2((_846.w + (-0.5)) * 20.0) * 2.0;
        float _886 = _885 * (_846.x + (-0.5));
        float _887 = _885 * (_846.y + (-0.5));
        float _888 = _885 * (_846.z + (-0.5));
        float _895 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _896 = _895 * (_853.x + (-0.5));
        float _897 = _895 * (_853.y + (-0.5));
        float _898 = _895 * (_853.z + (-0.5));
        float _899 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _900 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _901 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _902 = _866 * 0.5;
        float _903 = _876 * 0.5;
        float _904 = _886 * 0.5;
        float _905 = dot(vec3(_902, _903, _904), vec3(_902, _903, _904));
        float _910 = (_905 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_905);
        float _918 = (dot(vec3(_241, _242, _243), vec3(_910 * _902, _910 * _903, _910 * _904)) + 1.0) * 0.5;
        float _3067 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _927 = sqrt(((_903 * _903) + (_902 * _902)) + (_904 * _904)) / (_899 + 9.9999997473787516355514526367188e-06);
        float _3078 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3078 : (isnan(_3078) ? 1.0 : min(_3078, 1.0));
        float _929 = _928 * 2.0;
        float _933 = (1.0 - _928) / (_928 + 1.0);
        float _3089 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3089 : (isnan(_3089) ? 1.0 : min(_3089, 1.0));
        float _943 = ((((1.0 - _934) * (_929 + 2.0)) * exp2(log2(isnan(1.0) ? _3067 : (isnan(_3067) ? 1.0 : min(_3067, 1.0))) * (_929 + 1.0))) + _934) * _899;
        float _944 = _867 * 0.5;
        float _945 = _877 * 0.5;
        float _946 = _887 * 0.5;
        float _947 = dot(vec3(_944, _945, _946), vec3(_944, _945, _946));
        float _952 = (_947 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_947);
        float _960 = (dot(vec3(_241, _242, _243), vec3(_952 * _944, _952 * _945, _952 * _946)) + 1.0) * 0.5;
        float _3100 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _969 = sqrt(((_945 * _945) + (_944 * _944)) + (_946 * _946)) / (_900 + 9.9999997473787516355514526367188e-06);
        float _3111 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3111 : (isnan(_3111) ? 1.0 : min(_3111, 1.0));
        float _971 = _970 * 2.0;
        float _975 = (1.0 - _970) / (_970 + 1.0);
        float _3122 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3122 : (isnan(_3122) ? 1.0 : min(_3122, 1.0));
        float _985 = ((((1.0 - _976) * (_971 + 2.0)) * exp2(log2(isnan(1.0) ? _3100 : (isnan(_3100) ? 1.0 : min(_3100, 1.0))) * (_971 + 1.0))) + _976) * _900;
        float _986 = _868 * 0.5;
        float _987 = _878 * 0.5;
        float _988 = _888 * 0.5;
        float _989 = dot(vec3(_986, _987, _988), vec3(_986, _987, _988));
        float _994 = (_989 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_989);
        float _1002 = (dot(vec3(_241, _242, _243), vec3(_994 * _986, _994 * _987, _994 * _988)) + 1.0) * 0.5;
        float _3133 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1011 = sqrt(((_987 * _987) + (_986 * _986)) + (_988 * _988)) / (_901 + 9.9999997473787516355514526367188e-06);
        float _3144 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3144 : (isnan(_3144) ? 1.0 : min(_3144, 1.0));
        float _1013 = _1012 * 2.0;
        float _1017 = (1.0 - _1012) / (_1012 + 1.0);
        float _3155 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3155 : (isnan(_3155) ? 1.0 : min(_3155, 1.0));
        float _1027 = ((((1.0 - _1018) * (_1013 + 2.0)) * exp2(log2(isnan(1.0) ? _3133 : (isnan(_3133) ? 1.0 : min(_3133, 1.0))) * (_1013 + 1.0))) + _1018) * _901;
        _1035 = _868;
        _1036 = _867;
        _1037 = _866;
        _1038 = _878;
        _1039 = _877;
        _1040 = _876;
        _1041 = _888;
        _1042 = _887;
        _1043 = _886;
        _1044 = _901;
        _1045 = _900;
        _1046 = _899;
        _1047 = cbModelParam._m0[36u].w * (isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0)));
        _1048 = cbModelParam._m0[36u].w * (isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0)));
        _1049 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0)));
    }
    else
    {
        _1035 = _726;
        _1036 = _726;
        _1037 = _726;
        _1038 = _726;
        _1039 = _726;
        _1040 = _726;
        _1041 = _726;
        _1042 = _726;
        _1043 = _726;
        _1044 = _726;
        _1045 = _726;
        _1046 = _726;
        _1047 = 0.0;
        _1048 = 0.0;
        _1049 = 0.0;
    }
    float _1059 = (cbModelParam._m0[1u].x * (_1047 - _738)) + _738;
    float _1060 = (cbModelParam._m0[1u].x * (_1048 - _739)) + _739;
    float _1061 = (cbModelParam._m0[1u].x * (_1049 - _740)) + _740;
    float _1082 = fma(_1061, cbSceneParam._m0[89u].z, fma(_1060, cbSceneParam._m0[89u].y, _1059 * cbSceneParam._m0[89u].x));
    float _1085 = fma(_1061, cbSceneParam._m0[90u].z, fma(_1060, cbSceneParam._m0[90u].y, _1059 * cbSceneParam._m0[90u].x));
    float _1088 = fma(_1061, cbSceneParam._m0[91u].z, fma(_1060, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1059));
    float _1103 = _391 * 0.5;
    float _1104 = _392 * 0.5;
    float _1105 = _393 * 0.5;
    float _1106 = dot(vec4(_1103, _1104, _1105, 1.0), vec4(_1037, _1040, _1043, _1046));
    float _1109 = dot(vec4(_1103, _1104, _1105, 1.0), vec4(_1036, _1039, _1042, _1045));
    float _1112 = dot(vec4(_1103, _1104, _1105, 1.0), vec4(_1035, _1038, _1041, _1044));
    float _1146;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1119 = dot(vec4(_1103, _1104, _1105, 1.0), vec4(_725, _729, _732, _735));
        float _1123 = dot(vec4(_1103, _1104, _1105, 1.0), vec4(_727, _730, _733, _736));
        float _1127 = dot(vec4(_1103, _1104, _1105, 1.0), vec4(_728, _731, _734, _737));
        float _1134 = dot(vec4(cbModelParam._m0[39u]), vec4(_1103, _1104, _1105, 1.0));
        _1146 = dot(vec3(isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)), isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)), isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1134) ? 0.0 : (isnan(0.0) ? _1134 : max(0.0, _1134))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1146 = 1.0;
    }
    float _1157;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1148 = dot(vec4(cbModelParam._m0[40u]), vec4(_1103, _1104, _1105, 1.0));
        _1157 = dot(vec3(isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)), isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)), isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1148) ? 0.0 : (isnan(0.0) ? _1148 : max(0.0, _1148))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1157 = 1.0;
    }
    float _1161 = (_1157 * cbModelParam._m0[1u].x) + (_1146 * (1.0 - cbModelParam._m0[1u].x));
    float _1171 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1253;
    float _1255;
    float _1257;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1220 = fma(_423, cbModelParam._m0[13u].z, fma(_419, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _415)) + cbModelParam._m0[13u].w;
        float _1224 = fma(_423, cbModelParam._m0[14u].z, fma(_419, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _415)) + cbModelParam._m0[14u].w;
        float _1228 = fma(_423, cbModelParam._m0[15u].z, fma(_419, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _415)) + cbModelParam._m0[15u].w;
        float _1231 = fma(_393, cbModelParam._m0[13u].z, fma(_392, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _391));
        float _1234 = fma(_393, cbModelParam._m0[14u].z, fma(_392, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _391));
        float _1237 = fma(_393, cbModelParam._m0[15u].z, fma(_392, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _391));
        float _1263;
        if (_1231 > 0.0)
        {
            _1263 = abs((1.0 - _1220) / _1231);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1231 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1220 + 1.0) / _1231);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1263 = frontier_phi_16_14_ladder;
        }
        float _1470;
        if (_1234 > 0.0)
        {
            _1470 = abs((1.0 - _1224) / _1234);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1234 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1224 + 1.0) / _1234);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1470 = frontier_phi_25_21_ladder;
        }
        float _1659;
        if (_1237 > 0.0)
        {
            _1659 = abs((1.0 - _1228) / _1237);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1237 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1228 + 1.0) / _1237);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1659 = frontier_phi_37_32_ladder;
        }
        float _1661 = isnan(_1470) ? _1263 : (isnan(_1263) ? _1470 : min(_1263, _1470));
        float _1662 = isnan(_1659) ? _1661 : (isnan(_1661) ? _1659 : min(_1661, _1659));
        float _1666 = (_1662 * _1231) + _1220;
        float _1667 = (_1662 * _1234) + _1224;
        float _1668 = (_1662 * _1237) + _1228;
        float _1669 = _1662 * 9.9999997473787516355514526367188e-05;
        float _1671 = (-1.0) - _1669;
        float _1673 = _1669 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1668 > _1673) || ((_1668 < _1671) || ((_1667 > _1673) || ((_1667 < _1671) || ((_1666 < _1671) || (_1666 > _1673))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1765 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1668, cbModelParam._m0[9u].z, fma(_1667, cbModelParam._m0[9u].y, _1666 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1668, cbModelParam._m0[10u].z, fma(_1667, cbModelParam._m0[10u].y, _1666 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1668, cbModelParam._m0[11u].z, fma(_1667, cbModelParam._m0[11u].y, _1666 * cbModelParam._m0[11u].x))), _1171);
            frontier_phi_15_37_ladder = _1765.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1765.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1765.x * cbModelParam._m0[1u].y;
        }
        _1253 = frontier_phi_15_37_ladder_2;
        _1255 = frontier_phi_15_37_ladder_1;
        _1257 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1241 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_391, _392, _393), _1171);
        _1253 = _1241.x * cbModelParam._m0[1u].y;
        _1255 = _1241.y * cbModelParam._m0[1u].y;
        _1257 = _1241.z * cbModelParam._m0[1u].y;
    }
    float _1260 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1353;
    float _1355;
    float _1357;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1317 = fma(_423, cbModelParam._m0[21u].z, fma(_419, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _415)) + cbModelParam._m0[21u].w;
        float _1321 = fma(_423, cbModelParam._m0[22u].z, fma(_419, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _415)) + cbModelParam._m0[22u].w;
        float _1325 = fma(_423, cbModelParam._m0[23u].z, fma(_419, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _415)) + cbModelParam._m0[23u].w;
        float _1328 = fma(_393, cbModelParam._m0[21u].z, fma(_392, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _391));
        float _1331 = fma(_393, cbModelParam._m0[22u].z, fma(_392, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _391));
        float _1334 = fma(_393, cbModelParam._m0[23u].z, fma(_392, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _391));
        float _1475;
        if (_1328 > 0.0)
        {
            _1475 = abs((1.0 - _1317) / _1328);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1328 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1317 + 1.0) / _1328);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1475 = frontier_phi_27_23_ladder;
        }
        float _1686;
        if (_1331 > 0.0)
        {
            _1686 = abs((1.0 - _1321) / _1331);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1331 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1321 + 1.0) / _1331);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1686 = frontier_phi_39_34_ladder;
        }
        float _1837;
        if (_1334 > 0.0)
        {
            _1837 = abs((1.0 - _1325) / _1334);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1334 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1325 + 1.0) / _1334);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _1837 = frontier_phi_48_45_ladder;
        }
        float _1839 = isnan(_1686) ? _1475 : (isnan(_1475) ? _1686 : min(_1475, _1686));
        float _1840 = isnan(_1837) ? _1839 : (isnan(_1839) ? _1837 : min(_1839, _1837));
        float _1844 = (_1840 * _1328) + _1317;
        float _1845 = (_1840 * _1331) + _1321;
        float _1846 = (_1840 * _1334) + _1325;
        float _1847 = _1840 * 9.9999997473787516355514526367188e-05;
        float _1848 = (-1.0) - _1847;
        float _1850 = _1847 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1846 > _1850) || ((_1846 < _1848) || ((_1845 > _1850) || ((_1845 < _1848) || ((_1844 < _1848) || (_1844 > _1850))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2044 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1846, cbModelParam._m0[17u].z, fma(_1845, cbModelParam._m0[17u].y, _1844 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1846, cbModelParam._m0[18u].z, fma(_1845, cbModelParam._m0[18u].y, _1844 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1846, cbModelParam._m0[19u].z, fma(_1845, cbModelParam._m0[19u].y, _1844 * cbModelParam._m0[19u].x))), _1260);
            frontier_phi_24_48_ladder = _2044.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2044.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2044.x * cbModelParam._m0[1u].z;
        }
        _1353 = frontier_phi_24_48_ladder_2;
        _1355 = frontier_phi_24_48_ladder_1;
        _1357 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1337 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_391, _392, _393), _1260);
        _1353 = _1337.x * cbModelParam._m0[1u].z;
        _1355 = _1337.y * cbModelParam._m0[1u].z;
        _1357 = _1337.z * cbModelParam._m0[1u].z;
    }
    float _1369 = _383 * 0.01200000010430812835693359375;
    float _1371 = _1369 * ((cbModelParam._m0[1u].w * (_1353 - _1253)) + _1253);
    float _1372 = _1369 * ((cbModelParam._m0[1u].w * (_1355 - _1255)) + _1255);
    float _1373 = _1369 * ((cbModelParam._m0[1u].w * (_1357 - _1257)) + _1257);
    float _1376 = fma(_1373, cbSceneParam._m0[89u].z, fma(_1372, cbSceneParam._m0[89u].y, _1371 * cbSceneParam._m0[89u].x));
    float _1379 = fma(_1373, cbSceneParam._m0[90u].z, fma(_1372, cbSceneParam._m0[90u].y, _1371 * cbSceneParam._m0[90u].x));
    float _1382 = fma(_1373, cbSceneParam._m0[91u].z, fma(_1372, cbSceneParam._m0[91u].y, _1371 * cbSceneParam._m0[91u].x));
    uvec4 _1392 = floatBitsToUint(cbInstanceData._m0[_357 + 5u]);
    uint _1394 = _1392.x * 14u;
    uint _1395 = _1394 + 13u;
    float _1402 = _383 + (-1.0);
    float _1408 = (cbLight._m0[_1395].x * _1402) + 1.0;
    float _1409 = (cbLight._m0[_1395].y * _1402) + 1.0;
    float _1410 = (cbLight._m0[_1395].z * _1402) + 1.0;
    float _1411 = (cbLight._m0[_1395].w * _1402) + 1.0;
    uint _1412 = _1394 + 5u;
    float _1418 = isnan(1.0) ? _1409 : (isnan(_1409) ? 1.0 : min(_1409, 1.0));
    uint _1422 = _1394 + 4u;
    float _1429 = isnan(1.0) ? _1408 : (isnan(_1408) ? 1.0 : min(_1408, 1.0));
    uint _1433 = _1394 | 1u;
    float _1444 = dot(vec3(cbLight._m0[_1394].xyz), vec3(_241, _242, _243));
    float _1447 = dot(vec3(cbLight._m0[_1433].xyz), vec3(_241, _242, _243));
    float _3291 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
    float _3302 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
    float _1452 = (isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0))) * 0.3183098733425140380859375;
    float _1454 = (isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0))) * 0.3183098733425140380859375;
    float _1461 = ((cbLight._m0[_1412].x * _1418) * _1454) + ((cbLight._m0[_1422].x * _1429) * _1452);
    float _1462 = ((_1418 * cbLight._m0[_1412].y) * _1454) + ((_1429 * cbLight._m0[_1422].y) * _1452);
    float _1463 = ((_1418 * cbLight._m0[_1412].z) * _1454) + ((_1429 * cbLight._m0[_1422].z) * _1452);
    uvec4 _1467 = floatBitsToUint(cbLight._m0[_1394 + 12u]);
    bool _1469 = _1467.x == 0u;
    float _1480;
    float _1482;
    float _1484;
    if (_1469)
    {
        _1480 = _1461;
        _1482 = _1462;
        _1484 = _1463;
    }
    else
    {
        uint _1488 = _1394 + 6u;
        float _1504 = (dot(vec3(cbLight._m0[_1394 + 2u].xyz), vec3(_241, _242, _243)) * 0.5) + 0.5;
        float _1505 = _1504 * _1504;
        float _3313 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
        float _1507 = isnan(1.0) ? _1410 : (isnan(_1410) ? 1.0 : min(_1410, 1.0));
        _1480 = (((cbLight._m0[_1488].x * 0.3183098733425140380859375) * _1506) * _1507) + _1461;
        _1482 = (((cbLight._m0[_1488].y * 0.3183098733425140380859375) * _1506) * _1507) + _1462;
        _1484 = (((cbLight._m0[_1488].z * 0.3183098733425140380859375) * _1506) * _1507) + _1463;
    }
    bool _1487 = _1467.y == 0u;
    float _1525;
    float _1527;
    float _1529;
    if (_1487)
    {
        _1525 = _1480;
        _1527 = _1482;
        _1529 = _1484;
    }
    else
    {
        uint _1630 = _1394 + 7u;
        float _1646 = (dot(vec3(cbLight._m0[_1394 + 3u].xyz), vec3(_241, _242, _243)) * 0.5) + 0.5;
        float _1647 = _1646 * _1646;
        float _3329 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
        float _1649 = isnan(1.0) ? _1411 : (isnan(_1411) ? 1.0 : min(_1411, 1.0));
        _1525 = (((cbLight._m0[_1630].x * 0.3183098733425140380859375) * _1648) * _1649) + _1480;
        _1527 = (((cbLight._m0[_1630].y * 0.3183098733425140380859375) * _1648) * _1649) + _1482;
        _1529 = (((cbLight._m0[_1630].z * 0.3183098733425140380859375) * _1648) * _1649) + _1484;
    }
    uint _1531 = _1394 + 8u;
    float _1537 = cbLight._m0[_1394].x + _309;
    float _1538 = cbLight._m0[_1394].y + _310;
    float _1539 = cbLight._m0[_1394].z + _311;
    float _1543 = inversesqrt(dot(vec3(_1537, _1538, _1539), vec3(_1537, _1538, _1539)));
    float _1547 = dot(vec3(_241, _242, _243), vec3(cbLight._m0[_1394].xyz));
    float _3345 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
    float _1550 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
    float _3356 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _1551 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
    float _1552 = dot(vec3(cbLight._m0[_1394].xyz), vec3(_1537 * _1543, _1538 * _1543, _1539 * _1543));
    float _3367 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
    float _1563 = (exp2(log2(1.0 - (isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1569 = (0.5 / ((_1550 + 9.9999999392252902907785028219223e-09) + _1551)) * _1550;
    float _3378 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
    float _1571 = (isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0))) * 0.31831014156341552734375;
    uint _1582 = _1394 + 9u;
    float _1588 = cbLight._m0[_1433].x + _309;
    float _1589 = cbLight._m0[_1433].y + _310;
    float _1590 = cbLight._m0[_1433].z + _311;
    float _1594 = inversesqrt(dot(vec3(_1588, _1589, _1590), vec3(_1588, _1589, _1590)));
    float _1598 = dot(vec3(_241, _242, _243), vec3(cbLight._m0[_1433].xyz));
    float _3389 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
    float _1601 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
    float _1602 = dot(vec3(cbLight._m0[_1433].xyz), vec3(_1588 * _1594, _1589 * _1594, _1590 * _1594));
    float _3400 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
    float _1611 = (exp2(log2(1.0 - (isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1615 = (0.5 / ((_1601 + 9.9999999392252902907785028219223e-09) + _1551)) * _1601;
    float _3411 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
    float _1617 = (isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0))) * 0.31831014156341552734375;
    float _1627 = (((_1611 * cbLight._m0[_1582].x) * _1617) * _1418) + (((_1563 * cbLight._m0[_1531].x) * _1571) * _1429);
    float _1628 = (((_1611 * cbLight._m0[_1582].y) * _1617) * _1418) + (((_1563 * cbLight._m0[_1531].y) * _1571) * _1429);
    float _1629 = (((_1611 * cbLight._m0[_1582].z) * _1617) * _1418) + (((_1563 * cbLight._m0[_1531].z) * _1571) * _1429);
    float _1691;
    float _1693;
    float _1695;
    if (_1469)
    {
        _1691 = _1627;
        _1693 = _1628;
        _1695 = _1629;
    }
    else
    {
        uint _1697 = _1394 + 10u;
        uint _1703 = _1394 + 2u;
        float _1709 = cbLight._m0[_1703].x + _309;
        float _1710 = cbLight._m0[_1703].y + _310;
        float _1711 = cbLight._m0[_1703].z + _311;
        float _1715 = inversesqrt(dot(vec3(_1709, _1710, _1711), vec3(_1709, _1710, _1711)));
        float _1719 = dot(vec3(_241, _242, _243), vec3(cbLight._m0[_1703].xyz));
        float _3422 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1722 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _1723 = dot(vec3(cbLight._m0[_1703].xyz), vec3(_1709 * _1715, _1710 * _1715, _1711 * _1715));
        float _3433 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1732 = (exp2(log2(1.0 - (isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1736 = (0.5 / ((_1722 + 9.9999999392252902907785028219223e-09) + _1551)) * _1722;
        float _3444 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1738 = (isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0))) * 0.31831014156341552734375;
        float _1739 = isnan(1.0) ? _1410 : (isnan(_1410) ? 1.0 : min(_1410, 1.0));
        _1691 = (((_1732 * cbLight._m0[_1697].x) * _1738) * _1739) + _1627;
        _1693 = (((_1732 * cbLight._m0[_1697].y) * _1738) * _1739) + _1628;
        _1695 = (((_1732 * cbLight._m0[_1697].z) * _1738) * _1739) + _1629;
    }
    float _1774;
    float _1776;
    float _1778;
    if (_1487)
    {
        _1774 = _1691;
        _1776 = _1693;
        _1778 = _1695;
    }
    else
    {
        uint _1785 = _1394 + 11u;
        uint _1791 = _1394 + 3u;
        float _1797 = cbLight._m0[_1791].x + _309;
        float _1798 = cbLight._m0[_1791].y + _310;
        float _1799 = cbLight._m0[_1791].z + _311;
        float _1803 = inversesqrt(dot(vec3(_1797, _1798, _1799), vec3(_1797, _1798, _1799)));
        float _1807 = dot(vec3(_241, _242, _243), vec3(cbLight._m0[_1791].xyz));
        float _3460 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1810 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
        float _1811 = dot(vec3(cbLight._m0[_1791].xyz), vec3(_1797 * _1803, _1798 * _1803, _1799 * _1803));
        float _3471 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1820 = (exp2(log2(1.0 - (isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1824 = (0.5 / ((_1810 + 9.9999999392252902907785028219223e-09) + _1551)) * _1810;
        float _3482 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1826 = (isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0))) * 0.31831014156341552734375;
        float _1827 = isnan(1.0) ? _1411 : (isnan(_1411) ? 1.0 : min(_1411, 1.0));
        _1774 = (((_1820 * cbLight._m0[_1785].x) * _1826) * _1827) + _1691;
        _1776 = (((_1820 * cbLight._m0[_1785].y) * _1826) * _1827) + _1693;
        _1778 = (((_1820 * cbLight._m0[_1785].z) * _1826) * _1827) + _1695;
    }
    float _1961;
    float _1963;
    float _1965;
    float _1967;
    float _1969;
    float _1971;
    if (_1392.y == 0u)
    {
        float _1902 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1903 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1902;
        float _1904 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1902;
        float _1905 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1902;
        uvec4 _1917 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1918 = _1917.x;
        uint _1929 = uint((float(_1917.y) * floor(float(uint(cbSceneParam._m0[85u].y * _317) / _1918))) + floor(float(uint(cbSceneParam._m0[85u].x * _316) / _1918)));
        float _1939 = (log2(_1905 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1940 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        uint _1943 = uint(isnan(14.0) ? _1940 : (isnan(_1940) ? 14.0 : min(_1940, 14.0)));
        uvec4 _1948 = texelFetch(g_lightClusterGridBuffer, int(((_1943 << 2u) + (_1929 << 6u)) >> 2u));
        uint _1949 = _1948.x;
        uint _1950 = _1917.z;
        float _2049;
        float _2051;
        float _2053;
        float _2055;
        float _2057;
        float _2059;
        if (((((1u << ((_1950 >> 4u) & 15u)) + 4294967295u) & _1949) == 0u) || ((_1950 & 240u) == 0u))
        {
            _2049 = 0.0;
            _2051 = 0.0;
            _2053 = 0.0;
            _2055 = 0.0;
            _2057 = 0.0;
            _2059 = 0.0;
        }
        else
        {
            float _2050;
            float _2052;
            float _2054;
            float _2056;
            float _2058;
            float _2060;
            float _2190 = 0.0;
            float _2191 = 0.0;
            float _2192 = 0.0;
            float _2193 = 0.0;
            float _2194 = 0.0;
            float _2195 = 0.0;
            uint _2196 = 0u;
            uint _2205;
            bool _2206;
            for (;;)
            {
                _2205 = texelFetch(g_lightClassification, int((((_1943 << 5u) + (_1929 << 9u)) + (_2196 << 2u)) >> 2u)).x;
                _2206 = _2205 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2206)
                {
                    frontier_phi_63_pred = _2195;
                    frontier_phi_63_pred_1 = _2194;
                    frontier_phi_63_pred_2 = _2193;
                    frontier_phi_63_pred_3 = _2192;
                    frontier_phi_63_pred_4 = _2191;
                    frontier_phi_63_pred_5 = _2190;
                }
                else
                {
                    float _2314;
                    float _2315;
                    float _2316;
                    float _2317;
                    float _2318;
                    float _2319;
                    uint _2320;
                    _2314 = _2190;
                    _2315 = _2191;
                    _2316 = _2192;
                    _2317 = _2193;
                    _2318 = _2194;
                    _2319 = _2195;
                    _2320 = _2205;
                    float _2246;
                    float _2247;
                    float _2248;
                    float _2249;
                    float _2250;
                    float _2251;
                    for (;;)
                    {
                        uint _2324 = uint(findLSB(_2320)) + (_2196 << 5u);
                        uint _2321 = (_2320 + 4294967295u) & _2320;
                        uint _2326 = _2324 * 48u;
                        vec4 _2340 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2326)).x, texelFetch(g_PointLightRenderingBuffer, int(_2326 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2326 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2326 + 3u)).x));
                        uint _2346 = (_2324 * 48u) + 4u;
                        vec4 _2359 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2346)).x, texelFetch(g_PointLightRenderingBuffer, int(_2346 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2346 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2346 + 3u)).x));
                        uint _2365 = (_2324 * 48u) + 8u;
                        vec3 _2376 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2365)).x, texelFetch(g_PointLightRenderingBuffer, int(_2365 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2365 + 2u)).x));
                        float _2380 = _2340.x - _1903;
                        float _2381 = _2340.y - _1904;
                        float _2382 = _2340.z - _1905;
                        float _2383 = dot(vec3(_2380, _2381, _2382), vec3(_2380, _2381, _2382));
                        float _2386 = inversesqrt(_2383);
                        float _2395 = 1.0 - (_2383 * _2340.w);
                        float _3508 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
                        float _2396 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
                        float _2397 = sqrt(_2383) * _2359.w;
                        float _2400 = 1.39999997615814208984375 / (_2397 + 1.39999997615814208984375);
                        float _2401 = _2400 * _2400;
                        float _2404 = ((1.0 - _2401) * dot(vec3(_338, _341, _344), vec3(_2386 * _2380, _2386 * _2381, _2386 * _2382))) + _2401;
                        float _2407 = _2397 * _2397;
                        float _2411 = ((isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0))) * _2396) / ((_2407 * 0.699999988079071044921875) + 1.0);
                        float _2415 = (-0.0) - _1903;
                        float _2416 = (-0.0) - _1904;
                        float _2417 = (-0.0) - _1905;
                        float _2421 = inversesqrt(dot(vec3(_2415, _2416, _2417), vec3(_2415, _2416, _2417)));
                        float _2425 = dot(vec3(_338, _341, _344), vec3(_2421 * _2415, _2421 * _2416, _2421 * _2417));
                        float _3524 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
                        float _3535 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
                        float _2429 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
                        float _2433 = (0.5 / (((isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0))) + 9.9999999392252902907785028219223e-09) + _2429)) * _2429;
                        float _3546 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
                        float _2442 = (((isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * 3.1415927410125732421875) / ((_2407 * 2.1991131305694580078125) + 3.141590118408203125)) * _2396;
                        _2249 = (_2411 * _2359.x) + _2317;
                        _2250 = (_2411 * _2359.y) + _2318;
                        _2251 = (_2411 * _2359.z) + _2319;
                        _2246 = (_2442 * _2376.x) + _2314;
                        _2247 = (_2442 * _2376.y) + _2315;
                        _2248 = (_2442 * _2376.z) + _2316;
                        if (_2321 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2314 = _2246;
                            _2315 = _2247;
                            _2316 = _2248;
                            _2317 = _2249;
                            _2318 = _2250;
                            _2319 = _2251;
                            _2320 = _2321;
                        }
                    }
                    frontier_phi_63_pred = _2251;
                    frontier_phi_63_pred_1 = _2250;
                    frontier_phi_63_pred_2 = _2249;
                    frontier_phi_63_pred_3 = _2248;
                    frontier_phi_63_pred_4 = _2247;
                    frontier_phi_63_pred_5 = _2246;
                }
                _2060 = frontier_phi_63_pred;
                _2058 = frontier_phi_63_pred_1;
                _2056 = frontier_phi_63_pred_2;
                _2054 = frontier_phi_63_pred_3;
                _2052 = frontier_phi_63_pred_4;
                _2050 = frontier_phi_63_pred_5;
                uint _2197 = _2196 + 1u;
                if (_2197 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2190 = _2050;
                    _2191 = _2052;
                    _2192 = _2054;
                    _2193 = _2056;
                    _2194 = _2058;
                    _2195 = _2060;
                    _2196 = _2197;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2049 = _2050;
            _2051 = _2052;
            _2053 = _2054;
            _2055 = _2056;
            _2057 = _2058;
            _2059 = _2060;
        }
        uvec4 _2063 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2064 = _2063.z;
        uint _2066 = (_2064 >> 8u) & 15u;
        float _2161;
        float _2163;
        float _2165;
        float _2167;
        float _2169;
        float _2171;
        if (((4294967295u << _2066) & _1949) == 0u)
        {
            _2161 = _2049;
            _2163 = _2051;
            _2165 = _2053;
            _2167 = _2055;
            _2169 = _2057;
            _2171 = _2059;
        }
        else
        {
            float _2186 = inversesqrt(dot(vec3(_1903, _1904, _1905), vec3(_1903, _1904, _1905)));
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2066 < ((_2064 >> 12u) & 15u))
            {
                float _2162;
                float _2164;
                float _2166;
                float _2168;
                float _2170;
                float _2172;
                float _2297 = _2049;
                float _2298 = _2051;
                float _2299 = _2053;
                float _2300 = _2055;
                float _2301 = _2057;
                float _2302 = _2059;
                uint _2303 = _2066;
                uint _2312;
                bool _2313;
                for (;;)
                {
                    _2312 = texelFetch(g_lightClassification, int((((_1943 << 5u) + (_1929 << 9u)) + (_2303 << 2u)) >> 2u)).x;
                    _2313 = _2312 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2313)
                    {
                        frontier_phi_69_pred = _2302;
                        frontier_phi_69_pred_1 = _2301;
                        frontier_phi_69_pred_2 = _2300;
                        frontier_phi_69_pred_3 = _2299;
                        frontier_phi_69_pred_4 = _2298;
                        frontier_phi_69_pred_5 = _2297;
                    }
                    else
                    {
                        float _2447;
                        float _2448;
                        float _2449;
                        float _2450;
                        float _2451;
                        float _2452;
                        float _2699;
                        float _2700;
                        float _2701;
                        float _2702;
                        float _2703;
                        float _2704;
                        float _2460 = _2297;
                        float _2461 = _2298;
                        float _2462 = _2299;
                        float _2463 = _2300;
                        float _2464 = _2301;
                        float _2465 = _2302;
                        uint _2466 = _2312;
                        uint _2467;
                        vec4 _2492;
                        float _2493;
                        vec4 _2508;
                        vec3 _2520;
                        vec4 _2536;
                        vec4 _2552;
                        float _2599;
                        bool _2600;
                        for (;;)
                        {
                            uint _2477 = ((_2303 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2466));
                            _2467 = (_2466 + 4294967295u) & _2466;
                            uint _2479 = _2477 * 40u;
                            _2492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2479 + 3u)).x));
                            _2493 = _2492.w;
                            uint _2495 = (_2477 * 40u) + 4u;
                            _2508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2495 + 3u)).x));
                            uint _2510 = (_2477 * 40u) + 8u;
                            _2520 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2510 + 2u)).x));
                            uint _2523 = (_2477 * 40u) + 16u;
                            _2536 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2523)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2523 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2523 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2523 + 3u)).x));
                            uint _2539 = (_2477 * 40u) + 20u;
                            _2552 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2539)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2539 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2539 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2539 + 3u)).x));
                            uint _2555 = (_2477 * 40u) + 24u;
                            vec4 _2568 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2555)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2555 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2555 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2555 + 3u)).x));
                            uint _2574 = (_2477 * 40u) + 28u;
                            vec4 _2587 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2574 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2574 + 3u)).x));
                            _2599 = fma(_1905, _2587.z, fma(_1904, _2587.y, _2587.x * _1903)) + _2587.w;
                            _2600 = !((fma(_1905, _2568.z, fma(_1904, _2568.y, _2568.x * _1903)) + _2568.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2600)
                            {
                                float _2627 = _2492.x - _1903;
                                float _2628 = _2492.y - _1904;
                                float _2629 = _2492.z - _1905;
                                float _2630 = dot(vec3(_2627, _2628, _2629), vec3(_2627, _2628, _2629));
                                float _2633 = inversesqrt(_2630);
                                float _2634 = _2633 * _2627;
                                float _2635 = _2633 * _2628;
                                float _2636 = _2633 * _2629;
                                float _2640 = 1.0 - (_2630 / (_2493 * _2493));
                                float _3557 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
                                float _2641 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
                                float _2645 = sqrt(_2630) * _2508.w;
                                float _2647 = 1.39999997615814208984375 / (_2645 + 1.39999997615814208984375);
                                float _2648 = _2647 * _2647;
                                float _2649 = 1.0 - _2648;
                                float _2651 = (_2649 * dot(vec3(_2634, _2635, _2636), vec3(_338, _341, _344))) + _2648;
                                float _2654 = _2645 * _2645;
                                float _2658 = (fma(_1905, _2536.z, fma(_1904, _2536.y, _2536.x * _1903)) + _2536.w) / _2599;
                                float _2659 = (fma(_1905, _2552.z, fma(_1904, _2552.y, _2552.x * _1903)) + _2552.w) / _2599;
                                float _2663 = 1.0 - dot(vec2(_2658, _2659), vec2(_2658, _2659));
                                float _3573 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
                                float _2664 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
                                float _2665 = _2664 * (((isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0))) * _2641) / ((_2654 * 0.699999988079071044921875) + 1.0));
                                float _2675 = dot(vec3(_338, _341, _344), vec3((-0.0) - (_1903 * _2186), (-0.0) - (_1904 * _2186), (-0.0) - (_1905 * _2186)));
                                float _3584 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
                                float _2683 = (_2649 * dot(vec3(_338, _341, _344), vec3(_2634, _2635, _2636))) + _2648;
                                float _3595 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
                                float _2684 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
                                float _2688 = (0.5 / (((isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) + 9.9999999392252902907785028219223e-09) + _2684)) * _2684;
                                float _3606 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
                                float _2695 = (_2664 * _2641) * (((isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * 3.1415927410125732421875) / ((_2654 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_75_pred = _2665 * _2508.z;
                                frontier_phi_75_pred_1 = _2665 * _2508.y;
                                frontier_phi_75_pred_2 = _2665 * _2508.x;
                                frontier_phi_75_pred_3 = _2695 * _2520.z;
                                frontier_phi_75_pred_4 = _2695 * _2520.y;
                                frontier_phi_75_pred_5 = _2695 * _2520.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2704 = frontier_phi_75_pred;
                            _2703 = frontier_phi_75_pred_1;
                            _2702 = frontier_phi_75_pred_2;
                            _2701 = frontier_phi_75_pred_3;
                            _2700 = frontier_phi_75_pred_4;
                            _2699 = frontier_phi_75_pred_5;
                            _2450 = _2702 + _2463;
                            _2451 = _2703 + _2464;
                            _2452 = _2704 + _2465;
                            _2447 = _2699 + _2460;
                            _2448 = _2700 + _2461;
                            _2449 = _2701 + _2462;
                            if (_2467 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2460 = _2447;
                                _2461 = _2448;
                                _2462 = _2449;
                                _2463 = _2450;
                                _2464 = _2451;
                                _2465 = _2452;
                                _2466 = _2467;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2452;
                        frontier_phi_69_pred_1 = _2451;
                        frontier_phi_69_pred_2 = _2450;
                        frontier_phi_69_pred_3 = _2449;
                        frontier_phi_69_pred_4 = _2448;
                        frontier_phi_69_pred_5 = _2447;
                    }
                    _2172 = frontier_phi_69_pred;
                    _2170 = frontier_phi_69_pred_1;
                    _2168 = frontier_phi_69_pred_2;
                    _2166 = frontier_phi_69_pred_3;
                    _2164 = frontier_phi_69_pred_4;
                    _2162 = frontier_phi_69_pred_5;
                    uint _2304 = _2303 + 1u;
                    if (_2304 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2297 = _2162;
                        _2298 = _2164;
                        _2299 = _2166;
                        _2300 = _2168;
                        _2301 = _2170;
                        _2302 = _2172;
                        _2303 = _2304;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2172;
                frontier_phi_57_58_ladder_1 = _2170;
                frontier_phi_57_58_ladder_2 = _2168;
                frontier_phi_57_58_ladder_3 = _2166;
                frontier_phi_57_58_ladder_4 = _2164;
                frontier_phi_57_58_ladder_5 = _2162;
            }
            else
            {
                frontier_phi_57_58_ladder = _2059;
                frontier_phi_57_58_ladder_1 = _2057;
                frontier_phi_57_58_ladder_2 = _2055;
                frontier_phi_57_58_ladder_3 = _2053;
                frontier_phi_57_58_ladder_4 = _2051;
                frontier_phi_57_58_ladder_5 = _2049;
            }
            _2161 = frontier_phi_57_58_ladder_5;
            _2163 = frontier_phi_57_58_ladder_4;
            _2165 = frontier_phi_57_58_ladder_3;
            _2167 = frontier_phi_57_58_ladder_2;
            _2169 = frontier_phi_57_58_ladder_1;
            _2171 = frontier_phi_57_58_ladder;
        }
        float _2176 = isnan(1.0) ? _383 : (isnan(_383) ? 1.0 : min(_383, 1.0));
        _1961 = (_2176 * _2167) + _1525;
        _1963 = (_2176 * _2169) + _1527;
        _1965 = (_2176 * _2171) + _1529;
        _1967 = ((_2161 * 0.039999999105930328369140625) * _2176) + _1774;
        _1969 = ((_2163 * 0.039999999105930328369140625) * _2176) + _1776;
        _1971 = ((_2165 * 0.039999999105930328369140625) * _2176) + _1778;
    }
    else
    {
        _1961 = _1525;
        _1963 = _1527;
        _1965 = _1529;
        _1967 = _1774;
        _1969 = _1776;
        _1971 = _1778;
    }
    float _3622 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _3633 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _3644 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    uint _1991 = _357 + 6u;
    float _1999 = _316 / cbSceneParam._m0[86u].x;
    float _2000 = _317 / cbSceneParam._m0[86u].y;
    vec4 _2014 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1999, _2000, (log2((isnan(cbSceneParam._m0[77u].w) ? _251 : (isnan(_251) ? cbSceneParam._m0[77u].w : min(_251, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2016 = _2014.x;
    float _2017 = _2014.y;
    float _2018 = _2014.z;
    float _2019 = _2014.w;
    float _2111;
    float _2113;
    float _2115;
    float _2117;
    if (_251 > cbSceneParam._m0[78u].w)
    {
        float _2074 = isnan(_251) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _251 : min(cbSceneParam._m0[80u].w, _251));
        float _2075 = _2074 / _251;
        float _2086 = _2075 * _302;
        float _2087 = _303 * _2075;
        float _2088 = (-0.0) - _2087;
        float _2089 = _2075 * _304;
        float _2091 = (cbSceneParam._m0[77u].w * _2088) / _2074;
        float _2092 = _2091 + cbSceneParam._m0[79u].w;
        float _2093 = cbSceneParam._m0[79u].w - _2087;
        float _2099 = sqrt(((_2086 * _2086) + (_2087 * _2087)) + (_2089 * _2089));
        float _2102 = (1.0 - (cbSceneParam._m0[77u].w / _2074)) * _2099;
        float _2107 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2109 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2259;
        if (abs((_2088 - _2091) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2259 = ((((_2092 > 0.0) ? exp2(_2107 * _2092) : (2.0 - exp2(_2109 * _2092))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2102;
        }
        else
        {
            float _2219 = 1.0 / cbSceneParam._m0[80u].x;
            float _2220 = isnan(_2093) ? _2092 : (isnan(_2092) ? _2093 : max(_2092, _2093));
            float _2221 = isnan(_2093) ? _2092 : (isnan(_2092) ? _2093 : min(_2092, _2093));
            float _2230 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : min(_2220, 0.0));
            float _2231 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : min(_2221, 0.0));
            _2259 = ((abs(_2099 / _2088) * cbSceneParam._m0[80u].y) * ((((_2230 - _2231) * 2.0) - ((exp2(_2107 * (isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0)))) - exp2(_2107 * (isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0))))) * _2219)) - ((exp2(_2109 * _2230) - exp2(_2109 * _2231)) * _2219))) + (_2102 * cbSceneParam._m0[80u].z);
        }
        vec4 _2261 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1999, _2000, 1.0), 0.0);
        float _2270 = exp2((_2259 * (-1.44269502162933349609375)) * (1.0 - _2261.w));
        float _2271 = log2(_2270);
        float _2287 = log2(_2019);
        _2111 = (exp2(_2287 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2271 * cbSceneParam._m0[78u].x)) * _2261.x) / cbSceneParam._m0[78u].x)) + _2016;
        _2113 = (exp2(_2287 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2271 * cbSceneParam._m0[78u].y)) * _2261.y) / cbSceneParam._m0[78u].y)) + _2017;
        _2115 = (exp2(_2287 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2271 * cbSceneParam._m0[78u].z)) * _2261.z) / cbSceneParam._m0[78u].z)) + _2018;
        _2117 = _2270 * _2019;
    }
    else
    {
        _2111 = _2016;
        _2113 = _2017;
        _2115 = _2018;
        _2117 = _2019;
    }
    float _2129 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2130 = _2129 == 3.0;
    float _2131 = log2(_2117);
    float _2138 = exp2(_2131 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * (_1961 + ((isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0))) * _383))) + ((_1967 + ((isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0))) * _1161)) * cbPerFrame._m0[3u].x));
    float _2139 = exp2(_2131 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * (_1963 + ((isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0))) * _383))) + ((_1969 + ((isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))) * _1161)) * cbPerFrame._m0[3u].x));
    float _2140 = exp2(_2131 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * (_1965 + ((isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0))) * _383))) + ((_1971 + ((isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0))) * _1161)) * cbPerFrame._m0[3u].x));
    float _2149 = (_2129 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2149 * (_2130 ? _2138 : (_2138 + (cbSceneParam._m0[72u].w * _2111)));
    SV_Target.y = _2149 * (_2130 ? _2139 : (_2139 + (cbSceneParam._m0[72u].w * _2113)));
    SV_Target.z = _2149 * (_2130 ? _2140 : (_2140 + (cbSceneParam._m0[72u].w * _2115)));
    SV_Target.w = cbInstanceData._m0[_1991].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1991].w;
}


