#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_18;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1961;
float _4625;
float _4626;
float _4627;
float _4628;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _243 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _244 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _245 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _251 = inversesqrt(dot(vec3(_243, _244, _245), vec3(_243, _244, _245)));
    float _252 = _251 * _243;
    float _253 = _251 * _244;
    float _254 = _251 * _245;
    float _264 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _265 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _266 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _270 = inversesqrt(dot(vec3(_264, _265, _266), vec3(_264, _265, _266)));
    float _271 = _270 * _264;
    float _272 = _270 * _265;
    float _273 = _270 * _266;
    float _277 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _278 = _277 * NORMAL.x;
    float _279 = _277 * NORMAL.y;
    float _280 = _277 * NORMAL.z;
    float _284 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _285 = _284 * TANGENT.x;
    float _286 = _284 * TANGENT.y;
    float _287 = _284 * TANGENT.z;
    float _291 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _292 = _291 * TANGENT_2.x;
    float _293 = _291 * TANGENT_2.y;
    float _294 = _291 * TANGENT_2.z;
    float _299;
    float _300;
    float _301;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _299 = (-0.0) - _278;
        _300 = (-0.0) - _279;
        _301 = (-0.0) - _280;
    }
    else
    {
        _299 = _278;
        _300 = _279;
        _301 = _280;
    }
    vec4 _327 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _339 = 1.0 - ((1.0 - _327.z) * 1.39999997615814208984375);
    float _4637 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _340 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
    float _342 = 1.0 - ((1.0 - _327.x) * 1.39999997615814208984375);
    float _4648 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _343 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
    float _345 = 1.0 - ((1.0 - _327.y) * 1.39999997615814208984375);
    float _4659 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _346 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
    float _348 = (_343 + _340) + _346;
    float _355 = (_348 * (1.0 - cbMtdParam._m0[20u].x)) + cbMtdParam._m0[20u].x;
    float _356 = (_348 * (1.0 - cbMtdParam._m0[20u].y)) + cbMtdParam._m0[20u].y;
    float _357 = (_348 * (1.0 - cbMtdParam._m0[20u].z)) + cbMtdParam._m0[20u].z;
    vec4 _382 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _391 = 1.0 - ((1.0 - _382.x) * 1.39999997615814208984375);
    float _4670 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
    float _402 = (_392 * ((cbMtdParam._m0[9u].x - _355) + ((1.0 - cbMtdParam._m0[9u].x) * _348))) + _355;
    float _403 = (_392 * ((cbMtdParam._m0[9u].y - _356) + ((1.0 - cbMtdParam._m0[9u].y) * _348))) + _356;
    float _404 = (_392 * ((cbMtdParam._m0[9u].z - _357) + ((1.0 - cbMtdParam._m0[9u].z) * _348))) + _357;
    float _418 = 1.0 - ((1.0 - _382.y) * 1.39999997615814208984375);
    float _4681 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
    float _429 = (((cbMtdParam._m0[18u].x - _402) + ((1.0 - cbMtdParam._m0[18u].x) * _348)) * _419) + _402;
    float _430 = (((cbMtdParam._m0[18u].y - _403) + ((1.0 - cbMtdParam._m0[18u].y) * _348)) * _419) + _403;
    float _431 = (((cbMtdParam._m0[18u].z - _404) + ((1.0 - cbMtdParam._m0[18u].z) * _348)) * _419) + _404;
    float _445 = 1.0 - ((1.0 - _382.z) * 1.39999997615814208984375);
    float _4692 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _446 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
    vec4 _474 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.z) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.w) + cbTextureTilingScale._m0[10u].w));
    float _476 = _474.x;
    float _477 = _476 * cbMtdParam._m0[25u].w;
    float _491 = ((cbMtdParam._m0[22u].z * (-1.39999997615814208984375)) * ((TEXCOORD_5.w - _477) + (cbMtdParam._m0[23u].y * TEXCOORD_5.w))) + 1.0;
    float _4703 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _493 = 1.0 - (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0)));
    float _501 = ((cbMtdParam._m0[22u].y * (-1.39999997615814208984375)) * ((TEXCOORD_5.z - _477) + (cbMtdParam._m0[23u].z * TEXCOORD_5.z))) + 1.0;
    float _4714 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _503 = 1.0 - (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0)));
    vec4 _521 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _523 = _521.x;
    float _524 = _521.y;
    float _525 = _521.z;
    float _526 = cbMtdParam._m0[10u].x * _503;
    float _528 = cbMtdParam._m0[10u].y * _503;
    float _530 = cbMtdParam._m0[10u].z * _503;
    float _546 = ((_523 * (cbMtdParam._m0[17u].x - _526)) * _493) + (_526 * _523);
    float _547 = ((_524 * (cbMtdParam._m0[17u].y - _528)) * _493) + (_528 * _524);
    float _548 = ((_525 * (cbMtdParam._m0[17u].z - _530)) * _493) + (_530 * _525);
    float _568 = cbMtdParam._m0[23u].x * (-1.39999997615814208984375);
    float _572 = (_568 * ((TEXCOORD_9.x - _477) + (cbMtdParam._m0[22u].x * TEXCOORD_9.x))) + 1.0;
    float _573 = (_568 * ((TEXCOORD_9.y - _477) + (cbMtdParam._m0[22u].x * TEXCOORD_9.y))) + 1.0;
    float _574 = (_568 * ((TEXCOORD_9.z - _477) + (cbMtdParam._m0[22u].x * TEXCOORD_9.z))) + 1.0;
    float _4725 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _4736 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _4747 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _586 = (1.0 - cbMtdParam._m0[24u].y) + _343;
    float _589 = _586 * (1.0 - (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))));
    float _590 = _586 * (1.0 - (isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0))));
    float _591 = ((_343 + 1.0) - cbMtdParam._m0[24u].y) * (1.0 - (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))));
    float _601 = _503 + _493;
    float _602 = _601 + _589;
    float _603 = _601 + _590;
    float _604 = _601 + _591;
    float _605 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _606 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _607 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _608 = isnan(1.0) ? _605 : (isnan(_605) ? 1.0 : min(_605, 1.0));
    float _609 = isnan(1.0) ? _606 : (isnan(_606) ? 1.0 : min(_606, 1.0));
    float _610 = isnan(1.0) ? _607 : (isnan(_607) ? 1.0 : min(_607, 1.0));
    vec4 _628 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _633 = _628.w;
    float _634 = _628.x * cbMtdParam._m0[13u].x;
    float _635 = _628.y * cbMtdParam._m0[13u].y;
    float _636 = _628.z * cbMtdParam._m0[13u].z;
    vec4 _654 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w));
    float _668 = (((_654.x * cbMtdParam._m0[14u].x) - _634) * _343) + _634;
    float _669 = (((_654.y * cbMtdParam._m0[14u].y) - _635) * _343) + _635;
    float _670 = (((_654.z * cbMtdParam._m0[14u].z) - _636) * _343) + _636;
    vec4 _688 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w));
    float _702 = (((_688.x * cbMtdParam._m0[15u].x) - _668) * _346) + _668;
    float _703 = (((_688.y * cbMtdParam._m0[15u].y) - _669) * _346) + _669;
    float _704 = (((_688.z * cbMtdParam._m0[15u].z) - _670) * _346) + _670;
    vec4 _722 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _736 = (((_722.x * cbMtdParam._m0[16u].x) - _702) * _340) + _702;
    float _737 = (((_722.y * cbMtdParam._m0[16u].y) - _703) * _340) + _703;
    float _738 = (((_722.z * cbMtdParam._m0[16u].z) - _704) * _340) + _704;
    float _758 = ((_736 - (_736 * _608)) + (((_608 * 4.55000019073486328125) * ((_589 * ((cbMtdParam._m0[11u].x * _523) - _546)) + _546)) * _736)) * ((((cbMtdParam._m0[19u].x - _429) + ((1.0 - cbMtdParam._m0[19u].x) * _348)) * _446) + _429);
    float _759 = ((_737 - (_737 * _609)) + (((_609 * 4.55000019073486328125) * ((_590 * ((cbMtdParam._m0[11u].y * _524) - _547)) + _547)) * _737)) * ((((cbMtdParam._m0[19u].y - _430) + ((1.0 - cbMtdParam._m0[19u].y) * _348)) * _446) + _430);
    float _760 = ((_738 - (_610 * _738)) + (((_610 * 4.55000019073486328125) * ((_591 * ((cbMtdParam._m0[11u].z * _525) - _548)) + _548)) * _738)) * ((((cbMtdParam._m0[19u].z - _431) + ((1.0 - cbMtdParam._m0[19u].z) * _348)) * _446) + _431);
    float _766 = (((1.0 - TEXCOORD_5.y) * (-2.7999999523162841796875)) * cbMtdParam._m0[25u].y) + 1.0;
    float _4788 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _778 = ((((_476 + (-1.0)) + ((1.0 - TEXCOORD_5.x) * 2.0)) * (-1.39999997615814208984375)) * cbMtdParam._m0[25u].x) + 1.0;
    float _4799 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    vec4 _793 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _799 = (_793.x * 2.0) + (-1.0);
    float _800 = (_793.y * 2.0) + (-1.0);
    float _801 = dot(vec2(_799, _800), vec2(_799, _800));
    float _4810 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _806 = sqrt(1.0 - (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0))));
    float _809 = fma(_806, _299, fma(_800, _285, _799 * _252));
    float _812 = fma(_806, _300, fma(_800, _286, _799 * _253));
    float _815 = fma(_806, _301, fma(_800, _287, _799 * _254));
    float _824 = exp2(log2(inversesqrt(dot(vec3(_809, _812, _815), vec3(_809, _812, _815))) * _812) * cbMtdParam._m0[24u].w) * cbMtdParam._m0[24u].z;
    float _4821 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _827 = ((isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0))) + (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0)))) * (1.0 - (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0))));
    float _4832 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _828 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
    float _830 = 3.0 - (_828 * 2.0);
    float _835 = _828 * _828;
    float _842 = ((_835 * (cbMtdParam._m0[12u].x - _758)) * _830) + _758;
    float _843 = ((_835 * (cbMtdParam._m0[12u].y - _759)) * _830) + _759;
    float _844 = ((_835 * (cbMtdParam._m0[12u].z - _760)) * _830) + _760;
    float _857 = ((cbMtdParam._m0[21u].w - cbMtdParam._m0[26u].x) * _608) + cbMtdParam._m0[26u].x;
    float _860 = ((cbMtdParam._m0[21u].x - _857) * _343) + _857;
    float _863 = ((cbMtdParam._m0[21u].y - _860) * _346) + _860;
    float _866 = ((cbMtdParam._m0[21u].z - _863) * _340) + _863;
    vec4 _878 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.z) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.w) + cbTextureTilingScale._m0[16u].w));
    float _882 = _878.z;
    float _885 = (_878.x * 2.0) + (-1.0);
    float _886 = (_878.y * 2.0) + (-1.0);
    float _887 = dot(vec2(_885, _886), vec2(_885, _886));
    float _4843 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _892 = sqrt(1.0 - (isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0))));
    float _895 = fma(_892, _299, fma(_886, _292, _885 * _271));
    float _898 = fma(_892, _300, fma(_886, _293, _885 * _272));
    float _901 = fma(_892, _301, fma(_886, _294, _885 * _273));
    float _905 = inversesqrt(dot(vec3(_895, _898, _901), vec3(_895, _898, _901)));
    float _906 = _905 * _895;
    float _907 = _905 * _898;
    float _908 = _905 * _901;
    vec4 _921 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_18, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _928 = (_921.x * 2.0) + (-1.0);
    float _929 = (_921.y * 2.0) + (-1.0);
    float _930 = dot(vec2(_928, _929), vec2(_928, _929));
    float _4854 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _938 = ((_921.z - _882) * _827) + _882;
    vec4 _951 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _957 = (_951.x * 2.0) + (-1.0);
    float _958 = (_951.y * 2.0) + (-1.0);
    float _959 = dot(vec2(_957, _958), vec2(_957, _958));
    float _4865 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _964 = sqrt(1.0 - (isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0))));
    float _967 = fma(_964, _299, fma(_958, _292, _957 * _271));
    float _970 = fma(_964, _300, fma(_958, _293, _957 * _272));
    float _973 = fma(_964, _301, fma(_958, _294, _957 * _273));
    float _977 = inversesqrt(dot(vec3(_967, _970, _973), vec3(_967, _970, _973)));
    float _978 = _977 * _967;
    float _979 = _977 * _970;
    float _980 = _977 * _973;
    float _983 = fma(_980, _254, fma(_979, _253, _978 * _252));
    float _986 = fma(_980, _287, fma(_979, _286, _978 * _285));
    float _989 = fma(_980, _301, fma(_979, _300, _978 * _299));
    float _993 = inversesqrt(dot(vec3(_983, _986, _989), vec3(_983, _986, _989)));
    vec4 _1006 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _1012 = (_1006.x * 2.0) + (-1.0);
    float _1013 = (_1006.y * 2.0) + (-1.0);
    float _1014 = dot(vec2(_1012, _1013), vec2(_1012, _1013));
    float _4876 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _1019 = sqrt(1.0 - (isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0))));
    float _1022 = fma(_1019, _299, fma(_1013, _292, _1012 * _271));
    float _1025 = fma(_1019, _300, fma(_1013, _293, _1012 * _272));
    float _1028 = fma(_1019, _301, fma(_1013, _294, _1012 * _273));
    float _1032 = inversesqrt(dot(vec3(_1022, _1025, _1028), vec3(_1022, _1025, _1028)));
    float _1033 = _1032 * _1022;
    float _1034 = _1032 * _1025;
    float _1035 = _1032 * _1028;
    float _1038 = fma(_1035, _254, fma(_1034, _253, _1033 * _252));
    float _1041 = fma(_1035, _287, fma(_1034, _286, _1033 * _285));
    float _1044 = fma(_1035, _301, fma(_1034, _300, _1033 * _299));
    float _1048 = inversesqrt(dot(vec3(_1038, _1041, _1044), vec3(_1038, _1041, _1044)));
    vec4 _1063 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _1069 = (_1063.x * 2.0) + (-1.0);
    float _1070 = (_1063.y * 2.0) + (-1.0);
    float _1071 = dot(vec2(_1069, _1070), vec2(_1069, _1070));
    float _4887 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _1076 = sqrt(1.0 - (isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0))));
    float _1079 = fma(_1076, _299, fma(_1070, _292, _1069 * _271));
    float _1082 = fma(_1076, _300, fma(_1070, _293, _1069 * _272));
    float _1085 = fma(_1076, _301, fma(_1070, _294, _1069 * _273));
    float _1089 = inversesqrt(dot(vec3(_1079, _1082, _1085), vec3(_1079, _1082, _1085)));
    float _1090 = _1089 * _1079;
    float _1091 = _1089 * _1082;
    float _1092 = _1089 * _1085;
    float _1095 = fma(_1092, _254, fma(_1091, _253, _1090 * _252));
    float _1098 = fma(_1092, _287, fma(_1091, _286, _1090 * _285));
    float _1101 = fma(_1092, _301, fma(_1091, _300, _1090 * _299));
    float _1105 = inversesqrt(dot(vec3(_1095, _1098, _1101), vec3(_1095, _1098, _1101)));
    float _1111 = fma(_908, _254, fma(_907, _253, _906 * _252));
    float _1114 = fma(_908, _287, fma(_907, _286, _906 * _285));
    float _1117 = fma(_908, _301, fma(_907, _300, _906 * _299));
    float _1121 = inversesqrt(dot(vec3(_1111, _1114, _1117), vec3(_1111, _1114, _1117)));
    float _1122 = _1121 * _1111;
    float _1123 = _1121 * _1114;
    float _1124 = _1121 * _1117;
    float _1131 = (((_1105 * _1095) - _1122) * _343) + _1122;
    float _1132 = (((_1105 * _1098) - _1123) * _343) + _1123;
    float _1133 = (((_1105 * _1101) - _1124) * _343) + _1124;
    vec4 _1146 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _1152 = (_1146.x * 2.0) + (-1.0);
    float _1153 = (_1146.y * 2.0) + (-1.0);
    float _1154 = dot(vec2(_1152, _1153), vec2(_1152, _1153));
    float _4898 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
    float _1159 = sqrt(1.0 - (isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0))));
    float _1162 = fma(_1159, _299, fma(_1153, _292, _1152 * _271));
    float _1165 = fma(_1159, _300, fma(_1153, _293, _1152 * _272));
    float _1168 = fma(_1159, _301, fma(_1153, _294, _1152 * _273));
    float _1172 = inversesqrt(dot(vec3(_1162, _1165, _1168), vec3(_1162, _1165, _1168)));
    float _1173 = _1172 * _1162;
    float _1174 = _1172 * _1165;
    float _1175 = _1172 * _1168;
    float _1178 = fma(_1175, _254, fma(_1174, _253, _1173 * _252));
    float _1181 = fma(_1175, _287, fma(_1174, _286, _1173 * _285));
    float _1184 = fma(_1175, _301, fma(_1174, _300, _1173 * _299));
    float _1188 = inversesqrt(dot(vec3(_1178, _1181, _1184), vec3(_1178, _1181, _1184)));
    float _1198 = (((_1188 * _1178) - _1131) * _346) + _1131;
    float _1199 = (((_1188 * _1181) - _1132) * _346) + _1132;
    float _1200 = (((_1188 * _1184) - _1133) * _346) + _1133;
    vec4 _1213 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _1219 = (_1213.x * 2.0) + (-1.0);
    float _1220 = (_1213.y * 2.0) + (-1.0);
    float _1221 = dot(vec2(_1219, _1220), vec2(_1219, _1220));
    float _4909 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
    float _1226 = sqrt(1.0 - (isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0))));
    float _1229 = fma(_1226, _299, fma(_1220, _292, _1219 * _271));
    float _1232 = fma(_1226, _300, fma(_1220, _293, _1219 * _272));
    float _1235 = fma(_1226, _301, fma(_1220, _294, _1219 * _273));
    float _1239 = inversesqrt(dot(vec3(_1229, _1232, _1235), vec3(_1229, _1232, _1235)));
    float _1240 = _1239 * _1229;
    float _1241 = _1239 * _1232;
    float _1242 = _1239 * _1235;
    float _1245 = fma(_1242, _254, fma(_1241, _253, _1240 * _252));
    float _1248 = fma(_1242, _287, fma(_1241, _286, _1240 * _285));
    float _1251 = fma(_1242, _301, fma(_1241, _300, _1240 * _299));
    float _1255 = inversesqrt(dot(vec3(_1245, _1248, _1251), vec3(_1245, _1248, _1251)));
    float _1265 = (((_1255 * _1251) - _1200) * _340) + _1200;
    vec4 _1277 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _1283 = (_1277.x * 2.0) + (-1.0);
    float _1284 = (_1277.y * 2.0) + (-1.0);
    float _1285 = dot(vec2(_1283, _1284), vec2(_1283, _1284));
    float _4920 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
    float _1290 = sqrt(1.0 - (isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0))));
    float _1293 = fma(_1290, _299, fma(_1284, _292, _1283 * _271));
    float _1296 = fma(_1290, _300, fma(_1284, _293, _1283 * _272));
    float _1299 = fma(_1290, _301, fma(_1284, _294, _1283 * _273));
    float _1303 = inversesqrt(dot(vec3(_1293, _1296, _1299), vec3(_1293, _1296, _1299)));
    float _1304 = _1303 * _1293;
    float _1305 = _1303 * _1296;
    float _1306 = _1303 * _1299;
    float _1309 = fma(_1306, _254, fma(_1305, _253, _1304 * _252));
    float _1312 = fma(_1306, _287, fma(_1305, _286, _1304 * _285));
    float _1315 = fma(_1306, _301, fma(_1305, _300, _1304 * _299));
    float _1319 = inversesqrt(dot(vec3(_1309, _1312, _1315), vec3(_1309, _1312, _1315)));
    float _1352 = (((((((_1038 * _493) * _1048) * cbMtdParam._m0[23u].w) + ((((_602 * _586) * _983) * _993) * cbMtdParam._m0[24u].x)) + _1198) + (((_1255 * _1245) - _1198) * _340)) + (((_1309 * _503) * _1319) * cbMtdParam._m0[22u].w)) + (cbMtdParam._m0[25u].z * _799);
    float _1357 = (((((((_1041 * _493) * _1048) * cbMtdParam._m0[23u].w) + ((((_603 * _586) * _986) * _993) * cbMtdParam._m0[24u].x)) + _1199) + (((_1255 * _1248) - _1199) * _340)) + (((_1312 * _503) * _1319) * cbMtdParam._m0[22u].w)) + (cbMtdParam._m0[25u].z * _800);
    float _1364 = ((_928 - _1352) * _827) + _1352;
    float _1365 = (_827 * (_929 - _1357)) + _1357;
    float _1366 = (_827 * (sqrt(1.0 - (isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0)))) - _1265)) + _1265;
    float _1369 = fma(_1366, _299, fma(_1365, _285, _1364 * _252));
    float _1372 = fma(_1366, _300, fma(_1365, _286, _1364 * _253));
    float _1375 = fma(_1366, _301, fma(_1365, _287, _1364 * _254));
    float _1379 = inversesqrt(dot(vec3(_1369, _1372, _1375), vec3(_1369, _1372, _1375)));
    float _1380 = _1379 * _1369;
    float _1381 = _1379 * _1372;
    float _1382 = _1379 * _1375;
    float _4931 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _1383 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
    float _4942 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _1384 = isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0));
    float _4953 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _4964 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _4975 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _4986 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _1388 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
    float _1404 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1444 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1454 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1444);
    float _1455 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1444);
    float _1456 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1444);
    float _1460 = inversesqrt(dot(vec3(_1454, _1455, _1456), vec3(_1454, _1455, _1456)));
    float _1461 = _1454 * _1460;
    float _1462 = _1455 * _1460;
    float _1463 = _1456 * _1460;
    vec4 _1468 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1470 = _1468.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1641 = sqrt(((_1454 * _1454) + (_1455 * _1455)) + (_1456 * _1456));
        float _1647 = (cbMatDynParam._m0[5u].x * _1641) + cbMatDynParam._m0[5u].y;
        float _4997 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
        float _1652 = (cbMatDynParam._m0[5u].z * _1641) + cbMatDynParam._m0[5u].w;
        float _5008 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0))) - _1648)) + _1648) < ((_1470 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1481 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1482 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1500 = fma(_1382, cbSceneParam._m0[5u].z, fma(_1381, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1380));
    float _1503 = fma(_1382, cbSceneParam._m0[6u].z, fma(_1381, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1380));
    float _1506 = fma(_1382, cbSceneParam._m0[7u].z, fma(_1381, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1380));
    uint _1519 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1520 = _1519 + 9u;
    uint _1521 = _1520 + uint(cbMatDynParam._m0[0u].w);
    float _1527 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0)))) * cbInstanceData._m0[_1521].x;
    float _1528 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0)))) * cbInstanceData._m0[_1521].y;
    float _1529 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0)))) * cbInstanceData._m0[_1521].z;
    float _5019 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
    float _1530 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
    float _5030 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
    float _1531 = isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0));
    float _5041 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
    float _1532 = isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0));
    float _1533 = 1.0 - _1388;
    float _1534 = _1530 * _1533;
    float _1535 = _1531 * _1533;
    float _1536 = _1532 * _1533;
    float _1541 = (_1530 + (-0.039999999105930328369140625)) * _1388;
    float _1542 = (_1531 + (-0.039999999105930328369140625)) * _1388;
    float _1543 = (_1532 + (-0.039999999105930328369140625)) * _1388;
    float _1544 = _1541 + 0.039999999105930328369140625;
    float _1546 = _1542 + 0.039999999105930328369140625;
    float _1547 = _1543 + 0.039999999105930328369140625;
    vec4 _1556 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1481, cbSceneParam._m0[86u].y * _1482));
    float _1559 = _1556.x * TEXCOORD_9.w;
    float _1560 = dot(vec3(_1380, _1381, _1382), vec3(_1461, _1462, _1463));
    float _1563 = _1560 * 2.0;
    float _1567 = (_1563 * _1380) - _1461;
    float _1568 = (_1563 * _1381) - _1462;
    float _1569 = (_1563 * _1382) - _1463;
    float _1573 = abs(dot(vec3(_1461, _1462, _1463), vec3(_1380, _1381, _1382)));
    float _5052 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
    float _1575 = sqrt(_1384);
    float _1587 = exp2((_1575 * 5.0) * log2(1.0 - ((isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1575 * 3.0));
    float _1593 = (1.0 - _1587) * ((_1575 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1594 = _1587 * _1575;
    float _1622 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1626 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1630 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1960;
    float _1962;
    float _1963;
    float _1964;
    float _1965;
    float _1966;
    float _1967;
    float _1968;
    float _1969;
    float _1970;
    float _1971;
    float _1972;
    float _1973;
    float _1974;
    float _1975;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1685 = fma(_1630, cbModelParam._m0[26u].z, fma(_1626, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1622));
        float _1689 = fma(_1630, cbModelParam._m0[27u].z, fma(_1626, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1622));
        float _1693 = fma(_1630, cbModelParam._m0[28u].z, fma(_1626, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1622));
        float _1718 = _1622 + _1380;
        float _1719 = _1626 + _1381;
        float _1720 = _1630 + _1382;
        float _1730 = fma(_1720, cbModelParam._m0[26u].z, fma(_1719, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1718)) - _1685;
        float _1731 = fma(_1720, cbModelParam._m0[27u].z, fma(_1719, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1718)) - _1689;
        float _1732 = fma(_1720, cbModelParam._m0[28u].z, fma(_1719, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1718)) - _1693;
        float _1736 = inversesqrt(dot(vec3(_1730, _1731, _1732), vec3(_1730, _1731, _1732)));
        float _1749 = ((_1736 * _1730) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1685 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1750 = ((_1736 * _1731) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1689 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1751 = ((_1736 * _1732) / cbModelParam._m0[34u].z) + ((((((_1693 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1754 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1749, _1750, _1751), 0.0);
        vec4 _1761 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1749, _1750, _1751), 0.0);
        vec4 _1768 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1749, _1750, _1751), 0.0);
        vec4 _1775 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1749, _1750, _1751), 0.0);
        float _1788 = exp2((_1754.w + (-0.5)) * 20.0) * 2.0;
        float _1789 = _1788 * (_1754.x + (-0.5));
        float _1790 = _1788 * (_1754.y + (-0.5));
        float _1791 = _1788 * (_1754.z + (-0.5));
        float _1798 = exp2((_1761.w + (-0.5)) * 20.0) * 2.0;
        float _1799 = _1798 * (_1761.x + (-0.5));
        float _1800 = _1798 * (_1761.y + (-0.5));
        float _1801 = _1798 * (_1761.z + (-0.5));
        float _1808 = exp2((_1768.w + (-0.5)) * 20.0) * 2.0;
        float _1809 = _1808 * (_1768.x + (-0.5));
        float _1810 = _1808 * (_1768.y + (-0.5));
        float _1811 = _1808 * (_1768.z + (-0.5));
        float _1818 = exp2((_1775.w + (-0.5)) * 20.0) * 2.0;
        float _1819 = _1818 * (_1775.x + (-0.5));
        float _1820 = _1818 * (_1775.y + (-0.5));
        float _1821 = _1818 * (_1775.z + (-0.5));
        float _1822 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1823 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1824 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1825 = _1789 * 0.5;
        float _1826 = _1799 * 0.5;
        float _1827 = _1809 * 0.5;
        float _1828 = dot(vec3(_1825, _1826, _1827), vec3(_1825, _1826, _1827));
        float _1833 = (_1828 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1828);
        float _1842 = (dot(vec3(_1380, _1381, _1382), vec3(_1833 * _1825, _1833 * _1826, _1833 * _1827)) + 1.0) * 0.5;
        float _5078 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
        float _1852 = sqrt(((_1826 * _1826) + (_1825 * _1825)) + (_1827 * _1827)) / (_1822 + 9.9999997473787516355514526367188e-06);
        float _5089 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1853 = isnan(1.0) ? _5089 : (isnan(_5089) ? 1.0 : min(_5089, 1.0));
        float _1854 = _1853 * 2.0;
        float _1858 = (1.0 - _1853) / (_1853 + 1.0);
        float _5100 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1859 = isnan(1.0) ? _5100 : (isnan(_5100) ? 1.0 : min(_5100, 1.0));
        float _1868 = ((((1.0 - _1859) * (_1854 + 2.0)) * exp2(log2(isnan(1.0) ? _5078 : (isnan(_5078) ? 1.0 : min(_5078, 1.0))) * (_1854 + 1.0))) + _1859) * _1822;
        float _1869 = _1790 * 0.5;
        float _1870 = _1800 * 0.5;
        float _1871 = _1810 * 0.5;
        float _1872 = dot(vec3(_1869, _1870, _1871), vec3(_1869, _1870, _1871));
        float _1877 = (_1872 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1872);
        float _1885 = (dot(vec3(_1380, _1381, _1382), vec3(_1877 * _1869, _1877 * _1870, _1877 * _1871)) + 1.0) * 0.5;
        float _5111 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
        float _1894 = sqrt(((_1870 * _1870) + (_1869 * _1869)) + (_1871 * _1871)) / (_1823 + 9.9999997473787516355514526367188e-06);
        float _5122 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1895 = isnan(1.0) ? _5122 : (isnan(_5122) ? 1.0 : min(_5122, 1.0));
        float _1896 = _1895 * 2.0;
        float _1900 = (1.0 - _1895) / (_1895 + 1.0);
        float _5133 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1901 = isnan(1.0) ? _5133 : (isnan(_5133) ? 1.0 : min(_5133, 1.0));
        float _1910 = ((((1.0 - _1901) * (_1896 + 2.0)) * exp2(log2(isnan(1.0) ? _5111 : (isnan(_5111) ? 1.0 : min(_5111, 1.0))) * (_1896 + 1.0))) + _1901) * _1823;
        float _1911 = _1791 * 0.5;
        float _1912 = _1801 * 0.5;
        float _1913 = _1811 * 0.5;
        float _1914 = dot(vec3(_1911, _1912, _1913), vec3(_1911, _1912, _1913));
        float _1919 = (_1914 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1914);
        float _1927 = (dot(vec3(_1380, _1381, _1382), vec3(_1919 * _1911, _1919 * _1912, _1919 * _1913)) + 1.0) * 0.5;
        float _5144 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
        float _1936 = sqrt(((_1912 * _1912) + (_1911 * _1911)) + (_1913 * _1913)) / (_1824 + 9.9999997473787516355514526367188e-06);
        float _5155 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
        float _1937 = isnan(1.0) ? _5155 : (isnan(_5155) ? 1.0 : min(_5155, 1.0));
        float _1938 = _1937 * 2.0;
        float _1942 = (1.0 - _1937) / (_1937 + 1.0);
        float _5166 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
        float _1943 = isnan(1.0) ? _5166 : (isnan(_5166) ? 1.0 : min(_5166, 1.0));
        float _1952 = ((((1.0 - _1943) * (_1938 + 2.0)) * exp2(log2(isnan(1.0) ? _5144 : (isnan(_5144) ? 1.0 : min(_5144, 1.0))) * (_1938 + 1.0))) + _1943) * _1824;
        _1960 = _1791;
        _1962 = _1790;
        _1963 = _1789;
        _1964 = _1801;
        _1965 = _1800;
        _1966 = _1799;
        _1967 = _1811;
        _1968 = _1810;
        _1969 = _1809;
        _1970 = _1824;
        _1971 = _1823;
        _1972 = _1822;
        _1973 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0)));
        _1974 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0)));
        _1975 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0)));
    }
    else
    {
        _1960 = _1961;
        _1962 = _1961;
        _1963 = _1961;
        _1964 = _1961;
        _1965 = _1961;
        _1966 = _1961;
        _1967 = _1961;
        _1968 = _1961;
        _1969 = _1961;
        _1970 = _1961;
        _1971 = _1961;
        _1972 = _1961;
        _1973 = 0.0;
        _1974 = 0.0;
        _1975 = 0.0;
    }
    float _2273;
    float _2274;
    float _2275;
    float _2276;
    float _2277;
    float _2278;
    float _2279;
    float _2280;
    float _2281;
    float _2282;
    float _2283;
    float _2284;
    float _2285;
    float _2286;
    float _2287;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _2004 = fma(_1630, cbModelParam._m0[30u].z, fma(_1626, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1622));
        float _2008 = fma(_1630, cbModelParam._m0[31u].z, fma(_1626, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1622));
        float _2012 = fma(_1630, cbModelParam._m0[32u].z, fma(_1626, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1622));
        float _2035 = _1622 + _1380;
        float _2036 = _1626 + _1381;
        float _2037 = _1630 + _1382;
        float _2047 = fma(_2037, cbModelParam._m0[30u].z, fma(_2036, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _2035)) - _2004;
        float _2048 = fma(_2037, cbModelParam._m0[31u].z, fma(_2036, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _2035)) - _2008;
        float _2049 = fma(_2037, cbModelParam._m0[32u].z, fma(_2036, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _2035)) - _2012;
        float _2053 = inversesqrt(dot(vec3(_2047, _2048, _2049), vec3(_2047, _2048, _2049)));
        float _2066 = ((_2053 * _2047) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_2004 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _2067 = ((_2053 * _2048) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_2008 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _2068 = ((_2053 * _2049) / cbModelParam._m0[35u].z) + ((((((_2012 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _2070 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_2066, _2067, _2068), 0.0);
        vec4 _2077 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_2066, _2067, _2068), 0.0);
        vec4 _2084 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_2066, _2067, _2068), 0.0);
        vec4 _2091 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_2066, _2067, _2068), 0.0);
        float _2103 = exp2((_2070.w + (-0.5)) * 20.0) * 2.0;
        float _2104 = _2103 * (_2070.x + (-0.5));
        float _2105 = _2103 * (_2070.y + (-0.5));
        float _2106 = _2103 * (_2070.z + (-0.5));
        float _2113 = exp2((_2077.w + (-0.5)) * 20.0) * 2.0;
        float _2114 = _2113 * (_2077.x + (-0.5));
        float _2115 = _2113 * (_2077.y + (-0.5));
        float _2116 = _2113 * (_2077.z + (-0.5));
        float _2123 = exp2((_2084.w + (-0.5)) * 20.0) * 2.0;
        float _2124 = _2123 * (_2084.x + (-0.5));
        float _2125 = _2123 * (_2084.y + (-0.5));
        float _2126 = _2123 * (_2084.z + (-0.5));
        float _2133 = exp2((_2091.w + (-0.5)) * 20.0) * 2.0;
        float _2134 = _2133 * (_2091.x + (-0.5));
        float _2135 = _2133 * (_2091.y + (-0.5));
        float _2136 = _2133 * (_2091.z + (-0.5));
        float _2137 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2138 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2139 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2140 = _2104 * 0.5;
        float _2141 = _2114 * 0.5;
        float _2142 = _2124 * 0.5;
        float _2143 = dot(vec3(_2140, _2141, _2142), vec3(_2140, _2141, _2142));
        float _2148 = (_2143 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2143);
        float _2156 = (dot(vec3(_1380, _1381, _1382), vec3(_2148 * _2140, _2148 * _2141, _2148 * _2142)) + 1.0) * 0.5;
        float _5207 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2165 = sqrt(((_2141 * _2141) + (_2140 * _2140)) + (_2142 * _2142)) / (_2137 + 9.9999997473787516355514526367188e-06);
        float _5218 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2166 = isnan(1.0) ? _5218 : (isnan(_5218) ? 1.0 : min(_5218, 1.0));
        float _2167 = _2166 * 2.0;
        float _2171 = (1.0 - _2166) / (_2166 + 1.0);
        float _5229 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2172 = isnan(1.0) ? _5229 : (isnan(_5229) ? 1.0 : min(_5229, 1.0));
        float _2181 = ((((1.0 - _2172) * (_2167 + 2.0)) * exp2(log2(isnan(1.0) ? _5207 : (isnan(_5207) ? 1.0 : min(_5207, 1.0))) * (_2167 + 1.0))) + _2172) * _2137;
        float _2182 = _2105 * 0.5;
        float _2183 = _2115 * 0.5;
        float _2184 = _2125 * 0.5;
        float _2185 = dot(vec3(_2182, _2183, _2184), vec3(_2182, _2183, _2184));
        float _2190 = (_2185 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2185);
        float _2198 = (dot(vec3(_1380, _1381, _1382), vec3(_2190 * _2182, _2190 * _2183, _2190 * _2184)) + 1.0) * 0.5;
        float _5240 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2207 = sqrt(((_2183 * _2183) + (_2182 * _2182)) + (_2184 * _2184)) / (_2138 + 9.9999997473787516355514526367188e-06);
        float _5251 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2208 = isnan(1.0) ? _5251 : (isnan(_5251) ? 1.0 : min(_5251, 1.0));
        float _2209 = _2208 * 2.0;
        float _2213 = (1.0 - _2208) / (_2208 + 1.0);
        float _5262 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2214 = isnan(1.0) ? _5262 : (isnan(_5262) ? 1.0 : min(_5262, 1.0));
        float _2223 = ((((1.0 - _2214) * (_2209 + 2.0)) * exp2(log2(isnan(1.0) ? _5240 : (isnan(_5240) ? 1.0 : min(_5240, 1.0))) * (_2209 + 1.0))) + _2214) * _2138;
        float _2224 = _2106 * 0.5;
        float _2225 = _2116 * 0.5;
        float _2226 = _2126 * 0.5;
        float _2227 = dot(vec3(_2224, _2225, _2226), vec3(_2224, _2225, _2226));
        float _2232 = (_2227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2227);
        float _2240 = (dot(vec3(_1380, _1381, _1382), vec3(_2232 * _2224, _2232 * _2225, _2232 * _2226)) + 1.0) * 0.5;
        float _5273 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2249 = sqrt(((_2225 * _2225) + (_2224 * _2224)) + (_2226 * _2226)) / (_2139 + 9.9999997473787516355514526367188e-06);
        float _5284 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2250 = isnan(1.0) ? _5284 : (isnan(_5284) ? 1.0 : min(_5284, 1.0));
        float _2251 = _2250 * 2.0;
        float _2255 = (1.0 - _2250) / (_2250 + 1.0);
        float _5295 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2256 = isnan(1.0) ? _5295 : (isnan(_5295) ? 1.0 : min(_5295, 1.0));
        float _2265 = ((((1.0 - _2256) * (_2251 + 2.0)) * exp2(log2(isnan(1.0) ? _5273 : (isnan(_5273) ? 1.0 : min(_5273, 1.0))) * (_2251 + 1.0))) + _2256) * _2139;
        _2273 = _2106;
        _2274 = _2105;
        _2275 = _2104;
        _2276 = _2116;
        _2277 = _2115;
        _2278 = _2114;
        _2279 = _2126;
        _2280 = _2125;
        _2281 = _2124;
        _2282 = _2139;
        _2283 = _2138;
        _2284 = _2137;
        _2285 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0)));
        _2286 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0)));
        _2287 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0)));
    }
    else
    {
        _2273 = _1961;
        _2274 = _1961;
        _2275 = _1961;
        _2276 = _1961;
        _2277 = _1961;
        _2278 = _1961;
        _2279 = _1961;
        _2280 = _1961;
        _2281 = _1961;
        _2282 = _1961;
        _2283 = _1961;
        _2284 = _1961;
        _2285 = 0.0;
        _2286 = 0.0;
        _2287 = 0.0;
    }
    float _2297 = (cbModelParam._m0[1u].x * (_2285 - _1973)) + _1973;
    float _2298 = (cbModelParam._m0[1u].x * (_2286 - _1974)) + _1974;
    float _2299 = (cbModelParam._m0[1u].x * (_2287 - _1975)) + _1975;
    float _2320 = fma(_2299, cbSceneParam._m0[89u].z, fma(_2298, cbSceneParam._m0[89u].y, _2297 * cbSceneParam._m0[89u].x));
    float _2323 = fma(_2299, cbSceneParam._m0[90u].z, fma(_2298, cbSceneParam._m0[90u].y, _2297 * cbSceneParam._m0[90u].x));
    float _2326 = fma(_2299, cbSceneParam._m0[91u].z, fma(_2298, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2297));
    float _2341 = _1567 * 0.5;
    float _2342 = _1568 * 0.5;
    float _2343 = _1569 * 0.5;
    float _2344 = dot(vec4(_2341, _2342, _2343, 1.0), vec4(_2275, _2278, _2281, _2284));
    float _2347 = dot(vec4(_2341, _2342, _2343, 1.0), vec4(_2274, _2277, _2280, _2283));
    float _2350 = dot(vec4(_2341, _2342, _2343, 1.0), vec4(_2273, _2276, _2279, _2282));
    float _2384;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2357 = dot(vec4(_2341, _2342, _2343, 1.0), vec4(_1960, _1964, _1967, _1970));
        float _2361 = dot(vec4(_2341, _2342, _2343, 1.0), vec4(_1962, _1965, _1968, _1971));
        float _2365 = dot(vec4(_2341, _2342, _2343, 1.0), vec4(_1963, _1966, _1969, _1972));
        float _2372 = dot(vec4(cbModelParam._m0[39u]), vec4(_2341, _2342, _2343, 1.0));
        _2384 = dot(vec3(isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0)), isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0)), isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2372) ? 0.0 : (isnan(0.0) ? _2372 : max(0.0, _2372))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2384 = 1.0;
    }
    float _2395;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2386 = dot(vec4(cbModelParam._m0[40u]), vec4(_2341, _2342, _2343, 1.0));
        _2395 = dot(vec3(isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0)), isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0)), isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2386) ? 0.0 : (isnan(0.0) ? _2386 : max(0.0, _2386))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2395 = 1.0;
    }
    float _2399 = (_2395 * cbModelParam._m0[1u].x) + (_2384 * (1.0 - cbModelParam._m0[1u].x));
    float _2409 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1384);
    float _2410 = isnan(_2409) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2409 : min(cbModelParam._m0[25u].z, _2409));
    float _2490;
    float _2492;
    float _2494;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2457 = fma(_1630, cbModelParam._m0[13u].z, fma(_1626, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1622)) + cbModelParam._m0[13u].w;
        float _2461 = fma(_1630, cbModelParam._m0[14u].z, fma(_1626, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1622)) + cbModelParam._m0[14u].w;
        float _2465 = fma(_1630, cbModelParam._m0[15u].z, fma(_1626, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1622)) + cbModelParam._m0[15u].w;
        float _2468 = fma(_1569, cbModelParam._m0[13u].z, fma(_1568, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1567));
        float _2471 = fma(_1569, cbModelParam._m0[14u].z, fma(_1568, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1567));
        float _2474 = fma(_1569, cbModelParam._m0[15u].z, fma(_1568, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1567));
        float _2502;
        if (_2468 > 0.0)
        {
            _2502 = abs((1.0 - _2457) / _2468);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2468 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_2457 + 1.0) / _2468);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2502 = frontier_phi_19_17_ladder;
        }
        float _2673;
        if (_2471 > 0.0)
        {
            _2673 = abs((1.0 - _2461) / _2471);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2471 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2461 + 1.0) / _2471);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2673 = frontier_phi_28_24_ladder;
        }
        float _2968;
        if (_2474 > 0.0)
        {
            _2968 = abs((1.0 - _2465) / _2474);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2474 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2465 + 1.0) / _2474);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2968 = frontier_phi_40_35_ladder;
        }
        float _2970 = isnan(_2673) ? _2502 : (isnan(_2502) ? _2673 : min(_2502, _2673));
        float _2971 = isnan(_2968) ? _2970 : (isnan(_2970) ? _2968 : min(_2970, _2968));
        float _2975 = (_2971 * _2468) + _2457;
        float _2976 = (_2971 * _2471) + _2461;
        float _2977 = (_2971 * _2474) + _2465;
        float _2978 = _2971 * 9.9999997473787516355514526367188e-05;
        float _2980 = (-1.0) - _2978;
        float _2982 = _2978 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2977 > _2982) || ((_2977 < _2980) || ((_2976 > _2982) || ((_2976 < _2980) || ((_2975 < _2980) || (_2975 > _2982))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3122 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2977, cbModelParam._m0[9u].z, fma(_2976, cbModelParam._m0[9u].y, _2975 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2977, cbModelParam._m0[10u].z, fma(_2976, cbModelParam._m0[10u].y, _2975 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2977, cbModelParam._m0[11u].z, fma(_2976, cbModelParam._m0[11u].y, _2975 * cbModelParam._m0[11u].x))), _2410);
            frontier_phi_18_40_ladder = _3122.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _3122.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _3122.x * cbModelParam._m0[1u].y;
        }
        _2490 = frontier_phi_18_40_ladder_2;
        _2492 = frontier_phi_18_40_ladder_1;
        _2494 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2478 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1567, _1568, _1569), _2410);
        _2490 = _2478.x * cbModelParam._m0[1u].y;
        _2492 = _2478.y * cbModelParam._m0[1u].y;
        _2494 = _2478.z * cbModelParam._m0[1u].y;
    }
    float _2498 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1384);
    float _2499 = isnan(_2498) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2498 : min(cbModelParam._m0[25u].w, _2498));
    float _2588;
    float _2590;
    float _2592;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2552 = fma(_1630, cbModelParam._m0[21u].z, fma(_1626, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1622)) + cbModelParam._m0[21u].w;
        float _2556 = fma(_1630, cbModelParam._m0[22u].z, fma(_1626, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1622)) + cbModelParam._m0[22u].w;
        float _2560 = fma(_1630, cbModelParam._m0[23u].z, fma(_1626, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1622)) + cbModelParam._m0[23u].w;
        float _2563 = fma(_1569, cbModelParam._m0[21u].z, fma(_1568, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1567));
        float _2566 = fma(_1569, cbModelParam._m0[22u].z, fma(_1568, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1567));
        float _2569 = fma(_1569, cbModelParam._m0[23u].z, fma(_1568, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1567));
        float _2678;
        if (_2563 > 0.0)
        {
            _2678 = abs((1.0 - _2552) / _2563);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2563 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2552 + 1.0) / _2563);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2678 = frontier_phi_30_26_ladder;
        }
        float _2995;
        if (_2566 > 0.0)
        {
            _2995 = abs((1.0 - _2556) / _2566);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2566 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2556 + 1.0) / _2566);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2995 = frontier_phi_42_37_ladder;
        }
        float _3333;
        if (_2569 > 0.0)
        {
            _3333 = abs((1.0 - _2560) / _2569);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2569 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_2560 + 1.0) / _2569);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _3333 = frontier_phi_52_49_ladder;
        }
        float _3335 = isnan(_2995) ? _2678 : (isnan(_2678) ? _2995 : min(_2678, _2995));
        float _3336 = isnan(_3333) ? _3335 : (isnan(_3335) ? _3333 : min(_3335, _3333));
        float _3340 = (_3336 * _2563) + _2552;
        float _3341 = (_3336 * _2566) + _2556;
        float _3342 = (_3336 * _2569) + _2560;
        float _3343 = _3336 * 9.9999997473787516355514526367188e-05;
        float _3344 = (-1.0) - _3343;
        float _3346 = _3343 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_3342 > _3346) || ((_3342 < _3344) || ((_3341 > _3346) || ((_3341 < _3344) || ((_3340 < _3344) || (_3340 > _3346))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3464 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3342, cbModelParam._m0[17u].z, fma(_3341, cbModelParam._m0[17u].y, _3340 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3342, cbModelParam._m0[18u].z, fma(_3341, cbModelParam._m0[18u].y, _3340 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3342, cbModelParam._m0[19u].z, fma(_3341, cbModelParam._m0[19u].y, _3340 * cbModelParam._m0[19u].x))), _2499);
            frontier_phi_27_52_ladder = _3464.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _3464.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _3464.x * cbModelParam._m0[1u].z;
        }
        _2588 = frontier_phi_27_52_ladder_2;
        _2590 = frontier_phi_27_52_ladder_1;
        _2592 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2572 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1567, _1568, _1569), _2499);
        _2588 = _2572.x * cbModelParam._m0[1u].z;
        _2590 = _2572.y * cbModelParam._m0[1u].z;
        _2592 = _2572.z * cbModelParam._m0[1u].z;
    }
    float _2605 = (((_1593 * _1544) + _1594) * _1559) * ((cbModelParam._m0[1u].w * (_2588 - _2490)) + _2490);
    float _2607 = (((_1593 * _1546) + _1594) * _1559) * ((cbModelParam._m0[1u].w * (_2590 - _2492)) + _2492);
    float _2609 = (((_1593 * _1547) + _1594) * _1559) * ((cbModelParam._m0[1u].w * (_2592 - _2494)) + _2494);
    float _2612 = fma(_2609, cbSceneParam._m0[89u].z, fma(_2607, cbSceneParam._m0[89u].y, _2605 * cbSceneParam._m0[89u].x));
    float _2615 = fma(_2609, cbSceneParam._m0[90u].z, fma(_2607, cbSceneParam._m0[90u].y, _2605 * cbSceneParam._m0[90u].x));
    float _2618 = fma(_2609, cbSceneParam._m0[91u].z, fma(_2607, cbSceneParam._m0[91u].y, _2605 * cbSceneParam._m0[91u].x));
    float _2652 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2656 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2660 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2664 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2665 = _2652 / _2664;
    float _2666 = _2656 / _2664;
    float _2667 = _2660 / _2664;
    float _2814;
    float _2815;
    float _2816;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2694 = ((uint(_2667 > cbSceneParam._m0[59u].y) + uint(_2667 > cbSceneParam._m0[59u].x)) + uint(_2667 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2695 = _2694 + 43u;
        uint _2703 = _2694 + 44u;
        uint _2711 = _2694 + 45u;
        uint _2719 = _2694 + 46u;
        float _2730 = fma(_2664, cbSceneParam._m0[_2695].w, fma(_2660, cbSceneParam._m0[_2695].z, fma(_2656, cbSceneParam._m0[_2695].y, _2652 * cbSceneParam._m0[_2695].x)));
        float _2734 = fma(_2664, cbSceneParam._m0[_2703].w, fma(_2660, cbSceneParam._m0[_2703].z, fma(_2656, cbSceneParam._m0[_2703].y, _2652 * cbSceneParam._m0[_2703].x)));
        float _2742 = fma(_2664, cbSceneParam._m0[_2719].w, fma(_2660, cbSceneParam._m0[_2719].z, fma(_2656, cbSceneParam._m0[_2719].y, _2652 * cbSceneParam._m0[_2719].x)));
        float _2747 = cbSceneParam._m0[33u].z * _2742;
        float _2749 = cbSceneParam._m0[33u].w * _2742;
        float _2752 = fma(_2664, cbSceneParam._m0[_2711].w, fma(_2660, cbSceneParam._m0[_2711].z, fma(_2656, cbSceneParam._m0[_2711].y, _2652 * cbSceneParam._m0[_2711].x))) / _2742;
        float _2800 = (cbSceneParam._m0[33u].x - sqrt(((_2666 * _2666) + (_2665 * _2665)) + (_2667 * _2667))) * cbSceneParam._m0[33u].y;
        float _5421 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        float _2807 = (isnan(1.0) ? _5421 : (isnan(_5421) ? 1.0 : min(_5421, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2747 + _2730) / _2742, (_2749 + _2734) / _2742), _2752), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2749 + _2730) / _2742, (_2734 - _2747) / _2742), _2752), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2730 - _2747) / _2742, (_2734 - _2749) / _2742), _2752), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2730 - _2749) / _2742, (_2747 + _2734) / _2742), _2752), 0.0)).x), vec4(0.25)));
        _2814 = 1.0 - (_2807 * cbSceneParam._m0[34u].x);
        _2815 = 1.0 - (_2807 * cbSceneParam._m0[34u].y);
        _2816 = 1.0 - (_2807 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2814 = 1.0;
        _2815 = 1.0;
        _2816 = 1.0;
    }
    float _2880;
    float _2882;
    float _2884;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2868 = fma(_2664, cbSceneParam._m0[63u].w, fma(_2660, cbSceneParam._m0[63u].z, fma(_2656, cbSceneParam._m0[63u].y, _2652 * cbSceneParam._m0[63u].x)));
        float _2869 = fma(_2664, cbSceneParam._m0[60u].w, fma(_2660, cbSceneParam._m0[60u].z, fma(_2656, cbSceneParam._m0[60u].y, _2652 * cbSceneParam._m0[60u].x))) / _2868;
        float _2870 = fma(_2664, cbSceneParam._m0[61u].w, fma(_2660, cbSceneParam._m0[61u].z, fma(_2656, cbSceneParam._m0[61u].y, _2652 * cbSceneParam._m0[61u].x))) / _2868;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2869 >= cbSceneParam._m0[64u].x) && (_2870 >= cbSceneParam._m0[64u].y)) && (_2869 <= cbSceneParam._m0[64u].z)) && (_2870 <= cbSceneParam._m0[64u].w))
        {
            float _3008 = fma(_2664, cbSceneParam._m0[62u].w, fma(_2660, cbSceneParam._m0[62u].z, fma(_2656, cbSceneParam._m0[62u].y, _2652 * cbSceneParam._m0[62u].x))) / _2868;
            float _3012 = isnan(cbSceneParam._m0[41u].w) ? _3008 : (isnan(_3008) ? cbSceneParam._m0[41u].w : max(_3008, cbSceneParam._m0[41u].w));
            float _3055 = (cbSceneParam._m0[33u].x - sqrt(((_2666 * _2666) + (_2665 * _2665)) + (_2667 * _2667))) * cbSceneParam._m0[33u].y;
            float _5437 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
            float _3062 = (isnan(1.0) ? _5437 : (isnan(_5437) ? 1.0 : min(_5437, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2869, cbSceneParam._m0[33u].w + _2870), _3012), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2869, _2870 - cbSceneParam._m0[33u].z), _3012), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2869 - cbSceneParam._m0[33u].z, _2870 - cbSceneParam._m0[33u].w), _3012), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2869 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2870), _3012), 0.0)).x), vec4(0.25)));
            float _3066 = 1.0 - (_3062 * cbSceneParam._m0[34u].x);
            float _3067 = 1.0 - (_3062 * cbSceneParam._m0[34u].y);
            float _3068 = 1.0 - (_3062 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_3067) ? _2815 : (isnan(_2815) ? _3067 : min(_2815, _3067));
            frontier_phi_39_38_ladder_1 = isnan(_3066) ? _2814 : (isnan(_2814) ? _3066 : min(_2814, _3066));
            frontier_phi_39_38_ladder_2 = isnan(_3068) ? _2816 : (isnan(_2816) ? _3068 : min(_2816, _3068));
        }
        else
        {
            frontier_phi_39_38_ladder = _2815;
            frontier_phi_39_38_ladder_1 = _2814;
            frontier_phi_39_38_ladder_2 = _2816;
        }
        _2880 = frontier_phi_39_38_ladder_1;
        _2882 = frontier_phi_39_38_ladder;
        _2884 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2880 = _2814;
        _2882 = _2815;
        _2884 = _2816;
    }
    uvec4 _2889 = floatBitsToUint(cbInstanceData._m0[_1519 + 5u]);
    uint _2891 = _2889.x * 14u;
    uint _2892 = _2891 + 13u;
    float _2899 = _1559 + (-1.0);
    float _2904 = (cbLight._m0[_2892].x * _2899) + 1.0;
    float _2905 = (cbLight._m0[_2892].y * _2899) + 1.0;
    float _2906 = (cbLight._m0[_2892].z * _2899) + 1.0;
    float _2907 = (cbLight._m0[_2892].w * _2899) + 1.0;
    uint _2908 = _2891 + 5u;
    float _2914 = isnan(1.0) ? _2905 : (isnan(_2905) ? 1.0 : min(_2905, 1.0));
    uint _2918 = _2891 + 4u;
    float _2927 = isnan(1.0) ? _2904 : (isnan(_2904) ? 1.0 : min(_2904, 1.0));
    uint _2931 = _2891 | 1u;
    float _2942 = dot(vec3(cbLight._m0[_2891].xyz), vec3(_1380, _1381, _1382));
    float _2945 = dot(vec3(cbLight._m0[_2931].xyz), vec3(_1380, _1381, _1382));
    float _5473 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
    float _5484 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
    float _2950 = (isnan(1.0) ? _5473 : (isnan(_5473) ? 1.0 : min(_5473, 1.0))) * 0.3183098733425140380859375;
    float _2952 = (isnan(1.0) ? _5484 : (isnan(_5484) ? 1.0 : min(_5484, 1.0))) * 0.3183098733425140380859375;
    float _2959 = ((cbLight._m0[_2908].x * _2914) * _2952) + (((cbLight._m0[_2918].x * _2880) * _2927) * _2950);
    float _2960 = ((_2914 * cbLight._m0[_2908].y) * _2952) + (((cbLight._m0[_2918].y * _2882) * _2927) * _2950);
    float _2961 = ((_2914 * cbLight._m0[_2908].z) * _2952) + (((cbLight._m0[_2918].z * _2884) * _2927) * _2950);
    uvec4 _2965 = floatBitsToUint(cbLight._m0[_2891 + 12u]);
    bool _2967 = _2965.x == 0u;
    float _3069;
    float _3071;
    float _3073;
    if (_2967)
    {
        _3069 = _2959;
        _3071 = _2960;
        _3073 = _2961;
    }
    else
    {
        uint _3077 = _2891 + 6u;
        float _3093 = (dot(vec3(cbLight._m0[_2891 + 2u].xyz), vec3(_1380, _1381, _1382)) * 0.5) + 0.5;
        float _3094 = _3093 * _3093;
        float _5495 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
        float _3095 = isnan(1.0) ? _5495 : (isnan(_5495) ? 1.0 : min(_5495, 1.0));
        float _3096 = isnan(1.0) ? _2906 : (isnan(_2906) ? 1.0 : min(_2906, 1.0));
        _3069 = (((cbLight._m0[_3077].x * 0.3183098733425140380859375) * _3095) * _3096) + _2959;
        _3071 = (((cbLight._m0[_3077].y * 0.3183098733425140380859375) * _3095) * _3096) + _2960;
        _3073 = (((cbLight._m0[_3077].z * 0.3183098733425140380859375) * _3095) * _3096) + _2961;
    }
    bool _3076 = _2965.y == 0u;
    float _3131;
    float _3133;
    float _3135;
    if (_3076)
    {
        _3131 = _3069;
        _3133 = _3071;
        _3135 = _3073;
    }
    else
    {
        uint _3304 = _2891 + 7u;
        float _3320 = (dot(vec3(cbLight._m0[_2891 + 3u].xyz), vec3(_1380, _1381, _1382)) * 0.5) + 0.5;
        float _3321 = _3320 * _3320;
        float _5511 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
        float _3322 = isnan(1.0) ? _5511 : (isnan(_5511) ? 1.0 : min(_5511, 1.0));
        float _3323 = isnan(1.0) ? _2907 : (isnan(_2907) ? 1.0 : min(_2907, 1.0));
        _3131 = (((cbLight._m0[_3304].x * 0.3183098733425140380859375) * _3322) * _3323) + _3069;
        _3133 = (((cbLight._m0[_3304].y * 0.3183098733425140380859375) * _3322) * _3323) + _3071;
        _3135 = (((cbLight._m0[_3304].z * 0.3183098733425140380859375) * _3322) * _3323) + _3073;
    }
    uint _3138 = _2891 + 8u;
    float _3151 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2891].w)) * _1384) * 0.949999988079071044921875);
    float _3152 = _3151 * _3151;
    float _3153 = cbLight._m0[_2891].x + _1461;
    float _3154 = cbLight._m0[_2891].y + _1462;
    float _3155 = cbLight._m0[_2891].z + _1463;
    float _3159 = inversesqrt(dot(vec3(_3153, _3154, _3155), vec3(_3153, _3154, _3155)));
    float _3160 = _3159 * _3153;
    float _3161 = _3159 * _3154;
    float _3162 = _3159 * _3155;
    float _3163 = dot(vec3(_1380, _1381, _1382), vec3(cbLight._m0[_2891].xyz));
    float _5527 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
    float _3166 = isnan(1.0) ? _5527 : (isnan(_5527) ? 1.0 : min(_5527, 1.0));
    float _5538 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
    float _3167 = isnan(1.0) ? _5538 : (isnan(_5538) ? 1.0 : min(_5538, 1.0));
    float _3168 = dot(vec3(_1380, _1381, _1382), vec3(_3160, _3161, _3162));
    float _5549 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
    float _3171 = isnan(1.0) ? _5549 : (isnan(_5549) ? 1.0 : min(_5549, 1.0));
    float _3172 = dot(vec3(cbLight._m0[_2891].xyz), vec3(_3160, _3161, _3162));
    float _5560 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
    float _3176 = _3152 * _3152;
    float _3180 = ((_3171 * _3171) * (_3176 + (-1.0))) + 1.0;
    float _3188 = exp2(log2(1.0 - (isnan(1.0) ? _5560 : (isnan(_5560) ? 1.0 : min(_5560, 1.0)))) * 5.0);
    float _3189 = 0.959999978542327880859375 - _1541;
    float _3191 = 0.959999978542327880859375 - _1542;
    float _3192 = 0.959999978542327880859375 - _1543;
    float _3199 = 1.0 - _3152;
    float _3210 = (0.5 / (((_3167 * ((_3166 * _3199) + _3152)) + 9.9999999392252902907785028219223e-09) + (((_3167 * _3199) + _3152) * _3166))) * _3166;
    float _5571 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
    float _3212 = (isnan(1.0) ? _5571 : (isnan(_5571) ? 1.0 : min(_5571, 1.0))) * (_3176 / ((_3180 * _3180) * 3.141590118408203125));
    uint _3226 = _2891 + 9u;
    float _3237 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2931].w)) * _1384) * 0.949999988079071044921875);
    float _3238 = _3237 * _3237;
    float _3239 = cbLight._m0[_2931].x + _1461;
    float _3240 = cbLight._m0[_2931].y + _1462;
    float _3241 = cbLight._m0[_2931].z + _1463;
    float _3245 = inversesqrt(dot(vec3(_3239, _3240, _3241), vec3(_3239, _3240, _3241)));
    float _3246 = _3245 * _3239;
    float _3247 = _3245 * _3240;
    float _3248 = _3245 * _3241;
    float _3249 = dot(vec3(_1380, _1381, _1382), vec3(cbLight._m0[_2931].xyz));
    float _5582 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
    float _3252 = isnan(1.0) ? _5582 : (isnan(_5582) ? 1.0 : min(_5582, 1.0));
    float _3253 = dot(vec3(_1380, _1381, _1382), vec3(_3246, _3247, _3248));
    float _5593 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
    float _3256 = isnan(1.0) ? _5593 : (isnan(_5593) ? 1.0 : min(_5593, 1.0));
    float _3257 = dot(vec3(cbLight._m0[_2931].xyz), vec3(_3246, _3247, _3248));
    float _5604 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
    float _3261 = _3238 * _3238;
    float _3265 = ((_3256 * _3256) * (_3261 + (-1.0))) + 1.0;
    float _3272 = exp2(log2(1.0 - (isnan(1.0) ? _5604 : (isnan(_5604) ? 1.0 : min(_5604, 1.0)))) * 5.0);
    float _3279 = 1.0 - _3238;
    float _3289 = (0.5 / (((_3167 * ((_3252 * _3279) + _3238)) + 9.9999999392252902907785028219223e-09) + (((_3167 * _3279) + _3238) * _3252))) * _3252;
    float _5615 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
    float _3291 = (isnan(1.0) ? _5615 : (isnan(_5615) ? 1.0 : min(_5615, 1.0))) * (_3261 / ((_3265 * _3265) * 3.141590118408203125));
    float _3301 = (((((_3272 * _3189) + _1544) * cbLight._m0[_3226].x) * _3291) * _2914) + ((((cbLight._m0[_3138].x * _2880) * ((_3188 * _3189) + _1544)) * _3212) * _2927);
    float _3302 = (((((_3272 * _3191) + _1546) * cbLight._m0[_3226].y) * _3291) * _2914) + ((((cbLight._m0[_3138].y * _2882) * ((_3188 * _3191) + _1546)) * _3212) * _2927);
    float _3303 = (((((_3272 * _3192) + _1547) * cbLight._m0[_3226].z) * _3291) * _2914) + ((((cbLight._m0[_3138].z * _2884) * ((_3188 * _3192) + _1547)) * _3212) * _2927);
    float _3359;
    float _3361;
    float _3363;
    if (_2967)
    {
        _3359 = _3301;
        _3361 = _3302;
        _3363 = _3303;
    }
    else
    {
        uint _3365 = _2891 + 2u;
        uint _3369 = _2891 + 10u;
        float _3383 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3365].w)) * _1384) * 0.949999988079071044921875);
        float _3384 = _3383 * _3383;
        float _3385 = cbLight._m0[_3365].x + _1461;
        float _3386 = cbLight._m0[_3365].y + _1462;
        float _3387 = cbLight._m0[_3365].z + _1463;
        float _3391 = inversesqrt(dot(vec3(_3385, _3386, _3387), vec3(_3385, _3386, _3387)));
        float _3392 = _3391 * _3385;
        float _3393 = _3391 * _3386;
        float _3394 = _3391 * _3387;
        float _3395 = dot(vec3(_1380, _1381, _1382), vec3(cbLight._m0[_3365].xyz));
        float _5626 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
        float _3398 = isnan(1.0) ? _5626 : (isnan(_5626) ? 1.0 : min(_5626, 1.0));
        float _3399 = dot(vec3(_1380, _1381, _1382), vec3(_3392, _3393, _3394));
        float _5637 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
        float _3402 = isnan(1.0) ? _5637 : (isnan(_5637) ? 1.0 : min(_5637, 1.0));
        float _3403 = dot(vec3(cbLight._m0[_3365].xyz), vec3(_3392, _3393, _3394));
        float _5648 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
        float _3407 = _3384 * _3384;
        float _3411 = ((_3402 * _3402) * (_3407 + (-1.0))) + 1.0;
        float _3418 = exp2(log2(1.0 - (isnan(1.0) ? _5648 : (isnan(_5648) ? 1.0 : min(_5648, 1.0)))) * 5.0);
        float _3425 = 1.0 - _3384;
        float _3435 = (0.5 / (((_3167 * ((_3398 * _3425) + _3384)) + 9.9999999392252902907785028219223e-09) + (((_3167 * _3425) + _3384) * _3398))) * _3398;
        float _5659 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
        float _3437 = (isnan(1.0) ? _5659 : (isnan(_5659) ? 1.0 : min(_5659, 1.0))) * (_3407 / ((_3411 * _3411) * 3.141590118408203125));
        float _3438 = isnan(1.0) ? _2906 : (isnan(_2906) ? 1.0 : min(_2906, 1.0));
        _3359 = (((((_3418 * _3189) + _1544) * cbLight._m0[_3369].x) * _3437) * _3438) + _3301;
        _3361 = (((((_3418 * _3191) + _1546) * cbLight._m0[_3369].y) * _3437) * _3438) + _3302;
        _3363 = (((((_3418 * _3192) + _1547) * cbLight._m0[_3369].z) * _3437) * _3438) + _3303;
    }
    float _3469;
    float _3471;
    float _3473;
    if (_3076)
    {
        _3469 = _3359;
        _3471 = _3361;
        _3473 = _3363;
    }
    else
    {
        uint _3480 = _2891 + 3u;
        uint _3484 = _2891 + 11u;
        float _3498 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3480].w)) * _1384) * 0.949999988079071044921875);
        float _3499 = _3498 * _3498;
        float _3500 = cbLight._m0[_3480].x + _1461;
        float _3501 = cbLight._m0[_3480].y + _1462;
        float _3502 = cbLight._m0[_3480].z + _1463;
        float _3506 = inversesqrt(dot(vec3(_3500, _3501, _3502), vec3(_3500, _3501, _3502)));
        float _3507 = _3506 * _3500;
        float _3508 = _3506 * _3501;
        float _3509 = _3506 * _3502;
        float _3510 = dot(vec3(_1380, _1381, _1382), vec3(cbLight._m0[_3480].xyz));
        float _5675 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
        float _3513 = isnan(1.0) ? _5675 : (isnan(_5675) ? 1.0 : min(_5675, 1.0));
        float _3514 = dot(vec3(_1380, _1381, _1382), vec3(_3507, _3508, _3509));
        float _5686 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
        float _3517 = isnan(1.0) ? _5686 : (isnan(_5686) ? 1.0 : min(_5686, 1.0));
        float _3518 = dot(vec3(cbLight._m0[_3480].xyz), vec3(_3507, _3508, _3509));
        float _5697 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
        float _3522 = _3499 * _3499;
        float _3526 = ((_3517 * _3517) * (_3522 + (-1.0))) + 1.0;
        float _3533 = exp2(log2(1.0 - (isnan(1.0) ? _5697 : (isnan(_5697) ? 1.0 : min(_5697, 1.0)))) * 5.0);
        float _3540 = 1.0 - _3499;
        float _3550 = (0.5 / (((_3167 * ((_3513 * _3540) + _3499)) + 9.9999999392252902907785028219223e-09) + (((_3167 * _3540) + _3499) * _3513))) * _3513;
        float _5708 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
        float _3552 = (isnan(1.0) ? _5708 : (isnan(_5708) ? 1.0 : min(_5708, 1.0))) * (_3522 / ((_3526 * _3526) * 3.141590118408203125));
        float _3553 = isnan(1.0) ? _2907 : (isnan(_2907) ? 1.0 : min(_2907, 1.0));
        _3469 = (((((_3533 * _3189) + _1544) * cbLight._m0[_3484].x) * _3552) * _3553) + _3359;
        _3471 = (((((_3533 * _3191) + _1546) * cbLight._m0[_3484].y) * _3552) * _3553) + _3361;
        _3473 = (((((_3533 * _3192) + _1547) * cbLight._m0[_3484].z) * _3552) * _3553) + _3363;
    }
    float _3618;
    float _3620;
    float _3622;
    float _3624;
    float _3626;
    float _3628;
    if (_2889.y == 0u)
    {
        uvec4 _3574 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3575 = _3574.x;
        uint _3586 = uint((float(_3574.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1482) / _3575))) + floor(float(uint(cbSceneParam._m0[85u].x * _1481) / _3575)));
        float _3596 = (log2(_2667 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3597 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
        uint _3600 = uint(isnan(14.0) ? _3597 : (isnan(_3597) ? 14.0 : min(_3597, 14.0)));
        uvec4 _3605 = texelFetch(g_lightClusterGridBuffer, int(((_3600 << 2u) + (_3586 << 6u)) >> 2u));
        uint _3606 = _3605.x;
        uint _3607 = _3574.z;
        float _3687;
        float _3689;
        float _3691;
        float _3693;
        float _3695;
        float _3697;
        if (((((1u << ((_3607 >> 4u) & 15u)) + 4294967295u) & _3606) == 0u) || ((_3607 & 240u) == 0u))
        {
            _3687 = 0.0;
            _3689 = 0.0;
            _3691 = 0.0;
            _3693 = 0.0;
            _3695 = 0.0;
            _3697 = 0.0;
        }
        else
        {
            float _3688;
            float _3690;
            float _3692;
            float _3694;
            float _3696;
            float _3698;
            float _3839 = 0.0;
            float _3840 = 0.0;
            float _3841 = 0.0;
            float _3842 = 0.0;
            float _3843 = 0.0;
            float _3844 = 0.0;
            uint _3845 = 0u;
            uint _3854;
            bool _3855;
            for (;;)
            {
                _3854 = texelFetch(g_lightClassification, int((((_3600 << 5u) + (_3586 << 9u)) + (_3845 << 2u)) >> 2u)).x;
                _3855 = _3854 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3855)
                {
                    frontier_phi_73_pred = _3844;
                    frontier_phi_73_pred_1 = _3843;
                    frontier_phi_73_pred_2 = _3842;
                    frontier_phi_73_pred_3 = _3841;
                    frontier_phi_73_pred_4 = _3840;
                    frontier_phi_73_pred_5 = _3839;
                }
                else
                {
                    float _3984;
                    float _3985;
                    float _3986;
                    float _3987;
                    float _3988;
                    float _3989;
                    uint _3990;
                    _3984 = _3839;
                    _3985 = _3840;
                    _3986 = _3841;
                    _3987 = _3842;
                    _3988 = _3843;
                    _3989 = _3844;
                    _3990 = _3854;
                    float _3911;
                    float _3912;
                    float _3913;
                    float _3914;
                    float _3915;
                    float _3916;
                    for (;;)
                    {
                        uint _3994 = uint(findLSB(_3990)) + (_3845 << 5u);
                        uint _3991 = (_3990 + 4294967295u) & _3990;
                        uint _3996 = _3994 * 48u;
                        vec4 _4010 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3996)).x, texelFetch(g_PointLightRenderingBuffer, int(_3996 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3996 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3996 + 3u)).x));
                        uint _4016 = (_3994 * 48u) + 4u;
                        vec4 _4029 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_4016)).x, texelFetch(g_PointLightRenderingBuffer, int(_4016 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_4016 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_4016 + 3u)).x));
                        uint _4035 = (_3994 * 48u) + 8u;
                        vec3 _4046 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_4035)).x, texelFetch(g_PointLightRenderingBuffer, int(_4035 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_4035 + 2u)).x));
                        float _4050 = _4010.x - _2665;
                        float _4051 = _4010.y - _2666;
                        float _4052 = _4010.z - _2667;
                        float _4053 = dot(vec3(_4050, _4051, _4052), vec3(_4050, _4051, _4052));
                        float _4056 = inversesqrt(_4053);
                        float _4057 = _4056 * _4050;
                        float _4058 = _4056 * _4051;
                        float _4059 = _4056 * _4052;
                        float _4060 = dot(vec3(_1500, _1503, _1506), vec3(_4057, _4058, _4059));
                        float _4065 = 1.0 - (_4053 * _4010.w);
                        float _5734 = isnan(0.0) ? _4065 : (isnan(_4065) ? 0.0 : max(_4065, 0.0));
                        float _4066 = isnan(1.0) ? _5734 : (isnan(_5734) ? 1.0 : min(_5734, 1.0));
                        float _4067 = sqrt(_4053) * _4029.w;
                        float _4069 = 1.39999997615814208984375 / (_4067 + 1.39999997615814208984375);
                        float _4070 = _4069 * _4069;
                        float _4073 = ((1.0 - _4070) * _4060) + _4070;
                        float _4076 = _4067 * _4067;
                        float _4080 = ((isnan(0.0) ? _4073 : (isnan(_4073) ? 0.0 : max(_4073, 0.0))) * _4066) / ((_4076 * 0.699999988079071044921875) + 1.0);
                        float _4084 = (-0.0) - _2665;
                        float _4085 = (-0.0) - _2666;
                        float _4086 = (-0.0) - _2667;
                        float _4090 = inversesqrt(dot(vec3(_4084, _4085, _4086), vec3(_4084, _4085, _4086)));
                        float _4091 = _4090 * _4084;
                        float _4092 = _4090 * _4085;
                        float _4093 = _4090 * _4086;
                        float _4100 = exp2(log2(1.0 / ((_4076 * 3.5) + 5.0)) * 0.25);
                        float _4101 = 1.0 - _1575;
                        float _4108 = sqrt(1.0 - ((1.0 - (_4101 * _4101)) * (1.0 - (_4100 * _4100))));
                        float _4109 = _4108 * _4108;
                        float _4110 = _4109 * _4109;
                        float _4111 = _4091 + _4057;
                        float _4112 = _4092 + _4058;
                        float _4113 = _4093 + _4059;
                        float _4117 = inversesqrt(dot(vec3(_4111, _4112, _4113), vec3(_4111, _4112, _4113)));
                        float _4121 = dot(vec3(_1500, _1503, _1506), vec3(_4091, _4092, _4093));
                        float _5750 = isnan(0.0) ? _4121 : (isnan(_4121) ? 0.0 : max(_4121, 0.0));
                        float _4124 = isnan(1.0) ? _5750 : (isnan(_5750) ? 1.0 : min(_5750, 1.0));
                        float _4125 = dot(vec3(_1500, _1503, _1506), vec3(_4117 * _4111, _4117 * _4112, _4117 * _4113));
                        float _5761 = isnan(0.0) ? _4125 : (isnan(_4125) ? 0.0 : max(_4125, 0.0));
                        float _4128 = isnan(1.0) ? _5761 : (isnan(_5761) ? 1.0 : min(_5761, 1.0));
                        float _4132 = ((_4128 * _4128) * (_4110 + (-1.0))) + 1.0;
                        float _4133 = _4069 * _4109;
                        float _4134 = _4133 * _4133;
                        float _4137 = ((1.0 - _4134) * _4060) + _4134;
                        float _5772 = isnan(0.0) ? _4137 : (isnan(_4137) ? 0.0 : max(_4137, 0.0));
                        float _4138 = isnan(1.0) ? _5772 : (isnan(_5772) ? 1.0 : min(_5772, 1.0));
                        float _4139 = 1.0 - _4109;
                        float _4149 = (0.5 / (((_4138 * ((_4124 * _4139) + _4109)) + 9.9999999392252902907785028219223e-09) + (((_4138 * _4139) + _4109) * _4124))) * _4138;
                        float _5783 = isnan(0.0) ? _4149 : (isnan(_4149) ? 0.0 : max(_4149, 0.0));
                        float _4160 = (((_4110 * 3.1415927410125732421875) * (isnan(1.0) ? _5783 : (isnan(_5783) ? 1.0 : min(_5783, 1.0)))) / ((_4132 * _4132) * ((_4076 * 2.1991131305694580078125) + 3.141590118408203125))) * _4066;
                        _3914 = (_4080 * _4029.x) + _3987;
                        _3915 = (_4080 * _4029.y) + _3988;
                        _3916 = (_4080 * _4029.z) + _3989;
                        _3911 = (_4160 * _4046.x) + _3984;
                        _3912 = (_4160 * _4046.y) + _3985;
                        _3913 = (_4160 * _4046.z) + _3986;
                        if (_3991 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3984 = _3911;
                            _3985 = _3912;
                            _3986 = _3913;
                            _3987 = _3914;
                            _3988 = _3915;
                            _3989 = _3916;
                            _3990 = _3991;
                        }
                    }
                    frontier_phi_73_pred = _3916;
                    frontier_phi_73_pred_1 = _3915;
                    frontier_phi_73_pred_2 = _3914;
                    frontier_phi_73_pred_3 = _3913;
                    frontier_phi_73_pred_4 = _3912;
                    frontier_phi_73_pred_5 = _3911;
                }
                _3698 = frontier_phi_73_pred;
                _3696 = frontier_phi_73_pred_1;
                _3694 = frontier_phi_73_pred_2;
                _3692 = frontier_phi_73_pred_3;
                _3690 = frontier_phi_73_pred_4;
                _3688 = frontier_phi_73_pred_5;
                uint _3846 = _3845 + 1u;
                if (_3846 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3839 = _3688;
                    _3840 = _3690;
                    _3841 = _3692;
                    _3842 = _3694;
                    _3843 = _3696;
                    _3844 = _3698;
                    _3845 = _3846;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3687 = _3688;
            _3689 = _3690;
            _3691 = _3692;
            _3693 = _3694;
            _3695 = _3696;
            _3697 = _3698;
        }
        uvec4 _3701 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3702 = _3701.z;
        uint _3704 = (_3702 >> 8u) & 15u;
        float _3807;
        float _3809;
        float _3811;
        float _3813;
        float _3815;
        float _3817;
        if (((4294967295u << _3704) & _3606) == 0u)
        {
            _3807 = _3687;
            _3809 = _3689;
            _3811 = _3691;
            _3813 = _3693;
            _3815 = _3695;
            _3817 = _3697;
        }
        else
        {
            float _3832 = inversesqrt(dot(vec3(_2665, _2666, _2667), vec3(_2665, _2666, _2667)));
            float _3833 = _3832 * _2665;
            float _3834 = _3832 * _2666;
            float _3835 = _3832 * _2667;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3704 < ((_3702 >> 12u) & 15u))
            {
                float _3808;
                float _3810;
                float _3812;
                float _3814;
                float _3816;
                float _3818;
                float _3967 = _3687;
                float _3968 = _3689;
                float _3969 = _3691;
                float _3970 = _3693;
                float _3971 = _3695;
                float _3972 = _3697;
                uint _3973 = _3704;
                uint _3982;
                bool _3983;
                for (;;)
                {
                    _3982 = texelFetch(g_lightClassification, int((((_3600 << 5u) + (_3586 << 9u)) + (_3973 << 2u)) >> 2u)).x;
                    _3983 = _3982 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3983)
                    {
                        frontier_phi_84_pred = _3971;
                        frontier_phi_84_pred_1 = _3970;
                        frontier_phi_84_pred_2 = _3969;
                        frontier_phi_84_pred_3 = _3968;
                        frontier_phi_84_pred_4 = _3967;
                        frontier_phi_84_pred_5 = _3972;
                    }
                    else
                    {
                        float _4174;
                        float _4175;
                        float _4176;
                        float _4177;
                        float _4178;
                        float _4179;
                        float _4467;
                        float _4468;
                        float _4469;
                        float _4470;
                        float _4471;
                        float _4472;
                        float _4187 = _3967;
                        float _4188 = _3968;
                        float _4189 = _3969;
                        float _4190 = _3970;
                        float _4191 = _3971;
                        float _4192 = _3972;
                        uint _4193 = _3982;
                        uint _4194;
                        vec4 _4219;
                        float _4220;
                        vec4 _4235;
                        vec3 _4247;
                        vec4 _4262;
                        vec4 _4277;
                        float _4323;
                        bool _4324;
                        for (;;)
                        {
                            uint _4204 = ((_3973 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_4193));
                            _4194 = (_4193 + 4294967295u) & _4193;
                            uint _4206 = _4204 * 40u;
                            _4219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4206 + 3u)).x));
                            _4220 = _4219.w;
                            uint _4222 = (_4204 * 40u) + 4u;
                            _4235 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4222)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4222 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4222 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4222 + 3u)).x));
                            uint _4237 = (_4204 * 40u) + 8u;
                            _4247 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_4237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4237 + 2u)).x));
                            uint _4249 = (_4204 * 40u) + 16u;
                            _4262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4249 + 3u)).x));
                            uint _4264 = (_4204 * 40u) + 20u;
                            _4277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4264 + 3u)).x));
                            uint _4279 = (_4204 * 40u) + 24u;
                            vec4 _4292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4279 + 3u)).x));
                            uint _4298 = (_4204 * 40u) + 28u;
                            vec4 _4311 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4298 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4298 + 3u)).x));
                            _4323 = fma(_2667, _4311.z, fma(_2666, _4311.y, _4311.x * _2665)) + _4311.w;
                            _4324 = !((fma(_2667, _4292.z, fma(_2666, _4292.y, _4292.x * _2665)) + _4292.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_4324)
                            {
                                float _4351 = _4219.x - _2665;
                                float _4352 = _4219.y - _2666;
                                float _4353 = _4219.z - _2667;
                                float _4354 = dot(vec3(_4351, _4352, _4353), vec3(_4351, _4352, _4353));
                                float _4357 = inversesqrt(_4354);
                                float _4358 = _4357 * _4351;
                                float _4359 = _4357 * _4352;
                                float _4360 = _4357 * _4353;
                                float _4364 = 1.0 - (_4354 / (_4220 * _4220));
                                float _5794 = isnan(0.0) ? _4364 : (isnan(_4364) ? 0.0 : max(_4364, 0.0));
                                float _4365 = isnan(1.0) ? _5794 : (isnan(_5794) ? 1.0 : min(_5794, 1.0));
                                float _4369 = sqrt(_4354) * _4235.w;
                                float _4371 = 1.39999997615814208984375 / (_4369 + 1.39999997615814208984375);
                                float _4372 = _4371 * _4371;
                                float _4375 = ((1.0 - _4372) * dot(vec3(_4358, _4359, _4360), vec3(_1500, _1503, _1506))) + _4372;
                                float _4378 = _4369 * _4369;
                                float _4382 = (fma(_2667, _4262.z, fma(_2666, _4262.y, _4262.x * _2665)) + _4262.w) / _4323;
                                float _4383 = (fma(_2667, _4277.z, fma(_2666, _4277.y, _4277.x * _2665)) + _4277.w) / _4323;
                                float _4387 = 1.0 - dot(vec2(_4382, _4383), vec2(_4382, _4383));
                                float _5810 = isnan(0.0) ? _4387 : (isnan(_4387) ? 0.0 : max(_4387, 0.0));
                                float _4388 = isnan(1.0) ? _5810 : (isnan(_5810) ? 1.0 : min(_5810, 1.0));
                                float _4389 = _4388 * (((isnan(0.0) ? _4375 : (isnan(_4375) ? 0.0 : max(_4375, 0.0))) * _4365) / ((_4378 * 0.699999988079071044921875) + 1.0));
                                float _4401 = exp2(log2(1.0 / ((_4378 * 3.5) + 5.0)) * 0.25);
                                float _4402 = 1.0 - _1575;
                                float _4409 = sqrt(1.0 - ((1.0 - (_4402 * _4402)) * (1.0 - (_4401 * _4401))));
                                float _4410 = _4409 * _4409;
                                float _4411 = _4410 * _4410;
                                float _4412 = _4358 - _3833;
                                float _4413 = _4359 - _3834;
                                float _4414 = _4360 - _3835;
                                float _4418 = inversesqrt(dot(vec3(_4412, _4413, _4414), vec3(_4412, _4413, _4414)));
                                float _4422 = dot(vec3(_1500, _1503, _1506), vec3((-0.0) - _3833, (-0.0) - _3834, (-0.0) - _3835));
                                float _5821 = isnan(0.0) ? _4422 : (isnan(_4422) ? 0.0 : max(_4422, 0.0));
                                float _4425 = isnan(1.0) ? _5821 : (isnan(_5821) ? 1.0 : min(_5821, 1.0));
                                float _4426 = dot(vec3(_1500, _1503, _1506), vec3(_4418 * _4412, _4418 * _4413, _4418 * _4414));
                                float _5832 = isnan(0.0) ? _4426 : (isnan(_4426) ? 0.0 : max(_4426, 0.0));
                                float _4429 = isnan(1.0) ? _5832 : (isnan(_5832) ? 1.0 : min(_5832, 1.0));
                                float _4433 = ((_4429 * _4429) * (_4411 + (-1.0))) + 1.0;
                                float _4434 = _4371 * _4410;
                                float _4435 = _4434 * _4434;
                                float _4441 = ((1.0 - _4435) * dot(vec3(_1500, _1503, _1506), vec3(_4358, _4359, _4360))) + _4435;
                                float _5843 = isnan(0.0) ? _4441 : (isnan(_4441) ? 0.0 : max(_4441, 0.0));
                                float _4442 = isnan(1.0) ? _5843 : (isnan(_5843) ? 1.0 : min(_5843, 1.0));
                                float _4443 = 1.0 - _4410;
                                float _4453 = (0.5 / (((_4442 * ((_4425 * _4443) + _4410)) + 9.9999999392252902907785028219223e-09) + (((_4442 * _4443) + _4410) * _4425))) * _4442;
                                float _5854 = isnan(0.0) ? _4453 : (isnan(_4453) ? 0.0 : max(_4453, 0.0));
                                float _4463 = (_4388 * _4365) * (((_4411 * 3.1415927410125732421875) * (isnan(1.0) ? _5854 : (isnan(_5854) ? 1.0 : min(_5854, 1.0)))) / ((_4433 * _4433) * ((_4378 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _4389 * _4235.y;
                                frontier_phi_90_pred_1 = _4389 * _4235.x;
                                frontier_phi_90_pred_2 = _4463 * _4247.z;
                                frontier_phi_90_pred_3 = _4463 * _4247.y;
                                frontier_phi_90_pred_4 = _4463 * _4247.x;
                                frontier_phi_90_pred_5 = _4389 * _4235.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _4471 = frontier_phi_90_pred;
                            _4470 = frontier_phi_90_pred_1;
                            _4469 = frontier_phi_90_pred_2;
                            _4468 = frontier_phi_90_pred_3;
                            _4467 = frontier_phi_90_pred_4;
                            _4472 = frontier_phi_90_pred_5;
                            _4177 = _4470 + _4190;
                            _4178 = _4471 + _4191;
                            _4179 = _4472 + _4192;
                            _4174 = _4467 + _4187;
                            _4175 = _4468 + _4188;
                            _4176 = _4469 + _4189;
                            if (_4194 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _4187 = _4174;
                                _4188 = _4175;
                                _4189 = _4176;
                                _4190 = _4177;
                                _4191 = _4178;
                                _4192 = _4179;
                                _4193 = _4194;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _4178;
                        frontier_phi_84_pred_1 = _4177;
                        frontier_phi_84_pred_2 = _4176;
                        frontier_phi_84_pred_3 = _4175;
                        frontier_phi_84_pred_4 = _4174;
                        frontier_phi_84_pred_5 = _4179;
                    }
                    _3816 = frontier_phi_84_pred;
                    _3814 = frontier_phi_84_pred_1;
                    _3812 = frontier_phi_84_pred_2;
                    _3810 = frontier_phi_84_pred_3;
                    _3808 = frontier_phi_84_pred_4;
                    _3818 = frontier_phi_84_pred_5;
                    uint _3974 = _3973 + 1u;
                    if (_3974 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3967 = _3808;
                        _3968 = _3810;
                        _3969 = _3812;
                        _3970 = _3814;
                        _3971 = _3816;
                        _3972 = _3818;
                        _3973 = _3974;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3818;
                frontier_phi_65_66_ladder_1 = _3814;
                frontier_phi_65_66_ladder_2 = _3816;
                frontier_phi_65_66_ladder_3 = _3810;
                frontier_phi_65_66_ladder_4 = _3808;
                frontier_phi_65_66_ladder_5 = _3812;
            }
            else
            {
                frontier_phi_65_66_ladder = _3697;
                frontier_phi_65_66_ladder_1 = _3693;
                frontier_phi_65_66_ladder_2 = _3695;
                frontier_phi_65_66_ladder_3 = _3689;
                frontier_phi_65_66_ladder_4 = _3687;
                frontier_phi_65_66_ladder_5 = _3691;
            }
            _3807 = frontier_phi_65_66_ladder_4;
            _3809 = frontier_phi_65_66_ladder_3;
            _3811 = frontier_phi_65_66_ladder_5;
            _3813 = frontier_phi_65_66_ladder_1;
            _3815 = frontier_phi_65_66_ladder_2;
            _3817 = frontier_phi_65_66_ladder;
        }
        float _3822 = isnan(1.0) ? _1559 : (isnan(_1559) ? 1.0 : min(_1559, 1.0));
        _3618 = (_3822 * _3813) + _3131;
        _3620 = (_3822 * _3815) + _3133;
        _3622 = (_3822 * _3817) + _3135;
        _3624 = ((_3807 * _1544) * _3822) + _3469;
        _3626 = ((_3809 * _1546) * _3822) + _3471;
        _3628 = ((_3811 * _1547) * _3822) + _3473;
    }
    else
    {
        _3618 = _3131;
        _3620 = _3133;
        _3622 = _3135;
        _3624 = _3469;
        _3626 = _3471;
        _3628 = _3473;
    }
    float _5870 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
    float _5881 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
    float _5892 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
    float _5903 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
    float _3646 = ((isnan(1.0) ? _5870 : (isnan(_5870) ? 1.0 : min(_5870, 1.0))) * (_3618 + ((isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0))) * _1559))) + ((_3624 + ((isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0))) * _2399)) * cbPerFrame._m0[3u].x);
    float _3647 = ((isnan(1.0) ? _5881 : (isnan(_5881) ? 1.0 : min(_5881, 1.0))) * (_3620 + ((isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0))) * _1559))) + ((_3626 + ((isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0))) * _2399)) * cbPerFrame._m0[3u].x);
    float _3648 = ((isnan(1.0) ? _5892 : (isnan(_5892) ? 1.0 : min(_5892, 1.0))) * (_3622 + ((isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0))) * _1559))) + ((_3628 + ((isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0))) * _2399)) * cbPerFrame._m0[3u].x);
    float _3653 = cbInstanceData._m0[_1519 + 6u].w * (isnan(1.0) ? _5903 : (isnan(_5903) ? 1.0 : min(_5903, 1.0)));
    float _3658 = _1481 / cbSceneParam._m0[86u].x;
    float _3659 = _1482 / cbSceneParam._m0[86u].y;
    vec4 _3673 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3658, _3659, (log2((isnan(cbSceneParam._m0[77u].w) ? _1404 : (isnan(_1404) ? cbSceneParam._m0[77u].w : min(_1404, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3675 = _3673.x;
    float _3676 = _3673.y;
    float _3677 = _3673.z;
    float _3678 = _3673.w;
    float _3749;
    float _3751;
    float _3753;
    float _3755;
    if (_1404 > cbSceneParam._m0[78u].w)
    {
        float _3712 = isnan(_1404) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1404 : min(cbSceneParam._m0[80u].w, _1404));
        float _3713 = _3712 / _1404;
        float _3724 = _3713 * _1454;
        float _3725 = _1455 * _3713;
        float _3726 = (-0.0) - _3725;
        float _3727 = _3713 * _1456;
        float _3729 = (cbSceneParam._m0[77u].w * _3726) / _3712;
        float _3730 = _3729 + cbSceneParam._m0[79u].w;
        float _3731 = cbSceneParam._m0[79u].w - _3725;
        float _3737 = sqrt(((_3724 * _3724) + (_3725 * _3725)) + (_3727 * _3727));
        float _3740 = (1.0 - (cbSceneParam._m0[77u].w / _3712)) * _3737;
        float _3745 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3747 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3924;
        if (abs((_3726 - _3729) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3924 = ((((_3730 > 0.0) ? exp2(_3745 * _3730) : (2.0 - exp2(_3747 * _3730))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3740;
        }
        else
        {
            float _3868 = 1.0 / cbSceneParam._m0[80u].x;
            float _3869 = isnan(_3731) ? _3730 : (isnan(_3730) ? _3731 : max(_3730, _3731));
            float _3870 = isnan(_3731) ? _3730 : (isnan(_3730) ? _3731 : min(_3730, _3731));
            float _3879 = isnan(0.0) ? _3869 : (isnan(_3869) ? 0.0 : min(_3869, 0.0));
            float _3880 = isnan(0.0) ? _3870 : (isnan(_3870) ? 0.0 : min(_3870, 0.0));
            _3924 = ((abs(_3737 / _3726) * cbSceneParam._m0[80u].y) * ((((_3879 - _3880) * 2.0) - ((exp2(_3745 * (isnan(0.0) ? _3869 : (isnan(_3869) ? 0.0 : max(_3869, 0.0)))) - exp2(_3745 * (isnan(0.0) ? _3870 : (isnan(_3870) ? 0.0 : max(_3870, 0.0))))) * _3868)) - ((exp2(_3747 * _3879) - exp2(_3747 * _3880)) * _3868))) + (_3740 * cbSceneParam._m0[80u].z);
        }
        vec4 _3926 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3658, _3659, 1.0), 0.0);
        float _3935 = exp2((_3924 * (-1.44269502162933349609375)) * (1.0 - _3926.w));
        float _3936 = log2(_3935);
        float _3952 = log2(_3678);
        _3749 = (exp2(_3952 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3936 * cbSceneParam._m0[78u].x)) * _3926.x) / cbSceneParam._m0[78u].x)) + _3675;
        _3751 = (exp2(_3952 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3936 * cbSceneParam._m0[78u].y)) * _3926.y) / cbSceneParam._m0[78u].y)) + _3676;
        _3753 = (exp2(_3952 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3936 * cbSceneParam._m0[78u].z)) * _3926.z) / cbSceneParam._m0[78u].z)) + _3677;
        _3755 = _3935 * _3678;
    }
    else
    {
        _3749 = _3675;
        _3751 = _3676;
        _3753 = _3677;
        _3755 = _3678;
    }
    bool _3962;
    vec4 _3765;
    vec4 _3787;
    float _3789;
    float _3793;
    float _3794;
    float _3795;
    float _3796;
    bool _3806;
    for (;;)
    {
        _3765 = cbMatDynParam._m0[0u];
        float _3767 = roundEven(_3765.y);
        bool _3768 = _3767 == 3.0;
        float _3769 = log2(_3755);
        float _3776 = exp2(_3769 * cbSceneParam._m0[78u].x) * _3646;
        float _3777 = exp2(_3769 * cbSceneParam._m0[78u].y) * _3647;
        float _3778 = exp2(_3769 * cbSceneParam._m0[78u].z) * _3648;
        float _3785 = _1470 + (-0.5);
        _3787 = cbMtdParam._m0[1u];
        _3789 = _3787.y * _3785;
        float _3792 = (_3767 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3793 = _3792 * (_3768 ? _3776 : (_3776 + (cbSceneParam._m0[72u].w * _3749)));
        _3794 = _3792 * (_3768 ? _3777 : (_3777 + (cbSceneParam._m0[72u].w * _3751)));
        _3795 = _3792 * (_3768 ? _3778 : (_3778 + (cbSceneParam._m0[72u].w * _3753)));
        _3796 = _3785 * 0.999000012874603271484375;
        _3806 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3806)
        {
            if ((cbInstanceData._m0[_1519 + 7u].x + _3796) < 0.5)
            {
                _3962 = true;
                break;
            }
        }
        uint _3903 = _1520 + uint(_3765.w);
        if ((cbInstanceData._m0[_3903].w < 1.0) && ((cbInstanceData._m0[_3903].w + _3796) < 0.5))
        {
            _3962 = true;
            break;
        }
        if ((_3789 + _633) < _3787.x)
        {
            _3962 = true;
            break;
        }
        _3962 = false;
        break;
    }
    float _4165;
    if (_3962)
    {
        discard_state = true;
        _4165 = 0.0;
    }
    else
    {
        _4165 = _3653;
    }
    SV_Target.x = _3793;
    SV_Target.y = _3794;
    SV_Target.z = _3795;
    SV_Target.w = _4165;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3653;
    discard_exit();
}


