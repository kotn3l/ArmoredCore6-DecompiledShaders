#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_18;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1916;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _248 = _247 * _239;
    float _249 = _247 * _240;
    float _250 = _247 * _241;
    float _260 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _261 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _262 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _266 = inversesqrt(dot(vec3(_260, _261, _262), vec3(_260, _261, _262)));
    float _267 = _266 * _260;
    float _268 = _266 * _261;
    float _269 = _266 * _262;
    float _273 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _274 = _273 * NORMAL.x;
    float _275 = _273 * NORMAL.y;
    float _276 = _273 * NORMAL.z;
    float _280 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _281 = _280 * TANGENT.x;
    float _282 = _280 * TANGENT.y;
    float _283 = _280 * TANGENT.z;
    float _287 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _288 = _287 * TANGENT_2.x;
    float _289 = _287 * TANGENT_2.y;
    float _290 = _287 * TANGENT_2.z;
    float _295;
    float _296;
    float _297;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _295 = (-0.0) - _274;
        _296 = (-0.0) - _275;
        _297 = (-0.0) - _276;
    }
    else
    {
        _295 = _274;
        _296 = _275;
        _297 = _276;
    }
    vec4 _323 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _335 = 1.0 - ((1.0 - _323.z) * 1.39999997615814208984375);
    float _4526 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _336 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
    float _338 = 1.0 - ((1.0 - _323.x) * 1.39999997615814208984375);
    float _4537 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _339 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
    float _341 = 1.0 - ((1.0 - _323.y) * 1.39999997615814208984375);
    float _4548 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _342 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
    float _344 = (_339 + _336) + _342;
    float _351 = (_344 * (1.0 - cbMtdParam._m0[20u].x)) + cbMtdParam._m0[20u].x;
    float _352 = (_344 * (1.0 - cbMtdParam._m0[20u].y)) + cbMtdParam._m0[20u].y;
    float _353 = (_344 * (1.0 - cbMtdParam._m0[20u].z)) + cbMtdParam._m0[20u].z;
    vec4 _378 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _387 = 1.0 - ((1.0 - _378.x) * 1.39999997615814208984375);
    float _4559 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
    float _398 = (_388 * ((cbMtdParam._m0[9u].x - _351) + ((1.0 - cbMtdParam._m0[9u].x) * _344))) + _351;
    float _399 = (_388 * ((cbMtdParam._m0[9u].y - _352) + ((1.0 - cbMtdParam._m0[9u].y) * _344))) + _352;
    float _400 = (_388 * ((cbMtdParam._m0[9u].z - _353) + ((1.0 - cbMtdParam._m0[9u].z) * _344))) + _353;
    float _414 = 1.0 - ((1.0 - _378.y) * 1.39999997615814208984375);
    float _4570 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _415 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
    float _425 = (((cbMtdParam._m0[18u].x - _398) + ((1.0 - cbMtdParam._m0[18u].x) * _344)) * _415) + _398;
    float _426 = (((cbMtdParam._m0[18u].y - _399) + ((1.0 - cbMtdParam._m0[18u].y) * _344)) * _415) + _399;
    float _427 = (((cbMtdParam._m0[18u].z - _400) + ((1.0 - cbMtdParam._m0[18u].z) * _344)) * _415) + _400;
    float _441 = 1.0 - ((1.0 - _378.z) * 1.39999997615814208984375);
    float _4581 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _442 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
    vec4 _470 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.z) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.w) + cbTextureTilingScale._m0[10u].w));
    float _472 = _470.x;
    float _473 = _472 * cbMtdParam._m0[25u].w;
    float _487 = ((cbMtdParam._m0[22u].z * (-1.39999997615814208984375)) * ((TEXCOORD_5.w - _473) + (cbMtdParam._m0[23u].y * TEXCOORD_5.w))) + 1.0;
    float _4592 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _489 = 1.0 - (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0)));
    float _497 = ((cbMtdParam._m0[22u].y * (-1.39999997615814208984375)) * ((TEXCOORD_5.z - _473) + (cbMtdParam._m0[23u].z * TEXCOORD_5.z))) + 1.0;
    float _4603 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _499 = 1.0 - (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0)));
    vec4 _517 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _519 = _517.x;
    float _520 = _517.y;
    float _521 = _517.z;
    float _522 = cbMtdParam._m0[10u].x * _499;
    float _524 = cbMtdParam._m0[10u].y * _499;
    float _526 = cbMtdParam._m0[10u].z * _499;
    float _542 = ((_519 * (cbMtdParam._m0[17u].x - _522)) * _489) + (_522 * _519);
    float _543 = ((_520 * (cbMtdParam._m0[17u].y - _524)) * _489) + (_524 * _520);
    float _544 = ((_521 * (cbMtdParam._m0[17u].z - _526)) * _489) + (_526 * _521);
    float _564 = cbMtdParam._m0[23u].x * (-1.39999997615814208984375);
    float _568 = (_564 * ((TEXCOORD_9.x - _473) + (cbMtdParam._m0[22u].x * TEXCOORD_9.x))) + 1.0;
    float _569 = (_564 * ((TEXCOORD_9.y - _473) + (cbMtdParam._m0[22u].x * TEXCOORD_9.y))) + 1.0;
    float _570 = (_564 * ((TEXCOORD_9.z - _473) + (cbMtdParam._m0[22u].x * TEXCOORD_9.z))) + 1.0;
    float _4614 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _4625 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _4636 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _582 = (1.0 - cbMtdParam._m0[24u].y) + _339;
    float _585 = _582 * (1.0 - (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))));
    float _586 = _582 * (1.0 - (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))));
    float _587 = ((_339 + 1.0) - cbMtdParam._m0[24u].y) * (1.0 - (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))));
    float _597 = _499 + _489;
    float _598 = _597 + _585;
    float _599 = _597 + _586;
    float _600 = _597 + _587;
    float _601 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _602 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _603 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _604 = isnan(1.0) ? _601 : (isnan(_601) ? 1.0 : min(_601, 1.0));
    float _605 = isnan(1.0) ? _602 : (isnan(_602) ? 1.0 : min(_602, 1.0));
    float _606 = isnan(1.0) ? _603 : (isnan(_603) ? 1.0 : min(_603, 1.0));
    vec4 _624 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _629 = _624.w;
    float _630 = _624.x * cbMtdParam._m0[13u].x;
    float _631 = _624.y * cbMtdParam._m0[13u].y;
    float _632 = _624.z * cbMtdParam._m0[13u].z;
    vec4 _650 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w));
    float _664 = (((_650.x * cbMtdParam._m0[14u].x) - _630) * _339) + _630;
    float _665 = (((_650.y * cbMtdParam._m0[14u].y) - _631) * _339) + _631;
    float _666 = (((_650.z * cbMtdParam._m0[14u].z) - _632) * _339) + _632;
    vec4 _684 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w));
    float _698 = (((_684.x * cbMtdParam._m0[15u].x) - _664) * _342) + _664;
    float _699 = (((_684.y * cbMtdParam._m0[15u].y) - _665) * _342) + _665;
    float _700 = (((_684.z * cbMtdParam._m0[15u].z) - _666) * _342) + _666;
    vec4 _718 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _732 = (((_718.x * cbMtdParam._m0[16u].x) - _698) * _336) + _698;
    float _733 = (((_718.y * cbMtdParam._m0[16u].y) - _699) * _336) + _699;
    float _734 = (((_718.z * cbMtdParam._m0[16u].z) - _700) * _336) + _700;
    float _754 = ((_732 - (_732 * _604)) + (((_604 * 4.55000019073486328125) * ((_585 * ((cbMtdParam._m0[11u].x * _519) - _542)) + _542)) * _732)) * ((((cbMtdParam._m0[19u].x - _425) + ((1.0 - cbMtdParam._m0[19u].x) * _344)) * _442) + _425);
    float _755 = ((_733 - (_733 * _605)) + (((_605 * 4.55000019073486328125) * ((_586 * ((cbMtdParam._m0[11u].y * _520) - _543)) + _543)) * _733)) * ((((cbMtdParam._m0[19u].y - _426) + ((1.0 - cbMtdParam._m0[19u].y) * _344)) * _442) + _426);
    float _756 = ((_734 - (_606 * _734)) + (((_606 * 4.55000019073486328125) * ((_587 * ((cbMtdParam._m0[11u].z * _521) - _544)) + _544)) * _734)) * ((((cbMtdParam._m0[19u].z - _427) + ((1.0 - cbMtdParam._m0[19u].z) * _344)) * _442) + _427);
    float _762 = (((1.0 - TEXCOORD_5.y) * (-2.7999999523162841796875)) * cbMtdParam._m0[25u].y) + 1.0;
    float _4677 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _774 = ((((_472 + (-1.0)) + ((1.0 - TEXCOORD_5.x) * 2.0)) * (-1.39999997615814208984375)) * cbMtdParam._m0[25u].x) + 1.0;
    float _4688 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    vec4 _789 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _795 = (_789.x * 2.0) + (-1.0);
    float _796 = (_789.y * 2.0) + (-1.0);
    float _797 = dot(vec2(_795, _796), vec2(_795, _796));
    float _4699 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _802 = sqrt(1.0 - (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0))));
    float _805 = fma(_802, _295, fma(_796, _281, _795 * _248));
    float _808 = fma(_802, _296, fma(_796, _282, _795 * _249));
    float _811 = fma(_802, _297, fma(_796, _283, _795 * _250));
    float _820 = exp2(log2(inversesqrt(dot(vec3(_805, _808, _811), vec3(_805, _808, _811))) * _808) * cbMtdParam._m0[24u].w) * cbMtdParam._m0[24u].z;
    float _4710 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _823 = ((isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) + (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0)))) * (1.0 - (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))));
    float _4721 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _824 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
    float _826 = 3.0 - (_824 * 2.0);
    float _831 = _824 * _824;
    float _838 = ((_831 * (cbMtdParam._m0[12u].x - _754)) * _826) + _754;
    float _839 = ((_831 * (cbMtdParam._m0[12u].y - _755)) * _826) + _755;
    float _840 = ((_831 * (cbMtdParam._m0[12u].z - _756)) * _826) + _756;
    float _853 = ((cbMtdParam._m0[21u].w - cbMtdParam._m0[26u].x) * _604) + cbMtdParam._m0[26u].x;
    float _856 = ((cbMtdParam._m0[21u].x - _853) * _339) + _853;
    float _859 = ((cbMtdParam._m0[21u].y - _856) * _342) + _856;
    float _862 = ((cbMtdParam._m0[21u].z - _859) * _336) + _859;
    vec4 _874 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.z) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.w) + cbTextureTilingScale._m0[16u].w));
    float _878 = _874.z;
    float _881 = (_874.x * 2.0) + (-1.0);
    float _882 = (_874.y * 2.0) + (-1.0);
    float _883 = dot(vec2(_881, _882), vec2(_881, _882));
    float _4732 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _888 = sqrt(1.0 - (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))));
    float _891 = fma(_888, _295, fma(_882, _288, _881 * _267));
    float _894 = fma(_888, _296, fma(_882, _289, _881 * _268));
    float _897 = fma(_888, _297, fma(_882, _290, _881 * _269));
    float _901 = inversesqrt(dot(vec3(_891, _894, _897), vec3(_891, _894, _897)));
    float _902 = _901 * _891;
    float _903 = _901 * _894;
    float _904 = _901 * _897;
    vec4 _917 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_18, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _924 = (_917.x * 2.0) + (-1.0);
    float _925 = (_917.y * 2.0) + (-1.0);
    float _926 = dot(vec2(_924, _925), vec2(_924, _925));
    float _4743 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _934 = ((_917.z - _878) * _823) + _878;
    vec4 _947 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _953 = (_947.x * 2.0) + (-1.0);
    float _954 = (_947.y * 2.0) + (-1.0);
    float _955 = dot(vec2(_953, _954), vec2(_953, _954));
    float _4754 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _960 = sqrt(1.0 - (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))));
    float _963 = fma(_960, _295, fma(_954, _288, _953 * _267));
    float _966 = fma(_960, _296, fma(_954, _289, _953 * _268));
    float _969 = fma(_960, _297, fma(_954, _290, _953 * _269));
    float _973 = inversesqrt(dot(vec3(_963, _966, _969), vec3(_963, _966, _969)));
    float _974 = _973 * _963;
    float _975 = _973 * _966;
    float _976 = _973 * _969;
    float _979 = fma(_976, _250, fma(_975, _249, _974 * _248));
    float _982 = fma(_976, _283, fma(_975, _282, _974 * _281));
    float _985 = fma(_976, _297, fma(_975, _296, _974 * _295));
    float _989 = inversesqrt(dot(vec3(_979, _982, _985), vec3(_979, _982, _985)));
    vec4 _1002 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _1008 = (_1002.x * 2.0) + (-1.0);
    float _1009 = (_1002.y * 2.0) + (-1.0);
    float _1010 = dot(vec2(_1008, _1009), vec2(_1008, _1009));
    float _4765 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _1015 = sqrt(1.0 - (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))));
    float _1018 = fma(_1015, _295, fma(_1009, _288, _1008 * _267));
    float _1021 = fma(_1015, _296, fma(_1009, _289, _1008 * _268));
    float _1024 = fma(_1015, _297, fma(_1009, _290, _1008 * _269));
    float _1028 = inversesqrt(dot(vec3(_1018, _1021, _1024), vec3(_1018, _1021, _1024)));
    float _1029 = _1028 * _1018;
    float _1030 = _1028 * _1021;
    float _1031 = _1028 * _1024;
    float _1034 = fma(_1031, _250, fma(_1030, _249, _1029 * _248));
    float _1037 = fma(_1031, _283, fma(_1030, _282, _1029 * _281));
    float _1040 = fma(_1031, _297, fma(_1030, _296, _1029 * _295));
    float _1044 = inversesqrt(dot(vec3(_1034, _1037, _1040), vec3(_1034, _1037, _1040)));
    vec4 _1059 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _1065 = (_1059.x * 2.0) + (-1.0);
    float _1066 = (_1059.y * 2.0) + (-1.0);
    float _1067 = dot(vec2(_1065, _1066), vec2(_1065, _1066));
    float _4776 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _1072 = sqrt(1.0 - (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))));
    float _1075 = fma(_1072, _295, fma(_1066, _288, _1065 * _267));
    float _1078 = fma(_1072, _296, fma(_1066, _289, _1065 * _268));
    float _1081 = fma(_1072, _297, fma(_1066, _290, _1065 * _269));
    float _1085 = inversesqrt(dot(vec3(_1075, _1078, _1081), vec3(_1075, _1078, _1081)));
    float _1086 = _1085 * _1075;
    float _1087 = _1085 * _1078;
    float _1088 = _1085 * _1081;
    float _1091 = fma(_1088, _250, fma(_1087, _249, _1086 * _248));
    float _1094 = fma(_1088, _283, fma(_1087, _282, _1086 * _281));
    float _1097 = fma(_1088, _297, fma(_1087, _296, _1086 * _295));
    float _1101 = inversesqrt(dot(vec3(_1091, _1094, _1097), vec3(_1091, _1094, _1097)));
    float _1107 = fma(_904, _250, fma(_903, _249, _902 * _248));
    float _1110 = fma(_904, _283, fma(_903, _282, _902 * _281));
    float _1113 = fma(_904, _297, fma(_903, _296, _902 * _295));
    float _1117 = inversesqrt(dot(vec3(_1107, _1110, _1113), vec3(_1107, _1110, _1113)));
    float _1118 = _1117 * _1107;
    float _1119 = _1117 * _1110;
    float _1120 = _1117 * _1113;
    float _1127 = (((_1101 * _1091) - _1118) * _339) + _1118;
    float _1128 = (((_1101 * _1094) - _1119) * _339) + _1119;
    float _1129 = (((_1101 * _1097) - _1120) * _339) + _1120;
    vec4 _1142 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _1148 = (_1142.x * 2.0) + (-1.0);
    float _1149 = (_1142.y * 2.0) + (-1.0);
    float _1150 = dot(vec2(_1148, _1149), vec2(_1148, _1149));
    float _4787 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
    float _1155 = sqrt(1.0 - (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0))));
    float _1158 = fma(_1155, _295, fma(_1149, _288, _1148 * _267));
    float _1161 = fma(_1155, _296, fma(_1149, _289, _1148 * _268));
    float _1164 = fma(_1155, _297, fma(_1149, _290, _1148 * _269));
    float _1168 = inversesqrt(dot(vec3(_1158, _1161, _1164), vec3(_1158, _1161, _1164)));
    float _1169 = _1168 * _1158;
    float _1170 = _1168 * _1161;
    float _1171 = _1168 * _1164;
    float _1174 = fma(_1171, _250, fma(_1170, _249, _1169 * _248));
    float _1177 = fma(_1171, _283, fma(_1170, _282, _1169 * _281));
    float _1180 = fma(_1171, _297, fma(_1170, _296, _1169 * _295));
    float _1184 = inversesqrt(dot(vec3(_1174, _1177, _1180), vec3(_1174, _1177, _1180)));
    float _1194 = (((_1184 * _1174) - _1127) * _342) + _1127;
    float _1195 = (((_1184 * _1177) - _1128) * _342) + _1128;
    float _1196 = (((_1184 * _1180) - _1129) * _342) + _1129;
    vec4 _1209 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _1215 = (_1209.x * 2.0) + (-1.0);
    float _1216 = (_1209.y * 2.0) + (-1.0);
    float _1217 = dot(vec2(_1215, _1216), vec2(_1215, _1216));
    float _4798 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
    float _1222 = sqrt(1.0 - (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))));
    float _1225 = fma(_1222, _295, fma(_1216, _288, _1215 * _267));
    float _1228 = fma(_1222, _296, fma(_1216, _289, _1215 * _268));
    float _1231 = fma(_1222, _297, fma(_1216, _290, _1215 * _269));
    float _1235 = inversesqrt(dot(vec3(_1225, _1228, _1231), vec3(_1225, _1228, _1231)));
    float _1236 = _1235 * _1225;
    float _1237 = _1235 * _1228;
    float _1238 = _1235 * _1231;
    float _1241 = fma(_1238, _250, fma(_1237, _249, _1236 * _248));
    float _1244 = fma(_1238, _283, fma(_1237, _282, _1236 * _281));
    float _1247 = fma(_1238, _297, fma(_1237, _296, _1236 * _295));
    float _1251 = inversesqrt(dot(vec3(_1241, _1244, _1247), vec3(_1241, _1244, _1247)));
    float _1261 = (((_1251 * _1247) - _1196) * _336) + _1196;
    vec4 _1273 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _1279 = (_1273.x * 2.0) + (-1.0);
    float _1280 = (_1273.y * 2.0) + (-1.0);
    float _1281 = dot(vec2(_1279, _1280), vec2(_1279, _1280));
    float _4809 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
    float _1286 = sqrt(1.0 - (isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0))));
    float _1289 = fma(_1286, _295, fma(_1280, _288, _1279 * _267));
    float _1292 = fma(_1286, _296, fma(_1280, _289, _1279 * _268));
    float _1295 = fma(_1286, _297, fma(_1280, _290, _1279 * _269));
    float _1299 = inversesqrt(dot(vec3(_1289, _1292, _1295), vec3(_1289, _1292, _1295)));
    float _1300 = _1299 * _1289;
    float _1301 = _1299 * _1292;
    float _1302 = _1299 * _1295;
    float _1305 = fma(_1302, _250, fma(_1301, _249, _1300 * _248));
    float _1308 = fma(_1302, _283, fma(_1301, _282, _1300 * _281));
    float _1311 = fma(_1302, _297, fma(_1301, _296, _1300 * _295));
    float _1315 = inversesqrt(dot(vec3(_1305, _1308, _1311), vec3(_1305, _1308, _1311)));
    float _1348 = (((((((_1034 * _489) * _1044) * cbMtdParam._m0[23u].w) + ((((_598 * _582) * _979) * _989) * cbMtdParam._m0[24u].x)) + _1194) + (((_1251 * _1241) - _1194) * _336)) + (((_1305 * _499) * _1315) * cbMtdParam._m0[22u].w)) + (cbMtdParam._m0[25u].z * _795);
    float _1353 = (((((((_1037 * _489) * _1044) * cbMtdParam._m0[23u].w) + ((((_599 * _582) * _982) * _989) * cbMtdParam._m0[24u].x)) + _1195) + (((_1251 * _1244) - _1195) * _336)) + (((_1308 * _499) * _1315) * cbMtdParam._m0[22u].w)) + (cbMtdParam._m0[25u].z * _796);
    float _1360 = ((_924 - _1348) * _823) + _1348;
    float _1361 = (_823 * (_925 - _1353)) + _1353;
    float _1362 = (_823 * (sqrt(1.0 - (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0)))) - _1261)) + _1261;
    float _1365 = fma(_1362, _295, fma(_1361, _281, _1360 * _248));
    float _1368 = fma(_1362, _296, fma(_1361, _282, _1360 * _249));
    float _1371 = fma(_1362, _297, fma(_1361, _283, _1360 * _250));
    float _1375 = inversesqrt(dot(vec3(_1365, _1368, _1371), vec3(_1365, _1368, _1371)));
    float _1376 = _1375 * _1365;
    float _1377 = _1375 * _1368;
    float _1378 = _1375 * _1371;
    float _4820 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _1379 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
    float _4831 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _1380 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
    float _4842 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _4853 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _4864 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _4875 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _1384 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
    float _1400 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1440 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1450 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1440);
    float _1451 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1440);
    float _1452 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1440);
    float _1456 = inversesqrt(dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452)));
    float _1457 = _1450 * _1456;
    float _1458 = _1451 * _1456;
    float _1459 = _1452 * _1456;
    float _1465 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1466 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1484 = fma(_1378, cbSceneParam._m0[5u].z, fma(_1377, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1376));
    float _1487 = fma(_1378, cbSceneParam._m0[6u].z, fma(_1377, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1376));
    float _1490 = fma(_1378, cbSceneParam._m0[7u].z, fma(_1377, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1376));
    uint _1503 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1505 = (_1503 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1511 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0)))) * cbInstanceData._m0[_1505].x;
    float _1512 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0)))) * cbInstanceData._m0[_1505].y;
    float _1513 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0)))) * cbInstanceData._m0[_1505].z;
    float _4886 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
    float _1514 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
    float _4897 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
    float _1515 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
    float _4908 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
    float _1516 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
    float _1517 = 1.0 - _1384;
    float _1518 = _1514 * _1517;
    float _1519 = _1515 * _1517;
    float _1520 = _1516 * _1517;
    float _1525 = (_1514 + (-0.039999999105930328369140625)) * _1384;
    float _1526 = (_1515 + (-0.039999999105930328369140625)) * _1384;
    float _1527 = (_1516 + (-0.039999999105930328369140625)) * _1384;
    float _1528 = _1525 + 0.039999999105930328369140625;
    float _1530 = _1526 + 0.039999999105930328369140625;
    float _1531 = _1527 + 0.039999999105930328369140625;
    vec4 _1540 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1465, cbSceneParam._m0[86u].y * _1466));
    float _1543 = _1540.x * TEXCOORD_9.w;
    float _1544 = dot(vec3(_1376, _1377, _1378), vec3(_1457, _1458, _1459));
    float _1547 = _1544 * 2.0;
    float _1551 = (_1547 * _1376) - _1457;
    float _1552 = (_1547 * _1377) - _1458;
    float _1553 = (_1547 * _1378) - _1459;
    float _1557 = abs(dot(vec3(_1457, _1458, _1459), vec3(_1376, _1377, _1378)));
    float _4919 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
    float _1559 = sqrt(_1380);
    float _1571 = exp2((_1559 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1559 * 3.0));
    float _1577 = (1.0 - _1571) * ((_1559 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1578 = _1571 * _1559;
    float _1606 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1610 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1614 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1915;
    float _1917;
    float _1918;
    float _1919;
    float _1920;
    float _1921;
    float _1922;
    float _1923;
    float _1924;
    float _1925;
    float _1926;
    float _1927;
    float _1928;
    float _1929;
    float _1930;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1640 = fma(_1614, cbModelParam._m0[26u].z, fma(_1610, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1606));
        float _1644 = fma(_1614, cbModelParam._m0[27u].z, fma(_1610, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1606));
        float _1648 = fma(_1614, cbModelParam._m0[28u].z, fma(_1610, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1606));
        float _1673 = _1606 + _1376;
        float _1674 = _1610 + _1377;
        float _1675 = _1614 + _1378;
        float _1685 = fma(_1675, cbModelParam._m0[26u].z, fma(_1674, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1673)) - _1640;
        float _1686 = fma(_1675, cbModelParam._m0[27u].z, fma(_1674, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1673)) - _1644;
        float _1687 = fma(_1675, cbModelParam._m0[28u].z, fma(_1674, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1673)) - _1648;
        float _1691 = inversesqrt(dot(vec3(_1685, _1686, _1687), vec3(_1685, _1686, _1687)));
        float _1704 = ((_1691 * _1685) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1640 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1705 = ((_1691 * _1686) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1644 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1706 = ((_1691 * _1687) / cbModelParam._m0[34u].z) + ((((((_1648 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1709 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1704, _1705, _1706), 0.0);
        vec4 _1716 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1704, _1705, _1706), 0.0);
        vec4 _1723 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1704, _1705, _1706), 0.0);
        vec4 _1730 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1704, _1705, _1706), 0.0);
        float _1743 = exp2((_1709.w + (-0.5)) * 20.0) * 2.0;
        float _1744 = _1743 * (_1709.x + (-0.5));
        float _1745 = _1743 * (_1709.y + (-0.5));
        float _1746 = _1743 * (_1709.z + (-0.5));
        float _1753 = exp2((_1716.w + (-0.5)) * 20.0) * 2.0;
        float _1754 = _1753 * (_1716.x + (-0.5));
        float _1755 = _1753 * (_1716.y + (-0.5));
        float _1756 = _1753 * (_1716.z + (-0.5));
        float _1763 = exp2((_1723.w + (-0.5)) * 20.0) * 2.0;
        float _1764 = _1763 * (_1723.x + (-0.5));
        float _1765 = _1763 * (_1723.y + (-0.5));
        float _1766 = _1763 * (_1723.z + (-0.5));
        float _1773 = exp2((_1730.w + (-0.5)) * 20.0) * 2.0;
        float _1774 = _1773 * (_1730.x + (-0.5));
        float _1775 = _1773 * (_1730.y + (-0.5));
        float _1776 = _1773 * (_1730.z + (-0.5));
        float _1777 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1778 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1779 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1780 = _1744 * 0.5;
        float _1781 = _1754 * 0.5;
        float _1782 = _1764 * 0.5;
        float _1783 = dot(vec3(_1780, _1781, _1782), vec3(_1780, _1781, _1782));
        float _1788 = (_1783 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1783);
        float _1797 = (dot(vec3(_1376, _1377, _1378), vec3(_1788 * _1780, _1788 * _1781, _1788 * _1782)) + 1.0) * 0.5;
        float _4945 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1807 = sqrt(((_1781 * _1781) + (_1780 * _1780)) + (_1782 * _1782)) / (_1777 + 9.9999997473787516355514526367188e-06);
        float _4956 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1808 = isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0));
        float _1809 = _1808 * 2.0;
        float _1813 = (1.0 - _1808) / (_1808 + 1.0);
        float _4967 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1814 = isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0));
        float _1823 = ((((1.0 - _1814) * (_1809 + 2.0)) * exp2(log2(isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0))) * (_1809 + 1.0))) + _1814) * _1777;
        float _1824 = _1745 * 0.5;
        float _1825 = _1755 * 0.5;
        float _1826 = _1765 * 0.5;
        float _1827 = dot(vec3(_1824, _1825, _1826), vec3(_1824, _1825, _1826));
        float _1832 = (_1827 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1827);
        float _1840 = (dot(vec3(_1376, _1377, _1378), vec3(_1832 * _1824, _1832 * _1825, _1832 * _1826)) + 1.0) * 0.5;
        float _4978 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1849 = sqrt(((_1825 * _1825) + (_1824 * _1824)) + (_1826 * _1826)) / (_1778 + 9.9999997473787516355514526367188e-06);
        float _4989 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1850 = isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0));
        float _1851 = _1850 * 2.0;
        float _1855 = (1.0 - _1850) / (_1850 + 1.0);
        float _5000 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1856 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
        float _1865 = ((((1.0 - _1856) * (_1851 + 2.0)) * exp2(log2(isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0))) * (_1851 + 1.0))) + _1856) * _1778;
        float _1866 = _1746 * 0.5;
        float _1867 = _1756 * 0.5;
        float _1868 = _1766 * 0.5;
        float _1869 = dot(vec3(_1866, _1867, _1868), vec3(_1866, _1867, _1868));
        float _1874 = (_1869 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1869);
        float _1882 = (dot(vec3(_1376, _1377, _1378), vec3(_1874 * _1866, _1874 * _1867, _1874 * _1868)) + 1.0) * 0.5;
        float _5011 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
        float _1891 = sqrt(((_1867 * _1867) + (_1866 * _1866)) + (_1868 * _1868)) / (_1779 + 9.9999997473787516355514526367188e-06);
        float _5022 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
        float _1892 = isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0));
        float _1893 = _1892 * 2.0;
        float _1897 = (1.0 - _1892) / (_1892 + 1.0);
        float _5033 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
        float _1898 = isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0));
        float _1907 = ((((1.0 - _1898) * (_1893 + 2.0)) * exp2(log2(isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0))) * (_1893 + 1.0))) + _1898) * _1779;
        _1915 = _1746;
        _1917 = _1745;
        _1918 = _1744;
        _1919 = _1756;
        _1920 = _1755;
        _1921 = _1754;
        _1922 = _1766;
        _1923 = _1765;
        _1924 = _1764;
        _1925 = _1779;
        _1926 = _1778;
        _1927 = _1777;
        _1928 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0)));
        _1929 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0)));
        _1930 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0)));
    }
    else
    {
        _1915 = _1916;
        _1917 = _1916;
        _1918 = _1916;
        _1919 = _1916;
        _1920 = _1916;
        _1921 = _1916;
        _1922 = _1916;
        _1923 = _1916;
        _1924 = _1916;
        _1925 = _1916;
        _1926 = _1916;
        _1927 = _1916;
        _1928 = 0.0;
        _1929 = 0.0;
        _1930 = 0.0;
    }
    float _2225;
    float _2226;
    float _2227;
    float _2228;
    float _2229;
    float _2230;
    float _2231;
    float _2232;
    float _2233;
    float _2234;
    float _2235;
    float _2236;
    float _2237;
    float _2238;
    float _2239;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1956 = fma(_1614, cbModelParam._m0[30u].z, fma(_1610, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1606));
        float _1960 = fma(_1614, cbModelParam._m0[31u].z, fma(_1610, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1606));
        float _1964 = fma(_1614, cbModelParam._m0[32u].z, fma(_1610, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1606));
        float _1987 = _1606 + _1376;
        float _1988 = _1610 + _1377;
        float _1989 = _1614 + _1378;
        float _1999 = fma(_1989, cbModelParam._m0[30u].z, fma(_1988, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1987)) - _1956;
        float _2000 = fma(_1989, cbModelParam._m0[31u].z, fma(_1988, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1987)) - _1960;
        float _2001 = fma(_1989, cbModelParam._m0[32u].z, fma(_1988, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1987)) - _1964;
        float _2005 = inversesqrt(dot(vec3(_1999, _2000, _2001), vec3(_1999, _2000, _2001)));
        float _2018 = ((_2005 * _1999) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1956 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _2019 = ((_2005 * _2000) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1960 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _2020 = ((_2005 * _2001) / cbModelParam._m0[35u].z) + ((((((_1964 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _2022 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_2018, _2019, _2020), 0.0);
        vec4 _2029 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_2018, _2019, _2020), 0.0);
        vec4 _2036 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_2018, _2019, _2020), 0.0);
        vec4 _2043 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_2018, _2019, _2020), 0.0);
        float _2055 = exp2((_2022.w + (-0.5)) * 20.0) * 2.0;
        float _2056 = _2055 * (_2022.x + (-0.5));
        float _2057 = _2055 * (_2022.y + (-0.5));
        float _2058 = _2055 * (_2022.z + (-0.5));
        float _2065 = exp2((_2029.w + (-0.5)) * 20.0) * 2.0;
        float _2066 = _2065 * (_2029.x + (-0.5));
        float _2067 = _2065 * (_2029.y + (-0.5));
        float _2068 = _2065 * (_2029.z + (-0.5));
        float _2075 = exp2((_2036.w + (-0.5)) * 20.0) * 2.0;
        float _2076 = _2075 * (_2036.x + (-0.5));
        float _2077 = _2075 * (_2036.y + (-0.5));
        float _2078 = _2075 * (_2036.z + (-0.5));
        float _2085 = exp2((_2043.w + (-0.5)) * 20.0) * 2.0;
        float _2086 = _2085 * (_2043.x + (-0.5));
        float _2087 = _2085 * (_2043.y + (-0.5));
        float _2088 = _2085 * (_2043.z + (-0.5));
        float _2089 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2090 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2091 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2092 = _2056 * 0.5;
        float _2093 = _2066 * 0.5;
        float _2094 = _2076 * 0.5;
        float _2095 = dot(vec3(_2092, _2093, _2094), vec3(_2092, _2093, _2094));
        float _2100 = (_2095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2095);
        float _2108 = (dot(vec3(_1376, _1377, _1378), vec3(_2100 * _2092, _2100 * _2093, _2100 * _2094)) + 1.0) * 0.5;
        float _5074 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2117 = sqrt(((_2093 * _2093) + (_2092 * _2092)) + (_2094 * _2094)) / (_2089 + 9.9999997473787516355514526367188e-06);
        float _5085 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2118 = isnan(1.0) ? _5085 : (isnan(_5085) ? 1.0 : min(_5085, 1.0));
        float _2119 = _2118 * 2.0;
        float _2123 = (1.0 - _2118) / (_2118 + 1.0);
        float _5096 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2124 = isnan(1.0) ? _5096 : (isnan(_5096) ? 1.0 : min(_5096, 1.0));
        float _2133 = ((((1.0 - _2124) * (_2119 + 2.0)) * exp2(log2(isnan(1.0) ? _5074 : (isnan(_5074) ? 1.0 : min(_5074, 1.0))) * (_2119 + 1.0))) + _2124) * _2089;
        float _2134 = _2057 * 0.5;
        float _2135 = _2067 * 0.5;
        float _2136 = _2077 * 0.5;
        float _2137 = dot(vec3(_2134, _2135, _2136), vec3(_2134, _2135, _2136));
        float _2142 = (_2137 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2137);
        float _2150 = (dot(vec3(_1376, _1377, _1378), vec3(_2142 * _2134, _2142 * _2135, _2142 * _2136)) + 1.0) * 0.5;
        float _5107 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2159 = sqrt(((_2135 * _2135) + (_2134 * _2134)) + (_2136 * _2136)) / (_2090 + 9.9999997473787516355514526367188e-06);
        float _5118 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2160 = isnan(1.0) ? _5118 : (isnan(_5118) ? 1.0 : min(_5118, 1.0));
        float _2161 = _2160 * 2.0;
        float _2165 = (1.0 - _2160) / (_2160 + 1.0);
        float _5129 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2166 = isnan(1.0) ? _5129 : (isnan(_5129) ? 1.0 : min(_5129, 1.0));
        float _2175 = ((((1.0 - _2166) * (_2161 + 2.0)) * exp2(log2(isnan(1.0) ? _5107 : (isnan(_5107) ? 1.0 : min(_5107, 1.0))) * (_2161 + 1.0))) + _2166) * _2090;
        float _2176 = _2058 * 0.5;
        float _2177 = _2068 * 0.5;
        float _2178 = _2078 * 0.5;
        float _2179 = dot(vec3(_2176, _2177, _2178), vec3(_2176, _2177, _2178));
        float _2184 = (_2179 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2179);
        float _2192 = (dot(vec3(_1376, _1377, _1378), vec3(_2184 * _2176, _2184 * _2177, _2184 * _2178)) + 1.0) * 0.5;
        float _5140 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2201 = sqrt(((_2177 * _2177) + (_2176 * _2176)) + (_2178 * _2178)) / (_2091 + 9.9999997473787516355514526367188e-06);
        float _5151 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2202 = isnan(1.0) ? _5151 : (isnan(_5151) ? 1.0 : min(_5151, 1.0));
        float _2203 = _2202 * 2.0;
        float _2207 = (1.0 - _2202) / (_2202 + 1.0);
        float _5162 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2208 = isnan(1.0) ? _5162 : (isnan(_5162) ? 1.0 : min(_5162, 1.0));
        float _2217 = ((((1.0 - _2208) * (_2203 + 2.0)) * exp2(log2(isnan(1.0) ? _5140 : (isnan(_5140) ? 1.0 : min(_5140, 1.0))) * (_2203 + 1.0))) + _2208) * _2091;
        _2225 = _2058;
        _2226 = _2057;
        _2227 = _2056;
        _2228 = _2068;
        _2229 = _2067;
        _2230 = _2066;
        _2231 = _2078;
        _2232 = _2077;
        _2233 = _2076;
        _2234 = _2091;
        _2235 = _2090;
        _2236 = _2089;
        _2237 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0)));
        _2238 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0)));
        _2239 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0)));
    }
    else
    {
        _2225 = _1916;
        _2226 = _1916;
        _2227 = _1916;
        _2228 = _1916;
        _2229 = _1916;
        _2230 = _1916;
        _2231 = _1916;
        _2232 = _1916;
        _2233 = _1916;
        _2234 = _1916;
        _2235 = _1916;
        _2236 = _1916;
        _2237 = 0.0;
        _2238 = 0.0;
        _2239 = 0.0;
    }
    float _2249 = (cbModelParam._m0[1u].x * (_2237 - _1928)) + _1928;
    float _2250 = (cbModelParam._m0[1u].x * (_2238 - _1929)) + _1929;
    float _2251 = (cbModelParam._m0[1u].x * (_2239 - _1930)) + _1930;
    float _2272 = fma(_2251, cbSceneParam._m0[89u].z, fma(_2250, cbSceneParam._m0[89u].y, _2249 * cbSceneParam._m0[89u].x));
    float _2275 = fma(_2251, cbSceneParam._m0[90u].z, fma(_2250, cbSceneParam._m0[90u].y, _2249 * cbSceneParam._m0[90u].x));
    float _2278 = fma(_2251, cbSceneParam._m0[91u].z, fma(_2250, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2249));
    float _2293 = _1551 * 0.5;
    float _2294 = _1552 * 0.5;
    float _2295 = _1553 * 0.5;
    float _2296 = dot(vec4(_2293, _2294, _2295, 1.0), vec4(_2227, _2230, _2233, _2236));
    float _2299 = dot(vec4(_2293, _2294, _2295, 1.0), vec4(_2226, _2229, _2232, _2235));
    float _2302 = dot(vec4(_2293, _2294, _2295, 1.0), vec4(_2225, _2228, _2231, _2234));
    float _2336;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2309 = dot(vec4(_2293, _2294, _2295, 1.0), vec4(_1915, _1919, _1922, _1925));
        float _2313 = dot(vec4(_2293, _2294, _2295, 1.0), vec4(_1917, _1920, _1923, _1926));
        float _2317 = dot(vec4(_2293, _2294, _2295, 1.0), vec4(_1918, _1921, _1924, _1927));
        float _2324 = dot(vec4(cbModelParam._m0[39u]), vec4(_2293, _2294, _2295, 1.0));
        _2336 = dot(vec3(isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0)), isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0)), isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2324) ? 0.0 : (isnan(0.0) ? _2324 : max(0.0, _2324))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2336 = 1.0;
    }
    float _2347;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2338 = dot(vec4(cbModelParam._m0[40u]), vec4(_2293, _2294, _2295, 1.0));
        _2347 = dot(vec3(isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0)), isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0)), isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2338) ? 0.0 : (isnan(0.0) ? _2338 : max(0.0, _2338))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2347 = 1.0;
    }
    float _2351 = (_2347 * cbModelParam._m0[1u].x) + (_2336 * (1.0 - cbModelParam._m0[1u].x));
    float _2361 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1380);
    float _2362 = isnan(_2361) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2361 : min(cbModelParam._m0[25u].z, _2361));
    float _2442;
    float _2444;
    float _2446;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2409 = fma(_1614, cbModelParam._m0[13u].z, fma(_1610, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1606)) + cbModelParam._m0[13u].w;
        float _2413 = fma(_1614, cbModelParam._m0[14u].z, fma(_1610, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1606)) + cbModelParam._m0[14u].w;
        float _2417 = fma(_1614, cbModelParam._m0[15u].z, fma(_1610, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1606)) + cbModelParam._m0[15u].w;
        float _2420 = fma(_1553, cbModelParam._m0[13u].z, fma(_1552, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1551));
        float _2423 = fma(_1553, cbModelParam._m0[14u].z, fma(_1552, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1551));
        float _2426 = fma(_1553, cbModelParam._m0[15u].z, fma(_1552, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1551));
        float _2454;
        if (_2420 > 0.0)
        {
            _2454 = abs((1.0 - _2409) / _2420);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_2420 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_2409 + 1.0) / _2420);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _2454 = frontier_phi_16_14_ladder;
        }
        float _2625;
        if (_2423 > 0.0)
        {
            _2625 = abs((1.0 - _2413) / _2423);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2423 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2413 + 1.0) / _2423);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2625 = frontier_phi_25_21_ladder;
        }
        float _2920;
        if (_2426 > 0.0)
        {
            _2920 = abs((1.0 - _2417) / _2426);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2426 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2417 + 1.0) / _2426);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2920 = frontier_phi_37_32_ladder;
        }
        float _2922 = isnan(_2625) ? _2454 : (isnan(_2454) ? _2625 : min(_2454, _2625));
        float _2923 = isnan(_2920) ? _2922 : (isnan(_2922) ? _2920 : min(_2922, _2920));
        float _2927 = (_2923 * _2420) + _2409;
        float _2928 = (_2923 * _2423) + _2413;
        float _2929 = (_2923 * _2426) + _2417;
        float _2930 = _2923 * 9.9999997473787516355514526367188e-05;
        float _2932 = (-1.0) - _2930;
        float _2934 = _2930 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2929 > _2934) || ((_2929 < _2932) || ((_2928 > _2934) || ((_2928 < _2932) || ((_2927 < _2932) || (_2927 > _2934))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3074 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2929, cbModelParam._m0[9u].z, fma(_2928, cbModelParam._m0[9u].y, _2927 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2929, cbModelParam._m0[10u].z, fma(_2928, cbModelParam._m0[10u].y, _2927 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2929, cbModelParam._m0[11u].z, fma(_2928, cbModelParam._m0[11u].y, _2927 * cbModelParam._m0[11u].x))), _2362);
            frontier_phi_15_37_ladder = _3074.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _3074.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _3074.z * cbModelParam._m0[1u].y;
        }
        _2442 = frontier_phi_15_37_ladder_1;
        _2444 = frontier_phi_15_37_ladder;
        _2446 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _2430 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1551, _1552, _1553), _2362);
        _2442 = _2430.x * cbModelParam._m0[1u].y;
        _2444 = _2430.y * cbModelParam._m0[1u].y;
        _2446 = _2430.z * cbModelParam._m0[1u].y;
    }
    float _2450 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1380);
    float _2451 = isnan(_2450) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2450 : min(cbModelParam._m0[25u].w, _2450));
    float _2540;
    float _2542;
    float _2544;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2504 = fma(_1614, cbModelParam._m0[21u].z, fma(_1610, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1606)) + cbModelParam._m0[21u].w;
        float _2508 = fma(_1614, cbModelParam._m0[22u].z, fma(_1610, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1606)) + cbModelParam._m0[22u].w;
        float _2512 = fma(_1614, cbModelParam._m0[23u].z, fma(_1610, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1606)) + cbModelParam._m0[23u].w;
        float _2515 = fma(_1553, cbModelParam._m0[21u].z, fma(_1552, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1551));
        float _2518 = fma(_1553, cbModelParam._m0[22u].z, fma(_1552, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1551));
        float _2521 = fma(_1553, cbModelParam._m0[23u].z, fma(_1552, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1551));
        float _2630;
        if (_2515 > 0.0)
        {
            _2630 = abs((1.0 - _2504) / _2515);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_2515 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_2504 + 1.0) / _2515);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2630 = frontier_phi_27_23_ladder;
        }
        float _2947;
        if (_2518 > 0.0)
        {
            _2947 = abs((1.0 - _2508) / _2518);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_2518 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_2508 + 1.0) / _2518);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2947 = frontier_phi_39_34_ladder;
        }
        float _3285;
        if (_2521 > 0.0)
        {
            _3285 = abs((1.0 - _2512) / _2521);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2521 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2512 + 1.0) / _2521);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _3285 = frontier_phi_49_46_ladder;
        }
        float _3287 = isnan(_2947) ? _2630 : (isnan(_2630) ? _2947 : min(_2630, _2947));
        float _3288 = isnan(_3285) ? _3287 : (isnan(_3287) ? _3285 : min(_3287, _3285));
        float _3292 = (_3288 * _2515) + _2504;
        float _3293 = (_3288 * _2518) + _2508;
        float _3294 = (_3288 * _2521) + _2512;
        float _3295 = _3288 * 9.9999997473787516355514526367188e-05;
        float _3296 = (-1.0) - _3295;
        float _3298 = _3295 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_3294 > _3298) || ((_3294 < _3296) || ((_3293 > _3298) || ((_3293 < _3296) || ((_3292 < _3296) || (_3292 > _3298))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3416 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3294, cbModelParam._m0[17u].z, fma(_3293, cbModelParam._m0[17u].y, _3292 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3294, cbModelParam._m0[18u].z, fma(_3293, cbModelParam._m0[18u].y, _3292 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3294, cbModelParam._m0[19u].z, fma(_3293, cbModelParam._m0[19u].y, _3292 * cbModelParam._m0[19u].x))), _2451);
            frontier_phi_24_49_ladder = _3416.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _3416.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _3416.x * cbModelParam._m0[1u].z;
        }
        _2540 = frontier_phi_24_49_ladder_2;
        _2542 = frontier_phi_24_49_ladder_1;
        _2544 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _2524 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1551, _1552, _1553), _2451);
        _2540 = _2524.x * cbModelParam._m0[1u].z;
        _2542 = _2524.y * cbModelParam._m0[1u].z;
        _2544 = _2524.z * cbModelParam._m0[1u].z;
    }
    float _2557 = (((_1577 * _1528) + _1578) * _1543) * ((cbModelParam._m0[1u].w * (_2540 - _2442)) + _2442);
    float _2559 = (((_1577 * _1530) + _1578) * _1543) * ((cbModelParam._m0[1u].w * (_2542 - _2444)) + _2444);
    float _2561 = (((_1577 * _1531) + _1578) * _1543) * ((cbModelParam._m0[1u].w * (_2544 - _2446)) + _2446);
    float _2564 = fma(_2561, cbSceneParam._m0[89u].z, fma(_2559, cbSceneParam._m0[89u].y, _2557 * cbSceneParam._m0[89u].x));
    float _2567 = fma(_2561, cbSceneParam._m0[90u].z, fma(_2559, cbSceneParam._m0[90u].y, _2557 * cbSceneParam._m0[90u].x));
    float _2570 = fma(_2561, cbSceneParam._m0[91u].z, fma(_2559, cbSceneParam._m0[91u].y, _2557 * cbSceneParam._m0[91u].x));
    float _2604 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2608 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2612 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2616 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2617 = _2604 / _2616;
    float _2618 = _2608 / _2616;
    float _2619 = _2612 / _2616;
    float _2766;
    float _2767;
    float _2768;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2646 = ((uint(_2619 > cbSceneParam._m0[59u].y) + uint(_2619 > cbSceneParam._m0[59u].x)) + uint(_2619 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2647 = _2646 + 43u;
        uint _2655 = _2646 + 44u;
        uint _2663 = _2646 + 45u;
        uint _2671 = _2646 + 46u;
        float _2682 = fma(_2616, cbSceneParam._m0[_2647].w, fma(_2612, cbSceneParam._m0[_2647].z, fma(_2608, cbSceneParam._m0[_2647].y, _2604 * cbSceneParam._m0[_2647].x)));
        float _2686 = fma(_2616, cbSceneParam._m0[_2655].w, fma(_2612, cbSceneParam._m0[_2655].z, fma(_2608, cbSceneParam._m0[_2655].y, _2604 * cbSceneParam._m0[_2655].x)));
        float _2694 = fma(_2616, cbSceneParam._m0[_2671].w, fma(_2612, cbSceneParam._m0[_2671].z, fma(_2608, cbSceneParam._m0[_2671].y, _2604 * cbSceneParam._m0[_2671].x)));
        float _2699 = cbSceneParam._m0[33u].z * _2694;
        float _2701 = cbSceneParam._m0[33u].w * _2694;
        float _2704 = fma(_2616, cbSceneParam._m0[_2663].w, fma(_2612, cbSceneParam._m0[_2663].z, fma(_2608, cbSceneParam._m0[_2663].y, _2604 * cbSceneParam._m0[_2663].x))) / _2694;
        float _2752 = (cbSceneParam._m0[33u].x - sqrt(((_2618 * _2618) + (_2617 * _2617)) + (_2619 * _2619))) * cbSceneParam._m0[33u].y;
        float _5288 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        float _2759 = (isnan(1.0) ? _5288 : (isnan(_5288) ? 1.0 : min(_5288, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2699 + _2682) / _2694, (_2701 + _2686) / _2694), _2704), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2701 + _2682) / _2694, (_2686 - _2699) / _2694), _2704), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2682 - _2699) / _2694, (_2686 - _2701) / _2694), _2704), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2682 - _2701) / _2694, (_2699 + _2686) / _2694), _2704), 0.0)).x), vec4(0.25)));
        _2766 = 1.0 - (_2759 * cbSceneParam._m0[34u].x);
        _2767 = 1.0 - (_2759 * cbSceneParam._m0[34u].y);
        _2768 = 1.0 - (_2759 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2766 = 1.0;
        _2767 = 1.0;
        _2768 = 1.0;
    }
    float _2832;
    float _2834;
    float _2836;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2820 = fma(_2616, cbSceneParam._m0[63u].w, fma(_2612, cbSceneParam._m0[63u].z, fma(_2608, cbSceneParam._m0[63u].y, _2604 * cbSceneParam._m0[63u].x)));
        float _2821 = fma(_2616, cbSceneParam._m0[60u].w, fma(_2612, cbSceneParam._m0[60u].z, fma(_2608, cbSceneParam._m0[60u].y, _2604 * cbSceneParam._m0[60u].x))) / _2820;
        float _2822 = fma(_2616, cbSceneParam._m0[61u].w, fma(_2612, cbSceneParam._m0[61u].z, fma(_2608, cbSceneParam._m0[61u].y, _2604 * cbSceneParam._m0[61u].x))) / _2820;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2821 >= cbSceneParam._m0[64u].x) && (_2822 >= cbSceneParam._m0[64u].y)) && (_2821 <= cbSceneParam._m0[64u].z)) && (_2822 <= cbSceneParam._m0[64u].w))
        {
            float _2960 = fma(_2616, cbSceneParam._m0[62u].w, fma(_2612, cbSceneParam._m0[62u].z, fma(_2608, cbSceneParam._m0[62u].y, _2604 * cbSceneParam._m0[62u].x))) / _2820;
            float _2964 = isnan(cbSceneParam._m0[41u].w) ? _2960 : (isnan(_2960) ? cbSceneParam._m0[41u].w : max(_2960, cbSceneParam._m0[41u].w));
            float _3007 = (cbSceneParam._m0[33u].x - sqrt(((_2618 * _2618) + (_2617 * _2617)) + (_2619 * _2619))) * cbSceneParam._m0[33u].y;
            float _5304 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
            float _3014 = (isnan(1.0) ? _5304 : (isnan(_5304) ? 1.0 : min(_5304, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2821, cbSceneParam._m0[33u].w + _2822), _2964), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2821, _2822 - cbSceneParam._m0[33u].z), _2964), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2821 - cbSceneParam._m0[33u].z, _2822 - cbSceneParam._m0[33u].w), _2964), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2821 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2822), _2964), 0.0)).x), vec4(0.25)));
            float _3018 = 1.0 - (_3014 * cbSceneParam._m0[34u].x);
            float _3019 = 1.0 - (_3014 * cbSceneParam._m0[34u].y);
            float _3020 = 1.0 - (_3014 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_3019) ? _2767 : (isnan(_2767) ? _3019 : min(_2767, _3019));
            frontier_phi_36_35_ladder_1 = isnan(_3020) ? _2768 : (isnan(_2768) ? _3020 : min(_2768, _3020));
            frontier_phi_36_35_ladder_2 = isnan(_3018) ? _2766 : (isnan(_2766) ? _3018 : min(_2766, _3018));
        }
        else
        {
            frontier_phi_36_35_ladder = _2767;
            frontier_phi_36_35_ladder_1 = _2768;
            frontier_phi_36_35_ladder_2 = _2766;
        }
        _2832 = frontier_phi_36_35_ladder_2;
        _2834 = frontier_phi_36_35_ladder;
        _2836 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2832 = _2766;
        _2834 = _2767;
        _2836 = _2768;
    }
    uvec4 _2841 = floatBitsToUint(cbInstanceData._m0[_1503 + 5u]);
    uint _2843 = _2841.x * 14u;
    uint _2844 = _2843 + 13u;
    float _2851 = _1543 + (-1.0);
    float _2856 = (cbLight._m0[_2844].x * _2851) + 1.0;
    float _2857 = (cbLight._m0[_2844].y * _2851) + 1.0;
    float _2858 = (cbLight._m0[_2844].z * _2851) + 1.0;
    float _2859 = (cbLight._m0[_2844].w * _2851) + 1.0;
    uint _2860 = _2843 + 5u;
    float _2866 = isnan(1.0) ? _2857 : (isnan(_2857) ? 1.0 : min(_2857, 1.0));
    uint _2870 = _2843 + 4u;
    float _2879 = isnan(1.0) ? _2856 : (isnan(_2856) ? 1.0 : min(_2856, 1.0));
    uint _2883 = _2843 | 1u;
    float _2894 = dot(vec3(cbLight._m0[_2843].xyz), vec3(_1376, _1377, _1378));
    float _2897 = dot(vec3(cbLight._m0[_2883].xyz), vec3(_1376, _1377, _1378));
    float _5340 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
    float _5351 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
    float _2902 = (isnan(1.0) ? _5340 : (isnan(_5340) ? 1.0 : min(_5340, 1.0))) * 0.3183098733425140380859375;
    float _2904 = (isnan(1.0) ? _5351 : (isnan(_5351) ? 1.0 : min(_5351, 1.0))) * 0.3183098733425140380859375;
    float _2911 = ((cbLight._m0[_2860].x * _2866) * _2904) + (((cbLight._m0[_2870].x * _2832) * _2879) * _2902);
    float _2912 = ((_2866 * cbLight._m0[_2860].y) * _2904) + (((cbLight._m0[_2870].y * _2834) * _2879) * _2902);
    float _2913 = ((_2866 * cbLight._m0[_2860].z) * _2904) + (((cbLight._m0[_2870].z * _2836) * _2879) * _2902);
    uvec4 _2917 = floatBitsToUint(cbLight._m0[_2843 + 12u]);
    bool _2919 = _2917.x == 0u;
    float _3021;
    float _3023;
    float _3025;
    if (_2919)
    {
        _3021 = _2911;
        _3023 = _2912;
        _3025 = _2913;
    }
    else
    {
        uint _3029 = _2843 + 6u;
        float _3045 = (dot(vec3(cbLight._m0[_2843 + 2u].xyz), vec3(_1376, _1377, _1378)) * 0.5) + 0.5;
        float _3046 = _3045 * _3045;
        float _5362 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
        float _3047 = isnan(1.0) ? _5362 : (isnan(_5362) ? 1.0 : min(_5362, 1.0));
        float _3048 = isnan(1.0) ? _2858 : (isnan(_2858) ? 1.0 : min(_2858, 1.0));
        _3021 = (((cbLight._m0[_3029].x * 0.3183098733425140380859375) * _3047) * _3048) + _2911;
        _3023 = (((cbLight._m0[_3029].y * 0.3183098733425140380859375) * _3047) * _3048) + _2912;
        _3025 = (((cbLight._m0[_3029].z * 0.3183098733425140380859375) * _3047) * _3048) + _2913;
    }
    bool _3028 = _2917.y == 0u;
    float _3083;
    float _3085;
    float _3087;
    if (_3028)
    {
        _3083 = _3021;
        _3085 = _3023;
        _3087 = _3025;
    }
    else
    {
        uint _3256 = _2843 + 7u;
        float _3272 = (dot(vec3(cbLight._m0[_2843 + 3u].xyz), vec3(_1376, _1377, _1378)) * 0.5) + 0.5;
        float _3273 = _3272 * _3272;
        float _5378 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
        float _3274 = isnan(1.0) ? _5378 : (isnan(_5378) ? 1.0 : min(_5378, 1.0));
        float _3275 = isnan(1.0) ? _2859 : (isnan(_2859) ? 1.0 : min(_2859, 1.0));
        _3083 = (((cbLight._m0[_3256].x * 0.3183098733425140380859375) * _3274) * _3275) + _3021;
        _3085 = (((cbLight._m0[_3256].y * 0.3183098733425140380859375) * _3274) * _3275) + _3023;
        _3087 = (((cbLight._m0[_3256].z * 0.3183098733425140380859375) * _3274) * _3275) + _3025;
    }
    uint _3090 = _2843 + 8u;
    float _3103 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2843].w)) * _1380) * 0.949999988079071044921875);
    float _3104 = _3103 * _3103;
    float _3105 = cbLight._m0[_2843].x + _1457;
    float _3106 = cbLight._m0[_2843].y + _1458;
    float _3107 = cbLight._m0[_2843].z + _1459;
    float _3111 = inversesqrt(dot(vec3(_3105, _3106, _3107), vec3(_3105, _3106, _3107)));
    float _3112 = _3111 * _3105;
    float _3113 = _3111 * _3106;
    float _3114 = _3111 * _3107;
    float _3115 = dot(vec3(_1376, _1377, _1378), vec3(cbLight._m0[_2843].xyz));
    float _5394 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
    float _3118 = isnan(1.0) ? _5394 : (isnan(_5394) ? 1.0 : min(_5394, 1.0));
    float _5405 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
    float _3119 = isnan(1.0) ? _5405 : (isnan(_5405) ? 1.0 : min(_5405, 1.0));
    float _3120 = dot(vec3(_1376, _1377, _1378), vec3(_3112, _3113, _3114));
    float _5416 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
    float _3123 = isnan(1.0) ? _5416 : (isnan(_5416) ? 1.0 : min(_5416, 1.0));
    float _3124 = dot(vec3(cbLight._m0[_2843].xyz), vec3(_3112, _3113, _3114));
    float _5427 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
    float _3128 = _3104 * _3104;
    float _3132 = ((_3123 * _3123) * (_3128 + (-1.0))) + 1.0;
    float _3140 = exp2(log2(1.0 - (isnan(1.0) ? _5427 : (isnan(_5427) ? 1.0 : min(_5427, 1.0)))) * 5.0);
    float _3141 = 0.959999978542327880859375 - _1525;
    float _3143 = 0.959999978542327880859375 - _1526;
    float _3144 = 0.959999978542327880859375 - _1527;
    float _3151 = 1.0 - _3104;
    float _3162 = (0.5 / (((_3119 * ((_3118 * _3151) + _3104)) + 9.9999999392252902907785028219223e-09) + (((_3119 * _3151) + _3104) * _3118))) * _3118;
    float _5438 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
    float _3164 = (isnan(1.0) ? _5438 : (isnan(_5438) ? 1.0 : min(_5438, 1.0))) * (_3128 / ((_3132 * _3132) * 3.141590118408203125));
    uint _3178 = _2843 + 9u;
    float _3189 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2883].w)) * _1380) * 0.949999988079071044921875);
    float _3190 = _3189 * _3189;
    float _3191 = cbLight._m0[_2883].x + _1457;
    float _3192 = cbLight._m0[_2883].y + _1458;
    float _3193 = cbLight._m0[_2883].z + _1459;
    float _3197 = inversesqrt(dot(vec3(_3191, _3192, _3193), vec3(_3191, _3192, _3193)));
    float _3198 = _3197 * _3191;
    float _3199 = _3197 * _3192;
    float _3200 = _3197 * _3193;
    float _3201 = dot(vec3(_1376, _1377, _1378), vec3(cbLight._m0[_2883].xyz));
    float _5449 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
    float _3204 = isnan(1.0) ? _5449 : (isnan(_5449) ? 1.0 : min(_5449, 1.0));
    float _3205 = dot(vec3(_1376, _1377, _1378), vec3(_3198, _3199, _3200));
    float _5460 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
    float _3208 = isnan(1.0) ? _5460 : (isnan(_5460) ? 1.0 : min(_5460, 1.0));
    float _3209 = dot(vec3(cbLight._m0[_2883].xyz), vec3(_3198, _3199, _3200));
    float _5471 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
    float _3213 = _3190 * _3190;
    float _3217 = ((_3208 * _3208) * (_3213 + (-1.0))) + 1.0;
    float _3224 = exp2(log2(1.0 - (isnan(1.0) ? _5471 : (isnan(_5471) ? 1.0 : min(_5471, 1.0)))) * 5.0);
    float _3231 = 1.0 - _3190;
    float _3241 = (0.5 / (((_3119 * ((_3204 * _3231) + _3190)) + 9.9999999392252902907785028219223e-09) + (((_3119 * _3231) + _3190) * _3204))) * _3204;
    float _5482 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
    float _3243 = (isnan(1.0) ? _5482 : (isnan(_5482) ? 1.0 : min(_5482, 1.0))) * (_3213 / ((_3217 * _3217) * 3.141590118408203125));
    float _3253 = (((((_3224 * _3141) + _1528) * cbLight._m0[_3178].x) * _3243) * _2866) + ((((cbLight._m0[_3090].x * _2832) * ((_3140 * _3141) + _1528)) * _3164) * _2879);
    float _3254 = (((((_3224 * _3143) + _1530) * cbLight._m0[_3178].y) * _3243) * _2866) + ((((cbLight._m0[_3090].y * _2834) * ((_3140 * _3143) + _1530)) * _3164) * _2879);
    float _3255 = (((((_3224 * _3144) + _1531) * cbLight._m0[_3178].z) * _3243) * _2866) + ((((cbLight._m0[_3090].z * _2836) * ((_3140 * _3144) + _1531)) * _3164) * _2879);
    float _3311;
    float _3313;
    float _3315;
    if (_2919)
    {
        _3311 = _3253;
        _3313 = _3254;
        _3315 = _3255;
    }
    else
    {
        uint _3317 = _2843 + 2u;
        uint _3321 = _2843 + 10u;
        float _3335 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3317].w)) * _1380) * 0.949999988079071044921875);
        float _3336 = _3335 * _3335;
        float _3337 = cbLight._m0[_3317].x + _1457;
        float _3338 = cbLight._m0[_3317].y + _1458;
        float _3339 = cbLight._m0[_3317].z + _1459;
        float _3343 = inversesqrt(dot(vec3(_3337, _3338, _3339), vec3(_3337, _3338, _3339)));
        float _3344 = _3343 * _3337;
        float _3345 = _3343 * _3338;
        float _3346 = _3343 * _3339;
        float _3347 = dot(vec3(_1376, _1377, _1378), vec3(cbLight._m0[_3317].xyz));
        float _5493 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
        float _3350 = isnan(1.0) ? _5493 : (isnan(_5493) ? 1.0 : min(_5493, 1.0));
        float _3351 = dot(vec3(_1376, _1377, _1378), vec3(_3344, _3345, _3346));
        float _5504 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
        float _3354 = isnan(1.0) ? _5504 : (isnan(_5504) ? 1.0 : min(_5504, 1.0));
        float _3355 = dot(vec3(cbLight._m0[_3317].xyz), vec3(_3344, _3345, _3346));
        float _5515 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
        float _3359 = _3336 * _3336;
        float _3363 = ((_3354 * _3354) * (_3359 + (-1.0))) + 1.0;
        float _3370 = exp2(log2(1.0 - (isnan(1.0) ? _5515 : (isnan(_5515) ? 1.0 : min(_5515, 1.0)))) * 5.0);
        float _3377 = 1.0 - _3336;
        float _3387 = (0.5 / (((_3119 * ((_3350 * _3377) + _3336)) + 9.9999999392252902907785028219223e-09) + (((_3119 * _3377) + _3336) * _3350))) * _3350;
        float _5526 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
        float _3389 = (isnan(1.0) ? _5526 : (isnan(_5526) ? 1.0 : min(_5526, 1.0))) * (_3359 / ((_3363 * _3363) * 3.141590118408203125));
        float _3390 = isnan(1.0) ? _2858 : (isnan(_2858) ? 1.0 : min(_2858, 1.0));
        _3311 = (((((_3370 * _3141) + _1528) * cbLight._m0[_3321].x) * _3389) * _3390) + _3253;
        _3313 = (((((_3370 * _3143) + _1530) * cbLight._m0[_3321].y) * _3389) * _3390) + _3254;
        _3315 = (((((_3370 * _3144) + _1531) * cbLight._m0[_3321].z) * _3389) * _3390) + _3255;
    }
    float _3421;
    float _3423;
    float _3425;
    if (_3028)
    {
        _3421 = _3311;
        _3423 = _3313;
        _3425 = _3315;
    }
    else
    {
        uint _3432 = _2843 + 3u;
        uint _3436 = _2843 + 11u;
        float _3450 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3432].w)) * _1380) * 0.949999988079071044921875);
        float _3451 = _3450 * _3450;
        float _3452 = cbLight._m0[_3432].x + _1457;
        float _3453 = cbLight._m0[_3432].y + _1458;
        float _3454 = cbLight._m0[_3432].z + _1459;
        float _3458 = inversesqrt(dot(vec3(_3452, _3453, _3454), vec3(_3452, _3453, _3454)));
        float _3459 = _3458 * _3452;
        float _3460 = _3458 * _3453;
        float _3461 = _3458 * _3454;
        float _3462 = dot(vec3(_1376, _1377, _1378), vec3(cbLight._m0[_3432].xyz));
        float _5542 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
        float _3465 = isnan(1.0) ? _5542 : (isnan(_5542) ? 1.0 : min(_5542, 1.0));
        float _3466 = dot(vec3(_1376, _1377, _1378), vec3(_3459, _3460, _3461));
        float _5553 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
        float _3469 = isnan(1.0) ? _5553 : (isnan(_5553) ? 1.0 : min(_5553, 1.0));
        float _3470 = dot(vec3(cbLight._m0[_3432].xyz), vec3(_3459, _3460, _3461));
        float _5564 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
        float _3474 = _3451 * _3451;
        float _3478 = ((_3469 * _3469) * (_3474 + (-1.0))) + 1.0;
        float _3485 = exp2(log2(1.0 - (isnan(1.0) ? _5564 : (isnan(_5564) ? 1.0 : min(_5564, 1.0)))) * 5.0);
        float _3492 = 1.0 - _3451;
        float _3502 = (0.5 / (((_3119 * ((_3465 * _3492) + _3451)) + 9.9999999392252902907785028219223e-09) + (((_3119 * _3492) + _3451) * _3465))) * _3465;
        float _5575 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
        float _3504 = (isnan(1.0) ? _5575 : (isnan(_5575) ? 1.0 : min(_5575, 1.0))) * (_3474 / ((_3478 * _3478) * 3.141590118408203125));
        float _3505 = isnan(1.0) ? _2859 : (isnan(_2859) ? 1.0 : min(_2859, 1.0));
        _3421 = (((((_3485 * _3141) + _1528) * cbLight._m0[_3436].x) * _3504) * _3505) + _3311;
        _3423 = (((((_3485 * _3143) + _1530) * cbLight._m0[_3436].y) * _3504) * _3505) + _3313;
        _3425 = (((((_3485 * _3144) + _1531) * cbLight._m0[_3436].z) * _3504) * _3505) + _3315;
    }
    float _3570;
    float _3572;
    float _3574;
    float _3576;
    float _3578;
    float _3580;
    if (_2841.y == 0u)
    {
        uvec4 _3526 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3527 = _3526.x;
        uint _3538 = uint((float(_3526.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1466) / _3527))) + floor(float(uint(cbSceneParam._m0[85u].x * _1465) / _3527)));
        float _3548 = (log2(_2619 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3549 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
        uint _3552 = uint(isnan(14.0) ? _3549 : (isnan(_3549) ? 14.0 : min(_3549, 14.0)));
        uvec4 _3557 = texelFetch(g_lightClusterGridBuffer, int(((_3552 << 2u) + (_3538 << 6u)) >> 2u));
        uint _3558 = _3557.x;
        uint _3559 = _3526.z;
        float _3639;
        float _3641;
        float _3643;
        float _3645;
        float _3647;
        float _3649;
        if (((((1u << ((_3559 >> 4u) & 15u)) + 4294967295u) & _3558) == 0u) || ((_3559 & 240u) == 0u))
        {
            _3639 = 0.0;
            _3641 = 0.0;
            _3643 = 0.0;
            _3645 = 0.0;
            _3647 = 0.0;
            _3649 = 0.0;
        }
        else
        {
            float _3640;
            float _3642;
            float _3644;
            float _3646;
            float _3648;
            float _3650;
            float _3783 = 0.0;
            float _3784 = 0.0;
            float _3785 = 0.0;
            float _3786 = 0.0;
            float _3787 = 0.0;
            float _3788 = 0.0;
            uint _3789 = 0u;
            uint _3798;
            bool _3799;
            for (;;)
            {
                _3798 = texelFetch(g_lightClassification, int((((_3552 << 5u) + (_3538 << 9u)) + (_3789 << 2u)) >> 2u)).x;
                _3799 = _3798 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3799)
                {
                    frontier_phi_68_pred = _3788;
                    frontier_phi_68_pred_1 = _3787;
                    frontier_phi_68_pred_2 = _3786;
                    frontier_phi_68_pred_3 = _3784;
                    frontier_phi_68_pred_4 = _3783;
                    frontier_phi_68_pred_5 = _3785;
                }
                else
                {
                    float _3907;
                    float _3908;
                    float _3909;
                    float _3910;
                    float _3911;
                    float _3912;
                    uint _3913;
                    _3907 = _3783;
                    _3908 = _3784;
                    _3909 = _3785;
                    _3910 = _3786;
                    _3911 = _3787;
                    _3912 = _3788;
                    _3913 = _3798;
                    float _3839;
                    float _3840;
                    float _3841;
                    float _3842;
                    float _3843;
                    float _3844;
                    for (;;)
                    {
                        uint _3917 = uint(findLSB(_3913)) + (_3789 << 5u);
                        uint _3914 = (_3913 + 4294967295u) & _3913;
                        uint _3919 = _3917 * 48u;
                        vec4 _3933 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3919)).x, texelFetch(g_PointLightRenderingBuffer, int(_3919 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3919 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3919 + 3u)).x));
                        uint _3939 = (_3917 * 48u) + 4u;
                        vec4 _3952 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3939)).x, texelFetch(g_PointLightRenderingBuffer, int(_3939 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3939 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3939 + 3u)).x));
                        uint _3958 = (_3917 * 48u) + 8u;
                        vec3 _3969 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3958)).x, texelFetch(g_PointLightRenderingBuffer, int(_3958 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3958 + 2u)).x));
                        float _3973 = _3933.x - _2617;
                        float _3974 = _3933.y - _2618;
                        float _3975 = _3933.z - _2619;
                        float _3976 = dot(vec3(_3973, _3974, _3975), vec3(_3973, _3974, _3975));
                        float _3979 = inversesqrt(_3976);
                        float _3980 = _3979 * _3973;
                        float _3981 = _3979 * _3974;
                        float _3982 = _3979 * _3975;
                        float _3983 = dot(vec3(_1484, _1487, _1490), vec3(_3980, _3981, _3982));
                        float _3988 = 1.0 - (_3976 * _3933.w);
                        float _5601 = isnan(0.0) ? _3988 : (isnan(_3988) ? 0.0 : max(_3988, 0.0));
                        float _3989 = isnan(1.0) ? _5601 : (isnan(_5601) ? 1.0 : min(_5601, 1.0));
                        float _3990 = sqrt(_3976) * _3952.w;
                        float _3992 = 1.39999997615814208984375 / (_3990 + 1.39999997615814208984375);
                        float _3993 = _3992 * _3992;
                        float _3996 = ((1.0 - _3993) * _3983) + _3993;
                        float _3999 = _3990 * _3990;
                        float _4003 = ((isnan(0.0) ? _3996 : (isnan(_3996) ? 0.0 : max(_3996, 0.0))) * _3989) / ((_3999 * 0.699999988079071044921875) + 1.0);
                        float _4007 = (-0.0) - _2617;
                        float _4008 = (-0.0) - _2618;
                        float _4009 = (-0.0) - _2619;
                        float _4013 = inversesqrt(dot(vec3(_4007, _4008, _4009), vec3(_4007, _4008, _4009)));
                        float _4014 = _4013 * _4007;
                        float _4015 = _4013 * _4008;
                        float _4016 = _4013 * _4009;
                        float _4023 = exp2(log2(1.0 / ((_3999 * 3.5) + 5.0)) * 0.25);
                        float _4024 = 1.0 - _1559;
                        float _4031 = sqrt(1.0 - ((1.0 - (_4024 * _4024)) * (1.0 - (_4023 * _4023))));
                        float _4032 = _4031 * _4031;
                        float _4033 = _4032 * _4032;
                        float _4034 = _4014 + _3980;
                        float _4035 = _4015 + _3981;
                        float _4036 = _4016 + _3982;
                        float _4040 = inversesqrt(dot(vec3(_4034, _4035, _4036), vec3(_4034, _4035, _4036)));
                        float _4044 = dot(vec3(_1484, _1487, _1490), vec3(_4014, _4015, _4016));
                        float _5617 = isnan(0.0) ? _4044 : (isnan(_4044) ? 0.0 : max(_4044, 0.0));
                        float _4047 = isnan(1.0) ? _5617 : (isnan(_5617) ? 1.0 : min(_5617, 1.0));
                        float _4048 = dot(vec3(_1484, _1487, _1490), vec3(_4040 * _4034, _4040 * _4035, _4040 * _4036));
                        float _5628 = isnan(0.0) ? _4048 : (isnan(_4048) ? 0.0 : max(_4048, 0.0));
                        float _4051 = isnan(1.0) ? _5628 : (isnan(_5628) ? 1.0 : min(_5628, 1.0));
                        float _4055 = ((_4051 * _4051) * (_4033 + (-1.0))) + 1.0;
                        float _4056 = _3992 * _4032;
                        float _4057 = _4056 * _4056;
                        float _4060 = ((1.0 - _4057) * _3983) + _4057;
                        float _5639 = isnan(0.0) ? _4060 : (isnan(_4060) ? 0.0 : max(_4060, 0.0));
                        float _4061 = isnan(1.0) ? _5639 : (isnan(_5639) ? 1.0 : min(_5639, 1.0));
                        float _4062 = 1.0 - _4032;
                        float _4072 = (0.5 / (((_4061 * ((_4047 * _4062) + _4032)) + 9.9999999392252902907785028219223e-09) + (((_4061 * _4062) + _4032) * _4047))) * _4061;
                        float _5650 = isnan(0.0) ? _4072 : (isnan(_4072) ? 0.0 : max(_4072, 0.0));
                        float _4083 = (((_4033 * 3.1415927410125732421875) * (isnan(1.0) ? _5650 : (isnan(_5650) ? 1.0 : min(_5650, 1.0)))) / ((_4055 * _4055) * ((_3999 * 2.1991131305694580078125) + 3.141590118408203125))) * _3989;
                        _3842 = (_4003 * _3952.x) + _3910;
                        _3843 = (_4003 * _3952.y) + _3911;
                        _3844 = (_4003 * _3952.z) + _3912;
                        _3839 = (_4083 * _3969.x) + _3907;
                        _3840 = (_4083 * _3969.y) + _3908;
                        _3841 = (_4083 * _3969.z) + _3909;
                        if (_3914 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3907 = _3839;
                            _3908 = _3840;
                            _3909 = _3841;
                            _3910 = _3842;
                            _3911 = _3843;
                            _3912 = _3844;
                            _3913 = _3914;
                        }
                    }
                    frontier_phi_68_pred = _3844;
                    frontier_phi_68_pred_1 = _3843;
                    frontier_phi_68_pred_2 = _3842;
                    frontier_phi_68_pred_3 = _3840;
                    frontier_phi_68_pred_4 = _3839;
                    frontier_phi_68_pred_5 = _3841;
                }
                _3650 = frontier_phi_68_pred;
                _3648 = frontier_phi_68_pred_1;
                _3646 = frontier_phi_68_pred_2;
                _3642 = frontier_phi_68_pred_3;
                _3640 = frontier_phi_68_pred_4;
                _3644 = frontier_phi_68_pred_5;
                uint _3790 = _3789 + 1u;
                if (_3790 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3783 = _3640;
                    _3784 = _3642;
                    _3785 = _3644;
                    _3786 = _3646;
                    _3787 = _3648;
                    _3788 = _3650;
                    _3789 = _3790;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3639 = _3640;
            _3641 = _3642;
            _3643 = _3644;
            _3645 = _3646;
            _3647 = _3648;
            _3649 = _3650;
        }
        uvec4 _3653 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3654 = _3653.z;
        uint _3656 = (_3654 >> 8u) & 15u;
        float _3751;
        float _3753;
        float _3755;
        float _3757;
        float _3759;
        float _3761;
        if (((4294967295u << _3656) & _3558) == 0u)
        {
            _3751 = _3639;
            _3753 = _3641;
            _3755 = _3643;
            _3757 = _3645;
            _3759 = _3647;
            _3761 = _3649;
        }
        else
        {
            float _3776 = inversesqrt(dot(vec3(_2617, _2618, _2619), vec3(_2617, _2618, _2619)));
            float _3777 = _3776 * _2617;
            float _3778 = _3776 * _2618;
            float _3779 = _3776 * _2619;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3656 < ((_3654 >> 12u) & 15u))
            {
                float _3752;
                float _3754;
                float _3756;
                float _3758;
                float _3760;
                float _3762;
                float _3890 = _3639;
                float _3891 = _3641;
                float _3892 = _3643;
                float _3893 = _3645;
                float _3894 = _3647;
                float _3895 = _3649;
                uint _3896 = _3656;
                uint _3905;
                bool _3906;
                for (;;)
                {
                    _3905 = texelFetch(g_lightClassification, int((((_3552 << 5u) + (_3538 << 9u)) + (_3896 << 2u)) >> 2u)).x;
                    _3906 = _3905 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3906)
                    {
                        frontier_phi_74_pred = _3892;
                        frontier_phi_74_pred_1 = _3891;
                        frontier_phi_74_pred_2 = _3890;
                        frontier_phi_74_pred_3 = _3895;
                        frontier_phi_74_pred_4 = _3894;
                        frontier_phi_74_pred_5 = _3893;
                    }
                    else
                    {
                        float _4088;
                        float _4089;
                        float _4090;
                        float _4091;
                        float _4092;
                        float _4093;
                        float _4381;
                        float _4382;
                        float _4383;
                        float _4384;
                        float _4385;
                        float _4386;
                        float _4101 = _3890;
                        float _4102 = _3891;
                        float _4103 = _3892;
                        float _4104 = _3893;
                        float _4105 = _3894;
                        float _4106 = _3895;
                        uint _4107 = _3905;
                        uint _4108;
                        vec4 _4133;
                        float _4134;
                        vec4 _4149;
                        vec3 _4161;
                        vec4 _4176;
                        vec4 _4191;
                        float _4237;
                        bool _4238;
                        for (;;)
                        {
                            uint _4118 = ((_3896 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_4107));
                            _4108 = (_4107 + 4294967295u) & _4107;
                            uint _4120 = _4118 * 40u;
                            _4133 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4120 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4120 + 3u)).x));
                            _4134 = _4133.w;
                            uint _4136 = (_4118 * 40u) + 4u;
                            _4149 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4136 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4136 + 3u)).x));
                            uint _4151 = (_4118 * 40u) + 8u;
                            _4161 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_4151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4151 + 2u)).x));
                            uint _4163 = (_4118 * 40u) + 16u;
                            _4176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4163 + 3u)).x));
                            uint _4178 = (_4118 * 40u) + 20u;
                            _4191 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4178 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4178 + 3u)).x));
                            uint _4193 = (_4118 * 40u) + 24u;
                            vec4 _4206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4193 + 3u)).x));
                            uint _4212 = (_4118 * 40u) + 28u;
                            vec4 _4225 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4212 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4212 + 3u)).x));
                            _4237 = fma(_2619, _4225.z, fma(_2618, _4225.y, _4225.x * _2617)) + _4225.w;
                            _4238 = !((fma(_2619, _4206.z, fma(_2618, _4206.y, _4206.x * _2617)) + _4206.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_4238)
                            {
                                float _4265 = _4133.x - _2617;
                                float _4266 = _4133.y - _2618;
                                float _4267 = _4133.z - _2619;
                                float _4268 = dot(vec3(_4265, _4266, _4267), vec3(_4265, _4266, _4267));
                                float _4271 = inversesqrt(_4268);
                                float _4272 = _4271 * _4265;
                                float _4273 = _4271 * _4266;
                                float _4274 = _4271 * _4267;
                                float _4278 = 1.0 - (_4268 / (_4134 * _4134));
                                float _5661 = isnan(0.0) ? _4278 : (isnan(_4278) ? 0.0 : max(_4278, 0.0));
                                float _4279 = isnan(1.0) ? _5661 : (isnan(_5661) ? 1.0 : min(_5661, 1.0));
                                float _4283 = sqrt(_4268) * _4149.w;
                                float _4285 = 1.39999997615814208984375 / (_4283 + 1.39999997615814208984375);
                                float _4286 = _4285 * _4285;
                                float _4289 = ((1.0 - _4286) * dot(vec3(_4272, _4273, _4274), vec3(_1484, _1487, _1490))) + _4286;
                                float _4292 = _4283 * _4283;
                                float _4296 = (fma(_2619, _4176.z, fma(_2618, _4176.y, _4176.x * _2617)) + _4176.w) / _4237;
                                float _4297 = (fma(_2619, _4191.z, fma(_2618, _4191.y, _4191.x * _2617)) + _4191.w) / _4237;
                                float _4301 = 1.0 - dot(vec2(_4296, _4297), vec2(_4296, _4297));
                                float _5677 = isnan(0.0) ? _4301 : (isnan(_4301) ? 0.0 : max(_4301, 0.0));
                                float _4302 = isnan(1.0) ? _5677 : (isnan(_5677) ? 1.0 : min(_5677, 1.0));
                                float _4303 = _4302 * (((isnan(0.0) ? _4289 : (isnan(_4289) ? 0.0 : max(_4289, 0.0))) * _4279) / ((_4292 * 0.699999988079071044921875) + 1.0));
                                float _4315 = exp2(log2(1.0 / ((_4292 * 3.5) + 5.0)) * 0.25);
                                float _4316 = 1.0 - _1559;
                                float _4323 = sqrt(1.0 - ((1.0 - (_4316 * _4316)) * (1.0 - (_4315 * _4315))));
                                float _4324 = _4323 * _4323;
                                float _4325 = _4324 * _4324;
                                float _4326 = _4272 - _3777;
                                float _4327 = _4273 - _3778;
                                float _4328 = _4274 - _3779;
                                float _4332 = inversesqrt(dot(vec3(_4326, _4327, _4328), vec3(_4326, _4327, _4328)));
                                float _4336 = dot(vec3(_1484, _1487, _1490), vec3((-0.0) - _3777, (-0.0) - _3778, (-0.0) - _3779));
                                float _5688 = isnan(0.0) ? _4336 : (isnan(_4336) ? 0.0 : max(_4336, 0.0));
                                float _4339 = isnan(1.0) ? _5688 : (isnan(_5688) ? 1.0 : min(_5688, 1.0));
                                float _4340 = dot(vec3(_1484, _1487, _1490), vec3(_4332 * _4326, _4332 * _4327, _4332 * _4328));
                                float _5699 = isnan(0.0) ? _4340 : (isnan(_4340) ? 0.0 : max(_4340, 0.0));
                                float _4343 = isnan(1.0) ? _5699 : (isnan(_5699) ? 1.0 : min(_5699, 1.0));
                                float _4347 = ((_4343 * _4343) * (_4325 + (-1.0))) + 1.0;
                                float _4348 = _4285 * _4324;
                                float _4349 = _4348 * _4348;
                                float _4355 = ((1.0 - _4349) * dot(vec3(_1484, _1487, _1490), vec3(_4272, _4273, _4274))) + _4349;
                                float _5710 = isnan(0.0) ? _4355 : (isnan(_4355) ? 0.0 : max(_4355, 0.0));
                                float _4356 = isnan(1.0) ? _5710 : (isnan(_5710) ? 1.0 : min(_5710, 1.0));
                                float _4357 = 1.0 - _4324;
                                float _4367 = (0.5 / (((_4356 * ((_4339 * _4357) + _4324)) + 9.9999999392252902907785028219223e-09) + (((_4356 * _4357) + _4324) * _4339))) * _4356;
                                float _5721 = isnan(0.0) ? _4367 : (isnan(_4367) ? 0.0 : max(_4367, 0.0));
                                float _4377 = (_4302 * _4279) * (((_4325 * 3.1415927410125732421875) * (isnan(1.0) ? _5721 : (isnan(_5721) ? 1.0 : min(_5721, 1.0)))) / ((_4347 * _4347) * ((_4292 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _4377 * _4161.z;
                                frontier_phi_80_pred_1 = _4377 * _4161.y;
                                frontier_phi_80_pred_2 = _4377 * _4161.x;
                                frontier_phi_80_pred_3 = _4303 * _4149.z;
                                frontier_phi_80_pred_4 = _4303 * _4149.y;
                                frontier_phi_80_pred_5 = _4303 * _4149.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _4383 = frontier_phi_80_pred;
                            _4382 = frontier_phi_80_pred_1;
                            _4381 = frontier_phi_80_pred_2;
                            _4386 = frontier_phi_80_pred_3;
                            _4385 = frontier_phi_80_pred_4;
                            _4384 = frontier_phi_80_pred_5;
                            _4091 = _4384 + _4104;
                            _4092 = _4385 + _4105;
                            _4093 = _4386 + _4106;
                            _4088 = _4381 + _4101;
                            _4089 = _4382 + _4102;
                            _4090 = _4383 + _4103;
                            if (_4108 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _4101 = _4088;
                                _4102 = _4089;
                                _4103 = _4090;
                                _4104 = _4091;
                                _4105 = _4092;
                                _4106 = _4093;
                                _4107 = _4108;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _4090;
                        frontier_phi_74_pred_1 = _4089;
                        frontier_phi_74_pred_2 = _4088;
                        frontier_phi_74_pred_3 = _4093;
                        frontier_phi_74_pred_4 = _4092;
                        frontier_phi_74_pred_5 = _4091;
                    }
                    _3756 = frontier_phi_74_pred;
                    _3754 = frontier_phi_74_pred_1;
                    _3752 = frontier_phi_74_pred_2;
                    _3762 = frontier_phi_74_pred_3;
                    _3760 = frontier_phi_74_pred_4;
                    _3758 = frontier_phi_74_pred_5;
                    uint _3897 = _3896 + 1u;
                    if (_3897 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3890 = _3752;
                        _3891 = _3754;
                        _3892 = _3756;
                        _3893 = _3758;
                        _3894 = _3760;
                        _3895 = _3762;
                        _3896 = _3897;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3760;
                frontier_phi_62_63_ladder_1 = _3758;
                frontier_phi_62_63_ladder_2 = _3756;
                frontier_phi_62_63_ladder_3 = _3762;
                frontier_phi_62_63_ladder_4 = _3754;
                frontier_phi_62_63_ladder_5 = _3752;
            }
            else
            {
                frontier_phi_62_63_ladder = _3647;
                frontier_phi_62_63_ladder_1 = _3645;
                frontier_phi_62_63_ladder_2 = _3643;
                frontier_phi_62_63_ladder_3 = _3649;
                frontier_phi_62_63_ladder_4 = _3641;
                frontier_phi_62_63_ladder_5 = _3639;
            }
            _3751 = frontier_phi_62_63_ladder_5;
            _3753 = frontier_phi_62_63_ladder_4;
            _3755 = frontier_phi_62_63_ladder_2;
            _3757 = frontier_phi_62_63_ladder_1;
            _3759 = frontier_phi_62_63_ladder;
            _3761 = frontier_phi_62_63_ladder_3;
        }
        float _3766 = isnan(1.0) ? _1543 : (isnan(_1543) ? 1.0 : min(_1543, 1.0));
        _3570 = (_3766 * _3757) + _3083;
        _3572 = (_3766 * _3759) + _3085;
        _3574 = (_3766 * _3761) + _3087;
        _3576 = ((_3751 * _1528) * _3766) + _3421;
        _3578 = ((_3753 * _1530) * _3766) + _3423;
        _3580 = ((_3755 * _1531) * _3766) + _3425;
    }
    else
    {
        _3570 = _3083;
        _3572 = _3085;
        _3574 = _3087;
        _3576 = _3421;
        _3578 = _3423;
        _3580 = _3425;
    }
    float _5737 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
    float _5748 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
    float _5759 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
    float _5770 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
    float _3605 = cbInstanceData._m0[_1503 + 6u].w * (isnan(1.0) ? _5770 : (isnan(_5770) ? 1.0 : min(_5770, 1.0)));
    float _3610 = _1465 / cbSceneParam._m0[86u].x;
    float _3611 = _1466 / cbSceneParam._m0[86u].y;
    vec4 _3625 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3610, _3611, (log2((isnan(cbSceneParam._m0[77u].w) ? _1400 : (isnan(_1400) ? cbSceneParam._m0[77u].w : min(_1400, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3627 = _3625.x;
    float _3628 = _3625.y;
    float _3629 = _3625.z;
    float _3630 = _3625.w;
    float _3701;
    float _3703;
    float _3705;
    float _3707;
    if (_1400 > cbSceneParam._m0[78u].w)
    {
        float _3664 = isnan(_1400) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1400 : min(cbSceneParam._m0[80u].w, _1400));
        float _3665 = _3664 / _1400;
        float _3676 = _3665 * _1450;
        float _3677 = _1451 * _3665;
        float _3678 = (-0.0) - _3677;
        float _3679 = _3665 * _1452;
        float _3681 = (cbSceneParam._m0[77u].w * _3678) / _3664;
        float _3682 = _3681 + cbSceneParam._m0[79u].w;
        float _3683 = cbSceneParam._m0[79u].w - _3677;
        float _3689 = sqrt(((_3676 * _3676) + (_3677 * _3677)) + (_3679 * _3679));
        float _3692 = (1.0 - (cbSceneParam._m0[77u].w / _3664)) * _3689;
        float _3697 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3699 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3852;
        if (abs((_3678 - _3681) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3852 = ((((_3682 > 0.0) ? exp2(_3697 * _3682) : (2.0 - exp2(_3699 * _3682))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3692;
        }
        else
        {
            float _3812 = 1.0 / cbSceneParam._m0[80u].x;
            float _3813 = isnan(_3683) ? _3682 : (isnan(_3682) ? _3683 : max(_3682, _3683));
            float _3814 = isnan(_3683) ? _3682 : (isnan(_3682) ? _3683 : min(_3682, _3683));
            float _3823 = isnan(0.0) ? _3813 : (isnan(_3813) ? 0.0 : min(_3813, 0.0));
            float _3824 = isnan(0.0) ? _3814 : (isnan(_3814) ? 0.0 : min(_3814, 0.0));
            _3852 = ((abs(_3689 / _3678) * cbSceneParam._m0[80u].y) * ((((_3823 - _3824) * 2.0) - ((exp2(_3697 * (isnan(0.0) ? _3813 : (isnan(_3813) ? 0.0 : max(_3813, 0.0)))) - exp2(_3697 * (isnan(0.0) ? _3814 : (isnan(_3814) ? 0.0 : max(_3814, 0.0))))) * _3812)) - ((exp2(_3699 * _3823) - exp2(_3699 * _3824)) * _3812))) + (_3692 * cbSceneParam._m0[80u].z);
        }
        vec4 _3854 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3610, _3611, 1.0), 0.0);
        float _3863 = exp2((_3852 * (-1.44269502162933349609375)) * (1.0 - _3854.w));
        float _3864 = log2(_3863);
        float _3880 = log2(_3630);
        _3701 = (exp2(_3880 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3864 * cbSceneParam._m0[78u].x)) * _3854.x) / cbSceneParam._m0[78u].x)) + _3627;
        _3703 = (exp2(_3880 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3864 * cbSceneParam._m0[78u].y)) * _3854.y) / cbSceneParam._m0[78u].y)) + _3628;
        _3705 = (exp2(_3880 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3864 * cbSceneParam._m0[78u].z)) * _3854.z) / cbSceneParam._m0[78u].z)) + _3629;
        _3707 = _3863 * _3630;
    }
    else
    {
        _3701 = _3627;
        _3703 = _3628;
        _3705 = _3629;
        _3707 = _3630;
    }
    float _3719 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3720 = _3719 == 3.0;
    float _3721 = log2(_3707);
    float _3728 = exp2(_3721 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5737 : (isnan(_5737) ? 1.0 : min(_5737, 1.0))) * (_3570 + ((isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0))) * _1543))) + ((_3576 + ((isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0))) * _2351)) * cbPerFrame._m0[3u].x));
    float _3729 = exp2(_3721 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5748 : (isnan(_5748) ? 1.0 : min(_5748, 1.0))) * (_3572 + ((isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0))) * _1543))) + ((_3578 + ((isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0))) * _2351)) * cbPerFrame._m0[3u].x));
    float _3730 = exp2(_3721 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5759 : (isnan(_5759) ? 1.0 : min(_5759, 1.0))) * (_3574 + ((isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0))) * _1543))) + ((_3580 + ((isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0))) * _2351)) * cbPerFrame._m0[3u].x));
    float _3739 = (_3719 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3739 * (_3720 ? _3728 : (_3728 + (cbSceneParam._m0[72u].w * _3701)));
    SV_Target.y = _3739 * (_3720 ? _3729 : (_3729 + (cbSceneParam._m0[72u].w * _3703)));
    SV_Target.z = _3739 * (_3720 ? _3730 : (_3730 + (cbSceneParam._m0[72u].w * _3705)));
    SV_Target.w = _3605;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3605;
}


