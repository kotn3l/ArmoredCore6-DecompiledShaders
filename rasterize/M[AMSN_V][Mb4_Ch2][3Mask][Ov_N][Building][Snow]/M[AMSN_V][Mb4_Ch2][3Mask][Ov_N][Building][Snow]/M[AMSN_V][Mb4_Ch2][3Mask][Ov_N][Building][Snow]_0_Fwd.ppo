#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[27];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_18;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1912;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _244 = _243 * _235;
    float _245 = _243 * _236;
    float _246 = _243 * _237;
    float _256 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _257 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _258 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _262 = inversesqrt(dot(vec3(_256, _257, _258), vec3(_256, _257, _258)));
    float _263 = _262 * _256;
    float _264 = _262 * _257;
    float _265 = _262 * _258;
    float _269 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _270 = _269 * NORMAL.x;
    float _271 = _269 * NORMAL.y;
    float _272 = _269 * NORMAL.z;
    float _276 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _277 = _276 * TANGENT.x;
    float _278 = _276 * TANGENT.y;
    float _279 = _276 * TANGENT.z;
    float _283 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _284 = _283 * TANGENT_2.x;
    float _285 = _283 * TANGENT_2.y;
    float _286 = _283 * TANGENT_2.z;
    float _291;
    float _292;
    float _293;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _291 = (-0.0) - _270;
        _292 = (-0.0) - _271;
        _293 = (-0.0) - _272;
    }
    else
    {
        _291 = _270;
        _292 = _271;
        _293 = _272;
    }
    vec4 _319 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _331 = 1.0 - ((1.0 - _319.z) * 1.39999997615814208984375);
    float _4239 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _332 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _334 = 1.0 - ((1.0 - _319.x) * 1.39999997615814208984375);
    float _4250 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _335 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _337 = 1.0 - ((1.0 - _319.y) * 1.39999997615814208984375);
    float _4261 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _338 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _340 = (_335 + _332) + _338;
    float _347 = (_340 * (1.0 - cbMtdParam._m0[20u].x)) + cbMtdParam._m0[20u].x;
    float _348 = (_340 * (1.0 - cbMtdParam._m0[20u].y)) + cbMtdParam._m0[20u].y;
    float _349 = (_340 * (1.0 - cbMtdParam._m0[20u].z)) + cbMtdParam._m0[20u].z;
    vec4 _374 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _383 = 1.0 - ((1.0 - _374.x) * 1.39999997615814208984375);
    float _4272 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _384 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _394 = (_384 * ((cbMtdParam._m0[9u].x - _347) + ((1.0 - cbMtdParam._m0[9u].x) * _340))) + _347;
    float _395 = (_384 * ((cbMtdParam._m0[9u].y - _348) + ((1.0 - cbMtdParam._m0[9u].y) * _340))) + _348;
    float _396 = (_384 * ((cbMtdParam._m0[9u].z - _349) + ((1.0 - cbMtdParam._m0[9u].z) * _340))) + _349;
    float _410 = 1.0 - ((1.0 - _374.y) * 1.39999997615814208984375);
    float _4283 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _411 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _421 = (((cbMtdParam._m0[18u].x - _394) + ((1.0 - cbMtdParam._m0[18u].x) * _340)) * _411) + _394;
    float _422 = (((cbMtdParam._m0[18u].y - _395) + ((1.0 - cbMtdParam._m0[18u].y) * _340)) * _411) + _395;
    float _423 = (((cbMtdParam._m0[18u].z - _396) + ((1.0 - cbMtdParam._m0[18u].z) * _340)) * _411) + _396;
    float _437 = 1.0 - ((1.0 - _374.z) * 1.39999997615814208984375);
    float _4294 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _438 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    vec4 _466 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.z) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.w) + cbTextureTilingScale._m0[10u].w));
    float _468 = _466.x;
    float _469 = _468 * cbMtdParam._m0[25u].w;
    float _483 = ((cbMtdParam._m0[22u].z * (-1.39999997615814208984375)) * ((TEXCOORD_5.w - _469) + (cbMtdParam._m0[23u].y * TEXCOORD_5.w))) + 1.0;
    float _4305 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _485 = 1.0 - (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)));
    float _493 = ((cbMtdParam._m0[22u].y * (-1.39999997615814208984375)) * ((TEXCOORD_5.z - _469) + (cbMtdParam._m0[23u].z * TEXCOORD_5.z))) + 1.0;
    float _4316 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _495 = 1.0 - (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0)));
    vec4 _513 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _515 = _513.x;
    float _516 = _513.y;
    float _517 = _513.z;
    float _518 = cbMtdParam._m0[10u].x * _495;
    float _520 = cbMtdParam._m0[10u].y * _495;
    float _522 = cbMtdParam._m0[10u].z * _495;
    float _538 = ((_515 * (cbMtdParam._m0[17u].x - _518)) * _485) + (_518 * _515);
    float _539 = ((_516 * (cbMtdParam._m0[17u].y - _520)) * _485) + (_520 * _516);
    float _540 = ((_517 * (cbMtdParam._m0[17u].z - _522)) * _485) + (_522 * _517);
    float _560 = cbMtdParam._m0[23u].x * (-1.39999997615814208984375);
    float _564 = (_560 * ((TEXCOORD_9.x - _469) + (cbMtdParam._m0[22u].x * TEXCOORD_9.x))) + 1.0;
    float _565 = (_560 * ((TEXCOORD_9.y - _469) + (cbMtdParam._m0[22u].x * TEXCOORD_9.y))) + 1.0;
    float _566 = (_560 * ((TEXCOORD_9.z - _469) + (cbMtdParam._m0[22u].x * TEXCOORD_9.z))) + 1.0;
    float _4327 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _4338 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _4349 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _578 = (1.0 - cbMtdParam._m0[24u].y) + _335;
    float _581 = _578 * (1.0 - (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))));
    float _582 = _578 * (1.0 - (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))));
    float _583 = ((_335 + 1.0) - cbMtdParam._m0[24u].y) * (1.0 - (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))));
    float _593 = _495 + _485;
    float _594 = _593 + _581;
    float _595 = _593 + _582;
    float _596 = _593 + _583;
    float _597 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _598 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _599 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _600 = isnan(1.0) ? _597 : (isnan(_597) ? 1.0 : min(_597, 1.0));
    float _601 = isnan(1.0) ? _598 : (isnan(_598) ? 1.0 : min(_598, 1.0));
    float _602 = isnan(1.0) ? _599 : (isnan(_599) ? 1.0 : min(_599, 1.0));
    vec4 _620 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _625 = _620.w;
    float _626 = _620.x * cbMtdParam._m0[13u].x;
    float _627 = _620.y * cbMtdParam._m0[13u].y;
    float _628 = _620.z * cbMtdParam._m0[13u].z;
    vec4 _646 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w));
    float _660 = (((_646.x * cbMtdParam._m0[14u].x) - _626) * _335) + _626;
    float _661 = (((_646.y * cbMtdParam._m0[14u].y) - _627) * _335) + _627;
    float _662 = (((_646.z * cbMtdParam._m0[14u].z) - _628) * _335) + _628;
    vec4 _680 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.z) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.w) + cbTextureTilingScale._m0[15u].w));
    float _694 = (((_680.x * cbMtdParam._m0[15u].x) - _660) * _338) + _660;
    float _695 = (((_680.y * cbMtdParam._m0[15u].y) - _661) * _338) + _661;
    float _696 = (((_680.z * cbMtdParam._m0[15u].z) - _662) * _338) + _662;
    vec4 _714 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _728 = (((_714.x * cbMtdParam._m0[16u].x) - _694) * _332) + _694;
    float _729 = (((_714.y * cbMtdParam._m0[16u].y) - _695) * _332) + _695;
    float _730 = (((_714.z * cbMtdParam._m0[16u].z) - _696) * _332) + _696;
    float _750 = ((_728 - (_728 * _600)) + (((_600 * 4.55000019073486328125) * ((_581 * ((cbMtdParam._m0[11u].x * _515) - _538)) + _538)) * _728)) * ((((cbMtdParam._m0[19u].x - _421) + ((1.0 - cbMtdParam._m0[19u].x) * _340)) * _438) + _421);
    float _751 = ((_729 - (_729 * _601)) + (((_601 * 4.55000019073486328125) * ((_582 * ((cbMtdParam._m0[11u].y * _516) - _539)) + _539)) * _729)) * ((((cbMtdParam._m0[19u].y - _422) + ((1.0 - cbMtdParam._m0[19u].y) * _340)) * _438) + _422);
    float _752 = ((_730 - (_602 * _730)) + (((_602 * 4.55000019073486328125) * ((_583 * ((cbMtdParam._m0[11u].z * _517) - _540)) + _540)) * _730)) * ((((cbMtdParam._m0[19u].z - _423) + ((1.0 - cbMtdParam._m0[19u].z) * _340)) * _438) + _423);
    float _758 = (((1.0 - TEXCOORD_5.y) * (-2.7999999523162841796875)) * cbMtdParam._m0[25u].y) + 1.0;
    float _4390 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _770 = ((((_468 + (-1.0)) + ((1.0 - TEXCOORD_5.x) * 2.0)) * (-1.39999997615814208984375)) * cbMtdParam._m0[25u].x) + 1.0;
    float _4401 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    vec4 _785 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _791 = (_785.x * 2.0) + (-1.0);
    float _792 = (_785.y * 2.0) + (-1.0);
    float _793 = dot(vec2(_791, _792), vec2(_791, _792));
    float _4412 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _798 = sqrt(1.0 - (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))));
    float _801 = fma(_798, _291, fma(_792, _277, _791 * _244));
    float _804 = fma(_798, _292, fma(_792, _278, _791 * _245));
    float _807 = fma(_798, _293, fma(_792, _279, _791 * _246));
    float _816 = exp2(log2(inversesqrt(dot(vec3(_801, _804, _807), vec3(_801, _804, _807))) * _804) * cbMtdParam._m0[24u].w) * cbMtdParam._m0[24u].z;
    float _4423 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _819 = ((isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) + (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0)))) * (1.0 - (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))));
    float _4434 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _820 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
    float _822 = 3.0 - (_820 * 2.0);
    float _827 = _820 * _820;
    float _834 = ((_827 * (cbMtdParam._m0[12u].x - _750)) * _822) + _750;
    float _835 = ((_827 * (cbMtdParam._m0[12u].y - _751)) * _822) + _751;
    float _836 = ((_827 * (cbMtdParam._m0[12u].z - _752)) * _822) + _752;
    float _849 = ((cbMtdParam._m0[21u].w - cbMtdParam._m0[26u].x) * _600) + cbMtdParam._m0[26u].x;
    float _852 = ((cbMtdParam._m0[21u].x - _849) * _335) + _849;
    float _855 = ((cbMtdParam._m0[21u].y - _852) * _338) + _852;
    float _858 = ((cbMtdParam._m0[21u].z - _855) * _332) + _855;
    vec4 _870 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.z) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.w) + cbTextureTilingScale._m0[16u].w));
    float _874 = _870.z;
    float _877 = (_870.x * 2.0) + (-1.0);
    float _878 = (_870.y * 2.0) + (-1.0);
    float _879 = dot(vec2(_877, _878), vec2(_877, _878));
    float _4445 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _884 = sqrt(1.0 - (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))));
    float _887 = fma(_884, _291, fma(_878, _284, _877 * _263));
    float _890 = fma(_884, _292, fma(_878, _285, _877 * _264));
    float _893 = fma(_884, _293, fma(_878, _286, _877 * _265));
    float _897 = inversesqrt(dot(vec3(_887, _890, _893), vec3(_887, _890, _893)));
    float _898 = _897 * _887;
    float _899 = _897 * _890;
    float _900 = _897 * _893;
    vec4 _913 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_18, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _920 = (_913.x * 2.0) + (-1.0);
    float _921 = (_913.y * 2.0) + (-1.0);
    float _922 = dot(vec2(_920, _921), vec2(_920, _921));
    float _4456 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _930 = ((_913.z - _874) * _819) + _874;
    vec4 _943 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _949 = (_943.x * 2.0) + (-1.0);
    float _950 = (_943.y * 2.0) + (-1.0);
    float _951 = dot(vec2(_949, _950), vec2(_949, _950));
    float _4467 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _956 = sqrt(1.0 - (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))));
    float _959 = fma(_956, _291, fma(_950, _284, _949 * _263));
    float _962 = fma(_956, _292, fma(_950, _285, _949 * _264));
    float _965 = fma(_956, _293, fma(_950, _286, _949 * _265));
    float _969 = inversesqrt(dot(vec3(_959, _962, _965), vec3(_959, _962, _965)));
    float _970 = _969 * _959;
    float _971 = _969 * _962;
    float _972 = _969 * _965;
    float _975 = fma(_972, _246, fma(_971, _245, _970 * _244));
    float _978 = fma(_972, _279, fma(_971, _278, _970 * _277));
    float _981 = fma(_972, _293, fma(_971, _292, _970 * _291));
    float _985 = inversesqrt(dot(vec3(_975, _978, _981), vec3(_975, _978, _981)));
    vec4 _998 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _1004 = (_998.x * 2.0) + (-1.0);
    float _1005 = (_998.y * 2.0) + (-1.0);
    float _1006 = dot(vec2(_1004, _1005), vec2(_1004, _1005));
    float _4478 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1011 = sqrt(1.0 - (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))));
    float _1014 = fma(_1011, _291, fma(_1005, _284, _1004 * _263));
    float _1017 = fma(_1011, _292, fma(_1005, _285, _1004 * _264));
    float _1020 = fma(_1011, _293, fma(_1005, _286, _1004 * _265));
    float _1024 = inversesqrt(dot(vec3(_1014, _1017, _1020), vec3(_1014, _1017, _1020)));
    float _1025 = _1024 * _1014;
    float _1026 = _1024 * _1017;
    float _1027 = _1024 * _1020;
    float _1030 = fma(_1027, _246, fma(_1026, _245, _1025 * _244));
    float _1033 = fma(_1027, _279, fma(_1026, _278, _1025 * _277));
    float _1036 = fma(_1027, _293, fma(_1026, _292, _1025 * _291));
    float _1040 = inversesqrt(dot(vec3(_1030, _1033, _1036), vec3(_1030, _1033, _1036)));
    vec4 _1055 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    float _1061 = (_1055.x * 2.0) + (-1.0);
    float _1062 = (_1055.y * 2.0) + (-1.0);
    float _1063 = dot(vec2(_1061, _1062), vec2(_1061, _1062));
    float _4489 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _1068 = sqrt(1.0 - (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))));
    float _1071 = fma(_1068, _291, fma(_1062, _284, _1061 * _263));
    float _1074 = fma(_1068, _292, fma(_1062, _285, _1061 * _264));
    float _1077 = fma(_1068, _293, fma(_1062, _286, _1061 * _265));
    float _1081 = inversesqrt(dot(vec3(_1071, _1074, _1077), vec3(_1071, _1074, _1077)));
    float _1082 = _1081 * _1071;
    float _1083 = _1081 * _1074;
    float _1084 = _1081 * _1077;
    float _1087 = fma(_1084, _246, fma(_1083, _245, _1082 * _244));
    float _1090 = fma(_1084, _279, fma(_1083, _278, _1082 * _277));
    float _1093 = fma(_1084, _293, fma(_1083, _292, _1082 * _291));
    float _1097 = inversesqrt(dot(vec3(_1087, _1090, _1093), vec3(_1087, _1090, _1093)));
    float _1103 = fma(_900, _246, fma(_899, _245, _898 * _244));
    float _1106 = fma(_900, _279, fma(_899, _278, _898 * _277));
    float _1109 = fma(_900, _293, fma(_899, _292, _898 * _291));
    float _1113 = inversesqrt(dot(vec3(_1103, _1106, _1109), vec3(_1103, _1106, _1109)));
    float _1114 = _1113 * _1103;
    float _1115 = _1113 * _1106;
    float _1116 = _1113 * _1109;
    float _1123 = (((_1097 * _1087) - _1114) * _335) + _1114;
    float _1124 = (((_1097 * _1090) - _1115) * _335) + _1115;
    float _1125 = (((_1097 * _1093) - _1116) * _335) + _1116;
    vec4 _1138 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _1144 = (_1138.x * 2.0) + (-1.0);
    float _1145 = (_1138.y * 2.0) + (-1.0);
    float _1146 = dot(vec2(_1144, _1145), vec2(_1144, _1145));
    float _4500 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _1151 = sqrt(1.0 - (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))));
    float _1154 = fma(_1151, _291, fma(_1145, _284, _1144 * _263));
    float _1157 = fma(_1151, _292, fma(_1145, _285, _1144 * _264));
    float _1160 = fma(_1151, _293, fma(_1145, _286, _1144 * _265));
    float _1164 = inversesqrt(dot(vec3(_1154, _1157, _1160), vec3(_1154, _1157, _1160)));
    float _1165 = _1164 * _1154;
    float _1166 = _1164 * _1157;
    float _1167 = _1164 * _1160;
    float _1170 = fma(_1167, _246, fma(_1166, _245, _1165 * _244));
    float _1173 = fma(_1167, _279, fma(_1166, _278, _1165 * _277));
    float _1176 = fma(_1167, _293, fma(_1166, _292, _1165 * _291));
    float _1180 = inversesqrt(dot(vec3(_1170, _1173, _1176), vec3(_1170, _1173, _1176)));
    float _1190 = (((_1180 * _1170) - _1123) * _338) + _1123;
    float _1191 = (((_1180 * _1173) - _1124) * _338) + _1124;
    float _1192 = (((_1180 * _1176) - _1125) * _338) + _1125;
    vec4 _1205 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _1211 = (_1205.x * 2.0) + (-1.0);
    float _1212 = (_1205.y * 2.0) + (-1.0);
    float _1213 = dot(vec2(_1211, _1212), vec2(_1211, _1212));
    float _4511 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
    float _1218 = sqrt(1.0 - (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))));
    float _1221 = fma(_1218, _291, fma(_1212, _284, _1211 * _263));
    float _1224 = fma(_1218, _292, fma(_1212, _285, _1211 * _264));
    float _1227 = fma(_1218, _293, fma(_1212, _286, _1211 * _265));
    float _1231 = inversesqrt(dot(vec3(_1221, _1224, _1227), vec3(_1221, _1224, _1227)));
    float _1232 = _1231 * _1221;
    float _1233 = _1231 * _1224;
    float _1234 = _1231 * _1227;
    float _1237 = fma(_1234, _246, fma(_1233, _245, _1232 * _244));
    float _1240 = fma(_1234, _279, fma(_1233, _278, _1232 * _277));
    float _1243 = fma(_1234, _293, fma(_1233, _292, _1232 * _291));
    float _1247 = inversesqrt(dot(vec3(_1237, _1240, _1243), vec3(_1237, _1240, _1243)));
    float _1257 = (((_1247 * _1243) - _1192) * _332) + _1192;
    vec4 _1269 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_N_Building_Snow_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w));
    float _1275 = (_1269.x * 2.0) + (-1.0);
    float _1276 = (_1269.y * 2.0) + (-1.0);
    float _1277 = dot(vec2(_1275, _1276), vec2(_1275, _1276));
    float _4522 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
    float _1282 = sqrt(1.0 - (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))));
    float _1285 = fma(_1282, _291, fma(_1276, _284, _1275 * _263));
    float _1288 = fma(_1282, _292, fma(_1276, _285, _1275 * _264));
    float _1291 = fma(_1282, _293, fma(_1276, _286, _1275 * _265));
    float _1295 = inversesqrt(dot(vec3(_1285, _1288, _1291), vec3(_1285, _1288, _1291)));
    float _1296 = _1295 * _1285;
    float _1297 = _1295 * _1288;
    float _1298 = _1295 * _1291;
    float _1301 = fma(_1298, _246, fma(_1297, _245, _1296 * _244));
    float _1304 = fma(_1298, _279, fma(_1297, _278, _1296 * _277));
    float _1307 = fma(_1298, _293, fma(_1297, _292, _1296 * _291));
    float _1311 = inversesqrt(dot(vec3(_1301, _1304, _1307), vec3(_1301, _1304, _1307)));
    float _1344 = (((((((_1030 * _485) * _1040) * cbMtdParam._m0[23u].w) + ((((_594 * _578) * _975) * _985) * cbMtdParam._m0[24u].x)) + _1190) + (((_1247 * _1237) - _1190) * _332)) + (((_1301 * _495) * _1311) * cbMtdParam._m0[22u].w)) + (cbMtdParam._m0[25u].z * _791);
    float _1349 = (((((((_1033 * _485) * _1040) * cbMtdParam._m0[23u].w) + ((((_595 * _578) * _978) * _985) * cbMtdParam._m0[24u].x)) + _1191) + (((_1247 * _1240) - _1191) * _332)) + (((_1304 * _495) * _1311) * cbMtdParam._m0[22u].w)) + (cbMtdParam._m0[25u].z * _792);
    float _1356 = ((_920 - _1344) * _819) + _1344;
    float _1357 = (_819 * (_921 - _1349)) + _1349;
    float _1358 = (_819 * (sqrt(1.0 - (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) - _1257)) + _1257;
    float _1361 = fma(_1358, _291, fma(_1357, _277, _1356 * _244));
    float _1364 = fma(_1358, _292, fma(_1357, _278, _1356 * _245));
    float _1367 = fma(_1358, _293, fma(_1357, _279, _1356 * _246));
    float _1371 = inversesqrt(dot(vec3(_1361, _1364, _1367), vec3(_1361, _1364, _1367)));
    float _1372 = _1371 * _1361;
    float _1373 = _1371 * _1364;
    float _1374 = _1371 * _1367;
    float _4533 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _1375 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
    float _4544 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _1376 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
    float _4555 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _4566 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _4577 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _4588 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _1380 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    float _1396 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1436 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1446 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1436);
    float _1447 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1436);
    float _1448 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1436);
    float _1452 = inversesqrt(dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448)));
    float _1453 = _1446 * _1452;
    float _1454 = _1447 * _1452;
    float _1455 = _1448 * _1452;
    float _1461 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1462 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1480 = fma(_1374, cbSceneParam._m0[5u].z, fma(_1373, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1372));
    float _1483 = fma(_1374, cbSceneParam._m0[6u].z, fma(_1373, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1372));
    float _1486 = fma(_1374, cbSceneParam._m0[7u].z, fma(_1373, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1372));
    uint _1499 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1501 = (_1499 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1507 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0)))) * cbInstanceData._m0[_1501].x;
    float _1508 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0)))) * cbInstanceData._m0[_1501].y;
    float _1509 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0)))) * cbInstanceData._m0[_1501].z;
    float _4599 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
    float _1510 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
    float _4610 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
    float _1511 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
    float _4621 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
    float _1512 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
    float _1513 = 1.0 - _1380;
    float _1514 = _1510 * _1513;
    float _1515 = _1511 * _1513;
    float _1516 = _1512 * _1513;
    float _1521 = (_1510 + (-0.039999999105930328369140625)) * _1380;
    float _1522 = (_1511 + (-0.039999999105930328369140625)) * _1380;
    float _1523 = (_1512 + (-0.039999999105930328369140625)) * _1380;
    float _1524 = _1521 + 0.039999999105930328369140625;
    float _1526 = _1522 + 0.039999999105930328369140625;
    float _1527 = _1523 + 0.039999999105930328369140625;
    vec4 _1536 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1461, cbSceneParam._m0[86u].y * _1462));
    float _1539 = _1536.x * TEXCOORD_9.w;
    float _1540 = dot(vec3(_1372, _1373, _1374), vec3(_1453, _1454, _1455));
    float _1543 = _1540 * 2.0;
    float _1547 = (_1543 * _1372) - _1453;
    float _1548 = (_1543 * _1373) - _1454;
    float _1549 = (_1543 * _1374) - _1455;
    float _1553 = abs(dot(vec3(_1453, _1454, _1455), vec3(_1372, _1373, _1374)));
    float _4632 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
    float _1555 = sqrt(_1376);
    float _1567 = exp2((_1555 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1555 * 3.0));
    float _1573 = (1.0 - _1567) * ((_1555 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1574 = _1567 * _1555;
    float _1602 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1606 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1610 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1911;
    float _1913;
    float _1914;
    float _1915;
    float _1916;
    float _1917;
    float _1918;
    float _1919;
    float _1920;
    float _1921;
    float _1922;
    float _1923;
    float _1924;
    float _1925;
    float _1926;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1636 = fma(_1610, cbModelParam._m0[26u].z, fma(_1606, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1602));
        float _1640 = fma(_1610, cbModelParam._m0[27u].z, fma(_1606, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1602));
        float _1644 = fma(_1610, cbModelParam._m0[28u].z, fma(_1606, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1602));
        float _1669 = _1602 + _1372;
        float _1670 = _1606 + _1373;
        float _1671 = _1610 + _1374;
        float _1681 = fma(_1671, cbModelParam._m0[26u].z, fma(_1670, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1669)) - _1636;
        float _1682 = fma(_1671, cbModelParam._m0[27u].z, fma(_1670, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1669)) - _1640;
        float _1683 = fma(_1671, cbModelParam._m0[28u].z, fma(_1670, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1669)) - _1644;
        float _1687 = inversesqrt(dot(vec3(_1681, _1682, _1683), vec3(_1681, _1682, _1683)));
        float _1700 = ((_1687 * _1681) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1636 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1701 = ((_1687 * _1682) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1640 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1702 = ((_1687 * _1683) / cbModelParam._m0[34u].z) + ((((((_1644 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1705 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1700, _1701, _1702), 0.0);
        vec4 _1712 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1700, _1701, _1702), 0.0);
        vec4 _1719 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1700, _1701, _1702), 0.0);
        vec4 _1726 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1700, _1701, _1702), 0.0);
        float _1739 = exp2((_1705.w + (-0.5)) * 20.0) * 2.0;
        float _1740 = _1739 * (_1705.x + (-0.5));
        float _1741 = _1739 * (_1705.y + (-0.5));
        float _1742 = _1739 * (_1705.z + (-0.5));
        float _1749 = exp2((_1712.w + (-0.5)) * 20.0) * 2.0;
        float _1750 = _1749 * (_1712.x + (-0.5));
        float _1751 = _1749 * (_1712.y + (-0.5));
        float _1752 = _1749 * (_1712.z + (-0.5));
        float _1759 = exp2((_1719.w + (-0.5)) * 20.0) * 2.0;
        float _1760 = _1759 * (_1719.x + (-0.5));
        float _1761 = _1759 * (_1719.y + (-0.5));
        float _1762 = _1759 * (_1719.z + (-0.5));
        float _1769 = exp2((_1726.w + (-0.5)) * 20.0) * 2.0;
        float _1770 = _1769 * (_1726.x + (-0.5));
        float _1771 = _1769 * (_1726.y + (-0.5));
        float _1772 = _1769 * (_1726.z + (-0.5));
        float _1773 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1774 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1775 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1776 = _1740 * 0.5;
        float _1777 = _1750 * 0.5;
        float _1778 = _1760 * 0.5;
        float _1779 = dot(vec3(_1776, _1777, _1778), vec3(_1776, _1777, _1778));
        float _1784 = (_1779 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1779);
        float _1793 = (dot(vec3(_1372, _1373, _1374), vec3(_1784 * _1776, _1784 * _1777, _1784 * _1778)) + 1.0) * 0.5;
        float _4658 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1803 = sqrt(((_1777 * _1777) + (_1776 * _1776)) + (_1778 * _1778)) / (_1773 + 9.9999997473787516355514526367188e-06);
        float _4669 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1804 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
        float _1805 = _1804 * 2.0;
        float _1809 = (1.0 - _1804) / (_1804 + 1.0);
        float _4680 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
        float _1810 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
        float _1819 = ((((1.0 - _1810) * (_1805 + 2.0)) * exp2(log2(isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_1805 + 1.0))) + _1810) * _1773;
        float _1820 = _1741 * 0.5;
        float _1821 = _1751 * 0.5;
        float _1822 = _1761 * 0.5;
        float _1823 = dot(vec3(_1820, _1821, _1822), vec3(_1820, _1821, _1822));
        float _1828 = (_1823 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1823);
        float _1836 = (dot(vec3(_1372, _1373, _1374), vec3(_1828 * _1820, _1828 * _1821, _1828 * _1822)) + 1.0) * 0.5;
        float _4691 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1845 = sqrt(((_1821 * _1821) + (_1820 * _1820)) + (_1822 * _1822)) / (_1774 + 9.9999997473787516355514526367188e-06);
        float _4702 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
        float _1846 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _1847 = _1846 * 2.0;
        float _1851 = (1.0 - _1846) / (_1846 + 1.0);
        float _4713 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _1852 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
        float _1861 = ((((1.0 - _1852) * (_1847 + 2.0)) * exp2(log2(isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (_1847 + 1.0))) + _1852) * _1774;
        float _1862 = _1742 * 0.5;
        float _1863 = _1752 * 0.5;
        float _1864 = _1762 * 0.5;
        float _1865 = dot(vec3(_1862, _1863, _1864), vec3(_1862, _1863, _1864));
        float _1870 = (_1865 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1865);
        float _1878 = (dot(vec3(_1372, _1373, _1374), vec3(_1870 * _1862, _1870 * _1863, _1870 * _1864)) + 1.0) * 0.5;
        float _4724 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
        float _1887 = sqrt(((_1863 * _1863) + (_1862 * _1862)) + (_1864 * _1864)) / (_1775 + 9.9999997473787516355514526367188e-06);
        float _4735 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1888 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
        float _1889 = _1888 * 2.0;
        float _1893 = (1.0 - _1888) / (_1888 + 1.0);
        float _4746 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
        float _1894 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
        float _1903 = ((((1.0 - _1894) * (_1889 + 2.0)) * exp2(log2(isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (_1889 + 1.0))) + _1894) * _1775;
        _1911 = _1742;
        _1913 = _1741;
        _1914 = _1740;
        _1915 = _1752;
        _1916 = _1751;
        _1917 = _1750;
        _1918 = _1762;
        _1919 = _1761;
        _1920 = _1760;
        _1921 = _1775;
        _1922 = _1774;
        _1923 = _1773;
        _1924 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0)));
        _1925 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)));
        _1926 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0)));
    }
    else
    {
        _1911 = _1912;
        _1913 = _1912;
        _1914 = _1912;
        _1915 = _1912;
        _1916 = _1912;
        _1917 = _1912;
        _1918 = _1912;
        _1919 = _1912;
        _1920 = _1912;
        _1921 = _1912;
        _1922 = _1912;
        _1923 = _1912;
        _1924 = 0.0;
        _1925 = 0.0;
        _1926 = 0.0;
    }
    float _2221;
    float _2222;
    float _2223;
    float _2224;
    float _2225;
    float _2226;
    float _2227;
    float _2228;
    float _2229;
    float _2230;
    float _2231;
    float _2232;
    float _2233;
    float _2234;
    float _2235;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1952 = fma(_1610, cbModelParam._m0[30u].z, fma(_1606, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1602));
        float _1956 = fma(_1610, cbModelParam._m0[31u].z, fma(_1606, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1602));
        float _1960 = fma(_1610, cbModelParam._m0[32u].z, fma(_1606, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1602));
        float _1983 = _1602 + _1372;
        float _1984 = _1606 + _1373;
        float _1985 = _1610 + _1374;
        float _1995 = fma(_1985, cbModelParam._m0[30u].z, fma(_1984, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1983)) - _1952;
        float _1996 = fma(_1985, cbModelParam._m0[31u].z, fma(_1984, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1983)) - _1956;
        float _1997 = fma(_1985, cbModelParam._m0[32u].z, fma(_1984, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1983)) - _1960;
        float _2001 = inversesqrt(dot(vec3(_1995, _1996, _1997), vec3(_1995, _1996, _1997)));
        float _2014 = ((_2001 * _1995) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1952 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _2015 = ((_2001 * _1996) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1956 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _2016 = ((_2001 * _1997) / cbModelParam._m0[35u].z) + ((((((_1960 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _2018 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_2014, _2015, _2016), 0.0);
        vec4 _2025 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_2014, _2015, _2016), 0.0);
        vec4 _2032 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_2014, _2015, _2016), 0.0);
        vec4 _2039 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_2014, _2015, _2016), 0.0);
        float _2051 = exp2((_2018.w + (-0.5)) * 20.0) * 2.0;
        float _2052 = _2051 * (_2018.x + (-0.5));
        float _2053 = _2051 * (_2018.y + (-0.5));
        float _2054 = _2051 * (_2018.z + (-0.5));
        float _2061 = exp2((_2025.w + (-0.5)) * 20.0) * 2.0;
        float _2062 = _2061 * (_2025.x + (-0.5));
        float _2063 = _2061 * (_2025.y + (-0.5));
        float _2064 = _2061 * (_2025.z + (-0.5));
        float _2071 = exp2((_2032.w + (-0.5)) * 20.0) * 2.0;
        float _2072 = _2071 * (_2032.x + (-0.5));
        float _2073 = _2071 * (_2032.y + (-0.5));
        float _2074 = _2071 * (_2032.z + (-0.5));
        float _2081 = exp2((_2039.w + (-0.5)) * 20.0) * 2.0;
        float _2082 = _2081 * (_2039.x + (-0.5));
        float _2083 = _2081 * (_2039.y + (-0.5));
        float _2084 = _2081 * (_2039.z + (-0.5));
        float _2085 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2086 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2087 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2088 = _2052 * 0.5;
        float _2089 = _2062 * 0.5;
        float _2090 = _2072 * 0.5;
        float _2091 = dot(vec3(_2088, _2089, _2090), vec3(_2088, _2089, _2090));
        float _2096 = (_2091 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2091);
        float _2104 = (dot(vec3(_1372, _1373, _1374), vec3(_2096 * _2088, _2096 * _2089, _2096 * _2090)) + 1.0) * 0.5;
        float _4787 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2113 = sqrt(((_2089 * _2089) + (_2088 * _2088)) + (_2090 * _2090)) / (_2085 + 9.9999997473787516355514526367188e-06);
        float _4798 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2114 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
        float _2115 = _2114 * 2.0;
        float _2119 = (1.0 - _2114) / (_2114 + 1.0);
        float _4809 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2120 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
        float _2129 = ((((1.0 - _2120) * (_2115 + 2.0)) * exp2(log2(isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0))) * (_2115 + 1.0))) + _2120) * _2085;
        float _2130 = _2053 * 0.5;
        float _2131 = _2063 * 0.5;
        float _2132 = _2073 * 0.5;
        float _2133 = dot(vec3(_2130, _2131, _2132), vec3(_2130, _2131, _2132));
        float _2138 = (_2133 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2133);
        float _2146 = (dot(vec3(_1372, _1373, _1374), vec3(_2138 * _2130, _2138 * _2131, _2138 * _2132)) + 1.0) * 0.5;
        float _4820 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2155 = sqrt(((_2131 * _2131) + (_2130 * _2130)) + (_2132 * _2132)) / (_2086 + 9.9999997473787516355514526367188e-06);
        float _4831 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2156 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
        float _2157 = _2156 * 2.0;
        float _2161 = (1.0 - _2156) / (_2156 + 1.0);
        float _4842 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2162 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
        float _2171 = ((((1.0 - _2162) * (_2157 + 2.0)) * exp2(log2(isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0))) * (_2157 + 1.0))) + _2162) * _2086;
        float _2172 = _2054 * 0.5;
        float _2173 = _2064 * 0.5;
        float _2174 = _2074 * 0.5;
        float _2175 = dot(vec3(_2172, _2173, _2174), vec3(_2172, _2173, _2174));
        float _2180 = (_2175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2175);
        float _2188 = (dot(vec3(_1372, _1373, _1374), vec3(_2180 * _2172, _2180 * _2173, _2180 * _2174)) + 1.0) * 0.5;
        float _4853 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2197 = sqrt(((_2173 * _2173) + (_2172 * _2172)) + (_2174 * _2174)) / (_2087 + 9.9999997473787516355514526367188e-06);
        float _4864 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2198 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
        float _2199 = _2198 * 2.0;
        float _2203 = (1.0 - _2198) / (_2198 + 1.0);
        float _4875 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2204 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
        float _2213 = ((((1.0 - _2204) * (_2199 + 2.0)) * exp2(log2(isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0))) * (_2199 + 1.0))) + _2204) * _2087;
        _2221 = _2054;
        _2222 = _2053;
        _2223 = _2052;
        _2224 = _2064;
        _2225 = _2063;
        _2226 = _2062;
        _2227 = _2074;
        _2228 = _2073;
        _2229 = _2072;
        _2230 = _2087;
        _2231 = _2086;
        _2232 = _2085;
        _2233 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0)));
        _2234 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0)));
        _2235 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0)));
    }
    else
    {
        _2221 = _1912;
        _2222 = _1912;
        _2223 = _1912;
        _2224 = _1912;
        _2225 = _1912;
        _2226 = _1912;
        _2227 = _1912;
        _2228 = _1912;
        _2229 = _1912;
        _2230 = _1912;
        _2231 = _1912;
        _2232 = _1912;
        _2233 = 0.0;
        _2234 = 0.0;
        _2235 = 0.0;
    }
    float _2245 = (cbModelParam._m0[1u].x * (_2233 - _1924)) + _1924;
    float _2246 = (cbModelParam._m0[1u].x * (_2234 - _1925)) + _1925;
    float _2247 = (cbModelParam._m0[1u].x * (_2235 - _1926)) + _1926;
    float _2268 = fma(_2247, cbSceneParam._m0[89u].z, fma(_2246, cbSceneParam._m0[89u].y, _2245 * cbSceneParam._m0[89u].x));
    float _2271 = fma(_2247, cbSceneParam._m0[90u].z, fma(_2246, cbSceneParam._m0[90u].y, _2245 * cbSceneParam._m0[90u].x));
    float _2274 = fma(_2247, cbSceneParam._m0[91u].z, fma(_2246, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2245));
    float _2289 = _1547 * 0.5;
    float _2290 = _1548 * 0.5;
    float _2291 = _1549 * 0.5;
    float _2292 = dot(vec4(_2289, _2290, _2291, 1.0), vec4(_2223, _2226, _2229, _2232));
    float _2295 = dot(vec4(_2289, _2290, _2291, 1.0), vec4(_2222, _2225, _2228, _2231));
    float _2298 = dot(vec4(_2289, _2290, _2291, 1.0), vec4(_2221, _2224, _2227, _2230));
    float _2332;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2305 = dot(vec4(_2289, _2290, _2291, 1.0), vec4(_1911, _1915, _1918, _1921));
        float _2309 = dot(vec4(_2289, _2290, _2291, 1.0), vec4(_1913, _1916, _1919, _1922));
        float _2313 = dot(vec4(_2289, _2290, _2291, 1.0), vec4(_1914, _1917, _1920, _1923));
        float _2320 = dot(vec4(cbModelParam._m0[39u]), vec4(_2289, _2290, _2291, 1.0));
        _2332 = dot(vec3(isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0)), isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0)), isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2320) ? 0.0 : (isnan(0.0) ? _2320 : max(0.0, _2320))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2332 = 1.0;
    }
    float _2343;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2334 = dot(vec4(cbModelParam._m0[40u]), vec4(_2289, _2290, _2291, 1.0));
        _2343 = dot(vec3(isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0)), isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0)), isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2334) ? 0.0 : (isnan(0.0) ? _2334 : max(0.0, _2334))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2343 = 1.0;
    }
    float _2347 = (_2343 * cbModelParam._m0[1u].x) + (_2332 * (1.0 - cbModelParam._m0[1u].x));
    float _2357 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1376);
    float _2358 = isnan(_2357) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2357 : min(cbModelParam._m0[25u].z, _2357));
    float _2438;
    float _2440;
    float _2442;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2405 = fma(_1610, cbModelParam._m0[13u].z, fma(_1606, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1602)) + cbModelParam._m0[13u].w;
        float _2409 = fma(_1610, cbModelParam._m0[14u].z, fma(_1606, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1602)) + cbModelParam._m0[14u].w;
        float _2413 = fma(_1610, cbModelParam._m0[15u].z, fma(_1606, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1602)) + cbModelParam._m0[15u].w;
        float _2416 = fma(_1549, cbModelParam._m0[13u].z, fma(_1548, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1547));
        float _2419 = fma(_1549, cbModelParam._m0[14u].z, fma(_1548, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1547));
        float _2422 = fma(_1549, cbModelParam._m0[15u].z, fma(_1548, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1547));
        float _2450;
        if (_2416 > 0.0)
        {
            _2450 = abs((1.0 - _2405) / _2416);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_2416 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_2405 + 1.0) / _2416);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _2450 = frontier_phi_16_14_ladder;
        }
        float _2652;
        if (_2419 > 0.0)
        {
            _2652 = abs((1.0 - _2409) / _2419);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2419 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2409 + 1.0) / _2419);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2652 = frontier_phi_25_21_ladder;
        }
        float _2906;
        if (_2422 > 0.0)
        {
            _2906 = abs((1.0 - _2413) / _2422);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2422 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2413 + 1.0) / _2422);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2906 = frontier_phi_37_32_ladder;
        }
        float _2908 = isnan(_2652) ? _2450 : (isnan(_2450) ? _2652 : min(_2450, _2652));
        float _2909 = isnan(_2906) ? _2908 : (isnan(_2908) ? _2906 : min(_2908, _2906));
        float _2913 = (_2909 * _2416) + _2405;
        float _2914 = (_2909 * _2419) + _2409;
        float _2915 = (_2909 * _2422) + _2413;
        float _2916 = _2909 * 9.9999997473787516355514526367188e-05;
        float _2918 = (-1.0) - _2916;
        float _2920 = _2916 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2915 > _2920) || ((_2915 < _2918) || ((_2914 > _2920) || ((_2914 < _2918) || ((_2913 < _2918) || (_2913 > _2920))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3043 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2915, cbModelParam._m0[9u].z, fma(_2914, cbModelParam._m0[9u].y, _2913 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2915, cbModelParam._m0[10u].z, fma(_2914, cbModelParam._m0[10u].y, _2913 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2915, cbModelParam._m0[11u].z, fma(_2914, cbModelParam._m0[11u].y, _2913 * cbModelParam._m0[11u].x))), _2358);
            frontier_phi_15_37_ladder = _3043.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _3043.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _3043.x * cbModelParam._m0[1u].y;
        }
        _2438 = frontier_phi_15_37_ladder_2;
        _2440 = frontier_phi_15_37_ladder_1;
        _2442 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _2426 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1547, _1548, _1549), _2358);
        _2438 = _2426.x * cbModelParam._m0[1u].y;
        _2440 = _2426.y * cbModelParam._m0[1u].y;
        _2442 = _2426.z * cbModelParam._m0[1u].y;
    }
    float _2446 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1376);
    float _2447 = isnan(_2446) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2446 : min(cbModelParam._m0[25u].w, _2446));
    float _2536;
    float _2538;
    float _2540;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2500 = fma(_1610, cbModelParam._m0[21u].z, fma(_1606, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1602)) + cbModelParam._m0[21u].w;
        float _2504 = fma(_1610, cbModelParam._m0[22u].z, fma(_1606, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1602)) + cbModelParam._m0[22u].w;
        float _2508 = fma(_1610, cbModelParam._m0[23u].z, fma(_1606, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1602)) + cbModelParam._m0[23u].w;
        float _2511 = fma(_1549, cbModelParam._m0[21u].z, fma(_1548, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1547));
        float _2514 = fma(_1549, cbModelParam._m0[22u].z, fma(_1548, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1547));
        float _2517 = fma(_1549, cbModelParam._m0[23u].z, fma(_1548, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1547));
        float _2657;
        if (_2511 > 0.0)
        {
            _2657 = abs((1.0 - _2500) / _2511);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_2511 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_2500 + 1.0) / _2511);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2657 = frontier_phi_27_23_ladder;
        }
        float _2933;
        if (_2514 > 0.0)
        {
            _2933 = abs((1.0 - _2504) / _2514);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_2514 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_2504 + 1.0) / _2514);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2933 = frontier_phi_39_34_ladder;
        }
        float _3146;
        if (_2517 > 0.0)
        {
            _3146 = abs((1.0 - _2508) / _2517);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_2517 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_2508 + 1.0) / _2517);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _3146 = frontier_phi_48_45_ladder;
        }
        float _3148 = isnan(_2933) ? _2657 : (isnan(_2657) ? _2933 : min(_2657, _2933));
        float _3149 = isnan(_3146) ? _3148 : (isnan(_3148) ? _3146 : min(_3148, _3146));
        float _3153 = (_3149 * _2511) + _2500;
        float _3154 = (_3149 * _2514) + _2504;
        float _3155 = (_3149 * _2517) + _2508;
        float _3156 = _3149 * 9.9999997473787516355514526367188e-05;
        float _3157 = (-1.0) - _3156;
        float _3159 = _3156 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_3155 > _3159) || ((_3155 < _3157) || ((_3154 > _3159) || ((_3154 < _3157) || ((_3153 < _3157) || (_3153 > _3159))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3355 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3155, cbModelParam._m0[17u].z, fma(_3154, cbModelParam._m0[17u].y, _3153 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3155, cbModelParam._m0[18u].z, fma(_3154, cbModelParam._m0[18u].y, _3153 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3155, cbModelParam._m0[19u].z, fma(_3154, cbModelParam._m0[19u].y, _3153 * cbModelParam._m0[19u].x))), _2447);
            frontier_phi_24_48_ladder = _3355.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _3355.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _3355.x * cbModelParam._m0[1u].z;
        }
        _2536 = frontier_phi_24_48_ladder_2;
        _2538 = frontier_phi_24_48_ladder_1;
        _2540 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _2520 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1547, _1548, _1549), _2447);
        _2536 = _2520.x * cbModelParam._m0[1u].z;
        _2538 = _2520.y * cbModelParam._m0[1u].z;
        _2540 = _2520.z * cbModelParam._m0[1u].z;
    }
    float _2553 = (((_1573 * _1524) + _1574) * _1539) * ((cbModelParam._m0[1u].w * (_2536 - _2438)) + _2438);
    float _2555 = (((_1573 * _1526) + _1574) * _1539) * ((cbModelParam._m0[1u].w * (_2538 - _2440)) + _2440);
    float _2557 = (((_1573 * _1527) + _1574) * _1539) * ((cbModelParam._m0[1u].w * (_2540 - _2442)) + _2442);
    float _2560 = fma(_2557, cbSceneParam._m0[89u].z, fma(_2555, cbSceneParam._m0[89u].y, _2553 * cbSceneParam._m0[89u].x));
    float _2563 = fma(_2557, cbSceneParam._m0[90u].z, fma(_2555, cbSceneParam._m0[90u].y, _2553 * cbSceneParam._m0[90u].x));
    float _2566 = fma(_2557, cbSceneParam._m0[91u].z, fma(_2555, cbSceneParam._m0[91u].y, _2553 * cbSceneParam._m0[91u].x));
    uvec4 _2576 = floatBitsToUint(cbInstanceData._m0[_1499 + 5u]);
    uint _2578 = _2576.x * 14u;
    uint _2579 = _2578 + 13u;
    float _2586 = _1539 + (-1.0);
    float _2591 = (cbLight._m0[_2579].x * _2586) + 1.0;
    float _2592 = (cbLight._m0[_2579].y * _2586) + 1.0;
    float _2593 = (cbLight._m0[_2579].z * _2586) + 1.0;
    float _2594 = (cbLight._m0[_2579].w * _2586) + 1.0;
    uint _2595 = _2578 + 5u;
    float _2601 = isnan(1.0) ? _2592 : (isnan(_2592) ? 1.0 : min(_2592, 1.0));
    uint _2605 = _2578 + 4u;
    float _2611 = isnan(1.0) ? _2591 : (isnan(_2591) ? 1.0 : min(_2591, 1.0));
    uint _2615 = _2578 | 1u;
    float _2626 = dot(vec3(cbLight._m0[_2578].xyz), vec3(_1372, _1373, _1374));
    float _2629 = dot(vec3(cbLight._m0[_2615].xyz), vec3(_1372, _1373, _1374));
    float _5011 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
    float _5022 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
    float _2634 = (isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0))) * 0.3183098733425140380859375;
    float _2636 = (isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0))) * 0.3183098733425140380859375;
    float _2643 = ((cbLight._m0[_2595].x * _2601) * _2636) + ((cbLight._m0[_2605].x * _2611) * _2634);
    float _2644 = ((_2601 * cbLight._m0[_2595].y) * _2636) + ((_2611 * cbLight._m0[_2605].y) * _2634);
    float _2645 = ((_2601 * cbLight._m0[_2595].z) * _2636) + ((_2611 * cbLight._m0[_2605].z) * _2634);
    uvec4 _2649 = floatBitsToUint(cbLight._m0[_2578 + 12u]);
    bool _2651 = _2649.x == 0u;
    float _2662;
    float _2664;
    float _2666;
    if (_2651)
    {
        _2662 = _2643;
        _2664 = _2644;
        _2666 = _2645;
    }
    else
    {
        uint _2670 = _2578 + 6u;
        float _2686 = (dot(vec3(cbLight._m0[_2578 + 2u].xyz), vec3(_1372, _1373, _1374)) * 0.5) + 0.5;
        float _2687 = _2686 * _2686;
        float _5033 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
        float _2688 = isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0));
        float _2689 = isnan(1.0) ? _2593 : (isnan(_2593) ? 1.0 : min(_2593, 1.0));
        _2662 = (((cbLight._m0[_2670].x * 0.3183098733425140380859375) * _2688) * _2689) + _2643;
        _2664 = (((cbLight._m0[_2670].y * 0.3183098733425140380859375) * _2688) * _2689) + _2644;
        _2666 = (((cbLight._m0[_2670].z * 0.3183098733425140380859375) * _2688) * _2689) + _2645;
    }
    bool _2669 = _2649.y == 0u;
    float _2707;
    float _2709;
    float _2711;
    if (_2669)
    {
        _2707 = _2662;
        _2709 = _2664;
        _2711 = _2666;
    }
    else
    {
        uint _2877 = _2578 + 7u;
        float _2893 = (dot(vec3(cbLight._m0[_2578 + 3u].xyz), vec3(_1372, _1373, _1374)) * 0.5) + 0.5;
        float _2894 = _2893 * _2893;
        float _5049 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        float _2895 = isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0));
        float _2896 = isnan(1.0) ? _2594 : (isnan(_2594) ? 1.0 : min(_2594, 1.0));
        _2707 = (((cbLight._m0[_2877].x * 0.3183098733425140380859375) * _2895) * _2896) + _2662;
        _2709 = (((cbLight._m0[_2877].y * 0.3183098733425140380859375) * _2895) * _2896) + _2664;
        _2711 = (((cbLight._m0[_2877].z * 0.3183098733425140380859375) * _2895) * _2896) + _2666;
    }
    uint _2714 = _2578 + 8u;
    float _2727 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2578].w)) * _1376) * 0.949999988079071044921875);
    float _2728 = _2727 * _2727;
    float _2729 = cbLight._m0[_2578].x + _1453;
    float _2730 = cbLight._m0[_2578].y + _1454;
    float _2731 = cbLight._m0[_2578].z + _1455;
    float _2735 = inversesqrt(dot(vec3(_2729, _2730, _2731), vec3(_2729, _2730, _2731)));
    float _2736 = _2735 * _2729;
    float _2737 = _2735 * _2730;
    float _2738 = _2735 * _2731;
    float _2739 = dot(vec3(_1372, _1373, _1374), vec3(cbLight._m0[_2578].xyz));
    float _5065 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
    float _2742 = isnan(1.0) ? _5065 : (isnan(_5065) ? 1.0 : min(_5065, 1.0));
    float _5076 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
    float _2743 = isnan(1.0) ? _5076 : (isnan(_5076) ? 1.0 : min(_5076, 1.0));
    float _2744 = dot(vec3(_1372, _1373, _1374), vec3(_2736, _2737, _2738));
    float _5087 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
    float _2747 = isnan(1.0) ? _5087 : (isnan(_5087) ? 1.0 : min(_5087, 1.0));
    float _2748 = dot(vec3(cbLight._m0[_2578].xyz), vec3(_2736, _2737, _2738));
    float _5098 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
    float _2752 = _2728 * _2728;
    float _2756 = ((_2747 * _2747) * (_2752 + (-1.0))) + 1.0;
    float _2764 = exp2(log2(1.0 - (isnan(1.0) ? _5098 : (isnan(_5098) ? 1.0 : min(_5098, 1.0)))) * 5.0);
    float _2765 = 0.959999978542327880859375 - _1521;
    float _2767 = 0.959999978542327880859375 - _1522;
    float _2768 = 0.959999978542327880859375 - _1523;
    float _2775 = 1.0 - _2728;
    float _2786 = (0.5 / (((_2743 * ((_2742 * _2775) + _2728)) + 9.9999999392252902907785028219223e-09) + (((_2743 * _2775) + _2728) * _2742))) * _2742;
    float _5109 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
    float _2788 = (isnan(1.0) ? _5109 : (isnan(_5109) ? 1.0 : min(_5109, 1.0))) * (_2752 / ((_2756 * _2756) * 3.141590118408203125));
    uint _2799 = _2578 + 9u;
    float _2810 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2615].w)) * _1376) * 0.949999988079071044921875);
    float _2811 = _2810 * _2810;
    float _2812 = cbLight._m0[_2615].x + _1453;
    float _2813 = cbLight._m0[_2615].y + _1454;
    float _2814 = cbLight._m0[_2615].z + _1455;
    float _2818 = inversesqrt(dot(vec3(_2812, _2813, _2814), vec3(_2812, _2813, _2814)));
    float _2819 = _2818 * _2812;
    float _2820 = _2818 * _2813;
    float _2821 = _2818 * _2814;
    float _2822 = dot(vec3(_1372, _1373, _1374), vec3(cbLight._m0[_2615].xyz));
    float _5120 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
    float _2825 = isnan(1.0) ? _5120 : (isnan(_5120) ? 1.0 : min(_5120, 1.0));
    float _2826 = dot(vec3(_1372, _1373, _1374), vec3(_2819, _2820, _2821));
    float _5131 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
    float _2829 = isnan(1.0) ? _5131 : (isnan(_5131) ? 1.0 : min(_5131, 1.0));
    float _2830 = dot(vec3(cbLight._m0[_2615].xyz), vec3(_2819, _2820, _2821));
    float _5142 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
    float _2834 = _2811 * _2811;
    float _2838 = ((_2829 * _2829) * (_2834 + (-1.0))) + 1.0;
    float _2845 = exp2(log2(1.0 - (isnan(1.0) ? _5142 : (isnan(_5142) ? 1.0 : min(_5142, 1.0)))) * 5.0);
    float _2852 = 1.0 - _2811;
    float _2862 = (0.5 / (((_2743 * ((_2825 * _2852) + _2811)) + 9.9999999392252902907785028219223e-09) + (((_2743 * _2852) + _2811) * _2825))) * _2825;
    float _5153 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
    float _2864 = (isnan(1.0) ? _5153 : (isnan(_5153) ? 1.0 : min(_5153, 1.0))) * (_2834 / ((_2838 * _2838) * 3.141590118408203125));
    float _2874 = (((((_2845 * _2765) + _1524) * cbLight._m0[_2799].x) * _2864) * _2601) + (((((_2764 * _2765) + _1524) * cbLight._m0[_2714].x) * _2788) * _2611);
    float _2875 = (((((_2845 * _2767) + _1526) * cbLight._m0[_2799].y) * _2864) * _2601) + (((((_2764 * _2767) + _1526) * cbLight._m0[_2714].y) * _2788) * _2611);
    float _2876 = (((((_2845 * _2768) + _1527) * cbLight._m0[_2799].z) * _2864) * _2601) + (((((_2764 * _2768) + _1527) * cbLight._m0[_2714].z) * _2788) * _2611);
    float _2938;
    float _2940;
    float _2942;
    if (_2651)
    {
        _2938 = _2874;
        _2940 = _2875;
        _2942 = _2876;
    }
    else
    {
        uint _2944 = _2578 + 2u;
        uint _2948 = _2578 + 10u;
        float _2962 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2944].w)) * _1376) * 0.949999988079071044921875);
        float _2963 = _2962 * _2962;
        float _2964 = cbLight._m0[_2944].x + _1453;
        float _2965 = cbLight._m0[_2944].y + _1454;
        float _2966 = cbLight._m0[_2944].z + _1455;
        float _2970 = inversesqrt(dot(vec3(_2964, _2965, _2966), vec3(_2964, _2965, _2966)));
        float _2971 = _2970 * _2964;
        float _2972 = _2970 * _2965;
        float _2973 = _2970 * _2966;
        float _2974 = dot(vec3(_1372, _1373, _1374), vec3(cbLight._m0[_2944].xyz));
        float _5164 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
        float _2977 = isnan(1.0) ? _5164 : (isnan(_5164) ? 1.0 : min(_5164, 1.0));
        float _2978 = dot(vec3(_1372, _1373, _1374), vec3(_2971, _2972, _2973));
        float _5175 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
        float _2981 = isnan(1.0) ? _5175 : (isnan(_5175) ? 1.0 : min(_5175, 1.0));
        float _2982 = dot(vec3(cbLight._m0[_2944].xyz), vec3(_2971, _2972, _2973));
        float _5186 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
        float _2986 = _2963 * _2963;
        float _2990 = ((_2981 * _2981) * (_2986 + (-1.0))) + 1.0;
        float _2997 = exp2(log2(1.0 - (isnan(1.0) ? _5186 : (isnan(_5186) ? 1.0 : min(_5186, 1.0)))) * 5.0);
        float _3004 = 1.0 - _2963;
        float _3014 = (0.5 / (((_2743 * ((_2977 * _3004) + _2963)) + 9.9999999392252902907785028219223e-09) + (((_2743 * _3004) + _2963) * _2977))) * _2977;
        float _5197 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
        float _3016 = (isnan(1.0) ? _5197 : (isnan(_5197) ? 1.0 : min(_5197, 1.0))) * (_2986 / ((_2990 * _2990) * 3.141590118408203125));
        float _3017 = isnan(1.0) ? _2593 : (isnan(_2593) ? 1.0 : min(_2593, 1.0));
        _2938 = (((((_2997 * _2765) + _1524) * cbLight._m0[_2948].x) * _3016) * _3017) + _2874;
        _2940 = (((((_2997 * _2767) + _1526) * cbLight._m0[_2948].y) * _3016) * _3017) + _2875;
        _2942 = (((((_2997 * _2768) + _1527) * cbLight._m0[_2948].z) * _3016) * _3017) + _2876;
    }
    float _3052;
    float _3054;
    float _3056;
    if (_2669)
    {
        _3052 = _2938;
        _3054 = _2940;
        _3056 = _2942;
    }
    else
    {
        uint _3063 = _2578 + 3u;
        uint _3067 = _2578 + 11u;
        float _3081 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3063].w)) * _1376) * 0.949999988079071044921875);
        float _3082 = _3081 * _3081;
        float _3083 = cbLight._m0[_3063].x + _1453;
        float _3084 = cbLight._m0[_3063].y + _1454;
        float _3085 = cbLight._m0[_3063].z + _1455;
        float _3089 = inversesqrt(dot(vec3(_3083, _3084, _3085), vec3(_3083, _3084, _3085)));
        float _3090 = _3089 * _3083;
        float _3091 = _3089 * _3084;
        float _3092 = _3089 * _3085;
        float _3093 = dot(vec3(_1372, _1373, _1374), vec3(cbLight._m0[_3063].xyz));
        float _5213 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
        float _3096 = isnan(1.0) ? _5213 : (isnan(_5213) ? 1.0 : min(_5213, 1.0));
        float _3097 = dot(vec3(_1372, _1373, _1374), vec3(_3090, _3091, _3092));
        float _5224 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
        float _3100 = isnan(1.0) ? _5224 : (isnan(_5224) ? 1.0 : min(_5224, 1.0));
        float _3101 = dot(vec3(cbLight._m0[_3063].xyz), vec3(_3090, _3091, _3092));
        float _5235 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
        float _3105 = _3082 * _3082;
        float _3109 = ((_3100 * _3100) * (_3105 + (-1.0))) + 1.0;
        float _3116 = exp2(log2(1.0 - (isnan(1.0) ? _5235 : (isnan(_5235) ? 1.0 : min(_5235, 1.0)))) * 5.0);
        float _3123 = 1.0 - _3082;
        float _3133 = (0.5 / (((_2743 * ((_3096 * _3123) + _3082)) + 9.9999999392252902907785028219223e-09) + (((_2743 * _3123) + _3082) * _3096))) * _3096;
        float _5246 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
        float _3135 = (isnan(1.0) ? _5246 : (isnan(_5246) ? 1.0 : min(_5246, 1.0))) * (_3105 / ((_3109 * _3109) * 3.141590118408203125));
        float _3136 = isnan(1.0) ? _2594 : (isnan(_2594) ? 1.0 : min(_2594, 1.0));
        _3052 = (((((_3116 * _2765) + _1524) * cbLight._m0[_3067].x) * _3135) * _3136) + _2938;
        _3054 = (((((_3116 * _2767) + _1526) * cbLight._m0[_3067].y) * _3135) * _3136) + _2940;
        _3056 = (((((_3116 * _2768) + _1527) * cbLight._m0[_3067].z) * _3135) * _3136) + _2942;
    }
    float _3270;
    float _3272;
    float _3274;
    float _3276;
    float _3278;
    float _3280;
    if (_2576.y == 0u)
    {
        float _3211 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3212 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3211;
        float _3213 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3211;
        float _3214 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3211;
        uvec4 _3226 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3227 = _3226.x;
        uint _3238 = uint((float(_3226.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1462) / _3227))) + floor(float(uint(cbSceneParam._m0[85u].x * _1461) / _3227)));
        float _3248 = (log2(_3214 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3249 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
        uint _3252 = uint(isnan(14.0) ? _3249 : (isnan(_3249) ? 14.0 : min(_3249, 14.0)));
        uvec4 _3257 = texelFetch(g_lightClusterGridBuffer, int(((_3252 << 2u) + (_3238 << 6u)) >> 2u));
        uint _3258 = _3257.x;
        uint _3259 = _3226.z;
        float _3360;
        float _3362;
        float _3364;
        float _3366;
        float _3368;
        float _3370;
        if (((((1u << ((_3259 >> 4u) & 15u)) + 4294967295u) & _3258) == 0u) || ((_3259 & 240u) == 0u))
        {
            _3360 = 0.0;
            _3362 = 0.0;
            _3364 = 0.0;
            _3366 = 0.0;
            _3368 = 0.0;
            _3370 = 0.0;
        }
        else
        {
            float _3361;
            float _3363;
            float _3365;
            float _3367;
            float _3369;
            float _3371;
            float _3504 = 0.0;
            float _3505 = 0.0;
            float _3506 = 0.0;
            float _3507 = 0.0;
            float _3508 = 0.0;
            float _3509 = 0.0;
            uint _3510 = 0u;
            uint _3519;
            bool _3520;
            for (;;)
            {
                _3519 = texelFetch(g_lightClassification, int((((_3252 << 5u) + (_3238 << 9u)) + (_3510 << 2u)) >> 2u)).x;
                _3520 = _3519 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_3520)
                {
                    frontier_phi_63_pred = _3509;
                    frontier_phi_63_pred_1 = _3508;
                    frontier_phi_63_pred_2 = _3507;
                    frontier_phi_63_pred_3 = _3506;
                    frontier_phi_63_pred_4 = _3505;
                    frontier_phi_63_pred_5 = _3504;
                }
                else
                {
                    float _3628;
                    float _3629;
                    float _3630;
                    float _3631;
                    float _3632;
                    float _3633;
                    uint _3634;
                    _3628 = _3504;
                    _3629 = _3505;
                    _3630 = _3506;
                    _3631 = _3507;
                    _3632 = _3508;
                    _3633 = _3509;
                    _3634 = _3519;
                    float _3560;
                    float _3561;
                    float _3562;
                    float _3563;
                    float _3564;
                    float _3565;
                    for (;;)
                    {
                        uint _3638 = uint(findLSB(_3634)) + (_3510 << 5u);
                        uint _3635 = (_3634 + 4294967295u) & _3634;
                        uint _3640 = _3638 * 48u;
                        vec4 _3654 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3640)).x, texelFetch(g_PointLightRenderingBuffer, int(_3640 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3640 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3640 + 3u)).x));
                        uint _3660 = (_3638 * 48u) + 4u;
                        vec4 _3673 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3660)).x, texelFetch(g_PointLightRenderingBuffer, int(_3660 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3660 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3660 + 3u)).x));
                        uint _3679 = (_3638 * 48u) + 8u;
                        vec3 _3690 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3679)).x, texelFetch(g_PointLightRenderingBuffer, int(_3679 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3679 + 2u)).x));
                        float _3694 = _3654.x - _3212;
                        float _3695 = _3654.y - _3213;
                        float _3696 = _3654.z - _3214;
                        float _3697 = dot(vec3(_3694, _3695, _3696), vec3(_3694, _3695, _3696));
                        float _3700 = inversesqrt(_3697);
                        float _3701 = _3700 * _3694;
                        float _3702 = _3700 * _3695;
                        float _3703 = _3700 * _3696;
                        float _3704 = dot(vec3(_1480, _1483, _1486), vec3(_3701, _3702, _3703));
                        float _3709 = 1.0 - (_3697 * _3654.w);
                        float _5272 = isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0));
                        float _3710 = isnan(1.0) ? _5272 : (isnan(_5272) ? 1.0 : min(_5272, 1.0));
                        float _3711 = sqrt(_3697) * _3673.w;
                        float _3713 = 1.39999997615814208984375 / (_3711 + 1.39999997615814208984375);
                        float _3714 = _3713 * _3713;
                        float _3717 = ((1.0 - _3714) * _3704) + _3714;
                        float _3720 = _3711 * _3711;
                        float _3724 = ((isnan(0.0) ? _3717 : (isnan(_3717) ? 0.0 : max(_3717, 0.0))) * _3710) / ((_3720 * 0.699999988079071044921875) + 1.0);
                        float _3728 = (-0.0) - _3212;
                        float _3729 = (-0.0) - _3213;
                        float _3730 = (-0.0) - _3214;
                        float _3734 = inversesqrt(dot(vec3(_3728, _3729, _3730), vec3(_3728, _3729, _3730)));
                        float _3735 = _3734 * _3728;
                        float _3736 = _3734 * _3729;
                        float _3737 = _3734 * _3730;
                        float _3745 = exp2(log2(1.0 / ((_3720 * 3.5) + 5.0)) * 0.25);
                        float _3746 = 1.0 - _1555;
                        float _3753 = sqrt(1.0 - ((1.0 - (_3746 * _3746)) * (1.0 - (_3745 * _3745))));
                        float _3754 = _3753 * _3753;
                        float _3755 = _3754 * _3754;
                        float _3756 = _3735 + _3701;
                        float _3757 = _3736 + _3702;
                        float _3758 = _3737 + _3703;
                        float _3762 = inversesqrt(dot(vec3(_3756, _3757, _3758), vec3(_3756, _3757, _3758)));
                        float _3766 = dot(vec3(_1480, _1483, _1486), vec3(_3735, _3736, _3737));
                        float _5288 = isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0));
                        float _3769 = isnan(1.0) ? _5288 : (isnan(_5288) ? 1.0 : min(_5288, 1.0));
                        float _3770 = dot(vec3(_1480, _1483, _1486), vec3(_3762 * _3756, _3762 * _3757, _3762 * _3758));
                        float _5299 = isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0));
                        float _3773 = isnan(1.0) ? _5299 : (isnan(_5299) ? 1.0 : min(_5299, 1.0));
                        float _3777 = ((_3773 * _3773) * (_3755 + (-1.0))) + 1.0;
                        float _3778 = _3713 * _3754;
                        float _3779 = _3778 * _3778;
                        float _3782 = ((1.0 - _3779) * _3704) + _3779;
                        float _5310 = isnan(0.0) ? _3782 : (isnan(_3782) ? 0.0 : max(_3782, 0.0));
                        float _3783 = isnan(1.0) ? _5310 : (isnan(_5310) ? 1.0 : min(_5310, 1.0));
                        float _3784 = 1.0 - _3754;
                        float _3794 = (0.5 / (((_3783 * ((_3769 * _3784) + _3754)) + 9.9999999392252902907785028219223e-09) + (((_3783 * _3784) + _3754) * _3769))) * _3783;
                        float _5321 = isnan(0.0) ? _3794 : (isnan(_3794) ? 0.0 : max(_3794, 0.0));
                        float _3805 = (((_3755 * 3.1415927410125732421875) * (isnan(1.0) ? _5321 : (isnan(_5321) ? 1.0 : min(_5321, 1.0)))) / ((_3777 * _3777) * ((_3720 * 2.1991131305694580078125) + 3.141590118408203125))) * _3710;
                        _3563 = (_3724 * _3673.x) + _3631;
                        _3564 = (_3724 * _3673.y) + _3632;
                        _3565 = (_3724 * _3673.z) + _3633;
                        _3560 = (_3805 * _3690.x) + _3628;
                        _3561 = (_3805 * _3690.y) + _3629;
                        _3562 = (_3805 * _3690.z) + _3630;
                        if (_3635 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3628 = _3560;
                            _3629 = _3561;
                            _3630 = _3562;
                            _3631 = _3563;
                            _3632 = _3564;
                            _3633 = _3565;
                            _3634 = _3635;
                        }
                    }
                    frontier_phi_63_pred = _3565;
                    frontier_phi_63_pred_1 = _3564;
                    frontier_phi_63_pred_2 = _3563;
                    frontier_phi_63_pred_3 = _3562;
                    frontier_phi_63_pred_4 = _3561;
                    frontier_phi_63_pred_5 = _3560;
                }
                _3371 = frontier_phi_63_pred;
                _3369 = frontier_phi_63_pred_1;
                _3367 = frontier_phi_63_pred_2;
                _3365 = frontier_phi_63_pred_3;
                _3363 = frontier_phi_63_pred_4;
                _3361 = frontier_phi_63_pred_5;
                uint _3511 = _3510 + 1u;
                if (_3511 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3504 = _3361;
                    _3505 = _3363;
                    _3506 = _3365;
                    _3507 = _3367;
                    _3508 = _3369;
                    _3509 = _3371;
                    _3510 = _3511;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3360 = _3361;
            _3362 = _3363;
            _3364 = _3365;
            _3366 = _3367;
            _3368 = _3369;
            _3370 = _3371;
        }
        uvec4 _3374 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3375 = _3374.z;
        uint _3377 = (_3375 >> 8u) & 15u;
        float _3472;
        float _3474;
        float _3476;
        float _3478;
        float _3480;
        float _3482;
        if (((4294967295u << _3377) & _3258) == 0u)
        {
            _3472 = _3360;
            _3474 = _3362;
            _3476 = _3364;
            _3478 = _3366;
            _3480 = _3368;
            _3482 = _3370;
        }
        else
        {
            float _3497 = inversesqrt(dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214)));
            float _3498 = _3497 * _3212;
            float _3499 = _3497 * _3213;
            float _3500 = _3497 * _3214;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_3377 < ((_3375 >> 12u) & 15u))
            {
                float _3473;
                float _3475;
                float _3477;
                float _3479;
                float _3481;
                float _3483;
                float _3611 = _3360;
                float _3612 = _3362;
                float _3613 = _3364;
                float _3614 = _3366;
                float _3615 = _3368;
                float _3616 = _3370;
                uint _3617 = _3377;
                uint _3626;
                bool _3627;
                for (;;)
                {
                    _3626 = texelFetch(g_lightClassification, int((((_3252 << 5u) + (_3238 << 9u)) + (_3617 << 2u)) >> 2u)).x;
                    _3627 = _3626 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3627)
                    {
                        frontier_phi_69_pred = _3616;
                        frontier_phi_69_pred_1 = _3615;
                        frontier_phi_69_pred_2 = _3614;
                        frontier_phi_69_pred_3 = _3613;
                        frontier_phi_69_pred_4 = _3612;
                        frontier_phi_69_pred_5 = _3611;
                    }
                    else
                    {
                        float _3810;
                        float _3811;
                        float _3812;
                        float _3813;
                        float _3814;
                        float _3815;
                        float _4103;
                        float _4104;
                        float _4105;
                        float _4106;
                        float _4107;
                        float _4108;
                        float _3823 = _3611;
                        float _3824 = _3612;
                        float _3825 = _3613;
                        float _3826 = _3614;
                        float _3827 = _3615;
                        float _3828 = _3616;
                        uint _3829 = _3626;
                        uint _3830;
                        vec4 _3855;
                        float _3856;
                        vec4 _3871;
                        vec3 _3883;
                        vec4 _3898;
                        vec4 _3913;
                        float _3959;
                        bool _3960;
                        for (;;)
                        {
                            uint _3840 = ((_3617 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3829));
                            _3830 = (_3829 + 4294967295u) & _3829;
                            uint _3842 = _3840 * 40u;
                            _3855 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3842)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3842 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3842 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3842 + 3u)).x));
                            _3856 = _3855.w;
                            uint _3858 = (_3840 * 40u) + 4u;
                            _3871 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3858)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3858 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3858 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3858 + 3u)).x));
                            uint _3873 = (_3840 * 40u) + 8u;
                            _3883 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3873)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3873 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3873 + 2u)).x));
                            uint _3885 = (_3840 * 40u) + 16u;
                            _3898 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3885)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3885 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3885 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3885 + 3u)).x));
                            uint _3900 = (_3840 * 40u) + 20u;
                            _3913 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3900)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3900 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3900 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3900 + 3u)).x));
                            uint _3915 = (_3840 * 40u) + 24u;
                            vec4 _3928 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3915)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3915 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3915 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3915 + 3u)).x));
                            uint _3934 = (_3840 * 40u) + 28u;
                            vec4 _3947 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3934)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3934 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3934 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3934 + 3u)).x));
                            _3959 = fma(_3214, _3947.z, fma(_3213, _3947.y, _3947.x * _3212)) + _3947.w;
                            _3960 = !((fma(_3214, _3928.z, fma(_3213, _3928.y, _3928.x * _3212)) + _3928.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3960)
                            {
                                float _3987 = _3855.x - _3212;
                                float _3988 = _3855.y - _3213;
                                float _3989 = _3855.z - _3214;
                                float _3990 = dot(vec3(_3987, _3988, _3989), vec3(_3987, _3988, _3989));
                                float _3993 = inversesqrt(_3990);
                                float _3994 = _3993 * _3987;
                                float _3995 = _3993 * _3988;
                                float _3996 = _3993 * _3989;
                                float _4000 = 1.0 - (_3990 / (_3856 * _3856));
                                float _5332 = isnan(0.0) ? _4000 : (isnan(_4000) ? 0.0 : max(_4000, 0.0));
                                float _4001 = isnan(1.0) ? _5332 : (isnan(_5332) ? 1.0 : min(_5332, 1.0));
                                float _4005 = sqrt(_3990) * _3871.w;
                                float _4007 = 1.39999997615814208984375 / (_4005 + 1.39999997615814208984375);
                                float _4008 = _4007 * _4007;
                                float _4011 = ((1.0 - _4008) * dot(vec3(_3994, _3995, _3996), vec3(_1480, _1483, _1486))) + _4008;
                                float _4014 = _4005 * _4005;
                                float _4018 = (fma(_3214, _3898.z, fma(_3213, _3898.y, _3898.x * _3212)) + _3898.w) / _3959;
                                float _4019 = (fma(_3214, _3913.z, fma(_3213, _3913.y, _3913.x * _3212)) + _3913.w) / _3959;
                                float _4023 = 1.0 - dot(vec2(_4018, _4019), vec2(_4018, _4019));
                                float _5348 = isnan(0.0) ? _4023 : (isnan(_4023) ? 0.0 : max(_4023, 0.0));
                                float _4024 = isnan(1.0) ? _5348 : (isnan(_5348) ? 1.0 : min(_5348, 1.0));
                                float _4025 = _4024 * (((isnan(0.0) ? _4011 : (isnan(_4011) ? 0.0 : max(_4011, 0.0))) * _4001) / ((_4014 * 0.699999988079071044921875) + 1.0));
                                float _4037 = exp2(log2(1.0 / ((_4014 * 3.5) + 5.0)) * 0.25);
                                float _4038 = 1.0 - _1555;
                                float _4045 = sqrt(1.0 - ((1.0 - (_4038 * _4038)) * (1.0 - (_4037 * _4037))));
                                float _4046 = _4045 * _4045;
                                float _4047 = _4046 * _4046;
                                float _4048 = _3994 - _3498;
                                float _4049 = _3995 - _3499;
                                float _4050 = _3996 - _3500;
                                float _4054 = inversesqrt(dot(vec3(_4048, _4049, _4050), vec3(_4048, _4049, _4050)));
                                float _4058 = dot(vec3(_1480, _1483, _1486), vec3((-0.0) - _3498, (-0.0) - _3499, (-0.0) - _3500));
                                float _5359 = isnan(0.0) ? _4058 : (isnan(_4058) ? 0.0 : max(_4058, 0.0));
                                float _4061 = isnan(1.0) ? _5359 : (isnan(_5359) ? 1.0 : min(_5359, 1.0));
                                float _4062 = dot(vec3(_1480, _1483, _1486), vec3(_4054 * _4048, _4054 * _4049, _4054 * _4050));
                                float _5370 = isnan(0.0) ? _4062 : (isnan(_4062) ? 0.0 : max(_4062, 0.0));
                                float _4065 = isnan(1.0) ? _5370 : (isnan(_5370) ? 1.0 : min(_5370, 1.0));
                                float _4069 = ((_4065 * _4065) * (_4047 + (-1.0))) + 1.0;
                                float _4070 = _4007 * _4046;
                                float _4071 = _4070 * _4070;
                                float _4077 = ((1.0 - _4071) * dot(vec3(_1480, _1483, _1486), vec3(_3994, _3995, _3996))) + _4071;
                                float _5381 = isnan(0.0) ? _4077 : (isnan(_4077) ? 0.0 : max(_4077, 0.0));
                                float _4078 = isnan(1.0) ? _5381 : (isnan(_5381) ? 1.0 : min(_5381, 1.0));
                                float _4079 = 1.0 - _4046;
                                float _4089 = (0.5 / (((_4078 * ((_4061 * _4079) + _4046)) + 9.9999999392252902907785028219223e-09) + (((_4078 * _4079) + _4046) * _4061))) * _4078;
                                float _5392 = isnan(0.0) ? _4089 : (isnan(_4089) ? 0.0 : max(_4089, 0.0));
                                float _4099 = (_4024 * _4001) * (((_4047 * 3.1415927410125732421875) * (isnan(1.0) ? _5392 : (isnan(_5392) ? 1.0 : min(_5392, 1.0)))) / ((_4069 * _4069) * ((_4014 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _4025 * _3871.z;
                                frontier_phi_75_pred_1 = _4025 * _3871.y;
                                frontier_phi_75_pred_2 = _4025 * _3871.x;
                                frontier_phi_75_pred_3 = _4099 * _3883.z;
                                frontier_phi_75_pred_4 = _4099 * _3883.y;
                                frontier_phi_75_pred_5 = _4099 * _3883.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _4108 = frontier_phi_75_pred;
                            _4107 = frontier_phi_75_pred_1;
                            _4106 = frontier_phi_75_pred_2;
                            _4105 = frontier_phi_75_pred_3;
                            _4104 = frontier_phi_75_pred_4;
                            _4103 = frontier_phi_75_pred_5;
                            _3813 = _4106 + _3826;
                            _3814 = _4107 + _3827;
                            _3815 = _4108 + _3828;
                            _3810 = _4103 + _3823;
                            _3811 = _4104 + _3824;
                            _3812 = _4105 + _3825;
                            if (_3830 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3823 = _3810;
                                _3824 = _3811;
                                _3825 = _3812;
                                _3826 = _3813;
                                _3827 = _3814;
                                _3828 = _3815;
                                _3829 = _3830;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3815;
                        frontier_phi_69_pred_1 = _3814;
                        frontier_phi_69_pred_2 = _3813;
                        frontier_phi_69_pred_3 = _3812;
                        frontier_phi_69_pred_4 = _3811;
                        frontier_phi_69_pred_5 = _3810;
                    }
                    _3483 = frontier_phi_69_pred;
                    _3481 = frontier_phi_69_pred_1;
                    _3479 = frontier_phi_69_pred_2;
                    _3477 = frontier_phi_69_pred_3;
                    _3475 = frontier_phi_69_pred_4;
                    _3473 = frontier_phi_69_pred_5;
                    uint _3618 = _3617 + 1u;
                    if (_3618 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3611 = _3473;
                        _3612 = _3475;
                        _3613 = _3477;
                        _3614 = _3479;
                        _3615 = _3481;
                        _3616 = _3483;
                        _3617 = _3618;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _3483;
                frontier_phi_57_58_ladder_1 = _3481;
                frontier_phi_57_58_ladder_2 = _3479;
                frontier_phi_57_58_ladder_3 = _3477;
                frontier_phi_57_58_ladder_4 = _3475;
                frontier_phi_57_58_ladder_5 = _3473;
            }
            else
            {
                frontier_phi_57_58_ladder = _3370;
                frontier_phi_57_58_ladder_1 = _3368;
                frontier_phi_57_58_ladder_2 = _3366;
                frontier_phi_57_58_ladder_3 = _3364;
                frontier_phi_57_58_ladder_4 = _3362;
                frontier_phi_57_58_ladder_5 = _3360;
            }
            _3472 = frontier_phi_57_58_ladder_5;
            _3474 = frontier_phi_57_58_ladder_4;
            _3476 = frontier_phi_57_58_ladder_3;
            _3478 = frontier_phi_57_58_ladder_2;
            _3480 = frontier_phi_57_58_ladder_1;
            _3482 = frontier_phi_57_58_ladder;
        }
        float _3487 = isnan(1.0) ? _1539 : (isnan(_1539) ? 1.0 : min(_1539, 1.0));
        _3270 = (_3487 * _3478) + _2707;
        _3272 = (_3487 * _3480) + _2709;
        _3274 = (_3487 * _3482) + _2711;
        _3276 = ((_3472 * _1524) * _3487) + _3052;
        _3278 = ((_3474 * _1526) * _3487) + _3054;
        _3280 = ((_3476 * _1527) * _3487) + _3056;
    }
    else
    {
        _3270 = _2707;
        _3272 = _2709;
        _3274 = _2711;
        _3276 = _3052;
        _3278 = _3054;
        _3280 = _3056;
    }
    float _5408 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
    float _5419 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
    float _5430 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
    float _5441 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
    float _3305 = cbInstanceData._m0[_1499 + 6u].w * (isnan(1.0) ? _5441 : (isnan(_5441) ? 1.0 : min(_5441, 1.0)));
    float _3310 = _1461 / cbSceneParam._m0[86u].x;
    float _3311 = _1462 / cbSceneParam._m0[86u].y;
    vec4 _3325 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3310, _3311, (log2((isnan(cbSceneParam._m0[77u].w) ? _1396 : (isnan(_1396) ? cbSceneParam._m0[77u].w : min(_1396, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3327 = _3325.x;
    float _3328 = _3325.y;
    float _3329 = _3325.z;
    float _3330 = _3325.w;
    float _3422;
    float _3424;
    float _3426;
    float _3428;
    if (_1396 > cbSceneParam._m0[78u].w)
    {
        float _3385 = isnan(_1396) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1396 : min(cbSceneParam._m0[80u].w, _1396));
        float _3386 = _3385 / _1396;
        float _3397 = _3386 * _1446;
        float _3398 = _1447 * _3386;
        float _3399 = (-0.0) - _3398;
        float _3400 = _3386 * _1448;
        float _3402 = (cbSceneParam._m0[77u].w * _3399) / _3385;
        float _3403 = _3402 + cbSceneParam._m0[79u].w;
        float _3404 = cbSceneParam._m0[79u].w - _3398;
        float _3410 = sqrt(((_3397 * _3397) + (_3398 * _3398)) + (_3400 * _3400));
        float _3413 = (1.0 - (cbSceneParam._m0[77u].w / _3385)) * _3410;
        float _3418 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3420 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3573;
        if (abs((_3399 - _3402) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3573 = ((((_3403 > 0.0) ? exp2(_3418 * _3403) : (2.0 - exp2(_3420 * _3403))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3413;
        }
        else
        {
            float _3533 = 1.0 / cbSceneParam._m0[80u].x;
            float _3534 = isnan(_3404) ? _3403 : (isnan(_3403) ? _3404 : max(_3403, _3404));
            float _3535 = isnan(_3404) ? _3403 : (isnan(_3403) ? _3404 : min(_3403, _3404));
            float _3544 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : min(_3534, 0.0));
            float _3545 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : min(_3535, 0.0));
            _3573 = ((abs(_3410 / _3399) * cbSceneParam._m0[80u].y) * ((((_3544 - _3545) * 2.0) - ((exp2(_3418 * (isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0)))) - exp2(_3418 * (isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0))))) * _3533)) - ((exp2(_3420 * _3544) - exp2(_3420 * _3545)) * _3533))) + (_3413 * cbSceneParam._m0[80u].z);
        }
        vec4 _3575 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3310, _3311, 1.0), 0.0);
        float _3584 = exp2((_3573 * (-1.44269502162933349609375)) * (1.0 - _3575.w));
        float _3585 = log2(_3584);
        float _3601 = log2(_3330);
        _3422 = (exp2(_3601 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3585 * cbSceneParam._m0[78u].x)) * _3575.x) / cbSceneParam._m0[78u].x)) + _3327;
        _3424 = (exp2(_3601 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3585 * cbSceneParam._m0[78u].y)) * _3575.y) / cbSceneParam._m0[78u].y)) + _3328;
        _3426 = (exp2(_3601 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3585 * cbSceneParam._m0[78u].z)) * _3575.z) / cbSceneParam._m0[78u].z)) + _3329;
        _3428 = _3584 * _3330;
    }
    else
    {
        _3422 = _3327;
        _3424 = _3328;
        _3426 = _3329;
        _3428 = _3330;
    }
    float _3440 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3441 = _3440 == 3.0;
    float _3442 = log2(_3428);
    float _3449 = exp2(_3442 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5408 : (isnan(_5408) ? 1.0 : min(_5408, 1.0))) * (_3270 + ((isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0))) * _1539))) + ((_3276 + ((isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0))) * _2347)) * cbPerFrame._m0[3u].x));
    float _3450 = exp2(_3442 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5419 : (isnan(_5419) ? 1.0 : min(_5419, 1.0))) * (_3272 + ((isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0))) * _1539))) + ((_3278 + ((isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0))) * _2347)) * cbPerFrame._m0[3u].x));
    float _3451 = exp2(_3442 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5430 : (isnan(_5430) ? 1.0 : min(_5430, 1.0))) * (_3274 + ((isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0))) * _1539))) + ((_3280 + ((isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0))) * _2347)) * cbPerFrame._m0[3u].x));
    float _3460 = (_3440 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3460 * (_3441 ? _3449 : (_3449 + (cbSceneParam._m0[72u].w * _3422)));
    SV_Target.y = _3460 * (_3441 ? _3450 : (_3450 + (cbSceneParam._m0[72u].w * _3424)));
    SV_Target.z = _3460 * (_3441 ? _3451 : (_3451 + (cbSceneParam._m0[72u].w * _3426)));
    SV_Target.w = _3305;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3305;
}


