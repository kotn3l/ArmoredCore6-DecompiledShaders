#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[25];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_c4200_transition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_c4200_transition_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_c4200_transition_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D C_c4200_transition_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_c4200_transition_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D C_c4200_transition_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_c4200_transition_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_c4200_transition_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_c4200_transition_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_c4200_transition_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1438;
float _3836;
float _3837;
float _3838;
float _3839;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240;
    float _241;
    float _242;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _240 = (-0.0) - _226;
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
    }
    else
    {
        _240 = _226;
        _241 = _227;
        _242 = _228;
    }
    vec4 _256 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _259 = _256.x;
    float _268 = cbMtdParam._m0[18u].y * 0.3333333432674407958984375;
    float _273 = fract(abs(_268));
    float _285 = cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x;
    float _288 = (_285 * cbMtdParam._m0[24u].x) + TEXCOORD.x;
    float _289 = (_285 * cbMtdParam._m0[24u].y) + TEXCOORD.y;
    vec4 _312 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((_285 * cbMtdParam._m0[23u].x) + TEXCOORD.x)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[23u].y * _285) + TEXCOORD.y)) + cbTextureTilingScale._m0[10u].w));
    float _316 = cbPerFrame._m0[22u].x * 2.0;
    float _318 = _316 * cbMtdParam._m0[19u].w;
    float _321 = (_312.x * 0.5) + (-0.25);
    float _324 = (_312.y * 0.5) + (-0.25);
    float _325 = _324 * cbMtdParam._m0[18u].z;
    float _327 = (-0.0) - (cbMtdParam._m0[18u].z * _321);
    float _328 = fract(_318);
    float _330 = fract(_318 + 0.5);
    float _331 = _328 * _327;
    float _332 = _325 * _328;
    float _335 = _330 * _327;
    float _336 = _325 * _330;
    float _342 = abs((_328 * 2.0) + (-1.0));
    vec4 _359 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_9, SS_DiffuseMap), vec2(((_331 + _288) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, ((_332 + _289) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _361 = _359.x;
    float _372 = (0.25 - ((((_268 >= ((-0.0) - _268)) ? _273 : ((-0.0) - _273)) * 3.0) - _259)) + ((((texture(sampler2D(C_c4200_transition_snp_0_Texture2D_9, SS_DiffuseMap), vec2(((_335 + _288) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, ((_336 + _289) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w)).x - _361) * _342) + _361) * 1.35000002384185791015625);
    float _375 = abs(_372 * cbMtdParam._m0[19u].z);
    float _379 = (((_375 * cbMtdParam._m0[19u].y) - _259) * _375) + _259;
    float _3848 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _381 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _392 = (cbMtdParam._m0[23u].z * _285) + TEXCOORD.x;
    float _393 = (cbMtdParam._m0[23u].w * _285) + TEXCOORD.y;
    vec4 _413 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_331 + _392) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_332 + _393) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _415 = _413.x;
    float _416 = _413.y;
    float _417 = _413.z;
    vec4 _418 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_335 + _392) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_336 + _393) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _432 = (((_418.x - _415) * _342) + _415) * cbMtdParam._m0[14u].x;
    float _433 = (((_418.y - _416) * _342) + _416) * cbMtdParam._m0[14u].y;
    float _434 = (((_418.z - _417) * _342) + _417) * cbMtdParam._m0[14u].z;
    float _438 = _432 - (_432 * _381);
    float _439 = _433 - (_433 * _381);
    float _440 = _434 - (_434 * _381);
    vec4 _458 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _463 = ceil(_372);
    float _3859 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _464 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _478 = (((cbMtdParam._m0[9u].x - cbMtdParam._m0[15u].x) * _464) + cbMtdParam._m0[15u].x) * _458.x;
    float _480 = (((cbMtdParam._m0[9u].y - cbMtdParam._m0[15u].y) * _464) + cbMtdParam._m0[15u].y) * _458.y;
    float _482 = (((cbMtdParam._m0[9u].z - cbMtdParam._m0[15u].z) * _464) + cbMtdParam._m0[15u].z) * _458.z;
    float _486 = exp2(log2(_381) * cbMtdParam._m0[19u].x);
    float _493 = (_486 * (_438 - _478)) + _478;
    float _494 = (_486 * (_439 - _480)) + _480;
    float _495 = (_486 * (_440 - _482)) + _482;
    vec4 _508 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _514 = cbMtdParam._m0[17u].x + _508.x;
    vec4 _526 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _530 = _526.z;
    float _533 = (_526.x * 2.0) + (-1.0);
    float _534 = (_526.y * 2.0) + (-1.0);
    float _535 = dot(vec2(_533, _534), vec2(_533, _534));
    float _3870 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _540 = sqrt(1.0 - (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))));
    float _551 = (cbMtdParam._m0[24u].z * _285) + TEXCOORD.x;
    float _552 = (cbMtdParam._m0[24u].w * _285) + TEXCOORD.y;
    float _558 = _316 * cbMtdParam._m0[20u].z;
    float _559 = _324 * cbMtdParam._m0[20u].y;
    float _561 = (-0.0) - (cbMtdParam._m0[20u].y * _321);
    float _562 = fract(_558);
    float _564 = fract(_558 + 0.5);
    float _575 = abs((_562 * 2.0) + (-1.0));
    vec4 _591 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_11, SS_DiffuseMap), vec2((((_562 * _561) + _551) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_559 * _562) + _552) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _593 = _591.x;
    float _594 = _591.y;
    float _595 = _591.z;
    vec4 _596 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_11, SS_DiffuseMap), vec2((((_564 * _561) + _551) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_559 * _564) + _552) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _610 = (((_596.x - _593) * _575) + _593) * cbMtdParam._m0[16u].x;
    float _611 = (((_596.y - _594) * _575) + _594) * cbMtdParam._m0[16u].y;
    float _612 = (((_596.z - _595) * _575) + _595) * cbMtdParam._m0[16u].z;
    float _616 = _610 - (_610 * _464);
    float _617 = _611 - (_611 * _464);
    float _618 = _612 - (_612 * _464);
    float _635 = _316 * cbMtdParam._m0[21u].w;
    float _636 = _324 * cbMtdParam._m0[22u].x;
    float _638 = (-0.0) - (cbMtdParam._m0[22u].x * _321);
    float _639 = fract(_635);
    float _641 = fract(_635 + 0.5);
    float _652 = abs((_639 * 2.0) + (-1.0));
    vec4 _668 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_639 * _638) + TEXCOORD.x) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((_636 * _639) + TEXCOORD.y) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _673 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_641 * _638) + TEXCOORD.x) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((_636 * _641) + TEXCOORD.y) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _684 = ((_673.x - _668.x) * _652) + _668.x;
    float _691 = exp2(log2(_684 * cbMtdParam._m0[21u].z) * cbMtdParam._m0[21u].y);
    float _692 = isnan(cbMtdParam._m0[21u].x) ? _691 : (isnan(_691) ? cbMtdParam._m0[21u].x : max(_691, cbMtdParam._m0[21u].x));
    float _693 = isnan(cbMtdParam._m0[20u].x) ? _692 : (isnan(_692) ? cbMtdParam._m0[20u].x : min(_692, cbMtdParam._m0[20u].x));
    float _714 = _316 * cbMtdParam._m0[17u].z;
    float _715 = _324 * cbMtdParam._m0[17u].w;
    float _717 = (-0.0) - (cbMtdParam._m0[17u].w * _321);
    float _718 = fract(_714);
    float _720 = fract(_714 + 0.5);
    float _731 = abs((_718 * 2.0) + (-1.0));
    vec4 _748 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_718 * _717) + TEXCOORD.x) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_715 * _718) + TEXCOORD.y) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _750 = _748.x;
    float _751 = _748.y;
    float _752 = _748.z;
    vec4 _753 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_720 * _717) + TEXCOORD.x) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_715 * _720) + TEXCOORD.y) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _796 = fma(_540, _240, fma(_534, _232 * TANGENT.x, (_218 * _210) * _533));
    float _799 = fma(_540, _241, fma(_534, _232 * TANGENT.y, (_218 * _211) * _533));
    float _802 = fma(_540, _242, fma(_534, _232 * TANGENT.z, (_218 * _212) * _533));
    float _806 = inversesqrt(dot(vec3(_796, _799, _802), vec3(_796, _799, _802)));
    float _807 = _806 * _796;
    float _808 = _806 * _799;
    float _809 = _806 * _802;
    float _3891 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _810 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _3902 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _3913 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _3924 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _3935 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _814 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _830 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _870 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _880 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _870);
    float _881 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _870);
    float _882 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _870);
    float _886 = inversesqrt(dot(vec3(_880, _881, _882), vec3(_880, _881, _882)));
    float _887 = _880 * _886;
    float _888 = _881 * _886;
    float _889 = _882 * _886;
    vec4 _894 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _896 = _894.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1118 = sqrt(((_880 * _880) + (_881 * _881)) + (_882 * _882));
        float _1124 = (cbMatDynParam._m0[5u].x * _1118) + cbMatDynParam._m0[5u].y;
        float _3946 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1129 = (cbMatDynParam._m0[5u].z * _1118) + cbMatDynParam._m0[5u].w;
        float _3957 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) - _1125)) + _1125) < ((_896 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _908 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _909 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _911 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _913 = _911.w;
    float _932 = fma(_809, cbSceneParam._m0[5u].z, fma(_808, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _807));
    float _935 = fma(_809, cbSceneParam._m0[6u].z, fma(_808, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _807));
    float _938 = fma(_809, cbSceneParam._m0[7u].z, fma(_808, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _807));
    vec4 _940 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _951 = (((_940.y - _810) + (_940.w * _810)) * cbMtdParam._m0[3u].x) + _810;
    uint _964 = uint(roundEven(NORMAL.w)) * 13u;
    uint _965 = _964 + 9u;
    uint _966 = _965 + uint(cbMatDynParam._m0[0u].w);
    float _972 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) * cbInstanceData._m0[_966].x;
    float _973 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) * cbInstanceData._m0[_966].y;
    float _974 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0)))) * cbInstanceData._m0[_966].z;
    float _3968 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _975 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _3979 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _976 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _3990 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _977 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    vec4 _978 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _983 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _994 = (((_983.x - _814) + (_983.w * _814)) * cbMtdParam._m0[3u].x) + _814;
    float _1007 = (cbMtdParam._m0[3u].x * (((_975 * _913) - _975) + _978.x)) + _975;
    float _1008 = (cbMtdParam._m0[3u].x * (((_976 * _913) - _976) + _978.y)) + _976;
    float _1009 = (cbMtdParam._m0[3u].x * (((_977 * _913) - _977) + _978.z)) + _977;
    float _1010 = 1.0 - _994;
    float _1011 = _1010 * _1007;
    float _1012 = _1010 * _1008;
    float _1013 = _1010 * _1009;
    float _1018 = (_1007 + (-0.039999999105930328369140625)) * _994;
    float _1019 = (_1008 + (-0.039999999105930328369140625)) * _994;
    float _1020 = (_1009 + (-0.039999999105930328369140625)) * _994;
    float _1021 = _1018 + 0.039999999105930328369140625;
    float _1023 = _1019 + 0.039999999105930328369140625;
    float _1024 = _1020 + 0.039999999105930328369140625;
    vec4 _1033 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _908, cbSceneParam._m0[86u].y * _909));
    float _1036 = _1033.x * TEXCOORD_4;
    float _1037 = dot(vec3(_807, _808, _809), vec3(_887, _888, _889));
    float _1040 = _1037 * 2.0;
    float _1044 = (_1040 * _807) - _887;
    float _1045 = (_1040 * _808) - _888;
    float _1046 = (_1040 * _809) - _889;
    float _1050 = abs(dot(vec3(_887, _888, _889), vec3(_807, _808, _809)));
    float _4001 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _1052 = sqrt(_951);
    float _1064 = exp2((_1052 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1052 * 3.0));
    float _1070 = (1.0 - _1064) * ((_1052 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1071 = _1064 * _1052;
    float _1099 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1103 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1107 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1437;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1163 = fma(_1107, cbModelParam._m0[26u].z, fma(_1103, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1099));
        float _1167 = fma(_1107, cbModelParam._m0[27u].z, fma(_1103, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1099));
        float _1171 = fma(_1107, cbModelParam._m0[28u].z, fma(_1103, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1099));
        float _1195 = _1099 + _807;
        float _1196 = _1103 + _808;
        float _1197 = _1107 + _809;
        float _1207 = fma(_1197, cbModelParam._m0[26u].z, fma(_1196, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1195)) - _1163;
        float _1208 = fma(_1197, cbModelParam._m0[27u].z, fma(_1196, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1195)) - _1167;
        float _1209 = fma(_1197, cbModelParam._m0[28u].z, fma(_1196, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1195)) - _1171;
        float _1213 = inversesqrt(dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209)));
        float _1226 = ((_1213 * _1207) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1163 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1227 = ((_1213 * _1208) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1167 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1228 = ((_1213 * _1209) / cbModelParam._m0[34u].z) + ((((((_1171 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        float _1265 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1231.x + (-0.5));
        float _1267 = _1265 * (_1231.y + (-0.5));
        float _1268 = _1265 * (_1231.z + (-0.5));
        float _1275 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1238.x + (-0.5));
        float _1277 = _1275 * (_1238.y + (-0.5));
        float _1278 = _1275 * (_1238.z + (-0.5));
        float _1285 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1245.x + (-0.5));
        float _1287 = _1285 * (_1245.y + (-0.5));
        float _1288 = _1285 * (_1245.z + (-0.5));
        float _1295 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1252.x + (-0.5));
        float _1297 = _1295 * (_1252.y + (-0.5));
        float _1298 = _1295 * (_1252.z + (-0.5));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = _1266 * 0.5;
        float _1303 = _1276 * 0.5;
        float _1304 = _1286 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1319 = (dot(vec3(_807, _808, _809), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _4027 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1329 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _4038 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _4049 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1331 + 1.0))) + _1336) * _1299;
        float _1346 = _1267 * 0.5;
        float _1347 = _1277 * 0.5;
        float _1348 = _1287 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_807, _808, _809), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _4060 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _4071 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _4082 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1373 + 1.0))) + _1378) * _1300;
        float _1388 = _1268 * 0.5;
        float _1389 = _1278 * 0.5;
        float _1390 = _1288 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_807, _808, _809), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _4093 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _4104 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _4115 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_1415 + 1.0))) + _1420) * _1301;
        _1437 = _1268;
        _1439 = _1267;
        _1440 = _1266;
        _1441 = _1278;
        _1442 = _1277;
        _1443 = _1276;
        _1444 = _1288;
        _1445 = _1287;
        _1446 = _1286;
        _1447 = _1301;
        _1448 = _1300;
        _1449 = _1299;
        _1450 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
        _1451 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
        _1452 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
    }
    else
    {
        _1437 = _1438;
        _1439 = _1438;
        _1440 = _1438;
        _1441 = _1438;
        _1442 = _1438;
        _1443 = _1438;
        _1444 = _1438;
        _1445 = _1438;
        _1446 = _1438;
        _1447 = _1438;
        _1448 = _1438;
        _1449 = _1438;
        _1450 = 0.0;
        _1451 = 0.0;
        _1452 = 0.0;
    }
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1481 = fma(_1107, cbModelParam._m0[30u].z, fma(_1103, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1099));
        float _1485 = fma(_1107, cbModelParam._m0[31u].z, fma(_1103, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1099));
        float _1489 = fma(_1107, cbModelParam._m0[32u].z, fma(_1103, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1099));
        float _1512 = _1099 + _807;
        float _1513 = _1103 + _808;
        float _1514 = _1107 + _809;
        float _1524 = fma(_1514, cbModelParam._m0[30u].z, fma(_1513, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1512)) - _1481;
        float _1525 = fma(_1514, cbModelParam._m0[31u].z, fma(_1513, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1512)) - _1485;
        float _1526 = fma(_1514, cbModelParam._m0[32u].z, fma(_1513, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1512)) - _1489;
        float _1530 = inversesqrt(dot(vec3(_1524, _1525, _1526), vec3(_1524, _1525, _1526)));
        float _1543 = ((_1530 * _1524) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1481 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1544 = ((_1530 * _1525) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1485 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1545 = ((_1530 * _1526) / cbModelParam._m0[35u].z) + ((((((_1489 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1547 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1543, _1544, _1545), 0.0);
        vec4 _1554 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1543, _1544, _1545), 0.0);
        vec4 _1561 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1543, _1544, _1545), 0.0);
        vec4 _1568 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1543, _1544, _1545), 0.0);
        float _1580 = exp2((_1547.w + (-0.5)) * 20.0) * 2.0;
        float _1581 = _1580 * (_1547.x + (-0.5));
        float _1582 = _1580 * (_1547.y + (-0.5));
        float _1583 = _1580 * (_1547.z + (-0.5));
        float _1590 = exp2((_1554.w + (-0.5)) * 20.0) * 2.0;
        float _1591 = _1590 * (_1554.x + (-0.5));
        float _1592 = _1590 * (_1554.y + (-0.5));
        float _1593 = _1590 * (_1554.z + (-0.5));
        float _1600 = exp2((_1561.w + (-0.5)) * 20.0) * 2.0;
        float _1601 = _1600 * (_1561.x + (-0.5));
        float _1602 = _1600 * (_1561.y + (-0.5));
        float _1603 = _1600 * (_1561.z + (-0.5));
        float _1610 = exp2((_1568.w + (-0.5)) * 20.0) * 2.0;
        float _1611 = _1610 * (_1568.x + (-0.5));
        float _1612 = _1610 * (_1568.y + (-0.5));
        float _1613 = _1610 * (_1568.z + (-0.5));
        float _1614 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1615 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1616 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1617 = _1581 * 0.5;
        float _1618 = _1591 * 0.5;
        float _1619 = _1601 * 0.5;
        float _1620 = dot(vec3(_1617, _1618, _1619), vec3(_1617, _1618, _1619));
        float _1625 = (_1620 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1620);
        float _1633 = (dot(vec3(_807, _808, _809), vec3(_1625 * _1617, _1625 * _1618, _1625 * _1619)) + 1.0) * 0.5;
        float _4156 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1642 = sqrt(((_1618 * _1618) + (_1617 * _1617)) + (_1619 * _1619)) / (_1614 + 9.9999997473787516355514526367188e-06);
        float _4167 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1644 = _1643 * 2.0;
        float _1648 = (1.0 - _1643) / (_1643 + 1.0);
        float _4178 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1658 = ((((1.0 - _1649) * (_1644 + 2.0)) * exp2(log2(isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_1644 + 1.0))) + _1649) * _1614;
        float _1659 = _1582 * 0.5;
        float _1660 = _1592 * 0.5;
        float _1661 = _1602 * 0.5;
        float _1662 = dot(vec3(_1659, _1660, _1661), vec3(_1659, _1660, _1661));
        float _1667 = (_1662 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1662);
        float _1675 = (dot(vec3(_807, _808, _809), vec3(_1667 * _1659, _1667 * _1660, _1667 * _1661)) + 1.0) * 0.5;
        float _4189 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1684 = sqrt(((_1660 * _1660) + (_1659 * _1659)) + (_1661 * _1661)) / (_1615 + 9.9999997473787516355514526367188e-06);
        float _4200 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1685 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1686 = _1685 * 2.0;
        float _1690 = (1.0 - _1685) / (_1685 + 1.0);
        float _4211 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1691 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1700 = ((((1.0 - _1691) * (_1686 + 2.0)) * exp2(log2(isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_1686 + 1.0))) + _1691) * _1615;
        float _1701 = _1583 * 0.5;
        float _1702 = _1593 * 0.5;
        float _1703 = _1603 * 0.5;
        float _1704 = dot(vec3(_1701, _1702, _1703), vec3(_1701, _1702, _1703));
        float _1709 = (_1704 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1704);
        float _1717 = (dot(vec3(_807, _808, _809), vec3(_1709 * _1701, _1709 * _1702, _1709 * _1703)) + 1.0) * 0.5;
        float _4222 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1726 = sqrt(((_1702 * _1702) + (_1701 * _1701)) + (_1703 * _1703)) / (_1616 + 9.9999997473787516355514526367188e-06);
        float _4233 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1727 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1728 = _1727 * 2.0;
        float _1732 = (1.0 - _1727) / (_1727 + 1.0);
        float _4244 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1733 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1742 = ((((1.0 - _1733) * (_1728 + 2.0)) * exp2(log2(isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_1728 + 1.0))) + _1733) * _1616;
        _1750 = _1583;
        _1751 = _1582;
        _1752 = _1581;
        _1753 = _1593;
        _1754 = _1592;
        _1755 = _1591;
        _1756 = _1603;
        _1757 = _1602;
        _1758 = _1601;
        _1759 = _1616;
        _1760 = _1615;
        _1761 = _1614;
        _1762 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)));
        _1763 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)));
        _1764 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0)));
    }
    else
    {
        _1750 = _1438;
        _1751 = _1438;
        _1752 = _1438;
        _1753 = _1438;
        _1754 = _1438;
        _1755 = _1438;
        _1756 = _1438;
        _1757 = _1438;
        _1758 = _1438;
        _1759 = _1438;
        _1760 = _1438;
        _1761 = _1438;
        _1762 = 0.0;
        _1763 = 0.0;
        _1764 = 0.0;
    }
    float _1774 = (cbModelParam._m0[1u].x * (_1762 - _1450)) + _1450;
    float _1775 = (cbModelParam._m0[1u].x * (_1763 - _1451)) + _1451;
    float _1776 = (cbModelParam._m0[1u].x * (_1764 - _1452)) + _1452;
    float _1797 = fma(_1776, cbSceneParam._m0[89u].z, fma(_1775, cbSceneParam._m0[89u].y, _1774 * cbSceneParam._m0[89u].x));
    float _1800 = fma(_1776, cbSceneParam._m0[90u].z, fma(_1775, cbSceneParam._m0[90u].y, _1774 * cbSceneParam._m0[90u].x));
    float _1803 = fma(_1776, cbSceneParam._m0[91u].z, fma(_1775, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1774));
    float _1818 = _1044 * 0.5;
    float _1819 = _1045 * 0.5;
    float _1820 = _1046 * 0.5;
    float _1821 = dot(vec4(_1818, _1819, _1820, 1.0), vec4(_1752, _1755, _1758, _1761));
    float _1824 = dot(vec4(_1818, _1819, _1820, 1.0), vec4(_1751, _1754, _1757, _1760));
    float _1827 = dot(vec4(_1818, _1819, _1820, 1.0), vec4(_1750, _1753, _1756, _1759));
    float _1861;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1834 = dot(vec4(_1818, _1819, _1820, 1.0), vec4(_1437, _1441, _1444, _1447));
        float _1838 = dot(vec4(_1818, _1819, _1820, 1.0), vec4(_1439, _1442, _1445, _1448));
        float _1842 = dot(vec4(_1818, _1819, _1820, 1.0), vec4(_1440, _1443, _1446, _1449));
        float _1849 = dot(vec4(cbModelParam._m0[39u]), vec4(_1818, _1819, _1820, 1.0));
        _1861 = dot(vec3(isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0)), isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0)), isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1849) ? 0.0 : (isnan(0.0) ? _1849 : max(0.0, _1849))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1861 = 1.0;
    }
    float _1872;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1863 = dot(vec4(cbModelParam._m0[40u]), vec4(_1818, _1819, _1820, 1.0));
        _1872 = dot(vec3(isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0)), isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0)), isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1863) ? 0.0 : (isnan(0.0) ? _1863 : max(0.0, _1863))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1872 = 1.0;
    }
    float _1876 = (_1872 * cbModelParam._m0[1u].x) + (_1861 * (1.0 - cbModelParam._m0[1u].x));
    float _1886 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _951);
    float _1887 = isnan(_1886) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1886 : min(cbModelParam._m0[25u].z, _1886));
    float _1967;
    float _1969;
    float _1971;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1934 = fma(_1107, cbModelParam._m0[13u].z, fma(_1103, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1099)) + cbModelParam._m0[13u].w;
        float _1938 = fma(_1107, cbModelParam._m0[14u].z, fma(_1103, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1099)) + cbModelParam._m0[14u].w;
        float _1942 = fma(_1107, cbModelParam._m0[15u].z, fma(_1103, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1099)) + cbModelParam._m0[15u].w;
        float _1945 = fma(_1046, cbModelParam._m0[13u].z, fma(_1045, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1044));
        float _1948 = fma(_1046, cbModelParam._m0[14u].z, fma(_1045, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1044));
        float _1951 = fma(_1046, cbModelParam._m0[15u].z, fma(_1045, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1044));
        float _1979;
        if (_1945 > 0.0)
        {
            _1979 = abs((1.0 - _1934) / _1945);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1945 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1934 + 1.0) / _1945);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1979 = frontier_phi_19_17_ladder;
        }
        float _2181;
        if (_1948 > 0.0)
        {
            _2181 = abs((1.0 - _1938) / _1948);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1948 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1938 + 1.0) / _1948);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2181 = frontier_phi_28_24_ladder;
        }
        float _2435;
        if (_1951 > 0.0)
        {
            _2435 = abs((1.0 - _1942) / _1951);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1942 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2435 = frontier_phi_40_35_ladder;
        }
        float _2437 = isnan(_2181) ? _1979 : (isnan(_1979) ? _2181 : min(_1979, _2181));
        float _2438 = isnan(_2435) ? _2437 : (isnan(_2437) ? _2435 : min(_2437, _2435));
        float _2442 = (_2438 * _1945) + _1934;
        float _2443 = (_2438 * _1948) + _1938;
        float _2444 = (_2438 * _1951) + _1942;
        float _2445 = _2438 * 9.9999997473787516355514526367188e-05;
        float _2447 = (-1.0) - _2445;
        float _2449 = _2445 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2444 > _2449) || ((_2444 < _2447) || ((_2443 > _2449) || ((_2443 < _2447) || ((_2442 < _2447) || (_2442 > _2449))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2572 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2444, cbModelParam._m0[9u].z, fma(_2443, cbModelParam._m0[9u].y, _2442 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2444, cbModelParam._m0[10u].z, fma(_2443, cbModelParam._m0[10u].y, _2442 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2444, cbModelParam._m0[11u].z, fma(_2443, cbModelParam._m0[11u].y, _2442 * cbModelParam._m0[11u].x))), _1887);
            frontier_phi_18_40_ladder = _2572.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2572.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2572.x * cbModelParam._m0[1u].y;
        }
        _1967 = frontier_phi_18_40_ladder_2;
        _1969 = frontier_phi_18_40_ladder_1;
        _1971 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1955 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1044, _1045, _1046), _1887);
        _1967 = _1955.x * cbModelParam._m0[1u].y;
        _1969 = _1955.y * cbModelParam._m0[1u].y;
        _1971 = _1955.z * cbModelParam._m0[1u].y;
    }
    float _1975 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _951);
    float _1976 = isnan(_1975) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1975 : min(cbModelParam._m0[25u].w, _1975));
    float _2065;
    float _2067;
    float _2069;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2029 = fma(_1107, cbModelParam._m0[21u].z, fma(_1103, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1099)) + cbModelParam._m0[21u].w;
        float _2033 = fma(_1107, cbModelParam._m0[22u].z, fma(_1103, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1099)) + cbModelParam._m0[22u].w;
        float _2037 = fma(_1107, cbModelParam._m0[23u].z, fma(_1103, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1099)) + cbModelParam._m0[23u].w;
        float _2040 = fma(_1046, cbModelParam._m0[21u].z, fma(_1045, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1044));
        float _2043 = fma(_1046, cbModelParam._m0[22u].z, fma(_1045, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1044));
        float _2046 = fma(_1046, cbModelParam._m0[23u].z, fma(_1045, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1044));
        float _2186;
        if (_2040 > 0.0)
        {
            _2186 = abs((1.0 - _2029) / _2040);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2040 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2029 + 1.0) / _2040);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2186 = frontier_phi_30_26_ladder;
        }
        float _2462;
        if (_2043 > 0.0)
        {
            _2462 = abs((1.0 - _2033) / _2043);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2043 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2033 + 1.0) / _2043);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2462 = frontier_phi_42_37_ladder;
        }
        float _2675;
        if (_2046 > 0.0)
        {
            _2675 = abs((1.0 - _2037) / _2046);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2046 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2037 + 1.0) / _2046);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2675 = frontier_phi_51_48_ladder;
        }
        float _2677 = isnan(_2462) ? _2186 : (isnan(_2186) ? _2462 : min(_2186, _2462));
        float _2678 = isnan(_2675) ? _2677 : (isnan(_2677) ? _2675 : min(_2677, _2675));
        float _2682 = (_2678 * _2040) + _2029;
        float _2683 = (_2678 * _2043) + _2033;
        float _2684 = (_2678 * _2046) + _2037;
        float _2685 = _2678 * 9.9999997473787516355514526367188e-05;
        float _2686 = (-1.0) - _2685;
        float _2688 = _2685 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2684 > _2688) || ((_2684 < _2686) || ((_2683 > _2688) || ((_2683 < _2686) || ((_2682 < _2686) || (_2682 > _2688))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2901 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2684, cbModelParam._m0[17u].z, fma(_2683, cbModelParam._m0[17u].y, _2682 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2684, cbModelParam._m0[18u].z, fma(_2683, cbModelParam._m0[18u].y, _2682 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2684, cbModelParam._m0[19u].z, fma(_2683, cbModelParam._m0[19u].y, _2682 * cbModelParam._m0[19u].x))), _1976);
            frontier_phi_27_51_ladder = _2901.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2901.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2901.x * cbModelParam._m0[1u].z;
        }
        _2065 = frontier_phi_27_51_ladder_2;
        _2067 = frontier_phi_27_51_ladder_1;
        _2069 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2049 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1044, _1045, _1046), _1976);
        _2065 = _2049.x * cbModelParam._m0[1u].z;
        _2067 = _2049.y * cbModelParam._m0[1u].z;
        _2069 = _2049.z * cbModelParam._m0[1u].z;
    }
    float _2082 = (((_1070 * _1021) + _1071) * _1036) * ((cbModelParam._m0[1u].w * (_2065 - _1967)) + _1967);
    float _2084 = (((_1070 * _1023) + _1071) * _1036) * ((cbModelParam._m0[1u].w * (_2067 - _1969)) + _1969);
    float _2086 = (((_1070 * _1024) + _1071) * _1036) * ((cbModelParam._m0[1u].w * (_2069 - _1971)) + _1971);
    float _2089 = fma(_2086, cbSceneParam._m0[89u].z, fma(_2084, cbSceneParam._m0[89u].y, _2082 * cbSceneParam._m0[89u].x));
    float _2092 = fma(_2086, cbSceneParam._m0[90u].z, fma(_2084, cbSceneParam._m0[90u].y, _2082 * cbSceneParam._m0[90u].x));
    float _2095 = fma(_2086, cbSceneParam._m0[91u].z, fma(_2084, cbSceneParam._m0[91u].y, _2082 * cbSceneParam._m0[91u].x));
    uvec4 _2105 = floatBitsToUint(cbInstanceData._m0[_964 + 5u]);
    uint _2107 = _2105.x * 14u;
    uint _2108 = _2107 + 13u;
    float _2115 = _1036 + (-1.0);
    float _2120 = (cbLight._m0[_2108].x * _2115) + 1.0;
    float _2121 = (cbLight._m0[_2108].y * _2115) + 1.0;
    float _2122 = (cbLight._m0[_2108].z * _2115) + 1.0;
    float _2123 = (cbLight._m0[_2108].w * _2115) + 1.0;
    uint _2124 = _2107 + 5u;
    float _2130 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
    uint _2134 = _2107 + 4u;
    float _2140 = isnan(1.0) ? _2120 : (isnan(_2120) ? 1.0 : min(_2120, 1.0));
    uint _2144 = _2107 | 1u;
    float _2155 = dot(vec3(cbLight._m0[_2107].xyz), vec3(_807, _808, _809));
    float _2158 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_807, _808, _809));
    float _4380 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _4391 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2163 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * 0.3183098733425140380859375;
    float _2165 = (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * 0.3183098733425140380859375;
    float _2172 = ((cbLight._m0[_2124].x * _2130) * _2165) + ((cbLight._m0[_2134].x * _2140) * _2163);
    float _2173 = ((_2130 * cbLight._m0[_2124].y) * _2165) + ((_2140 * cbLight._m0[_2134].y) * _2163);
    float _2174 = ((_2130 * cbLight._m0[_2124].z) * _2165) + ((_2140 * cbLight._m0[_2134].z) * _2163);
    uvec4 _2178 = floatBitsToUint(cbLight._m0[_2107 + 12u]);
    bool _2180 = _2178.x == 0u;
    float _2191;
    float _2193;
    float _2195;
    if (_2180)
    {
        _2191 = _2172;
        _2193 = _2173;
        _2195 = _2174;
    }
    else
    {
        uint _2199 = _2107 + 6u;
        float _2215 = (dot(vec3(cbLight._m0[_2107 + 2u].xyz), vec3(_807, _808, _809)) * 0.5) + 0.5;
        float _2216 = _2215 * _2215;
        float _4402 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2217 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _2218 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
        _2191 = (((cbLight._m0[_2199].x * 0.3183098733425140380859375) * _2217) * _2218) + _2172;
        _2193 = (((cbLight._m0[_2199].y * 0.3183098733425140380859375) * _2217) * _2218) + _2173;
        _2195 = (((cbLight._m0[_2199].z * 0.3183098733425140380859375) * _2217) * _2218) + _2174;
    }
    bool _2198 = _2178.y == 0u;
    float _2236;
    float _2238;
    float _2240;
    if (_2198)
    {
        _2236 = _2191;
        _2238 = _2193;
        _2240 = _2195;
    }
    else
    {
        uint _2406 = _2107 + 7u;
        float _2422 = (dot(vec3(cbLight._m0[_2107 + 3u].xyz), vec3(_807, _808, _809)) * 0.5) + 0.5;
        float _2423 = _2422 * _2422;
        float _4418 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2424 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _2425 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
        _2236 = (((cbLight._m0[_2406].x * 0.3183098733425140380859375) * _2424) * _2425) + _2191;
        _2238 = (((cbLight._m0[_2406].y * 0.3183098733425140380859375) * _2424) * _2425) + _2193;
        _2240 = (((cbLight._m0[_2406].z * 0.3183098733425140380859375) * _2424) * _2425) + _2195;
    }
    uint _2243 = _2107 + 8u;
    float _2256 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2107].w)) * _951) * 0.949999988079071044921875);
    float _2257 = _2256 * _2256;
    float _2258 = cbLight._m0[_2107].x + _887;
    float _2259 = cbLight._m0[_2107].y + _888;
    float _2260 = cbLight._m0[_2107].z + _889;
    float _2264 = inversesqrt(dot(vec3(_2258, _2259, _2260), vec3(_2258, _2259, _2260)));
    float _2265 = _2264 * _2258;
    float _2266 = _2264 * _2259;
    float _2267 = _2264 * _2260;
    float _2268 = dot(vec3(_807, _808, _809), vec3(cbLight._m0[_2107].xyz));
    float _4434 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2271 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
    float _4445 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _2272 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
    float _2273 = dot(vec3(_807, _808, _809), vec3(_2265, _2266, _2267));
    float _4456 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2276 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
    float _2277 = dot(vec3(cbLight._m0[_2107].xyz), vec3(_2265, _2266, _2267));
    float _4467 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2281 = _2257 * _2257;
    float _2285 = ((_2276 * _2276) * (_2281 + (-1.0))) + 1.0;
    float _2293 = exp2(log2(1.0 - (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0)))) * 5.0);
    float _2294 = 0.959999978542327880859375 - _1018;
    float _2296 = 0.959999978542327880859375 - _1019;
    float _2297 = 0.959999978542327880859375 - _1020;
    float _2304 = 1.0 - _2257;
    float _2315 = (0.5 / (((_2272 * ((_2271 * _2304) + _2257)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2304) + _2257) * _2271))) * _2271;
    float _4478 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2317 = (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_2281 / ((_2285 * _2285) * 3.141590118408203125));
    uint _2328 = _2107 + 9u;
    float _2339 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2144].w)) * _951) * 0.949999988079071044921875);
    float _2340 = _2339 * _2339;
    float _2341 = cbLight._m0[_2144].x + _887;
    float _2342 = cbLight._m0[_2144].y + _888;
    float _2343 = cbLight._m0[_2144].z + _889;
    float _2347 = inversesqrt(dot(vec3(_2341, _2342, _2343), vec3(_2341, _2342, _2343)));
    float _2348 = _2347 * _2341;
    float _2349 = _2347 * _2342;
    float _2350 = _2347 * _2343;
    float _2351 = dot(vec3(_807, _808, _809), vec3(cbLight._m0[_2144].xyz));
    float _4489 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2354 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
    float _2355 = dot(vec3(_807, _808, _809), vec3(_2348, _2349, _2350));
    float _4500 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2358 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
    float _2359 = dot(vec3(cbLight._m0[_2144].xyz), vec3(_2348, _2349, _2350));
    float _4511 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2363 = _2340 * _2340;
    float _2367 = ((_2358 * _2358) * (_2363 + (-1.0))) + 1.0;
    float _2374 = exp2(log2(1.0 - (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0)))) * 5.0);
    float _2381 = 1.0 - _2340;
    float _2391 = (0.5 / (((_2272 * ((_2354 * _2381) + _2340)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2381) + _2340) * _2354))) * _2354;
    float _4522 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2393 = (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * (_2363 / ((_2367 * _2367) * 3.141590118408203125));
    float _2403 = (((((_2374 * _2294) + _1021) * cbLight._m0[_2328].x) * _2393) * _2130) + (((((_2293 * _2294) + _1021) * cbLight._m0[_2243].x) * _2317) * _2140);
    float _2404 = (((((_2374 * _2296) + _1023) * cbLight._m0[_2328].y) * _2393) * _2130) + (((((_2293 * _2296) + _1023) * cbLight._m0[_2243].y) * _2317) * _2140);
    float _2405 = (((((_2374 * _2297) + _1024) * cbLight._m0[_2328].z) * _2393) * _2130) + (((((_2293 * _2297) + _1024) * cbLight._m0[_2243].z) * _2317) * _2140);
    float _2467;
    float _2469;
    float _2471;
    if (_2180)
    {
        _2467 = _2403;
        _2469 = _2404;
        _2471 = _2405;
    }
    else
    {
        uint _2473 = _2107 + 2u;
        uint _2477 = _2107 + 10u;
        float _2491 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2473].w)) * _951) * 0.949999988079071044921875);
        float _2492 = _2491 * _2491;
        float _2493 = cbLight._m0[_2473].x + _887;
        float _2494 = cbLight._m0[_2473].y + _888;
        float _2495 = cbLight._m0[_2473].z + _889;
        float _2499 = inversesqrt(dot(vec3(_2493, _2494, _2495), vec3(_2493, _2494, _2495)));
        float _2500 = _2499 * _2493;
        float _2501 = _2499 * _2494;
        float _2502 = _2499 * _2495;
        float _2503 = dot(vec3(_807, _808, _809), vec3(cbLight._m0[_2473].xyz));
        float _4533 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2506 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2507 = dot(vec3(_807, _808, _809), vec3(_2500, _2501, _2502));
        float _4544 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2510 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _2511 = dot(vec3(cbLight._m0[_2473].xyz), vec3(_2500, _2501, _2502));
        float _4555 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2515 = _2492 * _2492;
        float _2519 = ((_2510 * _2510) * (_2515 + (-1.0))) + 1.0;
        float _2526 = exp2(log2(1.0 - (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0)))) * 5.0);
        float _2533 = 1.0 - _2492;
        float _2543 = (0.5 / (((_2272 * ((_2506 * _2533) + _2492)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2533) + _2492) * _2506))) * _2506;
        float _4566 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2545 = (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_2515 / ((_2519 * _2519) * 3.141590118408203125));
        float _2546 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
        _2467 = (((((_2526 * _2294) + _1021) * cbLight._m0[_2477].x) * _2545) * _2546) + _2403;
        _2469 = (((((_2526 * _2296) + _1023) * cbLight._m0[_2477].y) * _2545) * _2546) + _2404;
        _2471 = (((((_2526 * _2297) + _1024) * cbLight._m0[_2477].z) * _2545) * _2546) + _2405;
    }
    float _2581;
    float _2583;
    float _2585;
    if (_2198)
    {
        _2581 = _2467;
        _2583 = _2469;
        _2585 = _2471;
    }
    else
    {
        uint _2592 = _2107 + 3u;
        uint _2596 = _2107 + 11u;
        float _2610 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2592].w)) * _951) * 0.949999988079071044921875);
        float _2611 = _2610 * _2610;
        float _2612 = cbLight._m0[_2592].x + _887;
        float _2613 = cbLight._m0[_2592].y + _888;
        float _2614 = cbLight._m0[_2592].z + _889;
        float _2618 = inversesqrt(dot(vec3(_2612, _2613, _2614), vec3(_2612, _2613, _2614)));
        float _2619 = _2618 * _2612;
        float _2620 = _2618 * _2613;
        float _2621 = _2618 * _2614;
        float _2622 = dot(vec3(_807, _808, _809), vec3(cbLight._m0[_2592].xyz));
        float _4582 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2625 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _2626 = dot(vec3(_807, _808, _809), vec3(_2619, _2620, _2621));
        float _4593 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        float _2629 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
        float _2630 = dot(vec3(cbLight._m0[_2592].xyz), vec3(_2619, _2620, _2621));
        float _4604 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2634 = _2611 * _2611;
        float _2638 = ((_2629 * _2629) * (_2634 + (-1.0))) + 1.0;
        float _2645 = exp2(log2(1.0 - (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0)))) * 5.0);
        float _2652 = 1.0 - _2611;
        float _2662 = (0.5 / (((_2272 * ((_2625 * _2652) + _2611)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2652) + _2611) * _2625))) * _2625;
        float _4615 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2664 = (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2634 / ((_2638 * _2638) * 3.141590118408203125));
        float _2665 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
        _2581 = (((((_2645 * _2294) + _1021) * cbLight._m0[_2596].x) * _2664) * _2665) + _2467;
        _2583 = (((((_2645 * _2296) + _1023) * cbLight._m0[_2596].y) * _2664) * _2665) + _2469;
        _2585 = (((((_2645 * _2297) + _1024) * cbLight._m0[_2596].z) * _2664) * _2665) + _2471;
    }
    float _2799;
    float _2801;
    float _2803;
    float _2805;
    float _2807;
    float _2809;
    if (_2105.y == 0u)
    {
        float _2740 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2741 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2740;
        float _2742 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2740;
        float _2743 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2740;
        uvec4 _2755 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2756 = _2755.x;
        uint _2767 = uint((float(_2755.y) * floor(float(uint(cbSceneParam._m0[85u].y * _909) / _2756))) + floor(float(uint(cbSceneParam._m0[85u].x * _908) / _2756)));
        float _2777 = (log2(_2743 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2778 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
        uint _2781 = uint(isnan(14.0) ? _2778 : (isnan(_2778) ? 14.0 : min(_2778, 14.0)));
        uvec4 _2786 = texelFetch(g_lightClusterGridBuffer, int(((_2781 << 2u) + (_2767 << 6u)) >> 2u));
        uint _2787 = _2786.x;
        uint _2788 = _2755.z;
        float _2906;
        float _2908;
        float _2910;
        float _2912;
        float _2914;
        float _2916;
        if (((((1u << ((_2788 >> 4u) & 15u)) + 4294967295u) & _2787) == 0u) || ((_2788 & 240u) == 0u))
        {
            _2906 = 0.0;
            _2908 = 0.0;
            _2910 = 0.0;
            _2912 = 0.0;
            _2914 = 0.0;
            _2916 = 0.0;
        }
        else
        {
            float _2907;
            float _2909;
            float _2911;
            float _2913;
            float _2915;
            float _2917;
            float _3058 = 0.0;
            float _3059 = 0.0;
            float _3060 = 0.0;
            float _3061 = 0.0;
            float _3062 = 0.0;
            float _3063 = 0.0;
            uint _3064 = 0u;
            uint _3073;
            bool _3074;
            for (;;)
            {
                _3073 = texelFetch(g_lightClassification, int((((_2781 << 5u) + (_2767 << 9u)) + (_3064 << 2u)) >> 2u)).x;
                _3074 = _3073 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3074)
                {
                    frontier_phi_68_pred = _3060;
                    frontier_phi_68_pred_1 = _3063;
                    frontier_phi_68_pred_2 = _3062;
                    frontier_phi_68_pred_3 = _3061;
                    frontier_phi_68_pred_4 = _3059;
                    frontier_phi_68_pred_5 = _3058;
                }
                else
                {
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    uint _3209;
                    _3203 = _3058;
                    _3204 = _3059;
                    _3205 = _3060;
                    _3206 = _3061;
                    _3207 = _3062;
                    _3208 = _3063;
                    _3209 = _3073;
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    float _3134;
                    float _3135;
                    for (;;)
                    {
                        uint _3213 = uint(findLSB(_3209)) + (_3064 << 5u);
                        uint _3210 = (_3209 + 4294967295u) & _3209;
                        uint _3215 = _3213 * 48u;
                        vec4 _3229 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3215)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 3u)).x));
                        uint _3235 = (_3213 * 48u) + 4u;
                        vec4 _3248 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3235)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 3u)).x));
                        uint _3254 = (_3213 * 48u) + 8u;
                        vec3 _3265 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3254)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 2u)).x));
                        float _3269 = _3229.x - _2741;
                        float _3270 = _3229.y - _2742;
                        float _3271 = _3229.z - _2743;
                        float _3272 = dot(vec3(_3269, _3270, _3271), vec3(_3269, _3270, _3271));
                        float _3275 = inversesqrt(_3272);
                        float _3276 = _3275 * _3269;
                        float _3277 = _3275 * _3270;
                        float _3278 = _3275 * _3271;
                        float _3279 = dot(vec3(_932, _935, _938), vec3(_3276, _3277, _3278));
                        float _3284 = 1.0 - (_3272 * _3229.w);
                        float _4641 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                        float _3285 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                        float _3286 = sqrt(_3272) * _3248.w;
                        float _3289 = 1.39999997615814208984375 / (_3286 + 1.39999997615814208984375);
                        float _3290 = _3289 * _3289;
                        float _3293 = ((1.0 - _3290) * _3279) + _3290;
                        float _3296 = _3286 * _3286;
                        float _3300 = ((isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0))) * _3285) / ((_3296 * 0.699999988079071044921875) + 1.0);
                        float _3304 = (-0.0) - _2741;
                        float _3305 = (-0.0) - _2742;
                        float _3306 = (-0.0) - _2743;
                        float _3310 = inversesqrt(dot(vec3(_3304, _3305, _3306), vec3(_3304, _3305, _3306)));
                        float _3311 = _3310 * _3304;
                        float _3312 = _3310 * _3305;
                        float _3313 = _3310 * _3306;
                        float _3320 = exp2(log2(1.0 / ((_3296 * 3.5) + 5.0)) * 0.25);
                        float _3321 = 1.0 - _1052;
                        float _3328 = sqrt(1.0 - ((1.0 - (_3321 * _3321)) * (1.0 - (_3320 * _3320))));
                        float _3329 = _3328 * _3328;
                        float _3330 = _3329 * _3329;
                        float _3331 = _3311 + _3276;
                        float _3332 = _3312 + _3277;
                        float _3333 = _3313 + _3278;
                        float _3337 = inversesqrt(dot(vec3(_3331, _3332, _3333), vec3(_3331, _3332, _3333)));
                        float _3341 = dot(vec3(_932, _935, _938), vec3(_3311, _3312, _3313));
                        float _4657 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                        float _3344 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                        float _3345 = dot(vec3(_932, _935, _938), vec3(_3337 * _3331, _3337 * _3332, _3337 * _3333));
                        float _4668 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                        float _3348 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                        float _3352 = ((_3348 * _3348) * (_3330 + (-1.0))) + 1.0;
                        float _3353 = _3289 * _3329;
                        float _3354 = _3353 * _3353;
                        float _3357 = ((1.0 - _3354) * _3279) + _3354;
                        float _4679 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                        float _3358 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                        float _3359 = 1.0 - _3329;
                        float _3369 = (0.5 / (((_3358 * ((_3344 * _3359) + _3329)) + 9.9999999392252902907785028219223e-09) + (((_3358 * _3359) + _3329) * _3344))) * _3358;
                        float _4690 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                        float _3380 = (((_3330 * 3.1415927410125732421875) * (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0)))) / ((_3352 * _3352) * ((_3296 * 2.1991131305694580078125) + 3.141590118408203125))) * _3285;
                        _3133 = (_3300 * _3248.x) + _3206;
                        _3134 = (_3300 * _3248.y) + _3207;
                        _3135 = (_3300 * _3248.z) + _3208;
                        _3130 = (_3380 * _3265.x) + _3203;
                        _3131 = (_3380 * _3265.y) + _3204;
                        _3132 = (_3380 * _3265.z) + _3205;
                        if (_3210 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3203 = _3130;
                            _3204 = _3131;
                            _3205 = _3132;
                            _3206 = _3133;
                            _3207 = _3134;
                            _3208 = _3135;
                            _3209 = _3210;
                        }
                    }
                    frontier_phi_68_pred = _3132;
                    frontier_phi_68_pred_1 = _3135;
                    frontier_phi_68_pred_2 = _3134;
                    frontier_phi_68_pred_3 = _3133;
                    frontier_phi_68_pred_4 = _3131;
                    frontier_phi_68_pred_5 = _3130;
                }
                _2911 = frontier_phi_68_pred;
                _2917 = frontier_phi_68_pred_1;
                _2915 = frontier_phi_68_pred_2;
                _2913 = frontier_phi_68_pred_3;
                _2909 = frontier_phi_68_pred_4;
                _2907 = frontier_phi_68_pred_5;
                uint _3065 = _3064 + 1u;
                if (_3065 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3058 = _2907;
                    _3059 = _2909;
                    _3060 = _2911;
                    _3061 = _2913;
                    _3062 = _2915;
                    _3063 = _2917;
                    _3064 = _3065;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2906 = _2907;
            _2908 = _2909;
            _2910 = _2911;
            _2912 = _2913;
            _2914 = _2915;
            _2916 = _2917;
        }
        uvec4 _2920 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2921 = _2920.z;
        uint _2923 = (_2921 >> 8u) & 15u;
        float _3026;
        float _3028;
        float _3030;
        float _3032;
        float _3034;
        float _3036;
        if (((4294967295u << _2923) & _2787) == 0u)
        {
            _3026 = _2906;
            _3028 = _2908;
            _3030 = _2910;
            _3032 = _2912;
            _3034 = _2914;
            _3036 = _2916;
        }
        else
        {
            float _3051 = inversesqrt(dot(vec3(_2741, _2742, _2743), vec3(_2741, _2742, _2743)));
            float _3052 = _3051 * _2741;
            float _3053 = _3051 * _2742;
            float _3054 = _3051 * _2743;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2923 < ((_2921 >> 12u) & 15u))
            {
                float _3027;
                float _3029;
                float _3031;
                float _3033;
                float _3035;
                float _3037;
                float _3186 = _2906;
                float _3187 = _2908;
                float _3188 = _2910;
                float _3189 = _2912;
                float _3190 = _2914;
                float _3191 = _2916;
                uint _3192 = _2923;
                uint _3201;
                bool _3202;
                for (;;)
                {
                    _3201 = texelFetch(g_lightClassification, int((((_2781 << 5u) + (_2767 << 9u)) + (_3192 << 2u)) >> 2u)).x;
                    _3202 = _3201 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3202)
                    {
                        frontier_phi_79_pred = _3191;
                        frontier_phi_79_pred_1 = _3190;
                        frontier_phi_79_pred_2 = _3189;
                        frontier_phi_79_pred_3 = _3188;
                        frontier_phi_79_pred_4 = _3187;
                        frontier_phi_79_pred_5 = _3186;
                    }
                    else
                    {
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3687;
                        float _3688;
                        float _3689;
                        float _3690;
                        float _3691;
                        float _3692;
                        float _3407 = _3186;
                        float _3408 = _3187;
                        float _3409 = _3188;
                        float _3410 = _3189;
                        float _3411 = _3190;
                        float _3412 = _3191;
                        uint _3413 = _3201;
                        uint _3414;
                        vec4 _3439;
                        float _3440;
                        vec4 _3455;
                        vec3 _3467;
                        vec4 _3482;
                        vec4 _3497;
                        float _3543;
                        bool _3544;
                        for (;;)
                        {
                            uint _3424 = ((_3192 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3413));
                            _3414 = (_3413 + 4294967295u) & _3413;
                            uint _3426 = _3424 * 40u;
                            _3439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 3u)).x));
                            _3440 = _3439.w;
                            uint _3442 = (_3424 * 40u) + 4u;
                            _3455 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 3u)).x));
                            uint _3457 = (_3424 * 40u) + 8u;
                            _3467 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3457)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 2u)).x));
                            uint _3469 = (_3424 * 40u) + 16u;
                            _3482 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 3u)).x));
                            uint _3484 = (_3424 * 40u) + 20u;
                            _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            uint _3499 = (_3424 * 40u) + 24u;
                            vec4 _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            uint _3518 = (_3424 * 40u) + 28u;
                            vec4 _3531 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 3u)).x));
                            _3543 = fma(_2743, _3531.z, fma(_2742, _3531.y, _3531.x * _2741)) + _3531.w;
                            _3544 = !((fma(_2743, _3512.z, fma(_2742, _3512.y, _3512.x * _2741)) + _3512.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3544)
                            {
                                float _3571 = _3439.x - _2741;
                                float _3572 = _3439.y - _2742;
                                float _3573 = _3439.z - _2743;
                                float _3574 = dot(vec3(_3571, _3572, _3573), vec3(_3571, _3572, _3573));
                                float _3577 = inversesqrt(_3574);
                                float _3578 = _3577 * _3571;
                                float _3579 = _3577 * _3572;
                                float _3580 = _3577 * _3573;
                                float _3584 = 1.0 - (_3574 / (_3440 * _3440));
                                float _4701 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3585 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                                float _3589 = sqrt(_3574) * _3455.w;
                                float _3591 = 1.39999997615814208984375 / (_3589 + 1.39999997615814208984375);
                                float _3592 = _3591 * _3591;
                                float _3595 = ((1.0 - _3592) * dot(vec3(_3578, _3579, _3580), vec3(_932, _935, _938))) + _3592;
                                float _3598 = _3589 * _3589;
                                float _3602 = (fma(_2743, _3482.z, fma(_2742, _3482.y, _3482.x * _2741)) + _3482.w) / _3543;
                                float _3603 = (fma(_2743, _3497.z, fma(_2742, _3497.y, _3497.x * _2741)) + _3497.w) / _3543;
                                float _3607 = 1.0 - dot(vec2(_3602, _3603), vec2(_3602, _3603));
                                float _4717 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3608 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                                float _3609 = _3608 * (((isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0))) * _3585) / ((_3598 * 0.699999988079071044921875) + 1.0));
                                float _3621 = exp2(log2(1.0 / ((_3598 * 3.5) + 5.0)) * 0.25);
                                float _3622 = 1.0 - _1052;
                                float _3629 = sqrt(1.0 - ((1.0 - (_3622 * _3622)) * (1.0 - (_3621 * _3621))));
                                float _3630 = _3629 * _3629;
                                float _3631 = _3630 * _3630;
                                float _3632 = _3578 - _3052;
                                float _3633 = _3579 - _3053;
                                float _3634 = _3580 - _3054;
                                float _3638 = inversesqrt(dot(vec3(_3632, _3633, _3634), vec3(_3632, _3633, _3634)));
                                float _3642 = dot(vec3(_932, _935, _938), vec3((-0.0) - _3052, (-0.0) - _3053, (-0.0) - _3054));
                                float _4728 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                                float _3645 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                                float _3646 = dot(vec3(_932, _935, _938), vec3(_3638 * _3632, _3638 * _3633, _3638 * _3634));
                                float _4739 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                                float _3649 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                                float _3653 = ((_3649 * _3649) * (_3631 + (-1.0))) + 1.0;
                                float _3654 = _3591 * _3630;
                                float _3655 = _3654 * _3654;
                                float _3661 = ((1.0 - _3655) * dot(vec3(_932, _935, _938), vec3(_3578, _3579, _3580))) + _3655;
                                float _4750 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3662 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                                float _3663 = 1.0 - _3630;
                                float _3673 = (0.5 / (((_3662 * ((_3645 * _3663) + _3630)) + 9.9999999392252902907785028219223e-09) + (((_3662 * _3663) + _3630) * _3645))) * _3662;
                                float _4761 = isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0));
                                float _3683 = (_3608 * _3585) * (((_3631 * 3.1415927410125732421875) * (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0)))) / ((_3653 * _3653) * ((_3598 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3609 * _3455.z;
                                frontier_phi_85_pred_1 = _3609 * _3455.y;
                                frontier_phi_85_pred_2 = _3609 * _3455.x;
                                frontier_phi_85_pred_3 = _3683 * _3467.z;
                                frontier_phi_85_pred_4 = _3683 * _3467.y;
                                frontier_phi_85_pred_5 = _3683 * _3467.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3692 = frontier_phi_85_pred;
                            _3691 = frontier_phi_85_pred_1;
                            _3690 = frontier_phi_85_pred_2;
                            _3689 = frontier_phi_85_pred_3;
                            _3688 = frontier_phi_85_pred_4;
                            _3687 = frontier_phi_85_pred_5;
                            _3397 = _3690 + _3410;
                            _3398 = _3691 + _3411;
                            _3399 = _3692 + _3412;
                            _3394 = _3687 + _3407;
                            _3395 = _3688 + _3408;
                            _3396 = _3689 + _3409;
                            if (_3414 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3407 = _3394;
                                _3408 = _3395;
                                _3409 = _3396;
                                _3410 = _3397;
                                _3411 = _3398;
                                _3412 = _3399;
                                _3413 = _3414;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3399;
                        frontier_phi_79_pred_1 = _3398;
                        frontier_phi_79_pred_2 = _3397;
                        frontier_phi_79_pred_3 = _3396;
                        frontier_phi_79_pred_4 = _3395;
                        frontier_phi_79_pred_5 = _3394;
                    }
                    _3037 = frontier_phi_79_pred;
                    _3035 = frontier_phi_79_pred_1;
                    _3033 = frontier_phi_79_pred_2;
                    _3031 = frontier_phi_79_pred_3;
                    _3029 = frontier_phi_79_pred_4;
                    _3027 = frontier_phi_79_pred_5;
                    uint _3193 = _3192 + 1u;
                    if (_3193 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3186 = _3027;
                        _3187 = _3029;
                        _3188 = _3031;
                        _3189 = _3033;
                        _3190 = _3035;
                        _3191 = _3037;
                        _3192 = _3193;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3033;
                frontier_phi_60_61_ladder_1 = _3037;
                frontier_phi_60_61_ladder_2 = _3035;
                frontier_phi_60_61_ladder_3 = _3031;
                frontier_phi_60_61_ladder_4 = _3029;
                frontier_phi_60_61_ladder_5 = _3027;
            }
            else
            {
                frontier_phi_60_61_ladder = _2912;
                frontier_phi_60_61_ladder_1 = _2916;
                frontier_phi_60_61_ladder_2 = _2914;
                frontier_phi_60_61_ladder_3 = _2910;
                frontier_phi_60_61_ladder_4 = _2908;
                frontier_phi_60_61_ladder_5 = _2906;
            }
            _3026 = frontier_phi_60_61_ladder_5;
            _3028 = frontier_phi_60_61_ladder_4;
            _3030 = frontier_phi_60_61_ladder_3;
            _3032 = frontier_phi_60_61_ladder;
            _3034 = frontier_phi_60_61_ladder_2;
            _3036 = frontier_phi_60_61_ladder_1;
        }
        float _3041 = isnan(1.0) ? _1036 : (isnan(_1036) ? 1.0 : min(_1036, 1.0));
        _2799 = (_3041 * _3032) + _2236;
        _2801 = (_3041 * _3034) + _2238;
        _2803 = (_3041 * _3036) + _2240;
        _2805 = ((_3026 * _1021) * _3041) + _2581;
        _2807 = ((_3028 * _1023) * _3041) + _2583;
        _2809 = ((_3030 * _1024) * _3041) + _2585;
    }
    else
    {
        _2799 = _2236;
        _2801 = _2238;
        _2803 = _2240;
        _2805 = _2581;
        _2807 = _2583;
        _2809 = _2585;
    }
    uint _2815 = _965 + uint(cbMatDynParam._m0[0u].w);
    float _4777 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _4788 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _4799 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _2840 = (((isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (_2799 + ((isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))) * _1036))) + ((_2805 + ((isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0))) * _1876)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2815].x * ((((_616 + (_486 * _438)) - (_616 * _486)) + cbMtdParam._m0[13u].x) + ((((((_753.x - _750) * _731) + _750) * cbMtdParam._m0[11u].x) + ((cbMtdParam._m0[22u].y * _684) * cbMtdParam._m0[12u].x)) * _693)));
    float _2842 = ((cbInstanceData._m0[_2815].y * ((((_617 + (_486 * _439)) - (_617 * _486)) + cbMtdParam._m0[13u].y) + ((((((_753.y - _751) * _731) + _751) * cbMtdParam._m0[11u].y) + ((cbMtdParam._m0[22u].y * (((_673.y - _668.y) * _652) + _668.y)) * cbMtdParam._m0[12u].y)) * _693))) + ((_2807 + ((isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0))) * _1876)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0))) * (_2801 + ((isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))) * _1036)));
    float _2844 = ((cbInstanceData._m0[_2815].z * ((((_618 + (_486 * _440)) - (_618 * _486)) + cbMtdParam._m0[13u].z) + ((((((_753.z - _752) * _731) + _752) * cbMtdParam._m0[11u].z) + ((cbMtdParam._m0[22u].y * (((_673.z - _668.z) * _652) + _668.z)) * cbMtdParam._m0[12u].z)) * _693))) + ((_2809 + ((isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0))) * _1876)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * (_2803 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1036)));
    float _2845 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
    float _2846 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
    float _2847 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
    uint _2848 = _964 + 6u;
    float _2856 = _908 / cbSceneParam._m0[86u].x;
    float _2857 = _909 / cbSceneParam._m0[86u].y;
    vec4 _2871 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2856, _2857, (log2((isnan(cbSceneParam._m0[77u].w) ? _830 : (isnan(_830) ? cbSceneParam._m0[77u].w : min(_830, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2873 = _2871.x;
    float _2874 = _2871.y;
    float _2875 = _2871.z;
    float _2876 = _2871.w;
    float _2968;
    float _2970;
    float _2972;
    float _2974;
    if (_830 > cbSceneParam._m0[78u].w)
    {
        float _2931 = isnan(_830) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _830 : min(cbSceneParam._m0[80u].w, _830));
        float _2932 = _2931 / _830;
        float _2943 = _2932 * _880;
        float _2944 = _881 * _2932;
        float _2945 = (-0.0) - _2944;
        float _2946 = _2932 * _882;
        float _2948 = (cbSceneParam._m0[77u].w * _2945) / _2931;
        float _2949 = _2948 + cbSceneParam._m0[79u].w;
        float _2950 = cbSceneParam._m0[79u].w - _2944;
        float _2956 = sqrt(((_2943 * _2943) + (_2944 * _2944)) + (_2946 * _2946));
        float _2959 = (1.0 - (cbSceneParam._m0[77u].w / _2931)) * _2956;
        float _2964 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2966 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3143;
        if (abs((_2945 - _2948) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3143 = ((((_2949 > 0.0) ? exp2(_2964 * _2949) : (2.0 - exp2(_2966 * _2949))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2959;
        }
        else
        {
            float _3087 = 1.0 / cbSceneParam._m0[80u].x;
            float _3088 = isnan(_2950) ? _2949 : (isnan(_2949) ? _2950 : max(_2949, _2950));
            float _3089 = isnan(_2950) ? _2949 : (isnan(_2949) ? _2950 : min(_2949, _2950));
            float _3098 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : min(_3088, 0.0));
            float _3099 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : min(_3089, 0.0));
            _3143 = ((abs(_2956 / _2945) * cbSceneParam._m0[80u].y) * ((((_3098 - _3099) * 2.0) - ((exp2(_2964 * (isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0)))) - exp2(_2964 * (isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0))))) * _3087)) - ((exp2(_2966 * _3098) - exp2(_2966 * _3099)) * _3087))) + (_2959 * cbSceneParam._m0[80u].z);
        }
        vec4 _3145 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2856, _2857, 1.0), 0.0);
        float _3154 = exp2((_3143 * (-1.44269502162933349609375)) * (1.0 - _3145.w));
        float _3155 = log2(_3154);
        float _3171 = log2(_2876);
        _2968 = (exp2(_3171 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3155 * cbSceneParam._m0[78u].x)) * _3145.x) / cbSceneParam._m0[78u].x)) + _2873;
        _2970 = (exp2(_3171 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3155 * cbSceneParam._m0[78u].y)) * _3145.y) / cbSceneParam._m0[78u].y)) + _2874;
        _2972 = (exp2(_3171 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3155 * cbSceneParam._m0[78u].z)) * _3145.z) / cbSceneParam._m0[78u].z)) + _2875;
        _2974 = _3154 * _2876;
    }
    else
    {
        _2968 = _2873;
        _2970 = _2874;
        _2972 = _2875;
        _2974 = _2876;
    }
    bool _3181;
    vec4 _2984;
    vec4 _3006;
    float _3008;
    float _3012;
    float _3013;
    float _3014;
    float _3015;
    bool _3025;
    for (;;)
    {
        _2984 = cbMatDynParam._m0[0u];
        float _2986 = roundEven(_2984.y);
        bool _2987 = _2986 == 3.0;
        float _2988 = log2(_2974);
        float _2995 = exp2(_2988 * cbSceneParam._m0[78u].x) * _2845;
        float _2996 = exp2(_2988 * cbSceneParam._m0[78u].y) * _2846;
        float _2997 = exp2(_2988 * cbSceneParam._m0[78u].z) * _2847;
        float _3004 = _896 + (-0.5);
        _3006 = cbMtdParam._m0[1u];
        _3008 = _3006.y * _3004;
        float _3011 = (_2986 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3012 = _3011 * (_2987 ? _2995 : (_2995 + (cbSceneParam._m0[72u].w * _2968)));
        _3013 = _3011 * (_2987 ? _2996 : (_2996 + (cbSceneParam._m0[72u].w * _2970)));
        _3014 = _3011 * (_2987 ? _2997 : (_2997 + (cbSceneParam._m0[72u].w * _2972)));
        _3015 = _3004 * 0.999000012874603271484375;
        _3025 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3025)
        {
            if ((cbInstanceData._m0[_964 + 7u].x + _3015) < 0.5)
            {
                _3181 = true;
                break;
            }
        }
        uint _3122 = _965 + uint(_2984.w);
        if ((cbInstanceData._m0[_3122].w < 1.0) && ((cbInstanceData._m0[_3122].w + _3015) < 0.5))
        {
            _3181 = true;
            break;
        }
        if ((_3008 + 1.0) < _3006.x)
        {
            _3181 = true;
            break;
        }
        _3181 = false;
        break;
    }
    float _3385;
    if (_3181)
    {
        discard_state = true;
        _3385 = 0.0;
    }
    else
    {
        _3385 = cbInstanceData._m0[_2848].w;
    }
    SV_Target.x = _3012;
    SV_Target.y = _3013;
    SV_Target.z = _3014;
    SV_Target.w = _3385;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2848].w;
    discard_exit();
}


