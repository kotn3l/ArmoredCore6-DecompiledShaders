#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[25];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_c4200_transition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_c4200_transition_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_c4200_transition_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D C_c4200_transition_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_c4200_transition_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D C_c4200_transition_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_c4200_transition_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_c4200_transition_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_c4200_transition_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_c4200_transition_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1397;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240;
    float _241;
    float _242;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _240 = (-0.0) - _226;
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
    }
    else
    {
        _240 = _226;
        _241 = _227;
        _242 = _228;
    }
    vec4 _256 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _259 = _256.x;
    float _268 = cbMtdParam._m0[18u].y * 0.3333333432674407958984375;
    float _273 = fract(abs(_268));
    float _285 = cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x;
    float _288 = (_285 * cbMtdParam._m0[24u].x) + TEXCOORD.x;
    float _289 = (_285 * cbMtdParam._m0[24u].y) + TEXCOORD.y;
    vec4 _312 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((_285 * cbMtdParam._m0[23u].x) + TEXCOORD.x)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[23u].y * _285) + TEXCOORD.y)) + cbTextureTilingScale._m0[10u].w));
    float _316 = cbPerFrame._m0[22u].x * 2.0;
    float _318 = _316 * cbMtdParam._m0[19u].w;
    float _321 = (_312.x * 0.5) + (-0.25);
    float _324 = (_312.y * 0.5) + (-0.25);
    float _325 = _324 * cbMtdParam._m0[18u].z;
    float _327 = (-0.0) - (cbMtdParam._m0[18u].z * _321);
    float _328 = fract(_318);
    float _330 = fract(_318 + 0.5);
    float _331 = _328 * _327;
    float _332 = _325 * _328;
    float _335 = _330 * _327;
    float _336 = _325 * _330;
    float _342 = abs((_328 * 2.0) + (-1.0));
    vec4 _359 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_9, SS_DiffuseMap), vec2(((_331 + _288) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, ((_332 + _289) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _361 = _359.x;
    float _372 = (0.25 - ((((_268 >= ((-0.0) - _268)) ? _273 : ((-0.0) - _273)) * 3.0) - _259)) + ((((texture(sampler2D(C_c4200_transition_snp_0_Texture2D_9, SS_DiffuseMap), vec2(((_335 + _288) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, ((_336 + _289) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w)).x - _361) * _342) + _361) * 1.35000002384185791015625);
    float _375 = abs(_372 * cbMtdParam._m0[19u].z);
    float _379 = (((_375 * cbMtdParam._m0[19u].y) - _259) * _375) + _259;
    float _4024 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _381 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _392 = (cbMtdParam._m0[23u].z * _285) + TEXCOORD.x;
    float _393 = (cbMtdParam._m0[23u].w * _285) + TEXCOORD.y;
    vec4 _413 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_331 + _392) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_332 + _393) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _415 = _413.x;
    float _416 = _413.y;
    float _417 = _413.z;
    vec4 _418 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_335 + _392) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_336 + _393) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _432 = (((_418.x - _415) * _342) + _415) * cbMtdParam._m0[14u].x;
    float _433 = (((_418.y - _416) * _342) + _416) * cbMtdParam._m0[14u].y;
    float _434 = (((_418.z - _417) * _342) + _417) * cbMtdParam._m0[14u].z;
    float _438 = _432 - (_432 * _381);
    float _439 = _433 - (_433 * _381);
    float _440 = _434 - (_434 * _381);
    vec4 _458 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _463 = ceil(_372);
    float _4035 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _464 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _478 = (((cbMtdParam._m0[9u].x - cbMtdParam._m0[15u].x) * _464) + cbMtdParam._m0[15u].x) * _458.x;
    float _480 = (((cbMtdParam._m0[9u].y - cbMtdParam._m0[15u].y) * _464) + cbMtdParam._m0[15u].y) * _458.y;
    float _482 = (((cbMtdParam._m0[9u].z - cbMtdParam._m0[15u].z) * _464) + cbMtdParam._m0[15u].z) * _458.z;
    float _486 = exp2(log2(_381) * cbMtdParam._m0[19u].x);
    float _493 = (_486 * (_438 - _478)) + _478;
    float _494 = (_486 * (_439 - _480)) + _480;
    float _495 = (_486 * (_440 - _482)) + _482;
    vec4 _508 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _514 = cbMtdParam._m0[17u].x + _508.x;
    vec4 _526 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _530 = _526.z;
    float _533 = (_526.x * 2.0) + (-1.0);
    float _534 = (_526.y * 2.0) + (-1.0);
    float _535 = dot(vec2(_533, _534), vec2(_533, _534));
    float _4046 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _540 = sqrt(1.0 - (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))));
    float _551 = (cbMtdParam._m0[24u].z * _285) + TEXCOORD.x;
    float _552 = (cbMtdParam._m0[24u].w * _285) + TEXCOORD.y;
    float _558 = _316 * cbMtdParam._m0[20u].z;
    float _559 = _324 * cbMtdParam._m0[20u].y;
    float _561 = (-0.0) - (cbMtdParam._m0[20u].y * _321);
    float _562 = fract(_558);
    float _564 = fract(_558 + 0.5);
    float _575 = abs((_562 * 2.0) + (-1.0));
    vec4 _591 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_11, SS_DiffuseMap), vec2((((_562 * _561) + _551) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_559 * _562) + _552) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _593 = _591.x;
    float _594 = _591.y;
    float _595 = _591.z;
    vec4 _596 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_11, SS_DiffuseMap), vec2((((_564 * _561) + _551) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_559 * _564) + _552) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _610 = (((_596.x - _593) * _575) + _593) * cbMtdParam._m0[16u].x;
    float _611 = (((_596.y - _594) * _575) + _594) * cbMtdParam._m0[16u].y;
    float _612 = (((_596.z - _595) * _575) + _595) * cbMtdParam._m0[16u].z;
    float _616 = _610 - (_610 * _464);
    float _617 = _611 - (_611 * _464);
    float _618 = _612 - (_612 * _464);
    float _635 = _316 * cbMtdParam._m0[21u].w;
    float _636 = _324 * cbMtdParam._m0[22u].x;
    float _638 = (-0.0) - (cbMtdParam._m0[22u].x * _321);
    float _639 = fract(_635);
    float _641 = fract(_635 + 0.5);
    float _652 = abs((_639 * 2.0) + (-1.0));
    vec4 _668 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_639 * _638) + TEXCOORD.x) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((_636 * _639) + TEXCOORD.y) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _673 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_641 * _638) + TEXCOORD.x) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((_636 * _641) + TEXCOORD.y) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _684 = ((_673.x - _668.x) * _652) + _668.x;
    float _691 = exp2(log2(_684 * cbMtdParam._m0[21u].z) * cbMtdParam._m0[21u].y);
    float _692 = isnan(cbMtdParam._m0[21u].x) ? _691 : (isnan(_691) ? cbMtdParam._m0[21u].x : max(_691, cbMtdParam._m0[21u].x));
    float _693 = isnan(cbMtdParam._m0[20u].x) ? _692 : (isnan(_692) ? cbMtdParam._m0[20u].x : min(_692, cbMtdParam._m0[20u].x));
    float _714 = _316 * cbMtdParam._m0[17u].z;
    float _715 = _324 * cbMtdParam._m0[17u].w;
    float _717 = (-0.0) - (cbMtdParam._m0[17u].w * _321);
    float _718 = fract(_714);
    float _720 = fract(_714 + 0.5);
    float _731 = abs((_718 * 2.0) + (-1.0));
    vec4 _748 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_718 * _717) + TEXCOORD.x) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_715 * _718) + TEXCOORD.y) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _750 = _748.x;
    float _751 = _748.y;
    float _752 = _748.z;
    vec4 _753 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_720 * _717) + TEXCOORD.x) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_715 * _720) + TEXCOORD.y) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _796 = fma(_540, _240, fma(_534, _232 * TANGENT.x, (_218 * _210) * _533));
    float _799 = fma(_540, _241, fma(_534, _232 * TANGENT.y, (_218 * _211) * _533));
    float _802 = fma(_540, _242, fma(_534, _232 * TANGENT.z, (_218 * _212) * _533));
    float _806 = inversesqrt(dot(vec3(_796, _799, _802), vec3(_796, _799, _802)));
    float _807 = _806 * _796;
    float _808 = _806 * _799;
    float _809 = _806 * _802;
    float _4067 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _810 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _4078 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _4089 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _4100 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _4111 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _814 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _830 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _870 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _880 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _870);
    float _881 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _870);
    float _882 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _870);
    float _886 = inversesqrt(dot(vec3(_880, _881, _882), vec3(_880, _881, _882)));
    float _887 = _880 * _886;
    float _888 = _881 * _886;
    float _889 = _882 * _886;
    float _895 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _896 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _898 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _900 = _898.w;
    float _920 = fma(_809, cbSceneParam._m0[5u].z, fma(_808, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _807));
    float _923 = fma(_809, cbSceneParam._m0[6u].z, fma(_808, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _807));
    float _926 = fma(_809, cbSceneParam._m0[7u].z, fma(_808, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _807));
    vec4 _928 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _939 = (((_928.y - _810) + (_928.w * _810)) * cbMtdParam._m0[3u].x) + _810;
    uint _952 = uint(roundEven(NORMAL.w)) * 13u;
    uint _953 = _952 + 9u;
    uint _954 = _953 + uint(cbMatDynParam._m0[0u].w);
    float _960 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) * cbInstanceData._m0[_954].x;
    float _961 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0)))) * cbInstanceData._m0[_954].y;
    float _962 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) * cbInstanceData._m0[_954].z;
    float _4122 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _963 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _4133 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _964 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _4144 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _965 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    vec4 _966 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _971 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _982 = (((_971.x - _814) + (_971.w * _814)) * cbMtdParam._m0[3u].x) + _814;
    float _995 = (cbMtdParam._m0[3u].x * (((_963 * _900) - _963) + _966.x)) + _963;
    float _996 = (cbMtdParam._m0[3u].x * (((_964 * _900) - _964) + _966.y)) + _964;
    float _997 = (cbMtdParam._m0[3u].x * (((_965 * _900) - _965) + _966.z)) + _965;
    float _998 = 1.0 - _982;
    float _999 = _998 * _995;
    float _1000 = _998 * _996;
    float _1001 = _998 * _997;
    float _1006 = (_995 + (-0.039999999105930328369140625)) * _982;
    float _1007 = (_996 + (-0.039999999105930328369140625)) * _982;
    float _1008 = (_997 + (-0.039999999105930328369140625)) * _982;
    float _1009 = _1006 + 0.039999999105930328369140625;
    float _1011 = _1007 + 0.039999999105930328369140625;
    float _1012 = _1008 + 0.039999999105930328369140625;
    vec4 _1021 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _895, cbSceneParam._m0[86u].y * _896));
    float _1024 = _1021.x * TEXCOORD_4;
    float _1025 = dot(vec3(_807, _808, _809), vec3(_887, _888, _889));
    float _1028 = _1025 * 2.0;
    float _1032 = (_1028 * _807) - _887;
    float _1033 = (_1028 * _808) - _888;
    float _1034 = (_1028 * _809) - _889;
    float _1038 = abs(dot(vec3(_887, _888, _889), vec3(_807, _808, _809)));
    float _4155 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _1040 = sqrt(_939);
    float _1052 = exp2((_1040 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1040 * 3.0));
    float _1058 = (1.0 - _1052) * ((_1040 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1059 = _1052 * _1040;
    float _1087 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1091 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1095 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1396;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1122 = fma(_1095, cbModelParam._m0[26u].z, fma(_1091, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1087));
        float _1126 = fma(_1095, cbModelParam._m0[27u].z, fma(_1091, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1087));
        float _1130 = fma(_1095, cbModelParam._m0[28u].z, fma(_1091, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1087));
        float _1154 = _1087 + _807;
        float _1155 = _1091 + _808;
        float _1156 = _1095 + _809;
        float _1166 = fma(_1156, cbModelParam._m0[26u].z, fma(_1155, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1154)) - _1122;
        float _1167 = fma(_1156, cbModelParam._m0[27u].z, fma(_1155, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1154)) - _1126;
        float _1168 = fma(_1156, cbModelParam._m0[28u].z, fma(_1155, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1154)) - _1130;
        float _1172 = inversesqrt(dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168)));
        float _1185 = ((_1172 * _1166) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1122 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1186 = ((_1172 * _1167) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1126 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1187 = ((_1172 * _1168) / cbModelParam._m0[34u].z) + ((((((_1130 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        float _1224 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1190.x + (-0.5));
        float _1226 = _1224 * (_1190.y + (-0.5));
        float _1227 = _1224 * (_1190.z + (-0.5));
        float _1234 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1197.x + (-0.5));
        float _1236 = _1234 * (_1197.y + (-0.5));
        float _1237 = _1234 * (_1197.z + (-0.5));
        float _1244 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1204.x + (-0.5));
        float _1246 = _1244 * (_1204.y + (-0.5));
        float _1247 = _1244 * (_1204.z + (-0.5));
        float _1254 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1211.x + (-0.5));
        float _1256 = _1254 * (_1211.y + (-0.5));
        float _1257 = _1254 * (_1211.z + (-0.5));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = _1225 * 0.5;
        float _1262 = _1235 * 0.5;
        float _1263 = _1245 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1278 = (dot(vec3(_807, _808, _809), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _4181 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1288 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _4192 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _4203 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_1290 + 1.0))) + _1295) * _1258;
        float _1305 = _1226 * 0.5;
        float _1306 = _1236 * 0.5;
        float _1307 = _1246 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_807, _808, _809), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _4214 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _4225 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _4236 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_1332 + 1.0))) + _1337) * _1259;
        float _1347 = _1227 * 0.5;
        float _1348 = _1237 * 0.5;
        float _1349 = _1247 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1363 = (dot(vec3(_807, _808, _809), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _4247 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1372 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _4258 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _4269 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_1374 + 1.0))) + _1379) * _1260;
        _1396 = _1227;
        _1398 = _1226;
        _1399 = _1225;
        _1400 = _1237;
        _1401 = _1236;
        _1402 = _1235;
        _1403 = _1247;
        _1404 = _1246;
        _1405 = _1245;
        _1406 = _1260;
        _1407 = _1259;
        _1408 = _1258;
        _1409 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1410 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
        _1411 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
    }
    else
    {
        _1396 = _1397;
        _1398 = _1397;
        _1399 = _1397;
        _1400 = _1397;
        _1401 = _1397;
        _1402 = _1397;
        _1403 = _1397;
        _1404 = _1397;
        _1405 = _1397;
        _1406 = _1397;
        _1407 = _1397;
        _1408 = _1397;
        _1409 = 0.0;
        _1410 = 0.0;
        _1411 = 0.0;
    }
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1437 = fma(_1095, cbModelParam._m0[30u].z, fma(_1091, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1087));
        float _1441 = fma(_1095, cbModelParam._m0[31u].z, fma(_1091, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1087));
        float _1445 = fma(_1095, cbModelParam._m0[32u].z, fma(_1091, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1087));
        float _1468 = _1087 + _807;
        float _1469 = _1091 + _808;
        float _1470 = _1095 + _809;
        float _1480 = fma(_1470, cbModelParam._m0[30u].z, fma(_1469, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1468)) - _1437;
        float _1481 = fma(_1470, cbModelParam._m0[31u].z, fma(_1469, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1468)) - _1441;
        float _1482 = fma(_1470, cbModelParam._m0[32u].z, fma(_1469, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1468)) - _1445;
        float _1486 = inversesqrt(dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482)));
        float _1499 = ((_1486 * _1480) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1437 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1500 = ((_1486 * _1481) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1441 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1501 = ((_1486 * _1482) / cbModelParam._m0[35u].z) + ((((((_1445 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1503 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1499, _1500, _1501), 0.0);
        vec4 _1510 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1499, _1500, _1501), 0.0);
        vec4 _1517 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1499, _1500, _1501), 0.0);
        vec4 _1524 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1499, _1500, _1501), 0.0);
        float _1536 = exp2((_1503.w + (-0.5)) * 20.0) * 2.0;
        float _1537 = _1536 * (_1503.x + (-0.5));
        float _1538 = _1536 * (_1503.y + (-0.5));
        float _1539 = _1536 * (_1503.z + (-0.5));
        float _1546 = exp2((_1510.w + (-0.5)) * 20.0) * 2.0;
        float _1547 = _1546 * (_1510.x + (-0.5));
        float _1548 = _1546 * (_1510.y + (-0.5));
        float _1549 = _1546 * (_1510.z + (-0.5));
        float _1556 = exp2((_1517.w + (-0.5)) * 20.0) * 2.0;
        float _1557 = _1556 * (_1517.x + (-0.5));
        float _1558 = _1556 * (_1517.y + (-0.5));
        float _1559 = _1556 * (_1517.z + (-0.5));
        float _1566 = exp2((_1524.w + (-0.5)) * 20.0) * 2.0;
        float _1567 = _1566 * (_1524.x + (-0.5));
        float _1568 = _1566 * (_1524.y + (-0.5));
        float _1569 = _1566 * (_1524.z + (-0.5));
        float _1570 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1571 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1572 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1573 = _1537 * 0.5;
        float _1574 = _1547 * 0.5;
        float _1575 = _1557 * 0.5;
        float _1576 = dot(vec3(_1573, _1574, _1575), vec3(_1573, _1574, _1575));
        float _1581 = (_1576 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1576);
        float _1589 = (dot(vec3(_807, _808, _809), vec3(_1581 * _1573, _1581 * _1574, _1581 * _1575)) + 1.0) * 0.5;
        float _4310 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1598 = sqrt(((_1574 * _1574) + (_1573 * _1573)) + (_1575 * _1575)) / (_1570 + 9.9999997473787516355514526367188e-06);
        float _4321 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1600 = _1599 * 2.0;
        float _1604 = (1.0 - _1599) / (_1599 + 1.0);
        float _4332 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1614 = ((((1.0 - _1605) * (_1600 + 2.0)) * exp2(log2(isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_1600 + 1.0))) + _1605) * _1570;
        float _1615 = _1538 * 0.5;
        float _1616 = _1548 * 0.5;
        float _1617 = _1558 * 0.5;
        float _1618 = dot(vec3(_1615, _1616, _1617), vec3(_1615, _1616, _1617));
        float _1623 = (_1618 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1618);
        float _1631 = (dot(vec3(_807, _808, _809), vec3(_1623 * _1615, _1623 * _1616, _1623 * _1617)) + 1.0) * 0.5;
        float _4343 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1640 = sqrt(((_1616 * _1616) + (_1615 * _1615)) + (_1617 * _1617)) / (_1571 + 9.9999997473787516355514526367188e-06);
        float _4354 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1642 = _1641 * 2.0;
        float _1646 = (1.0 - _1641) / (_1641 + 1.0);
        float _4365 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _1656 = ((((1.0 - _1647) * (_1642 + 2.0)) * exp2(log2(isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_1642 + 1.0))) + _1647) * _1571;
        float _1657 = _1539 * 0.5;
        float _1658 = _1549 * 0.5;
        float _1659 = _1559 * 0.5;
        float _1660 = dot(vec3(_1657, _1658, _1659), vec3(_1657, _1658, _1659));
        float _1665 = (_1660 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1660);
        float _1673 = (dot(vec3(_807, _808, _809), vec3(_1665 * _1657, _1665 * _1658, _1665 * _1659)) + 1.0) * 0.5;
        float _4376 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1682 = sqrt(((_1658 * _1658) + (_1657 * _1657)) + (_1659 * _1659)) / (_1572 + 9.9999997473787516355514526367188e-06);
        float _4387 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1684 = _1683 * 2.0;
        float _1688 = (1.0 - _1683) / (_1683 + 1.0);
        float _4398 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1689 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1698 = ((((1.0 - _1689) * (_1684 + 2.0)) * exp2(log2(isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_1684 + 1.0))) + _1689) * _1572;
        _1706 = _1539;
        _1707 = _1538;
        _1708 = _1537;
        _1709 = _1549;
        _1710 = _1548;
        _1711 = _1547;
        _1712 = _1559;
        _1713 = _1558;
        _1714 = _1557;
        _1715 = _1572;
        _1716 = _1571;
        _1717 = _1570;
        _1718 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)));
        _1719 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)));
        _1720 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)));
    }
    else
    {
        _1706 = _1397;
        _1707 = _1397;
        _1708 = _1397;
        _1709 = _1397;
        _1710 = _1397;
        _1711 = _1397;
        _1712 = _1397;
        _1713 = _1397;
        _1714 = _1397;
        _1715 = _1397;
        _1716 = _1397;
        _1717 = _1397;
        _1718 = 0.0;
        _1719 = 0.0;
        _1720 = 0.0;
    }
    float _1730 = (cbModelParam._m0[1u].x * (_1718 - _1409)) + _1409;
    float _1731 = (cbModelParam._m0[1u].x * (_1719 - _1410)) + _1410;
    float _1732 = (cbModelParam._m0[1u].x * (_1720 - _1411)) + _1411;
    float _1753 = fma(_1732, cbSceneParam._m0[89u].z, fma(_1731, cbSceneParam._m0[89u].y, _1730 * cbSceneParam._m0[89u].x));
    float _1756 = fma(_1732, cbSceneParam._m0[90u].z, fma(_1731, cbSceneParam._m0[90u].y, _1730 * cbSceneParam._m0[90u].x));
    float _1759 = fma(_1732, cbSceneParam._m0[91u].z, fma(_1731, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1730));
    float _1774 = _1032 * 0.5;
    float _1775 = _1033 * 0.5;
    float _1776 = _1034 * 0.5;
    float _1777 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1708, _1711, _1714, _1717));
    float _1780 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1707, _1710, _1713, _1716));
    float _1783 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1706, _1709, _1712, _1715));
    float _1817;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1790 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1396, _1400, _1403, _1406));
        float _1794 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1398, _1401, _1404, _1407));
        float _1798 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1399, _1402, _1405, _1408));
        float _1805 = dot(vec4(cbModelParam._m0[39u]), vec4(_1774, _1775, _1776, 1.0));
        _1817 = dot(vec3(isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0)), isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)), isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1805) ? 0.0 : (isnan(0.0) ? _1805 : max(0.0, _1805))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1817 = 1.0;
    }
    float _1828;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1819 = dot(vec4(cbModelParam._m0[40u]), vec4(_1774, _1775, _1776, 1.0));
        _1828 = dot(vec3(isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)), isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)), isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1819) ? 0.0 : (isnan(0.0) ? _1819 : max(0.0, _1819))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1828 = 1.0;
    }
    float _1832 = (_1828 * cbModelParam._m0[1u].x) + (_1817 * (1.0 - cbModelParam._m0[1u].x));
    float _1842 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _939);
    float _1843 = isnan(_1842) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1842 : min(cbModelParam._m0[25u].z, _1842));
    float _1923;
    float _1925;
    float _1927;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1890 = fma(_1095, cbModelParam._m0[13u].z, fma(_1091, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1087)) + cbModelParam._m0[13u].w;
        float _1894 = fma(_1095, cbModelParam._m0[14u].z, fma(_1091, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1087)) + cbModelParam._m0[14u].w;
        float _1898 = fma(_1095, cbModelParam._m0[15u].z, fma(_1091, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1087)) + cbModelParam._m0[15u].w;
        float _1901 = fma(_1034, cbModelParam._m0[13u].z, fma(_1033, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1032));
        float _1904 = fma(_1034, cbModelParam._m0[14u].z, fma(_1033, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1032));
        float _1907 = fma(_1034, cbModelParam._m0[15u].z, fma(_1033, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1032));
        float _1935;
        if (_1901 > 0.0)
        {
            _1935 = abs((1.0 - _1890) / _1901);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1890 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1935 = frontier_phi_16_14_ladder;
        }
        float _2106;
        if (_1904 > 0.0)
        {
            _2106 = abs((1.0 - _1894) / _1904);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1894 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2106 = frontier_phi_25_21_ladder;
        }
        float _2400;
        if (_1907 > 0.0)
        {
            _2400 = abs((1.0 - _1898) / _1907);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1898 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2400 = frontier_phi_37_32_ladder;
        }
        float _2402 = isnan(_2106) ? _1935 : (isnan(_1935) ? _2106 : min(_1935, _2106));
        float _2403 = isnan(_2400) ? _2402 : (isnan(_2402) ? _2400 : min(_2402, _2400));
        float _2407 = (_2403 * _1901) + _1890;
        float _2408 = (_2403 * _1904) + _1894;
        float _2409 = (_2403 * _1907) + _1898;
        float _2410 = _2403 * 9.9999997473787516355514526367188e-05;
        float _2412 = (-1.0) - _2410;
        float _2414 = _2410 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2409 > _2414) || ((_2409 < _2412) || ((_2408 > _2414) || ((_2408 < _2412) || ((_2407 < _2412) || (_2407 > _2414))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2554 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2409, cbModelParam._m0[9u].z, fma(_2408, cbModelParam._m0[9u].y, _2407 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2409, cbModelParam._m0[10u].z, fma(_2408, cbModelParam._m0[10u].y, _2407 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2409, cbModelParam._m0[11u].z, fma(_2408, cbModelParam._m0[11u].y, _2407 * cbModelParam._m0[11u].x))), _1843);
            frontier_phi_15_37_ladder = _2554.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2554.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2554.z * cbModelParam._m0[1u].y;
        }
        _1923 = frontier_phi_15_37_ladder_1;
        _1925 = frontier_phi_15_37_ladder;
        _1927 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1911 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1032, _1033, _1034), _1843);
        _1923 = _1911.x * cbModelParam._m0[1u].y;
        _1925 = _1911.y * cbModelParam._m0[1u].y;
        _1927 = _1911.z * cbModelParam._m0[1u].y;
    }
    float _1931 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _939);
    float _1932 = isnan(_1931) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1931 : min(cbModelParam._m0[25u].w, _1931));
    float _2021;
    float _2023;
    float _2025;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1985 = fma(_1095, cbModelParam._m0[21u].z, fma(_1091, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1087)) + cbModelParam._m0[21u].w;
        float _1989 = fma(_1095, cbModelParam._m0[22u].z, fma(_1091, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1087)) + cbModelParam._m0[22u].w;
        float _1993 = fma(_1095, cbModelParam._m0[23u].z, fma(_1091, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1087)) + cbModelParam._m0[23u].w;
        float _1996 = fma(_1034, cbModelParam._m0[21u].z, fma(_1033, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1032));
        float _1999 = fma(_1034, cbModelParam._m0[22u].z, fma(_1033, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1032));
        float _2002 = fma(_1034, cbModelParam._m0[23u].z, fma(_1033, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1032));
        float _2111;
        if (_1996 > 0.0)
        {
            _2111 = abs((1.0 - _1985) / _1996);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1996 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1985 + 1.0) / _1996);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2111 = frontier_phi_27_23_ladder;
        }
        float _2427;
        if (_1999 > 0.0)
        {
            _2427 = abs((1.0 - _1989) / _1999);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1999 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1989 + 1.0) / _1999);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2427 = frontier_phi_39_34_ladder;
        }
        float _2765;
        if (_2002 > 0.0)
        {
            _2765 = abs((1.0 - _1993) / _2002);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2002 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1993 + 1.0) / _2002);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2765 = frontier_phi_49_46_ladder;
        }
        float _2767 = isnan(_2427) ? _2111 : (isnan(_2111) ? _2427 : min(_2111, _2427));
        float _2768 = isnan(_2765) ? _2767 : (isnan(_2767) ? _2765 : min(_2767, _2765));
        float _2772 = (_2768 * _1996) + _1985;
        float _2773 = (_2768 * _1999) + _1989;
        float _2774 = (_2768 * _2002) + _1993;
        float _2775 = _2768 * 9.9999997473787516355514526367188e-05;
        float _2776 = (-1.0) - _2775;
        float _2778 = _2775 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2774 > _2778) || ((_2774 < _2776) || ((_2773 > _2778) || ((_2773 < _2776) || ((_2772 < _2776) || (_2772 > _2778))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2896 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2774, cbModelParam._m0[17u].z, fma(_2773, cbModelParam._m0[17u].y, _2772 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2774, cbModelParam._m0[18u].z, fma(_2773, cbModelParam._m0[18u].y, _2772 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2774, cbModelParam._m0[19u].z, fma(_2773, cbModelParam._m0[19u].y, _2772 * cbModelParam._m0[19u].x))), _1932);
            frontier_phi_24_49_ladder = _2896.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2896.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2896.x * cbModelParam._m0[1u].z;
        }
        _2021 = frontier_phi_24_49_ladder_2;
        _2023 = frontier_phi_24_49_ladder_1;
        _2025 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _2005 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1032, _1033, _1034), _1932);
        _2021 = _2005.x * cbModelParam._m0[1u].z;
        _2023 = _2005.y * cbModelParam._m0[1u].z;
        _2025 = _2005.z * cbModelParam._m0[1u].z;
    }
    float _2038 = (((_1058 * _1009) + _1059) * _1024) * ((cbModelParam._m0[1u].w * (_2021 - _1923)) + _1923);
    float _2040 = (((_1058 * _1011) + _1059) * _1024) * ((cbModelParam._m0[1u].w * (_2023 - _1925)) + _1925);
    float _2042 = (((_1058 * _1012) + _1059) * _1024) * ((cbModelParam._m0[1u].w * (_2025 - _1927)) + _1927);
    float _2045 = fma(_2042, cbSceneParam._m0[89u].z, fma(_2040, cbSceneParam._m0[89u].y, _2038 * cbSceneParam._m0[89u].x));
    float _2048 = fma(_2042, cbSceneParam._m0[90u].z, fma(_2040, cbSceneParam._m0[90u].y, _2038 * cbSceneParam._m0[90u].x));
    float _2051 = fma(_2042, cbSceneParam._m0[91u].z, fma(_2040, cbSceneParam._m0[91u].y, _2038 * cbSceneParam._m0[91u].x));
    float _2085 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2089 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2093 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2097 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2098 = _2085 / _2097;
    float _2099 = _2089 / _2097;
    float _2100 = _2093 / _2097;
    float _2246;
    float _2247;
    float _2248;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2127 = ((uint(_2100 > cbSceneParam._m0[59u].y) + uint(_2100 > cbSceneParam._m0[59u].x)) + uint(_2100 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2128 = _2127 + 43u;
        uint _2136 = _2127 + 44u;
        uint _2144 = _2127 + 45u;
        uint _2152 = _2127 + 46u;
        float _2163 = fma(_2097, cbSceneParam._m0[_2128].w, fma(_2093, cbSceneParam._m0[_2128].z, fma(_2089, cbSceneParam._m0[_2128].y, _2085 * cbSceneParam._m0[_2128].x)));
        float _2167 = fma(_2097, cbSceneParam._m0[_2136].w, fma(_2093, cbSceneParam._m0[_2136].z, fma(_2089, cbSceneParam._m0[_2136].y, _2085 * cbSceneParam._m0[_2136].x)));
        float _2175 = fma(_2097, cbSceneParam._m0[_2152].w, fma(_2093, cbSceneParam._m0[_2152].z, fma(_2089, cbSceneParam._m0[_2152].y, _2085 * cbSceneParam._m0[_2152].x)));
        float _2180 = cbSceneParam._m0[33u].z * _2175;
        float _2182 = cbSceneParam._m0[33u].w * _2175;
        float _2185 = fma(_2097, cbSceneParam._m0[_2144].w, fma(_2093, cbSceneParam._m0[_2144].z, fma(_2089, cbSceneParam._m0[_2144].y, _2085 * cbSceneParam._m0[_2144].x))) / _2175;
        float _2232 = (cbSceneParam._m0[33u].x - sqrt(((_2099 * _2099) + (_2098 * _2098)) + (_2100 * _2100))) * cbSceneParam._m0[33u].y;
        float _4524 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2239 = (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2180 + _2163) / _2175, (_2182 + _2167) / _2175), _2185), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2182 + _2163) / _2175, (_2167 - _2180) / _2175), _2185), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2163 - _2180) / _2175, (_2167 - _2182) / _2175), _2185), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2163 - _2182) / _2175, (_2180 + _2167) / _2175), _2185), 0.0)).x), vec4(0.25)));
        _2246 = 1.0 - (_2239 * cbSceneParam._m0[34u].x);
        _2247 = 1.0 - (_2239 * cbSceneParam._m0[34u].y);
        _2248 = 1.0 - (_2239 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2246 = 1.0;
        _2247 = 1.0;
        _2248 = 1.0;
    }
    float _2312;
    float _2314;
    float _2316;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2300 = fma(_2097, cbSceneParam._m0[63u].w, fma(_2093, cbSceneParam._m0[63u].z, fma(_2089, cbSceneParam._m0[63u].y, _2085 * cbSceneParam._m0[63u].x)));
        float _2301 = fma(_2097, cbSceneParam._m0[60u].w, fma(_2093, cbSceneParam._m0[60u].z, fma(_2089, cbSceneParam._m0[60u].y, _2085 * cbSceneParam._m0[60u].x))) / _2300;
        float _2302 = fma(_2097, cbSceneParam._m0[61u].w, fma(_2093, cbSceneParam._m0[61u].z, fma(_2089, cbSceneParam._m0[61u].y, _2085 * cbSceneParam._m0[61u].x))) / _2300;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2301 >= cbSceneParam._m0[64u].x) && (_2302 >= cbSceneParam._m0[64u].y)) && (_2301 <= cbSceneParam._m0[64u].z)) && (_2302 <= cbSceneParam._m0[64u].w))
        {
            float _2440 = fma(_2097, cbSceneParam._m0[62u].w, fma(_2093, cbSceneParam._m0[62u].z, fma(_2089, cbSceneParam._m0[62u].y, _2085 * cbSceneParam._m0[62u].x))) / _2300;
            float _2444 = isnan(cbSceneParam._m0[41u].w) ? _2440 : (isnan(_2440) ? cbSceneParam._m0[41u].w : max(_2440, cbSceneParam._m0[41u].w));
            float _2487 = (cbSceneParam._m0[33u].x - sqrt(((_2099 * _2099) + (_2098 * _2098)) + (_2100 * _2100))) * cbSceneParam._m0[33u].y;
            float _4540 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
            float _2494 = (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2301, cbSceneParam._m0[33u].w + _2302), _2444), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2301, _2302 - cbSceneParam._m0[33u].z), _2444), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2301 - cbSceneParam._m0[33u].z, _2302 - cbSceneParam._m0[33u].w), _2444), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2301 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2302), _2444), 0.0)).x), vec4(0.25)));
            float _2498 = 1.0 - (_2494 * cbSceneParam._m0[34u].x);
            float _2499 = 1.0 - (_2494 * cbSceneParam._m0[34u].y);
            float _2500 = 1.0 - (_2494 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2499) ? _2247 : (isnan(_2247) ? _2499 : min(_2247, _2499));
            frontier_phi_36_35_ladder_1 = isnan(_2500) ? _2248 : (isnan(_2248) ? _2500 : min(_2248, _2500));
            frontier_phi_36_35_ladder_2 = isnan(_2498) ? _2246 : (isnan(_2246) ? _2498 : min(_2246, _2498));
        }
        else
        {
            frontier_phi_36_35_ladder = _2247;
            frontier_phi_36_35_ladder_1 = _2248;
            frontier_phi_36_35_ladder_2 = _2246;
        }
        _2312 = frontier_phi_36_35_ladder_2;
        _2314 = frontier_phi_36_35_ladder;
        _2316 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2312 = _2246;
        _2314 = _2247;
        _2316 = _2248;
    }
    uvec4 _2321 = floatBitsToUint(cbInstanceData._m0[_952 + 5u]);
    uint _2323 = _2321.x * 14u;
    uint _2324 = _2323 + 13u;
    float _2331 = _1024 + (-1.0);
    float _2336 = (cbLight._m0[_2324].x * _2331) + 1.0;
    float _2337 = (cbLight._m0[_2324].y * _2331) + 1.0;
    float _2338 = (cbLight._m0[_2324].z * _2331) + 1.0;
    float _2339 = (cbLight._m0[_2324].w * _2331) + 1.0;
    uint _2340 = _2323 + 5u;
    float _2346 = isnan(1.0) ? _2337 : (isnan(_2337) ? 1.0 : min(_2337, 1.0));
    uint _2350 = _2323 + 4u;
    float _2359 = isnan(1.0) ? _2336 : (isnan(_2336) ? 1.0 : min(_2336, 1.0));
    uint _2363 = _2323 | 1u;
    float _2374 = dot(vec3(cbLight._m0[_2323].xyz), vec3(_807, _808, _809));
    float _2377 = dot(vec3(cbLight._m0[_2363].xyz), vec3(_807, _808, _809));
    float _4576 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _4587 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2382 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * 0.3183098733425140380859375;
    float _2384 = (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * 0.3183098733425140380859375;
    float _2391 = ((cbLight._m0[_2340].x * _2346) * _2384) + (((cbLight._m0[_2350].x * _2312) * _2359) * _2382);
    float _2392 = ((_2346 * cbLight._m0[_2340].y) * _2384) + (((cbLight._m0[_2350].y * _2314) * _2359) * _2382);
    float _2393 = ((_2346 * cbLight._m0[_2340].z) * _2384) + (((cbLight._m0[_2350].z * _2316) * _2359) * _2382);
    uvec4 _2397 = floatBitsToUint(cbLight._m0[_2323 + 12u]);
    bool _2399 = _2397.x == 0u;
    float _2501;
    float _2503;
    float _2505;
    if (_2399)
    {
        _2501 = _2391;
        _2503 = _2392;
        _2505 = _2393;
    }
    else
    {
        uint _2509 = _2323 + 6u;
        float _2525 = (dot(vec3(cbLight._m0[_2323 + 2u].xyz), vec3(_807, _808, _809)) * 0.5) + 0.5;
        float _2526 = _2525 * _2525;
        float _4598 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2527 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
        float _2528 = isnan(1.0) ? _2338 : (isnan(_2338) ? 1.0 : min(_2338, 1.0));
        _2501 = (((cbLight._m0[_2509].x * 0.3183098733425140380859375) * _2527) * _2528) + _2391;
        _2503 = (((cbLight._m0[_2509].y * 0.3183098733425140380859375) * _2527) * _2528) + _2392;
        _2505 = (((cbLight._m0[_2509].z * 0.3183098733425140380859375) * _2527) * _2528) + _2393;
    }
    bool _2508 = _2397.y == 0u;
    float _2563;
    float _2565;
    float _2567;
    if (_2508)
    {
        _2563 = _2501;
        _2565 = _2503;
        _2567 = _2505;
    }
    else
    {
        uint _2736 = _2323 + 7u;
        float _2752 = (dot(vec3(cbLight._m0[_2323 + 3u].xyz), vec3(_807, _808, _809)) * 0.5) + 0.5;
        float _2753 = _2752 * _2752;
        float _4614 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2754 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
        float _2755 = isnan(1.0) ? _2339 : (isnan(_2339) ? 1.0 : min(_2339, 1.0));
        _2563 = (((cbLight._m0[_2736].x * 0.3183098733425140380859375) * _2754) * _2755) + _2501;
        _2565 = (((cbLight._m0[_2736].y * 0.3183098733425140380859375) * _2754) * _2755) + _2503;
        _2567 = (((cbLight._m0[_2736].z * 0.3183098733425140380859375) * _2754) * _2755) + _2505;
    }
    uint _2570 = _2323 + 8u;
    float _2583 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2323].w)) * _939) * 0.949999988079071044921875);
    float _2584 = _2583 * _2583;
    float _2585 = cbLight._m0[_2323].x + _887;
    float _2586 = cbLight._m0[_2323].y + _888;
    float _2587 = cbLight._m0[_2323].z + _889;
    float _2591 = inversesqrt(dot(vec3(_2585, _2586, _2587), vec3(_2585, _2586, _2587)));
    float _2592 = _2591 * _2585;
    float _2593 = _2591 * _2586;
    float _2594 = _2591 * _2587;
    float _2595 = dot(vec3(_807, _808, _809), vec3(cbLight._m0[_2323].xyz));
    float _4630 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
    float _2598 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
    float _4641 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _2599 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
    float _2600 = dot(vec3(_807, _808, _809), vec3(_2592, _2593, _2594));
    float _4652 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
    float _2603 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
    float _2604 = dot(vec3(cbLight._m0[_2323].xyz), vec3(_2592, _2593, _2594));
    float _4663 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
    float _2608 = _2584 * _2584;
    float _2612 = ((_2603 * _2603) * (_2608 + (-1.0))) + 1.0;
    float _2620 = exp2(log2(1.0 - (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0)))) * 5.0);
    float _2621 = 0.959999978542327880859375 - _1006;
    float _2623 = 0.959999978542327880859375 - _1007;
    float _2624 = 0.959999978542327880859375 - _1008;
    float _2631 = 1.0 - _2584;
    float _2642 = (0.5 / (((_2599 * ((_2598 * _2631) + _2584)) + 9.9999999392252902907785028219223e-09) + (((_2599 * _2631) + _2584) * _2598))) * _2598;
    float _4674 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
    float _2644 = (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (_2608 / ((_2612 * _2612) * 3.141590118408203125));
    uint _2658 = _2323 + 9u;
    float _2669 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2363].w)) * _939) * 0.949999988079071044921875);
    float _2670 = _2669 * _2669;
    float _2671 = cbLight._m0[_2363].x + _887;
    float _2672 = cbLight._m0[_2363].y + _888;
    float _2673 = cbLight._m0[_2363].z + _889;
    float _2677 = inversesqrt(dot(vec3(_2671, _2672, _2673), vec3(_2671, _2672, _2673)));
    float _2678 = _2677 * _2671;
    float _2679 = _2677 * _2672;
    float _2680 = _2677 * _2673;
    float _2681 = dot(vec3(_807, _808, _809), vec3(cbLight._m0[_2363].xyz));
    float _4685 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
    float _2684 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
    float _2685 = dot(vec3(_807, _808, _809), vec3(_2678, _2679, _2680));
    float _4696 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
    float _2688 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
    float _2689 = dot(vec3(cbLight._m0[_2363].xyz), vec3(_2678, _2679, _2680));
    float _4707 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
    float _2693 = _2670 * _2670;
    float _2697 = ((_2688 * _2688) * (_2693 + (-1.0))) + 1.0;
    float _2704 = exp2(log2(1.0 - (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0)))) * 5.0);
    float _2711 = 1.0 - _2670;
    float _2721 = (0.5 / (((_2599 * ((_2684 * _2711) + _2670)) + 9.9999999392252902907785028219223e-09) + (((_2599 * _2711) + _2670) * _2684))) * _2684;
    float _4718 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
    float _2723 = (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0))) * (_2693 / ((_2697 * _2697) * 3.141590118408203125));
    float _2733 = (((((_2704 * _2621) + _1009) * cbLight._m0[_2658].x) * _2723) * _2346) + ((((cbLight._m0[_2570].x * _2312) * ((_2620 * _2621) + _1009)) * _2644) * _2359);
    float _2734 = (((((_2704 * _2623) + _1011) * cbLight._m0[_2658].y) * _2723) * _2346) + ((((cbLight._m0[_2570].y * _2314) * ((_2620 * _2623) + _1011)) * _2644) * _2359);
    float _2735 = (((((_2704 * _2624) + _1012) * cbLight._m0[_2658].z) * _2723) * _2346) + ((((cbLight._m0[_2570].z * _2316) * ((_2620 * _2624) + _1012)) * _2644) * _2359);
    float _2791;
    float _2793;
    float _2795;
    if (_2399)
    {
        _2791 = _2733;
        _2793 = _2734;
        _2795 = _2735;
    }
    else
    {
        uint _2797 = _2323 + 2u;
        uint _2801 = _2323 + 10u;
        float _2815 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2797].w)) * _939) * 0.949999988079071044921875);
        float _2816 = _2815 * _2815;
        float _2817 = cbLight._m0[_2797].x + _887;
        float _2818 = cbLight._m0[_2797].y + _888;
        float _2819 = cbLight._m0[_2797].z + _889;
        float _2823 = inversesqrt(dot(vec3(_2817, _2818, _2819), vec3(_2817, _2818, _2819)));
        float _2824 = _2823 * _2817;
        float _2825 = _2823 * _2818;
        float _2826 = _2823 * _2819;
        float _2827 = dot(vec3(_807, _808, _809), vec3(cbLight._m0[_2797].xyz));
        float _4729 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
        float _2830 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
        float _2831 = dot(vec3(_807, _808, _809), vec3(_2824, _2825, _2826));
        float _4740 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
        float _2834 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
        float _2835 = dot(vec3(cbLight._m0[_2797].xyz), vec3(_2824, _2825, _2826));
        float _4751 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
        float _2839 = _2816 * _2816;
        float _2843 = ((_2834 * _2834) * (_2839 + (-1.0))) + 1.0;
        float _2850 = exp2(log2(1.0 - (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0)))) * 5.0);
        float _2857 = 1.0 - _2816;
        float _2867 = (0.5 / (((_2599 * ((_2830 * _2857) + _2816)) + 9.9999999392252902907785028219223e-09) + (((_2599 * _2857) + _2816) * _2830))) * _2830;
        float _4762 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
        float _2869 = (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0))) * (_2839 / ((_2843 * _2843) * 3.141590118408203125));
        float _2870 = isnan(1.0) ? _2338 : (isnan(_2338) ? 1.0 : min(_2338, 1.0));
        _2791 = (((((_2850 * _2621) + _1009) * cbLight._m0[_2801].x) * _2869) * _2870) + _2733;
        _2793 = (((((_2850 * _2623) + _1011) * cbLight._m0[_2801].y) * _2869) * _2870) + _2734;
        _2795 = (((((_2850 * _2624) + _1012) * cbLight._m0[_2801].z) * _2869) * _2870) + _2735;
    }
    float _2901;
    float _2903;
    float _2905;
    if (_2508)
    {
        _2901 = _2791;
        _2903 = _2793;
        _2905 = _2795;
    }
    else
    {
        uint _2912 = _2323 + 3u;
        uint _2916 = _2323 + 11u;
        float _2930 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2912].w)) * _939) * 0.949999988079071044921875);
        float _2931 = _2930 * _2930;
        float _2932 = cbLight._m0[_2912].x + _887;
        float _2933 = cbLight._m0[_2912].y + _888;
        float _2934 = cbLight._m0[_2912].z + _889;
        float _2938 = inversesqrt(dot(vec3(_2932, _2933, _2934), vec3(_2932, _2933, _2934)));
        float _2939 = _2938 * _2932;
        float _2940 = _2938 * _2933;
        float _2941 = _2938 * _2934;
        float _2942 = dot(vec3(_807, _808, _809), vec3(cbLight._m0[_2912].xyz));
        float _4778 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
        float _2945 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
        float _2946 = dot(vec3(_807, _808, _809), vec3(_2939, _2940, _2941));
        float _4789 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
        float _2949 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
        float _2950 = dot(vec3(cbLight._m0[_2912].xyz), vec3(_2939, _2940, _2941));
        float _4800 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
        float _2954 = _2931 * _2931;
        float _2958 = ((_2949 * _2949) * (_2954 + (-1.0))) + 1.0;
        float _2965 = exp2(log2(1.0 - (isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0)))) * 5.0);
        float _2972 = 1.0 - _2931;
        float _2982 = (0.5 / (((_2599 * ((_2945 * _2972) + _2931)) + 9.9999999392252902907785028219223e-09) + (((_2599 * _2972) + _2931) * _2945))) * _2945;
        float _4811 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
        float _2984 = (isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0))) * (_2954 / ((_2958 * _2958) * 3.141590118408203125));
        float _2985 = isnan(1.0) ? _2339 : (isnan(_2339) ? 1.0 : min(_2339, 1.0));
        _2901 = (((((_2965 * _2621) + _1009) * cbLight._m0[_2916].x) * _2984) * _2985) + _2791;
        _2903 = (((((_2965 * _2623) + _1011) * cbLight._m0[_2916].y) * _2984) * _2985) + _2793;
        _2905 = (((((_2965 * _2624) + _1012) * cbLight._m0[_2916].z) * _2984) * _2985) + _2795;
    }
    float _3050;
    float _3052;
    float _3054;
    float _3056;
    float _3058;
    float _3060;
    if (_2321.y == 0u)
    {
        uvec4 _3006 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3007 = _3006.x;
        uint _3018 = uint((float(_3006.y) * floor(float(uint(cbSceneParam._m0[85u].y * _896) / _3007))) + floor(float(uint(cbSceneParam._m0[85u].x * _895) / _3007)));
        float _3028 = (log2(_2100 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3029 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
        uint _3032 = uint(isnan(14.0) ? _3029 : (isnan(_3029) ? 14.0 : min(_3029, 14.0)));
        uvec4 _3037 = texelFetch(g_lightClusterGridBuffer, int(((_3032 << 2u) + (_3018 << 6u)) >> 2u));
        uint _3038 = _3037.x;
        uint _3039 = _3006.z;
        float _3136;
        float _3138;
        float _3140;
        float _3142;
        float _3144;
        float _3146;
        if (((((1u << ((_3039 >> 4u) & 15u)) + 4294967295u) & _3038) == 0u) || ((_3039 & 240u) == 0u))
        {
            _3136 = 0.0;
            _3138 = 0.0;
            _3140 = 0.0;
            _3142 = 0.0;
            _3144 = 0.0;
            _3146 = 0.0;
        }
        else
        {
            float _3137;
            float _3139;
            float _3141;
            float _3143;
            float _3145;
            float _3147;
            float _3280 = 0.0;
            float _3281 = 0.0;
            float _3282 = 0.0;
            float _3283 = 0.0;
            float _3284 = 0.0;
            float _3285 = 0.0;
            uint _3286 = 0u;
            uint _3295;
            bool _3296;
            for (;;)
            {
                _3295 = texelFetch(g_lightClassification, int((((_3032 << 5u) + (_3018 << 9u)) + (_3286 << 2u)) >> 2u)).x;
                _3296 = _3295 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3296)
                {
                    frontier_phi_68_pred = _3285;
                    frontier_phi_68_pred_1 = _3284;
                    frontier_phi_68_pred_2 = _3283;
                    frontier_phi_68_pred_3 = _3281;
                    frontier_phi_68_pred_4 = _3280;
                    frontier_phi_68_pred_5 = _3282;
                }
                else
                {
                    float _3404;
                    float _3405;
                    float _3406;
                    float _3407;
                    float _3408;
                    float _3409;
                    uint _3410;
                    _3404 = _3280;
                    _3405 = _3281;
                    _3406 = _3282;
                    _3407 = _3283;
                    _3408 = _3284;
                    _3409 = _3285;
                    _3410 = _3295;
                    float _3336;
                    float _3337;
                    float _3338;
                    float _3339;
                    float _3340;
                    float _3341;
                    for (;;)
                    {
                        uint _3414 = uint(findLSB(_3410)) + (_3286 << 5u);
                        uint _3411 = (_3410 + 4294967295u) & _3410;
                        uint _3416 = _3414 * 48u;
                        vec4 _3430 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3416)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 3u)).x));
                        uint _3436 = (_3414 * 48u) + 4u;
                        vec4 _3449 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3436)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 3u)).x));
                        uint _3455 = (_3414 * 48u) + 8u;
                        vec3 _3466 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3455)).x, texelFetch(g_PointLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3455 + 2u)).x));
                        float _3470 = _3430.x - _2098;
                        float _3471 = _3430.y - _2099;
                        float _3472 = _3430.z - _2100;
                        float _3473 = dot(vec3(_3470, _3471, _3472), vec3(_3470, _3471, _3472));
                        float _3476 = inversesqrt(_3473);
                        float _3477 = _3476 * _3470;
                        float _3478 = _3476 * _3471;
                        float _3479 = _3476 * _3472;
                        float _3480 = dot(vec3(_920, _923, _926), vec3(_3477, _3478, _3479));
                        float _3485 = 1.0 - (_3473 * _3430.w);
                        float _4837 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                        float _3486 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                        float _3487 = sqrt(_3473) * _3449.w;
                        float _3490 = 1.39999997615814208984375 / (_3487 + 1.39999997615814208984375);
                        float _3491 = _3490 * _3490;
                        float _3494 = ((1.0 - _3491) * _3480) + _3491;
                        float _3497 = _3487 * _3487;
                        float _3501 = ((isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0))) * _3486) / ((_3497 * 0.699999988079071044921875) + 1.0);
                        float _3505 = (-0.0) - _2098;
                        float _3506 = (-0.0) - _2099;
                        float _3507 = (-0.0) - _2100;
                        float _3511 = inversesqrt(dot(vec3(_3505, _3506, _3507), vec3(_3505, _3506, _3507)));
                        float _3512 = _3511 * _3505;
                        float _3513 = _3511 * _3506;
                        float _3514 = _3511 * _3507;
                        float _3521 = exp2(log2(1.0 / ((_3497 * 3.5) + 5.0)) * 0.25);
                        float _3522 = 1.0 - _1040;
                        float _3529 = sqrt(1.0 - ((1.0 - (_3522 * _3522)) * (1.0 - (_3521 * _3521))));
                        float _3530 = _3529 * _3529;
                        float _3531 = _3530 * _3530;
                        float _3532 = _3512 + _3477;
                        float _3533 = _3513 + _3478;
                        float _3534 = _3514 + _3479;
                        float _3538 = inversesqrt(dot(vec3(_3532, _3533, _3534), vec3(_3532, _3533, _3534)));
                        float _3542 = dot(vec3(_920, _923, _926), vec3(_3512, _3513, _3514));
                        float _4853 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                        float _3545 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
                        float _3546 = dot(vec3(_920, _923, _926), vec3(_3538 * _3532, _3538 * _3533, _3538 * _3534));
                        float _4864 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                        float _3549 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
                        float _3553 = ((_3549 * _3549) * (_3531 + (-1.0))) + 1.0;
                        float _3554 = _3490 * _3530;
                        float _3555 = _3554 * _3554;
                        float _3558 = ((1.0 - _3555) * _3480) + _3555;
                        float _4875 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                        float _3559 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                        float _3560 = 1.0 - _3530;
                        float _3570 = (0.5 / (((_3559 * ((_3545 * _3560) + _3530)) + 9.9999999392252902907785028219223e-09) + (((_3559 * _3560) + _3530) * _3545))) * _3559;
                        float _4886 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                        float _3581 = (((_3531 * 3.1415927410125732421875) * (isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0)))) / ((_3553 * _3553) * ((_3497 * 2.1991131305694580078125) + 3.141590118408203125))) * _3486;
                        _3339 = (_3501 * _3449.x) + _3407;
                        _3340 = (_3501 * _3449.y) + _3408;
                        _3341 = (_3501 * _3449.z) + _3409;
                        _3336 = (_3581 * _3466.x) + _3404;
                        _3337 = (_3581 * _3466.y) + _3405;
                        _3338 = (_3581 * _3466.z) + _3406;
                        if (_3411 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3404 = _3336;
                            _3405 = _3337;
                            _3406 = _3338;
                            _3407 = _3339;
                            _3408 = _3340;
                            _3409 = _3341;
                            _3410 = _3411;
                        }
                    }
                    frontier_phi_68_pred = _3341;
                    frontier_phi_68_pred_1 = _3340;
                    frontier_phi_68_pred_2 = _3339;
                    frontier_phi_68_pred_3 = _3337;
                    frontier_phi_68_pred_4 = _3336;
                    frontier_phi_68_pred_5 = _3338;
                }
                _3147 = frontier_phi_68_pred;
                _3145 = frontier_phi_68_pred_1;
                _3143 = frontier_phi_68_pred_2;
                _3139 = frontier_phi_68_pred_3;
                _3137 = frontier_phi_68_pred_4;
                _3141 = frontier_phi_68_pred_5;
                uint _3287 = _3286 + 1u;
                if (_3287 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3280 = _3137;
                    _3281 = _3139;
                    _3282 = _3141;
                    _3283 = _3143;
                    _3284 = _3145;
                    _3285 = _3147;
                    _3286 = _3287;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3136 = _3137;
            _3138 = _3139;
            _3140 = _3141;
            _3142 = _3143;
            _3144 = _3145;
            _3146 = _3147;
        }
        uvec4 _3150 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3151 = _3150.z;
        uint _3153 = (_3151 >> 8u) & 15u;
        float _3248;
        float _3250;
        float _3252;
        float _3254;
        float _3256;
        float _3258;
        if (((4294967295u << _3153) & _3038) == 0u)
        {
            _3248 = _3136;
            _3250 = _3138;
            _3252 = _3140;
            _3254 = _3142;
            _3256 = _3144;
            _3258 = _3146;
        }
        else
        {
            float _3273 = inversesqrt(dot(vec3(_2098, _2099, _2100), vec3(_2098, _2099, _2100)));
            float _3274 = _3273 * _2098;
            float _3275 = _3273 * _2099;
            float _3276 = _3273 * _2100;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3153 < ((_3151 >> 12u) & 15u))
            {
                float _3249;
                float _3251;
                float _3253;
                float _3255;
                float _3257;
                float _3259;
                float _3387 = _3136;
                float _3388 = _3138;
                float _3389 = _3140;
                float _3390 = _3142;
                float _3391 = _3144;
                float _3392 = _3146;
                uint _3393 = _3153;
                uint _3402;
                bool _3403;
                for (;;)
                {
                    _3402 = texelFetch(g_lightClassification, int((((_3032 << 5u) + (_3018 << 9u)) + (_3393 << 2u)) >> 2u)).x;
                    _3403 = _3402 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3403)
                    {
                        frontier_phi_74_pred = _3389;
                        frontier_phi_74_pred_1 = _3388;
                        frontier_phi_74_pred_2 = _3387;
                        frontier_phi_74_pred_3 = _3392;
                        frontier_phi_74_pred_4 = _3391;
                        frontier_phi_74_pred_5 = _3390;
                    }
                    else
                    {
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3879;
                        float _3880;
                        float _3881;
                        float _3882;
                        float _3883;
                        float _3884;
                        float _3599 = _3387;
                        float _3600 = _3388;
                        float _3601 = _3389;
                        float _3602 = _3390;
                        float _3603 = _3391;
                        float _3604 = _3392;
                        uint _3605 = _3402;
                        uint _3606;
                        vec4 _3631;
                        float _3632;
                        vec4 _3647;
                        vec3 _3659;
                        vec4 _3674;
                        vec4 _3689;
                        float _3735;
                        bool _3736;
                        for (;;)
                        {
                            uint _3616 = ((_3393 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3605));
                            _3606 = (_3605 + 4294967295u) & _3605;
                            uint _3618 = _3616 * 40u;
                            _3631 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3618)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 3u)).x));
                            _3632 = _3631.w;
                            uint _3634 = (_3616 * 40u) + 4u;
                            _3647 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3634)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 3u)).x));
                            uint _3649 = (_3616 * 40u) + 8u;
                            _3659 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3649)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 2u)).x));
                            uint _3661 = (_3616 * 40u) + 16u;
                            _3674 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3661)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 3u)).x));
                            uint _3676 = (_3616 * 40u) + 20u;
                            _3689 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3676)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 3u)).x));
                            uint _3691 = (_3616 * 40u) + 24u;
                            vec4 _3704 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3691)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 3u)).x));
                            uint _3710 = (_3616 * 40u) + 28u;
                            vec4 _3723 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3710)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 3u)).x));
                            _3735 = fma(_2100, _3723.z, fma(_2099, _3723.y, _3723.x * _2098)) + _3723.w;
                            _3736 = !((fma(_2100, _3704.z, fma(_2099, _3704.y, _3704.x * _2098)) + _3704.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3736)
                            {
                                float _3763 = _3631.x - _2098;
                                float _3764 = _3631.y - _2099;
                                float _3765 = _3631.z - _2100;
                                float _3766 = dot(vec3(_3763, _3764, _3765), vec3(_3763, _3764, _3765));
                                float _3769 = inversesqrt(_3766);
                                float _3770 = _3769 * _3763;
                                float _3771 = _3769 * _3764;
                                float _3772 = _3769 * _3765;
                                float _3776 = 1.0 - (_3766 / (_3632 * _3632));
                                float _4897 = isnan(0.0) ? _3776 : (isnan(_3776) ? 0.0 : max(_3776, 0.0));
                                float _3777 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                                float _3781 = sqrt(_3766) * _3647.w;
                                float _3783 = 1.39999997615814208984375 / (_3781 + 1.39999997615814208984375);
                                float _3784 = _3783 * _3783;
                                float _3787 = ((1.0 - _3784) * dot(vec3(_3770, _3771, _3772), vec3(_920, _923, _926))) + _3784;
                                float _3790 = _3781 * _3781;
                                float _3794 = (fma(_2100, _3674.z, fma(_2099, _3674.y, _3674.x * _2098)) + _3674.w) / _3735;
                                float _3795 = (fma(_2100, _3689.z, fma(_2099, _3689.y, _3689.x * _2098)) + _3689.w) / _3735;
                                float _3799 = 1.0 - dot(vec2(_3794, _3795), vec2(_3794, _3795));
                                float _4913 = isnan(0.0) ? _3799 : (isnan(_3799) ? 0.0 : max(_3799, 0.0));
                                float _3800 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
                                float _3801 = _3800 * (((isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0))) * _3777) / ((_3790 * 0.699999988079071044921875) + 1.0));
                                float _3813 = exp2(log2(1.0 / ((_3790 * 3.5) + 5.0)) * 0.25);
                                float _3814 = 1.0 - _1040;
                                float _3821 = sqrt(1.0 - ((1.0 - (_3814 * _3814)) * (1.0 - (_3813 * _3813))));
                                float _3822 = _3821 * _3821;
                                float _3823 = _3822 * _3822;
                                float _3824 = _3770 - _3274;
                                float _3825 = _3771 - _3275;
                                float _3826 = _3772 - _3276;
                                float _3830 = inversesqrt(dot(vec3(_3824, _3825, _3826), vec3(_3824, _3825, _3826)));
                                float _3834 = dot(vec3(_920, _923, _926), vec3((-0.0) - _3274, (-0.0) - _3275, (-0.0) - _3276));
                                float _4924 = isnan(0.0) ? _3834 : (isnan(_3834) ? 0.0 : max(_3834, 0.0));
                                float _3837 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
                                float _3838 = dot(vec3(_920, _923, _926), vec3(_3830 * _3824, _3830 * _3825, _3830 * _3826));
                                float _4935 = isnan(0.0) ? _3838 : (isnan(_3838) ? 0.0 : max(_3838, 0.0));
                                float _3841 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                                float _3845 = ((_3841 * _3841) * (_3823 + (-1.0))) + 1.0;
                                float _3846 = _3783 * _3822;
                                float _3847 = _3846 * _3846;
                                float _3853 = ((1.0 - _3847) * dot(vec3(_920, _923, _926), vec3(_3770, _3771, _3772))) + _3847;
                                float _4946 = isnan(0.0) ? _3853 : (isnan(_3853) ? 0.0 : max(_3853, 0.0));
                                float _3854 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
                                float _3855 = 1.0 - _3822;
                                float _3865 = (0.5 / (((_3854 * ((_3837 * _3855) + _3822)) + 9.9999999392252902907785028219223e-09) + (((_3854 * _3855) + _3822) * _3837))) * _3854;
                                float _4957 = isnan(0.0) ? _3865 : (isnan(_3865) ? 0.0 : max(_3865, 0.0));
                                float _3875 = (_3800 * _3777) * (((_3823 * 3.1415927410125732421875) * (isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0)))) / ((_3845 * _3845) * ((_3790 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3875 * _3659.z;
                                frontier_phi_80_pred_1 = _3875 * _3659.y;
                                frontier_phi_80_pred_2 = _3875 * _3659.x;
                                frontier_phi_80_pred_3 = _3801 * _3647.z;
                                frontier_phi_80_pred_4 = _3801 * _3647.y;
                                frontier_phi_80_pred_5 = _3801 * _3647.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3881 = frontier_phi_80_pred;
                            _3880 = frontier_phi_80_pred_1;
                            _3879 = frontier_phi_80_pred_2;
                            _3884 = frontier_phi_80_pred_3;
                            _3883 = frontier_phi_80_pred_4;
                            _3882 = frontier_phi_80_pred_5;
                            _3589 = _3882 + _3602;
                            _3590 = _3883 + _3603;
                            _3591 = _3884 + _3604;
                            _3586 = _3879 + _3599;
                            _3587 = _3880 + _3600;
                            _3588 = _3881 + _3601;
                            if (_3606 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3599 = _3586;
                                _3600 = _3587;
                                _3601 = _3588;
                                _3602 = _3589;
                                _3603 = _3590;
                                _3604 = _3591;
                                _3605 = _3606;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3588;
                        frontier_phi_74_pred_1 = _3587;
                        frontier_phi_74_pred_2 = _3586;
                        frontier_phi_74_pred_3 = _3591;
                        frontier_phi_74_pred_4 = _3590;
                        frontier_phi_74_pred_5 = _3589;
                    }
                    _3253 = frontier_phi_74_pred;
                    _3251 = frontier_phi_74_pred_1;
                    _3249 = frontier_phi_74_pred_2;
                    _3259 = frontier_phi_74_pred_3;
                    _3257 = frontier_phi_74_pred_4;
                    _3255 = frontier_phi_74_pred_5;
                    uint _3394 = _3393 + 1u;
                    if (_3394 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3387 = _3249;
                        _3388 = _3251;
                        _3389 = _3253;
                        _3390 = _3255;
                        _3391 = _3257;
                        _3392 = _3259;
                        _3393 = _3394;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3257;
                frontier_phi_62_63_ladder_1 = _3255;
                frontier_phi_62_63_ladder_2 = _3253;
                frontier_phi_62_63_ladder_3 = _3259;
                frontier_phi_62_63_ladder_4 = _3251;
                frontier_phi_62_63_ladder_5 = _3249;
            }
            else
            {
                frontier_phi_62_63_ladder = _3144;
                frontier_phi_62_63_ladder_1 = _3142;
                frontier_phi_62_63_ladder_2 = _3140;
                frontier_phi_62_63_ladder_3 = _3146;
                frontier_phi_62_63_ladder_4 = _3138;
                frontier_phi_62_63_ladder_5 = _3136;
            }
            _3248 = frontier_phi_62_63_ladder_5;
            _3250 = frontier_phi_62_63_ladder_4;
            _3252 = frontier_phi_62_63_ladder_2;
            _3254 = frontier_phi_62_63_ladder_1;
            _3256 = frontier_phi_62_63_ladder;
            _3258 = frontier_phi_62_63_ladder_3;
        }
        float _3263 = isnan(1.0) ? _1024 : (isnan(_1024) ? 1.0 : min(_1024, 1.0));
        _3050 = (_3263 * _3254) + _2563;
        _3052 = (_3263 * _3256) + _2565;
        _3054 = (_3263 * _3258) + _2567;
        _3056 = ((_3248 * _1009) * _3263) + _2901;
        _3058 = ((_3250 * _1011) * _3263) + _2903;
        _3060 = ((_3252 * _1012) * _3263) + _2905;
    }
    else
    {
        _3050 = _2563;
        _3052 = _2565;
        _3054 = _2567;
        _3056 = _2901;
        _3058 = _2903;
        _3060 = _2905;
    }
    uint _3066 = _953 + uint(cbMatDynParam._m0[0u].w);
    float _4973 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _4984 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _4995 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _3091 = (((isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0))) * (_3050 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _1024))) + ((_3056 + ((isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0))) * _1832)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_3066].x * ((((_616 + (_486 * _438)) - (_616 * _486)) + cbMtdParam._m0[13u].x) + ((((((_753.x - _750) * _731) + _750) * cbMtdParam._m0[11u].x) + ((cbMtdParam._m0[22u].y * _684) * cbMtdParam._m0[12u].x)) * _693)));
    float _3093 = ((cbInstanceData._m0[_3066].y * ((((_617 + (_486 * _439)) - (_617 * _486)) + cbMtdParam._m0[13u].y) + ((((((_753.y - _751) * _731) + _751) * cbMtdParam._m0[11u].y) + ((cbMtdParam._m0[22u].y * (((_673.y - _668.y) * _652) + _668.y)) * cbMtdParam._m0[12u].y)) * _693))) + ((_3058 + ((isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0))) * _1832)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0))) * (_3052 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _1024)));
    float _3095 = ((cbInstanceData._m0[_3066].z * ((((_618 + (_486 * _440)) - (_618 * _486)) + cbMtdParam._m0[13u].z) + ((((((_753.z - _752) * _731) + _752) * cbMtdParam._m0[11u].z) + ((cbMtdParam._m0[22u].y * (((_673.z - _668.z) * _652) + _668.z)) * cbMtdParam._m0[12u].z)) * _693))) + ((_3060 + ((isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0))) * _1832)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0))) * (_3054 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _1024)));
    uint _3099 = _952 + 6u;
    float _3107 = _895 / cbSceneParam._m0[86u].x;
    float _3108 = _896 / cbSceneParam._m0[86u].y;
    vec4 _3122 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3107, _3108, (log2((isnan(cbSceneParam._m0[77u].w) ? _830 : (isnan(_830) ? cbSceneParam._m0[77u].w : min(_830, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3124 = _3122.x;
    float _3125 = _3122.y;
    float _3126 = _3122.z;
    float _3127 = _3122.w;
    float _3198;
    float _3200;
    float _3202;
    float _3204;
    if (_830 > cbSceneParam._m0[78u].w)
    {
        float _3161 = isnan(_830) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _830 : min(cbSceneParam._m0[80u].w, _830));
        float _3162 = _3161 / _830;
        float _3173 = _3162 * _880;
        float _3174 = _881 * _3162;
        float _3175 = (-0.0) - _3174;
        float _3176 = _3162 * _882;
        float _3178 = (cbSceneParam._m0[77u].w * _3175) / _3161;
        float _3179 = _3178 + cbSceneParam._m0[79u].w;
        float _3180 = cbSceneParam._m0[79u].w - _3174;
        float _3186 = sqrt(((_3173 * _3173) + (_3174 * _3174)) + (_3176 * _3176));
        float _3189 = (1.0 - (cbSceneParam._m0[77u].w / _3161)) * _3186;
        float _3194 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3196 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3349;
        if (abs((_3175 - _3178) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3349 = ((((_3179 > 0.0) ? exp2(_3194 * _3179) : (2.0 - exp2(_3196 * _3179))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3189;
        }
        else
        {
            float _3309 = 1.0 / cbSceneParam._m0[80u].x;
            float _3310 = isnan(_3180) ? _3179 : (isnan(_3179) ? _3180 : max(_3179, _3180));
            float _3311 = isnan(_3180) ? _3179 : (isnan(_3179) ? _3180 : min(_3179, _3180));
            float _3320 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : min(_3310, 0.0));
            float _3321 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : min(_3311, 0.0));
            _3349 = ((abs(_3186 / _3175) * cbSceneParam._m0[80u].y) * ((((_3320 - _3321) * 2.0) - ((exp2(_3194 * (isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0)))) - exp2(_3194 * (isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0))))) * _3309)) - ((exp2(_3196 * _3320) - exp2(_3196 * _3321)) * _3309))) + (_3189 * cbSceneParam._m0[80u].z);
        }
        vec4 _3351 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3107, _3108, 1.0), 0.0);
        float _3360 = exp2((_3349 * (-1.44269502162933349609375)) * (1.0 - _3351.w));
        float _3361 = log2(_3360);
        float _3377 = log2(_3127);
        _3198 = (exp2(_3377 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3361 * cbSceneParam._m0[78u].x)) * _3351.x) / cbSceneParam._m0[78u].x)) + _3124;
        _3200 = (exp2(_3377 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3361 * cbSceneParam._m0[78u].y)) * _3351.y) / cbSceneParam._m0[78u].y)) + _3125;
        _3202 = (exp2(_3377 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3361 * cbSceneParam._m0[78u].z)) * _3351.z) / cbSceneParam._m0[78u].z)) + _3126;
        _3204 = _3360 * _3127;
    }
    else
    {
        _3198 = _3124;
        _3200 = _3125;
        _3202 = _3126;
        _3204 = _3127;
    }
    float _3216 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3217 = _3216 == 3.0;
    float _3218 = log2(_3204);
    float _3225 = exp2(_3218 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0)));
    float _3226 = exp2(_3218 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0)));
    float _3227 = exp2(_3218 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0)));
    float _3236 = (_3216 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3236 * (_3217 ? _3225 : (_3225 + (cbSceneParam._m0[72u].w * _3198)));
    SV_Target.y = _3236 * (_3217 ? _3226 : (_3226 + (cbSceneParam._m0[72u].w * _3200)));
    SV_Target.z = _3236 * (_3217 ? _3227 : (_3227 + (cbSceneParam._m0[72u].w * _3202)));
    SV_Target.w = cbInstanceData._m0[_3099].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3099].w;
}


