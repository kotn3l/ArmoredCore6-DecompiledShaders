#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[25];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_c4200_transition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_c4200_transition_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_c4200_transition_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D C_c4200_transition_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_c4200_transition_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D C_c4200_transition_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_c4200_transition_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_c4200_transition_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_c4200_transition_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_c4200_transition_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1393;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236;
    float _237;
    float _238;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
    }
    else
    {
        _236 = _222;
        _237 = _223;
        _238 = _224;
    }
    vec4 _252 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _255 = _252.x;
    float _264 = cbMtdParam._m0[18u].y * 0.3333333432674407958984375;
    float _269 = fract(abs(_264));
    float _281 = cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x;
    float _284 = (_281 * cbMtdParam._m0[24u].x) + TEXCOORD.x;
    float _285 = (_281 * cbMtdParam._m0[24u].y) + TEXCOORD.y;
    vec4 _308 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((_281 * cbMtdParam._m0[23u].x) + TEXCOORD.x)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[23u].y * _281) + TEXCOORD.y)) + cbTextureTilingScale._m0[10u].w));
    float _312 = cbPerFrame._m0[22u].x * 2.0;
    float _314 = _312 * cbMtdParam._m0[19u].w;
    float _317 = (_308.x * 0.5) + (-0.25);
    float _320 = (_308.y * 0.5) + (-0.25);
    float _321 = _320 * cbMtdParam._m0[18u].z;
    float _323 = (-0.0) - (cbMtdParam._m0[18u].z * _317);
    float _324 = fract(_314);
    float _326 = fract(_314 + 0.5);
    float _327 = _324 * _323;
    float _328 = _321 * _324;
    float _331 = _326 * _323;
    float _332 = _321 * _326;
    float _338 = abs((_324 * 2.0) + (-1.0));
    vec4 _355 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_9, SS_DiffuseMap), vec2(((_327 + _284) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, ((_328 + _285) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _357 = _355.x;
    float _368 = (0.25 - ((((_264 >= ((-0.0) - _264)) ? _269 : ((-0.0) - _269)) * 3.0) - _255)) + ((((texture(sampler2D(C_c4200_transition_snp_0_Texture2D_9, SS_DiffuseMap), vec2(((_331 + _284) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, ((_332 + _285) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w)).x - _357) * _338) + _357) * 1.35000002384185791015625);
    float _371 = abs(_368 * cbMtdParam._m0[19u].z);
    float _375 = (((_371 * cbMtdParam._m0[19u].y) - _255) * _371) + _255;
    float _3737 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _377 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _388 = (cbMtdParam._m0[23u].z * _281) + TEXCOORD.x;
    float _389 = (cbMtdParam._m0[23u].w * _281) + TEXCOORD.y;
    vec4 _409 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_327 + _388) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_328 + _389) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _411 = _409.x;
    float _412 = _409.y;
    float _413 = _409.z;
    vec4 _414 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_331 + _388) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_332 + _389) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _428 = (((_414.x - _411) * _338) + _411) * cbMtdParam._m0[14u].x;
    float _429 = (((_414.y - _412) * _338) + _412) * cbMtdParam._m0[14u].y;
    float _430 = (((_414.z - _413) * _338) + _413) * cbMtdParam._m0[14u].z;
    float _434 = _428 - (_428 * _377);
    float _435 = _429 - (_429 * _377);
    float _436 = _430 - (_430 * _377);
    vec4 _454 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _459 = ceil(_368);
    float _3748 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _460 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
    float _474 = (((cbMtdParam._m0[9u].x - cbMtdParam._m0[15u].x) * _460) + cbMtdParam._m0[15u].x) * _454.x;
    float _476 = (((cbMtdParam._m0[9u].y - cbMtdParam._m0[15u].y) * _460) + cbMtdParam._m0[15u].y) * _454.y;
    float _478 = (((cbMtdParam._m0[9u].z - cbMtdParam._m0[15u].z) * _460) + cbMtdParam._m0[15u].z) * _454.z;
    float _482 = exp2(log2(_377) * cbMtdParam._m0[19u].x);
    float _489 = (_482 * (_434 - _474)) + _474;
    float _490 = (_482 * (_435 - _476)) + _476;
    float _491 = (_482 * (_436 - _478)) + _478;
    vec4 _504 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _510 = cbMtdParam._m0[17u].x + _504.x;
    vec4 _522 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _526 = _522.z;
    float _529 = (_522.x * 2.0) + (-1.0);
    float _530 = (_522.y * 2.0) + (-1.0);
    float _531 = dot(vec2(_529, _530), vec2(_529, _530));
    float _3759 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _536 = sqrt(1.0 - (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))));
    float _547 = (cbMtdParam._m0[24u].z * _281) + TEXCOORD.x;
    float _548 = (cbMtdParam._m0[24u].w * _281) + TEXCOORD.y;
    float _554 = _312 * cbMtdParam._m0[20u].z;
    float _555 = _320 * cbMtdParam._m0[20u].y;
    float _557 = (-0.0) - (cbMtdParam._m0[20u].y * _317);
    float _558 = fract(_554);
    float _560 = fract(_554 + 0.5);
    float _571 = abs((_558 * 2.0) + (-1.0));
    vec4 _587 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_11, SS_DiffuseMap), vec2((((_558 * _557) + _547) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_555 * _558) + _548) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _589 = _587.x;
    float _590 = _587.y;
    float _591 = _587.z;
    vec4 _592 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_11, SS_DiffuseMap), vec2((((_560 * _557) + _547) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_555 * _560) + _548) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _606 = (((_592.x - _589) * _571) + _589) * cbMtdParam._m0[16u].x;
    float _607 = (((_592.y - _590) * _571) + _590) * cbMtdParam._m0[16u].y;
    float _608 = (((_592.z - _591) * _571) + _591) * cbMtdParam._m0[16u].z;
    float _612 = _606 - (_606 * _460);
    float _613 = _607 - (_607 * _460);
    float _614 = _608 - (_608 * _460);
    float _631 = _312 * cbMtdParam._m0[21u].w;
    float _632 = _320 * cbMtdParam._m0[22u].x;
    float _634 = (-0.0) - (cbMtdParam._m0[22u].x * _317);
    float _635 = fract(_631);
    float _637 = fract(_631 + 0.5);
    float _648 = abs((_635 * 2.0) + (-1.0));
    vec4 _664 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_635 * _634) + TEXCOORD.x) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((_632 * _635) + TEXCOORD.y) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _669 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_637 * _634) + TEXCOORD.x) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((_632 * _637) + TEXCOORD.y) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _680 = ((_669.x - _664.x) * _648) + _664.x;
    float _687 = exp2(log2(_680 * cbMtdParam._m0[21u].z) * cbMtdParam._m0[21u].y);
    float _688 = isnan(cbMtdParam._m0[21u].x) ? _687 : (isnan(_687) ? cbMtdParam._m0[21u].x : max(_687, cbMtdParam._m0[21u].x));
    float _689 = isnan(cbMtdParam._m0[20u].x) ? _688 : (isnan(_688) ? cbMtdParam._m0[20u].x : min(_688, cbMtdParam._m0[20u].x));
    float _710 = _312 * cbMtdParam._m0[17u].z;
    float _711 = _320 * cbMtdParam._m0[17u].w;
    float _713 = (-0.0) - (cbMtdParam._m0[17u].w * _317);
    float _714 = fract(_710);
    float _716 = fract(_710 + 0.5);
    float _727 = abs((_714 * 2.0) + (-1.0));
    vec4 _744 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_714 * _713) + TEXCOORD.x) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_711 * _714) + TEXCOORD.y) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _746 = _744.x;
    float _747 = _744.y;
    float _748 = _744.z;
    vec4 _749 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_716 * _713) + TEXCOORD.x) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_711 * _716) + TEXCOORD.y) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _792 = fma(_536, _236, fma(_530, _228 * TANGENT.x, (_214 * _206) * _529));
    float _795 = fma(_536, _237, fma(_530, _228 * TANGENT.y, (_214 * _207) * _529));
    float _798 = fma(_536, _238, fma(_530, _228 * TANGENT.z, (_214 * _208) * _529));
    float _802 = inversesqrt(dot(vec3(_792, _795, _798), vec3(_792, _795, _798)));
    float _803 = _802 * _792;
    float _804 = _802 * _795;
    float _805 = _802 * _798;
    float _3780 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _806 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _3791 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _3802 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _3813 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _3824 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _810 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _826 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _866 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _876 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _866);
    float _877 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _866);
    float _878 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _866);
    float _882 = inversesqrt(dot(vec3(_876, _877, _878), vec3(_876, _877, _878)));
    float _883 = _876 * _882;
    float _884 = _877 * _882;
    float _885 = _878 * _882;
    float _891 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _892 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _894 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _896 = _894.w;
    float _916 = fma(_805, cbSceneParam._m0[5u].z, fma(_804, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _803));
    float _919 = fma(_805, cbSceneParam._m0[6u].z, fma(_804, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _803));
    float _922 = fma(_805, cbSceneParam._m0[7u].z, fma(_804, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _803));
    vec4 _924 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _935 = (((_924.y - _806) + (_924.w * _806)) * cbMtdParam._m0[3u].x) + _806;
    uint _948 = uint(roundEven(NORMAL.w)) * 13u;
    uint _949 = _948 + 9u;
    uint _950 = _949 + uint(cbMatDynParam._m0[0u].w);
    float _956 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) * cbInstanceData._m0[_950].x;
    float _957 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) * cbInstanceData._m0[_950].y;
    float _958 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) * cbInstanceData._m0[_950].z;
    float _3835 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _959 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _3846 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _960 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _3857 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _961 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    vec4 _962 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _967 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _978 = (((_967.x - _810) + (_967.w * _810)) * cbMtdParam._m0[3u].x) + _810;
    float _991 = (cbMtdParam._m0[3u].x * (((_959 * _896) - _959) + _962.x)) + _959;
    float _992 = (cbMtdParam._m0[3u].x * (((_960 * _896) - _960) + _962.y)) + _960;
    float _993 = (cbMtdParam._m0[3u].x * (((_961 * _896) - _961) + _962.z)) + _961;
    float _994 = 1.0 - _978;
    float _995 = _994 * _991;
    float _996 = _994 * _992;
    float _997 = _994 * _993;
    float _1002 = (_991 + (-0.039999999105930328369140625)) * _978;
    float _1003 = (_992 + (-0.039999999105930328369140625)) * _978;
    float _1004 = (_993 + (-0.039999999105930328369140625)) * _978;
    float _1005 = _1002 + 0.039999999105930328369140625;
    float _1007 = _1003 + 0.039999999105930328369140625;
    float _1008 = _1004 + 0.039999999105930328369140625;
    vec4 _1017 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _891, cbSceneParam._m0[86u].y * _892));
    float _1020 = _1017.x * TEXCOORD_4;
    float _1021 = dot(vec3(_803, _804, _805), vec3(_883, _884, _885));
    float _1024 = _1021 * 2.0;
    float _1028 = (_1024 * _803) - _883;
    float _1029 = (_1024 * _804) - _884;
    float _1030 = (_1024 * _805) - _885;
    float _1034 = abs(dot(vec3(_883, _884, _885), vec3(_803, _804, _805)));
    float _3868 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _1036 = sqrt(_935);
    float _1048 = exp2((_1036 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1036 * 3.0));
    float _1054 = (1.0 - _1048) * ((_1036 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1055 = _1048 * _1036;
    float _1083 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1087 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1091 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1392;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1118 = fma(_1091, cbModelParam._m0[26u].z, fma(_1087, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1083));
        float _1122 = fma(_1091, cbModelParam._m0[27u].z, fma(_1087, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1083));
        float _1126 = fma(_1091, cbModelParam._m0[28u].z, fma(_1087, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1083));
        float _1150 = _1083 + _803;
        float _1151 = _1087 + _804;
        float _1152 = _1091 + _805;
        float _1162 = fma(_1152, cbModelParam._m0[26u].z, fma(_1151, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1150)) - _1118;
        float _1163 = fma(_1152, cbModelParam._m0[27u].z, fma(_1151, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1150)) - _1122;
        float _1164 = fma(_1152, cbModelParam._m0[28u].z, fma(_1151, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1150)) - _1126;
        float _1168 = inversesqrt(dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164)));
        float _1181 = ((_1168 * _1162) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1118 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1182 = ((_1168 * _1163) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1122 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1183 = ((_1168 * _1164) / cbModelParam._m0[34u].z) + ((((((_1126 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        float _1220 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1186.x + (-0.5));
        float _1222 = _1220 * (_1186.y + (-0.5));
        float _1223 = _1220 * (_1186.z + (-0.5));
        float _1230 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1193.x + (-0.5));
        float _1232 = _1230 * (_1193.y + (-0.5));
        float _1233 = _1230 * (_1193.z + (-0.5));
        float _1240 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1200.x + (-0.5));
        float _1242 = _1240 * (_1200.y + (-0.5));
        float _1243 = _1240 * (_1200.z + (-0.5));
        float _1250 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1207.x + (-0.5));
        float _1252 = _1250 * (_1207.y + (-0.5));
        float _1253 = _1250 * (_1207.z + (-0.5));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = _1221 * 0.5;
        float _1258 = _1231 * 0.5;
        float _1259 = _1241 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1274 = (dot(vec3(_803, _804, _805), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _3894 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1284 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _3905 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _3916 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_1286 + 1.0))) + _1291) * _1254;
        float _1301 = _1222 * 0.5;
        float _1302 = _1232 * 0.5;
        float _1303 = _1242 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1317 = (dot(vec3(_803, _804, _805), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _3927 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1326 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _3938 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _3949 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_1328 + 1.0))) + _1333) * _1255;
        float _1343 = _1223 * 0.5;
        float _1344 = _1233 * 0.5;
        float _1345 = _1243 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_803, _804, _805), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _3960 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _3971 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _3982 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1370 + 1.0))) + _1375) * _1256;
        _1392 = _1223;
        _1394 = _1222;
        _1395 = _1221;
        _1396 = _1233;
        _1397 = _1232;
        _1398 = _1231;
        _1399 = _1243;
        _1400 = _1242;
        _1401 = _1241;
        _1402 = _1256;
        _1403 = _1255;
        _1404 = _1254;
        _1405 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
        _1406 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
        _1407 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
    }
    else
    {
        _1392 = _1393;
        _1394 = _1393;
        _1395 = _1393;
        _1396 = _1393;
        _1397 = _1393;
        _1398 = _1393;
        _1399 = _1393;
        _1400 = _1393;
        _1401 = _1393;
        _1402 = _1393;
        _1403 = _1393;
        _1404 = _1393;
        _1405 = 0.0;
        _1406 = 0.0;
        _1407 = 0.0;
    }
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1433 = fma(_1091, cbModelParam._m0[30u].z, fma(_1087, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1083));
        float _1437 = fma(_1091, cbModelParam._m0[31u].z, fma(_1087, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1083));
        float _1441 = fma(_1091, cbModelParam._m0[32u].z, fma(_1087, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1083));
        float _1464 = _1083 + _803;
        float _1465 = _1087 + _804;
        float _1466 = _1091 + _805;
        float _1476 = fma(_1466, cbModelParam._m0[30u].z, fma(_1465, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1464)) - _1433;
        float _1477 = fma(_1466, cbModelParam._m0[31u].z, fma(_1465, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1464)) - _1437;
        float _1478 = fma(_1466, cbModelParam._m0[32u].z, fma(_1465, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1464)) - _1441;
        float _1482 = inversesqrt(dot(vec3(_1476, _1477, _1478), vec3(_1476, _1477, _1478)));
        float _1495 = ((_1482 * _1476) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1433 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1496 = ((_1482 * _1477) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1437 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1497 = ((_1482 * _1478) / cbModelParam._m0[35u].z) + ((((((_1441 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1495, _1496, _1497), 0.0);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1495, _1496, _1497), 0.0);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1495, _1496, _1497), 0.0);
        vec4 _1520 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1495, _1496, _1497), 0.0);
        float _1532 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1533 = _1532 * (_1499.x + (-0.5));
        float _1534 = _1532 * (_1499.y + (-0.5));
        float _1535 = _1532 * (_1499.z + (-0.5));
        float _1542 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1543 = _1542 * (_1506.x + (-0.5));
        float _1544 = _1542 * (_1506.y + (-0.5));
        float _1545 = _1542 * (_1506.z + (-0.5));
        float _1552 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1553 = _1552 * (_1513.x + (-0.5));
        float _1554 = _1552 * (_1513.y + (-0.5));
        float _1555 = _1552 * (_1513.z + (-0.5));
        float _1562 = exp2((_1520.w + (-0.5)) * 20.0) * 2.0;
        float _1563 = _1562 * (_1520.x + (-0.5));
        float _1564 = _1562 * (_1520.y + (-0.5));
        float _1565 = _1562 * (_1520.z + (-0.5));
        float _1566 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1567 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1568 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1569 = _1533 * 0.5;
        float _1570 = _1543 * 0.5;
        float _1571 = _1553 * 0.5;
        float _1572 = dot(vec3(_1569, _1570, _1571), vec3(_1569, _1570, _1571));
        float _1577 = (_1572 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1572);
        float _1585 = (dot(vec3(_803, _804, _805), vec3(_1577 * _1569, _1577 * _1570, _1577 * _1571)) + 1.0) * 0.5;
        float _4023 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1594 = sqrt(((_1570 * _1570) + (_1569 * _1569)) + (_1571 * _1571)) / (_1566 + 9.9999997473787516355514526367188e-06);
        float _4034 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1596 = _1595 * 2.0;
        float _1600 = (1.0 - _1595) / (_1595 + 1.0);
        float _4045 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1610 = ((((1.0 - _1601) * (_1596 + 2.0)) * exp2(log2(isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1596 + 1.0))) + _1601) * _1566;
        float _1611 = _1534 * 0.5;
        float _1612 = _1544 * 0.5;
        float _1613 = _1554 * 0.5;
        float _1614 = dot(vec3(_1611, _1612, _1613), vec3(_1611, _1612, _1613));
        float _1619 = (_1614 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1614);
        float _1627 = (dot(vec3(_803, _804, _805), vec3(_1619 * _1611, _1619 * _1612, _1619 * _1613)) + 1.0) * 0.5;
        float _4056 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1636 = sqrt(((_1612 * _1612) + (_1611 * _1611)) + (_1613 * _1613)) / (_1567 + 9.9999997473787516355514526367188e-06);
        float _4067 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1638 = _1637 * 2.0;
        float _1642 = (1.0 - _1637) / (_1637 + 1.0);
        float _4078 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1652 = ((((1.0 - _1643) * (_1638 + 2.0)) * exp2(log2(isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_1638 + 1.0))) + _1643) * _1567;
        float _1653 = _1535 * 0.5;
        float _1654 = _1545 * 0.5;
        float _1655 = _1555 * 0.5;
        float _1656 = dot(vec3(_1653, _1654, _1655), vec3(_1653, _1654, _1655));
        float _1661 = (_1656 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1656);
        float _1669 = (dot(vec3(_803, _804, _805), vec3(_1661 * _1653, _1661 * _1654, _1661 * _1655)) + 1.0) * 0.5;
        float _4089 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1678 = sqrt(((_1654 * _1654) + (_1653 * _1653)) + (_1655 * _1655)) / (_1568 + 9.9999997473787516355514526367188e-06);
        float _4100 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1680 = _1679 * 2.0;
        float _1684 = (1.0 - _1679) / (_1679 + 1.0);
        float _4111 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1685 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1694 = ((((1.0 - _1685) * (_1680 + 2.0)) * exp2(log2(isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_1680 + 1.0))) + _1685) * _1568;
        _1702 = _1535;
        _1703 = _1534;
        _1704 = _1533;
        _1705 = _1545;
        _1706 = _1544;
        _1707 = _1543;
        _1708 = _1555;
        _1709 = _1554;
        _1710 = _1553;
        _1711 = _1568;
        _1712 = _1567;
        _1713 = _1566;
        _1714 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)));
        _1715 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)));
        _1716 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)));
    }
    else
    {
        _1702 = _1393;
        _1703 = _1393;
        _1704 = _1393;
        _1705 = _1393;
        _1706 = _1393;
        _1707 = _1393;
        _1708 = _1393;
        _1709 = _1393;
        _1710 = _1393;
        _1711 = _1393;
        _1712 = _1393;
        _1713 = _1393;
        _1714 = 0.0;
        _1715 = 0.0;
        _1716 = 0.0;
    }
    float _1726 = (cbModelParam._m0[1u].x * (_1714 - _1405)) + _1405;
    float _1727 = (cbModelParam._m0[1u].x * (_1715 - _1406)) + _1406;
    float _1728 = (cbModelParam._m0[1u].x * (_1716 - _1407)) + _1407;
    float _1749 = fma(_1728, cbSceneParam._m0[89u].z, fma(_1727, cbSceneParam._m0[89u].y, _1726 * cbSceneParam._m0[89u].x));
    float _1752 = fma(_1728, cbSceneParam._m0[90u].z, fma(_1727, cbSceneParam._m0[90u].y, _1726 * cbSceneParam._m0[90u].x));
    float _1755 = fma(_1728, cbSceneParam._m0[91u].z, fma(_1727, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1726));
    float _1770 = _1028 * 0.5;
    float _1771 = _1029 * 0.5;
    float _1772 = _1030 * 0.5;
    float _1773 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1704, _1707, _1710, _1713));
    float _1776 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1703, _1706, _1709, _1712));
    float _1779 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1702, _1705, _1708, _1711));
    float _1813;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1786 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1392, _1396, _1399, _1402));
        float _1790 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1394, _1397, _1400, _1403));
        float _1794 = dot(vec4(_1770, _1771, _1772, 1.0), vec4(_1395, _1398, _1401, _1404));
        float _1801 = dot(vec4(cbModelParam._m0[39u]), vec4(_1770, _1771, _1772, 1.0));
        _1813 = dot(vec3(isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)), isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)), isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1801) ? 0.0 : (isnan(0.0) ? _1801 : max(0.0, _1801))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1813 = 1.0;
    }
    float _1824;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1815 = dot(vec4(cbModelParam._m0[40u]), vec4(_1770, _1771, _1772, 1.0));
        _1824 = dot(vec3(isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)), isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)), isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1815) ? 0.0 : (isnan(0.0) ? _1815 : max(0.0, _1815))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1824 = 1.0;
    }
    float _1828 = (_1824 * cbModelParam._m0[1u].x) + (_1813 * (1.0 - cbModelParam._m0[1u].x));
    float _1838 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _935);
    float _1839 = isnan(_1838) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1838 : min(cbModelParam._m0[25u].z, _1838));
    float _1919;
    float _1921;
    float _1923;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1886 = fma(_1091, cbModelParam._m0[13u].z, fma(_1087, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1083)) + cbModelParam._m0[13u].w;
        float _1890 = fma(_1091, cbModelParam._m0[14u].z, fma(_1087, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1083)) + cbModelParam._m0[14u].w;
        float _1894 = fma(_1091, cbModelParam._m0[15u].z, fma(_1087, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1083)) + cbModelParam._m0[15u].w;
        float _1897 = fma(_1030, cbModelParam._m0[13u].z, fma(_1029, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1028));
        float _1900 = fma(_1030, cbModelParam._m0[14u].z, fma(_1029, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1028));
        float _1903 = fma(_1030, cbModelParam._m0[15u].z, fma(_1029, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1028));
        float _1931;
        if (_1897 > 0.0)
        {
            _1931 = abs((1.0 - _1886) / _1897);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1886 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1931 = frontier_phi_16_14_ladder;
        }
        float _2133;
        if (_1900 > 0.0)
        {
            _2133 = abs((1.0 - _1890) / _1900);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1890 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2133 = frontier_phi_25_21_ladder;
        }
        float _2387;
        if (_1903 > 0.0)
        {
            _2387 = abs((1.0 - _1894) / _1903);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1894 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2387 = frontier_phi_37_32_ladder;
        }
        float _2389 = isnan(_2133) ? _1931 : (isnan(_1931) ? _2133 : min(_1931, _2133));
        float _2390 = isnan(_2387) ? _2389 : (isnan(_2389) ? _2387 : min(_2389, _2387));
        float _2394 = (_2390 * _1897) + _1886;
        float _2395 = (_2390 * _1900) + _1890;
        float _2396 = (_2390 * _1903) + _1894;
        float _2397 = _2390 * 9.9999997473787516355514526367188e-05;
        float _2399 = (-1.0) - _2397;
        float _2401 = _2397 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2396 > _2401) || ((_2396 < _2399) || ((_2395 > _2401) || ((_2395 < _2399) || ((_2394 < _2399) || (_2394 > _2401))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2524 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2396, cbModelParam._m0[9u].z, fma(_2395, cbModelParam._m0[9u].y, _2394 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2396, cbModelParam._m0[10u].z, fma(_2395, cbModelParam._m0[10u].y, _2394 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2396, cbModelParam._m0[11u].z, fma(_2395, cbModelParam._m0[11u].y, _2394 * cbModelParam._m0[11u].x))), _1839);
            frontier_phi_15_37_ladder = _2524.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2524.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2524.x * cbModelParam._m0[1u].y;
        }
        _1919 = frontier_phi_15_37_ladder_2;
        _1921 = frontier_phi_15_37_ladder_1;
        _1923 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1907 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1028, _1029, _1030), _1839);
        _1919 = _1907.x * cbModelParam._m0[1u].y;
        _1921 = _1907.y * cbModelParam._m0[1u].y;
        _1923 = _1907.z * cbModelParam._m0[1u].y;
    }
    float _1927 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _935);
    float _1928 = isnan(_1927) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1927 : min(cbModelParam._m0[25u].w, _1927));
    float _2017;
    float _2019;
    float _2021;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1981 = fma(_1091, cbModelParam._m0[21u].z, fma(_1087, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1083)) + cbModelParam._m0[21u].w;
        float _1985 = fma(_1091, cbModelParam._m0[22u].z, fma(_1087, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1083)) + cbModelParam._m0[22u].w;
        float _1989 = fma(_1091, cbModelParam._m0[23u].z, fma(_1087, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1083)) + cbModelParam._m0[23u].w;
        float _1992 = fma(_1030, cbModelParam._m0[21u].z, fma(_1029, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1028));
        float _1995 = fma(_1030, cbModelParam._m0[22u].z, fma(_1029, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1028));
        float _1998 = fma(_1030, cbModelParam._m0[23u].z, fma(_1029, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1028));
        float _2138;
        if (_1992 > 0.0)
        {
            _2138 = abs((1.0 - _1981) / _1992);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1981 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2138 = frontier_phi_27_23_ladder;
        }
        float _2414;
        if (_1995 > 0.0)
        {
            _2414 = abs((1.0 - _1985) / _1995);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1995 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1985 + 1.0) / _1995);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2414 = frontier_phi_39_34_ladder;
        }
        float _2627;
        if (_1998 > 0.0)
        {
            _2627 = abs((1.0 - _1989) / _1998);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1998 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1989 + 1.0) / _1998);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2627 = frontier_phi_48_45_ladder;
        }
        float _2629 = isnan(_2414) ? _2138 : (isnan(_2138) ? _2414 : min(_2138, _2414));
        float _2630 = isnan(_2627) ? _2629 : (isnan(_2629) ? _2627 : min(_2629, _2627));
        float _2634 = (_2630 * _1992) + _1981;
        float _2635 = (_2630 * _1995) + _1985;
        float _2636 = (_2630 * _1998) + _1989;
        float _2637 = _2630 * 9.9999997473787516355514526367188e-05;
        float _2638 = (-1.0) - _2637;
        float _2640 = _2637 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2636 > _2640) || ((_2636 < _2638) || ((_2635 > _2640) || ((_2635 < _2638) || ((_2634 < _2638) || (_2634 > _2640))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2853 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2636, cbModelParam._m0[17u].z, fma(_2635, cbModelParam._m0[17u].y, _2634 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2636, cbModelParam._m0[18u].z, fma(_2635, cbModelParam._m0[18u].y, _2634 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2636, cbModelParam._m0[19u].z, fma(_2635, cbModelParam._m0[19u].y, _2634 * cbModelParam._m0[19u].x))), _1928);
            frontier_phi_24_48_ladder = _2853.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2853.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2853.x * cbModelParam._m0[1u].z;
        }
        _2017 = frontier_phi_24_48_ladder_2;
        _2019 = frontier_phi_24_48_ladder_1;
        _2021 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _2001 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1028, _1029, _1030), _1928);
        _2017 = _2001.x * cbModelParam._m0[1u].z;
        _2019 = _2001.y * cbModelParam._m0[1u].z;
        _2021 = _2001.z * cbModelParam._m0[1u].z;
    }
    float _2034 = (((_1054 * _1005) + _1055) * _1020) * ((cbModelParam._m0[1u].w * (_2017 - _1919)) + _1919);
    float _2036 = (((_1054 * _1007) + _1055) * _1020) * ((cbModelParam._m0[1u].w * (_2019 - _1921)) + _1921);
    float _2038 = (((_1054 * _1008) + _1055) * _1020) * ((cbModelParam._m0[1u].w * (_2021 - _1923)) + _1923);
    float _2041 = fma(_2038, cbSceneParam._m0[89u].z, fma(_2036, cbSceneParam._m0[89u].y, _2034 * cbSceneParam._m0[89u].x));
    float _2044 = fma(_2038, cbSceneParam._m0[90u].z, fma(_2036, cbSceneParam._m0[90u].y, _2034 * cbSceneParam._m0[90u].x));
    float _2047 = fma(_2038, cbSceneParam._m0[91u].z, fma(_2036, cbSceneParam._m0[91u].y, _2034 * cbSceneParam._m0[91u].x));
    uvec4 _2057 = floatBitsToUint(cbInstanceData._m0[_948 + 5u]);
    uint _2059 = _2057.x * 14u;
    uint _2060 = _2059 + 13u;
    float _2067 = _1020 + (-1.0);
    float _2072 = (cbLight._m0[_2060].x * _2067) + 1.0;
    float _2073 = (cbLight._m0[_2060].y * _2067) + 1.0;
    float _2074 = (cbLight._m0[_2060].z * _2067) + 1.0;
    float _2075 = (cbLight._m0[_2060].w * _2067) + 1.0;
    uint _2076 = _2059 + 5u;
    float _2082 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
    uint _2086 = _2059 + 4u;
    float _2092 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
    uint _2096 = _2059 | 1u;
    float _2107 = dot(vec3(cbLight._m0[_2059].xyz), vec3(_803, _804, _805));
    float _2110 = dot(vec3(cbLight._m0[_2096].xyz), vec3(_803, _804, _805));
    float _4247 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _4258 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2115 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * 0.3183098733425140380859375;
    float _2117 = (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * 0.3183098733425140380859375;
    float _2124 = ((cbLight._m0[_2076].x * _2082) * _2117) + ((cbLight._m0[_2086].x * _2092) * _2115);
    float _2125 = ((_2082 * cbLight._m0[_2076].y) * _2117) + ((_2092 * cbLight._m0[_2086].y) * _2115);
    float _2126 = ((_2082 * cbLight._m0[_2076].z) * _2117) + ((_2092 * cbLight._m0[_2086].z) * _2115);
    uvec4 _2130 = floatBitsToUint(cbLight._m0[_2059 + 12u]);
    bool _2132 = _2130.x == 0u;
    float _2143;
    float _2145;
    float _2147;
    if (_2132)
    {
        _2143 = _2124;
        _2145 = _2125;
        _2147 = _2126;
    }
    else
    {
        uint _2151 = _2059 + 6u;
        float _2167 = (dot(vec3(cbLight._m0[_2059 + 2u].xyz), vec3(_803, _804, _805)) * 0.5) + 0.5;
        float _2168 = _2167 * _2167;
        float _4269 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2169 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _2170 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
        _2143 = (((cbLight._m0[_2151].x * 0.3183098733425140380859375) * _2169) * _2170) + _2124;
        _2145 = (((cbLight._m0[_2151].y * 0.3183098733425140380859375) * _2169) * _2170) + _2125;
        _2147 = (((cbLight._m0[_2151].z * 0.3183098733425140380859375) * _2169) * _2170) + _2126;
    }
    bool _2150 = _2130.y == 0u;
    float _2188;
    float _2190;
    float _2192;
    if (_2150)
    {
        _2188 = _2143;
        _2190 = _2145;
        _2192 = _2147;
    }
    else
    {
        uint _2358 = _2059 + 7u;
        float _2374 = (dot(vec3(cbLight._m0[_2059 + 3u].xyz), vec3(_803, _804, _805)) * 0.5) + 0.5;
        float _2375 = _2374 * _2374;
        float _4285 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2376 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _2377 = isnan(1.0) ? _2075 : (isnan(_2075) ? 1.0 : min(_2075, 1.0));
        _2188 = (((cbLight._m0[_2358].x * 0.3183098733425140380859375) * _2376) * _2377) + _2143;
        _2190 = (((cbLight._m0[_2358].y * 0.3183098733425140380859375) * _2376) * _2377) + _2145;
        _2192 = (((cbLight._m0[_2358].z * 0.3183098733425140380859375) * _2376) * _2377) + _2147;
    }
    uint _2195 = _2059 + 8u;
    float _2208 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2059].w)) * _935) * 0.949999988079071044921875);
    float _2209 = _2208 * _2208;
    float _2210 = cbLight._m0[_2059].x + _883;
    float _2211 = cbLight._m0[_2059].y + _884;
    float _2212 = cbLight._m0[_2059].z + _885;
    float _2216 = inversesqrt(dot(vec3(_2210, _2211, _2212), vec3(_2210, _2211, _2212)));
    float _2217 = _2216 * _2210;
    float _2218 = _2216 * _2211;
    float _2219 = _2216 * _2212;
    float _2220 = dot(vec3(_803, _804, _805), vec3(cbLight._m0[_2059].xyz));
    float _4301 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2223 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
    float _4312 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _2224 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    float _2225 = dot(vec3(_803, _804, _805), vec3(_2217, _2218, _2219));
    float _4323 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2228 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
    float _2229 = dot(vec3(cbLight._m0[_2059].xyz), vec3(_2217, _2218, _2219));
    float _4334 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2233 = _2209 * _2209;
    float _2237 = ((_2228 * _2228) * (_2233 + (-1.0))) + 1.0;
    float _2245 = exp2(log2(1.0 - (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) * 5.0);
    float _2246 = 0.959999978542327880859375 - _1002;
    float _2248 = 0.959999978542327880859375 - _1003;
    float _2249 = 0.959999978542327880859375 - _1004;
    float _2256 = 1.0 - _2209;
    float _2267 = (0.5 / (((_2224 * ((_2223 * _2256) + _2209)) + 9.9999999392252902907785028219223e-09) + (((_2224 * _2256) + _2209) * _2223))) * _2223;
    float _4345 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2269 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_2233 / ((_2237 * _2237) * 3.141590118408203125));
    uint _2280 = _2059 + 9u;
    float _2291 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2096].w)) * _935) * 0.949999988079071044921875);
    float _2292 = _2291 * _2291;
    float _2293 = cbLight._m0[_2096].x + _883;
    float _2294 = cbLight._m0[_2096].y + _884;
    float _2295 = cbLight._m0[_2096].z + _885;
    float _2299 = inversesqrt(dot(vec3(_2293, _2294, _2295), vec3(_2293, _2294, _2295)));
    float _2300 = _2299 * _2293;
    float _2301 = _2299 * _2294;
    float _2302 = _2299 * _2295;
    float _2303 = dot(vec3(_803, _804, _805), vec3(cbLight._m0[_2096].xyz));
    float _4356 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2306 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
    float _2307 = dot(vec3(_803, _804, _805), vec3(_2300, _2301, _2302));
    float _4367 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2310 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
    float _2311 = dot(vec3(cbLight._m0[_2096].xyz), vec3(_2300, _2301, _2302));
    float _4378 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2315 = _2292 * _2292;
    float _2319 = ((_2310 * _2310) * (_2315 + (-1.0))) + 1.0;
    float _2326 = exp2(log2(1.0 - (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0)))) * 5.0);
    float _2333 = 1.0 - _2292;
    float _2343 = (0.5 / (((_2224 * ((_2306 * _2333) + _2292)) + 9.9999999392252902907785028219223e-09) + (((_2224 * _2333) + _2292) * _2306))) * _2306;
    float _4389 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2345 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_2315 / ((_2319 * _2319) * 3.141590118408203125));
    float _2355 = (((((_2326 * _2246) + _1005) * cbLight._m0[_2280].x) * _2345) * _2082) + (((((_2245 * _2246) + _1005) * cbLight._m0[_2195].x) * _2269) * _2092);
    float _2356 = (((((_2326 * _2248) + _1007) * cbLight._m0[_2280].y) * _2345) * _2082) + (((((_2245 * _2248) + _1007) * cbLight._m0[_2195].y) * _2269) * _2092);
    float _2357 = (((((_2326 * _2249) + _1008) * cbLight._m0[_2280].z) * _2345) * _2082) + (((((_2245 * _2249) + _1008) * cbLight._m0[_2195].z) * _2269) * _2092);
    float _2419;
    float _2421;
    float _2423;
    if (_2132)
    {
        _2419 = _2355;
        _2421 = _2356;
        _2423 = _2357;
    }
    else
    {
        uint _2425 = _2059 + 2u;
        uint _2429 = _2059 + 10u;
        float _2443 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2425].w)) * _935) * 0.949999988079071044921875);
        float _2444 = _2443 * _2443;
        float _2445 = cbLight._m0[_2425].x + _883;
        float _2446 = cbLight._m0[_2425].y + _884;
        float _2447 = cbLight._m0[_2425].z + _885;
        float _2451 = inversesqrt(dot(vec3(_2445, _2446, _2447), vec3(_2445, _2446, _2447)));
        float _2452 = _2451 * _2445;
        float _2453 = _2451 * _2446;
        float _2454 = _2451 * _2447;
        float _2455 = dot(vec3(_803, _804, _805), vec3(cbLight._m0[_2425].xyz));
        float _4400 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2458 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2459 = dot(vec3(_803, _804, _805), vec3(_2452, _2453, _2454));
        float _4411 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2462 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _2463 = dot(vec3(cbLight._m0[_2425].xyz), vec3(_2452, _2453, _2454));
        float _4422 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2467 = _2444 * _2444;
        float _2471 = ((_2462 * _2462) * (_2467 + (-1.0))) + 1.0;
        float _2478 = exp2(log2(1.0 - (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0)))) * 5.0);
        float _2485 = 1.0 - _2444;
        float _2495 = (0.5 / (((_2224 * ((_2458 * _2485) + _2444)) + 9.9999999392252902907785028219223e-09) + (((_2224 * _2485) + _2444) * _2458))) * _2458;
        float _4433 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2497 = (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_2467 / ((_2471 * _2471) * 3.141590118408203125));
        float _2498 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
        _2419 = (((((_2478 * _2246) + _1005) * cbLight._m0[_2429].x) * _2497) * _2498) + _2355;
        _2421 = (((((_2478 * _2248) + _1007) * cbLight._m0[_2429].y) * _2497) * _2498) + _2356;
        _2423 = (((((_2478 * _2249) + _1008) * cbLight._m0[_2429].z) * _2497) * _2498) + _2357;
    }
    float _2533;
    float _2535;
    float _2537;
    if (_2150)
    {
        _2533 = _2419;
        _2535 = _2421;
        _2537 = _2423;
    }
    else
    {
        uint _2544 = _2059 + 3u;
        uint _2548 = _2059 + 11u;
        float _2562 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2544].w)) * _935) * 0.949999988079071044921875);
        float _2563 = _2562 * _2562;
        float _2564 = cbLight._m0[_2544].x + _883;
        float _2565 = cbLight._m0[_2544].y + _884;
        float _2566 = cbLight._m0[_2544].z + _885;
        float _2570 = inversesqrt(dot(vec3(_2564, _2565, _2566), vec3(_2564, _2565, _2566)));
        float _2571 = _2570 * _2564;
        float _2572 = _2570 * _2565;
        float _2573 = _2570 * _2566;
        float _2574 = dot(vec3(_803, _804, _805), vec3(cbLight._m0[_2544].xyz));
        float _4449 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2577 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _2578 = dot(vec3(_803, _804, _805), vec3(_2571, _2572, _2573));
        float _4460 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
        float _2581 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _2582 = dot(vec3(cbLight._m0[_2544].xyz), vec3(_2571, _2572, _2573));
        float _4471 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2586 = _2563 * _2563;
        float _2590 = ((_2581 * _2581) * (_2586 + (-1.0))) + 1.0;
        float _2597 = exp2(log2(1.0 - (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0)))) * 5.0);
        float _2604 = 1.0 - _2563;
        float _2614 = (0.5 / (((_2224 * ((_2577 * _2604) + _2563)) + 9.9999999392252902907785028219223e-09) + (((_2224 * _2604) + _2563) * _2577))) * _2577;
        float _4482 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2616 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_2586 / ((_2590 * _2590) * 3.141590118408203125));
        float _2617 = isnan(1.0) ? _2075 : (isnan(_2075) ? 1.0 : min(_2075, 1.0));
        _2533 = (((((_2597 * _2246) + _1005) * cbLight._m0[_2548].x) * _2616) * _2617) + _2419;
        _2535 = (((((_2597 * _2248) + _1007) * cbLight._m0[_2548].y) * _2616) * _2617) + _2421;
        _2537 = (((((_2597 * _2249) + _1008) * cbLight._m0[_2548].z) * _2616) * _2617) + _2423;
    }
    float _2751;
    float _2753;
    float _2755;
    float _2757;
    float _2759;
    float _2761;
    if (_2057.y == 0u)
    {
        float _2692 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2693 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2692;
        float _2694 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2692;
        float _2695 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2692;
        uvec4 _2707 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2708 = _2707.x;
        uint _2719 = uint((float(_2707.y) * floor(float(uint(cbSceneParam._m0[85u].y * _892) / _2708))) + floor(float(uint(cbSceneParam._m0[85u].x * _891) / _2708)));
        float _2729 = (log2(_2695 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2730 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        uint _2733 = uint(isnan(14.0) ? _2730 : (isnan(_2730) ? 14.0 : min(_2730, 14.0)));
        uvec4 _2738 = texelFetch(g_lightClusterGridBuffer, int(((_2733 << 2u) + (_2719 << 6u)) >> 2u));
        uint _2739 = _2738.x;
        uint _2740 = _2707.z;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        if (((((1u << ((_2740 >> 4u) & 15u)) + 4294967295u) & _2739) == 0u) || ((_2740 & 240u) == 0u))
        {
            _2858 = 0.0;
            _2860 = 0.0;
            _2862 = 0.0;
            _2864 = 0.0;
            _2866 = 0.0;
            _2868 = 0.0;
        }
        else
        {
            float _2859;
            float _2861;
            float _2863;
            float _2865;
            float _2867;
            float _2869;
            float _3002 = 0.0;
            float _3003 = 0.0;
            float _3004 = 0.0;
            float _3005 = 0.0;
            float _3006 = 0.0;
            float _3007 = 0.0;
            uint _3008 = 0u;
            uint _3017;
            bool _3018;
            for (;;)
            {
                _3017 = texelFetch(g_lightClassification, int((((_2733 << 5u) + (_2719 << 9u)) + (_3008 << 2u)) >> 2u)).x;
                _3018 = _3017 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_3018)
                {
                    frontier_phi_63_pred = _3007;
                    frontier_phi_63_pred_1 = _3006;
                    frontier_phi_63_pred_2 = _3005;
                    frontier_phi_63_pred_3 = _3004;
                    frontier_phi_63_pred_4 = _3003;
                    frontier_phi_63_pred_5 = _3002;
                }
                else
                {
                    float _3126;
                    float _3127;
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    uint _3132;
                    _3126 = _3002;
                    _3127 = _3003;
                    _3128 = _3004;
                    _3129 = _3005;
                    _3130 = _3006;
                    _3131 = _3007;
                    _3132 = _3017;
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    for (;;)
                    {
                        uint _3136 = uint(findLSB(_3132)) + (_3008 << 5u);
                        uint _3133 = (_3132 + 4294967295u) & _3132;
                        uint _3138 = _3136 * 48u;
                        vec4 _3152 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3138)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 3u)).x));
                        uint _3158 = (_3136 * 48u) + 4u;
                        vec4 _3171 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3158)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 3u)).x));
                        uint _3177 = (_3136 * 48u) + 8u;
                        vec3 _3188 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3177)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 2u)).x));
                        float _3192 = _3152.x - _2693;
                        float _3193 = _3152.y - _2694;
                        float _3194 = _3152.z - _2695;
                        float _3195 = dot(vec3(_3192, _3193, _3194), vec3(_3192, _3193, _3194));
                        float _3198 = inversesqrt(_3195);
                        float _3199 = _3198 * _3192;
                        float _3200 = _3198 * _3193;
                        float _3201 = _3198 * _3194;
                        float _3202 = dot(vec3(_916, _919, _922), vec3(_3199, _3200, _3201));
                        float _3207 = 1.0 - (_3195 * _3152.w);
                        float _4508 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                        float _3208 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                        float _3209 = sqrt(_3195) * _3171.w;
                        float _3212 = 1.39999997615814208984375 / (_3209 + 1.39999997615814208984375);
                        float _3213 = _3212 * _3212;
                        float _3216 = ((1.0 - _3213) * _3202) + _3213;
                        float _3219 = _3209 * _3209;
                        float _3223 = ((isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0))) * _3208) / ((_3219 * 0.699999988079071044921875) + 1.0);
                        float _3227 = (-0.0) - _2693;
                        float _3228 = (-0.0) - _2694;
                        float _3229 = (-0.0) - _2695;
                        float _3233 = inversesqrt(dot(vec3(_3227, _3228, _3229), vec3(_3227, _3228, _3229)));
                        float _3234 = _3233 * _3227;
                        float _3235 = _3233 * _3228;
                        float _3236 = _3233 * _3229;
                        float _3243 = exp2(log2(1.0 / ((_3219 * 3.5) + 5.0)) * 0.25);
                        float _3244 = 1.0 - _1036;
                        float _3251 = sqrt(1.0 - ((1.0 - (_3244 * _3244)) * (1.0 - (_3243 * _3243))));
                        float _3252 = _3251 * _3251;
                        float _3253 = _3252 * _3252;
                        float _3254 = _3234 + _3199;
                        float _3255 = _3235 + _3200;
                        float _3256 = _3236 + _3201;
                        float _3260 = inversesqrt(dot(vec3(_3254, _3255, _3256), vec3(_3254, _3255, _3256)));
                        float _3264 = dot(vec3(_916, _919, _922), vec3(_3234, _3235, _3236));
                        float _4524 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                        float _3267 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                        float _3268 = dot(vec3(_916, _919, _922), vec3(_3260 * _3254, _3260 * _3255, _3260 * _3256));
                        float _4535 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                        float _3271 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                        float _3275 = ((_3271 * _3271) * (_3253 + (-1.0))) + 1.0;
                        float _3276 = _3212 * _3252;
                        float _3277 = _3276 * _3276;
                        float _3280 = ((1.0 - _3277) * _3202) + _3277;
                        float _4546 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                        float _3281 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                        float _3282 = 1.0 - _3252;
                        float _3292 = (0.5 / (((_3281 * ((_3267 * _3282) + _3252)) + 9.9999999392252902907785028219223e-09) + (((_3281 * _3282) + _3252) * _3267))) * _3281;
                        float _4557 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                        float _3303 = (((_3253 * 3.1415927410125732421875) * (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0)))) / ((_3275 * _3275) * ((_3219 * 2.1991131305694580078125) + 3.141590118408203125))) * _3208;
                        _3061 = (_3223 * _3171.x) + _3129;
                        _3062 = (_3223 * _3171.y) + _3130;
                        _3063 = (_3223 * _3171.z) + _3131;
                        _3058 = (_3303 * _3188.x) + _3126;
                        _3059 = (_3303 * _3188.y) + _3127;
                        _3060 = (_3303 * _3188.z) + _3128;
                        if (_3133 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3126 = _3058;
                            _3127 = _3059;
                            _3128 = _3060;
                            _3129 = _3061;
                            _3130 = _3062;
                            _3131 = _3063;
                            _3132 = _3133;
                        }
                    }
                    frontier_phi_63_pred = _3063;
                    frontier_phi_63_pred_1 = _3062;
                    frontier_phi_63_pred_2 = _3061;
                    frontier_phi_63_pred_3 = _3060;
                    frontier_phi_63_pred_4 = _3059;
                    frontier_phi_63_pred_5 = _3058;
                }
                _2869 = frontier_phi_63_pred;
                _2867 = frontier_phi_63_pred_1;
                _2865 = frontier_phi_63_pred_2;
                _2863 = frontier_phi_63_pred_3;
                _2861 = frontier_phi_63_pred_4;
                _2859 = frontier_phi_63_pred_5;
                uint _3009 = _3008 + 1u;
                if (_3009 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3002 = _2859;
                    _3003 = _2861;
                    _3004 = _2863;
                    _3005 = _2865;
                    _3006 = _2867;
                    _3007 = _2869;
                    _3008 = _3009;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2858 = _2859;
            _2860 = _2861;
            _2862 = _2863;
            _2864 = _2865;
            _2866 = _2867;
            _2868 = _2869;
        }
        uvec4 _2872 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2873 = _2872.z;
        uint _2875 = (_2873 >> 8u) & 15u;
        float _2970;
        float _2972;
        float _2974;
        float _2976;
        float _2978;
        float _2980;
        if (((4294967295u << _2875) & _2739) == 0u)
        {
            _2970 = _2858;
            _2972 = _2860;
            _2974 = _2862;
            _2976 = _2864;
            _2978 = _2866;
            _2980 = _2868;
        }
        else
        {
            float _2995 = inversesqrt(dot(vec3(_2693, _2694, _2695), vec3(_2693, _2694, _2695)));
            float _2996 = _2995 * _2693;
            float _2997 = _2995 * _2694;
            float _2998 = _2995 * _2695;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2875 < ((_2873 >> 12u) & 15u))
            {
                float _2971;
                float _2973;
                float _2975;
                float _2977;
                float _2979;
                float _2981;
                float _3109 = _2858;
                float _3110 = _2860;
                float _3111 = _2862;
                float _3112 = _2864;
                float _3113 = _2866;
                float _3114 = _2868;
                uint _3115 = _2875;
                uint _3124;
                bool _3125;
                for (;;)
                {
                    _3124 = texelFetch(g_lightClassification, int((((_2733 << 5u) + (_2719 << 9u)) + (_3115 << 2u)) >> 2u)).x;
                    _3125 = _3124 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3125)
                    {
                        frontier_phi_69_pred = _3114;
                        frontier_phi_69_pred_1 = _3113;
                        frontier_phi_69_pred_2 = _3112;
                        frontier_phi_69_pred_3 = _3111;
                        frontier_phi_69_pred_4 = _3110;
                        frontier_phi_69_pred_5 = _3109;
                    }
                    else
                    {
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3605;
                        float _3606;
                        float _3321 = _3109;
                        float _3322 = _3110;
                        float _3323 = _3111;
                        float _3324 = _3112;
                        float _3325 = _3113;
                        float _3326 = _3114;
                        uint _3327 = _3124;
                        uint _3328;
                        vec4 _3353;
                        float _3354;
                        vec4 _3369;
                        vec3 _3381;
                        vec4 _3396;
                        vec4 _3411;
                        float _3457;
                        bool _3458;
                        for (;;)
                        {
                            uint _3338 = ((_3115 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3327));
                            _3328 = (_3327 + 4294967295u) & _3327;
                            uint _3340 = _3338 * 40u;
                            _3353 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 3u)).x));
                            _3354 = _3353.w;
                            uint _3356 = (_3338 * 40u) + 4u;
                            _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            uint _3371 = (_3338 * 40u) + 8u;
                            _3381 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3371)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 2u)).x));
                            uint _3383 = (_3338 * 40u) + 16u;
                            _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            uint _3398 = (_3338 * 40u) + 20u;
                            _3411 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 3u)).x));
                            uint _3413 = (_3338 * 40u) + 24u;
                            vec4 _3426 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 3u)).x));
                            uint _3432 = (_3338 * 40u) + 28u;
                            vec4 _3445 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 3u)).x));
                            _3457 = fma(_2695, _3445.z, fma(_2694, _3445.y, _3445.x * _2693)) + _3445.w;
                            _3458 = !((fma(_2695, _3426.z, fma(_2694, _3426.y, _3426.x * _2693)) + _3426.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3458)
                            {
                                float _3485 = _3353.x - _2693;
                                float _3486 = _3353.y - _2694;
                                float _3487 = _3353.z - _2695;
                                float _3488 = dot(vec3(_3485, _3486, _3487), vec3(_3485, _3486, _3487));
                                float _3491 = inversesqrt(_3488);
                                float _3492 = _3491 * _3485;
                                float _3493 = _3491 * _3486;
                                float _3494 = _3491 * _3487;
                                float _3498 = 1.0 - (_3488 / (_3354 * _3354));
                                float _4568 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3499 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                                float _3503 = sqrt(_3488) * _3369.w;
                                float _3505 = 1.39999997615814208984375 / (_3503 + 1.39999997615814208984375);
                                float _3506 = _3505 * _3505;
                                float _3509 = ((1.0 - _3506) * dot(vec3(_3492, _3493, _3494), vec3(_916, _919, _922))) + _3506;
                                float _3512 = _3503 * _3503;
                                float _3516 = (fma(_2695, _3396.z, fma(_2694, _3396.y, _3396.x * _2693)) + _3396.w) / _3457;
                                float _3517 = (fma(_2695, _3411.z, fma(_2694, _3411.y, _3411.x * _2693)) + _3411.w) / _3457;
                                float _3521 = 1.0 - dot(vec2(_3516, _3517), vec2(_3516, _3517));
                                float _4584 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3522 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                                float _3523 = _3522 * (((isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0))) * _3499) / ((_3512 * 0.699999988079071044921875) + 1.0));
                                float _3535 = exp2(log2(1.0 / ((_3512 * 3.5) + 5.0)) * 0.25);
                                float _3536 = 1.0 - _1036;
                                float _3543 = sqrt(1.0 - ((1.0 - (_3536 * _3536)) * (1.0 - (_3535 * _3535))));
                                float _3544 = _3543 * _3543;
                                float _3545 = _3544 * _3544;
                                float _3546 = _3492 - _2996;
                                float _3547 = _3493 - _2997;
                                float _3548 = _3494 - _2998;
                                float _3552 = inversesqrt(dot(vec3(_3546, _3547, _3548), vec3(_3546, _3547, _3548)));
                                float _3556 = dot(vec3(_916, _919, _922), vec3((-0.0) - _2996, (-0.0) - _2997, (-0.0) - _2998));
                                float _4595 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                                float _3559 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                                float _3560 = dot(vec3(_916, _919, _922), vec3(_3552 * _3546, _3552 * _3547, _3552 * _3548));
                                float _4606 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                                float _3563 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                                float _3567 = ((_3563 * _3563) * (_3545 + (-1.0))) + 1.0;
                                float _3568 = _3505 * _3544;
                                float _3569 = _3568 * _3568;
                                float _3575 = ((1.0 - _3569) * dot(vec3(_916, _919, _922), vec3(_3492, _3493, _3494))) + _3569;
                                float _4617 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                                float _3576 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                                float _3577 = 1.0 - _3544;
                                float _3587 = (0.5 / (((_3576 * ((_3559 * _3577) + _3544)) + 9.9999999392252902907785028219223e-09) + (((_3576 * _3577) + _3544) * _3559))) * _3576;
                                float _4628 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                                float _3597 = (_3522 * _3499) * (((_3545 * 3.1415927410125732421875) * (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0)))) / ((_3567 * _3567) * ((_3512 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3523 * _3369.z;
                                frontier_phi_75_pred_1 = _3523 * _3369.y;
                                frontier_phi_75_pred_2 = _3523 * _3369.x;
                                frontier_phi_75_pred_3 = _3597 * _3381.z;
                                frontier_phi_75_pred_4 = _3597 * _3381.y;
                                frontier_phi_75_pred_5 = _3597 * _3381.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3606 = frontier_phi_75_pred;
                            _3605 = frontier_phi_75_pred_1;
                            _3604 = frontier_phi_75_pred_2;
                            _3603 = frontier_phi_75_pred_3;
                            _3602 = frontier_phi_75_pred_4;
                            _3601 = frontier_phi_75_pred_5;
                            _3311 = _3604 + _3324;
                            _3312 = _3605 + _3325;
                            _3313 = _3606 + _3326;
                            _3308 = _3601 + _3321;
                            _3309 = _3602 + _3322;
                            _3310 = _3603 + _3323;
                            if (_3328 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3321 = _3308;
                                _3322 = _3309;
                                _3323 = _3310;
                                _3324 = _3311;
                                _3325 = _3312;
                                _3326 = _3313;
                                _3327 = _3328;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3313;
                        frontier_phi_69_pred_1 = _3312;
                        frontier_phi_69_pred_2 = _3311;
                        frontier_phi_69_pred_3 = _3310;
                        frontier_phi_69_pred_4 = _3309;
                        frontier_phi_69_pred_5 = _3308;
                    }
                    _2981 = frontier_phi_69_pred;
                    _2979 = frontier_phi_69_pred_1;
                    _2977 = frontier_phi_69_pred_2;
                    _2975 = frontier_phi_69_pred_3;
                    _2973 = frontier_phi_69_pred_4;
                    _2971 = frontier_phi_69_pred_5;
                    uint _3116 = _3115 + 1u;
                    if (_3116 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3109 = _2971;
                        _3110 = _2973;
                        _3111 = _2975;
                        _3112 = _2977;
                        _3113 = _2979;
                        _3114 = _2981;
                        _3115 = _3116;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2981;
                frontier_phi_57_58_ladder_1 = _2979;
                frontier_phi_57_58_ladder_2 = _2977;
                frontier_phi_57_58_ladder_3 = _2975;
                frontier_phi_57_58_ladder_4 = _2973;
                frontier_phi_57_58_ladder_5 = _2971;
            }
            else
            {
                frontier_phi_57_58_ladder = _2868;
                frontier_phi_57_58_ladder_1 = _2866;
                frontier_phi_57_58_ladder_2 = _2864;
                frontier_phi_57_58_ladder_3 = _2862;
                frontier_phi_57_58_ladder_4 = _2860;
                frontier_phi_57_58_ladder_5 = _2858;
            }
            _2970 = frontier_phi_57_58_ladder_5;
            _2972 = frontier_phi_57_58_ladder_4;
            _2974 = frontier_phi_57_58_ladder_3;
            _2976 = frontier_phi_57_58_ladder_2;
            _2978 = frontier_phi_57_58_ladder_1;
            _2980 = frontier_phi_57_58_ladder;
        }
        float _2985 = isnan(1.0) ? _1020 : (isnan(_1020) ? 1.0 : min(_1020, 1.0));
        _2751 = (_2985 * _2976) + _2188;
        _2753 = (_2985 * _2978) + _2190;
        _2755 = (_2985 * _2980) + _2192;
        _2757 = ((_2970 * _1005) * _2985) + _2533;
        _2759 = ((_2972 * _1007) * _2985) + _2535;
        _2761 = ((_2974 * _1008) * _2985) + _2537;
    }
    else
    {
        _2751 = _2188;
        _2753 = _2190;
        _2755 = _2192;
        _2757 = _2533;
        _2759 = _2535;
        _2761 = _2537;
    }
    uint _2767 = _949 + uint(cbMatDynParam._m0[0u].w);
    float _4644 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _4655 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _4666 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _2792 = (((isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2751 + ((isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))) * _1020))) + ((_2757 + ((isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0))) * _1828)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2767].x * ((((_612 + (_482 * _434)) - (_612 * _482)) + cbMtdParam._m0[13u].x) + ((((((_749.x - _746) * _727) + _746) * cbMtdParam._m0[11u].x) + ((cbMtdParam._m0[22u].y * _680) * cbMtdParam._m0[12u].x)) * _689)));
    float _2794 = ((cbInstanceData._m0[_2767].y * ((((_613 + (_482 * _435)) - (_613 * _482)) + cbMtdParam._m0[13u].y) + ((((((_749.y - _747) * _727) + _747) * cbMtdParam._m0[11u].y) + ((cbMtdParam._m0[22u].y * (((_669.y - _664.y) * _648) + _664.y)) * cbMtdParam._m0[12u].y)) * _689))) + ((_2759 + ((isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0))) * _1828)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * (_2753 + ((isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))) * _1020)));
    float _2796 = ((cbInstanceData._m0[_2767].z * ((((_614 + (_482 * _436)) - (_614 * _482)) + cbMtdParam._m0[13u].z) + ((((((_749.z - _748) * _727) + _748) * cbMtdParam._m0[11u].z) + ((cbMtdParam._m0[22u].y * (((_669.z - _664.z) * _648) + _664.z)) * cbMtdParam._m0[12u].z)) * _689))) + ((_2761 + ((isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0))) * _1828)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_2755 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _1020)));
    uint _2800 = _948 + 6u;
    float _2808 = _891 / cbSceneParam._m0[86u].x;
    float _2809 = _892 / cbSceneParam._m0[86u].y;
    vec4 _2823 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2808, _2809, (log2((isnan(cbSceneParam._m0[77u].w) ? _826 : (isnan(_826) ? cbSceneParam._m0[77u].w : min(_826, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2825 = _2823.x;
    float _2826 = _2823.y;
    float _2827 = _2823.z;
    float _2828 = _2823.w;
    float _2920;
    float _2922;
    float _2924;
    float _2926;
    if (_826 > cbSceneParam._m0[78u].w)
    {
        float _2883 = isnan(_826) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _826 : min(cbSceneParam._m0[80u].w, _826));
        float _2884 = _2883 / _826;
        float _2895 = _2884 * _876;
        float _2896 = _877 * _2884;
        float _2897 = (-0.0) - _2896;
        float _2898 = _2884 * _878;
        float _2900 = (cbSceneParam._m0[77u].w * _2897) / _2883;
        float _2901 = _2900 + cbSceneParam._m0[79u].w;
        float _2902 = cbSceneParam._m0[79u].w - _2896;
        float _2908 = sqrt(((_2895 * _2895) + (_2896 * _2896)) + (_2898 * _2898));
        float _2911 = (1.0 - (cbSceneParam._m0[77u].w / _2883)) * _2908;
        float _2916 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2918 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3071;
        if (abs((_2897 - _2900) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3071 = ((((_2901 > 0.0) ? exp2(_2916 * _2901) : (2.0 - exp2(_2918 * _2901))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2911;
        }
        else
        {
            float _3031 = 1.0 / cbSceneParam._m0[80u].x;
            float _3032 = isnan(_2902) ? _2901 : (isnan(_2901) ? _2902 : max(_2901, _2902));
            float _3033 = isnan(_2902) ? _2901 : (isnan(_2901) ? _2902 : min(_2901, _2902));
            float _3042 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : min(_3032, 0.0));
            float _3043 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : min(_3033, 0.0));
            _3071 = ((abs(_2908 / _2897) * cbSceneParam._m0[80u].y) * ((((_3042 - _3043) * 2.0) - ((exp2(_2916 * (isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0)))) - exp2(_2916 * (isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0))))) * _3031)) - ((exp2(_2918 * _3042) - exp2(_2918 * _3043)) * _3031))) + (_2911 * cbSceneParam._m0[80u].z);
        }
        vec4 _3073 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2808, _2809, 1.0), 0.0);
        float _3082 = exp2((_3071 * (-1.44269502162933349609375)) * (1.0 - _3073.w));
        float _3083 = log2(_3082);
        float _3099 = log2(_2828);
        _2920 = (exp2(_3099 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3083 * cbSceneParam._m0[78u].x)) * _3073.x) / cbSceneParam._m0[78u].x)) + _2825;
        _2922 = (exp2(_3099 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3083 * cbSceneParam._m0[78u].y)) * _3073.y) / cbSceneParam._m0[78u].y)) + _2826;
        _2924 = (exp2(_3099 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3083 * cbSceneParam._m0[78u].z)) * _3073.z) / cbSceneParam._m0[78u].z)) + _2827;
        _2926 = _3082 * _2828;
    }
    else
    {
        _2920 = _2825;
        _2922 = _2826;
        _2924 = _2827;
        _2926 = _2828;
    }
    float _2938 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2939 = _2938 == 3.0;
    float _2940 = log2(_2926);
    float _2947 = exp2(_2940 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0)));
    float _2948 = exp2(_2940 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0)));
    float _2949 = exp2(_2940 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0)));
    float _2958 = (_2938 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2958 * (_2939 ? _2947 : (_2947 + (cbSceneParam._m0[72u].w * _2920)));
    SV_Target.y = _2958 * (_2939 ? _2948 : (_2948 + (cbSceneParam._m0[72u].w * _2922)));
    SV_Target.z = _2958 * (_2939 ? _2949 : (_2949 + (cbSceneParam._m0[72u].w * _2924)));
    SV_Target.w = cbInstanceData._m0[_2800].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2800].w;
}


