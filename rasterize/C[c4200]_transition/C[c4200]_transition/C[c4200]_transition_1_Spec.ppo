#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[25];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D C_c4200_transition_snp_0_Texture2D_8;
layout(set = 0, binding = 6) uniform texture2D C_c4200_transition_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D C_c4200_transition_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;

float _723;
uint _2172;
uint _2173;
uint _2174;
uint _2435;
uint _2436;
uint _2437;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = _195 * NORMAL.x;
    float _197 = _195 * NORMAL.y;
    float _198 = _195 * NORMAL.z;
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210;
    float _211;
    float _212;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
    }
    else
    {
        _210 = _196;
        _211 = _197;
        _212 = _198;
    }
    vec4 _227 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _235 = cbMtdParam._m0[20u].w * _227.x;
    vec4 _248 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _260 = cbMtdParam._m0[10u].x * _248.x;
    float _261 = cbMtdParam._m0[10u].y * _248.y;
    float _262 = cbMtdParam._m0[10u].z * _248.z;
    float _268 = cbMtdParam._m0[18u].w - (cbMtdParam._m0[18u].w * _248.w);
    float _272 = _260 - (_268 * _260);
    float _273 = _261 - (_268 * _261);
    float _274 = _262 - (_268 * _262);
    vec4 _290 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _298 = (_290.x * 2.0) + (-1.0);
    float _300 = (_290.y * 2.0) + (-1.0);
    float _301 = dot(vec2(_298, _300), vec2(_298, _300));
    float _2683 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _307 = sqrt(1.0 - (isnan(1.0) ? _2683 : (isnan(_2683) ? 1.0 : min(_2683, 1.0))));
    float _308 = _290.z * cbMtdParam._m0[17u].y;
    float _311 = fma(_307, _210, fma(_300, _202 * TANGENT.x, (_188 * _180) * _298));
    float _314 = fma(_307, _211, fma(_300, _202 * TANGENT.y, (_188 * _181) * _298));
    float _317 = fma(_307, _212, fma(_300, _202 * TANGENT.z, (_188 * _182) * _298));
    float _321 = inversesqrt(dot(vec3(_311, _314, _317), vec3(_311, _314, _317)));
    float _322 = _321 * _311;
    float _323 = _321 * _314;
    float _324 = _321 * _317;
    float _2694 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _325 = isnan(1.0) ? _2694 : (isnan(_2694) ? 1.0 : min(_2694, 1.0));
    float _2705 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _326 = isnan(1.0) ? _2705 : (isnan(_2705) ? 1.0 : min(_2705, 1.0));
    float _2716 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _327 = isnan(1.0) ? _2716 : (isnan(_2716) ? 1.0 : min(_2716, 1.0));
    float _2727 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _328 = isnan(1.0) ? _2727 : (isnan(_2727) ? 1.0 : min(_2727, 1.0));
    float _344 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _386 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _396 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _386);
    float _397 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _386);
    float _398 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _386);
    float _402 = inversesqrt(dot(vec3(_396, _397, _398), vec3(_396, _397, _398)));
    float _403 = _396 * _402;
    float _404 = _397 * _402;
    float _405 = _398 * _402;
    float _411 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _412 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _431 = fma(_324, cbSceneParam._m0[5u].z, fma(_323, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _322));
    float _434 = fma(_324, cbSceneParam._m0[6u].z, fma(_323, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _322));
    float _437 = fma(_324, cbSceneParam._m0[7u].z, fma(_323, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _322));
    vec4 _439 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _441 = _439.x;
    float _443 = _439.w;
    float _444 = _441 * _441;
    float _464 = (((_444 - _325) + (_443 * _325)) * cbMtdParam._m0[3u].x) + _325;
    float _465 = (((_444 - _326) + (_443 * _326)) * cbMtdParam._m0[3u].x) + _326;
    float _466 = (((_444 - _327) + (_443 * _327)) * cbMtdParam._m0[3u].x) + _327;
    float _467 = (((_439.y - _328) + (_443 * _328)) * cbMtdParam._m0[3u].x) + _328;
    vec4 _476 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _411, cbSceneParam._m0[86u].y * _412));
    float _479 = _476.x * TEXCOORD_4;
    float _480 = dot(vec3(_322, _323, _324), vec3(_403, _404, _405));
    float _483 = _480 * 2.0;
    float _487 = (_483 * _322) - _403;
    float _488 = (_483 * _323) - _404;
    float _489 = (_483 * _324) - _405;
    float _493 = abs(dot(vec3(_403, _404, _405), vec3(_322, _323, _324)));
    float _2738 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _494 = isnan(1.0) ? _2738 : (isnan(_2738) ? 1.0 : min(_2738, 1.0));
    float _500 = sqrt(_467);
    float _512 = exp2((_500 * 5.0) * log2(1.0 - (_494 * 0.999000012874603271484375))) / (4.0 - (_500 * 3.0));
    float _518 = (1.0 - _512) * ((_500 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _519 = _512 * _500;
    float _547 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _551 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _555 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _722;
    float _724;
    float _725;
    float _726;
    float _727;
    float _728;
    float _729;
    float _730;
    float _731;
    float _732;
    float _733;
    float _734;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _582 = fma(_555, cbModelParam._m0[26u].z, fma(_551, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _547));
        float _586 = fma(_555, cbModelParam._m0[27u].z, fma(_551, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _547));
        float _590 = fma(_555, cbModelParam._m0[28u].z, fma(_551, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _547));
        float _615 = _547 + _322;
        float _616 = _551 + _323;
        float _617 = _555 + _324;
        float _627 = fma(_617, cbModelParam._m0[26u].z, fma(_616, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _615)) - _582;
        float _628 = fma(_617, cbModelParam._m0[27u].z, fma(_616, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _615)) - _586;
        float _629 = fma(_617, cbModelParam._m0[28u].z, fma(_616, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _615)) - _590;
        float _633 = inversesqrt(dot(vec3(_627, _628, _629), vec3(_627, _628, _629)));
        float _646 = ((_633 * _627) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_582 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _647 = ((_633 * _628) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_586 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _648 = ((_633 * _629) / cbModelParam._m0[34u].z) + ((((((_590 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _651 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_646, _647, _648), 0.0);
        vec4 _658 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_646, _647, _648), 0.0);
        vec4 _665 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_646, _647, _648), 0.0);
        vec4 _672 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_646, _647, _648), 0.0);
        float _685 = exp2((_651.w + (-0.5)) * 20.0) * 2.0;
        float _695 = exp2((_658.w + (-0.5)) * 20.0) * 2.0;
        float _705 = exp2((_665.w + (-0.5)) * 20.0) * 2.0;
        float _715 = exp2((_672.w + (-0.5)) * 20.0) * 2.0;
        float _716 = _715 * (_672.x + (-0.5));
        float _717 = _715 * (_672.y + (-0.5));
        float _718 = _715 * (_672.z + (-0.5));
        _722 = _685 * (_651.z + (-0.5));
        _724 = _685 * (_651.y + (-0.5));
        _725 = _685 * (_651.x + (-0.5));
        _726 = _695 * (_658.z + (-0.5));
        _727 = _695 * (_658.y + (-0.5));
        _728 = _695 * (_658.x + (-0.5));
        _729 = _705 * (_665.z + (-0.5));
        _730 = _705 * (_665.y + (-0.5));
        _731 = _705 * (_665.x + (-0.5));
        _732 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        _733 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        _734 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    }
    else
    {
        _722 = _723;
        _724 = _723;
        _725 = _723;
        _726 = _723;
        _727 = _723;
        _728 = _723;
        _729 = _723;
        _730 = _723;
        _731 = _723;
        _732 = _723;
        _733 = _723;
        _734 = _723;
    }
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _760 = fma(_555, cbModelParam._m0[30u].z, fma(_551, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _547));
        float _764 = fma(_555, cbModelParam._m0[31u].z, fma(_551, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _547));
        float _768 = fma(_555, cbModelParam._m0[32u].z, fma(_551, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _547));
        float _791 = _547 + _322;
        float _792 = _551 + _323;
        float _793 = _555 + _324;
        float _803 = fma(_793, cbModelParam._m0[30u].z, fma(_792, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _791)) - _760;
        float _804 = fma(_793, cbModelParam._m0[31u].z, fma(_792, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _791)) - _764;
        float _805 = fma(_793, cbModelParam._m0[32u].z, fma(_792, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _791)) - _768;
        float _809 = inversesqrt(dot(vec3(_803, _804, _805), vec3(_803, _804, _805)));
        float _822 = ((_809 * _803) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_760 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _823 = ((_809 * _804) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_764 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _824 = ((_809 * _805) / cbModelParam._m0[35u].z) + ((((((_768 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_822, _823, _824), 0.0);
        float _859 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _869 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _879 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _889 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_847.x + (-0.5));
        float _891 = _889 * (_847.y + (-0.5));
        float _892 = _889 * (_847.z + (-0.5));
        _896 = _859 * (_826.z + (-0.5));
        _897 = _859 * (_826.y + (-0.5));
        _898 = _859 * (_826.x + (-0.5));
        _899 = _869 * (_833.z + (-0.5));
        _900 = _869 * (_833.y + (-0.5));
        _901 = _869 * (_833.x + (-0.5));
        _902 = _879 * (_840.z + (-0.5));
        _903 = _879 * (_840.y + (-0.5));
        _904 = _879 * (_840.x + (-0.5));
        _905 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        _906 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        _907 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    }
    else
    {
        _896 = _723;
        _897 = _723;
        _898 = _723;
        _899 = _723;
        _900 = _723;
        _901 = _723;
        _902 = _723;
        _903 = _723;
        _904 = _723;
        _905 = _723;
        _906 = _723;
        _907 = _723;
    }
    float _922 = _487 * 0.5;
    float _923 = _488 * 0.5;
    float _924 = _489 * 0.5;
    float _925 = dot(vec4(_922, _923, _924, 1.0), vec4(_898, _901, _904, _907));
    float _928 = dot(vec4(_922, _923, _924, 1.0), vec4(_897, _900, _903, _906));
    float _931 = dot(vec4(_922, _923, _924, 1.0), vec4(_896, _899, _902, _905));
    float _966;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _938 = dot(vec4(_922, _923, _924, 1.0), vec4(_722, _726, _729, _732));
        float _942 = dot(vec4(_922, _923, _924, 1.0), vec4(_724, _727, _730, _733));
        float _946 = dot(vec4(_922, _923, _924, 1.0), vec4(_725, _728, _731, _734));
        float _953 = dot(vec4(cbModelParam._m0[39u]), vec4(_922, _923, _924, 1.0));
        _966 = dot(vec3(isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0)), isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0)), isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_953) ? 0.0 : (isnan(0.0) ? _953 : max(0.0, _953))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _966 = 1.0;
    }
    float _977;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _968 = dot(vec4(cbModelParam._m0[40u]), vec4(_922, _923, _924, 1.0));
        _977 = dot(vec3(isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0)), isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0)), isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_968) ? 0.0 : (isnan(0.0) ? _968 : max(0.0, _968))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _977 = 1.0;
    }
    float _981 = (_977 * cbModelParam._m0[1u].x) + (_966 * (1.0 - cbModelParam._m0[1u].x));
    float _988 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _467);
    float _989 = isnan(_988) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _988 : min(cbModelParam._m0[25u].z, _988));
    float _1072;
    float _1074;
    float _1076;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1039 = fma(_555, cbModelParam._m0[13u].z, fma(_551, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _547)) + cbModelParam._m0[13u].w;
        float _1043 = fma(_555, cbModelParam._m0[14u].z, fma(_551, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _547)) + cbModelParam._m0[14u].w;
        float _1047 = fma(_555, cbModelParam._m0[15u].z, fma(_551, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _547)) + cbModelParam._m0[15u].w;
        float _1050 = fma(_489, cbModelParam._m0[13u].z, fma(_488, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _487));
        float _1053 = fma(_489, cbModelParam._m0[14u].z, fma(_488, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _487));
        float _1056 = fma(_489, cbModelParam._m0[15u].z, fma(_488, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _487));
        float _1084;
        if (_1050 > 0.0)
        {
            _1084 = abs((1.0 - _1039) / _1050);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1050 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1039 + 1.0) / _1050);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1084 = frontier_phi_16_14_ladder;
        }
        float _1431;
        if (_1053 > 0.0)
        {
            _1431 = abs((1.0 - _1043) / _1053);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1053 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1043 + 1.0) / _1053);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1431 = frontier_phi_25_21_ladder;
        }
        float _1637;
        if (_1056 > 0.0)
        {
            _1637 = abs((1.0 - _1047) / _1056);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1056 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1047 + 1.0) / _1056);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1637 = frontier_phi_37_32_ladder;
        }
        float _1639 = isnan(_1431) ? _1084 : (isnan(_1084) ? _1431 : min(_1084, _1431));
        float _1640 = isnan(_1637) ? _1639 : (isnan(_1639) ? _1637 : min(_1639, _1637));
        float _1644 = (_1640 * _1050) + _1039;
        float _1645 = (_1640 * _1053) + _1043;
        float _1646 = (_1640 * _1056) + _1047;
        float _1647 = _1640 * 9.9999997473787516355514526367188e-05;
        float _1649 = (-1.0) - _1647;
        float _1651 = _1647 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1646 > _1651) || ((_1646 < _1649) || ((_1645 > _1651) || ((_1645 < _1649) || ((_1644 < _1649) || (_1644 > _1651))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1838 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1646, cbModelParam._m0[9u].z, fma(_1645, cbModelParam._m0[9u].y, _1644 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1646, cbModelParam._m0[10u].z, fma(_1645, cbModelParam._m0[10u].y, _1644 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1646, cbModelParam._m0[11u].z, fma(_1645, cbModelParam._m0[11u].y, _1644 * cbModelParam._m0[11u].x))), _989);
            frontier_phi_15_37_ladder = _1838.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1838.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1838.x * cbModelParam._m0[1u].y;
        }
        _1072 = frontier_phi_15_37_ladder_2;
        _1074 = frontier_phi_15_37_ladder_1;
        _1076 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1060 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_487, _488, _489), _989);
        _1072 = _1060.x * cbModelParam._m0[1u].y;
        _1074 = _1060.y * cbModelParam._m0[1u].y;
        _1076 = _1060.z * cbModelParam._m0[1u].y;
    }
    float _1080 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _467);
    float _1081 = isnan(_1080) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1080 : min(cbModelParam._m0[25u].w, _1080));
    float _1173;
    float _1175;
    float _1177;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1137 = fma(_555, cbModelParam._m0[21u].z, fma(_551, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _547)) + cbModelParam._m0[21u].w;
        float _1141 = fma(_555, cbModelParam._m0[22u].z, fma(_551, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _547)) + cbModelParam._m0[22u].w;
        float _1145 = fma(_555, cbModelParam._m0[23u].z, fma(_551, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _547)) + cbModelParam._m0[23u].w;
        float _1148 = fma(_489, cbModelParam._m0[21u].z, fma(_488, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _487));
        float _1151 = fma(_489, cbModelParam._m0[22u].z, fma(_488, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _487));
        float _1154 = fma(_489, cbModelParam._m0[23u].z, fma(_488, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _487));
        float _1436;
        if (_1148 > 0.0)
        {
            _1436 = abs((1.0 - _1137) / _1148);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1148 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1137 + 1.0) / _1148);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1436 = frontier_phi_27_23_ladder;
        }
        float _1664;
        if (_1151 > 0.0)
        {
            _1664 = abs((1.0 - _1141) / _1151);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1151 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1141 + 1.0) / _1151);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1664 = frontier_phi_39_34_ladder;
        }
        float _1957;
        if (_1154 > 0.0)
        {
            _1957 = abs((1.0 - _1145) / _1154);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1154 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1145 + 1.0) / _1154);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _1957 = frontier_phi_50_45_ladder;
        }
        float _1959 = isnan(_1664) ? _1436 : (isnan(_1436) ? _1664 : min(_1436, _1664));
        float _1960 = isnan(_1957) ? _1959 : (isnan(_1959) ? _1957 : min(_1959, _1957));
        float _1964 = (_1960 * _1148) + _1137;
        float _1965 = (_1960 * _1151) + _1141;
        float _1966 = (_1960 * _1154) + _1145;
        float _1967 = _1960 * 9.9999997473787516355514526367188e-05;
        float _1968 = (-1.0) - _1967;
        float _1970 = _1967 + 1.0;
        float frontier_phi_24_50_ladder;
        float frontier_phi_24_50_ladder_1;
        float frontier_phi_24_50_ladder_2;
        if ((_1966 > _1970) || ((_1966 < _1968) || ((_1965 > _1970) || ((_1965 < _1968) || ((_1964 < _1968) || (_1964 > _1970))))))
        {
            frontier_phi_24_50_ladder = 0.0;
            frontier_phi_24_50_ladder_1 = 0.0;
            frontier_phi_24_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2075 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1966, cbModelParam._m0[17u].z, fma(_1965, cbModelParam._m0[17u].y, _1964 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1966, cbModelParam._m0[18u].z, fma(_1965, cbModelParam._m0[18u].y, _1964 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1966, cbModelParam._m0[19u].z, fma(_1965, cbModelParam._m0[19u].y, _1964 * cbModelParam._m0[19u].x))), _1081);
            frontier_phi_24_50_ladder = _2075.x * cbModelParam._m0[1u].z;
            frontier_phi_24_50_ladder_1 = _2075.z * cbModelParam._m0[1u].z;
            frontier_phi_24_50_ladder_2 = _2075.y * cbModelParam._m0[1u].z;
        }
        _1173 = frontier_phi_24_50_ladder;
        _1175 = frontier_phi_24_50_ladder_2;
        _1177 = frontier_phi_24_50_ladder_1;
    }
    else
    {
        vec4 _1157 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_487, _488, _489), _1081);
        _1173 = _1157.x * cbModelParam._m0[1u].z;
        _1175 = _1157.y * cbModelParam._m0[1u].z;
        _1177 = _1157.z * cbModelParam._m0[1u].z;
    }
    float _1190 = (((_518 * _464) + _519) * _479) * ((cbModelParam._m0[1u].w * (_1173 - _1072)) + _1072);
    float _1192 = (((_518 * _465) + _519) * _479) * ((cbModelParam._m0[1u].w * (_1175 - _1074)) + _1074);
    float _1194 = (((_518 * _466) + _519) * _479) * ((cbModelParam._m0[1u].w * (_1177 - _1076)) + _1076);
    float _1215 = fma(_1194, cbSceneParam._m0[89u].z, fma(_1192, cbSceneParam._m0[89u].y, _1190 * cbSceneParam._m0[89u].x));
    float _1218 = fma(_1194, cbSceneParam._m0[90u].z, fma(_1192, cbSceneParam._m0[90u].y, _1190 * cbSceneParam._m0[90u].x));
    float _1221 = fma(_1194, cbSceneParam._m0[91u].z, fma(_1192, cbSceneParam._m0[91u].y, _1190 * cbSceneParam._m0[91u].x));
    uint _1228 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1232 = floatBitsToUint(cbInstanceData._m0[_1228 + 5u]);
    uint _1234 = _1232.x * 14u;
    uint _1235 = _1234 + 13u;
    float _1241 = _479 + (-1.0);
    float _1245 = (cbLight._m0[_1235].x * _1241) + 1.0;
    float _1246 = (cbLight._m0[_1235].y * _1241) + 1.0;
    float _1247 = (cbLight._m0[_1235].w * _1241) + 1.0;
    uint _1251 = _1234 + 8u;
    float _1267 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1234].w)) * _467) * 0.949999988079071044921875);
    float _1268 = _1267 * _1267;
    float _1269 = cbLight._m0[_1234].x + _403;
    float _1270 = cbLight._m0[_1234].y + _404;
    float _1271 = cbLight._m0[_1234].z + _405;
    float _1275 = inversesqrt(dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271)));
    float _1276 = _1275 * _1269;
    float _1277 = _1275 * _1270;
    float _1278 = _1275 * _1271;
    float _1279 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_1234].xyz));
    float _2864 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
    float _1282 = isnan(1.0) ? _2864 : (isnan(_2864) ? 1.0 : min(_2864, 1.0));
    float _2875 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _1283 = isnan(1.0) ? _2875 : (isnan(_2875) ? 1.0 : min(_2875, 1.0));
    float _1284 = dot(vec3(_322, _323, _324), vec3(_1276, _1277, _1278));
    float _2886 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
    float _1287 = isnan(1.0) ? _2886 : (isnan(_2886) ? 1.0 : min(_2886, 1.0));
    float _1288 = dot(vec3(cbLight._m0[_1234].xyz), vec3(_1276, _1277, _1278));
    float _2897 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
    float _1292 = _1268 * _1268;
    float _1296 = ((_1287 * _1287) * (_1292 + (-1.0))) + 1.0;
    float _1304 = exp2(log2(1.0 - (isnan(1.0) ? _2897 : (isnan(_2897) ? 1.0 : min(_2897, 1.0)))) * 5.0);
    float _1305 = 1.0 - _464;
    float _1306 = 1.0 - _465;
    float _1307 = 1.0 - _466;
    float _1314 = 1.0 - _1268;
    float _1325 = (0.5 / (((_1283 * ((_1282 * _1314) + _1268)) + 9.9999999392252902907785028219223e-09) + (((_1283 * _1314) + _1268) * _1282))) * _1282;
    float _2908 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
    float _1327 = (isnan(1.0) ? _2908 : (isnan(_2908) ? 1.0 : min(_2908, 1.0))) * (_1292 / ((_1296 * _1296) * 3.141590118408203125));
    float _1328 = isnan(1.0) ? _1245 : (isnan(_1245) ? 1.0 : min(_1245, 1.0));
    uint _1338 = _1234 | 1u;
    uint _1342 = _1234 + 9u;
    float _1356 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1338].w)) * _467) * 0.949999988079071044921875);
    float _1357 = _1356 * _1356;
    float _1358 = cbLight._m0[_1338].x + _403;
    float _1359 = cbLight._m0[_1338].y + _404;
    float _1360 = cbLight._m0[_1338].z + _405;
    float _1364 = inversesqrt(dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360)));
    float _1365 = _1364 * _1358;
    float _1366 = _1364 * _1359;
    float _1367 = _1364 * _1360;
    float _1368 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_1338].xyz));
    float _2924 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
    float _1371 = isnan(1.0) ? _2924 : (isnan(_2924) ? 1.0 : min(_2924, 1.0));
    float _1372 = dot(vec3(_322, _323, _324), vec3(_1365, _1366, _1367));
    float _2935 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
    float _1375 = isnan(1.0) ? _2935 : (isnan(_2935) ? 1.0 : min(_2935, 1.0));
    float _1376 = dot(vec3(cbLight._m0[_1338].xyz), vec3(_1365, _1366, _1367));
    float _2946 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
    float _1380 = _1357 * _1357;
    float _1384 = ((_1375 * _1375) * (_1380 + (-1.0))) + 1.0;
    float _1391 = exp2(log2(1.0 - (isnan(1.0) ? _2946 : (isnan(_2946) ? 1.0 : min(_2946, 1.0)))) * 5.0);
    float _1398 = 1.0 - _1357;
    float _1408 = (0.5 / (((_1283 * ((_1371 * _1398) + _1357)) + 9.9999999392252902907785028219223e-09) + (((_1283 * _1398) + _1357) * _1371))) * _1371;
    float _2957 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
    float _1410 = (isnan(1.0) ? _2957 : (isnan(_2957) ? 1.0 : min(_2957, 1.0))) * (_1380 / ((_1384 * _1384) * 3.141590118408203125));
    float _1411 = isnan(1.0) ? _1246 : (isnan(_1246) ? 1.0 : min(_1246, 1.0));
    float _1421 = (((((_1391 * _1305) + _464) * cbLight._m0[_1342].x) * _1410) * _1411) + (((((_1304 * _1305) + _464) * cbLight._m0[_1251].x) * _1327) * _1328);
    float _1422 = (((((_1391 * _1306) + _465) * cbLight._m0[_1342].y) * _1410) * _1411) + (((((_1304 * _1306) + _465) * cbLight._m0[_1251].y) * _1327) * _1328);
    float _1423 = (((((_1391 * _1307) + _466) * cbLight._m0[_1342].z) * _1410) * _1411) + (((((_1304 * _1307) + _466) * cbLight._m0[_1251].z) * _1327) * _1328);
    uvec4 _1428 = floatBitsToUint(cbLight._m0[_1234 + 12u]);
    float _1441;
    float _1443;
    float _1445;
    if (_1428.x == 0u)
    {
        _1441 = _1421;
        _1443 = _1422;
        _1445 = _1423;
    }
    else
    {
        float _1451 = (cbLight._m0[_1235].z * _1241) + 1.0;
        uint _1452 = _1234 + 2u;
        uint _1456 = _1234 + 10u;
        float _1470 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1452].w)) * _467) * 0.949999988079071044921875);
        float _1471 = _1470 * _1470;
        float _1472 = cbLight._m0[_1452].x + _403;
        float _1473 = cbLight._m0[_1452].y + _404;
        float _1474 = cbLight._m0[_1452].z + _405;
        float _1478 = inversesqrt(dot(vec3(_1472, _1473, _1474), vec3(_1472, _1473, _1474)));
        float _1479 = _1478 * _1472;
        float _1480 = _1478 * _1473;
        float _1481 = _1478 * _1474;
        float _1482 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_1452].xyz));
        float _2973 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1485 = isnan(1.0) ? _2973 : (isnan(_2973) ? 1.0 : min(_2973, 1.0));
        float _1486 = dot(vec3(_322, _323, _324), vec3(_1479, _1480, _1481));
        float _2984 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1489 = isnan(1.0) ? _2984 : (isnan(_2984) ? 1.0 : min(_2984, 1.0));
        float _1490 = dot(vec3(cbLight._m0[_1452].xyz), vec3(_1479, _1480, _1481));
        float _2995 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1494 = _1471 * _1471;
        float _1498 = ((_1489 * _1489) * (_1494 + (-1.0))) + 1.0;
        float _1505 = exp2(log2(1.0 - (isnan(1.0) ? _2995 : (isnan(_2995) ? 1.0 : min(_2995, 1.0)))) * 5.0);
        float _1512 = 1.0 - _1471;
        float _1522 = (0.5 / (((_1283 * ((_1485 * _1512) + _1471)) + 9.9999999392252902907785028219223e-09) + (((_1283 * _1512) + _1471) * _1485))) * _1485;
        float _3006 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1524 = (isnan(1.0) ? _3006 : (isnan(_3006) ? 1.0 : min(_3006, 1.0))) * (_1494 / ((_1498 * _1498) * 3.141590118408203125));
        float _1525 = isnan(1.0) ? _1451 : (isnan(_1451) ? 1.0 : min(_1451, 1.0));
        _1441 = (((((_1505 * _1305) + _464) * cbLight._m0[_1456].x) * _1524) * _1525) + _1421;
        _1443 = (((((_1505 * _1306) + _465) * cbLight._m0[_1456].y) * _1524) * _1525) + _1422;
        _1445 = (((((_1505 * _1307) + _466) * cbLight._m0[_1456].z) * _1524) * _1525) + _1423;
    }
    float _1543;
    float _1545;
    float _1547;
    if (_1428.y == 0u)
    {
        _1543 = _1441;
        _1545 = _1443;
        _1547 = _1445;
    }
    else
    {
        uint _1554 = _1234 + 3u;
        uint _1558 = _1234 + 11u;
        float _1572 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1554].w)) * _467) * 0.949999988079071044921875);
        float _1573 = _1572 * _1572;
        float _1574 = cbLight._m0[_1554].x + _403;
        float _1575 = cbLight._m0[_1554].y + _404;
        float _1576 = cbLight._m0[_1554].z + _405;
        float _1580 = inversesqrt(dot(vec3(_1574, _1575, _1576), vec3(_1574, _1575, _1576)));
        float _1581 = _1580 * _1574;
        float _1582 = _1580 * _1575;
        float _1583 = _1580 * _1576;
        float _1584 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_1554].xyz));
        float _3022 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1587 = isnan(1.0) ? _3022 : (isnan(_3022) ? 1.0 : min(_3022, 1.0));
        float _1588 = dot(vec3(_322, _323, _324), vec3(_1581, _1582, _1583));
        float _3033 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1591 = isnan(1.0) ? _3033 : (isnan(_3033) ? 1.0 : min(_3033, 1.0));
        float _1592 = dot(vec3(cbLight._m0[_1554].xyz), vec3(_1581, _1582, _1583));
        float _3044 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1596 = _1573 * _1573;
        float _1600 = ((_1591 * _1591) * (_1596 + (-1.0))) + 1.0;
        float _1607 = exp2(log2(1.0 - (isnan(1.0) ? _3044 : (isnan(_3044) ? 1.0 : min(_3044, 1.0)))) * 5.0);
        float _1614 = 1.0 - _1573;
        float _1624 = (0.5 / (((_1283 * ((_1587 * _1614) + _1573)) + 9.9999999392252902907785028219223e-09) + (((_1283 * _1614) + _1573) * _1587))) * _1587;
        float _3055 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1626 = (isnan(1.0) ? _3055 : (isnan(_3055) ? 1.0 : min(_3055, 1.0))) * (_1596 / ((_1600 * _1600) * 3.141590118408203125));
        float _1627 = isnan(1.0) ? _1247 : (isnan(_1247) ? 1.0 : min(_1247, 1.0));
        _1543 = (((((_1607 * _1305) + _464) * cbLight._m0[_1558].x) * _1626) * _1627) + _1441;
        _1545 = (((((_1607 * _1306) + _465) * cbLight._m0[_1558].y) * _1626) * _1627) + _1443;
        _1547 = (((((_1607 * _1307) + _466) * cbLight._m0[_1558].z) * _1626) * _1627) + _1445;
    }
    float _1768;
    float _1770;
    float _1772;
    if (_1232.y == 0u)
    {
        float _1708 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1709 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1708;
        float _1710 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1708;
        float _1711 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1708;
        uvec4 _1723 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1724 = _1723.x;
        uint _1735 = uint((float(_1723.y) * floor(float(uint(cbSceneParam._m0[85u].y * _412) / _1724))) + floor(float(uint(cbSceneParam._m0[85u].x * _411) / _1724)));
        float _1745 = (log2(_1711 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1746 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        uint _1749 = uint(isnan(14.0) ? _1746 : (isnan(_1746) ? 14.0 : min(_1746, 14.0)));
        uvec4 _1754 = texelFetch(g_lightClusterGridBuffer, int(((_1749 << 2u) + (_1735 << 6u)) >> 2u));
        uint _1755 = _1754.x;
        uint _1756 = _1723.z;
        float _1847;
        float _1849;
        float _1851;
        if (((((1u << ((_1756 >> 4u) & 15u)) + 4294967295u) & _1755) == 0u) || ((_1756 & 240u) == 0u))
        {
            _1847 = 0.0;
            _1849 = 0.0;
            _1851 = 0.0;
        }
        else
        {
            float _1848;
            float _1850;
            float _1852;
            float _2006 = 0.0;
            float _2007 = 0.0;
            float _2008 = 0.0;
            uint _2009 = 0u;
            uint _2018;
            bool _2019;
            for (;;)
            {
                _2018 = texelFetch(g_lightClassification, int((((_1749 << 5u) + (_1735 << 9u)) + (_2009 << 2u)) >> 2u)).x;
                _2019 = _2018 == 0u;
                float frontier_phi_59_pred;
                float frontier_phi_59_pred_1;
                float frontier_phi_59_pred_2;
                if (_2019)
                {
                    frontier_phi_59_pred = _2008;
                    frontier_phi_59_pred_1 = _2007;
                    frontier_phi_59_pred_2 = _2006;
                }
                else
                {
                    float _2142;
                    float _2143;
                    float _2144;
                    uint _2145;
                    _2142 = _2006;
                    _2143 = _2007;
                    _2144 = _2008;
                    _2145 = _2018;
                    float _2080;
                    float _2081;
                    float _2082;
                    for (;;)
                    {
                        uint _2149 = uint(findLSB(_2145)) + (_2009 << 5u);
                        uint _2146 = (_2145 + 4294967295u) & _2145;
                        uint _2151 = _2149 * 48u;
                        vec4 _2165 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2151)).x, texelFetch(g_PointLightRenderingBuffer, int(_2151 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2151 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2151 + 3u)).x));
                        uint _2182 = (_2149 * 48u) + 8u;
                        vec3 _2193 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2182)).x, texelFetch(g_PointLightRenderingBuffer, int(_2182 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2182 + 2u)).x));
                        float _2197 = _2165.x - _1709;
                        float _2198 = _2165.y - _1710;
                        float _2199 = _2165.z - _1711;
                        float _2200 = dot(vec3(_2197, _2198, _2199), vec3(_2197, _2198, _2199));
                        float _2203 = inversesqrt(_2200);
                        float _2204 = _2203 * _2197;
                        float _2205 = _2203 * _2198;
                        float _2206 = _2203 * _2199;
                        float _2212 = 1.0 - (_2200 * _2165.w);
                        float _3081 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
                        float _2214 = sqrt(_2200) * uintBitsToFloat(uvec4(_2172, _2173, _2174, texelFetch(g_PointLightRenderingBuffer, int(((_2149 * 48u) + 4u) + 3u)).x)).w;
                        float _2218 = _2214 * _2214;
                        float _2219 = (-0.0) - _1709;
                        float _2220 = (-0.0) - _1710;
                        float _2221 = (-0.0) - _1711;
                        float _2225 = inversesqrt(dot(vec3(_2219, _2220, _2221), vec3(_2219, _2220, _2221)));
                        float _2226 = _2225 * _2219;
                        float _2227 = _2225 * _2220;
                        float _2228 = _2225 * _2221;
                        float _2236 = exp2(log2(1.0 / ((_2218 * 3.5) + 5.0)) * 0.25);
                        float _2237 = 1.0 - _500;
                        float _2244 = sqrt(1.0 - ((1.0 - (_2237 * _2237)) * (1.0 - (_2236 * _2236))));
                        float _2245 = _2244 * _2244;
                        float _2246 = _2245 * _2245;
                        float _2247 = _2226 + _2204;
                        float _2248 = _2227 + _2205;
                        float _2249 = _2228 + _2206;
                        float _2253 = inversesqrt(dot(vec3(_2247, _2248, _2249), vec3(_2247, _2248, _2249)));
                        float _2257 = dot(vec3(_431, _434, _437), vec3(_2226, _2227, _2228));
                        float _3092 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
                        float _2260 = isnan(1.0) ? _3092 : (isnan(_3092) ? 1.0 : min(_3092, 1.0));
                        float _2261 = dot(vec3(_431, _434, _437), vec3(_2253 * _2247, _2253 * _2248, _2253 * _2249));
                        float _3103 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
                        float _2264 = isnan(1.0) ? _3103 : (isnan(_3103) ? 1.0 : min(_3103, 1.0));
                        float _2268 = ((_2264 * _2264) * (_2246 + (-1.0))) + 1.0;
                        float _2269 = (1.39999997615814208984375 / (_2214 + 1.39999997615814208984375)) * _2245;
                        float _2270 = _2269 * _2269;
                        float _2273 = ((1.0 - _2270) * dot(vec3(_431, _434, _437), vec3(_2204, _2205, _2206))) + _2270;
                        float _3114 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
                        float _2274 = isnan(1.0) ? _3114 : (isnan(_3114) ? 1.0 : min(_3114, 1.0));
                        float _2275 = 1.0 - _2245;
                        float _2285 = (0.5 / (((_2274 * ((_2260 * _2275) + _2245)) + 9.9999999392252902907785028219223e-09) + (((_2274 * _2275) + _2245) * _2260))) * _2274;
                        float _3125 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
                        float _2296 = (((_2246 * 3.1415927410125732421875) * (isnan(1.0) ? _3125 : (isnan(_3125) ? 1.0 : min(_3125, 1.0)))) / ((_2268 * _2268) * ((_2218 * 2.1991131305694580078125) + 3.141590118408203125))) * (isnan(1.0) ? _3081 : (isnan(_3081) ? 1.0 : min(_3081, 1.0)));
                        _2080 = (_2296 * _2193.x) + _2142;
                        _2081 = (_2296 * _2193.y) + _2143;
                        _2082 = (_2296 * _2193.z) + _2144;
                        if (_2146 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2142 = _2080;
                            _2143 = _2081;
                            _2144 = _2082;
                            _2145 = _2146;
                        }
                    }
                    frontier_phi_59_pred = _2082;
                    frontier_phi_59_pred_1 = _2081;
                    frontier_phi_59_pred_2 = _2080;
                }
                _1852 = frontier_phi_59_pred;
                _1850 = frontier_phi_59_pred_1;
                _1848 = frontier_phi_59_pred_2;
                uint _2010 = _2009 + 1u;
                if (_2010 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2006 = _1848;
                    _2007 = _1850;
                    _2008 = _1852;
                    _2009 = _2010;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1847 = _1848;
            _1849 = _1850;
            _1851 = _1852;
        }
        uvec4 _1855 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1856 = _1855.z;
        uint _1858 = (_1856 >> 8u) & 15u;
        float _1983;
        float _1985;
        float _1987;
        if (((4294967295u << _1858) & _1755) == 0u)
        {
            _1983 = _1847;
            _1985 = _1849;
            _1987 = _1851;
        }
        else
        {
            float _1999 = inversesqrt(dot(vec3(_1709, _1710, _1711), vec3(_1709, _1710, _1711)));
            float _2000 = _1999 * _1709;
            float _2001 = _1999 * _1710;
            float _2002 = _1999 * _1711;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            if (_1858 < ((_1856 >> 12u) & 15u))
            {
                float _1984;
                float _1986;
                float _1988;
                float _2128 = _1847;
                float _2129 = _1849;
                float _2130 = _1851;
                uint _2131 = _1858;
                uint _2140;
                bool _2141;
                for (;;)
                {
                    _2140 = texelFetch(g_lightClassification, int((((_1749 << 5u) + (_1735 << 9u)) + (_2131 << 2u)) >> 2u)).x;
                    _2141 = _2140 == 0u;
                    float frontier_phi_65_pred;
                    float frontier_phi_65_pred_1;
                    float frontier_phi_65_pred_2;
                    if (_2141)
                    {
                        frontier_phi_65_pred = _2130;
                        frontier_phi_65_pred_1 = _2129;
                        frontier_phi_65_pred_2 = _2128;
                    }
                    else
                    {
                        float _2301;
                        float _2302;
                        float _2303;
                        float _2566;
                        float _2567;
                        float _2568;
                        float _2311 = _2128;
                        float _2312 = _2129;
                        float _2313 = _2130;
                        uint _2314 = _2140;
                        uint _2315;
                        uint _2325;
                        vec4 _2340;
                        float _2341;
                        vec3 _2353;
                        vec4 _2369;
                        vec4 _2384;
                        float _2431;
                        bool _2432;
                        for (;;)
                        {
                            _2325 = ((_2131 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2314));
                            _2315 = (_2314 + 4294967295u) & _2314;
                            uint _2327 = _2325 * 40u;
                            _2340 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2327 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2327 + 3u)).x));
                            _2341 = _2340.w;
                            uint _2343 = (_2325 * 40u) + 8u;
                            _2353 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2343 + 2u)).x));
                            uint _2356 = (_2325 * 40u) + 16u;
                            _2369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2356 + 3u)).x));
                            uint _2371 = (_2325 * 40u) + 20u;
                            _2384 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2371)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2371 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2371 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2371 + 3u)).x));
                            uint _2387 = (_2325 * 40u) + 24u;
                            vec4 _2400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2387 + 3u)).x));
                            uint _2406 = (_2325 * 40u) + 28u;
                            vec4 _2419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2406 + 3u)).x));
                            _2431 = fma(_1711, _2419.z, fma(_1710, _2419.y, _2419.x * _1709)) + _2419.w;
                            _2432 = !((fma(_1711, _2400.z, fma(_1710, _2400.y, _2400.x * _1709)) + _2400.w) <= 0.0);
                            float frontier_phi_71_pred;
                            float frontier_phi_71_pred_1;
                            float frontier_phi_71_pred_2;
                            if (_2432)
                            {
                                float _2466 = _2340.x - _1709;
                                float _2467 = _2340.y - _1710;
                                float _2468 = _2340.z - _1711;
                                float _2469 = dot(vec3(_2466, _2467, _2468), vec3(_2466, _2467, _2468));
                                float _2472 = inversesqrt(_2469);
                                float _2473 = _2472 * _2466;
                                float _2474 = _2472 * _2467;
                                float _2475 = _2472 * _2468;
                                float _2479 = 1.0 - (_2469 / (_2341 * _2341));
                                float _3136 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
                                float _2481 = sqrt(_2469) * uintBitsToFloat(uvec4(_2435, _2436, _2437, texelFetch(g_SpotLightRenderingBuffer, int(((_2325 * 40u) + 4u) + 3u)).x)).w;
                                float _2484 = _2481 * _2481;
                                float _2485 = (fma(_1711, _2369.z, fma(_1710, _2369.y, _2369.x * _1709)) + _2369.w) / _2431;
                                float _2486 = (fma(_1711, _2384.z, fma(_1710, _2384.y, _2384.x * _1709)) + _2384.w) / _2431;
                                float _2490 = 1.0 - dot(vec2(_2485, _2486), vec2(_2485, _2486));
                                float _3147 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
                                float _2500 = exp2(log2(1.0 / ((_2484 * 3.5) + 5.0)) * 0.25);
                                float _2501 = 1.0 - _500;
                                float _2508 = sqrt(1.0 - ((1.0 - (_2501 * _2501)) * (1.0 - (_2500 * _2500))));
                                float _2509 = _2508 * _2508;
                                float _2510 = _2509 * _2509;
                                float _2511 = _2473 - _2000;
                                float _2512 = _2474 - _2001;
                                float _2513 = _2475 - _2002;
                                float _2517 = inversesqrt(dot(vec3(_2511, _2512, _2513), vec3(_2511, _2512, _2513)));
                                float _2521 = dot(vec3(_431, _434, _437), vec3((-0.0) - _2000, (-0.0) - _2001, (-0.0) - _2002));
                                float _3158 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
                                float _2524 = isnan(1.0) ? _3158 : (isnan(_3158) ? 1.0 : min(_3158, 1.0));
                                float _2525 = dot(vec3(_431, _434, _437), vec3(_2517 * _2511, _2517 * _2512, _2517 * _2513));
                                float _3169 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
                                float _2528 = isnan(1.0) ? _3169 : (isnan(_3169) ? 1.0 : min(_3169, 1.0));
                                float _2532 = ((_2528 * _2528) * (_2510 + (-1.0))) + 1.0;
                                float _2533 = (1.39999997615814208984375 / (_2481 + 1.39999997615814208984375)) * _2509;
                                float _2534 = _2533 * _2533;
                                float _2540 = ((1.0 - _2534) * dot(vec3(_431, _434, _437), vec3(_2473, _2474, _2475))) + _2534;
                                float _3180 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
                                float _2541 = isnan(1.0) ? _3180 : (isnan(_3180) ? 1.0 : min(_3180, 1.0));
                                float _2542 = 1.0 - _2509;
                                float _2552 = (0.5 / (((_2541 * ((_2524 * _2542) + _2509)) + 9.9999999392252902907785028219223e-09) + (((_2541 * _2542) + _2509) * _2524))) * _2541;
                                float _3191 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
                                float _2562 = ((isnan(1.0) ? _3147 : (isnan(_3147) ? 1.0 : min(_3147, 1.0))) * (isnan(1.0) ? _3136 : (isnan(_3136) ? 1.0 : min(_3136, 1.0)))) * (((_2510 * 3.1415927410125732421875) * (isnan(1.0) ? _3191 : (isnan(_3191) ? 1.0 : min(_3191, 1.0)))) / ((_2532 * _2532) * ((_2484 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_71_pred = _2562 * _2353.z;
                                frontier_phi_71_pred_1 = _2562 * _2353.y;
                                frontier_phi_71_pred_2 = _2562 * _2353.x;
                            }
                            else
                            {
                                frontier_phi_71_pred = 0.0;
                                frontier_phi_71_pred_1 = 0.0;
                                frontier_phi_71_pred_2 = 0.0;
                            }
                            _2568 = frontier_phi_71_pred;
                            _2567 = frontier_phi_71_pred_1;
                            _2566 = frontier_phi_71_pred_2;
                            _2301 = _2566 + _2311;
                            _2302 = _2567 + _2312;
                            _2303 = _2568 + _2313;
                            if (_2315 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2311 = _2301;
                                _2312 = _2302;
                                _2313 = _2303;
                                _2314 = _2315;
                                continue;
                            }
                        }
                        frontier_phi_65_pred = _2303;
                        frontier_phi_65_pred_1 = _2302;
                        frontier_phi_65_pred_2 = _2301;
                    }
                    _1988 = frontier_phi_65_pred;
                    _1986 = frontier_phi_65_pred_1;
                    _1984 = frontier_phi_65_pred_2;
                    uint _2132 = _2131 + 1u;
                    if (_2132 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2128 = _1984;
                        _2129 = _1986;
                        _2130 = _1988;
                        _2131 = _2132;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _1988;
                frontier_phi_52_53_ladder_1 = _1986;
                frontier_phi_52_53_ladder_2 = _1984;
            }
            else
            {
                frontier_phi_52_53_ladder = _1851;
                frontier_phi_52_53_ladder_1 = _1849;
                frontier_phi_52_53_ladder_2 = _1847;
            }
            _1983 = frontier_phi_52_53_ladder_2;
            _1985 = frontier_phi_52_53_ladder_1;
            _1987 = frontier_phi_52_53_ladder;
        }
        float _1992 = isnan(1.0) ? _479 : (isnan(_479) ? 1.0 : min(_479, 1.0));
        _1768 = ((_1983 * _464) * _1992) + _1543;
        _1770 = ((_1985 * _465) * _1992) + _1545;
        _1772 = ((_1987 * _466) * _1992) + _1547;
    }
    else
    {
        _1768 = _1543;
        _1770 = _1545;
        _1772 = _1547;
    }
    float _1774 = dot(vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375), vec3(_464, _465, _466));
    uint _1783 = _1228 + 6u;
    float _1788 = (cbInstanceData._m0[_1783].w * _235) * (((1.0 - _1774) * exp2(log2(1.0 - _494) * 5.0)) + _1774);
    float _1793 = _411 / cbSceneParam._m0[86u].x;
    float _1794 = _412 / cbSceneParam._m0[86u].y;
    vec4 _1808 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1793, _1794, (log2((isnan(cbSceneParam._m0[77u].w) ? _344 : (isnan(_344) ? cbSceneParam._m0[77u].w : min(_344, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1810 = _1808.x;
    float _1811 = _1808.y;
    float _1812 = _1808.z;
    float _1813 = _1808.w;
    float _1903;
    float _1905;
    float _1907;
    float _1909;
    if (_344 > cbSceneParam._m0[78u].w)
    {
        float _1866 = isnan(_344) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _344 : min(cbSceneParam._m0[80u].w, _344));
        float _1867 = _1866 / _344;
        float _1878 = _1867 * _396;
        float _1879 = _397 * _1867;
        float _1880 = (-0.0) - _1879;
        float _1881 = _1867 * _398;
        float _1883 = (cbSceneParam._m0[77u].w * _1880) / _1866;
        float _1884 = _1883 + cbSceneParam._m0[79u].w;
        float _1885 = cbSceneParam._m0[79u].w - _1879;
        float _1891 = sqrt(((_1878 * _1878) + (_1879 * _1879)) + (_1881 * _1881));
        float _1894 = (1.0 - (cbSceneParam._m0[77u].w / _1866)) * _1891;
        float _1899 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1901 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2090;
        if (abs((_1880 - _1883) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2090 = ((((_1884 > 0.0) ? exp2(_1899 * _1884) : (2.0 - exp2(_1901 * _1884))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1894;
        }
        else
        {
            float _2032 = 1.0 / cbSceneParam._m0[80u].x;
            float _2033 = isnan(_1885) ? _1884 : (isnan(_1884) ? _1885 : max(_1884, _1885));
            float _2034 = isnan(_1885) ? _1884 : (isnan(_1884) ? _1885 : min(_1884, _1885));
            float _2043 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : min(_2033, 0.0));
            float _2044 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : min(_2034, 0.0));
            _2090 = ((abs(_1891 / _1880) * cbSceneParam._m0[80u].y) * ((((_2043 - _2044) * 2.0) - ((exp2(_1899 * (isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0)))) - exp2(_1899 * (isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0))))) * _2032)) - ((exp2(_1901 * _2043) - exp2(_1901 * _2044)) * _2032))) + (_1894 * cbSceneParam._m0[80u].z);
        }
        vec4 _2092 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1793, _1794, 1.0), 0.0);
        float _2101 = exp2((_2090 * (-1.44269502162933349609375)) * (1.0 - _2092.w));
        float _2102 = log2(_2101);
        float _2118 = log2(_1813);
        _1903 = (exp2(_2118 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2102 * cbSceneParam._m0[78u].x)) * _2092.x) / cbSceneParam._m0[78u].x)) + _1810;
        _1905 = (exp2(_2118 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2102 * cbSceneParam._m0[78u].y)) * _2092.y) / cbSceneParam._m0[78u].y)) + _1811;
        _1907 = (exp2(_2118 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2102 * cbSceneParam._m0[78u].z)) * _2092.z) / cbSceneParam._m0[78u].z)) + _1812;
        _1909 = _2101 * _1813;
    }
    else
    {
        _1903 = _1810;
        _1905 = _1811;
        _1907 = _1812;
        _1909 = _1813;
    }
    bool _1925 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _1926 = log2(_1909);
    float _1933 = cbPerFrame._m0[3u].x * _235;
    float _1936 = ((_1933 * (_1768 + ((isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0))) * _981))) * cbInstanceData._m0[_1783].w) * exp2(_1926 * cbSceneParam._m0[78u].x);
    float _1939 = ((_1933 * (_1770 + ((isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0))) * _981))) * cbInstanceData._m0[_1783].w) * exp2(_1926 * cbSceneParam._m0[78u].y);
    float _1942 = ((_1933 * (_1772 + ((isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0))) * _981))) * cbInstanceData._m0[_1783].w) * exp2(_1926 * cbSceneParam._m0[78u].z);
    SV_Target.x = cbSceneParam._m0[72u].z * (_1925 ? _1936 : (_1936 + ((_1903 * _1788) * cbSceneParam._m0[72u].w)));
    SV_Target.y = (_1925 ? _1939 : (_1939 + ((_1905 * _1788) * cbSceneParam._m0[72u].w))) * cbSceneParam._m0[72u].z;
    SV_Target.z = (_1925 ? _1942 : (_1942 + ((_1907 * _1788) * cbSceneParam._m0[72u].w))) * cbSceneParam._m0[72u].z;
    SV_Target.w = _1788;
}


