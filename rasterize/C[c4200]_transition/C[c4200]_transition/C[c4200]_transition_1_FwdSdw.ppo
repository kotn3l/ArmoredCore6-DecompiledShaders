#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[25];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_c4200_transition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_c4200_transition_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_c4200_transition_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D C_c4200_transition_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_c4200_transition_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D C_c4200_transition_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_c4200_transition_snp_0_Texture2D_12;
layout(set = 0, binding = 8) uniform texture2D C_c4200_transition_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_c4200_transition_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1380;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238;
    float _239;
    float _240;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
    }
    else
    {
        _238 = _224;
        _239 = _225;
        _240 = _226;
    }
    vec4 _254 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _257 = _254.x;
    float _266 = cbMtdParam._m0[18u].y * 0.3333333432674407958984375;
    float _271 = fract(abs(_266));
    float _283 = cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x;
    float _286 = (_283 * cbMtdParam._m0[24u].x) + TEXCOORD.x;
    float _287 = (_283 * cbMtdParam._m0[24u].y) + TEXCOORD.y;
    vec4 _310 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((_283 * cbMtdParam._m0[23u].x) + TEXCOORD.x)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[23u].y * _283) + TEXCOORD.y)) + cbTextureTilingScale._m0[10u].w));
    float _314 = cbPerFrame._m0[22u].x * 2.0;
    float _316 = _314 * cbMtdParam._m0[19u].w;
    float _319 = (_310.x * 0.5) + (-0.25);
    float _322 = (_310.y * 0.5) + (-0.25);
    float _323 = _322 * cbMtdParam._m0[18u].z;
    float _325 = (-0.0) - (cbMtdParam._m0[18u].z * _319);
    float _326 = fract(_316);
    float _328 = fract(_316 + 0.5);
    float _329 = _326 * _325;
    float _330 = _323 * _326;
    float _333 = _328 * _325;
    float _334 = _323 * _328;
    float _340 = abs((_326 * 2.0) + (-1.0));
    vec4 _357 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_9, SS_DiffuseMap), vec2(((_329 + _286) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, ((_330 + _287) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _359 = _357.x;
    float _370 = (0.25 - ((((_266 >= ((-0.0) - _266)) ? _271 : ((-0.0) - _271)) * 3.0) - _257)) + ((((texture(sampler2D(C_c4200_transition_snp_0_Texture2D_9, SS_DiffuseMap), vec2(((_333 + _286) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, ((_334 + _287) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w)).x - _359) * _340) + _359) * 1.35000002384185791015625);
    float _373 = abs(_370 * cbMtdParam._m0[19u].z);
    float _377 = (((_373 * cbMtdParam._m0[19u].y) - _257) * _373) + _257;
    float _4007 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _379 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _390 = (cbMtdParam._m0[23u].z * _283) + TEXCOORD.x;
    float _391 = (cbMtdParam._m0[23u].w * _283) + TEXCOORD.y;
    vec4 _411 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_329 + _390) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_330 + _391) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _413 = _411.x;
    float _414 = _411.y;
    float _415 = _411.z;
    vec4 _416 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_333 + _390) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_334 + _391) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _430 = (((_416.x - _413) * _340) + _413) * cbMtdParam._m0[14u].x;
    float _431 = (((_416.y - _414) * _340) + _414) * cbMtdParam._m0[14u].y;
    float _432 = (((_416.z - _415) * _340) + _415) * cbMtdParam._m0[14u].z;
    float _436 = _430 - (_430 * _379);
    float _437 = _431 - (_431 * _379);
    float _438 = _432 - (_432 * _379);
    vec4 _456 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _461 = ceil(_370);
    float _4018 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _462 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _476 = (((cbMtdParam._m0[9u].x - cbMtdParam._m0[15u].x) * _462) + cbMtdParam._m0[15u].x) * _456.x;
    float _478 = (((cbMtdParam._m0[9u].y - cbMtdParam._m0[15u].y) * _462) + cbMtdParam._m0[15u].y) * _456.y;
    float _480 = (((cbMtdParam._m0[9u].z - cbMtdParam._m0[15u].z) * _462) + cbMtdParam._m0[15u].z) * _456.z;
    float _484 = exp2(log2(_379) * cbMtdParam._m0[19u].x);
    float _491 = (_484 * (_436 - _476)) + _476;
    float _492 = (_484 * (_437 - _478)) + _478;
    float _493 = (_484 * (_438 - _480)) + _480;
    vec4 _508 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _512 = _508.z;
    float _515 = (_508.x * 2.0) + (-1.0);
    float _516 = (_508.y * 2.0) + (-1.0);
    float _517 = dot(vec2(_515, _516), vec2(_515, _516));
    float _4029 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _522 = sqrt(1.0 - (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))));
    float _533 = (cbMtdParam._m0[24u].z * _283) + TEXCOORD.x;
    float _534 = (cbMtdParam._m0[24u].w * _283) + TEXCOORD.y;
    float _540 = _314 * cbMtdParam._m0[20u].z;
    float _541 = _322 * cbMtdParam._m0[20u].y;
    float _543 = (-0.0) - (cbMtdParam._m0[20u].y * _319);
    float _544 = fract(_540);
    float _546 = fract(_540 + 0.5);
    float _557 = abs((_544 * 2.0) + (-1.0));
    vec4 _573 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_11, SS_DiffuseMap), vec2((((_544 * _543) + _533) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_541 * _544) + _534) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _575 = _573.x;
    float _576 = _573.y;
    float _577 = _573.z;
    vec4 _578 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_11, SS_DiffuseMap), vec2((((_546 * _543) + _533) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_541 * _546) + _534) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _592 = (((_578.x - _575) * _557) + _575) * cbMtdParam._m0[16u].x;
    float _593 = (((_578.y - _576) * _557) + _576) * cbMtdParam._m0[16u].y;
    float _594 = (((_578.z - _577) * _557) + _577) * cbMtdParam._m0[16u].z;
    float _598 = _592 - (_592 * _462);
    float _599 = _593 - (_593 * _462);
    float _600 = _594 - (_594 * _462);
    float _617 = _314 * cbMtdParam._m0[21u].w;
    float _618 = _322 * cbMtdParam._m0[22u].x;
    float _620 = (-0.0) - (cbMtdParam._m0[22u].x * _319);
    float _621 = fract(_617);
    float _623 = fract(_617 + 0.5);
    float _634 = abs((_621 * 2.0) + (-1.0));
    vec4 _650 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_621 * _620) + TEXCOORD.x) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((_618 * _621) + TEXCOORD.y) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _655 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_623 * _620) + TEXCOORD.x) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((_618 * _623) + TEXCOORD.y) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _666 = ((_655.x - _650.x) * _634) + _650.x;
    float _673 = exp2(log2(_666 * cbMtdParam._m0[21u].z) * cbMtdParam._m0[21u].y);
    float _674 = isnan(cbMtdParam._m0[21u].x) ? _673 : (isnan(_673) ? cbMtdParam._m0[21u].x : max(_673, cbMtdParam._m0[21u].x));
    float _675 = isnan(cbMtdParam._m0[20u].x) ? _674 : (isnan(_674) ? cbMtdParam._m0[20u].x : min(_674, cbMtdParam._m0[20u].x));
    float _696 = _314 * cbMtdParam._m0[17u].z;
    float _697 = _322 * cbMtdParam._m0[17u].w;
    float _699 = (-0.0) - (cbMtdParam._m0[17u].w * _319);
    float _700 = fract(_696);
    float _702 = fract(_696 + 0.5);
    float _713 = abs((_700 * 2.0) + (-1.0));
    vec4 _730 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_700 * _699) + TEXCOORD.x) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_697 * _700) + TEXCOORD.y) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _732 = _730.x;
    float _733 = _730.y;
    float _734 = _730.z;
    vec4 _735 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_702 * _699) + TEXCOORD.x) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_697 * _702) + TEXCOORD.y) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _778 = fma(_522, _238, fma(_516, _230 * TANGENT.x, (_216 * _208) * _515));
    float _781 = fma(_522, _239, fma(_516, _230 * TANGENT.y, (_216 * _209) * _515));
    float _784 = fma(_522, _240, fma(_516, _230 * TANGENT.z, (_216 * _210) * _515));
    float _788 = inversesqrt(dot(vec3(_778, _781, _784), vec3(_778, _781, _784)));
    float _789 = _788 * _778;
    float _790 = _788 * _781;
    float _791 = _788 * _784;
    float _4050 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _792 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _4061 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _4072 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _4083 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _4094 = isnan(0.0) ? cbMtdParam._m0[17u].x : (isnan(cbMtdParam._m0[17u].x) ? 0.0 : max(cbMtdParam._m0[17u].x, 0.0));
    float _796 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _812 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _852 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _862 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _852);
    float _863 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _852);
    float _864 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _852);
    float _868 = inversesqrt(dot(vec3(_862, _863, _864), vec3(_862, _863, _864)));
    float _869 = _862 * _868;
    float _870 = _863 * _868;
    float _871 = _864 * _868;
    float _877 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _878 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _880 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _882 = _880.w;
    float _903 = fma(_791, cbSceneParam._m0[5u].z, fma(_790, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _789));
    float _906 = fma(_791, cbSceneParam._m0[6u].z, fma(_790, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _789));
    float _909 = fma(_791, cbSceneParam._m0[7u].z, fma(_790, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _789));
    vec4 _911 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _922 = (((_911.y - _792) + (_911.w * _792)) * cbMtdParam._m0[3u].x) + _792;
    uint _935 = uint(roundEven(NORMAL.w)) * 13u;
    uint _936 = _935 + 9u;
    uint _937 = _936 + uint(cbMatDynParam._m0[0u].w);
    float _943 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) * cbInstanceData._m0[_937].x;
    float _944 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) * cbInstanceData._m0[_937].y;
    float _945 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) * cbInstanceData._m0[_937].z;
    float _4105 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _946 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _4116 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _947 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _4127 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _948 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    vec4 _949 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _954 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _965 = (((_954.x - _796) + (_954.w * _796)) * cbMtdParam._m0[3u].x) + _796;
    float _978 = (cbMtdParam._m0[3u].x * (((_946 * _882) - _946) + _949.x)) + _946;
    float _979 = (cbMtdParam._m0[3u].x * (((_947 * _882) - _947) + _949.y)) + _947;
    float _980 = (cbMtdParam._m0[3u].x * (((_948 * _882) - _948) + _949.z)) + _948;
    float _981 = 1.0 - _965;
    float _982 = _981 * _978;
    float _983 = _981 * _979;
    float _984 = _981 * _980;
    float _989 = (_978 + (-0.039999999105930328369140625)) * _965;
    float _990 = (_979 + (-0.039999999105930328369140625)) * _965;
    float _991 = (_980 + (-0.039999999105930328369140625)) * _965;
    float _992 = _989 + 0.039999999105930328369140625;
    float _994 = _990 + 0.039999999105930328369140625;
    float _995 = _991 + 0.039999999105930328369140625;
    vec4 _1004 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _877, cbSceneParam._m0[86u].y * _878));
    float _1007 = _1004.x * TEXCOORD_4;
    float _1008 = dot(vec3(_789, _790, _791), vec3(_869, _870, _871));
    float _1011 = _1008 * 2.0;
    float _1015 = (_1011 * _789) - _869;
    float _1016 = (_1011 * _790) - _870;
    float _1017 = (_1011 * _791) - _871;
    float _1021 = abs(dot(vec3(_869, _870, _871), vec3(_789, _790, _791)));
    float _4138 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _1023 = sqrt(_922);
    float _1035 = exp2((_1023 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1023 * 3.0));
    float _1041 = (1.0 - _1035) * ((_1023 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1042 = _1035 * _1023;
    float _1070 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1074 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1078 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1379;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1105 = fma(_1078, cbModelParam._m0[26u].z, fma(_1074, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1070));
        float _1109 = fma(_1078, cbModelParam._m0[27u].z, fma(_1074, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1070));
        float _1113 = fma(_1078, cbModelParam._m0[28u].z, fma(_1074, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1070));
        float _1137 = _1070 + _789;
        float _1138 = _1074 + _790;
        float _1139 = _1078 + _791;
        float _1149 = fma(_1139, cbModelParam._m0[26u].z, fma(_1138, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1137)) - _1105;
        float _1150 = fma(_1139, cbModelParam._m0[27u].z, fma(_1138, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1137)) - _1109;
        float _1151 = fma(_1139, cbModelParam._m0[28u].z, fma(_1138, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1137)) - _1113;
        float _1155 = inversesqrt(dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151)));
        float _1168 = ((_1155 * _1149) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1105 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1169 = ((_1155 * _1150) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1109 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1170 = ((_1155 * _1151) / cbModelParam._m0[34u].z) + ((((((_1113 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        float _1207 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1173.x + (-0.5));
        float _1209 = _1207 * (_1173.y + (-0.5));
        float _1210 = _1207 * (_1173.z + (-0.5));
        float _1217 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1180.x + (-0.5));
        float _1219 = _1217 * (_1180.y + (-0.5));
        float _1220 = _1217 * (_1180.z + (-0.5));
        float _1227 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1187.x + (-0.5));
        float _1229 = _1227 * (_1187.y + (-0.5));
        float _1230 = _1227 * (_1187.z + (-0.5));
        float _1237 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1194.x + (-0.5));
        float _1239 = _1237 * (_1194.y + (-0.5));
        float _1240 = _1237 * (_1194.z + (-0.5));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = _1208 * 0.5;
        float _1245 = _1218 * 0.5;
        float _1246 = _1228 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1261 = (dot(vec3(_789, _790, _791), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _4164 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1271 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _4175 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _4186 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_1273 + 1.0))) + _1278) * _1241;
        float _1288 = _1209 * 0.5;
        float _1289 = _1219 * 0.5;
        float _1290 = _1229 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_789, _790, _791), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _4197 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _4208 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _4219 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_1315 + 1.0))) + _1320) * _1242;
        float _1330 = _1210 * 0.5;
        float _1331 = _1220 * 0.5;
        float _1332 = _1230 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_789, _790, _791), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _4230 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _4241 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _4252 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_1357 + 1.0))) + _1362) * _1243;
        _1379 = _1210;
        _1381 = _1209;
        _1382 = _1208;
        _1383 = _1220;
        _1384 = _1219;
        _1385 = _1218;
        _1386 = _1230;
        _1387 = _1229;
        _1388 = _1228;
        _1389 = _1243;
        _1390 = _1242;
        _1391 = _1241;
        _1392 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
        _1393 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
        _1394 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
    }
    else
    {
        _1379 = _1380;
        _1381 = _1380;
        _1382 = _1380;
        _1383 = _1380;
        _1384 = _1380;
        _1385 = _1380;
        _1386 = _1380;
        _1387 = _1380;
        _1388 = _1380;
        _1389 = _1380;
        _1390 = _1380;
        _1391 = _1380;
        _1392 = 0.0;
        _1393 = 0.0;
        _1394 = 0.0;
    }
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1420 = fma(_1078, cbModelParam._m0[30u].z, fma(_1074, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1070));
        float _1424 = fma(_1078, cbModelParam._m0[31u].z, fma(_1074, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1070));
        float _1428 = fma(_1078, cbModelParam._m0[32u].z, fma(_1074, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1070));
        float _1451 = _1070 + _789;
        float _1452 = _1074 + _790;
        float _1453 = _1078 + _791;
        float _1463 = fma(_1453, cbModelParam._m0[30u].z, fma(_1452, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1451)) - _1420;
        float _1464 = fma(_1453, cbModelParam._m0[31u].z, fma(_1452, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1451)) - _1424;
        float _1465 = fma(_1453, cbModelParam._m0[32u].z, fma(_1452, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1451)) - _1428;
        float _1469 = inversesqrt(dot(vec3(_1463, _1464, _1465), vec3(_1463, _1464, _1465)));
        float _1482 = ((_1469 * _1463) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1420 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1483 = ((_1469 * _1464) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1424 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1484 = ((_1469 * _1465) / cbModelParam._m0[35u].z) + ((((((_1428 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1486 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1482, _1483, _1484), 0.0);
        vec4 _1493 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1482, _1483, _1484), 0.0);
        vec4 _1500 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1482, _1483, _1484), 0.0);
        vec4 _1507 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1482, _1483, _1484), 0.0);
        float _1519 = exp2((_1486.w + (-0.5)) * 20.0) * 2.0;
        float _1520 = _1519 * (_1486.x + (-0.5));
        float _1521 = _1519 * (_1486.y + (-0.5));
        float _1522 = _1519 * (_1486.z + (-0.5));
        float _1529 = exp2((_1493.w + (-0.5)) * 20.0) * 2.0;
        float _1530 = _1529 * (_1493.x + (-0.5));
        float _1531 = _1529 * (_1493.y + (-0.5));
        float _1532 = _1529 * (_1493.z + (-0.5));
        float _1539 = exp2((_1500.w + (-0.5)) * 20.0) * 2.0;
        float _1540 = _1539 * (_1500.x + (-0.5));
        float _1541 = _1539 * (_1500.y + (-0.5));
        float _1542 = _1539 * (_1500.z + (-0.5));
        float _1549 = exp2((_1507.w + (-0.5)) * 20.0) * 2.0;
        float _1550 = _1549 * (_1507.x + (-0.5));
        float _1551 = _1549 * (_1507.y + (-0.5));
        float _1552 = _1549 * (_1507.z + (-0.5));
        float _1553 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1554 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1555 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1556 = _1520 * 0.5;
        float _1557 = _1530 * 0.5;
        float _1558 = _1540 * 0.5;
        float _1559 = dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558));
        float _1564 = (_1559 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1559);
        float _1572 = (dot(vec3(_789, _790, _791), vec3(_1564 * _1556, _1564 * _1557, _1564 * _1558)) + 1.0) * 0.5;
        float _4293 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1581 = sqrt(((_1557 * _1557) + (_1556 * _1556)) + (_1558 * _1558)) / (_1553 + 9.9999997473787516355514526367188e-06);
        float _4304 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1583 = _1582 * 2.0;
        float _1587 = (1.0 - _1582) / (_1582 + 1.0);
        float _4315 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1597 = ((((1.0 - _1588) * (_1583 + 2.0)) * exp2(log2(isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_1583 + 1.0))) + _1588) * _1553;
        float _1598 = _1521 * 0.5;
        float _1599 = _1531 * 0.5;
        float _1600 = _1541 * 0.5;
        float _1601 = dot(vec3(_1598, _1599, _1600), vec3(_1598, _1599, _1600));
        float _1606 = (_1601 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1601);
        float _1614 = (dot(vec3(_789, _790, _791), vec3(_1606 * _1598, _1606 * _1599, _1606 * _1600)) + 1.0) * 0.5;
        float _4326 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1623 = sqrt(((_1599 * _1599) + (_1598 * _1598)) + (_1600 * _1600)) / (_1554 + 9.9999997473787516355514526367188e-06);
        float _4337 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1625 = _1624 * 2.0;
        float _1629 = (1.0 - _1624) / (_1624 + 1.0);
        float _4348 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1639 = ((((1.0 - _1630) * (_1625 + 2.0)) * exp2(log2(isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_1625 + 1.0))) + _1630) * _1554;
        float _1640 = _1522 * 0.5;
        float _1641 = _1532 * 0.5;
        float _1642 = _1542 * 0.5;
        float _1643 = dot(vec3(_1640, _1641, _1642), vec3(_1640, _1641, _1642));
        float _1648 = (_1643 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1643);
        float _1656 = (dot(vec3(_789, _790, _791), vec3(_1648 * _1640, _1648 * _1641, _1648 * _1642)) + 1.0) * 0.5;
        float _4359 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1665 = sqrt(((_1641 * _1641) + (_1640 * _1640)) + (_1642 * _1642)) / (_1555 + 9.9999997473787516355514526367188e-06);
        float _4370 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _1667 = _1666 * 2.0;
        float _1671 = (1.0 - _1666) / (_1666 + 1.0);
        float _4381 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _1681 = ((((1.0 - _1672) * (_1667 + 2.0)) * exp2(log2(isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_1667 + 1.0))) + _1672) * _1555;
        _1689 = _1522;
        _1690 = _1521;
        _1691 = _1520;
        _1692 = _1532;
        _1693 = _1531;
        _1694 = _1530;
        _1695 = _1542;
        _1696 = _1541;
        _1697 = _1540;
        _1698 = _1555;
        _1699 = _1554;
        _1700 = _1553;
        _1701 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)));
        _1702 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)));
        _1703 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)));
    }
    else
    {
        _1689 = _1380;
        _1690 = _1380;
        _1691 = _1380;
        _1692 = _1380;
        _1693 = _1380;
        _1694 = _1380;
        _1695 = _1380;
        _1696 = _1380;
        _1697 = _1380;
        _1698 = _1380;
        _1699 = _1380;
        _1700 = _1380;
        _1701 = 0.0;
        _1702 = 0.0;
        _1703 = 0.0;
    }
    float _1713 = (cbModelParam._m0[1u].x * (_1701 - _1392)) + _1392;
    float _1714 = (cbModelParam._m0[1u].x * (_1702 - _1393)) + _1393;
    float _1715 = (cbModelParam._m0[1u].x * (_1703 - _1394)) + _1394;
    float _1736 = fma(_1715, cbSceneParam._m0[89u].z, fma(_1714, cbSceneParam._m0[89u].y, _1713 * cbSceneParam._m0[89u].x));
    float _1739 = fma(_1715, cbSceneParam._m0[90u].z, fma(_1714, cbSceneParam._m0[90u].y, _1713 * cbSceneParam._m0[90u].x));
    float _1742 = fma(_1715, cbSceneParam._m0[91u].z, fma(_1714, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1713));
    float _1757 = _1015 * 0.5;
    float _1758 = _1016 * 0.5;
    float _1759 = _1017 * 0.5;
    float _1760 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1691, _1694, _1697, _1700));
    float _1763 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1690, _1693, _1696, _1699));
    float _1766 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1689, _1692, _1695, _1698));
    float _1800;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1773 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1379, _1383, _1386, _1389));
        float _1777 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1381, _1384, _1387, _1390));
        float _1781 = dot(vec4(_1757, _1758, _1759, 1.0), vec4(_1382, _1385, _1388, _1391));
        float _1788 = dot(vec4(cbModelParam._m0[39u]), vec4(_1757, _1758, _1759, 1.0));
        _1800 = dot(vec3(isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)), isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)), isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1788) ? 0.0 : (isnan(0.0) ? _1788 : max(0.0, _1788))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1800 = 1.0;
    }
    float _1811;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1802 = dot(vec4(cbModelParam._m0[40u]), vec4(_1757, _1758, _1759, 1.0));
        _1811 = dot(vec3(isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)), isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)), isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1802) ? 0.0 : (isnan(0.0) ? _1802 : max(0.0, _1802))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1811 = 1.0;
    }
    float _1815 = (_1811 * cbModelParam._m0[1u].x) + (_1800 * (1.0 - cbModelParam._m0[1u].x));
    float _1825 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _922);
    float _1826 = isnan(_1825) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1825 : min(cbModelParam._m0[25u].z, _1825));
    float _1906;
    float _1908;
    float _1910;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1873 = fma(_1078, cbModelParam._m0[13u].z, fma(_1074, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1070)) + cbModelParam._m0[13u].w;
        float _1877 = fma(_1078, cbModelParam._m0[14u].z, fma(_1074, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1070)) + cbModelParam._m0[14u].w;
        float _1881 = fma(_1078, cbModelParam._m0[15u].z, fma(_1074, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1070)) + cbModelParam._m0[15u].w;
        float _1884 = fma(_1017, cbModelParam._m0[13u].z, fma(_1016, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1015));
        float _1887 = fma(_1017, cbModelParam._m0[14u].z, fma(_1016, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1015));
        float _1890 = fma(_1017, cbModelParam._m0[15u].z, fma(_1016, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1015));
        float _1918;
        if (_1884 > 0.0)
        {
            _1918 = abs((1.0 - _1873) / _1884);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1873 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1918 = frontier_phi_16_14_ladder;
        }
        float _2089;
        if (_1887 > 0.0)
        {
            _2089 = abs((1.0 - _1877) / _1887);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1877 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2089 = frontier_phi_25_21_ladder;
        }
        float _2383;
        if (_1890 > 0.0)
        {
            _2383 = abs((1.0 - _1881) / _1890);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1881 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2383 = frontier_phi_37_32_ladder;
        }
        float _2385 = isnan(_2089) ? _1918 : (isnan(_1918) ? _2089 : min(_1918, _2089));
        float _2386 = isnan(_2383) ? _2385 : (isnan(_2385) ? _2383 : min(_2385, _2383));
        float _2390 = (_2386 * _1884) + _1873;
        float _2391 = (_2386 * _1887) + _1877;
        float _2392 = (_2386 * _1890) + _1881;
        float _2393 = _2386 * 9.9999997473787516355514526367188e-05;
        float _2395 = (-1.0) - _2393;
        float _2397 = _2393 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2392 > _2397) || ((_2392 < _2395) || ((_2391 > _2397) || ((_2391 < _2395) || ((_2390 < _2395) || (_2390 > _2397))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2537 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2392, cbModelParam._m0[9u].z, fma(_2391, cbModelParam._m0[9u].y, _2390 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2392, cbModelParam._m0[10u].z, fma(_2391, cbModelParam._m0[10u].y, _2390 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2392, cbModelParam._m0[11u].z, fma(_2391, cbModelParam._m0[11u].y, _2390 * cbModelParam._m0[11u].x))), _1826);
            frontier_phi_15_37_ladder = _2537.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2537.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2537.z * cbModelParam._m0[1u].y;
        }
        _1906 = frontier_phi_15_37_ladder_1;
        _1908 = frontier_phi_15_37_ladder;
        _1910 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1894 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1015, _1016, _1017), _1826);
        _1906 = _1894.x * cbModelParam._m0[1u].y;
        _1908 = _1894.y * cbModelParam._m0[1u].y;
        _1910 = _1894.z * cbModelParam._m0[1u].y;
    }
    float _1914 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _922);
    float _1915 = isnan(_1914) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1914 : min(cbModelParam._m0[25u].w, _1914));
    float _2004;
    float _2006;
    float _2008;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1968 = fma(_1078, cbModelParam._m0[21u].z, fma(_1074, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1070)) + cbModelParam._m0[21u].w;
        float _1972 = fma(_1078, cbModelParam._m0[22u].z, fma(_1074, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1070)) + cbModelParam._m0[22u].w;
        float _1976 = fma(_1078, cbModelParam._m0[23u].z, fma(_1074, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1070)) + cbModelParam._m0[23u].w;
        float _1979 = fma(_1017, cbModelParam._m0[21u].z, fma(_1016, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1015));
        float _1982 = fma(_1017, cbModelParam._m0[22u].z, fma(_1016, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1015));
        float _1985 = fma(_1017, cbModelParam._m0[23u].z, fma(_1016, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1015));
        float _2094;
        if (_1979 > 0.0)
        {
            _2094 = abs((1.0 - _1968) / _1979);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1968 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2094 = frontier_phi_27_23_ladder;
        }
        float _2410;
        if (_1982 > 0.0)
        {
            _2410 = abs((1.0 - _1972) / _1982);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1972 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2410 = frontier_phi_39_34_ladder;
        }
        float _2748;
        if (_1985 > 0.0)
        {
            _2748 = abs((1.0 - _1976) / _1985);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1976 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2748 = frontier_phi_49_46_ladder;
        }
        float _2750 = isnan(_2410) ? _2094 : (isnan(_2094) ? _2410 : min(_2094, _2410));
        float _2751 = isnan(_2748) ? _2750 : (isnan(_2750) ? _2748 : min(_2750, _2748));
        float _2755 = (_2751 * _1979) + _1968;
        float _2756 = (_2751 * _1982) + _1972;
        float _2757 = (_2751 * _1985) + _1976;
        float _2758 = _2751 * 9.9999997473787516355514526367188e-05;
        float _2759 = (-1.0) - _2758;
        float _2761 = _2758 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2757 > _2761) || ((_2757 < _2759) || ((_2756 > _2761) || ((_2756 < _2759) || ((_2755 < _2759) || (_2755 > _2761))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2879 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2757, cbModelParam._m0[17u].z, fma(_2756, cbModelParam._m0[17u].y, _2755 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2757, cbModelParam._m0[18u].z, fma(_2756, cbModelParam._m0[18u].y, _2755 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2757, cbModelParam._m0[19u].z, fma(_2756, cbModelParam._m0[19u].y, _2755 * cbModelParam._m0[19u].x))), _1915);
            frontier_phi_24_49_ladder = _2879.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2879.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2879.x * cbModelParam._m0[1u].z;
        }
        _2004 = frontier_phi_24_49_ladder_2;
        _2006 = frontier_phi_24_49_ladder_1;
        _2008 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1988 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1015, _1016, _1017), _1915);
        _2004 = _1988.x * cbModelParam._m0[1u].z;
        _2006 = _1988.y * cbModelParam._m0[1u].z;
        _2008 = _1988.z * cbModelParam._m0[1u].z;
    }
    float _2021 = (((_1041 * _992) + _1042) * _1007) * ((cbModelParam._m0[1u].w * (_2004 - _1906)) + _1906);
    float _2023 = (((_1041 * _994) + _1042) * _1007) * ((cbModelParam._m0[1u].w * (_2006 - _1908)) + _1908);
    float _2025 = (((_1041 * _995) + _1042) * _1007) * ((cbModelParam._m0[1u].w * (_2008 - _1910)) + _1910);
    float _2028 = fma(_2025, cbSceneParam._m0[89u].z, fma(_2023, cbSceneParam._m0[89u].y, _2021 * cbSceneParam._m0[89u].x));
    float _2031 = fma(_2025, cbSceneParam._m0[90u].z, fma(_2023, cbSceneParam._m0[90u].y, _2021 * cbSceneParam._m0[90u].x));
    float _2034 = fma(_2025, cbSceneParam._m0[91u].z, fma(_2023, cbSceneParam._m0[91u].y, _2021 * cbSceneParam._m0[91u].x));
    float _2068 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2072 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2076 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2080 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2081 = _2068 / _2080;
    float _2082 = _2072 / _2080;
    float _2083 = _2076 / _2080;
    float _2229;
    float _2230;
    float _2231;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2110 = ((uint(_2083 > cbSceneParam._m0[59u].y) + uint(_2083 > cbSceneParam._m0[59u].x)) + uint(_2083 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2111 = _2110 + 43u;
        uint _2119 = _2110 + 44u;
        uint _2127 = _2110 + 45u;
        uint _2135 = _2110 + 46u;
        float _2146 = fma(_2080, cbSceneParam._m0[_2111].w, fma(_2076, cbSceneParam._m0[_2111].z, fma(_2072, cbSceneParam._m0[_2111].y, _2068 * cbSceneParam._m0[_2111].x)));
        float _2150 = fma(_2080, cbSceneParam._m0[_2119].w, fma(_2076, cbSceneParam._m0[_2119].z, fma(_2072, cbSceneParam._m0[_2119].y, _2068 * cbSceneParam._m0[_2119].x)));
        float _2158 = fma(_2080, cbSceneParam._m0[_2135].w, fma(_2076, cbSceneParam._m0[_2135].z, fma(_2072, cbSceneParam._m0[_2135].y, _2068 * cbSceneParam._m0[_2135].x)));
        float _2163 = cbSceneParam._m0[33u].z * _2158;
        float _2165 = cbSceneParam._m0[33u].w * _2158;
        float _2168 = fma(_2080, cbSceneParam._m0[_2127].w, fma(_2076, cbSceneParam._m0[_2127].z, fma(_2072, cbSceneParam._m0[_2127].y, _2068 * cbSceneParam._m0[_2127].x))) / _2158;
        float _2215 = (cbSceneParam._m0[33u].x - sqrt(((_2082 * _2082) + (_2081 * _2081)) + (_2083 * _2083))) * cbSceneParam._m0[33u].y;
        float _4507 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2222 = (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2163 + _2146) / _2158, (_2165 + _2150) / _2158), _2168), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2165 + _2146) / _2158, (_2150 - _2163) / _2158), _2168), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2146 - _2163) / _2158, (_2150 - _2165) / _2158), _2168), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2146 - _2165) / _2158, (_2163 + _2150) / _2158), _2168), 0.0)).x), vec4(0.25)));
        _2229 = 1.0 - (_2222 * cbSceneParam._m0[34u].x);
        _2230 = 1.0 - (_2222 * cbSceneParam._m0[34u].y);
        _2231 = 1.0 - (_2222 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2229 = 1.0;
        _2230 = 1.0;
        _2231 = 1.0;
    }
    float _2295;
    float _2297;
    float _2299;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2283 = fma(_2080, cbSceneParam._m0[63u].w, fma(_2076, cbSceneParam._m0[63u].z, fma(_2072, cbSceneParam._m0[63u].y, _2068 * cbSceneParam._m0[63u].x)));
        float _2284 = fma(_2080, cbSceneParam._m0[60u].w, fma(_2076, cbSceneParam._m0[60u].z, fma(_2072, cbSceneParam._m0[60u].y, _2068 * cbSceneParam._m0[60u].x))) / _2283;
        float _2285 = fma(_2080, cbSceneParam._m0[61u].w, fma(_2076, cbSceneParam._m0[61u].z, fma(_2072, cbSceneParam._m0[61u].y, _2068 * cbSceneParam._m0[61u].x))) / _2283;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2284 >= cbSceneParam._m0[64u].x) && (_2285 >= cbSceneParam._m0[64u].y)) && (_2284 <= cbSceneParam._m0[64u].z)) && (_2285 <= cbSceneParam._m0[64u].w))
        {
            float _2423 = fma(_2080, cbSceneParam._m0[62u].w, fma(_2076, cbSceneParam._m0[62u].z, fma(_2072, cbSceneParam._m0[62u].y, _2068 * cbSceneParam._m0[62u].x))) / _2283;
            float _2427 = isnan(cbSceneParam._m0[41u].w) ? _2423 : (isnan(_2423) ? cbSceneParam._m0[41u].w : max(_2423, cbSceneParam._m0[41u].w));
            float _2470 = (cbSceneParam._m0[33u].x - sqrt(((_2082 * _2082) + (_2081 * _2081)) + (_2083 * _2083))) * cbSceneParam._m0[33u].y;
            float _4523 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
            float _2477 = (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2284, cbSceneParam._m0[33u].w + _2285), _2427), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2284, _2285 - cbSceneParam._m0[33u].z), _2427), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2284 - cbSceneParam._m0[33u].z, _2285 - cbSceneParam._m0[33u].w), _2427), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2284 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2285), _2427), 0.0)).x), vec4(0.25)));
            float _2481 = 1.0 - (_2477 * cbSceneParam._m0[34u].x);
            float _2482 = 1.0 - (_2477 * cbSceneParam._m0[34u].y);
            float _2483 = 1.0 - (_2477 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2482) ? _2230 : (isnan(_2230) ? _2482 : min(_2230, _2482));
            frontier_phi_36_35_ladder_1 = isnan(_2483) ? _2231 : (isnan(_2231) ? _2483 : min(_2231, _2483));
            frontier_phi_36_35_ladder_2 = isnan(_2481) ? _2229 : (isnan(_2229) ? _2481 : min(_2229, _2481));
        }
        else
        {
            frontier_phi_36_35_ladder = _2230;
            frontier_phi_36_35_ladder_1 = _2231;
            frontier_phi_36_35_ladder_2 = _2229;
        }
        _2295 = frontier_phi_36_35_ladder_2;
        _2297 = frontier_phi_36_35_ladder;
        _2299 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2295 = _2229;
        _2297 = _2230;
        _2299 = _2231;
    }
    uvec4 _2304 = floatBitsToUint(cbInstanceData._m0[_935 + 5u]);
    uint _2306 = _2304.x * 14u;
    uint _2307 = _2306 + 13u;
    float _2314 = _1007 + (-1.0);
    float _2319 = (cbLight._m0[_2307].x * _2314) + 1.0;
    float _2320 = (cbLight._m0[_2307].y * _2314) + 1.0;
    float _2321 = (cbLight._m0[_2307].z * _2314) + 1.0;
    float _2322 = (cbLight._m0[_2307].w * _2314) + 1.0;
    uint _2323 = _2306 + 5u;
    float _2329 = isnan(1.0) ? _2320 : (isnan(_2320) ? 1.0 : min(_2320, 1.0));
    uint _2333 = _2306 + 4u;
    float _2342 = isnan(1.0) ? _2319 : (isnan(_2319) ? 1.0 : min(_2319, 1.0));
    uint _2346 = _2306 | 1u;
    float _2357 = dot(vec3(cbLight._m0[_2306].xyz), vec3(_789, _790, _791));
    float _2360 = dot(vec3(cbLight._m0[_2346].xyz), vec3(_789, _790, _791));
    float _4559 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _4570 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2365 = (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * 0.3183098733425140380859375;
    float _2367 = (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * 0.3183098733425140380859375;
    float _2374 = ((cbLight._m0[_2323].x * _2329) * _2367) + (((cbLight._m0[_2333].x * _2295) * _2342) * _2365);
    float _2375 = ((_2329 * cbLight._m0[_2323].y) * _2367) + (((cbLight._m0[_2333].y * _2297) * _2342) * _2365);
    float _2376 = ((_2329 * cbLight._m0[_2323].z) * _2367) + (((cbLight._m0[_2333].z * _2299) * _2342) * _2365);
    uvec4 _2380 = floatBitsToUint(cbLight._m0[_2306 + 12u]);
    bool _2382 = _2380.x == 0u;
    float _2484;
    float _2486;
    float _2488;
    if (_2382)
    {
        _2484 = _2374;
        _2486 = _2375;
        _2488 = _2376;
    }
    else
    {
        uint _2492 = _2306 + 6u;
        float _2508 = (dot(vec3(cbLight._m0[_2306 + 2u].xyz), vec3(_789, _790, _791)) * 0.5) + 0.5;
        float _2509 = _2508 * _2508;
        float _4581 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2510 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
        float _2511 = isnan(1.0) ? _2321 : (isnan(_2321) ? 1.0 : min(_2321, 1.0));
        _2484 = (((cbLight._m0[_2492].x * 0.3183098733425140380859375) * _2510) * _2511) + _2374;
        _2486 = (((cbLight._m0[_2492].y * 0.3183098733425140380859375) * _2510) * _2511) + _2375;
        _2488 = (((cbLight._m0[_2492].z * 0.3183098733425140380859375) * _2510) * _2511) + _2376;
    }
    bool _2491 = _2380.y == 0u;
    float _2546;
    float _2548;
    float _2550;
    if (_2491)
    {
        _2546 = _2484;
        _2548 = _2486;
        _2550 = _2488;
    }
    else
    {
        uint _2719 = _2306 + 7u;
        float _2735 = (dot(vec3(cbLight._m0[_2306 + 3u].xyz), vec3(_789, _790, _791)) * 0.5) + 0.5;
        float _2736 = _2735 * _2735;
        float _4597 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2737 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
        float _2738 = isnan(1.0) ? _2322 : (isnan(_2322) ? 1.0 : min(_2322, 1.0));
        _2546 = (((cbLight._m0[_2719].x * 0.3183098733425140380859375) * _2737) * _2738) + _2484;
        _2548 = (((cbLight._m0[_2719].y * 0.3183098733425140380859375) * _2737) * _2738) + _2486;
        _2550 = (((cbLight._m0[_2719].z * 0.3183098733425140380859375) * _2737) * _2738) + _2488;
    }
    uint _2553 = _2306 + 8u;
    float _2566 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2306].w)) * _922) * 0.949999988079071044921875);
    float _2567 = _2566 * _2566;
    float _2568 = cbLight._m0[_2306].x + _869;
    float _2569 = cbLight._m0[_2306].y + _870;
    float _2570 = cbLight._m0[_2306].z + _871;
    float _2574 = inversesqrt(dot(vec3(_2568, _2569, _2570), vec3(_2568, _2569, _2570)));
    float _2575 = _2574 * _2568;
    float _2576 = _2574 * _2569;
    float _2577 = _2574 * _2570;
    float _2578 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2306].xyz));
    float _4613 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2581 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
    float _4624 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _2582 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
    float _2583 = dot(vec3(_789, _790, _791), vec3(_2575, _2576, _2577));
    float _4635 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2586 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
    float _2587 = dot(vec3(cbLight._m0[_2306].xyz), vec3(_2575, _2576, _2577));
    float _4646 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
    float _2591 = _2567 * _2567;
    float _2595 = ((_2586 * _2586) * (_2591 + (-1.0))) + 1.0;
    float _2603 = exp2(log2(1.0 - (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0)))) * 5.0);
    float _2604 = 0.959999978542327880859375 - _989;
    float _2606 = 0.959999978542327880859375 - _990;
    float _2607 = 0.959999978542327880859375 - _991;
    float _2614 = 1.0 - _2567;
    float _2625 = (0.5 / (((_2582 * ((_2581 * _2614) + _2567)) + 9.9999999392252902907785028219223e-09) + (((_2582 * _2614) + _2567) * _2581))) * _2581;
    float _4657 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
    float _2627 = (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * (_2591 / ((_2595 * _2595) * 3.141590118408203125));
    uint _2641 = _2306 + 9u;
    float _2652 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2346].w)) * _922) * 0.949999988079071044921875);
    float _2653 = _2652 * _2652;
    float _2654 = cbLight._m0[_2346].x + _869;
    float _2655 = cbLight._m0[_2346].y + _870;
    float _2656 = cbLight._m0[_2346].z + _871;
    float _2660 = inversesqrt(dot(vec3(_2654, _2655, _2656), vec3(_2654, _2655, _2656)));
    float _2661 = _2660 * _2654;
    float _2662 = _2660 * _2655;
    float _2663 = _2660 * _2656;
    float _2664 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2346].xyz));
    float _4668 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
    float _2667 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
    float _2668 = dot(vec3(_789, _790, _791), vec3(_2661, _2662, _2663));
    float _4679 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
    float _2671 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
    float _2672 = dot(vec3(cbLight._m0[_2346].xyz), vec3(_2661, _2662, _2663));
    float _4690 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
    float _2676 = _2653 * _2653;
    float _2680 = ((_2671 * _2671) * (_2676 + (-1.0))) + 1.0;
    float _2687 = exp2(log2(1.0 - (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0)))) * 5.0);
    float _2694 = 1.0 - _2653;
    float _2704 = (0.5 / (((_2582 * ((_2667 * _2694) + _2653)) + 9.9999999392252902907785028219223e-09) + (((_2582 * _2694) + _2653) * _2667))) * _2667;
    float _4701 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
    float _2706 = (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_2676 / ((_2680 * _2680) * 3.141590118408203125));
    float _2716 = (((((_2687 * _2604) + _992) * cbLight._m0[_2641].x) * _2706) * _2329) + ((((cbLight._m0[_2553].x * _2295) * ((_2603 * _2604) + _992)) * _2627) * _2342);
    float _2717 = (((((_2687 * _2606) + _994) * cbLight._m0[_2641].y) * _2706) * _2329) + ((((cbLight._m0[_2553].y * _2297) * ((_2603 * _2606) + _994)) * _2627) * _2342);
    float _2718 = (((((_2687 * _2607) + _995) * cbLight._m0[_2641].z) * _2706) * _2329) + ((((cbLight._m0[_2553].z * _2299) * ((_2603 * _2607) + _995)) * _2627) * _2342);
    float _2774;
    float _2776;
    float _2778;
    if (_2382)
    {
        _2774 = _2716;
        _2776 = _2717;
        _2778 = _2718;
    }
    else
    {
        uint _2780 = _2306 + 2u;
        uint _2784 = _2306 + 10u;
        float _2798 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2780].w)) * _922) * 0.949999988079071044921875);
        float _2799 = _2798 * _2798;
        float _2800 = cbLight._m0[_2780].x + _869;
        float _2801 = cbLight._m0[_2780].y + _870;
        float _2802 = cbLight._m0[_2780].z + _871;
        float _2806 = inversesqrt(dot(vec3(_2800, _2801, _2802), vec3(_2800, _2801, _2802)));
        float _2807 = _2806 * _2800;
        float _2808 = _2806 * _2801;
        float _2809 = _2806 * _2802;
        float _2810 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2780].xyz));
        float _4712 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2813 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
        float _2814 = dot(vec3(_789, _790, _791), vec3(_2807, _2808, _2809));
        float _4723 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2817 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
        float _2818 = dot(vec3(cbLight._m0[_2780].xyz), vec3(_2807, _2808, _2809));
        float _4734 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        float _2822 = _2799 * _2799;
        float _2826 = ((_2817 * _2817) * (_2822 + (-1.0))) + 1.0;
        float _2833 = exp2(log2(1.0 - (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0)))) * 5.0);
        float _2840 = 1.0 - _2799;
        float _2850 = (0.5 / (((_2582 * ((_2813 * _2840) + _2799)) + 9.9999999392252902907785028219223e-09) + (((_2582 * _2840) + _2799) * _2813))) * _2813;
        float _4745 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
        float _2852 = (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0))) * (_2822 / ((_2826 * _2826) * 3.141590118408203125));
        float _2853 = isnan(1.0) ? _2321 : (isnan(_2321) ? 1.0 : min(_2321, 1.0));
        _2774 = (((((_2833 * _2604) + _992) * cbLight._m0[_2784].x) * _2852) * _2853) + _2716;
        _2776 = (((((_2833 * _2606) + _994) * cbLight._m0[_2784].y) * _2852) * _2853) + _2717;
        _2778 = (((((_2833 * _2607) + _995) * cbLight._m0[_2784].z) * _2852) * _2853) + _2718;
    }
    float _2884;
    float _2886;
    float _2888;
    if (_2491)
    {
        _2884 = _2774;
        _2886 = _2776;
        _2888 = _2778;
    }
    else
    {
        uint _2895 = _2306 + 3u;
        uint _2899 = _2306 + 11u;
        float _2913 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2895].w)) * _922) * 0.949999988079071044921875);
        float _2914 = _2913 * _2913;
        float _2915 = cbLight._m0[_2895].x + _869;
        float _2916 = cbLight._m0[_2895].y + _870;
        float _2917 = cbLight._m0[_2895].z + _871;
        float _2921 = inversesqrt(dot(vec3(_2915, _2916, _2917), vec3(_2915, _2916, _2917)));
        float _2922 = _2921 * _2915;
        float _2923 = _2921 * _2916;
        float _2924 = _2921 * _2917;
        float _2925 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2895].xyz));
        float _4761 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
        float _2928 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
        float _2929 = dot(vec3(_789, _790, _791), vec3(_2922, _2923, _2924));
        float _4772 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
        float _2932 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
        float _2933 = dot(vec3(cbLight._m0[_2895].xyz), vec3(_2922, _2923, _2924));
        float _4783 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
        float _2937 = _2914 * _2914;
        float _2941 = ((_2932 * _2932) * (_2937 + (-1.0))) + 1.0;
        float _2948 = exp2(log2(1.0 - (isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0)))) * 5.0);
        float _2955 = 1.0 - _2914;
        float _2965 = (0.5 / (((_2582 * ((_2928 * _2955) + _2914)) + 9.9999999392252902907785028219223e-09) + (((_2582 * _2955) + _2914) * _2928))) * _2928;
        float _4794 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
        float _2967 = (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0))) * (_2937 / ((_2941 * _2941) * 3.141590118408203125));
        float _2968 = isnan(1.0) ? _2322 : (isnan(_2322) ? 1.0 : min(_2322, 1.0));
        _2884 = (((((_2948 * _2604) + _992) * cbLight._m0[_2899].x) * _2967) * _2968) + _2774;
        _2886 = (((((_2948 * _2606) + _994) * cbLight._m0[_2899].y) * _2967) * _2968) + _2776;
        _2888 = (((((_2948 * _2607) + _995) * cbLight._m0[_2899].z) * _2967) * _2968) + _2778;
    }
    float _3033;
    float _3035;
    float _3037;
    float _3039;
    float _3041;
    float _3043;
    if (_2304.y == 0u)
    {
        uvec4 _2989 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2990 = _2989.x;
        uint _3001 = uint((float(_2989.y) * floor(float(uint(cbSceneParam._m0[85u].y * _878) / _2990))) + floor(float(uint(cbSceneParam._m0[85u].x * _877) / _2990)));
        float _3011 = (log2(_2083 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3012 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
        uint _3015 = uint(isnan(14.0) ? _3012 : (isnan(_3012) ? 14.0 : min(_3012, 14.0)));
        uvec4 _3020 = texelFetch(g_lightClusterGridBuffer, int(((_3015 << 2u) + (_3001 << 6u)) >> 2u));
        uint _3021 = _3020.x;
        uint _3022 = _2989.z;
        float _3119;
        float _3121;
        float _3123;
        float _3125;
        float _3127;
        float _3129;
        if (((((1u << ((_3022 >> 4u) & 15u)) + 4294967295u) & _3021) == 0u) || ((_3022 & 240u) == 0u))
        {
            _3119 = 0.0;
            _3121 = 0.0;
            _3123 = 0.0;
            _3125 = 0.0;
            _3127 = 0.0;
            _3129 = 0.0;
        }
        else
        {
            float _3120;
            float _3122;
            float _3124;
            float _3126;
            float _3128;
            float _3130;
            float _3263 = 0.0;
            float _3264 = 0.0;
            float _3265 = 0.0;
            float _3266 = 0.0;
            float _3267 = 0.0;
            float _3268 = 0.0;
            uint _3269 = 0u;
            uint _3278;
            bool _3279;
            for (;;)
            {
                _3278 = texelFetch(g_lightClassification, int((((_3015 << 5u) + (_3001 << 9u)) + (_3269 << 2u)) >> 2u)).x;
                _3279 = _3278 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3279)
                {
                    frontier_phi_68_pred = _3268;
                    frontier_phi_68_pred_1 = _3267;
                    frontier_phi_68_pred_2 = _3266;
                    frontier_phi_68_pred_3 = _3264;
                    frontier_phi_68_pred_4 = _3263;
                    frontier_phi_68_pred_5 = _3265;
                }
                else
                {
                    float _3387;
                    float _3388;
                    float _3389;
                    float _3390;
                    float _3391;
                    float _3392;
                    uint _3393;
                    _3387 = _3263;
                    _3388 = _3264;
                    _3389 = _3265;
                    _3390 = _3266;
                    _3391 = _3267;
                    _3392 = _3268;
                    _3393 = _3278;
                    float _3319;
                    float _3320;
                    float _3321;
                    float _3322;
                    float _3323;
                    float _3324;
                    for (;;)
                    {
                        uint _3397 = uint(findLSB(_3393)) + (_3269 << 5u);
                        uint _3394 = (_3393 + 4294967295u) & _3393;
                        uint _3399 = _3397 * 48u;
                        vec4 _3413 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3399)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 3u)).x));
                        uint _3419 = (_3397 * 48u) + 4u;
                        vec4 _3432 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3419)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 3u)).x));
                        uint _3438 = (_3397 * 48u) + 8u;
                        vec3 _3449 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3438)).x, texelFetch(g_PointLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3438 + 2u)).x));
                        float _3453 = _3413.x - _2081;
                        float _3454 = _3413.y - _2082;
                        float _3455 = _3413.z - _2083;
                        float _3456 = dot(vec3(_3453, _3454, _3455), vec3(_3453, _3454, _3455));
                        float _3459 = inversesqrt(_3456);
                        float _3460 = _3459 * _3453;
                        float _3461 = _3459 * _3454;
                        float _3462 = _3459 * _3455;
                        float _3463 = dot(vec3(_903, _906, _909), vec3(_3460, _3461, _3462));
                        float _3468 = 1.0 - (_3456 * _3413.w);
                        float _4820 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                        float _3469 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                        float _3470 = sqrt(_3456) * _3432.w;
                        float _3473 = 1.39999997615814208984375 / (_3470 + 1.39999997615814208984375);
                        float _3474 = _3473 * _3473;
                        float _3477 = ((1.0 - _3474) * _3463) + _3474;
                        float _3480 = _3470 * _3470;
                        float _3484 = ((isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0))) * _3469) / ((_3480 * 0.699999988079071044921875) + 1.0);
                        float _3488 = (-0.0) - _2081;
                        float _3489 = (-0.0) - _2082;
                        float _3490 = (-0.0) - _2083;
                        float _3494 = inversesqrt(dot(vec3(_3488, _3489, _3490), vec3(_3488, _3489, _3490)));
                        float _3495 = _3494 * _3488;
                        float _3496 = _3494 * _3489;
                        float _3497 = _3494 * _3490;
                        float _3504 = exp2(log2(1.0 / ((_3480 * 3.5) + 5.0)) * 0.25);
                        float _3505 = 1.0 - _1023;
                        float _3512 = sqrt(1.0 - ((1.0 - (_3505 * _3505)) * (1.0 - (_3504 * _3504))));
                        float _3513 = _3512 * _3512;
                        float _3514 = _3513 * _3513;
                        float _3515 = _3495 + _3460;
                        float _3516 = _3496 + _3461;
                        float _3517 = _3497 + _3462;
                        float _3521 = inversesqrt(dot(vec3(_3515, _3516, _3517), vec3(_3515, _3516, _3517)));
                        float _3525 = dot(vec3(_903, _906, _909), vec3(_3495, _3496, _3497));
                        float _4836 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                        float _3528 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                        float _3529 = dot(vec3(_903, _906, _909), vec3(_3521 * _3515, _3521 * _3516, _3521 * _3517));
                        float _4847 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                        float _3532 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                        float _3536 = ((_3532 * _3532) * (_3514 + (-1.0))) + 1.0;
                        float _3537 = _3473 * _3513;
                        float _3538 = _3537 * _3537;
                        float _3541 = ((1.0 - _3538) * _3463) + _3538;
                        float _4858 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                        float _3542 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                        float _3543 = 1.0 - _3513;
                        float _3553 = (0.5 / (((_3542 * ((_3528 * _3543) + _3513)) + 9.9999999392252902907785028219223e-09) + (((_3542 * _3543) + _3513) * _3528))) * _3542;
                        float _4869 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                        float _3564 = (((_3514 * 3.1415927410125732421875) * (isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0)))) / ((_3536 * _3536) * ((_3480 * 2.1991131305694580078125) + 3.141590118408203125))) * _3469;
                        _3322 = (_3484 * _3432.x) + _3390;
                        _3323 = (_3484 * _3432.y) + _3391;
                        _3324 = (_3484 * _3432.z) + _3392;
                        _3319 = (_3564 * _3449.x) + _3387;
                        _3320 = (_3564 * _3449.y) + _3388;
                        _3321 = (_3564 * _3449.z) + _3389;
                        if (_3394 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3387 = _3319;
                            _3388 = _3320;
                            _3389 = _3321;
                            _3390 = _3322;
                            _3391 = _3323;
                            _3392 = _3324;
                            _3393 = _3394;
                        }
                    }
                    frontier_phi_68_pred = _3324;
                    frontier_phi_68_pred_1 = _3323;
                    frontier_phi_68_pred_2 = _3322;
                    frontier_phi_68_pred_3 = _3320;
                    frontier_phi_68_pred_4 = _3319;
                    frontier_phi_68_pred_5 = _3321;
                }
                _3130 = frontier_phi_68_pred;
                _3128 = frontier_phi_68_pred_1;
                _3126 = frontier_phi_68_pred_2;
                _3122 = frontier_phi_68_pred_3;
                _3120 = frontier_phi_68_pred_4;
                _3124 = frontier_phi_68_pred_5;
                uint _3270 = _3269 + 1u;
                if (_3270 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3263 = _3120;
                    _3264 = _3122;
                    _3265 = _3124;
                    _3266 = _3126;
                    _3267 = _3128;
                    _3268 = _3130;
                    _3269 = _3270;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3119 = _3120;
            _3121 = _3122;
            _3123 = _3124;
            _3125 = _3126;
            _3127 = _3128;
            _3129 = _3130;
        }
        uvec4 _3133 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3134 = _3133.z;
        uint _3136 = (_3134 >> 8u) & 15u;
        float _3231;
        float _3233;
        float _3235;
        float _3237;
        float _3239;
        float _3241;
        if (((4294967295u << _3136) & _3021) == 0u)
        {
            _3231 = _3119;
            _3233 = _3121;
            _3235 = _3123;
            _3237 = _3125;
            _3239 = _3127;
            _3241 = _3129;
        }
        else
        {
            float _3256 = inversesqrt(dot(vec3(_2081, _2082, _2083), vec3(_2081, _2082, _2083)));
            float _3257 = _3256 * _2081;
            float _3258 = _3256 * _2082;
            float _3259 = _3256 * _2083;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3136 < ((_3134 >> 12u) & 15u))
            {
                float _3232;
                float _3234;
                float _3236;
                float _3238;
                float _3240;
                float _3242;
                float _3370 = _3119;
                float _3371 = _3121;
                float _3372 = _3123;
                float _3373 = _3125;
                float _3374 = _3127;
                float _3375 = _3129;
                uint _3376 = _3136;
                uint _3385;
                bool _3386;
                for (;;)
                {
                    _3385 = texelFetch(g_lightClassification, int((((_3015 << 5u) + (_3001 << 9u)) + (_3376 << 2u)) >> 2u)).x;
                    _3386 = _3385 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3386)
                    {
                        frontier_phi_74_pred = _3372;
                        frontier_phi_74_pred_1 = _3371;
                        frontier_phi_74_pred_2 = _3370;
                        frontier_phi_74_pred_3 = _3375;
                        frontier_phi_74_pred_4 = _3374;
                        frontier_phi_74_pred_5 = _3373;
                    }
                    else
                    {
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3862;
                        float _3863;
                        float _3864;
                        float _3865;
                        float _3866;
                        float _3867;
                        float _3582 = _3370;
                        float _3583 = _3371;
                        float _3584 = _3372;
                        float _3585 = _3373;
                        float _3586 = _3374;
                        float _3587 = _3375;
                        uint _3588 = _3385;
                        uint _3589;
                        vec4 _3614;
                        float _3615;
                        vec4 _3630;
                        vec3 _3642;
                        vec4 _3657;
                        vec4 _3672;
                        float _3718;
                        bool _3719;
                        for (;;)
                        {
                            uint _3599 = ((_3376 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3588));
                            _3589 = (_3588 + 4294967295u) & _3588;
                            uint _3601 = _3599 * 40u;
                            _3614 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 3u)).x));
                            _3615 = _3614.w;
                            uint _3617 = (_3599 * 40u) + 4u;
                            _3630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 3u)).x));
                            uint _3632 = (_3599 * 40u) + 8u;
                            _3642 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 2u)).x));
                            uint _3644 = (_3599 * 40u) + 16u;
                            _3657 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3644)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 3u)).x));
                            uint _3659 = (_3599 * 40u) + 20u;
                            _3672 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 3u)).x));
                            uint _3674 = (_3599 * 40u) + 24u;
                            vec4 _3687 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3674)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 3u)).x));
                            uint _3693 = (_3599 * 40u) + 28u;
                            vec4 _3706 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3693)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 3u)).x));
                            _3718 = fma(_2083, _3706.z, fma(_2082, _3706.y, _3706.x * _2081)) + _3706.w;
                            _3719 = !((fma(_2083, _3687.z, fma(_2082, _3687.y, _3687.x * _2081)) + _3687.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3719)
                            {
                                float _3746 = _3614.x - _2081;
                                float _3747 = _3614.y - _2082;
                                float _3748 = _3614.z - _2083;
                                float _3749 = dot(vec3(_3746, _3747, _3748), vec3(_3746, _3747, _3748));
                                float _3752 = inversesqrt(_3749);
                                float _3753 = _3752 * _3746;
                                float _3754 = _3752 * _3747;
                                float _3755 = _3752 * _3748;
                                float _3759 = 1.0 - (_3749 / (_3615 * _3615));
                                float _4880 = isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0));
                                float _3760 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
                                float _3764 = sqrt(_3749) * _3630.w;
                                float _3766 = 1.39999997615814208984375 / (_3764 + 1.39999997615814208984375);
                                float _3767 = _3766 * _3766;
                                float _3770 = ((1.0 - _3767) * dot(vec3(_3753, _3754, _3755), vec3(_903, _906, _909))) + _3767;
                                float _3773 = _3764 * _3764;
                                float _3777 = (fma(_2083, _3657.z, fma(_2082, _3657.y, _3657.x * _2081)) + _3657.w) / _3718;
                                float _3778 = (fma(_2083, _3672.z, fma(_2082, _3672.y, _3672.x * _2081)) + _3672.w) / _3718;
                                float _3782 = 1.0 - dot(vec2(_3777, _3778), vec2(_3777, _3778));
                                float _4896 = isnan(0.0) ? _3782 : (isnan(_3782) ? 0.0 : max(_3782, 0.0));
                                float _3783 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
                                float _3784 = _3783 * (((isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0))) * _3760) / ((_3773 * 0.699999988079071044921875) + 1.0));
                                float _3796 = exp2(log2(1.0 / ((_3773 * 3.5) + 5.0)) * 0.25);
                                float _3797 = 1.0 - _1023;
                                float _3804 = sqrt(1.0 - ((1.0 - (_3797 * _3797)) * (1.0 - (_3796 * _3796))));
                                float _3805 = _3804 * _3804;
                                float _3806 = _3805 * _3805;
                                float _3807 = _3753 - _3257;
                                float _3808 = _3754 - _3258;
                                float _3809 = _3755 - _3259;
                                float _3813 = inversesqrt(dot(vec3(_3807, _3808, _3809), vec3(_3807, _3808, _3809)));
                                float _3817 = dot(vec3(_903, _906, _909), vec3((-0.0) - _3257, (-0.0) - _3258, (-0.0) - _3259));
                                float _4907 = isnan(0.0) ? _3817 : (isnan(_3817) ? 0.0 : max(_3817, 0.0));
                                float _3820 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
                                float _3821 = dot(vec3(_903, _906, _909), vec3(_3813 * _3807, _3813 * _3808, _3813 * _3809));
                                float _4918 = isnan(0.0) ? _3821 : (isnan(_3821) ? 0.0 : max(_3821, 0.0));
                                float _3824 = isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0));
                                float _3828 = ((_3824 * _3824) * (_3806 + (-1.0))) + 1.0;
                                float _3829 = _3766 * _3805;
                                float _3830 = _3829 * _3829;
                                float _3836 = ((1.0 - _3830) * dot(vec3(_903, _906, _909), vec3(_3753, _3754, _3755))) + _3830;
                                float _4929 = isnan(0.0) ? _3836 : (isnan(_3836) ? 0.0 : max(_3836, 0.0));
                                float _3837 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
                                float _3838 = 1.0 - _3805;
                                float _3848 = (0.5 / (((_3837 * ((_3820 * _3838) + _3805)) + 9.9999999392252902907785028219223e-09) + (((_3837 * _3838) + _3805) * _3820))) * _3837;
                                float _4940 = isnan(0.0) ? _3848 : (isnan(_3848) ? 0.0 : max(_3848, 0.0));
                                float _3858 = (_3783 * _3760) * (((_3806 * 3.1415927410125732421875) * (isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0)))) / ((_3828 * _3828) * ((_3773 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3858 * _3642.z;
                                frontier_phi_80_pred_1 = _3858 * _3642.y;
                                frontier_phi_80_pred_2 = _3858 * _3642.x;
                                frontier_phi_80_pred_3 = _3784 * _3630.z;
                                frontier_phi_80_pred_4 = _3784 * _3630.y;
                                frontier_phi_80_pred_5 = _3784 * _3630.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3864 = frontier_phi_80_pred;
                            _3863 = frontier_phi_80_pred_1;
                            _3862 = frontier_phi_80_pred_2;
                            _3867 = frontier_phi_80_pred_3;
                            _3866 = frontier_phi_80_pred_4;
                            _3865 = frontier_phi_80_pred_5;
                            _3572 = _3865 + _3585;
                            _3573 = _3866 + _3586;
                            _3574 = _3867 + _3587;
                            _3569 = _3862 + _3582;
                            _3570 = _3863 + _3583;
                            _3571 = _3864 + _3584;
                            if (_3589 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3582 = _3569;
                                _3583 = _3570;
                                _3584 = _3571;
                                _3585 = _3572;
                                _3586 = _3573;
                                _3587 = _3574;
                                _3588 = _3589;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3571;
                        frontier_phi_74_pred_1 = _3570;
                        frontier_phi_74_pred_2 = _3569;
                        frontier_phi_74_pred_3 = _3574;
                        frontier_phi_74_pred_4 = _3573;
                        frontier_phi_74_pred_5 = _3572;
                    }
                    _3236 = frontier_phi_74_pred;
                    _3234 = frontier_phi_74_pred_1;
                    _3232 = frontier_phi_74_pred_2;
                    _3242 = frontier_phi_74_pred_3;
                    _3240 = frontier_phi_74_pred_4;
                    _3238 = frontier_phi_74_pred_5;
                    uint _3377 = _3376 + 1u;
                    if (_3377 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3370 = _3232;
                        _3371 = _3234;
                        _3372 = _3236;
                        _3373 = _3238;
                        _3374 = _3240;
                        _3375 = _3242;
                        _3376 = _3377;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3240;
                frontier_phi_62_63_ladder_1 = _3238;
                frontier_phi_62_63_ladder_2 = _3236;
                frontier_phi_62_63_ladder_3 = _3242;
                frontier_phi_62_63_ladder_4 = _3234;
                frontier_phi_62_63_ladder_5 = _3232;
            }
            else
            {
                frontier_phi_62_63_ladder = _3127;
                frontier_phi_62_63_ladder_1 = _3125;
                frontier_phi_62_63_ladder_2 = _3123;
                frontier_phi_62_63_ladder_3 = _3129;
                frontier_phi_62_63_ladder_4 = _3121;
                frontier_phi_62_63_ladder_5 = _3119;
            }
            _3231 = frontier_phi_62_63_ladder_5;
            _3233 = frontier_phi_62_63_ladder_4;
            _3235 = frontier_phi_62_63_ladder_2;
            _3237 = frontier_phi_62_63_ladder_1;
            _3239 = frontier_phi_62_63_ladder;
            _3241 = frontier_phi_62_63_ladder_3;
        }
        float _3246 = isnan(1.0) ? _1007 : (isnan(_1007) ? 1.0 : min(_1007, 1.0));
        _3033 = (_3246 * _3237) + _2546;
        _3035 = (_3246 * _3239) + _2548;
        _3037 = (_3246 * _3241) + _2550;
        _3039 = ((_3231 * _992) * _3246) + _2884;
        _3041 = ((_3233 * _994) * _3246) + _2886;
        _3043 = ((_3235 * _995) * _3246) + _2888;
    }
    else
    {
        _3033 = _2546;
        _3035 = _2548;
        _3037 = _2550;
        _3039 = _2884;
        _3041 = _2886;
        _3043 = _2888;
    }
    uint _3049 = _936 + uint(cbMatDynParam._m0[0u].w);
    float _4956 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _4967 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _4978 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _3074 = (((isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0))) * (_3033 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _1007))) + ((_3039 + ((isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0))) * _1815)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_3049].x * ((((_598 + (_484 * _436)) - (_598 * _484)) + cbMtdParam._m0[13u].x) + ((((((_735.x - _732) * _713) + _732) * cbMtdParam._m0[11u].x) + ((cbMtdParam._m0[22u].y * _666) * cbMtdParam._m0[12u].x)) * _675)));
    float _3076 = ((cbInstanceData._m0[_3049].y * ((((_599 + (_484 * _437)) - (_599 * _484)) + cbMtdParam._m0[13u].y) + ((((((_735.y - _733) * _713) + _733) * cbMtdParam._m0[11u].y) + ((cbMtdParam._m0[22u].y * (((_655.y - _650.y) * _634) + _650.y)) * cbMtdParam._m0[12u].y)) * _675))) + ((_3041 + ((isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0))) * _1815)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0))) * (_3035 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _1007)));
    float _3078 = ((cbInstanceData._m0[_3049].z * ((((_600 + (_484 * _438)) - (_600 * _484)) + cbMtdParam._m0[13u].z) + ((((((_735.z - _734) * _713) + _734) * cbMtdParam._m0[11u].z) + ((cbMtdParam._m0[22u].y * (((_655.z - _650.z) * _634) + _650.z)) * cbMtdParam._m0[12u].z)) * _675))) + ((_3043 + ((isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0))) * _1815)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0))) * (_3037 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _1007)));
    uint _3082 = _935 + 6u;
    float _3090 = _877 / cbSceneParam._m0[86u].x;
    float _3091 = _878 / cbSceneParam._m0[86u].y;
    vec4 _3105 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3090, _3091, (log2((isnan(cbSceneParam._m0[77u].w) ? _812 : (isnan(_812) ? cbSceneParam._m0[77u].w : min(_812, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3107 = _3105.x;
    float _3108 = _3105.y;
    float _3109 = _3105.z;
    float _3110 = _3105.w;
    float _3181;
    float _3183;
    float _3185;
    float _3187;
    if (_812 > cbSceneParam._m0[78u].w)
    {
        float _3144 = isnan(_812) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _812 : min(cbSceneParam._m0[80u].w, _812));
        float _3145 = _3144 / _812;
        float _3156 = _3145 * _862;
        float _3157 = _863 * _3145;
        float _3158 = (-0.0) - _3157;
        float _3159 = _3145 * _864;
        float _3161 = (cbSceneParam._m0[77u].w * _3158) / _3144;
        float _3162 = _3161 + cbSceneParam._m0[79u].w;
        float _3163 = cbSceneParam._m0[79u].w - _3157;
        float _3169 = sqrt(((_3156 * _3156) + (_3157 * _3157)) + (_3159 * _3159));
        float _3172 = (1.0 - (cbSceneParam._m0[77u].w / _3144)) * _3169;
        float _3177 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3179 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3332;
        if (abs((_3158 - _3161) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3332 = ((((_3162 > 0.0) ? exp2(_3177 * _3162) : (2.0 - exp2(_3179 * _3162))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3172;
        }
        else
        {
            float _3292 = 1.0 / cbSceneParam._m0[80u].x;
            float _3293 = isnan(_3163) ? _3162 : (isnan(_3162) ? _3163 : max(_3162, _3163));
            float _3294 = isnan(_3163) ? _3162 : (isnan(_3162) ? _3163 : min(_3162, _3163));
            float _3303 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : min(_3293, 0.0));
            float _3304 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : min(_3294, 0.0));
            _3332 = ((abs(_3169 / _3158) * cbSceneParam._m0[80u].y) * ((((_3303 - _3304) * 2.0) - ((exp2(_3177 * (isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0)))) - exp2(_3177 * (isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0))))) * _3292)) - ((exp2(_3179 * _3303) - exp2(_3179 * _3304)) * _3292))) + (_3172 * cbSceneParam._m0[80u].z);
        }
        vec4 _3334 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3090, _3091, 1.0), 0.0);
        float _3343 = exp2((_3332 * (-1.44269502162933349609375)) * (1.0 - _3334.w));
        float _3344 = log2(_3343);
        float _3360 = log2(_3110);
        _3181 = (exp2(_3360 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3344 * cbSceneParam._m0[78u].x)) * _3334.x) / cbSceneParam._m0[78u].x)) + _3107;
        _3183 = (exp2(_3360 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3344 * cbSceneParam._m0[78u].y)) * _3334.y) / cbSceneParam._m0[78u].y)) + _3108;
        _3185 = (exp2(_3360 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3344 * cbSceneParam._m0[78u].z)) * _3334.z) / cbSceneParam._m0[78u].z)) + _3109;
        _3187 = _3343 * _3110;
    }
    else
    {
        _3181 = _3107;
        _3183 = _3108;
        _3185 = _3109;
        _3187 = _3110;
    }
    float _3199 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3200 = _3199 == 3.0;
    float _3201 = log2(_3187);
    float _3208 = exp2(_3201 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0)));
    float _3209 = exp2(_3201 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0)));
    float _3210 = exp2(_3201 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0)));
    float _3219 = (_3199 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3219 * (_3200 ? _3208 : (_3208 + (cbSceneParam._m0[72u].w * _3181)));
    SV_Target.y = _3219 * (_3200 ? _3209 : (_3209 + (cbSceneParam._m0[72u].w * _3183)));
    SV_Target.z = _3219 * (_3200 ? _3210 : (_3210 + (cbSceneParam._m0[72u].w * _3185)));
    SV_Target.w = cbInstanceData._m0[_3082].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3082].w;
}


