#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[25];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D C_c4200_transition_snp_0_Texture2D_8;
layout(set = 0, binding = 6) uniform texture2D C_c4200_transition_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D C_c4200_transition_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
bool discard_state;

float _768;
uint _2254;
uint _2255;
uint _2256;
uint _2522;
uint _2523;
uint _2524;
float _2783;
float _2784;
float _2785;
float _2786;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    vec4 _231 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _239 = cbMtdParam._m0[20u].w * _231.x;
    vec4 _252 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _264 = cbMtdParam._m0[10u].x * _252.x;
    float _265 = cbMtdParam._m0[10u].y * _252.y;
    float _266 = cbMtdParam._m0[10u].z * _252.z;
    float _272 = cbMtdParam._m0[18u].w - (cbMtdParam._m0[18u].w * _252.w);
    float _276 = _264 - (_272 * _264);
    float _277 = _265 - (_272 * _265);
    float _278 = _266 - (_272 * _266);
    vec4 _294 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _302 = (_294.x * 2.0) + (-1.0);
    float _304 = (_294.y * 2.0) + (-1.0);
    float _305 = dot(vec2(_302, _304), vec2(_302, _304));
    float _2795 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _311 = sqrt(1.0 - (isnan(1.0) ? _2795 : (isnan(_2795) ? 1.0 : min(_2795, 1.0))));
    float _312 = _294.z * cbMtdParam._m0[17u].y;
    float _315 = fma(_311, _214, fma(_304, _206 * TANGENT.x, (_192 * _184) * _302));
    float _318 = fma(_311, _215, fma(_304, _206 * TANGENT.y, (_192 * _185) * _302));
    float _321 = fma(_311, _216, fma(_304, _206 * TANGENT.z, (_192 * _186) * _302));
    float _325 = inversesqrt(dot(vec3(_315, _318, _321), vec3(_315, _318, _321)));
    float _326 = _325 * _315;
    float _327 = _325 * _318;
    float _328 = _325 * _321;
    float _2806 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _329 = isnan(1.0) ? _2806 : (isnan(_2806) ? 1.0 : min(_2806, 1.0));
    float _2817 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _330 = isnan(1.0) ? _2817 : (isnan(_2817) ? 1.0 : min(_2817, 1.0));
    float _2828 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _331 = isnan(1.0) ? _2828 : (isnan(_2828) ? 1.0 : min(_2828, 1.0));
    float _2839 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _332 = isnan(1.0) ? _2839 : (isnan(_2839) ? 1.0 : min(_2839, 1.0));
    float _348 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _390 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _400 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _390);
    float _401 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _390);
    float _402 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _390);
    float _406 = inversesqrt(dot(vec3(_400, _401, _402), vec3(_400, _401, _402)));
    float _407 = _400 * _406;
    float _408 = _401 * _406;
    float _409 = _402 * _406;
    vec4 _414 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _416 = _414.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _582 = sqrt(((_400 * _400) + (_401 * _401)) + (_402 * _402));
        float _588 = (cbMatDynParam._m0[5u].x * _582) + cbMatDynParam._m0[5u].y;
        float _2850 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
        float _589 = isnan(1.0) ? _2850 : (isnan(_2850) ? 1.0 : min(_2850, 1.0));
        float _593 = (cbMatDynParam._m0[5u].z * _582) + cbMatDynParam._m0[5u].w;
        float _2861 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2861 : (isnan(_2861) ? 1.0 : min(_2861, 1.0))) - _589)) + _589) < ((_416 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _427 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _428 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _447 = fma(_328, cbSceneParam._m0[5u].z, fma(_327, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _326));
    float _450 = fma(_328, cbSceneParam._m0[6u].z, fma(_327, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _326));
    float _453 = fma(_328, cbSceneParam._m0[7u].z, fma(_327, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _326));
    vec4 _455 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _457 = _455.x;
    float _459 = _455.w;
    float _460 = _457 * _457;
    float _480 = (((_460 - _329) + (_459 * _329)) * cbMtdParam._m0[3u].x) + _329;
    float _481 = (((_460 - _330) + (_459 * _330)) * cbMtdParam._m0[3u].x) + _330;
    float _482 = (((_460 - _331) + (_459 * _331)) * cbMtdParam._m0[3u].x) + _331;
    float _483 = (((_455.y - _332) + (_459 * _332)) * cbMtdParam._m0[3u].x) + _332;
    vec4 _492 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _427, cbSceneParam._m0[86u].y * _428));
    float _495 = _492.x * TEXCOORD_4;
    float _496 = dot(vec3(_326, _327, _328), vec3(_407, _408, _409));
    float _499 = _496 * 2.0;
    float _503 = (_499 * _326) - _407;
    float _504 = (_499 * _327) - _408;
    float _505 = (_499 * _328) - _409;
    float _509 = abs(dot(vec3(_407, _408, _409), vec3(_326, _327, _328)));
    float _2872 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _510 = isnan(1.0) ? _2872 : (isnan(_2872) ? 1.0 : min(_2872, 1.0));
    float _516 = sqrt(_483);
    float _528 = exp2((_516 * 5.0) * log2(1.0 - (_510 * 0.999000012874603271484375))) / (4.0 - (_516 * 3.0));
    float _534 = (1.0 - _528) * ((_516 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _535 = _528 * _516;
    float _563 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _567 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _571 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _767;
    float _769;
    float _770;
    float _771;
    float _772;
    float _773;
    float _774;
    float _775;
    float _776;
    float _777;
    float _778;
    float _779;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _627 = fma(_571, cbModelParam._m0[26u].z, fma(_567, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _563));
        float _631 = fma(_571, cbModelParam._m0[27u].z, fma(_567, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _563));
        float _635 = fma(_571, cbModelParam._m0[28u].z, fma(_567, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _563));
        float _660 = _563 + _326;
        float _661 = _567 + _327;
        float _662 = _571 + _328;
        float _672 = fma(_662, cbModelParam._m0[26u].z, fma(_661, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _660)) - _627;
        float _673 = fma(_662, cbModelParam._m0[27u].z, fma(_661, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _660)) - _631;
        float _674 = fma(_662, cbModelParam._m0[28u].z, fma(_661, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _660)) - _635;
        float _678 = inversesqrt(dot(vec3(_672, _673, _674), vec3(_672, _673, _674)));
        float _691 = ((_678 * _672) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_627 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _692 = ((_678 * _673) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_631 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _693 = ((_678 * _674) / cbModelParam._m0[34u].z) + ((((((_635 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _696 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_691, _692, _693), 0.0);
        vec4 _703 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_691, _692, _693), 0.0);
        vec4 _710 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_691, _692, _693), 0.0);
        vec4 _717 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_691, _692, _693), 0.0);
        float _730 = exp2((_696.w + (-0.5)) * 20.0) * 2.0;
        float _740 = exp2((_703.w + (-0.5)) * 20.0) * 2.0;
        float _750 = exp2((_710.w + (-0.5)) * 20.0) * 2.0;
        float _760 = exp2((_717.w + (-0.5)) * 20.0) * 2.0;
        float _761 = _760 * (_717.x + (-0.5));
        float _762 = _760 * (_717.y + (-0.5));
        float _763 = _760 * (_717.z + (-0.5));
        _767 = _730 * (_696.z + (-0.5));
        _769 = _730 * (_696.y + (-0.5));
        _770 = _730 * (_696.x + (-0.5));
        _771 = _740 * (_703.z + (-0.5));
        _772 = _740 * (_703.y + (-0.5));
        _773 = _740 * (_703.x + (-0.5));
        _774 = _750 * (_710.z + (-0.5));
        _775 = _750 * (_710.y + (-0.5));
        _776 = _750 * (_710.x + (-0.5));
        _777 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        _778 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        _779 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    }
    else
    {
        _767 = _768;
        _769 = _768;
        _770 = _768;
        _771 = _768;
        _772 = _768;
        _773 = _768;
        _774 = _768;
        _775 = _768;
        _776 = _768;
        _777 = _768;
        _778 = _768;
        _779 = _768;
    }
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _808 = fma(_571, cbModelParam._m0[30u].z, fma(_567, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _563));
        float _812 = fma(_571, cbModelParam._m0[31u].z, fma(_567, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _563));
        float _816 = fma(_571, cbModelParam._m0[32u].z, fma(_567, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _563));
        float _839 = _563 + _326;
        float _840 = _567 + _327;
        float _841 = _571 + _328;
        float _851 = fma(_841, cbModelParam._m0[30u].z, fma(_840, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _839)) - _808;
        float _852 = fma(_841, cbModelParam._m0[31u].z, fma(_840, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _839)) - _812;
        float _853 = fma(_841, cbModelParam._m0[32u].z, fma(_840, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _839)) - _816;
        float _857 = inversesqrt(dot(vec3(_851, _852, _853), vec3(_851, _852, _853)));
        float _870 = ((_857 * _851) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_808 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _871 = ((_857 * _852) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_812 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _872 = ((_857 * _853) / cbModelParam._m0[35u].z) + ((((((_816 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _881 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _888 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        float _907 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _917 = exp2((_881.w + (-0.5)) * 20.0) * 2.0;
        float _927 = exp2((_888.w + (-0.5)) * 20.0) * 2.0;
        float _937 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_895.x + (-0.5));
        float _939 = _937 * (_895.y + (-0.5));
        float _940 = _937 * (_895.z + (-0.5));
        _944 = _907 * (_874.z + (-0.5));
        _945 = _907 * (_874.y + (-0.5));
        _946 = _907 * (_874.x + (-0.5));
        _947 = _917 * (_881.z + (-0.5));
        _948 = _917 * (_881.y + (-0.5));
        _949 = _917 * (_881.x + (-0.5));
        _950 = _927 * (_888.z + (-0.5));
        _951 = _927 * (_888.y + (-0.5));
        _952 = _927 * (_888.x + (-0.5));
        _953 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        _954 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        _955 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    }
    else
    {
        _944 = _768;
        _945 = _768;
        _946 = _768;
        _947 = _768;
        _948 = _768;
        _949 = _768;
        _950 = _768;
        _951 = _768;
        _952 = _768;
        _953 = _768;
        _954 = _768;
        _955 = _768;
    }
    float _970 = _503 * 0.5;
    float _971 = _504 * 0.5;
    float _972 = _505 * 0.5;
    float _973 = dot(vec4(_970, _971, _972, 1.0), vec4(_946, _949, _952, _955));
    float _976 = dot(vec4(_970, _971, _972, 1.0), vec4(_945, _948, _951, _954));
    float _979 = dot(vec4(_970, _971, _972, 1.0), vec4(_944, _947, _950, _953));
    float _1014;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _986 = dot(vec4(_970, _971, _972, 1.0), vec4(_767, _771, _774, _777));
        float _990 = dot(vec4(_970, _971, _972, 1.0), vec4(_769, _772, _775, _778));
        float _994 = dot(vec4(_970, _971, _972, 1.0), vec4(_770, _773, _776, _779));
        float _1001 = dot(vec4(cbModelParam._m0[39u]), vec4(_970, _971, _972, 1.0));
        _1014 = dot(vec3(isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0)), isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0)), isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1001) ? 0.0 : (isnan(0.0) ? _1001 : max(0.0, _1001))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1014 = 1.0;
    }
    float _1025;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1016 = dot(vec4(cbModelParam._m0[40u]), vec4(_970, _971, _972, 1.0));
        _1025 = dot(vec3(isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0)), isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0)), isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1016) ? 0.0 : (isnan(0.0) ? _1016 : max(0.0, _1016))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1025 = 1.0;
    }
    float _1029 = (_1025 * cbModelParam._m0[1u].x) + (_1014 * (1.0 - cbModelParam._m0[1u].x));
    float _1036 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _483);
    float _1037 = isnan(_1036) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1036 : min(cbModelParam._m0[25u].z, _1036));
    float _1120;
    float _1122;
    float _1124;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1087 = fma(_571, cbModelParam._m0[13u].z, fma(_567, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _563)) + cbModelParam._m0[13u].w;
        float _1091 = fma(_571, cbModelParam._m0[14u].z, fma(_567, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _563)) + cbModelParam._m0[14u].w;
        float _1095 = fma(_571, cbModelParam._m0[15u].z, fma(_567, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _563)) + cbModelParam._m0[15u].w;
        float _1098 = fma(_505, cbModelParam._m0[13u].z, fma(_504, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _503));
        float _1101 = fma(_505, cbModelParam._m0[14u].z, fma(_504, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _503));
        float _1104 = fma(_505, cbModelParam._m0[15u].z, fma(_504, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _503));
        float _1132;
        if (_1098 > 0.0)
        {
            _1132 = abs((1.0 - _1087) / _1098);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1098 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1087 + 1.0) / _1098);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1132 = frontier_phi_19_17_ladder;
        }
        float _1479;
        if (_1101 > 0.0)
        {
            _1479 = abs((1.0 - _1091) / _1101);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1101 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1091 + 1.0) / _1101);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1479 = frontier_phi_28_24_ladder;
        }
        float _1685;
        if (_1104 > 0.0)
        {
            _1685 = abs((1.0 - _1095) / _1104);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1104 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1095 + 1.0) / _1104);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1685 = frontier_phi_40_35_ladder;
        }
        float _1687 = isnan(_1479) ? _1132 : (isnan(_1132) ? _1479 : min(_1132, _1479));
        float _1688 = isnan(_1685) ? _1687 : (isnan(_1687) ? _1685 : min(_1687, _1685));
        float _1692 = (_1688 * _1098) + _1087;
        float _1693 = (_1688 * _1101) + _1091;
        float _1694 = (_1688 * _1104) + _1095;
        float _1695 = _1688 * 9.9999997473787516355514526367188e-05;
        float _1697 = (-1.0) - _1695;
        float _1699 = _1695 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1694 > _1699) || ((_1694 < _1697) || ((_1693 > _1699) || ((_1693 < _1697) || ((_1692 < _1697) || (_1692 > _1699))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1886 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1694, cbModelParam._m0[9u].z, fma(_1693, cbModelParam._m0[9u].y, _1692 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1694, cbModelParam._m0[10u].z, fma(_1693, cbModelParam._m0[10u].y, _1692 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1694, cbModelParam._m0[11u].z, fma(_1693, cbModelParam._m0[11u].y, _1692 * cbModelParam._m0[11u].x))), _1037);
            frontier_phi_18_40_ladder = _1886.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1886.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1886.x * cbModelParam._m0[1u].y;
        }
        _1120 = frontier_phi_18_40_ladder_2;
        _1122 = frontier_phi_18_40_ladder_1;
        _1124 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1108 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_503, _504, _505), _1037);
        _1120 = _1108.x * cbModelParam._m0[1u].y;
        _1122 = _1108.y * cbModelParam._m0[1u].y;
        _1124 = _1108.z * cbModelParam._m0[1u].y;
    }
    float _1128 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _483);
    float _1129 = isnan(_1128) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1128 : min(cbModelParam._m0[25u].w, _1128));
    float _1221;
    float _1223;
    float _1225;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1185 = fma(_571, cbModelParam._m0[21u].z, fma(_567, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _563)) + cbModelParam._m0[21u].w;
        float _1189 = fma(_571, cbModelParam._m0[22u].z, fma(_567, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _563)) + cbModelParam._m0[22u].w;
        float _1193 = fma(_571, cbModelParam._m0[23u].z, fma(_567, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _563)) + cbModelParam._m0[23u].w;
        float _1196 = fma(_505, cbModelParam._m0[21u].z, fma(_504, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _503));
        float _1199 = fma(_505, cbModelParam._m0[22u].z, fma(_504, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _503));
        float _1202 = fma(_505, cbModelParam._m0[23u].z, fma(_504, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _503));
        float _1484;
        if (_1196 > 0.0)
        {
            _1484 = abs((1.0 - _1185) / _1196);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1196 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1185 + 1.0) / _1196);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1484 = frontier_phi_30_26_ladder;
        }
        float _1712;
        if (_1199 > 0.0)
        {
            _1712 = abs((1.0 - _1189) / _1199);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1199 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1189 + 1.0) / _1199);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1712 = frontier_phi_42_37_ladder;
        }
        float _2017;
        if (_1202 > 0.0)
        {
            _2017 = abs((1.0 - _1193) / _1202);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_1202 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_1193 + 1.0) / _1202);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _2017 = frontier_phi_53_48_ladder;
        }
        float _2019 = isnan(_1712) ? _1484 : (isnan(_1484) ? _1712 : min(_1484, _1712));
        float _2020 = isnan(_2017) ? _2019 : (isnan(_2019) ? _2017 : min(_2019, _2017));
        float _2024 = (_2020 * _1196) + _1185;
        float _2025 = (_2020 * _1199) + _1189;
        float _2026 = (_2020 * _1202) + _1193;
        float _2027 = _2020 * 9.9999997473787516355514526367188e-05;
        float _2028 = (-1.0) - _2027;
        float _2030 = _2027 + 1.0;
        float frontier_phi_27_53_ladder;
        float frontier_phi_27_53_ladder_1;
        float frontier_phi_27_53_ladder_2;
        if ((_2026 > _2030) || ((_2026 < _2028) || ((_2025 > _2030) || ((_2025 < _2028) || ((_2024 < _2028) || (_2024 > _2030))))))
        {
            frontier_phi_27_53_ladder = 0.0;
            frontier_phi_27_53_ladder_1 = 0.0;
            frontier_phi_27_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2152 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2026, cbModelParam._m0[17u].z, fma(_2025, cbModelParam._m0[17u].y, _2024 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2026, cbModelParam._m0[18u].z, fma(_2025, cbModelParam._m0[18u].y, _2024 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2026, cbModelParam._m0[19u].z, fma(_2025, cbModelParam._m0[19u].y, _2024 * cbModelParam._m0[19u].x))), _1129);
            frontier_phi_27_53_ladder = _2152.y * cbModelParam._m0[1u].z;
            frontier_phi_27_53_ladder_1 = _2152.x * cbModelParam._m0[1u].z;
            frontier_phi_27_53_ladder_2 = _2152.z * cbModelParam._m0[1u].z;
        }
        _1221 = frontier_phi_27_53_ladder_1;
        _1223 = frontier_phi_27_53_ladder;
        _1225 = frontier_phi_27_53_ladder_2;
    }
    else
    {
        vec4 _1205 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_503, _504, _505), _1129);
        _1221 = _1205.x * cbModelParam._m0[1u].z;
        _1223 = _1205.y * cbModelParam._m0[1u].z;
        _1225 = _1205.z * cbModelParam._m0[1u].z;
    }
    float _1238 = (((_534 * _480) + _535) * _495) * ((cbModelParam._m0[1u].w * (_1221 - _1120)) + _1120);
    float _1240 = (((_534 * _481) + _535) * _495) * ((cbModelParam._m0[1u].w * (_1223 - _1122)) + _1122);
    float _1242 = (((_534 * _482) + _535) * _495) * ((cbModelParam._m0[1u].w * (_1225 - _1124)) + _1124);
    float _1263 = fma(_1242, cbSceneParam._m0[89u].z, fma(_1240, cbSceneParam._m0[89u].y, _1238 * cbSceneParam._m0[89u].x));
    float _1266 = fma(_1242, cbSceneParam._m0[90u].z, fma(_1240, cbSceneParam._m0[90u].y, _1238 * cbSceneParam._m0[90u].x));
    float _1269 = fma(_1242, cbSceneParam._m0[91u].z, fma(_1240, cbSceneParam._m0[91u].y, _1238 * cbSceneParam._m0[91u].x));
    uint _1276 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1280 = floatBitsToUint(cbInstanceData._m0[_1276 + 5u]);
    uint _1282 = _1280.x * 14u;
    uint _1283 = _1282 + 13u;
    float _1289 = _495 + (-1.0);
    float _1293 = (cbLight._m0[_1283].x * _1289) + 1.0;
    float _1294 = (cbLight._m0[_1283].y * _1289) + 1.0;
    float _1295 = (cbLight._m0[_1283].w * _1289) + 1.0;
    uint _1299 = _1282 + 8u;
    float _1315 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1282].w)) * _483) * 0.949999988079071044921875);
    float _1316 = _1315 * _1315;
    float _1317 = cbLight._m0[_1282].x + _407;
    float _1318 = cbLight._m0[_1282].y + _408;
    float _1319 = cbLight._m0[_1282].z + _409;
    float _1323 = inversesqrt(dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319)));
    float _1324 = _1323 * _1317;
    float _1325 = _1323 * _1318;
    float _1326 = _1323 * _1319;
    float _1327 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_1282].xyz));
    float _2998 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
    float _1330 = isnan(1.0) ? _2998 : (isnan(_2998) ? 1.0 : min(_2998, 1.0));
    float _3009 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _1331 = isnan(1.0) ? _3009 : (isnan(_3009) ? 1.0 : min(_3009, 1.0));
    float _1332 = dot(vec3(_326, _327, _328), vec3(_1324, _1325, _1326));
    float _3020 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
    float _1335 = isnan(1.0) ? _3020 : (isnan(_3020) ? 1.0 : min(_3020, 1.0));
    float _1336 = dot(vec3(cbLight._m0[_1282].xyz), vec3(_1324, _1325, _1326));
    float _3031 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
    float _1340 = _1316 * _1316;
    float _1344 = ((_1335 * _1335) * (_1340 + (-1.0))) + 1.0;
    float _1352 = exp2(log2(1.0 - (isnan(1.0) ? _3031 : (isnan(_3031) ? 1.0 : min(_3031, 1.0)))) * 5.0);
    float _1353 = 1.0 - _480;
    float _1354 = 1.0 - _481;
    float _1355 = 1.0 - _482;
    float _1362 = 1.0 - _1316;
    float _1373 = (0.5 / (((_1331 * ((_1330 * _1362) + _1316)) + 9.9999999392252902907785028219223e-09) + (((_1331 * _1362) + _1316) * _1330))) * _1330;
    float _3042 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
    float _1375 = (isnan(1.0) ? _3042 : (isnan(_3042) ? 1.0 : min(_3042, 1.0))) * (_1340 / ((_1344 * _1344) * 3.141590118408203125));
    float _1376 = isnan(1.0) ? _1293 : (isnan(_1293) ? 1.0 : min(_1293, 1.0));
    uint _1386 = _1282 | 1u;
    uint _1390 = _1282 + 9u;
    float _1404 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1386].w)) * _483) * 0.949999988079071044921875);
    float _1405 = _1404 * _1404;
    float _1406 = cbLight._m0[_1386].x + _407;
    float _1407 = cbLight._m0[_1386].y + _408;
    float _1408 = cbLight._m0[_1386].z + _409;
    float _1412 = inversesqrt(dot(vec3(_1406, _1407, _1408), vec3(_1406, _1407, _1408)));
    float _1413 = _1412 * _1406;
    float _1414 = _1412 * _1407;
    float _1415 = _1412 * _1408;
    float _1416 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_1386].xyz));
    float _3058 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
    float _1419 = isnan(1.0) ? _3058 : (isnan(_3058) ? 1.0 : min(_3058, 1.0));
    float _1420 = dot(vec3(_326, _327, _328), vec3(_1413, _1414, _1415));
    float _3069 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
    float _1423 = isnan(1.0) ? _3069 : (isnan(_3069) ? 1.0 : min(_3069, 1.0));
    float _1424 = dot(vec3(cbLight._m0[_1386].xyz), vec3(_1413, _1414, _1415));
    float _3080 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
    float _1428 = _1405 * _1405;
    float _1432 = ((_1423 * _1423) * (_1428 + (-1.0))) + 1.0;
    float _1439 = exp2(log2(1.0 - (isnan(1.0) ? _3080 : (isnan(_3080) ? 1.0 : min(_3080, 1.0)))) * 5.0);
    float _1446 = 1.0 - _1405;
    float _1456 = (0.5 / (((_1331 * ((_1419 * _1446) + _1405)) + 9.9999999392252902907785028219223e-09) + (((_1331 * _1446) + _1405) * _1419))) * _1419;
    float _3091 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
    float _1458 = (isnan(1.0) ? _3091 : (isnan(_3091) ? 1.0 : min(_3091, 1.0))) * (_1428 / ((_1432 * _1432) * 3.141590118408203125));
    float _1459 = isnan(1.0) ? _1294 : (isnan(_1294) ? 1.0 : min(_1294, 1.0));
    float _1469 = (((((_1439 * _1353) + _480) * cbLight._m0[_1390].x) * _1458) * _1459) + (((((_1352 * _1353) + _480) * cbLight._m0[_1299].x) * _1375) * _1376);
    float _1470 = (((((_1439 * _1354) + _481) * cbLight._m0[_1390].y) * _1458) * _1459) + (((((_1352 * _1354) + _481) * cbLight._m0[_1299].y) * _1375) * _1376);
    float _1471 = (((((_1439 * _1355) + _482) * cbLight._m0[_1390].z) * _1458) * _1459) + (((((_1352 * _1355) + _482) * cbLight._m0[_1299].z) * _1375) * _1376);
    uvec4 _1476 = floatBitsToUint(cbLight._m0[_1282 + 12u]);
    float _1489;
    float _1491;
    float _1493;
    if (_1476.x == 0u)
    {
        _1489 = _1469;
        _1491 = _1470;
        _1493 = _1471;
    }
    else
    {
        float _1499 = (cbLight._m0[_1283].z * _1289) + 1.0;
        uint _1500 = _1282 + 2u;
        uint _1504 = _1282 + 10u;
        float _1518 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1500].w)) * _483) * 0.949999988079071044921875);
        float _1519 = _1518 * _1518;
        float _1520 = cbLight._m0[_1500].x + _407;
        float _1521 = cbLight._m0[_1500].y + _408;
        float _1522 = cbLight._m0[_1500].z + _409;
        float _1526 = inversesqrt(dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522)));
        float _1527 = _1526 * _1520;
        float _1528 = _1526 * _1521;
        float _1529 = _1526 * _1522;
        float _1530 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_1500].xyz));
        float _3107 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1533 = isnan(1.0) ? _3107 : (isnan(_3107) ? 1.0 : min(_3107, 1.0));
        float _1534 = dot(vec3(_326, _327, _328), vec3(_1527, _1528, _1529));
        float _3118 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1537 = isnan(1.0) ? _3118 : (isnan(_3118) ? 1.0 : min(_3118, 1.0));
        float _1538 = dot(vec3(cbLight._m0[_1500].xyz), vec3(_1527, _1528, _1529));
        float _3129 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1542 = _1519 * _1519;
        float _1546 = ((_1537 * _1537) * (_1542 + (-1.0))) + 1.0;
        float _1553 = exp2(log2(1.0 - (isnan(1.0) ? _3129 : (isnan(_3129) ? 1.0 : min(_3129, 1.0)))) * 5.0);
        float _1560 = 1.0 - _1519;
        float _1570 = (0.5 / (((_1331 * ((_1533 * _1560) + _1519)) + 9.9999999392252902907785028219223e-09) + (((_1331 * _1560) + _1519) * _1533))) * _1533;
        float _3140 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1572 = (isnan(1.0) ? _3140 : (isnan(_3140) ? 1.0 : min(_3140, 1.0))) * (_1542 / ((_1546 * _1546) * 3.141590118408203125));
        float _1573 = isnan(1.0) ? _1499 : (isnan(_1499) ? 1.0 : min(_1499, 1.0));
        _1489 = (((((_1553 * _1353) + _480) * cbLight._m0[_1504].x) * _1572) * _1573) + _1469;
        _1491 = (((((_1553 * _1354) + _481) * cbLight._m0[_1504].y) * _1572) * _1573) + _1470;
        _1493 = (((((_1553 * _1355) + _482) * cbLight._m0[_1504].z) * _1572) * _1573) + _1471;
    }
    float _1591;
    float _1593;
    float _1595;
    if (_1476.y == 0u)
    {
        _1591 = _1489;
        _1593 = _1491;
        _1595 = _1493;
    }
    else
    {
        uint _1602 = _1282 + 3u;
        uint _1606 = _1282 + 11u;
        float _1620 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1602].w)) * _483) * 0.949999988079071044921875);
        float _1621 = _1620 * _1620;
        float _1622 = cbLight._m0[_1602].x + _407;
        float _1623 = cbLight._m0[_1602].y + _408;
        float _1624 = cbLight._m0[_1602].z + _409;
        float _1628 = inversesqrt(dot(vec3(_1622, _1623, _1624), vec3(_1622, _1623, _1624)));
        float _1629 = _1628 * _1622;
        float _1630 = _1628 * _1623;
        float _1631 = _1628 * _1624;
        float _1632 = dot(vec3(_326, _327, _328), vec3(cbLight._m0[_1602].xyz));
        float _3156 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1635 = isnan(1.0) ? _3156 : (isnan(_3156) ? 1.0 : min(_3156, 1.0));
        float _1636 = dot(vec3(_326, _327, _328), vec3(_1629, _1630, _1631));
        float _3167 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1639 = isnan(1.0) ? _3167 : (isnan(_3167) ? 1.0 : min(_3167, 1.0));
        float _1640 = dot(vec3(cbLight._m0[_1602].xyz), vec3(_1629, _1630, _1631));
        float _3178 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1644 = _1621 * _1621;
        float _1648 = ((_1639 * _1639) * (_1644 + (-1.0))) + 1.0;
        float _1655 = exp2(log2(1.0 - (isnan(1.0) ? _3178 : (isnan(_3178) ? 1.0 : min(_3178, 1.0)))) * 5.0);
        float _1662 = 1.0 - _1621;
        float _1672 = (0.5 / (((_1331 * ((_1635 * _1662) + _1621)) + 9.9999999392252902907785028219223e-09) + (((_1331 * _1662) + _1621) * _1635))) * _1635;
        float _3189 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1674 = (isnan(1.0) ? _3189 : (isnan(_3189) ? 1.0 : min(_3189, 1.0))) * (_1644 / ((_1648 * _1648) * 3.141590118408203125));
        float _1675 = isnan(1.0) ? _1295 : (isnan(_1295) ? 1.0 : min(_1295, 1.0));
        _1591 = (((((_1655 * _1353) + _480) * cbLight._m0[_1606].x) * _1674) * _1675) + _1489;
        _1593 = (((((_1655 * _1354) + _481) * cbLight._m0[_1606].y) * _1674) * _1675) + _1491;
        _1595 = (((((_1655 * _1355) + _482) * cbLight._m0[_1606].z) * _1674) * _1675) + _1493;
    }
    float _1816;
    float _1818;
    float _1820;
    if (_1280.y == 0u)
    {
        float _1756 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1757 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1756;
        float _1758 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1756;
        float _1759 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1756;
        uvec4 _1771 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1772 = _1771.x;
        uint _1783 = uint((float(_1771.y) * floor(float(uint(cbSceneParam._m0[85u].y * _428) / _1772))) + floor(float(uint(cbSceneParam._m0[85u].x * _427) / _1772)));
        float _1793 = (log2(_1759 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1794 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        uint _1797 = uint(isnan(14.0) ? _1794 : (isnan(_1794) ? 14.0 : min(_1794, 14.0)));
        uvec4 _1802 = texelFetch(g_lightClusterGridBuffer, int(((_1797 << 2u) + (_1783 << 6u)) >> 2u));
        uint _1803 = _1802.x;
        uint _1804 = _1771.z;
        float _1895;
        float _1897;
        float _1899;
        if (((((1u << ((_1804 >> 4u) & 15u)) + 4294967295u) & _1803) == 0u) || ((_1804 & 240u) == 0u))
        {
            _1895 = 0.0;
            _1897 = 0.0;
            _1899 = 0.0;
        }
        else
        {
            float _1896;
            float _1898;
            float _1900;
            float _2066 = 0.0;
            float _2067 = 0.0;
            float _2068 = 0.0;
            uint _2069 = 0u;
            uint _2078;
            bool _2079;
            for (;;)
            {
                _2078 = texelFetch(g_lightClassification, int((((_1797 << 5u) + (_1783 << 9u)) + (_2069 << 2u)) >> 2u)).x;
                _2079 = _2078 == 0u;
                float frontier_phi_64_pred;
                float frontier_phi_64_pred_1;
                float frontier_phi_64_pred_2;
                if (_2079)
                {
                    frontier_phi_64_pred = _2068;
                    frontier_phi_64_pred_1 = _2067;
                    frontier_phi_64_pred_2 = _2066;
                }
                else
                {
                    float _2224;
                    float _2225;
                    float _2226;
                    uint _2227;
                    _2224 = _2066;
                    _2225 = _2067;
                    _2226 = _2068;
                    _2227 = _2078;
                    float _2157;
                    float _2158;
                    float _2159;
                    for (;;)
                    {
                        uint _2231 = uint(findLSB(_2227)) + (_2069 << 5u);
                        uint _2228 = (_2227 + 4294967295u) & _2227;
                        uint _2233 = _2231 * 48u;
                        vec4 _2247 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2233)).x, texelFetch(g_PointLightRenderingBuffer, int(_2233 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2233 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2233 + 3u)).x));
                        uint _2264 = (_2231 * 48u) + 8u;
                        vec3 _2275 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2264)).x, texelFetch(g_PointLightRenderingBuffer, int(_2264 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2264 + 2u)).x));
                        float _2279 = _2247.x - _1757;
                        float _2280 = _2247.y - _1758;
                        float _2281 = _2247.z - _1759;
                        float _2282 = dot(vec3(_2279, _2280, _2281), vec3(_2279, _2280, _2281));
                        float _2285 = inversesqrt(_2282);
                        float _2286 = _2285 * _2279;
                        float _2287 = _2285 * _2280;
                        float _2288 = _2285 * _2281;
                        float _2294 = 1.0 - (_2282 * _2247.w);
                        float _3215 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
                        float _2296 = sqrt(_2282) * uintBitsToFloat(uvec4(_2254, _2255, _2256, texelFetch(g_PointLightRenderingBuffer, int(((_2231 * 48u) + 4u) + 3u)).x)).w;
                        float _2300 = _2296 * _2296;
                        float _2301 = (-0.0) - _1757;
                        float _2302 = (-0.0) - _1758;
                        float _2303 = (-0.0) - _1759;
                        float _2307 = inversesqrt(dot(vec3(_2301, _2302, _2303), vec3(_2301, _2302, _2303)));
                        float _2308 = _2307 * _2301;
                        float _2309 = _2307 * _2302;
                        float _2310 = _2307 * _2303;
                        float _2318 = exp2(log2(1.0 / ((_2300 * 3.5) + 5.0)) * 0.25);
                        float _2319 = 1.0 - _516;
                        float _2326 = sqrt(1.0 - ((1.0 - (_2319 * _2319)) * (1.0 - (_2318 * _2318))));
                        float _2327 = _2326 * _2326;
                        float _2328 = _2327 * _2327;
                        float _2329 = _2308 + _2286;
                        float _2330 = _2309 + _2287;
                        float _2331 = _2310 + _2288;
                        float _2335 = inversesqrt(dot(vec3(_2329, _2330, _2331), vec3(_2329, _2330, _2331)));
                        float _2339 = dot(vec3(_447, _450, _453), vec3(_2308, _2309, _2310));
                        float _3226 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
                        float _2342 = isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0));
                        float _2343 = dot(vec3(_447, _450, _453), vec3(_2335 * _2329, _2335 * _2330, _2335 * _2331));
                        float _3237 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
                        float _2346 = isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0));
                        float _2350 = ((_2346 * _2346) * (_2328 + (-1.0))) + 1.0;
                        float _2351 = (1.39999997615814208984375 / (_2296 + 1.39999997615814208984375)) * _2327;
                        float _2352 = _2351 * _2351;
                        float _2355 = ((1.0 - _2352) * dot(vec3(_447, _450, _453), vec3(_2286, _2287, _2288))) + _2352;
                        float _3248 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
                        float _2356 = isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0));
                        float _2357 = 1.0 - _2327;
                        float _2367 = (0.5 / (((_2356 * ((_2342 * _2357) + _2327)) + 9.9999999392252902907785028219223e-09) + (((_2356 * _2357) + _2327) * _2342))) * _2356;
                        float _3259 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
                        float _2378 = (((_2328 * 3.1415927410125732421875) * (isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0)))) / ((_2350 * _2350) * ((_2300 * 2.1991131305694580078125) + 3.141590118408203125))) * (isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0)));
                        _2157 = (_2378 * _2275.x) + _2224;
                        _2158 = (_2378 * _2275.y) + _2225;
                        _2159 = (_2378 * _2275.z) + _2226;
                        if (_2228 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2224 = _2157;
                            _2225 = _2158;
                            _2226 = _2159;
                            _2227 = _2228;
                        }
                    }
                    frontier_phi_64_pred = _2159;
                    frontier_phi_64_pred_1 = _2158;
                    frontier_phi_64_pred_2 = _2157;
                }
                _1900 = frontier_phi_64_pred;
                _1898 = frontier_phi_64_pred_1;
                _1896 = frontier_phi_64_pred_2;
                uint _2070 = _2069 + 1u;
                if (_2070 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2066 = _1896;
                    _2067 = _1898;
                    _2068 = _1900;
                    _2069 = _2070;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1895 = _1896;
            _1897 = _1898;
            _1899 = _1900;
        }
        uvec4 _1903 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1904 = _1903.z;
        uint _1906 = (_1904 >> 8u) & 15u;
        float _2043;
        float _2045;
        float _2047;
        if (((4294967295u << _1906) & _1803) == 0u)
        {
            _2043 = _1895;
            _2045 = _1897;
            _2047 = _1899;
        }
        else
        {
            float _2059 = inversesqrt(dot(vec3(_1757, _1758, _1759), vec3(_1757, _1758, _1759)));
            float _2060 = _2059 * _1757;
            float _2061 = _2059 * _1758;
            float _2062 = _2059 * _1759;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            if (_1906 < ((_1904 >> 12u) & 15u))
            {
                float _2044;
                float _2046;
                float _2048;
                float _2210 = _1895;
                float _2211 = _1897;
                float _2212 = _1899;
                uint _2213 = _1906;
                uint _2222;
                bool _2223;
                for (;;)
                {
                    _2222 = texelFetch(g_lightClassification, int((((_1797 << 5u) + (_1783 << 9u)) + (_2213 << 2u)) >> 2u)).x;
                    _2223 = _2222 == 0u;
                    float frontier_phi_75_pred;
                    float frontier_phi_75_pred_1;
                    float frontier_phi_75_pred_2;
                    if (_2223)
                    {
                        frontier_phi_75_pred = _2212;
                        frontier_phi_75_pred_1 = _2211;
                        frontier_phi_75_pred_2 = _2210;
                    }
                    else
                    {
                        float _2388;
                        float _2389;
                        float _2390;
                        float _2653;
                        float _2654;
                        float _2655;
                        float _2398 = _2210;
                        float _2399 = _2211;
                        float _2400 = _2212;
                        uint _2401 = _2222;
                        uint _2402;
                        uint _2412;
                        vec4 _2427;
                        float _2428;
                        vec3 _2440;
                        vec4 _2456;
                        vec4 _2471;
                        float _2518;
                        bool _2519;
                        for (;;)
                        {
                            _2412 = ((_2213 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2401));
                            _2402 = (_2401 + 4294967295u) & _2401;
                            uint _2414 = _2412 * 40u;
                            _2427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2414 + 3u)).x));
                            _2428 = _2427.w;
                            uint _2430 = (_2412 * 40u) + 8u;
                            _2440 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2430 + 2u)).x));
                            uint _2443 = (_2412 * 40u) + 16u;
                            _2456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2443 + 3u)).x));
                            uint _2458 = (_2412 * 40u) + 20u;
                            _2471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2458 + 3u)).x));
                            uint _2474 = (_2412 * 40u) + 24u;
                            vec4 _2487 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2474)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2474 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2474 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2474 + 3u)).x));
                            uint _2493 = (_2412 * 40u) + 28u;
                            vec4 _2506 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2493 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2493 + 3u)).x));
                            _2518 = fma(_1759, _2506.z, fma(_1758, _2506.y, _2506.x * _1757)) + _2506.w;
                            _2519 = !((fma(_1759, _2487.z, fma(_1758, _2487.y, _2487.x * _1757)) + _2487.w) <= 0.0);
                            float frontier_phi_81_pred;
                            float frontier_phi_81_pred_1;
                            float frontier_phi_81_pred_2;
                            if (_2519)
                            {
                                float _2553 = _2427.x - _1757;
                                float _2554 = _2427.y - _1758;
                                float _2555 = _2427.z - _1759;
                                float _2556 = dot(vec3(_2553, _2554, _2555), vec3(_2553, _2554, _2555));
                                float _2559 = inversesqrt(_2556);
                                float _2560 = _2559 * _2553;
                                float _2561 = _2559 * _2554;
                                float _2562 = _2559 * _2555;
                                float _2566 = 1.0 - (_2556 / (_2428 * _2428));
                                float _3270 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
                                float _2568 = sqrt(_2556) * uintBitsToFloat(uvec4(_2522, _2523, _2524, texelFetch(g_SpotLightRenderingBuffer, int(((_2412 * 40u) + 4u) + 3u)).x)).w;
                                float _2571 = _2568 * _2568;
                                float _2572 = (fma(_1759, _2456.z, fma(_1758, _2456.y, _2456.x * _1757)) + _2456.w) / _2518;
                                float _2573 = (fma(_1759, _2471.z, fma(_1758, _2471.y, _2471.x * _1757)) + _2471.w) / _2518;
                                float _2577 = 1.0 - dot(vec2(_2572, _2573), vec2(_2572, _2573));
                                float _3281 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
                                float _2587 = exp2(log2(1.0 / ((_2571 * 3.5) + 5.0)) * 0.25);
                                float _2588 = 1.0 - _516;
                                float _2595 = sqrt(1.0 - ((1.0 - (_2588 * _2588)) * (1.0 - (_2587 * _2587))));
                                float _2596 = _2595 * _2595;
                                float _2597 = _2596 * _2596;
                                float _2598 = _2560 - _2060;
                                float _2599 = _2561 - _2061;
                                float _2600 = _2562 - _2062;
                                float _2604 = inversesqrt(dot(vec3(_2598, _2599, _2600), vec3(_2598, _2599, _2600)));
                                float _2608 = dot(vec3(_447, _450, _453), vec3((-0.0) - _2060, (-0.0) - _2061, (-0.0) - _2062));
                                float _3292 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
                                float _2611 = isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0));
                                float _2612 = dot(vec3(_447, _450, _453), vec3(_2604 * _2598, _2604 * _2599, _2604 * _2600));
                                float _3303 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
                                float _2615 = isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0));
                                float _2619 = ((_2615 * _2615) * (_2597 + (-1.0))) + 1.0;
                                float _2620 = (1.39999997615814208984375 / (_2568 + 1.39999997615814208984375)) * _2596;
                                float _2621 = _2620 * _2620;
                                float _2627 = ((1.0 - _2621) * dot(vec3(_447, _450, _453), vec3(_2560, _2561, _2562))) + _2621;
                                float _3314 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
                                float _2628 = isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0));
                                float _2629 = 1.0 - _2596;
                                float _2639 = (0.5 / (((_2628 * ((_2611 * _2629) + _2596)) + 9.9999999392252902907785028219223e-09) + (((_2628 * _2629) + _2596) * _2611))) * _2628;
                                float _3325 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
                                float _2649 = ((isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0))) * (isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0)))) * (((_2597 * 3.1415927410125732421875) * (isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0)))) / ((_2619 * _2619) * ((_2571 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_81_pred = _2649 * _2440.z;
                                frontier_phi_81_pred_1 = _2649 * _2440.y;
                                frontier_phi_81_pred_2 = _2649 * _2440.x;
                            }
                            else
                            {
                                frontier_phi_81_pred = 0.0;
                                frontier_phi_81_pred_1 = 0.0;
                                frontier_phi_81_pred_2 = 0.0;
                            }
                            _2655 = frontier_phi_81_pred;
                            _2654 = frontier_phi_81_pred_1;
                            _2653 = frontier_phi_81_pred_2;
                            _2388 = _2653 + _2398;
                            _2389 = _2654 + _2399;
                            _2390 = _2655 + _2400;
                            if (_2402 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2398 = _2388;
                                _2399 = _2389;
                                _2400 = _2390;
                                _2401 = _2402;
                                continue;
                            }
                        }
                        frontier_phi_75_pred = _2390;
                        frontier_phi_75_pred_1 = _2389;
                        frontier_phi_75_pred_2 = _2388;
                    }
                    _2048 = frontier_phi_75_pred;
                    _2046 = frontier_phi_75_pred_1;
                    _2044 = frontier_phi_75_pred_2;
                    uint _2214 = _2213 + 1u;
                    if (_2214 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2210 = _2044;
                        _2211 = _2046;
                        _2212 = _2048;
                        _2213 = _2214;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2046;
                frontier_phi_55_56_ladder_1 = _2048;
                frontier_phi_55_56_ladder_2 = _2044;
            }
            else
            {
                frontier_phi_55_56_ladder = _1897;
                frontier_phi_55_56_ladder_1 = _1899;
                frontier_phi_55_56_ladder_2 = _1895;
            }
            _2043 = frontier_phi_55_56_ladder_2;
            _2045 = frontier_phi_55_56_ladder;
            _2047 = frontier_phi_55_56_ladder_1;
        }
        float _2052 = isnan(1.0) ? _495 : (isnan(_495) ? 1.0 : min(_495, 1.0));
        _1816 = ((_2043 * _480) * _2052) + _1591;
        _1818 = ((_2045 * _481) * _2052) + _1593;
        _1820 = ((_2047 * _482) * _2052) + _1595;
    }
    else
    {
        _1816 = _1591;
        _1818 = _1593;
        _1820 = _1595;
    }
    float _1822 = dot(vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375), vec3(_480, _481, _482));
    float _1828 = _1816 + ((isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0))) * _1029);
    float _1829 = _1818 + ((isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0))) * _1029);
    float _1830 = _1820 + ((isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))) * _1029);
    uint _1831 = _1276 + 6u;
    float _1836 = (cbInstanceData._m0[_1831].w * _239) * (((1.0 - _1822) * exp2(log2(1.0 - _510) * 5.0)) + _1822);
    float _1841 = _427 / cbSceneParam._m0[86u].x;
    float _1842 = _428 / cbSceneParam._m0[86u].y;
    vec4 _1856 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1841, _1842, (log2((isnan(cbSceneParam._m0[77u].w) ? _348 : (isnan(_348) ? cbSceneParam._m0[77u].w : min(_348, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1858 = _1856.x;
    float _1859 = _1856.y;
    float _1860 = _1856.z;
    float _1861 = _1856.w;
    float _1951;
    float _1953;
    float _1955;
    float _1957;
    if (_348 > cbSceneParam._m0[78u].w)
    {
        float _1914 = isnan(_348) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _348 : min(cbSceneParam._m0[80u].w, _348));
        float _1915 = _1914 / _348;
        float _1926 = _1915 * _400;
        float _1927 = _401 * _1915;
        float _1928 = (-0.0) - _1927;
        float _1929 = _1915 * _402;
        float _1931 = (cbSceneParam._m0[77u].w * _1928) / _1914;
        float _1932 = _1931 + cbSceneParam._m0[79u].w;
        float _1933 = cbSceneParam._m0[79u].w - _1927;
        float _1939 = sqrt(((_1926 * _1926) + (_1927 * _1927)) + (_1929 * _1929));
        float _1942 = (1.0 - (cbSceneParam._m0[77u].w / _1914)) * _1939;
        float _1947 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1949 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2167;
        if (abs((_1928 - _1931) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2167 = ((((_1932 > 0.0) ? exp2(_1947 * _1932) : (2.0 - exp2(_1949 * _1932))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1942;
        }
        else
        {
            float _2092 = 1.0 / cbSceneParam._m0[80u].x;
            float _2093 = isnan(_1933) ? _1932 : (isnan(_1932) ? _1933 : max(_1932, _1933));
            float _2094 = isnan(_1933) ? _1932 : (isnan(_1932) ? _1933 : min(_1932, _1933));
            float _2103 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : min(_2093, 0.0));
            float _2104 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : min(_2094, 0.0));
            _2167 = ((abs(_1939 / _1928) * cbSceneParam._m0[80u].y) * ((((_2103 - _2104) * 2.0) - ((exp2(_1947 * (isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0)))) - exp2(_1947 * (isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0))))) * _2092)) - ((exp2(_1949 * _2103) - exp2(_1949 * _2104)) * _2092))) + (_1942 * cbSceneParam._m0[80u].z);
        }
        vec4 _2169 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1841, _1842, 1.0), 0.0);
        float _2178 = exp2((_2167 * (-1.44269502162933349609375)) * (1.0 - _2169.w));
        float _2179 = log2(_2178);
        float _2195 = log2(_1861);
        _1951 = (exp2(_2195 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2179 * cbSceneParam._m0[78u].x)) * _2169.x) / cbSceneParam._m0[78u].x)) + _1858;
        _1953 = (exp2(_2195 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2179 * cbSceneParam._m0[78u].y)) * _2169.y) / cbSceneParam._m0[78u].y)) + _1859;
        _1955 = (exp2(_2195 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2179 * cbSceneParam._m0[78u].z)) * _2169.z) / cbSceneParam._m0[78u].z)) + _1860;
        _1957 = _2178 * _1861;
    }
    else
    {
        _1951 = _1858;
        _1953 = _1859;
        _1955 = _1860;
        _1957 = _1861;
    }
    bool _2205;
    vec4 _1970;
    vec4 _1999;
    float _2001;
    float _2003;
    float _2004;
    float _2005;
    float _2006;
    bool _2016;
    for (;;)
    {
        _1970 = cbMatDynParam._m0[0u];
        bool _1973 = roundEven(_1970.y) == 3.0;
        float _1974 = log2(_1957);
        float _1981 = cbPerFrame._m0[3u].x * _239;
        float _1984 = ((_1981 * _1828) * cbInstanceData._m0[_1831].w) * exp2(_1974 * cbSceneParam._m0[78u].x);
        float _1987 = ((_1981 * _1829) * cbInstanceData._m0[_1831].w) * exp2(_1974 * cbSceneParam._m0[78u].y);
        float _1990 = ((_1981 * _1830) * cbInstanceData._m0[_1831].w) * exp2(_1974 * cbSceneParam._m0[78u].z);
        float _1997 = _416 + (-0.5);
        _1999 = cbMtdParam._m0[1u];
        _2001 = _1999.y * _1997;
        _2003 = cbSceneParam._m0[72u].z * (_1973 ? _1984 : (_1984 + ((_1951 * _1836) * cbSceneParam._m0[72u].w)));
        _2004 = cbSceneParam._m0[72u].z * (_1973 ? _1987 : (_1987 + ((_1953 * _1836) * cbSceneParam._m0[72u].w)));
        _2005 = (_1973 ? _1990 : (_1990 + ((_1955 * _1836) * cbSceneParam._m0[72u].w))) * cbSceneParam._m0[72u].z;
        _2006 = _1997 * 0.999000012874603271484375;
        _2016 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2016)
        {
            if ((cbInstanceData._m0[_1276 + 7u].x + _2006) < 0.5)
            {
                _2205 = true;
                break;
            }
        }
        uint _2128 = (_1276 + 9u) + uint(_1970.w);
        if ((cbInstanceData._m0[_2128].w < 1.0) && ((cbInstanceData._m0[_2128].w + _2006) < 0.5))
        {
            _2205 = true;
            break;
        }
        if ((_2001 + 1.0) < _1999.x)
        {
            _2205 = true;
            break;
        }
        _2205 = false;
        break;
    }
    float _2383;
    if (_2205)
    {
        discard_state = true;
        _2383 = 0.0;
    }
    else
    {
        _2383 = _1836;
    }
    SV_Target.x = _2003;
    SV_Target.y = _2004;
    SV_Target.z = _2005;
    SV_Target.w = _2383;
    discard_exit();
}


