#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[25];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_c4200_transition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_c4200_transition_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_c4200_transition_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D C_c4200_transition_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_c4200_transition_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D C_c4200_transition_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_c4200_transition_snp_0_Texture2D_12;
layout(set = 0, binding = 8) uniform texture2D C_c4200_transition_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_c4200_transition_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1376;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234;
    float _235;
    float _236;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
    }
    else
    {
        _234 = _220;
        _235 = _221;
        _236 = _222;
    }
    vec4 _250 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _253 = _250.x;
    float _262 = cbMtdParam._m0[18u].y * 0.3333333432674407958984375;
    float _267 = fract(abs(_262));
    float _279 = cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x;
    float _282 = (_279 * cbMtdParam._m0[24u].x) + TEXCOORD.x;
    float _283 = (_279 * cbMtdParam._m0[24u].y) + TEXCOORD.y;
    vec4 _306 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((_279 * cbMtdParam._m0[23u].x) + TEXCOORD.x)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[23u].y * _279) + TEXCOORD.y)) + cbTextureTilingScale._m0[10u].w));
    float _310 = cbPerFrame._m0[22u].x * 2.0;
    float _312 = _310 * cbMtdParam._m0[19u].w;
    float _315 = (_306.x * 0.5) + (-0.25);
    float _318 = (_306.y * 0.5) + (-0.25);
    float _319 = _318 * cbMtdParam._m0[18u].z;
    float _321 = (-0.0) - (cbMtdParam._m0[18u].z * _315);
    float _322 = fract(_312);
    float _324 = fract(_312 + 0.5);
    float _325 = _322 * _321;
    float _326 = _319 * _322;
    float _329 = _324 * _321;
    float _330 = _319 * _324;
    float _336 = abs((_322 * 2.0) + (-1.0));
    vec4 _353 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_9, SS_DiffuseMap), vec2(((_325 + _282) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, ((_326 + _283) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _355 = _353.x;
    float _366 = (0.25 - ((((_262 >= ((-0.0) - _262)) ? _267 : ((-0.0) - _267)) * 3.0) - _253)) + ((((texture(sampler2D(C_c4200_transition_snp_0_Texture2D_9, SS_DiffuseMap), vec2(((_329 + _282) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, ((_330 + _283) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w)).x - _355) * _336) + _355) * 1.35000002384185791015625);
    float _369 = abs(_366 * cbMtdParam._m0[19u].z);
    float _373 = (((_369 * cbMtdParam._m0[19u].y) - _253) * _369) + _253;
    float _3720 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _375 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _386 = (cbMtdParam._m0[23u].z * _279) + TEXCOORD.x;
    float _387 = (cbMtdParam._m0[23u].w * _279) + TEXCOORD.y;
    vec4 _407 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_325 + _386) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_326 + _387) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _409 = _407.x;
    float _410 = _407.y;
    float _411 = _407.z;
    vec4 _412 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_329 + _386) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_330 + _387) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _426 = (((_412.x - _409) * _336) + _409) * cbMtdParam._m0[14u].x;
    float _427 = (((_412.y - _410) * _336) + _410) * cbMtdParam._m0[14u].y;
    float _428 = (((_412.z - _411) * _336) + _411) * cbMtdParam._m0[14u].z;
    float _432 = _426 - (_426 * _375);
    float _433 = _427 - (_427 * _375);
    float _434 = _428 - (_428 * _375);
    vec4 _452 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _457 = ceil(_366);
    float _3731 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _458 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    float _472 = (((cbMtdParam._m0[9u].x - cbMtdParam._m0[15u].x) * _458) + cbMtdParam._m0[15u].x) * _452.x;
    float _474 = (((cbMtdParam._m0[9u].y - cbMtdParam._m0[15u].y) * _458) + cbMtdParam._m0[15u].y) * _452.y;
    float _476 = (((cbMtdParam._m0[9u].z - cbMtdParam._m0[15u].z) * _458) + cbMtdParam._m0[15u].z) * _452.z;
    float _480 = exp2(log2(_375) * cbMtdParam._m0[19u].x);
    float _487 = (_480 * (_432 - _472)) + _472;
    float _488 = (_480 * (_433 - _474)) + _474;
    float _489 = (_480 * (_434 - _476)) + _476;
    vec4 _504 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _508 = _504.z;
    float _511 = (_504.x * 2.0) + (-1.0);
    float _512 = (_504.y * 2.0) + (-1.0);
    float _513 = dot(vec2(_511, _512), vec2(_511, _512));
    float _3742 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _518 = sqrt(1.0 - (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))));
    float _529 = (cbMtdParam._m0[24u].z * _279) + TEXCOORD.x;
    float _530 = (cbMtdParam._m0[24u].w * _279) + TEXCOORD.y;
    float _536 = _310 * cbMtdParam._m0[20u].z;
    float _537 = _318 * cbMtdParam._m0[20u].y;
    float _539 = (-0.0) - (cbMtdParam._m0[20u].y * _315);
    float _540 = fract(_536);
    float _542 = fract(_536 + 0.5);
    float _553 = abs((_540 * 2.0) + (-1.0));
    vec4 _569 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_11, SS_DiffuseMap), vec2((((_540 * _539) + _529) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_537 * _540) + _530) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _571 = _569.x;
    float _572 = _569.y;
    float _573 = _569.z;
    vec4 _574 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_11, SS_DiffuseMap), vec2((((_542 * _539) + _529) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_537 * _542) + _530) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _588 = (((_574.x - _571) * _553) + _571) * cbMtdParam._m0[16u].x;
    float _589 = (((_574.y - _572) * _553) + _572) * cbMtdParam._m0[16u].y;
    float _590 = (((_574.z - _573) * _553) + _573) * cbMtdParam._m0[16u].z;
    float _594 = _588 - (_588 * _458);
    float _595 = _589 - (_589 * _458);
    float _596 = _590 - (_590 * _458);
    float _613 = _310 * cbMtdParam._m0[21u].w;
    float _614 = _318 * cbMtdParam._m0[22u].x;
    float _616 = (-0.0) - (cbMtdParam._m0[22u].x * _315);
    float _617 = fract(_613);
    float _619 = fract(_613 + 0.5);
    float _630 = abs((_617 * 2.0) + (-1.0));
    vec4 _646 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_617 * _616) + TEXCOORD.x) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((_614 * _617) + TEXCOORD.y) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _651 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_619 * _616) + TEXCOORD.x) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((_614 * _619) + TEXCOORD.y) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _662 = ((_651.x - _646.x) * _630) + _646.x;
    float _669 = exp2(log2(_662 * cbMtdParam._m0[21u].z) * cbMtdParam._m0[21u].y);
    float _670 = isnan(cbMtdParam._m0[21u].x) ? _669 : (isnan(_669) ? cbMtdParam._m0[21u].x : max(_669, cbMtdParam._m0[21u].x));
    float _671 = isnan(cbMtdParam._m0[20u].x) ? _670 : (isnan(_670) ? cbMtdParam._m0[20u].x : min(_670, cbMtdParam._m0[20u].x));
    float _692 = _310 * cbMtdParam._m0[17u].z;
    float _693 = _318 * cbMtdParam._m0[17u].w;
    float _695 = (-0.0) - (cbMtdParam._m0[17u].w * _315);
    float _696 = fract(_692);
    float _698 = fract(_692 + 0.5);
    float _709 = abs((_696 * 2.0) + (-1.0));
    vec4 _726 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_696 * _695) + TEXCOORD.x) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_693 * _696) + TEXCOORD.y) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _728 = _726.x;
    float _729 = _726.y;
    float _730 = _726.z;
    vec4 _731 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_698 * _695) + TEXCOORD.x) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_693 * _698) + TEXCOORD.y) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _774 = fma(_518, _234, fma(_512, _226 * TANGENT.x, (_212 * _204) * _511));
    float _777 = fma(_518, _235, fma(_512, _226 * TANGENT.y, (_212 * _205) * _511));
    float _780 = fma(_518, _236, fma(_512, _226 * TANGENT.z, (_212 * _206) * _511));
    float _784 = inversesqrt(dot(vec3(_774, _777, _780), vec3(_774, _777, _780)));
    float _785 = _784 * _774;
    float _786 = _784 * _777;
    float _787 = _784 * _780;
    float _3763 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _788 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _3774 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _3785 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _3796 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _3807 = isnan(0.0) ? cbMtdParam._m0[17u].x : (isnan(cbMtdParam._m0[17u].x) ? 0.0 : max(cbMtdParam._m0[17u].x, 0.0));
    float _792 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _808 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _858 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _848);
    float _859 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _848);
    float _860 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _848);
    float _864 = inversesqrt(dot(vec3(_858, _859, _860), vec3(_858, _859, _860)));
    float _865 = _858 * _864;
    float _866 = _859 * _864;
    float _867 = _860 * _864;
    float _873 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _874 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _876 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _878 = _876.w;
    float _899 = fma(_787, cbSceneParam._m0[5u].z, fma(_786, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _785));
    float _902 = fma(_787, cbSceneParam._m0[6u].z, fma(_786, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _785));
    float _905 = fma(_787, cbSceneParam._m0[7u].z, fma(_786, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _785));
    vec4 _907 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _918 = (((_907.y - _788) + (_907.w * _788)) * cbMtdParam._m0[3u].x) + _788;
    uint _931 = uint(roundEven(NORMAL.w)) * 13u;
    uint _932 = _931 + 9u;
    uint _933 = _932 + uint(cbMatDynParam._m0[0u].w);
    float _939 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0)))) * cbInstanceData._m0[_933].x;
    float _940 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) * cbInstanceData._m0[_933].y;
    float _941 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0)))) * cbInstanceData._m0[_933].z;
    float _3818 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _942 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _3829 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _943 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _3840 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _944 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    vec4 _945 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _950 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _961 = (((_950.x - _792) + (_950.w * _792)) * cbMtdParam._m0[3u].x) + _792;
    float _974 = (cbMtdParam._m0[3u].x * (((_942 * _878) - _942) + _945.x)) + _942;
    float _975 = (cbMtdParam._m0[3u].x * (((_943 * _878) - _943) + _945.y)) + _943;
    float _976 = (cbMtdParam._m0[3u].x * (((_944 * _878) - _944) + _945.z)) + _944;
    float _977 = 1.0 - _961;
    float _978 = _977 * _974;
    float _979 = _977 * _975;
    float _980 = _977 * _976;
    float _985 = (_974 + (-0.039999999105930328369140625)) * _961;
    float _986 = (_975 + (-0.039999999105930328369140625)) * _961;
    float _987 = (_976 + (-0.039999999105930328369140625)) * _961;
    float _988 = _985 + 0.039999999105930328369140625;
    float _990 = _986 + 0.039999999105930328369140625;
    float _991 = _987 + 0.039999999105930328369140625;
    vec4 _1000 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _873, cbSceneParam._m0[86u].y * _874));
    float _1003 = _1000.x * TEXCOORD_4;
    float _1004 = dot(vec3(_785, _786, _787), vec3(_865, _866, _867));
    float _1007 = _1004 * 2.0;
    float _1011 = (_1007 * _785) - _865;
    float _1012 = (_1007 * _786) - _866;
    float _1013 = (_1007 * _787) - _867;
    float _1017 = abs(dot(vec3(_865, _866, _867), vec3(_785, _786, _787)));
    float _3851 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    float _1019 = sqrt(_918);
    float _1031 = exp2((_1019 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1019 * 3.0));
    float _1037 = (1.0 - _1031) * ((_1019 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1038 = _1031 * _1019;
    float _1066 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1070 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1074 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1375;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1101 = fma(_1074, cbModelParam._m0[26u].z, fma(_1070, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1066));
        float _1105 = fma(_1074, cbModelParam._m0[27u].z, fma(_1070, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1066));
        float _1109 = fma(_1074, cbModelParam._m0[28u].z, fma(_1070, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1066));
        float _1133 = _1066 + _785;
        float _1134 = _1070 + _786;
        float _1135 = _1074 + _787;
        float _1145 = fma(_1135, cbModelParam._m0[26u].z, fma(_1134, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1133)) - _1101;
        float _1146 = fma(_1135, cbModelParam._m0[27u].z, fma(_1134, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1133)) - _1105;
        float _1147 = fma(_1135, cbModelParam._m0[28u].z, fma(_1134, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1133)) - _1109;
        float _1151 = inversesqrt(dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147)));
        float _1164 = ((_1151 * _1145) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1101 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1165 = ((_1151 * _1146) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1105 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1166 = ((_1151 * _1147) / cbModelParam._m0[34u].z) + ((((((_1109 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        float _1203 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1169.x + (-0.5));
        float _1205 = _1203 * (_1169.y + (-0.5));
        float _1206 = _1203 * (_1169.z + (-0.5));
        float _1213 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1176.x + (-0.5));
        float _1215 = _1213 * (_1176.y + (-0.5));
        float _1216 = _1213 * (_1176.z + (-0.5));
        float _1223 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1183.x + (-0.5));
        float _1225 = _1223 * (_1183.y + (-0.5));
        float _1226 = _1223 * (_1183.z + (-0.5));
        float _1233 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1190.x + (-0.5));
        float _1235 = _1233 * (_1190.y + (-0.5));
        float _1236 = _1233 * (_1190.z + (-0.5));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = _1204 * 0.5;
        float _1241 = _1214 * 0.5;
        float _1242 = _1224 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1257 = (dot(vec3(_785, _786, _787), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3877 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1267 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _3888 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _3899 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_1269 + 1.0))) + _1274) * _1237;
        float _1284 = _1205 * 0.5;
        float _1285 = _1215 * 0.5;
        float _1286 = _1225 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_785, _786, _787), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _3910 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _3921 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _3932 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1311 + 1.0))) + _1316) * _1238;
        float _1326 = _1206 * 0.5;
        float _1327 = _1216 * 0.5;
        float _1328 = _1226 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_785, _786, _787), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _3943 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _3954 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _3965 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (_1353 + 1.0))) + _1358) * _1239;
        _1375 = _1206;
        _1377 = _1205;
        _1378 = _1204;
        _1379 = _1216;
        _1380 = _1215;
        _1381 = _1214;
        _1382 = _1226;
        _1383 = _1225;
        _1384 = _1224;
        _1385 = _1239;
        _1386 = _1238;
        _1387 = _1237;
        _1388 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
        _1389 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
        _1390 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
    }
    else
    {
        _1375 = _1376;
        _1377 = _1376;
        _1378 = _1376;
        _1379 = _1376;
        _1380 = _1376;
        _1381 = _1376;
        _1382 = _1376;
        _1383 = _1376;
        _1384 = _1376;
        _1385 = _1376;
        _1386 = _1376;
        _1387 = _1376;
        _1388 = 0.0;
        _1389 = 0.0;
        _1390 = 0.0;
    }
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1416 = fma(_1074, cbModelParam._m0[30u].z, fma(_1070, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1066));
        float _1420 = fma(_1074, cbModelParam._m0[31u].z, fma(_1070, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1066));
        float _1424 = fma(_1074, cbModelParam._m0[32u].z, fma(_1070, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1066));
        float _1447 = _1066 + _785;
        float _1448 = _1070 + _786;
        float _1449 = _1074 + _787;
        float _1459 = fma(_1449, cbModelParam._m0[30u].z, fma(_1448, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1447)) - _1416;
        float _1460 = fma(_1449, cbModelParam._m0[31u].z, fma(_1448, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1447)) - _1420;
        float _1461 = fma(_1449, cbModelParam._m0[32u].z, fma(_1448, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1447)) - _1424;
        float _1465 = inversesqrt(dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461)));
        float _1478 = ((_1465 * _1459) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1416 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1479 = ((_1465 * _1460) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1420 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1480 = ((_1465 * _1461) / cbModelParam._m0[35u].z) + ((((((_1424 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1482 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        vec4 _1489 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        vec4 _1496 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        vec4 _1503 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        float _1515 = exp2((_1482.w + (-0.5)) * 20.0) * 2.0;
        float _1516 = _1515 * (_1482.x + (-0.5));
        float _1517 = _1515 * (_1482.y + (-0.5));
        float _1518 = _1515 * (_1482.z + (-0.5));
        float _1525 = exp2((_1489.w + (-0.5)) * 20.0) * 2.0;
        float _1526 = _1525 * (_1489.x + (-0.5));
        float _1527 = _1525 * (_1489.y + (-0.5));
        float _1528 = _1525 * (_1489.z + (-0.5));
        float _1535 = exp2((_1496.w + (-0.5)) * 20.0) * 2.0;
        float _1536 = _1535 * (_1496.x + (-0.5));
        float _1537 = _1535 * (_1496.y + (-0.5));
        float _1538 = _1535 * (_1496.z + (-0.5));
        float _1545 = exp2((_1503.w + (-0.5)) * 20.0) * 2.0;
        float _1546 = _1545 * (_1503.x + (-0.5));
        float _1547 = _1545 * (_1503.y + (-0.5));
        float _1548 = _1545 * (_1503.z + (-0.5));
        float _1549 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1550 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1551 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1552 = _1516 * 0.5;
        float _1553 = _1526 * 0.5;
        float _1554 = _1536 * 0.5;
        float _1555 = dot(vec3(_1552, _1553, _1554), vec3(_1552, _1553, _1554));
        float _1560 = (_1555 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1555);
        float _1568 = (dot(vec3(_785, _786, _787), vec3(_1560 * _1552, _1560 * _1553, _1560 * _1554)) + 1.0) * 0.5;
        float _4006 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1577 = sqrt(((_1553 * _1553) + (_1552 * _1552)) + (_1554 * _1554)) / (_1549 + 9.9999997473787516355514526367188e-06);
        float _4017 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1579 = _1578 * 2.0;
        float _1583 = (1.0 - _1578) / (_1578 + 1.0);
        float _4028 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1593 = ((((1.0 - _1584) * (_1579 + 2.0)) * exp2(log2(isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1579 + 1.0))) + _1584) * _1549;
        float _1594 = _1517 * 0.5;
        float _1595 = _1527 * 0.5;
        float _1596 = _1537 * 0.5;
        float _1597 = dot(vec3(_1594, _1595, _1596), vec3(_1594, _1595, _1596));
        float _1602 = (_1597 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1597);
        float _1610 = (dot(vec3(_785, _786, _787), vec3(_1602 * _1594, _1602 * _1595, _1602 * _1596)) + 1.0) * 0.5;
        float _4039 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1619 = sqrt(((_1595 * _1595) + (_1594 * _1594)) + (_1596 * _1596)) / (_1550 + 9.9999997473787516355514526367188e-06);
        float _4050 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1621 = _1620 * 2.0;
        float _1625 = (1.0 - _1620) / (_1620 + 1.0);
        float _4061 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1635 = ((((1.0 - _1626) * (_1621 + 2.0)) * exp2(log2(isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1621 + 1.0))) + _1626) * _1550;
        float _1636 = _1518 * 0.5;
        float _1637 = _1528 * 0.5;
        float _1638 = _1538 * 0.5;
        float _1639 = dot(vec3(_1636, _1637, _1638), vec3(_1636, _1637, _1638));
        float _1644 = (_1639 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1639);
        float _1652 = (dot(vec3(_785, _786, _787), vec3(_1644 * _1636, _1644 * _1637, _1644 * _1638)) + 1.0) * 0.5;
        float _4072 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1661 = sqrt(((_1637 * _1637) + (_1636 * _1636)) + (_1638 * _1638)) / (_1551 + 9.9999997473787516355514526367188e-06);
        float _4083 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1663 = _1662 * 2.0;
        float _1667 = (1.0 - _1662) / (_1662 + 1.0);
        float _4094 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1677 = ((((1.0 - _1668) * (_1663 + 2.0)) * exp2(log2(isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_1663 + 1.0))) + _1668) * _1551;
        _1685 = _1518;
        _1686 = _1517;
        _1687 = _1516;
        _1688 = _1528;
        _1689 = _1527;
        _1690 = _1526;
        _1691 = _1538;
        _1692 = _1537;
        _1693 = _1536;
        _1694 = _1551;
        _1695 = _1550;
        _1696 = _1549;
        _1697 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)));
        _1698 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)));
        _1699 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)));
    }
    else
    {
        _1685 = _1376;
        _1686 = _1376;
        _1687 = _1376;
        _1688 = _1376;
        _1689 = _1376;
        _1690 = _1376;
        _1691 = _1376;
        _1692 = _1376;
        _1693 = _1376;
        _1694 = _1376;
        _1695 = _1376;
        _1696 = _1376;
        _1697 = 0.0;
        _1698 = 0.0;
        _1699 = 0.0;
    }
    float _1709 = (cbModelParam._m0[1u].x * (_1697 - _1388)) + _1388;
    float _1710 = (cbModelParam._m0[1u].x * (_1698 - _1389)) + _1389;
    float _1711 = (cbModelParam._m0[1u].x * (_1699 - _1390)) + _1390;
    float _1732 = fma(_1711, cbSceneParam._m0[89u].z, fma(_1710, cbSceneParam._m0[89u].y, _1709 * cbSceneParam._m0[89u].x));
    float _1735 = fma(_1711, cbSceneParam._m0[90u].z, fma(_1710, cbSceneParam._m0[90u].y, _1709 * cbSceneParam._m0[90u].x));
    float _1738 = fma(_1711, cbSceneParam._m0[91u].z, fma(_1710, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1709));
    float _1753 = _1011 * 0.5;
    float _1754 = _1012 * 0.5;
    float _1755 = _1013 * 0.5;
    float _1756 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1687, _1690, _1693, _1696));
    float _1759 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1686, _1689, _1692, _1695));
    float _1762 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1685, _1688, _1691, _1694));
    float _1796;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1769 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1375, _1379, _1382, _1385));
        float _1773 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1377, _1380, _1383, _1386));
        float _1777 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1378, _1381, _1384, _1387));
        float _1784 = dot(vec4(cbModelParam._m0[39u]), vec4(_1753, _1754, _1755, 1.0));
        _1796 = dot(vec3(isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)), isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1784) ? 0.0 : (isnan(0.0) ? _1784 : max(0.0, _1784))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1796 = 1.0;
    }
    float _1807;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1798 = dot(vec4(cbModelParam._m0[40u]), vec4(_1753, _1754, _1755, 1.0));
        _1807 = dot(vec3(isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)), isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1798) ? 0.0 : (isnan(0.0) ? _1798 : max(0.0, _1798))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1807 = 1.0;
    }
    float _1811 = (_1807 * cbModelParam._m0[1u].x) + (_1796 * (1.0 - cbModelParam._m0[1u].x));
    float _1821 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _918);
    float _1822 = isnan(_1821) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1821 : min(cbModelParam._m0[25u].z, _1821));
    float _1902;
    float _1904;
    float _1906;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1869 = fma(_1074, cbModelParam._m0[13u].z, fma(_1070, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1066)) + cbModelParam._m0[13u].w;
        float _1873 = fma(_1074, cbModelParam._m0[14u].z, fma(_1070, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1066)) + cbModelParam._m0[14u].w;
        float _1877 = fma(_1074, cbModelParam._m0[15u].z, fma(_1070, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1066)) + cbModelParam._m0[15u].w;
        float _1880 = fma(_1013, cbModelParam._m0[13u].z, fma(_1012, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1011));
        float _1883 = fma(_1013, cbModelParam._m0[14u].z, fma(_1012, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1011));
        float _1886 = fma(_1013, cbModelParam._m0[15u].z, fma(_1012, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1011));
        float _1914;
        if (_1880 > 0.0)
        {
            _1914 = abs((1.0 - _1869) / _1880);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1869 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1914 = frontier_phi_16_14_ladder;
        }
        float _2116;
        if (_1883 > 0.0)
        {
            _2116 = abs((1.0 - _1873) / _1883);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1873 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2116 = frontier_phi_25_21_ladder;
        }
        float _2370;
        if (_1886 > 0.0)
        {
            _2370 = abs((1.0 - _1877) / _1886);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1877 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2370 = frontier_phi_37_32_ladder;
        }
        float _2372 = isnan(_2116) ? _1914 : (isnan(_1914) ? _2116 : min(_1914, _2116));
        float _2373 = isnan(_2370) ? _2372 : (isnan(_2372) ? _2370 : min(_2372, _2370));
        float _2377 = (_2373 * _1880) + _1869;
        float _2378 = (_2373 * _1883) + _1873;
        float _2379 = (_2373 * _1886) + _1877;
        float _2380 = _2373 * 9.9999997473787516355514526367188e-05;
        float _2382 = (-1.0) - _2380;
        float _2384 = _2380 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2379 > _2384) || ((_2379 < _2382) || ((_2378 > _2384) || ((_2378 < _2382) || ((_2377 < _2382) || (_2377 > _2384))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2507 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2379, cbModelParam._m0[9u].z, fma(_2378, cbModelParam._m0[9u].y, _2377 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2379, cbModelParam._m0[10u].z, fma(_2378, cbModelParam._m0[10u].y, _2377 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2379, cbModelParam._m0[11u].z, fma(_2378, cbModelParam._m0[11u].y, _2377 * cbModelParam._m0[11u].x))), _1822);
            frontier_phi_15_37_ladder = _2507.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2507.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2507.x * cbModelParam._m0[1u].y;
        }
        _1902 = frontier_phi_15_37_ladder_2;
        _1904 = frontier_phi_15_37_ladder_1;
        _1906 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1890 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1011, _1012, _1013), _1822);
        _1902 = _1890.x * cbModelParam._m0[1u].y;
        _1904 = _1890.y * cbModelParam._m0[1u].y;
        _1906 = _1890.z * cbModelParam._m0[1u].y;
    }
    float _1910 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _918);
    float _1911 = isnan(_1910) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1910 : min(cbModelParam._m0[25u].w, _1910));
    float _2000;
    float _2002;
    float _2004;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1964 = fma(_1074, cbModelParam._m0[21u].z, fma(_1070, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1066)) + cbModelParam._m0[21u].w;
        float _1968 = fma(_1074, cbModelParam._m0[22u].z, fma(_1070, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1066)) + cbModelParam._m0[22u].w;
        float _1972 = fma(_1074, cbModelParam._m0[23u].z, fma(_1070, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1066)) + cbModelParam._m0[23u].w;
        float _1975 = fma(_1013, cbModelParam._m0[21u].z, fma(_1012, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1011));
        float _1978 = fma(_1013, cbModelParam._m0[22u].z, fma(_1012, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1011));
        float _1981 = fma(_1013, cbModelParam._m0[23u].z, fma(_1012, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1011));
        float _2121;
        if (_1975 > 0.0)
        {
            _2121 = abs((1.0 - _1964) / _1975);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1964 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2121 = frontier_phi_27_23_ladder;
        }
        float _2397;
        if (_1978 > 0.0)
        {
            _2397 = abs((1.0 - _1968) / _1978);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1968 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2397 = frontier_phi_39_34_ladder;
        }
        float _2610;
        if (_1981 > 0.0)
        {
            _2610 = abs((1.0 - _1972) / _1981);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1972 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2610 = frontier_phi_48_45_ladder;
        }
        float _2612 = isnan(_2397) ? _2121 : (isnan(_2121) ? _2397 : min(_2121, _2397));
        float _2613 = isnan(_2610) ? _2612 : (isnan(_2612) ? _2610 : min(_2612, _2610));
        float _2617 = (_2613 * _1975) + _1964;
        float _2618 = (_2613 * _1978) + _1968;
        float _2619 = (_2613 * _1981) + _1972;
        float _2620 = _2613 * 9.9999997473787516355514526367188e-05;
        float _2621 = (-1.0) - _2620;
        float _2623 = _2620 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2619 > _2623) || ((_2619 < _2621) || ((_2618 > _2623) || ((_2618 < _2621) || ((_2617 < _2621) || (_2617 > _2623))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2836 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2619, cbModelParam._m0[17u].z, fma(_2618, cbModelParam._m0[17u].y, _2617 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2619, cbModelParam._m0[18u].z, fma(_2618, cbModelParam._m0[18u].y, _2617 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2619, cbModelParam._m0[19u].z, fma(_2618, cbModelParam._m0[19u].y, _2617 * cbModelParam._m0[19u].x))), _1911);
            frontier_phi_24_48_ladder = _2836.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2836.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2836.x * cbModelParam._m0[1u].z;
        }
        _2000 = frontier_phi_24_48_ladder_2;
        _2002 = frontier_phi_24_48_ladder_1;
        _2004 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1984 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1011, _1012, _1013), _1911);
        _2000 = _1984.x * cbModelParam._m0[1u].z;
        _2002 = _1984.y * cbModelParam._m0[1u].z;
        _2004 = _1984.z * cbModelParam._m0[1u].z;
    }
    float _2017 = (((_1037 * _988) + _1038) * _1003) * ((cbModelParam._m0[1u].w * (_2000 - _1902)) + _1902);
    float _2019 = (((_1037 * _990) + _1038) * _1003) * ((cbModelParam._m0[1u].w * (_2002 - _1904)) + _1904);
    float _2021 = (((_1037 * _991) + _1038) * _1003) * ((cbModelParam._m0[1u].w * (_2004 - _1906)) + _1906);
    float _2024 = fma(_2021, cbSceneParam._m0[89u].z, fma(_2019, cbSceneParam._m0[89u].y, _2017 * cbSceneParam._m0[89u].x));
    float _2027 = fma(_2021, cbSceneParam._m0[90u].z, fma(_2019, cbSceneParam._m0[90u].y, _2017 * cbSceneParam._m0[90u].x));
    float _2030 = fma(_2021, cbSceneParam._m0[91u].z, fma(_2019, cbSceneParam._m0[91u].y, _2017 * cbSceneParam._m0[91u].x));
    uvec4 _2040 = floatBitsToUint(cbInstanceData._m0[_931 + 5u]);
    uint _2042 = _2040.x * 14u;
    uint _2043 = _2042 + 13u;
    float _2050 = _1003 + (-1.0);
    float _2055 = (cbLight._m0[_2043].x * _2050) + 1.0;
    float _2056 = (cbLight._m0[_2043].y * _2050) + 1.0;
    float _2057 = (cbLight._m0[_2043].z * _2050) + 1.0;
    float _2058 = (cbLight._m0[_2043].w * _2050) + 1.0;
    uint _2059 = _2042 + 5u;
    float _2065 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
    uint _2069 = _2042 + 4u;
    float _2075 = isnan(1.0) ? _2055 : (isnan(_2055) ? 1.0 : min(_2055, 1.0));
    uint _2079 = _2042 | 1u;
    float _2090 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_785, _786, _787));
    float _2093 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_785, _786, _787));
    float _4230 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _4241 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2098 = (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * 0.3183098733425140380859375;
    float _2100 = (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * 0.3183098733425140380859375;
    float _2107 = ((cbLight._m0[_2059].x * _2065) * _2100) + ((cbLight._m0[_2069].x * _2075) * _2098);
    float _2108 = ((_2065 * cbLight._m0[_2059].y) * _2100) + ((_2075 * cbLight._m0[_2069].y) * _2098);
    float _2109 = ((_2065 * cbLight._m0[_2059].z) * _2100) + ((_2075 * cbLight._m0[_2069].z) * _2098);
    uvec4 _2113 = floatBitsToUint(cbLight._m0[_2042 + 12u]);
    bool _2115 = _2113.x == 0u;
    float _2126;
    float _2128;
    float _2130;
    if (_2115)
    {
        _2126 = _2107;
        _2128 = _2108;
        _2130 = _2109;
    }
    else
    {
        uint _2134 = _2042 + 6u;
        float _2150 = (dot(vec3(cbLight._m0[_2042 + 2u].xyz), vec3(_785, _786, _787)) * 0.5) + 0.5;
        float _2151 = _2150 * _2150;
        float _4252 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2152 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _2153 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
        _2126 = (((cbLight._m0[_2134].x * 0.3183098733425140380859375) * _2152) * _2153) + _2107;
        _2128 = (((cbLight._m0[_2134].y * 0.3183098733425140380859375) * _2152) * _2153) + _2108;
        _2130 = (((cbLight._m0[_2134].z * 0.3183098733425140380859375) * _2152) * _2153) + _2109;
    }
    bool _2133 = _2113.y == 0u;
    float _2171;
    float _2173;
    float _2175;
    if (_2133)
    {
        _2171 = _2126;
        _2173 = _2128;
        _2175 = _2130;
    }
    else
    {
        uint _2341 = _2042 + 7u;
        float _2357 = (dot(vec3(cbLight._m0[_2042 + 3u].xyz), vec3(_785, _786, _787)) * 0.5) + 0.5;
        float _2358 = _2357 * _2357;
        float _4268 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2359 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _2360 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
        _2171 = (((cbLight._m0[_2341].x * 0.3183098733425140380859375) * _2359) * _2360) + _2126;
        _2173 = (((cbLight._m0[_2341].y * 0.3183098733425140380859375) * _2359) * _2360) + _2128;
        _2175 = (((cbLight._m0[_2341].z * 0.3183098733425140380859375) * _2359) * _2360) + _2130;
    }
    uint _2178 = _2042 + 8u;
    float _2191 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2042].w)) * _918) * 0.949999988079071044921875);
    float _2192 = _2191 * _2191;
    float _2193 = cbLight._m0[_2042].x + _865;
    float _2194 = cbLight._m0[_2042].y + _866;
    float _2195 = cbLight._m0[_2042].z + _867;
    float _2199 = inversesqrt(dot(vec3(_2193, _2194, _2195), vec3(_2193, _2194, _2195)));
    float _2200 = _2199 * _2193;
    float _2201 = _2199 * _2194;
    float _2202 = _2199 * _2195;
    float _2203 = dot(vec3(_785, _786, _787), vec3(cbLight._m0[_2042].xyz));
    float _4284 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2206 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
    float _4295 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _2207 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    float _2208 = dot(vec3(_785, _786, _787), vec3(_2200, _2201, _2202));
    float _4306 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2211 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _2212 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_2200, _2201, _2202));
    float _4317 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2216 = _2192 * _2192;
    float _2220 = ((_2211 * _2211) * (_2216 + (-1.0))) + 1.0;
    float _2228 = exp2(log2(1.0 - (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0)))) * 5.0);
    float _2229 = 0.959999978542327880859375 - _985;
    float _2231 = 0.959999978542327880859375 - _986;
    float _2232 = 0.959999978542327880859375 - _987;
    float _2239 = 1.0 - _2192;
    float _2250 = (0.5 / (((_2207 * ((_2206 * _2239) + _2192)) + 9.9999999392252902907785028219223e-09) + (((_2207 * _2239) + _2192) * _2206))) * _2206;
    float _4328 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2252 = (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_2216 / ((_2220 * _2220) * 3.141590118408203125));
    uint _2263 = _2042 + 9u;
    float _2274 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2079].w)) * _918) * 0.949999988079071044921875);
    float _2275 = _2274 * _2274;
    float _2276 = cbLight._m0[_2079].x + _865;
    float _2277 = cbLight._m0[_2079].y + _866;
    float _2278 = cbLight._m0[_2079].z + _867;
    float _2282 = inversesqrt(dot(vec3(_2276, _2277, _2278), vec3(_2276, _2277, _2278)));
    float _2283 = _2282 * _2276;
    float _2284 = _2282 * _2277;
    float _2285 = _2282 * _2278;
    float _2286 = dot(vec3(_785, _786, _787), vec3(cbLight._m0[_2079].xyz));
    float _4339 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2289 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
    float _2290 = dot(vec3(_785, _786, _787), vec3(_2283, _2284, _2285));
    float _4350 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2293 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    float _2294 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_2283, _2284, _2285));
    float _4361 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2298 = _2275 * _2275;
    float _2302 = ((_2293 * _2293) * (_2298 + (-1.0))) + 1.0;
    float _2309 = exp2(log2(1.0 - (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0)))) * 5.0);
    float _2316 = 1.0 - _2275;
    float _2326 = (0.5 / (((_2207 * ((_2289 * _2316) + _2275)) + 9.9999999392252902907785028219223e-09) + (((_2207 * _2316) + _2275) * _2289))) * _2289;
    float _4372 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2328 = (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_2298 / ((_2302 * _2302) * 3.141590118408203125));
    float _2338 = (((((_2309 * _2229) + _988) * cbLight._m0[_2263].x) * _2328) * _2065) + (((((_2228 * _2229) + _988) * cbLight._m0[_2178].x) * _2252) * _2075);
    float _2339 = (((((_2309 * _2231) + _990) * cbLight._m0[_2263].y) * _2328) * _2065) + (((((_2228 * _2231) + _990) * cbLight._m0[_2178].y) * _2252) * _2075);
    float _2340 = (((((_2309 * _2232) + _991) * cbLight._m0[_2263].z) * _2328) * _2065) + (((((_2228 * _2232) + _991) * cbLight._m0[_2178].z) * _2252) * _2075);
    float _2402;
    float _2404;
    float _2406;
    if (_2115)
    {
        _2402 = _2338;
        _2404 = _2339;
        _2406 = _2340;
    }
    else
    {
        uint _2408 = _2042 + 2u;
        uint _2412 = _2042 + 10u;
        float _2426 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2408].w)) * _918) * 0.949999988079071044921875);
        float _2427 = _2426 * _2426;
        float _2428 = cbLight._m0[_2408].x + _865;
        float _2429 = cbLight._m0[_2408].y + _866;
        float _2430 = cbLight._m0[_2408].z + _867;
        float _2434 = inversesqrt(dot(vec3(_2428, _2429, _2430), vec3(_2428, _2429, _2430)));
        float _2435 = _2434 * _2428;
        float _2436 = _2434 * _2429;
        float _2437 = _2434 * _2430;
        float _2438 = dot(vec3(_785, _786, _787), vec3(cbLight._m0[_2408].xyz));
        float _4383 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2441 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _2442 = dot(vec3(_785, _786, _787), vec3(_2435, _2436, _2437));
        float _4394 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2445 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _2446 = dot(vec3(cbLight._m0[_2408].xyz), vec3(_2435, _2436, _2437));
        float _4405 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2450 = _2427 * _2427;
        float _2454 = ((_2445 * _2445) * (_2450 + (-1.0))) + 1.0;
        float _2461 = exp2(log2(1.0 - (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0)))) * 5.0);
        float _2468 = 1.0 - _2427;
        float _2478 = (0.5 / (((_2207 * ((_2441 * _2468) + _2427)) + 9.9999999392252902907785028219223e-09) + (((_2207 * _2468) + _2427) * _2441))) * _2441;
        float _4416 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2480 = (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_2450 / ((_2454 * _2454) * 3.141590118408203125));
        float _2481 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
        _2402 = (((((_2461 * _2229) + _988) * cbLight._m0[_2412].x) * _2480) * _2481) + _2338;
        _2404 = (((((_2461 * _2231) + _990) * cbLight._m0[_2412].y) * _2480) * _2481) + _2339;
        _2406 = (((((_2461 * _2232) + _991) * cbLight._m0[_2412].z) * _2480) * _2481) + _2340;
    }
    float _2516;
    float _2518;
    float _2520;
    if (_2133)
    {
        _2516 = _2402;
        _2518 = _2404;
        _2520 = _2406;
    }
    else
    {
        uint _2527 = _2042 + 3u;
        uint _2531 = _2042 + 11u;
        float _2545 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2527].w)) * _918) * 0.949999988079071044921875);
        float _2546 = _2545 * _2545;
        float _2547 = cbLight._m0[_2527].x + _865;
        float _2548 = cbLight._m0[_2527].y + _866;
        float _2549 = cbLight._m0[_2527].z + _867;
        float _2553 = inversesqrt(dot(vec3(_2547, _2548, _2549), vec3(_2547, _2548, _2549)));
        float _2554 = _2553 * _2547;
        float _2555 = _2553 * _2548;
        float _2556 = _2553 * _2549;
        float _2557 = dot(vec3(_785, _786, _787), vec3(cbLight._m0[_2527].xyz));
        float _4432 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2560 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _2561 = dot(vec3(_785, _786, _787), vec3(_2554, _2555, _2556));
        float _4443 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2564 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _2565 = dot(vec3(cbLight._m0[_2527].xyz), vec3(_2554, _2555, _2556));
        float _4454 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2569 = _2546 * _2546;
        float _2573 = ((_2564 * _2564) * (_2569 + (-1.0))) + 1.0;
        float _2580 = exp2(log2(1.0 - (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)))) * 5.0);
        float _2587 = 1.0 - _2546;
        float _2597 = (0.5 / (((_2207 * ((_2560 * _2587) + _2546)) + 9.9999999392252902907785028219223e-09) + (((_2207 * _2587) + _2546) * _2560))) * _2560;
        float _4465 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2599 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2569 / ((_2573 * _2573) * 3.141590118408203125));
        float _2600 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
        _2516 = (((((_2580 * _2229) + _988) * cbLight._m0[_2531].x) * _2599) * _2600) + _2402;
        _2518 = (((((_2580 * _2231) + _990) * cbLight._m0[_2531].y) * _2599) * _2600) + _2404;
        _2520 = (((((_2580 * _2232) + _991) * cbLight._m0[_2531].z) * _2599) * _2600) + _2406;
    }
    float _2734;
    float _2736;
    float _2738;
    float _2740;
    float _2742;
    float _2744;
    if (_2040.y == 0u)
    {
        float _2675 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2676 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2675;
        float _2677 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2675;
        float _2678 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2675;
        uvec4 _2690 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2691 = _2690.x;
        uint _2702 = uint((float(_2690.y) * floor(float(uint(cbSceneParam._m0[85u].y * _874) / _2691))) + floor(float(uint(cbSceneParam._m0[85u].x * _873) / _2691)));
        float _2712 = (log2(_2678 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2713 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        uint _2716 = uint(isnan(14.0) ? _2713 : (isnan(_2713) ? 14.0 : min(_2713, 14.0)));
        uvec4 _2721 = texelFetch(g_lightClusterGridBuffer, int(((_2716 << 2u) + (_2702 << 6u)) >> 2u));
        uint _2722 = _2721.x;
        uint _2723 = _2690.z;
        float _2841;
        float _2843;
        float _2845;
        float _2847;
        float _2849;
        float _2851;
        if (((((1u << ((_2723 >> 4u) & 15u)) + 4294967295u) & _2722) == 0u) || ((_2723 & 240u) == 0u))
        {
            _2841 = 0.0;
            _2843 = 0.0;
            _2845 = 0.0;
            _2847 = 0.0;
            _2849 = 0.0;
            _2851 = 0.0;
        }
        else
        {
            float _2842;
            float _2844;
            float _2846;
            float _2848;
            float _2850;
            float _2852;
            float _2985 = 0.0;
            float _2986 = 0.0;
            float _2987 = 0.0;
            float _2988 = 0.0;
            float _2989 = 0.0;
            float _2990 = 0.0;
            uint _2991 = 0u;
            uint _3000;
            bool _3001;
            for (;;)
            {
                _3000 = texelFetch(g_lightClassification, int((((_2716 << 5u) + (_2702 << 9u)) + (_2991 << 2u)) >> 2u)).x;
                _3001 = _3000 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_3001)
                {
                    frontier_phi_63_pred = _2990;
                    frontier_phi_63_pred_1 = _2989;
                    frontier_phi_63_pred_2 = _2988;
                    frontier_phi_63_pred_3 = _2987;
                    frontier_phi_63_pred_4 = _2986;
                    frontier_phi_63_pred_5 = _2985;
                }
                else
                {
                    float _3109;
                    float _3110;
                    float _3111;
                    float _3112;
                    float _3113;
                    float _3114;
                    uint _3115;
                    _3109 = _2985;
                    _3110 = _2986;
                    _3111 = _2987;
                    _3112 = _2988;
                    _3113 = _2989;
                    _3114 = _2990;
                    _3115 = _3000;
                    float _3041;
                    float _3042;
                    float _3043;
                    float _3044;
                    float _3045;
                    float _3046;
                    for (;;)
                    {
                        uint _3119 = uint(findLSB(_3115)) + (_2991 << 5u);
                        uint _3116 = (_3115 + 4294967295u) & _3115;
                        uint _3121 = _3119 * 48u;
                        vec4 _3135 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3121)).x, texelFetch(g_PointLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3121 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3121 + 3u)).x));
                        uint _3141 = (_3119 * 48u) + 4u;
                        vec4 _3154 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3141)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 3u)).x));
                        uint _3160 = (_3119 * 48u) + 8u;
                        vec3 _3171 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3160)).x, texelFetch(g_PointLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3160 + 2u)).x));
                        float _3175 = _3135.x - _2676;
                        float _3176 = _3135.y - _2677;
                        float _3177 = _3135.z - _2678;
                        float _3178 = dot(vec3(_3175, _3176, _3177), vec3(_3175, _3176, _3177));
                        float _3181 = inversesqrt(_3178);
                        float _3182 = _3181 * _3175;
                        float _3183 = _3181 * _3176;
                        float _3184 = _3181 * _3177;
                        float _3185 = dot(vec3(_899, _902, _905), vec3(_3182, _3183, _3184));
                        float _3190 = 1.0 - (_3178 * _3135.w);
                        float _4491 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                        float _3191 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                        float _3192 = sqrt(_3178) * _3154.w;
                        float _3195 = 1.39999997615814208984375 / (_3192 + 1.39999997615814208984375);
                        float _3196 = _3195 * _3195;
                        float _3199 = ((1.0 - _3196) * _3185) + _3196;
                        float _3202 = _3192 * _3192;
                        float _3206 = ((isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0))) * _3191) / ((_3202 * 0.699999988079071044921875) + 1.0);
                        float _3210 = (-0.0) - _2676;
                        float _3211 = (-0.0) - _2677;
                        float _3212 = (-0.0) - _2678;
                        float _3216 = inversesqrt(dot(vec3(_3210, _3211, _3212), vec3(_3210, _3211, _3212)));
                        float _3217 = _3216 * _3210;
                        float _3218 = _3216 * _3211;
                        float _3219 = _3216 * _3212;
                        float _3226 = exp2(log2(1.0 / ((_3202 * 3.5) + 5.0)) * 0.25);
                        float _3227 = 1.0 - _1019;
                        float _3234 = sqrt(1.0 - ((1.0 - (_3227 * _3227)) * (1.0 - (_3226 * _3226))));
                        float _3235 = _3234 * _3234;
                        float _3236 = _3235 * _3235;
                        float _3237 = _3217 + _3182;
                        float _3238 = _3218 + _3183;
                        float _3239 = _3219 + _3184;
                        float _3243 = inversesqrt(dot(vec3(_3237, _3238, _3239), vec3(_3237, _3238, _3239)));
                        float _3247 = dot(vec3(_899, _902, _905), vec3(_3217, _3218, _3219));
                        float _4507 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                        float _3250 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                        float _3251 = dot(vec3(_899, _902, _905), vec3(_3243 * _3237, _3243 * _3238, _3243 * _3239));
                        float _4518 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                        float _3254 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                        float _3258 = ((_3254 * _3254) * (_3236 + (-1.0))) + 1.0;
                        float _3259 = _3195 * _3235;
                        float _3260 = _3259 * _3259;
                        float _3263 = ((1.0 - _3260) * _3185) + _3260;
                        float _4529 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                        float _3264 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                        float _3265 = 1.0 - _3235;
                        float _3275 = (0.5 / (((_3264 * ((_3250 * _3265) + _3235)) + 9.9999999392252902907785028219223e-09) + (((_3264 * _3265) + _3235) * _3250))) * _3264;
                        float _4540 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                        float _3286 = (((_3236 * 3.1415927410125732421875) * (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0)))) / ((_3258 * _3258) * ((_3202 * 2.1991131305694580078125) + 3.141590118408203125))) * _3191;
                        _3044 = (_3206 * _3154.x) + _3112;
                        _3045 = (_3206 * _3154.y) + _3113;
                        _3046 = (_3206 * _3154.z) + _3114;
                        _3041 = (_3286 * _3171.x) + _3109;
                        _3042 = (_3286 * _3171.y) + _3110;
                        _3043 = (_3286 * _3171.z) + _3111;
                        if (_3116 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3109 = _3041;
                            _3110 = _3042;
                            _3111 = _3043;
                            _3112 = _3044;
                            _3113 = _3045;
                            _3114 = _3046;
                            _3115 = _3116;
                        }
                    }
                    frontier_phi_63_pred = _3046;
                    frontier_phi_63_pred_1 = _3045;
                    frontier_phi_63_pred_2 = _3044;
                    frontier_phi_63_pred_3 = _3043;
                    frontier_phi_63_pred_4 = _3042;
                    frontier_phi_63_pred_5 = _3041;
                }
                _2852 = frontier_phi_63_pred;
                _2850 = frontier_phi_63_pred_1;
                _2848 = frontier_phi_63_pred_2;
                _2846 = frontier_phi_63_pred_3;
                _2844 = frontier_phi_63_pred_4;
                _2842 = frontier_phi_63_pred_5;
                uint _2992 = _2991 + 1u;
                if (_2992 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2985 = _2842;
                    _2986 = _2844;
                    _2987 = _2846;
                    _2988 = _2848;
                    _2989 = _2850;
                    _2990 = _2852;
                    _2991 = _2992;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2841 = _2842;
            _2843 = _2844;
            _2845 = _2846;
            _2847 = _2848;
            _2849 = _2850;
            _2851 = _2852;
        }
        uvec4 _2855 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2856 = _2855.z;
        uint _2858 = (_2856 >> 8u) & 15u;
        float _2953;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        float _2963;
        if (((4294967295u << _2858) & _2722) == 0u)
        {
            _2953 = _2841;
            _2955 = _2843;
            _2957 = _2845;
            _2959 = _2847;
            _2961 = _2849;
            _2963 = _2851;
        }
        else
        {
            float _2978 = inversesqrt(dot(vec3(_2676, _2677, _2678), vec3(_2676, _2677, _2678)));
            float _2979 = _2978 * _2676;
            float _2980 = _2978 * _2677;
            float _2981 = _2978 * _2678;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2858 < ((_2856 >> 12u) & 15u))
            {
                float _2954;
                float _2956;
                float _2958;
                float _2960;
                float _2962;
                float _2964;
                float _3092 = _2841;
                float _3093 = _2843;
                float _3094 = _2845;
                float _3095 = _2847;
                float _3096 = _2849;
                float _3097 = _2851;
                uint _3098 = _2858;
                uint _3107;
                bool _3108;
                for (;;)
                {
                    _3107 = texelFetch(g_lightClassification, int((((_2716 << 5u) + (_2702 << 9u)) + (_3098 << 2u)) >> 2u)).x;
                    _3108 = _3107 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3108)
                    {
                        frontier_phi_69_pred = _3097;
                        frontier_phi_69_pred_1 = _3096;
                        frontier_phi_69_pred_2 = _3095;
                        frontier_phi_69_pred_3 = _3094;
                        frontier_phi_69_pred_4 = _3093;
                        frontier_phi_69_pred_5 = _3092;
                    }
                    else
                    {
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3589;
                        float _3304 = _3092;
                        float _3305 = _3093;
                        float _3306 = _3094;
                        float _3307 = _3095;
                        float _3308 = _3096;
                        float _3309 = _3097;
                        uint _3310 = _3107;
                        uint _3311;
                        vec4 _3336;
                        float _3337;
                        vec4 _3352;
                        vec3 _3364;
                        vec4 _3379;
                        vec4 _3394;
                        float _3440;
                        bool _3441;
                        for (;;)
                        {
                            uint _3321 = ((_3098 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3310));
                            _3311 = (_3310 + 4294967295u) & _3310;
                            uint _3323 = _3321 * 40u;
                            _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            _3337 = _3336.w;
                            uint _3339 = (_3321 * 40u) + 4u;
                            _3352 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 3u)).x));
                            uint _3354 = (_3321 * 40u) + 8u;
                            _3364 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x));
                            uint _3366 = (_3321 * 40u) + 16u;
                            _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            uint _3381 = (_3321 * 40u) + 20u;
                            _3394 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3381)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 3u)).x));
                            uint _3396 = (_3321 * 40u) + 24u;
                            vec4 _3409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 3u)).x));
                            uint _3415 = (_3321 * 40u) + 28u;
                            vec4 _3428 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 3u)).x));
                            _3440 = fma(_2678, _3428.z, fma(_2677, _3428.y, _3428.x * _2676)) + _3428.w;
                            _3441 = !((fma(_2678, _3409.z, fma(_2677, _3409.y, _3409.x * _2676)) + _3409.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3441)
                            {
                                float _3468 = _3336.x - _2676;
                                float _3469 = _3336.y - _2677;
                                float _3470 = _3336.z - _2678;
                                float _3471 = dot(vec3(_3468, _3469, _3470), vec3(_3468, _3469, _3470));
                                float _3474 = inversesqrt(_3471);
                                float _3475 = _3474 * _3468;
                                float _3476 = _3474 * _3469;
                                float _3477 = _3474 * _3470;
                                float _3481 = 1.0 - (_3471 / (_3337 * _3337));
                                float _4551 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                                float _3482 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                                float _3486 = sqrt(_3471) * _3352.w;
                                float _3488 = 1.39999997615814208984375 / (_3486 + 1.39999997615814208984375);
                                float _3489 = _3488 * _3488;
                                float _3492 = ((1.0 - _3489) * dot(vec3(_3475, _3476, _3477), vec3(_899, _902, _905))) + _3489;
                                float _3495 = _3486 * _3486;
                                float _3499 = (fma(_2678, _3379.z, fma(_2677, _3379.y, _3379.x * _2676)) + _3379.w) / _3440;
                                float _3500 = (fma(_2678, _3394.z, fma(_2677, _3394.y, _3394.x * _2676)) + _3394.w) / _3440;
                                float _3504 = 1.0 - dot(vec2(_3499, _3500), vec2(_3499, _3500));
                                float _4567 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                                float _3505 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                                float _3506 = _3505 * (((isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0))) * _3482) / ((_3495 * 0.699999988079071044921875) + 1.0));
                                float _3518 = exp2(log2(1.0 / ((_3495 * 3.5) + 5.0)) * 0.25);
                                float _3519 = 1.0 - _1019;
                                float _3526 = sqrt(1.0 - ((1.0 - (_3519 * _3519)) * (1.0 - (_3518 * _3518))));
                                float _3527 = _3526 * _3526;
                                float _3528 = _3527 * _3527;
                                float _3529 = _3475 - _2979;
                                float _3530 = _3476 - _2980;
                                float _3531 = _3477 - _2981;
                                float _3535 = inversesqrt(dot(vec3(_3529, _3530, _3531), vec3(_3529, _3530, _3531)));
                                float _3539 = dot(vec3(_899, _902, _905), vec3((-0.0) - _2979, (-0.0) - _2980, (-0.0) - _2981));
                                float _4578 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3542 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                                float _3543 = dot(vec3(_899, _902, _905), vec3(_3535 * _3529, _3535 * _3530, _3535 * _3531));
                                float _4589 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3546 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
                                float _3550 = ((_3546 * _3546) * (_3528 + (-1.0))) + 1.0;
                                float _3551 = _3488 * _3527;
                                float _3552 = _3551 * _3551;
                                float _3558 = ((1.0 - _3552) * dot(vec3(_899, _902, _905), vec3(_3475, _3476, _3477))) + _3552;
                                float _4600 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                                float _3559 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                                float _3560 = 1.0 - _3527;
                                float _3570 = (0.5 / (((_3559 * ((_3542 * _3560) + _3527)) + 9.9999999392252902907785028219223e-09) + (((_3559 * _3560) + _3527) * _3542))) * _3559;
                                float _4611 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                                float _3580 = (_3505 * _3482) * (((_3528 * 3.1415927410125732421875) * (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0)))) / ((_3550 * _3550) * ((_3495 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3506 * _3352.z;
                                frontier_phi_75_pred_1 = _3506 * _3352.y;
                                frontier_phi_75_pred_2 = _3506 * _3352.x;
                                frontier_phi_75_pred_3 = _3580 * _3364.z;
                                frontier_phi_75_pred_4 = _3580 * _3364.y;
                                frontier_phi_75_pred_5 = _3580 * _3364.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3589 = frontier_phi_75_pred;
                            _3588 = frontier_phi_75_pred_1;
                            _3587 = frontier_phi_75_pred_2;
                            _3586 = frontier_phi_75_pred_3;
                            _3585 = frontier_phi_75_pred_4;
                            _3584 = frontier_phi_75_pred_5;
                            _3294 = _3587 + _3307;
                            _3295 = _3588 + _3308;
                            _3296 = _3589 + _3309;
                            _3291 = _3584 + _3304;
                            _3292 = _3585 + _3305;
                            _3293 = _3586 + _3306;
                            if (_3311 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3304 = _3291;
                                _3305 = _3292;
                                _3306 = _3293;
                                _3307 = _3294;
                                _3308 = _3295;
                                _3309 = _3296;
                                _3310 = _3311;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3296;
                        frontier_phi_69_pred_1 = _3295;
                        frontier_phi_69_pred_2 = _3294;
                        frontier_phi_69_pred_3 = _3293;
                        frontier_phi_69_pred_4 = _3292;
                        frontier_phi_69_pred_5 = _3291;
                    }
                    _2964 = frontier_phi_69_pred;
                    _2962 = frontier_phi_69_pred_1;
                    _2960 = frontier_phi_69_pred_2;
                    _2958 = frontier_phi_69_pred_3;
                    _2956 = frontier_phi_69_pred_4;
                    _2954 = frontier_phi_69_pred_5;
                    uint _3099 = _3098 + 1u;
                    if (_3099 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3092 = _2954;
                        _3093 = _2956;
                        _3094 = _2958;
                        _3095 = _2960;
                        _3096 = _2962;
                        _3097 = _2964;
                        _3098 = _3099;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2964;
                frontier_phi_57_58_ladder_1 = _2962;
                frontier_phi_57_58_ladder_2 = _2960;
                frontier_phi_57_58_ladder_3 = _2958;
                frontier_phi_57_58_ladder_4 = _2956;
                frontier_phi_57_58_ladder_5 = _2954;
            }
            else
            {
                frontier_phi_57_58_ladder = _2851;
                frontier_phi_57_58_ladder_1 = _2849;
                frontier_phi_57_58_ladder_2 = _2847;
                frontier_phi_57_58_ladder_3 = _2845;
                frontier_phi_57_58_ladder_4 = _2843;
                frontier_phi_57_58_ladder_5 = _2841;
            }
            _2953 = frontier_phi_57_58_ladder_5;
            _2955 = frontier_phi_57_58_ladder_4;
            _2957 = frontier_phi_57_58_ladder_3;
            _2959 = frontier_phi_57_58_ladder_2;
            _2961 = frontier_phi_57_58_ladder_1;
            _2963 = frontier_phi_57_58_ladder;
        }
        float _2968 = isnan(1.0) ? _1003 : (isnan(_1003) ? 1.0 : min(_1003, 1.0));
        _2734 = (_2968 * _2959) + _2171;
        _2736 = (_2968 * _2961) + _2173;
        _2738 = (_2968 * _2963) + _2175;
        _2740 = ((_2953 * _988) * _2968) + _2516;
        _2742 = ((_2955 * _990) * _2968) + _2518;
        _2744 = ((_2957 * _991) * _2968) + _2520;
    }
    else
    {
        _2734 = _2171;
        _2736 = _2173;
        _2738 = _2175;
        _2740 = _2516;
        _2742 = _2518;
        _2744 = _2520;
    }
    uint _2750 = _932 + uint(cbMatDynParam._m0[0u].w);
    float _4627 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _4638 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _4649 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _2775 = (((isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (_2734 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _1003))) + ((_2740 + ((isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0))) * _1811)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2750].x * ((((_594 + (_480 * _432)) - (_594 * _480)) + cbMtdParam._m0[13u].x) + ((((((_731.x - _728) * _709) + _728) * cbMtdParam._m0[11u].x) + ((cbMtdParam._m0[22u].y * _662) * cbMtdParam._m0[12u].x)) * _671)));
    float _2777 = ((cbInstanceData._m0[_2750].y * ((((_595 + (_480 * _433)) - (_595 * _480)) + cbMtdParam._m0[13u].y) + ((((((_731.y - _729) * _709) + _729) * cbMtdParam._m0[11u].y) + ((cbMtdParam._m0[22u].y * (((_651.y - _646.y) * _630) + _646.y)) * cbMtdParam._m0[12u].y)) * _671))) + ((_2742 + ((isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0))) * _1811)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * (_2736 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _1003)));
    float _2779 = ((cbInstanceData._m0[_2750].z * ((((_596 + (_480 * _434)) - (_596 * _480)) + cbMtdParam._m0[13u].z) + ((((((_731.z - _730) * _709) + _730) * cbMtdParam._m0[11u].z) + ((cbMtdParam._m0[22u].y * (((_651.z - _646.z) * _630) + _646.z)) * cbMtdParam._m0[12u].z)) * _671))) + ((_2744 + ((isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0))) * _1811)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (_2738 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _1003)));
    uint _2783 = _931 + 6u;
    float _2791 = _873 / cbSceneParam._m0[86u].x;
    float _2792 = _874 / cbSceneParam._m0[86u].y;
    vec4 _2806 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2791, _2792, (log2((isnan(cbSceneParam._m0[77u].w) ? _808 : (isnan(_808) ? cbSceneParam._m0[77u].w : min(_808, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2808 = _2806.x;
    float _2809 = _2806.y;
    float _2810 = _2806.z;
    float _2811 = _2806.w;
    float _2903;
    float _2905;
    float _2907;
    float _2909;
    if (_808 > cbSceneParam._m0[78u].w)
    {
        float _2866 = isnan(_808) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _808 : min(cbSceneParam._m0[80u].w, _808));
        float _2867 = _2866 / _808;
        float _2878 = _2867 * _858;
        float _2879 = _859 * _2867;
        float _2880 = (-0.0) - _2879;
        float _2881 = _2867 * _860;
        float _2883 = (cbSceneParam._m0[77u].w * _2880) / _2866;
        float _2884 = _2883 + cbSceneParam._m0[79u].w;
        float _2885 = cbSceneParam._m0[79u].w - _2879;
        float _2891 = sqrt(((_2878 * _2878) + (_2879 * _2879)) + (_2881 * _2881));
        float _2894 = (1.0 - (cbSceneParam._m0[77u].w / _2866)) * _2891;
        float _2899 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2901 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3054;
        if (abs((_2880 - _2883) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3054 = ((((_2884 > 0.0) ? exp2(_2899 * _2884) : (2.0 - exp2(_2901 * _2884))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2894;
        }
        else
        {
            float _3014 = 1.0 / cbSceneParam._m0[80u].x;
            float _3015 = isnan(_2885) ? _2884 : (isnan(_2884) ? _2885 : max(_2884, _2885));
            float _3016 = isnan(_2885) ? _2884 : (isnan(_2884) ? _2885 : min(_2884, _2885));
            float _3025 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : min(_3015, 0.0));
            float _3026 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : min(_3016, 0.0));
            _3054 = ((abs(_2891 / _2880) * cbSceneParam._m0[80u].y) * ((((_3025 - _3026) * 2.0) - ((exp2(_2899 * (isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0)))) - exp2(_2899 * (isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0))))) * _3014)) - ((exp2(_2901 * _3025) - exp2(_2901 * _3026)) * _3014))) + (_2894 * cbSceneParam._m0[80u].z);
        }
        vec4 _3056 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2791, _2792, 1.0), 0.0);
        float _3065 = exp2((_3054 * (-1.44269502162933349609375)) * (1.0 - _3056.w));
        float _3066 = log2(_3065);
        float _3082 = log2(_2811);
        _2903 = (exp2(_3082 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3066 * cbSceneParam._m0[78u].x)) * _3056.x) / cbSceneParam._m0[78u].x)) + _2808;
        _2905 = (exp2(_3082 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3066 * cbSceneParam._m0[78u].y)) * _3056.y) / cbSceneParam._m0[78u].y)) + _2809;
        _2907 = (exp2(_3082 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3066 * cbSceneParam._m0[78u].z)) * _3056.z) / cbSceneParam._m0[78u].z)) + _2810;
        _2909 = _3065 * _2811;
    }
    else
    {
        _2903 = _2808;
        _2905 = _2809;
        _2907 = _2810;
        _2909 = _2811;
    }
    float _2921 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2922 = _2921 == 3.0;
    float _2923 = log2(_2909);
    float _2930 = exp2(_2923 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0)));
    float _2931 = exp2(_2923 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0)));
    float _2932 = exp2(_2923 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0)));
    float _2941 = (_2921 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2941 * (_2922 ? _2930 : (_2930 + (cbSceneParam._m0[72u].w * _2903)));
    SV_Target.y = _2941 * (_2922 ? _2931 : (_2931 + (cbSceneParam._m0[72u].w * _2905)));
    SV_Target.z = _2941 * (_2922 ? _2932 : (_2932 + (cbSceneParam._m0[72u].w * _2907)));
    SV_Target.w = cbInstanceData._m0[_2783].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2783].w;
}


