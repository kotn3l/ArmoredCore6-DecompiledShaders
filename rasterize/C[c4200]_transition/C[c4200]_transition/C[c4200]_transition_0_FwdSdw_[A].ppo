#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[25];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_c4200_transition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_c4200_transition_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_c4200_transition_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D C_c4200_transition_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_c4200_transition_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D C_c4200_transition_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_c4200_transition_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_c4200_transition_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_c4200_transition_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_c4200_transition_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1442;
float _4123;
float _4124;
float _4125;
float _4126;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = _229 * NORMAL.x;
    float _231 = _229 * NORMAL.y;
    float _232 = _229 * NORMAL.z;
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244;
    float _245;
    float _246;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _244 = (-0.0) - _230;
        _245 = (-0.0) - _231;
        _246 = (-0.0) - _232;
    }
    else
    {
        _244 = _230;
        _245 = _231;
        _246 = _232;
    }
    vec4 _260 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _263 = _260.x;
    float _272 = cbMtdParam._m0[18u].y * 0.3333333432674407958984375;
    float _277 = fract(abs(_272));
    float _289 = cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x;
    float _292 = (_289 * cbMtdParam._m0[24u].x) + TEXCOORD.x;
    float _293 = (_289 * cbMtdParam._m0[24u].y) + TEXCOORD.y;
    vec4 _316 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((_289 * cbMtdParam._m0[23u].x) + TEXCOORD.x)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[23u].y * _289) + TEXCOORD.y)) + cbTextureTilingScale._m0[10u].w));
    float _320 = cbPerFrame._m0[22u].x * 2.0;
    float _322 = _320 * cbMtdParam._m0[19u].w;
    float _325 = (_316.x * 0.5) + (-0.25);
    float _328 = (_316.y * 0.5) + (-0.25);
    float _329 = _328 * cbMtdParam._m0[18u].z;
    float _331 = (-0.0) - (cbMtdParam._m0[18u].z * _325);
    float _332 = fract(_322);
    float _334 = fract(_322 + 0.5);
    float _335 = _332 * _331;
    float _336 = _329 * _332;
    float _339 = _334 * _331;
    float _340 = _329 * _334;
    float _346 = abs((_332 * 2.0) + (-1.0));
    vec4 _363 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_9, SS_DiffuseMap), vec2(((_335 + _292) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, ((_336 + _293) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _365 = _363.x;
    float _376 = (0.25 - ((((_272 >= ((-0.0) - _272)) ? _277 : ((-0.0) - _277)) * 3.0) - _263)) + ((((texture(sampler2D(C_c4200_transition_snp_0_Texture2D_9, SS_DiffuseMap), vec2(((_339 + _292) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, ((_340 + _293) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w)).x - _365) * _346) + _365) * 1.35000002384185791015625);
    float _379 = abs(_376 * cbMtdParam._m0[19u].z);
    float _383 = (((_379 * cbMtdParam._m0[19u].y) - _263) * _379) + _263;
    float _4135 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _385 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _396 = (cbMtdParam._m0[23u].z * _289) + TEXCOORD.x;
    float _397 = (cbMtdParam._m0[23u].w * _289) + TEXCOORD.y;
    vec4 _417 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_335 + _396) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_336 + _397) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _419 = _417.x;
    float _420 = _417.y;
    float _421 = _417.z;
    vec4 _422 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_339 + _396) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_340 + _397) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _436 = (((_422.x - _419) * _346) + _419) * cbMtdParam._m0[14u].x;
    float _437 = (((_422.y - _420) * _346) + _420) * cbMtdParam._m0[14u].y;
    float _438 = (((_422.z - _421) * _346) + _421) * cbMtdParam._m0[14u].z;
    float _442 = _436 - (_436 * _385);
    float _443 = _437 - (_437 * _385);
    float _444 = _438 - (_438 * _385);
    vec4 _462 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _467 = ceil(_376);
    float _4146 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _468 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _482 = (((cbMtdParam._m0[9u].x - cbMtdParam._m0[15u].x) * _468) + cbMtdParam._m0[15u].x) * _462.x;
    float _484 = (((cbMtdParam._m0[9u].y - cbMtdParam._m0[15u].y) * _468) + cbMtdParam._m0[15u].y) * _462.y;
    float _486 = (((cbMtdParam._m0[9u].z - cbMtdParam._m0[15u].z) * _468) + cbMtdParam._m0[15u].z) * _462.z;
    float _490 = exp2(log2(_385) * cbMtdParam._m0[19u].x);
    float _497 = (_490 * (_442 - _482)) + _482;
    float _498 = (_490 * (_443 - _484)) + _484;
    float _499 = (_490 * (_444 - _486)) + _486;
    vec4 _512 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _518 = cbMtdParam._m0[17u].x + _512.x;
    vec4 _530 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _534 = _530.z;
    float _537 = (_530.x * 2.0) + (-1.0);
    float _538 = (_530.y * 2.0) + (-1.0);
    float _539 = dot(vec2(_537, _538), vec2(_537, _538));
    float _4157 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _544 = sqrt(1.0 - (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))));
    float _555 = (cbMtdParam._m0[24u].z * _289) + TEXCOORD.x;
    float _556 = (cbMtdParam._m0[24u].w * _289) + TEXCOORD.y;
    float _562 = _320 * cbMtdParam._m0[20u].z;
    float _563 = _328 * cbMtdParam._m0[20u].y;
    float _565 = (-0.0) - (cbMtdParam._m0[20u].y * _325);
    float _566 = fract(_562);
    float _568 = fract(_562 + 0.5);
    float _579 = abs((_566 * 2.0) + (-1.0));
    vec4 _595 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_11, SS_DiffuseMap), vec2((((_566 * _565) + _555) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_563 * _566) + _556) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _597 = _595.x;
    float _598 = _595.y;
    float _599 = _595.z;
    vec4 _600 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_11, SS_DiffuseMap), vec2((((_568 * _565) + _555) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_563 * _568) + _556) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _614 = (((_600.x - _597) * _579) + _597) * cbMtdParam._m0[16u].x;
    float _615 = (((_600.y - _598) * _579) + _598) * cbMtdParam._m0[16u].y;
    float _616 = (((_600.z - _599) * _579) + _599) * cbMtdParam._m0[16u].z;
    float _620 = _614 - (_614 * _468);
    float _621 = _615 - (_615 * _468);
    float _622 = _616 - (_616 * _468);
    float _639 = _320 * cbMtdParam._m0[21u].w;
    float _640 = _328 * cbMtdParam._m0[22u].x;
    float _642 = (-0.0) - (cbMtdParam._m0[22u].x * _325);
    float _643 = fract(_639);
    float _645 = fract(_639 + 0.5);
    float _656 = abs((_643 * 2.0) + (-1.0));
    vec4 _672 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_643 * _642) + TEXCOORD.x) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((_640 * _643) + TEXCOORD.y) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _677 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_645 * _642) + TEXCOORD.x) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((_640 * _645) + TEXCOORD.y) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _688 = ((_677.x - _672.x) * _656) + _672.x;
    float _695 = exp2(log2(_688 * cbMtdParam._m0[21u].z) * cbMtdParam._m0[21u].y);
    float _696 = isnan(cbMtdParam._m0[21u].x) ? _695 : (isnan(_695) ? cbMtdParam._m0[21u].x : max(_695, cbMtdParam._m0[21u].x));
    float _697 = isnan(cbMtdParam._m0[20u].x) ? _696 : (isnan(_696) ? cbMtdParam._m0[20u].x : min(_696, cbMtdParam._m0[20u].x));
    float _718 = _320 * cbMtdParam._m0[17u].z;
    float _719 = _328 * cbMtdParam._m0[17u].w;
    float _721 = (-0.0) - (cbMtdParam._m0[17u].w * _325);
    float _722 = fract(_718);
    float _724 = fract(_718 + 0.5);
    float _735 = abs((_722 * 2.0) + (-1.0));
    vec4 _752 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_722 * _721) + TEXCOORD.x) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_719 * _722) + TEXCOORD.y) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _754 = _752.x;
    float _755 = _752.y;
    float _756 = _752.z;
    vec4 _757 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_724 * _721) + TEXCOORD.x) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_719 * _724) + TEXCOORD.y) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _800 = fma(_544, _244, fma(_538, _236 * TANGENT.x, (_222 * _214) * _537));
    float _803 = fma(_544, _245, fma(_538, _236 * TANGENT.y, (_222 * _215) * _537));
    float _806 = fma(_544, _246, fma(_538, _236 * TANGENT.z, (_222 * _216) * _537));
    float _810 = inversesqrt(dot(vec3(_800, _803, _806), vec3(_800, _803, _806)));
    float _811 = _810 * _800;
    float _812 = _810 * _803;
    float _813 = _810 * _806;
    float _4178 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _814 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _4189 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _4200 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _4211 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _4222 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _818 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
    float _834 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _874 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _884 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _874);
    float _885 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _874);
    float _886 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _874);
    float _890 = inversesqrt(dot(vec3(_884, _885, _886), vec3(_884, _885, _886)));
    float _891 = _884 * _890;
    float _892 = _885 * _890;
    float _893 = _886 * _890;
    vec4 _898 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _900 = _898.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1122 = sqrt(((_884 * _884) + (_885 * _885)) + (_886 * _886));
        float _1128 = (cbMatDynParam._m0[5u].x * _1122) + cbMatDynParam._m0[5u].y;
        float _4233 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1133 = (cbMatDynParam._m0[5u].z * _1122) + cbMatDynParam._m0[5u].w;
        float _4244 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) - _1129)) + _1129) < ((_900 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _912 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _913 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _915 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _917 = _915.w;
    float _936 = fma(_813, cbSceneParam._m0[5u].z, fma(_812, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _811));
    float _939 = fma(_813, cbSceneParam._m0[6u].z, fma(_812, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _811));
    float _942 = fma(_813, cbSceneParam._m0[7u].z, fma(_812, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _811));
    vec4 _944 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _955 = (((_944.y - _814) + (_944.w * _814)) * cbMtdParam._m0[3u].x) + _814;
    uint _968 = uint(roundEven(NORMAL.w)) * 13u;
    uint _969 = _968 + 9u;
    uint _970 = _969 + uint(cbMatDynParam._m0[0u].w);
    float _976 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)))) * cbInstanceData._m0[_970].x;
    float _977 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0)))) * cbInstanceData._m0[_970].y;
    float _978 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) * cbInstanceData._m0[_970].z;
    float _4255 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _979 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
    float _4266 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _980 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    float _4277 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _981 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
    vec4 _982 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _987 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _998 = (((_987.x - _818) + (_987.w * _818)) * cbMtdParam._m0[3u].x) + _818;
    float _1011 = (cbMtdParam._m0[3u].x * (((_979 * _917) - _979) + _982.x)) + _979;
    float _1012 = (cbMtdParam._m0[3u].x * (((_980 * _917) - _980) + _982.y)) + _980;
    float _1013 = (cbMtdParam._m0[3u].x * (((_981 * _917) - _981) + _982.z)) + _981;
    float _1014 = 1.0 - _998;
    float _1015 = _1014 * _1011;
    float _1016 = _1014 * _1012;
    float _1017 = _1014 * _1013;
    float _1022 = (_1011 + (-0.039999999105930328369140625)) * _998;
    float _1023 = (_1012 + (-0.039999999105930328369140625)) * _998;
    float _1024 = (_1013 + (-0.039999999105930328369140625)) * _998;
    float _1025 = _1022 + 0.039999999105930328369140625;
    float _1027 = _1023 + 0.039999999105930328369140625;
    float _1028 = _1024 + 0.039999999105930328369140625;
    vec4 _1037 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _912, cbSceneParam._m0[86u].y * _913));
    float _1040 = _1037.x * TEXCOORD_4;
    float _1041 = dot(vec3(_811, _812, _813), vec3(_891, _892, _893));
    float _1044 = _1041 * 2.0;
    float _1048 = (_1044 * _811) - _891;
    float _1049 = (_1044 * _812) - _892;
    float _1050 = (_1044 * _813) - _893;
    float _1054 = abs(dot(vec3(_891, _892, _893), vec3(_811, _812, _813)));
    float _4288 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _1056 = sqrt(_955);
    float _1068 = exp2((_1056 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1056 * 3.0));
    float _1074 = (1.0 - _1068) * ((_1056 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1075 = _1068 * _1056;
    float _1103 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1107 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1111 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1441;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1167 = fma(_1111, cbModelParam._m0[26u].z, fma(_1107, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1103));
        float _1171 = fma(_1111, cbModelParam._m0[27u].z, fma(_1107, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1103));
        float _1175 = fma(_1111, cbModelParam._m0[28u].z, fma(_1107, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1103));
        float _1199 = _1103 + _811;
        float _1200 = _1107 + _812;
        float _1201 = _1111 + _813;
        float _1211 = fma(_1201, cbModelParam._m0[26u].z, fma(_1200, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1199)) - _1167;
        float _1212 = fma(_1201, cbModelParam._m0[27u].z, fma(_1200, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1199)) - _1171;
        float _1213 = fma(_1201, cbModelParam._m0[28u].z, fma(_1200, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1199)) - _1175;
        float _1217 = inversesqrt(dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213)));
        float _1230 = ((_1217 * _1211) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1167 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1231 = ((_1217 * _1212) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1171 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1232 = ((_1217 * _1213) / cbModelParam._m0[34u].z) + ((((((_1175 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        float _1269 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1235.x + (-0.5));
        float _1271 = _1269 * (_1235.y + (-0.5));
        float _1272 = _1269 * (_1235.z + (-0.5));
        float _1279 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1242.x + (-0.5));
        float _1281 = _1279 * (_1242.y + (-0.5));
        float _1282 = _1279 * (_1242.z + (-0.5));
        float _1289 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1249.x + (-0.5));
        float _1291 = _1289 * (_1249.y + (-0.5));
        float _1292 = _1289 * (_1249.z + (-0.5));
        float _1299 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1256.x + (-0.5));
        float _1301 = _1299 * (_1256.y + (-0.5));
        float _1302 = _1299 * (_1256.z + (-0.5));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1305 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1306 = _1270 * 0.5;
        float _1307 = _1280 * 0.5;
        float _1308 = _1290 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1323 = (dot(vec3(_811, _812, _813), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _4314 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1333 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _4325 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _4336 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_1335 + 1.0))) + _1340) * _1303;
        float _1350 = _1271 * 0.5;
        float _1351 = _1281 * 0.5;
        float _1352 = _1291 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_811, _812, _813), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _4347 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1304 + 9.9999997473787516355514526367188e-06);
        float _4358 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _4369 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_1377 + 1.0))) + _1382) * _1304;
        float _1392 = _1272 * 0.5;
        float _1393 = _1282 * 0.5;
        float _1394 = _1292 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_811, _812, _813), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _4380 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1305 + 9.9999997473787516355514526367188e-06);
        float _4391 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _4402 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_1419 + 1.0))) + _1424) * _1305;
        _1441 = _1272;
        _1443 = _1271;
        _1444 = _1270;
        _1445 = _1282;
        _1446 = _1281;
        _1447 = _1280;
        _1448 = _1292;
        _1449 = _1291;
        _1450 = _1290;
        _1451 = _1305;
        _1452 = _1304;
        _1453 = _1303;
        _1454 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
        _1455 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
        _1456 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
    }
    else
    {
        _1441 = _1442;
        _1443 = _1442;
        _1444 = _1442;
        _1445 = _1442;
        _1446 = _1442;
        _1447 = _1442;
        _1448 = _1442;
        _1449 = _1442;
        _1450 = _1442;
        _1451 = _1442;
        _1452 = _1442;
        _1453 = _1442;
        _1454 = 0.0;
        _1455 = 0.0;
        _1456 = 0.0;
    }
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1485 = fma(_1111, cbModelParam._m0[30u].z, fma(_1107, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1103));
        float _1489 = fma(_1111, cbModelParam._m0[31u].z, fma(_1107, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1103));
        float _1493 = fma(_1111, cbModelParam._m0[32u].z, fma(_1107, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1103));
        float _1516 = _1103 + _811;
        float _1517 = _1107 + _812;
        float _1518 = _1111 + _813;
        float _1528 = fma(_1518, cbModelParam._m0[30u].z, fma(_1517, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1516)) - _1485;
        float _1529 = fma(_1518, cbModelParam._m0[31u].z, fma(_1517, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1516)) - _1489;
        float _1530 = fma(_1518, cbModelParam._m0[32u].z, fma(_1517, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1516)) - _1493;
        float _1534 = inversesqrt(dot(vec3(_1528, _1529, _1530), vec3(_1528, _1529, _1530)));
        float _1547 = ((_1534 * _1528) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1485 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1548 = ((_1534 * _1529) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1489 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1549 = ((_1534 * _1530) / cbModelParam._m0[35u].z) + ((((((_1493 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1551 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1547, _1548, _1549), 0.0);
        vec4 _1558 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1547, _1548, _1549), 0.0);
        vec4 _1565 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1547, _1548, _1549), 0.0);
        vec4 _1572 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1547, _1548, _1549), 0.0);
        float _1584 = exp2((_1551.w + (-0.5)) * 20.0) * 2.0;
        float _1585 = _1584 * (_1551.x + (-0.5));
        float _1586 = _1584 * (_1551.y + (-0.5));
        float _1587 = _1584 * (_1551.z + (-0.5));
        float _1594 = exp2((_1558.w + (-0.5)) * 20.0) * 2.0;
        float _1595 = _1594 * (_1558.x + (-0.5));
        float _1596 = _1594 * (_1558.y + (-0.5));
        float _1597 = _1594 * (_1558.z + (-0.5));
        float _1604 = exp2((_1565.w + (-0.5)) * 20.0) * 2.0;
        float _1605 = _1604 * (_1565.x + (-0.5));
        float _1606 = _1604 * (_1565.y + (-0.5));
        float _1607 = _1604 * (_1565.z + (-0.5));
        float _1614 = exp2((_1572.w + (-0.5)) * 20.0) * 2.0;
        float _1615 = _1614 * (_1572.x + (-0.5));
        float _1616 = _1614 * (_1572.y + (-0.5));
        float _1617 = _1614 * (_1572.z + (-0.5));
        float _1618 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1619 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1620 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1621 = _1585 * 0.5;
        float _1622 = _1595 * 0.5;
        float _1623 = _1605 * 0.5;
        float _1624 = dot(vec3(_1621, _1622, _1623), vec3(_1621, _1622, _1623));
        float _1629 = (_1624 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1624);
        float _1637 = (dot(vec3(_811, _812, _813), vec3(_1629 * _1621, _1629 * _1622, _1629 * _1623)) + 1.0) * 0.5;
        float _4443 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1646 = sqrt(((_1622 * _1622) + (_1621 * _1621)) + (_1623 * _1623)) / (_1618 + 9.9999997473787516355514526367188e-06);
        float _4454 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _1648 = _1647 * 2.0;
        float _1652 = (1.0 - _1647) / (_1647 + 1.0);
        float _4465 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _1662 = ((((1.0 - _1653) * (_1648 + 2.0)) * exp2(log2(isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_1648 + 1.0))) + _1653) * _1618;
        float _1663 = _1586 * 0.5;
        float _1664 = _1596 * 0.5;
        float _1665 = _1606 * 0.5;
        float _1666 = dot(vec3(_1663, _1664, _1665), vec3(_1663, _1664, _1665));
        float _1671 = (_1666 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1666);
        float _1679 = (dot(vec3(_811, _812, _813), vec3(_1671 * _1663, _1671 * _1664, _1671 * _1665)) + 1.0) * 0.5;
        float _4476 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1688 = sqrt(((_1664 * _1664) + (_1663 * _1663)) + (_1665 * _1665)) / (_1619 + 9.9999997473787516355514526367188e-06);
        float _4487 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1689 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _1690 = _1689 * 2.0;
        float _1694 = (1.0 - _1689) / (_1689 + 1.0);
        float _4498 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _1704 = ((((1.0 - _1695) * (_1690 + 2.0)) * exp2(log2(isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_1690 + 1.0))) + _1695) * _1619;
        float _1705 = _1587 * 0.5;
        float _1706 = _1597 * 0.5;
        float _1707 = _1607 * 0.5;
        float _1708 = dot(vec3(_1705, _1706, _1707), vec3(_1705, _1706, _1707));
        float _1713 = (_1708 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1708);
        float _1721 = (dot(vec3(_811, _812, _813), vec3(_1713 * _1705, _1713 * _1706, _1713 * _1707)) + 1.0) * 0.5;
        float _4509 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1730 = sqrt(((_1706 * _1706) + (_1705 * _1705)) + (_1707 * _1707)) / (_1620 + 9.9999997473787516355514526367188e-06);
        float _4520 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1731 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _1732 = _1731 * 2.0;
        float _1736 = (1.0 - _1731) / (_1731 + 1.0);
        float _4531 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1737 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _1746 = ((((1.0 - _1737) * (_1732 + 2.0)) * exp2(log2(isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_1732 + 1.0))) + _1737) * _1620;
        _1754 = _1587;
        _1755 = _1586;
        _1756 = _1585;
        _1757 = _1597;
        _1758 = _1596;
        _1759 = _1595;
        _1760 = _1607;
        _1761 = _1606;
        _1762 = _1605;
        _1763 = _1620;
        _1764 = _1619;
        _1765 = _1618;
        _1766 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)));
        _1767 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)));
        _1768 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)));
    }
    else
    {
        _1754 = _1442;
        _1755 = _1442;
        _1756 = _1442;
        _1757 = _1442;
        _1758 = _1442;
        _1759 = _1442;
        _1760 = _1442;
        _1761 = _1442;
        _1762 = _1442;
        _1763 = _1442;
        _1764 = _1442;
        _1765 = _1442;
        _1766 = 0.0;
        _1767 = 0.0;
        _1768 = 0.0;
    }
    float _1778 = (cbModelParam._m0[1u].x * (_1766 - _1454)) + _1454;
    float _1779 = (cbModelParam._m0[1u].x * (_1767 - _1455)) + _1455;
    float _1780 = (cbModelParam._m0[1u].x * (_1768 - _1456)) + _1456;
    float _1801 = fma(_1780, cbSceneParam._m0[89u].z, fma(_1779, cbSceneParam._m0[89u].y, _1778 * cbSceneParam._m0[89u].x));
    float _1804 = fma(_1780, cbSceneParam._m0[90u].z, fma(_1779, cbSceneParam._m0[90u].y, _1778 * cbSceneParam._m0[90u].x));
    float _1807 = fma(_1780, cbSceneParam._m0[91u].z, fma(_1779, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1778));
    float _1822 = _1048 * 0.5;
    float _1823 = _1049 * 0.5;
    float _1824 = _1050 * 0.5;
    float _1825 = dot(vec4(_1822, _1823, _1824, 1.0), vec4(_1756, _1759, _1762, _1765));
    float _1828 = dot(vec4(_1822, _1823, _1824, 1.0), vec4(_1755, _1758, _1761, _1764));
    float _1831 = dot(vec4(_1822, _1823, _1824, 1.0), vec4(_1754, _1757, _1760, _1763));
    float _1865;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1838 = dot(vec4(_1822, _1823, _1824, 1.0), vec4(_1441, _1445, _1448, _1451));
        float _1842 = dot(vec4(_1822, _1823, _1824, 1.0), vec4(_1443, _1446, _1449, _1452));
        float _1846 = dot(vec4(_1822, _1823, _1824, 1.0), vec4(_1444, _1447, _1450, _1453));
        float _1853 = dot(vec4(cbModelParam._m0[39u]), vec4(_1822, _1823, _1824, 1.0));
        _1865 = dot(vec3(isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0)), isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0)), isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1853) ? 0.0 : (isnan(0.0) ? _1853 : max(0.0, _1853))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1865 = 1.0;
    }
    float _1876;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1867 = dot(vec4(cbModelParam._m0[40u]), vec4(_1822, _1823, _1824, 1.0));
        _1876 = dot(vec3(isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0)), isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0)), isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1867) ? 0.0 : (isnan(0.0) ? _1867 : max(0.0, _1867))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1876 = 1.0;
    }
    float _1880 = (_1876 * cbModelParam._m0[1u].x) + (_1865 * (1.0 - cbModelParam._m0[1u].x));
    float _1890 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _955);
    float _1891 = isnan(_1890) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1890 : min(cbModelParam._m0[25u].z, _1890));
    float _1971;
    float _1973;
    float _1975;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1938 = fma(_1111, cbModelParam._m0[13u].z, fma(_1107, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1103)) + cbModelParam._m0[13u].w;
        float _1942 = fma(_1111, cbModelParam._m0[14u].z, fma(_1107, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1103)) + cbModelParam._m0[14u].w;
        float _1946 = fma(_1111, cbModelParam._m0[15u].z, fma(_1107, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1103)) + cbModelParam._m0[15u].w;
        float _1949 = fma(_1050, cbModelParam._m0[13u].z, fma(_1049, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1048));
        float _1952 = fma(_1050, cbModelParam._m0[14u].z, fma(_1049, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1048));
        float _1955 = fma(_1050, cbModelParam._m0[15u].z, fma(_1049, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1048));
        float _1983;
        if (_1949 > 0.0)
        {
            _1983 = abs((1.0 - _1938) / _1949);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1949 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1938 + 1.0) / _1949);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1983 = frontier_phi_19_17_ladder;
        }
        float _2154;
        if (_1952 > 0.0)
        {
            _2154 = abs((1.0 - _1942) / _1952);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1952 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1942 + 1.0) / _1952);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2154 = frontier_phi_28_24_ladder;
        }
        float _2448;
        if (_1955 > 0.0)
        {
            _2448 = abs((1.0 - _1946) / _1955);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1955 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1946 + 1.0) / _1955);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2448 = frontier_phi_40_35_ladder;
        }
        float _2450 = isnan(_2154) ? _1983 : (isnan(_1983) ? _2154 : min(_1983, _2154));
        float _2451 = isnan(_2448) ? _2450 : (isnan(_2450) ? _2448 : min(_2450, _2448));
        float _2455 = (_2451 * _1949) + _1938;
        float _2456 = (_2451 * _1952) + _1942;
        float _2457 = (_2451 * _1955) + _1946;
        float _2458 = _2451 * 9.9999997473787516355514526367188e-05;
        float _2460 = (-1.0) - _2458;
        float _2462 = _2458 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2457 > _2462) || ((_2457 < _2460) || ((_2456 > _2462) || ((_2456 < _2460) || ((_2455 < _2460) || (_2455 > _2462))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2602 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2457, cbModelParam._m0[9u].z, fma(_2456, cbModelParam._m0[9u].y, _2455 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2457, cbModelParam._m0[10u].z, fma(_2456, cbModelParam._m0[10u].y, _2455 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2457, cbModelParam._m0[11u].z, fma(_2456, cbModelParam._m0[11u].y, _2455 * cbModelParam._m0[11u].x))), _1891);
            frontier_phi_18_40_ladder = _2602.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2602.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2602.x * cbModelParam._m0[1u].y;
        }
        _1971 = frontier_phi_18_40_ladder_2;
        _1973 = frontier_phi_18_40_ladder_1;
        _1975 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1959 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1048, _1049, _1050), _1891);
        _1971 = _1959.x * cbModelParam._m0[1u].y;
        _1973 = _1959.y * cbModelParam._m0[1u].y;
        _1975 = _1959.z * cbModelParam._m0[1u].y;
    }
    float _1979 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _955);
    float _1980 = isnan(_1979) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1979 : min(cbModelParam._m0[25u].w, _1979));
    float _2069;
    float _2071;
    float _2073;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2033 = fma(_1111, cbModelParam._m0[21u].z, fma(_1107, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1103)) + cbModelParam._m0[21u].w;
        float _2037 = fma(_1111, cbModelParam._m0[22u].z, fma(_1107, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1103)) + cbModelParam._m0[22u].w;
        float _2041 = fma(_1111, cbModelParam._m0[23u].z, fma(_1107, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1103)) + cbModelParam._m0[23u].w;
        float _2044 = fma(_1050, cbModelParam._m0[21u].z, fma(_1049, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1048));
        float _2047 = fma(_1050, cbModelParam._m0[22u].z, fma(_1049, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1048));
        float _2050 = fma(_1050, cbModelParam._m0[23u].z, fma(_1049, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1048));
        float _2159;
        if (_2044 > 0.0)
        {
            _2159 = abs((1.0 - _2033) / _2044);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2044 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2033 + 1.0) / _2044);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2159 = frontier_phi_30_26_ladder;
        }
        float _2475;
        if (_2047 > 0.0)
        {
            _2475 = abs((1.0 - _2037) / _2047);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2047 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2037 + 1.0) / _2047);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2475 = frontier_phi_42_37_ladder;
        }
        float _2813;
        if (_2050 > 0.0)
        {
            _2813 = abs((1.0 - _2041) / _2050);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2050 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_2041 + 1.0) / _2050);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2813 = frontier_phi_52_49_ladder;
        }
        float _2815 = isnan(_2475) ? _2159 : (isnan(_2159) ? _2475 : min(_2159, _2475));
        float _2816 = isnan(_2813) ? _2815 : (isnan(_2815) ? _2813 : min(_2815, _2813));
        float _2820 = (_2816 * _2044) + _2033;
        float _2821 = (_2816 * _2047) + _2037;
        float _2822 = (_2816 * _2050) + _2041;
        float _2823 = _2816 * 9.9999997473787516355514526367188e-05;
        float _2824 = (-1.0) - _2823;
        float _2826 = _2823 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2822 > _2826) || ((_2822 < _2824) || ((_2821 > _2826) || ((_2821 < _2824) || ((_2820 < _2824) || (_2820 > _2826))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2944 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2822, cbModelParam._m0[17u].z, fma(_2821, cbModelParam._m0[17u].y, _2820 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2822, cbModelParam._m0[18u].z, fma(_2821, cbModelParam._m0[18u].y, _2820 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2822, cbModelParam._m0[19u].z, fma(_2821, cbModelParam._m0[19u].y, _2820 * cbModelParam._m0[19u].x))), _1980);
            frontier_phi_27_52_ladder = _2944.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2944.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2944.x * cbModelParam._m0[1u].z;
        }
        _2069 = frontier_phi_27_52_ladder_2;
        _2071 = frontier_phi_27_52_ladder_1;
        _2073 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2053 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1048, _1049, _1050), _1980);
        _2069 = _2053.x * cbModelParam._m0[1u].z;
        _2071 = _2053.y * cbModelParam._m0[1u].z;
        _2073 = _2053.z * cbModelParam._m0[1u].z;
    }
    float _2086 = (((_1074 * _1025) + _1075) * _1040) * ((cbModelParam._m0[1u].w * (_2069 - _1971)) + _1971);
    float _2088 = (((_1074 * _1027) + _1075) * _1040) * ((cbModelParam._m0[1u].w * (_2071 - _1973)) + _1973);
    float _2090 = (((_1074 * _1028) + _1075) * _1040) * ((cbModelParam._m0[1u].w * (_2073 - _1975)) + _1975);
    float _2093 = fma(_2090, cbSceneParam._m0[89u].z, fma(_2088, cbSceneParam._m0[89u].y, _2086 * cbSceneParam._m0[89u].x));
    float _2096 = fma(_2090, cbSceneParam._m0[90u].z, fma(_2088, cbSceneParam._m0[90u].y, _2086 * cbSceneParam._m0[90u].x));
    float _2099 = fma(_2090, cbSceneParam._m0[91u].z, fma(_2088, cbSceneParam._m0[91u].y, _2086 * cbSceneParam._m0[91u].x));
    float _2133 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2137 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2141 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2145 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2146 = _2133 / _2145;
    float _2147 = _2137 / _2145;
    float _2148 = _2141 / _2145;
    float _2294;
    float _2295;
    float _2296;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2175 = ((uint(_2148 > cbSceneParam._m0[59u].y) + uint(_2148 > cbSceneParam._m0[59u].x)) + uint(_2148 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2176 = _2175 + 43u;
        uint _2184 = _2175 + 44u;
        uint _2192 = _2175 + 45u;
        uint _2200 = _2175 + 46u;
        float _2211 = fma(_2145, cbSceneParam._m0[_2176].w, fma(_2141, cbSceneParam._m0[_2176].z, fma(_2137, cbSceneParam._m0[_2176].y, _2133 * cbSceneParam._m0[_2176].x)));
        float _2215 = fma(_2145, cbSceneParam._m0[_2184].w, fma(_2141, cbSceneParam._m0[_2184].z, fma(_2137, cbSceneParam._m0[_2184].y, _2133 * cbSceneParam._m0[_2184].x)));
        float _2223 = fma(_2145, cbSceneParam._m0[_2200].w, fma(_2141, cbSceneParam._m0[_2200].z, fma(_2137, cbSceneParam._m0[_2200].y, _2133 * cbSceneParam._m0[_2200].x)));
        float _2228 = cbSceneParam._m0[33u].z * _2223;
        float _2230 = cbSceneParam._m0[33u].w * _2223;
        float _2233 = fma(_2145, cbSceneParam._m0[_2192].w, fma(_2141, cbSceneParam._m0[_2192].z, fma(_2137, cbSceneParam._m0[_2192].y, _2133 * cbSceneParam._m0[_2192].x))) / _2223;
        float _2280 = (cbSceneParam._m0[33u].x - sqrt(((_2147 * _2147) + (_2146 * _2146)) + (_2148 * _2148))) * cbSceneParam._m0[33u].y;
        float _4657 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2287 = (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2228 + _2211) / _2223, (_2230 + _2215) / _2223), _2233), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2230 + _2211) / _2223, (_2215 - _2228) / _2223), _2233), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2211 - _2228) / _2223, (_2215 - _2230) / _2223), _2233), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2211 - _2230) / _2223, (_2228 + _2215) / _2223), _2233), 0.0)).x), vec4(0.25)));
        _2294 = 1.0 - (_2287 * cbSceneParam._m0[34u].x);
        _2295 = 1.0 - (_2287 * cbSceneParam._m0[34u].y);
        _2296 = 1.0 - (_2287 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2294 = 1.0;
        _2295 = 1.0;
        _2296 = 1.0;
    }
    float _2360;
    float _2362;
    float _2364;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2348 = fma(_2145, cbSceneParam._m0[63u].w, fma(_2141, cbSceneParam._m0[63u].z, fma(_2137, cbSceneParam._m0[63u].y, _2133 * cbSceneParam._m0[63u].x)));
        float _2349 = fma(_2145, cbSceneParam._m0[60u].w, fma(_2141, cbSceneParam._m0[60u].z, fma(_2137, cbSceneParam._m0[60u].y, _2133 * cbSceneParam._m0[60u].x))) / _2348;
        float _2350 = fma(_2145, cbSceneParam._m0[61u].w, fma(_2141, cbSceneParam._m0[61u].z, fma(_2137, cbSceneParam._m0[61u].y, _2133 * cbSceneParam._m0[61u].x))) / _2348;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2349 >= cbSceneParam._m0[64u].x) && (_2350 >= cbSceneParam._m0[64u].y)) && (_2349 <= cbSceneParam._m0[64u].z)) && (_2350 <= cbSceneParam._m0[64u].w))
        {
            float _2488 = fma(_2145, cbSceneParam._m0[62u].w, fma(_2141, cbSceneParam._m0[62u].z, fma(_2137, cbSceneParam._m0[62u].y, _2133 * cbSceneParam._m0[62u].x))) / _2348;
            float _2492 = isnan(cbSceneParam._m0[41u].w) ? _2488 : (isnan(_2488) ? cbSceneParam._m0[41u].w : max(_2488, cbSceneParam._m0[41u].w));
            float _2535 = (cbSceneParam._m0[33u].x - sqrt(((_2147 * _2147) + (_2146 * _2146)) + (_2148 * _2148))) * cbSceneParam._m0[33u].y;
            float _4673 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
            float _2542 = (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2349, cbSceneParam._m0[33u].w + _2350), _2492), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2349, _2350 - cbSceneParam._m0[33u].z), _2492), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2349 - cbSceneParam._m0[33u].z, _2350 - cbSceneParam._m0[33u].w), _2492), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2349 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2350), _2492), 0.0)).x), vec4(0.25)));
            float _2546 = 1.0 - (_2542 * cbSceneParam._m0[34u].x);
            float _2547 = 1.0 - (_2542 * cbSceneParam._m0[34u].y);
            float _2548 = 1.0 - (_2542 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2547) ? _2295 : (isnan(_2295) ? _2547 : min(_2295, _2547));
            frontier_phi_39_38_ladder_1 = isnan(_2546) ? _2294 : (isnan(_2294) ? _2546 : min(_2294, _2546));
            frontier_phi_39_38_ladder_2 = isnan(_2548) ? _2296 : (isnan(_2296) ? _2548 : min(_2296, _2548));
        }
        else
        {
            frontier_phi_39_38_ladder = _2295;
            frontier_phi_39_38_ladder_1 = _2294;
            frontier_phi_39_38_ladder_2 = _2296;
        }
        _2360 = frontier_phi_39_38_ladder_1;
        _2362 = frontier_phi_39_38_ladder;
        _2364 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2360 = _2294;
        _2362 = _2295;
        _2364 = _2296;
    }
    uvec4 _2369 = floatBitsToUint(cbInstanceData._m0[_968 + 5u]);
    uint _2371 = _2369.x * 14u;
    uint _2372 = _2371 + 13u;
    float _2379 = _1040 + (-1.0);
    float _2384 = (cbLight._m0[_2372].x * _2379) + 1.0;
    float _2385 = (cbLight._m0[_2372].y * _2379) + 1.0;
    float _2386 = (cbLight._m0[_2372].z * _2379) + 1.0;
    float _2387 = (cbLight._m0[_2372].w * _2379) + 1.0;
    uint _2388 = _2371 + 5u;
    float _2394 = isnan(1.0) ? _2385 : (isnan(_2385) ? 1.0 : min(_2385, 1.0));
    uint _2398 = _2371 + 4u;
    float _2407 = isnan(1.0) ? _2384 : (isnan(_2384) ? 1.0 : min(_2384, 1.0));
    uint _2411 = _2371 | 1u;
    float _2422 = dot(vec3(cbLight._m0[_2371].xyz), vec3(_811, _812, _813));
    float _2425 = dot(vec3(cbLight._m0[_2411].xyz), vec3(_811, _812, _813));
    float _4709 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _4720 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2430 = (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * 0.3183098733425140380859375;
    float _2432 = (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0))) * 0.3183098733425140380859375;
    float _2439 = ((cbLight._m0[_2388].x * _2394) * _2432) + (((cbLight._m0[_2398].x * _2360) * _2407) * _2430);
    float _2440 = ((_2394 * cbLight._m0[_2388].y) * _2432) + (((cbLight._m0[_2398].y * _2362) * _2407) * _2430);
    float _2441 = ((_2394 * cbLight._m0[_2388].z) * _2432) + (((cbLight._m0[_2398].z * _2364) * _2407) * _2430);
    uvec4 _2445 = floatBitsToUint(cbLight._m0[_2371 + 12u]);
    bool _2447 = _2445.x == 0u;
    float _2549;
    float _2551;
    float _2553;
    if (_2447)
    {
        _2549 = _2439;
        _2551 = _2440;
        _2553 = _2441;
    }
    else
    {
        uint _2557 = _2371 + 6u;
        float _2573 = (dot(vec3(cbLight._m0[_2371 + 2u].xyz), vec3(_811, _812, _813)) * 0.5) + 0.5;
        float _2574 = _2573 * _2573;
        float _4731 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2575 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
        float _2576 = isnan(1.0) ? _2386 : (isnan(_2386) ? 1.0 : min(_2386, 1.0));
        _2549 = (((cbLight._m0[_2557].x * 0.3183098733425140380859375) * _2575) * _2576) + _2439;
        _2551 = (((cbLight._m0[_2557].y * 0.3183098733425140380859375) * _2575) * _2576) + _2440;
        _2553 = (((cbLight._m0[_2557].z * 0.3183098733425140380859375) * _2575) * _2576) + _2441;
    }
    bool _2556 = _2445.y == 0u;
    float _2611;
    float _2613;
    float _2615;
    if (_2556)
    {
        _2611 = _2549;
        _2613 = _2551;
        _2615 = _2553;
    }
    else
    {
        uint _2784 = _2371 + 7u;
        float _2800 = (dot(vec3(cbLight._m0[_2371 + 3u].xyz), vec3(_811, _812, _813)) * 0.5) + 0.5;
        float _2801 = _2800 * _2800;
        float _4747 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
        float _2802 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
        float _2803 = isnan(1.0) ? _2387 : (isnan(_2387) ? 1.0 : min(_2387, 1.0));
        _2611 = (((cbLight._m0[_2784].x * 0.3183098733425140380859375) * _2802) * _2803) + _2549;
        _2613 = (((cbLight._m0[_2784].y * 0.3183098733425140380859375) * _2802) * _2803) + _2551;
        _2615 = (((cbLight._m0[_2784].z * 0.3183098733425140380859375) * _2802) * _2803) + _2553;
    }
    uint _2618 = _2371 + 8u;
    float _2631 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2371].w)) * _955) * 0.949999988079071044921875);
    float _2632 = _2631 * _2631;
    float _2633 = cbLight._m0[_2371].x + _891;
    float _2634 = cbLight._m0[_2371].y + _892;
    float _2635 = cbLight._m0[_2371].z + _893;
    float _2639 = inversesqrt(dot(vec3(_2633, _2634, _2635), vec3(_2633, _2634, _2635)));
    float _2640 = _2639 * _2633;
    float _2641 = _2639 * _2634;
    float _2642 = _2639 * _2635;
    float _2643 = dot(vec3(_811, _812, _813), vec3(cbLight._m0[_2371].xyz));
    float _4763 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
    float _2646 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
    float _4774 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _2647 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
    float _2648 = dot(vec3(_811, _812, _813), vec3(_2640, _2641, _2642));
    float _4785 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
    float _2651 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
    float _2652 = dot(vec3(cbLight._m0[_2371].xyz), vec3(_2640, _2641, _2642));
    float _4796 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
    float _2656 = _2632 * _2632;
    float _2660 = ((_2651 * _2651) * (_2656 + (-1.0))) + 1.0;
    float _2668 = exp2(log2(1.0 - (isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0)))) * 5.0);
    float _2669 = 0.959999978542327880859375 - _1022;
    float _2671 = 0.959999978542327880859375 - _1023;
    float _2672 = 0.959999978542327880859375 - _1024;
    float _2679 = 1.0 - _2632;
    float _2690 = (0.5 / (((_2647 * ((_2646 * _2679) + _2632)) + 9.9999999392252902907785028219223e-09) + (((_2647 * _2679) + _2632) * _2646))) * _2646;
    float _4807 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
    float _2692 = (isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0))) * (_2656 / ((_2660 * _2660) * 3.141590118408203125));
    uint _2706 = _2371 + 9u;
    float _2717 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2411].w)) * _955) * 0.949999988079071044921875);
    float _2718 = _2717 * _2717;
    float _2719 = cbLight._m0[_2411].x + _891;
    float _2720 = cbLight._m0[_2411].y + _892;
    float _2721 = cbLight._m0[_2411].z + _893;
    float _2725 = inversesqrt(dot(vec3(_2719, _2720, _2721), vec3(_2719, _2720, _2721)));
    float _2726 = _2725 * _2719;
    float _2727 = _2725 * _2720;
    float _2728 = _2725 * _2721;
    float _2729 = dot(vec3(_811, _812, _813), vec3(cbLight._m0[_2411].xyz));
    float _4818 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
    float _2732 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
    float _2733 = dot(vec3(_811, _812, _813), vec3(_2726, _2727, _2728));
    float _4829 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
    float _2736 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
    float _2737 = dot(vec3(cbLight._m0[_2411].xyz), vec3(_2726, _2727, _2728));
    float _4840 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
    float _2741 = _2718 * _2718;
    float _2745 = ((_2736 * _2736) * (_2741 + (-1.0))) + 1.0;
    float _2752 = exp2(log2(1.0 - (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0)))) * 5.0);
    float _2759 = 1.0 - _2718;
    float _2769 = (0.5 / (((_2647 * ((_2732 * _2759) + _2718)) + 9.9999999392252902907785028219223e-09) + (((_2647 * _2759) + _2718) * _2732))) * _2732;
    float _4851 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
    float _2771 = (isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0))) * (_2741 / ((_2745 * _2745) * 3.141590118408203125));
    float _2781 = (((((_2752 * _2669) + _1025) * cbLight._m0[_2706].x) * _2771) * _2394) + ((((cbLight._m0[_2618].x * _2360) * ((_2668 * _2669) + _1025)) * _2692) * _2407);
    float _2782 = (((((_2752 * _2671) + _1027) * cbLight._m0[_2706].y) * _2771) * _2394) + ((((cbLight._m0[_2618].y * _2362) * ((_2668 * _2671) + _1027)) * _2692) * _2407);
    float _2783 = (((((_2752 * _2672) + _1028) * cbLight._m0[_2706].z) * _2771) * _2394) + ((((cbLight._m0[_2618].z * _2364) * ((_2668 * _2672) + _1028)) * _2692) * _2407);
    float _2839;
    float _2841;
    float _2843;
    if (_2447)
    {
        _2839 = _2781;
        _2841 = _2782;
        _2843 = _2783;
    }
    else
    {
        uint _2845 = _2371 + 2u;
        uint _2849 = _2371 + 10u;
        float _2863 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2845].w)) * _955) * 0.949999988079071044921875);
        float _2864 = _2863 * _2863;
        float _2865 = cbLight._m0[_2845].x + _891;
        float _2866 = cbLight._m0[_2845].y + _892;
        float _2867 = cbLight._m0[_2845].z + _893;
        float _2871 = inversesqrt(dot(vec3(_2865, _2866, _2867), vec3(_2865, _2866, _2867)));
        float _2872 = _2871 * _2865;
        float _2873 = _2871 * _2866;
        float _2874 = _2871 * _2867;
        float _2875 = dot(vec3(_811, _812, _813), vec3(cbLight._m0[_2845].xyz));
        float _4862 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
        float _2878 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
        float _2879 = dot(vec3(_811, _812, _813), vec3(_2872, _2873, _2874));
        float _4873 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
        float _2882 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
        float _2883 = dot(vec3(cbLight._m0[_2845].xyz), vec3(_2872, _2873, _2874));
        float _4884 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
        float _2887 = _2864 * _2864;
        float _2891 = ((_2882 * _2882) * (_2887 + (-1.0))) + 1.0;
        float _2898 = exp2(log2(1.0 - (isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0)))) * 5.0);
        float _2905 = 1.0 - _2864;
        float _2915 = (0.5 / (((_2647 * ((_2878 * _2905) + _2864)) + 9.9999999392252902907785028219223e-09) + (((_2647 * _2905) + _2864) * _2878))) * _2878;
        float _4895 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
        float _2917 = (isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0))) * (_2887 / ((_2891 * _2891) * 3.141590118408203125));
        float _2918 = isnan(1.0) ? _2386 : (isnan(_2386) ? 1.0 : min(_2386, 1.0));
        _2839 = (((((_2898 * _2669) + _1025) * cbLight._m0[_2849].x) * _2917) * _2918) + _2781;
        _2841 = (((((_2898 * _2671) + _1027) * cbLight._m0[_2849].y) * _2917) * _2918) + _2782;
        _2843 = (((((_2898 * _2672) + _1028) * cbLight._m0[_2849].z) * _2917) * _2918) + _2783;
    }
    float _2949;
    float _2951;
    float _2953;
    if (_2556)
    {
        _2949 = _2839;
        _2951 = _2841;
        _2953 = _2843;
    }
    else
    {
        uint _2960 = _2371 + 3u;
        uint _2964 = _2371 + 11u;
        float _2978 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2960].w)) * _955) * 0.949999988079071044921875);
        float _2979 = _2978 * _2978;
        float _2980 = cbLight._m0[_2960].x + _891;
        float _2981 = cbLight._m0[_2960].y + _892;
        float _2982 = cbLight._m0[_2960].z + _893;
        float _2986 = inversesqrt(dot(vec3(_2980, _2981, _2982), vec3(_2980, _2981, _2982)));
        float _2987 = _2986 * _2980;
        float _2988 = _2986 * _2981;
        float _2989 = _2986 * _2982;
        float _2990 = dot(vec3(_811, _812, _813), vec3(cbLight._m0[_2960].xyz));
        float _4911 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
        float _2993 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
        float _2994 = dot(vec3(_811, _812, _813), vec3(_2987, _2988, _2989));
        float _4922 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
        float _2997 = isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0));
        float _2998 = dot(vec3(cbLight._m0[_2960].xyz), vec3(_2987, _2988, _2989));
        float _4933 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
        float _3002 = _2979 * _2979;
        float _3006 = ((_2997 * _2997) * (_3002 + (-1.0))) + 1.0;
        float _3013 = exp2(log2(1.0 - (isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0)))) * 5.0);
        float _3020 = 1.0 - _2979;
        float _3030 = (0.5 / (((_2647 * ((_2993 * _3020) + _2979)) + 9.9999999392252902907785028219223e-09) + (((_2647 * _3020) + _2979) * _2993))) * _2993;
        float _4944 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
        float _3032 = (isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0))) * (_3002 / ((_3006 * _3006) * 3.141590118408203125));
        float _3033 = isnan(1.0) ? _2387 : (isnan(_2387) ? 1.0 : min(_2387, 1.0));
        _2949 = (((((_3013 * _2669) + _1025) * cbLight._m0[_2964].x) * _3032) * _3033) + _2839;
        _2951 = (((((_3013 * _2671) + _1027) * cbLight._m0[_2964].y) * _3032) * _3033) + _2841;
        _2953 = (((((_3013 * _2672) + _1028) * cbLight._m0[_2964].z) * _3032) * _3033) + _2843;
    }
    float _3098;
    float _3100;
    float _3102;
    float _3104;
    float _3106;
    float _3108;
    if (_2369.y == 0u)
    {
        uvec4 _3054 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3055 = _3054.x;
        uint _3066 = uint((float(_3054.y) * floor(float(uint(cbSceneParam._m0[85u].y * _913) / _3055))) + floor(float(uint(cbSceneParam._m0[85u].x * _912) / _3055)));
        float _3076 = (log2(_2148 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3077 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
        uint _3080 = uint(isnan(14.0) ? _3077 : (isnan(_3077) ? 14.0 : min(_3077, 14.0)));
        uvec4 _3085 = texelFetch(g_lightClusterGridBuffer, int(((_3080 << 2u) + (_3066 << 6u)) >> 2u));
        uint _3086 = _3085.x;
        uint _3087 = _3054.z;
        float _3184;
        float _3186;
        float _3188;
        float _3190;
        float _3192;
        float _3194;
        if (((((1u << ((_3087 >> 4u) & 15u)) + 4294967295u) & _3086) == 0u) || ((_3087 & 240u) == 0u))
        {
            _3184 = 0.0;
            _3186 = 0.0;
            _3188 = 0.0;
            _3190 = 0.0;
            _3192 = 0.0;
            _3194 = 0.0;
        }
        else
        {
            float _3185;
            float _3187;
            float _3189;
            float _3191;
            float _3193;
            float _3195;
            float _3336 = 0.0;
            float _3337 = 0.0;
            float _3338 = 0.0;
            float _3339 = 0.0;
            float _3340 = 0.0;
            float _3341 = 0.0;
            uint _3342 = 0u;
            uint _3351;
            bool _3352;
            for (;;)
            {
                _3351 = texelFetch(g_lightClassification, int((((_3080 << 5u) + (_3066 << 9u)) + (_3342 << 2u)) >> 2u)).x;
                _3352 = _3351 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3352)
                {
                    frontier_phi_73_pred = _3341;
                    frontier_phi_73_pred_1 = _3340;
                    frontier_phi_73_pred_2 = _3339;
                    frontier_phi_73_pred_3 = _3338;
                    frontier_phi_73_pred_4 = _3337;
                    frontier_phi_73_pred_5 = _3336;
                }
                else
                {
                    float _3481;
                    float _3482;
                    float _3483;
                    float _3484;
                    float _3485;
                    float _3486;
                    uint _3487;
                    _3481 = _3336;
                    _3482 = _3337;
                    _3483 = _3338;
                    _3484 = _3339;
                    _3485 = _3340;
                    _3486 = _3341;
                    _3487 = _3351;
                    float _3408;
                    float _3409;
                    float _3410;
                    float _3411;
                    float _3412;
                    float _3413;
                    for (;;)
                    {
                        uint _3491 = uint(findLSB(_3487)) + (_3342 << 5u);
                        uint _3488 = (_3487 + 4294967295u) & _3487;
                        uint _3493 = _3491 * 48u;
                        vec4 _3507 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3493)).x, texelFetch(g_PointLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3493 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3493 + 3u)).x));
                        uint _3513 = (_3491 * 48u) + 4u;
                        vec4 _3526 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3513)).x, texelFetch(g_PointLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3513 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3513 + 3u)).x));
                        uint _3532 = (_3491 * 48u) + 8u;
                        vec3 _3543 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3532)).x, texelFetch(g_PointLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3532 + 2u)).x));
                        float _3547 = _3507.x - _2146;
                        float _3548 = _3507.y - _2147;
                        float _3549 = _3507.z - _2148;
                        float _3550 = dot(vec3(_3547, _3548, _3549), vec3(_3547, _3548, _3549));
                        float _3553 = inversesqrt(_3550);
                        float _3554 = _3553 * _3547;
                        float _3555 = _3553 * _3548;
                        float _3556 = _3553 * _3549;
                        float _3557 = dot(vec3(_936, _939, _942), vec3(_3554, _3555, _3556));
                        float _3562 = 1.0 - (_3550 * _3507.w);
                        float _4970 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                        float _3563 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
                        float _3564 = sqrt(_3550) * _3526.w;
                        float _3567 = 1.39999997615814208984375 / (_3564 + 1.39999997615814208984375);
                        float _3568 = _3567 * _3567;
                        float _3571 = ((1.0 - _3568) * _3557) + _3568;
                        float _3574 = _3564 * _3564;
                        float _3578 = ((isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0))) * _3563) / ((_3574 * 0.699999988079071044921875) + 1.0);
                        float _3582 = (-0.0) - _2146;
                        float _3583 = (-0.0) - _2147;
                        float _3584 = (-0.0) - _2148;
                        float _3588 = inversesqrt(dot(vec3(_3582, _3583, _3584), vec3(_3582, _3583, _3584)));
                        float _3589 = _3588 * _3582;
                        float _3590 = _3588 * _3583;
                        float _3591 = _3588 * _3584;
                        float _3598 = exp2(log2(1.0 / ((_3574 * 3.5) + 5.0)) * 0.25);
                        float _3599 = 1.0 - _1056;
                        float _3606 = sqrt(1.0 - ((1.0 - (_3599 * _3599)) * (1.0 - (_3598 * _3598))));
                        float _3607 = _3606 * _3606;
                        float _3608 = _3607 * _3607;
                        float _3609 = _3589 + _3554;
                        float _3610 = _3590 + _3555;
                        float _3611 = _3591 + _3556;
                        float _3615 = inversesqrt(dot(vec3(_3609, _3610, _3611), vec3(_3609, _3610, _3611)));
                        float _3619 = dot(vec3(_936, _939, _942), vec3(_3589, _3590, _3591));
                        float _4986 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                        float _3622 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
                        float _3623 = dot(vec3(_936, _939, _942), vec3(_3615 * _3609, _3615 * _3610, _3615 * _3611));
                        float _4997 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                        float _3626 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
                        float _3630 = ((_3626 * _3626) * (_3608 + (-1.0))) + 1.0;
                        float _3631 = _3567 * _3607;
                        float _3632 = _3631 * _3631;
                        float _3635 = ((1.0 - _3632) * _3557) + _3632;
                        float _5008 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                        float _3636 = isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0));
                        float _3637 = 1.0 - _3607;
                        float _3647 = (0.5 / (((_3636 * ((_3622 * _3637) + _3607)) + 9.9999999392252902907785028219223e-09) + (((_3636 * _3637) + _3607) * _3622))) * _3636;
                        float _5019 = isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0));
                        float _3658 = (((_3608 * 3.1415927410125732421875) * (isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0)))) / ((_3630 * _3630) * ((_3574 * 2.1991131305694580078125) + 3.141590118408203125))) * _3563;
                        _3411 = (_3578 * _3526.x) + _3484;
                        _3412 = (_3578 * _3526.y) + _3485;
                        _3413 = (_3578 * _3526.z) + _3486;
                        _3408 = (_3658 * _3543.x) + _3481;
                        _3409 = (_3658 * _3543.y) + _3482;
                        _3410 = (_3658 * _3543.z) + _3483;
                        if (_3488 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3481 = _3408;
                            _3482 = _3409;
                            _3483 = _3410;
                            _3484 = _3411;
                            _3485 = _3412;
                            _3486 = _3413;
                            _3487 = _3488;
                        }
                    }
                    frontier_phi_73_pred = _3413;
                    frontier_phi_73_pred_1 = _3412;
                    frontier_phi_73_pred_2 = _3411;
                    frontier_phi_73_pred_3 = _3410;
                    frontier_phi_73_pred_4 = _3409;
                    frontier_phi_73_pred_5 = _3408;
                }
                _3195 = frontier_phi_73_pred;
                _3193 = frontier_phi_73_pred_1;
                _3191 = frontier_phi_73_pred_2;
                _3189 = frontier_phi_73_pred_3;
                _3187 = frontier_phi_73_pred_4;
                _3185 = frontier_phi_73_pred_5;
                uint _3343 = _3342 + 1u;
                if (_3343 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3336 = _3185;
                    _3337 = _3187;
                    _3338 = _3189;
                    _3339 = _3191;
                    _3340 = _3193;
                    _3341 = _3195;
                    _3342 = _3343;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3184 = _3185;
            _3186 = _3187;
            _3188 = _3189;
            _3190 = _3191;
            _3192 = _3193;
            _3194 = _3195;
        }
        uvec4 _3198 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3199 = _3198.z;
        uint _3201 = (_3199 >> 8u) & 15u;
        float _3304;
        float _3306;
        float _3308;
        float _3310;
        float _3312;
        float _3314;
        if (((4294967295u << _3201) & _3086) == 0u)
        {
            _3304 = _3184;
            _3306 = _3186;
            _3308 = _3188;
            _3310 = _3190;
            _3312 = _3192;
            _3314 = _3194;
        }
        else
        {
            float _3329 = inversesqrt(dot(vec3(_2146, _2147, _2148), vec3(_2146, _2147, _2148)));
            float _3330 = _3329 * _2146;
            float _3331 = _3329 * _2147;
            float _3332 = _3329 * _2148;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3201 < ((_3199 >> 12u) & 15u))
            {
                float _3305;
                float _3307;
                float _3309;
                float _3311;
                float _3313;
                float _3315;
                float _3464 = _3184;
                float _3465 = _3186;
                float _3466 = _3188;
                float _3467 = _3190;
                float _3468 = _3192;
                float _3469 = _3194;
                uint _3470 = _3201;
                uint _3479;
                bool _3480;
                for (;;)
                {
                    _3479 = texelFetch(g_lightClassification, int((((_3080 << 5u) + (_3066 << 9u)) + (_3470 << 2u)) >> 2u)).x;
                    _3480 = _3479 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3480)
                    {
                        frontier_phi_84_pred = _3468;
                        frontier_phi_84_pred_1 = _3467;
                        frontier_phi_84_pred_2 = _3466;
                        frontier_phi_84_pred_3 = _3465;
                        frontier_phi_84_pred_4 = _3464;
                        frontier_phi_84_pred_5 = _3469;
                    }
                    else
                    {
                        float _3672;
                        float _3673;
                        float _3674;
                        float _3675;
                        float _3676;
                        float _3677;
                        float _3965;
                        float _3966;
                        float _3967;
                        float _3968;
                        float _3969;
                        float _3970;
                        float _3685 = _3464;
                        float _3686 = _3465;
                        float _3687 = _3466;
                        float _3688 = _3467;
                        float _3689 = _3468;
                        float _3690 = _3469;
                        uint _3691 = _3479;
                        uint _3692;
                        vec4 _3717;
                        float _3718;
                        vec4 _3733;
                        vec3 _3745;
                        vec4 _3760;
                        vec4 _3775;
                        float _3821;
                        bool _3822;
                        for (;;)
                        {
                            uint _3702 = ((_3470 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3691));
                            _3692 = (_3691 + 4294967295u) & _3691;
                            uint _3704 = _3702 * 40u;
                            _3717 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3704)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 3u)).x));
                            _3718 = _3717.w;
                            uint _3720 = (_3702 * 40u) + 4u;
                            _3733 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3720)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 3u)).x));
                            uint _3735 = (_3702 * 40u) + 8u;
                            _3745 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3735)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 2u)).x));
                            uint _3747 = (_3702 * 40u) + 16u;
                            _3760 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3747)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 3u)).x));
                            uint _3762 = (_3702 * 40u) + 20u;
                            _3775 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3762)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 3u)).x));
                            uint _3777 = (_3702 * 40u) + 24u;
                            vec4 _3790 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3777)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 3u)).x));
                            uint _3796 = (_3702 * 40u) + 28u;
                            vec4 _3809 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3796)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3796 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3796 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3796 + 3u)).x));
                            _3821 = fma(_2148, _3809.z, fma(_2147, _3809.y, _3809.x * _2146)) + _3809.w;
                            _3822 = !((fma(_2148, _3790.z, fma(_2147, _3790.y, _3790.x * _2146)) + _3790.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3822)
                            {
                                float _3849 = _3717.x - _2146;
                                float _3850 = _3717.y - _2147;
                                float _3851 = _3717.z - _2148;
                                float _3852 = dot(vec3(_3849, _3850, _3851), vec3(_3849, _3850, _3851));
                                float _3855 = inversesqrt(_3852);
                                float _3856 = _3855 * _3849;
                                float _3857 = _3855 * _3850;
                                float _3858 = _3855 * _3851;
                                float _3862 = 1.0 - (_3852 / (_3718 * _3718));
                                float _5030 = isnan(0.0) ? _3862 : (isnan(_3862) ? 0.0 : max(_3862, 0.0));
                                float _3863 = isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0));
                                float _3867 = sqrt(_3852) * _3733.w;
                                float _3869 = 1.39999997615814208984375 / (_3867 + 1.39999997615814208984375);
                                float _3870 = _3869 * _3869;
                                float _3873 = ((1.0 - _3870) * dot(vec3(_3856, _3857, _3858), vec3(_936, _939, _942))) + _3870;
                                float _3876 = _3867 * _3867;
                                float _3880 = (fma(_2148, _3760.z, fma(_2147, _3760.y, _3760.x * _2146)) + _3760.w) / _3821;
                                float _3881 = (fma(_2148, _3775.z, fma(_2147, _3775.y, _3775.x * _2146)) + _3775.w) / _3821;
                                float _3885 = 1.0 - dot(vec2(_3880, _3881), vec2(_3880, _3881));
                                float _5046 = isnan(0.0) ? _3885 : (isnan(_3885) ? 0.0 : max(_3885, 0.0));
                                float _3886 = isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0));
                                float _3887 = _3886 * (((isnan(0.0) ? _3873 : (isnan(_3873) ? 0.0 : max(_3873, 0.0))) * _3863) / ((_3876 * 0.699999988079071044921875) + 1.0));
                                float _3899 = exp2(log2(1.0 / ((_3876 * 3.5) + 5.0)) * 0.25);
                                float _3900 = 1.0 - _1056;
                                float _3907 = sqrt(1.0 - ((1.0 - (_3900 * _3900)) * (1.0 - (_3899 * _3899))));
                                float _3908 = _3907 * _3907;
                                float _3909 = _3908 * _3908;
                                float _3910 = _3856 - _3330;
                                float _3911 = _3857 - _3331;
                                float _3912 = _3858 - _3332;
                                float _3916 = inversesqrt(dot(vec3(_3910, _3911, _3912), vec3(_3910, _3911, _3912)));
                                float _3920 = dot(vec3(_936, _939, _942), vec3((-0.0) - _3330, (-0.0) - _3331, (-0.0) - _3332));
                                float _5057 = isnan(0.0) ? _3920 : (isnan(_3920) ? 0.0 : max(_3920, 0.0));
                                float _3923 = isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0));
                                float _3924 = dot(vec3(_936, _939, _942), vec3(_3916 * _3910, _3916 * _3911, _3916 * _3912));
                                float _5068 = isnan(0.0) ? _3924 : (isnan(_3924) ? 0.0 : max(_3924, 0.0));
                                float _3927 = isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0));
                                float _3931 = ((_3927 * _3927) * (_3909 + (-1.0))) + 1.0;
                                float _3932 = _3869 * _3908;
                                float _3933 = _3932 * _3932;
                                float _3939 = ((1.0 - _3933) * dot(vec3(_936, _939, _942), vec3(_3856, _3857, _3858))) + _3933;
                                float _5079 = isnan(0.0) ? _3939 : (isnan(_3939) ? 0.0 : max(_3939, 0.0));
                                float _3940 = isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0));
                                float _3941 = 1.0 - _3908;
                                float _3951 = (0.5 / (((_3940 * ((_3923 * _3941) + _3908)) + 9.9999999392252902907785028219223e-09) + (((_3940 * _3941) + _3908) * _3923))) * _3940;
                                float _5090 = isnan(0.0) ? _3951 : (isnan(_3951) ? 0.0 : max(_3951, 0.0));
                                float _3961 = (_3886 * _3863) * (((_3909 * 3.1415927410125732421875) * (isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0)))) / ((_3931 * _3931) * ((_3876 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3887 * _3733.y;
                                frontier_phi_90_pred_1 = _3887 * _3733.x;
                                frontier_phi_90_pred_2 = _3961 * _3745.z;
                                frontier_phi_90_pred_3 = _3961 * _3745.y;
                                frontier_phi_90_pred_4 = _3961 * _3745.x;
                                frontier_phi_90_pred_5 = _3887 * _3733.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3969 = frontier_phi_90_pred;
                            _3968 = frontier_phi_90_pred_1;
                            _3967 = frontier_phi_90_pred_2;
                            _3966 = frontier_phi_90_pred_3;
                            _3965 = frontier_phi_90_pred_4;
                            _3970 = frontier_phi_90_pred_5;
                            _3675 = _3968 + _3688;
                            _3676 = _3969 + _3689;
                            _3677 = _3970 + _3690;
                            _3672 = _3965 + _3685;
                            _3673 = _3966 + _3686;
                            _3674 = _3967 + _3687;
                            if (_3692 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3685 = _3672;
                                _3686 = _3673;
                                _3687 = _3674;
                                _3688 = _3675;
                                _3689 = _3676;
                                _3690 = _3677;
                                _3691 = _3692;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3676;
                        frontier_phi_84_pred_1 = _3675;
                        frontier_phi_84_pred_2 = _3674;
                        frontier_phi_84_pred_3 = _3673;
                        frontier_phi_84_pred_4 = _3672;
                        frontier_phi_84_pred_5 = _3677;
                    }
                    _3313 = frontier_phi_84_pred;
                    _3311 = frontier_phi_84_pred_1;
                    _3309 = frontier_phi_84_pred_2;
                    _3307 = frontier_phi_84_pred_3;
                    _3305 = frontier_phi_84_pred_4;
                    _3315 = frontier_phi_84_pred_5;
                    uint _3471 = _3470 + 1u;
                    if (_3471 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3464 = _3305;
                        _3465 = _3307;
                        _3466 = _3309;
                        _3467 = _3311;
                        _3468 = _3313;
                        _3469 = _3315;
                        _3470 = _3471;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3315;
                frontier_phi_65_66_ladder_1 = _3311;
                frontier_phi_65_66_ladder_2 = _3313;
                frontier_phi_65_66_ladder_3 = _3307;
                frontier_phi_65_66_ladder_4 = _3305;
                frontier_phi_65_66_ladder_5 = _3309;
            }
            else
            {
                frontier_phi_65_66_ladder = _3194;
                frontier_phi_65_66_ladder_1 = _3190;
                frontier_phi_65_66_ladder_2 = _3192;
                frontier_phi_65_66_ladder_3 = _3186;
                frontier_phi_65_66_ladder_4 = _3184;
                frontier_phi_65_66_ladder_5 = _3188;
            }
            _3304 = frontier_phi_65_66_ladder_4;
            _3306 = frontier_phi_65_66_ladder_3;
            _3308 = frontier_phi_65_66_ladder_5;
            _3310 = frontier_phi_65_66_ladder_1;
            _3312 = frontier_phi_65_66_ladder_2;
            _3314 = frontier_phi_65_66_ladder;
        }
        float _3319 = isnan(1.0) ? _1040 : (isnan(_1040) ? 1.0 : min(_1040, 1.0));
        _3098 = (_3319 * _3310) + _2611;
        _3100 = (_3319 * _3312) + _2613;
        _3102 = (_3319 * _3314) + _2615;
        _3104 = ((_3304 * _1025) * _3319) + _2949;
        _3106 = ((_3306 * _1027) * _3319) + _2951;
        _3108 = ((_3308 * _1028) * _3319) + _2953;
    }
    else
    {
        _3098 = _2611;
        _3100 = _2613;
        _3102 = _2615;
        _3104 = _2949;
        _3106 = _2951;
        _3108 = _2953;
    }
    uint _3114 = _969 + uint(cbMatDynParam._m0[0u].w);
    float _5106 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _5117 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _5128 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    float _3139 = (((isnan(1.0) ? _5106 : (isnan(_5106) ? 1.0 : min(_5106, 1.0))) * (_3098 + ((isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))) * _1040))) + ((_3104 + ((isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0))) * _1880)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_3114].x * ((((_620 + (_490 * _442)) - (_620 * _490)) + cbMtdParam._m0[13u].x) + ((((((_757.x - _754) * _735) + _754) * cbMtdParam._m0[11u].x) + ((cbMtdParam._m0[22u].y * _688) * cbMtdParam._m0[12u].x)) * _697)));
    float _3141 = ((cbInstanceData._m0[_3114].y * ((((_621 + (_490 * _443)) - (_621 * _490)) + cbMtdParam._m0[13u].y) + ((((((_757.y - _755) * _735) + _755) * cbMtdParam._m0[11u].y) + ((cbMtdParam._m0[22u].y * (((_677.y - _672.y) * _656) + _672.y)) * cbMtdParam._m0[12u].y)) * _697))) + ((_3106 + ((isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0))) * _1880)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5117 : (isnan(_5117) ? 1.0 : min(_5117, 1.0))) * (_3100 + ((isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))) * _1040)));
    float _3143 = ((cbInstanceData._m0[_3114].z * ((((_622 + (_490 * _444)) - (_622 * _490)) + cbMtdParam._m0[13u].z) + ((((((_757.z - _756) * _735) + _756) * cbMtdParam._m0[11u].z) + ((cbMtdParam._m0[22u].y * (((_677.z - _672.z) * _656) + _672.z)) * cbMtdParam._m0[12u].z)) * _697))) + ((_3108 + ((isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0))) * _1880)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5128 : (isnan(_5128) ? 1.0 : min(_5128, 1.0))) * (_3102 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1040)));
    float _3144 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
    float _3145 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
    float _3146 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
    uint _3147 = _968 + 6u;
    float _3155 = _912 / cbSceneParam._m0[86u].x;
    float _3156 = _913 / cbSceneParam._m0[86u].y;
    vec4 _3170 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3155, _3156, (log2((isnan(cbSceneParam._m0[77u].w) ? _834 : (isnan(_834) ? cbSceneParam._m0[77u].w : min(_834, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3172 = _3170.x;
    float _3173 = _3170.y;
    float _3174 = _3170.z;
    float _3175 = _3170.w;
    float _3246;
    float _3248;
    float _3250;
    float _3252;
    if (_834 > cbSceneParam._m0[78u].w)
    {
        float _3209 = isnan(_834) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _834 : min(cbSceneParam._m0[80u].w, _834));
        float _3210 = _3209 / _834;
        float _3221 = _3210 * _884;
        float _3222 = _885 * _3210;
        float _3223 = (-0.0) - _3222;
        float _3224 = _3210 * _886;
        float _3226 = (cbSceneParam._m0[77u].w * _3223) / _3209;
        float _3227 = _3226 + cbSceneParam._m0[79u].w;
        float _3228 = cbSceneParam._m0[79u].w - _3222;
        float _3234 = sqrt(((_3221 * _3221) + (_3222 * _3222)) + (_3224 * _3224));
        float _3237 = (1.0 - (cbSceneParam._m0[77u].w / _3209)) * _3234;
        float _3242 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3244 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3421;
        if (abs((_3223 - _3226) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3421 = ((((_3227 > 0.0) ? exp2(_3242 * _3227) : (2.0 - exp2(_3244 * _3227))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3237;
        }
        else
        {
            float _3365 = 1.0 / cbSceneParam._m0[80u].x;
            float _3366 = isnan(_3228) ? _3227 : (isnan(_3227) ? _3228 : max(_3227, _3228));
            float _3367 = isnan(_3228) ? _3227 : (isnan(_3227) ? _3228 : min(_3227, _3228));
            float _3376 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : min(_3366, 0.0));
            float _3377 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : min(_3367, 0.0));
            _3421 = ((abs(_3234 / _3223) * cbSceneParam._m0[80u].y) * ((((_3376 - _3377) * 2.0) - ((exp2(_3242 * (isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0)))) - exp2(_3242 * (isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0))))) * _3365)) - ((exp2(_3244 * _3376) - exp2(_3244 * _3377)) * _3365))) + (_3237 * cbSceneParam._m0[80u].z);
        }
        vec4 _3423 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3155, _3156, 1.0), 0.0);
        float _3432 = exp2((_3421 * (-1.44269502162933349609375)) * (1.0 - _3423.w));
        float _3433 = log2(_3432);
        float _3449 = log2(_3175);
        _3246 = (exp2(_3449 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3433 * cbSceneParam._m0[78u].x)) * _3423.x) / cbSceneParam._m0[78u].x)) + _3172;
        _3248 = (exp2(_3449 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3433 * cbSceneParam._m0[78u].y)) * _3423.y) / cbSceneParam._m0[78u].y)) + _3173;
        _3250 = (exp2(_3449 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3433 * cbSceneParam._m0[78u].z)) * _3423.z) / cbSceneParam._m0[78u].z)) + _3174;
        _3252 = _3432 * _3175;
    }
    else
    {
        _3246 = _3172;
        _3248 = _3173;
        _3250 = _3174;
        _3252 = _3175;
    }
    bool _3459;
    vec4 _3262;
    vec4 _3284;
    float _3286;
    float _3290;
    float _3291;
    float _3292;
    float _3293;
    bool _3303;
    for (;;)
    {
        _3262 = cbMatDynParam._m0[0u];
        float _3264 = roundEven(_3262.y);
        bool _3265 = _3264 == 3.0;
        float _3266 = log2(_3252);
        float _3273 = exp2(_3266 * cbSceneParam._m0[78u].x) * _3144;
        float _3274 = exp2(_3266 * cbSceneParam._m0[78u].y) * _3145;
        float _3275 = exp2(_3266 * cbSceneParam._m0[78u].z) * _3146;
        float _3282 = _900 + (-0.5);
        _3284 = cbMtdParam._m0[1u];
        _3286 = _3284.y * _3282;
        float _3289 = (_3264 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3290 = _3289 * (_3265 ? _3273 : (_3273 + (cbSceneParam._m0[72u].w * _3246)));
        _3291 = _3289 * (_3265 ? _3274 : (_3274 + (cbSceneParam._m0[72u].w * _3248)));
        _3292 = _3289 * (_3265 ? _3275 : (_3275 + (cbSceneParam._m0[72u].w * _3250)));
        _3293 = _3282 * 0.999000012874603271484375;
        _3303 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3303)
        {
            if ((cbInstanceData._m0[_968 + 7u].x + _3293) < 0.5)
            {
                _3459 = true;
                break;
            }
        }
        uint _3400 = _969 + uint(_3262.w);
        if ((cbInstanceData._m0[_3400].w < 1.0) && ((cbInstanceData._m0[_3400].w + _3293) < 0.5))
        {
            _3459 = true;
            break;
        }
        if ((_3286 + 1.0) < _3284.x)
        {
            _3459 = true;
            break;
        }
        _3459 = false;
        break;
    }
    float _3663;
    if (_3459)
    {
        discard_state = true;
        _3663 = 0.0;
    }
    else
    {
        _3663 = cbInstanceData._m0[_3147].w;
    }
    SV_Target.x = _3290;
    SV_Target.y = _3291;
    SV_Target.z = _3292;
    SV_Target.w = _3663;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3147].w;
    discard_exit();
}


