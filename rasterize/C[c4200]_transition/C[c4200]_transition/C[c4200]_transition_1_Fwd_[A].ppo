#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[25];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_c4200_transition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_c4200_transition_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_c4200_transition_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D C_c4200_transition_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_c4200_transition_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D C_c4200_transition_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_c4200_transition_snp_0_Texture2D_12;
layout(set = 0, binding = 8) uniform texture2D C_c4200_transition_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_c4200_transition_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1421;
float _3819;
float _3820;
float _3821;
float _3822;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238;
    float _239;
    float _240;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
    }
    else
    {
        _238 = _224;
        _239 = _225;
        _240 = _226;
    }
    vec4 _254 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _257 = _254.x;
    float _266 = cbMtdParam._m0[18u].y * 0.3333333432674407958984375;
    float _271 = fract(abs(_266));
    float _283 = cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x;
    float _286 = (_283 * cbMtdParam._m0[24u].x) + TEXCOORD.x;
    float _287 = (_283 * cbMtdParam._m0[24u].y) + TEXCOORD.y;
    vec4 _310 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((_283 * cbMtdParam._m0[23u].x) + TEXCOORD.x)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[23u].y * _283) + TEXCOORD.y)) + cbTextureTilingScale._m0[10u].w));
    float _314 = cbPerFrame._m0[22u].x * 2.0;
    float _316 = _314 * cbMtdParam._m0[19u].w;
    float _319 = (_310.x * 0.5) + (-0.25);
    float _322 = (_310.y * 0.5) + (-0.25);
    float _323 = _322 * cbMtdParam._m0[18u].z;
    float _325 = (-0.0) - (cbMtdParam._m0[18u].z * _319);
    float _326 = fract(_316);
    float _328 = fract(_316 + 0.5);
    float _329 = _326 * _325;
    float _330 = _323 * _326;
    float _333 = _328 * _325;
    float _334 = _323 * _328;
    float _340 = abs((_326 * 2.0) + (-1.0));
    vec4 _357 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_9, SS_DiffuseMap), vec2(((_329 + _286) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, ((_330 + _287) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _359 = _357.x;
    float _370 = (0.25 - ((((_266 >= ((-0.0) - _266)) ? _271 : ((-0.0) - _271)) * 3.0) - _257)) + ((((texture(sampler2D(C_c4200_transition_snp_0_Texture2D_9, SS_DiffuseMap), vec2(((_333 + _286) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, ((_334 + _287) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w)).x - _359) * _340) + _359) * 1.35000002384185791015625);
    float _373 = abs(_370 * cbMtdParam._m0[19u].z);
    float _377 = (((_373 * cbMtdParam._m0[19u].y) - _257) * _373) + _257;
    float _3831 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _379 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _390 = (cbMtdParam._m0[23u].z * _283) + TEXCOORD.x;
    float _391 = (cbMtdParam._m0[23u].w * _283) + TEXCOORD.y;
    vec4 _411 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_329 + _390) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_330 + _391) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _413 = _411.x;
    float _414 = _411.y;
    float _415 = _411.z;
    vec4 _416 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_333 + _390) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_334 + _391) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _430 = (((_416.x - _413) * _340) + _413) * cbMtdParam._m0[14u].x;
    float _431 = (((_416.y - _414) * _340) + _414) * cbMtdParam._m0[14u].y;
    float _432 = (((_416.z - _415) * _340) + _415) * cbMtdParam._m0[14u].z;
    float _436 = _430 - (_430 * _379);
    float _437 = _431 - (_431 * _379);
    float _438 = _432 - (_432 * _379);
    vec4 _456 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _461 = ceil(_370);
    float _3842 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _462 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _476 = (((cbMtdParam._m0[9u].x - cbMtdParam._m0[15u].x) * _462) + cbMtdParam._m0[15u].x) * _456.x;
    float _478 = (((cbMtdParam._m0[9u].y - cbMtdParam._m0[15u].y) * _462) + cbMtdParam._m0[15u].y) * _456.y;
    float _480 = (((cbMtdParam._m0[9u].z - cbMtdParam._m0[15u].z) * _462) + cbMtdParam._m0[15u].z) * _456.z;
    float _484 = exp2(log2(_379) * cbMtdParam._m0[19u].x);
    float _491 = (_484 * (_436 - _476)) + _476;
    float _492 = (_484 * (_437 - _478)) + _478;
    float _493 = (_484 * (_438 - _480)) + _480;
    vec4 _508 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _512 = _508.z;
    float _515 = (_508.x * 2.0) + (-1.0);
    float _516 = (_508.y * 2.0) + (-1.0);
    float _517 = dot(vec2(_515, _516), vec2(_515, _516));
    float _3853 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _522 = sqrt(1.0 - (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))));
    float _533 = (cbMtdParam._m0[24u].z * _283) + TEXCOORD.x;
    float _534 = (cbMtdParam._m0[24u].w * _283) + TEXCOORD.y;
    float _540 = _314 * cbMtdParam._m0[20u].z;
    float _541 = _322 * cbMtdParam._m0[20u].y;
    float _543 = (-0.0) - (cbMtdParam._m0[20u].y * _319);
    float _544 = fract(_540);
    float _546 = fract(_540 + 0.5);
    float _557 = abs((_544 * 2.0) + (-1.0));
    vec4 _573 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_11, SS_DiffuseMap), vec2((((_544 * _543) + _533) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_541 * _544) + _534) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _575 = _573.x;
    float _576 = _573.y;
    float _577 = _573.z;
    vec4 _578 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_11, SS_DiffuseMap), vec2((((_546 * _543) + _533) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_541 * _546) + _534) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _592 = (((_578.x - _575) * _557) + _575) * cbMtdParam._m0[16u].x;
    float _593 = (((_578.y - _576) * _557) + _576) * cbMtdParam._m0[16u].y;
    float _594 = (((_578.z - _577) * _557) + _577) * cbMtdParam._m0[16u].z;
    float _598 = _592 - (_592 * _462);
    float _599 = _593 - (_593 * _462);
    float _600 = _594 - (_594 * _462);
    float _617 = _314 * cbMtdParam._m0[21u].w;
    float _618 = _322 * cbMtdParam._m0[22u].x;
    float _620 = (-0.0) - (cbMtdParam._m0[22u].x * _319);
    float _621 = fract(_617);
    float _623 = fract(_617 + 0.5);
    float _634 = abs((_621 * 2.0) + (-1.0));
    vec4 _650 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_621 * _620) + TEXCOORD.x) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((_618 * _621) + TEXCOORD.y) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _655 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_623 * _620) + TEXCOORD.x) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((_618 * _623) + TEXCOORD.y) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _666 = ((_655.x - _650.x) * _634) + _650.x;
    float _673 = exp2(log2(_666 * cbMtdParam._m0[21u].z) * cbMtdParam._m0[21u].y);
    float _674 = isnan(cbMtdParam._m0[21u].x) ? _673 : (isnan(_673) ? cbMtdParam._m0[21u].x : max(_673, cbMtdParam._m0[21u].x));
    float _675 = isnan(cbMtdParam._m0[20u].x) ? _674 : (isnan(_674) ? cbMtdParam._m0[20u].x : min(_674, cbMtdParam._m0[20u].x));
    float _696 = _314 * cbMtdParam._m0[17u].z;
    float _697 = _322 * cbMtdParam._m0[17u].w;
    float _699 = (-0.0) - (cbMtdParam._m0[17u].w * _319);
    float _700 = fract(_696);
    float _702 = fract(_696 + 0.5);
    float _713 = abs((_700 * 2.0) + (-1.0));
    vec4 _730 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_700 * _699) + TEXCOORD.x) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_697 * _700) + TEXCOORD.y) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _732 = _730.x;
    float _733 = _730.y;
    float _734 = _730.z;
    vec4 _735 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_702 * _699) + TEXCOORD.x) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_697 * _702) + TEXCOORD.y) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _778 = fma(_522, _238, fma(_516, _230 * TANGENT.x, (_216 * _208) * _515));
    float _781 = fma(_522, _239, fma(_516, _230 * TANGENT.y, (_216 * _209) * _515));
    float _784 = fma(_522, _240, fma(_516, _230 * TANGENT.z, (_216 * _210) * _515));
    float _788 = inversesqrt(dot(vec3(_778, _781, _784), vec3(_778, _781, _784)));
    float _789 = _788 * _778;
    float _790 = _788 * _781;
    float _791 = _788 * _784;
    float _3874 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _792 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _3885 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _3896 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _3907 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _3918 = isnan(0.0) ? cbMtdParam._m0[17u].x : (isnan(cbMtdParam._m0[17u].x) ? 0.0 : max(cbMtdParam._m0[17u].x, 0.0));
    float _796 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _812 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _852 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _862 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _852);
    float _863 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _852);
    float _864 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _852);
    float _868 = inversesqrt(dot(vec3(_862, _863, _864), vec3(_862, _863, _864)));
    float _869 = _862 * _868;
    float _870 = _863 * _868;
    float _871 = _864 * _868;
    vec4 _876 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _878 = _876.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1101 = sqrt(((_862 * _862) + (_863 * _863)) + (_864 * _864));
        float _1107 = (cbMatDynParam._m0[5u].x * _1101) + cbMatDynParam._m0[5u].y;
        float _3929 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1112 = (cbMatDynParam._m0[5u].z * _1101) + cbMatDynParam._m0[5u].w;
        float _3940 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) - _1108)) + _1108) < ((_878 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _890 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _891 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _893 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _895 = _893.w;
    float _915 = fma(_791, cbSceneParam._m0[5u].z, fma(_790, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _789));
    float _918 = fma(_791, cbSceneParam._m0[6u].z, fma(_790, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _789));
    float _921 = fma(_791, cbSceneParam._m0[7u].z, fma(_790, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _789));
    vec4 _923 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _934 = (((_923.y - _792) + (_923.w * _792)) * cbMtdParam._m0[3u].x) + _792;
    uint _947 = uint(roundEven(NORMAL.w)) * 13u;
    uint _948 = _947 + 9u;
    uint _949 = _948 + uint(cbMatDynParam._m0[0u].w);
    float _955 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * cbInstanceData._m0[_949].x;
    float _956 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * cbInstanceData._m0[_949].y;
    float _957 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) * cbInstanceData._m0[_949].z;
    float _3951 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _958 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _3962 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _959 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _3973 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _960 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    vec4 _961 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _966 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _977 = (((_966.x - _796) + (_966.w * _796)) * cbMtdParam._m0[3u].x) + _796;
    float _990 = (cbMtdParam._m0[3u].x * (((_958 * _895) - _958) + _961.x)) + _958;
    float _991 = (cbMtdParam._m0[3u].x * (((_959 * _895) - _959) + _961.y)) + _959;
    float _992 = (cbMtdParam._m0[3u].x * (((_960 * _895) - _960) + _961.z)) + _960;
    float _993 = 1.0 - _977;
    float _994 = _993 * _990;
    float _995 = _993 * _991;
    float _996 = _993 * _992;
    float _1001 = (_990 + (-0.039999999105930328369140625)) * _977;
    float _1002 = (_991 + (-0.039999999105930328369140625)) * _977;
    float _1003 = (_992 + (-0.039999999105930328369140625)) * _977;
    float _1004 = _1001 + 0.039999999105930328369140625;
    float _1006 = _1002 + 0.039999999105930328369140625;
    float _1007 = _1003 + 0.039999999105930328369140625;
    vec4 _1016 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _890, cbSceneParam._m0[86u].y * _891));
    float _1019 = _1016.x * TEXCOORD_4;
    float _1020 = dot(vec3(_789, _790, _791), vec3(_869, _870, _871));
    float _1023 = _1020 * 2.0;
    float _1027 = (_1023 * _789) - _869;
    float _1028 = (_1023 * _790) - _870;
    float _1029 = (_1023 * _791) - _871;
    float _1033 = abs(dot(vec3(_869, _870, _871), vec3(_789, _790, _791)));
    float _3984 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _1035 = sqrt(_934);
    float _1047 = exp2((_1035 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1035 * 3.0));
    float _1053 = (1.0 - _1047) * ((_1035 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1054 = _1047 * _1035;
    float _1082 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1086 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1090 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1420;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1146 = fma(_1090, cbModelParam._m0[26u].z, fma(_1086, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1082));
        float _1150 = fma(_1090, cbModelParam._m0[27u].z, fma(_1086, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1082));
        float _1154 = fma(_1090, cbModelParam._m0[28u].z, fma(_1086, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1082));
        float _1178 = _1082 + _789;
        float _1179 = _1086 + _790;
        float _1180 = _1090 + _791;
        float _1190 = fma(_1180, cbModelParam._m0[26u].z, fma(_1179, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1178)) - _1146;
        float _1191 = fma(_1180, cbModelParam._m0[27u].z, fma(_1179, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1178)) - _1150;
        float _1192 = fma(_1180, cbModelParam._m0[28u].z, fma(_1179, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1178)) - _1154;
        float _1196 = inversesqrt(dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192)));
        float _1209 = ((_1196 * _1190) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1146 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1210 = ((_1196 * _1191) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1150 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1211 = ((_1196 * _1192) / cbModelParam._m0[34u].z) + ((((((_1154 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        float _1248 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1214.x + (-0.5));
        float _1250 = _1248 * (_1214.y + (-0.5));
        float _1251 = _1248 * (_1214.z + (-0.5));
        float _1258 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1221.x + (-0.5));
        float _1260 = _1258 * (_1221.y + (-0.5));
        float _1261 = _1258 * (_1221.z + (-0.5));
        float _1268 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1228.x + (-0.5));
        float _1270 = _1268 * (_1228.y + (-0.5));
        float _1271 = _1268 * (_1228.z + (-0.5));
        float _1278 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1235.x + (-0.5));
        float _1280 = _1278 * (_1235.y + (-0.5));
        float _1281 = _1278 * (_1235.z + (-0.5));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1285 = _1249 * 0.5;
        float _1286 = _1259 * 0.5;
        float _1287 = _1269 * 0.5;
        float _1288 = dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287));
        float _1293 = (_1288 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1288);
        float _1302 = (dot(vec3(_789, _790, _791), vec3(_1293 * _1285, _1293 * _1286, _1293 * _1287)) + 1.0) * 0.5;
        float _4010 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1312 = sqrt(((_1286 * _1286) + (_1285 * _1285)) + (_1287 * _1287)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _4021 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _4032 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_1314 + 1.0))) + _1319) * _1282;
        float _1329 = _1250 * 0.5;
        float _1330 = _1260 * 0.5;
        float _1331 = _1270 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1345 = (dot(vec3(_789, _790, _791), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _4043 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1354 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _4054 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _4065 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_1356 + 1.0))) + _1361) * _1283;
        float _1371 = _1251 * 0.5;
        float _1372 = _1261 * 0.5;
        float _1373 = _1271 * 0.5;
        float _1374 = dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373));
        float _1379 = (_1374 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1374);
        float _1387 = (dot(vec3(_789, _790, _791), vec3(_1379 * _1371, _1379 * _1372, _1379 * _1373)) + 1.0) * 0.5;
        float _4076 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1396 = sqrt(((_1372 * _1372) + (_1371 * _1371)) + (_1373 * _1373)) / (_1284 + 9.9999997473787516355514526367188e-06);
        float _4087 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1398 = _1397 * 2.0;
        float _1402 = (1.0 - _1397) / (_1397 + 1.0);
        float _4098 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1412 = ((((1.0 - _1403) * (_1398 + 2.0)) * exp2(log2(isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_1398 + 1.0))) + _1403) * _1284;
        _1420 = _1251;
        _1422 = _1250;
        _1423 = _1249;
        _1424 = _1261;
        _1425 = _1260;
        _1426 = _1259;
        _1427 = _1271;
        _1428 = _1270;
        _1429 = _1269;
        _1430 = _1284;
        _1431 = _1283;
        _1432 = _1282;
        _1433 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
        _1434 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
        _1435 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)));
    }
    else
    {
        _1420 = _1421;
        _1422 = _1421;
        _1423 = _1421;
        _1424 = _1421;
        _1425 = _1421;
        _1426 = _1421;
        _1427 = _1421;
        _1428 = _1421;
        _1429 = _1421;
        _1430 = _1421;
        _1431 = _1421;
        _1432 = _1421;
        _1433 = 0.0;
        _1434 = 0.0;
        _1435 = 0.0;
    }
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1464 = fma(_1090, cbModelParam._m0[30u].z, fma(_1086, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1082));
        float _1468 = fma(_1090, cbModelParam._m0[31u].z, fma(_1086, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1082));
        float _1472 = fma(_1090, cbModelParam._m0[32u].z, fma(_1086, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1082));
        float _1495 = _1082 + _789;
        float _1496 = _1086 + _790;
        float _1497 = _1090 + _791;
        float _1507 = fma(_1497, cbModelParam._m0[30u].z, fma(_1496, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1495)) - _1464;
        float _1508 = fma(_1497, cbModelParam._m0[31u].z, fma(_1496, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1495)) - _1468;
        float _1509 = fma(_1497, cbModelParam._m0[32u].z, fma(_1496, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1495)) - _1472;
        float _1513 = inversesqrt(dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509)));
        float _1526 = ((_1513 * _1507) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1464 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1527 = ((_1513 * _1508) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1468 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1528 = ((_1513 * _1509) / cbModelParam._m0[35u].z) + ((((((_1472 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1530 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1526, _1527, _1528), 0.0);
        vec4 _1537 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1526, _1527, _1528), 0.0);
        vec4 _1544 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1526, _1527, _1528), 0.0);
        vec4 _1551 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1526, _1527, _1528), 0.0);
        float _1563 = exp2((_1530.w + (-0.5)) * 20.0) * 2.0;
        float _1564 = _1563 * (_1530.x + (-0.5));
        float _1565 = _1563 * (_1530.y + (-0.5));
        float _1566 = _1563 * (_1530.z + (-0.5));
        float _1573 = exp2((_1537.w + (-0.5)) * 20.0) * 2.0;
        float _1574 = _1573 * (_1537.x + (-0.5));
        float _1575 = _1573 * (_1537.y + (-0.5));
        float _1576 = _1573 * (_1537.z + (-0.5));
        float _1583 = exp2((_1544.w + (-0.5)) * 20.0) * 2.0;
        float _1584 = _1583 * (_1544.x + (-0.5));
        float _1585 = _1583 * (_1544.y + (-0.5));
        float _1586 = _1583 * (_1544.z + (-0.5));
        float _1593 = exp2((_1551.w + (-0.5)) * 20.0) * 2.0;
        float _1594 = _1593 * (_1551.x + (-0.5));
        float _1595 = _1593 * (_1551.y + (-0.5));
        float _1596 = _1593 * (_1551.z + (-0.5));
        float _1597 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1598 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1599 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1600 = _1564 * 0.5;
        float _1601 = _1574 * 0.5;
        float _1602 = _1584 * 0.5;
        float _1603 = dot(vec3(_1600, _1601, _1602), vec3(_1600, _1601, _1602));
        float _1608 = (_1603 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1603);
        float _1616 = (dot(vec3(_789, _790, _791), vec3(_1608 * _1600, _1608 * _1601, _1608 * _1602)) + 1.0) * 0.5;
        float _4139 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1625 = sqrt(((_1601 * _1601) + (_1600 * _1600)) + (_1602 * _1602)) / (_1597 + 9.9999997473787516355514526367188e-06);
        float _4150 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1627 = _1626 * 2.0;
        float _1631 = (1.0 - _1626) / (_1626 + 1.0);
        float _4161 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1641 = ((((1.0 - _1632) * (_1627 + 2.0)) * exp2(log2(isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_1627 + 1.0))) + _1632) * _1597;
        float _1642 = _1565 * 0.5;
        float _1643 = _1575 * 0.5;
        float _1644 = _1585 * 0.5;
        float _1645 = dot(vec3(_1642, _1643, _1644), vec3(_1642, _1643, _1644));
        float _1650 = (_1645 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1645);
        float _1658 = (dot(vec3(_789, _790, _791), vec3(_1650 * _1642, _1650 * _1643, _1650 * _1644)) + 1.0) * 0.5;
        float _4172 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1667 = sqrt(((_1643 * _1643) + (_1642 * _1642)) + (_1644 * _1644)) / (_1598 + 9.9999997473787516355514526367188e-06);
        float _4183 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1669 = _1668 * 2.0;
        float _1673 = (1.0 - _1668) / (_1668 + 1.0);
        float _4194 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1683 = ((((1.0 - _1674) * (_1669 + 2.0)) * exp2(log2(isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_1669 + 1.0))) + _1674) * _1598;
        float _1684 = _1566 * 0.5;
        float _1685 = _1576 * 0.5;
        float _1686 = _1586 * 0.5;
        float _1687 = dot(vec3(_1684, _1685, _1686), vec3(_1684, _1685, _1686));
        float _1692 = (_1687 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1687);
        float _1700 = (dot(vec3(_789, _790, _791), vec3(_1692 * _1684, _1692 * _1685, _1692 * _1686)) + 1.0) * 0.5;
        float _4205 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1709 = sqrt(((_1685 * _1685) + (_1684 * _1684)) + (_1686 * _1686)) / (_1599 + 9.9999997473787516355514526367188e-06);
        float _4216 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1711 = _1710 * 2.0;
        float _1715 = (1.0 - _1710) / (_1710 + 1.0);
        float _4227 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1716 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1725 = ((((1.0 - _1716) * (_1711 + 2.0)) * exp2(log2(isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_1711 + 1.0))) + _1716) * _1599;
        _1733 = _1566;
        _1734 = _1565;
        _1735 = _1564;
        _1736 = _1576;
        _1737 = _1575;
        _1738 = _1574;
        _1739 = _1586;
        _1740 = _1585;
        _1741 = _1584;
        _1742 = _1599;
        _1743 = _1598;
        _1744 = _1597;
        _1745 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)));
        _1746 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)));
        _1747 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)));
    }
    else
    {
        _1733 = _1421;
        _1734 = _1421;
        _1735 = _1421;
        _1736 = _1421;
        _1737 = _1421;
        _1738 = _1421;
        _1739 = _1421;
        _1740 = _1421;
        _1741 = _1421;
        _1742 = _1421;
        _1743 = _1421;
        _1744 = _1421;
        _1745 = 0.0;
        _1746 = 0.0;
        _1747 = 0.0;
    }
    float _1757 = (cbModelParam._m0[1u].x * (_1745 - _1433)) + _1433;
    float _1758 = (cbModelParam._m0[1u].x * (_1746 - _1434)) + _1434;
    float _1759 = (cbModelParam._m0[1u].x * (_1747 - _1435)) + _1435;
    float _1780 = fma(_1759, cbSceneParam._m0[89u].z, fma(_1758, cbSceneParam._m0[89u].y, _1757 * cbSceneParam._m0[89u].x));
    float _1783 = fma(_1759, cbSceneParam._m0[90u].z, fma(_1758, cbSceneParam._m0[90u].y, _1757 * cbSceneParam._m0[90u].x));
    float _1786 = fma(_1759, cbSceneParam._m0[91u].z, fma(_1758, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1757));
    float _1801 = _1027 * 0.5;
    float _1802 = _1028 * 0.5;
    float _1803 = _1029 * 0.5;
    float _1804 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1735, _1738, _1741, _1744));
    float _1807 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1734, _1737, _1740, _1743));
    float _1810 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1733, _1736, _1739, _1742));
    float _1844;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1817 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1420, _1424, _1427, _1430));
        float _1821 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1422, _1425, _1428, _1431));
        float _1825 = dot(vec4(_1801, _1802, _1803, 1.0), vec4(_1423, _1426, _1429, _1432));
        float _1832 = dot(vec4(cbModelParam._m0[39u]), vec4(_1801, _1802, _1803, 1.0));
        _1844 = dot(vec3(isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0)), isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0)), isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1832) ? 0.0 : (isnan(0.0) ? _1832 : max(0.0, _1832))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1844 = 1.0;
    }
    float _1855;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1846 = dot(vec4(cbModelParam._m0[40u]), vec4(_1801, _1802, _1803, 1.0));
        _1855 = dot(vec3(isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0)), isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0)), isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1846) ? 0.0 : (isnan(0.0) ? _1846 : max(0.0, _1846))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1855 = 1.0;
    }
    float _1859 = (_1855 * cbModelParam._m0[1u].x) + (_1844 * (1.0 - cbModelParam._m0[1u].x));
    float _1869 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _934);
    float _1870 = isnan(_1869) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1869 : min(cbModelParam._m0[25u].z, _1869));
    float _1950;
    float _1952;
    float _1954;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1917 = fma(_1090, cbModelParam._m0[13u].z, fma(_1086, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1082)) + cbModelParam._m0[13u].w;
        float _1921 = fma(_1090, cbModelParam._m0[14u].z, fma(_1086, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1082)) + cbModelParam._m0[14u].w;
        float _1925 = fma(_1090, cbModelParam._m0[15u].z, fma(_1086, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1082)) + cbModelParam._m0[15u].w;
        float _1928 = fma(_1029, cbModelParam._m0[13u].z, fma(_1028, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1027));
        float _1931 = fma(_1029, cbModelParam._m0[14u].z, fma(_1028, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1027));
        float _1934 = fma(_1029, cbModelParam._m0[15u].z, fma(_1028, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1027));
        float _1962;
        if (_1928 > 0.0)
        {
            _1962 = abs((1.0 - _1917) / _1928);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1928 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1917 + 1.0) / _1928);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1962 = frontier_phi_19_17_ladder;
        }
        float _2164;
        if (_1931 > 0.0)
        {
            _2164 = abs((1.0 - _1921) / _1931);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1921 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2164 = frontier_phi_28_24_ladder;
        }
        float _2418;
        if (_1934 > 0.0)
        {
            _2418 = abs((1.0 - _1925) / _1934);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1925 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2418 = frontier_phi_40_35_ladder;
        }
        float _2420 = isnan(_2164) ? _1962 : (isnan(_1962) ? _2164 : min(_1962, _2164));
        float _2421 = isnan(_2418) ? _2420 : (isnan(_2420) ? _2418 : min(_2420, _2418));
        float _2425 = (_2421 * _1928) + _1917;
        float _2426 = (_2421 * _1931) + _1921;
        float _2427 = (_2421 * _1934) + _1925;
        float _2428 = _2421 * 9.9999997473787516355514526367188e-05;
        float _2430 = (-1.0) - _2428;
        float _2432 = _2428 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2427 > _2432) || ((_2427 < _2430) || ((_2426 > _2432) || ((_2426 < _2430) || ((_2425 < _2430) || (_2425 > _2432))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2555 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2427, cbModelParam._m0[9u].z, fma(_2426, cbModelParam._m0[9u].y, _2425 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2427, cbModelParam._m0[10u].z, fma(_2426, cbModelParam._m0[10u].y, _2425 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2427, cbModelParam._m0[11u].z, fma(_2426, cbModelParam._m0[11u].y, _2425 * cbModelParam._m0[11u].x))), _1870);
            frontier_phi_18_40_ladder = _2555.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2555.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2555.x * cbModelParam._m0[1u].y;
        }
        _1950 = frontier_phi_18_40_ladder_2;
        _1952 = frontier_phi_18_40_ladder_1;
        _1954 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1938 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1027, _1028, _1029), _1870);
        _1950 = _1938.x * cbModelParam._m0[1u].y;
        _1952 = _1938.y * cbModelParam._m0[1u].y;
        _1954 = _1938.z * cbModelParam._m0[1u].y;
    }
    float _1958 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _934);
    float _1959 = isnan(_1958) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1958 : min(cbModelParam._m0[25u].w, _1958));
    float _2048;
    float _2050;
    float _2052;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2012 = fma(_1090, cbModelParam._m0[21u].z, fma(_1086, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1082)) + cbModelParam._m0[21u].w;
        float _2016 = fma(_1090, cbModelParam._m0[22u].z, fma(_1086, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1082)) + cbModelParam._m0[22u].w;
        float _2020 = fma(_1090, cbModelParam._m0[23u].z, fma(_1086, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1082)) + cbModelParam._m0[23u].w;
        float _2023 = fma(_1029, cbModelParam._m0[21u].z, fma(_1028, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1027));
        float _2026 = fma(_1029, cbModelParam._m0[22u].z, fma(_1028, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1027));
        float _2029 = fma(_1029, cbModelParam._m0[23u].z, fma(_1028, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1027));
        float _2169;
        if (_2023 > 0.0)
        {
            _2169 = abs((1.0 - _2012) / _2023);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2023 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2012 + 1.0) / _2023);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2169 = frontier_phi_30_26_ladder;
        }
        float _2445;
        if (_2026 > 0.0)
        {
            _2445 = abs((1.0 - _2016) / _2026);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2026 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2016 + 1.0) / _2026);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2445 = frontier_phi_42_37_ladder;
        }
        float _2658;
        if (_2029 > 0.0)
        {
            _2658 = abs((1.0 - _2020) / _2029);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2029 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2020 + 1.0) / _2029);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2658 = frontier_phi_51_48_ladder;
        }
        float _2660 = isnan(_2445) ? _2169 : (isnan(_2169) ? _2445 : min(_2169, _2445));
        float _2661 = isnan(_2658) ? _2660 : (isnan(_2660) ? _2658 : min(_2660, _2658));
        float _2665 = (_2661 * _2023) + _2012;
        float _2666 = (_2661 * _2026) + _2016;
        float _2667 = (_2661 * _2029) + _2020;
        float _2668 = _2661 * 9.9999997473787516355514526367188e-05;
        float _2669 = (-1.0) - _2668;
        float _2671 = _2668 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2667 > _2671) || ((_2667 < _2669) || ((_2666 > _2671) || ((_2666 < _2669) || ((_2665 < _2669) || (_2665 > _2671))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2884 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2667, cbModelParam._m0[17u].z, fma(_2666, cbModelParam._m0[17u].y, _2665 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2667, cbModelParam._m0[18u].z, fma(_2666, cbModelParam._m0[18u].y, _2665 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2667, cbModelParam._m0[19u].z, fma(_2666, cbModelParam._m0[19u].y, _2665 * cbModelParam._m0[19u].x))), _1959);
            frontier_phi_27_51_ladder = _2884.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2884.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2884.x * cbModelParam._m0[1u].z;
        }
        _2048 = frontier_phi_27_51_ladder_2;
        _2050 = frontier_phi_27_51_ladder_1;
        _2052 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2032 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1027, _1028, _1029), _1959);
        _2048 = _2032.x * cbModelParam._m0[1u].z;
        _2050 = _2032.y * cbModelParam._m0[1u].z;
        _2052 = _2032.z * cbModelParam._m0[1u].z;
    }
    float _2065 = (((_1053 * _1004) + _1054) * _1019) * ((cbModelParam._m0[1u].w * (_2048 - _1950)) + _1950);
    float _2067 = (((_1053 * _1006) + _1054) * _1019) * ((cbModelParam._m0[1u].w * (_2050 - _1952)) + _1952);
    float _2069 = (((_1053 * _1007) + _1054) * _1019) * ((cbModelParam._m0[1u].w * (_2052 - _1954)) + _1954);
    float _2072 = fma(_2069, cbSceneParam._m0[89u].z, fma(_2067, cbSceneParam._m0[89u].y, _2065 * cbSceneParam._m0[89u].x));
    float _2075 = fma(_2069, cbSceneParam._m0[90u].z, fma(_2067, cbSceneParam._m0[90u].y, _2065 * cbSceneParam._m0[90u].x));
    float _2078 = fma(_2069, cbSceneParam._m0[91u].z, fma(_2067, cbSceneParam._m0[91u].y, _2065 * cbSceneParam._m0[91u].x));
    uvec4 _2088 = floatBitsToUint(cbInstanceData._m0[_947 + 5u]);
    uint _2090 = _2088.x * 14u;
    uint _2091 = _2090 + 13u;
    float _2098 = _1019 + (-1.0);
    float _2103 = (cbLight._m0[_2091].x * _2098) + 1.0;
    float _2104 = (cbLight._m0[_2091].y * _2098) + 1.0;
    float _2105 = (cbLight._m0[_2091].z * _2098) + 1.0;
    float _2106 = (cbLight._m0[_2091].w * _2098) + 1.0;
    uint _2107 = _2090 + 5u;
    float _2113 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
    uint _2117 = _2090 + 4u;
    float _2123 = isnan(1.0) ? _2103 : (isnan(_2103) ? 1.0 : min(_2103, 1.0));
    uint _2127 = _2090 | 1u;
    float _2138 = dot(vec3(cbLight._m0[_2090].xyz), vec3(_789, _790, _791));
    float _2141 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_789, _790, _791));
    float _4363 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _4374 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2146 = (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * 0.3183098733425140380859375;
    float _2148 = (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * 0.3183098733425140380859375;
    float _2155 = ((cbLight._m0[_2107].x * _2113) * _2148) + ((cbLight._m0[_2117].x * _2123) * _2146);
    float _2156 = ((_2113 * cbLight._m0[_2107].y) * _2148) + ((_2123 * cbLight._m0[_2117].y) * _2146);
    float _2157 = ((_2113 * cbLight._m0[_2107].z) * _2148) + ((_2123 * cbLight._m0[_2117].z) * _2146);
    uvec4 _2161 = floatBitsToUint(cbLight._m0[_2090 + 12u]);
    bool _2163 = _2161.x == 0u;
    float _2174;
    float _2176;
    float _2178;
    if (_2163)
    {
        _2174 = _2155;
        _2176 = _2156;
        _2178 = _2157;
    }
    else
    {
        uint _2182 = _2090 + 6u;
        float _2198 = (dot(vec3(cbLight._m0[_2090 + 2u].xyz), vec3(_789, _790, _791)) * 0.5) + 0.5;
        float _2199 = _2198 * _2198;
        float _4385 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2200 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _2201 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
        _2174 = (((cbLight._m0[_2182].x * 0.3183098733425140380859375) * _2200) * _2201) + _2155;
        _2176 = (((cbLight._m0[_2182].y * 0.3183098733425140380859375) * _2200) * _2201) + _2156;
        _2178 = (((cbLight._m0[_2182].z * 0.3183098733425140380859375) * _2200) * _2201) + _2157;
    }
    bool _2181 = _2161.y == 0u;
    float _2219;
    float _2221;
    float _2223;
    if (_2181)
    {
        _2219 = _2174;
        _2221 = _2176;
        _2223 = _2178;
    }
    else
    {
        uint _2389 = _2090 + 7u;
        float _2405 = (dot(vec3(cbLight._m0[_2090 + 3u].xyz), vec3(_789, _790, _791)) * 0.5) + 0.5;
        float _2406 = _2405 * _2405;
        float _4401 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2407 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _2408 = isnan(1.0) ? _2106 : (isnan(_2106) ? 1.0 : min(_2106, 1.0));
        _2219 = (((cbLight._m0[_2389].x * 0.3183098733425140380859375) * _2407) * _2408) + _2174;
        _2221 = (((cbLight._m0[_2389].y * 0.3183098733425140380859375) * _2407) * _2408) + _2176;
        _2223 = (((cbLight._m0[_2389].z * 0.3183098733425140380859375) * _2407) * _2408) + _2178;
    }
    uint _2226 = _2090 + 8u;
    float _2239 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2090].w)) * _934) * 0.949999988079071044921875);
    float _2240 = _2239 * _2239;
    float _2241 = cbLight._m0[_2090].x + _869;
    float _2242 = cbLight._m0[_2090].y + _870;
    float _2243 = cbLight._m0[_2090].z + _871;
    float _2247 = inversesqrt(dot(vec3(_2241, _2242, _2243), vec3(_2241, _2242, _2243)));
    float _2248 = _2247 * _2241;
    float _2249 = _2247 * _2242;
    float _2250 = _2247 * _2243;
    float _2251 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2090].xyz));
    float _4417 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2254 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
    float _4428 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _2255 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
    float _2256 = dot(vec3(_789, _790, _791), vec3(_2248, _2249, _2250));
    float _4439 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2259 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
    float _2260 = dot(vec3(cbLight._m0[_2090].xyz), vec3(_2248, _2249, _2250));
    float _4450 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2264 = _2240 * _2240;
    float _2268 = ((_2259 * _2259) * (_2264 + (-1.0))) + 1.0;
    float _2276 = exp2(log2(1.0 - (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0)))) * 5.0);
    float _2277 = 0.959999978542327880859375 - _1001;
    float _2279 = 0.959999978542327880859375 - _1002;
    float _2280 = 0.959999978542327880859375 - _1003;
    float _2287 = 1.0 - _2240;
    float _2298 = (0.5 / (((_2255 * ((_2254 * _2287) + _2240)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2287) + _2240) * _2254))) * _2254;
    float _4461 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2300 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2264 / ((_2268 * _2268) * 3.141590118408203125));
    uint _2311 = _2090 + 9u;
    float _2322 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2127].w)) * _934) * 0.949999988079071044921875);
    float _2323 = _2322 * _2322;
    float _2324 = cbLight._m0[_2127].x + _869;
    float _2325 = cbLight._m0[_2127].y + _870;
    float _2326 = cbLight._m0[_2127].z + _871;
    float _2330 = inversesqrt(dot(vec3(_2324, _2325, _2326), vec3(_2324, _2325, _2326)));
    float _2331 = _2330 * _2324;
    float _2332 = _2330 * _2325;
    float _2333 = _2330 * _2326;
    float _2334 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2127].xyz));
    float _4472 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2337 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
    float _2338 = dot(vec3(_789, _790, _791), vec3(_2331, _2332, _2333));
    float _4483 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2341 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
    float _2342 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_2331, _2332, _2333));
    float _4494 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2346 = _2323 * _2323;
    float _2350 = ((_2341 * _2341) * (_2346 + (-1.0))) + 1.0;
    float _2357 = exp2(log2(1.0 - (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0)))) * 5.0);
    float _2364 = 1.0 - _2323;
    float _2374 = (0.5 / (((_2255 * ((_2337 * _2364) + _2323)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2364) + _2323) * _2337))) * _2337;
    float _4505 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2376 = (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2346 / ((_2350 * _2350) * 3.141590118408203125));
    float _2386 = (((((_2357 * _2277) + _1004) * cbLight._m0[_2311].x) * _2376) * _2113) + (((((_2276 * _2277) + _1004) * cbLight._m0[_2226].x) * _2300) * _2123);
    float _2387 = (((((_2357 * _2279) + _1006) * cbLight._m0[_2311].y) * _2376) * _2113) + (((((_2276 * _2279) + _1006) * cbLight._m0[_2226].y) * _2300) * _2123);
    float _2388 = (((((_2357 * _2280) + _1007) * cbLight._m0[_2311].z) * _2376) * _2113) + (((((_2276 * _2280) + _1007) * cbLight._m0[_2226].z) * _2300) * _2123);
    float _2450;
    float _2452;
    float _2454;
    if (_2163)
    {
        _2450 = _2386;
        _2452 = _2387;
        _2454 = _2388;
    }
    else
    {
        uint _2456 = _2090 + 2u;
        uint _2460 = _2090 + 10u;
        float _2474 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2456].w)) * _934) * 0.949999988079071044921875);
        float _2475 = _2474 * _2474;
        float _2476 = cbLight._m0[_2456].x + _869;
        float _2477 = cbLight._m0[_2456].y + _870;
        float _2478 = cbLight._m0[_2456].z + _871;
        float _2482 = inversesqrt(dot(vec3(_2476, _2477, _2478), vec3(_2476, _2477, _2478)));
        float _2483 = _2482 * _2476;
        float _2484 = _2482 * _2477;
        float _2485 = _2482 * _2478;
        float _2486 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2456].xyz));
        float _4516 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2489 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _2490 = dot(vec3(_789, _790, _791), vec3(_2483, _2484, _2485));
        float _4527 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2493 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _2494 = dot(vec3(cbLight._m0[_2456].xyz), vec3(_2483, _2484, _2485));
        float _4538 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2498 = _2475 * _2475;
        float _2502 = ((_2493 * _2493) * (_2498 + (-1.0))) + 1.0;
        float _2509 = exp2(log2(1.0 - (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0)))) * 5.0);
        float _2516 = 1.0 - _2475;
        float _2526 = (0.5 / (((_2255 * ((_2489 * _2516) + _2475)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2516) + _2475) * _2489))) * _2489;
        float _4549 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2528 = (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (_2498 / ((_2502 * _2502) * 3.141590118408203125));
        float _2529 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
        _2450 = (((((_2509 * _2277) + _1004) * cbLight._m0[_2460].x) * _2528) * _2529) + _2386;
        _2452 = (((((_2509 * _2279) + _1006) * cbLight._m0[_2460].y) * _2528) * _2529) + _2387;
        _2454 = (((((_2509 * _2280) + _1007) * cbLight._m0[_2460].z) * _2528) * _2529) + _2388;
    }
    float _2564;
    float _2566;
    float _2568;
    if (_2181)
    {
        _2564 = _2450;
        _2566 = _2452;
        _2568 = _2454;
    }
    else
    {
        uint _2575 = _2090 + 3u;
        uint _2579 = _2090 + 11u;
        float _2593 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2575].w)) * _934) * 0.949999988079071044921875);
        float _2594 = _2593 * _2593;
        float _2595 = cbLight._m0[_2575].x + _869;
        float _2596 = cbLight._m0[_2575].y + _870;
        float _2597 = cbLight._m0[_2575].z + _871;
        float _2601 = inversesqrt(dot(vec3(_2595, _2596, _2597), vec3(_2595, _2596, _2597)));
        float _2602 = _2601 * _2595;
        float _2603 = _2601 * _2596;
        float _2604 = _2601 * _2597;
        float _2605 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2575].xyz));
        float _4565 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2608 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
        float _2609 = dot(vec3(_789, _790, _791), vec3(_2602, _2603, _2604));
        float _4576 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2612 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
        float _2613 = dot(vec3(cbLight._m0[_2575].xyz), vec3(_2602, _2603, _2604));
        float _4587 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2617 = _2594 * _2594;
        float _2621 = ((_2612 * _2612) * (_2617 + (-1.0))) + 1.0;
        float _2628 = exp2(log2(1.0 - (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0)))) * 5.0);
        float _2635 = 1.0 - _2594;
        float _2645 = (0.5 / (((_2255 * ((_2608 * _2635) + _2594)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2635) + _2594) * _2608))) * _2608;
        float _4598 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2647 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (_2617 / ((_2621 * _2621) * 3.141590118408203125));
        float _2648 = isnan(1.0) ? _2106 : (isnan(_2106) ? 1.0 : min(_2106, 1.0));
        _2564 = (((((_2628 * _2277) + _1004) * cbLight._m0[_2579].x) * _2647) * _2648) + _2450;
        _2566 = (((((_2628 * _2279) + _1006) * cbLight._m0[_2579].y) * _2647) * _2648) + _2452;
        _2568 = (((((_2628 * _2280) + _1007) * cbLight._m0[_2579].z) * _2647) * _2648) + _2454;
    }
    float _2782;
    float _2784;
    float _2786;
    float _2788;
    float _2790;
    float _2792;
    if (_2088.y == 0u)
    {
        float _2723 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2724 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2723;
        float _2725 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2723;
        float _2726 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2723;
        uvec4 _2738 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2739 = _2738.x;
        uint _2750 = uint((float(_2738.y) * floor(float(uint(cbSceneParam._m0[85u].y * _891) / _2739))) + floor(float(uint(cbSceneParam._m0[85u].x * _890) / _2739)));
        float _2760 = (log2(_2726 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2761 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        uint _2764 = uint(isnan(14.0) ? _2761 : (isnan(_2761) ? 14.0 : min(_2761, 14.0)));
        uvec4 _2769 = texelFetch(g_lightClusterGridBuffer, int(((_2764 << 2u) + (_2750 << 6u)) >> 2u));
        uint _2770 = _2769.x;
        uint _2771 = _2738.z;
        float _2889;
        float _2891;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        if (((((1u << ((_2771 >> 4u) & 15u)) + 4294967295u) & _2770) == 0u) || ((_2771 & 240u) == 0u))
        {
            _2889 = 0.0;
            _2891 = 0.0;
            _2893 = 0.0;
            _2895 = 0.0;
            _2897 = 0.0;
            _2899 = 0.0;
        }
        else
        {
            float _2890;
            float _2892;
            float _2894;
            float _2896;
            float _2898;
            float _2900;
            float _3041 = 0.0;
            float _3042 = 0.0;
            float _3043 = 0.0;
            float _3044 = 0.0;
            float _3045 = 0.0;
            float _3046 = 0.0;
            uint _3047 = 0u;
            uint _3056;
            bool _3057;
            for (;;)
            {
                _3056 = texelFetch(g_lightClassification, int((((_2764 << 5u) + (_2750 << 9u)) + (_3047 << 2u)) >> 2u)).x;
                _3057 = _3056 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3057)
                {
                    frontier_phi_68_pred = _3043;
                    frontier_phi_68_pred_1 = _3046;
                    frontier_phi_68_pred_2 = _3045;
                    frontier_phi_68_pred_3 = _3044;
                    frontier_phi_68_pred_4 = _3042;
                    frontier_phi_68_pred_5 = _3041;
                }
                else
                {
                    float _3186;
                    float _3187;
                    float _3188;
                    float _3189;
                    float _3190;
                    float _3191;
                    uint _3192;
                    _3186 = _3041;
                    _3187 = _3042;
                    _3188 = _3043;
                    _3189 = _3044;
                    _3190 = _3045;
                    _3191 = _3046;
                    _3192 = _3056;
                    float _3113;
                    float _3114;
                    float _3115;
                    float _3116;
                    float _3117;
                    float _3118;
                    for (;;)
                    {
                        uint _3196 = uint(findLSB(_3192)) + (_3047 << 5u);
                        uint _3193 = (_3192 + 4294967295u) & _3192;
                        uint _3198 = _3196 * 48u;
                        vec4 _3212 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3198)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 3u)).x));
                        uint _3218 = (_3196 * 48u) + 4u;
                        vec4 _3231 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3218)).x, texelFetch(g_PointLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3218 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3218 + 3u)).x));
                        uint _3237 = (_3196 * 48u) + 8u;
                        vec3 _3248 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3237)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 2u)).x));
                        float _3252 = _3212.x - _2724;
                        float _3253 = _3212.y - _2725;
                        float _3254 = _3212.z - _2726;
                        float _3255 = dot(vec3(_3252, _3253, _3254), vec3(_3252, _3253, _3254));
                        float _3258 = inversesqrt(_3255);
                        float _3259 = _3258 * _3252;
                        float _3260 = _3258 * _3253;
                        float _3261 = _3258 * _3254;
                        float _3262 = dot(vec3(_915, _918, _921), vec3(_3259, _3260, _3261));
                        float _3267 = 1.0 - (_3255 * _3212.w);
                        float _4624 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                        float _3268 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                        float _3269 = sqrt(_3255) * _3231.w;
                        float _3272 = 1.39999997615814208984375 / (_3269 + 1.39999997615814208984375);
                        float _3273 = _3272 * _3272;
                        float _3276 = ((1.0 - _3273) * _3262) + _3273;
                        float _3279 = _3269 * _3269;
                        float _3283 = ((isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0))) * _3268) / ((_3279 * 0.699999988079071044921875) + 1.0);
                        float _3287 = (-0.0) - _2724;
                        float _3288 = (-0.0) - _2725;
                        float _3289 = (-0.0) - _2726;
                        float _3293 = inversesqrt(dot(vec3(_3287, _3288, _3289), vec3(_3287, _3288, _3289)));
                        float _3294 = _3293 * _3287;
                        float _3295 = _3293 * _3288;
                        float _3296 = _3293 * _3289;
                        float _3303 = exp2(log2(1.0 / ((_3279 * 3.5) + 5.0)) * 0.25);
                        float _3304 = 1.0 - _1035;
                        float _3311 = sqrt(1.0 - ((1.0 - (_3304 * _3304)) * (1.0 - (_3303 * _3303))));
                        float _3312 = _3311 * _3311;
                        float _3313 = _3312 * _3312;
                        float _3314 = _3294 + _3259;
                        float _3315 = _3295 + _3260;
                        float _3316 = _3296 + _3261;
                        float _3320 = inversesqrt(dot(vec3(_3314, _3315, _3316), vec3(_3314, _3315, _3316)));
                        float _3324 = dot(vec3(_915, _918, _921), vec3(_3294, _3295, _3296));
                        float _4640 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                        float _3327 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                        float _3328 = dot(vec3(_915, _918, _921), vec3(_3320 * _3314, _3320 * _3315, _3320 * _3316));
                        float _4651 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                        float _3331 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                        float _3335 = ((_3331 * _3331) * (_3313 + (-1.0))) + 1.0;
                        float _3336 = _3272 * _3312;
                        float _3337 = _3336 * _3336;
                        float _3340 = ((1.0 - _3337) * _3262) + _3337;
                        float _4662 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                        float _3341 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                        float _3342 = 1.0 - _3312;
                        float _3352 = (0.5 / (((_3341 * ((_3327 * _3342) + _3312)) + 9.9999999392252902907785028219223e-09) + (((_3341 * _3342) + _3312) * _3327))) * _3341;
                        float _4673 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                        float _3363 = (((_3313 * 3.1415927410125732421875) * (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0)))) / ((_3335 * _3335) * ((_3279 * 2.1991131305694580078125) + 3.141590118408203125))) * _3268;
                        _3116 = (_3283 * _3231.x) + _3189;
                        _3117 = (_3283 * _3231.y) + _3190;
                        _3118 = (_3283 * _3231.z) + _3191;
                        _3113 = (_3363 * _3248.x) + _3186;
                        _3114 = (_3363 * _3248.y) + _3187;
                        _3115 = (_3363 * _3248.z) + _3188;
                        if (_3193 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3186 = _3113;
                            _3187 = _3114;
                            _3188 = _3115;
                            _3189 = _3116;
                            _3190 = _3117;
                            _3191 = _3118;
                            _3192 = _3193;
                        }
                    }
                    frontier_phi_68_pred = _3115;
                    frontier_phi_68_pred_1 = _3118;
                    frontier_phi_68_pred_2 = _3117;
                    frontier_phi_68_pred_3 = _3116;
                    frontier_phi_68_pred_4 = _3114;
                    frontier_phi_68_pred_5 = _3113;
                }
                _2894 = frontier_phi_68_pred;
                _2900 = frontier_phi_68_pred_1;
                _2898 = frontier_phi_68_pred_2;
                _2896 = frontier_phi_68_pred_3;
                _2892 = frontier_phi_68_pred_4;
                _2890 = frontier_phi_68_pred_5;
                uint _3048 = _3047 + 1u;
                if (_3048 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3041 = _2890;
                    _3042 = _2892;
                    _3043 = _2894;
                    _3044 = _2896;
                    _3045 = _2898;
                    _3046 = _2900;
                    _3047 = _3048;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2889 = _2890;
            _2891 = _2892;
            _2893 = _2894;
            _2895 = _2896;
            _2897 = _2898;
            _2899 = _2900;
        }
        uvec4 _2903 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2904 = _2903.z;
        uint _2906 = (_2904 >> 8u) & 15u;
        float _3009;
        float _3011;
        float _3013;
        float _3015;
        float _3017;
        float _3019;
        if (((4294967295u << _2906) & _2770) == 0u)
        {
            _3009 = _2889;
            _3011 = _2891;
            _3013 = _2893;
            _3015 = _2895;
            _3017 = _2897;
            _3019 = _2899;
        }
        else
        {
            float _3034 = inversesqrt(dot(vec3(_2724, _2725, _2726), vec3(_2724, _2725, _2726)));
            float _3035 = _3034 * _2724;
            float _3036 = _3034 * _2725;
            float _3037 = _3034 * _2726;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2906 < ((_2904 >> 12u) & 15u))
            {
                float _3010;
                float _3012;
                float _3014;
                float _3016;
                float _3018;
                float _3020;
                float _3169 = _2889;
                float _3170 = _2891;
                float _3171 = _2893;
                float _3172 = _2895;
                float _3173 = _2897;
                float _3174 = _2899;
                uint _3175 = _2906;
                uint _3184;
                bool _3185;
                for (;;)
                {
                    _3184 = texelFetch(g_lightClassification, int((((_2764 << 5u) + (_2750 << 9u)) + (_3175 << 2u)) >> 2u)).x;
                    _3185 = _3184 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3185)
                    {
                        frontier_phi_79_pred = _3174;
                        frontier_phi_79_pred_1 = _3173;
                        frontier_phi_79_pred_2 = _3172;
                        frontier_phi_79_pred_3 = _3171;
                        frontier_phi_79_pred_4 = _3170;
                        frontier_phi_79_pred_5 = _3169;
                    }
                    else
                    {
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3670;
                        float _3671;
                        float _3672;
                        float _3673;
                        float _3674;
                        float _3675;
                        float _3390 = _3169;
                        float _3391 = _3170;
                        float _3392 = _3171;
                        float _3393 = _3172;
                        float _3394 = _3173;
                        float _3395 = _3174;
                        uint _3396 = _3184;
                        uint _3397;
                        vec4 _3422;
                        float _3423;
                        vec4 _3438;
                        vec3 _3450;
                        vec4 _3465;
                        vec4 _3480;
                        float _3526;
                        bool _3527;
                        for (;;)
                        {
                            uint _3407 = ((_3175 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3396));
                            _3397 = (_3396 + 4294967295u) & _3396;
                            uint _3409 = _3407 * 40u;
                            _3422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 3u)).x));
                            _3423 = _3422.w;
                            uint _3425 = (_3407 * 40u) + 4u;
                            _3438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 3u)).x));
                            uint _3440 = (_3407 * 40u) + 8u;
                            _3450 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x));
                            uint _3452 = (_3407 * 40u) + 16u;
                            _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            uint _3467 = (_3407 * 40u) + 20u;
                            _3480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 3u)).x));
                            uint _3482 = (_3407 * 40u) + 24u;
                            vec4 _3495 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 3u)).x));
                            uint _3501 = (_3407 * 40u) + 28u;
                            vec4 _3514 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3501)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 3u)).x));
                            _3526 = fma(_2726, _3514.z, fma(_2725, _3514.y, _3514.x * _2724)) + _3514.w;
                            _3527 = !((fma(_2726, _3495.z, fma(_2725, _3495.y, _3495.x * _2724)) + _3495.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3527)
                            {
                                float _3554 = _3422.x - _2724;
                                float _3555 = _3422.y - _2725;
                                float _3556 = _3422.z - _2726;
                                float _3557 = dot(vec3(_3554, _3555, _3556), vec3(_3554, _3555, _3556));
                                float _3560 = inversesqrt(_3557);
                                float _3561 = _3560 * _3554;
                                float _3562 = _3560 * _3555;
                                float _3563 = _3560 * _3556;
                                float _3567 = 1.0 - (_3557 / (_3423 * _3423));
                                float _4684 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                                float _3568 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
                                float _3572 = sqrt(_3557) * _3438.w;
                                float _3574 = 1.39999997615814208984375 / (_3572 + 1.39999997615814208984375);
                                float _3575 = _3574 * _3574;
                                float _3578 = ((1.0 - _3575) * dot(vec3(_3561, _3562, _3563), vec3(_915, _918, _921))) + _3575;
                                float _3581 = _3572 * _3572;
                                float _3585 = (fma(_2726, _3465.z, fma(_2725, _3465.y, _3465.x * _2724)) + _3465.w) / _3526;
                                float _3586 = (fma(_2726, _3480.z, fma(_2725, _3480.y, _3480.x * _2724)) + _3480.w) / _3526;
                                float _3590 = 1.0 - dot(vec2(_3585, _3586), vec2(_3585, _3586));
                                float _4700 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                                float _3591 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                                float _3592 = _3591 * (((isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0))) * _3568) / ((_3581 * 0.699999988079071044921875) + 1.0));
                                float _3604 = exp2(log2(1.0 / ((_3581 * 3.5) + 5.0)) * 0.25);
                                float _3605 = 1.0 - _1035;
                                float _3612 = sqrt(1.0 - ((1.0 - (_3605 * _3605)) * (1.0 - (_3604 * _3604))));
                                float _3613 = _3612 * _3612;
                                float _3614 = _3613 * _3613;
                                float _3615 = _3561 - _3035;
                                float _3616 = _3562 - _3036;
                                float _3617 = _3563 - _3037;
                                float _3621 = inversesqrt(dot(vec3(_3615, _3616, _3617), vec3(_3615, _3616, _3617)));
                                float _3625 = dot(vec3(_915, _918, _921), vec3((-0.0) - _3035, (-0.0) - _3036, (-0.0) - _3037));
                                float _4711 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                                float _3628 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                                float _3629 = dot(vec3(_915, _918, _921), vec3(_3621 * _3615, _3621 * _3616, _3621 * _3617));
                                float _4722 = isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0));
                                float _3632 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                                float _3636 = ((_3632 * _3632) * (_3614 + (-1.0))) + 1.0;
                                float _3637 = _3574 * _3613;
                                float _3638 = _3637 * _3637;
                                float _3644 = ((1.0 - _3638) * dot(vec3(_915, _918, _921), vec3(_3561, _3562, _3563))) + _3638;
                                float _4733 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                                float _3645 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
                                float _3646 = 1.0 - _3613;
                                float _3656 = (0.5 / (((_3645 * ((_3628 * _3646) + _3613)) + 9.9999999392252902907785028219223e-09) + (((_3645 * _3646) + _3613) * _3628))) * _3645;
                                float _4744 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                                float _3666 = (_3591 * _3568) * (((_3614 * 3.1415927410125732421875) * (isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0)))) / ((_3636 * _3636) * ((_3581 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3592 * _3438.z;
                                frontier_phi_85_pred_1 = _3592 * _3438.y;
                                frontier_phi_85_pred_2 = _3592 * _3438.x;
                                frontier_phi_85_pred_3 = _3666 * _3450.z;
                                frontier_phi_85_pred_4 = _3666 * _3450.y;
                                frontier_phi_85_pred_5 = _3666 * _3450.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3675 = frontier_phi_85_pred;
                            _3674 = frontier_phi_85_pred_1;
                            _3673 = frontier_phi_85_pred_2;
                            _3672 = frontier_phi_85_pred_3;
                            _3671 = frontier_phi_85_pred_4;
                            _3670 = frontier_phi_85_pred_5;
                            _3380 = _3673 + _3393;
                            _3381 = _3674 + _3394;
                            _3382 = _3675 + _3395;
                            _3377 = _3670 + _3390;
                            _3378 = _3671 + _3391;
                            _3379 = _3672 + _3392;
                            if (_3397 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3390 = _3377;
                                _3391 = _3378;
                                _3392 = _3379;
                                _3393 = _3380;
                                _3394 = _3381;
                                _3395 = _3382;
                                _3396 = _3397;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3382;
                        frontier_phi_79_pred_1 = _3381;
                        frontier_phi_79_pred_2 = _3380;
                        frontier_phi_79_pred_3 = _3379;
                        frontier_phi_79_pred_4 = _3378;
                        frontier_phi_79_pred_5 = _3377;
                    }
                    _3020 = frontier_phi_79_pred;
                    _3018 = frontier_phi_79_pred_1;
                    _3016 = frontier_phi_79_pred_2;
                    _3014 = frontier_phi_79_pred_3;
                    _3012 = frontier_phi_79_pred_4;
                    _3010 = frontier_phi_79_pred_5;
                    uint _3176 = _3175 + 1u;
                    if (_3176 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3169 = _3010;
                        _3170 = _3012;
                        _3171 = _3014;
                        _3172 = _3016;
                        _3173 = _3018;
                        _3174 = _3020;
                        _3175 = _3176;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3016;
                frontier_phi_60_61_ladder_1 = _3020;
                frontier_phi_60_61_ladder_2 = _3018;
                frontier_phi_60_61_ladder_3 = _3014;
                frontier_phi_60_61_ladder_4 = _3012;
                frontier_phi_60_61_ladder_5 = _3010;
            }
            else
            {
                frontier_phi_60_61_ladder = _2895;
                frontier_phi_60_61_ladder_1 = _2899;
                frontier_phi_60_61_ladder_2 = _2897;
                frontier_phi_60_61_ladder_3 = _2893;
                frontier_phi_60_61_ladder_4 = _2891;
                frontier_phi_60_61_ladder_5 = _2889;
            }
            _3009 = frontier_phi_60_61_ladder_5;
            _3011 = frontier_phi_60_61_ladder_4;
            _3013 = frontier_phi_60_61_ladder_3;
            _3015 = frontier_phi_60_61_ladder;
            _3017 = frontier_phi_60_61_ladder_2;
            _3019 = frontier_phi_60_61_ladder_1;
        }
        float _3024 = isnan(1.0) ? _1019 : (isnan(_1019) ? 1.0 : min(_1019, 1.0));
        _2782 = (_3024 * _3015) + _2219;
        _2784 = (_3024 * _3017) + _2221;
        _2786 = (_3024 * _3019) + _2223;
        _2788 = ((_3009 * _1004) * _3024) + _2564;
        _2790 = ((_3011 * _1006) * _3024) + _2566;
        _2792 = ((_3013 * _1007) * _3024) + _2568;
    }
    else
    {
        _2782 = _2219;
        _2784 = _2221;
        _2786 = _2223;
        _2788 = _2564;
        _2790 = _2566;
        _2792 = _2568;
    }
    uint _2798 = _948 + uint(cbMatDynParam._m0[0u].w);
    float _4760 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _4771 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _4782 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _2823 = (((isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * (_2782 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1019))) + ((_2788 + ((isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0))) * _1859)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2798].x * ((((_598 + (_484 * _436)) - (_598 * _484)) + cbMtdParam._m0[13u].x) + ((((((_735.x - _732) * _713) + _732) * cbMtdParam._m0[11u].x) + ((cbMtdParam._m0[22u].y * _666) * cbMtdParam._m0[12u].x)) * _675)));
    float _2825 = ((cbInstanceData._m0[_2798].y * ((((_599 + (_484 * _437)) - (_599 * _484)) + cbMtdParam._m0[13u].y) + ((((((_735.y - _733) * _713) + _733) * cbMtdParam._m0[11u].y) + ((cbMtdParam._m0[22u].y * (((_655.y - _650.y) * _634) + _650.y)) * cbMtdParam._m0[12u].y)) * _675))) + ((_2790 + ((isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0))) * _1859)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * (_2784 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1019)));
    float _2827 = ((cbInstanceData._m0[_2798].z * ((((_600 + (_484 * _438)) - (_600 * _484)) + cbMtdParam._m0[13u].z) + ((((((_735.z - _734) * _713) + _734) * cbMtdParam._m0[11u].z) + ((cbMtdParam._m0[22u].y * (((_655.z - _650.z) * _634) + _650.z)) * cbMtdParam._m0[12u].z)) * _675))) + ((_2792 + ((isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0))) * _1859)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * (_2786 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1019)));
    float _2828 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
    float _2829 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
    float _2830 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
    uint _2831 = _947 + 6u;
    float _2839 = _890 / cbSceneParam._m0[86u].x;
    float _2840 = _891 / cbSceneParam._m0[86u].y;
    vec4 _2854 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2839, _2840, (log2((isnan(cbSceneParam._m0[77u].w) ? _812 : (isnan(_812) ? cbSceneParam._m0[77u].w : min(_812, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2856 = _2854.x;
    float _2857 = _2854.y;
    float _2858 = _2854.z;
    float _2859 = _2854.w;
    float _2951;
    float _2953;
    float _2955;
    float _2957;
    if (_812 > cbSceneParam._m0[78u].w)
    {
        float _2914 = isnan(_812) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _812 : min(cbSceneParam._m0[80u].w, _812));
        float _2915 = _2914 / _812;
        float _2926 = _2915 * _862;
        float _2927 = _863 * _2915;
        float _2928 = (-0.0) - _2927;
        float _2929 = _2915 * _864;
        float _2931 = (cbSceneParam._m0[77u].w * _2928) / _2914;
        float _2932 = _2931 + cbSceneParam._m0[79u].w;
        float _2933 = cbSceneParam._m0[79u].w - _2927;
        float _2939 = sqrt(((_2926 * _2926) + (_2927 * _2927)) + (_2929 * _2929));
        float _2942 = (1.0 - (cbSceneParam._m0[77u].w / _2914)) * _2939;
        float _2947 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2949 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3126;
        if (abs((_2928 - _2931) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3126 = ((((_2932 > 0.0) ? exp2(_2947 * _2932) : (2.0 - exp2(_2949 * _2932))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2942;
        }
        else
        {
            float _3070 = 1.0 / cbSceneParam._m0[80u].x;
            float _3071 = isnan(_2933) ? _2932 : (isnan(_2932) ? _2933 : max(_2932, _2933));
            float _3072 = isnan(_2933) ? _2932 : (isnan(_2932) ? _2933 : min(_2932, _2933));
            float _3081 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : min(_3071, 0.0));
            float _3082 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : min(_3072, 0.0));
            _3126 = ((abs(_2939 / _2928) * cbSceneParam._m0[80u].y) * ((((_3081 - _3082) * 2.0) - ((exp2(_2947 * (isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0)))) - exp2(_2947 * (isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0))))) * _3070)) - ((exp2(_2949 * _3081) - exp2(_2949 * _3082)) * _3070))) + (_2942 * cbSceneParam._m0[80u].z);
        }
        vec4 _3128 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2839, _2840, 1.0), 0.0);
        float _3137 = exp2((_3126 * (-1.44269502162933349609375)) * (1.0 - _3128.w));
        float _3138 = log2(_3137);
        float _3154 = log2(_2859);
        _2951 = (exp2(_3154 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3138 * cbSceneParam._m0[78u].x)) * _3128.x) / cbSceneParam._m0[78u].x)) + _2856;
        _2953 = (exp2(_3154 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3138 * cbSceneParam._m0[78u].y)) * _3128.y) / cbSceneParam._m0[78u].y)) + _2857;
        _2955 = (exp2(_3154 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3138 * cbSceneParam._m0[78u].z)) * _3128.z) / cbSceneParam._m0[78u].z)) + _2858;
        _2957 = _3137 * _2859;
    }
    else
    {
        _2951 = _2856;
        _2953 = _2857;
        _2955 = _2858;
        _2957 = _2859;
    }
    bool _3164;
    vec4 _2967;
    vec4 _2989;
    float _2991;
    float _2995;
    float _2996;
    float _2997;
    float _2998;
    bool _3008;
    for (;;)
    {
        _2967 = cbMatDynParam._m0[0u];
        float _2969 = roundEven(_2967.y);
        bool _2970 = _2969 == 3.0;
        float _2971 = log2(_2957);
        float _2978 = exp2(_2971 * cbSceneParam._m0[78u].x) * _2828;
        float _2979 = exp2(_2971 * cbSceneParam._m0[78u].y) * _2829;
        float _2980 = exp2(_2971 * cbSceneParam._m0[78u].z) * _2830;
        float _2987 = _878 + (-0.5);
        _2989 = cbMtdParam._m0[1u];
        _2991 = _2989.y * _2987;
        float _2994 = (_2969 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2995 = _2994 * (_2970 ? _2978 : (_2978 + (cbSceneParam._m0[72u].w * _2951)));
        _2996 = _2994 * (_2970 ? _2979 : (_2979 + (cbSceneParam._m0[72u].w * _2953)));
        _2997 = _2994 * (_2970 ? _2980 : (_2980 + (cbSceneParam._m0[72u].w * _2955)));
        _2998 = _2987 * 0.999000012874603271484375;
        _3008 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3008)
        {
            if ((cbInstanceData._m0[_947 + 7u].x + _2998) < 0.5)
            {
                _3164 = true;
                break;
            }
        }
        uint _3105 = _948 + uint(_2967.w);
        if ((cbInstanceData._m0[_3105].w < 1.0) && ((cbInstanceData._m0[_3105].w + _2998) < 0.5))
        {
            _3164 = true;
            break;
        }
        if ((_2991 + 1.0) < _2989.x)
        {
            _3164 = true;
            break;
        }
        _3164 = false;
        break;
    }
    float _3368;
    if (_3164)
    {
        discard_state = true;
        _3368 = 0.0;
    }
    else
    {
        _3368 = cbInstanceData._m0[_2831].w;
    }
    SV_Target.x = _2995;
    SV_Target.y = _2996;
    SV_Target.z = _2997;
    SV_Target.w = _3368;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2831].w;
    discard_exit();
}


