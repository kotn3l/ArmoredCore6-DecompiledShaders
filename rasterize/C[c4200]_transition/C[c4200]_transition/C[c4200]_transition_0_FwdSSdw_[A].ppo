#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[25];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_c4200_transition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_c4200_transition_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_c4200_transition_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D C_c4200_transition_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_c4200_transition_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D C_c4200_transition_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_c4200_transition_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_c4200_transition_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_c4200_transition_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_c4200_transition_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1440;
float _3862;
float _3863;
float _3864;
float _3865;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = _227 * NORMAL.x;
    float _229 = _227 * NORMAL.y;
    float _230 = _227 * NORMAL.z;
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242;
    float _243;
    float _244;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
        _244 = (-0.0) - _230;
    }
    else
    {
        _242 = _228;
        _243 = _229;
        _244 = _230;
    }
    vec4 _258 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _261 = _258.x;
    float _270 = cbMtdParam._m0[18u].y * 0.3333333432674407958984375;
    float _275 = fract(abs(_270));
    float _287 = cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x;
    float _290 = (_287 * cbMtdParam._m0[24u].x) + TEXCOORD.x;
    float _291 = (_287 * cbMtdParam._m0[24u].y) + TEXCOORD.y;
    vec4 _314 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((_287 * cbMtdParam._m0[23u].x) + TEXCOORD.x)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[23u].y * _287) + TEXCOORD.y)) + cbTextureTilingScale._m0[10u].w));
    float _318 = cbPerFrame._m0[22u].x * 2.0;
    float _320 = _318 * cbMtdParam._m0[19u].w;
    float _323 = (_314.x * 0.5) + (-0.25);
    float _326 = (_314.y * 0.5) + (-0.25);
    float _327 = _326 * cbMtdParam._m0[18u].z;
    float _329 = (-0.0) - (cbMtdParam._m0[18u].z * _323);
    float _330 = fract(_320);
    float _332 = fract(_320 + 0.5);
    float _333 = _330 * _329;
    float _334 = _327 * _330;
    float _337 = _332 * _329;
    float _338 = _327 * _332;
    float _344 = abs((_330 * 2.0) + (-1.0));
    vec4 _361 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_9, SS_DiffuseMap), vec2(((_333 + _290) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, ((_334 + _291) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _363 = _361.x;
    float _374 = (0.25 - ((((_270 >= ((-0.0) - _270)) ? _275 : ((-0.0) - _275)) * 3.0) - _261)) + ((((texture(sampler2D(C_c4200_transition_snp_0_Texture2D_9, SS_DiffuseMap), vec2(((_337 + _290) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, ((_338 + _291) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w)).x - _363) * _344) + _363) * 1.35000002384185791015625);
    float _377 = abs(_374 * cbMtdParam._m0[19u].z);
    float _381 = (((_377 * cbMtdParam._m0[19u].y) - _261) * _377) + _261;
    float _3874 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _383 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _394 = (cbMtdParam._m0[23u].z * _287) + TEXCOORD.x;
    float _395 = (cbMtdParam._m0[23u].w * _287) + TEXCOORD.y;
    vec4 _415 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_333 + _394) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_334 + _395) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _417 = _415.x;
    float _418 = _415.y;
    float _419 = _415.z;
    vec4 _420 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_337 + _394) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_338 + _395) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _434 = (((_420.x - _417) * _344) + _417) * cbMtdParam._m0[14u].x;
    float _435 = (((_420.y - _418) * _344) + _418) * cbMtdParam._m0[14u].y;
    float _436 = (((_420.z - _419) * _344) + _419) * cbMtdParam._m0[14u].z;
    float _440 = _434 - (_434 * _383);
    float _441 = _435 - (_435 * _383);
    float _442 = _436 - (_436 * _383);
    vec4 _460 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _465 = ceil(_374);
    float _3885 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _466 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _480 = (((cbMtdParam._m0[9u].x - cbMtdParam._m0[15u].x) * _466) + cbMtdParam._m0[15u].x) * _460.x;
    float _482 = (((cbMtdParam._m0[9u].y - cbMtdParam._m0[15u].y) * _466) + cbMtdParam._m0[15u].y) * _460.y;
    float _484 = (((cbMtdParam._m0[9u].z - cbMtdParam._m0[15u].z) * _466) + cbMtdParam._m0[15u].z) * _460.z;
    float _488 = exp2(log2(_383) * cbMtdParam._m0[19u].x);
    float _495 = (_488 * (_440 - _480)) + _480;
    float _496 = (_488 * (_441 - _482)) + _482;
    float _497 = (_488 * (_442 - _484)) + _484;
    vec4 _510 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _516 = cbMtdParam._m0[17u].x + _510.x;
    vec4 _528 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _532 = _528.z;
    float _535 = (_528.x * 2.0) + (-1.0);
    float _536 = (_528.y * 2.0) + (-1.0);
    float _537 = dot(vec2(_535, _536), vec2(_535, _536));
    float _3896 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _542 = sqrt(1.0 - (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))));
    float _553 = (cbMtdParam._m0[24u].z * _287) + TEXCOORD.x;
    float _554 = (cbMtdParam._m0[24u].w * _287) + TEXCOORD.y;
    float _560 = _318 * cbMtdParam._m0[20u].z;
    float _561 = _326 * cbMtdParam._m0[20u].y;
    float _563 = (-0.0) - (cbMtdParam._m0[20u].y * _323);
    float _564 = fract(_560);
    float _566 = fract(_560 + 0.5);
    float _577 = abs((_564 * 2.0) + (-1.0));
    vec4 _593 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_11, SS_DiffuseMap), vec2((((_564 * _563) + _553) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_561 * _564) + _554) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _595 = _593.x;
    float _596 = _593.y;
    float _597 = _593.z;
    vec4 _598 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_11, SS_DiffuseMap), vec2((((_566 * _563) + _553) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_561 * _566) + _554) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _612 = (((_598.x - _595) * _577) + _595) * cbMtdParam._m0[16u].x;
    float _613 = (((_598.y - _596) * _577) + _596) * cbMtdParam._m0[16u].y;
    float _614 = (((_598.z - _597) * _577) + _597) * cbMtdParam._m0[16u].z;
    float _618 = _612 - (_612 * _466);
    float _619 = _613 - (_613 * _466);
    float _620 = _614 - (_614 * _466);
    float _637 = _318 * cbMtdParam._m0[21u].w;
    float _638 = _326 * cbMtdParam._m0[22u].x;
    float _640 = (-0.0) - (cbMtdParam._m0[22u].x * _323);
    float _641 = fract(_637);
    float _643 = fract(_637 + 0.5);
    float _654 = abs((_641 * 2.0) + (-1.0));
    vec4 _670 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_641 * _640) + TEXCOORD.x) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((_638 * _641) + TEXCOORD.y) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _675 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_643 * _640) + TEXCOORD.x) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((_638 * _643) + TEXCOORD.y) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _686 = ((_675.x - _670.x) * _654) + _670.x;
    float _693 = exp2(log2(_686 * cbMtdParam._m0[21u].z) * cbMtdParam._m0[21u].y);
    float _694 = isnan(cbMtdParam._m0[21u].x) ? _693 : (isnan(_693) ? cbMtdParam._m0[21u].x : max(_693, cbMtdParam._m0[21u].x));
    float _695 = isnan(cbMtdParam._m0[20u].x) ? _694 : (isnan(_694) ? cbMtdParam._m0[20u].x : min(_694, cbMtdParam._m0[20u].x));
    float _716 = _318 * cbMtdParam._m0[17u].z;
    float _717 = _326 * cbMtdParam._m0[17u].w;
    float _719 = (-0.0) - (cbMtdParam._m0[17u].w * _323);
    float _720 = fract(_716);
    float _722 = fract(_716 + 0.5);
    float _733 = abs((_720 * 2.0) + (-1.0));
    vec4 _750 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_720 * _719) + TEXCOORD.x) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_717 * _720) + TEXCOORD.y) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _752 = _750.x;
    float _753 = _750.y;
    float _754 = _750.z;
    vec4 _755 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_722 * _719) + TEXCOORD.x) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_717 * _722) + TEXCOORD.y) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _798 = fma(_542, _242, fma(_536, _234 * TANGENT.x, (_220 * _212) * _535));
    float _801 = fma(_542, _243, fma(_536, _234 * TANGENT.y, (_220 * _213) * _535));
    float _804 = fma(_542, _244, fma(_536, _234 * TANGENT.z, (_220 * _214) * _535));
    float _808 = inversesqrt(dot(vec3(_798, _801, _804), vec3(_798, _801, _804)));
    float _809 = _808 * _798;
    float _810 = _808 * _801;
    float _811 = _808 * _804;
    float _3917 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _812 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _3928 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _3939 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _3950 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _3961 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _816 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _832 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _872 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _882 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _872);
    float _883 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _872);
    float _884 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _872);
    float _888 = inversesqrt(dot(vec3(_882, _883, _884), vec3(_882, _883, _884)));
    float _889 = _882 * _888;
    float _890 = _883 * _888;
    float _891 = _884 * _888;
    vec4 _896 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _898 = _896.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1120 = sqrt(((_882 * _882) + (_883 * _883)) + (_884 * _884));
        float _1126 = (cbMatDynParam._m0[5u].x * _1120) + cbMatDynParam._m0[5u].y;
        float _3972 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1131 = (cbMatDynParam._m0[5u].z * _1120) + cbMatDynParam._m0[5u].w;
        float _3983 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) - _1127)) + _1127) < ((_898 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _910 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _911 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _913 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _915 = _913.w;
    float _934 = fma(_811, cbSceneParam._m0[5u].z, fma(_810, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _809));
    float _937 = fma(_811, cbSceneParam._m0[6u].z, fma(_810, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _809));
    float _940 = fma(_811, cbSceneParam._m0[7u].z, fma(_810, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _809));
    vec4 _942 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _953 = (((_942.y - _812) + (_942.w * _812)) * cbMtdParam._m0[3u].x) + _812;
    uint _966 = uint(roundEven(NORMAL.w)) * 13u;
    uint _967 = _966 + 9u;
    uint _968 = _967 + uint(cbMatDynParam._m0[0u].w);
    float _974 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0)))) * cbInstanceData._m0[_968].x;
    float _975 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0)))) * cbInstanceData._m0[_968].y;
    float _976 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0)))) * cbInstanceData._m0[_968].z;
    float _3994 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _977 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _4005 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _978 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _4016 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _979 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    vec4 _980 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _985 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _996 = (((_985.x - _816) + (_985.w * _816)) * cbMtdParam._m0[3u].x) + _816;
    float _1009 = (cbMtdParam._m0[3u].x * (((_977 * _915) - _977) + _980.x)) + _977;
    float _1010 = (cbMtdParam._m0[3u].x * (((_978 * _915) - _978) + _980.y)) + _978;
    float _1011 = (cbMtdParam._m0[3u].x * (((_979 * _915) - _979) + _980.z)) + _979;
    float _1012 = 1.0 - _996;
    float _1013 = _1012 * _1009;
    float _1014 = _1012 * _1010;
    float _1015 = _1012 * _1011;
    float _1020 = (_1009 + (-0.039999999105930328369140625)) * _996;
    float _1021 = (_1010 + (-0.039999999105930328369140625)) * _996;
    float _1022 = (_1011 + (-0.039999999105930328369140625)) * _996;
    float _1023 = _1020 + 0.039999999105930328369140625;
    float _1025 = _1021 + 0.039999999105930328369140625;
    float _1026 = _1022 + 0.039999999105930328369140625;
    vec4 _1035 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _910, cbSceneParam._m0[86u].y * _911));
    float _1038 = _1035.x * TEXCOORD_4;
    float _1039 = dot(vec3(_809, _810, _811), vec3(_889, _890, _891));
    float _1042 = _1039 * 2.0;
    float _1046 = (_1042 * _809) - _889;
    float _1047 = (_1042 * _810) - _890;
    float _1048 = (_1042 * _811) - _891;
    float _1052 = abs(dot(vec3(_889, _890, _891), vec3(_809, _810, _811)));
    float _4027 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _1054 = sqrt(_953);
    float _1066 = exp2((_1054 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1054 * 3.0));
    float _1072 = (1.0 - _1066) * ((_1054 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1073 = _1066 * _1054;
    float _1101 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1105 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1109 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1439;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1165 = fma(_1109, cbModelParam._m0[26u].z, fma(_1105, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1101));
        float _1169 = fma(_1109, cbModelParam._m0[27u].z, fma(_1105, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1101));
        float _1173 = fma(_1109, cbModelParam._m0[28u].z, fma(_1105, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1101));
        float _1197 = _1101 + _809;
        float _1198 = _1105 + _810;
        float _1199 = _1109 + _811;
        float _1209 = fma(_1199, cbModelParam._m0[26u].z, fma(_1198, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1197)) - _1165;
        float _1210 = fma(_1199, cbModelParam._m0[27u].z, fma(_1198, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1197)) - _1169;
        float _1211 = fma(_1199, cbModelParam._m0[28u].z, fma(_1198, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1197)) - _1173;
        float _1215 = inversesqrt(dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211)));
        float _1228 = ((_1215 * _1209) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1165 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1229 = ((_1215 * _1210) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1169 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1230 = ((_1215 * _1211) / cbModelParam._m0[34u].z) + ((((((_1173 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        float _1267 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1233.x + (-0.5));
        float _1269 = _1267 * (_1233.y + (-0.5));
        float _1270 = _1267 * (_1233.z + (-0.5));
        float _1277 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1240.x + (-0.5));
        float _1279 = _1277 * (_1240.y + (-0.5));
        float _1280 = _1277 * (_1240.z + (-0.5));
        float _1287 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1247.x + (-0.5));
        float _1289 = _1287 * (_1247.y + (-0.5));
        float _1290 = _1287 * (_1247.z + (-0.5));
        float _1297 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1254.x + (-0.5));
        float _1299 = _1297 * (_1254.y + (-0.5));
        float _1300 = _1297 * (_1254.z + (-0.5));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = _1268 * 0.5;
        float _1305 = _1278 * 0.5;
        float _1306 = _1288 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1321 = (dot(vec3(_809, _810, _811), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _4053 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1331 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _4064 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _4075 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_1333 + 1.0))) + _1338) * _1301;
        float _1348 = _1269 * 0.5;
        float _1349 = _1279 * 0.5;
        float _1350 = _1289 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_809, _810, _811), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _4086 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _4097 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _4108 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_1375 + 1.0))) + _1380) * _1302;
        float _1390 = _1270 * 0.5;
        float _1391 = _1280 * 0.5;
        float _1392 = _1290 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_809, _810, _811), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _4119 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _4130 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _4141 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_1417 + 1.0))) + _1422) * _1303;
        _1439 = _1270;
        _1441 = _1269;
        _1442 = _1268;
        _1443 = _1280;
        _1444 = _1279;
        _1445 = _1278;
        _1446 = _1290;
        _1447 = _1289;
        _1448 = _1288;
        _1449 = _1303;
        _1450 = _1302;
        _1451 = _1301;
        _1452 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
        _1453 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
        _1454 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
    }
    else
    {
        _1439 = _1440;
        _1441 = _1440;
        _1442 = _1440;
        _1443 = _1440;
        _1444 = _1440;
        _1445 = _1440;
        _1446 = _1440;
        _1447 = _1440;
        _1448 = _1440;
        _1449 = _1440;
        _1450 = _1440;
        _1451 = _1440;
        _1452 = 0.0;
        _1453 = 0.0;
        _1454 = 0.0;
    }
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1483 = fma(_1109, cbModelParam._m0[30u].z, fma(_1105, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1101));
        float _1487 = fma(_1109, cbModelParam._m0[31u].z, fma(_1105, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1101));
        float _1491 = fma(_1109, cbModelParam._m0[32u].z, fma(_1105, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1101));
        float _1514 = _1101 + _809;
        float _1515 = _1105 + _810;
        float _1516 = _1109 + _811;
        float _1526 = fma(_1516, cbModelParam._m0[30u].z, fma(_1515, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1514)) - _1483;
        float _1527 = fma(_1516, cbModelParam._m0[31u].z, fma(_1515, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1514)) - _1487;
        float _1528 = fma(_1516, cbModelParam._m0[32u].z, fma(_1515, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1514)) - _1491;
        float _1532 = inversesqrt(dot(vec3(_1526, _1527, _1528), vec3(_1526, _1527, _1528)));
        float _1545 = ((_1532 * _1526) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1483 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1546 = ((_1532 * _1527) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1487 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1547 = ((_1532 * _1528) / cbModelParam._m0[35u].z) + ((((((_1491 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1549 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1545, _1546, _1547), 0.0);
        vec4 _1556 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1545, _1546, _1547), 0.0);
        vec4 _1563 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1545, _1546, _1547), 0.0);
        vec4 _1570 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1545, _1546, _1547), 0.0);
        float _1582 = exp2((_1549.w + (-0.5)) * 20.0) * 2.0;
        float _1583 = _1582 * (_1549.x + (-0.5));
        float _1584 = _1582 * (_1549.y + (-0.5));
        float _1585 = _1582 * (_1549.z + (-0.5));
        float _1592 = exp2((_1556.w + (-0.5)) * 20.0) * 2.0;
        float _1593 = _1592 * (_1556.x + (-0.5));
        float _1594 = _1592 * (_1556.y + (-0.5));
        float _1595 = _1592 * (_1556.z + (-0.5));
        float _1602 = exp2((_1563.w + (-0.5)) * 20.0) * 2.0;
        float _1603 = _1602 * (_1563.x + (-0.5));
        float _1604 = _1602 * (_1563.y + (-0.5));
        float _1605 = _1602 * (_1563.z + (-0.5));
        float _1612 = exp2((_1570.w + (-0.5)) * 20.0) * 2.0;
        float _1613 = _1612 * (_1570.x + (-0.5));
        float _1614 = _1612 * (_1570.y + (-0.5));
        float _1615 = _1612 * (_1570.z + (-0.5));
        float _1616 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1617 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1618 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1619 = _1583 * 0.5;
        float _1620 = _1593 * 0.5;
        float _1621 = _1603 * 0.5;
        float _1622 = dot(vec3(_1619, _1620, _1621), vec3(_1619, _1620, _1621));
        float _1627 = (_1622 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1622);
        float _1635 = (dot(vec3(_809, _810, _811), vec3(_1627 * _1619, _1627 * _1620, _1627 * _1621)) + 1.0) * 0.5;
        float _4182 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1644 = sqrt(((_1620 * _1620) + (_1619 * _1619)) + (_1621 * _1621)) / (_1616 + 9.9999997473787516355514526367188e-06);
        float _4193 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1646 = _1645 * 2.0;
        float _1650 = (1.0 - _1645) / (_1645 + 1.0);
        float _4204 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1660 = ((((1.0 - _1651) * (_1646 + 2.0)) * exp2(log2(isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_1646 + 1.0))) + _1651) * _1616;
        float _1661 = _1584 * 0.5;
        float _1662 = _1594 * 0.5;
        float _1663 = _1604 * 0.5;
        float _1664 = dot(vec3(_1661, _1662, _1663), vec3(_1661, _1662, _1663));
        float _1669 = (_1664 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1664);
        float _1677 = (dot(vec3(_809, _810, _811), vec3(_1669 * _1661, _1669 * _1662, _1669 * _1663)) + 1.0) * 0.5;
        float _4215 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1686 = sqrt(((_1662 * _1662) + (_1661 * _1661)) + (_1663 * _1663)) / (_1617 + 9.9999997473787516355514526367188e-06);
        float _4226 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1687 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1688 = _1687 * 2.0;
        float _1692 = (1.0 - _1687) / (_1687 + 1.0);
        float _4237 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1702 = ((((1.0 - _1693) * (_1688 + 2.0)) * exp2(log2(isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_1688 + 1.0))) + _1693) * _1617;
        float _1703 = _1585 * 0.5;
        float _1704 = _1595 * 0.5;
        float _1705 = _1605 * 0.5;
        float _1706 = dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705));
        float _1711 = (_1706 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1706);
        float _1719 = (dot(vec3(_809, _810, _811), vec3(_1711 * _1703, _1711 * _1704, _1711 * _1705)) + 1.0) * 0.5;
        float _4248 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1728 = sqrt(((_1704 * _1704) + (_1703 * _1703)) + (_1705 * _1705)) / (_1618 + 9.9999997473787516355514526367188e-06);
        float _4259 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1730 = _1729 * 2.0;
        float _1734 = (1.0 - _1729) / (_1729 + 1.0);
        float _4270 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1744 = ((((1.0 - _1735) * (_1730 + 2.0)) * exp2(log2(isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_1730 + 1.0))) + _1735) * _1618;
        _1752 = _1585;
        _1753 = _1584;
        _1754 = _1583;
        _1755 = _1595;
        _1756 = _1594;
        _1757 = _1593;
        _1758 = _1605;
        _1759 = _1604;
        _1760 = _1603;
        _1761 = _1618;
        _1762 = _1617;
        _1763 = _1616;
        _1764 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)));
        _1765 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)));
        _1766 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)));
    }
    else
    {
        _1752 = _1440;
        _1753 = _1440;
        _1754 = _1440;
        _1755 = _1440;
        _1756 = _1440;
        _1757 = _1440;
        _1758 = _1440;
        _1759 = _1440;
        _1760 = _1440;
        _1761 = _1440;
        _1762 = _1440;
        _1763 = _1440;
        _1764 = 0.0;
        _1765 = 0.0;
        _1766 = 0.0;
    }
    float _1776 = (cbModelParam._m0[1u].x * (_1764 - _1452)) + _1452;
    float _1777 = (cbModelParam._m0[1u].x * (_1765 - _1453)) + _1453;
    float _1778 = (cbModelParam._m0[1u].x * (_1766 - _1454)) + _1454;
    float _1799 = fma(_1778, cbSceneParam._m0[89u].z, fma(_1777, cbSceneParam._m0[89u].y, _1776 * cbSceneParam._m0[89u].x));
    float _1802 = fma(_1778, cbSceneParam._m0[90u].z, fma(_1777, cbSceneParam._m0[90u].y, _1776 * cbSceneParam._m0[90u].x));
    float _1805 = fma(_1778, cbSceneParam._m0[91u].z, fma(_1777, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1776));
    float _1820 = _1046 * 0.5;
    float _1821 = _1047 * 0.5;
    float _1822 = _1048 * 0.5;
    float _1823 = dot(vec4(_1820, _1821, _1822, 1.0), vec4(_1754, _1757, _1760, _1763));
    float _1826 = dot(vec4(_1820, _1821, _1822, 1.0), vec4(_1753, _1756, _1759, _1762));
    float _1829 = dot(vec4(_1820, _1821, _1822, 1.0), vec4(_1752, _1755, _1758, _1761));
    float _1863;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1836 = dot(vec4(_1820, _1821, _1822, 1.0), vec4(_1439, _1443, _1446, _1449));
        float _1840 = dot(vec4(_1820, _1821, _1822, 1.0), vec4(_1441, _1444, _1447, _1450));
        float _1844 = dot(vec4(_1820, _1821, _1822, 1.0), vec4(_1442, _1445, _1448, _1451));
        float _1851 = dot(vec4(cbModelParam._m0[39u]), vec4(_1820, _1821, _1822, 1.0));
        _1863 = dot(vec3(isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0)), isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0)), isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1851) ? 0.0 : (isnan(0.0) ? _1851 : max(0.0, _1851))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1863 = 1.0;
    }
    float _1874;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1865 = dot(vec4(cbModelParam._m0[40u]), vec4(_1820, _1821, _1822, 1.0));
        _1874 = dot(vec3(isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0)), isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0)), isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1865) ? 0.0 : (isnan(0.0) ? _1865 : max(0.0, _1865))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1874 = 1.0;
    }
    float _1878 = (_1874 * cbModelParam._m0[1u].x) + (_1863 * (1.0 - cbModelParam._m0[1u].x));
    float _1888 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _953);
    float _1889 = isnan(_1888) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1888 : min(cbModelParam._m0[25u].z, _1888));
    float _1969;
    float _1971;
    float _1973;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1936 = fma(_1109, cbModelParam._m0[13u].z, fma(_1105, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1101)) + cbModelParam._m0[13u].w;
        float _1940 = fma(_1109, cbModelParam._m0[14u].z, fma(_1105, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1101)) + cbModelParam._m0[14u].w;
        float _1944 = fma(_1109, cbModelParam._m0[15u].z, fma(_1105, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1101)) + cbModelParam._m0[15u].w;
        float _1947 = fma(_1048, cbModelParam._m0[13u].z, fma(_1047, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1046));
        float _1950 = fma(_1048, cbModelParam._m0[14u].z, fma(_1047, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1046));
        float _1953 = fma(_1048, cbModelParam._m0[15u].z, fma(_1047, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1046));
        float _1981;
        if (_1947 > 0.0)
        {
            _1981 = abs((1.0 - _1936) / _1947);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1936 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1981 = frontier_phi_19_17_ladder;
        }
        float _2204;
        if (_1950 > 0.0)
        {
            _2204 = abs((1.0 - _1940) / _1950);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1950 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1940 + 1.0) / _1950);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2204 = frontier_phi_28_24_ladder;
        }
        float _2461;
        if (_1953 > 0.0)
        {
            _2461 = abs((1.0 - _1944) / _1953);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1944 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2461 = frontier_phi_40_35_ladder;
        }
        float _2463 = isnan(_2204) ? _1981 : (isnan(_1981) ? _2204 : min(_1981, _2204));
        float _2464 = isnan(_2461) ? _2463 : (isnan(_2463) ? _2461 : min(_2463, _2461));
        float _2468 = (_2464 * _1947) + _1936;
        float _2469 = (_2464 * _1950) + _1940;
        float _2470 = (_2464 * _1953) + _1944;
        float _2471 = _2464 * 9.9999997473787516355514526367188e-05;
        float _2473 = (-1.0) - _2471;
        float _2475 = _2471 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2470 > _2475) || ((_2470 < _2473) || ((_2469 > _2475) || ((_2469 < _2473) || ((_2468 < _2473) || (_2468 > _2475))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2598 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2470, cbModelParam._m0[9u].z, fma(_2469, cbModelParam._m0[9u].y, _2468 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2470, cbModelParam._m0[10u].z, fma(_2469, cbModelParam._m0[10u].y, _2468 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2470, cbModelParam._m0[11u].z, fma(_2469, cbModelParam._m0[11u].y, _2468 * cbModelParam._m0[11u].x))), _1889);
            frontier_phi_18_40_ladder = _2598.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2598.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2598.x * cbModelParam._m0[1u].y;
        }
        _1969 = frontier_phi_18_40_ladder_2;
        _1971 = frontier_phi_18_40_ladder_1;
        _1973 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1957 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1046, _1047, _1048), _1889);
        _1969 = _1957.x * cbModelParam._m0[1u].y;
        _1971 = _1957.y * cbModelParam._m0[1u].y;
        _1973 = _1957.z * cbModelParam._m0[1u].y;
    }
    float _1977 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _953);
    float _1978 = isnan(_1977) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1977 : min(cbModelParam._m0[25u].w, _1977));
    float _2067;
    float _2069;
    float _2071;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2031 = fma(_1109, cbModelParam._m0[21u].z, fma(_1105, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1101)) + cbModelParam._m0[21u].w;
        float _2035 = fma(_1109, cbModelParam._m0[22u].z, fma(_1105, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1101)) + cbModelParam._m0[22u].w;
        float _2039 = fma(_1109, cbModelParam._m0[23u].z, fma(_1105, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1101)) + cbModelParam._m0[23u].w;
        float _2042 = fma(_1048, cbModelParam._m0[21u].z, fma(_1047, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1046));
        float _2045 = fma(_1048, cbModelParam._m0[22u].z, fma(_1047, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1046));
        float _2048 = fma(_1048, cbModelParam._m0[23u].z, fma(_1047, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1046));
        float _2209;
        if (_2042 > 0.0)
        {
            _2209 = abs((1.0 - _2031) / _2042);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2042 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2031 + 1.0) / _2042);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2209 = frontier_phi_30_26_ladder;
        }
        float _2488;
        if (_2045 > 0.0)
        {
            _2488 = abs((1.0 - _2035) / _2045);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2045 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2035 + 1.0) / _2045);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2488 = frontier_phi_42_37_ladder;
        }
        float _2701;
        if (_2048 > 0.0)
        {
            _2701 = abs((1.0 - _2039) / _2048);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2048 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2039 + 1.0) / _2048);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2701 = frontier_phi_51_48_ladder;
        }
        float _2703 = isnan(_2488) ? _2209 : (isnan(_2209) ? _2488 : min(_2209, _2488));
        float _2704 = isnan(_2701) ? _2703 : (isnan(_2703) ? _2701 : min(_2703, _2701));
        float _2708 = (_2704 * _2042) + _2031;
        float _2709 = (_2704 * _2045) + _2035;
        float _2710 = (_2704 * _2048) + _2039;
        float _2711 = _2704 * 9.9999997473787516355514526367188e-05;
        float _2712 = (-1.0) - _2711;
        float _2714 = _2711 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2710 > _2714) || ((_2710 < _2712) || ((_2709 > _2714) || ((_2709 < _2712) || ((_2708 < _2712) || (_2708 > _2714))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2927 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2710, cbModelParam._m0[17u].z, fma(_2709, cbModelParam._m0[17u].y, _2708 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2710, cbModelParam._m0[18u].z, fma(_2709, cbModelParam._m0[18u].y, _2708 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2710, cbModelParam._m0[19u].z, fma(_2709, cbModelParam._m0[19u].y, _2708 * cbModelParam._m0[19u].x))), _1978);
            frontier_phi_27_51_ladder = _2927.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2927.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2927.x * cbModelParam._m0[1u].z;
        }
        _2067 = frontier_phi_27_51_ladder_2;
        _2069 = frontier_phi_27_51_ladder_1;
        _2071 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2051 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1046, _1047, _1048), _1978);
        _2067 = _2051.x * cbModelParam._m0[1u].z;
        _2069 = _2051.y * cbModelParam._m0[1u].z;
        _2071 = _2051.z * cbModelParam._m0[1u].z;
    }
    float _2084 = (((_1072 * _1023) + _1073) * _1038) * ((cbModelParam._m0[1u].w * (_2067 - _1969)) + _1969);
    float _2086 = (((_1072 * _1025) + _1073) * _1038) * ((cbModelParam._m0[1u].w * (_2069 - _1971)) + _1971);
    float _2088 = (((_1072 * _1026) + _1073) * _1038) * ((cbModelParam._m0[1u].w * (_2071 - _1973)) + _1973);
    float _2091 = fma(_2088, cbSceneParam._m0[89u].z, fma(_2086, cbSceneParam._m0[89u].y, _2084 * cbSceneParam._m0[89u].x));
    float _2094 = fma(_2088, cbSceneParam._m0[90u].z, fma(_2086, cbSceneParam._m0[90u].y, _2084 * cbSceneParam._m0[90u].x));
    float _2097 = fma(_2088, cbSceneParam._m0[91u].z, fma(_2086, cbSceneParam._m0[91u].y, _2084 * cbSceneParam._m0[91u].x));
    vec4 _2105 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_910, _911));
    float _2107 = _2105.w;
    float _2119 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2107);
    float _2120 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2107);
    float _2121 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2107);
    uvec4 _2125 = floatBitsToUint(cbInstanceData._m0[_966 + 5u]);
    uint _2127 = _2125.x * 14u;
    uint _2128 = _2127 + 13u;
    float _2135 = _1038 + (-1.0);
    float _2140 = (cbLight._m0[_2128].x * _2135) + 1.0;
    float _2141 = (cbLight._m0[_2128].y * _2135) + 1.0;
    float _2142 = (cbLight._m0[_2128].z * _2135) + 1.0;
    float _2143 = (cbLight._m0[_2128].w * _2135) + 1.0;
    uint _2144 = _2127 + 5u;
    float _2150 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
    uint _2154 = _2127 + 4u;
    float _2163 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
    uint _2167 = _2127 | 1u;
    float _2178 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_809, _810, _811));
    float _2181 = dot(vec3(cbLight._m0[_2167].xyz), vec3(_809, _810, _811));
    float _4406 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _4417 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2186 = (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * 0.3183098733425140380859375;
    float _2188 = (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * 0.3183098733425140380859375;
    float _2195 = ((cbLight._m0[_2144].x * _2150) * _2188) + (((cbLight._m0[_2154].x * _2119) * _2163) * _2186);
    float _2196 = ((_2150 * cbLight._m0[_2144].y) * _2188) + (((cbLight._m0[_2154].y * _2120) * _2163) * _2186);
    float _2197 = ((_2150 * cbLight._m0[_2144].z) * _2188) + (((cbLight._m0[_2154].z * _2121) * _2163) * _2186);
    uvec4 _2201 = floatBitsToUint(cbLight._m0[_2127 + 12u]);
    bool _2203 = _2201.x == 0u;
    float _2214;
    float _2216;
    float _2218;
    if (_2203)
    {
        _2214 = _2195;
        _2216 = _2196;
        _2218 = _2197;
    }
    else
    {
        uint _2222 = _2127 + 6u;
        float _2238 = (dot(vec3(cbLight._m0[_2127 + 2u].xyz), vec3(_809, _810, _811)) * 0.5) + 0.5;
        float _2239 = _2238 * _2238;
        float _4428 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2240 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _2241 = isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0));
        _2214 = (((cbLight._m0[_2222].x * 0.3183098733425140380859375) * _2240) * _2241) + _2195;
        _2216 = (((cbLight._m0[_2222].y * 0.3183098733425140380859375) * _2240) * _2241) + _2196;
        _2218 = (((cbLight._m0[_2222].z * 0.3183098733425140380859375) * _2240) * _2241) + _2197;
    }
    bool _2221 = _2201.y == 0u;
    float _2259;
    float _2261;
    float _2263;
    if (_2221)
    {
        _2259 = _2214;
        _2261 = _2216;
        _2263 = _2218;
    }
    else
    {
        uint _2432 = _2127 + 7u;
        float _2448 = (dot(vec3(cbLight._m0[_2127 + 3u].xyz), vec3(_809, _810, _811)) * 0.5) + 0.5;
        float _2449 = _2448 * _2448;
        float _4444 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2450 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _2451 = isnan(1.0) ? _2143 : (isnan(_2143) ? 1.0 : min(_2143, 1.0));
        _2259 = (((cbLight._m0[_2432].x * 0.3183098733425140380859375) * _2450) * _2451) + _2214;
        _2261 = (((cbLight._m0[_2432].y * 0.3183098733425140380859375) * _2450) * _2451) + _2216;
        _2263 = (((cbLight._m0[_2432].z * 0.3183098733425140380859375) * _2450) * _2451) + _2218;
    }
    uint _2266 = _2127 + 8u;
    float _2279 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2127].w)) * _953) * 0.949999988079071044921875);
    float _2280 = _2279 * _2279;
    float _2281 = cbLight._m0[_2127].x + _889;
    float _2282 = cbLight._m0[_2127].y + _890;
    float _2283 = cbLight._m0[_2127].z + _891;
    float _2287 = inversesqrt(dot(vec3(_2281, _2282, _2283), vec3(_2281, _2282, _2283)));
    float _2288 = _2287 * _2281;
    float _2289 = _2287 * _2282;
    float _2290 = _2287 * _2283;
    float _2291 = dot(vec3(_809, _810, _811), vec3(cbLight._m0[_2127].xyz));
    float _4460 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2294 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
    float _4471 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _2295 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
    float _2296 = dot(vec3(_809, _810, _811), vec3(_2288, _2289, _2290));
    float _4482 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2299 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
    float _2300 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_2288, _2289, _2290));
    float _4493 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _2304 = _2280 * _2280;
    float _2308 = ((_2299 * _2299) * (_2304 + (-1.0))) + 1.0;
    float _2316 = exp2(log2(1.0 - (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0)))) * 5.0);
    float _2317 = 0.959999978542327880859375 - _1020;
    float _2319 = 0.959999978542327880859375 - _1021;
    float _2320 = 0.959999978542327880859375 - _1022;
    float _2327 = 1.0 - _2280;
    float _2338 = (0.5 / (((_2295 * ((_2294 * _2327) + _2280)) + 9.9999999392252902907785028219223e-09) + (((_2295 * _2327) + _2280) * _2294))) * _2294;
    float _4504 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2340 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_2304 / ((_2308 * _2308) * 3.141590118408203125));
    uint _2354 = _2127 + 9u;
    float _2365 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2167].w)) * _953) * 0.949999988079071044921875);
    float _2366 = _2365 * _2365;
    float _2367 = cbLight._m0[_2167].x + _889;
    float _2368 = cbLight._m0[_2167].y + _890;
    float _2369 = cbLight._m0[_2167].z + _891;
    float _2373 = inversesqrt(dot(vec3(_2367, _2368, _2369), vec3(_2367, _2368, _2369)));
    float _2374 = _2373 * _2367;
    float _2375 = _2373 * _2368;
    float _2376 = _2373 * _2369;
    float _2377 = dot(vec3(_809, _810, _811), vec3(cbLight._m0[_2167].xyz));
    float _4515 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2380 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
    float _2381 = dot(vec3(_809, _810, _811), vec3(_2374, _2375, _2376));
    float _4526 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2384 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
    float _2385 = dot(vec3(cbLight._m0[_2167].xyz), vec3(_2374, _2375, _2376));
    float _4537 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2389 = _2366 * _2366;
    float _2393 = ((_2384 * _2384) * (_2389 + (-1.0))) + 1.0;
    float _2400 = exp2(log2(1.0 - (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0)))) * 5.0);
    float _2407 = 1.0 - _2366;
    float _2417 = (0.5 / (((_2295 * ((_2380 * _2407) + _2366)) + 9.9999999392252902907785028219223e-09) + (((_2295 * _2407) + _2366) * _2380))) * _2380;
    float _4548 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2419 = (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * (_2389 / ((_2393 * _2393) * 3.141590118408203125));
    float _2429 = (((((_2400 * _2317) + _1023) * cbLight._m0[_2354].x) * _2419) * _2150) + ((((cbLight._m0[_2266].x * _2119) * ((_2316 * _2317) + _1023)) * _2340) * _2163);
    float _2430 = (((((_2400 * _2319) + _1025) * cbLight._m0[_2354].y) * _2419) * _2150) + ((((cbLight._m0[_2266].y * _2120) * ((_2316 * _2319) + _1025)) * _2340) * _2163);
    float _2431 = (((((_2400 * _2320) + _1026) * cbLight._m0[_2354].z) * _2419) * _2150) + ((((cbLight._m0[_2266].z * _2121) * ((_2316 * _2320) + _1026)) * _2340) * _2163);
    float _2493;
    float _2495;
    float _2497;
    if (_2203)
    {
        _2493 = _2429;
        _2495 = _2430;
        _2497 = _2431;
    }
    else
    {
        uint _2499 = _2127 + 2u;
        uint _2503 = _2127 + 10u;
        float _2517 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2499].w)) * _953) * 0.949999988079071044921875);
        float _2518 = _2517 * _2517;
        float _2519 = cbLight._m0[_2499].x + _889;
        float _2520 = cbLight._m0[_2499].y + _890;
        float _2521 = cbLight._m0[_2499].z + _891;
        float _2525 = inversesqrt(dot(vec3(_2519, _2520, _2521), vec3(_2519, _2520, _2521)));
        float _2526 = _2525 * _2519;
        float _2527 = _2525 * _2520;
        float _2528 = _2525 * _2521;
        float _2529 = dot(vec3(_809, _810, _811), vec3(cbLight._m0[_2499].xyz));
        float _4559 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2532 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _2533 = dot(vec3(_809, _810, _811), vec3(_2526, _2527, _2528));
        float _4570 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2536 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
        float _2537 = dot(vec3(cbLight._m0[_2499].xyz), vec3(_2526, _2527, _2528));
        float _4581 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2541 = _2518 * _2518;
        float _2545 = ((_2536 * _2536) * (_2541 + (-1.0))) + 1.0;
        float _2552 = exp2(log2(1.0 - (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0)))) * 5.0);
        float _2559 = 1.0 - _2518;
        float _2569 = (0.5 / (((_2295 * ((_2532 * _2559) + _2518)) + 9.9999999392252902907785028219223e-09) + (((_2295 * _2559) + _2518) * _2532))) * _2532;
        float _4592 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2571 = (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (_2541 / ((_2545 * _2545) * 3.141590118408203125));
        float _2572 = isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0));
        _2493 = (((((_2552 * _2317) + _1023) * cbLight._m0[_2503].x) * _2571) * _2572) + _2429;
        _2495 = (((((_2552 * _2319) + _1025) * cbLight._m0[_2503].y) * _2571) * _2572) + _2430;
        _2497 = (((((_2552 * _2320) + _1026) * cbLight._m0[_2503].z) * _2571) * _2572) + _2431;
    }
    float _2607;
    float _2609;
    float _2611;
    if (_2221)
    {
        _2607 = _2493;
        _2609 = _2495;
        _2611 = _2497;
    }
    else
    {
        uint _2618 = _2127 + 3u;
        uint _2622 = _2127 + 11u;
        float _2636 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2618].w)) * _953) * 0.949999988079071044921875);
        float _2637 = _2636 * _2636;
        float _2638 = cbLight._m0[_2618].x + _889;
        float _2639 = cbLight._m0[_2618].y + _890;
        float _2640 = cbLight._m0[_2618].z + _891;
        float _2644 = inversesqrt(dot(vec3(_2638, _2639, _2640), vec3(_2638, _2639, _2640)));
        float _2645 = _2644 * _2638;
        float _2646 = _2644 * _2639;
        float _2647 = _2644 * _2640;
        float _2648 = dot(vec3(_809, _810, _811), vec3(cbLight._m0[_2618].xyz));
        float _4608 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2651 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
        float _2652 = dot(vec3(_809, _810, _811), vec3(_2645, _2646, _2647));
        float _4619 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2655 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
        float _2656 = dot(vec3(cbLight._m0[_2618].xyz), vec3(_2645, _2646, _2647));
        float _4630 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2660 = _2637 * _2637;
        float _2664 = ((_2655 * _2655) * (_2660 + (-1.0))) + 1.0;
        float _2671 = exp2(log2(1.0 - (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0)))) * 5.0);
        float _2678 = 1.0 - _2637;
        float _2688 = (0.5 / (((_2295 * ((_2651 * _2678) + _2637)) + 9.9999999392252902907785028219223e-09) + (((_2295 * _2678) + _2637) * _2651))) * _2651;
        float _4641 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        float _2690 = (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (_2660 / ((_2664 * _2664) * 3.141590118408203125));
        float _2691 = isnan(1.0) ? _2143 : (isnan(_2143) ? 1.0 : min(_2143, 1.0));
        _2607 = (((((_2671 * _2317) + _1023) * cbLight._m0[_2622].x) * _2690) * _2691) + _2493;
        _2609 = (((((_2671 * _2319) + _1025) * cbLight._m0[_2622].y) * _2690) * _2691) + _2495;
        _2611 = (((((_2671 * _2320) + _1026) * cbLight._m0[_2622].z) * _2690) * _2691) + _2497;
    }
    float _2825;
    float _2827;
    float _2829;
    float _2831;
    float _2833;
    float _2835;
    if (_2125.y == 0u)
    {
        float _2766 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2767 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2766;
        float _2768 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2766;
        float _2769 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2766;
        uvec4 _2781 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2782 = _2781.x;
        uint _2793 = uint((float(_2781.y) * floor(float(uint(cbSceneParam._m0[85u].y * _911) / _2782))) + floor(float(uint(cbSceneParam._m0[85u].x * _910) / _2782)));
        float _2803 = (log2(_2769 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2804 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        uint _2807 = uint(isnan(14.0) ? _2804 : (isnan(_2804) ? 14.0 : min(_2804, 14.0)));
        uvec4 _2812 = texelFetch(g_lightClusterGridBuffer, int(((_2807 << 2u) + (_2793 << 6u)) >> 2u));
        uint _2813 = _2812.x;
        uint _2814 = _2781.z;
        float _2932;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        float _2942;
        if (((((1u << ((_2814 >> 4u) & 15u)) + 4294967295u) & _2813) == 0u) || ((_2814 & 240u) == 0u))
        {
            _2932 = 0.0;
            _2934 = 0.0;
            _2936 = 0.0;
            _2938 = 0.0;
            _2940 = 0.0;
            _2942 = 0.0;
        }
        else
        {
            float _2933;
            float _2935;
            float _2937;
            float _2939;
            float _2941;
            float _2943;
            float _3084 = 0.0;
            float _3085 = 0.0;
            float _3086 = 0.0;
            float _3087 = 0.0;
            float _3088 = 0.0;
            float _3089 = 0.0;
            uint _3090 = 0u;
            uint _3099;
            bool _3100;
            for (;;)
            {
                _3099 = texelFetch(g_lightClassification, int((((_2807 << 5u) + (_2793 << 9u)) + (_3090 << 2u)) >> 2u)).x;
                _3100 = _3099 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3100)
                {
                    frontier_phi_68_pred = _3086;
                    frontier_phi_68_pred_1 = _3089;
                    frontier_phi_68_pred_2 = _3088;
                    frontier_phi_68_pred_3 = _3087;
                    frontier_phi_68_pred_4 = _3085;
                    frontier_phi_68_pred_5 = _3084;
                }
                else
                {
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    uint _3235;
                    _3229 = _3084;
                    _3230 = _3085;
                    _3231 = _3086;
                    _3232 = _3087;
                    _3233 = _3088;
                    _3234 = _3089;
                    _3235 = _3099;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    for (;;)
                    {
                        uint _3239 = uint(findLSB(_3235)) + (_3090 << 5u);
                        uint _3236 = (_3235 + 4294967295u) & _3235;
                        uint _3241 = _3239 * 48u;
                        vec4 _3255 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3241)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 3u)).x));
                        uint _3261 = (_3239 * 48u) + 4u;
                        vec4 _3274 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3261)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 3u)).x));
                        uint _3280 = (_3239 * 48u) + 8u;
                        vec3 _3291 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3280)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 2u)).x));
                        float _3295 = _3255.x - _2767;
                        float _3296 = _3255.y - _2768;
                        float _3297 = _3255.z - _2769;
                        float _3298 = dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297));
                        float _3301 = inversesqrt(_3298);
                        float _3302 = _3301 * _3295;
                        float _3303 = _3301 * _3296;
                        float _3304 = _3301 * _3297;
                        float _3305 = dot(vec3(_934, _937, _940), vec3(_3302, _3303, _3304));
                        float _3310 = 1.0 - (_3298 * _3255.w);
                        float _4667 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                        float _3311 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                        float _3312 = sqrt(_3298) * _3274.w;
                        float _3315 = 1.39999997615814208984375 / (_3312 + 1.39999997615814208984375);
                        float _3316 = _3315 * _3315;
                        float _3319 = ((1.0 - _3316) * _3305) + _3316;
                        float _3322 = _3312 * _3312;
                        float _3326 = ((isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0))) * _3311) / ((_3322 * 0.699999988079071044921875) + 1.0);
                        float _3330 = (-0.0) - _2767;
                        float _3331 = (-0.0) - _2768;
                        float _3332 = (-0.0) - _2769;
                        float _3336 = inversesqrt(dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332)));
                        float _3337 = _3336 * _3330;
                        float _3338 = _3336 * _3331;
                        float _3339 = _3336 * _3332;
                        float _3346 = exp2(log2(1.0 / ((_3322 * 3.5) + 5.0)) * 0.25);
                        float _3347 = 1.0 - _1054;
                        float _3354 = sqrt(1.0 - ((1.0 - (_3347 * _3347)) * (1.0 - (_3346 * _3346))));
                        float _3355 = _3354 * _3354;
                        float _3356 = _3355 * _3355;
                        float _3357 = _3337 + _3302;
                        float _3358 = _3338 + _3303;
                        float _3359 = _3339 + _3304;
                        float _3363 = inversesqrt(dot(vec3(_3357, _3358, _3359), vec3(_3357, _3358, _3359)));
                        float _3367 = dot(vec3(_934, _937, _940), vec3(_3337, _3338, _3339));
                        float _4683 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                        float _3370 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                        float _3371 = dot(vec3(_934, _937, _940), vec3(_3363 * _3357, _3363 * _3358, _3363 * _3359));
                        float _4694 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                        float _3374 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                        float _3378 = ((_3374 * _3374) * (_3356 + (-1.0))) + 1.0;
                        float _3379 = _3315 * _3355;
                        float _3380 = _3379 * _3379;
                        float _3383 = ((1.0 - _3380) * _3305) + _3380;
                        float _4705 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                        float _3384 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                        float _3385 = 1.0 - _3355;
                        float _3395 = (0.5 / (((_3384 * ((_3370 * _3385) + _3355)) + 9.9999999392252902907785028219223e-09) + (((_3384 * _3385) + _3355) * _3370))) * _3384;
                        float _4716 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                        float _3406 = (((_3356 * 3.1415927410125732421875) * (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0)))) / ((_3378 * _3378) * ((_3322 * 2.1991131305694580078125) + 3.141590118408203125))) * _3311;
                        _3159 = (_3326 * _3274.x) + _3232;
                        _3160 = (_3326 * _3274.y) + _3233;
                        _3161 = (_3326 * _3274.z) + _3234;
                        _3156 = (_3406 * _3291.x) + _3229;
                        _3157 = (_3406 * _3291.y) + _3230;
                        _3158 = (_3406 * _3291.z) + _3231;
                        if (_3236 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3229 = _3156;
                            _3230 = _3157;
                            _3231 = _3158;
                            _3232 = _3159;
                            _3233 = _3160;
                            _3234 = _3161;
                            _3235 = _3236;
                        }
                    }
                    frontier_phi_68_pred = _3158;
                    frontier_phi_68_pred_1 = _3161;
                    frontier_phi_68_pred_2 = _3160;
                    frontier_phi_68_pred_3 = _3159;
                    frontier_phi_68_pred_4 = _3157;
                    frontier_phi_68_pred_5 = _3156;
                }
                _2937 = frontier_phi_68_pred;
                _2943 = frontier_phi_68_pred_1;
                _2941 = frontier_phi_68_pred_2;
                _2939 = frontier_phi_68_pred_3;
                _2935 = frontier_phi_68_pred_4;
                _2933 = frontier_phi_68_pred_5;
                uint _3091 = _3090 + 1u;
                if (_3091 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3084 = _2933;
                    _3085 = _2935;
                    _3086 = _2937;
                    _3087 = _2939;
                    _3088 = _2941;
                    _3089 = _2943;
                    _3090 = _3091;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2932 = _2933;
            _2934 = _2935;
            _2936 = _2937;
            _2938 = _2939;
            _2940 = _2941;
            _2942 = _2943;
        }
        uvec4 _2946 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2947 = _2946.z;
        uint _2949 = (_2947 >> 8u) & 15u;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        if (((4294967295u << _2949) & _2813) == 0u)
        {
            _3052 = _2932;
            _3054 = _2934;
            _3056 = _2936;
            _3058 = _2938;
            _3060 = _2940;
            _3062 = _2942;
        }
        else
        {
            float _3077 = inversesqrt(dot(vec3(_2767, _2768, _2769), vec3(_2767, _2768, _2769)));
            float _3078 = _3077 * _2767;
            float _3079 = _3077 * _2768;
            float _3080 = _3077 * _2769;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2949 < ((_2947 >> 12u) & 15u))
            {
                float _3053;
                float _3055;
                float _3057;
                float _3059;
                float _3061;
                float _3063;
                float _3212 = _2932;
                float _3213 = _2934;
                float _3214 = _2936;
                float _3215 = _2938;
                float _3216 = _2940;
                float _3217 = _2942;
                uint _3218 = _2949;
                uint _3227;
                bool _3228;
                for (;;)
                {
                    _3227 = texelFetch(g_lightClassification, int((((_2807 << 5u) + (_2793 << 9u)) + (_3218 << 2u)) >> 2u)).x;
                    _3228 = _3227 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3228)
                    {
                        frontier_phi_79_pred = _3217;
                        frontier_phi_79_pred_1 = _3216;
                        frontier_phi_79_pred_2 = _3215;
                        frontier_phi_79_pred_3 = _3214;
                        frontier_phi_79_pred_4 = _3213;
                        frontier_phi_79_pred_5 = _3212;
                    }
                    else
                    {
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3713;
                        float _3714;
                        float _3715;
                        float _3716;
                        float _3717;
                        float _3718;
                        float _3433 = _3212;
                        float _3434 = _3213;
                        float _3435 = _3214;
                        float _3436 = _3215;
                        float _3437 = _3216;
                        float _3438 = _3217;
                        uint _3439 = _3227;
                        uint _3440;
                        vec4 _3465;
                        float _3466;
                        vec4 _3481;
                        vec3 _3493;
                        vec4 _3508;
                        vec4 _3523;
                        float _3569;
                        bool _3570;
                        for (;;)
                        {
                            uint _3450 = ((_3218 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3439));
                            _3440 = (_3439 + 4294967295u) & _3439;
                            uint _3452 = _3450 * 40u;
                            _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            _3466 = _3465.w;
                            uint _3468 = (_3450 * 40u) + 4u;
                            _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            uint _3483 = (_3450 * 40u) + 8u;
                            _3493 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x));
                            uint _3495 = (_3450 * 40u) + 16u;
                            _3508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 3u)).x));
                            uint _3510 = (_3450 * 40u) + 20u;
                            _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            uint _3525 = (_3450 * 40u) + 24u;
                            vec4 _3538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 3u)).x));
                            uint _3544 = (_3450 * 40u) + 28u;
                            vec4 _3557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 3u)).x));
                            _3569 = fma(_2769, _3557.z, fma(_2768, _3557.y, _3557.x * _2767)) + _3557.w;
                            _3570 = !((fma(_2769, _3538.z, fma(_2768, _3538.y, _3538.x * _2767)) + _3538.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3570)
                            {
                                float _3597 = _3465.x - _2767;
                                float _3598 = _3465.y - _2768;
                                float _3599 = _3465.z - _2769;
                                float _3600 = dot(vec3(_3597, _3598, _3599), vec3(_3597, _3598, _3599));
                                float _3603 = inversesqrt(_3600);
                                float _3604 = _3603 * _3597;
                                float _3605 = _3603 * _3598;
                                float _3606 = _3603 * _3599;
                                float _3610 = 1.0 - (_3600 / (_3466 * _3466));
                                float _4727 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3611 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                                float _3615 = sqrt(_3600) * _3481.w;
                                float _3617 = 1.39999997615814208984375 / (_3615 + 1.39999997615814208984375);
                                float _3618 = _3617 * _3617;
                                float _3621 = ((1.0 - _3618) * dot(vec3(_3604, _3605, _3606), vec3(_934, _937, _940))) + _3618;
                                float _3624 = _3615 * _3615;
                                float _3628 = (fma(_2769, _3508.z, fma(_2768, _3508.y, _3508.x * _2767)) + _3508.w) / _3569;
                                float _3629 = (fma(_2769, _3523.z, fma(_2768, _3523.y, _3523.x * _2767)) + _3523.w) / _3569;
                                float _3633 = 1.0 - dot(vec2(_3628, _3629), vec2(_3628, _3629));
                                float _4743 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3634 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
                                float _3635 = _3634 * (((isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0))) * _3611) / ((_3624 * 0.699999988079071044921875) + 1.0));
                                float _3647 = exp2(log2(1.0 / ((_3624 * 3.5) + 5.0)) * 0.25);
                                float _3648 = 1.0 - _1054;
                                float _3655 = sqrt(1.0 - ((1.0 - (_3648 * _3648)) * (1.0 - (_3647 * _3647))));
                                float _3656 = _3655 * _3655;
                                float _3657 = _3656 * _3656;
                                float _3658 = _3604 - _3078;
                                float _3659 = _3605 - _3079;
                                float _3660 = _3606 - _3080;
                                float _3664 = inversesqrt(dot(vec3(_3658, _3659, _3660), vec3(_3658, _3659, _3660)));
                                float _3668 = dot(vec3(_934, _937, _940), vec3((-0.0) - _3078, (-0.0) - _3079, (-0.0) - _3080));
                                float _4754 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                                float _3671 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                                float _3672 = dot(vec3(_934, _937, _940), vec3(_3664 * _3658, _3664 * _3659, _3664 * _3660));
                                float _4765 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                                float _3675 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                                float _3679 = ((_3675 * _3675) * (_3657 + (-1.0))) + 1.0;
                                float _3680 = _3617 * _3656;
                                float _3681 = _3680 * _3680;
                                float _3687 = ((1.0 - _3681) * dot(vec3(_934, _937, _940), vec3(_3604, _3605, _3606))) + _3681;
                                float _4776 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                                float _3688 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                                float _3689 = 1.0 - _3656;
                                float _3699 = (0.5 / (((_3688 * ((_3671 * _3689) + _3656)) + 9.9999999392252902907785028219223e-09) + (((_3688 * _3689) + _3656) * _3671))) * _3688;
                                float _4787 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3709 = (_3634 * _3611) * (((_3657 * 3.1415927410125732421875) * (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0)))) / ((_3679 * _3679) * ((_3624 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3635 * _3481.z;
                                frontier_phi_85_pred_1 = _3635 * _3481.y;
                                frontier_phi_85_pred_2 = _3635 * _3481.x;
                                frontier_phi_85_pred_3 = _3709 * _3493.z;
                                frontier_phi_85_pred_4 = _3709 * _3493.y;
                                frontier_phi_85_pred_5 = _3709 * _3493.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3718 = frontier_phi_85_pred;
                            _3717 = frontier_phi_85_pred_1;
                            _3716 = frontier_phi_85_pred_2;
                            _3715 = frontier_phi_85_pred_3;
                            _3714 = frontier_phi_85_pred_4;
                            _3713 = frontier_phi_85_pred_5;
                            _3423 = _3716 + _3436;
                            _3424 = _3717 + _3437;
                            _3425 = _3718 + _3438;
                            _3420 = _3713 + _3433;
                            _3421 = _3714 + _3434;
                            _3422 = _3715 + _3435;
                            if (_3440 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3433 = _3420;
                                _3434 = _3421;
                                _3435 = _3422;
                                _3436 = _3423;
                                _3437 = _3424;
                                _3438 = _3425;
                                _3439 = _3440;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3425;
                        frontier_phi_79_pred_1 = _3424;
                        frontier_phi_79_pred_2 = _3423;
                        frontier_phi_79_pred_3 = _3422;
                        frontier_phi_79_pred_4 = _3421;
                        frontier_phi_79_pred_5 = _3420;
                    }
                    _3063 = frontier_phi_79_pred;
                    _3061 = frontier_phi_79_pred_1;
                    _3059 = frontier_phi_79_pred_2;
                    _3057 = frontier_phi_79_pred_3;
                    _3055 = frontier_phi_79_pred_4;
                    _3053 = frontier_phi_79_pred_5;
                    uint _3219 = _3218 + 1u;
                    if (_3219 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3212 = _3053;
                        _3213 = _3055;
                        _3214 = _3057;
                        _3215 = _3059;
                        _3216 = _3061;
                        _3217 = _3063;
                        _3218 = _3219;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3059;
                frontier_phi_60_61_ladder_1 = _3063;
                frontier_phi_60_61_ladder_2 = _3061;
                frontier_phi_60_61_ladder_3 = _3057;
                frontier_phi_60_61_ladder_4 = _3055;
                frontier_phi_60_61_ladder_5 = _3053;
            }
            else
            {
                frontier_phi_60_61_ladder = _2938;
                frontier_phi_60_61_ladder_1 = _2942;
                frontier_phi_60_61_ladder_2 = _2940;
                frontier_phi_60_61_ladder_3 = _2936;
                frontier_phi_60_61_ladder_4 = _2934;
                frontier_phi_60_61_ladder_5 = _2932;
            }
            _3052 = frontier_phi_60_61_ladder_5;
            _3054 = frontier_phi_60_61_ladder_4;
            _3056 = frontier_phi_60_61_ladder_3;
            _3058 = frontier_phi_60_61_ladder;
            _3060 = frontier_phi_60_61_ladder_2;
            _3062 = frontier_phi_60_61_ladder_1;
        }
        float _3067 = isnan(1.0) ? _1038 : (isnan(_1038) ? 1.0 : min(_1038, 1.0));
        _2825 = (_3067 * _3058) + _2259;
        _2827 = (_3067 * _3060) + _2261;
        _2829 = (_3067 * _3062) + _2263;
        _2831 = ((_3052 * _1023) * _3067) + _2607;
        _2833 = ((_3054 * _1025) * _3067) + _2609;
        _2835 = ((_3056 * _1026) * _3067) + _2611;
    }
    else
    {
        _2825 = _2259;
        _2827 = _2261;
        _2829 = _2263;
        _2831 = _2607;
        _2833 = _2609;
        _2835 = _2611;
    }
    uint _2841 = _967 + uint(cbMatDynParam._m0[0u].w);
    float _4803 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _4814 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _4825 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _2866 = (((isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0))) * (_2825 + ((isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))) * _1038))) + ((_2831 + ((isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0))) * _1878)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2841].x * ((((_618 + (_488 * _440)) - (_618 * _488)) + cbMtdParam._m0[13u].x) + ((((((_755.x - _752) * _733) + _752) * cbMtdParam._m0[11u].x) + ((cbMtdParam._m0[22u].y * _686) * cbMtdParam._m0[12u].x)) * _695)));
    float _2868 = ((cbInstanceData._m0[_2841].y * ((((_619 + (_488 * _441)) - (_619 * _488)) + cbMtdParam._m0[13u].y) + ((((((_755.y - _753) * _733) + _753) * cbMtdParam._m0[11u].y) + ((cbMtdParam._m0[22u].y * (((_675.y - _670.y) * _654) + _670.y)) * cbMtdParam._m0[12u].y)) * _695))) + ((_2833 + ((isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0))) * _1878)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0))) * (_2827 + ((isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))) * _1038)));
    float _2870 = ((cbInstanceData._m0[_2841].z * ((((_620 + (_488 * _442)) - (_620 * _488)) + cbMtdParam._m0[13u].z) + ((((((_755.z - _754) * _733) + _754) * cbMtdParam._m0[11u].z) + ((cbMtdParam._m0[22u].y * (((_675.z - _670.z) * _654) + _670.z)) * cbMtdParam._m0[12u].z)) * _695))) + ((_2835 + ((isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0))) * _1878)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0))) * (_2829 + ((isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))) * _1038)));
    float _2871 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
    float _2872 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
    float _2873 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
    uint _2874 = _966 + 6u;
    float _2882 = _910 / cbSceneParam._m0[86u].x;
    float _2883 = _911 / cbSceneParam._m0[86u].y;
    vec4 _2897 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2882, _2883, (log2((isnan(cbSceneParam._m0[77u].w) ? _832 : (isnan(_832) ? cbSceneParam._m0[77u].w : min(_832, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2899 = _2897.x;
    float _2900 = _2897.y;
    float _2901 = _2897.z;
    float _2902 = _2897.w;
    float _2994;
    float _2996;
    float _2998;
    float _3000;
    if (_832 > cbSceneParam._m0[78u].w)
    {
        float _2957 = isnan(_832) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _832 : min(cbSceneParam._m0[80u].w, _832));
        float _2958 = _2957 / _832;
        float _2969 = _2958 * _882;
        float _2970 = _883 * _2958;
        float _2971 = (-0.0) - _2970;
        float _2972 = _2958 * _884;
        float _2974 = (cbSceneParam._m0[77u].w * _2971) / _2957;
        float _2975 = _2974 + cbSceneParam._m0[79u].w;
        float _2976 = cbSceneParam._m0[79u].w - _2970;
        float _2982 = sqrt(((_2969 * _2969) + (_2970 * _2970)) + (_2972 * _2972));
        float _2985 = (1.0 - (cbSceneParam._m0[77u].w / _2957)) * _2982;
        float _2990 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2992 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3169;
        if (abs((_2971 - _2974) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3169 = ((((_2975 > 0.0) ? exp2(_2990 * _2975) : (2.0 - exp2(_2992 * _2975))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2985;
        }
        else
        {
            float _3113 = 1.0 / cbSceneParam._m0[80u].x;
            float _3114 = isnan(_2976) ? _2975 : (isnan(_2975) ? _2976 : max(_2975, _2976));
            float _3115 = isnan(_2976) ? _2975 : (isnan(_2975) ? _2976 : min(_2975, _2976));
            float _3124 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : min(_3114, 0.0));
            float _3125 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : min(_3115, 0.0));
            _3169 = ((abs(_2982 / _2971) * cbSceneParam._m0[80u].y) * ((((_3124 - _3125) * 2.0) - ((exp2(_2990 * (isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0)))) - exp2(_2990 * (isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0))))) * _3113)) - ((exp2(_2992 * _3124) - exp2(_2992 * _3125)) * _3113))) + (_2985 * cbSceneParam._m0[80u].z);
        }
        vec4 _3171 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2882, _2883, 1.0), 0.0);
        float _3180 = exp2((_3169 * (-1.44269502162933349609375)) * (1.0 - _3171.w));
        float _3181 = log2(_3180);
        float _3197 = log2(_2902);
        _2994 = (exp2(_3197 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3181 * cbSceneParam._m0[78u].x)) * _3171.x) / cbSceneParam._m0[78u].x)) + _2899;
        _2996 = (exp2(_3197 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3181 * cbSceneParam._m0[78u].y)) * _3171.y) / cbSceneParam._m0[78u].y)) + _2900;
        _2998 = (exp2(_3197 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3181 * cbSceneParam._m0[78u].z)) * _3171.z) / cbSceneParam._m0[78u].z)) + _2901;
        _3000 = _3180 * _2902;
    }
    else
    {
        _2994 = _2899;
        _2996 = _2900;
        _2998 = _2901;
        _3000 = _2902;
    }
    bool _3207;
    vec4 _3010;
    vec4 _3032;
    float _3034;
    float _3038;
    float _3039;
    float _3040;
    float _3041;
    bool _3051;
    for (;;)
    {
        _3010 = cbMatDynParam._m0[0u];
        float _3012 = roundEven(_3010.y);
        bool _3013 = _3012 == 3.0;
        float _3014 = log2(_3000);
        float _3021 = exp2(_3014 * cbSceneParam._m0[78u].x) * _2871;
        float _3022 = exp2(_3014 * cbSceneParam._m0[78u].y) * _2872;
        float _3023 = exp2(_3014 * cbSceneParam._m0[78u].z) * _2873;
        float _3030 = _898 + (-0.5);
        _3032 = cbMtdParam._m0[1u];
        _3034 = _3032.y * _3030;
        float _3037 = (_3012 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3038 = _3037 * (_3013 ? _3021 : (_3021 + (cbSceneParam._m0[72u].w * _2994)));
        _3039 = _3037 * (_3013 ? _3022 : (_3022 + (cbSceneParam._m0[72u].w * _2996)));
        _3040 = _3037 * (_3013 ? _3023 : (_3023 + (cbSceneParam._m0[72u].w * _2998)));
        _3041 = _3030 * 0.999000012874603271484375;
        _3051 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3051)
        {
            if ((cbInstanceData._m0[_966 + 7u].x + _3041) < 0.5)
            {
                _3207 = true;
                break;
            }
        }
        uint _3148 = _967 + uint(_3010.w);
        if ((cbInstanceData._m0[_3148].w < 1.0) && ((cbInstanceData._m0[_3148].w + _3041) < 0.5))
        {
            _3207 = true;
            break;
        }
        if ((_3034 + 1.0) < _3032.x)
        {
            _3207 = true;
            break;
        }
        _3207 = false;
        break;
    }
    float _3411;
    if (_3207)
    {
        discard_state = true;
        _3411 = 0.0;
    }
    else
    {
        _3411 = cbInstanceData._m0[_2874].w;
    }
    SV_Target.x = _3038;
    SV_Target.y = _3039;
    SV_Target.z = _3040;
    SV_Target.w = _3411;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2874].w;
    discard_exit();
}


