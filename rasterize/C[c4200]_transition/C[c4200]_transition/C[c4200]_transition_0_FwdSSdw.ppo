#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[25];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_c4200_transition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_c4200_transition_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_c4200_transition_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D C_c4200_transition_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_c4200_transition_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D C_c4200_transition_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_c4200_transition_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_c4200_transition_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_c4200_transition_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_c4200_transition_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1395;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238;
    float _239;
    float _240;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
    }
    else
    {
        _238 = _224;
        _239 = _225;
        _240 = _226;
    }
    vec4 _254 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _257 = _254.x;
    float _266 = cbMtdParam._m0[18u].y * 0.3333333432674407958984375;
    float _271 = fract(abs(_266));
    float _283 = cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x;
    float _286 = (_283 * cbMtdParam._m0[24u].x) + TEXCOORD.x;
    float _287 = (_283 * cbMtdParam._m0[24u].y) + TEXCOORD.y;
    vec4 _310 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((_283 * cbMtdParam._m0[23u].x) + TEXCOORD.x)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[23u].y * _283) + TEXCOORD.y)) + cbTextureTilingScale._m0[10u].w));
    float _314 = cbPerFrame._m0[22u].x * 2.0;
    float _316 = _314 * cbMtdParam._m0[19u].w;
    float _319 = (_310.x * 0.5) + (-0.25);
    float _322 = (_310.y * 0.5) + (-0.25);
    float _323 = _322 * cbMtdParam._m0[18u].z;
    float _325 = (-0.0) - (cbMtdParam._m0[18u].z * _319);
    float _326 = fract(_316);
    float _328 = fract(_316 + 0.5);
    float _329 = _326 * _325;
    float _330 = _323 * _326;
    float _333 = _328 * _325;
    float _334 = _323 * _328;
    float _340 = abs((_326 * 2.0) + (-1.0));
    vec4 _357 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_9, SS_DiffuseMap), vec2(((_329 + _286) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, ((_330 + _287) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _359 = _357.x;
    float _370 = (0.25 - ((((_266 >= ((-0.0) - _266)) ? _271 : ((-0.0) - _271)) * 3.0) - _257)) + ((((texture(sampler2D(C_c4200_transition_snp_0_Texture2D_9, SS_DiffuseMap), vec2(((_333 + _286) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, ((_334 + _287) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w)).x - _359) * _340) + _359) * 1.35000002384185791015625);
    float _373 = abs(_370 * cbMtdParam._m0[19u].z);
    float _377 = (((_373 * cbMtdParam._m0[19u].y) - _257) * _373) + _257;
    float _3763 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _379 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _390 = (cbMtdParam._m0[23u].z * _283) + TEXCOORD.x;
    float _391 = (cbMtdParam._m0[23u].w * _283) + TEXCOORD.y;
    vec4 _411 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_329 + _390) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_330 + _391) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _413 = _411.x;
    float _414 = _411.y;
    float _415 = _411.z;
    vec4 _416 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_333 + _390) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_334 + _391) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _430 = (((_416.x - _413) * _340) + _413) * cbMtdParam._m0[14u].x;
    float _431 = (((_416.y - _414) * _340) + _414) * cbMtdParam._m0[14u].y;
    float _432 = (((_416.z - _415) * _340) + _415) * cbMtdParam._m0[14u].z;
    float _436 = _430 - (_430 * _379);
    float _437 = _431 - (_431 * _379);
    float _438 = _432 - (_432 * _379);
    vec4 _456 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _461 = ceil(_370);
    float _3774 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _462 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _476 = (((cbMtdParam._m0[9u].x - cbMtdParam._m0[15u].x) * _462) + cbMtdParam._m0[15u].x) * _456.x;
    float _478 = (((cbMtdParam._m0[9u].y - cbMtdParam._m0[15u].y) * _462) + cbMtdParam._m0[15u].y) * _456.y;
    float _480 = (((cbMtdParam._m0[9u].z - cbMtdParam._m0[15u].z) * _462) + cbMtdParam._m0[15u].z) * _456.z;
    float _484 = exp2(log2(_379) * cbMtdParam._m0[19u].x);
    float _491 = (_484 * (_436 - _476)) + _476;
    float _492 = (_484 * (_437 - _478)) + _478;
    float _493 = (_484 * (_438 - _480)) + _480;
    vec4 _506 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _512 = cbMtdParam._m0[17u].x + _506.x;
    vec4 _524 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _528 = _524.z;
    float _531 = (_524.x * 2.0) + (-1.0);
    float _532 = (_524.y * 2.0) + (-1.0);
    float _533 = dot(vec2(_531, _532), vec2(_531, _532));
    float _3785 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _538 = sqrt(1.0 - (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))));
    float _549 = (cbMtdParam._m0[24u].z * _283) + TEXCOORD.x;
    float _550 = (cbMtdParam._m0[24u].w * _283) + TEXCOORD.y;
    float _556 = _314 * cbMtdParam._m0[20u].z;
    float _557 = _322 * cbMtdParam._m0[20u].y;
    float _559 = (-0.0) - (cbMtdParam._m0[20u].y * _319);
    float _560 = fract(_556);
    float _562 = fract(_556 + 0.5);
    float _573 = abs((_560 * 2.0) + (-1.0));
    vec4 _589 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_11, SS_DiffuseMap), vec2((((_560 * _559) + _549) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_557 * _560) + _550) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _591 = _589.x;
    float _592 = _589.y;
    float _593 = _589.z;
    vec4 _594 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_11, SS_DiffuseMap), vec2((((_562 * _559) + _549) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_557 * _562) + _550) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _608 = (((_594.x - _591) * _573) + _591) * cbMtdParam._m0[16u].x;
    float _609 = (((_594.y - _592) * _573) + _592) * cbMtdParam._m0[16u].y;
    float _610 = (((_594.z - _593) * _573) + _593) * cbMtdParam._m0[16u].z;
    float _614 = _608 - (_608 * _462);
    float _615 = _609 - (_609 * _462);
    float _616 = _610 - (_610 * _462);
    float _633 = _314 * cbMtdParam._m0[21u].w;
    float _634 = _322 * cbMtdParam._m0[22u].x;
    float _636 = (-0.0) - (cbMtdParam._m0[22u].x * _319);
    float _637 = fract(_633);
    float _639 = fract(_633 + 0.5);
    float _650 = abs((_637 * 2.0) + (-1.0));
    vec4 _666 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_637 * _636) + TEXCOORD.x) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((_634 * _637) + TEXCOORD.y) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _671 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_639 * _636) + TEXCOORD.x) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((_634 * _639) + TEXCOORD.y) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _682 = ((_671.x - _666.x) * _650) + _666.x;
    float _689 = exp2(log2(_682 * cbMtdParam._m0[21u].z) * cbMtdParam._m0[21u].y);
    float _690 = isnan(cbMtdParam._m0[21u].x) ? _689 : (isnan(_689) ? cbMtdParam._m0[21u].x : max(_689, cbMtdParam._m0[21u].x));
    float _691 = isnan(cbMtdParam._m0[20u].x) ? _690 : (isnan(_690) ? cbMtdParam._m0[20u].x : min(_690, cbMtdParam._m0[20u].x));
    float _712 = _314 * cbMtdParam._m0[17u].z;
    float _713 = _322 * cbMtdParam._m0[17u].w;
    float _715 = (-0.0) - (cbMtdParam._m0[17u].w * _319);
    float _716 = fract(_712);
    float _718 = fract(_712 + 0.5);
    float _729 = abs((_716 * 2.0) + (-1.0));
    vec4 _746 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_716 * _715) + TEXCOORD.x) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_713 * _716) + TEXCOORD.y) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _748 = _746.x;
    float _749 = _746.y;
    float _750 = _746.z;
    vec4 _751 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_718 * _715) + TEXCOORD.x) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_713 * _718) + TEXCOORD.y) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _794 = fma(_538, _238, fma(_532, _230 * TANGENT.x, (_216 * _208) * _531));
    float _797 = fma(_538, _239, fma(_532, _230 * TANGENT.y, (_216 * _209) * _531));
    float _800 = fma(_538, _240, fma(_532, _230 * TANGENT.z, (_216 * _210) * _531));
    float _804 = inversesqrt(dot(vec3(_794, _797, _800), vec3(_794, _797, _800)));
    float _805 = _804 * _794;
    float _806 = _804 * _797;
    float _807 = _804 * _800;
    float _3806 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _808 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _3817 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _3828 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _3839 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _3850 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _812 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _828 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _868 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _878 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _868);
    float _879 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _868);
    float _880 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _868);
    float _884 = inversesqrt(dot(vec3(_878, _879, _880), vec3(_878, _879, _880)));
    float _885 = _878 * _884;
    float _886 = _879 * _884;
    float _887 = _880 * _884;
    float _893 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _894 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _896 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _898 = _896.w;
    float _918 = fma(_807, cbSceneParam._m0[5u].z, fma(_806, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _805));
    float _921 = fma(_807, cbSceneParam._m0[6u].z, fma(_806, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _805));
    float _924 = fma(_807, cbSceneParam._m0[7u].z, fma(_806, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _805));
    vec4 _926 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _937 = (((_926.y - _808) + (_926.w * _808)) * cbMtdParam._m0[3u].x) + _808;
    uint _950 = uint(roundEven(NORMAL.w)) * 13u;
    uint _951 = _950 + 9u;
    uint _952 = _951 + uint(cbMatDynParam._m0[0u].w);
    float _958 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0)))) * cbInstanceData._m0[_952].x;
    float _959 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0)))) * cbInstanceData._m0[_952].y;
    float _960 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0)))) * cbInstanceData._m0[_952].z;
    float _3861 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _961 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _3872 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _962 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _3883 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _963 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    vec4 _964 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _969 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _980 = (((_969.x - _812) + (_969.w * _812)) * cbMtdParam._m0[3u].x) + _812;
    float _993 = (cbMtdParam._m0[3u].x * (((_961 * _898) - _961) + _964.x)) + _961;
    float _994 = (cbMtdParam._m0[3u].x * (((_962 * _898) - _962) + _964.y)) + _962;
    float _995 = (cbMtdParam._m0[3u].x * (((_963 * _898) - _963) + _964.z)) + _963;
    float _996 = 1.0 - _980;
    float _997 = _996 * _993;
    float _998 = _996 * _994;
    float _999 = _996 * _995;
    float _1004 = (_993 + (-0.039999999105930328369140625)) * _980;
    float _1005 = (_994 + (-0.039999999105930328369140625)) * _980;
    float _1006 = (_995 + (-0.039999999105930328369140625)) * _980;
    float _1007 = _1004 + 0.039999999105930328369140625;
    float _1009 = _1005 + 0.039999999105930328369140625;
    float _1010 = _1006 + 0.039999999105930328369140625;
    vec4 _1019 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _893, cbSceneParam._m0[86u].y * _894));
    float _1022 = _1019.x * TEXCOORD_4;
    float _1023 = dot(vec3(_805, _806, _807), vec3(_885, _886, _887));
    float _1026 = _1023 * 2.0;
    float _1030 = (_1026 * _805) - _885;
    float _1031 = (_1026 * _806) - _886;
    float _1032 = (_1026 * _807) - _887;
    float _1036 = abs(dot(vec3(_885, _886, _887), vec3(_805, _806, _807)));
    float _3894 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _1038 = sqrt(_937);
    float _1050 = exp2((_1038 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1038 * 3.0));
    float _1056 = (1.0 - _1050) * ((_1038 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1057 = _1050 * _1038;
    float _1085 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1089 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1093 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1394;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1120 = fma(_1093, cbModelParam._m0[26u].z, fma(_1089, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1085));
        float _1124 = fma(_1093, cbModelParam._m0[27u].z, fma(_1089, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1085));
        float _1128 = fma(_1093, cbModelParam._m0[28u].z, fma(_1089, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1085));
        float _1152 = _1085 + _805;
        float _1153 = _1089 + _806;
        float _1154 = _1093 + _807;
        float _1164 = fma(_1154, cbModelParam._m0[26u].z, fma(_1153, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1152)) - _1120;
        float _1165 = fma(_1154, cbModelParam._m0[27u].z, fma(_1153, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1152)) - _1124;
        float _1166 = fma(_1154, cbModelParam._m0[28u].z, fma(_1153, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1152)) - _1128;
        float _1170 = inversesqrt(dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166)));
        float _1183 = ((_1170 * _1164) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1120 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1184 = ((_1170 * _1165) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1124 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1185 = ((_1170 * _1166) / cbModelParam._m0[34u].z) + ((((((_1128 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        float _1222 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1188.x + (-0.5));
        float _1224 = _1222 * (_1188.y + (-0.5));
        float _1225 = _1222 * (_1188.z + (-0.5));
        float _1232 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1195.x + (-0.5));
        float _1234 = _1232 * (_1195.y + (-0.5));
        float _1235 = _1232 * (_1195.z + (-0.5));
        float _1242 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1202.x + (-0.5));
        float _1244 = _1242 * (_1202.y + (-0.5));
        float _1245 = _1242 * (_1202.z + (-0.5));
        float _1252 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1209.x + (-0.5));
        float _1254 = _1252 * (_1209.y + (-0.5));
        float _1255 = _1252 * (_1209.z + (-0.5));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = _1223 * 0.5;
        float _1260 = _1233 * 0.5;
        float _1261 = _1243 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1276 = (dot(vec3(_805, _806, _807), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _3920 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1286 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _3931 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _3942 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_1288 + 1.0))) + _1293) * _1256;
        float _1303 = _1224 * 0.5;
        float _1304 = _1234 * 0.5;
        float _1305 = _1244 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_805, _806, _807), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _3953 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _3964 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _3975 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (_1330 + 1.0))) + _1335) * _1257;
        float _1345 = _1225 * 0.5;
        float _1346 = _1235 * 0.5;
        float _1347 = _1245 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(_805, _806, _807), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _3986 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _3997 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _4008 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_1372 + 1.0))) + _1377) * _1258;
        _1394 = _1225;
        _1396 = _1224;
        _1397 = _1223;
        _1398 = _1235;
        _1399 = _1234;
        _1400 = _1233;
        _1401 = _1245;
        _1402 = _1244;
        _1403 = _1243;
        _1404 = _1258;
        _1405 = _1257;
        _1406 = _1256;
        _1407 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
        _1408 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
        _1409 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
    }
    else
    {
        _1394 = _1395;
        _1396 = _1395;
        _1397 = _1395;
        _1398 = _1395;
        _1399 = _1395;
        _1400 = _1395;
        _1401 = _1395;
        _1402 = _1395;
        _1403 = _1395;
        _1404 = _1395;
        _1405 = _1395;
        _1406 = _1395;
        _1407 = 0.0;
        _1408 = 0.0;
        _1409 = 0.0;
    }
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1435 = fma(_1093, cbModelParam._m0[30u].z, fma(_1089, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1085));
        float _1439 = fma(_1093, cbModelParam._m0[31u].z, fma(_1089, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1085));
        float _1443 = fma(_1093, cbModelParam._m0[32u].z, fma(_1089, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1085));
        float _1466 = _1085 + _805;
        float _1467 = _1089 + _806;
        float _1468 = _1093 + _807;
        float _1478 = fma(_1468, cbModelParam._m0[30u].z, fma(_1467, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1466)) - _1435;
        float _1479 = fma(_1468, cbModelParam._m0[31u].z, fma(_1467, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1466)) - _1439;
        float _1480 = fma(_1468, cbModelParam._m0[32u].z, fma(_1467, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1466)) - _1443;
        float _1484 = inversesqrt(dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480)));
        float _1497 = ((_1484 * _1478) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1435 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1498 = ((_1484 * _1479) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1439 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1499 = ((_1484 * _1480) / cbModelParam._m0[35u].z) + ((((((_1443 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1501 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1497, _1498, _1499), 0.0);
        vec4 _1508 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1497, _1498, _1499), 0.0);
        vec4 _1515 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1497, _1498, _1499), 0.0);
        vec4 _1522 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1497, _1498, _1499), 0.0);
        float _1534 = exp2((_1501.w + (-0.5)) * 20.0) * 2.0;
        float _1535 = _1534 * (_1501.x + (-0.5));
        float _1536 = _1534 * (_1501.y + (-0.5));
        float _1537 = _1534 * (_1501.z + (-0.5));
        float _1544 = exp2((_1508.w + (-0.5)) * 20.0) * 2.0;
        float _1545 = _1544 * (_1508.x + (-0.5));
        float _1546 = _1544 * (_1508.y + (-0.5));
        float _1547 = _1544 * (_1508.z + (-0.5));
        float _1554 = exp2((_1515.w + (-0.5)) * 20.0) * 2.0;
        float _1555 = _1554 * (_1515.x + (-0.5));
        float _1556 = _1554 * (_1515.y + (-0.5));
        float _1557 = _1554 * (_1515.z + (-0.5));
        float _1564 = exp2((_1522.w + (-0.5)) * 20.0) * 2.0;
        float _1565 = _1564 * (_1522.x + (-0.5));
        float _1566 = _1564 * (_1522.y + (-0.5));
        float _1567 = _1564 * (_1522.z + (-0.5));
        float _1568 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1569 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1570 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1571 = _1535 * 0.5;
        float _1572 = _1545 * 0.5;
        float _1573 = _1555 * 0.5;
        float _1574 = dot(vec3(_1571, _1572, _1573), vec3(_1571, _1572, _1573));
        float _1579 = (_1574 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1574);
        float _1587 = (dot(vec3(_805, _806, _807), vec3(_1579 * _1571, _1579 * _1572, _1579 * _1573)) + 1.0) * 0.5;
        float _4049 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1596 = sqrt(((_1572 * _1572) + (_1571 * _1571)) + (_1573 * _1573)) / (_1568 + 9.9999997473787516355514526367188e-06);
        float _4060 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1598 = _1597 * 2.0;
        float _1602 = (1.0 - _1597) / (_1597 + 1.0);
        float _4071 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1612 = ((((1.0 - _1603) * (_1598 + 2.0)) * exp2(log2(isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1598 + 1.0))) + _1603) * _1568;
        float _1613 = _1536 * 0.5;
        float _1614 = _1546 * 0.5;
        float _1615 = _1556 * 0.5;
        float _1616 = dot(vec3(_1613, _1614, _1615), vec3(_1613, _1614, _1615));
        float _1621 = (_1616 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1616);
        float _1629 = (dot(vec3(_805, _806, _807), vec3(_1621 * _1613, _1621 * _1614, _1621 * _1615)) + 1.0) * 0.5;
        float _4082 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1638 = sqrt(((_1614 * _1614) + (_1613 * _1613)) + (_1615 * _1615)) / (_1569 + 9.9999997473787516355514526367188e-06);
        float _4093 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1640 = _1639 * 2.0;
        float _1644 = (1.0 - _1639) / (_1639 + 1.0);
        float _4104 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1654 = ((((1.0 - _1645) * (_1640 + 2.0)) * exp2(log2(isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1640 + 1.0))) + _1645) * _1569;
        float _1655 = _1537 * 0.5;
        float _1656 = _1547 * 0.5;
        float _1657 = _1557 * 0.5;
        float _1658 = dot(vec3(_1655, _1656, _1657), vec3(_1655, _1656, _1657));
        float _1663 = (_1658 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1658);
        float _1671 = (dot(vec3(_805, _806, _807), vec3(_1663 * _1655, _1663 * _1656, _1663 * _1657)) + 1.0) * 0.5;
        float _4115 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1680 = sqrt(((_1656 * _1656) + (_1655 * _1655)) + (_1657 * _1657)) / (_1570 + 9.9999997473787516355514526367188e-06);
        float _4126 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1682 = _1681 * 2.0;
        float _1686 = (1.0 - _1681) / (_1681 + 1.0);
        float _4137 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1687 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1696 = ((((1.0 - _1687) * (_1682 + 2.0)) * exp2(log2(isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_1682 + 1.0))) + _1687) * _1570;
        _1704 = _1537;
        _1705 = _1536;
        _1706 = _1535;
        _1707 = _1547;
        _1708 = _1546;
        _1709 = _1545;
        _1710 = _1557;
        _1711 = _1556;
        _1712 = _1555;
        _1713 = _1570;
        _1714 = _1569;
        _1715 = _1568;
        _1716 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)));
        _1717 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)));
        _1718 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0)));
    }
    else
    {
        _1704 = _1395;
        _1705 = _1395;
        _1706 = _1395;
        _1707 = _1395;
        _1708 = _1395;
        _1709 = _1395;
        _1710 = _1395;
        _1711 = _1395;
        _1712 = _1395;
        _1713 = _1395;
        _1714 = _1395;
        _1715 = _1395;
        _1716 = 0.0;
        _1717 = 0.0;
        _1718 = 0.0;
    }
    float _1728 = (cbModelParam._m0[1u].x * (_1716 - _1407)) + _1407;
    float _1729 = (cbModelParam._m0[1u].x * (_1717 - _1408)) + _1408;
    float _1730 = (cbModelParam._m0[1u].x * (_1718 - _1409)) + _1409;
    float _1751 = fma(_1730, cbSceneParam._m0[89u].z, fma(_1729, cbSceneParam._m0[89u].y, _1728 * cbSceneParam._m0[89u].x));
    float _1754 = fma(_1730, cbSceneParam._m0[90u].z, fma(_1729, cbSceneParam._m0[90u].y, _1728 * cbSceneParam._m0[90u].x));
    float _1757 = fma(_1730, cbSceneParam._m0[91u].z, fma(_1729, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1728));
    float _1772 = _1030 * 0.5;
    float _1773 = _1031 * 0.5;
    float _1774 = _1032 * 0.5;
    float _1775 = dot(vec4(_1772, _1773, _1774, 1.0), vec4(_1706, _1709, _1712, _1715));
    float _1778 = dot(vec4(_1772, _1773, _1774, 1.0), vec4(_1705, _1708, _1711, _1714));
    float _1781 = dot(vec4(_1772, _1773, _1774, 1.0), vec4(_1704, _1707, _1710, _1713));
    float _1815;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1788 = dot(vec4(_1772, _1773, _1774, 1.0), vec4(_1394, _1398, _1401, _1404));
        float _1792 = dot(vec4(_1772, _1773, _1774, 1.0), vec4(_1396, _1399, _1402, _1405));
        float _1796 = dot(vec4(_1772, _1773, _1774, 1.0), vec4(_1397, _1400, _1403, _1406));
        float _1803 = dot(vec4(cbModelParam._m0[39u]), vec4(_1772, _1773, _1774, 1.0));
        _1815 = dot(vec3(isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0)), isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)), isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1803) ? 0.0 : (isnan(0.0) ? _1803 : max(0.0, _1803))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1815 = 1.0;
    }
    float _1826;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1817 = dot(vec4(cbModelParam._m0[40u]), vec4(_1772, _1773, _1774, 1.0));
        _1826 = dot(vec3(isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)), isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0)), isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1817) ? 0.0 : (isnan(0.0) ? _1817 : max(0.0, _1817))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1826 = 1.0;
    }
    float _1830 = (_1826 * cbModelParam._m0[1u].x) + (_1815 * (1.0 - cbModelParam._m0[1u].x));
    float _1840 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _937);
    float _1841 = isnan(_1840) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1840 : min(cbModelParam._m0[25u].z, _1840));
    float _1921;
    float _1923;
    float _1925;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1888 = fma(_1093, cbModelParam._m0[13u].z, fma(_1089, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1085)) + cbModelParam._m0[13u].w;
        float _1892 = fma(_1093, cbModelParam._m0[14u].z, fma(_1089, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1085)) + cbModelParam._m0[14u].w;
        float _1896 = fma(_1093, cbModelParam._m0[15u].z, fma(_1089, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1085)) + cbModelParam._m0[15u].w;
        float _1899 = fma(_1032, cbModelParam._m0[13u].z, fma(_1031, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1030));
        float _1902 = fma(_1032, cbModelParam._m0[14u].z, fma(_1031, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1030));
        float _1905 = fma(_1032, cbModelParam._m0[15u].z, fma(_1031, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1030));
        float _1933;
        if (_1899 > 0.0)
        {
            _1933 = abs((1.0 - _1888) / _1899);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1888 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1933 = frontier_phi_16_14_ladder;
        }
        float _2156;
        if (_1902 > 0.0)
        {
            _2156 = abs((1.0 - _1892) / _1902);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1892 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2156 = frontier_phi_25_21_ladder;
        }
        float _2413;
        if (_1905 > 0.0)
        {
            _2413 = abs((1.0 - _1896) / _1905);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1905 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1896 + 1.0) / _1905);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2413 = frontier_phi_37_32_ladder;
        }
        float _2415 = isnan(_2156) ? _1933 : (isnan(_1933) ? _2156 : min(_1933, _2156));
        float _2416 = isnan(_2413) ? _2415 : (isnan(_2415) ? _2413 : min(_2415, _2413));
        float _2420 = (_2416 * _1899) + _1888;
        float _2421 = (_2416 * _1902) + _1892;
        float _2422 = (_2416 * _1905) + _1896;
        float _2423 = _2416 * 9.9999997473787516355514526367188e-05;
        float _2425 = (-1.0) - _2423;
        float _2427 = _2423 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2422 > _2427) || ((_2422 < _2425) || ((_2421 > _2427) || ((_2421 < _2425) || ((_2420 < _2425) || (_2420 > _2427))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2550 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2422, cbModelParam._m0[9u].z, fma(_2421, cbModelParam._m0[9u].y, _2420 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2422, cbModelParam._m0[10u].z, fma(_2421, cbModelParam._m0[10u].y, _2420 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2422, cbModelParam._m0[11u].z, fma(_2421, cbModelParam._m0[11u].y, _2420 * cbModelParam._m0[11u].x))), _1841);
            frontier_phi_15_37_ladder = _2550.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2550.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2550.x * cbModelParam._m0[1u].y;
        }
        _1921 = frontier_phi_15_37_ladder_2;
        _1923 = frontier_phi_15_37_ladder_1;
        _1925 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1909 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1030, _1031, _1032), _1841);
        _1921 = _1909.x * cbModelParam._m0[1u].y;
        _1923 = _1909.y * cbModelParam._m0[1u].y;
        _1925 = _1909.z * cbModelParam._m0[1u].y;
    }
    float _1929 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _937);
    float _1930 = isnan(_1929) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1929 : min(cbModelParam._m0[25u].w, _1929));
    float _2019;
    float _2021;
    float _2023;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1983 = fma(_1093, cbModelParam._m0[21u].z, fma(_1089, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1085)) + cbModelParam._m0[21u].w;
        float _1987 = fma(_1093, cbModelParam._m0[22u].z, fma(_1089, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1085)) + cbModelParam._m0[22u].w;
        float _1991 = fma(_1093, cbModelParam._m0[23u].z, fma(_1089, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1085)) + cbModelParam._m0[23u].w;
        float _1994 = fma(_1032, cbModelParam._m0[21u].z, fma(_1031, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1030));
        float _1997 = fma(_1032, cbModelParam._m0[22u].z, fma(_1031, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1030));
        float _2000 = fma(_1032, cbModelParam._m0[23u].z, fma(_1031, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1030));
        float _2161;
        if (_1994 > 0.0)
        {
            _2161 = abs((1.0 - _1983) / _1994);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1994 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1983 + 1.0) / _1994);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2161 = frontier_phi_27_23_ladder;
        }
        float _2440;
        if (_1997 > 0.0)
        {
            _2440 = abs((1.0 - _1987) / _1997);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1997 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1987 + 1.0) / _1997);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2440 = frontier_phi_39_34_ladder;
        }
        float _2653;
        if (_2000 > 0.0)
        {
            _2653 = abs((1.0 - _1991) / _2000);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_2000 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1991 + 1.0) / _2000);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2653 = frontier_phi_48_45_ladder;
        }
        float _2655 = isnan(_2440) ? _2161 : (isnan(_2161) ? _2440 : min(_2161, _2440));
        float _2656 = isnan(_2653) ? _2655 : (isnan(_2655) ? _2653 : min(_2655, _2653));
        float _2660 = (_2656 * _1994) + _1983;
        float _2661 = (_2656 * _1997) + _1987;
        float _2662 = (_2656 * _2000) + _1991;
        float _2663 = _2656 * 9.9999997473787516355514526367188e-05;
        float _2664 = (-1.0) - _2663;
        float _2666 = _2663 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2662 > _2666) || ((_2662 < _2664) || ((_2661 > _2666) || ((_2661 < _2664) || ((_2660 < _2664) || (_2660 > _2666))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2879 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2662, cbModelParam._m0[17u].z, fma(_2661, cbModelParam._m0[17u].y, _2660 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2662, cbModelParam._m0[18u].z, fma(_2661, cbModelParam._m0[18u].y, _2660 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2662, cbModelParam._m0[19u].z, fma(_2661, cbModelParam._m0[19u].y, _2660 * cbModelParam._m0[19u].x))), _1930);
            frontier_phi_24_48_ladder = _2879.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2879.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2879.x * cbModelParam._m0[1u].z;
        }
        _2019 = frontier_phi_24_48_ladder_2;
        _2021 = frontier_phi_24_48_ladder_1;
        _2023 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _2003 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1030, _1031, _1032), _1930);
        _2019 = _2003.x * cbModelParam._m0[1u].z;
        _2021 = _2003.y * cbModelParam._m0[1u].z;
        _2023 = _2003.z * cbModelParam._m0[1u].z;
    }
    float _2036 = (((_1056 * _1007) + _1057) * _1022) * ((cbModelParam._m0[1u].w * (_2019 - _1921)) + _1921);
    float _2038 = (((_1056 * _1009) + _1057) * _1022) * ((cbModelParam._m0[1u].w * (_2021 - _1923)) + _1923);
    float _2040 = (((_1056 * _1010) + _1057) * _1022) * ((cbModelParam._m0[1u].w * (_2023 - _1925)) + _1925);
    float _2043 = fma(_2040, cbSceneParam._m0[89u].z, fma(_2038, cbSceneParam._m0[89u].y, _2036 * cbSceneParam._m0[89u].x));
    float _2046 = fma(_2040, cbSceneParam._m0[90u].z, fma(_2038, cbSceneParam._m0[90u].y, _2036 * cbSceneParam._m0[90u].x));
    float _2049 = fma(_2040, cbSceneParam._m0[91u].z, fma(_2038, cbSceneParam._m0[91u].y, _2036 * cbSceneParam._m0[91u].x));
    vec4 _2057 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_893, _894));
    float _2059 = _2057.w;
    float _2071 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2059);
    float _2072 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2059);
    float _2073 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2059);
    uvec4 _2077 = floatBitsToUint(cbInstanceData._m0[_950 + 5u]);
    uint _2079 = _2077.x * 14u;
    uint _2080 = _2079 + 13u;
    float _2087 = _1022 + (-1.0);
    float _2092 = (cbLight._m0[_2080].x * _2087) + 1.0;
    float _2093 = (cbLight._m0[_2080].y * _2087) + 1.0;
    float _2094 = (cbLight._m0[_2080].z * _2087) + 1.0;
    float _2095 = (cbLight._m0[_2080].w * _2087) + 1.0;
    uint _2096 = _2079 + 5u;
    float _2102 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
    uint _2106 = _2079 + 4u;
    float _2115 = isnan(1.0) ? _2092 : (isnan(_2092) ? 1.0 : min(_2092, 1.0));
    uint _2119 = _2079 | 1u;
    float _2130 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_805, _806, _807));
    float _2133 = dot(vec3(cbLight._m0[_2119].xyz), vec3(_805, _806, _807));
    float _4273 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _4284 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2138 = (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * 0.3183098733425140380859375;
    float _2140 = (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * 0.3183098733425140380859375;
    float _2147 = ((cbLight._m0[_2096].x * _2102) * _2140) + (((cbLight._m0[_2106].x * _2071) * _2115) * _2138);
    float _2148 = ((_2102 * cbLight._m0[_2096].y) * _2140) + (((cbLight._m0[_2106].y * _2072) * _2115) * _2138);
    float _2149 = ((_2102 * cbLight._m0[_2096].z) * _2140) + (((cbLight._m0[_2106].z * _2073) * _2115) * _2138);
    uvec4 _2153 = floatBitsToUint(cbLight._m0[_2079 + 12u]);
    bool _2155 = _2153.x == 0u;
    float _2166;
    float _2168;
    float _2170;
    if (_2155)
    {
        _2166 = _2147;
        _2168 = _2148;
        _2170 = _2149;
    }
    else
    {
        uint _2174 = _2079 + 6u;
        float _2190 = (dot(vec3(cbLight._m0[_2079 + 2u].xyz), vec3(_805, _806, _807)) * 0.5) + 0.5;
        float _2191 = _2190 * _2190;
        float _4295 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2192 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _2193 = isnan(1.0) ? _2094 : (isnan(_2094) ? 1.0 : min(_2094, 1.0));
        _2166 = (((cbLight._m0[_2174].x * 0.3183098733425140380859375) * _2192) * _2193) + _2147;
        _2168 = (((cbLight._m0[_2174].y * 0.3183098733425140380859375) * _2192) * _2193) + _2148;
        _2170 = (((cbLight._m0[_2174].z * 0.3183098733425140380859375) * _2192) * _2193) + _2149;
    }
    bool _2173 = _2153.y == 0u;
    float _2211;
    float _2213;
    float _2215;
    if (_2173)
    {
        _2211 = _2166;
        _2213 = _2168;
        _2215 = _2170;
    }
    else
    {
        uint _2384 = _2079 + 7u;
        float _2400 = (dot(vec3(cbLight._m0[_2079 + 3u].xyz), vec3(_805, _806, _807)) * 0.5) + 0.5;
        float _2401 = _2400 * _2400;
        float _4311 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2402 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _2403 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
        _2211 = (((cbLight._m0[_2384].x * 0.3183098733425140380859375) * _2402) * _2403) + _2166;
        _2213 = (((cbLight._m0[_2384].y * 0.3183098733425140380859375) * _2402) * _2403) + _2168;
        _2215 = (((cbLight._m0[_2384].z * 0.3183098733425140380859375) * _2402) * _2403) + _2170;
    }
    uint _2218 = _2079 + 8u;
    float _2231 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2079].w)) * _937) * 0.949999988079071044921875);
    float _2232 = _2231 * _2231;
    float _2233 = cbLight._m0[_2079].x + _885;
    float _2234 = cbLight._m0[_2079].y + _886;
    float _2235 = cbLight._m0[_2079].z + _887;
    float _2239 = inversesqrt(dot(vec3(_2233, _2234, _2235), vec3(_2233, _2234, _2235)));
    float _2240 = _2239 * _2233;
    float _2241 = _2239 * _2234;
    float _2242 = _2239 * _2235;
    float _2243 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2079].xyz));
    float _4327 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2246 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _4338 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _2247 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _2248 = dot(vec3(_805, _806, _807), vec3(_2240, _2241, _2242));
    float _4349 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2251 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
    float _2252 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_2240, _2241, _2242));
    float _4360 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2256 = _2232 * _2232;
    float _2260 = ((_2251 * _2251) * (_2256 + (-1.0))) + 1.0;
    float _2268 = exp2(log2(1.0 - (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0)))) * 5.0);
    float _2269 = 0.959999978542327880859375 - _1004;
    float _2271 = 0.959999978542327880859375 - _1005;
    float _2272 = 0.959999978542327880859375 - _1006;
    float _2279 = 1.0 - _2232;
    float _2290 = (0.5 / (((_2247 * ((_2246 * _2279) + _2232)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2279) + _2232) * _2246))) * _2246;
    float _4371 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2292 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_2256 / ((_2260 * _2260) * 3.141590118408203125));
    uint _2306 = _2079 + 9u;
    float _2317 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2119].w)) * _937) * 0.949999988079071044921875);
    float _2318 = _2317 * _2317;
    float _2319 = cbLight._m0[_2119].x + _885;
    float _2320 = cbLight._m0[_2119].y + _886;
    float _2321 = cbLight._m0[_2119].z + _887;
    float _2325 = inversesqrt(dot(vec3(_2319, _2320, _2321), vec3(_2319, _2320, _2321)));
    float _2326 = _2325 * _2319;
    float _2327 = _2325 * _2320;
    float _2328 = _2325 * _2321;
    float _2329 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2119].xyz));
    float _4382 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2332 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
    float _2333 = dot(vec3(_805, _806, _807), vec3(_2326, _2327, _2328));
    float _4393 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2336 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
    float _2337 = dot(vec3(cbLight._m0[_2119].xyz), vec3(_2326, _2327, _2328));
    float _4404 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2341 = _2318 * _2318;
    float _2345 = ((_2336 * _2336) * (_2341 + (-1.0))) + 1.0;
    float _2352 = exp2(log2(1.0 - (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0)))) * 5.0);
    float _2359 = 1.0 - _2318;
    float _2369 = (0.5 / (((_2247 * ((_2332 * _2359) + _2318)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2359) + _2318) * _2332))) * _2332;
    float _4415 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2371 = (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_2341 / ((_2345 * _2345) * 3.141590118408203125));
    float _2381 = (((((_2352 * _2269) + _1007) * cbLight._m0[_2306].x) * _2371) * _2102) + ((((cbLight._m0[_2218].x * _2071) * ((_2268 * _2269) + _1007)) * _2292) * _2115);
    float _2382 = (((((_2352 * _2271) + _1009) * cbLight._m0[_2306].y) * _2371) * _2102) + ((((cbLight._m0[_2218].y * _2072) * ((_2268 * _2271) + _1009)) * _2292) * _2115);
    float _2383 = (((((_2352 * _2272) + _1010) * cbLight._m0[_2306].z) * _2371) * _2102) + ((((cbLight._m0[_2218].z * _2073) * ((_2268 * _2272) + _1010)) * _2292) * _2115);
    float _2445;
    float _2447;
    float _2449;
    if (_2155)
    {
        _2445 = _2381;
        _2447 = _2382;
        _2449 = _2383;
    }
    else
    {
        uint _2451 = _2079 + 2u;
        uint _2455 = _2079 + 10u;
        float _2469 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2451].w)) * _937) * 0.949999988079071044921875);
        float _2470 = _2469 * _2469;
        float _2471 = cbLight._m0[_2451].x + _885;
        float _2472 = cbLight._m0[_2451].y + _886;
        float _2473 = cbLight._m0[_2451].z + _887;
        float _2477 = inversesqrt(dot(vec3(_2471, _2472, _2473), vec3(_2471, _2472, _2473)));
        float _2478 = _2477 * _2471;
        float _2479 = _2477 * _2472;
        float _2480 = _2477 * _2473;
        float _2481 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2451].xyz));
        float _4426 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2484 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _2485 = dot(vec3(_805, _806, _807), vec3(_2478, _2479, _2480));
        float _4437 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2488 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _2489 = dot(vec3(cbLight._m0[_2451].xyz), vec3(_2478, _2479, _2480));
        float _4448 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2493 = _2470 * _2470;
        float _2497 = ((_2488 * _2488) * (_2493 + (-1.0))) + 1.0;
        float _2504 = exp2(log2(1.0 - (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) * 5.0);
        float _2511 = 1.0 - _2470;
        float _2521 = (0.5 / (((_2247 * ((_2484 * _2511) + _2470)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2511) + _2470) * _2484))) * _2484;
        float _4459 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2523 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2493 / ((_2497 * _2497) * 3.141590118408203125));
        float _2524 = isnan(1.0) ? _2094 : (isnan(_2094) ? 1.0 : min(_2094, 1.0));
        _2445 = (((((_2504 * _2269) + _1007) * cbLight._m0[_2455].x) * _2523) * _2524) + _2381;
        _2447 = (((((_2504 * _2271) + _1009) * cbLight._m0[_2455].y) * _2523) * _2524) + _2382;
        _2449 = (((((_2504 * _2272) + _1010) * cbLight._m0[_2455].z) * _2523) * _2524) + _2383;
    }
    float _2559;
    float _2561;
    float _2563;
    if (_2173)
    {
        _2559 = _2445;
        _2561 = _2447;
        _2563 = _2449;
    }
    else
    {
        uint _2570 = _2079 + 3u;
        uint _2574 = _2079 + 11u;
        float _2588 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2570].w)) * _937) * 0.949999988079071044921875);
        float _2589 = _2588 * _2588;
        float _2590 = cbLight._m0[_2570].x + _885;
        float _2591 = cbLight._m0[_2570].y + _886;
        float _2592 = cbLight._m0[_2570].z + _887;
        float _2596 = inversesqrt(dot(vec3(_2590, _2591, _2592), vec3(_2590, _2591, _2592)));
        float _2597 = _2596 * _2590;
        float _2598 = _2596 * _2591;
        float _2599 = _2596 * _2592;
        float _2600 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2570].xyz));
        float _4475 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2603 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _2604 = dot(vec3(_805, _806, _807), vec3(_2597, _2598, _2599));
        float _4486 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2607 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _2608 = dot(vec3(cbLight._m0[_2570].xyz), vec3(_2597, _2598, _2599));
        float _4497 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2612 = _2589 * _2589;
        float _2616 = ((_2607 * _2607) * (_2612 + (-1.0))) + 1.0;
        float _2623 = exp2(log2(1.0 - (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) * 5.0);
        float _2630 = 1.0 - _2589;
        float _2640 = (0.5 / (((_2247 * ((_2603 * _2630) + _2589)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2630) + _2589) * _2603))) * _2603;
        float _4508 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2642 = (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_2612 / ((_2616 * _2616) * 3.141590118408203125));
        float _2643 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
        _2559 = (((((_2623 * _2269) + _1007) * cbLight._m0[_2574].x) * _2642) * _2643) + _2445;
        _2561 = (((((_2623 * _2271) + _1009) * cbLight._m0[_2574].y) * _2642) * _2643) + _2447;
        _2563 = (((((_2623 * _2272) + _1010) * cbLight._m0[_2574].z) * _2642) * _2643) + _2449;
    }
    float _2777;
    float _2779;
    float _2781;
    float _2783;
    float _2785;
    float _2787;
    if (_2077.y == 0u)
    {
        float _2718 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2719 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2718;
        float _2720 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2718;
        float _2721 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2718;
        uvec4 _2733 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2734 = _2733.x;
        uint _2745 = uint((float(_2733.y) * floor(float(uint(cbSceneParam._m0[85u].y * _894) / _2734))) + floor(float(uint(cbSceneParam._m0[85u].x * _893) / _2734)));
        float _2755 = (log2(_2721 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2756 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        uint _2759 = uint(isnan(14.0) ? _2756 : (isnan(_2756) ? 14.0 : min(_2756, 14.0)));
        uvec4 _2764 = texelFetch(g_lightClusterGridBuffer, int(((_2759 << 2u) + (_2745 << 6u)) >> 2u));
        uint _2765 = _2764.x;
        uint _2766 = _2733.z;
        float _2884;
        float _2886;
        float _2888;
        float _2890;
        float _2892;
        float _2894;
        if (((((1u << ((_2766 >> 4u) & 15u)) + 4294967295u) & _2765) == 0u) || ((_2766 & 240u) == 0u))
        {
            _2884 = 0.0;
            _2886 = 0.0;
            _2888 = 0.0;
            _2890 = 0.0;
            _2892 = 0.0;
            _2894 = 0.0;
        }
        else
        {
            float _2885;
            float _2887;
            float _2889;
            float _2891;
            float _2893;
            float _2895;
            float _3028 = 0.0;
            float _3029 = 0.0;
            float _3030 = 0.0;
            float _3031 = 0.0;
            float _3032 = 0.0;
            float _3033 = 0.0;
            uint _3034 = 0u;
            uint _3043;
            bool _3044;
            for (;;)
            {
                _3043 = texelFetch(g_lightClassification, int((((_2759 << 5u) + (_2745 << 9u)) + (_3034 << 2u)) >> 2u)).x;
                _3044 = _3043 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_3044)
                {
                    frontier_phi_63_pred = _3033;
                    frontier_phi_63_pred_1 = _3032;
                    frontier_phi_63_pred_2 = _3031;
                    frontier_phi_63_pred_3 = _3030;
                    frontier_phi_63_pred_4 = _3029;
                    frontier_phi_63_pred_5 = _3028;
                }
                else
                {
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    uint _3158;
                    _3152 = _3028;
                    _3153 = _3029;
                    _3154 = _3030;
                    _3155 = _3031;
                    _3156 = _3032;
                    _3157 = _3033;
                    _3158 = _3043;
                    float _3084;
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    for (;;)
                    {
                        uint _3162 = uint(findLSB(_3158)) + (_3034 << 5u);
                        uint _3159 = (_3158 + 4294967295u) & _3158;
                        uint _3164 = _3162 * 48u;
                        vec4 _3178 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3164)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 3u)).x));
                        uint _3184 = (_3162 * 48u) + 4u;
                        vec4 _3197 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3184)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 3u)).x));
                        uint _3203 = (_3162 * 48u) + 8u;
                        vec3 _3214 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3203)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 2u)).x));
                        float _3218 = _3178.x - _2719;
                        float _3219 = _3178.y - _2720;
                        float _3220 = _3178.z - _2721;
                        float _3221 = dot(vec3(_3218, _3219, _3220), vec3(_3218, _3219, _3220));
                        float _3224 = inversesqrt(_3221);
                        float _3225 = _3224 * _3218;
                        float _3226 = _3224 * _3219;
                        float _3227 = _3224 * _3220;
                        float _3228 = dot(vec3(_918, _921, _924), vec3(_3225, _3226, _3227));
                        float _3233 = 1.0 - (_3221 * _3178.w);
                        float _4534 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                        float _3234 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                        float _3235 = sqrt(_3221) * _3197.w;
                        float _3238 = 1.39999997615814208984375 / (_3235 + 1.39999997615814208984375);
                        float _3239 = _3238 * _3238;
                        float _3242 = ((1.0 - _3239) * _3228) + _3239;
                        float _3245 = _3235 * _3235;
                        float _3249 = ((isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0))) * _3234) / ((_3245 * 0.699999988079071044921875) + 1.0);
                        float _3253 = (-0.0) - _2719;
                        float _3254 = (-0.0) - _2720;
                        float _3255 = (-0.0) - _2721;
                        float _3259 = inversesqrt(dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255)));
                        float _3260 = _3259 * _3253;
                        float _3261 = _3259 * _3254;
                        float _3262 = _3259 * _3255;
                        float _3269 = exp2(log2(1.0 / ((_3245 * 3.5) + 5.0)) * 0.25);
                        float _3270 = 1.0 - _1038;
                        float _3277 = sqrt(1.0 - ((1.0 - (_3270 * _3270)) * (1.0 - (_3269 * _3269))));
                        float _3278 = _3277 * _3277;
                        float _3279 = _3278 * _3278;
                        float _3280 = _3260 + _3225;
                        float _3281 = _3261 + _3226;
                        float _3282 = _3262 + _3227;
                        float _3286 = inversesqrt(dot(vec3(_3280, _3281, _3282), vec3(_3280, _3281, _3282)));
                        float _3290 = dot(vec3(_918, _921, _924), vec3(_3260, _3261, _3262));
                        float _4550 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3293 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                        float _3294 = dot(vec3(_918, _921, _924), vec3(_3286 * _3280, _3286 * _3281, _3286 * _3282));
                        float _4561 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3297 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                        float _3301 = ((_3297 * _3297) * (_3279 + (-1.0))) + 1.0;
                        float _3302 = _3238 * _3278;
                        float _3303 = _3302 * _3302;
                        float _3306 = ((1.0 - _3303) * _3228) + _3303;
                        float _4572 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3307 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                        float _3308 = 1.0 - _3278;
                        float _3318 = (0.5 / (((_3307 * ((_3293 * _3308) + _3278)) + 9.9999999392252902907785028219223e-09) + (((_3307 * _3308) + _3278) * _3293))) * _3307;
                        float _4583 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3329 = (((_3279 * 3.1415927410125732421875) * (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0)))) / ((_3301 * _3301) * ((_3245 * 2.1991131305694580078125) + 3.141590118408203125))) * _3234;
                        _3087 = (_3249 * _3197.x) + _3155;
                        _3088 = (_3249 * _3197.y) + _3156;
                        _3089 = (_3249 * _3197.z) + _3157;
                        _3084 = (_3329 * _3214.x) + _3152;
                        _3085 = (_3329 * _3214.y) + _3153;
                        _3086 = (_3329 * _3214.z) + _3154;
                        if (_3159 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3152 = _3084;
                            _3153 = _3085;
                            _3154 = _3086;
                            _3155 = _3087;
                            _3156 = _3088;
                            _3157 = _3089;
                            _3158 = _3159;
                        }
                    }
                    frontier_phi_63_pred = _3089;
                    frontier_phi_63_pred_1 = _3088;
                    frontier_phi_63_pred_2 = _3087;
                    frontier_phi_63_pred_3 = _3086;
                    frontier_phi_63_pred_4 = _3085;
                    frontier_phi_63_pred_5 = _3084;
                }
                _2895 = frontier_phi_63_pred;
                _2893 = frontier_phi_63_pred_1;
                _2891 = frontier_phi_63_pred_2;
                _2889 = frontier_phi_63_pred_3;
                _2887 = frontier_phi_63_pred_4;
                _2885 = frontier_phi_63_pred_5;
                uint _3035 = _3034 + 1u;
                if (_3035 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3028 = _2885;
                    _3029 = _2887;
                    _3030 = _2889;
                    _3031 = _2891;
                    _3032 = _2893;
                    _3033 = _2895;
                    _3034 = _3035;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2884 = _2885;
            _2886 = _2887;
            _2888 = _2889;
            _2890 = _2891;
            _2892 = _2893;
            _2894 = _2895;
        }
        uvec4 _2898 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2899 = _2898.z;
        uint _2901 = (_2899 >> 8u) & 15u;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        if (((4294967295u << _2901) & _2765) == 0u)
        {
            _2996 = _2884;
            _2998 = _2886;
            _3000 = _2888;
            _3002 = _2890;
            _3004 = _2892;
            _3006 = _2894;
        }
        else
        {
            float _3021 = inversesqrt(dot(vec3(_2719, _2720, _2721), vec3(_2719, _2720, _2721)));
            float _3022 = _3021 * _2719;
            float _3023 = _3021 * _2720;
            float _3024 = _3021 * _2721;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2901 < ((_2899 >> 12u) & 15u))
            {
                float _2997;
                float _2999;
                float _3001;
                float _3003;
                float _3005;
                float _3007;
                float _3135 = _2884;
                float _3136 = _2886;
                float _3137 = _2888;
                float _3138 = _2890;
                float _3139 = _2892;
                float _3140 = _2894;
                uint _3141 = _2901;
                uint _3150;
                bool _3151;
                for (;;)
                {
                    _3150 = texelFetch(g_lightClassification, int((((_2759 << 5u) + (_2745 << 9u)) + (_3141 << 2u)) >> 2u)).x;
                    _3151 = _3150 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3151)
                    {
                        frontier_phi_69_pred = _3140;
                        frontier_phi_69_pred_1 = _3139;
                        frontier_phi_69_pred_2 = _3138;
                        frontier_phi_69_pred_3 = _3137;
                        frontier_phi_69_pred_4 = _3136;
                        frontier_phi_69_pred_5 = _3135;
                    }
                    else
                    {
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3347 = _3135;
                        float _3348 = _3136;
                        float _3349 = _3137;
                        float _3350 = _3138;
                        float _3351 = _3139;
                        float _3352 = _3140;
                        uint _3353 = _3150;
                        uint _3354;
                        vec4 _3379;
                        float _3380;
                        vec4 _3395;
                        vec3 _3407;
                        vec4 _3422;
                        vec4 _3437;
                        float _3483;
                        bool _3484;
                        for (;;)
                        {
                            uint _3364 = ((_3141 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3353));
                            _3354 = (_3353 + 4294967295u) & _3353;
                            uint _3366 = _3364 * 40u;
                            _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            _3380 = _3379.w;
                            uint _3382 = (_3364 * 40u) + 4u;
                            _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            uint _3397 = (_3364 * 40u) + 8u;
                            _3407 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x));
                            uint _3409 = (_3364 * 40u) + 16u;
                            _3422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 3u)).x));
                            uint _3424 = (_3364 * 40u) + 20u;
                            _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            uint _3439 = (_3364 * 40u) + 24u;
                            vec4 _3452 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3439)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 3u)).x));
                            uint _3458 = (_3364 * 40u) + 28u;
                            vec4 _3471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 3u)).x));
                            _3483 = fma(_2721, _3471.z, fma(_2720, _3471.y, _3471.x * _2719)) + _3471.w;
                            _3484 = !((fma(_2721, _3452.z, fma(_2720, _3452.y, _3452.x * _2719)) + _3452.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3484)
                            {
                                float _3511 = _3379.x - _2719;
                                float _3512 = _3379.y - _2720;
                                float _3513 = _3379.z - _2721;
                                float _3514 = dot(vec3(_3511, _3512, _3513), vec3(_3511, _3512, _3513));
                                float _3517 = inversesqrt(_3514);
                                float _3518 = _3517 * _3511;
                                float _3519 = _3517 * _3512;
                                float _3520 = _3517 * _3513;
                                float _3524 = 1.0 - (_3514 / (_3380 * _3380));
                                float _4594 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3525 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                                float _3529 = sqrt(_3514) * _3395.w;
                                float _3531 = 1.39999997615814208984375 / (_3529 + 1.39999997615814208984375);
                                float _3532 = _3531 * _3531;
                                float _3535 = ((1.0 - _3532) * dot(vec3(_3518, _3519, _3520), vec3(_918, _921, _924))) + _3532;
                                float _3538 = _3529 * _3529;
                                float _3542 = (fma(_2721, _3422.z, fma(_2720, _3422.y, _3422.x * _2719)) + _3422.w) / _3483;
                                float _3543 = (fma(_2721, _3437.z, fma(_2720, _3437.y, _3437.x * _2719)) + _3437.w) / _3483;
                                float _3547 = 1.0 - dot(vec2(_3542, _3543), vec2(_3542, _3543));
                                float _4610 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                                float _3548 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                                float _3549 = _3548 * (((isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0))) * _3525) / ((_3538 * 0.699999988079071044921875) + 1.0));
                                float _3561 = exp2(log2(1.0 / ((_3538 * 3.5) + 5.0)) * 0.25);
                                float _3562 = 1.0 - _1038;
                                float _3569 = sqrt(1.0 - ((1.0 - (_3562 * _3562)) * (1.0 - (_3561 * _3561))));
                                float _3570 = _3569 * _3569;
                                float _3571 = _3570 * _3570;
                                float _3572 = _3518 - _3022;
                                float _3573 = _3519 - _3023;
                                float _3574 = _3520 - _3024;
                                float _3578 = inversesqrt(dot(vec3(_3572, _3573, _3574), vec3(_3572, _3573, _3574)));
                                float _3582 = dot(vec3(_918, _921, _924), vec3((-0.0) - _3022, (-0.0) - _3023, (-0.0) - _3024));
                                float _4621 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                                float _3585 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
                                float _3586 = dot(vec3(_918, _921, _924), vec3(_3578 * _3572, _3578 * _3573, _3578 * _3574));
                                float _4632 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3589 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                                float _3593 = ((_3589 * _3589) * (_3571 + (-1.0))) + 1.0;
                                float _3594 = _3531 * _3570;
                                float _3595 = _3594 * _3594;
                                float _3601 = ((1.0 - _3595) * dot(vec3(_918, _921, _924), vec3(_3518, _3519, _3520))) + _3595;
                                float _4643 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3602 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
                                float _3603 = 1.0 - _3570;
                                float _3613 = (0.5 / (((_3602 * ((_3585 * _3603) + _3570)) + 9.9999999392252902907785028219223e-09) + (((_3602 * _3603) + _3570) * _3585))) * _3602;
                                float _4654 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                                float _3623 = (_3548 * _3525) * (((_3571 * 3.1415927410125732421875) * (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0)))) / ((_3593 * _3593) * ((_3538 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3549 * _3395.z;
                                frontier_phi_75_pred_1 = _3549 * _3395.y;
                                frontier_phi_75_pred_2 = _3549 * _3395.x;
                                frontier_phi_75_pred_3 = _3623 * _3407.z;
                                frontier_phi_75_pred_4 = _3623 * _3407.y;
                                frontier_phi_75_pred_5 = _3623 * _3407.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3632 = frontier_phi_75_pred;
                            _3631 = frontier_phi_75_pred_1;
                            _3630 = frontier_phi_75_pred_2;
                            _3629 = frontier_phi_75_pred_3;
                            _3628 = frontier_phi_75_pred_4;
                            _3627 = frontier_phi_75_pred_5;
                            _3337 = _3630 + _3350;
                            _3338 = _3631 + _3351;
                            _3339 = _3632 + _3352;
                            _3334 = _3627 + _3347;
                            _3335 = _3628 + _3348;
                            _3336 = _3629 + _3349;
                            if (_3354 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3347 = _3334;
                                _3348 = _3335;
                                _3349 = _3336;
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3354;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3339;
                        frontier_phi_69_pred_1 = _3338;
                        frontier_phi_69_pred_2 = _3337;
                        frontier_phi_69_pred_3 = _3336;
                        frontier_phi_69_pred_4 = _3335;
                        frontier_phi_69_pred_5 = _3334;
                    }
                    _3007 = frontier_phi_69_pred;
                    _3005 = frontier_phi_69_pred_1;
                    _3003 = frontier_phi_69_pred_2;
                    _3001 = frontier_phi_69_pred_3;
                    _2999 = frontier_phi_69_pred_4;
                    _2997 = frontier_phi_69_pred_5;
                    uint _3142 = _3141 + 1u;
                    if (_3142 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3135 = _2997;
                        _3136 = _2999;
                        _3137 = _3001;
                        _3138 = _3003;
                        _3139 = _3005;
                        _3140 = _3007;
                        _3141 = _3142;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _3007;
                frontier_phi_57_58_ladder_1 = _3005;
                frontier_phi_57_58_ladder_2 = _3003;
                frontier_phi_57_58_ladder_3 = _3001;
                frontier_phi_57_58_ladder_4 = _2999;
                frontier_phi_57_58_ladder_5 = _2997;
            }
            else
            {
                frontier_phi_57_58_ladder = _2894;
                frontier_phi_57_58_ladder_1 = _2892;
                frontier_phi_57_58_ladder_2 = _2890;
                frontier_phi_57_58_ladder_3 = _2888;
                frontier_phi_57_58_ladder_4 = _2886;
                frontier_phi_57_58_ladder_5 = _2884;
            }
            _2996 = frontier_phi_57_58_ladder_5;
            _2998 = frontier_phi_57_58_ladder_4;
            _3000 = frontier_phi_57_58_ladder_3;
            _3002 = frontier_phi_57_58_ladder_2;
            _3004 = frontier_phi_57_58_ladder_1;
            _3006 = frontier_phi_57_58_ladder;
        }
        float _3011 = isnan(1.0) ? _1022 : (isnan(_1022) ? 1.0 : min(_1022, 1.0));
        _2777 = (_3011 * _3002) + _2211;
        _2779 = (_3011 * _3004) + _2213;
        _2781 = (_3011 * _3006) + _2215;
        _2783 = ((_2996 * _1007) * _3011) + _2559;
        _2785 = ((_2998 * _1009) * _3011) + _2561;
        _2787 = ((_3000 * _1010) * _3011) + _2563;
    }
    else
    {
        _2777 = _2211;
        _2779 = _2213;
        _2781 = _2215;
        _2783 = _2559;
        _2785 = _2561;
        _2787 = _2563;
    }
    uint _2793 = _951 + uint(cbMatDynParam._m0[0u].w);
    float _4670 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _4681 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _4692 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _2818 = (((isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (_2777 + ((isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))) * _1022))) + ((_2783 + ((isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0))) * _1830)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2793].x * ((((_614 + (_484 * _436)) - (_614 * _484)) + cbMtdParam._m0[13u].x) + ((((((_751.x - _748) * _729) + _748) * cbMtdParam._m0[11u].x) + ((cbMtdParam._m0[22u].y * _682) * cbMtdParam._m0[12u].x)) * _691)));
    float _2820 = ((cbInstanceData._m0[_2793].y * ((((_615 + (_484 * _437)) - (_615 * _484)) + cbMtdParam._m0[13u].y) + ((((((_751.y - _749) * _729) + _749) * cbMtdParam._m0[11u].y) + ((cbMtdParam._m0[22u].y * (((_671.y - _666.y) * _650) + _666.y)) * cbMtdParam._m0[12u].y)) * _691))) + ((_2785 + ((isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0))) * _1830)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * (_2779 + ((isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))) * _1022)));
    float _2822 = ((cbInstanceData._m0[_2793].z * ((((_616 + (_484 * _438)) - (_616 * _484)) + cbMtdParam._m0[13u].z) + ((((((_751.z - _750) * _729) + _750) * cbMtdParam._m0[11u].z) + ((cbMtdParam._m0[22u].y * (((_671.z - _666.z) * _650) + _666.z)) * cbMtdParam._m0[12u].z)) * _691))) + ((_2787 + ((isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0))) * _1830)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0))) * (_2781 + ((isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))) * _1022)));
    uint _2826 = _950 + 6u;
    float _2834 = _893 / cbSceneParam._m0[86u].x;
    float _2835 = _894 / cbSceneParam._m0[86u].y;
    vec4 _2849 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2834, _2835, (log2((isnan(cbSceneParam._m0[77u].w) ? _828 : (isnan(_828) ? cbSceneParam._m0[77u].w : min(_828, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2851 = _2849.x;
    float _2852 = _2849.y;
    float _2853 = _2849.z;
    float _2854 = _2849.w;
    float _2946;
    float _2948;
    float _2950;
    float _2952;
    if (_828 > cbSceneParam._m0[78u].w)
    {
        float _2909 = isnan(_828) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _828 : min(cbSceneParam._m0[80u].w, _828));
        float _2910 = _2909 / _828;
        float _2921 = _2910 * _878;
        float _2922 = _879 * _2910;
        float _2923 = (-0.0) - _2922;
        float _2924 = _2910 * _880;
        float _2926 = (cbSceneParam._m0[77u].w * _2923) / _2909;
        float _2927 = _2926 + cbSceneParam._m0[79u].w;
        float _2928 = cbSceneParam._m0[79u].w - _2922;
        float _2934 = sqrt(((_2921 * _2921) + (_2922 * _2922)) + (_2924 * _2924));
        float _2937 = (1.0 - (cbSceneParam._m0[77u].w / _2909)) * _2934;
        float _2942 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2944 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3097;
        if (abs((_2923 - _2926) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3097 = ((((_2927 > 0.0) ? exp2(_2942 * _2927) : (2.0 - exp2(_2944 * _2927))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2937;
        }
        else
        {
            float _3057 = 1.0 / cbSceneParam._m0[80u].x;
            float _3058 = isnan(_2928) ? _2927 : (isnan(_2927) ? _2928 : max(_2927, _2928));
            float _3059 = isnan(_2928) ? _2927 : (isnan(_2927) ? _2928 : min(_2927, _2928));
            float _3068 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : min(_3058, 0.0));
            float _3069 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : min(_3059, 0.0));
            _3097 = ((abs(_2934 / _2923) * cbSceneParam._m0[80u].y) * ((((_3068 - _3069) * 2.0) - ((exp2(_2942 * (isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0)))) - exp2(_2942 * (isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0))))) * _3057)) - ((exp2(_2944 * _3068) - exp2(_2944 * _3069)) * _3057))) + (_2937 * cbSceneParam._m0[80u].z);
        }
        vec4 _3099 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2834, _2835, 1.0), 0.0);
        float _3108 = exp2((_3097 * (-1.44269502162933349609375)) * (1.0 - _3099.w));
        float _3109 = log2(_3108);
        float _3125 = log2(_2854);
        _2946 = (exp2(_3125 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3109 * cbSceneParam._m0[78u].x)) * _3099.x) / cbSceneParam._m0[78u].x)) + _2851;
        _2948 = (exp2(_3125 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3109 * cbSceneParam._m0[78u].y)) * _3099.y) / cbSceneParam._m0[78u].y)) + _2852;
        _2950 = (exp2(_3125 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3109 * cbSceneParam._m0[78u].z)) * _3099.z) / cbSceneParam._m0[78u].z)) + _2853;
        _2952 = _3108 * _2854;
    }
    else
    {
        _2946 = _2851;
        _2948 = _2852;
        _2950 = _2853;
        _2952 = _2854;
    }
    float _2964 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2965 = _2964 == 3.0;
    float _2966 = log2(_2952);
    float _2973 = exp2(_2966 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0)));
    float _2974 = exp2(_2966 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0)));
    float _2975 = exp2(_2966 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0)));
    float _2984 = (_2964 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2984 * (_2965 ? _2973 : (_2973 + (cbSceneParam._m0[72u].w * _2946)));
    SV_Target.y = _2984 * (_2965 ? _2974 : (_2974 + (cbSceneParam._m0[72u].w * _2948)));
    SV_Target.z = _2984 * (_2965 ? _2975 : (_2975 + (cbSceneParam._m0[72u].w * _2950)));
    SV_Target.w = cbInstanceData._m0[_2826].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2826].w;
}


