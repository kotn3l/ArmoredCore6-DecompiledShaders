#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[25];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_c4200_transition_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_c4200_transition_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_c4200_transition_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D C_c4200_transition_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_c4200_transition_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D C_c4200_transition_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_c4200_transition_snp_0_Texture2D_12;
layout(set = 0, binding = 8) uniform texture2D C_c4200_transition_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_c4200_transition_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1423;
float _3845;
float _3846;
float _3847;
float _3848;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240;
    float _241;
    float _242;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _240 = (-0.0) - _226;
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
    }
    else
    {
        _240 = _226;
        _241 = _227;
        _242 = _228;
    }
    vec4 _256 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _259 = _256.x;
    float _268 = cbMtdParam._m0[18u].y * 0.3333333432674407958984375;
    float _273 = fract(abs(_268));
    float _285 = cbMtdParam._m0[18u].x * cbPerFrame._m0[22u].x;
    float _288 = (_285 * cbMtdParam._m0[24u].x) + TEXCOORD.x;
    float _289 = (_285 * cbMtdParam._m0[24u].y) + TEXCOORD.y;
    vec4 _312 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * ((_285 * cbMtdParam._m0[23u].x) + TEXCOORD.x)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * ((cbMtdParam._m0[23u].y * _285) + TEXCOORD.y)) + cbTextureTilingScale._m0[10u].w));
    float _316 = cbPerFrame._m0[22u].x * 2.0;
    float _318 = _316 * cbMtdParam._m0[19u].w;
    float _321 = (_312.x * 0.5) + (-0.25);
    float _324 = (_312.y * 0.5) + (-0.25);
    float _325 = _324 * cbMtdParam._m0[18u].z;
    float _327 = (-0.0) - (cbMtdParam._m0[18u].z * _321);
    float _328 = fract(_318);
    float _330 = fract(_318 + 0.5);
    float _331 = _328 * _327;
    float _332 = _325 * _328;
    float _335 = _330 * _327;
    float _336 = _325 * _330;
    float _342 = abs((_328 * 2.0) + (-1.0));
    vec4 _359 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_9, SS_DiffuseMap), vec2(((_331 + _288) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, ((_332 + _289) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w));
    float _361 = _359.x;
    float _372 = (0.25 - ((((_268 >= ((-0.0) - _268)) ? _273 : ((-0.0) - _273)) * 3.0) - _259)) + ((((texture(sampler2D(C_c4200_transition_snp_0_Texture2D_9, SS_DiffuseMap), vec2(((_335 + _288) * cbTextureTilingScale._m0[12u].x) + cbTextureTilingScale._m0[12u].z, ((_336 + _289) * cbTextureTilingScale._m0[12u].y) + cbTextureTilingScale._m0[12u].w)).x - _361) * _342) + _361) * 1.35000002384185791015625);
    float _375 = abs(_372 * cbMtdParam._m0[19u].z);
    float _379 = (((_375 * cbMtdParam._m0[19u].y) - _259) * _375) + _259;
    float _3857 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _381 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _392 = (cbMtdParam._m0[23u].z * _285) + TEXCOORD.x;
    float _393 = (cbMtdParam._m0[23u].w * _285) + TEXCOORD.y;
    vec4 _413 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_331 + _392) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_332 + _393) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _415 = _413.x;
    float _416 = _413.y;
    float _417 = _413.z;
    vec4 _418 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_10, SS_DiffuseMap), vec2(((_335 + _392) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_336 + _393) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _432 = (((_418.x - _415) * _342) + _415) * cbMtdParam._m0[14u].x;
    float _433 = (((_418.y - _416) * _342) + _416) * cbMtdParam._m0[14u].y;
    float _434 = (((_418.z - _417) * _342) + _417) * cbMtdParam._m0[14u].z;
    float _438 = _432 - (_432 * _381);
    float _439 = _433 - (_433 * _381);
    float _440 = _434 - (_434 * _381);
    vec4 _458 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _463 = ceil(_372);
    float _3868 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _464 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _478 = (((cbMtdParam._m0[9u].x - cbMtdParam._m0[15u].x) * _464) + cbMtdParam._m0[15u].x) * _458.x;
    float _480 = (((cbMtdParam._m0[9u].y - cbMtdParam._m0[15u].y) * _464) + cbMtdParam._m0[15u].y) * _458.y;
    float _482 = (((cbMtdParam._m0[9u].z - cbMtdParam._m0[15u].z) * _464) + cbMtdParam._m0[15u].z) * _458.z;
    float _486 = exp2(log2(_381) * cbMtdParam._m0[19u].x);
    float _493 = (_486 * (_438 - _478)) + _478;
    float _494 = (_486 * (_439 - _480)) + _480;
    float _495 = (_486 * (_440 - _482)) + _482;
    vec4 _510 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _514 = _510.z;
    float _517 = (_510.x * 2.0) + (-1.0);
    float _518 = (_510.y * 2.0) + (-1.0);
    float _519 = dot(vec2(_517, _518), vec2(_517, _518));
    float _3879 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _524 = sqrt(1.0 - (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))));
    float _535 = (cbMtdParam._m0[24u].z * _285) + TEXCOORD.x;
    float _536 = (cbMtdParam._m0[24u].w * _285) + TEXCOORD.y;
    float _542 = _316 * cbMtdParam._m0[20u].z;
    float _543 = _324 * cbMtdParam._m0[20u].y;
    float _545 = (-0.0) - (cbMtdParam._m0[20u].y * _321);
    float _546 = fract(_542);
    float _548 = fract(_542 + 0.5);
    float _559 = abs((_546 * 2.0) + (-1.0));
    vec4 _575 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_11, SS_DiffuseMap), vec2((((_546 * _545) + _535) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_543 * _546) + _536) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _577 = _575.x;
    float _578 = _575.y;
    float _579 = _575.z;
    vec4 _580 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_11, SS_DiffuseMap), vec2((((_548 * _545) + _535) * cbTextureTilingScale._m0[3u].x) + cbTextureTilingScale._m0[3u].z, (((_543 * _548) + _536) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _594 = (((_580.x - _577) * _559) + _577) * cbMtdParam._m0[16u].x;
    float _595 = (((_580.y - _578) * _559) + _578) * cbMtdParam._m0[16u].y;
    float _596 = (((_580.z - _579) * _559) + _579) * cbMtdParam._m0[16u].z;
    float _600 = _594 - (_594 * _464);
    float _601 = _595 - (_595 * _464);
    float _602 = _596 - (_596 * _464);
    float _619 = _316 * cbMtdParam._m0[21u].w;
    float _620 = _324 * cbMtdParam._m0[22u].x;
    float _622 = (-0.0) - (cbMtdParam._m0[22u].x * _321);
    float _623 = fract(_619);
    float _625 = fract(_619 + 0.5);
    float _636 = abs((_623 * 2.0) + (-1.0));
    vec4 _652 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_623 * _622) + TEXCOORD.x) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((_620 * _623) + TEXCOORD.y) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    vec4 _657 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_6, SS_DiffuseMap), vec2((((_625 * _622) + TEXCOORD.x) * cbTextureTilingScale._m0[9u].x) + cbTextureTilingScale._m0[9u].z, (((_620 * _625) + TEXCOORD.y) * cbTextureTilingScale._m0[9u].y) + cbTextureTilingScale._m0[9u].w));
    float _668 = ((_657.x - _652.x) * _636) + _652.x;
    float _675 = exp2(log2(_668 * cbMtdParam._m0[21u].z) * cbMtdParam._m0[21u].y);
    float _676 = isnan(cbMtdParam._m0[21u].x) ? _675 : (isnan(_675) ? cbMtdParam._m0[21u].x : max(_675, cbMtdParam._m0[21u].x));
    float _677 = isnan(cbMtdParam._m0[20u].x) ? _676 : (isnan(_676) ? cbMtdParam._m0[20u].x : min(_676, cbMtdParam._m0[20u].x));
    float _698 = _316 * cbMtdParam._m0[17u].z;
    float _699 = _324 * cbMtdParam._m0[17u].w;
    float _701 = (-0.0) - (cbMtdParam._m0[17u].w * _321);
    float _702 = fract(_698);
    float _704 = fract(_698 + 0.5);
    float _715 = abs((_702 * 2.0) + (-1.0));
    vec4 _732 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_702 * _701) + TEXCOORD.x) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_699 * _702) + TEXCOORD.y) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _734 = _732.x;
    float _735 = _732.y;
    float _736 = _732.z;
    vec4 _737 = texture(sampler2D(C_c4200_transition_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_704 * _701) + TEXCOORD.x) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_699 * _704) + TEXCOORD.y) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _780 = fma(_524, _240, fma(_518, _232 * TANGENT.x, (_218 * _210) * _517));
    float _783 = fma(_524, _241, fma(_518, _232 * TANGENT.y, (_218 * _211) * _517));
    float _786 = fma(_524, _242, fma(_518, _232 * TANGENT.z, (_218 * _212) * _517));
    float _790 = inversesqrt(dot(vec3(_780, _783, _786), vec3(_780, _783, _786)));
    float _791 = _790 * _780;
    float _792 = _790 * _783;
    float _793 = _790 * _786;
    float _3900 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _794 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _3911 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _3922 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _3933 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _3944 = isnan(0.0) ? cbMtdParam._m0[17u].x : (isnan(cbMtdParam._m0[17u].x) ? 0.0 : max(cbMtdParam._m0[17u].x, 0.0));
    float _798 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _814 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _854 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _864 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _854);
    float _865 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _854);
    float _866 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _854);
    float _870 = inversesqrt(dot(vec3(_864, _865, _866), vec3(_864, _865, _866)));
    float _871 = _864 * _870;
    float _872 = _865 * _870;
    float _873 = _866 * _870;
    vec4 _878 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _880 = _878.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1103 = sqrt(((_864 * _864) + (_865 * _865)) + (_866 * _866));
        float _1109 = (cbMatDynParam._m0[5u].x * _1103) + cbMatDynParam._m0[5u].y;
        float _3955 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1114 = (cbMatDynParam._m0[5u].z * _1103) + cbMatDynParam._m0[5u].w;
        float _3966 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) - _1110)) + _1110) < ((_880 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _892 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _893 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _895 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _897 = _895.w;
    float _917 = fma(_793, cbSceneParam._m0[5u].z, fma(_792, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _791));
    float _920 = fma(_793, cbSceneParam._m0[6u].z, fma(_792, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _791));
    float _923 = fma(_793, cbSceneParam._m0[7u].z, fma(_792, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _791));
    vec4 _925 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _936 = (((_925.y - _794) + (_925.w * _794)) * cbMtdParam._m0[3u].x) + _794;
    uint _949 = uint(roundEven(NORMAL.w)) * 13u;
    uint _950 = _949 + 9u;
    uint _951 = _950 + uint(cbMatDynParam._m0[0u].w);
    float _957 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) * cbInstanceData._m0[_951].x;
    float _958 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) * cbInstanceData._m0[_951].y;
    float _959 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0)))) * cbInstanceData._m0[_951].z;
    float _3977 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _960 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _3988 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _961 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _3999 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _962 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    vec4 _963 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _968 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _979 = (((_968.x - _798) + (_968.w * _798)) * cbMtdParam._m0[3u].x) + _798;
    float _992 = (cbMtdParam._m0[3u].x * (((_960 * _897) - _960) + _963.x)) + _960;
    float _993 = (cbMtdParam._m0[3u].x * (((_961 * _897) - _961) + _963.y)) + _961;
    float _994 = (cbMtdParam._m0[3u].x * (((_962 * _897) - _962) + _963.z)) + _962;
    float _995 = 1.0 - _979;
    float _996 = _995 * _992;
    float _997 = _995 * _993;
    float _998 = _995 * _994;
    float _1003 = (_992 + (-0.039999999105930328369140625)) * _979;
    float _1004 = (_993 + (-0.039999999105930328369140625)) * _979;
    float _1005 = (_994 + (-0.039999999105930328369140625)) * _979;
    float _1006 = _1003 + 0.039999999105930328369140625;
    float _1008 = _1004 + 0.039999999105930328369140625;
    float _1009 = _1005 + 0.039999999105930328369140625;
    vec4 _1018 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _892, cbSceneParam._m0[86u].y * _893));
    float _1021 = _1018.x * TEXCOORD_4;
    float _1022 = dot(vec3(_791, _792, _793), vec3(_871, _872, _873));
    float _1025 = _1022 * 2.0;
    float _1029 = (_1025 * _791) - _871;
    float _1030 = (_1025 * _792) - _872;
    float _1031 = (_1025 * _793) - _873;
    float _1035 = abs(dot(vec3(_871, _872, _873), vec3(_791, _792, _793)));
    float _4010 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _1037 = sqrt(_936);
    float _1049 = exp2((_1037 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1037 * 3.0));
    float _1055 = (1.0 - _1049) * ((_1037 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1056 = _1049 * _1037;
    float _1084 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1088 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1092 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1422;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1148 = fma(_1092, cbModelParam._m0[26u].z, fma(_1088, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1084));
        float _1152 = fma(_1092, cbModelParam._m0[27u].z, fma(_1088, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1084));
        float _1156 = fma(_1092, cbModelParam._m0[28u].z, fma(_1088, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1084));
        float _1180 = _1084 + _791;
        float _1181 = _1088 + _792;
        float _1182 = _1092 + _793;
        float _1192 = fma(_1182, cbModelParam._m0[26u].z, fma(_1181, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1180)) - _1148;
        float _1193 = fma(_1182, cbModelParam._m0[27u].z, fma(_1181, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1180)) - _1152;
        float _1194 = fma(_1182, cbModelParam._m0[28u].z, fma(_1181, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1180)) - _1156;
        float _1198 = inversesqrt(dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194)));
        float _1211 = ((_1198 * _1192) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1148 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1212 = ((_1198 * _1193) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1152 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1213 = ((_1198 * _1194) / cbModelParam._m0[34u].z) + ((((((_1156 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        float _1250 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1216.x + (-0.5));
        float _1252 = _1250 * (_1216.y + (-0.5));
        float _1253 = _1250 * (_1216.z + (-0.5));
        float _1260 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1223.x + (-0.5));
        float _1262 = _1260 * (_1223.y + (-0.5));
        float _1263 = _1260 * (_1223.z + (-0.5));
        float _1270 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1230.x + (-0.5));
        float _1272 = _1270 * (_1230.y + (-0.5));
        float _1273 = _1270 * (_1230.z + (-0.5));
        float _1280 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1237.x + (-0.5));
        float _1282 = _1280 * (_1237.y + (-0.5));
        float _1283 = _1280 * (_1237.z + (-0.5));
        float _1284 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = _1251 * 0.5;
        float _1288 = _1261 * 0.5;
        float _1289 = _1271 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1304 = (dot(vec3(_791, _792, _793), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _4036 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1314 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1284 + 9.9999997473787516355514526367188e-06);
        float _4047 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _4058 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_1316 + 1.0))) + _1321) * _1284;
        float _1331 = _1252 * 0.5;
        float _1332 = _1262 * 0.5;
        float _1333 = _1272 * 0.5;
        float _1334 = dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333));
        float _1339 = (_1334 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1334);
        float _1347 = (dot(vec3(_791, _792, _793), vec3(_1339 * _1331, _1339 * _1332, _1339 * _1333)) + 1.0) * 0.5;
        float _4069 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1356 = sqrt(((_1332 * _1332) + (_1331 * _1331)) + (_1333 * _1333)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _4080 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _4091 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_1358 + 1.0))) + _1363) * _1285;
        float _1373 = _1253 * 0.5;
        float _1374 = _1263 * 0.5;
        float _1375 = _1273 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1389 = (dot(vec3(_791, _792, _793), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _4102 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1398 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _4113 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _4124 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_1400 + 1.0))) + _1405) * _1286;
        _1422 = _1253;
        _1424 = _1252;
        _1425 = _1251;
        _1426 = _1263;
        _1427 = _1262;
        _1428 = _1261;
        _1429 = _1273;
        _1430 = _1272;
        _1431 = _1271;
        _1432 = _1286;
        _1433 = _1285;
        _1434 = _1284;
        _1435 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
        _1436 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
        _1437 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
    }
    else
    {
        _1422 = _1423;
        _1424 = _1423;
        _1425 = _1423;
        _1426 = _1423;
        _1427 = _1423;
        _1428 = _1423;
        _1429 = _1423;
        _1430 = _1423;
        _1431 = _1423;
        _1432 = _1423;
        _1433 = _1423;
        _1434 = _1423;
        _1435 = 0.0;
        _1436 = 0.0;
        _1437 = 0.0;
    }
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1466 = fma(_1092, cbModelParam._m0[30u].z, fma(_1088, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1084));
        float _1470 = fma(_1092, cbModelParam._m0[31u].z, fma(_1088, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1084));
        float _1474 = fma(_1092, cbModelParam._m0[32u].z, fma(_1088, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1084));
        float _1497 = _1084 + _791;
        float _1498 = _1088 + _792;
        float _1499 = _1092 + _793;
        float _1509 = fma(_1499, cbModelParam._m0[30u].z, fma(_1498, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1497)) - _1466;
        float _1510 = fma(_1499, cbModelParam._m0[31u].z, fma(_1498, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1497)) - _1470;
        float _1511 = fma(_1499, cbModelParam._m0[32u].z, fma(_1498, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1497)) - _1474;
        float _1515 = inversesqrt(dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511)));
        float _1528 = ((_1515 * _1509) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1466 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1529 = ((_1515 * _1510) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1470 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1530 = ((_1515 * _1511) / cbModelParam._m0[35u].z) + ((((((_1474 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1532 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1528, _1529, _1530), 0.0);
        vec4 _1539 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1528, _1529, _1530), 0.0);
        vec4 _1546 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1528, _1529, _1530), 0.0);
        vec4 _1553 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1528, _1529, _1530), 0.0);
        float _1565 = exp2((_1532.w + (-0.5)) * 20.0) * 2.0;
        float _1566 = _1565 * (_1532.x + (-0.5));
        float _1567 = _1565 * (_1532.y + (-0.5));
        float _1568 = _1565 * (_1532.z + (-0.5));
        float _1575 = exp2((_1539.w + (-0.5)) * 20.0) * 2.0;
        float _1576 = _1575 * (_1539.x + (-0.5));
        float _1577 = _1575 * (_1539.y + (-0.5));
        float _1578 = _1575 * (_1539.z + (-0.5));
        float _1585 = exp2((_1546.w + (-0.5)) * 20.0) * 2.0;
        float _1586 = _1585 * (_1546.x + (-0.5));
        float _1587 = _1585 * (_1546.y + (-0.5));
        float _1588 = _1585 * (_1546.z + (-0.5));
        float _1595 = exp2((_1553.w + (-0.5)) * 20.0) * 2.0;
        float _1596 = _1595 * (_1553.x + (-0.5));
        float _1597 = _1595 * (_1553.y + (-0.5));
        float _1598 = _1595 * (_1553.z + (-0.5));
        float _1599 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1600 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1601 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1602 = _1566 * 0.5;
        float _1603 = _1576 * 0.5;
        float _1604 = _1586 * 0.5;
        float _1605 = dot(vec3(_1602, _1603, _1604), vec3(_1602, _1603, _1604));
        float _1610 = (_1605 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1605);
        float _1618 = (dot(vec3(_791, _792, _793), vec3(_1610 * _1602, _1610 * _1603, _1610 * _1604)) + 1.0) * 0.5;
        float _4165 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1627 = sqrt(((_1603 * _1603) + (_1602 * _1602)) + (_1604 * _1604)) / (_1599 + 9.9999997473787516355514526367188e-06);
        float _4176 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1629 = _1628 * 2.0;
        float _1633 = (1.0 - _1628) / (_1628 + 1.0);
        float _4187 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1643 = ((((1.0 - _1634) * (_1629 + 2.0)) * exp2(log2(isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_1629 + 1.0))) + _1634) * _1599;
        float _1644 = _1567 * 0.5;
        float _1645 = _1577 * 0.5;
        float _1646 = _1587 * 0.5;
        float _1647 = dot(vec3(_1644, _1645, _1646), vec3(_1644, _1645, _1646));
        float _1652 = (_1647 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1647);
        float _1660 = (dot(vec3(_791, _792, _793), vec3(_1652 * _1644, _1652 * _1645, _1652 * _1646)) + 1.0) * 0.5;
        float _4198 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1669 = sqrt(((_1645 * _1645) + (_1644 * _1644)) + (_1646 * _1646)) / (_1600 + 9.9999997473787516355514526367188e-06);
        float _4209 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1671 = _1670 * 2.0;
        float _1675 = (1.0 - _1670) / (_1670 + 1.0);
        float _4220 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1685 = ((((1.0 - _1676) * (_1671 + 2.0)) * exp2(log2(isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_1671 + 1.0))) + _1676) * _1600;
        float _1686 = _1568 * 0.5;
        float _1687 = _1578 * 0.5;
        float _1688 = _1588 * 0.5;
        float _1689 = dot(vec3(_1686, _1687, _1688), vec3(_1686, _1687, _1688));
        float _1694 = (_1689 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1689);
        float _1702 = (dot(vec3(_791, _792, _793), vec3(_1694 * _1686, _1694 * _1687, _1694 * _1688)) + 1.0) * 0.5;
        float _4231 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1711 = sqrt(((_1687 * _1687) + (_1686 * _1686)) + (_1688 * _1688)) / (_1601 + 9.9999997473787516355514526367188e-06);
        float _4242 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1713 = _1712 * 2.0;
        float _1717 = (1.0 - _1712) / (_1712 + 1.0);
        float _4253 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1718 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1727 = ((((1.0 - _1718) * (_1713 + 2.0)) * exp2(log2(isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_1713 + 1.0))) + _1718) * _1601;
        _1735 = _1568;
        _1736 = _1567;
        _1737 = _1566;
        _1738 = _1578;
        _1739 = _1577;
        _1740 = _1576;
        _1741 = _1588;
        _1742 = _1587;
        _1743 = _1586;
        _1744 = _1601;
        _1745 = _1600;
        _1746 = _1599;
        _1747 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)));
        _1748 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)));
        _1749 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)));
    }
    else
    {
        _1735 = _1423;
        _1736 = _1423;
        _1737 = _1423;
        _1738 = _1423;
        _1739 = _1423;
        _1740 = _1423;
        _1741 = _1423;
        _1742 = _1423;
        _1743 = _1423;
        _1744 = _1423;
        _1745 = _1423;
        _1746 = _1423;
        _1747 = 0.0;
        _1748 = 0.0;
        _1749 = 0.0;
    }
    float _1759 = (cbModelParam._m0[1u].x * (_1747 - _1435)) + _1435;
    float _1760 = (cbModelParam._m0[1u].x * (_1748 - _1436)) + _1436;
    float _1761 = (cbModelParam._m0[1u].x * (_1749 - _1437)) + _1437;
    float _1782 = fma(_1761, cbSceneParam._m0[89u].z, fma(_1760, cbSceneParam._m0[89u].y, _1759 * cbSceneParam._m0[89u].x));
    float _1785 = fma(_1761, cbSceneParam._m0[90u].z, fma(_1760, cbSceneParam._m0[90u].y, _1759 * cbSceneParam._m0[90u].x));
    float _1788 = fma(_1761, cbSceneParam._m0[91u].z, fma(_1760, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1759));
    float _1803 = _1029 * 0.5;
    float _1804 = _1030 * 0.5;
    float _1805 = _1031 * 0.5;
    float _1806 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1737, _1740, _1743, _1746));
    float _1809 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1736, _1739, _1742, _1745));
    float _1812 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1735, _1738, _1741, _1744));
    float _1846;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1819 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1422, _1426, _1429, _1432));
        float _1823 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1424, _1427, _1430, _1433));
        float _1827 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1425, _1428, _1431, _1434));
        float _1834 = dot(vec4(cbModelParam._m0[39u]), vec4(_1803, _1804, _1805, 1.0));
        _1846 = dot(vec3(isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0)), isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0)), isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1834) ? 0.0 : (isnan(0.0) ? _1834 : max(0.0, _1834))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1846 = 1.0;
    }
    float _1857;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1848 = dot(vec4(cbModelParam._m0[40u]), vec4(_1803, _1804, _1805, 1.0));
        _1857 = dot(vec3(isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)), isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)), isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1848) ? 0.0 : (isnan(0.0) ? _1848 : max(0.0, _1848))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1857 = 1.0;
    }
    float _1861 = (_1857 * cbModelParam._m0[1u].x) + (_1846 * (1.0 - cbModelParam._m0[1u].x));
    float _1871 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _936);
    float _1872 = isnan(_1871) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1871 : min(cbModelParam._m0[25u].z, _1871));
    float _1952;
    float _1954;
    float _1956;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1919 = fma(_1092, cbModelParam._m0[13u].z, fma(_1088, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1084)) + cbModelParam._m0[13u].w;
        float _1923 = fma(_1092, cbModelParam._m0[14u].z, fma(_1088, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1084)) + cbModelParam._m0[14u].w;
        float _1927 = fma(_1092, cbModelParam._m0[15u].z, fma(_1088, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1084)) + cbModelParam._m0[15u].w;
        float _1930 = fma(_1031, cbModelParam._m0[13u].z, fma(_1030, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1029));
        float _1933 = fma(_1031, cbModelParam._m0[14u].z, fma(_1030, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1029));
        float _1936 = fma(_1031, cbModelParam._m0[15u].z, fma(_1030, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1029));
        float _1964;
        if (_1930 > 0.0)
        {
            _1964 = abs((1.0 - _1919) / _1930);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1919 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1964 = frontier_phi_19_17_ladder;
        }
        float _2187;
        if (_1933 > 0.0)
        {
            _2187 = abs((1.0 - _1923) / _1933);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1923 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2187 = frontier_phi_28_24_ladder;
        }
        float _2444;
        if (_1936 > 0.0)
        {
            _2444 = abs((1.0 - _1927) / _1936);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1927 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2444 = frontier_phi_40_35_ladder;
        }
        float _2446 = isnan(_2187) ? _1964 : (isnan(_1964) ? _2187 : min(_1964, _2187));
        float _2447 = isnan(_2444) ? _2446 : (isnan(_2446) ? _2444 : min(_2446, _2444));
        float _2451 = (_2447 * _1930) + _1919;
        float _2452 = (_2447 * _1933) + _1923;
        float _2453 = (_2447 * _1936) + _1927;
        float _2454 = _2447 * 9.9999997473787516355514526367188e-05;
        float _2456 = (-1.0) - _2454;
        float _2458 = _2454 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2453 > _2458) || ((_2453 < _2456) || ((_2452 > _2458) || ((_2452 < _2456) || ((_2451 < _2456) || (_2451 > _2458))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2581 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2453, cbModelParam._m0[9u].z, fma(_2452, cbModelParam._m0[9u].y, _2451 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2453, cbModelParam._m0[10u].z, fma(_2452, cbModelParam._m0[10u].y, _2451 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2453, cbModelParam._m0[11u].z, fma(_2452, cbModelParam._m0[11u].y, _2451 * cbModelParam._m0[11u].x))), _1872);
            frontier_phi_18_40_ladder = _2581.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2581.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2581.x * cbModelParam._m0[1u].y;
        }
        _1952 = frontier_phi_18_40_ladder_2;
        _1954 = frontier_phi_18_40_ladder_1;
        _1956 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1940 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1029, _1030, _1031), _1872);
        _1952 = _1940.x * cbModelParam._m0[1u].y;
        _1954 = _1940.y * cbModelParam._m0[1u].y;
        _1956 = _1940.z * cbModelParam._m0[1u].y;
    }
    float _1960 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _936);
    float _1961 = isnan(_1960) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1960 : min(cbModelParam._m0[25u].w, _1960));
    float _2050;
    float _2052;
    float _2054;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2014 = fma(_1092, cbModelParam._m0[21u].z, fma(_1088, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1084)) + cbModelParam._m0[21u].w;
        float _2018 = fma(_1092, cbModelParam._m0[22u].z, fma(_1088, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1084)) + cbModelParam._m0[22u].w;
        float _2022 = fma(_1092, cbModelParam._m0[23u].z, fma(_1088, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1084)) + cbModelParam._m0[23u].w;
        float _2025 = fma(_1031, cbModelParam._m0[21u].z, fma(_1030, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1029));
        float _2028 = fma(_1031, cbModelParam._m0[22u].z, fma(_1030, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1029));
        float _2031 = fma(_1031, cbModelParam._m0[23u].z, fma(_1030, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1029));
        float _2192;
        if (_2025 > 0.0)
        {
            _2192 = abs((1.0 - _2014) / _2025);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2025 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2014 + 1.0) / _2025);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2192 = frontier_phi_30_26_ladder;
        }
        float _2471;
        if (_2028 > 0.0)
        {
            _2471 = abs((1.0 - _2018) / _2028);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2028 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2018 + 1.0) / _2028);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2471 = frontier_phi_42_37_ladder;
        }
        float _2684;
        if (_2031 > 0.0)
        {
            _2684 = abs((1.0 - _2022) / _2031);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2031 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2022 + 1.0) / _2031);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2684 = frontier_phi_51_48_ladder;
        }
        float _2686 = isnan(_2471) ? _2192 : (isnan(_2192) ? _2471 : min(_2192, _2471));
        float _2687 = isnan(_2684) ? _2686 : (isnan(_2686) ? _2684 : min(_2686, _2684));
        float _2691 = (_2687 * _2025) + _2014;
        float _2692 = (_2687 * _2028) + _2018;
        float _2693 = (_2687 * _2031) + _2022;
        float _2694 = _2687 * 9.9999997473787516355514526367188e-05;
        float _2695 = (-1.0) - _2694;
        float _2697 = _2694 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2693 > _2697) || ((_2693 < _2695) || ((_2692 > _2697) || ((_2692 < _2695) || ((_2691 < _2695) || (_2691 > _2697))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2910 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2693, cbModelParam._m0[17u].z, fma(_2692, cbModelParam._m0[17u].y, _2691 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2693, cbModelParam._m0[18u].z, fma(_2692, cbModelParam._m0[18u].y, _2691 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2693, cbModelParam._m0[19u].z, fma(_2692, cbModelParam._m0[19u].y, _2691 * cbModelParam._m0[19u].x))), _1961);
            frontier_phi_27_51_ladder = _2910.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2910.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2910.x * cbModelParam._m0[1u].z;
        }
        _2050 = frontier_phi_27_51_ladder_2;
        _2052 = frontier_phi_27_51_ladder_1;
        _2054 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2034 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1029, _1030, _1031), _1961);
        _2050 = _2034.x * cbModelParam._m0[1u].z;
        _2052 = _2034.y * cbModelParam._m0[1u].z;
        _2054 = _2034.z * cbModelParam._m0[1u].z;
    }
    float _2067 = (((_1055 * _1006) + _1056) * _1021) * ((cbModelParam._m0[1u].w * (_2050 - _1952)) + _1952);
    float _2069 = (((_1055 * _1008) + _1056) * _1021) * ((cbModelParam._m0[1u].w * (_2052 - _1954)) + _1954);
    float _2071 = (((_1055 * _1009) + _1056) * _1021) * ((cbModelParam._m0[1u].w * (_2054 - _1956)) + _1956);
    float _2074 = fma(_2071, cbSceneParam._m0[89u].z, fma(_2069, cbSceneParam._m0[89u].y, _2067 * cbSceneParam._m0[89u].x));
    float _2077 = fma(_2071, cbSceneParam._m0[90u].z, fma(_2069, cbSceneParam._m0[90u].y, _2067 * cbSceneParam._m0[90u].x));
    float _2080 = fma(_2071, cbSceneParam._m0[91u].z, fma(_2069, cbSceneParam._m0[91u].y, _2067 * cbSceneParam._m0[91u].x));
    vec4 _2088 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_892, _893));
    float _2090 = _2088.w;
    float _2102 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2090);
    float _2103 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2090);
    float _2104 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2090);
    uvec4 _2108 = floatBitsToUint(cbInstanceData._m0[_949 + 5u]);
    uint _2110 = _2108.x * 14u;
    uint _2111 = _2110 + 13u;
    float _2118 = _1021 + (-1.0);
    float _2123 = (cbLight._m0[_2111].x * _2118) + 1.0;
    float _2124 = (cbLight._m0[_2111].y * _2118) + 1.0;
    float _2125 = (cbLight._m0[_2111].z * _2118) + 1.0;
    float _2126 = (cbLight._m0[_2111].w * _2118) + 1.0;
    uint _2127 = _2110 + 5u;
    float _2133 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
    uint _2137 = _2110 + 4u;
    float _2146 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
    uint _2150 = _2110 | 1u;
    float _2161 = dot(vec3(cbLight._m0[_2110].xyz), vec3(_791, _792, _793));
    float _2164 = dot(vec3(cbLight._m0[_2150].xyz), vec3(_791, _792, _793));
    float _4389 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _4400 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2169 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * 0.3183098733425140380859375;
    float _2171 = (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * 0.3183098733425140380859375;
    float _2178 = ((cbLight._m0[_2127].x * _2133) * _2171) + (((cbLight._m0[_2137].x * _2102) * _2146) * _2169);
    float _2179 = ((_2133 * cbLight._m0[_2127].y) * _2171) + (((cbLight._m0[_2137].y * _2103) * _2146) * _2169);
    float _2180 = ((_2133 * cbLight._m0[_2127].z) * _2171) + (((cbLight._m0[_2137].z * _2104) * _2146) * _2169);
    uvec4 _2184 = floatBitsToUint(cbLight._m0[_2110 + 12u]);
    bool _2186 = _2184.x == 0u;
    float _2197;
    float _2199;
    float _2201;
    if (_2186)
    {
        _2197 = _2178;
        _2199 = _2179;
        _2201 = _2180;
    }
    else
    {
        uint _2205 = _2110 + 6u;
        float _2221 = (dot(vec3(cbLight._m0[_2110 + 2u].xyz), vec3(_791, _792, _793)) * 0.5) + 0.5;
        float _2222 = _2221 * _2221;
        float _4411 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2223 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _2224 = isnan(1.0) ? _2125 : (isnan(_2125) ? 1.0 : min(_2125, 1.0));
        _2197 = (((cbLight._m0[_2205].x * 0.3183098733425140380859375) * _2223) * _2224) + _2178;
        _2199 = (((cbLight._m0[_2205].y * 0.3183098733425140380859375) * _2223) * _2224) + _2179;
        _2201 = (((cbLight._m0[_2205].z * 0.3183098733425140380859375) * _2223) * _2224) + _2180;
    }
    bool _2204 = _2184.y == 0u;
    float _2242;
    float _2244;
    float _2246;
    if (_2204)
    {
        _2242 = _2197;
        _2244 = _2199;
        _2246 = _2201;
    }
    else
    {
        uint _2415 = _2110 + 7u;
        float _2431 = (dot(vec3(cbLight._m0[_2110 + 3u].xyz), vec3(_791, _792, _793)) * 0.5) + 0.5;
        float _2432 = _2431 * _2431;
        float _4427 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2433 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _2434 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
        _2242 = (((cbLight._m0[_2415].x * 0.3183098733425140380859375) * _2433) * _2434) + _2197;
        _2244 = (((cbLight._m0[_2415].y * 0.3183098733425140380859375) * _2433) * _2434) + _2199;
        _2246 = (((cbLight._m0[_2415].z * 0.3183098733425140380859375) * _2433) * _2434) + _2201;
    }
    uint _2249 = _2110 + 8u;
    float _2262 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2110].w)) * _936) * 0.949999988079071044921875);
    float _2263 = _2262 * _2262;
    float _2264 = cbLight._m0[_2110].x + _871;
    float _2265 = cbLight._m0[_2110].y + _872;
    float _2266 = cbLight._m0[_2110].z + _873;
    float _2270 = inversesqrt(dot(vec3(_2264, _2265, _2266), vec3(_2264, _2265, _2266)));
    float _2271 = _2270 * _2264;
    float _2272 = _2270 * _2265;
    float _2273 = _2270 * _2266;
    float _2274 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2110].xyz));
    float _4443 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2277 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
    float _4454 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _2278 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _2279 = dot(vec3(_791, _792, _793), vec3(_2271, _2272, _2273));
    float _4465 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2282 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
    float _2283 = dot(vec3(cbLight._m0[_2110].xyz), vec3(_2271, _2272, _2273));
    float _4476 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2287 = _2263 * _2263;
    float _2291 = ((_2282 * _2282) * (_2287 + (-1.0))) + 1.0;
    float _2299 = exp2(log2(1.0 - (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0)))) * 5.0);
    float _2300 = 0.959999978542327880859375 - _1003;
    float _2302 = 0.959999978542327880859375 - _1004;
    float _2303 = 0.959999978542327880859375 - _1005;
    float _2310 = 1.0 - _2263;
    float _2321 = (0.5 / (((_2278 * ((_2277 * _2310) + _2263)) + 9.9999999392252902907785028219223e-09) + (((_2278 * _2310) + _2263) * _2277))) * _2277;
    float _4487 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2323 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2287 / ((_2291 * _2291) * 3.141590118408203125));
    uint _2337 = _2110 + 9u;
    float _2348 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2150].w)) * _936) * 0.949999988079071044921875);
    float _2349 = _2348 * _2348;
    float _2350 = cbLight._m0[_2150].x + _871;
    float _2351 = cbLight._m0[_2150].y + _872;
    float _2352 = cbLight._m0[_2150].z + _873;
    float _2356 = inversesqrt(dot(vec3(_2350, _2351, _2352), vec3(_2350, _2351, _2352)));
    float _2357 = _2356 * _2350;
    float _2358 = _2356 * _2351;
    float _2359 = _2356 * _2352;
    float _2360 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2150].xyz));
    float _4498 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2363 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
    float _2364 = dot(vec3(_791, _792, _793), vec3(_2357, _2358, _2359));
    float _4509 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2367 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
    float _2368 = dot(vec3(cbLight._m0[_2150].xyz), vec3(_2357, _2358, _2359));
    float _4520 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2372 = _2349 * _2349;
    float _2376 = ((_2367 * _2367) * (_2372 + (-1.0))) + 1.0;
    float _2383 = exp2(log2(1.0 - (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) * 5.0);
    float _2390 = 1.0 - _2349;
    float _2400 = (0.5 / (((_2278 * ((_2363 * _2390) + _2349)) + 9.9999999392252902907785028219223e-09) + (((_2278 * _2390) + _2349) * _2363))) * _2363;
    float _4531 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2402 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2372 / ((_2376 * _2376) * 3.141590118408203125));
    float _2412 = (((((_2383 * _2300) + _1006) * cbLight._m0[_2337].x) * _2402) * _2133) + ((((cbLight._m0[_2249].x * _2102) * ((_2299 * _2300) + _1006)) * _2323) * _2146);
    float _2413 = (((((_2383 * _2302) + _1008) * cbLight._m0[_2337].y) * _2402) * _2133) + ((((cbLight._m0[_2249].y * _2103) * ((_2299 * _2302) + _1008)) * _2323) * _2146);
    float _2414 = (((((_2383 * _2303) + _1009) * cbLight._m0[_2337].z) * _2402) * _2133) + ((((cbLight._m0[_2249].z * _2104) * ((_2299 * _2303) + _1009)) * _2323) * _2146);
    float _2476;
    float _2478;
    float _2480;
    if (_2186)
    {
        _2476 = _2412;
        _2478 = _2413;
        _2480 = _2414;
    }
    else
    {
        uint _2482 = _2110 + 2u;
        uint _2486 = _2110 + 10u;
        float _2500 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2482].w)) * _936) * 0.949999988079071044921875);
        float _2501 = _2500 * _2500;
        float _2502 = cbLight._m0[_2482].x + _871;
        float _2503 = cbLight._m0[_2482].y + _872;
        float _2504 = cbLight._m0[_2482].z + _873;
        float _2508 = inversesqrt(dot(vec3(_2502, _2503, _2504), vec3(_2502, _2503, _2504)));
        float _2509 = _2508 * _2502;
        float _2510 = _2508 * _2503;
        float _2511 = _2508 * _2504;
        float _2512 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2482].xyz));
        float _4542 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2515 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2516 = dot(vec3(_791, _792, _793), vec3(_2509, _2510, _2511));
        float _4553 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2519 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _2520 = dot(vec3(cbLight._m0[_2482].xyz), vec3(_2509, _2510, _2511));
        float _4564 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2524 = _2501 * _2501;
        float _2528 = ((_2519 * _2519) * (_2524 + (-1.0))) + 1.0;
        float _2535 = exp2(log2(1.0 - (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) * 5.0);
        float _2542 = 1.0 - _2501;
        float _2552 = (0.5 / (((_2278 * ((_2515 * _2542) + _2501)) + 9.9999999392252902907785028219223e-09) + (((_2278 * _2542) + _2501) * _2515))) * _2515;
        float _4575 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2554 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2524 / ((_2528 * _2528) * 3.141590118408203125));
        float _2555 = isnan(1.0) ? _2125 : (isnan(_2125) ? 1.0 : min(_2125, 1.0));
        _2476 = (((((_2535 * _2300) + _1006) * cbLight._m0[_2486].x) * _2554) * _2555) + _2412;
        _2478 = (((((_2535 * _2302) + _1008) * cbLight._m0[_2486].y) * _2554) * _2555) + _2413;
        _2480 = (((((_2535 * _2303) + _1009) * cbLight._m0[_2486].z) * _2554) * _2555) + _2414;
    }
    float _2590;
    float _2592;
    float _2594;
    if (_2204)
    {
        _2590 = _2476;
        _2592 = _2478;
        _2594 = _2480;
    }
    else
    {
        uint _2601 = _2110 + 3u;
        uint _2605 = _2110 + 11u;
        float _2619 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2601].w)) * _936) * 0.949999988079071044921875);
        float _2620 = _2619 * _2619;
        float _2621 = cbLight._m0[_2601].x + _871;
        float _2622 = cbLight._m0[_2601].y + _872;
        float _2623 = cbLight._m0[_2601].z + _873;
        float _2627 = inversesqrt(dot(vec3(_2621, _2622, _2623), vec3(_2621, _2622, _2623)));
        float _2628 = _2627 * _2621;
        float _2629 = _2627 * _2622;
        float _2630 = _2627 * _2623;
        float _2631 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2601].xyz));
        float _4591 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2634 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _2635 = dot(vec3(_791, _792, _793), vec3(_2628, _2629, _2630));
        float _4602 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2638 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
        float _2639 = dot(vec3(cbLight._m0[_2601].xyz), vec3(_2628, _2629, _2630));
        float _4613 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2643 = _2620 * _2620;
        float _2647 = ((_2638 * _2638) * (_2643 + (-1.0))) + 1.0;
        float _2654 = exp2(log2(1.0 - (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0)))) * 5.0);
        float _2661 = 1.0 - _2620;
        float _2671 = (0.5 / (((_2278 * ((_2634 * _2661) + _2620)) + 9.9999999392252902907785028219223e-09) + (((_2278 * _2661) + _2620) * _2634))) * _2634;
        float _4624 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2673 = (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_2643 / ((_2647 * _2647) * 3.141590118408203125));
        float _2674 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
        _2590 = (((((_2654 * _2300) + _1006) * cbLight._m0[_2605].x) * _2673) * _2674) + _2476;
        _2592 = (((((_2654 * _2302) + _1008) * cbLight._m0[_2605].y) * _2673) * _2674) + _2478;
        _2594 = (((((_2654 * _2303) + _1009) * cbLight._m0[_2605].z) * _2673) * _2674) + _2480;
    }
    float _2808;
    float _2810;
    float _2812;
    float _2814;
    float _2816;
    float _2818;
    if (_2108.y == 0u)
    {
        float _2749 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2750 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2749;
        float _2751 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2749;
        float _2752 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2749;
        uvec4 _2764 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2765 = _2764.x;
        uint _2776 = uint((float(_2764.y) * floor(float(uint(cbSceneParam._m0[85u].y * _893) / _2765))) + floor(float(uint(cbSceneParam._m0[85u].x * _892) / _2765)));
        float _2786 = (log2(_2752 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2787 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        uint _2790 = uint(isnan(14.0) ? _2787 : (isnan(_2787) ? 14.0 : min(_2787, 14.0)));
        uvec4 _2795 = texelFetch(g_lightClusterGridBuffer, int(((_2790 << 2u) + (_2776 << 6u)) >> 2u));
        uint _2796 = _2795.x;
        uint _2797 = _2764.z;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        if (((((1u << ((_2797 >> 4u) & 15u)) + 4294967295u) & _2796) == 0u) || ((_2797 & 240u) == 0u))
        {
            _2915 = 0.0;
            _2917 = 0.0;
            _2919 = 0.0;
            _2921 = 0.0;
            _2923 = 0.0;
            _2925 = 0.0;
        }
        else
        {
            float _2916;
            float _2918;
            float _2920;
            float _2922;
            float _2924;
            float _2926;
            float _3067 = 0.0;
            float _3068 = 0.0;
            float _3069 = 0.0;
            float _3070 = 0.0;
            float _3071 = 0.0;
            float _3072 = 0.0;
            uint _3073 = 0u;
            uint _3082;
            bool _3083;
            for (;;)
            {
                _3082 = texelFetch(g_lightClassification, int((((_2790 << 5u) + (_2776 << 9u)) + (_3073 << 2u)) >> 2u)).x;
                _3083 = _3082 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3083)
                {
                    frontier_phi_68_pred = _3069;
                    frontier_phi_68_pred_1 = _3072;
                    frontier_phi_68_pred_2 = _3071;
                    frontier_phi_68_pred_3 = _3070;
                    frontier_phi_68_pred_4 = _3068;
                    frontier_phi_68_pred_5 = _3067;
                }
                else
                {
                    float _3212;
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    float _3217;
                    uint _3218;
                    _3212 = _3067;
                    _3213 = _3068;
                    _3214 = _3069;
                    _3215 = _3070;
                    _3216 = _3071;
                    _3217 = _3072;
                    _3218 = _3082;
                    float _3139;
                    float _3140;
                    float _3141;
                    float _3142;
                    float _3143;
                    float _3144;
                    for (;;)
                    {
                        uint _3222 = uint(findLSB(_3218)) + (_3073 << 5u);
                        uint _3219 = (_3218 + 4294967295u) & _3218;
                        uint _3224 = _3222 * 48u;
                        vec4 _3238 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3224)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 3u)).x));
                        uint _3244 = (_3222 * 48u) + 4u;
                        vec4 _3257 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3244)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 3u)).x));
                        uint _3263 = (_3222 * 48u) + 8u;
                        vec3 _3274 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3263)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 2u)).x));
                        float _3278 = _3238.x - _2750;
                        float _3279 = _3238.y - _2751;
                        float _3280 = _3238.z - _2752;
                        float _3281 = dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280));
                        float _3284 = inversesqrt(_3281);
                        float _3285 = _3284 * _3278;
                        float _3286 = _3284 * _3279;
                        float _3287 = _3284 * _3280;
                        float _3288 = dot(vec3(_917, _920, _923), vec3(_3285, _3286, _3287));
                        float _3293 = 1.0 - (_3281 * _3238.w);
                        float _4650 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                        float _3294 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                        float _3295 = sqrt(_3281) * _3257.w;
                        float _3298 = 1.39999997615814208984375 / (_3295 + 1.39999997615814208984375);
                        float _3299 = _3298 * _3298;
                        float _3302 = ((1.0 - _3299) * _3288) + _3299;
                        float _3305 = _3295 * _3295;
                        float _3309 = ((isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0))) * _3294) / ((_3305 * 0.699999988079071044921875) + 1.0);
                        float _3313 = (-0.0) - _2750;
                        float _3314 = (-0.0) - _2751;
                        float _3315 = (-0.0) - _2752;
                        float _3319 = inversesqrt(dot(vec3(_3313, _3314, _3315), vec3(_3313, _3314, _3315)));
                        float _3320 = _3319 * _3313;
                        float _3321 = _3319 * _3314;
                        float _3322 = _3319 * _3315;
                        float _3329 = exp2(log2(1.0 / ((_3305 * 3.5) + 5.0)) * 0.25);
                        float _3330 = 1.0 - _1037;
                        float _3337 = sqrt(1.0 - ((1.0 - (_3330 * _3330)) * (1.0 - (_3329 * _3329))));
                        float _3338 = _3337 * _3337;
                        float _3339 = _3338 * _3338;
                        float _3340 = _3320 + _3285;
                        float _3341 = _3321 + _3286;
                        float _3342 = _3322 + _3287;
                        float _3346 = inversesqrt(dot(vec3(_3340, _3341, _3342), vec3(_3340, _3341, _3342)));
                        float _3350 = dot(vec3(_917, _920, _923), vec3(_3320, _3321, _3322));
                        float _4666 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                        float _3353 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                        float _3354 = dot(vec3(_917, _920, _923), vec3(_3346 * _3340, _3346 * _3341, _3346 * _3342));
                        float _4677 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                        float _3357 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                        float _3361 = ((_3357 * _3357) * (_3339 + (-1.0))) + 1.0;
                        float _3362 = _3298 * _3338;
                        float _3363 = _3362 * _3362;
                        float _3366 = ((1.0 - _3363) * _3288) + _3363;
                        float _4688 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                        float _3367 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                        float _3368 = 1.0 - _3338;
                        float _3378 = (0.5 / (((_3367 * ((_3353 * _3368) + _3338)) + 9.9999999392252902907785028219223e-09) + (((_3367 * _3368) + _3338) * _3353))) * _3367;
                        float _4699 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                        float _3389 = (((_3339 * 3.1415927410125732421875) * (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0)))) / ((_3361 * _3361) * ((_3305 * 2.1991131305694580078125) + 3.141590118408203125))) * _3294;
                        _3142 = (_3309 * _3257.x) + _3215;
                        _3143 = (_3309 * _3257.y) + _3216;
                        _3144 = (_3309 * _3257.z) + _3217;
                        _3139 = (_3389 * _3274.x) + _3212;
                        _3140 = (_3389 * _3274.y) + _3213;
                        _3141 = (_3389 * _3274.z) + _3214;
                        if (_3219 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3212 = _3139;
                            _3213 = _3140;
                            _3214 = _3141;
                            _3215 = _3142;
                            _3216 = _3143;
                            _3217 = _3144;
                            _3218 = _3219;
                        }
                    }
                    frontier_phi_68_pred = _3141;
                    frontier_phi_68_pred_1 = _3144;
                    frontier_phi_68_pred_2 = _3143;
                    frontier_phi_68_pred_3 = _3142;
                    frontier_phi_68_pred_4 = _3140;
                    frontier_phi_68_pred_5 = _3139;
                }
                _2920 = frontier_phi_68_pred;
                _2926 = frontier_phi_68_pred_1;
                _2924 = frontier_phi_68_pred_2;
                _2922 = frontier_phi_68_pred_3;
                _2918 = frontier_phi_68_pred_4;
                _2916 = frontier_phi_68_pred_5;
                uint _3074 = _3073 + 1u;
                if (_3074 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3067 = _2916;
                    _3068 = _2918;
                    _3069 = _2920;
                    _3070 = _2922;
                    _3071 = _2924;
                    _3072 = _2926;
                    _3073 = _3074;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2915 = _2916;
            _2917 = _2918;
            _2919 = _2920;
            _2921 = _2922;
            _2923 = _2924;
            _2925 = _2926;
        }
        uvec4 _2929 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2930 = _2929.z;
        uint _2932 = (_2930 >> 8u) & 15u;
        float _3035;
        float _3037;
        float _3039;
        float _3041;
        float _3043;
        float _3045;
        if (((4294967295u << _2932) & _2796) == 0u)
        {
            _3035 = _2915;
            _3037 = _2917;
            _3039 = _2919;
            _3041 = _2921;
            _3043 = _2923;
            _3045 = _2925;
        }
        else
        {
            float _3060 = inversesqrt(dot(vec3(_2750, _2751, _2752), vec3(_2750, _2751, _2752)));
            float _3061 = _3060 * _2750;
            float _3062 = _3060 * _2751;
            float _3063 = _3060 * _2752;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2932 < ((_2930 >> 12u) & 15u))
            {
                float _3036;
                float _3038;
                float _3040;
                float _3042;
                float _3044;
                float _3046;
                float _3195 = _2915;
                float _3196 = _2917;
                float _3197 = _2919;
                float _3198 = _2921;
                float _3199 = _2923;
                float _3200 = _2925;
                uint _3201 = _2932;
                uint _3210;
                bool _3211;
                for (;;)
                {
                    _3210 = texelFetch(g_lightClassification, int((((_2790 << 5u) + (_2776 << 9u)) + (_3201 << 2u)) >> 2u)).x;
                    _3211 = _3210 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3211)
                    {
                        frontier_phi_79_pred = _3200;
                        frontier_phi_79_pred_1 = _3199;
                        frontier_phi_79_pred_2 = _3198;
                        frontier_phi_79_pred_3 = _3197;
                        frontier_phi_79_pred_4 = _3196;
                        frontier_phi_79_pred_5 = _3195;
                    }
                    else
                    {
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3696;
                        float _3697;
                        float _3698;
                        float _3699;
                        float _3700;
                        float _3701;
                        float _3416 = _3195;
                        float _3417 = _3196;
                        float _3418 = _3197;
                        float _3419 = _3198;
                        float _3420 = _3199;
                        float _3421 = _3200;
                        uint _3422 = _3210;
                        uint _3423;
                        vec4 _3448;
                        float _3449;
                        vec4 _3464;
                        vec3 _3476;
                        vec4 _3491;
                        vec4 _3506;
                        float _3552;
                        bool _3553;
                        for (;;)
                        {
                            uint _3433 = ((_3201 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3422));
                            _3423 = (_3422 + 4294967295u) & _3422;
                            uint _3435 = _3433 * 40u;
                            _3448 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 3u)).x));
                            _3449 = _3448.w;
                            uint _3451 = (_3433 * 40u) + 4u;
                            _3464 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 3u)).x));
                            uint _3466 = (_3433 * 40u) + 8u;
                            _3476 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3466)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 2u)).x));
                            uint _3478 = (_3433 * 40u) + 16u;
                            _3491 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3478)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 3u)).x));
                            uint _3493 = (_3433 * 40u) + 20u;
                            _3506 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 3u)).x));
                            uint _3508 = (_3433 * 40u) + 24u;
                            vec4 _3521 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3508)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 3u)).x));
                            uint _3527 = (_3433 * 40u) + 28u;
                            vec4 _3540 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 3u)).x));
                            _3552 = fma(_2752, _3540.z, fma(_2751, _3540.y, _3540.x * _2750)) + _3540.w;
                            _3553 = !((fma(_2752, _3521.z, fma(_2751, _3521.y, _3521.x * _2750)) + _3521.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3553)
                            {
                                float _3580 = _3448.x - _2750;
                                float _3581 = _3448.y - _2751;
                                float _3582 = _3448.z - _2752;
                                float _3583 = dot(vec3(_3580, _3581, _3582), vec3(_3580, _3581, _3582));
                                float _3586 = inversesqrt(_3583);
                                float _3587 = _3586 * _3580;
                                float _3588 = _3586 * _3581;
                                float _3589 = _3586 * _3582;
                                float _3593 = 1.0 - (_3583 / (_3449 * _3449));
                                float _4710 = isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0));
                                float _3594 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                                float _3598 = sqrt(_3583) * _3464.w;
                                float _3600 = 1.39999997615814208984375 / (_3598 + 1.39999997615814208984375);
                                float _3601 = _3600 * _3600;
                                float _3604 = ((1.0 - _3601) * dot(vec3(_3587, _3588, _3589), vec3(_917, _920, _923))) + _3601;
                                float _3607 = _3598 * _3598;
                                float _3611 = (fma(_2752, _3491.z, fma(_2751, _3491.y, _3491.x * _2750)) + _3491.w) / _3552;
                                float _3612 = (fma(_2752, _3506.z, fma(_2751, _3506.y, _3506.x * _2750)) + _3506.w) / _3552;
                                float _3616 = 1.0 - dot(vec2(_3611, _3612), vec2(_3611, _3612));
                                float _4726 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                                float _3617 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                                float _3618 = _3617 * (((isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0))) * _3594) / ((_3607 * 0.699999988079071044921875) + 1.0));
                                float _3630 = exp2(log2(1.0 / ((_3607 * 3.5) + 5.0)) * 0.25);
                                float _3631 = 1.0 - _1037;
                                float _3638 = sqrt(1.0 - ((1.0 - (_3631 * _3631)) * (1.0 - (_3630 * _3630))));
                                float _3639 = _3638 * _3638;
                                float _3640 = _3639 * _3639;
                                float _3641 = _3587 - _3061;
                                float _3642 = _3588 - _3062;
                                float _3643 = _3589 - _3063;
                                float _3647 = inversesqrt(dot(vec3(_3641, _3642, _3643), vec3(_3641, _3642, _3643)));
                                float _3651 = dot(vec3(_917, _920, _923), vec3((-0.0) - _3061, (-0.0) - _3062, (-0.0) - _3063));
                                float _4737 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                                float _3654 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                                float _3655 = dot(vec3(_917, _920, _923), vec3(_3647 * _3641, _3647 * _3642, _3647 * _3643));
                                float _4748 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                                float _3658 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                                float _3662 = ((_3658 * _3658) * (_3640 + (-1.0))) + 1.0;
                                float _3663 = _3600 * _3639;
                                float _3664 = _3663 * _3663;
                                float _3670 = ((1.0 - _3664) * dot(vec3(_917, _920, _923), vec3(_3587, _3588, _3589))) + _3664;
                                float _4759 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                                float _3671 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                                float _3672 = 1.0 - _3639;
                                float _3682 = (0.5 / (((_3671 * ((_3654 * _3672) + _3639)) + 9.9999999392252902907785028219223e-09) + (((_3671 * _3672) + _3639) * _3654))) * _3671;
                                float _4770 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                                float _3692 = (_3617 * _3594) * (((_3640 * 3.1415927410125732421875) * (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0)))) / ((_3662 * _3662) * ((_3607 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3618 * _3464.z;
                                frontier_phi_85_pred_1 = _3618 * _3464.y;
                                frontier_phi_85_pred_2 = _3618 * _3464.x;
                                frontier_phi_85_pred_3 = _3692 * _3476.z;
                                frontier_phi_85_pred_4 = _3692 * _3476.y;
                                frontier_phi_85_pred_5 = _3692 * _3476.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3701 = frontier_phi_85_pred;
                            _3700 = frontier_phi_85_pred_1;
                            _3699 = frontier_phi_85_pred_2;
                            _3698 = frontier_phi_85_pred_3;
                            _3697 = frontier_phi_85_pred_4;
                            _3696 = frontier_phi_85_pred_5;
                            _3406 = _3699 + _3419;
                            _3407 = _3700 + _3420;
                            _3408 = _3701 + _3421;
                            _3403 = _3696 + _3416;
                            _3404 = _3697 + _3417;
                            _3405 = _3698 + _3418;
                            if (_3423 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3416 = _3403;
                                _3417 = _3404;
                                _3418 = _3405;
                                _3419 = _3406;
                                _3420 = _3407;
                                _3421 = _3408;
                                _3422 = _3423;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3408;
                        frontier_phi_79_pred_1 = _3407;
                        frontier_phi_79_pred_2 = _3406;
                        frontier_phi_79_pred_3 = _3405;
                        frontier_phi_79_pred_4 = _3404;
                        frontier_phi_79_pred_5 = _3403;
                    }
                    _3046 = frontier_phi_79_pred;
                    _3044 = frontier_phi_79_pred_1;
                    _3042 = frontier_phi_79_pred_2;
                    _3040 = frontier_phi_79_pred_3;
                    _3038 = frontier_phi_79_pred_4;
                    _3036 = frontier_phi_79_pred_5;
                    uint _3202 = _3201 + 1u;
                    if (_3202 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3195 = _3036;
                        _3196 = _3038;
                        _3197 = _3040;
                        _3198 = _3042;
                        _3199 = _3044;
                        _3200 = _3046;
                        _3201 = _3202;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3042;
                frontier_phi_60_61_ladder_1 = _3046;
                frontier_phi_60_61_ladder_2 = _3044;
                frontier_phi_60_61_ladder_3 = _3040;
                frontier_phi_60_61_ladder_4 = _3038;
                frontier_phi_60_61_ladder_5 = _3036;
            }
            else
            {
                frontier_phi_60_61_ladder = _2921;
                frontier_phi_60_61_ladder_1 = _2925;
                frontier_phi_60_61_ladder_2 = _2923;
                frontier_phi_60_61_ladder_3 = _2919;
                frontier_phi_60_61_ladder_4 = _2917;
                frontier_phi_60_61_ladder_5 = _2915;
            }
            _3035 = frontier_phi_60_61_ladder_5;
            _3037 = frontier_phi_60_61_ladder_4;
            _3039 = frontier_phi_60_61_ladder_3;
            _3041 = frontier_phi_60_61_ladder;
            _3043 = frontier_phi_60_61_ladder_2;
            _3045 = frontier_phi_60_61_ladder_1;
        }
        float _3050 = isnan(1.0) ? _1021 : (isnan(_1021) ? 1.0 : min(_1021, 1.0));
        _2808 = (_3050 * _3041) + _2242;
        _2810 = (_3050 * _3043) + _2244;
        _2812 = (_3050 * _3045) + _2246;
        _2814 = ((_3035 * _1006) * _3050) + _2590;
        _2816 = ((_3037 * _1008) * _3050) + _2592;
        _2818 = ((_3039 * _1009) * _3050) + _2594;
    }
    else
    {
        _2808 = _2242;
        _2810 = _2244;
        _2812 = _2246;
        _2814 = _2590;
        _2816 = _2592;
        _2818 = _2594;
    }
    uint _2824 = _950 + uint(cbMatDynParam._m0[0u].w);
    float _4786 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _4797 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _4808 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _2849 = (((isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * (_2808 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1021))) + ((_2814 + ((isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0))) * _1861)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2824].x * ((((_600 + (_486 * _438)) - (_600 * _486)) + cbMtdParam._m0[13u].x) + ((((((_737.x - _734) * _715) + _734) * cbMtdParam._m0[11u].x) + ((cbMtdParam._m0[22u].y * _668) * cbMtdParam._m0[12u].x)) * _677)));
    float _2851 = ((cbInstanceData._m0[_2824].y * ((((_601 + (_486 * _439)) - (_601 * _486)) + cbMtdParam._m0[13u].y) + ((((((_737.y - _735) * _715) + _735) * cbMtdParam._m0[11u].y) + ((cbMtdParam._m0[22u].y * (((_657.y - _652.y) * _636) + _652.y)) * cbMtdParam._m0[12u].y)) * _677))) + ((_2816 + ((isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0))) * _1861)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (_2810 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1021)));
    float _2853 = ((cbInstanceData._m0[_2824].z * ((((_602 + (_486 * _440)) - (_602 * _486)) + cbMtdParam._m0[13u].z) + ((((((_737.z - _736) * _715) + _736) * cbMtdParam._m0[11u].z) + ((cbMtdParam._m0[22u].y * (((_657.z - _652.z) * _636) + _652.z)) * cbMtdParam._m0[12u].z)) * _677))) + ((_2818 + ((isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0))) * _1861)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0))) * (_2812 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1021)));
    float _2854 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
    float _2855 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
    float _2856 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
    uint _2857 = _949 + 6u;
    float _2865 = _892 / cbSceneParam._m0[86u].x;
    float _2866 = _893 / cbSceneParam._m0[86u].y;
    vec4 _2880 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2865, _2866, (log2((isnan(cbSceneParam._m0[77u].w) ? _814 : (isnan(_814) ? cbSceneParam._m0[77u].w : min(_814, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2882 = _2880.x;
    float _2883 = _2880.y;
    float _2884 = _2880.z;
    float _2885 = _2880.w;
    float _2977;
    float _2979;
    float _2981;
    float _2983;
    if (_814 > cbSceneParam._m0[78u].w)
    {
        float _2940 = isnan(_814) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _814 : min(cbSceneParam._m0[80u].w, _814));
        float _2941 = _2940 / _814;
        float _2952 = _2941 * _864;
        float _2953 = _865 * _2941;
        float _2954 = (-0.0) - _2953;
        float _2955 = _2941 * _866;
        float _2957 = (cbSceneParam._m0[77u].w * _2954) / _2940;
        float _2958 = _2957 + cbSceneParam._m0[79u].w;
        float _2959 = cbSceneParam._m0[79u].w - _2953;
        float _2965 = sqrt(((_2952 * _2952) + (_2953 * _2953)) + (_2955 * _2955));
        float _2968 = (1.0 - (cbSceneParam._m0[77u].w / _2940)) * _2965;
        float _2973 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2975 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3152;
        if (abs((_2954 - _2957) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3152 = ((((_2958 > 0.0) ? exp2(_2973 * _2958) : (2.0 - exp2(_2975 * _2958))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2968;
        }
        else
        {
            float _3096 = 1.0 / cbSceneParam._m0[80u].x;
            float _3097 = isnan(_2959) ? _2958 : (isnan(_2958) ? _2959 : max(_2958, _2959));
            float _3098 = isnan(_2959) ? _2958 : (isnan(_2958) ? _2959 : min(_2958, _2959));
            float _3107 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : min(_3097, 0.0));
            float _3108 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : min(_3098, 0.0));
            _3152 = ((abs(_2965 / _2954) * cbSceneParam._m0[80u].y) * ((((_3107 - _3108) * 2.0) - ((exp2(_2973 * (isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0)))) - exp2(_2973 * (isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0))))) * _3096)) - ((exp2(_2975 * _3107) - exp2(_2975 * _3108)) * _3096))) + (_2968 * cbSceneParam._m0[80u].z);
        }
        vec4 _3154 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2865, _2866, 1.0), 0.0);
        float _3163 = exp2((_3152 * (-1.44269502162933349609375)) * (1.0 - _3154.w));
        float _3164 = log2(_3163);
        float _3180 = log2(_2885);
        _2977 = (exp2(_3180 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3164 * cbSceneParam._m0[78u].x)) * _3154.x) / cbSceneParam._m0[78u].x)) + _2882;
        _2979 = (exp2(_3180 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3164 * cbSceneParam._m0[78u].y)) * _3154.y) / cbSceneParam._m0[78u].y)) + _2883;
        _2981 = (exp2(_3180 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3164 * cbSceneParam._m0[78u].z)) * _3154.z) / cbSceneParam._m0[78u].z)) + _2884;
        _2983 = _3163 * _2885;
    }
    else
    {
        _2977 = _2882;
        _2979 = _2883;
        _2981 = _2884;
        _2983 = _2885;
    }
    bool _3190;
    vec4 _2993;
    vec4 _3015;
    float _3017;
    float _3021;
    float _3022;
    float _3023;
    float _3024;
    bool _3034;
    for (;;)
    {
        _2993 = cbMatDynParam._m0[0u];
        float _2995 = roundEven(_2993.y);
        bool _2996 = _2995 == 3.0;
        float _2997 = log2(_2983);
        float _3004 = exp2(_2997 * cbSceneParam._m0[78u].x) * _2854;
        float _3005 = exp2(_2997 * cbSceneParam._m0[78u].y) * _2855;
        float _3006 = exp2(_2997 * cbSceneParam._m0[78u].z) * _2856;
        float _3013 = _880 + (-0.5);
        _3015 = cbMtdParam._m0[1u];
        _3017 = _3015.y * _3013;
        float _3020 = (_2995 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3021 = _3020 * (_2996 ? _3004 : (_3004 + (cbSceneParam._m0[72u].w * _2977)));
        _3022 = _3020 * (_2996 ? _3005 : (_3005 + (cbSceneParam._m0[72u].w * _2979)));
        _3023 = _3020 * (_2996 ? _3006 : (_3006 + (cbSceneParam._m0[72u].w * _2981)));
        _3024 = _3013 * 0.999000012874603271484375;
        _3034 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3034)
        {
            if ((cbInstanceData._m0[_949 + 7u].x + _3024) < 0.5)
            {
                _3190 = true;
                break;
            }
        }
        uint _3131 = _950 + uint(_2993.w);
        if ((cbInstanceData._m0[_3131].w < 1.0) && ((cbInstanceData._m0[_3131].w + _3024) < 0.5))
        {
            _3190 = true;
            break;
        }
        if ((_3017 + 1.0) < _3015.x)
        {
            _3190 = true;
            break;
        }
        _3190 = false;
        break;
    }
    float _3394;
    if (_3190)
    {
        discard_state = true;
        _3394 = 0.0;
    }
    else
    {
        _3394 = cbInstanceData._m0[_2857].w;
    }
    SV_Target.x = _3021;
    SV_Target.y = _3022;
    SV_Target.z = _3023;
    SV_Target.w = _3394;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2857].w;
    discard_exit();
}


