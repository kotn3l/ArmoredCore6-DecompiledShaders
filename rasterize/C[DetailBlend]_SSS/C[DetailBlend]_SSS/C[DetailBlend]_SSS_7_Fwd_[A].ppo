#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1247;
float _3635;
float _3636;
float _3637;
float _3638;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234;
    float _235;
    float _236;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
    }
    else
    {
        _234 = _220;
        _235 = _221;
        _236 = _222;
    }
    vec4 _250 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _256 = _250.w;
    vec4 _268 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _280 = cbMtdParam._m0[9u].x * _268.x;
    float _281 = cbMtdParam._m0[9u].y * _268.y;
    float _282 = cbMtdParam._m0[9u].z * _268.z;
    float _288 = exp2(log2(1.0 - _256) * 8.0);
    vec4 _300 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _325 = exp2(log2(_256) * 8.0);
    vec4 _338 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    vec4 _363 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _371 = (((((cbMtdParam._m0[12u].x * _300.x) - _280) * _288) + _280) * 4.55000019073486328125) * _363.x;
    float _373 = (((((cbMtdParam._m0[12u].y * _300.y) - _281) * _288) + _281) * 4.55000019073486328125) * _363.y;
    float _375 = (((((cbMtdParam._m0[12u].z * _300.z) - _282) * _288) + _282) * 4.55000019073486328125) * _363.z;
    float _382 = (((cbMtdParam._m0[11u].x * _338.x) - _371) * _325) + _371;
    float _383 = (((cbMtdParam._m0[11u].y * _338.y) - _373) * _325) + _373;
    float _384 = (((cbMtdParam._m0[11u].z * _338.z) - _375) * _325) + _375;
    float _385 = _363.w * _268.w;
    vec4 _402 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _406 = cbMtdParam._m0[14u].z + _402.x;
    float _409 = ((cbMtdParam._m0[14u].y - _406) * _288) + _406;
    float _416 = ((cbMtdParam._m0[15u].x - _409) * _325) + _409;
    vec4 _428 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _430 = _428.x;
    float _431 = _428.y;
    float _437 = cbMtdParam._m0[13u].x + _428.z;
    vec4 _450 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _471 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _479 = (_250.z * 2.0) * ((((_450.z - _437) + cbMtdParam._m0[14u].x) * _288) + _437);
    float _483 = (((_471.z - _479) + cbMtdParam._m0[13u].w) * _325) + _479;
    float _487 = (_250.x * 2.0) + (-1.0);
    float _489 = (_250.y * 2.0) + (-1.0);
    float _490 = dot(vec2(_487, _489), vec2(_487, _489));
    float _3647 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _495 = sqrt(1.0 - (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))));
    float _500 = ((_450.x - _430) * _288) + _430;
    float _501 = ((_450.y - _431) * _288) + _431;
    float _514 = ((((((_471.x - _500) * _325) + _500) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _487;
    float _515 = ((((((_471.y - _501) * _325) + _501) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _489;
    float _518 = fma(_495, _234, fma(_515, _226 * TANGENT.x, (_212 * _204) * _514));
    float _521 = fma(_495, _235, fma(_515, _226 * TANGENT.y, (_212 * _205) * _514));
    float _524 = fma(_495, _236, fma(_515, _226 * TANGENT.z, (_212 * _206) * _514));
    float _528 = inversesqrt(dot(vec3(_518, _521, _524), vec3(_518, _521, _524)));
    float _529 = _528 * _518;
    float _530 = _528 * _521;
    float _531 = _528 * _524;
    float _3658 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _532 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _3669 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _533 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _3680 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _534 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    float _3691 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _535 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _3702 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _536 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _3713 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _537 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _553 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _595 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _605 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _595);
    float _606 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _595);
    float _607 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _595);
    float _611 = inversesqrt(dot(vec3(_605, _606, _607), vec3(_605, _606, _607)));
    float _612 = _605 * _611;
    float _613 = _606 * _611;
    float _614 = _607 * _611;
    vec4 _619 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _621 = _619.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _926 = sqrt(((_605 * _605) + (_606 * _606)) + (_607 * _607));
        float _932 = (cbMatDynParam._m0[5u].x * _926) + cbMatDynParam._m0[5u].y;
        float _3724 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _937 = (cbMatDynParam._m0[5u].z * _926) + cbMatDynParam._m0[5u].w;
        float _3735 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) - _933)) + _933) < ((_621 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _632 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _633 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _635 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _637 = _635.w;
    float _656 = fma(_531, cbSceneParam._m0[5u].z, fma(_530, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _529));
    float _659 = fma(_531, cbSceneParam._m0[6u].z, fma(_530, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _529));
    float _662 = fma(_531, cbSceneParam._m0[7u].z, fma(_530, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _529));
    vec4 _664 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _666 = _664.x;
    float _678 = (((_664.y - _533) + (_664.w * _533)) * cbMtdParam._m0[3u].x) + _533;
    vec4 _679 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _695 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_666 * _666)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _679.z;
    float _703 = (((cbMatDynParam._m0[15u].x - _537) * cbMatDynParam._m0[15u].w) * _695) + _537;
    float _711 = ((_695 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _678)) + _678;
    uint _735 = uint(roundEven(NORMAL.w)) * 13u;
    uint _736 = _735 + 9u;
    uint _737 = _736 + uint(cbMatDynParam._m0[0u].w);
    float _743 = (cbMtdParam._m0[0u].x * _534) * cbInstanceData._m0[_737].x;
    float _744 = (cbMtdParam._m0[0u].y * _535) * cbInstanceData._m0[_737].y;
    float _745 = (cbMtdParam._m0[0u].z * _536) * cbInstanceData._m0[_737].z;
    float _3746 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _746 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _3757 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _747 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _3768 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _748 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    vec4 _749 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _754 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _765 = (((_754.x - _703) + (_754.w * _703)) * cbMtdParam._m0[3u].x) + _703;
    float _778 = (cbMtdParam._m0[3u].x * (((_746 * _637) - _746) + _749.x)) + _746;
    float _779 = (cbMtdParam._m0[3u].x * (((_747 * _637) - _747) + _749.y)) + _747;
    float _780 = (cbMtdParam._m0[3u].x * (((_748 * _637) - _748) + _749.z)) + _748;
    vec4 _781 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _794 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_703 * (_534 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_703 * (_535 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_703 * (_536 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _781.z;
    float _798 = _794 * cbMatDynParam._m0[13u].w;
    float _808 = (_798 * (cbMatDynParam._m0[13u].x - _778)) + _778;
    float _809 = (_798 * (cbMatDynParam._m0[13u].y - _779)) + _779;
    float _810 = (_798 * (cbMatDynParam._m0[13u].z - _780)) + _780;
    float _818 = ((_794 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _765)) + _765;
    float _819 = 1.0 - _818;
    float _820 = _819 * _808;
    float _821 = _819 * _809;
    float _822 = _819 * _810;
    float _826 = (_808 + (-0.039999999105930328369140625)) * _818;
    float _827 = (_809 + (-0.039999999105930328369140625)) * _818;
    float _828 = (_810 + (-0.039999999105930328369140625)) * _818;
    float _829 = _826 + 0.039999999105930328369140625;
    float _830 = _827 + 0.039999999105930328369140625;
    float _831 = _828 + 0.039999999105930328369140625;
    vec4 _840 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _632, cbSceneParam._m0[86u].y * _633));
    float _843 = _840.x * TEXCOORD_4;
    float _844 = dot(vec3(_529, _530, _531), vec3(_612, _613, _614));
    float _847 = _844 * 2.0;
    float _851 = (_847 * _529) - _612;
    float _852 = (_847 * _530) - _613;
    float _853 = (_847 * _531) - _614;
    float _857 = abs(dot(vec3(_612, _613, _614), vec3(_529, _530, _531)));
    float _3779 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _859 = sqrt(_711);
    float _872 = exp2((_859 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_859 * 3.0));
    float _878 = (1.0 - _872) * ((_859 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _879 = _872 * _859;
    float _907 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _911 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _915 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1246;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _971 = fma(_915, cbModelParam._m0[26u].z, fma(_911, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _907));
        float _975 = fma(_915, cbModelParam._m0[27u].z, fma(_911, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _907));
        float _979 = fma(_915, cbModelParam._m0[28u].z, fma(_911, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _907));
        float _1004 = _907 + _529;
        float _1005 = _911 + _530;
        float _1006 = _915 + _531;
        float _1016 = fma(_1006, cbModelParam._m0[26u].z, fma(_1005, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1004)) - _971;
        float _1017 = fma(_1006, cbModelParam._m0[27u].z, fma(_1005, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1004)) - _975;
        float _1018 = fma(_1006, cbModelParam._m0[28u].z, fma(_1005, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1004)) - _979;
        float _1022 = inversesqrt(dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018)));
        float _1035 = ((_1022 * _1016) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_971 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1036 = ((_1022 * _1017) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_975 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1037 = ((_1022 * _1018) / cbModelParam._m0[34u].z) + ((((((_979 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        float _1074 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1040.x + (-0.5));
        float _1076 = _1074 * (_1040.y + (-0.5));
        float _1077 = _1074 * (_1040.z + (-0.5));
        float _1084 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1047.x + (-0.5));
        float _1086 = _1084 * (_1047.y + (-0.5));
        float _1087 = _1084 * (_1047.z + (-0.5));
        float _1094 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1054.x + (-0.5));
        float _1096 = _1094 * (_1054.y + (-0.5));
        float _1097 = _1094 * (_1054.z + (-0.5));
        float _1104 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1061.x + (-0.5));
        float _1106 = _1104 * (_1061.y + (-0.5));
        float _1107 = _1104 * (_1061.z + (-0.5));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = _1075 * 0.5;
        float _1112 = _1085 * 0.5;
        float _1113 = _1095 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1128 = (dot(vec3(_529, _530, _531), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _3805 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1138 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3816 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _3827 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_1140 + 1.0))) + _1145) * _1108;
        float _1155 = _1076 * 0.5;
        float _1156 = _1086 * 0.5;
        float _1157 = _1096 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1171 = (dot(vec3(_529, _530, _531), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1180 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1182 = _1181 * 2.0;
        float _1186 = (1.0 - _1181) / (_1181 + 1.0);
        float _3860 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1196 = ((((1.0 - _1187) * (_1182 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_1182 + 1.0))) + _1187) * _1109;
        float _1197 = _1077 * 0.5;
        float _1198 = _1087 * 0.5;
        float _1199 = _1097 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1213 = (dot(vec3(_529, _530, _531), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _3871 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1222 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3882 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _3893 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1224 + 1.0))) + _1229) * _1110;
        _1246 = _1077;
        _1248 = _1076;
        _1249 = _1075;
        _1250 = _1087;
        _1251 = _1086;
        _1252 = _1085;
        _1253 = _1097;
        _1254 = _1096;
        _1255 = _1095;
        _1256 = _1110;
        _1257 = _1109;
        _1258 = _1108;
        _1259 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
        _1260 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)));
        _1261 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
    }
    else
    {
        _1246 = _1247;
        _1248 = _1247;
        _1249 = _1247;
        _1250 = _1247;
        _1251 = _1247;
        _1252 = _1247;
        _1253 = _1247;
        _1254 = _1247;
        _1255 = _1247;
        _1256 = _1247;
        _1257 = _1247;
        _1258 = _1247;
        _1259 = 0.0;
        _1260 = 0.0;
        _1261 = 0.0;
    }
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1290 = fma(_915, cbModelParam._m0[30u].z, fma(_911, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _907));
        float _1294 = fma(_915, cbModelParam._m0[31u].z, fma(_911, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _907));
        float _1298 = fma(_915, cbModelParam._m0[32u].z, fma(_911, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _907));
        float _1321 = _907 + _529;
        float _1322 = _911 + _530;
        float _1323 = _915 + _531;
        float _1333 = fma(_1323, cbModelParam._m0[30u].z, fma(_1322, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1321)) - _1290;
        float _1334 = fma(_1323, cbModelParam._m0[31u].z, fma(_1322, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1321)) - _1294;
        float _1335 = fma(_1323, cbModelParam._m0[32u].z, fma(_1322, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1321)) - _1298;
        float _1339 = inversesqrt(dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335)));
        float _1352 = ((_1339 * _1333) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1290 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1353 = ((_1339 * _1334) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1294 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1354 = ((_1339 * _1335) / cbModelParam._m0[35u].z) + ((((((_1298 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1356 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1352, _1353, _1354), 0.0);
        vec4 _1363 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1352, _1353, _1354), 0.0);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1352, _1353, _1354), 0.0);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1352, _1353, _1354), 0.0);
        float _1389 = exp2((_1356.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1356.x + (-0.5));
        float _1391 = _1389 * (_1356.y + (-0.5));
        float _1392 = _1389 * (_1356.z + (-0.5));
        float _1399 = exp2((_1363.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1363.x + (-0.5));
        float _1401 = _1399 * (_1363.y + (-0.5));
        float _1402 = _1399 * (_1363.z + (-0.5));
        float _1409 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1370.x + (-0.5));
        float _1411 = _1409 * (_1370.y + (-0.5));
        float _1412 = _1409 * (_1370.z + (-0.5));
        float _1419 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1377.x + (-0.5));
        float _1421 = _1419 * (_1377.y + (-0.5));
        float _1422 = _1419 * (_1377.z + (-0.5));
        float _1423 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1424 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1425 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1426 = _1390 * 0.5;
        float _1427 = _1400 * 0.5;
        float _1428 = _1410 * 0.5;
        float _1429 = dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428));
        float _1434 = (_1429 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1429);
        float _1442 = (dot(vec3(_529, _530, _531), vec3(_1434 * _1426, _1434 * _1427, _1434 * _1428)) + 1.0) * 0.5;
        float _3934 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1451 = sqrt(((_1427 * _1427) + (_1426 * _1426)) + (_1428 * _1428)) / (_1423 + 9.9999997473787516355514526367188e-06);
        float _3945 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1453 = _1452 * 2.0;
        float _1457 = (1.0 - _1452) / (_1452 + 1.0);
        float _3956 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1467 = ((((1.0 - _1458) * (_1453 + 2.0)) * exp2(log2(isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1453 + 1.0))) + _1458) * _1423;
        float _1468 = _1391 * 0.5;
        float _1469 = _1401 * 0.5;
        float _1470 = _1411 * 0.5;
        float _1471 = dot(vec3(_1468, _1469, _1470), vec3(_1468, _1469, _1470));
        float _1476 = (_1471 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1471);
        float _1484 = (dot(vec3(_529, _530, _531), vec3(_1476 * _1468, _1476 * _1469, _1476 * _1470)) + 1.0) * 0.5;
        float _3967 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1493 = sqrt(((_1469 * _1469) + (_1468 * _1468)) + (_1470 * _1470)) / (_1424 + 9.9999997473787516355514526367188e-06);
        float _3978 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1495 = _1494 * 2.0;
        float _1499 = (1.0 - _1494) / (_1494 + 1.0);
        float _3989 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1509 = ((((1.0 - _1500) * (_1495 + 2.0)) * exp2(log2(isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_1495 + 1.0))) + _1500) * _1424;
        float _1510 = _1392 * 0.5;
        float _1511 = _1402 * 0.5;
        float _1512 = _1412 * 0.5;
        float _1513 = dot(vec3(_1510, _1511, _1512), vec3(_1510, _1511, _1512));
        float _1518 = (_1513 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1513);
        float _1526 = (dot(vec3(_529, _530, _531), vec3(_1518 * _1510, _1518 * _1511, _1518 * _1512)) + 1.0) * 0.5;
        float _4000 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1535 = sqrt(((_1511 * _1511) + (_1510 * _1510)) + (_1512 * _1512)) / (_1425 + 9.9999997473787516355514526367188e-06);
        float _4011 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1537 = _1536 * 2.0;
        float _1541 = (1.0 - _1536) / (_1536 + 1.0);
        float _4022 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1551 = ((((1.0 - _1542) * (_1537 + 2.0)) * exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1537 + 1.0))) + _1542) * _1425;
        _1559 = _1392;
        _1560 = _1391;
        _1561 = _1390;
        _1562 = _1402;
        _1563 = _1401;
        _1564 = _1400;
        _1565 = _1412;
        _1566 = _1411;
        _1567 = _1410;
        _1568 = _1425;
        _1569 = _1424;
        _1570 = _1423;
        _1571 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)));
        _1572 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)));
        _1573 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)));
    }
    else
    {
        _1559 = _1247;
        _1560 = _1247;
        _1561 = _1247;
        _1562 = _1247;
        _1563 = _1247;
        _1564 = _1247;
        _1565 = _1247;
        _1566 = _1247;
        _1567 = _1247;
        _1568 = _1247;
        _1569 = _1247;
        _1570 = _1247;
        _1571 = 0.0;
        _1572 = 0.0;
        _1573 = 0.0;
    }
    float _1583 = (cbModelParam._m0[1u].x * (_1571 - _1259)) + _1259;
    float _1584 = (cbModelParam._m0[1u].x * (_1572 - _1260)) + _1260;
    float _1585 = (cbModelParam._m0[1u].x * (_1573 - _1261)) + _1261;
    float _1606 = fma(_1585, cbSceneParam._m0[89u].z, fma(_1584, cbSceneParam._m0[89u].y, _1583 * cbSceneParam._m0[89u].x));
    float _1609 = fma(_1585, cbSceneParam._m0[90u].z, fma(_1584, cbSceneParam._m0[90u].y, _1583 * cbSceneParam._m0[90u].x));
    float _1612 = fma(_1585, cbSceneParam._m0[91u].z, fma(_1584, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1583));
    float _1627 = _851 * 0.5;
    float _1628 = _852 * 0.5;
    float _1629 = _853 * 0.5;
    float _1630 = dot(vec4(_1627, _1628, _1629, 1.0), vec4(_1561, _1564, _1567, _1570));
    float _1633 = dot(vec4(_1627, _1628, _1629, 1.0), vec4(_1560, _1563, _1566, _1569));
    float _1636 = dot(vec4(_1627, _1628, _1629, 1.0), vec4(_1559, _1562, _1565, _1568));
    float _1667;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1643 = dot(vec4(_1627, _1628, _1629, 1.0), vec4(_1246, _1250, _1253, _1256));
        float _1647 = dot(vec4(_1627, _1628, _1629, 1.0), vec4(_1248, _1251, _1254, _1257));
        float _1651 = dot(vec4(_1627, _1628, _1629, 1.0), vec4(_1249, _1252, _1255, _1258));
        float _1658 = dot(vec4(cbModelParam._m0[39u]), vec4(_1627, _1628, _1629, 1.0));
        _1667 = dot(vec3(isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)), isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)), isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1658) ? 0.0 : (isnan(0.0) ? _1658 : max(0.0, _1658))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1667 = 1.0;
    }
    float _1678;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1669 = dot(vec4(cbModelParam._m0[40u]), vec4(_1627, _1628, _1629, 1.0));
        _1678 = dot(vec3(isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)), isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)), isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1669) ? 0.0 : (isnan(0.0) ? _1669 : max(0.0, _1669))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1678 = 1.0;
    }
    float _1682 = (_1678 * cbModelParam._m0[1u].x) + (_1667 * (1.0 - cbModelParam._m0[1u].x));
    float _1692 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _711);
    float _1693 = isnan(_1692) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1692 : min(cbModelParam._m0[25u].z, _1692));
    float _1773;
    float _1775;
    float _1777;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1740 = fma(_915, cbModelParam._m0[13u].z, fma(_911, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _907)) + cbModelParam._m0[13u].w;
        float _1744 = fma(_915, cbModelParam._m0[14u].z, fma(_911, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _907)) + cbModelParam._m0[14u].w;
        float _1748 = fma(_915, cbModelParam._m0[15u].z, fma(_911, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _907)) + cbModelParam._m0[15u].w;
        float _1751 = fma(_853, cbModelParam._m0[13u].z, fma(_852, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _851));
        float _1754 = fma(_853, cbModelParam._m0[14u].z, fma(_852, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _851));
        float _1757 = fma(_853, cbModelParam._m0[15u].z, fma(_852, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _851));
        float _1785;
        if (_1751 > 0.0)
        {
            _1785 = abs((1.0 - _1740) / _1751);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1740 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1785 = frontier_phi_19_17_ladder;
        }
        float _1991;
        if (_1754 > 0.0)
        {
            _1991 = abs((1.0 - _1744) / _1754);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1754 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1744 + 1.0) / _1754);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1991 = frontier_phi_28_24_ladder;
        }
        float _2245;
        if (_1757 > 0.0)
        {
            _2245 = abs((1.0 - _1748) / _1757);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1757 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1748 + 1.0) / _1757);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2245 = frontier_phi_40_35_ladder;
        }
        float _2247 = isnan(_1991) ? _1785 : (isnan(_1785) ? _1991 : min(_1785, _1991));
        float _2248 = isnan(_2245) ? _2247 : (isnan(_2247) ? _2245 : min(_2247, _2245));
        float _2252 = (_2248 * _1751) + _1740;
        float _2253 = (_2248 * _1754) + _1744;
        float _2254 = (_2248 * _1757) + _1748;
        float _2255 = _2248 * 9.9999997473787516355514526367188e-05;
        float _2257 = (-1.0) - _2255;
        float _2259 = _2255 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2254 > _2259) || ((_2254 < _2257) || ((_2253 > _2259) || ((_2253 < _2257) || ((_2252 < _2257) || (_2252 > _2259))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2382 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2254, cbModelParam._m0[9u].z, fma(_2253, cbModelParam._m0[9u].y, _2252 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2254, cbModelParam._m0[10u].z, fma(_2253, cbModelParam._m0[10u].y, _2252 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2254, cbModelParam._m0[11u].z, fma(_2253, cbModelParam._m0[11u].y, _2252 * cbModelParam._m0[11u].x))), _1693);
            frontier_phi_18_40_ladder = _2382.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2382.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2382.x * cbModelParam._m0[1u].y;
        }
        _1773 = frontier_phi_18_40_ladder_2;
        _1775 = frontier_phi_18_40_ladder_1;
        _1777 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1761 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_851, _852, _853), _1693);
        _1773 = _1761.x * cbModelParam._m0[1u].y;
        _1775 = _1761.y * cbModelParam._m0[1u].y;
        _1777 = _1761.z * cbModelParam._m0[1u].y;
    }
    float _1781 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _711);
    float _1782 = isnan(_1781) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1781 : min(cbModelParam._m0[25u].w, _1781));
    float _1875;
    float _1877;
    float _1879;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1839 = fma(_915, cbModelParam._m0[21u].z, fma(_911, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _907)) + cbModelParam._m0[21u].w;
        float _1843 = fma(_915, cbModelParam._m0[22u].z, fma(_911, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _907)) + cbModelParam._m0[22u].w;
        float _1847 = fma(_915, cbModelParam._m0[23u].z, fma(_911, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _907)) + cbModelParam._m0[23u].w;
        float _1850 = fma(_853, cbModelParam._m0[21u].z, fma(_852, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _851));
        float _1853 = fma(_853, cbModelParam._m0[22u].z, fma(_852, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _851));
        float _1856 = fma(_853, cbModelParam._m0[23u].z, fma(_852, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _851));
        float _1996;
        if (_1850 > 0.0)
        {
            _1996 = abs((1.0 - _1839) / _1850);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1850 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1839 + 1.0) / _1850);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1996 = frontier_phi_30_26_ladder;
        }
        float _2272;
        if (_1853 > 0.0)
        {
            _2272 = abs((1.0 - _1843) / _1853);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1853 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1843 + 1.0) / _1853);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2272 = frontier_phi_42_37_ladder;
        }
        float _2485;
        if (_1856 > 0.0)
        {
            _2485 = abs((1.0 - _1847) / _1856);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1856 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1847 + 1.0) / _1856);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2485 = frontier_phi_51_48_ladder;
        }
        float _2487 = isnan(_2272) ? _1996 : (isnan(_1996) ? _2272 : min(_1996, _2272));
        float _2488 = isnan(_2485) ? _2487 : (isnan(_2487) ? _2485 : min(_2487, _2485));
        float _2492 = (_2488 * _1850) + _1839;
        float _2493 = (_2488 * _1853) + _1843;
        float _2494 = (_2488 * _1856) + _1847;
        float _2495 = _2488 * 9.9999997473787516355514526367188e-05;
        float _2496 = (-1.0) - _2495;
        float _2498 = _2495 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2494 > _2498) || ((_2494 < _2496) || ((_2493 > _2498) || ((_2493 < _2496) || ((_2492 < _2496) || (_2492 > _2498))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2697 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2494, cbModelParam._m0[17u].z, fma(_2493, cbModelParam._m0[17u].y, _2492 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2494, cbModelParam._m0[18u].z, fma(_2493, cbModelParam._m0[18u].y, _2492 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2494, cbModelParam._m0[19u].z, fma(_2493, cbModelParam._m0[19u].y, _2492 * cbModelParam._m0[19u].x))), _1782);
            frontier_phi_27_51_ladder = _2697.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2697.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2697.x * cbModelParam._m0[1u].z;
        }
        _1875 = frontier_phi_27_51_ladder_2;
        _1877 = frontier_phi_27_51_ladder_1;
        _1879 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1859 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_851, _852, _853), _1782);
        _1875 = _1859.x * cbModelParam._m0[1u].z;
        _1877 = _1859.y * cbModelParam._m0[1u].z;
        _1879 = _1859.z * cbModelParam._m0[1u].z;
    }
    float _1892 = (((_878 * _829) + _879) * _843) * ((cbModelParam._m0[1u].w * (_1875 - _1773)) + _1773);
    float _1894 = (((_878 * _830) + _879) * _843) * ((cbModelParam._m0[1u].w * (_1877 - _1775)) + _1775);
    float _1896 = (((_878 * _831) + _879) * _843) * ((cbModelParam._m0[1u].w * (_1879 - _1777)) + _1777);
    float _1899 = fma(_1896, cbSceneParam._m0[89u].z, fma(_1894, cbSceneParam._m0[89u].y, _1892 * cbSceneParam._m0[89u].x));
    float _1902 = fma(_1896, cbSceneParam._m0[90u].z, fma(_1894, cbSceneParam._m0[90u].y, _1892 * cbSceneParam._m0[90u].x));
    float _1905 = fma(_1896, cbSceneParam._m0[91u].z, fma(_1894, cbSceneParam._m0[91u].y, _1892 * cbSceneParam._m0[91u].x));
    uvec4 _1915 = floatBitsToUint(cbInstanceData._m0[_735 + 5u]);
    uint _1917 = _1915.x * 14u;
    uint _1918 = _1917 + 13u;
    float _1925 = _843 + (-1.0);
    float _1930 = (cbLight._m0[_1918].x * _1925) + 1.0;
    float _1931 = (cbLight._m0[_1918].y * _1925) + 1.0;
    float _1932 = (cbLight._m0[_1918].z * _1925) + 1.0;
    float _1933 = (cbLight._m0[_1918].w * _1925) + 1.0;
    uint _1934 = _1917 + 5u;
    float _1940 = isnan(1.0) ? _1931 : (isnan(_1931) ? 1.0 : min(_1931, 1.0));
    uint _1944 = _1917 + 4u;
    float _1950 = isnan(1.0) ? _1930 : (isnan(_1930) ? 1.0 : min(_1930, 1.0));
    uint _1954 = _1917 | 1u;
    float _1965 = dot(vec3(cbLight._m0[_1917].xyz), vec3(_529, _530, _531));
    float _1968 = dot(vec3(cbLight._m0[_1954].xyz), vec3(_529, _530, _531));
    float _4158 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _4169 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1973 = (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * 0.3183098733425140380859375;
    float _1975 = (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * 0.3183098733425140380859375;
    float _1982 = ((cbLight._m0[_1934].x * _1940) * _1975) + ((cbLight._m0[_1944].x * _1950) * _1973);
    float _1983 = ((_1940 * cbLight._m0[_1934].y) * _1975) + ((_1950 * cbLight._m0[_1944].y) * _1973);
    float _1984 = ((_1940 * cbLight._m0[_1934].z) * _1975) + ((_1950 * cbLight._m0[_1944].z) * _1973);
    uvec4 _1988 = floatBitsToUint(cbLight._m0[_1917 + 12u]);
    bool _1990 = _1988.x == 0u;
    float _2001;
    float _2003;
    float _2005;
    if (_1990)
    {
        _2001 = _1982;
        _2003 = _1983;
        _2005 = _1984;
    }
    else
    {
        uint _2009 = _1917 + 6u;
        float _2025 = (dot(vec3(cbLight._m0[_1917 + 2u].xyz), vec3(_529, _530, _531)) * 0.5) + 0.5;
        float _2026 = _2025 * _2025;
        float _4180 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
        float _2027 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _2028 = isnan(1.0) ? _1932 : (isnan(_1932) ? 1.0 : min(_1932, 1.0));
        _2001 = (((cbLight._m0[_2009].x * 0.3183098733425140380859375) * _2027) * _2028) + _1982;
        _2003 = (((cbLight._m0[_2009].y * 0.3183098733425140380859375) * _2027) * _2028) + _1983;
        _2005 = (((cbLight._m0[_2009].z * 0.3183098733425140380859375) * _2027) * _2028) + _1984;
    }
    bool _2008 = _1988.y == 0u;
    float _2046;
    float _2048;
    float _2050;
    if (_2008)
    {
        _2046 = _2001;
        _2048 = _2003;
        _2050 = _2005;
    }
    else
    {
        uint _2216 = _1917 + 7u;
        float _2232 = (dot(vec3(cbLight._m0[_1917 + 3u].xyz), vec3(_529, _530, _531)) * 0.5) + 0.5;
        float _2233 = _2232 * _2232;
        float _4196 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2234 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _2235 = isnan(1.0) ? _1933 : (isnan(_1933) ? 1.0 : min(_1933, 1.0));
        _2046 = (((cbLight._m0[_2216].x * 0.3183098733425140380859375) * _2234) * _2235) + _2001;
        _2048 = (((cbLight._m0[_2216].y * 0.3183098733425140380859375) * _2234) * _2235) + _2003;
        _2050 = (((cbLight._m0[_2216].z * 0.3183098733425140380859375) * _2234) * _2235) + _2005;
    }
    uint _2053 = _1917 + 8u;
    float _2066 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1917].w)) * _711) * 0.949999988079071044921875);
    float _2067 = _2066 * _2066;
    float _2068 = cbLight._m0[_1917].x + _612;
    float _2069 = cbLight._m0[_1917].y + _613;
    float _2070 = cbLight._m0[_1917].z + _614;
    float _2074 = inversesqrt(dot(vec3(_2068, _2069, _2070), vec3(_2068, _2069, _2070)));
    float _2075 = _2074 * _2068;
    float _2076 = _2074 * _2069;
    float _2077 = _2074 * _2070;
    float _2078 = dot(vec3(_529, _530, _531), vec3(cbLight._m0[_1917].xyz));
    float _4212 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2081 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _4223 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _2082 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _2083 = dot(vec3(_529, _530, _531), vec3(_2075, _2076, _2077));
    float _4234 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2086 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _2087 = dot(vec3(cbLight._m0[_1917].xyz), vec3(_2075, _2076, _2077));
    float _4245 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2091 = _2067 * _2067;
    float _2095 = ((_2086 * _2086) * (_2091 + (-1.0))) + 1.0;
    float _2103 = exp2(log2(1.0 - (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0)))) * 5.0);
    float _2104 = 0.959999978542327880859375 - _826;
    float _2106 = 0.959999978542327880859375 - _827;
    float _2107 = 0.959999978542327880859375 - _828;
    float _2114 = 1.0 - _2067;
    float _2125 = (0.5 / (((_2082 * ((_2081 * _2114) + _2067)) + 9.9999999392252902907785028219223e-09) + (((_2082 * _2114) + _2067) * _2081))) * _2081;
    float _4256 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2127 = (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_2091 / ((_2095 * _2095) * 3.141590118408203125));
    uint _2138 = _1917 + 9u;
    float _2149 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1954].w)) * _711) * 0.949999988079071044921875);
    float _2150 = _2149 * _2149;
    float _2151 = cbLight._m0[_1954].x + _612;
    float _2152 = cbLight._m0[_1954].y + _613;
    float _2153 = cbLight._m0[_1954].z + _614;
    float _2157 = inversesqrt(dot(vec3(_2151, _2152, _2153), vec3(_2151, _2152, _2153)));
    float _2158 = _2157 * _2151;
    float _2159 = _2157 * _2152;
    float _2160 = _2157 * _2153;
    float _2161 = dot(vec3(_529, _530, _531), vec3(cbLight._m0[_1954].xyz));
    float _4267 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2164 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _2165 = dot(vec3(_529, _530, _531), vec3(_2158, _2159, _2160));
    float _4278 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2168 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _2169 = dot(vec3(cbLight._m0[_1954].xyz), vec3(_2158, _2159, _2160));
    float _4289 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2173 = _2150 * _2150;
    float _2177 = ((_2168 * _2168) * (_2173 + (-1.0))) + 1.0;
    float _2184 = exp2(log2(1.0 - (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) * 5.0);
    float _2191 = 1.0 - _2150;
    float _2201 = (0.5 / (((_2082 * ((_2164 * _2191) + _2150)) + 9.9999999392252902907785028219223e-09) + (((_2082 * _2191) + _2150) * _2164))) * _2164;
    float _4300 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2203 = (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_2173 / ((_2177 * _2177) * 3.141590118408203125));
    float _2213 = (((((_2184 * _2104) + _829) * cbLight._m0[_2138].x) * _2203) * _1940) + (((((_2103 * _2104) + _829) * cbLight._m0[_2053].x) * _2127) * _1950);
    float _2214 = (((((_2184 * _2106) + _830) * cbLight._m0[_2138].y) * _2203) * _1940) + (((((_2103 * _2106) + _830) * cbLight._m0[_2053].y) * _2127) * _1950);
    float _2215 = (((((_2184 * _2107) + _831) * cbLight._m0[_2138].z) * _2203) * _1940) + (((((_2103 * _2107) + _831) * cbLight._m0[_2053].z) * _2127) * _1950);
    float _2277;
    float _2279;
    float _2281;
    if (_1990)
    {
        _2277 = _2213;
        _2279 = _2214;
        _2281 = _2215;
    }
    else
    {
        uint _2283 = _1917 + 2u;
        uint _2287 = _1917 + 10u;
        float _2301 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2283].w)) * _711) * 0.949999988079071044921875);
        float _2302 = _2301 * _2301;
        float _2303 = cbLight._m0[_2283].x + _612;
        float _2304 = cbLight._m0[_2283].y + _613;
        float _2305 = cbLight._m0[_2283].z + _614;
        float _2309 = inversesqrt(dot(vec3(_2303, _2304, _2305), vec3(_2303, _2304, _2305)));
        float _2310 = _2309 * _2303;
        float _2311 = _2309 * _2304;
        float _2312 = _2309 * _2305;
        float _2313 = dot(vec3(_529, _530, _531), vec3(cbLight._m0[_2283].xyz));
        float _4311 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2316 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _2317 = dot(vec3(_529, _530, _531), vec3(_2310, _2311, _2312));
        float _4322 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2320 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _2321 = dot(vec3(cbLight._m0[_2283].xyz), vec3(_2310, _2311, _2312));
        float _4333 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2325 = _2302 * _2302;
        float _2329 = ((_2320 * _2320) * (_2325 + (-1.0))) + 1.0;
        float _2336 = exp2(log2(1.0 - (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0)))) * 5.0);
        float _2343 = 1.0 - _2302;
        float _2353 = (0.5 / (((_2082 * ((_2316 * _2343) + _2302)) + 9.9999999392252902907785028219223e-09) + (((_2082 * _2343) + _2302) * _2316))) * _2316;
        float _4344 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2355 = (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_2325 / ((_2329 * _2329) * 3.141590118408203125));
        float _2356 = isnan(1.0) ? _1932 : (isnan(_1932) ? 1.0 : min(_1932, 1.0));
        _2277 = (((((_2336 * _2104) + _829) * cbLight._m0[_2287].x) * _2355) * _2356) + _2213;
        _2279 = (((((_2336 * _2106) + _830) * cbLight._m0[_2287].y) * _2355) * _2356) + _2214;
        _2281 = (((((_2336 * _2107) + _831) * cbLight._m0[_2287].z) * _2355) * _2356) + _2215;
    }
    float _2391;
    float _2393;
    float _2395;
    if (_2008)
    {
        _2391 = _2277;
        _2393 = _2279;
        _2395 = _2281;
    }
    else
    {
        uint _2402 = _1917 + 3u;
        uint _2406 = _1917 + 11u;
        float _2420 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2402].w)) * _711) * 0.949999988079071044921875);
        float _2421 = _2420 * _2420;
        float _2422 = cbLight._m0[_2402].x + _612;
        float _2423 = cbLight._m0[_2402].y + _613;
        float _2424 = cbLight._m0[_2402].z + _614;
        float _2428 = inversesqrt(dot(vec3(_2422, _2423, _2424), vec3(_2422, _2423, _2424)));
        float _2429 = _2428 * _2422;
        float _2430 = _2428 * _2423;
        float _2431 = _2428 * _2424;
        float _2432 = dot(vec3(_529, _530, _531), vec3(cbLight._m0[_2402].xyz));
        float _4360 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2435 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _2436 = dot(vec3(_529, _530, _531), vec3(_2429, _2430, _2431));
        float _4371 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2439 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2440 = dot(vec3(cbLight._m0[_2402].xyz), vec3(_2429, _2430, _2431));
        float _4382 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2444 = _2421 * _2421;
        float _2448 = ((_2439 * _2439) * (_2444 + (-1.0))) + 1.0;
        float _2455 = exp2(log2(1.0 - (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0)))) * 5.0);
        float _2462 = 1.0 - _2421;
        float _2472 = (0.5 / (((_2082 * ((_2435 * _2462) + _2421)) + 9.9999999392252902907785028219223e-09) + (((_2082 * _2462) + _2421) * _2435))) * _2435;
        float _4393 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2474 = (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_2444 / ((_2448 * _2448) * 3.141590118408203125));
        float _2475 = isnan(1.0) ? _1933 : (isnan(_1933) ? 1.0 : min(_1933, 1.0));
        _2391 = (((((_2455 * _2104) + _829) * cbLight._m0[_2406].x) * _2474) * _2475) + _2277;
        _2393 = (((((_2455 * _2106) + _830) * cbLight._m0[_2406].y) * _2474) * _2475) + _2279;
        _2395 = (((((_2455 * _2107) + _831) * cbLight._m0[_2406].z) * _2474) * _2475) + _2281;
    }
    float _2609;
    float _2611;
    float _2613;
    float _2615;
    float _2617;
    float _2619;
    if (_1915.y == 0u)
    {
        float _2550 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2551 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2550;
        float _2552 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2550;
        float _2553 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2550;
        uvec4 _2565 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2566 = _2565.x;
        uint _2577 = uint((float(_2565.y) * floor(float(uint(cbSceneParam._m0[85u].y * _633) / _2566))) + floor(float(uint(cbSceneParam._m0[85u].x * _632) / _2566)));
        float _2587 = (log2(_2553 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2588 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        uint _2591 = uint(isnan(14.0) ? _2588 : (isnan(_2588) ? 14.0 : min(_2588, 14.0)));
        uvec4 _2596 = texelFetch(g_lightClusterGridBuffer, int(((_2591 << 2u) + (_2577 << 6u)) >> 2u));
        uint _2597 = _2596.x;
        uint _2598 = _2565.z;
        float _2702;
        float _2704;
        float _2706;
        float _2708;
        float _2710;
        float _2712;
        if (((((1u << ((_2598 >> 4u) & 15u)) + 4294967295u) & _2597) == 0u) || ((_2598 & 240u) == 0u))
        {
            _2702 = 0.0;
            _2704 = 0.0;
            _2706 = 0.0;
            _2708 = 0.0;
            _2710 = 0.0;
            _2712 = 0.0;
        }
        else
        {
            float _2703;
            float _2705;
            float _2707;
            float _2709;
            float _2711;
            float _2713;
            float _2854 = 0.0;
            float _2855 = 0.0;
            float _2856 = 0.0;
            float _2857 = 0.0;
            float _2858 = 0.0;
            float _2859 = 0.0;
            uint _2860 = 0u;
            uint _2869;
            bool _2870;
            for (;;)
            {
                _2869 = texelFetch(g_lightClassification, int((((_2591 << 5u) + (_2577 << 9u)) + (_2860 << 2u)) >> 2u)).x;
                _2870 = _2869 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2870)
                {
                    frontier_phi_68_pred = _2856;
                    frontier_phi_68_pred_1 = _2859;
                    frontier_phi_68_pred_2 = _2858;
                    frontier_phi_68_pred_3 = _2857;
                    frontier_phi_68_pred_4 = _2855;
                    frontier_phi_68_pred_5 = _2854;
                }
                else
                {
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    uint _3005;
                    _2999 = _2854;
                    _3000 = _2855;
                    _3001 = _2856;
                    _3002 = _2857;
                    _3003 = _2858;
                    _3004 = _2859;
                    _3005 = _2869;
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    for (;;)
                    {
                        uint _3009 = uint(findLSB(_3005)) + (_2860 << 5u);
                        uint _3006 = (_3005 + 4294967295u) & _3005;
                        uint _3011 = _3009 * 48u;
                        vec4 _3025 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3011)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 3u)).x));
                        uint _3031 = (_3009 * 48u) + 4u;
                        vec4 _3044 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3031)).x, texelFetch(g_PointLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3031 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3031 + 3u)).x));
                        uint _3050 = (_3009 * 48u) + 8u;
                        vec3 _3061 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3050)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 2u)).x));
                        float _3065 = _3025.x - _2551;
                        float _3066 = _3025.y - _2552;
                        float _3067 = _3025.z - _2553;
                        float _3068 = dot(vec3(_3065, _3066, _3067), vec3(_3065, _3066, _3067));
                        float _3071 = inversesqrt(_3068);
                        float _3072 = _3071 * _3065;
                        float _3073 = _3071 * _3066;
                        float _3074 = _3071 * _3067;
                        float _3075 = dot(vec3(_656, _659, _662), vec3(_3072, _3073, _3074));
                        float _3080 = 1.0 - (_3068 * _3025.w);
                        float _4419 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                        float _3081 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                        float _3082 = sqrt(_3068) * _3044.w;
                        float _3085 = 1.39999997615814208984375 / (_3082 + 1.39999997615814208984375);
                        float _3086 = _3085 * _3085;
                        float _3089 = ((1.0 - _3086) * _3075) + _3086;
                        float _3092 = _3082 * _3082;
                        float _3096 = ((isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0))) * _3081) / ((_3092 * 0.699999988079071044921875) + 1.0);
                        float _3100 = (-0.0) - _2551;
                        float _3101 = (-0.0) - _2552;
                        float _3102 = (-0.0) - _2553;
                        float _3106 = inversesqrt(dot(vec3(_3100, _3101, _3102), vec3(_3100, _3101, _3102)));
                        float _3107 = _3106 * _3100;
                        float _3108 = _3106 * _3101;
                        float _3109 = _3106 * _3102;
                        float _3117 = exp2(log2(1.0 / ((_3092 * 3.5) + 5.0)) * 0.25);
                        float _3118 = 1.0 - _859;
                        float _3125 = sqrt(1.0 - ((1.0 - (_3118 * _3118)) * (1.0 - (_3117 * _3117))));
                        float _3126 = _3125 * _3125;
                        float _3127 = _3126 * _3126;
                        float _3128 = _3107 + _3072;
                        float _3129 = _3108 + _3073;
                        float _3130 = _3109 + _3074;
                        float _3134 = inversesqrt(dot(vec3(_3128, _3129, _3130), vec3(_3128, _3129, _3130)));
                        float _3138 = dot(vec3(_656, _659, _662), vec3(_3107, _3108, _3109));
                        float _4435 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                        float _3141 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                        float _3142 = dot(vec3(_656, _659, _662), vec3(_3134 * _3128, _3134 * _3129, _3134 * _3130));
                        float _4446 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                        float _3145 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                        float _3149 = ((_3145 * _3145) * (_3127 + (-1.0))) + 1.0;
                        float _3150 = _3085 * _3126;
                        float _3151 = _3150 * _3150;
                        float _3154 = ((1.0 - _3151) * _3075) + _3151;
                        float _4457 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                        float _3155 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                        float _3156 = 1.0 - _3126;
                        float _3166 = (0.5 / (((_3155 * ((_3141 * _3156) + _3126)) + 9.9999999392252902907785028219223e-09) + (((_3155 * _3156) + _3126) * _3141))) * _3155;
                        float _4468 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                        float _3177 = (((_3127 * 3.1415927410125732421875) * (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0)))) / ((_3149 * _3149) * ((_3092 * 2.1991131305694580078125) + 3.141590118408203125))) * _3081;
                        _2929 = (_3096 * _3044.x) + _3002;
                        _2930 = (_3096 * _3044.y) + _3003;
                        _2931 = (_3096 * _3044.z) + _3004;
                        _2926 = (_3177 * _3061.x) + _2999;
                        _2927 = (_3177 * _3061.y) + _3000;
                        _2928 = (_3177 * _3061.z) + _3001;
                        if (_3006 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2999 = _2926;
                            _3000 = _2927;
                            _3001 = _2928;
                            _3002 = _2929;
                            _3003 = _2930;
                            _3004 = _2931;
                            _3005 = _3006;
                        }
                    }
                    frontier_phi_68_pred = _2928;
                    frontier_phi_68_pred_1 = _2931;
                    frontier_phi_68_pred_2 = _2930;
                    frontier_phi_68_pred_3 = _2929;
                    frontier_phi_68_pred_4 = _2927;
                    frontier_phi_68_pred_5 = _2926;
                }
                _2707 = frontier_phi_68_pred;
                _2713 = frontier_phi_68_pred_1;
                _2711 = frontier_phi_68_pred_2;
                _2709 = frontier_phi_68_pred_3;
                _2705 = frontier_phi_68_pred_4;
                _2703 = frontier_phi_68_pred_5;
                uint _2861 = _2860 + 1u;
                if (_2861 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2854 = _2703;
                    _2855 = _2705;
                    _2856 = _2707;
                    _2857 = _2709;
                    _2858 = _2711;
                    _2859 = _2713;
                    _2860 = _2861;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2702 = _2703;
            _2704 = _2705;
            _2706 = _2707;
            _2708 = _2709;
            _2710 = _2711;
            _2712 = _2713;
        }
        uvec4 _2716 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2717 = _2716.z;
        uint _2719 = (_2717 >> 8u) & 15u;
        float _2822;
        float _2824;
        float _2826;
        float _2828;
        float _2830;
        float _2832;
        if (((4294967295u << _2719) & _2597) == 0u)
        {
            _2822 = _2702;
            _2824 = _2704;
            _2826 = _2706;
            _2828 = _2708;
            _2830 = _2710;
            _2832 = _2712;
        }
        else
        {
            float _2847 = inversesqrt(dot(vec3(_2551, _2552, _2553), vec3(_2551, _2552, _2553)));
            float _2848 = _2847 * _2551;
            float _2849 = _2847 * _2552;
            float _2850 = _2847 * _2553;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2719 < ((_2717 >> 12u) & 15u))
            {
                float _2823;
                float _2825;
                float _2827;
                float _2829;
                float _2831;
                float _2833;
                float _2982 = _2702;
                float _2983 = _2704;
                float _2984 = _2706;
                float _2985 = _2708;
                float _2986 = _2710;
                float _2987 = _2712;
                uint _2988 = _2719;
                uint _2997;
                bool _2998;
                for (;;)
                {
                    _2997 = texelFetch(g_lightClassification, int((((_2591 << 5u) + (_2577 << 9u)) + (_2988 << 2u)) >> 2u)).x;
                    _2998 = _2997 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2998)
                    {
                        frontier_phi_79_pred = _2987;
                        frontier_phi_79_pred_1 = _2986;
                        frontier_phi_79_pred_2 = _2985;
                        frontier_phi_79_pred_3 = _2984;
                        frontier_phi_79_pred_4 = _2983;
                        frontier_phi_79_pred_5 = _2982;
                    }
                    else
                    {
                        float _3191;
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3196;
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3204 = _2982;
                        float _3205 = _2983;
                        float _3206 = _2984;
                        float _3207 = _2985;
                        float _3208 = _2986;
                        float _3209 = _2987;
                        uint _3210 = _2997;
                        uint _3211;
                        vec4 _3236;
                        float _3237;
                        vec4 _3252;
                        vec3 _3264;
                        vec4 _3279;
                        vec4 _3295;
                        float _3342;
                        bool _3343;
                        for (;;)
                        {
                            uint _3221 = ((_2988 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3210));
                            _3211 = (_3210 + 4294967295u) & _3210;
                            uint _3223 = _3221 * 40u;
                            _3236 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3223)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 3u)).x));
                            _3237 = _3236.w;
                            uint _3239 = (_3221 * 40u) + 4u;
                            _3252 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3239)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 3u)).x));
                            uint _3254 = (_3221 * 40u) + 8u;
                            _3264 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3254)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 2u)).x));
                            uint _3266 = (_3221 * 40u) + 16u;
                            _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            uint _3282 = (_3221 * 40u) + 20u;
                            _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            uint _3298 = (_3221 * 40u) + 24u;
                            vec4 _3311 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 3u)).x));
                            uint _3317 = (_3221 * 40u) + 28u;
                            vec4 _3330 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 3u)).x));
                            _3342 = fma(_2553, _3330.z, fma(_2552, _3330.y, _3330.x * _2551)) + _3330.w;
                            _3343 = !((fma(_2553, _3311.z, fma(_2552, _3311.y, _3311.x * _2551)) + _3311.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3343)
                            {
                                float _3370 = _3236.x - _2551;
                                float _3371 = _3236.y - _2552;
                                float _3372 = _3236.z - _2553;
                                float _3373 = dot(vec3(_3370, _3371, _3372), vec3(_3370, _3371, _3372));
                                float _3376 = inversesqrt(_3373);
                                float _3377 = _3376 * _3370;
                                float _3378 = _3376 * _3371;
                                float _3379 = _3376 * _3372;
                                float _3383 = 1.0 - (_3373 / (_3237 * _3237));
                                float _4479 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                                float _3384 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
                                float _3388 = sqrt(_3373) * _3252.w;
                                float _3390 = 1.39999997615814208984375 / (_3388 + 1.39999997615814208984375);
                                float _3391 = _3390 * _3390;
                                float _3394 = ((1.0 - _3391) * dot(vec3(_3377, _3378, _3379), vec3(_656, _659, _662))) + _3391;
                                float _3397 = _3388 * _3388;
                                float _3401 = (fma(_2553, _3279.z, fma(_2552, _3279.y, _3279.x * _2551)) + _3279.w) / _3342;
                                float _3402 = (fma(_2553, _3295.z, fma(_2552, _3295.y, _3295.x * _2551)) + _3295.w) / _3342;
                                float _3406 = 1.0 - dot(vec2(_3401, _3402), vec2(_3401, _3402));
                                float _4495 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                                float _3407 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                                float _3408 = _3407 * (((isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0))) * _3384) / ((_3397 * 0.699999988079071044921875) + 1.0));
                                float _3420 = exp2(log2(1.0 / ((_3397 * 3.5) + 5.0)) * 0.25);
                                float _3421 = 1.0 - _859;
                                float _3428 = sqrt(1.0 - ((1.0 - (_3421 * _3421)) * (1.0 - (_3420 * _3420))));
                                float _3429 = _3428 * _3428;
                                float _3430 = _3429 * _3429;
                                float _3431 = _3377 - _2848;
                                float _3432 = _3378 - _2849;
                                float _3433 = _3379 - _2850;
                                float _3437 = inversesqrt(dot(vec3(_3431, _3432, _3433), vec3(_3431, _3432, _3433)));
                                float _3441 = dot(vec3(_656, _659, _662), vec3((-0.0) - _2848, (-0.0) - _2849, (-0.0) - _2850));
                                float _4506 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                                float _3444 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                                float _3445 = dot(vec3(_656, _659, _662), vec3(_3437 * _3431, _3437 * _3432, _3437 * _3433));
                                float _4517 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                                float _3448 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                                float _3452 = ((_3448 * _3448) * (_3430 + (-1.0))) + 1.0;
                                float _3453 = _3390 * _3429;
                                float _3454 = _3453 * _3453;
                                float _3460 = ((1.0 - _3454) * dot(vec3(_656, _659, _662), vec3(_3377, _3378, _3379))) + _3454;
                                float _4528 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                                float _3461 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                                float _3462 = 1.0 - _3429;
                                float _3472 = (0.5 / (((_3461 * ((_3444 * _3462) + _3429)) + 9.9999999392252902907785028219223e-09) + (((_3461 * _3462) + _3429) * _3444))) * _3461;
                                float _4539 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                                float _3482 = (_3407 * _3384) * (((_3430 * 3.1415927410125732421875) * (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0)))) / ((_3452 * _3452) * ((_3397 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3408 * _3252.z;
                                frontier_phi_85_pred_1 = _3408 * _3252.y;
                                frontier_phi_85_pred_2 = _3408 * _3252.x;
                                frontier_phi_85_pred_3 = _3482 * _3264.z;
                                frontier_phi_85_pred_4 = _3482 * _3264.y;
                                frontier_phi_85_pred_5 = _3482 * _3264.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3491 = frontier_phi_85_pred;
                            _3490 = frontier_phi_85_pred_1;
                            _3489 = frontier_phi_85_pred_2;
                            _3488 = frontier_phi_85_pred_3;
                            _3487 = frontier_phi_85_pred_4;
                            _3486 = frontier_phi_85_pred_5;
                            _3194 = _3489 + _3207;
                            _3195 = _3490 + _3208;
                            _3196 = _3491 + _3209;
                            _3191 = _3486 + _3204;
                            _3192 = _3487 + _3205;
                            _3193 = _3488 + _3206;
                            if (_3211 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3204 = _3191;
                                _3205 = _3192;
                                _3206 = _3193;
                                _3207 = _3194;
                                _3208 = _3195;
                                _3209 = _3196;
                                _3210 = _3211;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3196;
                        frontier_phi_79_pred_1 = _3195;
                        frontier_phi_79_pred_2 = _3194;
                        frontier_phi_79_pred_3 = _3193;
                        frontier_phi_79_pred_4 = _3192;
                        frontier_phi_79_pred_5 = _3191;
                    }
                    _2833 = frontier_phi_79_pred;
                    _2831 = frontier_phi_79_pred_1;
                    _2829 = frontier_phi_79_pred_2;
                    _2827 = frontier_phi_79_pred_3;
                    _2825 = frontier_phi_79_pred_4;
                    _2823 = frontier_phi_79_pred_5;
                    uint _2989 = _2988 + 1u;
                    if (_2989 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2982 = _2823;
                        _2983 = _2825;
                        _2984 = _2827;
                        _2985 = _2829;
                        _2986 = _2831;
                        _2987 = _2833;
                        _2988 = _2989;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2829;
                frontier_phi_60_61_ladder_1 = _2833;
                frontier_phi_60_61_ladder_2 = _2831;
                frontier_phi_60_61_ladder_3 = _2827;
                frontier_phi_60_61_ladder_4 = _2825;
                frontier_phi_60_61_ladder_5 = _2823;
            }
            else
            {
                frontier_phi_60_61_ladder = _2708;
                frontier_phi_60_61_ladder_1 = _2712;
                frontier_phi_60_61_ladder_2 = _2710;
                frontier_phi_60_61_ladder_3 = _2706;
                frontier_phi_60_61_ladder_4 = _2704;
                frontier_phi_60_61_ladder_5 = _2702;
            }
            _2822 = frontier_phi_60_61_ladder_5;
            _2824 = frontier_phi_60_61_ladder_4;
            _2826 = frontier_phi_60_61_ladder_3;
            _2828 = frontier_phi_60_61_ladder;
            _2830 = frontier_phi_60_61_ladder_2;
            _2832 = frontier_phi_60_61_ladder_1;
        }
        float _2837 = isnan(1.0) ? _843 : (isnan(_843) ? 1.0 : min(_843, 1.0));
        _2609 = (_2837 * _2828) + _2046;
        _2611 = (_2837 * _2830) + _2048;
        _2613 = (_2837 * _2832) + _2050;
        _2615 = ((_2822 * _829) * _2837) + _2391;
        _2617 = ((_2824 * _830) * _2837) + _2393;
        _2619 = ((_2826 * _831) * _2837) + _2395;
    }
    else
    {
        _2609 = _2046;
        _2611 = _2048;
        _2613 = _2050;
        _2615 = _2391;
        _2617 = _2393;
        _2619 = _2395;
    }
    float _4555 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _4566 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _4577 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _4588 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _2637 = ((isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2609 + ((isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))) * _843))) + ((_2615 + ((isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))) * _1682)) * cbPerFrame._m0[3u].x);
    float _2638 = ((isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_2611 + ((isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))) * _843))) + ((_2617 + ((isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))) * _1682)) * cbPerFrame._m0[3u].x);
    float _2639 = ((isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_2613 + ((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _843))) + ((_2619 + ((isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))) * _1682)) * cbPerFrame._m0[3u].x);
    float _2640 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
    float _2641 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
    float _2642 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
    float _2647 = cbInstanceData._m0[_735 + 6u].w * (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0)));
    float _2652 = _632 / cbSceneParam._m0[86u].x;
    float _2653 = _633 / cbSceneParam._m0[86u].y;
    vec4 _2667 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2652, _2653, (log2((isnan(cbSceneParam._m0[77u].w) ? _553 : (isnan(_553) ? cbSceneParam._m0[77u].w : min(_553, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2669 = _2667.x;
    float _2670 = _2667.y;
    float _2671 = _2667.z;
    float _2672 = _2667.w;
    float _2764;
    float _2766;
    float _2768;
    float _2770;
    if (_553 > cbSceneParam._m0[78u].w)
    {
        float _2727 = isnan(_553) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _553 : min(cbSceneParam._m0[80u].w, _553));
        float _2728 = _2727 / _553;
        float _2739 = _2728 * _605;
        float _2740 = _606 * _2728;
        float _2741 = (-0.0) - _2740;
        float _2742 = _2728 * _607;
        float _2744 = (cbSceneParam._m0[77u].w * _2741) / _2727;
        float _2745 = _2744 + cbSceneParam._m0[79u].w;
        float _2746 = cbSceneParam._m0[79u].w - _2740;
        float _2752 = sqrt(((_2739 * _2739) + (_2740 * _2740)) + (_2742 * _2742));
        float _2755 = (1.0 - (cbSceneParam._m0[77u].w / _2727)) * _2752;
        float _2760 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2762 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2939;
        if (abs((_2741 - _2744) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2939 = ((((_2745 > 0.0) ? exp2(_2760 * _2745) : (2.0 - exp2(_2762 * _2745))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2755;
        }
        else
        {
            float _2883 = 1.0 / cbSceneParam._m0[80u].x;
            float _2884 = isnan(_2746) ? _2745 : (isnan(_2745) ? _2746 : max(_2745, _2746));
            float _2885 = isnan(_2746) ? _2745 : (isnan(_2745) ? _2746 : min(_2745, _2746));
            float _2894 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : min(_2884, 0.0));
            float _2895 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : min(_2885, 0.0));
            _2939 = ((abs(_2752 / _2741) * cbSceneParam._m0[80u].y) * ((((_2894 - _2895) * 2.0) - ((exp2(_2760 * (isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0)))) - exp2(_2760 * (isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0))))) * _2883)) - ((exp2(_2762 * _2894) - exp2(_2762 * _2895)) * _2883))) + (_2755 * cbSceneParam._m0[80u].z);
        }
        vec4 _2941 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2652, _2653, 1.0), 0.0);
        float _2950 = exp2((_2939 * (-1.44269502162933349609375)) * (1.0 - _2941.w));
        float _2951 = log2(_2950);
        float _2967 = log2(_2672);
        _2764 = (exp2(_2967 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2951 * cbSceneParam._m0[78u].x)) * _2941.x) / cbSceneParam._m0[78u].x)) + _2669;
        _2766 = (exp2(_2967 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2951 * cbSceneParam._m0[78u].y)) * _2941.y) / cbSceneParam._m0[78u].y)) + _2670;
        _2768 = (exp2(_2967 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2951 * cbSceneParam._m0[78u].z)) * _2941.z) / cbSceneParam._m0[78u].z)) + _2671;
        _2770 = _2950 * _2672;
    }
    else
    {
        _2764 = _2669;
        _2766 = _2670;
        _2768 = _2671;
        _2770 = _2672;
    }
    bool _2977;
    vec4 _2780;
    vec4 _2802;
    float _2804;
    float _2808;
    float _2809;
    float _2810;
    float _2811;
    bool _2821;
    for (;;)
    {
        _2780 = cbMatDynParam._m0[0u];
        float _2782 = roundEven(_2780.y);
        bool _2783 = _2782 == 3.0;
        float _2784 = log2(_2770);
        float _2791 = exp2(_2784 * cbSceneParam._m0[78u].x) * _2640;
        float _2792 = exp2(_2784 * cbSceneParam._m0[78u].y) * _2641;
        float _2793 = exp2(_2784 * cbSceneParam._m0[78u].z) * _2642;
        float _2800 = _621 + (-0.5);
        _2802 = cbMtdParam._m0[1u];
        _2804 = _2802.y * _2800;
        float _2807 = (_2782 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2808 = _2807 * (_2783 ? _2791 : (_2791 + (cbSceneParam._m0[72u].w * _2764)));
        _2809 = _2807 * (_2783 ? _2792 : (_2792 + (cbSceneParam._m0[72u].w * _2766)));
        _2810 = _2807 * (_2783 ? _2793 : (_2793 + (cbSceneParam._m0[72u].w * _2768)));
        _2811 = _2800 * 0.999000012874603271484375;
        _2821 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2821)
        {
            if ((cbInstanceData._m0[_735 + 7u].x + _2811) < 0.5)
            {
                _2977 = true;
                break;
            }
        }
        uint _2918 = _736 + uint(_2780.w);
        if ((cbInstanceData._m0[_2918].w < 1.0) && ((cbInstanceData._m0[_2918].w + _2811) < 0.5))
        {
            _2977 = true;
            break;
        }
        if ((_2804 + _385) < _2802.x)
        {
            _2977 = true;
            break;
        }
        _2977 = false;
        break;
    }
    float _3182;
    if (_2977)
    {
        discard_state = true;
        _3182 = 0.0;
    }
    else
    {
        _3182 = _2647;
    }
    SV_Target.x = _2808;
    SV_Target.y = _2809;
    SV_Target.z = _2810;
    SV_Target.w = _3182;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2647;
    discard_exit();
}


