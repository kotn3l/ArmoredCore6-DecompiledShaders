#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1285;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238;
    float _239;
    float _240;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
    }
    else
    {
        _238 = _224;
        _239 = _225;
        _240 = _226;
    }
    vec4 _254 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _259 = _254.z;
    float _260 = _254.w;
    float _266 = exp2(log2(_259 * 22.0) * 260.0);
    float _267 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _268 = isnan(1.0) ? _267 : (isnan(_267) ? 1.0 : min(_267, 1.0));
    vec4 _282 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _293 = cbMtdParam._m0[10u].x * _282.x;
    float _294 = cbMtdParam._m0[10u].y * _282.y;
    float _295 = cbMtdParam._m0[10u].z * _282.z;
    vec4 _307 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _328 = (((cbMtdParam._m0[9u].x * _307.x) - _293) * _268) + _293;
    float _329 = (((cbMtdParam._m0[9u].y * _307.y) - _294) * _268) + _294;
    float _330 = (((cbMtdParam._m0[9u].z * _307.z) - _295) * _268) + _295;
    float _335 = exp2(log2(1.0 - _260) * 8.0);
    vec4 _347 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _372 = exp2(log2(_260) * 8.0);
    vec4 _385 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    vec4 _410 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _418 = (((((cbMtdParam._m0[12u].x * _347.x) - _328) * _335) + _328) * 4.55000019073486328125) * _410.x;
    float _420 = (((((cbMtdParam._m0[12u].y * _347.y) - _329) * _335) + _329) * 4.55000019073486328125) * _410.y;
    float _422 = (((((cbMtdParam._m0[12u].z * _347.z) - _330) * _335) + _330) * 4.55000019073486328125) * _410.z;
    float _429 = (((cbMtdParam._m0[11u].x * _385.x) - _418) * _372) + _418;
    float _430 = (((cbMtdParam._m0[11u].y * _385.y) - _420) * _372) + _420;
    float _431 = (((cbMtdParam._m0[11u].z * _385.z) - _422) * _372) + _422;
    float _432 = _410.w * _307.w;
    float _460 = (((texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _268) + cbMtdParam._m0[15u].y;
    float _463 = ((cbMtdParam._m0[14u].y - _460) * _335) + _460;
    float _467 = ((cbMtdParam._m0[15u].x - _463) * _372) + _463;
    vec4 _480 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _482 = _480.x;
    float _483 = _480.y;
    float _489 = cbMtdParam._m0[13u].y + _480.z;
    vec4 _501 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _510 = (((_501.z - _489) + cbMtdParam._m0[13u].x) * _268) + _489;
    vec4 _523 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _544 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _557 = (((_268 * (_259 + (-0.5))) + 0.5) * 2.0) * ((((_523.z - _510) + cbMtdParam._m0[14u].x) * _335) + _510);
    float _561 = (((_544.z - _557) + cbMtdParam._m0[13u].w) * _372) + _557;
    float _565 = (_254.x * 2.0) + (-1.0);
    float _567 = (_254.y * 2.0) + (-1.0);
    float _568 = dot(vec2(_565, _567), vec2(_565, _567));
    float _3912 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _573 = sqrt(1.0 - (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))));
    float _578 = ((_501.x - _482) * _268) + _482;
    float _579 = ((_501.y - _483) * _268) + _483;
    float _584 = ((_523.x - _578) * _335) + _578;
    float _585 = ((_523.y - _579) * _335) + _579;
    float _598 = ((((((_544.x - _584) * _372) + _584) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _565;
    float _599 = ((((((_544.y - _585) * _372) + _585) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _567;
    float _602 = fma(_573, _238, fma(_599, _230 * TANGENT.x, (_216 * _208) * _598));
    float _605 = fma(_573, _239, fma(_599, _230 * TANGENT.y, (_216 * _209) * _598));
    float _608 = fma(_573, _240, fma(_599, _230 * TANGENT.z, (_216 * _210) * _598));
    float _612 = inversesqrt(dot(vec3(_602, _605, _608), vec3(_602, _605, _608)));
    float _613 = _612 * _602;
    float _614 = _612 * _605;
    float _615 = _612 * _608;
    float _3923 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _616 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _3934 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _617 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _3945 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _618 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _3956 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _619 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _3967 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _620 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _3978 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _621 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _637 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _677 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _687 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _677);
    float _688 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _677);
    float _689 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _677);
    float _693 = inversesqrt(dot(vec3(_687, _688, _689), vec3(_687, _688, _689)));
    float _694 = _687 * _693;
    float _695 = _688 * _693;
    float _696 = _689 * _693;
    float _702 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _703 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _705 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _707 = _705.w;
    float _725 = fma(_615, cbSceneParam._m0[5u].z, fma(_614, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _613));
    float _728 = fma(_615, cbSceneParam._m0[6u].z, fma(_614, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _613));
    float _731 = fma(_615, cbSceneParam._m0[7u].z, fma(_614, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _613));
    vec4 _733 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _735 = _733.x;
    float _747 = (((_733.y - _617) + (_733.w * _617)) * cbMtdParam._m0[3u].x) + _617;
    vec4 _748 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _764 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_735 * _735)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _748.z;
    float _772 = (((cbMatDynParam._m0[15u].x - _621) * cbMatDynParam._m0[15u].w) * _764) + _621;
    float _780 = ((_764 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _747)) + _747;
    uint _804 = uint(roundEven(NORMAL.w)) * 13u;
    uint _806 = (_804 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _812 = (cbMtdParam._m0[0u].x * _618) * cbInstanceData._m0[_806].x;
    float _813 = (cbMtdParam._m0[0u].y * _619) * cbInstanceData._m0[_806].y;
    float _814 = (cbMtdParam._m0[0u].z * _620) * cbInstanceData._m0[_806].z;
    float _3989 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _815 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _4000 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _816 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _4011 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _817 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    vec4 _818 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _823 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _834 = (((_823.x - _772) + (_823.w * _772)) * cbMtdParam._m0[3u].x) + _772;
    float _847 = (cbMtdParam._m0[3u].x * (((_815 * _707) - _815) + _818.x)) + _815;
    float _848 = (cbMtdParam._m0[3u].x * (((_816 * _707) - _816) + _818.y)) + _816;
    float _849 = (cbMtdParam._m0[3u].x * (((_817 * _707) - _817) + _818.z)) + _817;
    float _863 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_772 * (_618 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_772 * (_619 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_772 * (_620 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _867 = _863 * cbMatDynParam._m0[13u].w;
    float _877 = (_867 * (cbMatDynParam._m0[13u].x - _847)) + _847;
    float _878 = (_867 * (cbMatDynParam._m0[13u].y - _848)) + _848;
    float _879 = (_867 * (cbMatDynParam._m0[13u].z - _849)) + _849;
    float _887 = ((_863 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _834)) + _834;
    float _888 = 1.0 - _887;
    float _889 = _888 * _877;
    float _890 = _888 * _878;
    float _891 = _888 * _879;
    float _895 = (_877 + (-0.039999999105930328369140625)) * _887;
    float _896 = (_878 + (-0.039999999105930328369140625)) * _887;
    float _897 = (_879 + (-0.039999999105930328369140625)) * _887;
    float _898 = _895 + 0.039999999105930328369140625;
    float _899 = _896 + 0.039999999105930328369140625;
    float _900 = _897 + 0.039999999105930328369140625;
    vec4 _909 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _702, cbSceneParam._m0[86u].y * _703));
    float _912 = _909.x * TEXCOORD_4;
    float _913 = dot(vec3(_613, _614, _615), vec3(_694, _695, _696));
    float _916 = _913 * 2.0;
    float _920 = (_916 * _613) - _694;
    float _921 = (_916 * _614) - _695;
    float _922 = (_916 * _615) - _696;
    float _926 = abs(dot(vec3(_694, _695, _696), vec3(_613, _614, _615)));
    float _4022 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _928 = sqrt(_780);
    float _941 = exp2((_928 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_928 * 3.0));
    float _947 = (1.0 - _941) * ((_928 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _948 = _941 * _928;
    float _976 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _980 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _984 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1284;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1011 = fma(_984, cbModelParam._m0[26u].z, fma(_980, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _976));
        float _1015 = fma(_984, cbModelParam._m0[27u].z, fma(_980, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _976));
        float _1019 = fma(_984, cbModelParam._m0[28u].z, fma(_980, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _976));
        float _1042 = _976 + _613;
        float _1043 = _980 + _614;
        float _1044 = _984 + _615;
        float _1054 = fma(_1044, cbModelParam._m0[26u].z, fma(_1043, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1042)) - _1011;
        float _1055 = fma(_1044, cbModelParam._m0[27u].z, fma(_1043, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1042)) - _1015;
        float _1056 = fma(_1044, cbModelParam._m0[28u].z, fma(_1043, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1042)) - _1019;
        float _1060 = inversesqrt(dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056)));
        float _1073 = ((_1060 * _1054) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1011 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1074 = ((_1060 * _1055) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1015 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1075 = ((_1060 * _1056) / cbModelParam._m0[34u].z) + ((((((_1019 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        float _1112 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1078.x + (-0.5));
        float _1114 = _1112 * (_1078.y + (-0.5));
        float _1115 = _1112 * (_1078.z + (-0.5));
        float _1122 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1085.x + (-0.5));
        float _1124 = _1122 * (_1085.y + (-0.5));
        float _1125 = _1122 * (_1085.z + (-0.5));
        float _1132 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1092.x + (-0.5));
        float _1134 = _1132 * (_1092.y + (-0.5));
        float _1135 = _1132 * (_1092.z + (-0.5));
        float _1142 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1099.x + (-0.5));
        float _1144 = _1142 * (_1099.y + (-0.5));
        float _1145 = _1142 * (_1099.z + (-0.5));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = _1113 * 0.5;
        float _1150 = _1123 * 0.5;
        float _1151 = _1133 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1166 = (dot(vec3(_613, _614, _615), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1176 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _4070 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1178 + 1.0))) + _1183) * _1146;
        float _1193 = _1114 * 0.5;
        float _1194 = _1124 * 0.5;
        float _1195 = _1134 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(_613, _614, _615), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _4103 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1220 + 1.0))) + _1225) * _1147;
        float _1235 = _1115 * 0.5;
        float _1236 = _1125 * 0.5;
        float _1237 = _1135 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_613, _614, _615), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _4114 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _4125 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _4136 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1262 + 1.0))) + _1267) * _1148;
        _1284 = _1115;
        _1286 = _1114;
        _1287 = _1113;
        _1288 = _1125;
        _1289 = _1124;
        _1290 = _1123;
        _1291 = _1135;
        _1292 = _1134;
        _1293 = _1133;
        _1294 = _1148;
        _1295 = _1147;
        _1296 = _1146;
        _1297 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
        _1298 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
        _1299 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
    }
    else
    {
        _1284 = _1285;
        _1286 = _1285;
        _1287 = _1285;
        _1288 = _1285;
        _1289 = _1285;
        _1290 = _1285;
        _1291 = _1285;
        _1292 = _1285;
        _1293 = _1285;
        _1294 = _1285;
        _1295 = _1285;
        _1296 = _1285;
        _1297 = 0.0;
        _1298 = 0.0;
        _1299 = 0.0;
    }
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1325 = fma(_984, cbModelParam._m0[30u].z, fma(_980, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _976));
        float _1329 = fma(_984, cbModelParam._m0[31u].z, fma(_980, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _976));
        float _1333 = fma(_984, cbModelParam._m0[32u].z, fma(_980, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _976));
        float _1356 = _976 + _613;
        float _1357 = _980 + _614;
        float _1358 = _984 + _615;
        float _1368 = fma(_1358, cbModelParam._m0[30u].z, fma(_1357, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1356)) - _1325;
        float _1369 = fma(_1358, cbModelParam._m0[31u].z, fma(_1357, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1356)) - _1329;
        float _1370 = fma(_1358, cbModelParam._m0[32u].z, fma(_1357, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1356)) - _1333;
        float _1374 = inversesqrt(dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370)));
        float _1387 = ((_1374 * _1368) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1325 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1388 = ((_1374 * _1369) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1329 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1389 = ((_1374 * _1370) / cbModelParam._m0[35u].z) + ((((((_1333 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        vec4 _1412 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        float _1424 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1425 = _1424 * (_1391.x + (-0.5));
        float _1426 = _1424 * (_1391.y + (-0.5));
        float _1427 = _1424 * (_1391.z + (-0.5));
        float _1434 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1435 = _1434 * (_1398.x + (-0.5));
        float _1436 = _1434 * (_1398.y + (-0.5));
        float _1437 = _1434 * (_1398.z + (-0.5));
        float _1444 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1445 = _1444 * (_1405.x + (-0.5));
        float _1446 = _1444 * (_1405.y + (-0.5));
        float _1447 = _1444 * (_1405.z + (-0.5));
        float _1454 = exp2((_1412.w + (-0.5)) * 20.0) * 2.0;
        float _1455 = _1454 * (_1412.x + (-0.5));
        float _1456 = _1454 * (_1412.y + (-0.5));
        float _1457 = _1454 * (_1412.z + (-0.5));
        float _1458 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1459 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1460 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1461 = _1425 * 0.5;
        float _1462 = _1435 * 0.5;
        float _1463 = _1445 * 0.5;
        float _1464 = dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463));
        float _1469 = (_1464 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1464);
        float _1477 = (dot(vec3(_613, _614, _615), vec3(_1469 * _1461, _1469 * _1462, _1469 * _1463)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1486 = sqrt(((_1462 * _1462) + (_1461 * _1461)) + (_1463 * _1463)) / (_1458 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1488 = _1487 * 2.0;
        float _1492 = (1.0 - _1487) / (_1487 + 1.0);
        float _4199 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1502 = ((((1.0 - _1493) * (_1488 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1488 + 1.0))) + _1493) * _1458;
        float _1503 = _1426 * 0.5;
        float _1504 = _1436 * 0.5;
        float _1505 = _1446 * 0.5;
        float _1506 = dot(vec3(_1503, _1504, _1505), vec3(_1503, _1504, _1505));
        float _1511 = (_1506 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1506);
        float _1519 = (dot(vec3(_613, _614, _615), vec3(_1511 * _1503, _1511 * _1504, _1511 * _1505)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1528 = sqrt(((_1504 * _1504) + (_1503 * _1503)) + (_1505 * _1505)) / (_1459 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1530 = _1529 * 2.0;
        float _1534 = (1.0 - _1529) / (_1529 + 1.0);
        float _4232 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1544 = ((((1.0 - _1535) * (_1530 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1530 + 1.0))) + _1535) * _1459;
        float _1545 = _1427 * 0.5;
        float _1546 = _1437 * 0.5;
        float _1547 = _1447 * 0.5;
        float _1548 = dot(vec3(_1545, _1546, _1547), vec3(_1545, _1546, _1547));
        float _1553 = (_1548 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1548);
        float _1561 = (dot(vec3(_613, _614, _615), vec3(_1553 * _1545, _1553 * _1546, _1553 * _1547)) + 1.0) * 0.5;
        float _4243 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1570 = sqrt(((_1546 * _1546) + (_1545 * _1545)) + (_1547 * _1547)) / (_1460 + 9.9999997473787516355514526367188e-06);
        float _4254 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1572 = _1571 * 2.0;
        float _1576 = (1.0 - _1571) / (_1571 + 1.0);
        float _4265 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1586 = ((((1.0 - _1577) * (_1572 + 2.0)) * exp2(log2(isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_1572 + 1.0))) + _1577) * _1460;
        _1594 = _1427;
        _1595 = _1426;
        _1596 = _1425;
        _1597 = _1437;
        _1598 = _1436;
        _1599 = _1435;
        _1600 = _1447;
        _1601 = _1446;
        _1602 = _1445;
        _1603 = _1460;
        _1604 = _1459;
        _1605 = _1458;
        _1606 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)));
        _1607 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)));
        _1608 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)));
    }
    else
    {
        _1594 = _1285;
        _1595 = _1285;
        _1596 = _1285;
        _1597 = _1285;
        _1598 = _1285;
        _1599 = _1285;
        _1600 = _1285;
        _1601 = _1285;
        _1602 = _1285;
        _1603 = _1285;
        _1604 = _1285;
        _1605 = _1285;
        _1606 = 0.0;
        _1607 = 0.0;
        _1608 = 0.0;
    }
    float _1618 = (cbModelParam._m0[1u].x * (_1606 - _1297)) + _1297;
    float _1619 = (cbModelParam._m0[1u].x * (_1607 - _1298)) + _1298;
    float _1620 = (cbModelParam._m0[1u].x * (_1608 - _1299)) + _1299;
    float _1641 = fma(_1620, cbSceneParam._m0[89u].z, fma(_1619, cbSceneParam._m0[89u].y, _1618 * cbSceneParam._m0[89u].x));
    float _1644 = fma(_1620, cbSceneParam._m0[90u].z, fma(_1619, cbSceneParam._m0[90u].y, _1618 * cbSceneParam._m0[90u].x));
    float _1647 = fma(_1620, cbSceneParam._m0[91u].z, fma(_1619, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1618));
    float _1662 = _920 * 0.5;
    float _1663 = _921 * 0.5;
    float _1664 = _922 * 0.5;
    float _1665 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1596, _1599, _1602, _1605));
    float _1668 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1595, _1598, _1601, _1604));
    float _1671 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1594, _1597, _1600, _1603));
    float _1702;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1678 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1284, _1288, _1291, _1294));
        float _1682 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1286, _1289, _1292, _1295));
        float _1686 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1287, _1290, _1293, _1296));
        float _1693 = dot(vec4(cbModelParam._m0[39u]), vec4(_1662, _1663, _1664, 1.0));
        _1702 = dot(vec3(isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)), isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)), isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1693) ? 0.0 : (isnan(0.0) ? _1693 : max(0.0, _1693))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1702 = 1.0;
    }
    float _1713;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1704 = dot(vec4(cbModelParam._m0[40u]), vec4(_1662, _1663, _1664, 1.0));
        _1713 = dot(vec3(isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)), isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)), isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1704) ? 0.0 : (isnan(0.0) ? _1704 : max(0.0, _1704))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1713 = 1.0;
    }
    float _1717 = (_1713 * cbModelParam._m0[1u].x) + (_1702 * (1.0 - cbModelParam._m0[1u].x));
    float _1727 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _780);
    float _1728 = isnan(_1727) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1727 : min(cbModelParam._m0[25u].z, _1727));
    float _1808;
    float _1810;
    float _1812;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1775 = fma(_984, cbModelParam._m0[13u].z, fma(_980, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _976)) + cbModelParam._m0[13u].w;
        float _1779 = fma(_984, cbModelParam._m0[14u].z, fma(_980, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _976)) + cbModelParam._m0[14u].w;
        float _1783 = fma(_984, cbModelParam._m0[15u].z, fma(_980, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _976)) + cbModelParam._m0[15u].w;
        float _1786 = fma(_922, cbModelParam._m0[13u].z, fma(_921, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _920));
        float _1789 = fma(_922, cbModelParam._m0[14u].z, fma(_921, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _920));
        float _1792 = fma(_922, cbModelParam._m0[15u].z, fma(_921, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _920));
        float _1820;
        if (_1786 > 0.0)
        {
            _1820 = abs((1.0 - _1775) / _1786);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1775 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1820 = frontier_phi_16_14_ladder;
        }
        float _1995;
        if (_1789 > 0.0)
        {
            _1995 = abs((1.0 - _1779) / _1789);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1779 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1995 = frontier_phi_25_21_ladder;
        }
        float _2290;
        if (_1792 > 0.0)
        {
            _2290 = abs((1.0 - _1783) / _1792);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1783 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2290 = frontier_phi_37_32_ladder;
        }
        float _2292 = isnan(_1995) ? _1820 : (isnan(_1820) ? _1995 : min(_1820, _1995));
        float _2293 = isnan(_2290) ? _2292 : (isnan(_2292) ? _2290 : min(_2292, _2290));
        float _2297 = (_2293 * _1786) + _1775;
        float _2298 = (_2293 * _1789) + _1779;
        float _2299 = (_2293 * _1792) + _1783;
        float _2300 = _2293 * 9.9999997473787516355514526367188e-05;
        float _2302 = (-1.0) - _2300;
        float _2304 = _2300 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2299 > _2304) || ((_2299 < _2302) || ((_2298 > _2304) || ((_2298 < _2302) || ((_2297 < _2302) || (_2297 > _2304))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2444 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2299, cbModelParam._m0[9u].z, fma(_2298, cbModelParam._m0[9u].y, _2297 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2299, cbModelParam._m0[10u].z, fma(_2298, cbModelParam._m0[10u].y, _2297 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2299, cbModelParam._m0[11u].z, fma(_2298, cbModelParam._m0[11u].y, _2297 * cbModelParam._m0[11u].x))), _1728);
            frontier_phi_15_37_ladder = _2444.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2444.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2444.z * cbModelParam._m0[1u].y;
        }
        _1808 = frontier_phi_15_37_ladder_1;
        _1810 = frontier_phi_15_37_ladder;
        _1812 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1796 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_920, _921, _922), _1728);
        _1808 = _1796.x * cbModelParam._m0[1u].y;
        _1810 = _1796.y * cbModelParam._m0[1u].y;
        _1812 = _1796.z * cbModelParam._m0[1u].y;
    }
    float _1816 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _780);
    float _1817 = isnan(_1816) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1816 : min(cbModelParam._m0[25u].w, _1816));
    float _1910;
    float _1912;
    float _1914;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1874 = fma(_984, cbModelParam._m0[21u].z, fma(_980, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _976)) + cbModelParam._m0[21u].w;
        float _1878 = fma(_984, cbModelParam._m0[22u].z, fma(_980, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _976)) + cbModelParam._m0[22u].w;
        float _1882 = fma(_984, cbModelParam._m0[23u].z, fma(_980, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _976)) + cbModelParam._m0[23u].w;
        float _1885 = fma(_922, cbModelParam._m0[21u].z, fma(_921, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _920));
        float _1888 = fma(_922, cbModelParam._m0[22u].z, fma(_921, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _920));
        float _1891 = fma(_922, cbModelParam._m0[23u].z, fma(_921, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _920));
        float _2000;
        if (_1885 > 0.0)
        {
            _2000 = abs((1.0 - _1874) / _1885);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1874 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2000 = frontier_phi_27_23_ladder;
        }
        float _2317;
        if (_1888 > 0.0)
        {
            _2317 = abs((1.0 - _1878) / _1888);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1878 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2317 = frontier_phi_39_34_ladder;
        }
        float _2655;
        if (_1891 > 0.0)
        {
            _2655 = abs((1.0 - _1882) / _1891);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1882 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2655 = frontier_phi_49_46_ladder;
        }
        float _2657 = isnan(_2317) ? _2000 : (isnan(_2000) ? _2317 : min(_2000, _2317));
        float _2658 = isnan(_2655) ? _2657 : (isnan(_2657) ? _2655 : min(_2657, _2655));
        float _2662 = (_2658 * _1885) + _1874;
        float _2663 = (_2658 * _1888) + _1878;
        float _2664 = (_2658 * _1891) + _1882;
        float _2665 = _2658 * 9.9999997473787516355514526367188e-05;
        float _2666 = (-1.0) - _2665;
        float _2668 = _2665 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2664 > _2668) || ((_2664 < _2666) || ((_2663 > _2668) || ((_2663 < _2666) || ((_2662 < _2666) || (_2662 > _2668))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2786 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2664, cbModelParam._m0[17u].z, fma(_2663, cbModelParam._m0[17u].y, _2662 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2664, cbModelParam._m0[18u].z, fma(_2663, cbModelParam._m0[18u].y, _2662 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2664, cbModelParam._m0[19u].z, fma(_2663, cbModelParam._m0[19u].y, _2662 * cbModelParam._m0[19u].x))), _1817);
            frontier_phi_24_49_ladder = _2786.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2786.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2786.x * cbModelParam._m0[1u].z;
        }
        _1910 = frontier_phi_24_49_ladder_2;
        _1912 = frontier_phi_24_49_ladder_1;
        _1914 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1894 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_920, _921, _922), _1817);
        _1910 = _1894.x * cbModelParam._m0[1u].z;
        _1912 = _1894.y * cbModelParam._m0[1u].z;
        _1914 = _1894.z * cbModelParam._m0[1u].z;
    }
    float _1927 = (((_947 * _898) + _948) * _912) * ((cbModelParam._m0[1u].w * (_1910 - _1808)) + _1808);
    float _1929 = (((_947 * _899) + _948) * _912) * ((cbModelParam._m0[1u].w * (_1912 - _1810)) + _1810);
    float _1931 = (((_947 * _900) + _948) * _912) * ((cbModelParam._m0[1u].w * (_1914 - _1812)) + _1812);
    float _1934 = fma(_1931, cbSceneParam._m0[89u].z, fma(_1929, cbSceneParam._m0[89u].y, _1927 * cbSceneParam._m0[89u].x));
    float _1937 = fma(_1931, cbSceneParam._m0[90u].z, fma(_1929, cbSceneParam._m0[90u].y, _1927 * cbSceneParam._m0[90u].x));
    float _1940 = fma(_1931, cbSceneParam._m0[91u].z, fma(_1929, cbSceneParam._m0[91u].y, _1927 * cbSceneParam._m0[91u].x));
    float _1974 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1978 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1982 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1986 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1987 = _1974 / _1986;
    float _1988 = _1978 / _1986;
    float _1989 = _1982 / _1986;
    float _2136;
    float _2137;
    float _2138;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2016 = ((uint(_1989 > cbSceneParam._m0[59u].y) + uint(_1989 > cbSceneParam._m0[59u].x)) + uint(_1989 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2017 = _2016 + 43u;
        uint _2025 = _2016 + 44u;
        uint _2033 = _2016 + 45u;
        uint _2041 = _2016 + 46u;
        float _2052 = fma(_1986, cbSceneParam._m0[_2017].w, fma(_1982, cbSceneParam._m0[_2017].z, fma(_1978, cbSceneParam._m0[_2017].y, _1974 * cbSceneParam._m0[_2017].x)));
        float _2056 = fma(_1986, cbSceneParam._m0[_2025].w, fma(_1982, cbSceneParam._m0[_2025].z, fma(_1978, cbSceneParam._m0[_2025].y, _1974 * cbSceneParam._m0[_2025].x)));
        float _2064 = fma(_1986, cbSceneParam._m0[_2041].w, fma(_1982, cbSceneParam._m0[_2041].z, fma(_1978, cbSceneParam._m0[_2041].y, _1974 * cbSceneParam._m0[_2041].x)));
        float _2069 = cbSceneParam._m0[33u].z * _2064;
        float _2071 = cbSceneParam._m0[33u].w * _2064;
        float _2074 = fma(_1986, cbSceneParam._m0[_2033].w, fma(_1982, cbSceneParam._m0[_2033].z, fma(_1978, cbSceneParam._m0[_2033].y, _1974 * cbSceneParam._m0[_2033].x))) / _2064;
        float _2122 = (cbSceneParam._m0[33u].x - sqrt(((_1988 * _1988) + (_1987 * _1987)) + (_1989 * _1989))) * cbSceneParam._m0[33u].y;
        float _4391 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2129 = (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2069 + _2052) / _2064, (_2071 + _2056) / _2064), _2074), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2071 + _2052) / _2064, (_2056 - _2069) / _2064), _2074), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2052 - _2069) / _2064, (_2056 - _2071) / _2064), _2074), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2052 - _2071) / _2064, (_2069 + _2056) / _2064), _2074), 0.0)).x), vec4(0.25)));
        _2136 = 1.0 - (_2129 * cbSceneParam._m0[34u].x);
        _2137 = 1.0 - (_2129 * cbSceneParam._m0[34u].y);
        _2138 = 1.0 - (_2129 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2136 = 1.0;
        _2137 = 1.0;
        _2138 = 1.0;
    }
    float _2202;
    float _2204;
    float _2206;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2190 = fma(_1986, cbSceneParam._m0[63u].w, fma(_1982, cbSceneParam._m0[63u].z, fma(_1978, cbSceneParam._m0[63u].y, _1974 * cbSceneParam._m0[63u].x)));
        float _2191 = fma(_1986, cbSceneParam._m0[60u].w, fma(_1982, cbSceneParam._m0[60u].z, fma(_1978, cbSceneParam._m0[60u].y, _1974 * cbSceneParam._m0[60u].x))) / _2190;
        float _2192 = fma(_1986, cbSceneParam._m0[61u].w, fma(_1982, cbSceneParam._m0[61u].z, fma(_1978, cbSceneParam._m0[61u].y, _1974 * cbSceneParam._m0[61u].x))) / _2190;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2191 >= cbSceneParam._m0[64u].x) && (_2192 >= cbSceneParam._m0[64u].y)) && (_2191 <= cbSceneParam._m0[64u].z)) && (_2192 <= cbSceneParam._m0[64u].w))
        {
            float _2330 = fma(_1986, cbSceneParam._m0[62u].w, fma(_1982, cbSceneParam._m0[62u].z, fma(_1978, cbSceneParam._m0[62u].y, _1974 * cbSceneParam._m0[62u].x))) / _2190;
            float _2334 = isnan(cbSceneParam._m0[41u].w) ? _2330 : (isnan(_2330) ? cbSceneParam._m0[41u].w : max(_2330, cbSceneParam._m0[41u].w));
            float _2377 = (cbSceneParam._m0[33u].x - sqrt(((_1988 * _1988) + (_1987 * _1987)) + (_1989 * _1989))) * cbSceneParam._m0[33u].y;
            float _4407 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
            float _2384 = (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2191, cbSceneParam._m0[33u].w + _2192), _2334), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2191, _2192 - cbSceneParam._m0[33u].z), _2334), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2191 - cbSceneParam._m0[33u].z, _2192 - cbSceneParam._m0[33u].w), _2334), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2191 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2192), _2334), 0.0)).x), vec4(0.25)));
            float _2388 = 1.0 - (_2384 * cbSceneParam._m0[34u].x);
            float _2389 = 1.0 - (_2384 * cbSceneParam._m0[34u].y);
            float _2390 = 1.0 - (_2384 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2389) ? _2137 : (isnan(_2137) ? _2389 : min(_2137, _2389));
            frontier_phi_36_35_ladder_1 = isnan(_2390) ? _2138 : (isnan(_2138) ? _2390 : min(_2138, _2390));
            frontier_phi_36_35_ladder_2 = isnan(_2388) ? _2136 : (isnan(_2136) ? _2388 : min(_2136, _2388));
        }
        else
        {
            frontier_phi_36_35_ladder = _2137;
            frontier_phi_36_35_ladder_1 = _2138;
            frontier_phi_36_35_ladder_2 = _2136;
        }
        _2202 = frontier_phi_36_35_ladder_2;
        _2204 = frontier_phi_36_35_ladder;
        _2206 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2202 = _2136;
        _2204 = _2137;
        _2206 = _2138;
    }
    uvec4 _2211 = floatBitsToUint(cbInstanceData._m0[_804 + 5u]);
    uint _2213 = _2211.x * 14u;
    uint _2214 = _2213 + 13u;
    float _2221 = _912 + (-1.0);
    float _2226 = (cbLight._m0[_2214].x * _2221) + 1.0;
    float _2227 = (cbLight._m0[_2214].y * _2221) + 1.0;
    float _2228 = (cbLight._m0[_2214].z * _2221) + 1.0;
    float _2229 = (cbLight._m0[_2214].w * _2221) + 1.0;
    uint _2230 = _2213 + 5u;
    float _2236 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
    uint _2240 = _2213 + 4u;
    float _2249 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
    uint _2253 = _2213 | 1u;
    float _2264 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_613, _614, _615));
    float _2267 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_613, _614, _615));
    float _4443 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _4454 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2272 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * 0.3183098733425140380859375;
    float _2274 = (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * 0.3183098733425140380859375;
    float _2281 = ((cbLight._m0[_2230].x * _2236) * _2274) + (((cbLight._m0[_2240].x * _2202) * _2249) * _2272);
    float _2282 = ((_2236 * cbLight._m0[_2230].y) * _2274) + (((cbLight._m0[_2240].y * _2204) * _2249) * _2272);
    float _2283 = ((_2236 * cbLight._m0[_2230].z) * _2274) + (((cbLight._m0[_2240].z * _2206) * _2249) * _2272);
    uvec4 _2287 = floatBitsToUint(cbLight._m0[_2213 + 12u]);
    bool _2289 = _2287.x == 0u;
    float _2391;
    float _2393;
    float _2395;
    if (_2289)
    {
        _2391 = _2281;
        _2393 = _2282;
        _2395 = _2283;
    }
    else
    {
        uint _2399 = _2213 + 6u;
        float _2415 = (dot(vec3(cbLight._m0[_2213 + 2u].xyz), vec3(_613, _614, _615)) * 0.5) + 0.5;
        float _2416 = _2415 * _2415;
        float _4465 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2417 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _2418 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
        _2391 = (((cbLight._m0[_2399].x * 0.3183098733425140380859375) * _2417) * _2418) + _2281;
        _2393 = (((cbLight._m0[_2399].y * 0.3183098733425140380859375) * _2417) * _2418) + _2282;
        _2395 = (((cbLight._m0[_2399].z * 0.3183098733425140380859375) * _2417) * _2418) + _2283;
    }
    bool _2398 = _2287.y == 0u;
    float _2453;
    float _2455;
    float _2457;
    if (_2398)
    {
        _2453 = _2391;
        _2455 = _2393;
        _2457 = _2395;
    }
    else
    {
        uint _2626 = _2213 + 7u;
        float _2642 = (dot(vec3(cbLight._m0[_2213 + 3u].xyz), vec3(_613, _614, _615)) * 0.5) + 0.5;
        float _2643 = _2642 * _2642;
        float _4481 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2644 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _2645 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
        _2453 = (((cbLight._m0[_2626].x * 0.3183098733425140380859375) * _2644) * _2645) + _2391;
        _2455 = (((cbLight._m0[_2626].y * 0.3183098733425140380859375) * _2644) * _2645) + _2393;
        _2457 = (((cbLight._m0[_2626].z * 0.3183098733425140380859375) * _2644) * _2645) + _2395;
    }
    uint _2460 = _2213 + 8u;
    float _2473 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2213].w)) * _780) * 0.949999988079071044921875);
    float _2474 = _2473 * _2473;
    float _2475 = cbLight._m0[_2213].x + _694;
    float _2476 = cbLight._m0[_2213].y + _695;
    float _2477 = cbLight._m0[_2213].z + _696;
    float _2481 = inversesqrt(dot(vec3(_2475, _2476, _2477), vec3(_2475, _2476, _2477)));
    float _2482 = _2481 * _2475;
    float _2483 = _2481 * _2476;
    float _2484 = _2481 * _2477;
    float _2485 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_2213].xyz));
    float _4497 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2488 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
    float _4508 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _2489 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
    float _2490 = dot(vec3(_613, _614, _615), vec3(_2482, _2483, _2484));
    float _4519 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2493 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
    float _2494 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_2482, _2483, _2484));
    float _4530 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2498 = _2474 * _2474;
    float _2502 = ((_2493 * _2493) * (_2498 + (-1.0))) + 1.0;
    float _2510 = exp2(log2(1.0 - (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0)))) * 5.0);
    float _2511 = 0.959999978542327880859375 - _895;
    float _2513 = 0.959999978542327880859375 - _896;
    float _2514 = 0.959999978542327880859375 - _897;
    float _2521 = 1.0 - _2474;
    float _2532 = (0.5 / (((_2489 * ((_2488 * _2521) + _2474)) + 9.9999999392252902907785028219223e-09) + (((_2489 * _2521) + _2474) * _2488))) * _2488;
    float _4541 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2534 = (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * (_2498 / ((_2502 * _2502) * 3.141590118408203125));
    uint _2548 = _2213 + 9u;
    float _2559 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2253].w)) * _780) * 0.949999988079071044921875);
    float _2560 = _2559 * _2559;
    float _2561 = cbLight._m0[_2253].x + _694;
    float _2562 = cbLight._m0[_2253].y + _695;
    float _2563 = cbLight._m0[_2253].z + _696;
    float _2567 = inversesqrt(dot(vec3(_2561, _2562, _2563), vec3(_2561, _2562, _2563)));
    float _2568 = _2567 * _2561;
    float _2569 = _2567 * _2562;
    float _2570 = _2567 * _2563;
    float _2571 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_2253].xyz));
    float _4552 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2574 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
    float _2575 = dot(vec3(_613, _614, _615), vec3(_2568, _2569, _2570));
    float _4563 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
    float _2578 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
    float _2579 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_2568, _2569, _2570));
    float _4574 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
    float _2583 = _2560 * _2560;
    float _2587 = ((_2578 * _2578) * (_2583 + (-1.0))) + 1.0;
    float _2594 = exp2(log2(1.0 - (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0)))) * 5.0);
    float _2601 = 1.0 - _2560;
    float _2611 = (0.5 / (((_2489 * ((_2574 * _2601) + _2560)) + 9.9999999392252902907785028219223e-09) + (((_2489 * _2601) + _2560) * _2574))) * _2574;
    float _4585 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _2613 = (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (_2583 / ((_2587 * _2587) * 3.141590118408203125));
    float _2623 = (((((_2594 * _2511) + _898) * cbLight._m0[_2548].x) * _2613) * _2236) + ((((cbLight._m0[_2460].x * _2202) * ((_2510 * _2511) + _898)) * _2534) * _2249);
    float _2624 = (((((_2594 * _2513) + _899) * cbLight._m0[_2548].y) * _2613) * _2236) + ((((cbLight._m0[_2460].y * _2204) * ((_2510 * _2513) + _899)) * _2534) * _2249);
    float _2625 = (((((_2594 * _2514) + _900) * cbLight._m0[_2548].z) * _2613) * _2236) + ((((cbLight._m0[_2460].z * _2206) * ((_2510 * _2514) + _900)) * _2534) * _2249);
    float _2681;
    float _2683;
    float _2685;
    if (_2289)
    {
        _2681 = _2623;
        _2683 = _2624;
        _2685 = _2625;
    }
    else
    {
        uint _2687 = _2213 + 2u;
        uint _2691 = _2213 + 10u;
        float _2705 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2687].w)) * _780) * 0.949999988079071044921875);
        float _2706 = _2705 * _2705;
        float _2707 = cbLight._m0[_2687].x + _694;
        float _2708 = cbLight._m0[_2687].y + _695;
        float _2709 = cbLight._m0[_2687].z + _696;
        float _2713 = inversesqrt(dot(vec3(_2707, _2708, _2709), vec3(_2707, _2708, _2709)));
        float _2714 = _2713 * _2707;
        float _2715 = _2713 * _2708;
        float _2716 = _2713 * _2709;
        float _2717 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_2687].xyz));
        float _4596 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2720 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _2721 = dot(vec3(_613, _614, _615), vec3(_2714, _2715, _2716));
        float _4607 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2724 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
        float _2725 = dot(vec3(cbLight._m0[_2687].xyz), vec3(_2714, _2715, _2716));
        float _4618 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2729 = _2706 * _2706;
        float _2733 = ((_2724 * _2724) * (_2729 + (-1.0))) + 1.0;
        float _2740 = exp2(log2(1.0 - (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0)))) * 5.0);
        float _2747 = 1.0 - _2706;
        float _2757 = (0.5 / (((_2489 * ((_2720 * _2747) + _2706)) + 9.9999999392252902907785028219223e-09) + (((_2489 * _2747) + _2706) * _2720))) * _2720;
        float _4629 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        float _2759 = (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2729 / ((_2733 * _2733) * 3.141590118408203125));
        float _2760 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
        _2681 = (((((_2740 * _2511) + _898) * cbLight._m0[_2691].x) * _2759) * _2760) + _2623;
        _2683 = (((((_2740 * _2513) + _899) * cbLight._m0[_2691].y) * _2759) * _2760) + _2624;
        _2685 = (((((_2740 * _2514) + _900) * cbLight._m0[_2691].z) * _2759) * _2760) + _2625;
    }
    float _2791;
    float _2793;
    float _2795;
    if (_2398)
    {
        _2791 = _2681;
        _2793 = _2683;
        _2795 = _2685;
    }
    else
    {
        uint _2802 = _2213 + 3u;
        uint _2806 = _2213 + 11u;
        float _2820 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2802].w)) * _780) * 0.949999988079071044921875);
        float _2821 = _2820 * _2820;
        float _2822 = cbLight._m0[_2802].x + _694;
        float _2823 = cbLight._m0[_2802].y + _695;
        float _2824 = cbLight._m0[_2802].z + _696;
        float _2828 = inversesqrt(dot(vec3(_2822, _2823, _2824), vec3(_2822, _2823, _2824)));
        float _2829 = _2828 * _2822;
        float _2830 = _2828 * _2823;
        float _2831 = _2828 * _2824;
        float _2832 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_2802].xyz));
        float _4645 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
        float _2835 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
        float _2836 = dot(vec3(_613, _614, _615), vec3(_2829, _2830, _2831));
        float _4656 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        float _2839 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
        float _2840 = dot(vec3(cbLight._m0[_2802].xyz), vec3(_2829, _2830, _2831));
        float _4667 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        float _2844 = _2821 * _2821;
        float _2848 = ((_2839 * _2839) * (_2844 + (-1.0))) + 1.0;
        float _2855 = exp2(log2(1.0 - (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0)))) * 5.0);
        float _2862 = 1.0 - _2821;
        float _2872 = (0.5 / (((_2489 * ((_2835 * _2862) + _2821)) + 9.9999999392252902907785028219223e-09) + (((_2489 * _2862) + _2821) * _2835))) * _2835;
        float _4678 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
        float _2874 = (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0))) * (_2844 / ((_2848 * _2848) * 3.141590118408203125));
        float _2875 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
        _2791 = (((((_2855 * _2511) + _898) * cbLight._m0[_2806].x) * _2874) * _2875) + _2681;
        _2793 = (((((_2855 * _2513) + _899) * cbLight._m0[_2806].y) * _2874) * _2875) + _2683;
        _2795 = (((((_2855 * _2514) + _900) * cbLight._m0[_2806].z) * _2874) * _2875) + _2685;
    }
    float _2940;
    float _2942;
    float _2944;
    float _2946;
    float _2948;
    float _2950;
    if (_2211.y == 0u)
    {
        uvec4 _2896 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2897 = _2896.x;
        uint _2908 = uint((float(_2896.y) * floor(float(uint(cbSceneParam._m0[85u].y * _703) / _2897))) + floor(float(uint(cbSceneParam._m0[85u].x * _702) / _2897)));
        float _2918 = (log2(_1989 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2919 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
        uint _2922 = uint(isnan(14.0) ? _2919 : (isnan(_2919) ? 14.0 : min(_2919, 14.0)));
        uvec4 _2927 = texelFetch(g_lightClusterGridBuffer, int(((_2922 << 2u) + (_2908 << 6u)) >> 2u));
        uint _2928 = _2927.x;
        uint _2929 = _2896.z;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        float _3020;
        float _3022;
        if (((((1u << ((_2929 >> 4u) & 15u)) + 4294967295u) & _2928) == 0u) || ((_2929 & 240u) == 0u))
        {
            _3012 = 0.0;
            _3014 = 0.0;
            _3016 = 0.0;
            _3018 = 0.0;
            _3020 = 0.0;
            _3022 = 0.0;
        }
        else
        {
            float _3013;
            float _3015;
            float _3017;
            float _3019;
            float _3021;
            float _3023;
            float _3156 = 0.0;
            float _3157 = 0.0;
            float _3158 = 0.0;
            float _3159 = 0.0;
            float _3160 = 0.0;
            float _3161 = 0.0;
            uint _3162 = 0u;
            uint _3171;
            bool _3172;
            for (;;)
            {
                _3171 = texelFetch(g_lightClassification, int((((_2922 << 5u) + (_2908 << 9u)) + (_3162 << 2u)) >> 2u)).x;
                _3172 = _3171 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3172)
                {
                    frontier_phi_68_pred = _3161;
                    frontier_phi_68_pred_1 = _3160;
                    frontier_phi_68_pred_2 = _3159;
                    frontier_phi_68_pred_3 = _3157;
                    frontier_phi_68_pred_4 = _3156;
                    frontier_phi_68_pred_5 = _3158;
                }
                else
                {
                    float _3280;
                    float _3281;
                    float _3282;
                    float _3283;
                    float _3284;
                    float _3285;
                    uint _3286;
                    _3280 = _3156;
                    _3281 = _3157;
                    _3282 = _3158;
                    _3283 = _3159;
                    _3284 = _3160;
                    _3285 = _3161;
                    _3286 = _3171;
                    float _3212;
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    float _3217;
                    for (;;)
                    {
                        uint _3290 = uint(findLSB(_3286)) + (_3162 << 5u);
                        uint _3287 = (_3286 + 4294967295u) & _3286;
                        uint _3292 = _3290 * 48u;
                        vec4 _3306 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3292)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 3u)).x));
                        uint _3312 = (_3290 * 48u) + 4u;
                        vec4 _3325 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3312)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 3u)).x));
                        uint _3331 = (_3290 * 48u) + 8u;
                        vec3 _3342 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3331)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 2u)).x));
                        float _3346 = _3306.x - _1987;
                        float _3347 = _3306.y - _1988;
                        float _3348 = _3306.z - _1989;
                        float _3349 = dot(vec3(_3346, _3347, _3348), vec3(_3346, _3347, _3348));
                        float _3352 = inversesqrt(_3349);
                        float _3353 = _3352 * _3346;
                        float _3354 = _3352 * _3347;
                        float _3355 = _3352 * _3348;
                        float _3356 = dot(vec3(_725, _728, _731), vec3(_3353, _3354, _3355));
                        float _3361 = 1.0 - (_3349 * _3306.w);
                        float _4704 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                        float _3362 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                        float _3363 = sqrt(_3349) * _3325.w;
                        float _3366 = 1.39999997615814208984375 / (_3363 + 1.39999997615814208984375);
                        float _3367 = _3366 * _3366;
                        float _3370 = ((1.0 - _3367) * _3356) + _3367;
                        float _3373 = _3363 * _3363;
                        float _3377 = ((isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0))) * _3362) / ((_3373 * 0.699999988079071044921875) + 1.0);
                        float _3381 = (-0.0) - _1987;
                        float _3382 = (-0.0) - _1988;
                        float _3383 = (-0.0) - _1989;
                        float _3387 = inversesqrt(dot(vec3(_3381, _3382, _3383), vec3(_3381, _3382, _3383)));
                        float _3388 = _3387 * _3381;
                        float _3389 = _3387 * _3382;
                        float _3390 = _3387 * _3383;
                        float _3397 = exp2(log2(1.0 / ((_3373 * 3.5) + 5.0)) * 0.25);
                        float _3398 = 1.0 - _928;
                        float _3405 = sqrt(1.0 - ((1.0 - (_3398 * _3398)) * (1.0 - (_3397 * _3397))));
                        float _3406 = _3405 * _3405;
                        float _3407 = _3406 * _3406;
                        float _3408 = _3388 + _3353;
                        float _3409 = _3389 + _3354;
                        float _3410 = _3390 + _3355;
                        float _3414 = inversesqrt(dot(vec3(_3408, _3409, _3410), vec3(_3408, _3409, _3410)));
                        float _3418 = dot(vec3(_725, _728, _731), vec3(_3388, _3389, _3390));
                        float _4720 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                        float _3421 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                        float _3422 = dot(vec3(_725, _728, _731), vec3(_3414 * _3408, _3414 * _3409, _3414 * _3410));
                        float _4731 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                        float _3425 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                        float _3429 = ((_3425 * _3425) * (_3407 + (-1.0))) + 1.0;
                        float _3430 = _3366 * _3406;
                        float _3431 = _3430 * _3430;
                        float _3434 = ((1.0 - _3431) * _3356) + _3431;
                        float _4742 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                        float _3435 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                        float _3436 = 1.0 - _3406;
                        float _3446 = (0.5 / (((_3435 * ((_3421 * _3436) + _3406)) + 9.9999999392252902907785028219223e-09) + (((_3435 * _3436) + _3406) * _3421))) * _3435;
                        float _4753 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                        float _3457 = (((_3407 * 3.1415927410125732421875) * (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0)))) / ((_3429 * _3429) * ((_3373 * 2.1991131305694580078125) + 3.141590118408203125))) * _3362;
                        _3215 = (_3377 * _3325.x) + _3283;
                        _3216 = (_3377 * _3325.y) + _3284;
                        _3217 = (_3377 * _3325.z) + _3285;
                        _3212 = (_3457 * _3342.x) + _3280;
                        _3213 = (_3457 * _3342.y) + _3281;
                        _3214 = (_3457 * _3342.z) + _3282;
                        if (_3287 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3280 = _3212;
                            _3281 = _3213;
                            _3282 = _3214;
                            _3283 = _3215;
                            _3284 = _3216;
                            _3285 = _3217;
                            _3286 = _3287;
                        }
                    }
                    frontier_phi_68_pred = _3217;
                    frontier_phi_68_pred_1 = _3216;
                    frontier_phi_68_pred_2 = _3215;
                    frontier_phi_68_pred_3 = _3213;
                    frontier_phi_68_pred_4 = _3212;
                    frontier_phi_68_pred_5 = _3214;
                }
                _3023 = frontier_phi_68_pred;
                _3021 = frontier_phi_68_pred_1;
                _3019 = frontier_phi_68_pred_2;
                _3015 = frontier_phi_68_pred_3;
                _3013 = frontier_phi_68_pred_4;
                _3017 = frontier_phi_68_pred_5;
                uint _3163 = _3162 + 1u;
                if (_3163 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3156 = _3013;
                    _3157 = _3015;
                    _3158 = _3017;
                    _3159 = _3019;
                    _3160 = _3021;
                    _3161 = _3023;
                    _3162 = _3163;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3012 = _3013;
            _3014 = _3015;
            _3016 = _3017;
            _3018 = _3019;
            _3020 = _3021;
            _3022 = _3023;
        }
        uvec4 _3026 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3027 = _3026.z;
        uint _3029 = (_3027 >> 8u) & 15u;
        float _3124;
        float _3126;
        float _3128;
        float _3130;
        float _3132;
        float _3134;
        if (((4294967295u << _3029) & _2928) == 0u)
        {
            _3124 = _3012;
            _3126 = _3014;
            _3128 = _3016;
            _3130 = _3018;
            _3132 = _3020;
            _3134 = _3022;
        }
        else
        {
            float _3149 = inversesqrt(dot(vec3(_1987, _1988, _1989), vec3(_1987, _1988, _1989)));
            float _3150 = _3149 * _1987;
            float _3151 = _3149 * _1988;
            float _3152 = _3149 * _1989;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3029 < ((_3027 >> 12u) & 15u))
            {
                float _3125;
                float _3127;
                float _3129;
                float _3131;
                float _3133;
                float _3135;
                float _3263 = _3012;
                float _3264 = _3014;
                float _3265 = _3016;
                float _3266 = _3018;
                float _3267 = _3020;
                float _3268 = _3022;
                uint _3269 = _3029;
                uint _3278;
                bool _3279;
                for (;;)
                {
                    _3278 = texelFetch(g_lightClassification, int((((_2922 << 5u) + (_2908 << 9u)) + (_3269 << 2u)) >> 2u)).x;
                    _3279 = _3278 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3279)
                    {
                        frontier_phi_74_pred = _3265;
                        frontier_phi_74_pred_1 = _3264;
                        frontier_phi_74_pred_2 = _3263;
                        frontier_phi_74_pred_3 = _3268;
                        frontier_phi_74_pred_4 = _3267;
                        frontier_phi_74_pred_5 = _3266;
                    }
                    else
                    {
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3757;
                        float _3758;
                        float _3759;
                        float _3760;
                        float _3761;
                        float _3762;
                        float _3475 = _3263;
                        float _3476 = _3264;
                        float _3477 = _3265;
                        float _3478 = _3266;
                        float _3479 = _3267;
                        float _3480 = _3268;
                        uint _3481 = _3278;
                        uint _3482;
                        vec4 _3507;
                        float _3508;
                        vec4 _3523;
                        vec3 _3535;
                        vec4 _3550;
                        vec4 _3566;
                        float _3613;
                        bool _3614;
                        for (;;)
                        {
                            uint _3492 = ((_3269 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3481));
                            _3482 = (_3481 + 4294967295u) & _3481;
                            uint _3494 = _3492 * 40u;
                            _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            _3508 = _3507.w;
                            uint _3510 = (_3492 * 40u) + 4u;
                            _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            uint _3525 = (_3492 * 40u) + 8u;
                            _3535 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x));
                            uint _3537 = (_3492 * 40u) + 16u;
                            _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            uint _3553 = (_3492 * 40u) + 20u;
                            _3566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 3u)).x));
                            uint _3569 = (_3492 * 40u) + 24u;
                            vec4 _3582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 3u)).x));
                            uint _3588 = (_3492 * 40u) + 28u;
                            vec4 _3601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 3u)).x));
                            _3613 = fma(_1989, _3601.z, fma(_1988, _3601.y, _3601.x * _1987)) + _3601.w;
                            _3614 = !((fma(_1989, _3582.z, fma(_1988, _3582.y, _3582.x * _1987)) + _3582.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3614)
                            {
                                float _3641 = _3507.x - _1987;
                                float _3642 = _3507.y - _1988;
                                float _3643 = _3507.z - _1989;
                                float _3644 = dot(vec3(_3641, _3642, _3643), vec3(_3641, _3642, _3643));
                                float _3647 = inversesqrt(_3644);
                                float _3648 = _3647 * _3641;
                                float _3649 = _3647 * _3642;
                                float _3650 = _3647 * _3643;
                                float _3654 = 1.0 - (_3644 / (_3508 * _3508));
                                float _4764 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3655 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                                float _3659 = sqrt(_3644) * _3523.w;
                                float _3661 = 1.39999997615814208984375 / (_3659 + 1.39999997615814208984375);
                                float _3662 = _3661 * _3661;
                                float _3665 = ((1.0 - _3662) * dot(vec3(_3648, _3649, _3650), vec3(_725, _728, _731))) + _3662;
                                float _3668 = _3659 * _3659;
                                float _3672 = (fma(_1989, _3550.z, fma(_1988, _3550.y, _3550.x * _1987)) + _3550.w) / _3613;
                                float _3673 = (fma(_1989, _3566.z, fma(_1988, _3566.y, _3566.x * _1987)) + _3566.w) / _3613;
                                float _3677 = 1.0 - dot(vec2(_3672, _3673), vec2(_3672, _3673));
                                float _4780 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                                float _3678 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                                float _3679 = _3678 * (((isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0))) * _3655) / ((_3668 * 0.699999988079071044921875) + 1.0));
                                float _3691 = exp2(log2(1.0 / ((_3668 * 3.5) + 5.0)) * 0.25);
                                float _3692 = 1.0 - _928;
                                float _3699 = sqrt(1.0 - ((1.0 - (_3692 * _3692)) * (1.0 - (_3691 * _3691))));
                                float _3700 = _3699 * _3699;
                                float _3701 = _3700 * _3700;
                                float _3702 = _3648 - _3150;
                                float _3703 = _3649 - _3151;
                                float _3704 = _3650 - _3152;
                                float _3708 = inversesqrt(dot(vec3(_3702, _3703, _3704), vec3(_3702, _3703, _3704)));
                                float _3712 = dot(vec3(_725, _728, _731), vec3((-0.0) - _3150, (-0.0) - _3151, (-0.0) - _3152));
                                float _4791 = isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0));
                                float _3715 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                                float _3716 = dot(vec3(_725, _728, _731), vec3(_3708 * _3702, _3708 * _3703, _3708 * _3704));
                                float _4802 = isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0));
                                float _3719 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                                float _3723 = ((_3719 * _3719) * (_3701 + (-1.0))) + 1.0;
                                float _3724 = _3661 * _3700;
                                float _3725 = _3724 * _3724;
                                float _3731 = ((1.0 - _3725) * dot(vec3(_725, _728, _731), vec3(_3648, _3649, _3650))) + _3725;
                                float _4813 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3732 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
                                float _3733 = 1.0 - _3700;
                                float _3743 = (0.5 / (((_3732 * ((_3715 * _3733) + _3700)) + 9.9999999392252902907785028219223e-09) + (((_3732 * _3733) + _3700) * _3715))) * _3732;
                                float _4824 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                                float _3753 = (_3678 * _3655) * (((_3701 * 3.1415927410125732421875) * (isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0)))) / ((_3723 * _3723) * ((_3668 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3753 * _3535.z;
                                frontier_phi_80_pred_1 = _3753 * _3535.y;
                                frontier_phi_80_pred_2 = _3753 * _3535.x;
                                frontier_phi_80_pred_3 = _3679 * _3523.z;
                                frontier_phi_80_pred_4 = _3679 * _3523.y;
                                frontier_phi_80_pred_5 = _3679 * _3523.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3759 = frontier_phi_80_pred;
                            _3758 = frontier_phi_80_pred_1;
                            _3757 = frontier_phi_80_pred_2;
                            _3762 = frontier_phi_80_pred_3;
                            _3761 = frontier_phi_80_pred_4;
                            _3760 = frontier_phi_80_pred_5;
                            _3465 = _3760 + _3478;
                            _3466 = _3761 + _3479;
                            _3467 = _3762 + _3480;
                            _3462 = _3757 + _3475;
                            _3463 = _3758 + _3476;
                            _3464 = _3759 + _3477;
                            if (_3482 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3475 = _3462;
                                _3476 = _3463;
                                _3477 = _3464;
                                _3478 = _3465;
                                _3479 = _3466;
                                _3480 = _3467;
                                _3481 = _3482;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3464;
                        frontier_phi_74_pred_1 = _3463;
                        frontier_phi_74_pred_2 = _3462;
                        frontier_phi_74_pred_3 = _3467;
                        frontier_phi_74_pred_4 = _3466;
                        frontier_phi_74_pred_5 = _3465;
                    }
                    _3129 = frontier_phi_74_pred;
                    _3127 = frontier_phi_74_pred_1;
                    _3125 = frontier_phi_74_pred_2;
                    _3135 = frontier_phi_74_pred_3;
                    _3133 = frontier_phi_74_pred_4;
                    _3131 = frontier_phi_74_pred_5;
                    uint _3270 = _3269 + 1u;
                    if (_3270 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3263 = _3125;
                        _3264 = _3127;
                        _3265 = _3129;
                        _3266 = _3131;
                        _3267 = _3133;
                        _3268 = _3135;
                        _3269 = _3270;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3133;
                frontier_phi_62_63_ladder_1 = _3131;
                frontier_phi_62_63_ladder_2 = _3129;
                frontier_phi_62_63_ladder_3 = _3135;
                frontier_phi_62_63_ladder_4 = _3127;
                frontier_phi_62_63_ladder_5 = _3125;
            }
            else
            {
                frontier_phi_62_63_ladder = _3020;
                frontier_phi_62_63_ladder_1 = _3018;
                frontier_phi_62_63_ladder_2 = _3016;
                frontier_phi_62_63_ladder_3 = _3022;
                frontier_phi_62_63_ladder_4 = _3014;
                frontier_phi_62_63_ladder_5 = _3012;
            }
            _3124 = frontier_phi_62_63_ladder_5;
            _3126 = frontier_phi_62_63_ladder_4;
            _3128 = frontier_phi_62_63_ladder_2;
            _3130 = frontier_phi_62_63_ladder_1;
            _3132 = frontier_phi_62_63_ladder;
            _3134 = frontier_phi_62_63_ladder_3;
        }
        float _3139 = isnan(1.0) ? _912 : (isnan(_912) ? 1.0 : min(_912, 1.0));
        _2940 = (_3139 * _3130) + _2453;
        _2942 = (_3139 * _3132) + _2455;
        _2944 = (_3139 * _3134) + _2457;
        _2946 = ((_3124 * _898) * _3139) + _2791;
        _2948 = ((_3126 * _899) * _3139) + _2793;
        _2950 = ((_3128 * _900) * _3139) + _2795;
    }
    else
    {
        _2940 = _2453;
        _2942 = _2455;
        _2944 = _2457;
        _2946 = _2791;
        _2948 = _2793;
        _2950 = _2795;
    }
    float _4840 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _4851 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _4862 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _4873 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _2968 = ((isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0))) * (_2940 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _912))) + ((_2946 + ((isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0))) * _1717)) * cbPerFrame._m0[3u].x);
    float _2969 = ((isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0))) * (_2942 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _912))) + ((_2948 + ((isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))) * _1717)) * cbPerFrame._m0[3u].x);
    float _2970 = ((isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0))) * (_2944 + ((isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))) * _912))) + ((_2950 + ((isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))) * _1717)) * cbPerFrame._m0[3u].x);
    float _2978 = cbInstanceData._m0[_804 + 6u].w * (isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0)));
    float _2983 = _702 / cbSceneParam._m0[86u].x;
    float _2984 = _703 / cbSceneParam._m0[86u].y;
    vec4 _2998 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2983, _2984, (log2((isnan(cbSceneParam._m0[77u].w) ? _637 : (isnan(_637) ? cbSceneParam._m0[77u].w : min(_637, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3000 = _2998.x;
    float _3001 = _2998.y;
    float _3002 = _2998.z;
    float _3003 = _2998.w;
    float _3074;
    float _3076;
    float _3078;
    float _3080;
    if (_637 > cbSceneParam._m0[78u].w)
    {
        float _3037 = isnan(_637) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _637 : min(cbSceneParam._m0[80u].w, _637));
        float _3038 = _3037 / _637;
        float _3049 = _3038 * _687;
        float _3050 = _688 * _3038;
        float _3051 = (-0.0) - _3050;
        float _3052 = _3038 * _689;
        float _3054 = (cbSceneParam._m0[77u].w * _3051) / _3037;
        float _3055 = _3054 + cbSceneParam._m0[79u].w;
        float _3056 = cbSceneParam._m0[79u].w - _3050;
        float _3062 = sqrt(((_3049 * _3049) + (_3050 * _3050)) + (_3052 * _3052));
        float _3065 = (1.0 - (cbSceneParam._m0[77u].w / _3037)) * _3062;
        float _3070 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3072 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3225;
        if (abs((_3051 - _3054) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3225 = ((((_3055 > 0.0) ? exp2(_3070 * _3055) : (2.0 - exp2(_3072 * _3055))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3065;
        }
        else
        {
            float _3185 = 1.0 / cbSceneParam._m0[80u].x;
            float _3186 = isnan(_3056) ? _3055 : (isnan(_3055) ? _3056 : max(_3055, _3056));
            float _3187 = isnan(_3056) ? _3055 : (isnan(_3055) ? _3056 : min(_3055, _3056));
            float _3196 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : min(_3186, 0.0));
            float _3197 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : min(_3187, 0.0));
            _3225 = ((abs(_3062 / _3051) * cbSceneParam._m0[80u].y) * ((((_3196 - _3197) * 2.0) - ((exp2(_3070 * (isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0)))) - exp2(_3070 * (isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0))))) * _3185)) - ((exp2(_3072 * _3196) - exp2(_3072 * _3197)) * _3185))) + (_3065 * cbSceneParam._m0[80u].z);
        }
        vec4 _3227 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2983, _2984, 1.0), 0.0);
        float _3236 = exp2((_3225 * (-1.44269502162933349609375)) * (1.0 - _3227.w));
        float _3237 = log2(_3236);
        float _3253 = log2(_3003);
        _3074 = (exp2(_3253 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3237 * cbSceneParam._m0[78u].x)) * _3227.x) / cbSceneParam._m0[78u].x)) + _3000;
        _3076 = (exp2(_3253 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3237 * cbSceneParam._m0[78u].y)) * _3227.y) / cbSceneParam._m0[78u].y)) + _3001;
        _3078 = (exp2(_3253 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3237 * cbSceneParam._m0[78u].z)) * _3227.z) / cbSceneParam._m0[78u].z)) + _3002;
        _3080 = _3236 * _3003;
    }
    else
    {
        _3074 = _3000;
        _3076 = _3001;
        _3078 = _3002;
        _3080 = _3003;
    }
    float _3092 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3093 = _3092 == 3.0;
    float _3094 = log2(_3080);
    float _3101 = exp2(_3094 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0)));
    float _3102 = exp2(_3094 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0)));
    float _3103 = exp2(_3094 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0)));
    float _3112 = (_3092 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3112 * (_3093 ? _3101 : (_3101 + (cbSceneParam._m0[72u].w * _3074)));
    SV_Target.y = _3112 * (_3093 ? _3102 : (_3102 + (cbSceneParam._m0[72u].w * _3076)));
    SV_Target.z = _3112 * (_3093 ? _3103 : (_3103 + (cbSceneParam._m0[72u].w * _3078)));
    SV_Target.w = _2978;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2978;
}


