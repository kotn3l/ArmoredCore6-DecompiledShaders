#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1330;
float _4001;
float _4002;
float _4003;
float _4004;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = _227 * NORMAL.x;
    float _229 = _227 * NORMAL.y;
    float _230 = _227 * NORMAL.z;
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242;
    float _243;
    float _244;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
        _244 = (-0.0) - _230;
    }
    else
    {
        _242 = _228;
        _243 = _229;
        _244 = _230;
    }
    vec4 _258 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _263 = _258.z;
    float _264 = _258.w;
    float _270 = exp2(log2(_263 * 22.0) * 260.0);
    float _271 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _272 = isnan(1.0) ? _271 : (isnan(_271) ? 1.0 : min(_271, 1.0));
    vec4 _286 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _297 = cbMtdParam._m0[10u].x * _286.x;
    float _298 = cbMtdParam._m0[10u].y * _286.y;
    float _299 = cbMtdParam._m0[10u].z * _286.z;
    vec4 _311 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _332 = (((cbMtdParam._m0[9u].x * _311.x) - _297) * _272) + _297;
    float _333 = (((cbMtdParam._m0[9u].y * _311.y) - _298) * _272) + _298;
    float _334 = (((cbMtdParam._m0[9u].z * _311.z) - _299) * _272) + _299;
    float _339 = exp2(log2(1.0 - _264) * 8.0);
    vec4 _351 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _376 = exp2(log2(_264) * 8.0);
    vec4 _389 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    vec4 _414 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _422 = (((((cbMtdParam._m0[12u].x * _351.x) - _332) * _339) + _332) * 4.55000019073486328125) * _414.x;
    float _424 = (((((cbMtdParam._m0[12u].y * _351.y) - _333) * _339) + _333) * 4.55000019073486328125) * _414.y;
    float _426 = (((((cbMtdParam._m0[12u].z * _351.z) - _334) * _339) + _334) * 4.55000019073486328125) * _414.z;
    float _433 = (((cbMtdParam._m0[11u].x * _389.x) - _422) * _376) + _422;
    float _434 = (((cbMtdParam._m0[11u].y * _389.y) - _424) * _376) + _424;
    float _435 = (((cbMtdParam._m0[11u].z * _389.z) - _426) * _376) + _426;
    float _436 = _414.w * _311.w;
    float _464 = (((texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _272) + cbMtdParam._m0[15u].y;
    float _467 = ((cbMtdParam._m0[14u].y - _464) * _339) + _464;
    float _471 = ((cbMtdParam._m0[15u].x - _467) * _376) + _467;
    vec4 _484 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _486 = _484.x;
    float _487 = _484.y;
    float _493 = cbMtdParam._m0[13u].y + _484.z;
    vec4 _505 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _514 = (((_505.z - _493) + cbMtdParam._m0[13u].x) * _272) + _493;
    vec4 _527 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _548 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _561 = (((_272 * (_263 + (-0.5))) + 0.5) * 2.0) * ((((_527.z - _514) + cbMtdParam._m0[14u].x) * _339) + _514);
    float _565 = (((_548.z - _561) + cbMtdParam._m0[13u].w) * _376) + _561;
    float _569 = (_258.x * 2.0) + (-1.0);
    float _571 = (_258.y * 2.0) + (-1.0);
    float _572 = dot(vec2(_569, _571), vec2(_569, _571));
    float _4023 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _577 = sqrt(1.0 - (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))));
    float _582 = ((_505.x - _486) * _272) + _486;
    float _583 = ((_505.y - _487) * _272) + _487;
    float _588 = ((_527.x - _582) * _339) + _582;
    float _589 = ((_527.y - _583) * _339) + _583;
    float _602 = ((((((_548.x - _588) * _376) + _588) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _569;
    float _603 = ((((((_548.y - _589) * _376) + _589) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _571;
    float _606 = fma(_577, _242, fma(_603, _234 * TANGENT.x, (_220 * _212) * _602));
    float _609 = fma(_577, _243, fma(_603, _234 * TANGENT.y, (_220 * _213) * _602));
    float _612 = fma(_577, _244, fma(_603, _234 * TANGENT.z, (_220 * _214) * _602));
    float _616 = inversesqrt(dot(vec3(_606, _609, _612), vec3(_606, _609, _612)));
    float _617 = _616 * _606;
    float _618 = _616 * _609;
    float _619 = _616 * _612;
    float _4034 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _620 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _4045 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _621 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _4056 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _622 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _4067 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _623 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _4078 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _624 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _4089 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _625 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _641 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _681 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _691 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _681);
    float _692 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _681);
    float _693 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _681);
    float _697 = inversesqrt(dot(vec3(_691, _692, _693), vec3(_691, _692, _693)));
    float _698 = _691 * _697;
    float _699 = _692 * _697;
    float _700 = _693 * _697;
    vec4 _705 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _707 = _705.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1011 = sqrt(((_691 * _691) + (_692 * _692)) + (_693 * _693));
        float _1017 = (cbMatDynParam._m0[5u].x * _1011) + cbMatDynParam._m0[5u].y;
        float _4100 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1022 = (cbMatDynParam._m0[5u].z * _1011) + cbMatDynParam._m0[5u].w;
        float _4111 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) - _1018)) + _1018) < ((_707 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _718 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _719 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _721 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _723 = _721.w;
    float _741 = fma(_619, cbSceneParam._m0[5u].z, fma(_618, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _617));
    float _744 = fma(_619, cbSceneParam._m0[6u].z, fma(_618, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _617));
    float _747 = fma(_619, cbSceneParam._m0[7u].z, fma(_618, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _617));
    vec4 _749 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _751 = _749.x;
    float _763 = (((_749.y - _621) + (_749.w * _621)) * cbMtdParam._m0[3u].x) + _621;
    vec4 _764 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _780 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_751 * _751)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _764.z;
    float _788 = (((cbMatDynParam._m0[15u].x - _625) * cbMatDynParam._m0[15u].w) * _780) + _625;
    float _796 = ((_780 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _763)) + _763;
    uint _820 = uint(roundEven(NORMAL.w)) * 13u;
    uint _821 = _820 + 9u;
    uint _822 = _821 + uint(cbMatDynParam._m0[0u].w);
    float _828 = (cbMtdParam._m0[0u].x * _622) * cbInstanceData._m0[_822].x;
    float _829 = (cbMtdParam._m0[0u].y * _623) * cbInstanceData._m0[_822].y;
    float _830 = (cbMtdParam._m0[0u].z * _624) * cbInstanceData._m0[_822].z;
    float _4122 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _831 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _4133 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _832 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _4144 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _833 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    vec4 _834 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _839 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _850 = (((_839.x - _788) + (_839.w * _788)) * cbMtdParam._m0[3u].x) + _788;
    float _863 = (cbMtdParam._m0[3u].x * (((_831 * _723) - _831) + _834.x)) + _831;
    float _864 = (cbMtdParam._m0[3u].x * (((_832 * _723) - _832) + _834.y)) + _832;
    float _865 = (cbMtdParam._m0[3u].x * (((_833 * _723) - _833) + _834.z)) + _833;
    float _879 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_788 * (_622 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_788 * (_623 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_788 * (_624 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _883 = _879 * cbMatDynParam._m0[13u].w;
    float _893 = (_883 * (cbMatDynParam._m0[13u].x - _863)) + _863;
    float _894 = (_883 * (cbMatDynParam._m0[13u].y - _864)) + _864;
    float _895 = (_883 * (cbMatDynParam._m0[13u].z - _865)) + _865;
    float _903 = ((_879 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _850)) + _850;
    float _904 = 1.0 - _903;
    float _905 = _904 * _893;
    float _906 = _904 * _894;
    float _907 = _904 * _895;
    float _911 = (_893 + (-0.039999999105930328369140625)) * _903;
    float _912 = (_894 + (-0.039999999105930328369140625)) * _903;
    float _913 = (_895 + (-0.039999999105930328369140625)) * _903;
    float _914 = _911 + 0.039999999105930328369140625;
    float _915 = _912 + 0.039999999105930328369140625;
    float _916 = _913 + 0.039999999105930328369140625;
    vec4 _925 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _718, cbSceneParam._m0[86u].y * _719));
    float _928 = _925.x * TEXCOORD_4;
    float _929 = dot(vec3(_617, _618, _619), vec3(_698, _699, _700));
    float _932 = _929 * 2.0;
    float _936 = (_932 * _617) - _698;
    float _937 = (_932 * _618) - _699;
    float _938 = (_932 * _619) - _700;
    float _942 = abs(dot(vec3(_698, _699, _700), vec3(_617, _618, _619)));
    float _4155 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _944 = sqrt(_796);
    float _957 = exp2((_944 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_944 * 3.0));
    float _963 = (1.0 - _957) * ((_944 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _964 = _957 * _944;
    float _992 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _996 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1000 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1329;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1056 = fma(_1000, cbModelParam._m0[26u].z, fma(_996, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _992));
        float _1060 = fma(_1000, cbModelParam._m0[27u].z, fma(_996, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _992));
        float _1064 = fma(_1000, cbModelParam._m0[28u].z, fma(_996, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _992));
        float _1087 = _992 + _617;
        float _1088 = _996 + _618;
        float _1089 = _1000 + _619;
        float _1099 = fma(_1089, cbModelParam._m0[26u].z, fma(_1088, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1087)) - _1056;
        float _1100 = fma(_1089, cbModelParam._m0[27u].z, fma(_1088, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1087)) - _1060;
        float _1101 = fma(_1089, cbModelParam._m0[28u].z, fma(_1088, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1087)) - _1064;
        float _1105 = inversesqrt(dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101)));
        float _1118 = ((_1105 * _1099) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1056 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1119 = ((_1105 * _1100) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1060 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1120 = ((_1105 * _1101) / cbModelParam._m0[34u].z) + ((((((_1064 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        float _1157 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1123.x + (-0.5));
        float _1159 = _1157 * (_1123.y + (-0.5));
        float _1160 = _1157 * (_1123.z + (-0.5));
        float _1167 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1130.x + (-0.5));
        float _1169 = _1167 * (_1130.y + (-0.5));
        float _1170 = _1167 * (_1130.z + (-0.5));
        float _1177 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1137.x + (-0.5));
        float _1179 = _1177 * (_1137.y + (-0.5));
        float _1180 = _1177 * (_1137.z + (-0.5));
        float _1187 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1144.x + (-0.5));
        float _1189 = _1187 * (_1144.y + (-0.5));
        float _1190 = _1187 * (_1144.z + (-0.5));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = _1158 * 0.5;
        float _1195 = _1168 * 0.5;
        float _1196 = _1178 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1211 = (dot(vec3(_617, _618, _619), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _4181 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1221 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _4192 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _4203 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_1223 + 1.0))) + _1228) * _1191;
        float _1238 = _1159 * 0.5;
        float _1239 = _1169 * 0.5;
        float _1240 = _1179 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1254 = (dot(vec3(_617, _618, _619), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _4214 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1263 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _4225 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _4236 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_1265 + 1.0))) + _1270) * _1192;
        float _1280 = _1160 * 0.5;
        float _1281 = _1170 * 0.5;
        float _1282 = _1180 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1296 = (dot(vec3(_617, _618, _619), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _4247 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1305 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _4258 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _4269 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_1307 + 1.0))) + _1312) * _1193;
        _1329 = _1160;
        _1331 = _1159;
        _1332 = _1158;
        _1333 = _1170;
        _1334 = _1169;
        _1335 = _1168;
        _1336 = _1180;
        _1337 = _1179;
        _1338 = _1178;
        _1339 = _1193;
        _1340 = _1192;
        _1341 = _1191;
        _1342 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
        _1343 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
        _1344 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
    }
    else
    {
        _1329 = _1330;
        _1331 = _1330;
        _1332 = _1330;
        _1333 = _1330;
        _1334 = _1330;
        _1335 = _1330;
        _1336 = _1330;
        _1337 = _1330;
        _1338 = _1330;
        _1339 = _1330;
        _1340 = _1330;
        _1341 = _1330;
        _1342 = 0.0;
        _1343 = 0.0;
        _1344 = 0.0;
    }
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1373 = fma(_1000, cbModelParam._m0[30u].z, fma(_996, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _992));
        float _1377 = fma(_1000, cbModelParam._m0[31u].z, fma(_996, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _992));
        float _1381 = fma(_1000, cbModelParam._m0[32u].z, fma(_996, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _992));
        float _1404 = _992 + _617;
        float _1405 = _996 + _618;
        float _1406 = _1000 + _619;
        float _1416 = fma(_1406, cbModelParam._m0[30u].z, fma(_1405, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1404)) - _1373;
        float _1417 = fma(_1406, cbModelParam._m0[31u].z, fma(_1405, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1404)) - _1377;
        float _1418 = fma(_1406, cbModelParam._m0[32u].z, fma(_1405, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1404)) - _1381;
        float _1422 = inversesqrt(dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418)));
        float _1435 = ((_1422 * _1416) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1373 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1436 = ((_1422 * _1417) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1377 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1437 = ((_1422 * _1418) / cbModelParam._m0[35u].z) + ((((((_1381 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1439 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        float _1472 = exp2((_1439.w + (-0.5)) * 20.0) * 2.0;
        float _1473 = _1472 * (_1439.x + (-0.5));
        float _1474 = _1472 * (_1439.y + (-0.5));
        float _1475 = _1472 * (_1439.z + (-0.5));
        float _1482 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1483 = _1482 * (_1446.x + (-0.5));
        float _1484 = _1482 * (_1446.y + (-0.5));
        float _1485 = _1482 * (_1446.z + (-0.5));
        float _1492 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1493 = _1492 * (_1453.x + (-0.5));
        float _1494 = _1492 * (_1453.y + (-0.5));
        float _1495 = _1492 * (_1453.z + (-0.5));
        float _1502 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1503 = _1502 * (_1460.x + (-0.5));
        float _1504 = _1502 * (_1460.y + (-0.5));
        float _1505 = _1502 * (_1460.z + (-0.5));
        float _1506 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1507 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1508 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1509 = _1473 * 0.5;
        float _1510 = _1483 * 0.5;
        float _1511 = _1493 * 0.5;
        float _1512 = dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511));
        float _1517 = (_1512 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1512);
        float _1525 = (dot(vec3(_617, _618, _619), vec3(_1517 * _1509, _1517 * _1510, _1517 * _1511)) + 1.0) * 0.5;
        float _4310 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1534 = sqrt(((_1510 * _1510) + (_1509 * _1509)) + (_1511 * _1511)) / (_1506 + 9.9999997473787516355514526367188e-06);
        float _4321 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1536 = _1535 * 2.0;
        float _1540 = (1.0 - _1535) / (_1535 + 1.0);
        float _4332 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1550 = ((((1.0 - _1541) * (_1536 + 2.0)) * exp2(log2(isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_1536 + 1.0))) + _1541) * _1506;
        float _1551 = _1474 * 0.5;
        float _1552 = _1484 * 0.5;
        float _1553 = _1494 * 0.5;
        float _1554 = dot(vec3(_1551, _1552, _1553), vec3(_1551, _1552, _1553));
        float _1559 = (_1554 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1554);
        float _1567 = (dot(vec3(_617, _618, _619), vec3(_1559 * _1551, _1559 * _1552, _1559 * _1553)) + 1.0) * 0.5;
        float _4343 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1576 = sqrt(((_1552 * _1552) + (_1551 * _1551)) + (_1553 * _1553)) / (_1507 + 9.9999997473787516355514526367188e-06);
        float _4354 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1578 = _1577 * 2.0;
        float _1582 = (1.0 - _1577) / (_1577 + 1.0);
        float _4365 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _1592 = ((((1.0 - _1583) * (_1578 + 2.0)) * exp2(log2(isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_1578 + 1.0))) + _1583) * _1507;
        float _1593 = _1475 * 0.5;
        float _1594 = _1485 * 0.5;
        float _1595 = _1495 * 0.5;
        float _1596 = dot(vec3(_1593, _1594, _1595), vec3(_1593, _1594, _1595));
        float _1601 = (_1596 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1596);
        float _1609 = (dot(vec3(_617, _618, _619), vec3(_1601 * _1593, _1601 * _1594, _1601 * _1595)) + 1.0) * 0.5;
        float _4376 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1618 = sqrt(((_1594 * _1594) + (_1593 * _1593)) + (_1595 * _1595)) / (_1508 + 9.9999997473787516355514526367188e-06);
        float _4387 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1620 = _1619 * 2.0;
        float _1624 = (1.0 - _1619) / (_1619 + 1.0);
        float _4398 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1634 = ((((1.0 - _1625) * (_1620 + 2.0)) * exp2(log2(isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_1620 + 1.0))) + _1625) * _1508;
        _1642 = _1475;
        _1643 = _1474;
        _1644 = _1473;
        _1645 = _1485;
        _1646 = _1484;
        _1647 = _1483;
        _1648 = _1495;
        _1649 = _1494;
        _1650 = _1493;
        _1651 = _1508;
        _1652 = _1507;
        _1653 = _1506;
        _1654 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)));
        _1655 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)));
        _1656 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)));
    }
    else
    {
        _1642 = _1330;
        _1643 = _1330;
        _1644 = _1330;
        _1645 = _1330;
        _1646 = _1330;
        _1647 = _1330;
        _1648 = _1330;
        _1649 = _1330;
        _1650 = _1330;
        _1651 = _1330;
        _1652 = _1330;
        _1653 = _1330;
        _1654 = 0.0;
        _1655 = 0.0;
        _1656 = 0.0;
    }
    float _1666 = (cbModelParam._m0[1u].x * (_1654 - _1342)) + _1342;
    float _1667 = (cbModelParam._m0[1u].x * (_1655 - _1343)) + _1343;
    float _1668 = (cbModelParam._m0[1u].x * (_1656 - _1344)) + _1344;
    float _1689 = fma(_1668, cbSceneParam._m0[89u].z, fma(_1667, cbSceneParam._m0[89u].y, _1666 * cbSceneParam._m0[89u].x));
    float _1692 = fma(_1668, cbSceneParam._m0[90u].z, fma(_1667, cbSceneParam._m0[90u].y, _1666 * cbSceneParam._m0[90u].x));
    float _1695 = fma(_1668, cbSceneParam._m0[91u].z, fma(_1667, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1666));
    float _1710 = _936 * 0.5;
    float _1711 = _937 * 0.5;
    float _1712 = _938 * 0.5;
    float _1713 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1644, _1647, _1650, _1653));
    float _1716 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1643, _1646, _1649, _1652));
    float _1719 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1642, _1645, _1648, _1651));
    float _1750;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1726 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1329, _1333, _1336, _1339));
        float _1730 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1331, _1334, _1337, _1340));
        float _1734 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1332, _1335, _1338, _1341));
        float _1741 = dot(vec4(cbModelParam._m0[39u]), vec4(_1710, _1711, _1712, 1.0));
        _1750 = dot(vec3(isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)), isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)), isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1741) ? 0.0 : (isnan(0.0) ? _1741 : max(0.0, _1741))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1750 = 1.0;
    }
    float _1761;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1752 = dot(vec4(cbModelParam._m0[40u]), vec4(_1710, _1711, _1712, 1.0));
        _1761 = dot(vec3(isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)), isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)), isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1752) ? 0.0 : (isnan(0.0) ? _1752 : max(0.0, _1752))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1761 = 1.0;
    }
    float _1765 = (_1761 * cbModelParam._m0[1u].x) + (_1750 * (1.0 - cbModelParam._m0[1u].x));
    float _1775 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _796);
    float _1776 = isnan(_1775) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1775 : min(cbModelParam._m0[25u].z, _1775));
    float _1856;
    float _1858;
    float _1860;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1823 = fma(_1000, cbModelParam._m0[13u].z, fma(_996, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _992)) + cbModelParam._m0[13u].w;
        float _1827 = fma(_1000, cbModelParam._m0[14u].z, fma(_996, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _992)) + cbModelParam._m0[14u].w;
        float _1831 = fma(_1000, cbModelParam._m0[15u].z, fma(_996, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _992)) + cbModelParam._m0[15u].w;
        float _1834 = fma(_938, cbModelParam._m0[13u].z, fma(_937, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _936));
        float _1837 = fma(_938, cbModelParam._m0[14u].z, fma(_937, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _936));
        float _1840 = fma(_938, cbModelParam._m0[15u].z, fma(_937, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _936));
        float _1868;
        if (_1834 > 0.0)
        {
            _1868 = abs((1.0 - _1823) / _1834);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1823 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1868 = frontier_phi_19_17_ladder;
        }
        float _2043;
        if (_1837 > 0.0)
        {
            _2043 = abs((1.0 - _1827) / _1837);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1827 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2043 = frontier_phi_28_24_ladder;
        }
        float _2338;
        if (_1840 > 0.0)
        {
            _2338 = abs((1.0 - _1831) / _1840);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1831 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2338 = frontier_phi_40_35_ladder;
        }
        float _2340 = isnan(_2043) ? _1868 : (isnan(_1868) ? _2043 : min(_1868, _2043));
        float _2341 = isnan(_2338) ? _2340 : (isnan(_2340) ? _2338 : min(_2340, _2338));
        float _2345 = (_2341 * _1834) + _1823;
        float _2346 = (_2341 * _1837) + _1827;
        float _2347 = (_2341 * _1840) + _1831;
        float _2348 = _2341 * 9.9999997473787516355514526367188e-05;
        float _2350 = (-1.0) - _2348;
        float _2352 = _2348 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2347 > _2352) || ((_2347 < _2350) || ((_2346 > _2352) || ((_2346 < _2350) || ((_2345 < _2350) || (_2345 > _2352))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2492 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2347, cbModelParam._m0[9u].z, fma(_2346, cbModelParam._m0[9u].y, _2345 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2347, cbModelParam._m0[10u].z, fma(_2346, cbModelParam._m0[10u].y, _2345 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2347, cbModelParam._m0[11u].z, fma(_2346, cbModelParam._m0[11u].y, _2345 * cbModelParam._m0[11u].x))), _1776);
            frontier_phi_18_40_ladder = _2492.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2492.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2492.x * cbModelParam._m0[1u].y;
        }
        _1856 = frontier_phi_18_40_ladder_2;
        _1858 = frontier_phi_18_40_ladder_1;
        _1860 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1844 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_936, _937, _938), _1776);
        _1856 = _1844.x * cbModelParam._m0[1u].y;
        _1858 = _1844.y * cbModelParam._m0[1u].y;
        _1860 = _1844.z * cbModelParam._m0[1u].y;
    }
    float _1864 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _796);
    float _1865 = isnan(_1864) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1864 : min(cbModelParam._m0[25u].w, _1864));
    float _1958;
    float _1960;
    float _1962;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1922 = fma(_1000, cbModelParam._m0[21u].z, fma(_996, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _992)) + cbModelParam._m0[21u].w;
        float _1926 = fma(_1000, cbModelParam._m0[22u].z, fma(_996, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _992)) + cbModelParam._m0[22u].w;
        float _1930 = fma(_1000, cbModelParam._m0[23u].z, fma(_996, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _992)) + cbModelParam._m0[23u].w;
        float _1933 = fma(_938, cbModelParam._m0[21u].z, fma(_937, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _936));
        float _1936 = fma(_938, cbModelParam._m0[22u].z, fma(_937, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _936));
        float _1939 = fma(_938, cbModelParam._m0[23u].z, fma(_937, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _936));
        float _2048;
        if (_1933 > 0.0)
        {
            _2048 = abs((1.0 - _1922) / _1933);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1922 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2048 = frontier_phi_30_26_ladder;
        }
        float _2365;
        if (_1936 > 0.0)
        {
            _2365 = abs((1.0 - _1926) / _1936);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1926 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2365 = frontier_phi_42_37_ladder;
        }
        float _2703;
        if (_1939 > 0.0)
        {
            _2703 = abs((1.0 - _1930) / _1939);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1930 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2703 = frontier_phi_52_49_ladder;
        }
        float _2705 = isnan(_2365) ? _2048 : (isnan(_2048) ? _2365 : min(_2048, _2365));
        float _2706 = isnan(_2703) ? _2705 : (isnan(_2705) ? _2703 : min(_2705, _2703));
        float _2710 = (_2706 * _1933) + _1922;
        float _2711 = (_2706 * _1936) + _1926;
        float _2712 = (_2706 * _1939) + _1930;
        float _2713 = _2706 * 9.9999997473787516355514526367188e-05;
        float _2714 = (-1.0) - _2713;
        float _2716 = _2713 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2712 > _2716) || ((_2712 < _2714) || ((_2711 > _2716) || ((_2711 < _2714) || ((_2710 < _2714) || (_2710 > _2716))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2834 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2712, cbModelParam._m0[17u].z, fma(_2711, cbModelParam._m0[17u].y, _2710 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2712, cbModelParam._m0[18u].z, fma(_2711, cbModelParam._m0[18u].y, _2710 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2712, cbModelParam._m0[19u].z, fma(_2711, cbModelParam._m0[19u].y, _2710 * cbModelParam._m0[19u].x))), _1865);
            frontier_phi_27_52_ladder = _2834.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2834.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2834.x * cbModelParam._m0[1u].z;
        }
        _1958 = frontier_phi_27_52_ladder_2;
        _1960 = frontier_phi_27_52_ladder_1;
        _1962 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1942 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_936, _937, _938), _1865);
        _1958 = _1942.x * cbModelParam._m0[1u].z;
        _1960 = _1942.y * cbModelParam._m0[1u].z;
        _1962 = _1942.z * cbModelParam._m0[1u].z;
    }
    float _1975 = (((_963 * _914) + _964) * _928) * ((cbModelParam._m0[1u].w * (_1958 - _1856)) + _1856);
    float _1977 = (((_963 * _915) + _964) * _928) * ((cbModelParam._m0[1u].w * (_1960 - _1858)) + _1858);
    float _1979 = (((_963 * _916) + _964) * _928) * ((cbModelParam._m0[1u].w * (_1962 - _1860)) + _1860);
    float _1982 = fma(_1979, cbSceneParam._m0[89u].z, fma(_1977, cbSceneParam._m0[89u].y, _1975 * cbSceneParam._m0[89u].x));
    float _1985 = fma(_1979, cbSceneParam._m0[90u].z, fma(_1977, cbSceneParam._m0[90u].y, _1975 * cbSceneParam._m0[90u].x));
    float _1988 = fma(_1979, cbSceneParam._m0[91u].z, fma(_1977, cbSceneParam._m0[91u].y, _1975 * cbSceneParam._m0[91u].x));
    float _2022 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2026 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2030 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2034 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2035 = _2022 / _2034;
    float _2036 = _2026 / _2034;
    float _2037 = _2030 / _2034;
    float _2184;
    float _2185;
    float _2186;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2064 = ((uint(_2037 > cbSceneParam._m0[59u].y) + uint(_2037 > cbSceneParam._m0[59u].x)) + uint(_2037 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2065 = _2064 + 43u;
        uint _2073 = _2064 + 44u;
        uint _2081 = _2064 + 45u;
        uint _2089 = _2064 + 46u;
        float _2100 = fma(_2034, cbSceneParam._m0[_2065].w, fma(_2030, cbSceneParam._m0[_2065].z, fma(_2026, cbSceneParam._m0[_2065].y, _2022 * cbSceneParam._m0[_2065].x)));
        float _2104 = fma(_2034, cbSceneParam._m0[_2073].w, fma(_2030, cbSceneParam._m0[_2073].z, fma(_2026, cbSceneParam._m0[_2073].y, _2022 * cbSceneParam._m0[_2073].x)));
        float _2112 = fma(_2034, cbSceneParam._m0[_2089].w, fma(_2030, cbSceneParam._m0[_2089].z, fma(_2026, cbSceneParam._m0[_2089].y, _2022 * cbSceneParam._m0[_2089].x)));
        float _2117 = cbSceneParam._m0[33u].z * _2112;
        float _2119 = cbSceneParam._m0[33u].w * _2112;
        float _2122 = fma(_2034, cbSceneParam._m0[_2081].w, fma(_2030, cbSceneParam._m0[_2081].z, fma(_2026, cbSceneParam._m0[_2081].y, _2022 * cbSceneParam._m0[_2081].x))) / _2112;
        float _2170 = (cbSceneParam._m0[33u].x - sqrt(((_2036 * _2036) + (_2035 * _2035)) + (_2037 * _2037))) * cbSceneParam._m0[33u].y;
        float _4524 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2177 = (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2117 + _2100) / _2112, (_2119 + _2104) / _2112), _2122), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2119 + _2100) / _2112, (_2104 - _2117) / _2112), _2122), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2100 - _2117) / _2112, (_2104 - _2119) / _2112), _2122), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2100 - _2119) / _2112, (_2117 + _2104) / _2112), _2122), 0.0)).x), vec4(0.25)));
        _2184 = 1.0 - (_2177 * cbSceneParam._m0[34u].x);
        _2185 = 1.0 - (_2177 * cbSceneParam._m0[34u].y);
        _2186 = 1.0 - (_2177 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2184 = 1.0;
        _2185 = 1.0;
        _2186 = 1.0;
    }
    float _2250;
    float _2252;
    float _2254;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2238 = fma(_2034, cbSceneParam._m0[63u].w, fma(_2030, cbSceneParam._m0[63u].z, fma(_2026, cbSceneParam._m0[63u].y, _2022 * cbSceneParam._m0[63u].x)));
        float _2239 = fma(_2034, cbSceneParam._m0[60u].w, fma(_2030, cbSceneParam._m0[60u].z, fma(_2026, cbSceneParam._m0[60u].y, _2022 * cbSceneParam._m0[60u].x))) / _2238;
        float _2240 = fma(_2034, cbSceneParam._m0[61u].w, fma(_2030, cbSceneParam._m0[61u].z, fma(_2026, cbSceneParam._m0[61u].y, _2022 * cbSceneParam._m0[61u].x))) / _2238;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2239 >= cbSceneParam._m0[64u].x) && (_2240 >= cbSceneParam._m0[64u].y)) && (_2239 <= cbSceneParam._m0[64u].z)) && (_2240 <= cbSceneParam._m0[64u].w))
        {
            float _2378 = fma(_2034, cbSceneParam._m0[62u].w, fma(_2030, cbSceneParam._m0[62u].z, fma(_2026, cbSceneParam._m0[62u].y, _2022 * cbSceneParam._m0[62u].x))) / _2238;
            float _2382 = isnan(cbSceneParam._m0[41u].w) ? _2378 : (isnan(_2378) ? cbSceneParam._m0[41u].w : max(_2378, cbSceneParam._m0[41u].w));
            float _2425 = (cbSceneParam._m0[33u].x - sqrt(((_2036 * _2036) + (_2035 * _2035)) + (_2037 * _2037))) * cbSceneParam._m0[33u].y;
            float _4540 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
            float _2432 = (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2239, cbSceneParam._m0[33u].w + _2240), _2382), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2239, _2240 - cbSceneParam._m0[33u].z), _2382), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2239 - cbSceneParam._m0[33u].z, _2240 - cbSceneParam._m0[33u].w), _2382), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2239 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2240), _2382), 0.0)).x), vec4(0.25)));
            float _2436 = 1.0 - (_2432 * cbSceneParam._m0[34u].x);
            float _2437 = 1.0 - (_2432 * cbSceneParam._m0[34u].y);
            float _2438 = 1.0 - (_2432 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2437) ? _2185 : (isnan(_2185) ? _2437 : min(_2185, _2437));
            frontier_phi_39_38_ladder_1 = isnan(_2436) ? _2184 : (isnan(_2184) ? _2436 : min(_2184, _2436));
            frontier_phi_39_38_ladder_2 = isnan(_2438) ? _2186 : (isnan(_2186) ? _2438 : min(_2186, _2438));
        }
        else
        {
            frontier_phi_39_38_ladder = _2185;
            frontier_phi_39_38_ladder_1 = _2184;
            frontier_phi_39_38_ladder_2 = _2186;
        }
        _2250 = frontier_phi_39_38_ladder_1;
        _2252 = frontier_phi_39_38_ladder;
        _2254 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2250 = _2184;
        _2252 = _2185;
        _2254 = _2186;
    }
    uvec4 _2259 = floatBitsToUint(cbInstanceData._m0[_820 + 5u]);
    uint _2261 = _2259.x * 14u;
    uint _2262 = _2261 + 13u;
    float _2269 = _928 + (-1.0);
    float _2274 = (cbLight._m0[_2262].x * _2269) + 1.0;
    float _2275 = (cbLight._m0[_2262].y * _2269) + 1.0;
    float _2276 = (cbLight._m0[_2262].z * _2269) + 1.0;
    float _2277 = (cbLight._m0[_2262].w * _2269) + 1.0;
    uint _2278 = _2261 + 5u;
    float _2284 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
    uint _2288 = _2261 + 4u;
    float _2297 = isnan(1.0) ? _2274 : (isnan(_2274) ? 1.0 : min(_2274, 1.0));
    uint _2301 = _2261 | 1u;
    float _2312 = dot(vec3(cbLight._m0[_2261].xyz), vec3(_617, _618, _619));
    float _2315 = dot(vec3(cbLight._m0[_2301].xyz), vec3(_617, _618, _619));
    float _4576 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _4587 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2320 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * 0.3183098733425140380859375;
    float _2322 = (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * 0.3183098733425140380859375;
    float _2329 = ((cbLight._m0[_2278].x * _2284) * _2322) + (((cbLight._m0[_2288].x * _2250) * _2297) * _2320);
    float _2330 = ((_2284 * cbLight._m0[_2278].y) * _2322) + (((cbLight._m0[_2288].y * _2252) * _2297) * _2320);
    float _2331 = ((_2284 * cbLight._m0[_2278].z) * _2322) + (((cbLight._m0[_2288].z * _2254) * _2297) * _2320);
    uvec4 _2335 = floatBitsToUint(cbLight._m0[_2261 + 12u]);
    bool _2337 = _2335.x == 0u;
    float _2439;
    float _2441;
    float _2443;
    if (_2337)
    {
        _2439 = _2329;
        _2441 = _2330;
        _2443 = _2331;
    }
    else
    {
        uint _2447 = _2261 + 6u;
        float _2463 = (dot(vec3(cbLight._m0[_2261 + 2u].xyz), vec3(_617, _618, _619)) * 0.5) + 0.5;
        float _2464 = _2463 * _2463;
        float _4598 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2465 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
        float _2466 = isnan(1.0) ? _2276 : (isnan(_2276) ? 1.0 : min(_2276, 1.0));
        _2439 = (((cbLight._m0[_2447].x * 0.3183098733425140380859375) * _2465) * _2466) + _2329;
        _2441 = (((cbLight._m0[_2447].y * 0.3183098733425140380859375) * _2465) * _2466) + _2330;
        _2443 = (((cbLight._m0[_2447].z * 0.3183098733425140380859375) * _2465) * _2466) + _2331;
    }
    bool _2446 = _2335.y == 0u;
    float _2501;
    float _2503;
    float _2505;
    if (_2446)
    {
        _2501 = _2439;
        _2503 = _2441;
        _2505 = _2443;
    }
    else
    {
        uint _2674 = _2261 + 7u;
        float _2690 = (dot(vec3(cbLight._m0[_2261 + 3u].xyz), vec3(_617, _618, _619)) * 0.5) + 0.5;
        float _2691 = _2690 * _2690;
        float _4614 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2692 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
        float _2693 = isnan(1.0) ? _2277 : (isnan(_2277) ? 1.0 : min(_2277, 1.0));
        _2501 = (((cbLight._m0[_2674].x * 0.3183098733425140380859375) * _2692) * _2693) + _2439;
        _2503 = (((cbLight._m0[_2674].y * 0.3183098733425140380859375) * _2692) * _2693) + _2441;
        _2505 = (((cbLight._m0[_2674].z * 0.3183098733425140380859375) * _2692) * _2693) + _2443;
    }
    uint _2508 = _2261 + 8u;
    float _2521 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2261].w)) * _796) * 0.949999988079071044921875);
    float _2522 = _2521 * _2521;
    float _2523 = cbLight._m0[_2261].x + _698;
    float _2524 = cbLight._m0[_2261].y + _699;
    float _2525 = cbLight._m0[_2261].z + _700;
    float _2529 = inversesqrt(dot(vec3(_2523, _2524, _2525), vec3(_2523, _2524, _2525)));
    float _2530 = _2529 * _2523;
    float _2531 = _2529 * _2524;
    float _2532 = _2529 * _2525;
    float _2533 = dot(vec3(_617, _618, _619), vec3(cbLight._m0[_2261].xyz));
    float _4630 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
    float _2536 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
    float _4641 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _2537 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
    float _2538 = dot(vec3(_617, _618, _619), vec3(_2530, _2531, _2532));
    float _4652 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
    float _2541 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
    float _2542 = dot(vec3(cbLight._m0[_2261].xyz), vec3(_2530, _2531, _2532));
    float _4663 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
    float _2546 = _2522 * _2522;
    float _2550 = ((_2541 * _2541) * (_2546 + (-1.0))) + 1.0;
    float _2558 = exp2(log2(1.0 - (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0)))) * 5.0);
    float _2559 = 0.959999978542327880859375 - _911;
    float _2561 = 0.959999978542327880859375 - _912;
    float _2562 = 0.959999978542327880859375 - _913;
    float _2569 = 1.0 - _2522;
    float _2580 = (0.5 / (((_2537 * ((_2536 * _2569) + _2522)) + 9.9999999392252902907785028219223e-09) + (((_2537 * _2569) + _2522) * _2536))) * _2536;
    float _4674 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2582 = (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (_2546 / ((_2550 * _2550) * 3.141590118408203125));
    uint _2596 = _2261 + 9u;
    float _2607 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2301].w)) * _796) * 0.949999988079071044921875);
    float _2608 = _2607 * _2607;
    float _2609 = cbLight._m0[_2301].x + _698;
    float _2610 = cbLight._m0[_2301].y + _699;
    float _2611 = cbLight._m0[_2301].z + _700;
    float _2615 = inversesqrt(dot(vec3(_2609, _2610, _2611), vec3(_2609, _2610, _2611)));
    float _2616 = _2615 * _2609;
    float _2617 = _2615 * _2610;
    float _2618 = _2615 * _2611;
    float _2619 = dot(vec3(_617, _618, _619), vec3(cbLight._m0[_2301].xyz));
    float _4685 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
    float _2622 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
    float _2623 = dot(vec3(_617, _618, _619), vec3(_2616, _2617, _2618));
    float _4696 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
    float _2626 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
    float _2627 = dot(vec3(cbLight._m0[_2301].xyz), vec3(_2616, _2617, _2618));
    float _4707 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
    float _2631 = _2608 * _2608;
    float _2635 = ((_2626 * _2626) * (_2631 + (-1.0))) + 1.0;
    float _2642 = exp2(log2(1.0 - (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0)))) * 5.0);
    float _2649 = 1.0 - _2608;
    float _2659 = (0.5 / (((_2537 * ((_2622 * _2649) + _2608)) + 9.9999999392252902907785028219223e-09) + (((_2537 * _2649) + _2608) * _2622))) * _2622;
    float _4718 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
    float _2661 = (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0))) * (_2631 / ((_2635 * _2635) * 3.141590118408203125));
    float _2671 = (((((_2642 * _2559) + _914) * cbLight._m0[_2596].x) * _2661) * _2284) + ((((cbLight._m0[_2508].x * _2250) * ((_2558 * _2559) + _914)) * _2582) * _2297);
    float _2672 = (((((_2642 * _2561) + _915) * cbLight._m0[_2596].y) * _2661) * _2284) + ((((cbLight._m0[_2508].y * _2252) * ((_2558 * _2561) + _915)) * _2582) * _2297);
    float _2673 = (((((_2642 * _2562) + _916) * cbLight._m0[_2596].z) * _2661) * _2284) + ((((cbLight._m0[_2508].z * _2254) * ((_2558 * _2562) + _916)) * _2582) * _2297);
    float _2729;
    float _2731;
    float _2733;
    if (_2337)
    {
        _2729 = _2671;
        _2731 = _2672;
        _2733 = _2673;
    }
    else
    {
        uint _2735 = _2261 + 2u;
        uint _2739 = _2261 + 10u;
        float _2753 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2735].w)) * _796) * 0.949999988079071044921875);
        float _2754 = _2753 * _2753;
        float _2755 = cbLight._m0[_2735].x + _698;
        float _2756 = cbLight._m0[_2735].y + _699;
        float _2757 = cbLight._m0[_2735].z + _700;
        float _2761 = inversesqrt(dot(vec3(_2755, _2756, _2757), vec3(_2755, _2756, _2757)));
        float _2762 = _2761 * _2755;
        float _2763 = _2761 * _2756;
        float _2764 = _2761 * _2757;
        float _2765 = dot(vec3(_617, _618, _619), vec3(cbLight._m0[_2735].xyz));
        float _4729 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        float _2768 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
        float _2769 = dot(vec3(_617, _618, _619), vec3(_2762, _2763, _2764));
        float _4740 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2772 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
        float _2773 = dot(vec3(cbLight._m0[_2735].xyz), vec3(_2762, _2763, _2764));
        float _4751 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        float _2777 = _2754 * _2754;
        float _2781 = ((_2772 * _2772) * (_2777 + (-1.0))) + 1.0;
        float _2788 = exp2(log2(1.0 - (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0)))) * 5.0);
        float _2795 = 1.0 - _2754;
        float _2805 = (0.5 / (((_2537 * ((_2768 * _2795) + _2754)) + 9.9999999392252902907785028219223e-09) + (((_2537 * _2795) + _2754) * _2768))) * _2768;
        float _4762 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
        float _2807 = (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0))) * (_2777 / ((_2781 * _2781) * 3.141590118408203125));
        float _2808 = isnan(1.0) ? _2276 : (isnan(_2276) ? 1.0 : min(_2276, 1.0));
        _2729 = (((((_2788 * _2559) + _914) * cbLight._m0[_2739].x) * _2807) * _2808) + _2671;
        _2731 = (((((_2788 * _2561) + _915) * cbLight._m0[_2739].y) * _2807) * _2808) + _2672;
        _2733 = (((((_2788 * _2562) + _916) * cbLight._m0[_2739].z) * _2807) * _2808) + _2673;
    }
    float _2839;
    float _2841;
    float _2843;
    if (_2446)
    {
        _2839 = _2729;
        _2841 = _2731;
        _2843 = _2733;
    }
    else
    {
        uint _2850 = _2261 + 3u;
        uint _2854 = _2261 + 11u;
        float _2868 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2850].w)) * _796) * 0.949999988079071044921875);
        float _2869 = _2868 * _2868;
        float _2870 = cbLight._m0[_2850].x + _698;
        float _2871 = cbLight._m0[_2850].y + _699;
        float _2872 = cbLight._m0[_2850].z + _700;
        float _2876 = inversesqrt(dot(vec3(_2870, _2871, _2872), vec3(_2870, _2871, _2872)));
        float _2877 = _2876 * _2870;
        float _2878 = _2876 * _2871;
        float _2879 = _2876 * _2872;
        float _2880 = dot(vec3(_617, _618, _619), vec3(cbLight._m0[_2850].xyz));
        float _4778 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
        float _2883 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
        float _2884 = dot(vec3(_617, _618, _619), vec3(_2877, _2878, _2879));
        float _4789 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
        float _2887 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
        float _2888 = dot(vec3(cbLight._m0[_2850].xyz), vec3(_2877, _2878, _2879));
        float _4800 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
        float _2892 = _2869 * _2869;
        float _2896 = ((_2887 * _2887) * (_2892 + (-1.0))) + 1.0;
        float _2903 = exp2(log2(1.0 - (isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0)))) * 5.0);
        float _2910 = 1.0 - _2869;
        float _2920 = (0.5 / (((_2537 * ((_2883 * _2910) + _2869)) + 9.9999999392252902907785028219223e-09) + (((_2537 * _2910) + _2869) * _2883))) * _2883;
        float _4811 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
        float _2922 = (isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0))) * (_2892 / ((_2896 * _2896) * 3.141590118408203125));
        float _2923 = isnan(1.0) ? _2277 : (isnan(_2277) ? 1.0 : min(_2277, 1.0));
        _2839 = (((((_2903 * _2559) + _914) * cbLight._m0[_2854].x) * _2922) * _2923) + _2729;
        _2841 = (((((_2903 * _2561) + _915) * cbLight._m0[_2854].y) * _2922) * _2923) + _2731;
        _2843 = (((((_2903 * _2562) + _916) * cbLight._m0[_2854].z) * _2922) * _2923) + _2733;
    }
    float _2988;
    float _2990;
    float _2992;
    float _2994;
    float _2996;
    float _2998;
    if (_2259.y == 0u)
    {
        uvec4 _2944 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2945 = _2944.x;
        uint _2956 = uint((float(_2944.y) * floor(float(uint(cbSceneParam._m0[85u].y * _719) / _2945))) + floor(float(uint(cbSceneParam._m0[85u].x * _718) / _2945)));
        float _2966 = (log2(_2037 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2967 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
        uint _2970 = uint(isnan(14.0) ? _2967 : (isnan(_2967) ? 14.0 : min(_2967, 14.0)));
        uvec4 _2975 = texelFetch(g_lightClusterGridBuffer, int(((_2970 << 2u) + (_2956 << 6u)) >> 2u));
        uint _2976 = _2975.x;
        uint _2977 = _2944.z;
        float _3060;
        float _3062;
        float _3064;
        float _3066;
        float _3068;
        float _3070;
        if (((((1u << ((_2977 >> 4u) & 15u)) + 4294967295u) & _2976) == 0u) || ((_2977 & 240u) == 0u))
        {
            _3060 = 0.0;
            _3062 = 0.0;
            _3064 = 0.0;
            _3066 = 0.0;
            _3068 = 0.0;
            _3070 = 0.0;
        }
        else
        {
            float _3061;
            float _3063;
            float _3065;
            float _3067;
            float _3069;
            float _3071;
            float _3212 = 0.0;
            float _3213 = 0.0;
            float _3214 = 0.0;
            float _3215 = 0.0;
            float _3216 = 0.0;
            float _3217 = 0.0;
            uint _3218 = 0u;
            uint _3227;
            bool _3228;
            for (;;)
            {
                _3227 = texelFetch(g_lightClassification, int((((_2970 << 5u) + (_2956 << 9u)) + (_3218 << 2u)) >> 2u)).x;
                _3228 = _3227 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3228)
                {
                    frontier_phi_73_pred = _3217;
                    frontier_phi_73_pred_1 = _3216;
                    frontier_phi_73_pred_2 = _3215;
                    frontier_phi_73_pred_3 = _3214;
                    frontier_phi_73_pred_4 = _3213;
                    frontier_phi_73_pred_5 = _3212;
                }
                else
                {
                    float _3357;
                    float _3358;
                    float _3359;
                    float _3360;
                    float _3361;
                    float _3362;
                    uint _3363;
                    _3357 = _3212;
                    _3358 = _3213;
                    _3359 = _3214;
                    _3360 = _3215;
                    _3361 = _3216;
                    _3362 = _3217;
                    _3363 = _3227;
                    float _3284;
                    float _3285;
                    float _3286;
                    float _3287;
                    float _3288;
                    float _3289;
                    for (;;)
                    {
                        uint _3367 = uint(findLSB(_3363)) + (_3218 << 5u);
                        uint _3364 = (_3363 + 4294967295u) & _3363;
                        uint _3369 = _3367 * 48u;
                        vec4 _3383 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3369)).x, texelFetch(g_PointLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3369 + 3u)).x));
                        uint _3389 = (_3367 * 48u) + 4u;
                        vec4 _3402 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3389)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 3u)).x));
                        uint _3408 = (_3367 * 48u) + 8u;
                        vec3 _3419 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3408)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 2u)).x));
                        float _3423 = _3383.x - _2035;
                        float _3424 = _3383.y - _2036;
                        float _3425 = _3383.z - _2037;
                        float _3426 = dot(vec3(_3423, _3424, _3425), vec3(_3423, _3424, _3425));
                        float _3429 = inversesqrt(_3426);
                        float _3430 = _3429 * _3423;
                        float _3431 = _3429 * _3424;
                        float _3432 = _3429 * _3425;
                        float _3433 = dot(vec3(_741, _744, _747), vec3(_3430, _3431, _3432));
                        float _3438 = 1.0 - (_3426 * _3383.w);
                        float _4837 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                        float _3439 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                        float _3440 = sqrt(_3426) * _3402.w;
                        float _3443 = 1.39999997615814208984375 / (_3440 + 1.39999997615814208984375);
                        float _3444 = _3443 * _3443;
                        float _3447 = ((1.0 - _3444) * _3433) + _3444;
                        float _3450 = _3440 * _3440;
                        float _3454 = ((isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0))) * _3439) / ((_3450 * 0.699999988079071044921875) + 1.0);
                        float _3458 = (-0.0) - _2035;
                        float _3459 = (-0.0) - _2036;
                        float _3460 = (-0.0) - _2037;
                        float _3464 = inversesqrt(dot(vec3(_3458, _3459, _3460), vec3(_3458, _3459, _3460)));
                        float _3465 = _3464 * _3458;
                        float _3466 = _3464 * _3459;
                        float _3467 = _3464 * _3460;
                        float _3474 = exp2(log2(1.0 / ((_3450 * 3.5) + 5.0)) * 0.25);
                        float _3475 = 1.0 - _944;
                        float _3482 = sqrt(1.0 - ((1.0 - (_3475 * _3475)) * (1.0 - (_3474 * _3474))));
                        float _3483 = _3482 * _3482;
                        float _3484 = _3483 * _3483;
                        float _3485 = _3465 + _3430;
                        float _3486 = _3466 + _3431;
                        float _3487 = _3467 + _3432;
                        float _3491 = inversesqrt(dot(vec3(_3485, _3486, _3487), vec3(_3485, _3486, _3487)));
                        float _3495 = dot(vec3(_741, _744, _747), vec3(_3465, _3466, _3467));
                        float _4853 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                        float _3498 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
                        float _3499 = dot(vec3(_741, _744, _747), vec3(_3491 * _3485, _3491 * _3486, _3491 * _3487));
                        float _4864 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                        float _3502 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
                        float _3506 = ((_3502 * _3502) * (_3484 + (-1.0))) + 1.0;
                        float _3507 = _3443 * _3483;
                        float _3508 = _3507 * _3507;
                        float _3511 = ((1.0 - _3508) * _3433) + _3508;
                        float _4875 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                        float _3512 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                        float _3513 = 1.0 - _3483;
                        float _3523 = (0.5 / (((_3512 * ((_3498 * _3513) + _3483)) + 9.9999999392252902907785028219223e-09) + (((_3512 * _3513) + _3483) * _3498))) * _3512;
                        float _4886 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                        float _3534 = (((_3484 * 3.1415927410125732421875) * (isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0)))) / ((_3506 * _3506) * ((_3450 * 2.1991131305694580078125) + 3.141590118408203125))) * _3439;
                        _3287 = (_3454 * _3402.x) + _3360;
                        _3288 = (_3454 * _3402.y) + _3361;
                        _3289 = (_3454 * _3402.z) + _3362;
                        _3284 = (_3534 * _3419.x) + _3357;
                        _3285 = (_3534 * _3419.y) + _3358;
                        _3286 = (_3534 * _3419.z) + _3359;
                        if (_3364 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3357 = _3284;
                            _3358 = _3285;
                            _3359 = _3286;
                            _3360 = _3287;
                            _3361 = _3288;
                            _3362 = _3289;
                            _3363 = _3364;
                        }
                    }
                    frontier_phi_73_pred = _3289;
                    frontier_phi_73_pred_1 = _3288;
                    frontier_phi_73_pred_2 = _3287;
                    frontier_phi_73_pred_3 = _3286;
                    frontier_phi_73_pred_4 = _3285;
                    frontier_phi_73_pred_5 = _3284;
                }
                _3071 = frontier_phi_73_pred;
                _3069 = frontier_phi_73_pred_1;
                _3067 = frontier_phi_73_pred_2;
                _3065 = frontier_phi_73_pred_3;
                _3063 = frontier_phi_73_pred_4;
                _3061 = frontier_phi_73_pred_5;
                uint _3219 = _3218 + 1u;
                if (_3219 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3212 = _3061;
                    _3213 = _3063;
                    _3214 = _3065;
                    _3215 = _3067;
                    _3216 = _3069;
                    _3217 = _3071;
                    _3218 = _3219;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3060 = _3061;
            _3062 = _3063;
            _3064 = _3065;
            _3066 = _3067;
            _3068 = _3069;
            _3070 = _3071;
        }
        uvec4 _3074 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3075 = _3074.z;
        uint _3077 = (_3075 >> 8u) & 15u;
        float _3180;
        float _3182;
        float _3184;
        float _3186;
        float _3188;
        float _3190;
        if (((4294967295u << _3077) & _2976) == 0u)
        {
            _3180 = _3060;
            _3182 = _3062;
            _3184 = _3064;
            _3186 = _3066;
            _3188 = _3068;
            _3190 = _3070;
        }
        else
        {
            float _3205 = inversesqrt(dot(vec3(_2035, _2036, _2037), vec3(_2035, _2036, _2037)));
            float _3206 = _3205 * _2035;
            float _3207 = _3205 * _2036;
            float _3208 = _3205 * _2037;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3077 < ((_3075 >> 12u) & 15u))
            {
                float _3181;
                float _3183;
                float _3185;
                float _3187;
                float _3189;
                float _3191;
                float _3340 = _3060;
                float _3341 = _3062;
                float _3342 = _3064;
                float _3343 = _3066;
                float _3344 = _3068;
                float _3345 = _3070;
                uint _3346 = _3077;
                uint _3355;
                bool _3356;
                for (;;)
                {
                    _3355 = texelFetch(g_lightClassification, int((((_2970 << 5u) + (_2956 << 9u)) + (_3346 << 2u)) >> 2u)).x;
                    _3356 = _3355 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3356)
                    {
                        frontier_phi_84_pred = _3344;
                        frontier_phi_84_pred_1 = _3343;
                        frontier_phi_84_pred_2 = _3342;
                        frontier_phi_84_pred_3 = _3341;
                        frontier_phi_84_pred_4 = _3340;
                        frontier_phi_84_pred_5 = _3345;
                    }
                    else
                    {
                        float _3548;
                        float _3549;
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3553;
                        float _3843;
                        float _3844;
                        float _3845;
                        float _3846;
                        float _3847;
                        float _3848;
                        float _3561 = _3340;
                        float _3562 = _3341;
                        float _3563 = _3342;
                        float _3564 = _3343;
                        float _3565 = _3344;
                        float _3566 = _3345;
                        uint _3567 = _3355;
                        uint _3568;
                        vec4 _3593;
                        float _3594;
                        vec4 _3609;
                        vec3 _3621;
                        vec4 _3636;
                        vec4 _3652;
                        float _3699;
                        bool _3700;
                        for (;;)
                        {
                            uint _3578 = ((_3346 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3567));
                            _3568 = (_3567 + 4294967295u) & _3567;
                            uint _3580 = _3578 * 40u;
                            _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            _3594 = _3593.w;
                            uint _3596 = (_3578 * 40u) + 4u;
                            _3609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 3u)).x));
                            uint _3611 = (_3578 * 40u) + 8u;
                            _3621 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x));
                            uint _3623 = (_3578 * 40u) + 16u;
                            _3636 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 3u)).x));
                            uint _3639 = (_3578 * 40u) + 20u;
                            _3652 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 3u)).x));
                            uint _3655 = (_3578 * 40u) + 24u;
                            vec4 _3668 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3655)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 3u)).x));
                            uint _3674 = (_3578 * 40u) + 28u;
                            vec4 _3687 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3674)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 3u)).x));
                            _3699 = fma(_2037, _3687.z, fma(_2036, _3687.y, _3687.x * _2035)) + _3687.w;
                            _3700 = !((fma(_2037, _3668.z, fma(_2036, _3668.y, _3668.x * _2035)) + _3668.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3700)
                            {
                                float _3727 = _3593.x - _2035;
                                float _3728 = _3593.y - _2036;
                                float _3729 = _3593.z - _2037;
                                float _3730 = dot(vec3(_3727, _3728, _3729), vec3(_3727, _3728, _3729));
                                float _3733 = inversesqrt(_3730);
                                float _3734 = _3733 * _3727;
                                float _3735 = _3733 * _3728;
                                float _3736 = _3733 * _3729;
                                float _3740 = 1.0 - (_3730 / (_3594 * _3594));
                                float _4897 = isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0));
                                float _3741 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                                float _3745 = sqrt(_3730) * _3609.w;
                                float _3747 = 1.39999997615814208984375 / (_3745 + 1.39999997615814208984375);
                                float _3748 = _3747 * _3747;
                                float _3751 = ((1.0 - _3748) * dot(vec3(_3734, _3735, _3736), vec3(_741, _744, _747))) + _3748;
                                float _3754 = _3745 * _3745;
                                float _3758 = (fma(_2037, _3636.z, fma(_2036, _3636.y, _3636.x * _2035)) + _3636.w) / _3699;
                                float _3759 = (fma(_2037, _3652.z, fma(_2036, _3652.y, _3652.x * _2035)) + _3652.w) / _3699;
                                float _3763 = 1.0 - dot(vec2(_3758, _3759), vec2(_3758, _3759));
                                float _4913 = isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0));
                                float _3764 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
                                float _3765 = _3764 * (((isnan(0.0) ? _3751 : (isnan(_3751) ? 0.0 : max(_3751, 0.0))) * _3741) / ((_3754 * 0.699999988079071044921875) + 1.0));
                                float _3777 = exp2(log2(1.0 / ((_3754 * 3.5) + 5.0)) * 0.25);
                                float _3778 = 1.0 - _944;
                                float _3785 = sqrt(1.0 - ((1.0 - (_3778 * _3778)) * (1.0 - (_3777 * _3777))));
                                float _3786 = _3785 * _3785;
                                float _3787 = _3786 * _3786;
                                float _3788 = _3734 - _3206;
                                float _3789 = _3735 - _3207;
                                float _3790 = _3736 - _3208;
                                float _3794 = inversesqrt(dot(vec3(_3788, _3789, _3790), vec3(_3788, _3789, _3790)));
                                float _3798 = dot(vec3(_741, _744, _747), vec3((-0.0) - _3206, (-0.0) - _3207, (-0.0) - _3208));
                                float _4924 = isnan(0.0) ? _3798 : (isnan(_3798) ? 0.0 : max(_3798, 0.0));
                                float _3801 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
                                float _3802 = dot(vec3(_741, _744, _747), vec3(_3794 * _3788, _3794 * _3789, _3794 * _3790));
                                float _4935 = isnan(0.0) ? _3802 : (isnan(_3802) ? 0.0 : max(_3802, 0.0));
                                float _3805 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                                float _3809 = ((_3805 * _3805) * (_3787 + (-1.0))) + 1.0;
                                float _3810 = _3747 * _3786;
                                float _3811 = _3810 * _3810;
                                float _3817 = ((1.0 - _3811) * dot(vec3(_741, _744, _747), vec3(_3734, _3735, _3736))) + _3811;
                                float _4946 = isnan(0.0) ? _3817 : (isnan(_3817) ? 0.0 : max(_3817, 0.0));
                                float _3818 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
                                float _3819 = 1.0 - _3786;
                                float _3829 = (0.5 / (((_3818 * ((_3801 * _3819) + _3786)) + 9.9999999392252902907785028219223e-09) + (((_3818 * _3819) + _3786) * _3801))) * _3818;
                                float _4957 = isnan(0.0) ? _3829 : (isnan(_3829) ? 0.0 : max(_3829, 0.0));
                                float _3839 = (_3764 * _3741) * (((_3787 * 3.1415927410125732421875) * (isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0)))) / ((_3809 * _3809) * ((_3754 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3765 * _3609.y;
                                frontier_phi_90_pred_1 = _3765 * _3609.x;
                                frontier_phi_90_pred_2 = _3839 * _3621.z;
                                frontier_phi_90_pred_3 = _3839 * _3621.y;
                                frontier_phi_90_pred_4 = _3839 * _3621.x;
                                frontier_phi_90_pred_5 = _3765 * _3609.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3847 = frontier_phi_90_pred;
                            _3846 = frontier_phi_90_pred_1;
                            _3845 = frontier_phi_90_pred_2;
                            _3844 = frontier_phi_90_pred_3;
                            _3843 = frontier_phi_90_pred_4;
                            _3848 = frontier_phi_90_pred_5;
                            _3551 = _3846 + _3564;
                            _3552 = _3847 + _3565;
                            _3553 = _3848 + _3566;
                            _3548 = _3843 + _3561;
                            _3549 = _3844 + _3562;
                            _3550 = _3845 + _3563;
                            if (_3568 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3561 = _3548;
                                _3562 = _3549;
                                _3563 = _3550;
                                _3564 = _3551;
                                _3565 = _3552;
                                _3566 = _3553;
                                _3567 = _3568;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3552;
                        frontier_phi_84_pred_1 = _3551;
                        frontier_phi_84_pred_2 = _3550;
                        frontier_phi_84_pred_3 = _3549;
                        frontier_phi_84_pred_4 = _3548;
                        frontier_phi_84_pred_5 = _3553;
                    }
                    _3189 = frontier_phi_84_pred;
                    _3187 = frontier_phi_84_pred_1;
                    _3185 = frontier_phi_84_pred_2;
                    _3183 = frontier_phi_84_pred_3;
                    _3181 = frontier_phi_84_pred_4;
                    _3191 = frontier_phi_84_pred_5;
                    uint _3347 = _3346 + 1u;
                    if (_3347 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3340 = _3181;
                        _3341 = _3183;
                        _3342 = _3185;
                        _3343 = _3187;
                        _3344 = _3189;
                        _3345 = _3191;
                        _3346 = _3347;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3191;
                frontier_phi_65_66_ladder_1 = _3187;
                frontier_phi_65_66_ladder_2 = _3189;
                frontier_phi_65_66_ladder_3 = _3183;
                frontier_phi_65_66_ladder_4 = _3181;
                frontier_phi_65_66_ladder_5 = _3185;
            }
            else
            {
                frontier_phi_65_66_ladder = _3070;
                frontier_phi_65_66_ladder_1 = _3066;
                frontier_phi_65_66_ladder_2 = _3068;
                frontier_phi_65_66_ladder_3 = _3062;
                frontier_phi_65_66_ladder_4 = _3060;
                frontier_phi_65_66_ladder_5 = _3064;
            }
            _3180 = frontier_phi_65_66_ladder_4;
            _3182 = frontier_phi_65_66_ladder_3;
            _3184 = frontier_phi_65_66_ladder_5;
            _3186 = frontier_phi_65_66_ladder_1;
            _3188 = frontier_phi_65_66_ladder_2;
            _3190 = frontier_phi_65_66_ladder;
        }
        float _3195 = isnan(1.0) ? _928 : (isnan(_928) ? 1.0 : min(_928, 1.0));
        _2988 = (_3195 * _3186) + _2501;
        _2990 = (_3195 * _3188) + _2503;
        _2992 = (_3195 * _3190) + _2505;
        _2994 = ((_3180 * _914) * _3195) + _2839;
        _2996 = ((_3182 * _915) * _3195) + _2841;
        _2998 = ((_3184 * _916) * _3195) + _2843;
    }
    else
    {
        _2988 = _2501;
        _2990 = _2503;
        _2992 = _2505;
        _2994 = _2839;
        _2996 = _2841;
        _2998 = _2843;
    }
    float _4973 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _4984 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _4995 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _5006 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _3016 = ((isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0))) * (_2988 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _928))) + ((_2994 + ((isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0))) * _1765)) * cbPerFrame._m0[3u].x);
    float _3017 = ((isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0))) * (_2990 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _928))) + ((_2996 + ((isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0))) * _1765)) * cbPerFrame._m0[3u].x);
    float _3018 = ((isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0))) * (_2992 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _928))) + ((_2998 + ((isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0))) * _1765)) * cbPerFrame._m0[3u].x);
    float _3019 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
    float _3020 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
    float _3021 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
    float _3026 = cbInstanceData._m0[_820 + 6u].w * (isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0)));
    float _3031 = _718 / cbSceneParam._m0[86u].x;
    float _3032 = _719 / cbSceneParam._m0[86u].y;
    vec4 _3046 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3031, _3032, (log2((isnan(cbSceneParam._m0[77u].w) ? _641 : (isnan(_641) ? cbSceneParam._m0[77u].w : min(_641, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3048 = _3046.x;
    float _3049 = _3046.y;
    float _3050 = _3046.z;
    float _3051 = _3046.w;
    float _3122;
    float _3124;
    float _3126;
    float _3128;
    if (_641 > cbSceneParam._m0[78u].w)
    {
        float _3085 = isnan(_641) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _641 : min(cbSceneParam._m0[80u].w, _641));
        float _3086 = _3085 / _641;
        float _3097 = _3086 * _691;
        float _3098 = _692 * _3086;
        float _3099 = (-0.0) - _3098;
        float _3100 = _3086 * _693;
        float _3102 = (cbSceneParam._m0[77u].w * _3099) / _3085;
        float _3103 = _3102 + cbSceneParam._m0[79u].w;
        float _3104 = cbSceneParam._m0[79u].w - _3098;
        float _3110 = sqrt(((_3097 * _3097) + (_3098 * _3098)) + (_3100 * _3100));
        float _3113 = (1.0 - (cbSceneParam._m0[77u].w / _3085)) * _3110;
        float _3118 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3120 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3297;
        if (abs((_3099 - _3102) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3297 = ((((_3103 > 0.0) ? exp2(_3118 * _3103) : (2.0 - exp2(_3120 * _3103))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3113;
        }
        else
        {
            float _3241 = 1.0 / cbSceneParam._m0[80u].x;
            float _3242 = isnan(_3104) ? _3103 : (isnan(_3103) ? _3104 : max(_3103, _3104));
            float _3243 = isnan(_3104) ? _3103 : (isnan(_3103) ? _3104 : min(_3103, _3104));
            float _3252 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : min(_3242, 0.0));
            float _3253 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : min(_3243, 0.0));
            _3297 = ((abs(_3110 / _3099) * cbSceneParam._m0[80u].y) * ((((_3252 - _3253) * 2.0) - ((exp2(_3118 * (isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0)))) - exp2(_3118 * (isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0))))) * _3241)) - ((exp2(_3120 * _3252) - exp2(_3120 * _3253)) * _3241))) + (_3113 * cbSceneParam._m0[80u].z);
        }
        vec4 _3299 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3031, _3032, 1.0), 0.0);
        float _3308 = exp2((_3297 * (-1.44269502162933349609375)) * (1.0 - _3299.w));
        float _3309 = log2(_3308);
        float _3325 = log2(_3051);
        _3122 = (exp2(_3325 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3309 * cbSceneParam._m0[78u].x)) * _3299.x) / cbSceneParam._m0[78u].x)) + _3048;
        _3124 = (exp2(_3325 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3309 * cbSceneParam._m0[78u].y)) * _3299.y) / cbSceneParam._m0[78u].y)) + _3049;
        _3126 = (exp2(_3325 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3309 * cbSceneParam._m0[78u].z)) * _3299.z) / cbSceneParam._m0[78u].z)) + _3050;
        _3128 = _3308 * _3051;
    }
    else
    {
        _3122 = _3048;
        _3124 = _3049;
        _3126 = _3050;
        _3128 = _3051;
    }
    bool _3335;
    vec4 _3138;
    vec4 _3160;
    float _3162;
    float _3166;
    float _3167;
    float _3168;
    float _3169;
    bool _3179;
    for (;;)
    {
        _3138 = cbMatDynParam._m0[0u];
        float _3140 = roundEven(_3138.y);
        bool _3141 = _3140 == 3.0;
        float _3142 = log2(_3128);
        float _3149 = exp2(_3142 * cbSceneParam._m0[78u].x) * _3019;
        float _3150 = exp2(_3142 * cbSceneParam._m0[78u].y) * _3020;
        float _3151 = exp2(_3142 * cbSceneParam._m0[78u].z) * _3021;
        float _3158 = _707 + (-0.5);
        _3160 = cbMtdParam._m0[1u];
        _3162 = _3160.y * _3158;
        float _3165 = (_3140 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3166 = _3165 * (_3141 ? _3149 : (_3149 + (cbSceneParam._m0[72u].w * _3122)));
        _3167 = _3165 * (_3141 ? _3150 : (_3150 + (cbSceneParam._m0[72u].w * _3124)));
        _3168 = _3165 * (_3141 ? _3151 : (_3151 + (cbSceneParam._m0[72u].w * _3126)));
        _3169 = _3158 * 0.999000012874603271484375;
        _3179 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3179)
        {
            if ((cbInstanceData._m0[_820 + 7u].x + _3169) < 0.5)
            {
                _3335 = true;
                break;
            }
        }
        uint _3276 = _821 + uint(_3138.w);
        if ((cbInstanceData._m0[_3276].w < 1.0) && ((cbInstanceData._m0[_3276].w + _3169) < 0.5))
        {
            _3335 = true;
            break;
        }
        if ((_3162 + _436) < _3160.x)
        {
            _3335 = true;
            break;
        }
        _3335 = false;
        break;
    }
    float _3539;
    if (_3335)
    {
        discard_state = true;
        _3539 = 0.0;
    }
    else
    {
        _3539 = _3026;
    }
    SV_Target.x = _3166;
    SV_Target.y = _3167;
    SV_Target.z = _3168;
    SV_Target.w = _3539;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3026;
    discard_exit();
}


