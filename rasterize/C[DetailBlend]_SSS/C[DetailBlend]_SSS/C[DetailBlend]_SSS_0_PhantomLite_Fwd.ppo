#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1155;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _222;
    float _223;
    float _224;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
    }
    else
    {
        _222 = _208;
        _223 = _209;
        _224 = _210;
    }
    float _269 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _279 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _269);
    float _280 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _269);
    float _281 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _269);
    vec4 _294 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _311 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _333 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _342 = ((_311.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _333.x;
    float _345 = ((_311.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _333.y;
    float _348 = ((_311.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _333.z;
    float _349 = _333.w * _311.w;
    vec4 _362 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _369 = cbMtdParam._m0[14u].z + _362.x;
    vec4 _381 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _393 = (_294.z * 2.0) * (cbMtdParam._m0[13u].x + _381.z);
    float _397 = (_294.x * 2.0) + (-1.0);
    float _399 = (_294.y * 2.0) + (-1.0);
    float _400 = dot(vec2(_397, _399), vec2(_397, _399));
    float _3519 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _406 = sqrt(1.0 - (isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0))));
    float _413 = (((_381.x * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _397;
    float _414 = (((_381.y * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _399;
    float _417 = fma(_406, _222, fma(_414, _214 * TANGENT.x, (_200 * _192) * _413));
    float _420 = fma(_406, _223, fma(_414, _214 * TANGENT.y, (_200 * _193) * _413));
    float _423 = fma(_406, _224, fma(_414, _214 * TANGENT.z, (_200 * _194) * _413));
    float _427 = inversesqrt(dot(vec3(_417, _420, _423), vec3(_417, _420, _423)));
    float _428 = _427 * _417;
    float _429 = _427 * _420;
    float _430 = _427 * _423;
    float _3530 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _431 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    float _3541 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _432 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    float _3552 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _433 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    float _3563 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _434 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
    float _3574 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _435 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
    float _3585 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _436 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _444 = cbMatDynParam._m0[9u].x * _433;
    float _445 = cbMatDynParam._m0[9u].y * _434;
    float _446 = cbMatDynParam._m0[9u].z * _435;
    float _454 = inversesqrt(dot(vec3(_279, _280, _281), vec3(_279, _280, _281)));
    float _455 = _454 * _279;
    float _456 = _454 * _280;
    float _457 = _454 * _281;
    float _458 = dot(vec3(_428, _429, _430), vec3(_455, _456, _457));
    float _464 = abs(exp2(log2(_458) * cbMatDynParam._m0[12u].x));
    float _465 = isnan(0.100000001490116119384765625) ? _464 : (isnan(_464) ? 0.100000001490116119384765625 : max(_464, 0.100000001490116119384765625));
    float _471 = ((isnan(0.699999988079071044921875) ? _465 : (isnan(_465) ? 0.699999988079071044921875 : min(_465, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _494 = 1.0 - cbMatDynParam._m0[8u].w;
    float _3606 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _497 = 1.0 - cbMatDynParam._m0[7u].w;
    float _3617 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _498 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    float _502 = dot(vec3(_428, _429, _430), vec3(0.0, -1.0, 0.0));
    float _3628 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _505 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    float _512 = (_505 * _433) * cbMatDynParam._m0[11u].x;
    float _514 = (_505 * _434) * cbMatDynParam._m0[11u].y;
    float _516 = (_505 * _435) * cbMatDynParam._m0[11u].z;
    float _523 = dot(vec3(_455, _456, _457), vec3(_428, _429, _430));
    float _526 = _523 * 2.0;
    float _536 = dot(vec3((-0.0) - (_455 - (_526 * _428)), (-0.0) - (_456 - (_526 * _429)), (-0.0) - (_457 - (_526 * _430))), vec3(0.0, -1.0, 0.0));
    float _3639 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _543 = exp2(log2(isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * 4.0);
    float _569 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _575 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _576 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _578 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _580 = _578.w;
    float _599 = fma(_430, cbSceneParam._m0[5u].z, fma(_429, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _428));
    float _602 = fma(_430, cbSceneParam._m0[6u].z, fma(_429, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _428));
    float _605 = fma(_430, cbSceneParam._m0[7u].z, fma(_429, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _428));
    vec4 _607 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _609 = _607.x;
    float _621 = (((_607.y - _432) + (_607.w * _432)) * cbMtdParam._m0[3u].x) + _432;
    float _638 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_609 * _609)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _647 = (((cbMatDynParam._m0[15u].x - _436) * cbMatDynParam._m0[15u].w) * _638) + _436;
    float _655 = ((_638 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _621)) + _621;
    uint _679 = uint(roundEven(NORMAL.w)) * 13u;
    uint _680 = _679 + 9u;
    uint _681 = _680 + uint(cbMatDynParam._m0[0u].w);
    float _687 = (cbMtdParam._m0[0u].x * _444) * cbInstanceData._m0[_681].x;
    float _688 = (cbMtdParam._m0[0u].y * _445) * cbInstanceData._m0[_681].y;
    float _689 = (cbMtdParam._m0[0u].z * _446) * cbInstanceData._m0[_681].z;
    float _3650 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _690 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    float _3661 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _691 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
    float _3672 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _692 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
    vec4 _693 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _698 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _709 = (((_698.x - _647) + (_698.w * _647)) * cbMtdParam._m0[3u].x) + _647;
    float _722 = (cbMtdParam._m0[3u].x * (((_690 * _580) - _690) + _693.x)) + _690;
    float _723 = (cbMtdParam._m0[3u].x * (((_691 * _580) - _691) + _693.y)) + _691;
    float _724 = (cbMtdParam._m0[3u].x * (((_692 * _580) - _692) + _693.z)) + _692;
    vec4 _725 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _738 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_647 * (_444 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_647 * (_445 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_647 * (_446 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _725.z;
    float _742 = _738 * cbMatDynParam._m0[13u].w;
    float _752 = (_742 * (cbMatDynParam._m0[13u].x - _722)) + _722;
    float _753 = (_742 * (cbMatDynParam._m0[13u].y - _723)) + _723;
    float _754 = (_742 * (cbMatDynParam._m0[13u].z - _724)) + _724;
    float _762 = ((_738 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _709)) + _709;
    float _763 = 1.0 - _762;
    float _764 = _763 * _752;
    float _765 = _763 * _753;
    float _766 = _763 * _754;
    float _770 = (_752 + (-0.039999999105930328369140625)) * _762;
    float _771 = (_753 + (-0.039999999105930328369140625)) * _762;
    float _772 = (_754 + (-0.039999999105930328369140625)) * _762;
    float _773 = _770 + 0.039999999105930328369140625;
    float _774 = _771 + 0.039999999105930328369140625;
    float _775 = _772 + 0.039999999105930328369140625;
    vec4 _784 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _575, cbSceneParam._m0[86u].y * _576));
    float _787 = _784.x * TEXCOORD_4;
    float _788 = _458 * 2.0;
    float _792 = (_788 * _428) - _455;
    float _793 = (_788 * _429) - _456;
    float _794 = (_788 * _430) - _457;
    float _795 = abs(_523);
    float _3683 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _797 = sqrt(_655);
    float _809 = exp2((_797 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_797 * 3.0));
    float _815 = (1.0 - _809) * ((_797 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _816 = _809 * _797;
    float _844 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _852 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1154;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _879 = fma(_852, cbModelParam._m0[26u].z, fma(_848, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _844));
        float _883 = fma(_852, cbModelParam._m0[27u].z, fma(_848, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _844));
        float _887 = fma(_852, cbModelParam._m0[28u].z, fma(_848, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _844));
        float _912 = _844 + _428;
        float _913 = _848 + _429;
        float _914 = _852 + _430;
        float _924 = fma(_914, cbModelParam._m0[26u].z, fma(_913, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _912)) - _879;
        float _925 = fma(_914, cbModelParam._m0[27u].z, fma(_913, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _912)) - _883;
        float _926 = fma(_914, cbModelParam._m0[28u].z, fma(_913, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _912)) - _887;
        float _930 = inversesqrt(dot(vec3(_924, _925, _926), vec3(_924, _925, _926)));
        float _943 = ((_930 * _924) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_879 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _944 = ((_930 * _925) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_883 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _945 = ((_930 * _926) / cbModelParam._m0[34u].z) + ((((((_887 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        float _982 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _983 = _982 * (_948.x + (-0.5));
        float _984 = _982 * (_948.y + (-0.5));
        float _985 = _982 * (_948.z + (-0.5));
        float _992 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_955.x + (-0.5));
        float _994 = _992 * (_955.y + (-0.5));
        float _995 = _992 * (_955.z + (-0.5));
        float _1002 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_962.x + (-0.5));
        float _1004 = _1002 * (_962.y + (-0.5));
        float _1005 = _1002 * (_962.z + (-0.5));
        float _1012 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_969.x + (-0.5));
        float _1014 = _1012 * (_969.y + (-0.5));
        float _1015 = _1012 * (_969.z + (-0.5));
        float _1016 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = _983 * 0.5;
        float _1020 = _993 * 0.5;
        float _1021 = _1003 * 0.5;
        float _1022 = dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021));
        float _1027 = (_1022 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1022);
        float _1036 = (dot(vec3(_428, _429, _430), vec3(_1027 * _1019, _1027 * _1020, _1027 * _1021)) + 1.0) * 0.5;
        float _3709 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1046 = sqrt(((_1020 * _1020) + (_1019 * _1019)) + (_1021 * _1021)) / (_1016 + 9.9999997473787516355514526367188e-06);
        float _3720 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3731 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_1048 + 1.0))) + _1053) * _1016;
        float _1063 = _984 * 0.5;
        float _1064 = _994 * 0.5;
        float _1065 = _1004 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1079 = (dot(vec3(_428, _429, _430), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _3742 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1088 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3753 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3764 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * (_1090 + 1.0))) + _1095) * _1017;
        float _1105 = _985 * 0.5;
        float _1106 = _995 * 0.5;
        float _1107 = _1005 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1121 = (dot(vec3(_428, _429, _430), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3775 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1130 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3786 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _3797 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * (_1132 + 1.0))) + _1137) * _1018;
        _1154 = _985;
        _1156 = _984;
        _1157 = _983;
        _1158 = _995;
        _1159 = _994;
        _1160 = _993;
        _1161 = _1005;
        _1162 = _1004;
        _1163 = _1003;
        _1164 = _1018;
        _1165 = _1017;
        _1166 = _1016;
        _1167 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
        _1168 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
        _1169 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
    }
    else
    {
        _1154 = _1155;
        _1156 = _1155;
        _1157 = _1155;
        _1158 = _1155;
        _1159 = _1155;
        _1160 = _1155;
        _1161 = _1155;
        _1162 = _1155;
        _1163 = _1155;
        _1164 = _1155;
        _1165 = _1155;
        _1166 = _1155;
        _1167 = 0.0;
        _1168 = 0.0;
        _1169 = 0.0;
    }
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1195 = fma(_852, cbModelParam._m0[30u].z, fma(_848, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _844));
        float _1199 = fma(_852, cbModelParam._m0[31u].z, fma(_848, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _844));
        float _1203 = fma(_852, cbModelParam._m0[32u].z, fma(_848, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _844));
        float _1226 = _844 + _428;
        float _1227 = _848 + _429;
        float _1228 = _852 + _430;
        float _1238 = fma(_1228, cbModelParam._m0[30u].z, fma(_1227, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1226)) - _1195;
        float _1239 = fma(_1228, cbModelParam._m0[31u].z, fma(_1227, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1226)) - _1199;
        float _1240 = fma(_1228, cbModelParam._m0[32u].z, fma(_1227, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1226)) - _1203;
        float _1244 = inversesqrt(dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240)));
        float _1257 = ((_1244 * _1238) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1195 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1258 = ((_1244 * _1239) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1199 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1259 = ((_1244 * _1240) / cbModelParam._m0[35u].z) + ((((((_1203 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        float _1294 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1261.x + (-0.5));
        float _1296 = _1294 * (_1261.y + (-0.5));
        float _1297 = _1294 * (_1261.z + (-0.5));
        float _1304 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1268.x + (-0.5));
        float _1306 = _1304 * (_1268.y + (-0.5));
        float _1307 = _1304 * (_1268.z + (-0.5));
        float _1314 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1275.x + (-0.5));
        float _1316 = _1314 * (_1275.y + (-0.5));
        float _1317 = _1314 * (_1275.z + (-0.5));
        float _1324 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1282.x + (-0.5));
        float _1326 = _1324 * (_1282.y + (-0.5));
        float _1327 = _1324 * (_1282.z + (-0.5));
        float _1328 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1329 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1330 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1331 = _1295 * 0.5;
        float _1332 = _1305 * 0.5;
        float _1333 = _1315 * 0.5;
        float _1334 = dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333));
        float _1339 = (_1334 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1334);
        float _1347 = (dot(vec3(_428, _429, _430), vec3(_1339 * _1331, _1339 * _1332, _1339 * _1333)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1356 = sqrt(((_1332 * _1332) + (_1331 * _1331)) + (_1333 * _1333)) / (_1328 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _3860 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_1358 + 1.0))) + _1363) * _1328;
        float _1373 = _1296 * 0.5;
        float _1374 = _1306 * 0.5;
        float _1375 = _1316 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1389 = (dot(vec3(_428, _429, _430), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _3871 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1398 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1329 + 9.9999997473787516355514526367188e-06);
        float _3882 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _3893 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1400 + 1.0))) + _1405) * _1329;
        float _1415 = _1297 * 0.5;
        float _1416 = _1307 * 0.5;
        float _1417 = _1317 * 0.5;
        float _1418 = dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417));
        float _1423 = (_1418 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1418);
        float _1431 = (dot(vec3(_428, _429, _430), vec3(_1423 * _1415, _1423 * _1416, _1423 * _1417)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1440 = sqrt(((_1416 * _1416) + (_1415 * _1415)) + (_1417 * _1417)) / (_1330 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _3926 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1442 + 1.0))) + _1447) * _1330;
        _1464 = _1297;
        _1465 = _1296;
        _1466 = _1295;
        _1467 = _1307;
        _1468 = _1306;
        _1469 = _1305;
        _1470 = _1317;
        _1471 = _1316;
        _1472 = _1315;
        _1473 = _1330;
        _1474 = _1329;
        _1475 = _1328;
        _1476 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
        _1477 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
        _1478 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
    }
    else
    {
        _1464 = _1155;
        _1465 = _1155;
        _1466 = _1155;
        _1467 = _1155;
        _1468 = _1155;
        _1469 = _1155;
        _1470 = _1155;
        _1471 = _1155;
        _1472 = _1155;
        _1473 = _1155;
        _1474 = _1155;
        _1475 = _1155;
        _1476 = 0.0;
        _1477 = 0.0;
        _1478 = 0.0;
    }
    float _1488 = (cbModelParam._m0[1u].x * (_1476 - _1167)) + _1167;
    float _1489 = (cbModelParam._m0[1u].x * (_1477 - _1168)) + _1168;
    float _1490 = (cbModelParam._m0[1u].x * (_1478 - _1169)) + _1169;
    float _1511 = fma(_1490, cbSceneParam._m0[89u].z, fma(_1489, cbSceneParam._m0[89u].y, _1488 * cbSceneParam._m0[89u].x));
    float _1514 = fma(_1490, cbSceneParam._m0[90u].z, fma(_1489, cbSceneParam._m0[90u].y, _1488 * cbSceneParam._m0[90u].x));
    float _1517 = fma(_1490, cbSceneParam._m0[91u].z, fma(_1489, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1488));
    float _1532 = _792 * 0.5;
    float _1533 = _793 * 0.5;
    float _1534 = _794 * 0.5;
    float _1535 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1466, _1469, _1472, _1475));
    float _1538 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1465, _1468, _1471, _1474));
    float _1541 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1464, _1467, _1470, _1473));
    float _1572;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1548 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1154, _1158, _1161, _1164));
        float _1552 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1156, _1159, _1162, _1165));
        float _1556 = dot(vec4(_1532, _1533, _1534, 1.0), vec4(_1157, _1160, _1163, _1166));
        float _1563 = dot(vec4(cbModelParam._m0[39u]), vec4(_1532, _1533, _1534, 1.0));
        _1572 = dot(vec3(isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)), isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)), isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1563) ? 0.0 : (isnan(0.0) ? _1563 : max(0.0, _1563))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1572 = 1.0;
    }
    float _1583;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1574 = dot(vec4(cbModelParam._m0[40u]), vec4(_1532, _1533, _1534, 1.0));
        _1583 = dot(vec3(isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)), isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)), isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1574) ? 0.0 : (isnan(0.0) ? _1574 : max(0.0, _1574))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1583 = 1.0;
    }
    float _1587 = (_1583 * cbModelParam._m0[1u].x) + (_1572 * (1.0 - cbModelParam._m0[1u].x));
    float _1597 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _655);
    float _1598 = isnan(_1597) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1597 : min(cbModelParam._m0[25u].z, _1597));
    float _1678;
    float _1680;
    float _1682;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1645 = fma(_852, cbModelParam._m0[13u].z, fma(_848, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _844)) + cbModelParam._m0[13u].w;
        float _1649 = fma(_852, cbModelParam._m0[14u].z, fma(_848, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _844)) + cbModelParam._m0[14u].w;
        float _1653 = fma(_852, cbModelParam._m0[15u].z, fma(_848, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _844)) + cbModelParam._m0[15u].w;
        float _1656 = fma(_794, cbModelParam._m0[13u].z, fma(_793, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _792));
        float _1659 = fma(_794, cbModelParam._m0[14u].z, fma(_793, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _792));
        float _1662 = fma(_794, cbModelParam._m0[15u].z, fma(_793, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _792));
        float _1690;
        if (_1656 > 0.0)
        {
            _1690 = abs((1.0 - _1645) / _1656);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1645 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1690 = frontier_phi_16_14_ladder;
        }
        float _1897;
        if (_1659 > 0.0)
        {
            _1897 = abs((1.0 - _1649) / _1659);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1659 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1649 + 1.0) / _1659);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1897 = frontier_phi_25_21_ladder;
        }
        float _2151;
        if (_1662 > 0.0)
        {
            _2151 = abs((1.0 - _1653) / _1662);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1662 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1653 + 1.0) / _1662);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2151 = frontier_phi_37_32_ladder;
        }
        float _2153 = isnan(_1897) ? _1690 : (isnan(_1690) ? _1897 : min(_1690, _1897));
        float _2154 = isnan(_2151) ? _2153 : (isnan(_2153) ? _2151 : min(_2153, _2151));
        float _2158 = (_2154 * _1656) + _1645;
        float _2159 = (_2154 * _1659) + _1649;
        float _2160 = (_2154 * _1662) + _1653;
        float _2161 = _2154 * 9.9999997473787516355514526367188e-05;
        float _2163 = (-1.0) - _2161;
        float _2165 = _2161 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2160 > _2165) || ((_2160 < _2163) || ((_2159 > _2165) || ((_2159 < _2163) || ((_2158 < _2163) || (_2158 > _2165))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2288 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2160, cbModelParam._m0[9u].z, fma(_2159, cbModelParam._m0[9u].y, _2158 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2160, cbModelParam._m0[10u].z, fma(_2159, cbModelParam._m0[10u].y, _2158 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2160, cbModelParam._m0[11u].z, fma(_2159, cbModelParam._m0[11u].y, _2158 * cbModelParam._m0[11u].x))), _1598);
            frontier_phi_15_37_ladder = _2288.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2288.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2288.x * cbModelParam._m0[1u].y;
        }
        _1678 = frontier_phi_15_37_ladder_2;
        _1680 = frontier_phi_15_37_ladder_1;
        _1682 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1666 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_792, _793, _794), _1598);
        _1678 = _1666.x * cbModelParam._m0[1u].y;
        _1680 = _1666.y * cbModelParam._m0[1u].y;
        _1682 = _1666.z * cbModelParam._m0[1u].y;
    }
    float _1686 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _655);
    float _1687 = isnan(_1686) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1686 : min(cbModelParam._m0[25u].w, _1686));
    float _1780;
    float _1782;
    float _1784;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1744 = fma(_852, cbModelParam._m0[21u].z, fma(_848, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _844)) + cbModelParam._m0[21u].w;
        float _1748 = fma(_852, cbModelParam._m0[22u].z, fma(_848, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _844)) + cbModelParam._m0[22u].w;
        float _1752 = fma(_852, cbModelParam._m0[23u].z, fma(_848, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _844)) + cbModelParam._m0[23u].w;
        float _1755 = fma(_794, cbModelParam._m0[21u].z, fma(_793, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _792));
        float _1758 = fma(_794, cbModelParam._m0[22u].z, fma(_793, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _792));
        float _1761 = fma(_794, cbModelParam._m0[23u].z, fma(_793, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _792));
        float _1902;
        if (_1755 > 0.0)
        {
            _1902 = abs((1.0 - _1744) / _1755);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1755 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1744 + 1.0) / _1755);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1902 = frontier_phi_27_23_ladder;
        }
        float _2178;
        if (_1758 > 0.0)
        {
            _2178 = abs((1.0 - _1748) / _1758);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1748 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2178 = frontier_phi_39_34_ladder;
        }
        float _2391;
        if (_1761 > 0.0)
        {
            _2391 = abs((1.0 - _1752) / _1761);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1752 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2391 = frontier_phi_48_45_ladder;
        }
        float _2393 = isnan(_2178) ? _1902 : (isnan(_1902) ? _2178 : min(_1902, _2178));
        float _2394 = isnan(_2391) ? _2393 : (isnan(_2393) ? _2391 : min(_2393, _2391));
        float _2398 = (_2394 * _1755) + _1744;
        float _2399 = (_2394 * _1758) + _1748;
        float _2400 = (_2394 * _1761) + _1752;
        float _2401 = _2394 * 9.9999997473787516355514526367188e-05;
        float _2402 = (-1.0) - _2401;
        float _2404 = _2401 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2400 > _2404) || ((_2400 < _2402) || ((_2399 > _2404) || ((_2399 < _2402) || ((_2398 < _2402) || (_2398 > _2404))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2624 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2400, cbModelParam._m0[17u].z, fma(_2399, cbModelParam._m0[17u].y, _2398 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2400, cbModelParam._m0[18u].z, fma(_2399, cbModelParam._m0[18u].y, _2398 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2400, cbModelParam._m0[19u].z, fma(_2399, cbModelParam._m0[19u].y, _2398 * cbModelParam._m0[19u].x))), _1687);
            frontier_phi_24_48_ladder = _2624.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2624.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2624.x * cbModelParam._m0[1u].z;
        }
        _1780 = frontier_phi_24_48_ladder_2;
        _1782 = frontier_phi_24_48_ladder_1;
        _1784 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1764 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_792, _793, _794), _1687);
        _1780 = _1764.x * cbModelParam._m0[1u].z;
        _1782 = _1764.y * cbModelParam._m0[1u].z;
        _1784 = _1764.z * cbModelParam._m0[1u].z;
    }
    float _1797 = (((_815 * _773) + _816) * _787) * ((cbModelParam._m0[1u].w * (_1780 - _1678)) + _1678);
    float _1799 = (((_815 * _774) + _816) * _787) * ((cbModelParam._m0[1u].w * (_1782 - _1680)) + _1680);
    float _1801 = (((_815 * _775) + _816) * _787) * ((cbModelParam._m0[1u].w * (_1784 - _1682)) + _1682);
    float _1804 = fma(_1801, cbSceneParam._m0[89u].z, fma(_1799, cbSceneParam._m0[89u].y, _1797 * cbSceneParam._m0[89u].x));
    float _1807 = fma(_1801, cbSceneParam._m0[90u].z, fma(_1799, cbSceneParam._m0[90u].y, _1797 * cbSceneParam._m0[90u].x));
    float _1810 = fma(_1801, cbSceneParam._m0[91u].z, fma(_1799, cbSceneParam._m0[91u].y, _1797 * cbSceneParam._m0[91u].x));
    uvec4 _1820 = floatBitsToUint(cbInstanceData._m0[_679 + 5u]);
    uint _1822 = _1820.x * 14u;
    uint _1823 = _1822 + 13u;
    float _1830 = _787 + (-1.0);
    float _1835 = (cbLight._m0[_1823].x * _1830) + 1.0;
    float _1836 = (cbLight._m0[_1823].y * _1830) + 1.0;
    float _1837 = (cbLight._m0[_1823].z * _1830) + 1.0;
    float _1838 = (cbLight._m0[_1823].w * _1830) + 1.0;
    uint _1839 = _1822 + 5u;
    float _1845 = isnan(1.0) ? _1836 : (isnan(_1836) ? 1.0 : min(_1836, 1.0));
    uint _1849 = _1822 + 4u;
    float _1856 = isnan(1.0) ? _1835 : (isnan(_1835) ? 1.0 : min(_1835, 1.0));
    uint _1860 = _1822 | 1u;
    float _1871 = dot(vec3(cbLight._m0[_1822].xyz), vec3(_428, _429, _430));
    float _1874 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_428, _429, _430));
    float _4062 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _4073 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1879 = (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * 0.3183098733425140380859375;
    float _1881 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * 0.3183098733425140380859375;
    float _1888 = ((cbLight._m0[_1839].x * _1845) * _1881) + ((cbLight._m0[_1849].x * _1856) * _1879);
    float _1889 = ((_1845 * cbLight._m0[_1839].y) * _1881) + ((_1856 * cbLight._m0[_1849].y) * _1879);
    float _1890 = ((_1845 * cbLight._m0[_1839].z) * _1881) + ((_1856 * cbLight._m0[_1849].z) * _1879);
    uvec4 _1894 = floatBitsToUint(cbLight._m0[_1822 + 12u]);
    bool _1896 = _1894.x == 0u;
    float _1907;
    float _1909;
    float _1911;
    if (_1896)
    {
        _1907 = _1888;
        _1909 = _1889;
        _1911 = _1890;
    }
    else
    {
        uint _1915 = _1822 + 6u;
        float _1931 = (dot(vec3(cbLight._m0[_1822 + 2u].xyz), vec3(_428, _429, _430)) * 0.5) + 0.5;
        float _1932 = _1931 * _1931;
        float _4084 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1933 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1934 = isnan(1.0) ? _1837 : (isnan(_1837) ? 1.0 : min(_1837, 1.0));
        _1907 = (((cbLight._m0[_1915].x * 0.3183098733425140380859375) * _1933) * _1934) + _1888;
        _1909 = (((cbLight._m0[_1915].y * 0.3183098733425140380859375) * _1933) * _1934) + _1889;
        _1911 = (((cbLight._m0[_1915].z * 0.3183098733425140380859375) * _1933) * _1934) + _1890;
    }
    bool _1914 = _1894.y == 0u;
    float _1952;
    float _1954;
    float _1956;
    if (_1914)
    {
        _1952 = _1907;
        _1954 = _1909;
        _1956 = _1911;
    }
    else
    {
        uint _2122 = _1822 + 7u;
        float _2138 = (dot(vec3(cbLight._m0[_1822 + 3u].xyz), vec3(_428, _429, _430)) * 0.5) + 0.5;
        float _2139 = _2138 * _2138;
        float _4100 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2140 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _2141 = isnan(1.0) ? _1838 : (isnan(_1838) ? 1.0 : min(_1838, 1.0));
        _1952 = (((cbLight._m0[_2122].x * 0.3183098733425140380859375) * _2140) * _2141) + _1907;
        _1954 = (((cbLight._m0[_2122].y * 0.3183098733425140380859375) * _2140) * _2141) + _1909;
        _1956 = (((cbLight._m0[_2122].z * 0.3183098733425140380859375) * _2140) * _2141) + _1911;
    }
    uint _1959 = _1822 + 8u;
    float _1972 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1822].w)) * _655) * 0.949999988079071044921875);
    float _1973 = _1972 * _1972;
    float _1974 = cbLight._m0[_1822].x + _455;
    float _1975 = cbLight._m0[_1822].y + _456;
    float _1976 = cbLight._m0[_1822].z + _457;
    float _1980 = inversesqrt(dot(vec3(_1974, _1975, _1976), vec3(_1974, _1975, _1976)));
    float _1981 = _1980 * _1974;
    float _1982 = _1980 * _1975;
    float _1983 = _1980 * _1976;
    float _1984 = dot(vec3(_428, _429, _430), vec3(cbLight._m0[_1822].xyz));
    float _4116 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1987 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _4127 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _1988 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _1989 = dot(vec3(_428, _429, _430), vec3(_1981, _1982, _1983));
    float _4138 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1992 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _1993 = dot(vec3(cbLight._m0[_1822].xyz), vec3(_1981, _1982, _1983));
    float _4149 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1997 = _1973 * _1973;
    float _2001 = ((_1992 * _1992) * (_1997 + (-1.0))) + 1.0;
    float _2009 = exp2(log2(1.0 - (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) * 5.0);
    float _2010 = 0.959999978542327880859375 - _770;
    float _2012 = 0.959999978542327880859375 - _771;
    float _2013 = 0.959999978542327880859375 - _772;
    float _2020 = 1.0 - _1973;
    float _2031 = (0.5 / (((_1988 * ((_1987 * _2020) + _1973)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2020) + _1973) * _1987))) * _1987;
    float _4160 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2033 = (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_1997 / ((_2001 * _2001) * 3.141590118408203125));
    uint _2044 = _1822 + 9u;
    float _2055 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1860].w)) * _655) * 0.949999988079071044921875);
    float _2056 = _2055 * _2055;
    float _2057 = cbLight._m0[_1860].x + _455;
    float _2058 = cbLight._m0[_1860].y + _456;
    float _2059 = cbLight._m0[_1860].z + _457;
    float _2063 = inversesqrt(dot(vec3(_2057, _2058, _2059), vec3(_2057, _2058, _2059)));
    float _2064 = _2063 * _2057;
    float _2065 = _2063 * _2058;
    float _2066 = _2063 * _2059;
    float _2067 = dot(vec3(_428, _429, _430), vec3(cbLight._m0[_1860].xyz));
    float _4171 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2070 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _2071 = dot(vec3(_428, _429, _430), vec3(_2064, _2065, _2066));
    float _4182 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2074 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _2075 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_2064, _2065, _2066));
    float _4193 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2079 = _2056 * _2056;
    float _2083 = ((_2074 * _2074) * (_2079 + (-1.0))) + 1.0;
    float _2090 = exp2(log2(1.0 - (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) * 5.0);
    float _2097 = 1.0 - _2056;
    float _2107 = (0.5 / (((_1988 * ((_2070 * _2097) + _2056)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2097) + _2056) * _2070))) * _2070;
    float _4204 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2109 = (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_2079 / ((_2083 * _2083) * 3.141590118408203125));
    float _2119 = (((((_2090 * _2010) + _773) * cbLight._m0[_2044].x) * _2109) * _1845) + (((((_2009 * _2010) + _773) * cbLight._m0[_1959].x) * _2033) * _1856);
    float _2120 = (((((_2090 * _2012) + _774) * cbLight._m0[_2044].y) * _2109) * _1845) + (((((_2009 * _2012) + _774) * cbLight._m0[_1959].y) * _2033) * _1856);
    float _2121 = (((((_2090 * _2013) + _775) * cbLight._m0[_2044].z) * _2109) * _1845) + (((((_2009 * _2013) + _775) * cbLight._m0[_1959].z) * _2033) * _1856);
    float _2183;
    float _2185;
    float _2187;
    if (_1896)
    {
        _2183 = _2119;
        _2185 = _2120;
        _2187 = _2121;
    }
    else
    {
        uint _2189 = _1822 + 2u;
        uint _2193 = _1822 + 10u;
        float _2207 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2189].w)) * _655) * 0.949999988079071044921875);
        float _2208 = _2207 * _2207;
        float _2209 = cbLight._m0[_2189].x + _455;
        float _2210 = cbLight._m0[_2189].y + _456;
        float _2211 = cbLight._m0[_2189].z + _457;
        float _2215 = inversesqrt(dot(vec3(_2209, _2210, _2211), vec3(_2209, _2210, _2211)));
        float _2216 = _2215 * _2209;
        float _2217 = _2215 * _2210;
        float _2218 = _2215 * _2211;
        float _2219 = dot(vec3(_428, _429, _430), vec3(cbLight._m0[_2189].xyz));
        float _4215 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2222 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _2223 = dot(vec3(_428, _429, _430), vec3(_2216, _2217, _2218));
        float _4226 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2226 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _2227 = dot(vec3(cbLight._m0[_2189].xyz), vec3(_2216, _2217, _2218));
        float _4237 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
        float _2231 = _2208 * _2208;
        float _2235 = ((_2226 * _2226) * (_2231 + (-1.0))) + 1.0;
        float _2242 = exp2(log2(1.0 - (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) * 5.0);
        float _2249 = 1.0 - _2208;
        float _2259 = (0.5 / (((_1988 * ((_2222 * _2249) + _2208)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2249) + _2208) * _2222))) * _2222;
        float _4248 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2261 = (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_2231 / ((_2235 * _2235) * 3.141590118408203125));
        float _2262 = isnan(1.0) ? _1837 : (isnan(_1837) ? 1.0 : min(_1837, 1.0));
        _2183 = (((((_2242 * _2010) + _773) * cbLight._m0[_2193].x) * _2261) * _2262) + _2119;
        _2185 = (((((_2242 * _2012) + _774) * cbLight._m0[_2193].y) * _2261) * _2262) + _2120;
        _2187 = (((((_2242 * _2013) + _775) * cbLight._m0[_2193].z) * _2261) * _2262) + _2121;
    }
    float _2297;
    float _2299;
    float _2301;
    if (_1914)
    {
        _2297 = _2183;
        _2299 = _2185;
        _2301 = _2187;
    }
    else
    {
        uint _2308 = _1822 + 3u;
        uint _2312 = _1822 + 11u;
        float _2326 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2308].w)) * _655) * 0.949999988079071044921875);
        float _2327 = _2326 * _2326;
        float _2328 = cbLight._m0[_2308].x + _455;
        float _2329 = cbLight._m0[_2308].y + _456;
        float _2330 = cbLight._m0[_2308].z + _457;
        float _2334 = inversesqrt(dot(vec3(_2328, _2329, _2330), vec3(_2328, _2329, _2330)));
        float _2335 = _2334 * _2328;
        float _2336 = _2334 * _2329;
        float _2337 = _2334 * _2330;
        float _2338 = dot(vec3(_428, _429, _430), vec3(cbLight._m0[_2308].xyz));
        float _4264 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2341 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _2342 = dot(vec3(_428, _429, _430), vec3(_2335, _2336, _2337));
        float _4275 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2345 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _2346 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_2335, _2336, _2337));
        float _4286 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2350 = _2327 * _2327;
        float _2354 = ((_2345 * _2345) * (_2350 + (-1.0))) + 1.0;
        float _2361 = exp2(log2(1.0 - (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) * 5.0);
        float _2368 = 1.0 - _2327;
        float _2378 = (0.5 / (((_1988 * ((_2341 * _2368) + _2327)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2368) + _2327) * _2341))) * _2341;
        float _4297 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2380 = (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_2350 / ((_2354 * _2354) * 3.141590118408203125));
        float _2381 = isnan(1.0) ? _1838 : (isnan(_1838) ? 1.0 : min(_1838, 1.0));
        _2297 = (((((_2361 * _2010) + _773) * cbLight._m0[_2312].x) * _2380) * _2381) + _2183;
        _2299 = (((((_2361 * _2012) + _774) * cbLight._m0[_2312].y) * _2380) * _2381) + _2185;
        _2301 = (((((_2361 * _2013) + _775) * cbLight._m0[_2312].z) * _2380) * _2381) + _2187;
    }
    float _2515;
    float _2517;
    float _2519;
    float _2521;
    float _2523;
    float _2525;
    if (_1820.y == 0u)
    {
        float _2456 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2457 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2456;
        float _2458 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2456;
        float _2459 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2456;
        uvec4 _2471 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2472 = _2471.x;
        uint _2483 = uint((float(_2471.y) * floor(float(uint(cbSceneParam._m0[85u].y * _576) / _2472))) + floor(float(uint(cbSceneParam._m0[85u].x * _575) / _2472)));
        float _2493 = (log2(_2459 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2494 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        uint _2497 = uint(isnan(14.0) ? _2494 : (isnan(_2494) ? 14.0 : min(_2494, 14.0)));
        uvec4 _2502 = texelFetch(g_lightClusterGridBuffer, int(((_2497 << 2u) + (_2483 << 6u)) >> 2u));
        uint _2503 = _2502.x;
        uint _2504 = _2471.z;
        float _2629;
        float _2631;
        float _2633;
        float _2635;
        float _2637;
        float _2639;
        if (((((1u << ((_2504 >> 4u) & 15u)) + 4294967295u) & _2503) == 0u) || ((_2504 & 240u) == 0u))
        {
            _2629 = 0.0;
            _2631 = 0.0;
            _2633 = 0.0;
            _2635 = 0.0;
            _2637 = 0.0;
            _2639 = 0.0;
        }
        else
        {
            float _2630;
            float _2632;
            float _2634;
            float _2636;
            float _2638;
            float _2640;
            float _2782 = 0.0;
            float _2783 = 0.0;
            float _2784 = 0.0;
            float _2785 = 0.0;
            float _2786 = 0.0;
            float _2787 = 0.0;
            uint _2788 = 0u;
            uint _2797;
            bool _2798;
            for (;;)
            {
                _2797 = texelFetch(g_lightClassification, int((((_2497 << 5u) + (_2483 << 9u)) + (_2788 << 2u)) >> 2u)).x;
                _2798 = _2797 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2798)
                {
                    frontier_phi_63_pred = _2787;
                    frontier_phi_63_pred_1 = _2786;
                    frontier_phi_63_pred_2 = _2785;
                    frontier_phi_63_pred_3 = _2784;
                    frontier_phi_63_pred_4 = _2783;
                    frontier_phi_63_pred_5 = _2782;
                }
                else
                {
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    uint _2912;
                    _2906 = _2782;
                    _2907 = _2783;
                    _2908 = _2784;
                    _2909 = _2785;
                    _2910 = _2786;
                    _2911 = _2787;
                    _2912 = _2797;
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    float _2843;
                    for (;;)
                    {
                        uint _2916 = uint(findLSB(_2912)) + (_2788 << 5u);
                        uint _2913 = (_2912 + 4294967295u) & _2912;
                        uint _2918 = _2916 * 48u;
                        vec4 _2932 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2918)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 3u)).x));
                        uint _2938 = (_2916 * 48u) + 4u;
                        vec4 _2951 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2938)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 3u)).x));
                        uint _2957 = (_2916 * 48u) + 8u;
                        vec3 _2968 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2957)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 2u)).x));
                        float _2972 = _2932.x - _2457;
                        float _2973 = _2932.y - _2458;
                        float _2974 = _2932.z - _2459;
                        float _2975 = dot(vec3(_2972, _2973, _2974), vec3(_2972, _2973, _2974));
                        float _2978 = inversesqrt(_2975);
                        float _2979 = _2978 * _2972;
                        float _2980 = _2978 * _2973;
                        float _2981 = _2978 * _2974;
                        float _2982 = dot(vec3(_599, _602, _605), vec3(_2979, _2980, _2981));
                        float _2987 = 1.0 - (_2975 * _2932.w);
                        float _4323 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                        float _2988 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                        float _2989 = sqrt(_2975) * _2951.w;
                        float _2992 = 1.39999997615814208984375 / (_2989 + 1.39999997615814208984375);
                        float _2993 = _2992 * _2992;
                        float _2996 = ((1.0 - _2993) * _2982) + _2993;
                        float _2999 = _2989 * _2989;
                        float _3002 = ((isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0))) * _2988) / ((_2999 * 0.699999988079071044921875) + 1.0);
                        float _3006 = (-0.0) - _2457;
                        float _3007 = (-0.0) - _2458;
                        float _3008 = (-0.0) - _2459;
                        float _3012 = inversesqrt(dot(vec3(_3006, _3007, _3008), vec3(_3006, _3007, _3008)));
                        float _3013 = _3012 * _3006;
                        float _3014 = _3012 * _3007;
                        float _3015 = _3012 * _3008;
                        float _3023 = exp2(log2(1.0 / ((_2999 * 3.5) + 5.0)) * 0.25);
                        float _3024 = 1.0 - _797;
                        float _3031 = sqrt(1.0 - ((1.0 - (_3024 * _3024)) * (1.0 - (_3023 * _3023))));
                        float _3032 = _3031 * _3031;
                        float _3033 = _3032 * _3032;
                        float _3034 = _3013 + _2979;
                        float _3035 = _3014 + _2980;
                        float _3036 = _3015 + _2981;
                        float _3040 = inversesqrt(dot(vec3(_3034, _3035, _3036), vec3(_3034, _3035, _3036)));
                        float _3044 = dot(vec3(_599, _602, _605), vec3(_3013, _3014, _3015));
                        float _4339 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                        float _3047 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                        float _3048 = dot(vec3(_599, _602, _605), vec3(_3040 * _3034, _3040 * _3035, _3040 * _3036));
                        float _4350 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                        float _3051 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                        float _3055 = ((_3051 * _3051) * (_3033 + (-1.0))) + 1.0;
                        float _3056 = _2992 * _3032;
                        float _3057 = _3056 * _3056;
                        float _3060 = ((1.0 - _3057) * _2982) + _3057;
                        float _4361 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                        float _3061 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                        float _3062 = 1.0 - _3032;
                        float _3072 = (0.5 / (((_3061 * ((_3047 * _3062) + _3032)) + 9.9999999392252902907785028219223e-09) + (((_3061 * _3062) + _3032) * _3047))) * _3061;
                        float _4372 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                        float _3083 = (((_3033 * 3.1415927410125732421875) * (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) / ((_3055 * _3055) * ((_2999 * 2.1991131305694580078125) + 3.141590118408203125))) * _2988;
                        _2841 = (_3002 * _2951.x) + _2909;
                        _2842 = (_3002 * _2951.y) + _2910;
                        _2843 = (_3002 * _2951.z) + _2911;
                        _2838 = (_3083 * _2968.x) + _2906;
                        _2839 = (_3083 * _2968.y) + _2907;
                        _2840 = (_3083 * _2968.z) + _2908;
                        if (_2913 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2906 = _2838;
                            _2907 = _2839;
                            _2908 = _2840;
                            _2909 = _2841;
                            _2910 = _2842;
                            _2911 = _2843;
                            _2912 = _2913;
                        }
                    }
                    frontier_phi_63_pred = _2843;
                    frontier_phi_63_pred_1 = _2842;
                    frontier_phi_63_pred_2 = _2841;
                    frontier_phi_63_pred_3 = _2840;
                    frontier_phi_63_pred_4 = _2839;
                    frontier_phi_63_pred_5 = _2838;
                }
                _2640 = frontier_phi_63_pred;
                _2638 = frontier_phi_63_pred_1;
                _2636 = frontier_phi_63_pred_2;
                _2634 = frontier_phi_63_pred_3;
                _2632 = frontier_phi_63_pred_4;
                _2630 = frontier_phi_63_pred_5;
                uint _2789 = _2788 + 1u;
                if (_2789 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2782 = _2630;
                    _2783 = _2632;
                    _2784 = _2634;
                    _2785 = _2636;
                    _2786 = _2638;
                    _2787 = _2640;
                    _2788 = _2789;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2629 = _2630;
            _2631 = _2632;
            _2633 = _2634;
            _2635 = _2636;
            _2637 = _2638;
            _2639 = _2640;
        }
        uvec4 _2643 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2644 = _2643.z;
        uint _2646 = (_2644 >> 8u) & 15u;
        float _2750;
        float _2752;
        float _2754;
        float _2756;
        float _2758;
        float _2760;
        if (((4294967295u << _2646) & _2503) == 0u)
        {
            _2750 = _2629;
            _2752 = _2631;
            _2754 = _2633;
            _2756 = _2635;
            _2758 = _2637;
            _2760 = _2639;
        }
        else
        {
            float _2775 = inversesqrt(dot(vec3(_2457, _2458, _2459), vec3(_2457, _2458, _2459)));
            float _2776 = _2775 * _2457;
            float _2777 = _2775 * _2458;
            float _2778 = _2775 * _2459;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2646 < ((_2644 >> 12u) & 15u))
            {
                float _2751;
                float _2753;
                float _2755;
                float _2757;
                float _2759;
                float _2761;
                float _2889 = _2629;
                float _2890 = _2631;
                float _2891 = _2633;
                float _2892 = _2635;
                float _2893 = _2637;
                float _2894 = _2639;
                uint _2895 = _2646;
                uint _2904;
                bool _2905;
                for (;;)
                {
                    _2904 = texelFetch(g_lightClassification, int((((_2497 << 5u) + (_2483 << 9u)) + (_2895 << 2u)) >> 2u)).x;
                    _2905 = _2904 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2905)
                    {
                        frontier_phi_69_pred = _2894;
                        frontier_phi_69_pred_1 = _2893;
                        frontier_phi_69_pred_2 = _2892;
                        frontier_phi_69_pred_3 = _2891;
                        frontier_phi_69_pred_4 = _2890;
                        frontier_phi_69_pred_5 = _2889;
                    }
                    else
                    {
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3101 = _2889;
                        float _3102 = _2890;
                        float _3103 = _2891;
                        float _3104 = _2892;
                        float _3105 = _2893;
                        float _3106 = _2894;
                        uint _3107 = _2904;
                        uint _3108;
                        vec4 _3133;
                        float _3134;
                        vec4 _3149;
                        vec3 _3161;
                        vec4 _3176;
                        vec4 _3192;
                        float _3239;
                        bool _3240;
                        for (;;)
                        {
                            uint _3118 = ((_2895 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3107));
                            _3108 = (_3107 + 4294967295u) & _3107;
                            uint _3120 = _3118 * 40u;
                            _3133 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 3u)).x));
                            _3134 = _3133.w;
                            uint _3136 = (_3118 * 40u) + 4u;
                            _3149 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 3u)).x));
                            uint _3151 = (_3118 * 40u) + 8u;
                            _3161 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x));
                            uint _3163 = (_3118 * 40u) + 16u;
                            _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            uint _3179 = (_3118 * 40u) + 20u;
                            _3192 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 3u)).x));
                            uint _3195 = (_3118 * 40u) + 24u;
                            vec4 _3208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 3u)).x));
                            uint _3214 = (_3118 * 40u) + 28u;
                            vec4 _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            _3239 = fma(_2459, _3227.z, fma(_2458, _3227.y, _3227.x * _2457)) + _3227.w;
                            _3240 = !((fma(_2459, _3208.z, fma(_2458, _3208.y, _3208.x * _2457)) + _3208.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3240)
                            {
                                float _3267 = _3133.x - _2457;
                                float _3268 = _3133.y - _2458;
                                float _3269 = _3133.z - _2459;
                                float _3270 = dot(vec3(_3267, _3268, _3269), vec3(_3267, _3268, _3269));
                                float _3273 = inversesqrt(_3270);
                                float _3274 = _3273 * _3267;
                                float _3275 = _3273 * _3268;
                                float _3276 = _3273 * _3269;
                                float _3280 = 1.0 - (_3270 / (_3134 * _3134));
                                float _4383 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3281 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                                float _3285 = sqrt(_3270) * _3149.w;
                                float _3287 = 1.39999997615814208984375 / (_3285 + 1.39999997615814208984375);
                                float _3288 = _3287 * _3287;
                                float _3291 = ((1.0 - _3288) * dot(vec3(_3274, _3275, _3276), vec3(_599, _602, _605))) + _3288;
                                float _3294 = _3285 * _3285;
                                float _3298 = (fma(_2459, _3176.z, fma(_2458, _3176.y, _3176.x * _2457)) + _3176.w) / _3239;
                                float _3299 = (fma(_2459, _3192.z, fma(_2458, _3192.y, _3192.x * _2457)) + _3192.w) / _3239;
                                float _3303 = 1.0 - dot(vec2(_3298, _3299), vec2(_3298, _3299));
                                float _4399 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3304 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                                float _3305 = _3304 * (((isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0))) * _3281) / ((_3294 * 0.699999988079071044921875) + 1.0));
                                float _3317 = exp2(log2(1.0 / ((_3294 * 3.5) + 5.0)) * 0.25);
                                float _3318 = 1.0 - _797;
                                float _3325 = sqrt(1.0 - ((1.0 - (_3318 * _3318)) * (1.0 - (_3317 * _3317))));
                                float _3326 = _3325 * _3325;
                                float _3327 = _3326 * _3326;
                                float _3328 = _3274 - _2776;
                                float _3329 = _3275 - _2777;
                                float _3330 = _3276 - _2778;
                                float _3334 = inversesqrt(dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330)));
                                float _3338 = dot(vec3(_599, _602, _605), vec3((-0.0) - _2776, (-0.0) - _2777, (-0.0) - _2778));
                                float _4410 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                                float _3341 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                                float _3342 = dot(vec3(_599, _602, _605), vec3(_3334 * _3328, _3334 * _3329, _3334 * _3330));
                                float _4421 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                                float _3345 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                                float _3349 = ((_3345 * _3345) * (_3327 + (-1.0))) + 1.0;
                                float _3350 = _3287 * _3326;
                                float _3351 = _3350 * _3350;
                                float _3357 = ((1.0 - _3351) * dot(vec3(_599, _602, _605), vec3(_3274, _3275, _3276))) + _3351;
                                float _4432 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3358 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                                float _3359 = 1.0 - _3326;
                                float _3369 = (0.5 / (((_3358 * ((_3341 * _3359) + _3326)) + 9.9999999392252902907785028219223e-09) + (((_3358 * _3359) + _3326) * _3341))) * _3358;
                                float _4443 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                                float _3379 = (_3304 * _3281) * (((_3327 * 3.1415927410125732421875) * (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0)))) / ((_3349 * _3349) * ((_3294 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3305 * _3149.z;
                                frontier_phi_75_pred_1 = _3305 * _3149.y;
                                frontier_phi_75_pred_2 = _3305 * _3149.x;
                                frontier_phi_75_pred_3 = _3379 * _3161.z;
                                frontier_phi_75_pred_4 = _3379 * _3161.y;
                                frontier_phi_75_pred_5 = _3379 * _3161.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3388 = frontier_phi_75_pred;
                            _3387 = frontier_phi_75_pred_1;
                            _3386 = frontier_phi_75_pred_2;
                            _3385 = frontier_phi_75_pred_3;
                            _3384 = frontier_phi_75_pred_4;
                            _3383 = frontier_phi_75_pred_5;
                            _3091 = _3386 + _3104;
                            _3092 = _3387 + _3105;
                            _3093 = _3388 + _3106;
                            _3088 = _3383 + _3101;
                            _3089 = _3384 + _3102;
                            _3090 = _3385 + _3103;
                            if (_3108 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3101 = _3088;
                                _3102 = _3089;
                                _3103 = _3090;
                                _3104 = _3091;
                                _3105 = _3092;
                                _3106 = _3093;
                                _3107 = _3108;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3093;
                        frontier_phi_69_pred_1 = _3092;
                        frontier_phi_69_pred_2 = _3091;
                        frontier_phi_69_pred_3 = _3090;
                        frontier_phi_69_pred_4 = _3089;
                        frontier_phi_69_pred_5 = _3088;
                    }
                    _2761 = frontier_phi_69_pred;
                    _2759 = frontier_phi_69_pred_1;
                    _2757 = frontier_phi_69_pred_2;
                    _2755 = frontier_phi_69_pred_3;
                    _2753 = frontier_phi_69_pred_4;
                    _2751 = frontier_phi_69_pred_5;
                    uint _2896 = _2895 + 1u;
                    if (_2896 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2889 = _2751;
                        _2890 = _2753;
                        _2891 = _2755;
                        _2892 = _2757;
                        _2893 = _2759;
                        _2894 = _2761;
                        _2895 = _2896;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2761;
                frontier_phi_57_58_ladder_1 = _2759;
                frontier_phi_57_58_ladder_2 = _2757;
                frontier_phi_57_58_ladder_3 = _2755;
                frontier_phi_57_58_ladder_4 = _2753;
                frontier_phi_57_58_ladder_5 = _2751;
            }
            else
            {
                frontier_phi_57_58_ladder = _2639;
                frontier_phi_57_58_ladder_1 = _2637;
                frontier_phi_57_58_ladder_2 = _2635;
                frontier_phi_57_58_ladder_3 = _2633;
                frontier_phi_57_58_ladder_4 = _2631;
                frontier_phi_57_58_ladder_5 = _2629;
            }
            _2750 = frontier_phi_57_58_ladder_5;
            _2752 = frontier_phi_57_58_ladder_4;
            _2754 = frontier_phi_57_58_ladder_3;
            _2756 = frontier_phi_57_58_ladder_2;
            _2758 = frontier_phi_57_58_ladder_1;
            _2760 = frontier_phi_57_58_ladder;
        }
        float _2765 = isnan(1.0) ? _787 : (isnan(_787) ? 1.0 : min(_787, 1.0));
        _2515 = (_2765 * _2756) + _1952;
        _2517 = (_2765 * _2758) + _1954;
        _2519 = (_2765 * _2760) + _1956;
        _2521 = ((_2750 * _773) * _2765) + _2297;
        _2523 = ((_2752 * _774) * _2765) + _2299;
        _2525 = ((_2754 * _775) * _2765) + _2301;
    }
    else
    {
        _2515 = _1952;
        _2517 = _1954;
        _2519 = _1956;
        _2521 = _2297;
        _2523 = _2299;
        _2525 = _2301;
    }
    uint _2531 = _680 + uint(cbMatDynParam._m0[0u].w);
    float _2537 = cbInstanceData._m0[_2531].x * ((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _471) + cbMatDynParam._m0[7u].x) + (((_512 - (_512 * _436)) + (cbMatDynParam._m0[11u].x * _543)) * cbMatDynParam._m0[9u].x));
    float _2538 = cbInstanceData._m0[_2531].y * ((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _471) + cbMatDynParam._m0[7u].y) + (((_514 - (_514 * _436)) + (cbMatDynParam._m0[11u].y * _543)) * cbMatDynParam._m0[9u].y));
    float _2539 = cbInstanceData._m0[_2531].z * ((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _471) + cbMatDynParam._m0[7u].z) + (((_516 - (_516 * _436)) + (cbMatDynParam._m0[11u].z * _543)) * cbMatDynParam._m0[9u].z));
    float _4459 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _4470 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _4481 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _4492 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _2557 = (((isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2515 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _787))) + ((_2521 + ((isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))) * _1587)) * cbPerFrame._m0[3u].x)) + _2537;
    float _2559 = (_2538 + ((_2523 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1587)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_2517 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _787)));
    float _2561 = (_2539 + ((_2525 + ((isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))) * _1587)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2519 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _787)));
    float _2569 = cbMatDynParam._m0[12u].y - (cbMatDynParam._m0[12u].y * ((((isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) - _498) * _471) + _498));
    float _2574 = cbInstanceData._m0[_679 + 6u].w * (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0)));
    float _2579 = _575 / cbSceneParam._m0[86u].x;
    float _2580 = _576 / cbSceneParam._m0[86u].y;
    vec4 _2594 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2579, _2580, (log2((isnan(cbSceneParam._m0[77u].w) ? _569 : (isnan(_569) ? cbSceneParam._m0[77u].w : min(_569, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2596 = _2594.x;
    float _2597 = _2594.y;
    float _2598 = _2594.z;
    float _2599 = _2594.w;
    float _2691;
    float _2693;
    float _2695;
    float _2697;
    if (_569 > cbSceneParam._m0[78u].w)
    {
        float _2654 = isnan(_569) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _569 : min(cbSceneParam._m0[80u].w, _569));
        float _2655 = _2654 / _569;
        float _2666 = _2655 * _279;
        float _2667 = _280 * _2655;
        float _2668 = (-0.0) - _2667;
        float _2669 = _2655 * _281;
        float _2671 = (cbSceneParam._m0[77u].w * _2668) / _2654;
        float _2672 = _2671 + cbSceneParam._m0[79u].w;
        float _2673 = cbSceneParam._m0[79u].w - _2667;
        float _2679 = sqrt(((_2666 * _2666) + (_2667 * _2667)) + (_2669 * _2669));
        float _2682 = (1.0 - (cbSceneParam._m0[77u].w / _2654)) * _2679;
        float _2687 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2689 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2851;
        if (abs((_2668 - _2671) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2851 = ((((_2672 > 0.0) ? exp2(_2687 * _2672) : (2.0 - exp2(_2689 * _2672))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2682;
        }
        else
        {
            float _2811 = 1.0 / cbSceneParam._m0[80u].x;
            float _2812 = isnan(_2673) ? _2672 : (isnan(_2672) ? _2673 : max(_2672, _2673));
            float _2813 = isnan(_2673) ? _2672 : (isnan(_2672) ? _2673 : min(_2672, _2673));
            float _2822 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : min(_2812, 0.0));
            float _2823 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : min(_2813, 0.0));
            _2851 = ((abs(_2679 / _2668) * cbSceneParam._m0[80u].y) * ((((_2822 - _2823) * 2.0) - ((exp2(_2687 * (isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0)))) - exp2(_2687 * (isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0))))) * _2811)) - ((exp2(_2689 * _2822) - exp2(_2689 * _2823)) * _2811))) + (_2682 * cbSceneParam._m0[80u].z);
        }
        vec4 _2853 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2579, _2580, 1.0), 0.0);
        float _2862 = exp2((_2851 * (-1.44269502162933349609375)) * (1.0 - _2853.w));
        float _2863 = log2(_2862);
        float _2879 = log2(_2599);
        _2691 = (exp2(_2879 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2863 * cbSceneParam._m0[78u].x)) * _2853.x) / cbSceneParam._m0[78u].x)) + _2596;
        _2693 = (exp2(_2879 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2863 * cbSceneParam._m0[78u].y)) * _2853.y) / cbSceneParam._m0[78u].y)) + _2597;
        _2695 = (exp2(_2879 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2863 * cbSceneParam._m0[78u].z)) * _2853.z) / cbSceneParam._m0[78u].z)) + _2598;
        _2697 = _2862 * _2599;
    }
    else
    {
        _2691 = _2596;
        _2693 = _2597;
        _2695 = _2598;
        _2697 = _2599;
    }
    float _2709 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2710 = _2709 == 3.0;
    float _2711 = log2(_2697);
    float _2715 = exp2(_2711 * cbSceneParam._m0[78u].x);
    float _2716 = exp2(_2711 * cbSceneParam._m0[78u].y);
    float _2717 = exp2(_2711 * cbSceneParam._m0[78u].z);
    float _2718 = _2715 * (isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0)));
    float _2719 = _2716 * (isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0)));
    float _2720 = _2717 * (isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0)));
    float _2729 = (_2709 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2729 * (_2710 ? _2718 : (_2718 + (cbSceneParam._m0[72u].w * _2691)));
    SV_Target.y = _2729 * (_2710 ? _2719 : (_2719 + (cbSceneParam._m0[72u].w * _2693)));
    SV_Target.z = _2729 * (_2710 ? _2720 : (_2720 + (cbSceneParam._m0[72u].w * _2695)));
    SV_Target.w = _2574;
    SV_Target_1.x = ((_2569 * _2537) * _2715) * _2729;
    SV_Target_1.y = ((_2569 * _2538) * _2716) * _2729;
    SV_Target_1.z = ((_2569 * _2539) * _2717) * _2729;
    SV_Target_1.w = _2574;
}


