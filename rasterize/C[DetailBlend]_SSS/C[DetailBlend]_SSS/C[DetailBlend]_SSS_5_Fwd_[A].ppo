#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1252;
float _3640;
float _3641;
float _3642;
float _3643;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234;
    float _235;
    float _236;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
    }
    else
    {
        _234 = _220;
        _235 = _221;
        _236 = _222;
    }
    vec4 _250 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _255 = _250.z;
    float _262 = exp2(log2(_255 * 22.0) * 260.0);
    float _263 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _264 = isnan(1.0) ? _263 : (isnan(_263) ? 1.0 : min(_263, 1.0));
    vec4 _278 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _289 = cbMtdParam._m0[10u].x * _278.x;
    float _290 = cbMtdParam._m0[10u].y * _278.y;
    float _291 = cbMtdParam._m0[10u].z * _278.z;
    vec4 _303 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _319 = exp2(log2(1.0 - _250.w) * 8.0);
    vec4 _331 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _356 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _378 = (((((_303.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _356.x) - _289) * _264) + _289;
    float _379 = (((((_303.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _356.y) - _290) * _264) + _290;
    float _380 = (((((_303.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _356.z) - _291) * _264) + _291;
    float _387 = (((cbMtdParam._m0[12u].x * _331.x) - _378) * _319) + _378;
    float _388 = (((cbMtdParam._m0[12u].y * _331.y) - _379) * _319) + _379;
    float _389 = (((cbMtdParam._m0[12u].z * _331.z) - _380) * _319) + _380;
    float _390 = _356.w * _303.w;
    float _418 = (((texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _264) + cbMtdParam._m0[15u].y;
    float _421 = ((cbMtdParam._m0[14u].y - _418) * _319) + _418;
    vec4 _434 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _436 = _434.x;
    float _437 = _434.y;
    float _443 = cbMtdParam._m0[13u].y + _434.z;
    vec4 _455 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _474 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _485 = ((((_255 * 2.0) * (cbMtdParam._m0[13u].x + _455.z)) - _443) * _264) + _443;
    float _489 = (((_474.z - _485) + cbMtdParam._m0[14u].x) * _319) + _485;
    float _493 = (_250.x * 2.0) + (-1.0);
    float _495 = (_250.y * 2.0) + (-1.0);
    float _496 = dot(vec2(_493, _495), vec2(_493, _495));
    float _3662 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _501 = sqrt(1.0 - (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))));
    float _506 = ((_455.x - _436) * _264) + _436;
    float _507 = ((_455.y - _437) * _264) + _437;
    float _520 = ((((((_474.x - _506) * _319) + _506) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _493;
    float _521 = ((((((_474.y - _507) * _319) + _507) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _495;
    float _524 = fma(_501, _234, fma(_521, _226 * TANGENT.x, (_212 * _204) * _520));
    float _527 = fma(_501, _235, fma(_521, _226 * TANGENT.y, (_212 * _205) * _520));
    float _530 = fma(_501, _236, fma(_521, _226 * TANGENT.z, (_212 * _206) * _520));
    float _534 = inversesqrt(dot(vec3(_524, _527, _530), vec3(_524, _527, _530)));
    float _535 = _534 * _524;
    float _536 = _534 * _527;
    float _537 = _534 * _530;
    float _3673 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _538 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _3684 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _539 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _3695 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _540 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _3706 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _541 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _3717 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _542 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _3728 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _543 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _559 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _600 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _610 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _600);
    float _611 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _600);
    float _612 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _600);
    float _616 = inversesqrt(dot(vec3(_610, _611, _612), vec3(_610, _611, _612)));
    float _617 = _610 * _616;
    float _618 = _611 * _616;
    float _619 = _612 * _616;
    vec4 _624 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _626 = _624.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _931 = sqrt(((_610 * _610) + (_611 * _611)) + (_612 * _612));
        float _937 = (cbMatDynParam._m0[5u].x * _931) + cbMatDynParam._m0[5u].y;
        float _3739 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _942 = (cbMatDynParam._m0[5u].z * _931) + cbMatDynParam._m0[5u].w;
        float _3750 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) - _938)) + _938) < ((_626 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _637 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _638 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _640 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _642 = _640.w;
    float _661 = fma(_537, cbSceneParam._m0[5u].z, fma(_536, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _535));
    float _664 = fma(_537, cbSceneParam._m0[6u].z, fma(_536, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _535));
    float _667 = fma(_537, cbSceneParam._m0[7u].z, fma(_536, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _535));
    vec4 _669 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _671 = _669.x;
    float _683 = (((_669.y - _539) + (_669.w * _539)) * cbMtdParam._m0[3u].x) + _539;
    vec4 _684 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _700 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_671 * _671)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _684.z;
    float _708 = (((cbMatDynParam._m0[15u].x - _543) * cbMatDynParam._m0[15u].w) * _700) + _543;
    float _716 = ((_700 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _683)) + _683;
    uint _740 = uint(roundEven(NORMAL.w)) * 13u;
    uint _741 = _740 + 9u;
    uint _742 = _741 + uint(cbMatDynParam._m0[0u].w);
    float _748 = (cbMtdParam._m0[0u].x * _540) * cbInstanceData._m0[_742].x;
    float _749 = (cbMtdParam._m0[0u].y * _541) * cbInstanceData._m0[_742].y;
    float _750 = (cbMtdParam._m0[0u].z * _542) * cbInstanceData._m0[_742].z;
    float _3761 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _751 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _3772 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _752 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _3783 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _753 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    vec4 _754 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _759 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _770 = (((_759.x - _708) + (_759.w * _708)) * cbMtdParam._m0[3u].x) + _708;
    float _783 = (cbMtdParam._m0[3u].x * (((_751 * _642) - _751) + _754.x)) + _751;
    float _784 = (cbMtdParam._m0[3u].x * (((_752 * _642) - _752) + _754.y)) + _752;
    float _785 = (cbMtdParam._m0[3u].x * (((_753 * _642) - _753) + _754.z)) + _753;
    vec4 _786 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _799 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_708 * (_540 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_708 * (_541 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_708 * (_542 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _786.z;
    float _803 = _799 * cbMatDynParam._m0[13u].w;
    float _813 = (_803 * (cbMatDynParam._m0[13u].x - _783)) + _783;
    float _814 = (_803 * (cbMatDynParam._m0[13u].y - _784)) + _784;
    float _815 = (_803 * (cbMatDynParam._m0[13u].z - _785)) + _785;
    float _823 = ((_799 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _770)) + _770;
    float _824 = 1.0 - _823;
    float _825 = _824 * _813;
    float _826 = _824 * _814;
    float _827 = _824 * _815;
    float _831 = (_813 + (-0.039999999105930328369140625)) * _823;
    float _832 = (_814 + (-0.039999999105930328369140625)) * _823;
    float _833 = (_815 + (-0.039999999105930328369140625)) * _823;
    float _834 = _831 + 0.039999999105930328369140625;
    float _835 = _832 + 0.039999999105930328369140625;
    float _836 = _833 + 0.039999999105930328369140625;
    vec4 _845 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _637, cbSceneParam._m0[86u].y * _638));
    float _848 = _845.x * TEXCOORD_4;
    float _849 = dot(vec3(_535, _536, _537), vec3(_617, _618, _619));
    float _852 = _849 * 2.0;
    float _856 = (_852 * _535) - _617;
    float _857 = (_852 * _536) - _618;
    float _858 = (_852 * _537) - _619;
    float _862 = abs(dot(vec3(_617, _618, _619), vec3(_535, _536, _537)));
    float _3794 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _864 = sqrt(_716);
    float _877 = exp2((_864 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_864 * 3.0));
    float _883 = (1.0 - _877) * ((_864 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _884 = _877 * _864;
    float _912 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _916 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _920 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1251;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _976 = fma(_920, cbModelParam._m0[26u].z, fma(_916, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _912));
        float _980 = fma(_920, cbModelParam._m0[27u].z, fma(_916, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _912));
        float _984 = fma(_920, cbModelParam._m0[28u].z, fma(_916, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _912));
        float _1009 = _912 + _535;
        float _1010 = _916 + _536;
        float _1011 = _920 + _537;
        float _1021 = fma(_1011, cbModelParam._m0[26u].z, fma(_1010, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1009)) - _976;
        float _1022 = fma(_1011, cbModelParam._m0[27u].z, fma(_1010, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1009)) - _980;
        float _1023 = fma(_1011, cbModelParam._m0[28u].z, fma(_1010, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1009)) - _984;
        float _1027 = inversesqrt(dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023)));
        float _1040 = ((_1027 * _1021) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_976 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1041 = ((_1027 * _1022) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_980 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1042 = ((_1027 * _1023) / cbModelParam._m0[34u].z) + ((((((_984 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        float _1079 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1045.x + (-0.5));
        float _1081 = _1079 * (_1045.y + (-0.5));
        float _1082 = _1079 * (_1045.z + (-0.5));
        float _1089 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1052.x + (-0.5));
        float _1091 = _1089 * (_1052.y + (-0.5));
        float _1092 = _1089 * (_1052.z + (-0.5));
        float _1099 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1059.x + (-0.5));
        float _1101 = _1099 * (_1059.y + (-0.5));
        float _1102 = _1099 * (_1059.z + (-0.5));
        float _1109 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1066.x + (-0.5));
        float _1111 = _1109 * (_1066.y + (-0.5));
        float _1112 = _1109 * (_1066.z + (-0.5));
        float _1113 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1114 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1115 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1116 = _1080 * 0.5;
        float _1117 = _1090 * 0.5;
        float _1118 = _1100 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1133 = (dot(vec3(_535, _536, _537), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _3820 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1143 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1113 + 9.9999997473787516355514526367188e-06);
        float _3831 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _3842 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1145 + 1.0))) + _1150) * _1113;
        float _1160 = _1081 * 0.5;
        float _1161 = _1091 * 0.5;
        float _1162 = _1101 * 0.5;
        float _1163 = dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162));
        float _1168 = (_1163 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1163);
        float _1176 = (dot(vec3(_535, _536, _537), vec3(_1168 * _1160, _1168 * _1161, _1168 * _1162)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1185 = sqrt(((_1161 * _1161) + (_1160 * _1160)) + (_1162 * _1162)) / (_1114 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1187 = _1186 * 2.0;
        float _1191 = (1.0 - _1186) / (_1186 + 1.0);
        float _3875 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1201 = ((((1.0 - _1192) * (_1187 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1187 + 1.0))) + _1192) * _1114;
        float _1202 = _1082 * 0.5;
        float _1203 = _1092 * 0.5;
        float _1204 = _1102 * 0.5;
        float _1205 = dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204));
        float _1210 = (_1205 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1205);
        float _1218 = (dot(vec3(_535, _536, _537), vec3(_1210 * _1202, _1210 * _1203, _1210 * _1204)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1227 = sqrt(((_1203 * _1203) + (_1202 * _1202)) + (_1204 * _1204)) / (_1115 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _3908 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1229 + 1.0))) + _1234) * _1115;
        _1251 = _1082;
        _1253 = _1081;
        _1254 = _1080;
        _1255 = _1092;
        _1256 = _1091;
        _1257 = _1090;
        _1258 = _1102;
        _1259 = _1101;
        _1260 = _1100;
        _1261 = _1115;
        _1262 = _1114;
        _1263 = _1113;
        _1264 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
        _1265 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)));
        _1266 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
    }
    else
    {
        _1251 = _1252;
        _1253 = _1252;
        _1254 = _1252;
        _1255 = _1252;
        _1256 = _1252;
        _1257 = _1252;
        _1258 = _1252;
        _1259 = _1252;
        _1260 = _1252;
        _1261 = _1252;
        _1262 = _1252;
        _1263 = _1252;
        _1264 = 0.0;
        _1265 = 0.0;
        _1266 = 0.0;
    }
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1295 = fma(_920, cbModelParam._m0[30u].z, fma(_916, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _912));
        float _1299 = fma(_920, cbModelParam._m0[31u].z, fma(_916, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _912));
        float _1303 = fma(_920, cbModelParam._m0[32u].z, fma(_916, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _912));
        float _1326 = _912 + _535;
        float _1327 = _916 + _536;
        float _1328 = _920 + _537;
        float _1338 = fma(_1328, cbModelParam._m0[30u].z, fma(_1327, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1326)) - _1295;
        float _1339 = fma(_1328, cbModelParam._m0[31u].z, fma(_1327, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1326)) - _1299;
        float _1340 = fma(_1328, cbModelParam._m0[32u].z, fma(_1327, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1326)) - _1303;
        float _1344 = inversesqrt(dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340)));
        float _1357 = ((_1344 * _1338) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1295 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1358 = ((_1344 * _1339) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1299 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1359 = ((_1344 * _1340) / cbModelParam._m0[35u].z) + ((((((_1303 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        float _1394 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1361.x + (-0.5));
        float _1396 = _1394 * (_1361.y + (-0.5));
        float _1397 = _1394 * (_1361.z + (-0.5));
        float _1404 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1368.x + (-0.5));
        float _1406 = _1404 * (_1368.y + (-0.5));
        float _1407 = _1404 * (_1368.z + (-0.5));
        float _1414 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1375.x + (-0.5));
        float _1416 = _1414 * (_1375.y + (-0.5));
        float _1417 = _1414 * (_1375.z + (-0.5));
        float _1424 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1425 = _1424 * (_1382.x + (-0.5));
        float _1426 = _1424 * (_1382.y + (-0.5));
        float _1427 = _1424 * (_1382.z + (-0.5));
        float _1428 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1429 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = _1395 * 0.5;
        float _1432 = _1405 * 0.5;
        float _1433 = _1415 * 0.5;
        float _1434 = dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433));
        float _1439 = (_1434 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1434);
        float _1447 = (dot(vec3(_535, _536, _537), vec3(_1439 * _1431, _1439 * _1432, _1439 * _1433)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1456 = sqrt(((_1432 * _1432) + (_1431 * _1431)) + (_1433 * _1433)) / (_1428 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1458 = _1457 * 2.0;
        float _1462 = (1.0 - _1457) / (_1457 + 1.0);
        float _3971 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1472 = ((((1.0 - _1463) * (_1458 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1458 + 1.0))) + _1463) * _1428;
        float _1473 = _1396 * 0.5;
        float _1474 = _1406 * 0.5;
        float _1475 = _1416 * 0.5;
        float _1476 = dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475));
        float _1481 = (_1476 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1476);
        float _1489 = (dot(vec3(_535, _536, _537), vec3(_1481 * _1473, _1481 * _1474, _1481 * _1475)) + 1.0) * 0.5;
        float _3982 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1498 = sqrt(((_1474 * _1474) + (_1473 * _1473)) + (_1475 * _1475)) / (_1429 + 9.9999997473787516355514526367188e-06);
        float _3993 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _4004 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1500 + 1.0))) + _1505) * _1429;
        float _1515 = _1397 * 0.5;
        float _1516 = _1407 * 0.5;
        float _1517 = _1417 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1531 = (dot(vec3(_535, _536, _537), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1540 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _4037 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1542 + 1.0))) + _1547) * _1430;
        _1564 = _1397;
        _1565 = _1396;
        _1566 = _1395;
        _1567 = _1407;
        _1568 = _1406;
        _1569 = _1405;
        _1570 = _1417;
        _1571 = _1416;
        _1572 = _1415;
        _1573 = _1430;
        _1574 = _1429;
        _1575 = _1428;
        _1576 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)));
        _1577 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
        _1578 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
    }
    else
    {
        _1564 = _1252;
        _1565 = _1252;
        _1566 = _1252;
        _1567 = _1252;
        _1568 = _1252;
        _1569 = _1252;
        _1570 = _1252;
        _1571 = _1252;
        _1572 = _1252;
        _1573 = _1252;
        _1574 = _1252;
        _1575 = _1252;
        _1576 = 0.0;
        _1577 = 0.0;
        _1578 = 0.0;
    }
    float _1588 = (cbModelParam._m0[1u].x * (_1576 - _1264)) + _1264;
    float _1589 = (cbModelParam._m0[1u].x * (_1577 - _1265)) + _1265;
    float _1590 = (cbModelParam._m0[1u].x * (_1578 - _1266)) + _1266;
    float _1611 = fma(_1590, cbSceneParam._m0[89u].z, fma(_1589, cbSceneParam._m0[89u].y, _1588 * cbSceneParam._m0[89u].x));
    float _1614 = fma(_1590, cbSceneParam._m0[90u].z, fma(_1589, cbSceneParam._m0[90u].y, _1588 * cbSceneParam._m0[90u].x));
    float _1617 = fma(_1590, cbSceneParam._m0[91u].z, fma(_1589, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1588));
    float _1632 = _856 * 0.5;
    float _1633 = _857 * 0.5;
    float _1634 = _858 * 0.5;
    float _1635 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1566, _1569, _1572, _1575));
    float _1638 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1565, _1568, _1571, _1574));
    float _1641 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1564, _1567, _1570, _1573));
    float _1672;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1648 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1251, _1255, _1258, _1261));
        float _1652 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1253, _1256, _1259, _1262));
        float _1656 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1254, _1257, _1260, _1263));
        float _1663 = dot(vec4(cbModelParam._m0[39u]), vec4(_1632, _1633, _1634, 1.0));
        _1672 = dot(vec3(isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)), isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1663) ? 0.0 : (isnan(0.0) ? _1663 : max(0.0, _1663))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1672 = 1.0;
    }
    float _1683;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1674 = dot(vec4(cbModelParam._m0[40u]), vec4(_1632, _1633, _1634, 1.0));
        _1683 = dot(vec3(isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)), isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)), isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1674) ? 0.0 : (isnan(0.0) ? _1674 : max(0.0, _1674))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1683 = 1.0;
    }
    float _1687 = (_1683 * cbModelParam._m0[1u].x) + (_1672 * (1.0 - cbModelParam._m0[1u].x));
    float _1697 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _716);
    float _1698 = isnan(_1697) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1697 : min(cbModelParam._m0[25u].z, _1697));
    float _1778;
    float _1780;
    float _1782;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1745 = fma(_920, cbModelParam._m0[13u].z, fma(_916, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _912)) + cbModelParam._m0[13u].w;
        float _1749 = fma(_920, cbModelParam._m0[14u].z, fma(_916, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _912)) + cbModelParam._m0[14u].w;
        float _1753 = fma(_920, cbModelParam._m0[15u].z, fma(_916, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _912)) + cbModelParam._m0[15u].w;
        float _1756 = fma(_858, cbModelParam._m0[13u].z, fma(_857, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _856));
        float _1759 = fma(_858, cbModelParam._m0[14u].z, fma(_857, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _856));
        float _1762 = fma(_858, cbModelParam._m0[15u].z, fma(_857, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _856));
        float _1790;
        if (_1756 > 0.0)
        {
            _1790 = abs((1.0 - _1745) / _1756);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1745 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1790 = frontier_phi_19_17_ladder;
        }
        float _1996;
        if (_1759 > 0.0)
        {
            _1996 = abs((1.0 - _1749) / _1759);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1749 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1996 = frontier_phi_28_24_ladder;
        }
        float _2250;
        if (_1762 > 0.0)
        {
            _2250 = abs((1.0 - _1753) / _1762);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1753 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2250 = frontier_phi_40_35_ladder;
        }
        float _2252 = isnan(_1996) ? _1790 : (isnan(_1790) ? _1996 : min(_1790, _1996));
        float _2253 = isnan(_2250) ? _2252 : (isnan(_2252) ? _2250 : min(_2252, _2250));
        float _2257 = (_2253 * _1756) + _1745;
        float _2258 = (_2253 * _1759) + _1749;
        float _2259 = (_2253 * _1762) + _1753;
        float _2260 = _2253 * 9.9999997473787516355514526367188e-05;
        float _2262 = (-1.0) - _2260;
        float _2264 = _2260 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2259 > _2264) || ((_2259 < _2262) || ((_2258 > _2264) || ((_2258 < _2262) || ((_2257 < _2262) || (_2257 > _2264))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2387 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2259, cbModelParam._m0[9u].z, fma(_2258, cbModelParam._m0[9u].y, _2257 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2259, cbModelParam._m0[10u].z, fma(_2258, cbModelParam._m0[10u].y, _2257 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2259, cbModelParam._m0[11u].z, fma(_2258, cbModelParam._m0[11u].y, _2257 * cbModelParam._m0[11u].x))), _1698);
            frontier_phi_18_40_ladder = _2387.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2387.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2387.x * cbModelParam._m0[1u].y;
        }
        _1778 = frontier_phi_18_40_ladder_2;
        _1780 = frontier_phi_18_40_ladder_1;
        _1782 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1766 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_856, _857, _858), _1698);
        _1778 = _1766.x * cbModelParam._m0[1u].y;
        _1780 = _1766.y * cbModelParam._m0[1u].y;
        _1782 = _1766.z * cbModelParam._m0[1u].y;
    }
    float _1786 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _716);
    float _1787 = isnan(_1786) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1786 : min(cbModelParam._m0[25u].w, _1786));
    float _1880;
    float _1882;
    float _1884;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1844 = fma(_920, cbModelParam._m0[21u].z, fma(_916, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _912)) + cbModelParam._m0[21u].w;
        float _1848 = fma(_920, cbModelParam._m0[22u].z, fma(_916, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _912)) + cbModelParam._m0[22u].w;
        float _1852 = fma(_920, cbModelParam._m0[23u].z, fma(_916, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _912)) + cbModelParam._m0[23u].w;
        float _1855 = fma(_858, cbModelParam._m0[21u].z, fma(_857, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _856));
        float _1858 = fma(_858, cbModelParam._m0[22u].z, fma(_857, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _856));
        float _1861 = fma(_858, cbModelParam._m0[23u].z, fma(_857, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _856));
        float _2001;
        if (_1855 > 0.0)
        {
            _2001 = abs((1.0 - _1844) / _1855);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1844 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2001 = frontier_phi_30_26_ladder;
        }
        float _2277;
        if (_1858 > 0.0)
        {
            _2277 = abs((1.0 - _1848) / _1858);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1848 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2277 = frontier_phi_42_37_ladder;
        }
        float _2490;
        if (_1861 > 0.0)
        {
            _2490 = abs((1.0 - _1852) / _1861);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1852 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2490 = frontier_phi_51_48_ladder;
        }
        float _2492 = isnan(_2277) ? _2001 : (isnan(_2001) ? _2277 : min(_2001, _2277));
        float _2493 = isnan(_2490) ? _2492 : (isnan(_2492) ? _2490 : min(_2492, _2490));
        float _2497 = (_2493 * _1855) + _1844;
        float _2498 = (_2493 * _1858) + _1848;
        float _2499 = (_2493 * _1861) + _1852;
        float _2500 = _2493 * 9.9999997473787516355514526367188e-05;
        float _2501 = (-1.0) - _2500;
        float _2503 = _2500 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2499 > _2503) || ((_2499 < _2501) || ((_2498 > _2503) || ((_2498 < _2501) || ((_2497 < _2501) || (_2497 > _2503))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2702 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2499, cbModelParam._m0[17u].z, fma(_2498, cbModelParam._m0[17u].y, _2497 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2499, cbModelParam._m0[18u].z, fma(_2498, cbModelParam._m0[18u].y, _2497 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2499, cbModelParam._m0[19u].z, fma(_2498, cbModelParam._m0[19u].y, _2497 * cbModelParam._m0[19u].x))), _1787);
            frontier_phi_27_51_ladder = _2702.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2702.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2702.x * cbModelParam._m0[1u].z;
        }
        _1880 = frontier_phi_27_51_ladder_2;
        _1882 = frontier_phi_27_51_ladder_1;
        _1884 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1864 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_856, _857, _858), _1787);
        _1880 = _1864.x * cbModelParam._m0[1u].z;
        _1882 = _1864.y * cbModelParam._m0[1u].z;
        _1884 = _1864.z * cbModelParam._m0[1u].z;
    }
    float _1897 = (((_883 * _834) + _884) * _848) * ((cbModelParam._m0[1u].w * (_1880 - _1778)) + _1778);
    float _1899 = (((_883 * _835) + _884) * _848) * ((cbModelParam._m0[1u].w * (_1882 - _1780)) + _1780);
    float _1901 = (((_883 * _836) + _884) * _848) * ((cbModelParam._m0[1u].w * (_1884 - _1782)) + _1782);
    float _1904 = fma(_1901, cbSceneParam._m0[89u].z, fma(_1899, cbSceneParam._m0[89u].y, _1897 * cbSceneParam._m0[89u].x));
    float _1907 = fma(_1901, cbSceneParam._m0[90u].z, fma(_1899, cbSceneParam._m0[90u].y, _1897 * cbSceneParam._m0[90u].x));
    float _1910 = fma(_1901, cbSceneParam._m0[91u].z, fma(_1899, cbSceneParam._m0[91u].y, _1897 * cbSceneParam._m0[91u].x));
    uvec4 _1920 = floatBitsToUint(cbInstanceData._m0[_740 + 5u]);
    uint _1922 = _1920.x * 14u;
    uint _1923 = _1922 + 13u;
    float _1930 = _848 + (-1.0);
    float _1935 = (cbLight._m0[_1923].x * _1930) + 1.0;
    float _1936 = (cbLight._m0[_1923].y * _1930) + 1.0;
    float _1937 = (cbLight._m0[_1923].z * _1930) + 1.0;
    float _1938 = (cbLight._m0[_1923].w * _1930) + 1.0;
    uint _1939 = _1922 + 5u;
    float _1945 = isnan(1.0) ? _1936 : (isnan(_1936) ? 1.0 : min(_1936, 1.0));
    uint _1949 = _1922 + 4u;
    float _1955 = isnan(1.0) ? _1935 : (isnan(_1935) ? 1.0 : min(_1935, 1.0));
    uint _1959 = _1922 | 1u;
    float _1970 = dot(vec3(cbLight._m0[_1922].xyz), vec3(_535, _536, _537));
    float _1973 = dot(vec3(cbLight._m0[_1959].xyz), vec3(_535, _536, _537));
    float _4173 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _4184 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _1978 = (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * 0.3183098733425140380859375;
    float _1980 = (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * 0.3183098733425140380859375;
    float _1987 = ((cbLight._m0[_1939].x * _1945) * _1980) + ((cbLight._m0[_1949].x * _1955) * _1978);
    float _1988 = ((_1945 * cbLight._m0[_1939].y) * _1980) + ((_1955 * cbLight._m0[_1949].y) * _1978);
    float _1989 = ((_1945 * cbLight._m0[_1939].z) * _1980) + ((_1955 * cbLight._m0[_1949].z) * _1978);
    uvec4 _1993 = floatBitsToUint(cbLight._m0[_1922 + 12u]);
    bool _1995 = _1993.x == 0u;
    float _2006;
    float _2008;
    float _2010;
    if (_1995)
    {
        _2006 = _1987;
        _2008 = _1988;
        _2010 = _1989;
    }
    else
    {
        uint _2014 = _1922 + 6u;
        float _2030 = (dot(vec3(cbLight._m0[_1922 + 2u].xyz), vec3(_535, _536, _537)) * 0.5) + 0.5;
        float _2031 = _2030 * _2030;
        float _4195 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2032 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _2033 = isnan(1.0) ? _1937 : (isnan(_1937) ? 1.0 : min(_1937, 1.0));
        _2006 = (((cbLight._m0[_2014].x * 0.3183098733425140380859375) * _2032) * _2033) + _1987;
        _2008 = (((cbLight._m0[_2014].y * 0.3183098733425140380859375) * _2032) * _2033) + _1988;
        _2010 = (((cbLight._m0[_2014].z * 0.3183098733425140380859375) * _2032) * _2033) + _1989;
    }
    bool _2013 = _1993.y == 0u;
    float _2051;
    float _2053;
    float _2055;
    if (_2013)
    {
        _2051 = _2006;
        _2053 = _2008;
        _2055 = _2010;
    }
    else
    {
        uint _2221 = _1922 + 7u;
        float _2237 = (dot(vec3(cbLight._m0[_1922 + 3u].xyz), vec3(_535, _536, _537)) * 0.5) + 0.5;
        float _2238 = _2237 * _2237;
        float _4211 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2239 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _2240 = isnan(1.0) ? _1938 : (isnan(_1938) ? 1.0 : min(_1938, 1.0));
        _2051 = (((cbLight._m0[_2221].x * 0.3183098733425140380859375) * _2239) * _2240) + _2006;
        _2053 = (((cbLight._m0[_2221].y * 0.3183098733425140380859375) * _2239) * _2240) + _2008;
        _2055 = (((cbLight._m0[_2221].z * 0.3183098733425140380859375) * _2239) * _2240) + _2010;
    }
    uint _2058 = _1922 + 8u;
    float _2071 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1922].w)) * _716) * 0.949999988079071044921875);
    float _2072 = _2071 * _2071;
    float _2073 = cbLight._m0[_1922].x + _617;
    float _2074 = cbLight._m0[_1922].y + _618;
    float _2075 = cbLight._m0[_1922].z + _619;
    float _2079 = inversesqrt(dot(vec3(_2073, _2074, _2075), vec3(_2073, _2074, _2075)));
    float _2080 = _2079 * _2073;
    float _2081 = _2079 * _2074;
    float _2082 = _2079 * _2075;
    float _2083 = dot(vec3(_535, _536, _537), vec3(cbLight._m0[_1922].xyz));
    float _4227 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2086 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _4238 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _2087 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _2088 = dot(vec3(_535, _536, _537), vec3(_2080, _2081, _2082));
    float _4249 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2091 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _2092 = dot(vec3(cbLight._m0[_1922].xyz), vec3(_2080, _2081, _2082));
    float _4260 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2096 = _2072 * _2072;
    float _2100 = ((_2091 * _2091) * (_2096 + (-1.0))) + 1.0;
    float _2108 = exp2(log2(1.0 - (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) * 5.0);
    float _2109 = 0.959999978542327880859375 - _831;
    float _2111 = 0.959999978542327880859375 - _832;
    float _2112 = 0.959999978542327880859375 - _833;
    float _2119 = 1.0 - _2072;
    float _2130 = (0.5 / (((_2087 * ((_2086 * _2119) + _2072)) + 9.9999999392252902907785028219223e-09) + (((_2087 * _2119) + _2072) * _2086))) * _2086;
    float _4271 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2132 = (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_2096 / ((_2100 * _2100) * 3.141590118408203125));
    uint _2143 = _1922 + 9u;
    float _2154 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1959].w)) * _716) * 0.949999988079071044921875);
    float _2155 = _2154 * _2154;
    float _2156 = cbLight._m0[_1959].x + _617;
    float _2157 = cbLight._m0[_1959].y + _618;
    float _2158 = cbLight._m0[_1959].z + _619;
    float _2162 = inversesqrt(dot(vec3(_2156, _2157, _2158), vec3(_2156, _2157, _2158)));
    float _2163 = _2162 * _2156;
    float _2164 = _2162 * _2157;
    float _2165 = _2162 * _2158;
    float _2166 = dot(vec3(_535, _536, _537), vec3(cbLight._m0[_1959].xyz));
    float _4282 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2169 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _2170 = dot(vec3(_535, _536, _537), vec3(_2163, _2164, _2165));
    float _4293 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2173 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    float _2174 = dot(vec3(cbLight._m0[_1959].xyz), vec3(_2163, _2164, _2165));
    float _4304 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2178 = _2155 * _2155;
    float _2182 = ((_2173 * _2173) * (_2178 + (-1.0))) + 1.0;
    float _2189 = exp2(log2(1.0 - (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) * 5.0);
    float _2196 = 1.0 - _2155;
    float _2206 = (0.5 / (((_2087 * ((_2169 * _2196) + _2155)) + 9.9999999392252902907785028219223e-09) + (((_2087 * _2196) + _2155) * _2169))) * _2169;
    float _4315 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2208 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_2178 / ((_2182 * _2182) * 3.141590118408203125));
    float _2218 = (((((_2189 * _2109) + _834) * cbLight._m0[_2143].x) * _2208) * _1945) + (((((_2108 * _2109) + _834) * cbLight._m0[_2058].x) * _2132) * _1955);
    float _2219 = (((((_2189 * _2111) + _835) * cbLight._m0[_2143].y) * _2208) * _1945) + (((((_2108 * _2111) + _835) * cbLight._m0[_2058].y) * _2132) * _1955);
    float _2220 = (((((_2189 * _2112) + _836) * cbLight._m0[_2143].z) * _2208) * _1945) + (((((_2108 * _2112) + _836) * cbLight._m0[_2058].z) * _2132) * _1955);
    float _2282;
    float _2284;
    float _2286;
    if (_1995)
    {
        _2282 = _2218;
        _2284 = _2219;
        _2286 = _2220;
    }
    else
    {
        uint _2288 = _1922 + 2u;
        uint _2292 = _1922 + 10u;
        float _2306 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2288].w)) * _716) * 0.949999988079071044921875);
        float _2307 = _2306 * _2306;
        float _2308 = cbLight._m0[_2288].x + _617;
        float _2309 = cbLight._m0[_2288].y + _618;
        float _2310 = cbLight._m0[_2288].z + _619;
        float _2314 = inversesqrt(dot(vec3(_2308, _2309, _2310), vec3(_2308, _2309, _2310)));
        float _2315 = _2314 * _2308;
        float _2316 = _2314 * _2309;
        float _2317 = _2314 * _2310;
        float _2318 = dot(vec3(_535, _536, _537), vec3(cbLight._m0[_2288].xyz));
        float _4326 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2321 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _2322 = dot(vec3(_535, _536, _537), vec3(_2315, _2316, _2317));
        float _4337 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2325 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _2326 = dot(vec3(cbLight._m0[_2288].xyz), vec3(_2315, _2316, _2317));
        float _4348 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2330 = _2307 * _2307;
        float _2334 = ((_2325 * _2325) * (_2330 + (-1.0))) + 1.0;
        float _2341 = exp2(log2(1.0 - (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0)))) * 5.0);
        float _2348 = 1.0 - _2307;
        float _2358 = (0.5 / (((_2087 * ((_2321 * _2348) + _2307)) + 9.9999999392252902907785028219223e-09) + (((_2087 * _2348) + _2307) * _2321))) * _2321;
        float _4359 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2360 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_2330 / ((_2334 * _2334) * 3.141590118408203125));
        float _2361 = isnan(1.0) ? _1937 : (isnan(_1937) ? 1.0 : min(_1937, 1.0));
        _2282 = (((((_2341 * _2109) + _834) * cbLight._m0[_2292].x) * _2360) * _2361) + _2218;
        _2284 = (((((_2341 * _2111) + _835) * cbLight._m0[_2292].y) * _2360) * _2361) + _2219;
        _2286 = (((((_2341 * _2112) + _836) * cbLight._m0[_2292].z) * _2360) * _2361) + _2220;
    }
    float _2396;
    float _2398;
    float _2400;
    if (_2013)
    {
        _2396 = _2282;
        _2398 = _2284;
        _2400 = _2286;
    }
    else
    {
        uint _2407 = _1922 + 3u;
        uint _2411 = _1922 + 11u;
        float _2425 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2407].w)) * _716) * 0.949999988079071044921875);
        float _2426 = _2425 * _2425;
        float _2427 = cbLight._m0[_2407].x + _617;
        float _2428 = cbLight._m0[_2407].y + _618;
        float _2429 = cbLight._m0[_2407].z + _619;
        float _2433 = inversesqrt(dot(vec3(_2427, _2428, _2429), vec3(_2427, _2428, _2429)));
        float _2434 = _2433 * _2427;
        float _2435 = _2433 * _2428;
        float _2436 = _2433 * _2429;
        float _2437 = dot(vec3(_535, _536, _537), vec3(cbLight._m0[_2407].xyz));
        float _4375 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2440 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _2441 = dot(vec3(_535, _536, _537), vec3(_2434, _2435, _2436));
        float _4386 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2444 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _2445 = dot(vec3(cbLight._m0[_2407].xyz), vec3(_2434, _2435, _2436));
        float _4397 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2449 = _2426 * _2426;
        float _2453 = ((_2444 * _2444) * (_2449 + (-1.0))) + 1.0;
        float _2460 = exp2(log2(1.0 - (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0)))) * 5.0);
        float _2467 = 1.0 - _2426;
        float _2477 = (0.5 / (((_2087 * ((_2440 * _2467) + _2426)) + 9.9999999392252902907785028219223e-09) + (((_2087 * _2467) + _2426) * _2440))) * _2440;
        float _4408 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2479 = (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_2449 / ((_2453 * _2453) * 3.141590118408203125));
        float _2480 = isnan(1.0) ? _1938 : (isnan(_1938) ? 1.0 : min(_1938, 1.0));
        _2396 = (((((_2460 * _2109) + _834) * cbLight._m0[_2411].x) * _2479) * _2480) + _2282;
        _2398 = (((((_2460 * _2111) + _835) * cbLight._m0[_2411].y) * _2479) * _2480) + _2284;
        _2400 = (((((_2460 * _2112) + _836) * cbLight._m0[_2411].z) * _2479) * _2480) + _2286;
    }
    float _2614;
    float _2616;
    float _2618;
    float _2620;
    float _2622;
    float _2624;
    if (_1920.y == 0u)
    {
        float _2555 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2556 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2555;
        float _2557 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2555;
        float _2558 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2555;
        uvec4 _2570 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2571 = _2570.x;
        uint _2582 = uint((float(_2570.y) * floor(float(uint(cbSceneParam._m0[85u].y * _638) / _2571))) + floor(float(uint(cbSceneParam._m0[85u].x * _637) / _2571)));
        float _2592 = (log2(_2558 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2593 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        uint _2596 = uint(isnan(14.0) ? _2593 : (isnan(_2593) ? 14.0 : min(_2593, 14.0)));
        uvec4 _2601 = texelFetch(g_lightClusterGridBuffer, int(((_2596 << 2u) + (_2582 << 6u)) >> 2u));
        uint _2602 = _2601.x;
        uint _2603 = _2570.z;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        if (((((1u << ((_2603 >> 4u) & 15u)) + 4294967295u) & _2602) == 0u) || ((_2603 & 240u) == 0u))
        {
            _2707 = 0.0;
            _2709 = 0.0;
            _2711 = 0.0;
            _2713 = 0.0;
            _2715 = 0.0;
            _2717 = 0.0;
        }
        else
        {
            float _2708;
            float _2710;
            float _2712;
            float _2714;
            float _2716;
            float _2718;
            float _2859 = 0.0;
            float _2860 = 0.0;
            float _2861 = 0.0;
            float _2862 = 0.0;
            float _2863 = 0.0;
            float _2864 = 0.0;
            uint _2865 = 0u;
            uint _2874;
            bool _2875;
            for (;;)
            {
                _2874 = texelFetch(g_lightClassification, int((((_2596 << 5u) + (_2582 << 9u)) + (_2865 << 2u)) >> 2u)).x;
                _2875 = _2874 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2875)
                {
                    frontier_phi_68_pred = _2861;
                    frontier_phi_68_pred_1 = _2864;
                    frontier_phi_68_pred_2 = _2863;
                    frontier_phi_68_pred_3 = _2862;
                    frontier_phi_68_pred_4 = _2860;
                    frontier_phi_68_pred_5 = _2859;
                }
                else
                {
                    float _3004;
                    float _3005;
                    float _3006;
                    float _3007;
                    float _3008;
                    float _3009;
                    uint _3010;
                    _3004 = _2859;
                    _3005 = _2860;
                    _3006 = _2861;
                    _3007 = _2862;
                    _3008 = _2863;
                    _3009 = _2864;
                    _3010 = _2874;
                    float _2931;
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    for (;;)
                    {
                        uint _3014 = uint(findLSB(_3010)) + (_2865 << 5u);
                        uint _3011 = (_3010 + 4294967295u) & _3010;
                        uint _3016 = _3014 * 48u;
                        vec4 _3030 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3016)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3016 + 3u)).x));
                        uint _3036 = (_3014 * 48u) + 4u;
                        vec4 _3049 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3036)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 3u)).x));
                        uint _3055 = (_3014 * 48u) + 8u;
                        vec3 _3066 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3055)).x, texelFetch(g_PointLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3055 + 2u)).x));
                        float _3070 = _3030.x - _2556;
                        float _3071 = _3030.y - _2557;
                        float _3072 = _3030.z - _2558;
                        float _3073 = dot(vec3(_3070, _3071, _3072), vec3(_3070, _3071, _3072));
                        float _3076 = inversesqrt(_3073);
                        float _3077 = _3076 * _3070;
                        float _3078 = _3076 * _3071;
                        float _3079 = _3076 * _3072;
                        float _3080 = dot(vec3(_661, _664, _667), vec3(_3077, _3078, _3079));
                        float _3085 = 1.0 - (_3073 * _3030.w);
                        float _4434 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                        float _3086 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                        float _3087 = sqrt(_3073) * _3049.w;
                        float _3090 = 1.39999997615814208984375 / (_3087 + 1.39999997615814208984375);
                        float _3091 = _3090 * _3090;
                        float _3094 = ((1.0 - _3091) * _3080) + _3091;
                        float _3097 = _3087 * _3087;
                        float _3101 = ((isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0))) * _3086) / ((_3097 * 0.699999988079071044921875) + 1.0);
                        float _3105 = (-0.0) - _2556;
                        float _3106 = (-0.0) - _2557;
                        float _3107 = (-0.0) - _2558;
                        float _3111 = inversesqrt(dot(vec3(_3105, _3106, _3107), vec3(_3105, _3106, _3107)));
                        float _3112 = _3111 * _3105;
                        float _3113 = _3111 * _3106;
                        float _3114 = _3111 * _3107;
                        float _3122 = exp2(log2(1.0 / ((_3097 * 3.5) + 5.0)) * 0.25);
                        float _3123 = 1.0 - _864;
                        float _3130 = sqrt(1.0 - ((1.0 - (_3123 * _3123)) * (1.0 - (_3122 * _3122))));
                        float _3131 = _3130 * _3130;
                        float _3132 = _3131 * _3131;
                        float _3133 = _3112 + _3077;
                        float _3134 = _3113 + _3078;
                        float _3135 = _3114 + _3079;
                        float _3139 = inversesqrt(dot(vec3(_3133, _3134, _3135), vec3(_3133, _3134, _3135)));
                        float _3143 = dot(vec3(_661, _664, _667), vec3(_3112, _3113, _3114));
                        float _4450 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                        float _3146 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
                        float _3147 = dot(vec3(_661, _664, _667), vec3(_3139 * _3133, _3139 * _3134, _3139 * _3135));
                        float _4461 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                        float _3150 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                        float _3154 = ((_3150 * _3150) * (_3132 + (-1.0))) + 1.0;
                        float _3155 = _3090 * _3131;
                        float _3156 = _3155 * _3155;
                        float _3159 = ((1.0 - _3156) * _3080) + _3156;
                        float _4472 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                        float _3160 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                        float _3161 = 1.0 - _3131;
                        float _3171 = (0.5 / (((_3160 * ((_3146 * _3161) + _3131)) + 9.9999999392252902907785028219223e-09) + (((_3160 * _3161) + _3131) * _3146))) * _3160;
                        float _4483 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                        float _3182 = (((_3132 * 3.1415927410125732421875) * (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0)))) / ((_3154 * _3154) * ((_3097 * 2.1991131305694580078125) + 3.141590118408203125))) * _3086;
                        _2934 = (_3101 * _3049.x) + _3007;
                        _2935 = (_3101 * _3049.y) + _3008;
                        _2936 = (_3101 * _3049.z) + _3009;
                        _2931 = (_3182 * _3066.x) + _3004;
                        _2932 = (_3182 * _3066.y) + _3005;
                        _2933 = (_3182 * _3066.z) + _3006;
                        if (_3011 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3004 = _2931;
                            _3005 = _2932;
                            _3006 = _2933;
                            _3007 = _2934;
                            _3008 = _2935;
                            _3009 = _2936;
                            _3010 = _3011;
                        }
                    }
                    frontier_phi_68_pred = _2933;
                    frontier_phi_68_pred_1 = _2936;
                    frontier_phi_68_pred_2 = _2935;
                    frontier_phi_68_pred_3 = _2934;
                    frontier_phi_68_pred_4 = _2932;
                    frontier_phi_68_pred_5 = _2931;
                }
                _2712 = frontier_phi_68_pred;
                _2718 = frontier_phi_68_pred_1;
                _2716 = frontier_phi_68_pred_2;
                _2714 = frontier_phi_68_pred_3;
                _2710 = frontier_phi_68_pred_4;
                _2708 = frontier_phi_68_pred_5;
                uint _2866 = _2865 + 1u;
                if (_2866 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2859 = _2708;
                    _2860 = _2710;
                    _2861 = _2712;
                    _2862 = _2714;
                    _2863 = _2716;
                    _2864 = _2718;
                    _2865 = _2866;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2707 = _2708;
            _2709 = _2710;
            _2711 = _2712;
            _2713 = _2714;
            _2715 = _2716;
            _2717 = _2718;
        }
        uvec4 _2721 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2722 = _2721.z;
        uint _2724 = (_2722 >> 8u) & 15u;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        float _2837;
        if (((4294967295u << _2724) & _2602) == 0u)
        {
            _2827 = _2707;
            _2829 = _2709;
            _2831 = _2711;
            _2833 = _2713;
            _2835 = _2715;
            _2837 = _2717;
        }
        else
        {
            float _2852 = inversesqrt(dot(vec3(_2556, _2557, _2558), vec3(_2556, _2557, _2558)));
            float _2853 = _2852 * _2556;
            float _2854 = _2852 * _2557;
            float _2855 = _2852 * _2558;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2724 < ((_2722 >> 12u) & 15u))
            {
                float _2828;
                float _2830;
                float _2832;
                float _2834;
                float _2836;
                float _2838;
                float _2987 = _2707;
                float _2988 = _2709;
                float _2989 = _2711;
                float _2990 = _2713;
                float _2991 = _2715;
                float _2992 = _2717;
                uint _2993 = _2724;
                uint _3002;
                bool _3003;
                for (;;)
                {
                    _3002 = texelFetch(g_lightClassification, int((((_2596 << 5u) + (_2582 << 9u)) + (_2993 << 2u)) >> 2u)).x;
                    _3003 = _3002 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3003)
                    {
                        frontier_phi_79_pred = _2992;
                        frontier_phi_79_pred_1 = _2991;
                        frontier_phi_79_pred_2 = _2990;
                        frontier_phi_79_pred_3 = _2989;
                        frontier_phi_79_pred_4 = _2988;
                        frontier_phi_79_pred_5 = _2987;
                    }
                    else
                    {
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3209 = _2987;
                        float _3210 = _2988;
                        float _3211 = _2989;
                        float _3212 = _2990;
                        float _3213 = _2991;
                        float _3214 = _2992;
                        uint _3215 = _3002;
                        uint _3216;
                        vec4 _3241;
                        float _3242;
                        vec4 _3257;
                        vec3 _3269;
                        vec4 _3284;
                        vec4 _3300;
                        float _3347;
                        bool _3348;
                        for (;;)
                        {
                            uint _3226 = ((_2993 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3215));
                            _3216 = (_3215 + 4294967295u) & _3215;
                            uint _3228 = _3226 * 40u;
                            _3241 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 3u)).x));
                            _3242 = _3241.w;
                            uint _3244 = (_3226 * 40u) + 4u;
                            _3257 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 3u)).x));
                            uint _3259 = (_3226 * 40u) + 8u;
                            _3269 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3259)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 2u)).x));
                            uint _3271 = (_3226 * 40u) + 16u;
                            _3284 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 3u)).x));
                            uint _3287 = (_3226 * 40u) + 20u;
                            _3300 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 3u)).x));
                            uint _3303 = (_3226 * 40u) + 24u;
                            vec4 _3316 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 3u)).x));
                            uint _3322 = (_3226 * 40u) + 28u;
                            vec4 _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            _3347 = fma(_2558, _3335.z, fma(_2557, _3335.y, _3335.x * _2556)) + _3335.w;
                            _3348 = !((fma(_2558, _3316.z, fma(_2557, _3316.y, _3316.x * _2556)) + _3316.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3348)
                            {
                                float _3375 = _3241.x - _2556;
                                float _3376 = _3241.y - _2557;
                                float _3377 = _3241.z - _2558;
                                float _3378 = dot(vec3(_3375, _3376, _3377), vec3(_3375, _3376, _3377));
                                float _3381 = inversesqrt(_3378);
                                float _3382 = _3381 * _3375;
                                float _3383 = _3381 * _3376;
                                float _3384 = _3381 * _3377;
                                float _3388 = 1.0 - (_3378 / (_3242 * _3242));
                                float _4494 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3389 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                                float _3393 = sqrt(_3378) * _3257.w;
                                float _3395 = 1.39999997615814208984375 / (_3393 + 1.39999997615814208984375);
                                float _3396 = _3395 * _3395;
                                float _3399 = ((1.0 - _3396) * dot(vec3(_3382, _3383, _3384), vec3(_661, _664, _667))) + _3396;
                                float _3402 = _3393 * _3393;
                                float _3406 = (fma(_2558, _3284.z, fma(_2557, _3284.y, _3284.x * _2556)) + _3284.w) / _3347;
                                float _3407 = (fma(_2558, _3300.z, fma(_2557, _3300.y, _3300.x * _2556)) + _3300.w) / _3347;
                                float _3411 = 1.0 - dot(vec2(_3406, _3407), vec2(_3406, _3407));
                                float _4510 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                                float _3412 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
                                float _3413 = _3412 * (((isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0))) * _3389) / ((_3402 * 0.699999988079071044921875) + 1.0));
                                float _3425 = exp2(log2(1.0 / ((_3402 * 3.5) + 5.0)) * 0.25);
                                float _3426 = 1.0 - _864;
                                float _3433 = sqrt(1.0 - ((1.0 - (_3426 * _3426)) * (1.0 - (_3425 * _3425))));
                                float _3434 = _3433 * _3433;
                                float _3435 = _3434 * _3434;
                                float _3436 = _3382 - _2853;
                                float _3437 = _3383 - _2854;
                                float _3438 = _3384 - _2855;
                                float _3442 = inversesqrt(dot(vec3(_3436, _3437, _3438), vec3(_3436, _3437, _3438)));
                                float _3446 = dot(vec3(_661, _664, _667), vec3((-0.0) - _2853, (-0.0) - _2854, (-0.0) - _2855));
                                float _4521 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                                float _3449 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                                float _3450 = dot(vec3(_661, _664, _667), vec3(_3442 * _3436, _3442 * _3437, _3442 * _3438));
                                float _4532 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3453 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                                float _3457 = ((_3453 * _3453) * (_3435 + (-1.0))) + 1.0;
                                float _3458 = _3395 * _3434;
                                float _3459 = _3458 * _3458;
                                float _3465 = ((1.0 - _3459) * dot(vec3(_661, _664, _667), vec3(_3382, _3383, _3384))) + _3459;
                                float _4543 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                                float _3466 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                                float _3467 = 1.0 - _3434;
                                float _3477 = (0.5 / (((_3466 * ((_3449 * _3467) + _3434)) + 9.9999999392252902907785028219223e-09) + (((_3466 * _3467) + _3434) * _3449))) * _3466;
                                float _4554 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                                float _3487 = (_3412 * _3389) * (((_3435 * 3.1415927410125732421875) * (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0)))) / ((_3457 * _3457) * ((_3402 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3413 * _3257.z;
                                frontier_phi_85_pred_1 = _3413 * _3257.y;
                                frontier_phi_85_pred_2 = _3413 * _3257.x;
                                frontier_phi_85_pred_3 = _3487 * _3269.z;
                                frontier_phi_85_pred_4 = _3487 * _3269.y;
                                frontier_phi_85_pred_5 = _3487 * _3269.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3496 = frontier_phi_85_pred;
                            _3495 = frontier_phi_85_pred_1;
                            _3494 = frontier_phi_85_pred_2;
                            _3493 = frontier_phi_85_pred_3;
                            _3492 = frontier_phi_85_pred_4;
                            _3491 = frontier_phi_85_pred_5;
                            _3199 = _3494 + _3212;
                            _3200 = _3495 + _3213;
                            _3201 = _3496 + _3214;
                            _3196 = _3491 + _3209;
                            _3197 = _3492 + _3210;
                            _3198 = _3493 + _3211;
                            if (_3216 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3209 = _3196;
                                _3210 = _3197;
                                _3211 = _3198;
                                _3212 = _3199;
                                _3213 = _3200;
                                _3214 = _3201;
                                _3215 = _3216;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3201;
                        frontier_phi_79_pred_1 = _3200;
                        frontier_phi_79_pred_2 = _3199;
                        frontier_phi_79_pred_3 = _3198;
                        frontier_phi_79_pred_4 = _3197;
                        frontier_phi_79_pred_5 = _3196;
                    }
                    _2838 = frontier_phi_79_pred;
                    _2836 = frontier_phi_79_pred_1;
                    _2834 = frontier_phi_79_pred_2;
                    _2832 = frontier_phi_79_pred_3;
                    _2830 = frontier_phi_79_pred_4;
                    _2828 = frontier_phi_79_pred_5;
                    uint _2994 = _2993 + 1u;
                    if (_2994 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2987 = _2828;
                        _2988 = _2830;
                        _2989 = _2832;
                        _2990 = _2834;
                        _2991 = _2836;
                        _2992 = _2838;
                        _2993 = _2994;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2834;
                frontier_phi_60_61_ladder_1 = _2838;
                frontier_phi_60_61_ladder_2 = _2836;
                frontier_phi_60_61_ladder_3 = _2832;
                frontier_phi_60_61_ladder_4 = _2830;
                frontier_phi_60_61_ladder_5 = _2828;
            }
            else
            {
                frontier_phi_60_61_ladder = _2713;
                frontier_phi_60_61_ladder_1 = _2717;
                frontier_phi_60_61_ladder_2 = _2715;
                frontier_phi_60_61_ladder_3 = _2711;
                frontier_phi_60_61_ladder_4 = _2709;
                frontier_phi_60_61_ladder_5 = _2707;
            }
            _2827 = frontier_phi_60_61_ladder_5;
            _2829 = frontier_phi_60_61_ladder_4;
            _2831 = frontier_phi_60_61_ladder_3;
            _2833 = frontier_phi_60_61_ladder;
            _2835 = frontier_phi_60_61_ladder_2;
            _2837 = frontier_phi_60_61_ladder_1;
        }
        float _2842 = isnan(1.0) ? _848 : (isnan(_848) ? 1.0 : min(_848, 1.0));
        _2614 = (_2842 * _2833) + _2051;
        _2616 = (_2842 * _2835) + _2053;
        _2618 = (_2842 * _2837) + _2055;
        _2620 = ((_2827 * _834) * _2842) + _2396;
        _2622 = ((_2829 * _835) * _2842) + _2398;
        _2624 = ((_2831 * _836) * _2842) + _2400;
    }
    else
    {
        _2614 = _2051;
        _2616 = _2053;
        _2618 = _2055;
        _2620 = _2396;
        _2622 = _2398;
        _2624 = _2400;
    }
    float _4570 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _4581 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _4592 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _4603 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _2642 = ((isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * (_2614 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _848))) + ((_2620 + ((isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0))) * _1687)) * cbPerFrame._m0[3u].x);
    float _2643 = ((isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_2616 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _848))) + ((_2622 + ((isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0))) * _1687)) * cbPerFrame._m0[3u].x);
    float _2644 = ((isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (_2618 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _848))) + ((_2624 + ((isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))) * _1687)) * cbPerFrame._m0[3u].x);
    float _2645 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
    float _2646 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
    float _2647 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
    float _2652 = cbInstanceData._m0[_740 + 6u].w * (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0)));
    float _2657 = _637 / cbSceneParam._m0[86u].x;
    float _2658 = _638 / cbSceneParam._m0[86u].y;
    vec4 _2672 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2657, _2658, (log2((isnan(cbSceneParam._m0[77u].w) ? _559 : (isnan(_559) ? cbSceneParam._m0[77u].w : min(_559, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2674 = _2672.x;
    float _2675 = _2672.y;
    float _2676 = _2672.z;
    float _2677 = _2672.w;
    float _2769;
    float _2771;
    float _2773;
    float _2775;
    if (_559 > cbSceneParam._m0[78u].w)
    {
        float _2732 = isnan(_559) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _559 : min(cbSceneParam._m0[80u].w, _559));
        float _2733 = _2732 / _559;
        float _2744 = _2733 * _610;
        float _2745 = _611 * _2733;
        float _2746 = (-0.0) - _2745;
        float _2747 = _2733 * _612;
        float _2749 = (cbSceneParam._m0[77u].w * _2746) / _2732;
        float _2750 = _2749 + cbSceneParam._m0[79u].w;
        float _2751 = cbSceneParam._m0[79u].w - _2745;
        float _2757 = sqrt(((_2744 * _2744) + (_2745 * _2745)) + (_2747 * _2747));
        float _2760 = (1.0 - (cbSceneParam._m0[77u].w / _2732)) * _2757;
        float _2765 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2767 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2944;
        if (abs((_2746 - _2749) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2944 = ((((_2750 > 0.0) ? exp2(_2765 * _2750) : (2.0 - exp2(_2767 * _2750))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2760;
        }
        else
        {
            float _2888 = 1.0 / cbSceneParam._m0[80u].x;
            float _2889 = isnan(_2751) ? _2750 : (isnan(_2750) ? _2751 : max(_2750, _2751));
            float _2890 = isnan(_2751) ? _2750 : (isnan(_2750) ? _2751 : min(_2750, _2751));
            float _2899 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : min(_2889, 0.0));
            float _2900 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : min(_2890, 0.0));
            _2944 = ((abs(_2757 / _2746) * cbSceneParam._m0[80u].y) * ((((_2899 - _2900) * 2.0) - ((exp2(_2765 * (isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0)))) - exp2(_2765 * (isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0))))) * _2888)) - ((exp2(_2767 * _2899) - exp2(_2767 * _2900)) * _2888))) + (_2760 * cbSceneParam._m0[80u].z);
        }
        vec4 _2946 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2657, _2658, 1.0), 0.0);
        float _2955 = exp2((_2944 * (-1.44269502162933349609375)) * (1.0 - _2946.w));
        float _2956 = log2(_2955);
        float _2972 = log2(_2677);
        _2769 = (exp2(_2972 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2956 * cbSceneParam._m0[78u].x)) * _2946.x) / cbSceneParam._m0[78u].x)) + _2674;
        _2771 = (exp2(_2972 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2956 * cbSceneParam._m0[78u].y)) * _2946.y) / cbSceneParam._m0[78u].y)) + _2675;
        _2773 = (exp2(_2972 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2956 * cbSceneParam._m0[78u].z)) * _2946.z) / cbSceneParam._m0[78u].z)) + _2676;
        _2775 = _2955 * _2677;
    }
    else
    {
        _2769 = _2674;
        _2771 = _2675;
        _2773 = _2676;
        _2775 = _2677;
    }
    bool _2982;
    vec4 _2785;
    vec4 _2807;
    float _2809;
    float _2813;
    float _2814;
    float _2815;
    float _2816;
    bool _2826;
    for (;;)
    {
        _2785 = cbMatDynParam._m0[0u];
        float _2787 = roundEven(_2785.y);
        bool _2788 = _2787 == 3.0;
        float _2789 = log2(_2775);
        float _2796 = exp2(_2789 * cbSceneParam._m0[78u].x) * _2645;
        float _2797 = exp2(_2789 * cbSceneParam._m0[78u].y) * _2646;
        float _2798 = exp2(_2789 * cbSceneParam._m0[78u].z) * _2647;
        float _2805 = _626 + (-0.5);
        _2807 = cbMtdParam._m0[1u];
        _2809 = _2807.y * _2805;
        float _2812 = (_2787 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2813 = _2812 * (_2788 ? _2796 : (_2796 + (cbSceneParam._m0[72u].w * _2769)));
        _2814 = _2812 * (_2788 ? _2797 : (_2797 + (cbSceneParam._m0[72u].w * _2771)));
        _2815 = _2812 * (_2788 ? _2798 : (_2798 + (cbSceneParam._m0[72u].w * _2773)));
        _2816 = _2805 * 0.999000012874603271484375;
        _2826 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2826)
        {
            if ((cbInstanceData._m0[_740 + 7u].x + _2816) < 0.5)
            {
                _2982 = true;
                break;
            }
        }
        uint _2923 = _741 + uint(_2785.w);
        if ((cbInstanceData._m0[_2923].w < 1.0) && ((cbInstanceData._m0[_2923].w + _2816) < 0.5))
        {
            _2982 = true;
            break;
        }
        if ((_2809 + _390) < _2807.x)
        {
            _2982 = true;
            break;
        }
        _2982 = false;
        break;
    }
    float _3187;
    if (_2982)
    {
        discard_state = true;
        _3187 = 0.0;
    }
    else
    {
        _3187 = _2652;
    }
    SV_Target.x = _2813;
    SV_Target.y = _2814;
    SV_Target.z = _2815;
    SV_Target.w = _3187;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2652;
    discard_exit();
}


