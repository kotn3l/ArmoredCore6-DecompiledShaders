#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1057;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226;
    float _227;
    float _228;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
    }
    else
    {
        _226 = _212;
        _227 = _213;
        _228 = _214;
    }
    vec4 _242 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _259 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _282 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _291 = ((_259.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _282.x;
    float _294 = ((_259.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _282.y;
    float _297 = ((_259.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _282.z;
    float _298 = _282.w * _259.w;
    float _318 = cbMtdParam._m0[14u].z + texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x;
    vec4 _330 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _342 = (_242.z * 2.0) * (cbMtdParam._m0[13u].x + _330.z);
    float _346 = (_242.x * 2.0) + (-1.0);
    float _348 = (_242.y * 2.0) + (-1.0);
    float _349 = dot(vec2(_346, _348), vec2(_346, _348));
    float _3676 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _355 = sqrt(1.0 - (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))));
    float _362 = (((_330.x * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _346;
    float _363 = (((_330.y * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _348;
    float _366 = fma(_355, _226, fma(_363, _218 * TANGENT.x, (_204 * _196) * _362));
    float _369 = fma(_355, _227, fma(_363, _218 * TANGENT.y, (_204 * _197) * _362));
    float _372 = fma(_355, _228, fma(_363, _218 * TANGENT.z, (_204 * _198) * _362));
    float _376 = inversesqrt(dot(vec3(_366, _369, _372), vec3(_366, _369, _372)));
    float _377 = _376 * _366;
    float _378 = _376 * _369;
    float _379 = _376 * _372;
    float _3687 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _380 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _3698 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _381 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _3709 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _382 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    float _3720 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _383 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _3731 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _384 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    float _3742 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _385 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _401 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _444 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _454 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _444);
    float _455 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _444);
    float _456 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _444);
    float _460 = inversesqrt(dot(vec3(_454, _455, _456), vec3(_454, _455, _456)));
    float _461 = _454 * _460;
    float _462 = _455 * _460;
    float _463 = _456 * _460;
    float _469 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _470 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _472 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _474 = _472.w;
    float _494 = fma(_379, cbSceneParam._m0[5u].z, fma(_378, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _377));
    float _497 = fma(_379, cbSceneParam._m0[6u].z, fma(_378, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _377));
    float _500 = fma(_379, cbSceneParam._m0[7u].z, fma(_378, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _377));
    vec4 _502 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _504 = _502.x;
    float _516 = (((_502.y - _381) + (_502.w * _381)) * cbMtdParam._m0[3u].x) + _381;
    float _533 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_504 * _504)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _542 = (((cbMatDynParam._m0[15u].x - _385) * cbMatDynParam._m0[15u].w) * _533) + _385;
    float _550 = ((_533 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _516)) + _516;
    uint _574 = uint(roundEven(NORMAL.w)) * 13u;
    uint _576 = (_574 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _582 = (cbMtdParam._m0[0u].x * _382) * cbInstanceData._m0[_576].x;
    float _583 = (cbMtdParam._m0[0u].y * _383) * cbInstanceData._m0[_576].y;
    float _584 = (cbMtdParam._m0[0u].z * _384) * cbInstanceData._m0[_576].z;
    float _3753 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _585 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _3764 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _586 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _3775 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _587 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    vec4 _588 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _593 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _604 = (((_593.x - _542) + (_593.w * _542)) * cbMtdParam._m0[3u].x) + _542;
    float _617 = (cbMtdParam._m0[3u].x * (((_585 * _474) - _585) + _588.x)) + _585;
    float _618 = (cbMtdParam._m0[3u].x * (((_586 * _474) - _586) + _588.y)) + _586;
    float _619 = (cbMtdParam._m0[3u].x * (((_587 * _474) - _587) + _588.z)) + _587;
    vec4 _620 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _633 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_542 * (_382 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_542 * (_383 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_542 * (_384 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _620.z;
    float _637 = _633 * cbMatDynParam._m0[13u].w;
    float _647 = (_637 * (cbMatDynParam._m0[13u].x - _617)) + _617;
    float _648 = (_637 * (cbMatDynParam._m0[13u].y - _618)) + _618;
    float _649 = (_637 * (cbMatDynParam._m0[13u].z - _619)) + _619;
    float _657 = ((_633 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _604)) + _604;
    float _658 = 1.0 - _657;
    float _659 = _658 * _647;
    float _660 = _658 * _648;
    float _661 = _658 * _649;
    float _665 = (_647 + (-0.039999999105930328369140625)) * _657;
    float _666 = (_648 + (-0.039999999105930328369140625)) * _657;
    float _667 = (_649 + (-0.039999999105930328369140625)) * _657;
    float _668 = _665 + 0.039999999105930328369140625;
    float _669 = _666 + 0.039999999105930328369140625;
    float _670 = _667 + 0.039999999105930328369140625;
    vec4 _679 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _469, cbSceneParam._m0[86u].y * _470));
    float _682 = _679.x * TEXCOORD_4;
    float _683 = dot(vec3(_377, _378, _379), vec3(_461, _462, _463));
    float _686 = _683 * 2.0;
    float _690 = (_686 * _377) - _461;
    float _691 = (_686 * _378) - _462;
    float _692 = (_686 * _379) - _463;
    float _696 = abs(dot(vec3(_461, _462, _463), vec3(_377, _378, _379)));
    float _3786 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _698 = sqrt(_550);
    float _711 = exp2((_698 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_698 * 3.0));
    float _717 = (1.0 - _711) * ((_698 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _718 = _711 * _698;
    float _746 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _750 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1056;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _781 = fma(_754, cbModelParam._m0[26u].z, fma(_750, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _746));
        float _785 = fma(_754, cbModelParam._m0[27u].z, fma(_750, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _746));
        float _789 = fma(_754, cbModelParam._m0[28u].z, fma(_750, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _746));
        float _814 = _746 + _377;
        float _815 = _750 + _378;
        float _816 = _754 + _379;
        float _826 = fma(_816, cbModelParam._m0[26u].z, fma(_815, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _814)) - _781;
        float _827 = fma(_816, cbModelParam._m0[27u].z, fma(_815, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _814)) - _785;
        float _828 = fma(_816, cbModelParam._m0[28u].z, fma(_815, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _814)) - _789;
        float _832 = inversesqrt(dot(vec3(_826, _827, _828), vec3(_826, _827, _828)));
        float _845 = ((_832 * _826) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_781 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _846 = ((_832 * _827) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_785 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _847 = ((_832 * _828) / cbModelParam._m0[34u].z) + ((((((_789 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        float _884 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_850.x + (-0.5));
        float _886 = _884 * (_850.y + (-0.5));
        float _887 = _884 * (_850.z + (-0.5));
        float _894 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_857.x + (-0.5));
        float _896 = _894 * (_857.y + (-0.5));
        float _897 = _894 * (_857.z + (-0.5));
        float _904 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_864.x + (-0.5));
        float _906 = _904 * (_864.y + (-0.5));
        float _907 = _904 * (_864.z + (-0.5));
        float _914 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _915 = _914 * (_871.x + (-0.5));
        float _916 = _914 * (_871.y + (-0.5));
        float _917 = _914 * (_871.z + (-0.5));
        float _918 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _919 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _920 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _921 = _885 * 0.5;
        float _922 = _895 * 0.5;
        float _923 = _905 * 0.5;
        float _924 = dot(vec3(_921, _922, _923), vec3(_921, _922, _923));
        float _929 = (_924 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_924);
        float _938 = (dot(vec3(_377, _378, _379), vec3(_929 * _921, _929 * _922, _929 * _923)) + 1.0) * 0.5;
        float _3812 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _948 = sqrt(((_922 * _922) + (_921 * _921)) + (_923 * _923)) / (_918 + 9.9999997473787516355514526367188e-06);
        float _3823 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _950 = _949 * 2.0;
        float _954 = (1.0 - _949) / (_949 + 1.0);
        float _3834 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _964 = ((((1.0 - _955) * (_950 + 2.0)) * exp2(log2(isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (_950 + 1.0))) + _955) * _918;
        float _965 = _886 * 0.5;
        float _966 = _896 * 0.5;
        float _967 = _906 * 0.5;
        float _968 = dot(vec3(_965, _966, _967), vec3(_965, _966, _967));
        float _973 = (_968 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_968);
        float _981 = (dot(vec3(_377, _378, _379), vec3(_973 * _965, _973 * _966, _973 * _967)) + 1.0) * 0.5;
        float _3845 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _990 = sqrt(((_966 * _966) + (_965 * _965)) + (_967 * _967)) / (_919 + 9.9999997473787516355514526367188e-06);
        float _3856 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _992 = _991 * 2.0;
        float _996 = (1.0 - _991) / (_991 + 1.0);
        float _3867 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1006 = ((((1.0 - _997) * (_992 + 2.0)) * exp2(log2(isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_992 + 1.0))) + _997) * _919;
        float _1007 = _887 * 0.5;
        float _1008 = _897 * 0.5;
        float _1009 = _907 * 0.5;
        float _1010 = dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009));
        float _1015 = (_1010 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1010);
        float _1023 = (dot(vec3(_377, _378, _379), vec3(_1015 * _1007, _1015 * _1008, _1015 * _1009)) + 1.0) * 0.5;
        float _3878 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1032 = sqrt(((_1008 * _1008) + (_1007 * _1007)) + (_1009 * _1009)) / (_920 + 9.9999997473787516355514526367188e-06);
        float _3889 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1034 = _1033 * 2.0;
        float _1038 = (1.0 - _1033) / (_1033 + 1.0);
        float _3900 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1048 = ((((1.0 - _1039) * (_1034 + 2.0)) * exp2(log2(isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * (_1034 + 1.0))) + _1039) * _920;
        _1056 = _887;
        _1058 = _886;
        _1059 = _885;
        _1060 = _897;
        _1061 = _896;
        _1062 = _895;
        _1063 = _907;
        _1064 = _906;
        _1065 = _905;
        _1066 = _920;
        _1067 = _919;
        _1068 = _918;
        _1069 = cbModelParam._m0[36u].z * (isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0)));
        _1070 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0)));
        _1071 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0)));
    }
    else
    {
        _1056 = _1057;
        _1058 = _1057;
        _1059 = _1057;
        _1060 = _1057;
        _1061 = _1057;
        _1062 = _1057;
        _1063 = _1057;
        _1064 = _1057;
        _1065 = _1057;
        _1066 = _1057;
        _1067 = _1057;
        _1068 = _1057;
        _1069 = 0.0;
        _1070 = 0.0;
        _1071 = 0.0;
    }
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1097 = fma(_754, cbModelParam._m0[30u].z, fma(_750, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _746));
        float _1101 = fma(_754, cbModelParam._m0[31u].z, fma(_750, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _746));
        float _1105 = fma(_754, cbModelParam._m0[32u].z, fma(_750, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _746));
        float _1128 = _746 + _377;
        float _1129 = _750 + _378;
        float _1130 = _754 + _379;
        float _1140 = fma(_1130, cbModelParam._m0[30u].z, fma(_1129, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1128)) - _1097;
        float _1141 = fma(_1130, cbModelParam._m0[31u].z, fma(_1129, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1128)) - _1101;
        float _1142 = fma(_1130, cbModelParam._m0[32u].z, fma(_1129, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1128)) - _1105;
        float _1146 = inversesqrt(dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142)));
        float _1159 = ((_1146 * _1140) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1097 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1160 = ((_1146 * _1141) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1101 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1161 = ((_1146 * _1142) / cbModelParam._m0[35u].z) + ((((((_1105 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        float _1196 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1163.x + (-0.5));
        float _1198 = _1196 * (_1163.y + (-0.5));
        float _1199 = _1196 * (_1163.z + (-0.5));
        float _1206 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1170.x + (-0.5));
        float _1208 = _1206 * (_1170.y + (-0.5));
        float _1209 = _1206 * (_1170.z + (-0.5));
        float _1216 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1177.x + (-0.5));
        float _1218 = _1216 * (_1177.y + (-0.5));
        float _1219 = _1216 * (_1177.z + (-0.5));
        float _1226 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1184.x + (-0.5));
        float _1228 = _1226 * (_1184.y + (-0.5));
        float _1229 = _1226 * (_1184.z + (-0.5));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = _1197 * 0.5;
        float _1234 = _1207 * 0.5;
        float _1235 = _1217 * 0.5;
        float _1236 = dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235));
        float _1241 = (_1236 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1236);
        float _1249 = (dot(vec3(_377, _378, _379), vec3(_1241 * _1233, _1241 * _1234, _1241 * _1235)) + 1.0) * 0.5;
        float _3941 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1258 = sqrt(((_1234 * _1234) + (_1233 * _1233)) + (_1235 * _1235)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _3952 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _3963 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * (_1260 + 1.0))) + _1265) * _1230;
        float _1275 = _1198 * 0.5;
        float _1276 = _1208 * 0.5;
        float _1277 = _1218 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1291 = (dot(vec3(_377, _378, _379), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _3974 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1300 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _3985 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1302 = _1301 * 2.0;
        float _1306 = (1.0 - _1301) / (_1301 + 1.0);
        float _3996 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1316 = ((((1.0 - _1307) * (_1302 + 2.0)) * exp2(log2(isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_1302 + 1.0))) + _1307) * _1231;
        float _1317 = _1199 * 0.5;
        float _1318 = _1209 * 0.5;
        float _1319 = _1219 * 0.5;
        float _1320 = dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319));
        float _1325 = (_1320 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1320);
        float _1333 = (dot(vec3(_377, _378, _379), vec3(_1325 * _1317, _1325 * _1318, _1325 * _1319)) + 1.0) * 0.5;
        float _4007 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1342 = sqrt(((_1318 * _1318) + (_1317 * _1317)) + (_1319 * _1319)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _4018 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1344 = _1343 * 2.0;
        float _1348 = (1.0 - _1343) / (_1343 + 1.0);
        float _4029 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1358 = ((((1.0 - _1349) * (_1344 + 2.0)) * exp2(log2(isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1344 + 1.0))) + _1349) * _1232;
        _1366 = _1199;
        _1367 = _1198;
        _1368 = _1197;
        _1369 = _1209;
        _1370 = _1208;
        _1371 = _1207;
        _1372 = _1219;
        _1373 = _1218;
        _1374 = _1217;
        _1375 = _1232;
        _1376 = _1231;
        _1377 = _1230;
        _1378 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
        _1379 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)));
        _1380 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
    }
    else
    {
        _1366 = _1057;
        _1367 = _1057;
        _1368 = _1057;
        _1369 = _1057;
        _1370 = _1057;
        _1371 = _1057;
        _1372 = _1057;
        _1373 = _1057;
        _1374 = _1057;
        _1375 = _1057;
        _1376 = _1057;
        _1377 = _1057;
        _1378 = 0.0;
        _1379 = 0.0;
        _1380 = 0.0;
    }
    float _1390 = (cbModelParam._m0[1u].x * (_1378 - _1069)) + _1069;
    float _1391 = (cbModelParam._m0[1u].x * (_1379 - _1070)) + _1070;
    float _1392 = (cbModelParam._m0[1u].x * (_1380 - _1071)) + _1071;
    float _1413 = fma(_1392, cbSceneParam._m0[89u].z, fma(_1391, cbSceneParam._m0[89u].y, _1390 * cbSceneParam._m0[89u].x));
    float _1416 = fma(_1392, cbSceneParam._m0[90u].z, fma(_1391, cbSceneParam._m0[90u].y, _1390 * cbSceneParam._m0[90u].x));
    float _1419 = fma(_1392, cbSceneParam._m0[91u].z, fma(_1391, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1390));
    float _1434 = _690 * 0.5;
    float _1435 = _691 * 0.5;
    float _1436 = _692 * 0.5;
    float _1437 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1368, _1371, _1374, _1377));
    float _1440 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1367, _1370, _1373, _1376));
    float _1443 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1366, _1369, _1372, _1375));
    float _1474;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1450 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1056, _1060, _1063, _1066));
        float _1454 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1058, _1061, _1064, _1067));
        float _1458 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1059, _1062, _1065, _1068));
        float _1465 = dot(vec4(cbModelParam._m0[39u]), vec4(_1434, _1435, _1436, 1.0));
        _1474 = dot(vec3(isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)), isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)), isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1465) ? 0.0 : (isnan(0.0) ? _1465 : max(0.0, _1465))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1474 = 1.0;
    }
    float _1485;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1476 = dot(vec4(cbModelParam._m0[40u]), vec4(_1434, _1435, _1436, 1.0));
        _1485 = dot(vec3(isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)), isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1476) ? 0.0 : (isnan(0.0) ? _1476 : max(0.0, _1476))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1485 = 1.0;
    }
    float _1489 = (_1485 * cbModelParam._m0[1u].x) + (_1474 * (1.0 - cbModelParam._m0[1u].x));
    float _1499 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _550);
    float _1500 = isnan(_1499) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1499 : min(cbModelParam._m0[25u].z, _1499));
    float _1580;
    float _1582;
    float _1584;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1547 = fma(_754, cbModelParam._m0[13u].z, fma(_750, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _746)) + cbModelParam._m0[13u].w;
        float _1551 = fma(_754, cbModelParam._m0[14u].z, fma(_750, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _746)) + cbModelParam._m0[14u].w;
        float _1555 = fma(_754, cbModelParam._m0[15u].z, fma(_750, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _746)) + cbModelParam._m0[15u].w;
        float _1558 = fma(_692, cbModelParam._m0[13u].z, fma(_691, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _690));
        float _1561 = fma(_692, cbModelParam._m0[14u].z, fma(_691, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _690));
        float _1564 = fma(_692, cbModelParam._m0[15u].z, fma(_691, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _690));
        float _1592;
        if (_1558 > 0.0)
        {
            _1592 = abs((1.0 - _1547) / _1558);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1547 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1592 = frontier_phi_16_14_ladder;
        }
        float _1768;
        if (_1561 > 0.0)
        {
            _1768 = abs((1.0 - _1551) / _1561);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1551 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1768 = frontier_phi_25_21_ladder;
        }
        float _2064;
        if (_1564 > 0.0)
        {
            _2064 = abs((1.0 - _1555) / _1564);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1564 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1555 + 1.0) / _1564);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2064 = frontier_phi_37_32_ladder;
        }
        float _2066 = isnan(_1768) ? _1592 : (isnan(_1592) ? _1768 : min(_1592, _1768));
        float _2067 = isnan(_2064) ? _2066 : (isnan(_2066) ? _2064 : min(_2066, _2064));
        float _2071 = (_2067 * _1558) + _1547;
        float _2072 = (_2067 * _1561) + _1551;
        float _2073 = (_2067 * _1564) + _1555;
        float _2074 = _2067 * 9.9999997473787516355514526367188e-05;
        float _2076 = (-1.0) - _2074;
        float _2078 = _2074 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2073 > _2078) || ((_2073 < _2076) || ((_2072 > _2078) || ((_2072 < _2076) || ((_2071 < _2076) || (_2071 > _2078))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2218 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2073, cbModelParam._m0[9u].z, fma(_2072, cbModelParam._m0[9u].y, _2071 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2073, cbModelParam._m0[10u].z, fma(_2072, cbModelParam._m0[10u].y, _2071 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2073, cbModelParam._m0[11u].z, fma(_2072, cbModelParam._m0[11u].y, _2071 * cbModelParam._m0[11u].x))), _1500);
            frontier_phi_15_37_ladder = _2218.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2218.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2218.z * cbModelParam._m0[1u].y;
        }
        _1580 = frontier_phi_15_37_ladder_1;
        _1582 = frontier_phi_15_37_ladder;
        _1584 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1568 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_690, _691, _692), _1500);
        _1580 = _1568.x * cbModelParam._m0[1u].y;
        _1582 = _1568.y * cbModelParam._m0[1u].y;
        _1584 = _1568.z * cbModelParam._m0[1u].y;
    }
    float _1588 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _550);
    float _1589 = isnan(_1588) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1588 : min(cbModelParam._m0[25u].w, _1588));
    float _1682;
    float _1684;
    float _1686;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1646 = fma(_754, cbModelParam._m0[21u].z, fma(_750, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _746)) + cbModelParam._m0[21u].w;
        float _1650 = fma(_754, cbModelParam._m0[22u].z, fma(_750, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _746)) + cbModelParam._m0[22u].w;
        float _1654 = fma(_754, cbModelParam._m0[23u].z, fma(_750, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _746)) + cbModelParam._m0[23u].w;
        float _1657 = fma(_692, cbModelParam._m0[21u].z, fma(_691, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _690));
        float _1660 = fma(_692, cbModelParam._m0[22u].z, fma(_691, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _690));
        float _1663 = fma(_692, cbModelParam._m0[23u].z, fma(_691, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _690));
        float _1773;
        if (_1657 > 0.0)
        {
            _1773 = abs((1.0 - _1646) / _1657);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1646 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1773 = frontier_phi_27_23_ladder;
        }
        float _2091;
        if (_1660 > 0.0)
        {
            _2091 = abs((1.0 - _1650) / _1660);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1650 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2091 = frontier_phi_39_34_ladder;
        }
        float _2429;
        if (_1663 > 0.0)
        {
            _2429 = abs((1.0 - _1654) / _1663);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1654 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2429 = frontier_phi_49_46_ladder;
        }
        float _2431 = isnan(_2091) ? _1773 : (isnan(_1773) ? _2091 : min(_1773, _2091));
        float _2432 = isnan(_2429) ? _2431 : (isnan(_2431) ? _2429 : min(_2431, _2429));
        float _2436 = (_2432 * _1657) + _1646;
        float _2437 = (_2432 * _1660) + _1650;
        float _2438 = (_2432 * _1663) + _1654;
        float _2439 = _2432 * 9.9999997473787516355514526367188e-05;
        float _2440 = (-1.0) - _2439;
        float _2442 = _2439 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2438 > _2442) || ((_2438 < _2440) || ((_2437 > _2442) || ((_2437 < _2440) || ((_2436 < _2440) || (_2436 > _2442))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2560 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2438, cbModelParam._m0[17u].z, fma(_2437, cbModelParam._m0[17u].y, _2436 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2438, cbModelParam._m0[18u].z, fma(_2437, cbModelParam._m0[18u].y, _2436 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2438, cbModelParam._m0[19u].z, fma(_2437, cbModelParam._m0[19u].y, _2436 * cbModelParam._m0[19u].x))), _1589);
            frontier_phi_24_49_ladder = _2560.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2560.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2560.x * cbModelParam._m0[1u].z;
        }
        _1682 = frontier_phi_24_49_ladder_2;
        _1684 = frontier_phi_24_49_ladder_1;
        _1686 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1666 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_690, _691, _692), _1589);
        _1682 = _1666.x * cbModelParam._m0[1u].z;
        _1684 = _1666.y * cbModelParam._m0[1u].z;
        _1686 = _1666.z * cbModelParam._m0[1u].z;
    }
    float _1699 = (((_717 * _668) + _718) * _682) * ((cbModelParam._m0[1u].w * (_1682 - _1580)) + _1580);
    float _1701 = (((_717 * _669) + _718) * _682) * ((cbModelParam._m0[1u].w * (_1684 - _1582)) + _1582);
    float _1703 = (((_717 * _670) + _718) * _682) * ((cbModelParam._m0[1u].w * (_1686 - _1584)) + _1584);
    float _1706 = fma(_1703, cbSceneParam._m0[89u].z, fma(_1701, cbSceneParam._m0[89u].y, _1699 * cbSceneParam._m0[89u].x));
    float _1709 = fma(_1703, cbSceneParam._m0[90u].z, fma(_1701, cbSceneParam._m0[90u].y, _1699 * cbSceneParam._m0[90u].x));
    float _1712 = fma(_1703, cbSceneParam._m0[91u].z, fma(_1701, cbSceneParam._m0[91u].y, _1699 * cbSceneParam._m0[91u].x));
    float _1747 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1751 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1755 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1759 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1760 = _1747 / _1759;
    float _1761 = _1751 / _1759;
    float _1762 = _1755 / _1759;
    float _1909;
    float _1910;
    float _1911;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1789 = ((uint(_1762 > cbSceneParam._m0[59u].y) + uint(_1762 > cbSceneParam._m0[59u].x)) + uint(_1762 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1790 = _1789 + 43u;
        uint _1798 = _1789 + 44u;
        uint _1806 = _1789 + 45u;
        uint _1814 = _1789 + 46u;
        float _1825 = fma(_1759, cbSceneParam._m0[_1790].w, fma(_1755, cbSceneParam._m0[_1790].z, fma(_1751, cbSceneParam._m0[_1790].y, _1747 * cbSceneParam._m0[_1790].x)));
        float _1829 = fma(_1759, cbSceneParam._m0[_1798].w, fma(_1755, cbSceneParam._m0[_1798].z, fma(_1751, cbSceneParam._m0[_1798].y, _1747 * cbSceneParam._m0[_1798].x)));
        float _1837 = fma(_1759, cbSceneParam._m0[_1814].w, fma(_1755, cbSceneParam._m0[_1814].z, fma(_1751, cbSceneParam._m0[_1814].y, _1747 * cbSceneParam._m0[_1814].x)));
        float _1842 = cbSceneParam._m0[33u].z * _1837;
        float _1844 = cbSceneParam._m0[33u].w * _1837;
        float _1847 = fma(_1759, cbSceneParam._m0[_1806].w, fma(_1755, cbSceneParam._m0[_1806].z, fma(_1751, cbSceneParam._m0[_1806].y, _1747 * cbSceneParam._m0[_1806].x))) / _1837;
        float _1895 = (cbSceneParam._m0[33u].x - sqrt(((_1761 * _1761) + (_1760 * _1760)) + (_1762 * _1762))) * cbSceneParam._m0[33u].y;
        float _4155 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1902 = (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1842 + _1825) / _1837, (_1844 + _1829) / _1837), _1847), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1844 + _1825) / _1837, (_1829 - _1842) / _1837), _1847), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1825 - _1842) / _1837, (_1829 - _1844) / _1837), _1847), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1825 - _1844) / _1837, (_1842 + _1829) / _1837), _1847), 0.0)).x), vec4(0.25)));
        _1909 = 1.0 - (_1902 * cbSceneParam._m0[34u].x);
        _1910 = 1.0 - (_1902 * cbSceneParam._m0[34u].y);
        _1911 = 1.0 - (_1902 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1909 = 1.0;
        _1910 = 1.0;
        _1911 = 1.0;
    }
    float _1975;
    float _1977;
    float _1979;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1963 = fma(_1759, cbSceneParam._m0[63u].w, fma(_1755, cbSceneParam._m0[63u].z, fma(_1751, cbSceneParam._m0[63u].y, _1747 * cbSceneParam._m0[63u].x)));
        float _1964 = fma(_1759, cbSceneParam._m0[60u].w, fma(_1755, cbSceneParam._m0[60u].z, fma(_1751, cbSceneParam._m0[60u].y, _1747 * cbSceneParam._m0[60u].x))) / _1963;
        float _1965 = fma(_1759, cbSceneParam._m0[61u].w, fma(_1755, cbSceneParam._m0[61u].z, fma(_1751, cbSceneParam._m0[61u].y, _1747 * cbSceneParam._m0[61u].x))) / _1963;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1964 >= cbSceneParam._m0[64u].x) && (_1965 >= cbSceneParam._m0[64u].y)) && (_1964 <= cbSceneParam._m0[64u].z)) && (_1965 <= cbSceneParam._m0[64u].w))
        {
            float _2104 = fma(_1759, cbSceneParam._m0[62u].w, fma(_1755, cbSceneParam._m0[62u].z, fma(_1751, cbSceneParam._m0[62u].y, _1747 * cbSceneParam._m0[62u].x))) / _1963;
            float _2108 = isnan(cbSceneParam._m0[41u].w) ? _2104 : (isnan(_2104) ? cbSceneParam._m0[41u].w : max(_2104, cbSceneParam._m0[41u].w));
            float _2151 = (cbSceneParam._m0[33u].x - sqrt(((_1761 * _1761) + (_1760 * _1760)) + (_1762 * _1762))) * cbSceneParam._m0[33u].y;
            float _4171 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
            float _2158 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1964, cbSceneParam._m0[33u].w + _1965), _2108), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1964, _1965 - cbSceneParam._m0[33u].z), _2108), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1964 - cbSceneParam._m0[33u].z, _1965 - cbSceneParam._m0[33u].w), _2108), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1964 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1965), _2108), 0.0)).x), vec4(0.25)));
            float _2162 = 1.0 - (_2158 * cbSceneParam._m0[34u].x);
            float _2163 = 1.0 - (_2158 * cbSceneParam._m0[34u].y);
            float _2164 = 1.0 - (_2158 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2163) ? _1910 : (isnan(_1910) ? _2163 : min(_1910, _2163));
            frontier_phi_36_35_ladder_1 = isnan(_2164) ? _1911 : (isnan(_1911) ? _2164 : min(_1911, _2164));
            frontier_phi_36_35_ladder_2 = isnan(_2162) ? _1909 : (isnan(_1909) ? _2162 : min(_1909, _2162));
        }
        else
        {
            frontier_phi_36_35_ladder = _1910;
            frontier_phi_36_35_ladder_1 = _1911;
            frontier_phi_36_35_ladder_2 = _1909;
        }
        _1975 = frontier_phi_36_35_ladder_2;
        _1977 = frontier_phi_36_35_ladder;
        _1979 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1975 = _1909;
        _1977 = _1910;
        _1979 = _1911;
    }
    uvec4 _1984 = floatBitsToUint(cbInstanceData._m0[_574 + 5u]);
    uint _1986 = _1984.x * 14u;
    uint _1987 = _1986 + 13u;
    float _1994 = _682 + (-1.0);
    float _1999 = (cbLight._m0[_1987].x * _1994) + 1.0;
    float _2000 = (cbLight._m0[_1987].y * _1994) + 1.0;
    float _2001 = (cbLight._m0[_1987].z * _1994) + 1.0;
    float _2002 = (cbLight._m0[_1987].w * _1994) + 1.0;
    uint _2003 = _1986 + 5u;
    float _2009 = isnan(1.0) ? _2000 : (isnan(_2000) ? 1.0 : min(_2000, 1.0));
    uint _2013 = _1986 + 4u;
    float _2023 = isnan(1.0) ? _1999 : (isnan(_1999) ? 1.0 : min(_1999, 1.0));
    uint _2027 = _1986 | 1u;
    float _2038 = dot(vec3(cbLight._m0[_1986].xyz), vec3(_377, _378, _379));
    float _2041 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_377, _378, _379));
    float _4207 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _4218 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2046 = (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * 0.3183098733425140380859375;
    float _2048 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * 0.3183098733425140380859375;
    float _2055 = ((cbLight._m0[_2003].x * _2009) * _2048) + (((cbLight._m0[_2013].x * _1975) * _2023) * _2046);
    float _2056 = ((_2009 * cbLight._m0[_2003].y) * _2048) + (((cbLight._m0[_2013].y * _1977) * _2023) * _2046);
    float _2057 = ((_2009 * cbLight._m0[_2003].z) * _2048) + (((cbLight._m0[_2013].z * _1979) * _2023) * _2046);
    uvec4 _2061 = floatBitsToUint(cbLight._m0[_1986 + 12u]);
    bool _2063 = _2061.x == 0u;
    float _2165;
    float _2167;
    float _2169;
    if (_2063)
    {
        _2165 = _2055;
        _2167 = _2056;
        _2169 = _2057;
    }
    else
    {
        uint _2173 = _1986 + 6u;
        float _2189 = (dot(vec3(cbLight._m0[_1986 + 2u].xyz), vec3(_377, _378, _379)) * 0.5) + 0.5;
        float _2190 = _2189 * _2189;
        float _4229 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2191 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _2192 = isnan(1.0) ? _2001 : (isnan(_2001) ? 1.0 : min(_2001, 1.0));
        _2165 = (((cbLight._m0[_2173].x * 0.3183098733425140380859375) * _2191) * _2192) + _2055;
        _2167 = (((cbLight._m0[_2173].y * 0.3183098733425140380859375) * _2191) * _2192) + _2056;
        _2169 = (((cbLight._m0[_2173].z * 0.3183098733425140380859375) * _2191) * _2192) + _2057;
    }
    bool _2172 = _2061.y == 0u;
    float _2227;
    float _2229;
    float _2231;
    if (_2172)
    {
        _2227 = _2165;
        _2229 = _2167;
        _2231 = _2169;
    }
    else
    {
        uint _2400 = _1986 + 7u;
        float _2416 = (dot(vec3(cbLight._m0[_1986 + 3u].xyz), vec3(_377, _378, _379)) * 0.5) + 0.5;
        float _2417 = _2416 * _2416;
        float _4245 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2418 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _2419 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
        _2227 = (((cbLight._m0[_2400].x * 0.3183098733425140380859375) * _2418) * _2419) + _2165;
        _2229 = (((cbLight._m0[_2400].y * 0.3183098733425140380859375) * _2418) * _2419) + _2167;
        _2231 = (((cbLight._m0[_2400].z * 0.3183098733425140380859375) * _2418) * _2419) + _2169;
    }
    uint _2234 = _1986 + 8u;
    float _2247 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1986].w)) * _550) * 0.949999988079071044921875);
    float _2248 = _2247 * _2247;
    float _2249 = cbLight._m0[_1986].x + _461;
    float _2250 = cbLight._m0[_1986].y + _462;
    float _2251 = cbLight._m0[_1986].z + _463;
    float _2255 = inversesqrt(dot(vec3(_2249, _2250, _2251), vec3(_2249, _2250, _2251)));
    float _2256 = _2255 * _2249;
    float _2257 = _2255 * _2250;
    float _2258 = _2255 * _2251;
    float _2259 = dot(vec3(_377, _378, _379), vec3(cbLight._m0[_1986].xyz));
    float _4261 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2262 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _4272 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _2263 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _2264 = dot(vec3(_377, _378, _379), vec3(_2256, _2257, _2258));
    float _4283 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2267 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _2268 = dot(vec3(cbLight._m0[_1986].xyz), vec3(_2256, _2257, _2258));
    float _4294 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2272 = _2248 * _2248;
    float _2276 = ((_2267 * _2267) * (_2272 + (-1.0))) + 1.0;
    float _2284 = exp2(log2(1.0 - (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0)))) * 5.0);
    float _2285 = 0.959999978542327880859375 - _665;
    float _2287 = 0.959999978542327880859375 - _666;
    float _2288 = 0.959999978542327880859375 - _667;
    float _2295 = 1.0 - _2248;
    float _2306 = (0.5 / (((_2263 * ((_2262 * _2295) + _2248)) + 9.9999999392252902907785028219223e-09) + (((_2263 * _2295) + _2248) * _2262))) * _2262;
    float _4305 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2308 = (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_2272 / ((_2276 * _2276) * 3.141590118408203125));
    uint _2322 = _1986 + 9u;
    float _2333 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2027].w)) * _550) * 0.949999988079071044921875);
    float _2334 = _2333 * _2333;
    float _2335 = cbLight._m0[_2027].x + _461;
    float _2336 = cbLight._m0[_2027].y + _462;
    float _2337 = cbLight._m0[_2027].z + _463;
    float _2341 = inversesqrt(dot(vec3(_2335, _2336, _2337), vec3(_2335, _2336, _2337)));
    float _2342 = _2341 * _2335;
    float _2343 = _2341 * _2336;
    float _2344 = _2341 * _2337;
    float _2345 = dot(vec3(_377, _378, _379), vec3(cbLight._m0[_2027].xyz));
    float _4316 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2348 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _2349 = dot(vec3(_377, _378, _379), vec3(_2342, _2343, _2344));
    float _4327 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2352 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _2353 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_2342, _2343, _2344));
    float _4338 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2357 = _2334 * _2334;
    float _2361 = ((_2352 * _2352) * (_2357 + (-1.0))) + 1.0;
    float _2368 = exp2(log2(1.0 - (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0)))) * 5.0);
    float _2375 = 1.0 - _2334;
    float _2385 = (0.5 / (((_2263 * ((_2348 * _2375) + _2334)) + 9.9999999392252902907785028219223e-09) + (((_2263 * _2375) + _2334) * _2348))) * _2348;
    float _4349 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2387 = (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_2357 / ((_2361 * _2361) * 3.141590118408203125));
    float _2397 = (((((_2368 * _2285) + _668) * cbLight._m0[_2322].x) * _2387) * _2009) + ((((cbLight._m0[_2234].x * _1975) * ((_2284 * _2285) + _668)) * _2308) * _2023);
    float _2398 = (((((_2368 * _2287) + _669) * cbLight._m0[_2322].y) * _2387) * _2009) + ((((cbLight._m0[_2234].y * _1977) * ((_2284 * _2287) + _669)) * _2308) * _2023);
    float _2399 = (((((_2368 * _2288) + _670) * cbLight._m0[_2322].z) * _2387) * _2009) + ((((cbLight._m0[_2234].z * _1979) * ((_2284 * _2288) + _670)) * _2308) * _2023);
    float _2455;
    float _2457;
    float _2459;
    if (_2063)
    {
        _2455 = _2397;
        _2457 = _2398;
        _2459 = _2399;
    }
    else
    {
        uint _2461 = _1986 + 2u;
        uint _2465 = _1986 + 10u;
        float _2479 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2461].w)) * _550) * 0.949999988079071044921875);
        float _2480 = _2479 * _2479;
        float _2481 = cbLight._m0[_2461].x + _461;
        float _2482 = cbLight._m0[_2461].y + _462;
        float _2483 = cbLight._m0[_2461].z + _463;
        float _2487 = inversesqrt(dot(vec3(_2481, _2482, _2483), vec3(_2481, _2482, _2483)));
        float _2488 = _2487 * _2481;
        float _2489 = _2487 * _2482;
        float _2490 = _2487 * _2483;
        float _2491 = dot(vec3(_377, _378, _379), vec3(cbLight._m0[_2461].xyz));
        float _4360 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2494 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _2495 = dot(vec3(_377, _378, _379), vec3(_2488, _2489, _2490));
        float _4371 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2498 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2499 = dot(vec3(cbLight._m0[_2461].xyz), vec3(_2488, _2489, _2490));
        float _4382 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2503 = _2480 * _2480;
        float _2507 = ((_2498 * _2498) * (_2503 + (-1.0))) + 1.0;
        float _2514 = exp2(log2(1.0 - (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0)))) * 5.0);
        float _2521 = 1.0 - _2480;
        float _2531 = (0.5 / (((_2263 * ((_2494 * _2521) + _2480)) + 9.9999999392252902907785028219223e-09) + (((_2263 * _2521) + _2480) * _2494))) * _2494;
        float _4393 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2533 = (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_2503 / ((_2507 * _2507) * 3.141590118408203125));
        float _2534 = isnan(1.0) ? _2001 : (isnan(_2001) ? 1.0 : min(_2001, 1.0));
        _2455 = (((((_2514 * _2285) + _668) * cbLight._m0[_2465].x) * _2533) * _2534) + _2397;
        _2457 = (((((_2514 * _2287) + _669) * cbLight._m0[_2465].y) * _2533) * _2534) + _2398;
        _2459 = (((((_2514 * _2288) + _670) * cbLight._m0[_2465].z) * _2533) * _2534) + _2399;
    }
    float _2565;
    float _2567;
    float _2569;
    if (_2172)
    {
        _2565 = _2455;
        _2567 = _2457;
        _2569 = _2459;
    }
    else
    {
        uint _2576 = _1986 + 3u;
        uint _2580 = _1986 + 11u;
        float _2594 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2576].w)) * _550) * 0.949999988079071044921875);
        float _2595 = _2594 * _2594;
        float _2596 = cbLight._m0[_2576].x + _461;
        float _2597 = cbLight._m0[_2576].y + _462;
        float _2598 = cbLight._m0[_2576].z + _463;
        float _2602 = inversesqrt(dot(vec3(_2596, _2597, _2598), vec3(_2596, _2597, _2598)));
        float _2603 = _2602 * _2596;
        float _2604 = _2602 * _2597;
        float _2605 = _2602 * _2598;
        float _2606 = dot(vec3(_377, _378, _379), vec3(cbLight._m0[_2576].xyz));
        float _4409 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2609 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _2610 = dot(vec3(_377, _378, _379), vec3(_2603, _2604, _2605));
        float _4420 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2613 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _2614 = dot(vec3(cbLight._m0[_2576].xyz), vec3(_2603, _2604, _2605));
        float _4431 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2618 = _2595 * _2595;
        float _2622 = ((_2613 * _2613) * (_2618 + (-1.0))) + 1.0;
        float _2629 = exp2(log2(1.0 - (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0)))) * 5.0);
        float _2636 = 1.0 - _2595;
        float _2646 = (0.5 / (((_2263 * ((_2609 * _2636) + _2595)) + 9.9999999392252902907785028219223e-09) + (((_2263 * _2636) + _2595) * _2609))) * _2609;
        float _4442 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2648 = (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_2618 / ((_2622 * _2622) * 3.141590118408203125));
        float _2649 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
        _2565 = (((((_2629 * _2285) + _668) * cbLight._m0[_2580].x) * _2648) * _2649) + _2455;
        _2567 = (((((_2629 * _2287) + _669) * cbLight._m0[_2580].y) * _2648) * _2649) + _2457;
        _2569 = (((((_2629 * _2288) + _670) * cbLight._m0[_2580].z) * _2648) * _2649) + _2459;
    }
    float _2714;
    float _2716;
    float _2718;
    float _2720;
    float _2722;
    float _2724;
    if (_1984.y == 0u)
    {
        uvec4 _2670 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2671 = _2670.x;
        uint _2682 = uint((float(_2670.y) * floor(float(uint(cbSceneParam._m0[85u].y * _470) / _2671))) + floor(float(uint(cbSceneParam._m0[85u].x * _469) / _2671)));
        float _2692 = (log2(_1762 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2693 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        uint _2696 = uint(isnan(14.0) ? _2693 : (isnan(_2693) ? 14.0 : min(_2693, 14.0)));
        uvec4 _2701 = texelFetch(g_lightClusterGridBuffer, int(((_2696 << 2u) + (_2682 << 6u)) >> 2u));
        uint _2702 = _2701.x;
        uint _2703 = _2670.z;
        float _2786;
        float _2788;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        if (((((1u << ((_2703 >> 4u) & 15u)) + 4294967295u) & _2702) == 0u) || ((_2703 & 240u) == 0u))
        {
            _2786 = 0.0;
            _2788 = 0.0;
            _2790 = 0.0;
            _2792 = 0.0;
            _2794 = 0.0;
            _2796 = 0.0;
        }
        else
        {
            float _2787;
            float _2789;
            float _2791;
            float _2793;
            float _2795;
            float _2797;
            float _2930 = 0.0;
            float _2931 = 0.0;
            float _2932 = 0.0;
            float _2933 = 0.0;
            float _2934 = 0.0;
            float _2935 = 0.0;
            uint _2936 = 0u;
            uint _2945;
            bool _2946;
            for (;;)
            {
                _2945 = texelFetch(g_lightClassification, int((((_2696 << 5u) + (_2682 << 9u)) + (_2936 << 2u)) >> 2u)).x;
                _2946 = _2945 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2946)
                {
                    frontier_phi_68_pred = _2935;
                    frontier_phi_68_pred_1 = _2934;
                    frontier_phi_68_pred_2 = _2933;
                    frontier_phi_68_pred_3 = _2931;
                    frontier_phi_68_pred_4 = _2930;
                    frontier_phi_68_pred_5 = _2932;
                }
                else
                {
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    uint _3060;
                    _3054 = _2930;
                    _3055 = _2931;
                    _3056 = _2932;
                    _3057 = _2933;
                    _3058 = _2934;
                    _3059 = _2935;
                    _3060 = _2945;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    float _2991;
                    for (;;)
                    {
                        uint _3064 = uint(findLSB(_3060)) + (_2936 << 5u);
                        uint _3061 = (_3060 + 4294967295u) & _3060;
                        uint _3066 = _3064 * 48u;
                        vec4 _3080 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3066)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 3u)).x));
                        uint _3086 = (_3064 * 48u) + 4u;
                        vec4 _3099 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3086)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 3u)).x));
                        uint _3105 = (_3064 * 48u) + 8u;
                        vec3 _3116 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3105)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 2u)).x));
                        float _3120 = _3080.x - _1760;
                        float _3121 = _3080.y - _1761;
                        float _3122 = _3080.z - _1762;
                        float _3123 = dot(vec3(_3120, _3121, _3122), vec3(_3120, _3121, _3122));
                        float _3126 = inversesqrt(_3123);
                        float _3127 = _3126 * _3120;
                        float _3128 = _3126 * _3121;
                        float _3129 = _3126 * _3122;
                        float _3130 = dot(vec3(_494, _497, _500), vec3(_3127, _3128, _3129));
                        float _3135 = 1.0 - (_3123 * _3080.w);
                        float _4468 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                        float _3136 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
                        float _3137 = sqrt(_3123) * _3099.w;
                        float _3140 = 1.39999997615814208984375 / (_3137 + 1.39999997615814208984375);
                        float _3141 = _3140 * _3140;
                        float _3144 = ((1.0 - _3141) * _3130) + _3141;
                        float _3147 = _3137 * _3137;
                        float _3151 = ((isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0))) * _3136) / ((_3147 * 0.699999988079071044921875) + 1.0);
                        float _3155 = (-0.0) - _1760;
                        float _3156 = (-0.0) - _1761;
                        float _3157 = (-0.0) - _1762;
                        float _3161 = inversesqrt(dot(vec3(_3155, _3156, _3157), vec3(_3155, _3156, _3157)));
                        float _3162 = _3161 * _3155;
                        float _3163 = _3161 * _3156;
                        float _3164 = _3161 * _3157;
                        float _3171 = exp2(log2(1.0 / ((_3147 * 3.5) + 5.0)) * 0.25);
                        float _3172 = 1.0 - _698;
                        float _3179 = sqrt(1.0 - ((1.0 - (_3172 * _3172)) * (1.0 - (_3171 * _3171))));
                        float _3180 = _3179 * _3179;
                        float _3181 = _3180 * _3180;
                        float _3182 = _3162 + _3127;
                        float _3183 = _3163 + _3128;
                        float _3184 = _3164 + _3129;
                        float _3188 = inversesqrt(dot(vec3(_3182, _3183, _3184), vec3(_3182, _3183, _3184)));
                        float _3192 = dot(vec3(_494, _497, _500), vec3(_3162, _3163, _3164));
                        float _4484 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                        float _3195 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                        float _3196 = dot(vec3(_494, _497, _500), vec3(_3188 * _3182, _3188 * _3183, _3188 * _3184));
                        float _4495 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                        float _3199 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                        float _3203 = ((_3199 * _3199) * (_3181 + (-1.0))) + 1.0;
                        float _3204 = _3140 * _3180;
                        float _3205 = _3204 * _3204;
                        float _3208 = ((1.0 - _3205) * _3130) + _3205;
                        float _4506 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                        float _3209 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                        float _3210 = 1.0 - _3180;
                        float _3220 = (0.5 / (((_3209 * ((_3195 * _3210) + _3180)) + 9.9999999392252902907785028219223e-09) + (((_3209 * _3210) + _3180) * _3195))) * _3209;
                        float _4517 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                        float _3231 = (((_3181 * 3.1415927410125732421875) * (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0)))) / ((_3203 * _3203) * ((_3147 * 2.1991131305694580078125) + 3.141590118408203125))) * _3136;
                        _2989 = (_3151 * _3099.x) + _3057;
                        _2990 = (_3151 * _3099.y) + _3058;
                        _2991 = (_3151 * _3099.z) + _3059;
                        _2986 = (_3231 * _3116.x) + _3054;
                        _2987 = (_3231 * _3116.y) + _3055;
                        _2988 = (_3231 * _3116.z) + _3056;
                        if (_3061 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3054 = _2986;
                            _3055 = _2987;
                            _3056 = _2988;
                            _3057 = _2989;
                            _3058 = _2990;
                            _3059 = _2991;
                            _3060 = _3061;
                        }
                    }
                    frontier_phi_68_pred = _2991;
                    frontier_phi_68_pred_1 = _2990;
                    frontier_phi_68_pred_2 = _2989;
                    frontier_phi_68_pred_3 = _2987;
                    frontier_phi_68_pred_4 = _2986;
                    frontier_phi_68_pred_5 = _2988;
                }
                _2797 = frontier_phi_68_pred;
                _2795 = frontier_phi_68_pred_1;
                _2793 = frontier_phi_68_pred_2;
                _2789 = frontier_phi_68_pred_3;
                _2787 = frontier_phi_68_pred_4;
                _2791 = frontier_phi_68_pred_5;
                uint _2937 = _2936 + 1u;
                if (_2937 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2930 = _2787;
                    _2931 = _2789;
                    _2932 = _2791;
                    _2933 = _2793;
                    _2934 = _2795;
                    _2935 = _2797;
                    _2936 = _2937;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2786 = _2787;
            _2788 = _2789;
            _2790 = _2791;
            _2792 = _2793;
            _2794 = _2795;
            _2796 = _2797;
        }
        uvec4 _2800 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2801 = _2800.z;
        uint _2803 = (_2801 >> 8u) & 15u;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        if (((4294967295u << _2803) & _2702) == 0u)
        {
            _2898 = _2786;
            _2900 = _2788;
            _2902 = _2790;
            _2904 = _2792;
            _2906 = _2794;
            _2908 = _2796;
        }
        else
        {
            float _2923 = inversesqrt(dot(vec3(_1760, _1761, _1762), vec3(_1760, _1761, _1762)));
            float _2924 = _2923 * _1760;
            float _2925 = _2923 * _1761;
            float _2926 = _2923 * _1762;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2803 < ((_2801 >> 12u) & 15u))
            {
                float _2899;
                float _2901;
                float _2903;
                float _2905;
                float _2907;
                float _2909;
                float _3037 = _2786;
                float _3038 = _2788;
                float _3039 = _2790;
                float _3040 = _2792;
                float _3041 = _2794;
                float _3042 = _2796;
                uint _3043 = _2803;
                uint _3052;
                bool _3053;
                for (;;)
                {
                    _3052 = texelFetch(g_lightClassification, int((((_2696 << 5u) + (_2682 << 9u)) + (_3043 << 2u)) >> 2u)).x;
                    _3053 = _3052 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3053)
                    {
                        frontier_phi_74_pred = _3039;
                        frontier_phi_74_pred_1 = _3038;
                        frontier_phi_74_pred_2 = _3037;
                        frontier_phi_74_pred_3 = _3042;
                        frontier_phi_74_pred_4 = _3041;
                        frontier_phi_74_pred_5 = _3040;
                    }
                    else
                    {
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3249 = _3037;
                        float _3250 = _3038;
                        float _3251 = _3039;
                        float _3252 = _3040;
                        float _3253 = _3041;
                        float _3254 = _3042;
                        uint _3255 = _3052;
                        uint _3256;
                        vec4 _3281;
                        float _3282;
                        vec4 _3297;
                        vec3 _3309;
                        vec4 _3324;
                        vec4 _3340;
                        float _3387;
                        bool _3388;
                        for (;;)
                        {
                            uint _3266 = ((_3043 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3255));
                            _3256 = (_3255 + 4294967295u) & _3255;
                            uint _3268 = _3266 * 40u;
                            _3281 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3268)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 3u)).x));
                            _3282 = _3281.w;
                            uint _3284 = (_3266 * 40u) + 4u;
                            _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            uint _3299 = (_3266 * 40u) + 8u;
                            _3309 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x));
                            uint _3311 = (_3266 * 40u) + 16u;
                            _3324 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 3u)).x));
                            uint _3327 = (_3266 * 40u) + 20u;
                            _3340 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 3u)).x));
                            uint _3343 = (_3266 * 40u) + 24u;
                            vec4 _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            uint _3362 = (_3266 * 40u) + 28u;
                            vec4 _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            _3387 = fma(_1762, _3375.z, fma(_1761, _3375.y, _3375.x * _1760)) + _3375.w;
                            _3388 = !((fma(_1762, _3356.z, fma(_1761, _3356.y, _3356.x * _1760)) + _3356.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3388)
                            {
                                float _3415 = _3281.x - _1760;
                                float _3416 = _3281.y - _1761;
                                float _3417 = _3281.z - _1762;
                                float _3418 = dot(vec3(_3415, _3416, _3417), vec3(_3415, _3416, _3417));
                                float _3421 = inversesqrt(_3418);
                                float _3422 = _3421 * _3415;
                                float _3423 = _3421 * _3416;
                                float _3424 = _3421 * _3417;
                                float _3428 = 1.0 - (_3418 / (_3282 * _3282));
                                float _4528 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3429 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                                float _3433 = sqrt(_3418) * _3297.w;
                                float _3435 = 1.39999997615814208984375 / (_3433 + 1.39999997615814208984375);
                                float _3436 = _3435 * _3435;
                                float _3439 = ((1.0 - _3436) * dot(vec3(_3422, _3423, _3424), vec3(_494, _497, _500))) + _3436;
                                float _3442 = _3433 * _3433;
                                float _3446 = (fma(_1762, _3324.z, fma(_1761, _3324.y, _3324.x * _1760)) + _3324.w) / _3387;
                                float _3447 = (fma(_1762, _3340.z, fma(_1761, _3340.y, _3340.x * _1760)) + _3340.w) / _3387;
                                float _3451 = 1.0 - dot(vec2(_3446, _3447), vec2(_3446, _3447));
                                float _4544 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3452 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                                float _3453 = _3452 * (((isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0))) * _3429) / ((_3442 * 0.699999988079071044921875) + 1.0));
                                float _3465 = exp2(log2(1.0 / ((_3442 * 3.5) + 5.0)) * 0.25);
                                float _3466 = 1.0 - _698;
                                float _3473 = sqrt(1.0 - ((1.0 - (_3466 * _3466)) * (1.0 - (_3465 * _3465))));
                                float _3474 = _3473 * _3473;
                                float _3475 = _3474 * _3474;
                                float _3476 = _3422 - _2924;
                                float _3477 = _3423 - _2925;
                                float _3478 = _3424 - _2926;
                                float _3482 = inversesqrt(dot(vec3(_3476, _3477, _3478), vec3(_3476, _3477, _3478)));
                                float _3486 = dot(vec3(_494, _497, _500), vec3((-0.0) - _2924, (-0.0) - _2925, (-0.0) - _2926));
                                float _4555 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3489 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                                float _3490 = dot(vec3(_494, _497, _500), vec3(_3482 * _3476, _3482 * _3477, _3482 * _3478));
                                float _4566 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                                float _3493 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                                float _3497 = ((_3493 * _3493) * (_3475 + (-1.0))) + 1.0;
                                float _3498 = _3435 * _3474;
                                float _3499 = _3498 * _3498;
                                float _3505 = ((1.0 - _3499) * dot(vec3(_494, _497, _500), vec3(_3422, _3423, _3424))) + _3499;
                                float _4577 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                                float _3506 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                                float _3507 = 1.0 - _3474;
                                float _3517 = (0.5 / (((_3506 * ((_3489 * _3507) + _3474)) + 9.9999999392252902907785028219223e-09) + (((_3506 * _3507) + _3474) * _3489))) * _3506;
                                float _4588 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3527 = (_3452 * _3429) * (((_3475 * 3.1415927410125732421875) * (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0)))) / ((_3497 * _3497) * ((_3442 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3527 * _3309.z;
                                frontier_phi_80_pred_1 = _3527 * _3309.y;
                                frontier_phi_80_pred_2 = _3527 * _3309.x;
                                frontier_phi_80_pred_3 = _3453 * _3297.z;
                                frontier_phi_80_pred_4 = _3453 * _3297.y;
                                frontier_phi_80_pred_5 = _3453 * _3297.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3533 = frontier_phi_80_pred;
                            _3532 = frontier_phi_80_pred_1;
                            _3531 = frontier_phi_80_pred_2;
                            _3536 = frontier_phi_80_pred_3;
                            _3535 = frontier_phi_80_pred_4;
                            _3534 = frontier_phi_80_pred_5;
                            _3239 = _3534 + _3252;
                            _3240 = _3535 + _3253;
                            _3241 = _3536 + _3254;
                            _3236 = _3531 + _3249;
                            _3237 = _3532 + _3250;
                            _3238 = _3533 + _3251;
                            if (_3256 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3249 = _3236;
                                _3250 = _3237;
                                _3251 = _3238;
                                _3252 = _3239;
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3256;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3238;
                        frontier_phi_74_pred_1 = _3237;
                        frontier_phi_74_pred_2 = _3236;
                        frontier_phi_74_pred_3 = _3241;
                        frontier_phi_74_pred_4 = _3240;
                        frontier_phi_74_pred_5 = _3239;
                    }
                    _2903 = frontier_phi_74_pred;
                    _2901 = frontier_phi_74_pred_1;
                    _2899 = frontier_phi_74_pred_2;
                    _2909 = frontier_phi_74_pred_3;
                    _2907 = frontier_phi_74_pred_4;
                    _2905 = frontier_phi_74_pred_5;
                    uint _3044 = _3043 + 1u;
                    if (_3044 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3037 = _2899;
                        _3038 = _2901;
                        _3039 = _2903;
                        _3040 = _2905;
                        _3041 = _2907;
                        _3042 = _2909;
                        _3043 = _3044;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2907;
                frontier_phi_62_63_ladder_1 = _2905;
                frontier_phi_62_63_ladder_2 = _2903;
                frontier_phi_62_63_ladder_3 = _2909;
                frontier_phi_62_63_ladder_4 = _2901;
                frontier_phi_62_63_ladder_5 = _2899;
            }
            else
            {
                frontier_phi_62_63_ladder = _2794;
                frontier_phi_62_63_ladder_1 = _2792;
                frontier_phi_62_63_ladder_2 = _2790;
                frontier_phi_62_63_ladder_3 = _2796;
                frontier_phi_62_63_ladder_4 = _2788;
                frontier_phi_62_63_ladder_5 = _2786;
            }
            _2898 = frontier_phi_62_63_ladder_5;
            _2900 = frontier_phi_62_63_ladder_4;
            _2902 = frontier_phi_62_63_ladder_2;
            _2904 = frontier_phi_62_63_ladder_1;
            _2906 = frontier_phi_62_63_ladder;
            _2908 = frontier_phi_62_63_ladder_3;
        }
        float _2913 = isnan(1.0) ? _682 : (isnan(_682) ? 1.0 : min(_682, 1.0));
        _2714 = (_2913 * _2904) + _2227;
        _2716 = (_2913 * _2906) + _2229;
        _2718 = (_2913 * _2908) + _2231;
        _2720 = ((_2898 * _668) * _2913) + _2565;
        _2722 = ((_2900 * _669) * _2913) + _2567;
        _2724 = ((_2902 * _670) * _2913) + _2569;
    }
    else
    {
        _2714 = _2227;
        _2716 = _2229;
        _2718 = _2231;
        _2720 = _2565;
        _2722 = _2567;
        _2724 = _2569;
    }
    float _4604 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _4615 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _4626 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _4637 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _2742 = ((isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_2714 + ((isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0))) * _682))) + ((_2720 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _1489)) * cbPerFrame._m0[3u].x);
    float _2743 = ((isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2716 + ((isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))) * _682))) + ((_2722 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _1489)) * cbPerFrame._m0[3u].x);
    float _2744 = ((isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2718 + ((isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))) * _682))) + ((_2724 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _1489)) * cbPerFrame._m0[3u].x);
    float _2752 = cbInstanceData._m0[_574 + 6u].w * (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0)));
    float _2757 = _469 / cbSceneParam._m0[86u].x;
    float _2758 = _470 / cbSceneParam._m0[86u].y;
    vec4 _2772 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2757, _2758, (log2((isnan(cbSceneParam._m0[77u].w) ? _401 : (isnan(_401) ? cbSceneParam._m0[77u].w : min(_401, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2774 = _2772.x;
    float _2775 = _2772.y;
    float _2776 = _2772.z;
    float _2777 = _2772.w;
    float _2848;
    float _2850;
    float _2852;
    float _2854;
    if (_401 > cbSceneParam._m0[78u].w)
    {
        float _2811 = isnan(_401) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _401 : min(cbSceneParam._m0[80u].w, _401));
        float _2812 = _2811 / _401;
        float _2823 = _2812 * _454;
        float _2824 = _455 * _2812;
        float _2825 = (-0.0) - _2824;
        float _2826 = _2812 * _456;
        float _2828 = (cbSceneParam._m0[77u].w * _2825) / _2811;
        float _2829 = _2828 + cbSceneParam._m0[79u].w;
        float _2830 = cbSceneParam._m0[79u].w - _2824;
        float _2836 = sqrt(((_2823 * _2823) + (_2824 * _2824)) + (_2826 * _2826));
        float _2839 = (1.0 - (cbSceneParam._m0[77u].w / _2811)) * _2836;
        float _2844 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2846 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2999;
        if (abs((_2825 - _2828) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2999 = ((((_2829 > 0.0) ? exp2(_2844 * _2829) : (2.0 - exp2(_2846 * _2829))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2839;
        }
        else
        {
            float _2959 = 1.0 / cbSceneParam._m0[80u].x;
            float _2960 = isnan(_2830) ? _2829 : (isnan(_2829) ? _2830 : max(_2829, _2830));
            float _2961 = isnan(_2830) ? _2829 : (isnan(_2829) ? _2830 : min(_2829, _2830));
            float _2970 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : min(_2960, 0.0));
            float _2971 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : min(_2961, 0.0));
            _2999 = ((abs(_2836 / _2825) * cbSceneParam._m0[80u].y) * ((((_2970 - _2971) * 2.0) - ((exp2(_2844 * (isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0)))) - exp2(_2844 * (isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0))))) * _2959)) - ((exp2(_2846 * _2970) - exp2(_2846 * _2971)) * _2959))) + (_2839 * cbSceneParam._m0[80u].z);
        }
        vec4 _3001 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2757, _2758, 1.0), 0.0);
        float _3010 = exp2((_2999 * (-1.44269502162933349609375)) * (1.0 - _3001.w));
        float _3011 = log2(_3010);
        float _3027 = log2(_2777);
        _2848 = (exp2(_3027 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3011 * cbSceneParam._m0[78u].x)) * _3001.x) / cbSceneParam._m0[78u].x)) + _2774;
        _2850 = (exp2(_3027 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3011 * cbSceneParam._m0[78u].y)) * _3001.y) / cbSceneParam._m0[78u].y)) + _2775;
        _2852 = (exp2(_3027 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3011 * cbSceneParam._m0[78u].z)) * _3001.z) / cbSceneParam._m0[78u].z)) + _2776;
        _2854 = _3010 * _2777;
    }
    else
    {
        _2848 = _2774;
        _2850 = _2775;
        _2852 = _2776;
        _2854 = _2777;
    }
    float _2866 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2867 = _2866 == 3.0;
    float _2868 = log2(_2854);
    float _2875 = exp2(_2868 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0)));
    float _2876 = exp2(_2868 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0)));
    float _2877 = exp2(_2868 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0)));
    float _2886 = (_2866 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2886 * (_2867 ? _2875 : (_2875 + (cbSceneParam._m0[72u].w * _2848)));
    SV_Target.y = _2886 * (_2867 ? _2876 : (_2876 + (cbSceneParam._m0[72u].w * _2850)));
    SV_Target.z = _2886 * (_2867 ? _2877 : (_2877 + (cbSceneParam._m0[72u].w * _2852)));
    SV_Target.w = _2752;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2752;
}


