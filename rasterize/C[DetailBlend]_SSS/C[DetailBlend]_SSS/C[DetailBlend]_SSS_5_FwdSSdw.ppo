#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1209;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232;
    float _233;
    float _234;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
    }
    else
    {
        _232 = _218;
        _233 = _219;
        _234 = _220;
    }
    vec4 _248 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _253 = _248.z;
    float _260 = exp2(log2(_253 * 22.0) * 260.0);
    float _261 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _262 = isnan(1.0) ? _261 : (isnan(_261) ? 1.0 : min(_261, 1.0));
    vec4 _276 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _287 = cbMtdParam._m0[10u].x * _276.x;
    float _288 = cbMtdParam._m0[10u].y * _276.y;
    float _289 = cbMtdParam._m0[10u].z * _276.z;
    vec4 _301 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _317 = exp2(log2(1.0 - _248.w) * 8.0);
    vec4 _329 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _354 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _376 = (((((_301.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _354.x) - _287) * _262) + _287;
    float _377 = (((((_301.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _354.y) - _288) * _262) + _288;
    float _378 = (((((_301.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _354.z) - _289) * _262) + _289;
    float _385 = (((cbMtdParam._m0[12u].x * _329.x) - _376) * _317) + _376;
    float _386 = (((cbMtdParam._m0[12u].y * _329.y) - _377) * _317) + _377;
    float _387 = (((cbMtdParam._m0[12u].z * _329.z) - _378) * _317) + _378;
    float _388 = _354.w * _301.w;
    float _416 = (((texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _262) + cbMtdParam._m0[15u].y;
    float _419 = ((cbMtdParam._m0[14u].y - _416) * _317) + _416;
    vec4 _432 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _434 = _432.x;
    float _435 = _432.y;
    float _441 = cbMtdParam._m0[13u].y + _432.z;
    vec4 _453 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _472 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _483 = ((((_253 * 2.0) * (cbMtdParam._m0[13u].x + _453.z)) - _441) * _262) + _441;
    float _487 = (((_472.z - _483) + cbMtdParam._m0[14u].x) * _317) + _483;
    float _491 = (_248.x * 2.0) + (-1.0);
    float _493 = (_248.y * 2.0) + (-1.0);
    float _494 = dot(vec2(_491, _493), vec2(_491, _493));
    float _3577 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _499 = sqrt(1.0 - (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))));
    float _504 = ((_453.x - _434) * _262) + _434;
    float _505 = ((_453.y - _435) * _262) + _435;
    float _518 = ((((((_472.x - _504) * _317) + _504) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _491;
    float _519 = ((((((_472.y - _505) * _317) + _505) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _493;
    float _522 = fma(_499, _232, fma(_519, _224 * TANGENT.x, (_210 * _202) * _518));
    float _525 = fma(_499, _233, fma(_519, _224 * TANGENT.y, (_210 * _203) * _518));
    float _528 = fma(_499, _234, fma(_519, _224 * TANGENT.z, (_210 * _204) * _518));
    float _532 = inversesqrt(dot(vec3(_522, _525, _528), vec3(_522, _525, _528)));
    float _533 = _532 * _522;
    float _534 = _532 * _525;
    float _535 = _532 * _528;
    float _3588 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _536 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
    float _3599 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _537 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _3610 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _538 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _3621 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _539 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _3632 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _540 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _3643 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _541 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _557 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _598 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _608 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _598);
    float _609 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _598);
    float _610 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _598);
    float _614 = inversesqrt(dot(vec3(_608, _609, _610), vec3(_608, _609, _610)));
    float _615 = _608 * _614;
    float _616 = _609 * _614;
    float _617 = _610 * _614;
    float _623 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _624 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _626 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _628 = _626.w;
    float _647 = fma(_535, cbSceneParam._m0[5u].z, fma(_534, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _533));
    float _650 = fma(_535, cbSceneParam._m0[6u].z, fma(_534, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _533));
    float _653 = fma(_535, cbSceneParam._m0[7u].z, fma(_534, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _533));
    vec4 _655 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _657 = _655.x;
    float _669 = (((_655.y - _537) + (_655.w * _537)) * cbMtdParam._m0[3u].x) + _537;
    vec4 _670 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _686 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_657 * _657)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _670.z;
    float _694 = (((cbMatDynParam._m0[15u].x - _541) * cbMatDynParam._m0[15u].w) * _686) + _541;
    float _702 = ((_686 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _669)) + _669;
    uint _726 = uint(roundEven(NORMAL.w)) * 13u;
    uint _728 = (_726 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _734 = (cbMtdParam._m0[0u].x * _538) * cbInstanceData._m0[_728].x;
    float _735 = (cbMtdParam._m0[0u].y * _539) * cbInstanceData._m0[_728].y;
    float _736 = (cbMtdParam._m0[0u].z * _540) * cbInstanceData._m0[_728].z;
    float _3654 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _737 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _3665 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _738 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _3676 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _739 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    vec4 _740 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _745 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _756 = (((_745.x - _694) + (_745.w * _694)) * cbMtdParam._m0[3u].x) + _694;
    float _769 = (cbMtdParam._m0[3u].x * (((_737 * _628) - _737) + _740.x)) + _737;
    float _770 = (cbMtdParam._m0[3u].x * (((_738 * _628) - _738) + _740.y)) + _738;
    float _771 = (cbMtdParam._m0[3u].x * (((_739 * _628) - _739) + _740.z)) + _739;
    vec4 _772 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _785 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_694 * (_538 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_694 * (_539 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_694 * (_540 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _772.z;
    float _789 = _785 * cbMatDynParam._m0[13u].w;
    float _799 = (_789 * (cbMatDynParam._m0[13u].x - _769)) + _769;
    float _800 = (_789 * (cbMatDynParam._m0[13u].y - _770)) + _770;
    float _801 = (_789 * (cbMatDynParam._m0[13u].z - _771)) + _771;
    float _809 = ((_785 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _756)) + _756;
    float _810 = 1.0 - _809;
    float _811 = _810 * _799;
    float _812 = _810 * _800;
    float _813 = _810 * _801;
    float _817 = (_799 + (-0.039999999105930328369140625)) * _809;
    float _818 = (_800 + (-0.039999999105930328369140625)) * _809;
    float _819 = (_801 + (-0.039999999105930328369140625)) * _809;
    float _820 = _817 + 0.039999999105930328369140625;
    float _821 = _818 + 0.039999999105930328369140625;
    float _822 = _819 + 0.039999999105930328369140625;
    vec4 _831 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _623, cbSceneParam._m0[86u].y * _624));
    float _834 = _831.x * TEXCOORD_4;
    float _835 = dot(vec3(_533, _534, _535), vec3(_615, _616, _617));
    float _838 = _835 * 2.0;
    float _842 = (_838 * _533) - _615;
    float _843 = (_838 * _534) - _616;
    float _844 = (_838 * _535) - _617;
    float _848 = abs(dot(vec3(_615, _616, _617), vec3(_533, _534, _535)));
    float _3687 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _850 = sqrt(_702);
    float _863 = exp2((_850 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_850 * 3.0));
    float _869 = (1.0 - _863) * ((_850 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _870 = _863 * _850;
    float _898 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _902 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _906 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1208;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _933 = fma(_906, cbModelParam._m0[26u].z, fma(_902, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _898));
        float _937 = fma(_906, cbModelParam._m0[27u].z, fma(_902, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _898));
        float _941 = fma(_906, cbModelParam._m0[28u].z, fma(_902, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _898));
        float _966 = _898 + _533;
        float _967 = _902 + _534;
        float _968 = _906 + _535;
        float _978 = fma(_968, cbModelParam._m0[26u].z, fma(_967, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _966)) - _933;
        float _979 = fma(_968, cbModelParam._m0[27u].z, fma(_967, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _966)) - _937;
        float _980 = fma(_968, cbModelParam._m0[28u].z, fma(_967, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _966)) - _941;
        float _984 = inversesqrt(dot(vec3(_978, _979, _980), vec3(_978, _979, _980)));
        float _997 = ((_984 * _978) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_933 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _998 = ((_984 * _979) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_937 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _999 = ((_984 * _980) / cbModelParam._m0[34u].z) + ((((((_941 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_997, _998, _999), 0.0);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_997, _998, _999), 0.0);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_997, _998, _999), 0.0);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_997, _998, _999), 0.0);
        float _1036 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_1002.x + (-0.5));
        float _1038 = _1036 * (_1002.y + (-0.5));
        float _1039 = _1036 * (_1002.z + (-0.5));
        float _1046 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1009.x + (-0.5));
        float _1048 = _1046 * (_1009.y + (-0.5));
        float _1049 = _1046 * (_1009.z + (-0.5));
        float _1056 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1016.x + (-0.5));
        float _1058 = _1056 * (_1016.y + (-0.5));
        float _1059 = _1056 * (_1016.z + (-0.5));
        float _1066 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1023.x + (-0.5));
        float _1068 = _1066 * (_1023.y + (-0.5));
        float _1069 = _1066 * (_1023.z + (-0.5));
        float _1070 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = _1037 * 0.5;
        float _1074 = _1047 * 0.5;
        float _1075 = _1057 * 0.5;
        float _1076 = dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075));
        float _1081 = (_1076 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1076);
        float _1090 = (dot(vec3(_533, _534, _535), vec3(_1081 * _1073, _1081 * _1074, _1081 * _1075)) + 1.0) * 0.5;
        float _3713 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1100 = sqrt(((_1074 * _1074) + (_1073 * _1073)) + (_1075 * _1075)) / (_1070 + 9.9999997473787516355514526367188e-06);
        float _3724 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _3735 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_1102 + 1.0))) + _1107) * _1070;
        float _1117 = _1038 * 0.5;
        float _1118 = _1048 * 0.5;
        float _1119 = _1058 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(_533, _534, _535), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _3746 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _3757 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _3768 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * (_1144 + 1.0))) + _1149) * _1071;
        float _1159 = _1039 * 0.5;
        float _1160 = _1049 * 0.5;
        float _1161 = _1059 * 0.5;
        float _1162 = dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161));
        float _1167 = (_1162 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1162);
        float _1175 = (dot(vec3(_533, _534, _535), vec3(_1167 * _1159, _1167 * _1160, _1167 * _1161)) + 1.0) * 0.5;
        float _3779 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1184 = sqrt(((_1160 * _1160) + (_1159 * _1159)) + (_1161 * _1161)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _3790 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1186 = _1185 * 2.0;
        float _1190 = (1.0 - _1185) / (_1185 + 1.0);
        float _3801 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1200 = ((((1.0 - _1191) * (_1186 + 2.0)) * exp2(log2(isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_1186 + 1.0))) + _1191) * _1072;
        _1208 = _1039;
        _1210 = _1038;
        _1211 = _1037;
        _1212 = _1049;
        _1213 = _1048;
        _1214 = _1047;
        _1215 = _1059;
        _1216 = _1058;
        _1217 = _1057;
        _1218 = _1072;
        _1219 = _1071;
        _1220 = _1070;
        _1221 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
        _1222 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
        _1223 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)));
    }
    else
    {
        _1208 = _1209;
        _1210 = _1209;
        _1211 = _1209;
        _1212 = _1209;
        _1213 = _1209;
        _1214 = _1209;
        _1215 = _1209;
        _1216 = _1209;
        _1217 = _1209;
        _1218 = _1209;
        _1219 = _1209;
        _1220 = _1209;
        _1221 = 0.0;
        _1222 = 0.0;
        _1223 = 0.0;
    }
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1249 = fma(_906, cbModelParam._m0[30u].z, fma(_902, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _898));
        float _1253 = fma(_906, cbModelParam._m0[31u].z, fma(_902, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _898));
        float _1257 = fma(_906, cbModelParam._m0[32u].z, fma(_902, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _898));
        float _1280 = _898 + _533;
        float _1281 = _902 + _534;
        float _1282 = _906 + _535;
        float _1292 = fma(_1282, cbModelParam._m0[30u].z, fma(_1281, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1280)) - _1249;
        float _1293 = fma(_1282, cbModelParam._m0[31u].z, fma(_1281, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1280)) - _1253;
        float _1294 = fma(_1282, cbModelParam._m0[32u].z, fma(_1281, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1280)) - _1257;
        float _1298 = inversesqrt(dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294)));
        float _1311 = ((_1298 * _1292) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1249 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1312 = ((_1298 * _1293) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1253 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1313 = ((_1298 * _1294) / cbModelParam._m0[35u].z) + ((((((_1257 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        float _1348 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1315.x + (-0.5));
        float _1350 = _1348 * (_1315.y + (-0.5));
        float _1351 = _1348 * (_1315.z + (-0.5));
        float _1358 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1322.x + (-0.5));
        float _1360 = _1358 * (_1322.y + (-0.5));
        float _1361 = _1358 * (_1322.z + (-0.5));
        float _1368 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1329.x + (-0.5));
        float _1370 = _1368 * (_1329.y + (-0.5));
        float _1371 = _1368 * (_1329.z + (-0.5));
        float _1378 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1336.x + (-0.5));
        float _1380 = _1378 * (_1336.y + (-0.5));
        float _1381 = _1378 * (_1336.z + (-0.5));
        float _1382 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1383 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1384 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1385 = _1349 * 0.5;
        float _1386 = _1359 * 0.5;
        float _1387 = _1369 * 0.5;
        float _1388 = dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387));
        float _1393 = (_1388 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1388);
        float _1401 = (dot(vec3(_533, _534, _535), vec3(_1393 * _1385, _1393 * _1386, _1393 * _1387)) + 1.0) * 0.5;
        float _3842 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1410 = sqrt(((_1386 * _1386) + (_1385 * _1385)) + (_1387 * _1387)) / (_1382 + 9.9999997473787516355514526367188e-06);
        float _3853 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1412 = _1411 * 2.0;
        float _1416 = (1.0 - _1411) / (_1411 + 1.0);
        float _3864 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1426 = ((((1.0 - _1417) * (_1412 + 2.0)) * exp2(log2(isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_1412 + 1.0))) + _1417) * _1382;
        float _1427 = _1350 * 0.5;
        float _1428 = _1360 * 0.5;
        float _1429 = _1370 * 0.5;
        float _1430 = dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429));
        float _1435 = (_1430 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1430);
        float _1443 = (dot(vec3(_533, _534, _535), vec3(_1435 * _1427, _1435 * _1428, _1435 * _1429)) + 1.0) * 0.5;
        float _3875 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1452 = sqrt(((_1428 * _1428) + (_1427 * _1427)) + (_1429 * _1429)) / (_1383 + 9.9999997473787516355514526367188e-06);
        float _3886 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1454 = _1453 * 2.0;
        float _1458 = (1.0 - _1453) / (_1453 + 1.0);
        float _3897 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1468 = ((((1.0 - _1459) * (_1454 + 2.0)) * exp2(log2(isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_1454 + 1.0))) + _1459) * _1383;
        float _1469 = _1351 * 0.5;
        float _1470 = _1361 * 0.5;
        float _1471 = _1371 * 0.5;
        float _1472 = dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471));
        float _1477 = (_1472 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1472);
        float _1485 = (dot(vec3(_533, _534, _535), vec3(_1477 * _1469, _1477 * _1470, _1477 * _1471)) + 1.0) * 0.5;
        float _3908 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1494 = sqrt(((_1470 * _1470) + (_1469 * _1469)) + (_1471 * _1471)) / (_1384 + 9.9999997473787516355514526367188e-06);
        float _3919 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1496 = _1495 * 2.0;
        float _1500 = (1.0 - _1495) / (_1495 + 1.0);
        float _3930 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1510 = ((((1.0 - _1501) * (_1496 + 2.0)) * exp2(log2(isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1496 + 1.0))) + _1501) * _1384;
        _1518 = _1351;
        _1519 = _1350;
        _1520 = _1349;
        _1521 = _1361;
        _1522 = _1360;
        _1523 = _1359;
        _1524 = _1371;
        _1525 = _1370;
        _1526 = _1369;
        _1527 = _1384;
        _1528 = _1383;
        _1529 = _1382;
        _1530 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)));
        _1531 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)));
        _1532 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)));
    }
    else
    {
        _1518 = _1209;
        _1519 = _1209;
        _1520 = _1209;
        _1521 = _1209;
        _1522 = _1209;
        _1523 = _1209;
        _1524 = _1209;
        _1525 = _1209;
        _1526 = _1209;
        _1527 = _1209;
        _1528 = _1209;
        _1529 = _1209;
        _1530 = 0.0;
        _1531 = 0.0;
        _1532 = 0.0;
    }
    float _1542 = (cbModelParam._m0[1u].x * (_1530 - _1221)) + _1221;
    float _1543 = (cbModelParam._m0[1u].x * (_1531 - _1222)) + _1222;
    float _1544 = (cbModelParam._m0[1u].x * (_1532 - _1223)) + _1223;
    float _1565 = fma(_1544, cbSceneParam._m0[89u].z, fma(_1543, cbSceneParam._m0[89u].y, _1542 * cbSceneParam._m0[89u].x));
    float _1568 = fma(_1544, cbSceneParam._m0[90u].z, fma(_1543, cbSceneParam._m0[90u].y, _1542 * cbSceneParam._m0[90u].x));
    float _1571 = fma(_1544, cbSceneParam._m0[91u].z, fma(_1543, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1542));
    float _1586 = _842 * 0.5;
    float _1587 = _843 * 0.5;
    float _1588 = _844 * 0.5;
    float _1589 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1520, _1523, _1526, _1529));
    float _1592 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1519, _1522, _1525, _1528));
    float _1595 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1518, _1521, _1524, _1527));
    float _1626;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1602 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1208, _1212, _1215, _1218));
        float _1606 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1210, _1213, _1216, _1219));
        float _1610 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1211, _1214, _1217, _1220));
        float _1617 = dot(vec4(cbModelParam._m0[39u]), vec4(_1586, _1587, _1588, 1.0));
        _1626 = dot(vec3(isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)), isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)), isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1617) ? 0.0 : (isnan(0.0) ? _1617 : max(0.0, _1617))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1626 = 1.0;
    }
    float _1637;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1628 = dot(vec4(cbModelParam._m0[40u]), vec4(_1586, _1587, _1588, 1.0));
        _1637 = dot(vec3(isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)), isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)), isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1628) ? 0.0 : (isnan(0.0) ? _1628 : max(0.0, _1628))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1637 = 1.0;
    }
    float _1641 = (_1637 * cbModelParam._m0[1u].x) + (_1626 * (1.0 - cbModelParam._m0[1u].x));
    float _1651 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _702);
    float _1652 = isnan(_1651) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1651 : min(cbModelParam._m0[25u].z, _1651));
    float _1732;
    float _1734;
    float _1736;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1699 = fma(_906, cbModelParam._m0[13u].z, fma(_902, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _898)) + cbModelParam._m0[13u].w;
        float _1703 = fma(_906, cbModelParam._m0[14u].z, fma(_902, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _898)) + cbModelParam._m0[14u].w;
        float _1707 = fma(_906, cbModelParam._m0[15u].z, fma(_902, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _898)) + cbModelParam._m0[15u].w;
        float _1710 = fma(_844, cbModelParam._m0[13u].z, fma(_843, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _842));
        float _1713 = fma(_844, cbModelParam._m0[14u].z, fma(_843, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _842));
        float _1716 = fma(_844, cbModelParam._m0[15u].z, fma(_843, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _842));
        float _1744;
        if (_1710 > 0.0)
        {
            _1744 = abs((1.0 - _1699) / _1710);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1710 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1699 + 1.0) / _1710);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1744 = frontier_phi_16_14_ladder;
        }
        float _1971;
        if (_1713 > 0.0)
        {
            _1971 = abs((1.0 - _1703) / _1713);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1703 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1971 = frontier_phi_25_21_ladder;
        }
        float _2228;
        if (_1716 > 0.0)
        {
            _2228 = abs((1.0 - _1707) / _1716);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1707 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2228 = frontier_phi_37_32_ladder;
        }
        float _2230 = isnan(_1971) ? _1744 : (isnan(_1744) ? _1971 : min(_1744, _1971));
        float _2231 = isnan(_2228) ? _2230 : (isnan(_2230) ? _2228 : min(_2230, _2228));
        float _2235 = (_2231 * _1710) + _1699;
        float _2236 = (_2231 * _1713) + _1703;
        float _2237 = (_2231 * _1716) + _1707;
        float _2238 = _2231 * 9.9999997473787516355514526367188e-05;
        float _2240 = (-1.0) - _2238;
        float _2242 = _2238 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2237 > _2242) || ((_2237 < _2240) || ((_2236 > _2242) || ((_2236 < _2240) || ((_2235 < _2240) || (_2235 > _2242))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2365 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2237, cbModelParam._m0[9u].z, fma(_2236, cbModelParam._m0[9u].y, _2235 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2237, cbModelParam._m0[10u].z, fma(_2236, cbModelParam._m0[10u].y, _2235 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2237, cbModelParam._m0[11u].z, fma(_2236, cbModelParam._m0[11u].y, _2235 * cbModelParam._m0[11u].x))), _1652);
            frontier_phi_15_37_ladder = _2365.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2365.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2365.x * cbModelParam._m0[1u].y;
        }
        _1732 = frontier_phi_15_37_ladder_2;
        _1734 = frontier_phi_15_37_ladder_1;
        _1736 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1720 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_842, _843, _844), _1652);
        _1732 = _1720.x * cbModelParam._m0[1u].y;
        _1734 = _1720.y * cbModelParam._m0[1u].y;
        _1736 = _1720.z * cbModelParam._m0[1u].y;
    }
    float _1740 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _702);
    float _1741 = isnan(_1740) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1740 : min(cbModelParam._m0[25u].w, _1740));
    float _1834;
    float _1836;
    float _1838;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1798 = fma(_906, cbModelParam._m0[21u].z, fma(_902, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _898)) + cbModelParam._m0[21u].w;
        float _1802 = fma(_906, cbModelParam._m0[22u].z, fma(_902, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _898)) + cbModelParam._m0[22u].w;
        float _1806 = fma(_906, cbModelParam._m0[23u].z, fma(_902, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _898)) + cbModelParam._m0[23u].w;
        float _1809 = fma(_844, cbModelParam._m0[21u].z, fma(_843, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _842));
        float _1812 = fma(_844, cbModelParam._m0[22u].z, fma(_843, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _842));
        float _1815 = fma(_844, cbModelParam._m0[23u].z, fma(_843, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _842));
        float _1976;
        if (_1809 > 0.0)
        {
            _1976 = abs((1.0 - _1798) / _1809);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1798 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1976 = frontier_phi_27_23_ladder;
        }
        float _2255;
        if (_1812 > 0.0)
        {
            _2255 = abs((1.0 - _1802) / _1812);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1802 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2255 = frontier_phi_39_34_ladder;
        }
        float _2468;
        if (_1815 > 0.0)
        {
            _2468 = abs((1.0 - _1806) / _1815);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1806 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2468 = frontier_phi_48_45_ladder;
        }
        float _2470 = isnan(_2255) ? _1976 : (isnan(_1976) ? _2255 : min(_1976, _2255));
        float _2471 = isnan(_2468) ? _2470 : (isnan(_2470) ? _2468 : min(_2470, _2468));
        float _2475 = (_2471 * _1809) + _1798;
        float _2476 = (_2471 * _1812) + _1802;
        float _2477 = (_2471 * _1815) + _1806;
        float _2478 = _2471 * 9.9999997473787516355514526367188e-05;
        float _2479 = (-1.0) - _2478;
        float _2481 = _2478 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2477 > _2481) || ((_2477 < _2479) || ((_2476 > _2481) || ((_2476 < _2479) || ((_2475 < _2479) || (_2475 > _2481))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2680 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2477, cbModelParam._m0[17u].z, fma(_2476, cbModelParam._m0[17u].y, _2475 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2477, cbModelParam._m0[18u].z, fma(_2476, cbModelParam._m0[18u].y, _2475 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2477, cbModelParam._m0[19u].z, fma(_2476, cbModelParam._m0[19u].y, _2475 * cbModelParam._m0[19u].x))), _1741);
            frontier_phi_24_48_ladder = _2680.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2680.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2680.x * cbModelParam._m0[1u].z;
        }
        _1834 = frontier_phi_24_48_ladder_2;
        _1836 = frontier_phi_24_48_ladder_1;
        _1838 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1818 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_842, _843, _844), _1741);
        _1834 = _1818.x * cbModelParam._m0[1u].z;
        _1836 = _1818.y * cbModelParam._m0[1u].z;
        _1838 = _1818.z * cbModelParam._m0[1u].z;
    }
    float _1851 = (((_869 * _820) + _870) * _834) * ((cbModelParam._m0[1u].w * (_1834 - _1732)) + _1732);
    float _1853 = (((_869 * _821) + _870) * _834) * ((cbModelParam._m0[1u].w * (_1836 - _1734)) + _1734);
    float _1855 = (((_869 * _822) + _870) * _834) * ((cbModelParam._m0[1u].w * (_1838 - _1736)) + _1736);
    float _1858 = fma(_1855, cbSceneParam._m0[89u].z, fma(_1853, cbSceneParam._m0[89u].y, _1851 * cbSceneParam._m0[89u].x));
    float _1861 = fma(_1855, cbSceneParam._m0[90u].z, fma(_1853, cbSceneParam._m0[90u].y, _1851 * cbSceneParam._m0[90u].x));
    float _1864 = fma(_1855, cbSceneParam._m0[91u].z, fma(_1853, cbSceneParam._m0[91u].y, _1851 * cbSceneParam._m0[91u].x));
    vec4 _1872 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_623, _624));
    float _1874 = _1872.w;
    float _1886 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1874);
    float _1887 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1874);
    float _1888 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1874);
    uvec4 _1892 = floatBitsToUint(cbInstanceData._m0[_726 + 5u]);
    uint _1894 = _1892.x * 14u;
    uint _1895 = _1894 + 13u;
    float _1902 = _834 + (-1.0);
    float _1907 = (cbLight._m0[_1895].x * _1902) + 1.0;
    float _1908 = (cbLight._m0[_1895].y * _1902) + 1.0;
    float _1909 = (cbLight._m0[_1895].z * _1902) + 1.0;
    float _1910 = (cbLight._m0[_1895].w * _1902) + 1.0;
    uint _1911 = _1894 + 5u;
    float _1917 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
    uint _1921 = _1894 + 4u;
    float _1930 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
    uint _1934 = _1894 | 1u;
    float _1945 = dot(vec3(cbLight._m0[_1894].xyz), vec3(_533, _534, _535));
    float _1948 = dot(vec3(cbLight._m0[_1934].xyz), vec3(_533, _534, _535));
    float _4066 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _4077 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1953 = (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * 0.3183098733425140380859375;
    float _1955 = (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * 0.3183098733425140380859375;
    float _1962 = ((cbLight._m0[_1911].x * _1917) * _1955) + (((cbLight._m0[_1921].x * _1886) * _1930) * _1953);
    float _1963 = ((_1917 * cbLight._m0[_1911].y) * _1955) + (((cbLight._m0[_1921].y * _1887) * _1930) * _1953);
    float _1964 = ((_1917 * cbLight._m0[_1911].z) * _1955) + (((cbLight._m0[_1921].z * _1888) * _1930) * _1953);
    uvec4 _1968 = floatBitsToUint(cbLight._m0[_1894 + 12u]);
    bool _1970 = _1968.x == 0u;
    float _1981;
    float _1983;
    float _1985;
    if (_1970)
    {
        _1981 = _1962;
        _1983 = _1963;
        _1985 = _1964;
    }
    else
    {
        uint _1989 = _1894 + 6u;
        float _2005 = (dot(vec3(cbLight._m0[_1894 + 2u].xyz), vec3(_533, _534, _535)) * 0.5) + 0.5;
        float _2006 = _2005 * _2005;
        float _4088 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2007 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _2008 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
        _1981 = (((cbLight._m0[_1989].x * 0.3183098733425140380859375) * _2007) * _2008) + _1962;
        _1983 = (((cbLight._m0[_1989].y * 0.3183098733425140380859375) * _2007) * _2008) + _1963;
        _1985 = (((cbLight._m0[_1989].z * 0.3183098733425140380859375) * _2007) * _2008) + _1964;
    }
    bool _1988 = _1968.y == 0u;
    float _2026;
    float _2028;
    float _2030;
    if (_1988)
    {
        _2026 = _1981;
        _2028 = _1983;
        _2030 = _1985;
    }
    else
    {
        uint _2199 = _1894 + 7u;
        float _2215 = (dot(vec3(cbLight._m0[_1894 + 3u].xyz), vec3(_533, _534, _535)) * 0.5) + 0.5;
        float _2216 = _2215 * _2215;
        float _4104 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2217 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _2218 = isnan(1.0) ? _1910 : (isnan(_1910) ? 1.0 : min(_1910, 1.0));
        _2026 = (((cbLight._m0[_2199].x * 0.3183098733425140380859375) * _2217) * _2218) + _1981;
        _2028 = (((cbLight._m0[_2199].y * 0.3183098733425140380859375) * _2217) * _2218) + _1983;
        _2030 = (((cbLight._m0[_2199].z * 0.3183098733425140380859375) * _2217) * _2218) + _1985;
    }
    uint _2033 = _1894 + 8u;
    float _2046 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1894].w)) * _702) * 0.949999988079071044921875);
    float _2047 = _2046 * _2046;
    float _2048 = cbLight._m0[_1894].x + _615;
    float _2049 = cbLight._m0[_1894].y + _616;
    float _2050 = cbLight._m0[_1894].z + _617;
    float _2054 = inversesqrt(dot(vec3(_2048, _2049, _2050), vec3(_2048, _2049, _2050)));
    float _2055 = _2054 * _2048;
    float _2056 = _2054 * _2049;
    float _2057 = _2054 * _2050;
    float _2058 = dot(vec3(_533, _534, _535), vec3(cbLight._m0[_1894].xyz));
    float _4120 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2061 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _4131 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _2062 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _2063 = dot(vec3(_533, _534, _535), vec3(_2055, _2056, _2057));
    float _4142 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2066 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _2067 = dot(vec3(cbLight._m0[_1894].xyz), vec3(_2055, _2056, _2057));
    float _4153 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2071 = _2047 * _2047;
    float _2075 = ((_2066 * _2066) * (_2071 + (-1.0))) + 1.0;
    float _2083 = exp2(log2(1.0 - (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)))) * 5.0);
    float _2084 = 0.959999978542327880859375 - _817;
    float _2086 = 0.959999978542327880859375 - _818;
    float _2087 = 0.959999978542327880859375 - _819;
    float _2094 = 1.0 - _2047;
    float _2105 = (0.5 / (((_2062 * ((_2061 * _2094) + _2047)) + 9.9999999392252902907785028219223e-09) + (((_2062 * _2094) + _2047) * _2061))) * _2061;
    float _4164 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2107 = (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_2071 / ((_2075 * _2075) * 3.141590118408203125));
    uint _2121 = _1894 + 9u;
    float _2132 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1934].w)) * _702) * 0.949999988079071044921875);
    float _2133 = _2132 * _2132;
    float _2134 = cbLight._m0[_1934].x + _615;
    float _2135 = cbLight._m0[_1934].y + _616;
    float _2136 = cbLight._m0[_1934].z + _617;
    float _2140 = inversesqrt(dot(vec3(_2134, _2135, _2136), vec3(_2134, _2135, _2136)));
    float _2141 = _2140 * _2134;
    float _2142 = _2140 * _2135;
    float _2143 = _2140 * _2136;
    float _2144 = dot(vec3(_533, _534, _535), vec3(cbLight._m0[_1934].xyz));
    float _4175 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2147 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _2148 = dot(vec3(_533, _534, _535), vec3(_2141, _2142, _2143));
    float _4186 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2151 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _2152 = dot(vec3(cbLight._m0[_1934].xyz), vec3(_2141, _2142, _2143));
    float _4197 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2156 = _2133 * _2133;
    float _2160 = ((_2151 * _2151) * (_2156 + (-1.0))) + 1.0;
    float _2167 = exp2(log2(1.0 - (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) * 5.0);
    float _2174 = 1.0 - _2133;
    float _2184 = (0.5 / (((_2062 * ((_2147 * _2174) + _2133)) + 9.9999999392252902907785028219223e-09) + (((_2062 * _2174) + _2133) * _2147))) * _2147;
    float _4208 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2186 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_2156 / ((_2160 * _2160) * 3.141590118408203125));
    float _2196 = (((((_2167 * _2084) + _820) * cbLight._m0[_2121].x) * _2186) * _1917) + ((((cbLight._m0[_2033].x * _1886) * ((_2083 * _2084) + _820)) * _2107) * _1930);
    float _2197 = (((((_2167 * _2086) + _821) * cbLight._m0[_2121].y) * _2186) * _1917) + ((((cbLight._m0[_2033].y * _1887) * ((_2083 * _2086) + _821)) * _2107) * _1930);
    float _2198 = (((((_2167 * _2087) + _822) * cbLight._m0[_2121].z) * _2186) * _1917) + ((((cbLight._m0[_2033].z * _1888) * ((_2083 * _2087) + _822)) * _2107) * _1930);
    float _2260;
    float _2262;
    float _2264;
    if (_1970)
    {
        _2260 = _2196;
        _2262 = _2197;
        _2264 = _2198;
    }
    else
    {
        uint _2266 = _1894 + 2u;
        uint _2270 = _1894 + 10u;
        float _2284 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2266].w)) * _702) * 0.949999988079071044921875);
        float _2285 = _2284 * _2284;
        float _2286 = cbLight._m0[_2266].x + _615;
        float _2287 = cbLight._m0[_2266].y + _616;
        float _2288 = cbLight._m0[_2266].z + _617;
        float _2292 = inversesqrt(dot(vec3(_2286, _2287, _2288), vec3(_2286, _2287, _2288)));
        float _2293 = _2292 * _2286;
        float _2294 = _2292 * _2287;
        float _2295 = _2292 * _2288;
        float _2296 = dot(vec3(_533, _534, _535), vec3(cbLight._m0[_2266].xyz));
        float _4219 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2299 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _2300 = dot(vec3(_533, _534, _535), vec3(_2293, _2294, _2295));
        float _4230 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2303 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _2304 = dot(vec3(cbLight._m0[_2266].xyz), vec3(_2293, _2294, _2295));
        float _4241 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2308 = _2285 * _2285;
        float _2312 = ((_2303 * _2303) * (_2308 + (-1.0))) + 1.0;
        float _2319 = exp2(log2(1.0 - (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0)))) * 5.0);
        float _2326 = 1.0 - _2285;
        float _2336 = (0.5 / (((_2062 * ((_2299 * _2326) + _2285)) + 9.9999999392252902907785028219223e-09) + (((_2062 * _2326) + _2285) * _2299))) * _2299;
        float _4252 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2338 = (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_2308 / ((_2312 * _2312) * 3.141590118408203125));
        float _2339 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
        _2260 = (((((_2319 * _2084) + _820) * cbLight._m0[_2270].x) * _2338) * _2339) + _2196;
        _2262 = (((((_2319 * _2086) + _821) * cbLight._m0[_2270].y) * _2338) * _2339) + _2197;
        _2264 = (((((_2319 * _2087) + _822) * cbLight._m0[_2270].z) * _2338) * _2339) + _2198;
    }
    float _2374;
    float _2376;
    float _2378;
    if (_1988)
    {
        _2374 = _2260;
        _2376 = _2262;
        _2378 = _2264;
    }
    else
    {
        uint _2385 = _1894 + 3u;
        uint _2389 = _1894 + 11u;
        float _2403 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2385].w)) * _702) * 0.949999988079071044921875);
        float _2404 = _2403 * _2403;
        float _2405 = cbLight._m0[_2385].x + _615;
        float _2406 = cbLight._m0[_2385].y + _616;
        float _2407 = cbLight._m0[_2385].z + _617;
        float _2411 = inversesqrt(dot(vec3(_2405, _2406, _2407), vec3(_2405, _2406, _2407)));
        float _2412 = _2411 * _2405;
        float _2413 = _2411 * _2406;
        float _2414 = _2411 * _2407;
        float _2415 = dot(vec3(_533, _534, _535), vec3(cbLight._m0[_2385].xyz));
        float _4268 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2418 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _2419 = dot(vec3(_533, _534, _535), vec3(_2412, _2413, _2414));
        float _4279 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2422 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _2423 = dot(vec3(cbLight._m0[_2385].xyz), vec3(_2412, _2413, _2414));
        float _4290 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2427 = _2404 * _2404;
        float _2431 = ((_2422 * _2422) * (_2427 + (-1.0))) + 1.0;
        float _2438 = exp2(log2(1.0 - (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0)))) * 5.0);
        float _2445 = 1.0 - _2404;
        float _2455 = (0.5 / (((_2062 * ((_2418 * _2445) + _2404)) + 9.9999999392252902907785028219223e-09) + (((_2062 * _2445) + _2404) * _2418))) * _2418;
        float _4301 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2457 = (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_2427 / ((_2431 * _2431) * 3.141590118408203125));
        float _2458 = isnan(1.0) ? _1910 : (isnan(_1910) ? 1.0 : min(_1910, 1.0));
        _2374 = (((((_2438 * _2084) + _820) * cbLight._m0[_2389].x) * _2457) * _2458) + _2260;
        _2376 = (((((_2438 * _2086) + _821) * cbLight._m0[_2389].y) * _2457) * _2458) + _2262;
        _2378 = (((((_2438 * _2087) + _822) * cbLight._m0[_2389].z) * _2457) * _2458) + _2264;
    }
    float _2592;
    float _2594;
    float _2596;
    float _2598;
    float _2600;
    float _2602;
    if (_1892.y == 0u)
    {
        float _2533 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2534 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2533;
        float _2535 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2533;
        float _2536 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2533;
        uvec4 _2548 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2549 = _2548.x;
        uint _2560 = uint((float(_2548.y) * floor(float(uint(cbSceneParam._m0[85u].y * _624) / _2549))) + floor(float(uint(cbSceneParam._m0[85u].x * _623) / _2549)));
        float _2570 = (log2(_2536 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2571 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        uint _2574 = uint(isnan(14.0) ? _2571 : (isnan(_2571) ? 14.0 : min(_2571, 14.0)));
        uvec4 _2579 = texelFetch(g_lightClusterGridBuffer, int(((_2574 << 2u) + (_2560 << 6u)) >> 2u));
        uint _2580 = _2579.x;
        uint _2581 = _2548.z;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        float _2695;
        if (((((1u << ((_2581 >> 4u) & 15u)) + 4294967295u) & _2580) == 0u) || ((_2581 & 240u) == 0u))
        {
            _2685 = 0.0;
            _2687 = 0.0;
            _2689 = 0.0;
            _2691 = 0.0;
            _2693 = 0.0;
            _2695 = 0.0;
        }
        else
        {
            float _2686;
            float _2688;
            float _2690;
            float _2692;
            float _2694;
            float _2696;
            float _2829 = 0.0;
            float _2830 = 0.0;
            float _2831 = 0.0;
            float _2832 = 0.0;
            float _2833 = 0.0;
            float _2834 = 0.0;
            uint _2835 = 0u;
            uint _2844;
            bool _2845;
            for (;;)
            {
                _2844 = texelFetch(g_lightClassification, int((((_2574 << 5u) + (_2560 << 9u)) + (_2835 << 2u)) >> 2u)).x;
                _2845 = _2844 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2845)
                {
                    frontier_phi_63_pred = _2834;
                    frontier_phi_63_pred_1 = _2833;
                    frontier_phi_63_pred_2 = _2832;
                    frontier_phi_63_pred_3 = _2831;
                    frontier_phi_63_pred_4 = _2830;
                    frontier_phi_63_pred_5 = _2829;
                }
                else
                {
                    float _2953;
                    float _2954;
                    float _2955;
                    float _2956;
                    float _2957;
                    float _2958;
                    uint _2959;
                    _2953 = _2829;
                    _2954 = _2830;
                    _2955 = _2831;
                    _2956 = _2832;
                    _2957 = _2833;
                    _2958 = _2834;
                    _2959 = _2844;
                    float _2885;
                    float _2886;
                    float _2887;
                    float _2888;
                    float _2889;
                    float _2890;
                    for (;;)
                    {
                        uint _2963 = uint(findLSB(_2959)) + (_2835 << 5u);
                        uint _2960 = (_2959 + 4294967295u) & _2959;
                        uint _2965 = _2963 * 48u;
                        vec4 _2979 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2965)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 3u)).x));
                        uint _2985 = (_2963 * 48u) + 4u;
                        vec4 _2998 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2985)).x, texelFetch(g_PointLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2985 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2985 + 3u)).x));
                        uint _3004 = (_2963 * 48u) + 8u;
                        vec3 _3015 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3004)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 2u)).x));
                        float _3019 = _2979.x - _2534;
                        float _3020 = _2979.y - _2535;
                        float _3021 = _2979.z - _2536;
                        float _3022 = dot(vec3(_3019, _3020, _3021), vec3(_3019, _3020, _3021));
                        float _3025 = inversesqrt(_3022);
                        float _3026 = _3025 * _3019;
                        float _3027 = _3025 * _3020;
                        float _3028 = _3025 * _3021;
                        float _3029 = dot(vec3(_647, _650, _653), vec3(_3026, _3027, _3028));
                        float _3034 = 1.0 - (_3022 * _2979.w);
                        float _4327 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                        float _3035 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                        float _3036 = sqrt(_3022) * _2998.w;
                        float _3039 = 1.39999997615814208984375 / (_3036 + 1.39999997615814208984375);
                        float _3040 = _3039 * _3039;
                        float _3043 = ((1.0 - _3040) * _3029) + _3040;
                        float _3046 = _3036 * _3036;
                        float _3050 = ((isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0))) * _3035) / ((_3046 * 0.699999988079071044921875) + 1.0);
                        float _3054 = (-0.0) - _2534;
                        float _3055 = (-0.0) - _2535;
                        float _3056 = (-0.0) - _2536;
                        float _3060 = inversesqrt(dot(vec3(_3054, _3055, _3056), vec3(_3054, _3055, _3056)));
                        float _3061 = _3060 * _3054;
                        float _3062 = _3060 * _3055;
                        float _3063 = _3060 * _3056;
                        float _3071 = exp2(log2(1.0 / ((_3046 * 3.5) + 5.0)) * 0.25);
                        float _3072 = 1.0 - _850;
                        float _3079 = sqrt(1.0 - ((1.0 - (_3072 * _3072)) * (1.0 - (_3071 * _3071))));
                        float _3080 = _3079 * _3079;
                        float _3081 = _3080 * _3080;
                        float _3082 = _3061 + _3026;
                        float _3083 = _3062 + _3027;
                        float _3084 = _3063 + _3028;
                        float _3088 = inversesqrt(dot(vec3(_3082, _3083, _3084), vec3(_3082, _3083, _3084)));
                        float _3092 = dot(vec3(_647, _650, _653), vec3(_3061, _3062, _3063));
                        float _4343 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                        float _3095 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                        float _3096 = dot(vec3(_647, _650, _653), vec3(_3088 * _3082, _3088 * _3083, _3088 * _3084));
                        float _4354 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                        float _3099 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                        float _3103 = ((_3099 * _3099) * (_3081 + (-1.0))) + 1.0;
                        float _3104 = _3039 * _3080;
                        float _3105 = _3104 * _3104;
                        float _3108 = ((1.0 - _3105) * _3029) + _3105;
                        float _4365 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                        float _3109 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                        float _3110 = 1.0 - _3080;
                        float _3120 = (0.5 / (((_3109 * ((_3095 * _3110) + _3080)) + 9.9999999392252902907785028219223e-09) + (((_3109 * _3110) + _3080) * _3095))) * _3109;
                        float _4376 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                        float _3131 = (((_3081 * 3.1415927410125732421875) * (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0)))) / ((_3103 * _3103) * ((_3046 * 2.1991131305694580078125) + 3.141590118408203125))) * _3035;
                        _2888 = (_3050 * _2998.x) + _2956;
                        _2889 = (_3050 * _2998.y) + _2957;
                        _2890 = (_3050 * _2998.z) + _2958;
                        _2885 = (_3131 * _3015.x) + _2953;
                        _2886 = (_3131 * _3015.y) + _2954;
                        _2887 = (_3131 * _3015.z) + _2955;
                        if (_2960 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2953 = _2885;
                            _2954 = _2886;
                            _2955 = _2887;
                            _2956 = _2888;
                            _2957 = _2889;
                            _2958 = _2890;
                            _2959 = _2960;
                        }
                    }
                    frontier_phi_63_pred = _2890;
                    frontier_phi_63_pred_1 = _2889;
                    frontier_phi_63_pred_2 = _2888;
                    frontier_phi_63_pred_3 = _2887;
                    frontier_phi_63_pred_4 = _2886;
                    frontier_phi_63_pred_5 = _2885;
                }
                _2696 = frontier_phi_63_pred;
                _2694 = frontier_phi_63_pred_1;
                _2692 = frontier_phi_63_pred_2;
                _2690 = frontier_phi_63_pred_3;
                _2688 = frontier_phi_63_pred_4;
                _2686 = frontier_phi_63_pred_5;
                uint _2836 = _2835 + 1u;
                if (_2836 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2829 = _2686;
                    _2830 = _2688;
                    _2831 = _2690;
                    _2832 = _2692;
                    _2833 = _2694;
                    _2834 = _2696;
                    _2835 = _2836;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2685 = _2686;
            _2687 = _2688;
            _2689 = _2690;
            _2691 = _2692;
            _2693 = _2694;
            _2695 = _2696;
        }
        uvec4 _2699 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2700 = _2699.z;
        uint _2702 = (_2700 >> 8u) & 15u;
        float _2797;
        float _2799;
        float _2801;
        float _2803;
        float _2805;
        float _2807;
        if (((4294967295u << _2702) & _2580) == 0u)
        {
            _2797 = _2685;
            _2799 = _2687;
            _2801 = _2689;
            _2803 = _2691;
            _2805 = _2693;
            _2807 = _2695;
        }
        else
        {
            float _2822 = inversesqrt(dot(vec3(_2534, _2535, _2536), vec3(_2534, _2535, _2536)));
            float _2823 = _2822 * _2534;
            float _2824 = _2822 * _2535;
            float _2825 = _2822 * _2536;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2702 < ((_2700 >> 12u) & 15u))
            {
                float _2798;
                float _2800;
                float _2802;
                float _2804;
                float _2806;
                float _2808;
                float _2936 = _2685;
                float _2937 = _2687;
                float _2938 = _2689;
                float _2939 = _2691;
                float _2940 = _2693;
                float _2941 = _2695;
                uint _2942 = _2702;
                uint _2951;
                bool _2952;
                for (;;)
                {
                    _2951 = texelFetch(g_lightClassification, int((((_2574 << 5u) + (_2560 << 9u)) + (_2942 << 2u)) >> 2u)).x;
                    _2952 = _2951 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2952)
                    {
                        frontier_phi_69_pred = _2941;
                        frontier_phi_69_pred_1 = _2940;
                        frontier_phi_69_pred_2 = _2939;
                        frontier_phi_69_pred_3 = _2938;
                        frontier_phi_69_pred_4 = _2937;
                        frontier_phi_69_pred_5 = _2936;
                    }
                    else
                    {
                        float _3136;
                        float _3137;
                        float _3138;
                        float _3139;
                        float _3140;
                        float _3141;
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3149 = _2936;
                        float _3150 = _2937;
                        float _3151 = _2938;
                        float _3152 = _2939;
                        float _3153 = _2940;
                        float _3154 = _2941;
                        uint _3155 = _2951;
                        uint _3156;
                        vec4 _3181;
                        float _3182;
                        vec4 _3197;
                        vec3 _3209;
                        vec4 _3224;
                        vec4 _3240;
                        float _3287;
                        bool _3288;
                        for (;;)
                        {
                            uint _3166 = ((_2942 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3155));
                            _3156 = (_3155 + 4294967295u) & _3155;
                            uint _3168 = _3166 * 40u;
                            _3181 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 3u)).x));
                            _3182 = _3181.w;
                            uint _3184 = (_3166 * 40u) + 4u;
                            _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            uint _3199 = (_3166 * 40u) + 8u;
                            _3209 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x));
                            uint _3211 = (_3166 * 40u) + 16u;
                            _3224 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 3u)).x));
                            uint _3227 = (_3166 * 40u) + 20u;
                            _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            uint _3243 = (_3166 * 40u) + 24u;
                            vec4 _3256 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 3u)).x));
                            uint _3262 = (_3166 * 40u) + 28u;
                            vec4 _3275 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3262)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 3u)).x));
                            _3287 = fma(_2536, _3275.z, fma(_2535, _3275.y, _3275.x * _2534)) + _3275.w;
                            _3288 = !((fma(_2536, _3256.z, fma(_2535, _3256.y, _3256.x * _2534)) + _3256.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3288)
                            {
                                float _3315 = _3181.x - _2534;
                                float _3316 = _3181.y - _2535;
                                float _3317 = _3181.z - _2536;
                                float _3318 = dot(vec3(_3315, _3316, _3317), vec3(_3315, _3316, _3317));
                                float _3321 = inversesqrt(_3318);
                                float _3322 = _3321 * _3315;
                                float _3323 = _3321 * _3316;
                                float _3324 = _3321 * _3317;
                                float _3328 = 1.0 - (_3318 / (_3182 * _3182));
                                float _4387 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                                float _3329 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
                                float _3333 = sqrt(_3318) * _3197.w;
                                float _3335 = 1.39999997615814208984375 / (_3333 + 1.39999997615814208984375);
                                float _3336 = _3335 * _3335;
                                float _3339 = ((1.0 - _3336) * dot(vec3(_3322, _3323, _3324), vec3(_647, _650, _653))) + _3336;
                                float _3342 = _3333 * _3333;
                                float _3346 = (fma(_2536, _3224.z, fma(_2535, _3224.y, _3224.x * _2534)) + _3224.w) / _3287;
                                float _3347 = (fma(_2536, _3240.z, fma(_2535, _3240.y, _3240.x * _2534)) + _3240.w) / _3287;
                                float _3351 = 1.0 - dot(vec2(_3346, _3347), vec2(_3346, _3347));
                                float _4403 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                                float _3352 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                                float _3353 = _3352 * (((isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0))) * _3329) / ((_3342 * 0.699999988079071044921875) + 1.0));
                                float _3365 = exp2(log2(1.0 / ((_3342 * 3.5) + 5.0)) * 0.25);
                                float _3366 = 1.0 - _850;
                                float _3373 = sqrt(1.0 - ((1.0 - (_3366 * _3366)) * (1.0 - (_3365 * _3365))));
                                float _3374 = _3373 * _3373;
                                float _3375 = _3374 * _3374;
                                float _3376 = _3322 - _2823;
                                float _3377 = _3323 - _2824;
                                float _3378 = _3324 - _2825;
                                float _3382 = inversesqrt(dot(vec3(_3376, _3377, _3378), vec3(_3376, _3377, _3378)));
                                float _3386 = dot(vec3(_647, _650, _653), vec3((-0.0) - _2823, (-0.0) - _2824, (-0.0) - _2825));
                                float _4414 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                                float _3389 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                                float _3390 = dot(vec3(_647, _650, _653), vec3(_3382 * _3376, _3382 * _3377, _3382 * _3378));
                                float _4425 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3393 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                                float _3397 = ((_3393 * _3393) * (_3375 + (-1.0))) + 1.0;
                                float _3398 = _3335 * _3374;
                                float _3399 = _3398 * _3398;
                                float _3405 = ((1.0 - _3399) * dot(vec3(_647, _650, _653), vec3(_3322, _3323, _3324))) + _3399;
                                float _4436 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                                float _3406 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                                float _3407 = 1.0 - _3374;
                                float _3417 = (0.5 / (((_3406 * ((_3389 * _3407) + _3374)) + 9.9999999392252902907785028219223e-09) + (((_3406 * _3407) + _3374) * _3389))) * _3406;
                                float _4447 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                                float _3427 = (_3352 * _3329) * (((_3375 * 3.1415927410125732421875) * (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0)))) / ((_3397 * _3397) * ((_3342 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3353 * _3197.z;
                                frontier_phi_75_pred_1 = _3353 * _3197.y;
                                frontier_phi_75_pred_2 = _3353 * _3197.x;
                                frontier_phi_75_pred_3 = _3427 * _3209.z;
                                frontier_phi_75_pred_4 = _3427 * _3209.y;
                                frontier_phi_75_pred_5 = _3427 * _3209.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3436 = frontier_phi_75_pred;
                            _3435 = frontier_phi_75_pred_1;
                            _3434 = frontier_phi_75_pred_2;
                            _3433 = frontier_phi_75_pred_3;
                            _3432 = frontier_phi_75_pred_4;
                            _3431 = frontier_phi_75_pred_5;
                            _3139 = _3434 + _3152;
                            _3140 = _3435 + _3153;
                            _3141 = _3436 + _3154;
                            _3136 = _3431 + _3149;
                            _3137 = _3432 + _3150;
                            _3138 = _3433 + _3151;
                            if (_3156 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3149 = _3136;
                                _3150 = _3137;
                                _3151 = _3138;
                                _3152 = _3139;
                                _3153 = _3140;
                                _3154 = _3141;
                                _3155 = _3156;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3141;
                        frontier_phi_69_pred_1 = _3140;
                        frontier_phi_69_pred_2 = _3139;
                        frontier_phi_69_pred_3 = _3138;
                        frontier_phi_69_pred_4 = _3137;
                        frontier_phi_69_pred_5 = _3136;
                    }
                    _2808 = frontier_phi_69_pred;
                    _2806 = frontier_phi_69_pred_1;
                    _2804 = frontier_phi_69_pred_2;
                    _2802 = frontier_phi_69_pred_3;
                    _2800 = frontier_phi_69_pred_4;
                    _2798 = frontier_phi_69_pred_5;
                    uint _2943 = _2942 + 1u;
                    if (_2943 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2936 = _2798;
                        _2937 = _2800;
                        _2938 = _2802;
                        _2939 = _2804;
                        _2940 = _2806;
                        _2941 = _2808;
                        _2942 = _2943;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2808;
                frontier_phi_57_58_ladder_1 = _2806;
                frontier_phi_57_58_ladder_2 = _2804;
                frontier_phi_57_58_ladder_3 = _2802;
                frontier_phi_57_58_ladder_4 = _2800;
                frontier_phi_57_58_ladder_5 = _2798;
            }
            else
            {
                frontier_phi_57_58_ladder = _2695;
                frontier_phi_57_58_ladder_1 = _2693;
                frontier_phi_57_58_ladder_2 = _2691;
                frontier_phi_57_58_ladder_3 = _2689;
                frontier_phi_57_58_ladder_4 = _2687;
                frontier_phi_57_58_ladder_5 = _2685;
            }
            _2797 = frontier_phi_57_58_ladder_5;
            _2799 = frontier_phi_57_58_ladder_4;
            _2801 = frontier_phi_57_58_ladder_3;
            _2803 = frontier_phi_57_58_ladder_2;
            _2805 = frontier_phi_57_58_ladder_1;
            _2807 = frontier_phi_57_58_ladder;
        }
        float _2812 = isnan(1.0) ? _834 : (isnan(_834) ? 1.0 : min(_834, 1.0));
        _2592 = (_2812 * _2803) + _2026;
        _2594 = (_2812 * _2805) + _2028;
        _2596 = (_2812 * _2807) + _2030;
        _2598 = ((_2797 * _820) * _2812) + _2374;
        _2600 = ((_2799 * _821) * _2812) + _2376;
        _2602 = ((_2801 * _822) * _2812) + _2378;
    }
    else
    {
        _2592 = _2026;
        _2594 = _2028;
        _2596 = _2030;
        _2598 = _2374;
        _2600 = _2376;
        _2602 = _2378;
    }
    float _4463 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _4474 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _4485 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _4496 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _2620 = ((isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_2592 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _834))) + ((_2598 + ((isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))) * _1641)) * cbPerFrame._m0[3u].x);
    float _2621 = ((isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_2594 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _834))) + ((_2600 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1641)) * cbPerFrame._m0[3u].x);
    float _2622 = ((isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_2596 + ((isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))) * _834))) + ((_2602 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1641)) * cbPerFrame._m0[3u].x);
    float _2630 = cbInstanceData._m0[_726 + 6u].w * (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0)));
    float _2635 = _623 / cbSceneParam._m0[86u].x;
    float _2636 = _624 / cbSceneParam._m0[86u].y;
    vec4 _2650 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2635, _2636, (log2((isnan(cbSceneParam._m0[77u].w) ? _557 : (isnan(_557) ? cbSceneParam._m0[77u].w : min(_557, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2652 = _2650.x;
    float _2653 = _2650.y;
    float _2654 = _2650.z;
    float _2655 = _2650.w;
    float _2747;
    float _2749;
    float _2751;
    float _2753;
    if (_557 > cbSceneParam._m0[78u].w)
    {
        float _2710 = isnan(_557) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _557 : min(cbSceneParam._m0[80u].w, _557));
        float _2711 = _2710 / _557;
        float _2722 = _2711 * _608;
        float _2723 = _609 * _2711;
        float _2724 = (-0.0) - _2723;
        float _2725 = _2711 * _610;
        float _2727 = (cbSceneParam._m0[77u].w * _2724) / _2710;
        float _2728 = _2727 + cbSceneParam._m0[79u].w;
        float _2729 = cbSceneParam._m0[79u].w - _2723;
        float _2735 = sqrt(((_2722 * _2722) + (_2723 * _2723)) + (_2725 * _2725));
        float _2738 = (1.0 - (cbSceneParam._m0[77u].w / _2710)) * _2735;
        float _2743 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2745 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2898;
        if (abs((_2724 - _2727) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2898 = ((((_2728 > 0.0) ? exp2(_2743 * _2728) : (2.0 - exp2(_2745 * _2728))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2738;
        }
        else
        {
            float _2858 = 1.0 / cbSceneParam._m0[80u].x;
            float _2859 = isnan(_2729) ? _2728 : (isnan(_2728) ? _2729 : max(_2728, _2729));
            float _2860 = isnan(_2729) ? _2728 : (isnan(_2728) ? _2729 : min(_2728, _2729));
            float _2869 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : min(_2859, 0.0));
            float _2870 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : min(_2860, 0.0));
            _2898 = ((abs(_2735 / _2724) * cbSceneParam._m0[80u].y) * ((((_2869 - _2870) * 2.0) - ((exp2(_2743 * (isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0)))) - exp2(_2743 * (isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0))))) * _2858)) - ((exp2(_2745 * _2869) - exp2(_2745 * _2870)) * _2858))) + (_2738 * cbSceneParam._m0[80u].z);
        }
        vec4 _2900 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2635, _2636, 1.0), 0.0);
        float _2909 = exp2((_2898 * (-1.44269502162933349609375)) * (1.0 - _2900.w));
        float _2910 = log2(_2909);
        float _2926 = log2(_2655);
        _2747 = (exp2(_2926 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2910 * cbSceneParam._m0[78u].x)) * _2900.x) / cbSceneParam._m0[78u].x)) + _2652;
        _2749 = (exp2(_2926 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2910 * cbSceneParam._m0[78u].y)) * _2900.y) / cbSceneParam._m0[78u].y)) + _2653;
        _2751 = (exp2(_2926 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2910 * cbSceneParam._m0[78u].z)) * _2900.z) / cbSceneParam._m0[78u].z)) + _2654;
        _2753 = _2909 * _2655;
    }
    else
    {
        _2747 = _2652;
        _2749 = _2653;
        _2751 = _2654;
        _2753 = _2655;
    }
    float _2765 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2766 = _2765 == 3.0;
    float _2767 = log2(_2753);
    float _2774 = exp2(_2767 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0)));
    float _2775 = exp2(_2767 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0)));
    float _2776 = exp2(_2767 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0)));
    float _2785 = (_2765 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2785 * (_2766 ? _2774 : (_2774 + (cbSceneParam._m0[72u].w * _2747)));
    SV_Target.y = _2785 * (_2766 ? _2775 : (_2775 + (cbSceneParam._m0[72u].w * _2749)));
    SV_Target.z = _2785 * (_2766 ? _2776 : (_2776 + (cbSceneParam._m0[72u].w * _2751)));
    SV_Target.w = _2630;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2630;
}


