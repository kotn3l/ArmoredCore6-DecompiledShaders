#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1133;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230;
    float _231;
    float _232;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
    }
    else
    {
        _230 = _216;
        _231 = _217;
        _232 = _218;
    }
    vec4 _246 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _264 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _281 = exp2(log2(1.0 - _246.w) * 8.0);
    vec4 _293 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _318 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _327 = ((_264.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _318.x;
    float _330 = ((_264.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _318.y;
    float _333 = ((_264.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _318.z;
    float _340 = (((cbMtdParam._m0[12u].x * _293.x) - _327) * _281) + _327;
    float _341 = (((cbMtdParam._m0[12u].y * _293.y) - _330) * _281) + _330;
    float _342 = (((cbMtdParam._m0[12u].z * _293.z) - _333) * _281) + _333;
    float _343 = _318.w * _264.w;
    float _364 = cbMtdParam._m0[14u].z + texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x;
    float _367 = ((cbMtdParam._m0[14u].y - _364) * _281) + _364;
    vec4 _379 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _381 = _379.x;
    float _382 = _379.y;
    vec4 _401 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _409 = (_246.z * 2.0) * (cbMtdParam._m0[13u].x + _379.z);
    float _413 = (((_401.z - _409) + cbMtdParam._m0[14u].x) * _281) + _409;
    float _417 = (_246.x * 2.0) + (-1.0);
    float _419 = (_246.y * 2.0) + (-1.0);
    float _420 = dot(vec2(_417, _419), vec2(_417, _419));
    float _3750 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _425 = sqrt(1.0 - (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))));
    float _438 = ((((((_401.x - _381) * _281) + _381) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _417;
    float _439 = ((((((_401.y - _382) * _281) + _382) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _419;
    float _442 = fma(_425, _230, fma(_439, _222 * TANGENT.x, (_208 * _200) * _438));
    float _445 = fma(_425, _231, fma(_439, _222 * TANGENT.y, (_208 * _201) * _438));
    float _448 = fma(_425, _232, fma(_439, _222 * TANGENT.z, (_208 * _202) * _438));
    float _452 = inversesqrt(dot(vec3(_442, _445, _448), vec3(_442, _445, _448)));
    float _453 = _452 * _442;
    float _454 = _452 * _445;
    float _455 = _452 * _448;
    float _3761 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _456 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _3772 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _457 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _3783 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _458 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _3794 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _459 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _3805 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _460 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _3816 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _461 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _477 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _520 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _530 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _520);
    float _531 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _520);
    float _532 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _520);
    float _536 = inversesqrt(dot(vec3(_530, _531, _532), vec3(_530, _531, _532)));
    float _537 = _530 * _536;
    float _538 = _531 * _536;
    float _539 = _532 * _536;
    float _545 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _546 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _548 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _550 = _548.w;
    float _570 = fma(_455, cbSceneParam._m0[5u].z, fma(_454, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _453));
    float _573 = fma(_455, cbSceneParam._m0[6u].z, fma(_454, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _453));
    float _576 = fma(_455, cbSceneParam._m0[7u].z, fma(_454, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _453));
    vec4 _578 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _580 = _578.x;
    float _592 = (((_578.y - _457) + (_578.w * _457)) * cbMtdParam._m0[3u].x) + _457;
    vec4 _593 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _609 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_580 * _580)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _593.z;
    float _618 = (((cbMatDynParam._m0[15u].x - _461) * cbMatDynParam._m0[15u].w) * _609) + _461;
    float _626 = ((_609 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _592)) + _592;
    uint _650 = uint(roundEven(NORMAL.w)) * 13u;
    uint _652 = (_650 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _658 = (cbMtdParam._m0[0u].x * _458) * cbInstanceData._m0[_652].x;
    float _659 = (cbMtdParam._m0[0u].y * _459) * cbInstanceData._m0[_652].y;
    float _660 = (cbMtdParam._m0[0u].z * _460) * cbInstanceData._m0[_652].z;
    float _3827 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _661 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _3838 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _662 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _3849 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _663 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    vec4 _664 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _669 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _680 = (((_669.x - _618) + (_669.w * _618)) * cbMtdParam._m0[3u].x) + _618;
    float _693 = (cbMtdParam._m0[3u].x * (((_661 * _550) - _661) + _664.x)) + _661;
    float _694 = (cbMtdParam._m0[3u].x * (((_662 * _550) - _662) + _664.y)) + _662;
    float _695 = (cbMtdParam._m0[3u].x * (((_663 * _550) - _663) + _664.z)) + _663;
    float _709 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_618 * (_458 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_618 * (_459 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_618 * (_460 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _713 = _709 * cbMatDynParam._m0[13u].w;
    float _723 = (_713 * (cbMatDynParam._m0[13u].x - _693)) + _693;
    float _724 = (_713 * (cbMatDynParam._m0[13u].y - _694)) + _694;
    float _725 = (_713 * (cbMatDynParam._m0[13u].z - _695)) + _695;
    float _733 = ((_709 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _680)) + _680;
    float _734 = 1.0 - _733;
    float _735 = _734 * _723;
    float _736 = _734 * _724;
    float _737 = _734 * _725;
    float _741 = (_723 + (-0.039999999105930328369140625)) * _733;
    float _742 = (_724 + (-0.039999999105930328369140625)) * _733;
    float _743 = (_725 + (-0.039999999105930328369140625)) * _733;
    float _744 = _741 + 0.039999999105930328369140625;
    float _745 = _742 + 0.039999999105930328369140625;
    float _746 = _743 + 0.039999999105930328369140625;
    vec4 _755 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _545, cbSceneParam._m0[86u].y * _546));
    float _758 = _755.x * TEXCOORD_4;
    float _759 = dot(vec3(_453, _454, _455), vec3(_537, _538, _539));
    float _762 = _759 * 2.0;
    float _766 = (_762 * _453) - _537;
    float _767 = (_762 * _454) - _538;
    float _768 = (_762 * _455) - _539;
    float _772 = abs(dot(vec3(_537, _538, _539), vec3(_453, _454, _455)));
    float _3860 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _774 = sqrt(_626);
    float _787 = exp2((_774 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_774 * 3.0));
    float _793 = (1.0 - _787) * ((_774 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _794 = _787 * _774;
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _830 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1132;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _857 = fma(_830, cbModelParam._m0[26u].z, fma(_826, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _822));
        float _861 = fma(_830, cbModelParam._m0[27u].z, fma(_826, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _822));
        float _865 = fma(_830, cbModelParam._m0[28u].z, fma(_826, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _822));
        float _890 = _822 + _453;
        float _891 = _826 + _454;
        float _892 = _830 + _455;
        float _902 = fma(_892, cbModelParam._m0[26u].z, fma(_891, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _890)) - _857;
        float _903 = fma(_892, cbModelParam._m0[27u].z, fma(_891, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _890)) - _861;
        float _904 = fma(_892, cbModelParam._m0[28u].z, fma(_891, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _890)) - _865;
        float _908 = inversesqrt(dot(vec3(_902, _903, _904), vec3(_902, _903, _904)));
        float _921 = ((_908 * _902) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_857 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _922 = ((_908 * _903) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_861 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _923 = ((_908 * _904) / cbModelParam._m0[34u].z) + ((((((_865 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        float _960 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _961 = _960 * (_926.x + (-0.5));
        float _962 = _960 * (_926.y + (-0.5));
        float _963 = _960 * (_926.z + (-0.5));
        float _970 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_933.x + (-0.5));
        float _972 = _970 * (_933.y + (-0.5));
        float _973 = _970 * (_933.z + (-0.5));
        float _980 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _981 = _980 * (_940.x + (-0.5));
        float _982 = _980 * (_940.y + (-0.5));
        float _983 = _980 * (_940.z + (-0.5));
        float _990 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_947.x + (-0.5));
        float _992 = _990 * (_947.y + (-0.5));
        float _993 = _990 * (_947.z + (-0.5));
        float _994 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _995 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _996 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _997 = _961 * 0.5;
        float _998 = _971 * 0.5;
        float _999 = _981 * 0.5;
        float _1000 = dot(vec3(_997, _998, _999), vec3(_997, _998, _999));
        float _1005 = (_1000 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1000);
        float _1014 = (dot(vec3(_453, _454, _455), vec3(_1005 * _997, _1005 * _998, _1005 * _999)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1024 = sqrt(((_998 * _998) + (_997 * _997)) + (_999 * _999)) / (_994 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1026 = _1025 * 2.0;
        float _1030 = (1.0 - _1025) / (_1025 + 1.0);
        float _3908 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1040 = ((((1.0 - _1031) * (_1026 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1026 + 1.0))) + _1031) * _994;
        float _1041 = _962 * 0.5;
        float _1042 = _972 * 0.5;
        float _1043 = _982 * 0.5;
        float _1044 = dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043));
        float _1049 = (_1044 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1044);
        float _1057 = (dot(vec3(_453, _454, _455), vec3(_1049 * _1041, _1049 * _1042, _1049 * _1043)) + 1.0) * 0.5;
        float _3919 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1066 = sqrt(((_1042 * _1042) + (_1041 * _1041)) + (_1043 * _1043)) / (_995 + 9.9999997473787516355514526367188e-06);
        float _3930 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _3941 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1068 + 1.0))) + _1073) * _995;
        float _1083 = _963 * 0.5;
        float _1084 = _973 * 0.5;
        float _1085 = _983 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_453, _454, _455), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_996 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3974 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1110 + 1.0))) + _1115) * _996;
        _1132 = _963;
        _1134 = _962;
        _1135 = _961;
        _1136 = _973;
        _1137 = _972;
        _1138 = _971;
        _1139 = _983;
        _1140 = _982;
        _1141 = _981;
        _1142 = _996;
        _1143 = _995;
        _1144 = _994;
        _1145 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0)));
        _1146 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
        _1147 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
    }
    else
    {
        _1132 = _1133;
        _1134 = _1133;
        _1135 = _1133;
        _1136 = _1133;
        _1137 = _1133;
        _1138 = _1133;
        _1139 = _1133;
        _1140 = _1133;
        _1141 = _1133;
        _1142 = _1133;
        _1143 = _1133;
        _1144 = _1133;
        _1145 = 0.0;
        _1146 = 0.0;
        _1147 = 0.0;
    }
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1173 = fma(_830, cbModelParam._m0[30u].z, fma(_826, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _822));
        float _1177 = fma(_830, cbModelParam._m0[31u].z, fma(_826, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _822));
        float _1181 = fma(_830, cbModelParam._m0[32u].z, fma(_826, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _822));
        float _1204 = _822 + _453;
        float _1205 = _826 + _454;
        float _1206 = _830 + _455;
        float _1216 = fma(_1206, cbModelParam._m0[30u].z, fma(_1205, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1204)) - _1173;
        float _1217 = fma(_1206, cbModelParam._m0[31u].z, fma(_1205, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1204)) - _1177;
        float _1218 = fma(_1206, cbModelParam._m0[32u].z, fma(_1205, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1204)) - _1181;
        float _1222 = inversesqrt(dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218)));
        float _1235 = ((_1222 * _1216) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1173 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1236 = ((_1222 * _1217) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1177 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1237 = ((_1222 * _1218) / cbModelParam._m0[35u].z) + ((((((_1181 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1235, _1236, _1237), 0.0);
        float _1272 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1239.x + (-0.5));
        float _1274 = _1272 * (_1239.y + (-0.5));
        float _1275 = _1272 * (_1239.z + (-0.5));
        float _1282 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1246.x + (-0.5));
        float _1284 = _1282 * (_1246.y + (-0.5));
        float _1285 = _1282 * (_1246.z + (-0.5));
        float _1292 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1253.x + (-0.5));
        float _1294 = _1292 * (_1253.y + (-0.5));
        float _1295 = _1292 * (_1253.z + (-0.5));
        float _1302 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1260.x + (-0.5));
        float _1304 = _1302 * (_1260.y + (-0.5));
        float _1305 = _1302 * (_1260.z + (-0.5));
        float _1306 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1307 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1308 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1309 = _1273 * 0.5;
        float _1310 = _1283 * 0.5;
        float _1311 = _1293 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_453, _454, _455), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1306 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _4037 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1336 + 1.0))) + _1341) * _1306;
        float _1351 = _1274 * 0.5;
        float _1352 = _1284 * 0.5;
        float _1353 = _1294 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1367 = (dot(vec3(_453, _454, _455), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1376 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1307 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _4070 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1378 + 1.0))) + _1383) * _1307;
        float _1393 = _1275 * 0.5;
        float _1394 = _1285 * 0.5;
        float _1395 = _1295 * 0.5;
        float _1396 = dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395));
        float _1401 = (_1396 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1396);
        float _1409 = (dot(vec3(_453, _454, _455), vec3(_1401 * _1393, _1401 * _1394, _1401 * _1395)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1418 = sqrt(((_1394 * _1394) + (_1393 * _1393)) + (_1395 * _1395)) / (_1308 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1420 = _1419 * 2.0;
        float _1424 = (1.0 - _1419) / (_1419 + 1.0);
        float _4103 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1434 = ((((1.0 - _1425) * (_1420 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1420 + 1.0))) + _1425) * _1308;
        _1442 = _1275;
        _1443 = _1274;
        _1444 = _1273;
        _1445 = _1285;
        _1446 = _1284;
        _1447 = _1283;
        _1448 = _1295;
        _1449 = _1294;
        _1450 = _1293;
        _1451 = _1308;
        _1452 = _1307;
        _1453 = _1306;
        _1454 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
        _1455 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
        _1456 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)));
    }
    else
    {
        _1442 = _1133;
        _1443 = _1133;
        _1444 = _1133;
        _1445 = _1133;
        _1446 = _1133;
        _1447 = _1133;
        _1448 = _1133;
        _1449 = _1133;
        _1450 = _1133;
        _1451 = _1133;
        _1452 = _1133;
        _1453 = _1133;
        _1454 = 0.0;
        _1455 = 0.0;
        _1456 = 0.0;
    }
    float _1466 = (cbModelParam._m0[1u].x * (_1454 - _1145)) + _1145;
    float _1467 = (cbModelParam._m0[1u].x * (_1455 - _1146)) + _1146;
    float _1468 = (cbModelParam._m0[1u].x * (_1456 - _1147)) + _1147;
    float _1489 = fma(_1468, cbSceneParam._m0[89u].z, fma(_1467, cbSceneParam._m0[89u].y, _1466 * cbSceneParam._m0[89u].x));
    float _1492 = fma(_1468, cbSceneParam._m0[90u].z, fma(_1467, cbSceneParam._m0[90u].y, _1466 * cbSceneParam._m0[90u].x));
    float _1495 = fma(_1468, cbSceneParam._m0[91u].z, fma(_1467, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1466));
    float _1510 = _766 * 0.5;
    float _1511 = _767 * 0.5;
    float _1512 = _768 * 0.5;
    float _1513 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1444, _1447, _1450, _1453));
    float _1516 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1443, _1446, _1449, _1452));
    float _1519 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1442, _1445, _1448, _1451));
    float _1550;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1526 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1132, _1136, _1139, _1142));
        float _1530 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1134, _1137, _1140, _1143));
        float _1534 = dot(vec4(_1510, _1511, _1512, 1.0), vec4(_1135, _1138, _1141, _1144));
        float _1541 = dot(vec4(cbModelParam._m0[39u]), vec4(_1510, _1511, _1512, 1.0));
        _1550 = dot(vec3(isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)), isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)), isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1541) ? 0.0 : (isnan(0.0) ? _1541 : max(0.0, _1541))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1550 = 1.0;
    }
    float _1561;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1552 = dot(vec4(cbModelParam._m0[40u]), vec4(_1510, _1511, _1512, 1.0));
        _1561 = dot(vec3(isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)), isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)), isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1552) ? 0.0 : (isnan(0.0) ? _1552 : max(0.0, _1552))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1561 = 1.0;
    }
    float _1565 = (_1561 * cbModelParam._m0[1u].x) + (_1550 * (1.0 - cbModelParam._m0[1u].x));
    float _1575 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _626);
    float _1576 = isnan(_1575) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1575 : min(cbModelParam._m0[25u].z, _1575));
    float _1656;
    float _1658;
    float _1660;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1623 = fma(_830, cbModelParam._m0[13u].z, fma(_826, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _822)) + cbModelParam._m0[13u].w;
        float _1627 = fma(_830, cbModelParam._m0[14u].z, fma(_826, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _822)) + cbModelParam._m0[14u].w;
        float _1631 = fma(_830, cbModelParam._m0[15u].z, fma(_826, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _822)) + cbModelParam._m0[15u].w;
        float _1634 = fma(_768, cbModelParam._m0[13u].z, fma(_767, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _766));
        float _1637 = fma(_768, cbModelParam._m0[14u].z, fma(_767, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _766));
        float _1640 = fma(_768, cbModelParam._m0[15u].z, fma(_767, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _766));
        float _1668;
        if (_1634 > 0.0)
        {
            _1668 = abs((1.0 - _1623) / _1634);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1623 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1668 = frontier_phi_16_14_ladder;
        }
        float _1843;
        if (_1637 > 0.0)
        {
            _1843 = abs((1.0 - _1627) / _1637);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1627 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1843 = frontier_phi_25_21_ladder;
        }
        float _2138;
        if (_1640 > 0.0)
        {
            _2138 = abs((1.0 - _1631) / _1640);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1631 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2138 = frontier_phi_37_32_ladder;
        }
        float _2140 = isnan(_1843) ? _1668 : (isnan(_1668) ? _1843 : min(_1668, _1843));
        float _2141 = isnan(_2138) ? _2140 : (isnan(_2140) ? _2138 : min(_2140, _2138));
        float _2145 = (_2141 * _1634) + _1623;
        float _2146 = (_2141 * _1637) + _1627;
        float _2147 = (_2141 * _1640) + _1631;
        float _2148 = _2141 * 9.9999997473787516355514526367188e-05;
        float _2150 = (-1.0) - _2148;
        float _2152 = _2148 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2147 > _2152) || ((_2147 < _2150) || ((_2146 > _2152) || ((_2146 < _2150) || ((_2145 < _2150) || (_2145 > _2152))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2292 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2147, cbModelParam._m0[9u].z, fma(_2146, cbModelParam._m0[9u].y, _2145 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2147, cbModelParam._m0[10u].z, fma(_2146, cbModelParam._m0[10u].y, _2145 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2147, cbModelParam._m0[11u].z, fma(_2146, cbModelParam._m0[11u].y, _2145 * cbModelParam._m0[11u].x))), _1576);
            frontier_phi_15_37_ladder = _2292.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2292.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2292.z * cbModelParam._m0[1u].y;
        }
        _1656 = frontier_phi_15_37_ladder_1;
        _1658 = frontier_phi_15_37_ladder;
        _1660 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1644 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_766, _767, _768), _1576);
        _1656 = _1644.x * cbModelParam._m0[1u].y;
        _1658 = _1644.y * cbModelParam._m0[1u].y;
        _1660 = _1644.z * cbModelParam._m0[1u].y;
    }
    float _1664 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _626);
    float _1665 = isnan(_1664) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1664 : min(cbModelParam._m0[25u].w, _1664));
    float _1758;
    float _1760;
    float _1762;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1722 = fma(_830, cbModelParam._m0[21u].z, fma(_826, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _822)) + cbModelParam._m0[21u].w;
        float _1726 = fma(_830, cbModelParam._m0[22u].z, fma(_826, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _822)) + cbModelParam._m0[22u].w;
        float _1730 = fma(_830, cbModelParam._m0[23u].z, fma(_826, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _822)) + cbModelParam._m0[23u].w;
        float _1733 = fma(_768, cbModelParam._m0[21u].z, fma(_767, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _766));
        float _1736 = fma(_768, cbModelParam._m0[22u].z, fma(_767, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _766));
        float _1739 = fma(_768, cbModelParam._m0[23u].z, fma(_767, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _766));
        float _1848;
        if (_1733 > 0.0)
        {
            _1848 = abs((1.0 - _1722) / _1733);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1722 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1848 = frontier_phi_27_23_ladder;
        }
        float _2165;
        if (_1736 > 0.0)
        {
            _2165 = abs((1.0 - _1726) / _1736);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1726 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2165 = frontier_phi_39_34_ladder;
        }
        float _2503;
        if (_1739 > 0.0)
        {
            _2503 = abs((1.0 - _1730) / _1739);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1730 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2503 = frontier_phi_49_46_ladder;
        }
        float _2505 = isnan(_2165) ? _1848 : (isnan(_1848) ? _2165 : min(_1848, _2165));
        float _2506 = isnan(_2503) ? _2505 : (isnan(_2505) ? _2503 : min(_2505, _2503));
        float _2510 = (_2506 * _1733) + _1722;
        float _2511 = (_2506 * _1736) + _1726;
        float _2512 = (_2506 * _1739) + _1730;
        float _2513 = _2506 * 9.9999997473787516355514526367188e-05;
        float _2514 = (-1.0) - _2513;
        float _2516 = _2513 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2512 > _2516) || ((_2512 < _2514) || ((_2511 > _2516) || ((_2511 < _2514) || ((_2510 < _2514) || (_2510 > _2516))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2634 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2512, cbModelParam._m0[17u].z, fma(_2511, cbModelParam._m0[17u].y, _2510 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2512, cbModelParam._m0[18u].z, fma(_2511, cbModelParam._m0[18u].y, _2510 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2512, cbModelParam._m0[19u].z, fma(_2511, cbModelParam._m0[19u].y, _2510 * cbModelParam._m0[19u].x))), _1665);
            frontier_phi_24_49_ladder = _2634.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2634.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2634.x * cbModelParam._m0[1u].z;
        }
        _1758 = frontier_phi_24_49_ladder_2;
        _1760 = frontier_phi_24_49_ladder_1;
        _1762 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1742 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_766, _767, _768), _1665);
        _1758 = _1742.x * cbModelParam._m0[1u].z;
        _1760 = _1742.y * cbModelParam._m0[1u].z;
        _1762 = _1742.z * cbModelParam._m0[1u].z;
    }
    float _1775 = (((_793 * _744) + _794) * _758) * ((cbModelParam._m0[1u].w * (_1758 - _1656)) + _1656);
    float _1777 = (((_793 * _745) + _794) * _758) * ((cbModelParam._m0[1u].w * (_1760 - _1658)) + _1658);
    float _1779 = (((_793 * _746) + _794) * _758) * ((cbModelParam._m0[1u].w * (_1762 - _1660)) + _1660);
    float _1782 = fma(_1779, cbSceneParam._m0[89u].z, fma(_1777, cbSceneParam._m0[89u].y, _1775 * cbSceneParam._m0[89u].x));
    float _1785 = fma(_1779, cbSceneParam._m0[90u].z, fma(_1777, cbSceneParam._m0[90u].y, _1775 * cbSceneParam._m0[90u].x));
    float _1788 = fma(_1779, cbSceneParam._m0[91u].z, fma(_1777, cbSceneParam._m0[91u].y, _1775 * cbSceneParam._m0[91u].x));
    float _1822 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1826 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1830 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1834 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1835 = _1822 / _1834;
    float _1836 = _1826 / _1834;
    float _1837 = _1830 / _1834;
    float _1984;
    float _1985;
    float _1986;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1864 = ((uint(_1837 > cbSceneParam._m0[59u].y) + uint(_1837 > cbSceneParam._m0[59u].x)) + uint(_1837 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1865 = _1864 + 43u;
        uint _1873 = _1864 + 44u;
        uint _1881 = _1864 + 45u;
        uint _1889 = _1864 + 46u;
        float _1900 = fma(_1834, cbSceneParam._m0[_1865].w, fma(_1830, cbSceneParam._m0[_1865].z, fma(_1826, cbSceneParam._m0[_1865].y, _1822 * cbSceneParam._m0[_1865].x)));
        float _1904 = fma(_1834, cbSceneParam._m0[_1873].w, fma(_1830, cbSceneParam._m0[_1873].z, fma(_1826, cbSceneParam._m0[_1873].y, _1822 * cbSceneParam._m0[_1873].x)));
        float _1912 = fma(_1834, cbSceneParam._m0[_1889].w, fma(_1830, cbSceneParam._m0[_1889].z, fma(_1826, cbSceneParam._m0[_1889].y, _1822 * cbSceneParam._m0[_1889].x)));
        float _1917 = cbSceneParam._m0[33u].z * _1912;
        float _1919 = cbSceneParam._m0[33u].w * _1912;
        float _1922 = fma(_1834, cbSceneParam._m0[_1881].w, fma(_1830, cbSceneParam._m0[_1881].z, fma(_1826, cbSceneParam._m0[_1881].y, _1822 * cbSceneParam._m0[_1881].x))) / _1912;
        float _1970 = (cbSceneParam._m0[33u].x - sqrt(((_1836 * _1836) + (_1835 * _1835)) + (_1837 * _1837))) * cbSceneParam._m0[33u].y;
        float _4229 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1977 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1917 + _1900) / _1912, (_1919 + _1904) / _1912), _1922), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1919 + _1900) / _1912, (_1904 - _1917) / _1912), _1922), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1900 - _1917) / _1912, (_1904 - _1919) / _1912), _1922), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1900 - _1919) / _1912, (_1917 + _1904) / _1912), _1922), 0.0)).x), vec4(0.25)));
        _1984 = 1.0 - (_1977 * cbSceneParam._m0[34u].x);
        _1985 = 1.0 - (_1977 * cbSceneParam._m0[34u].y);
        _1986 = 1.0 - (_1977 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1984 = 1.0;
        _1985 = 1.0;
        _1986 = 1.0;
    }
    float _2050;
    float _2052;
    float _2054;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2038 = fma(_1834, cbSceneParam._m0[63u].w, fma(_1830, cbSceneParam._m0[63u].z, fma(_1826, cbSceneParam._m0[63u].y, _1822 * cbSceneParam._m0[63u].x)));
        float _2039 = fma(_1834, cbSceneParam._m0[60u].w, fma(_1830, cbSceneParam._m0[60u].z, fma(_1826, cbSceneParam._m0[60u].y, _1822 * cbSceneParam._m0[60u].x))) / _2038;
        float _2040 = fma(_1834, cbSceneParam._m0[61u].w, fma(_1830, cbSceneParam._m0[61u].z, fma(_1826, cbSceneParam._m0[61u].y, _1822 * cbSceneParam._m0[61u].x))) / _2038;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2039 >= cbSceneParam._m0[64u].x) && (_2040 >= cbSceneParam._m0[64u].y)) && (_2039 <= cbSceneParam._m0[64u].z)) && (_2040 <= cbSceneParam._m0[64u].w))
        {
            float _2178 = fma(_1834, cbSceneParam._m0[62u].w, fma(_1830, cbSceneParam._m0[62u].z, fma(_1826, cbSceneParam._m0[62u].y, _1822 * cbSceneParam._m0[62u].x))) / _2038;
            float _2182 = isnan(cbSceneParam._m0[41u].w) ? _2178 : (isnan(_2178) ? cbSceneParam._m0[41u].w : max(_2178, cbSceneParam._m0[41u].w));
            float _2225 = (cbSceneParam._m0[33u].x - sqrt(((_1836 * _1836) + (_1835 * _1835)) + (_1837 * _1837))) * cbSceneParam._m0[33u].y;
            float _4245 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
            float _2232 = (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2039, cbSceneParam._m0[33u].w + _2040), _2182), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2039, _2040 - cbSceneParam._m0[33u].z), _2182), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2039 - cbSceneParam._m0[33u].z, _2040 - cbSceneParam._m0[33u].w), _2182), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2039 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2040), _2182), 0.0)).x), vec4(0.25)));
            float _2236 = 1.0 - (_2232 * cbSceneParam._m0[34u].x);
            float _2237 = 1.0 - (_2232 * cbSceneParam._m0[34u].y);
            float _2238 = 1.0 - (_2232 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2237) ? _1985 : (isnan(_1985) ? _2237 : min(_1985, _2237));
            frontier_phi_36_35_ladder_1 = isnan(_2238) ? _1986 : (isnan(_1986) ? _2238 : min(_1986, _2238));
            frontier_phi_36_35_ladder_2 = isnan(_2236) ? _1984 : (isnan(_1984) ? _2236 : min(_1984, _2236));
        }
        else
        {
            frontier_phi_36_35_ladder = _1985;
            frontier_phi_36_35_ladder_1 = _1986;
            frontier_phi_36_35_ladder_2 = _1984;
        }
        _2050 = frontier_phi_36_35_ladder_2;
        _2052 = frontier_phi_36_35_ladder;
        _2054 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2050 = _1984;
        _2052 = _1985;
        _2054 = _1986;
    }
    uvec4 _2059 = floatBitsToUint(cbInstanceData._m0[_650 + 5u]);
    uint _2061 = _2059.x * 14u;
    uint _2062 = _2061 + 13u;
    float _2069 = _758 + (-1.0);
    float _2074 = (cbLight._m0[_2062].x * _2069) + 1.0;
    float _2075 = (cbLight._m0[_2062].y * _2069) + 1.0;
    float _2076 = (cbLight._m0[_2062].z * _2069) + 1.0;
    float _2077 = (cbLight._m0[_2062].w * _2069) + 1.0;
    uint _2078 = _2061 + 5u;
    float _2084 = isnan(1.0) ? _2075 : (isnan(_2075) ? 1.0 : min(_2075, 1.0));
    uint _2088 = _2061 + 4u;
    float _2097 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
    uint _2101 = _2061 | 1u;
    float _2112 = dot(vec3(cbLight._m0[_2061].xyz), vec3(_453, _454, _455));
    float _2115 = dot(vec3(cbLight._m0[_2101].xyz), vec3(_453, _454, _455));
    float _4281 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _4292 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2120 = (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * 0.3183098733425140380859375;
    float _2122 = (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * 0.3183098733425140380859375;
    float _2129 = ((cbLight._m0[_2078].x * _2084) * _2122) + (((cbLight._m0[_2088].x * _2050) * _2097) * _2120);
    float _2130 = ((_2084 * cbLight._m0[_2078].y) * _2122) + (((cbLight._m0[_2088].y * _2052) * _2097) * _2120);
    float _2131 = ((_2084 * cbLight._m0[_2078].z) * _2122) + (((cbLight._m0[_2088].z * _2054) * _2097) * _2120);
    uvec4 _2135 = floatBitsToUint(cbLight._m0[_2061 + 12u]);
    bool _2137 = _2135.x == 0u;
    float _2239;
    float _2241;
    float _2243;
    if (_2137)
    {
        _2239 = _2129;
        _2241 = _2130;
        _2243 = _2131;
    }
    else
    {
        uint _2247 = _2061 + 6u;
        float _2263 = (dot(vec3(cbLight._m0[_2061 + 2u].xyz), vec3(_453, _454, _455)) * 0.5) + 0.5;
        float _2264 = _2263 * _2263;
        float _4303 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2265 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _2266 = isnan(1.0) ? _2076 : (isnan(_2076) ? 1.0 : min(_2076, 1.0));
        _2239 = (((cbLight._m0[_2247].x * 0.3183098733425140380859375) * _2265) * _2266) + _2129;
        _2241 = (((cbLight._m0[_2247].y * 0.3183098733425140380859375) * _2265) * _2266) + _2130;
        _2243 = (((cbLight._m0[_2247].z * 0.3183098733425140380859375) * _2265) * _2266) + _2131;
    }
    bool _2246 = _2135.y == 0u;
    float _2301;
    float _2303;
    float _2305;
    if (_2246)
    {
        _2301 = _2239;
        _2303 = _2241;
        _2305 = _2243;
    }
    else
    {
        uint _2474 = _2061 + 7u;
        float _2490 = (dot(vec3(cbLight._m0[_2061 + 3u].xyz), vec3(_453, _454, _455)) * 0.5) + 0.5;
        float _2491 = _2490 * _2490;
        float _4319 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2492 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _2493 = isnan(1.0) ? _2077 : (isnan(_2077) ? 1.0 : min(_2077, 1.0));
        _2301 = (((cbLight._m0[_2474].x * 0.3183098733425140380859375) * _2492) * _2493) + _2239;
        _2303 = (((cbLight._m0[_2474].y * 0.3183098733425140380859375) * _2492) * _2493) + _2241;
        _2305 = (((cbLight._m0[_2474].z * 0.3183098733425140380859375) * _2492) * _2493) + _2243;
    }
    uint _2308 = _2061 + 8u;
    float _2321 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2061].w)) * _626) * 0.949999988079071044921875);
    float _2322 = _2321 * _2321;
    float _2323 = cbLight._m0[_2061].x + _537;
    float _2324 = cbLight._m0[_2061].y + _538;
    float _2325 = cbLight._m0[_2061].z + _539;
    float _2329 = inversesqrt(dot(vec3(_2323, _2324, _2325), vec3(_2323, _2324, _2325)));
    float _2330 = _2329 * _2323;
    float _2331 = _2329 * _2324;
    float _2332 = _2329 * _2325;
    float _2333 = dot(vec3(_453, _454, _455), vec3(cbLight._m0[_2061].xyz));
    float _4335 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2336 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _4346 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _2337 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _2338 = dot(vec3(_453, _454, _455), vec3(_2330, _2331, _2332));
    float _4357 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2341 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
    float _2342 = dot(vec3(cbLight._m0[_2061].xyz), vec3(_2330, _2331, _2332));
    float _4368 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2346 = _2322 * _2322;
    float _2350 = ((_2341 * _2341) * (_2346 + (-1.0))) + 1.0;
    float _2358 = exp2(log2(1.0 - (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0)))) * 5.0);
    float _2359 = 0.959999978542327880859375 - _741;
    float _2361 = 0.959999978542327880859375 - _742;
    float _2362 = 0.959999978542327880859375 - _743;
    float _2369 = 1.0 - _2322;
    float _2380 = (0.5 / (((_2337 * ((_2336 * _2369) + _2322)) + 9.9999999392252902907785028219223e-09) + (((_2337 * _2369) + _2322) * _2336))) * _2336;
    float _4379 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2382 = (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_2346 / ((_2350 * _2350) * 3.141590118408203125));
    uint _2396 = _2061 + 9u;
    float _2407 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2101].w)) * _626) * 0.949999988079071044921875);
    float _2408 = _2407 * _2407;
    float _2409 = cbLight._m0[_2101].x + _537;
    float _2410 = cbLight._m0[_2101].y + _538;
    float _2411 = cbLight._m0[_2101].z + _539;
    float _2415 = inversesqrt(dot(vec3(_2409, _2410, _2411), vec3(_2409, _2410, _2411)));
    float _2416 = _2415 * _2409;
    float _2417 = _2415 * _2410;
    float _2418 = _2415 * _2411;
    float _2419 = dot(vec3(_453, _454, _455), vec3(cbLight._m0[_2101].xyz));
    float _4390 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
    float _2422 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
    float _2423 = dot(vec3(_453, _454, _455), vec3(_2416, _2417, _2418));
    float _4401 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2426 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
    float _2427 = dot(vec3(cbLight._m0[_2101].xyz), vec3(_2416, _2417, _2418));
    float _4412 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2431 = _2408 * _2408;
    float _2435 = ((_2426 * _2426) * (_2431 + (-1.0))) + 1.0;
    float _2442 = exp2(log2(1.0 - (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0)))) * 5.0);
    float _2449 = 1.0 - _2408;
    float _2459 = (0.5 / (((_2337 * ((_2422 * _2449) + _2408)) + 9.9999999392252902907785028219223e-09) + (((_2337 * _2449) + _2408) * _2422))) * _2422;
    float _4423 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _2461 = (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_2431 / ((_2435 * _2435) * 3.141590118408203125));
    float _2471 = (((((_2442 * _2359) + _744) * cbLight._m0[_2396].x) * _2461) * _2084) + ((((cbLight._m0[_2308].x * _2050) * ((_2358 * _2359) + _744)) * _2382) * _2097);
    float _2472 = (((((_2442 * _2361) + _745) * cbLight._m0[_2396].y) * _2461) * _2084) + ((((cbLight._m0[_2308].y * _2052) * ((_2358 * _2361) + _745)) * _2382) * _2097);
    float _2473 = (((((_2442 * _2362) + _746) * cbLight._m0[_2396].z) * _2461) * _2084) + ((((cbLight._m0[_2308].z * _2054) * ((_2358 * _2362) + _746)) * _2382) * _2097);
    float _2529;
    float _2531;
    float _2533;
    if (_2137)
    {
        _2529 = _2471;
        _2531 = _2472;
        _2533 = _2473;
    }
    else
    {
        uint _2535 = _2061 + 2u;
        uint _2539 = _2061 + 10u;
        float _2553 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2535].w)) * _626) * 0.949999988079071044921875);
        float _2554 = _2553 * _2553;
        float _2555 = cbLight._m0[_2535].x + _537;
        float _2556 = cbLight._m0[_2535].y + _538;
        float _2557 = cbLight._m0[_2535].z + _539;
        float _2561 = inversesqrt(dot(vec3(_2555, _2556, _2557), vec3(_2555, _2556, _2557)));
        float _2562 = _2561 * _2555;
        float _2563 = _2561 * _2556;
        float _2564 = _2561 * _2557;
        float _2565 = dot(vec3(_453, _454, _455), vec3(cbLight._m0[_2535].xyz));
        float _4434 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2568 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _2569 = dot(vec3(_453, _454, _455), vec3(_2562, _2563, _2564));
        float _4445 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2572 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _2573 = dot(vec3(cbLight._m0[_2535].xyz), vec3(_2562, _2563, _2564));
        float _4456 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2577 = _2554 * _2554;
        float _2581 = ((_2572 * _2572) * (_2577 + (-1.0))) + 1.0;
        float _2588 = exp2(log2(1.0 - (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) * 5.0);
        float _2595 = 1.0 - _2554;
        float _2605 = (0.5 / (((_2337 * ((_2568 * _2595) + _2554)) + 9.9999999392252902907785028219223e-09) + (((_2337 * _2595) + _2554) * _2568))) * _2568;
        float _4467 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2607 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2577 / ((_2581 * _2581) * 3.141590118408203125));
        float _2608 = isnan(1.0) ? _2076 : (isnan(_2076) ? 1.0 : min(_2076, 1.0));
        _2529 = (((((_2588 * _2359) + _744) * cbLight._m0[_2539].x) * _2607) * _2608) + _2471;
        _2531 = (((((_2588 * _2361) + _745) * cbLight._m0[_2539].y) * _2607) * _2608) + _2472;
        _2533 = (((((_2588 * _2362) + _746) * cbLight._m0[_2539].z) * _2607) * _2608) + _2473;
    }
    float _2639;
    float _2641;
    float _2643;
    if (_2246)
    {
        _2639 = _2529;
        _2641 = _2531;
        _2643 = _2533;
    }
    else
    {
        uint _2650 = _2061 + 3u;
        uint _2654 = _2061 + 11u;
        float _2668 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2650].w)) * _626) * 0.949999988079071044921875);
        float _2669 = _2668 * _2668;
        float _2670 = cbLight._m0[_2650].x + _537;
        float _2671 = cbLight._m0[_2650].y + _538;
        float _2672 = cbLight._m0[_2650].z + _539;
        float _2676 = inversesqrt(dot(vec3(_2670, _2671, _2672), vec3(_2670, _2671, _2672)));
        float _2677 = _2676 * _2670;
        float _2678 = _2676 * _2671;
        float _2679 = _2676 * _2672;
        float _2680 = dot(vec3(_453, _454, _455), vec3(cbLight._m0[_2650].xyz));
        float _4483 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        float _2683 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _2684 = dot(vec3(_453, _454, _455), vec3(_2677, _2678, _2679));
        float _4494 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2687 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _2688 = dot(vec3(cbLight._m0[_2650].xyz), vec3(_2677, _2678, _2679));
        float _4505 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        float _2692 = _2669 * _2669;
        float _2696 = ((_2687 * _2687) * (_2692 + (-1.0))) + 1.0;
        float _2703 = exp2(log2(1.0 - (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0)))) * 5.0);
        float _2710 = 1.0 - _2669;
        float _2720 = (0.5 / (((_2337 * ((_2683 * _2710) + _2669)) + 9.9999999392252902907785028219223e-09) + (((_2337 * _2710) + _2669) * _2683))) * _2683;
        float _4516 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
        float _2722 = (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_2692 / ((_2696 * _2696) * 3.141590118408203125));
        float _2723 = isnan(1.0) ? _2077 : (isnan(_2077) ? 1.0 : min(_2077, 1.0));
        _2639 = (((((_2703 * _2359) + _744) * cbLight._m0[_2654].x) * _2722) * _2723) + _2529;
        _2641 = (((((_2703 * _2361) + _745) * cbLight._m0[_2654].y) * _2722) * _2723) + _2531;
        _2643 = (((((_2703 * _2362) + _746) * cbLight._m0[_2654].z) * _2722) * _2723) + _2533;
    }
    float _2788;
    float _2790;
    float _2792;
    float _2794;
    float _2796;
    float _2798;
    if (_2059.y == 0u)
    {
        uvec4 _2744 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2745 = _2744.x;
        uint _2756 = uint((float(_2744.y) * floor(float(uint(cbSceneParam._m0[85u].y * _546) / _2745))) + floor(float(uint(cbSceneParam._m0[85u].x * _545) / _2745)));
        float _2766 = (log2(_1837 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2767 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        uint _2770 = uint(isnan(14.0) ? _2767 : (isnan(_2767) ? 14.0 : min(_2767, 14.0)));
        uvec4 _2775 = texelFetch(g_lightClusterGridBuffer, int(((_2770 << 2u) + (_2756 << 6u)) >> 2u));
        uint _2776 = _2775.x;
        uint _2777 = _2744.z;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        if (((((1u << ((_2777 >> 4u) & 15u)) + 4294967295u) & _2776) == 0u) || ((_2777 & 240u) == 0u))
        {
            _2860 = 0.0;
            _2862 = 0.0;
            _2864 = 0.0;
            _2866 = 0.0;
            _2868 = 0.0;
            _2870 = 0.0;
        }
        else
        {
            float _2861;
            float _2863;
            float _2865;
            float _2867;
            float _2869;
            float _2871;
            float _3004 = 0.0;
            float _3005 = 0.0;
            float _3006 = 0.0;
            float _3007 = 0.0;
            float _3008 = 0.0;
            float _3009 = 0.0;
            uint _3010 = 0u;
            uint _3019;
            bool _3020;
            for (;;)
            {
                _3019 = texelFetch(g_lightClassification, int((((_2770 << 5u) + (_2756 << 9u)) + (_3010 << 2u)) >> 2u)).x;
                _3020 = _3019 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3020)
                {
                    frontier_phi_68_pred = _3009;
                    frontier_phi_68_pred_1 = _3008;
                    frontier_phi_68_pred_2 = _3007;
                    frontier_phi_68_pred_3 = _3005;
                    frontier_phi_68_pred_4 = _3004;
                    frontier_phi_68_pred_5 = _3006;
                }
                else
                {
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    uint _3134;
                    _3128 = _3004;
                    _3129 = _3005;
                    _3130 = _3006;
                    _3131 = _3007;
                    _3132 = _3008;
                    _3133 = _3009;
                    _3134 = _3019;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    float _3064;
                    float _3065;
                    for (;;)
                    {
                        uint _3138 = uint(findLSB(_3134)) + (_3010 << 5u);
                        uint _3135 = (_3134 + 4294967295u) & _3134;
                        uint _3140 = _3138 * 48u;
                        vec4 _3154 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3140)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 3u)).x));
                        uint _3160 = (_3138 * 48u) + 4u;
                        vec4 _3173 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3160)).x, texelFetch(g_PointLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3160 + 3u)).x));
                        uint _3179 = (_3138 * 48u) + 8u;
                        vec3 _3190 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3179)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 2u)).x));
                        float _3194 = _3154.x - _1835;
                        float _3195 = _3154.y - _1836;
                        float _3196 = _3154.z - _1837;
                        float _3197 = dot(vec3(_3194, _3195, _3196), vec3(_3194, _3195, _3196));
                        float _3200 = inversesqrt(_3197);
                        float _3201 = _3200 * _3194;
                        float _3202 = _3200 * _3195;
                        float _3203 = _3200 * _3196;
                        float _3204 = dot(vec3(_570, _573, _576), vec3(_3201, _3202, _3203));
                        float _3209 = 1.0 - (_3197 * _3154.w);
                        float _4542 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                        float _3210 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                        float _3211 = sqrt(_3197) * _3173.w;
                        float _3214 = 1.39999997615814208984375 / (_3211 + 1.39999997615814208984375);
                        float _3215 = _3214 * _3214;
                        float _3218 = ((1.0 - _3215) * _3204) + _3215;
                        float _3221 = _3211 * _3211;
                        float _3225 = ((isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0))) * _3210) / ((_3221 * 0.699999988079071044921875) + 1.0);
                        float _3229 = (-0.0) - _1835;
                        float _3230 = (-0.0) - _1836;
                        float _3231 = (-0.0) - _1837;
                        float _3235 = inversesqrt(dot(vec3(_3229, _3230, _3231), vec3(_3229, _3230, _3231)));
                        float _3236 = _3235 * _3229;
                        float _3237 = _3235 * _3230;
                        float _3238 = _3235 * _3231;
                        float _3245 = exp2(log2(1.0 / ((_3221 * 3.5) + 5.0)) * 0.25);
                        float _3246 = 1.0 - _774;
                        float _3253 = sqrt(1.0 - ((1.0 - (_3246 * _3246)) * (1.0 - (_3245 * _3245))));
                        float _3254 = _3253 * _3253;
                        float _3255 = _3254 * _3254;
                        float _3256 = _3236 + _3201;
                        float _3257 = _3237 + _3202;
                        float _3258 = _3238 + _3203;
                        float _3262 = inversesqrt(dot(vec3(_3256, _3257, _3258), vec3(_3256, _3257, _3258)));
                        float _3266 = dot(vec3(_570, _573, _576), vec3(_3236, _3237, _3238));
                        float _4558 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                        float _3269 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                        float _3270 = dot(vec3(_570, _573, _576), vec3(_3262 * _3256, _3262 * _3257, _3262 * _3258));
                        float _4569 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                        float _3273 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                        float _3277 = ((_3273 * _3273) * (_3255 + (-1.0))) + 1.0;
                        float _3278 = _3214 * _3254;
                        float _3279 = _3278 * _3278;
                        float _3282 = ((1.0 - _3279) * _3204) + _3279;
                        float _4580 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                        float _3283 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                        float _3284 = 1.0 - _3254;
                        float _3294 = (0.5 / (((_3283 * ((_3269 * _3284) + _3254)) + 9.9999999392252902907785028219223e-09) + (((_3283 * _3284) + _3254) * _3269))) * _3283;
                        float _4591 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3305 = (((_3255 * 3.1415927410125732421875) * (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) / ((_3277 * _3277) * ((_3221 * 2.1991131305694580078125) + 3.141590118408203125))) * _3210;
                        _3063 = (_3225 * _3173.x) + _3131;
                        _3064 = (_3225 * _3173.y) + _3132;
                        _3065 = (_3225 * _3173.z) + _3133;
                        _3060 = (_3305 * _3190.x) + _3128;
                        _3061 = (_3305 * _3190.y) + _3129;
                        _3062 = (_3305 * _3190.z) + _3130;
                        if (_3135 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3128 = _3060;
                            _3129 = _3061;
                            _3130 = _3062;
                            _3131 = _3063;
                            _3132 = _3064;
                            _3133 = _3065;
                            _3134 = _3135;
                        }
                    }
                    frontier_phi_68_pred = _3065;
                    frontier_phi_68_pred_1 = _3064;
                    frontier_phi_68_pred_2 = _3063;
                    frontier_phi_68_pred_3 = _3061;
                    frontier_phi_68_pred_4 = _3060;
                    frontier_phi_68_pred_5 = _3062;
                }
                _2871 = frontier_phi_68_pred;
                _2869 = frontier_phi_68_pred_1;
                _2867 = frontier_phi_68_pred_2;
                _2863 = frontier_phi_68_pred_3;
                _2861 = frontier_phi_68_pred_4;
                _2865 = frontier_phi_68_pred_5;
                uint _3011 = _3010 + 1u;
                if (_3011 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3004 = _2861;
                    _3005 = _2863;
                    _3006 = _2865;
                    _3007 = _2867;
                    _3008 = _2869;
                    _3009 = _2871;
                    _3010 = _3011;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2860 = _2861;
            _2862 = _2863;
            _2864 = _2865;
            _2866 = _2867;
            _2868 = _2869;
            _2870 = _2871;
        }
        uvec4 _2874 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2875 = _2874.z;
        uint _2877 = (_2875 >> 8u) & 15u;
        float _2972;
        float _2974;
        float _2976;
        float _2978;
        float _2980;
        float _2982;
        if (((4294967295u << _2877) & _2776) == 0u)
        {
            _2972 = _2860;
            _2974 = _2862;
            _2976 = _2864;
            _2978 = _2866;
            _2980 = _2868;
            _2982 = _2870;
        }
        else
        {
            float _2997 = inversesqrt(dot(vec3(_1835, _1836, _1837), vec3(_1835, _1836, _1837)));
            float _2998 = _2997 * _1835;
            float _2999 = _2997 * _1836;
            float _3000 = _2997 * _1837;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2877 < ((_2875 >> 12u) & 15u))
            {
                float _2973;
                float _2975;
                float _2977;
                float _2979;
                float _2981;
                float _2983;
                float _3111 = _2860;
                float _3112 = _2862;
                float _3113 = _2864;
                float _3114 = _2866;
                float _3115 = _2868;
                float _3116 = _2870;
                uint _3117 = _2877;
                uint _3126;
                bool _3127;
                for (;;)
                {
                    _3126 = texelFetch(g_lightClassification, int((((_2770 << 5u) + (_2756 << 9u)) + (_3117 << 2u)) >> 2u)).x;
                    _3127 = _3126 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3127)
                    {
                        frontier_phi_74_pred = _3113;
                        frontier_phi_74_pred_1 = _3112;
                        frontier_phi_74_pred_2 = _3111;
                        frontier_phi_74_pred_3 = _3116;
                        frontier_phi_74_pred_4 = _3115;
                        frontier_phi_74_pred_5 = _3114;
                    }
                    else
                    {
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3315;
                        float _3605;
                        float _3606;
                        float _3607;
                        float _3608;
                        float _3609;
                        float _3610;
                        float _3323 = _3111;
                        float _3324 = _3112;
                        float _3325 = _3113;
                        float _3326 = _3114;
                        float _3327 = _3115;
                        float _3328 = _3116;
                        uint _3329 = _3126;
                        uint _3330;
                        vec4 _3355;
                        float _3356;
                        vec4 _3371;
                        vec3 _3383;
                        vec4 _3398;
                        vec4 _3414;
                        float _3461;
                        bool _3462;
                        for (;;)
                        {
                            uint _3340 = ((_3117 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3329));
                            _3330 = (_3329 + 4294967295u) & _3329;
                            uint _3342 = _3340 * 40u;
                            _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            _3356 = _3355.w;
                            uint _3358 = (_3340 * 40u) + 4u;
                            _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            uint _3373 = (_3340 * 40u) + 8u;
                            _3383 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x));
                            uint _3385 = (_3340 * 40u) + 16u;
                            _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            uint _3401 = (_3340 * 40u) + 20u;
                            _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            uint _3417 = (_3340 * 40u) + 24u;
                            vec4 _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            uint _3436 = (_3340 * 40u) + 28u;
                            vec4 _3449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 3u)).x));
                            _3461 = fma(_1837, _3449.z, fma(_1836, _3449.y, _3449.x * _1835)) + _3449.w;
                            _3462 = !((fma(_1837, _3430.z, fma(_1836, _3430.y, _3430.x * _1835)) + _3430.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3462)
                            {
                                float _3489 = _3355.x - _1835;
                                float _3490 = _3355.y - _1836;
                                float _3491 = _3355.z - _1837;
                                float _3492 = dot(vec3(_3489, _3490, _3491), vec3(_3489, _3490, _3491));
                                float _3495 = inversesqrt(_3492);
                                float _3496 = _3495 * _3489;
                                float _3497 = _3495 * _3490;
                                float _3498 = _3495 * _3491;
                                float _3502 = 1.0 - (_3492 / (_3356 * _3356));
                                float _4602 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                                float _3503 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                                float _3507 = sqrt(_3492) * _3371.w;
                                float _3509 = 1.39999997615814208984375 / (_3507 + 1.39999997615814208984375);
                                float _3510 = _3509 * _3509;
                                float _3513 = ((1.0 - _3510) * dot(vec3(_3496, _3497, _3498), vec3(_570, _573, _576))) + _3510;
                                float _3516 = _3507 * _3507;
                                float _3520 = (fma(_1837, _3398.z, fma(_1836, _3398.y, _3398.x * _1835)) + _3398.w) / _3461;
                                float _3521 = (fma(_1837, _3414.z, fma(_1836, _3414.y, _3414.x * _1835)) + _3414.w) / _3461;
                                float _3525 = 1.0 - dot(vec2(_3520, _3521), vec2(_3520, _3521));
                                float _4618 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                                float _3526 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                                float _3527 = _3526 * (((isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0))) * _3503) / ((_3516 * 0.699999988079071044921875) + 1.0));
                                float _3539 = exp2(log2(1.0 / ((_3516 * 3.5) + 5.0)) * 0.25);
                                float _3540 = 1.0 - _774;
                                float _3547 = sqrt(1.0 - ((1.0 - (_3540 * _3540)) * (1.0 - (_3539 * _3539))));
                                float _3548 = _3547 * _3547;
                                float _3549 = _3548 * _3548;
                                float _3550 = _3496 - _2998;
                                float _3551 = _3497 - _2999;
                                float _3552 = _3498 - _3000;
                                float _3556 = inversesqrt(dot(vec3(_3550, _3551, _3552), vec3(_3550, _3551, _3552)));
                                float _3560 = dot(vec3(_570, _573, _576), vec3((-0.0) - _2998, (-0.0) - _2999, (-0.0) - _3000));
                                float _4629 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                                float _3563 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                                float _3564 = dot(vec3(_570, _573, _576), vec3(_3556 * _3550, _3556 * _3551, _3556 * _3552));
                                float _4640 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                                float _3567 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                                float _3571 = ((_3567 * _3567) * (_3549 + (-1.0))) + 1.0;
                                float _3572 = _3509 * _3548;
                                float _3573 = _3572 * _3572;
                                float _3579 = ((1.0 - _3573) * dot(vec3(_570, _573, _576), vec3(_3496, _3497, _3498))) + _3573;
                                float _4651 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                                float _3580 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                                float _3581 = 1.0 - _3548;
                                float _3591 = (0.5 / (((_3580 * ((_3563 * _3581) + _3548)) + 9.9999999392252902907785028219223e-09) + (((_3580 * _3581) + _3548) * _3563))) * _3580;
                                float _4662 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3601 = (_3526 * _3503) * (((_3549 * 3.1415927410125732421875) * (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0)))) / ((_3571 * _3571) * ((_3516 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3601 * _3383.z;
                                frontier_phi_80_pred_1 = _3601 * _3383.y;
                                frontier_phi_80_pred_2 = _3601 * _3383.x;
                                frontier_phi_80_pred_3 = _3527 * _3371.z;
                                frontier_phi_80_pred_4 = _3527 * _3371.y;
                                frontier_phi_80_pred_5 = _3527 * _3371.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3607 = frontier_phi_80_pred;
                            _3606 = frontier_phi_80_pred_1;
                            _3605 = frontier_phi_80_pred_2;
                            _3610 = frontier_phi_80_pred_3;
                            _3609 = frontier_phi_80_pred_4;
                            _3608 = frontier_phi_80_pred_5;
                            _3313 = _3608 + _3326;
                            _3314 = _3609 + _3327;
                            _3315 = _3610 + _3328;
                            _3310 = _3605 + _3323;
                            _3311 = _3606 + _3324;
                            _3312 = _3607 + _3325;
                            if (_3330 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3323 = _3310;
                                _3324 = _3311;
                                _3325 = _3312;
                                _3326 = _3313;
                                _3327 = _3314;
                                _3328 = _3315;
                                _3329 = _3330;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3312;
                        frontier_phi_74_pred_1 = _3311;
                        frontier_phi_74_pred_2 = _3310;
                        frontier_phi_74_pred_3 = _3315;
                        frontier_phi_74_pred_4 = _3314;
                        frontier_phi_74_pred_5 = _3313;
                    }
                    _2977 = frontier_phi_74_pred;
                    _2975 = frontier_phi_74_pred_1;
                    _2973 = frontier_phi_74_pred_2;
                    _2983 = frontier_phi_74_pred_3;
                    _2981 = frontier_phi_74_pred_4;
                    _2979 = frontier_phi_74_pred_5;
                    uint _3118 = _3117 + 1u;
                    if (_3118 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3111 = _2973;
                        _3112 = _2975;
                        _3113 = _2977;
                        _3114 = _2979;
                        _3115 = _2981;
                        _3116 = _2983;
                        _3117 = _3118;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2981;
                frontier_phi_62_63_ladder_1 = _2979;
                frontier_phi_62_63_ladder_2 = _2977;
                frontier_phi_62_63_ladder_3 = _2983;
                frontier_phi_62_63_ladder_4 = _2975;
                frontier_phi_62_63_ladder_5 = _2973;
            }
            else
            {
                frontier_phi_62_63_ladder = _2868;
                frontier_phi_62_63_ladder_1 = _2866;
                frontier_phi_62_63_ladder_2 = _2864;
                frontier_phi_62_63_ladder_3 = _2870;
                frontier_phi_62_63_ladder_4 = _2862;
                frontier_phi_62_63_ladder_5 = _2860;
            }
            _2972 = frontier_phi_62_63_ladder_5;
            _2974 = frontier_phi_62_63_ladder_4;
            _2976 = frontier_phi_62_63_ladder_2;
            _2978 = frontier_phi_62_63_ladder_1;
            _2980 = frontier_phi_62_63_ladder;
            _2982 = frontier_phi_62_63_ladder_3;
        }
        float _2987 = isnan(1.0) ? _758 : (isnan(_758) ? 1.0 : min(_758, 1.0));
        _2788 = (_2987 * _2978) + _2301;
        _2790 = (_2987 * _2980) + _2303;
        _2792 = (_2987 * _2982) + _2305;
        _2794 = ((_2972 * _744) * _2987) + _2639;
        _2796 = ((_2974 * _745) * _2987) + _2641;
        _2798 = ((_2976 * _746) * _2987) + _2643;
    }
    else
    {
        _2788 = _2301;
        _2790 = _2303;
        _2792 = _2305;
        _2794 = _2639;
        _2796 = _2641;
        _2798 = _2643;
    }
    float _4678 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _4689 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _4700 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _4711 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _2816 = ((isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0))) * (_2788 + ((isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))) * _758))) + ((_2794 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1565)) * cbPerFrame._m0[3u].x);
    float _2817 = ((isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0))) * (_2790 + ((isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))) * _758))) + ((_2796 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1565)) * cbPerFrame._m0[3u].x);
    float _2818 = ((isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0))) * (_2792 + ((isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))) * _758))) + ((_2798 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1565)) * cbPerFrame._m0[3u].x);
    float _2826 = cbInstanceData._m0[_650 + 6u].w * (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0)));
    float _2831 = _545 / cbSceneParam._m0[86u].x;
    float _2832 = _546 / cbSceneParam._m0[86u].y;
    vec4 _2846 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2831, _2832, (log2((isnan(cbSceneParam._m0[77u].w) ? _477 : (isnan(_477) ? cbSceneParam._m0[77u].w : min(_477, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2848 = _2846.x;
    float _2849 = _2846.y;
    float _2850 = _2846.z;
    float _2851 = _2846.w;
    float _2922;
    float _2924;
    float _2926;
    float _2928;
    if (_477 > cbSceneParam._m0[78u].w)
    {
        float _2885 = isnan(_477) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _477 : min(cbSceneParam._m0[80u].w, _477));
        float _2886 = _2885 / _477;
        float _2897 = _2886 * _530;
        float _2898 = _531 * _2886;
        float _2899 = (-0.0) - _2898;
        float _2900 = _2886 * _532;
        float _2902 = (cbSceneParam._m0[77u].w * _2899) / _2885;
        float _2903 = _2902 + cbSceneParam._m0[79u].w;
        float _2904 = cbSceneParam._m0[79u].w - _2898;
        float _2910 = sqrt(((_2897 * _2897) + (_2898 * _2898)) + (_2900 * _2900));
        float _2913 = (1.0 - (cbSceneParam._m0[77u].w / _2885)) * _2910;
        float _2918 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2920 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3073;
        if (abs((_2899 - _2902) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3073 = ((((_2903 > 0.0) ? exp2(_2918 * _2903) : (2.0 - exp2(_2920 * _2903))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2913;
        }
        else
        {
            float _3033 = 1.0 / cbSceneParam._m0[80u].x;
            float _3034 = isnan(_2904) ? _2903 : (isnan(_2903) ? _2904 : max(_2903, _2904));
            float _3035 = isnan(_2904) ? _2903 : (isnan(_2903) ? _2904 : min(_2903, _2904));
            float _3044 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : min(_3034, 0.0));
            float _3045 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : min(_3035, 0.0));
            _3073 = ((abs(_2910 / _2899) * cbSceneParam._m0[80u].y) * ((((_3044 - _3045) * 2.0) - ((exp2(_2918 * (isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0)))) - exp2(_2918 * (isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0))))) * _3033)) - ((exp2(_2920 * _3044) - exp2(_2920 * _3045)) * _3033))) + (_2913 * cbSceneParam._m0[80u].z);
        }
        vec4 _3075 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2831, _2832, 1.0), 0.0);
        float _3084 = exp2((_3073 * (-1.44269502162933349609375)) * (1.0 - _3075.w));
        float _3085 = log2(_3084);
        float _3101 = log2(_2851);
        _2922 = (exp2(_3101 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3085 * cbSceneParam._m0[78u].x)) * _3075.x) / cbSceneParam._m0[78u].x)) + _2848;
        _2924 = (exp2(_3101 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3085 * cbSceneParam._m0[78u].y)) * _3075.y) / cbSceneParam._m0[78u].y)) + _2849;
        _2926 = (exp2(_3101 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3085 * cbSceneParam._m0[78u].z)) * _3075.z) / cbSceneParam._m0[78u].z)) + _2850;
        _2928 = _3084 * _2851;
    }
    else
    {
        _2922 = _2848;
        _2924 = _2849;
        _2926 = _2850;
        _2928 = _2851;
    }
    float _2940 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2941 = _2940 == 3.0;
    float _2942 = log2(_2928);
    float _2949 = exp2(_2942 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0)));
    float _2950 = exp2(_2942 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0)));
    float _2951 = exp2(_2942 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0)));
    float _2960 = (_2940 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2960 * (_2941 ? _2949 : (_2949 + (cbSceneParam._m0[72u].w * _2922)));
    SV_Target.y = _2960 * (_2941 ? _2950 : (_2950 + (cbSceneParam._m0[72u].w * _2924)));
    SV_Target.z = _2960 * (_2941 ? _2951 : (_2951 + (cbSceneParam._m0[72u].w * _2926)));
    SV_Target.w = _2826;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2826;
}


