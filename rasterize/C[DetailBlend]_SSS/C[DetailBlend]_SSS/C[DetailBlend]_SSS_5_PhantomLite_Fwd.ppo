#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1308;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230;
    float _231;
    float _232;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
    }
    else
    {
        _230 = _216;
        _231 = _217;
        _232 = _218;
    }
    float _277 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _287 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _277);
    float _288 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _277);
    float _289 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _277);
    vec4 _302 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _307 = _302.z;
    float _314 = exp2(log2(_307 * 22.0) * 260.0);
    float _315 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _316 = isnan(1.0) ? _315 : (isnan(_315) ? 1.0 : min(_315, 1.0));
    vec4 _330 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _340 = cbMtdParam._m0[10u].x * _330.x;
    float _341 = cbMtdParam._m0[10u].y * _330.y;
    float _342 = cbMtdParam._m0[10u].z * _330.z;
    vec4 _354 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _369 = exp2(log2(1.0 - _302.w) * 8.0);
    vec4 _381 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _406 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _428 = (((((_354.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _406.x) - _340) * _316) + _340;
    float _429 = (((((_354.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _406.y) - _341) * _316) + _341;
    float _430 = (((((_354.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _406.z) - _342) * _316) + _342;
    float _437 = (((cbMtdParam._m0[12u].x * _381.x) - _428) * _369) + _428;
    float _438 = (((cbMtdParam._m0[12u].y * _381.y) - _429) * _369) + _429;
    float _439 = (((cbMtdParam._m0[12u].z * _381.z) - _430) * _369) + _430;
    float _440 = _406.w * _354.w;
    float _468 = (((texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _316) + cbMtdParam._m0[15u].y;
    float _471 = ((cbMtdParam._m0[14u].y - _468) * _369) + _468;
    vec4 _483 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _485 = _483.x;
    float _486 = _483.y;
    float _492 = cbMtdParam._m0[13u].y + _483.z;
    vec4 _504 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _523 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _534 = ((((_307 * 2.0) * (cbMtdParam._m0[13u].x + _504.z)) - _492) * _316) + _492;
    float _538 = (((_523.z - _534) + cbMtdParam._m0[14u].x) * _369) + _534;
    float _542 = (_302.x * 2.0) + (-1.0);
    float _544 = (_302.y * 2.0) + (-1.0);
    float _545 = dot(vec2(_542, _544), vec2(_542, _544));
    float _3681 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _550 = sqrt(1.0 - (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))));
    float _555 = ((_504.x - _485) * _316) + _485;
    float _556 = ((_504.y - _486) * _316) + _486;
    float _569 = ((((((_523.x - _555) * _369) + _555) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _542;
    float _570 = ((((((_523.y - _556) * _369) + _556) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _544;
    float _573 = fma(_550, _230, fma(_570, _222 * TANGENT.x, (_208 * _200) * _569));
    float _576 = fma(_550, _231, fma(_570, _222 * TANGENT.y, (_208 * _201) * _569));
    float _579 = fma(_550, _232, fma(_570, _222 * TANGENT.z, (_208 * _202) * _569));
    float _583 = inversesqrt(dot(vec3(_573, _576, _579), vec3(_573, _576, _579)));
    float _584 = _583 * _573;
    float _585 = _583 * _576;
    float _586 = _583 * _579;
    float _3692 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _587 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _3703 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _588 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _3714 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _589 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _3725 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _590 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _3736 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _591 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _3747 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _592 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _600 = cbMatDynParam._m0[9u].x * _589;
    float _601 = cbMatDynParam._m0[9u].y * _590;
    float _602 = cbMatDynParam._m0[9u].z * _591;
    float _609 = inversesqrt(dot(vec3(_287, _288, _289), vec3(_287, _288, _289)));
    float _610 = _609 * _287;
    float _611 = _609 * _288;
    float _612 = _609 * _289;
    float _613 = dot(vec3(_584, _585, _586), vec3(_610, _611, _612));
    float _619 = abs(exp2(log2(_613) * cbMatDynParam._m0[12u].x));
    float _620 = isnan(0.100000001490116119384765625) ? _619 : (isnan(_619) ? 0.100000001490116119384765625 : max(_619, 0.100000001490116119384765625));
    float _626 = ((isnan(0.699999988079071044921875) ? _620 : (isnan(_620) ? 0.699999988079071044921875 : min(_620, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _649 = 1.0 - cbMatDynParam._m0[8u].w;
    float _3768 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _652 = 1.0 - cbMatDynParam._m0[7u].w;
    float _3779 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _653 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _657 = dot(vec3(_584, _585, _586), vec3(0.0, -1.0, 0.0));
    float _3790 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _660 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
    float _667 = (_660 * _589) * cbMatDynParam._m0[11u].x;
    float _669 = (_660 * _590) * cbMatDynParam._m0[11u].y;
    float _671 = (_660 * _591) * cbMatDynParam._m0[11u].z;
    float _678 = dot(vec3(_610, _611, _612), vec3(_584, _585, _586));
    float _681 = _678 * 2.0;
    float _691 = dot(vec3((-0.0) - (_610 - (_681 * _584)), (-0.0) - (_611 - (_681 * _585)), (-0.0) - (_612 - (_681 * _586))), vec3(0.0, -1.0, 0.0));
    float _3801 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _698 = exp2(log2(isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * 4.0);
    float _724 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _730 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _731 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _733 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _735 = _733.w;
    float _753 = fma(_586, cbSceneParam._m0[5u].z, fma(_585, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _584));
    float _756 = fma(_586, cbSceneParam._m0[6u].z, fma(_585, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _584));
    float _759 = fma(_586, cbSceneParam._m0[7u].z, fma(_585, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _584));
    vec4 _761 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _763 = _761.x;
    float _775 = (((_761.y - _588) + (_761.w * _588)) * cbMtdParam._m0[3u].x) + _588;
    vec4 _776 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _792 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_763 * _763)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _776.z;
    float _800 = (((cbMatDynParam._m0[15u].x - _592) * cbMatDynParam._m0[15u].w) * _792) + _592;
    float _808 = ((_792 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _775)) + _775;
    uint _832 = uint(roundEven(NORMAL.w)) * 13u;
    uint _833 = _832 + 9u;
    uint _834 = _833 + uint(cbMatDynParam._m0[0u].w);
    float _840 = (cbMtdParam._m0[0u].x * _600) * cbInstanceData._m0[_834].x;
    float _841 = (cbMtdParam._m0[0u].y * _601) * cbInstanceData._m0[_834].y;
    float _842 = (cbMtdParam._m0[0u].z * _602) * cbInstanceData._m0[_834].z;
    float _3812 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _843 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _3823 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _844 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _3834 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _845 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    vec4 _846 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _851 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _862 = (((_851.x - _800) + (_851.w * _800)) * cbMtdParam._m0[3u].x) + _800;
    float _875 = (cbMtdParam._m0[3u].x * (((_843 * _735) - _843) + _846.x)) + _843;
    float _876 = (cbMtdParam._m0[3u].x * (((_844 * _735) - _844) + _846.y)) + _844;
    float _877 = (cbMtdParam._m0[3u].x * (((_845 * _735) - _845) + _846.z)) + _845;
    vec4 _878 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _891 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_800 * (_600 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_800 * (_601 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_800 * (_602 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _878.z;
    float _895 = _891 * cbMatDynParam._m0[13u].w;
    float _905 = (_895 * (cbMatDynParam._m0[13u].x - _875)) + _875;
    float _906 = (_895 * (cbMatDynParam._m0[13u].y - _876)) + _876;
    float _907 = (_895 * (cbMatDynParam._m0[13u].z - _877)) + _877;
    float _915 = ((_891 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _862)) + _862;
    float _916 = 1.0 - _915;
    float _917 = _916 * _905;
    float _918 = _916 * _906;
    float _919 = _916 * _907;
    float _923 = (_905 + (-0.039999999105930328369140625)) * _915;
    float _924 = (_906 + (-0.039999999105930328369140625)) * _915;
    float _925 = (_907 + (-0.039999999105930328369140625)) * _915;
    float _926 = _923 + 0.039999999105930328369140625;
    float _927 = _924 + 0.039999999105930328369140625;
    float _928 = _925 + 0.039999999105930328369140625;
    vec4 _937 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _730, cbSceneParam._m0[86u].y * _731));
    float _940 = _937.x * TEXCOORD_4;
    float _941 = _613 * 2.0;
    float _945 = (_941 * _584) - _610;
    float _946 = (_941 * _585) - _611;
    float _947 = (_941 * _586) - _612;
    float _948 = abs(_678);
    float _3845 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _950 = sqrt(_808);
    float _962 = exp2((_950 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_950 * 3.0));
    float _968 = (1.0 - _962) * ((_950 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _969 = _962 * _950;
    float _997 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1001 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1005 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1307;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1032 = fma(_1005, cbModelParam._m0[26u].z, fma(_1001, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _997));
        float _1036 = fma(_1005, cbModelParam._m0[27u].z, fma(_1001, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _997));
        float _1040 = fma(_1005, cbModelParam._m0[28u].z, fma(_1001, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _997));
        float _1065 = _997 + _584;
        float _1066 = _1001 + _585;
        float _1067 = _1005 + _586;
        float _1077 = fma(_1067, cbModelParam._m0[26u].z, fma(_1066, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1065)) - _1032;
        float _1078 = fma(_1067, cbModelParam._m0[27u].z, fma(_1066, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1065)) - _1036;
        float _1079 = fma(_1067, cbModelParam._m0[28u].z, fma(_1066, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1065)) - _1040;
        float _1083 = inversesqrt(dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079)));
        float _1096 = ((_1083 * _1077) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1032 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1097 = ((_1083 * _1078) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1036 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1098 = ((_1083 * _1079) / cbModelParam._m0[34u].z) + ((((((_1040 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        float _1135 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1101.x + (-0.5));
        float _1137 = _1135 * (_1101.y + (-0.5));
        float _1138 = _1135 * (_1101.z + (-0.5));
        float _1145 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1108.x + (-0.5));
        float _1147 = _1145 * (_1108.y + (-0.5));
        float _1148 = _1145 * (_1108.z + (-0.5));
        float _1155 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1115.x + (-0.5));
        float _1157 = _1155 * (_1115.y + (-0.5));
        float _1158 = _1155 * (_1115.z + (-0.5));
        float _1165 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1122.x + (-0.5));
        float _1167 = _1165 * (_1122.y + (-0.5));
        float _1168 = _1165 * (_1122.z + (-0.5));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = _1136 * 0.5;
        float _1173 = _1146 * 0.5;
        float _1174 = _1156 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1189 = (dot(vec3(_584, _585, _586), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _3871 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1199 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _3882 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1201 = _1200 * 2.0;
        float _1205 = (1.0 - _1200) / (_1200 + 1.0);
        float _3893 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1215 = ((((1.0 - _1206) * (_1201 + 2.0)) * exp2(log2(isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1201 + 1.0))) + _1206) * _1169;
        float _1216 = _1137 * 0.5;
        float _1217 = _1147 * 0.5;
        float _1218 = _1157 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1232 = (dot(vec3(_584, _585, _586), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1241 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _3926 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1243 + 1.0))) + _1248) * _1170;
        float _1258 = _1138 * 0.5;
        float _1259 = _1148 * 0.5;
        float _1260 = _1158 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_584, _585, _586), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _3937 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _3948 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _3959 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1285 + 1.0))) + _1290) * _1171;
        _1307 = _1138;
        _1309 = _1137;
        _1310 = _1136;
        _1311 = _1148;
        _1312 = _1147;
        _1313 = _1146;
        _1314 = _1158;
        _1315 = _1157;
        _1316 = _1156;
        _1317 = _1171;
        _1318 = _1170;
        _1319 = _1169;
        _1320 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)));
        _1321 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
        _1322 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
    }
    else
    {
        _1307 = _1308;
        _1309 = _1308;
        _1310 = _1308;
        _1311 = _1308;
        _1312 = _1308;
        _1313 = _1308;
        _1314 = _1308;
        _1315 = _1308;
        _1316 = _1308;
        _1317 = _1308;
        _1318 = _1308;
        _1319 = _1308;
        _1320 = 0.0;
        _1321 = 0.0;
        _1322 = 0.0;
    }
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1348 = fma(_1005, cbModelParam._m0[30u].z, fma(_1001, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _997));
        float _1352 = fma(_1005, cbModelParam._m0[31u].z, fma(_1001, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _997));
        float _1356 = fma(_1005, cbModelParam._m0[32u].z, fma(_1001, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _997));
        float _1379 = _997 + _584;
        float _1380 = _1001 + _585;
        float _1381 = _1005 + _586;
        float _1391 = fma(_1381, cbModelParam._m0[30u].z, fma(_1380, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1379)) - _1348;
        float _1392 = fma(_1381, cbModelParam._m0[31u].z, fma(_1380, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1379)) - _1352;
        float _1393 = fma(_1381, cbModelParam._m0[32u].z, fma(_1380, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1379)) - _1356;
        float _1397 = inversesqrt(dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393)));
        float _1410 = ((_1397 * _1391) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1348 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1411 = ((_1397 * _1392) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1352 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1412 = ((_1397 * _1393) / cbModelParam._m0[35u].z) + ((((((_1356 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1410, _1411, _1412), 0.0);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1410, _1411, _1412), 0.0);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1410, _1411, _1412), 0.0);
        vec4 _1435 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1410, _1411, _1412), 0.0);
        float _1447 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1414.x + (-0.5));
        float _1449 = _1447 * (_1414.y + (-0.5));
        float _1450 = _1447 * (_1414.z + (-0.5));
        float _1457 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1421.x + (-0.5));
        float _1459 = _1457 * (_1421.y + (-0.5));
        float _1460 = _1457 * (_1421.z + (-0.5));
        float _1467 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1428.x + (-0.5));
        float _1469 = _1467 * (_1428.y + (-0.5));
        float _1470 = _1467 * (_1428.z + (-0.5));
        float _1477 = exp2((_1435.w + (-0.5)) * 20.0) * 2.0;
        float _1478 = _1477 * (_1435.x + (-0.5));
        float _1479 = _1477 * (_1435.y + (-0.5));
        float _1480 = _1477 * (_1435.z + (-0.5));
        float _1481 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1482 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1483 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1484 = _1448 * 0.5;
        float _1485 = _1458 * 0.5;
        float _1486 = _1468 * 0.5;
        float _1487 = dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486));
        float _1492 = (_1487 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1487);
        float _1500 = (dot(vec3(_584, _585, _586), vec3(_1492 * _1484, _1492 * _1485, _1492 * _1486)) + 1.0) * 0.5;
        float _4000 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1509 = sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486)) / (_1481 + 9.9999997473787516355514526367188e-06);
        float _4011 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _4022 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1511 + 1.0))) + _1516) * _1481;
        float _1526 = _1449 * 0.5;
        float _1527 = _1459 * 0.5;
        float _1528 = _1469 * 0.5;
        float _1529 = dot(vec3(_1526, _1527, _1528), vec3(_1526, _1527, _1528));
        float _1534 = (_1529 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1529);
        float _1542 = (dot(vec3(_584, _585, _586), vec3(_1534 * _1526, _1534 * _1527, _1534 * _1528)) + 1.0) * 0.5;
        float _4033 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1551 = sqrt(((_1527 * _1527) + (_1526 * _1526)) + (_1528 * _1528)) / (_1482 + 9.9999997473787516355514526367188e-06);
        float _4044 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1553 = _1552 * 2.0;
        float _1557 = (1.0 - _1552) / (_1552 + 1.0);
        float _4055 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1567 = ((((1.0 - _1558) * (_1553 + 2.0)) * exp2(log2(isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1553 + 1.0))) + _1558) * _1482;
        float _1568 = _1450 * 0.5;
        float _1569 = _1460 * 0.5;
        float _1570 = _1470 * 0.5;
        float _1571 = dot(vec3(_1568, _1569, _1570), vec3(_1568, _1569, _1570));
        float _1576 = (_1571 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1571);
        float _1584 = (dot(vec3(_584, _585, _586), vec3(_1576 * _1568, _1576 * _1569, _1576 * _1570)) + 1.0) * 0.5;
        float _4066 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1593 = sqrt(((_1569 * _1569) + (_1568 * _1568)) + (_1570 * _1570)) / (_1483 + 9.9999997473787516355514526367188e-06);
        float _4077 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1595 = _1594 * 2.0;
        float _1599 = (1.0 - _1594) / (_1594 + 1.0);
        float _4088 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1609 = ((((1.0 - _1600) * (_1595 + 2.0)) * exp2(log2(isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1595 + 1.0))) + _1600) * _1483;
        _1617 = _1450;
        _1618 = _1449;
        _1619 = _1448;
        _1620 = _1460;
        _1621 = _1459;
        _1622 = _1458;
        _1623 = _1470;
        _1624 = _1469;
        _1625 = _1468;
        _1626 = _1483;
        _1627 = _1482;
        _1628 = _1481;
        _1629 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
        _1630 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)));
        _1631 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)));
    }
    else
    {
        _1617 = _1308;
        _1618 = _1308;
        _1619 = _1308;
        _1620 = _1308;
        _1621 = _1308;
        _1622 = _1308;
        _1623 = _1308;
        _1624 = _1308;
        _1625 = _1308;
        _1626 = _1308;
        _1627 = _1308;
        _1628 = _1308;
        _1629 = 0.0;
        _1630 = 0.0;
        _1631 = 0.0;
    }
    float _1641 = (cbModelParam._m0[1u].x * (_1629 - _1320)) + _1320;
    float _1642 = (cbModelParam._m0[1u].x * (_1630 - _1321)) + _1321;
    float _1643 = (cbModelParam._m0[1u].x * (_1631 - _1322)) + _1322;
    float _1664 = fma(_1643, cbSceneParam._m0[89u].z, fma(_1642, cbSceneParam._m0[89u].y, _1641 * cbSceneParam._m0[89u].x));
    float _1667 = fma(_1643, cbSceneParam._m0[90u].z, fma(_1642, cbSceneParam._m0[90u].y, _1641 * cbSceneParam._m0[90u].x));
    float _1670 = fma(_1643, cbSceneParam._m0[91u].z, fma(_1642, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1641));
    float _1685 = _945 * 0.5;
    float _1686 = _946 * 0.5;
    float _1687 = _947 * 0.5;
    float _1688 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1619, _1622, _1625, _1628));
    float _1691 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1618, _1621, _1624, _1627));
    float _1694 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1617, _1620, _1623, _1626));
    float _1725;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1701 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1307, _1311, _1314, _1317));
        float _1705 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1309, _1312, _1315, _1318));
        float _1709 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1310, _1313, _1316, _1319));
        float _1716 = dot(vec4(cbModelParam._m0[39u]), vec4(_1685, _1686, _1687, 1.0));
        _1725 = dot(vec3(isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)), isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)), isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1716) ? 0.0 : (isnan(0.0) ? _1716 : max(0.0, _1716))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1725 = 1.0;
    }
    float _1736;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1727 = dot(vec4(cbModelParam._m0[40u]), vec4(_1685, _1686, _1687, 1.0));
        _1736 = dot(vec3(isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)), isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)), isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1727) ? 0.0 : (isnan(0.0) ? _1727 : max(0.0, _1727))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1736 = 1.0;
    }
    float _1740 = (_1736 * cbModelParam._m0[1u].x) + (_1725 * (1.0 - cbModelParam._m0[1u].x));
    float _1750 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _808);
    float _1751 = isnan(_1750) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1750 : min(cbModelParam._m0[25u].z, _1750));
    float _1831;
    float _1833;
    float _1835;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1798 = fma(_1005, cbModelParam._m0[13u].z, fma(_1001, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _997)) + cbModelParam._m0[13u].w;
        float _1802 = fma(_1005, cbModelParam._m0[14u].z, fma(_1001, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _997)) + cbModelParam._m0[14u].w;
        float _1806 = fma(_1005, cbModelParam._m0[15u].z, fma(_1001, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _997)) + cbModelParam._m0[15u].w;
        float _1809 = fma(_947, cbModelParam._m0[13u].z, fma(_946, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _945));
        float _1812 = fma(_947, cbModelParam._m0[14u].z, fma(_946, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _945));
        float _1815 = fma(_947, cbModelParam._m0[15u].z, fma(_946, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _945));
        float _1843;
        if (_1809 > 0.0)
        {
            _1843 = abs((1.0 - _1798) / _1809);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1798 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1843 = frontier_phi_16_14_ladder;
        }
        float _2049;
        if (_1812 > 0.0)
        {
            _2049 = abs((1.0 - _1802) / _1812);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1802 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2049 = frontier_phi_25_21_ladder;
        }
        float _2303;
        if (_1815 > 0.0)
        {
            _2303 = abs((1.0 - _1806) / _1815);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1806 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2303 = frontier_phi_37_32_ladder;
        }
        float _2305 = isnan(_2049) ? _1843 : (isnan(_1843) ? _2049 : min(_1843, _2049));
        float _2306 = isnan(_2303) ? _2305 : (isnan(_2305) ? _2303 : min(_2305, _2303));
        float _2310 = (_2306 * _1809) + _1798;
        float _2311 = (_2306 * _1812) + _1802;
        float _2312 = (_2306 * _1815) + _1806;
        float _2313 = _2306 * 9.9999997473787516355514526367188e-05;
        float _2315 = (-1.0) - _2313;
        float _2317 = _2313 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2312 > _2317) || ((_2312 < _2315) || ((_2311 > _2317) || ((_2311 < _2315) || ((_2310 < _2315) || (_2310 > _2317))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2440 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2312, cbModelParam._m0[9u].z, fma(_2311, cbModelParam._m0[9u].y, _2310 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2312, cbModelParam._m0[10u].z, fma(_2311, cbModelParam._m0[10u].y, _2310 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2312, cbModelParam._m0[11u].z, fma(_2311, cbModelParam._m0[11u].y, _2310 * cbModelParam._m0[11u].x))), _1751);
            frontier_phi_15_37_ladder = _2440.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2440.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2440.x * cbModelParam._m0[1u].y;
        }
        _1831 = frontier_phi_15_37_ladder_2;
        _1833 = frontier_phi_15_37_ladder_1;
        _1835 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1819 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_945, _946, _947), _1751);
        _1831 = _1819.x * cbModelParam._m0[1u].y;
        _1833 = _1819.y * cbModelParam._m0[1u].y;
        _1835 = _1819.z * cbModelParam._m0[1u].y;
    }
    float _1839 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _808);
    float _1840 = isnan(_1839) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1839 : min(cbModelParam._m0[25u].w, _1839));
    float _1933;
    float _1935;
    float _1937;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1897 = fma(_1005, cbModelParam._m0[21u].z, fma(_1001, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _997)) + cbModelParam._m0[21u].w;
        float _1901 = fma(_1005, cbModelParam._m0[22u].z, fma(_1001, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _997)) + cbModelParam._m0[22u].w;
        float _1905 = fma(_1005, cbModelParam._m0[23u].z, fma(_1001, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _997)) + cbModelParam._m0[23u].w;
        float _1908 = fma(_947, cbModelParam._m0[21u].z, fma(_946, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _945));
        float _1911 = fma(_947, cbModelParam._m0[22u].z, fma(_946, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _945));
        float _1914 = fma(_947, cbModelParam._m0[23u].z, fma(_946, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _945));
        float _2054;
        if (_1908 > 0.0)
        {
            _2054 = abs((1.0 - _1897) / _1908);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1897 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2054 = frontier_phi_27_23_ladder;
        }
        float _2330;
        if (_1911 > 0.0)
        {
            _2330 = abs((1.0 - _1901) / _1911);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1901 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2330 = frontier_phi_39_34_ladder;
        }
        float _2543;
        if (_1914 > 0.0)
        {
            _2543 = abs((1.0 - _1905) / _1914);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1905 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2543 = frontier_phi_48_45_ladder;
        }
        float _2545 = isnan(_2330) ? _2054 : (isnan(_2054) ? _2330 : min(_2054, _2330));
        float _2546 = isnan(_2543) ? _2545 : (isnan(_2545) ? _2543 : min(_2545, _2543));
        float _2550 = (_2546 * _1908) + _1897;
        float _2551 = (_2546 * _1911) + _1901;
        float _2552 = (_2546 * _1914) + _1905;
        float _2553 = _2546 * 9.9999997473787516355514526367188e-05;
        float _2554 = (-1.0) - _2553;
        float _2556 = _2553 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2552 > _2556) || ((_2552 < _2554) || ((_2551 > _2556) || ((_2551 < _2554) || ((_2550 < _2554) || (_2550 > _2556))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2776 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2552, cbModelParam._m0[17u].z, fma(_2551, cbModelParam._m0[17u].y, _2550 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2552, cbModelParam._m0[18u].z, fma(_2551, cbModelParam._m0[18u].y, _2550 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2552, cbModelParam._m0[19u].z, fma(_2551, cbModelParam._m0[19u].y, _2550 * cbModelParam._m0[19u].x))), _1840);
            frontier_phi_24_48_ladder = _2776.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2776.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2776.x * cbModelParam._m0[1u].z;
        }
        _1933 = frontier_phi_24_48_ladder_2;
        _1935 = frontier_phi_24_48_ladder_1;
        _1937 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1917 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_945, _946, _947), _1840);
        _1933 = _1917.x * cbModelParam._m0[1u].z;
        _1935 = _1917.y * cbModelParam._m0[1u].z;
        _1937 = _1917.z * cbModelParam._m0[1u].z;
    }
    float _1950 = (((_968 * _926) + _969) * _940) * ((cbModelParam._m0[1u].w * (_1933 - _1831)) + _1831);
    float _1952 = (((_968 * _927) + _969) * _940) * ((cbModelParam._m0[1u].w * (_1935 - _1833)) + _1833);
    float _1954 = (((_968 * _928) + _969) * _940) * ((cbModelParam._m0[1u].w * (_1937 - _1835)) + _1835);
    float _1957 = fma(_1954, cbSceneParam._m0[89u].z, fma(_1952, cbSceneParam._m0[89u].y, _1950 * cbSceneParam._m0[89u].x));
    float _1960 = fma(_1954, cbSceneParam._m0[90u].z, fma(_1952, cbSceneParam._m0[90u].y, _1950 * cbSceneParam._m0[90u].x));
    float _1963 = fma(_1954, cbSceneParam._m0[91u].z, fma(_1952, cbSceneParam._m0[91u].y, _1950 * cbSceneParam._m0[91u].x));
    uvec4 _1973 = floatBitsToUint(cbInstanceData._m0[_832 + 5u]);
    uint _1975 = _1973.x * 14u;
    uint _1976 = _1975 + 13u;
    float _1983 = _940 + (-1.0);
    float _1988 = (cbLight._m0[_1976].x * _1983) + 1.0;
    float _1989 = (cbLight._m0[_1976].y * _1983) + 1.0;
    float _1990 = (cbLight._m0[_1976].z * _1983) + 1.0;
    float _1991 = (cbLight._m0[_1976].w * _1983) + 1.0;
    uint _1992 = _1975 + 5u;
    float _1998 = isnan(1.0) ? _1989 : (isnan(_1989) ? 1.0 : min(_1989, 1.0));
    uint _2002 = _1975 + 4u;
    float _2008 = isnan(1.0) ? _1988 : (isnan(_1988) ? 1.0 : min(_1988, 1.0));
    uint _2012 = _1975 | 1u;
    float _2023 = dot(vec3(cbLight._m0[_1975].xyz), vec3(_584, _585, _586));
    float _2026 = dot(vec3(cbLight._m0[_2012].xyz), vec3(_584, _585, _586));
    float _4224 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _4235 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2031 = (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * 0.3183098733425140380859375;
    float _2033 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * 0.3183098733425140380859375;
    float _2040 = ((cbLight._m0[_1992].x * _1998) * _2033) + ((cbLight._m0[_2002].x * _2008) * _2031);
    float _2041 = ((_1998 * cbLight._m0[_1992].y) * _2033) + ((_2008 * cbLight._m0[_2002].y) * _2031);
    float _2042 = ((_1998 * cbLight._m0[_1992].z) * _2033) + ((_2008 * cbLight._m0[_2002].z) * _2031);
    uvec4 _2046 = floatBitsToUint(cbLight._m0[_1975 + 12u]);
    bool _2048 = _2046.x == 0u;
    float _2059;
    float _2061;
    float _2063;
    if (_2048)
    {
        _2059 = _2040;
        _2061 = _2041;
        _2063 = _2042;
    }
    else
    {
        uint _2067 = _1975 + 6u;
        float _2083 = (dot(vec3(cbLight._m0[_1975 + 2u].xyz), vec3(_584, _585, _586)) * 0.5) + 0.5;
        float _2084 = _2083 * _2083;
        float _4246 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2085 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _2086 = isnan(1.0) ? _1990 : (isnan(_1990) ? 1.0 : min(_1990, 1.0));
        _2059 = (((cbLight._m0[_2067].x * 0.3183098733425140380859375) * _2085) * _2086) + _2040;
        _2061 = (((cbLight._m0[_2067].y * 0.3183098733425140380859375) * _2085) * _2086) + _2041;
        _2063 = (((cbLight._m0[_2067].z * 0.3183098733425140380859375) * _2085) * _2086) + _2042;
    }
    bool _2066 = _2046.y == 0u;
    float _2104;
    float _2106;
    float _2108;
    if (_2066)
    {
        _2104 = _2059;
        _2106 = _2061;
        _2108 = _2063;
    }
    else
    {
        uint _2274 = _1975 + 7u;
        float _2290 = (dot(vec3(cbLight._m0[_1975 + 3u].xyz), vec3(_584, _585, _586)) * 0.5) + 0.5;
        float _2291 = _2290 * _2290;
        float _4262 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2292 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _2293 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
        _2104 = (((cbLight._m0[_2274].x * 0.3183098733425140380859375) * _2292) * _2293) + _2059;
        _2106 = (((cbLight._m0[_2274].y * 0.3183098733425140380859375) * _2292) * _2293) + _2061;
        _2108 = (((cbLight._m0[_2274].z * 0.3183098733425140380859375) * _2292) * _2293) + _2063;
    }
    uint _2111 = _1975 + 8u;
    float _2124 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1975].w)) * _808) * 0.949999988079071044921875);
    float _2125 = _2124 * _2124;
    float _2126 = cbLight._m0[_1975].x + _610;
    float _2127 = cbLight._m0[_1975].y + _611;
    float _2128 = cbLight._m0[_1975].z + _612;
    float _2132 = inversesqrt(dot(vec3(_2126, _2127, _2128), vec3(_2126, _2127, _2128)));
    float _2133 = _2132 * _2126;
    float _2134 = _2132 * _2127;
    float _2135 = _2132 * _2128;
    float _2136 = dot(vec3(_584, _585, _586), vec3(cbLight._m0[_1975].xyz));
    float _4278 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2139 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _4289 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _2140 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _2141 = dot(vec3(_584, _585, _586), vec3(_2133, _2134, _2135));
    float _4300 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2144 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
    float _2145 = dot(vec3(cbLight._m0[_1975].xyz), vec3(_2133, _2134, _2135));
    float _4311 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2149 = _2125 * _2125;
    float _2153 = ((_2144 * _2144) * (_2149 + (-1.0))) + 1.0;
    float _2161 = exp2(log2(1.0 - (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) * 5.0);
    float _2162 = 0.959999978542327880859375 - _923;
    float _2164 = 0.959999978542327880859375 - _924;
    float _2165 = 0.959999978542327880859375 - _925;
    float _2172 = 1.0 - _2125;
    float _2183 = (0.5 / (((_2140 * ((_2139 * _2172) + _2125)) + 9.9999999392252902907785028219223e-09) + (((_2140 * _2172) + _2125) * _2139))) * _2139;
    float _4322 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2185 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_2149 / ((_2153 * _2153) * 3.141590118408203125));
    uint _2196 = _1975 + 9u;
    float _2207 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2012].w)) * _808) * 0.949999988079071044921875);
    float _2208 = _2207 * _2207;
    float _2209 = cbLight._m0[_2012].x + _610;
    float _2210 = cbLight._m0[_2012].y + _611;
    float _2211 = cbLight._m0[_2012].z + _612;
    float _2215 = inversesqrt(dot(vec3(_2209, _2210, _2211), vec3(_2209, _2210, _2211)));
    float _2216 = _2215 * _2209;
    float _2217 = _2215 * _2210;
    float _2218 = _2215 * _2211;
    float _2219 = dot(vec3(_584, _585, _586), vec3(cbLight._m0[_2012].xyz));
    float _4333 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2222 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _2223 = dot(vec3(_584, _585, _586), vec3(_2216, _2217, _2218));
    float _4344 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2226 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    float _2227 = dot(vec3(cbLight._m0[_2012].xyz), vec3(_2216, _2217, _2218));
    float _4355 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2231 = _2208 * _2208;
    float _2235 = ((_2226 * _2226) * (_2231 + (-1.0))) + 1.0;
    float _2242 = exp2(log2(1.0 - (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0)))) * 5.0);
    float _2249 = 1.0 - _2208;
    float _2259 = (0.5 / (((_2140 * ((_2222 * _2249) + _2208)) + 9.9999999392252902907785028219223e-09) + (((_2140 * _2249) + _2208) * _2222))) * _2222;
    float _4366 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2261 = (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_2231 / ((_2235 * _2235) * 3.141590118408203125));
    float _2271 = (((((_2242 * _2162) + _926) * cbLight._m0[_2196].x) * _2261) * _1998) + (((((_2161 * _2162) + _926) * cbLight._m0[_2111].x) * _2185) * _2008);
    float _2272 = (((((_2242 * _2164) + _927) * cbLight._m0[_2196].y) * _2261) * _1998) + (((((_2161 * _2164) + _927) * cbLight._m0[_2111].y) * _2185) * _2008);
    float _2273 = (((((_2242 * _2165) + _928) * cbLight._m0[_2196].z) * _2261) * _1998) + (((((_2161 * _2165) + _928) * cbLight._m0[_2111].z) * _2185) * _2008);
    float _2335;
    float _2337;
    float _2339;
    if (_2048)
    {
        _2335 = _2271;
        _2337 = _2272;
        _2339 = _2273;
    }
    else
    {
        uint _2341 = _1975 + 2u;
        uint _2345 = _1975 + 10u;
        float _2359 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2341].w)) * _808) * 0.949999988079071044921875);
        float _2360 = _2359 * _2359;
        float _2361 = cbLight._m0[_2341].x + _610;
        float _2362 = cbLight._m0[_2341].y + _611;
        float _2363 = cbLight._m0[_2341].z + _612;
        float _2367 = inversesqrt(dot(vec3(_2361, _2362, _2363), vec3(_2361, _2362, _2363)));
        float _2368 = _2367 * _2361;
        float _2369 = _2367 * _2362;
        float _2370 = _2367 * _2363;
        float _2371 = dot(vec3(_584, _585, _586), vec3(cbLight._m0[_2341].xyz));
        float _4377 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2374 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2375 = dot(vec3(_584, _585, _586), vec3(_2368, _2369, _2370));
        float _4388 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2378 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2379 = dot(vec3(cbLight._m0[_2341].xyz), vec3(_2368, _2369, _2370));
        float _4399 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2383 = _2360 * _2360;
        float _2387 = ((_2378 * _2378) * (_2383 + (-1.0))) + 1.0;
        float _2394 = exp2(log2(1.0 - (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)))) * 5.0);
        float _2401 = 1.0 - _2360;
        float _2411 = (0.5 / (((_2140 * ((_2374 * _2401) + _2360)) + 9.9999999392252902907785028219223e-09) + (((_2140 * _2401) + _2360) * _2374))) * _2374;
        float _4410 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2413 = (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_2383 / ((_2387 * _2387) * 3.141590118408203125));
        float _2414 = isnan(1.0) ? _1990 : (isnan(_1990) ? 1.0 : min(_1990, 1.0));
        _2335 = (((((_2394 * _2162) + _926) * cbLight._m0[_2345].x) * _2413) * _2414) + _2271;
        _2337 = (((((_2394 * _2164) + _927) * cbLight._m0[_2345].y) * _2413) * _2414) + _2272;
        _2339 = (((((_2394 * _2165) + _928) * cbLight._m0[_2345].z) * _2413) * _2414) + _2273;
    }
    float _2449;
    float _2451;
    float _2453;
    if (_2066)
    {
        _2449 = _2335;
        _2451 = _2337;
        _2453 = _2339;
    }
    else
    {
        uint _2460 = _1975 + 3u;
        uint _2464 = _1975 + 11u;
        float _2478 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2460].w)) * _808) * 0.949999988079071044921875);
        float _2479 = _2478 * _2478;
        float _2480 = cbLight._m0[_2460].x + _610;
        float _2481 = cbLight._m0[_2460].y + _611;
        float _2482 = cbLight._m0[_2460].z + _612;
        float _2486 = inversesqrt(dot(vec3(_2480, _2481, _2482), vec3(_2480, _2481, _2482)));
        float _2487 = _2486 * _2480;
        float _2488 = _2486 * _2481;
        float _2489 = _2486 * _2482;
        float _2490 = dot(vec3(_584, _585, _586), vec3(cbLight._m0[_2460].xyz));
        float _4426 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2493 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _2494 = dot(vec3(_584, _585, _586), vec3(_2487, _2488, _2489));
        float _4437 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2497 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _2498 = dot(vec3(cbLight._m0[_2460].xyz), vec3(_2487, _2488, _2489));
        float _4448 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2502 = _2479 * _2479;
        float _2506 = ((_2497 * _2497) * (_2502 + (-1.0))) + 1.0;
        float _2513 = exp2(log2(1.0 - (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) * 5.0);
        float _2520 = 1.0 - _2479;
        float _2530 = (0.5 / (((_2140 * ((_2493 * _2520) + _2479)) + 9.9999999392252902907785028219223e-09) + (((_2140 * _2520) + _2479) * _2493))) * _2493;
        float _4459 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2532 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2502 / ((_2506 * _2506) * 3.141590118408203125));
        float _2533 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
        _2449 = (((((_2513 * _2162) + _926) * cbLight._m0[_2464].x) * _2532) * _2533) + _2335;
        _2451 = (((((_2513 * _2164) + _927) * cbLight._m0[_2464].y) * _2532) * _2533) + _2337;
        _2453 = (((((_2513 * _2165) + _928) * cbLight._m0[_2464].z) * _2532) * _2533) + _2339;
    }
    float _2667;
    float _2669;
    float _2671;
    float _2673;
    float _2675;
    float _2677;
    if (_1973.y == 0u)
    {
        float _2608 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2609 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2608;
        float _2610 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2608;
        float _2611 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2608;
        uvec4 _2623 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2624 = _2623.x;
        uint _2635 = uint((float(_2623.y) * floor(float(uint(cbSceneParam._m0[85u].y * _731) / _2624))) + floor(float(uint(cbSceneParam._m0[85u].x * _730) / _2624)));
        float _2645 = (log2(_2611 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2646 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        uint _2649 = uint(isnan(14.0) ? _2646 : (isnan(_2646) ? 14.0 : min(_2646, 14.0)));
        uvec4 _2654 = texelFetch(g_lightClusterGridBuffer, int(((_2649 << 2u) + (_2635 << 6u)) >> 2u));
        uint _2655 = _2654.x;
        uint _2656 = _2623.z;
        float _2781;
        float _2783;
        float _2785;
        float _2787;
        float _2789;
        float _2791;
        if (((((1u << ((_2656 >> 4u) & 15u)) + 4294967295u) & _2655) == 0u) || ((_2656 & 240u) == 0u))
        {
            _2781 = 0.0;
            _2783 = 0.0;
            _2785 = 0.0;
            _2787 = 0.0;
            _2789 = 0.0;
            _2791 = 0.0;
        }
        else
        {
            float _2782;
            float _2784;
            float _2786;
            float _2788;
            float _2790;
            float _2792;
            float _2934 = 0.0;
            float _2935 = 0.0;
            float _2936 = 0.0;
            float _2937 = 0.0;
            float _2938 = 0.0;
            float _2939 = 0.0;
            uint _2940 = 0u;
            uint _2949;
            bool _2950;
            for (;;)
            {
                _2949 = texelFetch(g_lightClassification, int((((_2649 << 5u) + (_2635 << 9u)) + (_2940 << 2u)) >> 2u)).x;
                _2950 = _2949 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2950)
                {
                    frontier_phi_63_pred = _2939;
                    frontier_phi_63_pred_1 = _2938;
                    frontier_phi_63_pred_2 = _2937;
                    frontier_phi_63_pred_3 = _2936;
                    frontier_phi_63_pred_4 = _2935;
                    frontier_phi_63_pred_5 = _2934;
                }
                else
                {
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    uint _3064;
                    _3058 = _2934;
                    _3059 = _2935;
                    _3060 = _2936;
                    _3061 = _2937;
                    _3062 = _2938;
                    _3063 = _2939;
                    _3064 = _2949;
                    float _2990;
                    float _2991;
                    float _2992;
                    float _2993;
                    float _2994;
                    float _2995;
                    for (;;)
                    {
                        uint _3068 = uint(findLSB(_3064)) + (_2940 << 5u);
                        uint _3065 = (_3064 + 4294967295u) & _3064;
                        uint _3070 = _3068 * 48u;
                        vec4 _3084 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3070)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 3u)).x));
                        uint _3090 = (_3068 * 48u) + 4u;
                        vec4 _3103 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3090)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 3u)).x));
                        uint _3109 = (_3068 * 48u) + 8u;
                        vec3 _3120 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3109)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 2u)).x));
                        float _3124 = _3084.x - _2609;
                        float _3125 = _3084.y - _2610;
                        float _3126 = _3084.z - _2611;
                        float _3127 = dot(vec3(_3124, _3125, _3126), vec3(_3124, _3125, _3126));
                        float _3130 = inversesqrt(_3127);
                        float _3131 = _3130 * _3124;
                        float _3132 = _3130 * _3125;
                        float _3133 = _3130 * _3126;
                        float _3134 = dot(vec3(_753, _756, _759), vec3(_3131, _3132, _3133));
                        float _3139 = 1.0 - (_3127 * _3084.w);
                        float _4485 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3140 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                        float _3141 = sqrt(_3127) * _3103.w;
                        float _3144 = 1.39999997615814208984375 / (_3141 + 1.39999997615814208984375);
                        float _3145 = _3144 * _3144;
                        float _3148 = ((1.0 - _3145) * _3134) + _3145;
                        float _3151 = _3141 * _3141;
                        float _3154 = ((isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0))) * _3140) / ((_3151 * 0.699999988079071044921875) + 1.0);
                        float _3158 = (-0.0) - _2609;
                        float _3159 = (-0.0) - _2610;
                        float _3160 = (-0.0) - _2611;
                        float _3164 = inversesqrt(dot(vec3(_3158, _3159, _3160), vec3(_3158, _3159, _3160)));
                        float _3165 = _3164 * _3158;
                        float _3166 = _3164 * _3159;
                        float _3167 = _3164 * _3160;
                        float _3175 = exp2(log2(1.0 / ((_3151 * 3.5) + 5.0)) * 0.25);
                        float _3176 = 1.0 - _950;
                        float _3183 = sqrt(1.0 - ((1.0 - (_3176 * _3176)) * (1.0 - (_3175 * _3175))));
                        float _3184 = _3183 * _3183;
                        float _3185 = _3184 * _3184;
                        float _3186 = _3165 + _3131;
                        float _3187 = _3166 + _3132;
                        float _3188 = _3167 + _3133;
                        float _3192 = inversesqrt(dot(vec3(_3186, _3187, _3188), vec3(_3186, _3187, _3188)));
                        float _3196 = dot(vec3(_753, _756, _759), vec3(_3165, _3166, _3167));
                        float _4501 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                        float _3199 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                        float _3200 = dot(vec3(_753, _756, _759), vec3(_3192 * _3186, _3192 * _3187, _3192 * _3188));
                        float _4512 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                        float _3203 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                        float _3207 = ((_3203 * _3203) * (_3185 + (-1.0))) + 1.0;
                        float _3208 = _3144 * _3184;
                        float _3209 = _3208 * _3208;
                        float _3212 = ((1.0 - _3209) * _3134) + _3209;
                        float _4523 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                        float _3213 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                        float _3214 = 1.0 - _3184;
                        float _3224 = (0.5 / (((_3213 * ((_3199 * _3214) + _3184)) + 9.9999999392252902907785028219223e-09) + (((_3213 * _3214) + _3184) * _3199))) * _3213;
                        float _4534 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                        float _3235 = (((_3185 * 3.1415927410125732421875) * (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0)))) / ((_3207 * _3207) * ((_3151 * 2.1991131305694580078125) + 3.141590118408203125))) * _3140;
                        _2993 = (_3154 * _3103.x) + _3061;
                        _2994 = (_3154 * _3103.y) + _3062;
                        _2995 = (_3154 * _3103.z) + _3063;
                        _2990 = (_3235 * _3120.x) + _3058;
                        _2991 = (_3235 * _3120.y) + _3059;
                        _2992 = (_3235 * _3120.z) + _3060;
                        if (_3065 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3058 = _2990;
                            _3059 = _2991;
                            _3060 = _2992;
                            _3061 = _2993;
                            _3062 = _2994;
                            _3063 = _2995;
                            _3064 = _3065;
                        }
                    }
                    frontier_phi_63_pred = _2995;
                    frontier_phi_63_pred_1 = _2994;
                    frontier_phi_63_pred_2 = _2993;
                    frontier_phi_63_pred_3 = _2992;
                    frontier_phi_63_pred_4 = _2991;
                    frontier_phi_63_pred_5 = _2990;
                }
                _2792 = frontier_phi_63_pred;
                _2790 = frontier_phi_63_pred_1;
                _2788 = frontier_phi_63_pred_2;
                _2786 = frontier_phi_63_pred_3;
                _2784 = frontier_phi_63_pred_4;
                _2782 = frontier_phi_63_pred_5;
                uint _2941 = _2940 + 1u;
                if (_2941 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2934 = _2782;
                    _2935 = _2784;
                    _2936 = _2786;
                    _2937 = _2788;
                    _2938 = _2790;
                    _2939 = _2792;
                    _2940 = _2941;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2781 = _2782;
            _2783 = _2784;
            _2785 = _2786;
            _2787 = _2788;
            _2789 = _2790;
            _2791 = _2792;
        }
        uvec4 _2795 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2796 = _2795.z;
        uint _2798 = (_2796 >> 8u) & 15u;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        float _2912;
        if (((4294967295u << _2798) & _2655) == 0u)
        {
            _2902 = _2781;
            _2904 = _2783;
            _2906 = _2785;
            _2908 = _2787;
            _2910 = _2789;
            _2912 = _2791;
        }
        else
        {
            float _2927 = inversesqrt(dot(vec3(_2609, _2610, _2611), vec3(_2609, _2610, _2611)));
            float _2928 = _2927 * _2609;
            float _2929 = _2927 * _2610;
            float _2930 = _2927 * _2611;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2798 < ((_2796 >> 12u) & 15u))
            {
                float _2903;
                float _2905;
                float _2907;
                float _2909;
                float _2911;
                float _2913;
                float _3041 = _2781;
                float _3042 = _2783;
                float _3043 = _2785;
                float _3044 = _2787;
                float _3045 = _2789;
                float _3046 = _2791;
                uint _3047 = _2798;
                uint _3056;
                bool _3057;
                for (;;)
                {
                    _3056 = texelFetch(g_lightClassification, int((((_2649 << 5u) + (_2635 << 9u)) + (_3047 << 2u)) >> 2u)).x;
                    _3057 = _3056 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3057)
                    {
                        frontier_phi_69_pred = _3046;
                        frontier_phi_69_pred_1 = _3045;
                        frontier_phi_69_pred_2 = _3044;
                        frontier_phi_69_pred_3 = _3043;
                        frontier_phi_69_pred_4 = _3042;
                        frontier_phi_69_pred_5 = _3041;
                    }
                    else
                    {
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3253 = _3041;
                        float _3254 = _3042;
                        float _3255 = _3043;
                        float _3256 = _3044;
                        float _3257 = _3045;
                        float _3258 = _3046;
                        uint _3259 = _3056;
                        uint _3260;
                        vec4 _3285;
                        float _3286;
                        vec4 _3301;
                        vec3 _3313;
                        vec4 _3328;
                        vec4 _3344;
                        float _3391;
                        bool _3392;
                        for (;;)
                        {
                            uint _3270 = ((_3047 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3259));
                            _3260 = (_3259 + 4294967295u) & _3259;
                            uint _3272 = _3270 * 40u;
                            _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            _3286 = _3285.w;
                            uint _3288 = (_3270 * 40u) + 4u;
                            _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            uint _3303 = (_3270 * 40u) + 8u;
                            _3313 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x));
                            uint _3315 = (_3270 * 40u) + 16u;
                            _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            uint _3331 = (_3270 * 40u) + 20u;
                            _3344 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 3u)).x));
                            uint _3347 = (_3270 * 40u) + 24u;
                            vec4 _3360 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 3u)).x));
                            uint _3366 = (_3270 * 40u) + 28u;
                            vec4 _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            _3391 = fma(_2611, _3379.z, fma(_2610, _3379.y, _3379.x * _2609)) + _3379.w;
                            _3392 = !((fma(_2611, _3360.z, fma(_2610, _3360.y, _3360.x * _2609)) + _3360.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3392)
                            {
                                float _3419 = _3285.x - _2609;
                                float _3420 = _3285.y - _2610;
                                float _3421 = _3285.z - _2611;
                                float _3422 = dot(vec3(_3419, _3420, _3421), vec3(_3419, _3420, _3421));
                                float _3425 = inversesqrt(_3422);
                                float _3426 = _3425 * _3419;
                                float _3427 = _3425 * _3420;
                                float _3428 = _3425 * _3421;
                                float _3432 = 1.0 - (_3422 / (_3286 * _3286));
                                float _4545 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3433 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                                float _3437 = sqrt(_3422) * _3301.w;
                                float _3439 = 1.39999997615814208984375 / (_3437 + 1.39999997615814208984375);
                                float _3440 = _3439 * _3439;
                                float _3443 = ((1.0 - _3440) * dot(vec3(_3426, _3427, _3428), vec3(_753, _756, _759))) + _3440;
                                float _3446 = _3437 * _3437;
                                float _3450 = (fma(_2611, _3328.z, fma(_2610, _3328.y, _3328.x * _2609)) + _3328.w) / _3391;
                                float _3451 = (fma(_2611, _3344.z, fma(_2610, _3344.y, _3344.x * _2609)) + _3344.w) / _3391;
                                float _3455 = 1.0 - dot(vec2(_3450, _3451), vec2(_3450, _3451));
                                float _4561 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                                float _3456 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                                float _3457 = _3456 * (((isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0))) * _3433) / ((_3446 * 0.699999988079071044921875) + 1.0));
                                float _3469 = exp2(log2(1.0 / ((_3446 * 3.5) + 5.0)) * 0.25);
                                float _3470 = 1.0 - _950;
                                float _3477 = sqrt(1.0 - ((1.0 - (_3470 * _3470)) * (1.0 - (_3469 * _3469))));
                                float _3478 = _3477 * _3477;
                                float _3479 = _3478 * _3478;
                                float _3480 = _3426 - _2928;
                                float _3481 = _3427 - _2929;
                                float _3482 = _3428 - _2930;
                                float _3486 = inversesqrt(dot(vec3(_3480, _3481, _3482), vec3(_3480, _3481, _3482)));
                                float _3490 = dot(vec3(_753, _756, _759), vec3((-0.0) - _2928, (-0.0) - _2929, (-0.0) - _2930));
                                float _4572 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                                float _3493 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                                float _3494 = dot(vec3(_753, _756, _759), vec3(_3486 * _3480, _3486 * _3481, _3486 * _3482));
                                float _4583 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                                float _3497 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                                float _3501 = ((_3497 * _3497) * (_3479 + (-1.0))) + 1.0;
                                float _3502 = _3439 * _3478;
                                float _3503 = _3502 * _3502;
                                float _3509 = ((1.0 - _3503) * dot(vec3(_753, _756, _759), vec3(_3426, _3427, _3428))) + _3503;
                                float _4594 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                                float _3510 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                                float _3511 = 1.0 - _3478;
                                float _3521 = (0.5 / (((_3510 * ((_3493 * _3511) + _3478)) + 9.9999999392252902907785028219223e-09) + (((_3510 * _3511) + _3478) * _3493))) * _3510;
                                float _4605 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3531 = (_3456 * _3433) * (((_3479 * 3.1415927410125732421875) * (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0)))) / ((_3501 * _3501) * ((_3446 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3457 * _3301.z;
                                frontier_phi_75_pred_1 = _3457 * _3301.y;
                                frontier_phi_75_pred_2 = _3457 * _3301.x;
                                frontier_phi_75_pred_3 = _3531 * _3313.z;
                                frontier_phi_75_pred_4 = _3531 * _3313.y;
                                frontier_phi_75_pred_5 = _3531 * _3313.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3540 = frontier_phi_75_pred;
                            _3539 = frontier_phi_75_pred_1;
                            _3538 = frontier_phi_75_pred_2;
                            _3537 = frontier_phi_75_pred_3;
                            _3536 = frontier_phi_75_pred_4;
                            _3535 = frontier_phi_75_pred_5;
                            _3243 = _3538 + _3256;
                            _3244 = _3539 + _3257;
                            _3245 = _3540 + _3258;
                            _3240 = _3535 + _3253;
                            _3241 = _3536 + _3254;
                            _3242 = _3537 + _3255;
                            if (_3260 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3242;
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3245;
                                _3259 = _3260;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3245;
                        frontier_phi_69_pred_1 = _3244;
                        frontier_phi_69_pred_2 = _3243;
                        frontier_phi_69_pred_3 = _3242;
                        frontier_phi_69_pred_4 = _3241;
                        frontier_phi_69_pred_5 = _3240;
                    }
                    _2913 = frontier_phi_69_pred;
                    _2911 = frontier_phi_69_pred_1;
                    _2909 = frontier_phi_69_pred_2;
                    _2907 = frontier_phi_69_pred_3;
                    _2905 = frontier_phi_69_pred_4;
                    _2903 = frontier_phi_69_pred_5;
                    uint _3048 = _3047 + 1u;
                    if (_3048 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3041 = _2903;
                        _3042 = _2905;
                        _3043 = _2907;
                        _3044 = _2909;
                        _3045 = _2911;
                        _3046 = _2913;
                        _3047 = _3048;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2913;
                frontier_phi_57_58_ladder_1 = _2911;
                frontier_phi_57_58_ladder_2 = _2909;
                frontier_phi_57_58_ladder_3 = _2907;
                frontier_phi_57_58_ladder_4 = _2905;
                frontier_phi_57_58_ladder_5 = _2903;
            }
            else
            {
                frontier_phi_57_58_ladder = _2791;
                frontier_phi_57_58_ladder_1 = _2789;
                frontier_phi_57_58_ladder_2 = _2787;
                frontier_phi_57_58_ladder_3 = _2785;
                frontier_phi_57_58_ladder_4 = _2783;
                frontier_phi_57_58_ladder_5 = _2781;
            }
            _2902 = frontier_phi_57_58_ladder_5;
            _2904 = frontier_phi_57_58_ladder_4;
            _2906 = frontier_phi_57_58_ladder_3;
            _2908 = frontier_phi_57_58_ladder_2;
            _2910 = frontier_phi_57_58_ladder_1;
            _2912 = frontier_phi_57_58_ladder;
        }
        float _2917 = isnan(1.0) ? _940 : (isnan(_940) ? 1.0 : min(_940, 1.0));
        _2667 = (_2917 * _2908) + _2104;
        _2669 = (_2917 * _2910) + _2106;
        _2671 = (_2917 * _2912) + _2108;
        _2673 = ((_2902 * _926) * _2917) + _2449;
        _2675 = ((_2904 * _927) * _2917) + _2451;
        _2677 = ((_2906 * _928) * _2917) + _2453;
    }
    else
    {
        _2667 = _2104;
        _2669 = _2106;
        _2671 = _2108;
        _2673 = _2449;
        _2675 = _2451;
        _2677 = _2453;
    }
    uint _2683 = _833 + uint(cbMatDynParam._m0[0u].w);
    float _2689 = cbInstanceData._m0[_2683].x * ((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _626) + cbMatDynParam._m0[7u].x) + (((_667 - (_667 * _592)) + (cbMatDynParam._m0[11u].x * _698)) * cbMatDynParam._m0[9u].x));
    float _2690 = cbInstanceData._m0[_2683].y * ((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _626) + cbMatDynParam._m0[7u].y) + (((_669 - (_669 * _592)) + (cbMatDynParam._m0[11u].y * _698)) * cbMatDynParam._m0[9u].y));
    float _2691 = cbInstanceData._m0[_2683].z * ((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _626) + cbMatDynParam._m0[7u].z) + (((_671 - (_671 * _592)) + (cbMatDynParam._m0[11u].z * _698)) * cbMatDynParam._m0[9u].z));
    float _4621 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _4632 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _4643 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _4654 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _2709 = (((isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2667 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _940))) + ((_2673 + ((isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0))) * _1740)) * cbPerFrame._m0[3u].x)) + _2689;
    float _2711 = (_2690 + ((_2675 + ((isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0))) * _1740)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2669 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _940)));
    float _2713 = (_2691 + ((_2677 + ((isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0))) * _1740)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2671 + ((isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))) * _940)));
    float _2721 = cbMatDynParam._m0[12u].y - (cbMatDynParam._m0[12u].y * ((((isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) - _653) * _626) + _653));
    float _2726 = cbInstanceData._m0[_832 + 6u].w * (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0)));
    float _2731 = _730 / cbSceneParam._m0[86u].x;
    float _2732 = _731 / cbSceneParam._m0[86u].y;
    vec4 _2746 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2731, _2732, (log2((isnan(cbSceneParam._m0[77u].w) ? _724 : (isnan(_724) ? cbSceneParam._m0[77u].w : min(_724, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2748 = _2746.x;
    float _2749 = _2746.y;
    float _2750 = _2746.z;
    float _2751 = _2746.w;
    float _2843;
    float _2845;
    float _2847;
    float _2849;
    if (_724 > cbSceneParam._m0[78u].w)
    {
        float _2806 = isnan(_724) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _724 : min(cbSceneParam._m0[80u].w, _724));
        float _2807 = _2806 / _724;
        float _2818 = _2807 * _287;
        float _2819 = _288 * _2807;
        float _2820 = (-0.0) - _2819;
        float _2821 = _2807 * _289;
        float _2823 = (cbSceneParam._m0[77u].w * _2820) / _2806;
        float _2824 = _2823 + cbSceneParam._m0[79u].w;
        float _2825 = cbSceneParam._m0[79u].w - _2819;
        float _2831 = sqrt(((_2818 * _2818) + (_2819 * _2819)) + (_2821 * _2821));
        float _2834 = (1.0 - (cbSceneParam._m0[77u].w / _2806)) * _2831;
        float _2839 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2841 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3003;
        if (abs((_2820 - _2823) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3003 = ((((_2824 > 0.0) ? exp2(_2839 * _2824) : (2.0 - exp2(_2841 * _2824))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2834;
        }
        else
        {
            float _2963 = 1.0 / cbSceneParam._m0[80u].x;
            float _2964 = isnan(_2825) ? _2824 : (isnan(_2824) ? _2825 : max(_2824, _2825));
            float _2965 = isnan(_2825) ? _2824 : (isnan(_2824) ? _2825 : min(_2824, _2825));
            float _2974 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : min(_2964, 0.0));
            float _2975 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : min(_2965, 0.0));
            _3003 = ((abs(_2831 / _2820) * cbSceneParam._m0[80u].y) * ((((_2974 - _2975) * 2.0) - ((exp2(_2839 * (isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0)))) - exp2(_2839 * (isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0))))) * _2963)) - ((exp2(_2841 * _2974) - exp2(_2841 * _2975)) * _2963))) + (_2834 * cbSceneParam._m0[80u].z);
        }
        vec4 _3005 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2731, _2732, 1.0), 0.0);
        float _3014 = exp2((_3003 * (-1.44269502162933349609375)) * (1.0 - _3005.w));
        float _3015 = log2(_3014);
        float _3031 = log2(_2751);
        _2843 = (exp2(_3031 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3015 * cbSceneParam._m0[78u].x)) * _3005.x) / cbSceneParam._m0[78u].x)) + _2748;
        _2845 = (exp2(_3031 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3015 * cbSceneParam._m0[78u].y)) * _3005.y) / cbSceneParam._m0[78u].y)) + _2749;
        _2847 = (exp2(_3031 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3015 * cbSceneParam._m0[78u].z)) * _3005.z) / cbSceneParam._m0[78u].z)) + _2750;
        _2849 = _3014 * _2751;
    }
    else
    {
        _2843 = _2748;
        _2845 = _2749;
        _2847 = _2750;
        _2849 = _2751;
    }
    float _2861 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2862 = _2861 == 3.0;
    float _2863 = log2(_2849);
    float _2867 = exp2(_2863 * cbSceneParam._m0[78u].x);
    float _2868 = exp2(_2863 * cbSceneParam._m0[78u].y);
    float _2869 = exp2(_2863 * cbSceneParam._m0[78u].z);
    float _2870 = _2867 * (isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0)));
    float _2871 = _2868 * (isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0)));
    float _2872 = _2869 * (isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0)));
    float _2881 = (_2861 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2881 * (_2862 ? _2870 : (_2870 + (cbSceneParam._m0[72u].w * _2843)));
    SV_Target.y = _2881 * (_2862 ? _2871 : (_2871 + (cbSceneParam._m0[72u].w * _2845)));
    SV_Target.z = _2881 * (_2862 ? _2872 : (_2872 + (cbSceneParam._m0[72u].w * _2847)));
    SV_Target.w = _2726;
    SV_Target_1.x = ((_2721 * _2689) * _2867) * _2881;
    SV_Target_1.y = ((_2721 * _2690) * _2868) * _2881;
    SV_Target_1.z = ((_2721 * _2691) * _2869) * _2881;
    SV_Target_1.w = _2726;
}


