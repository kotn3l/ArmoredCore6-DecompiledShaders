#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1303;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230;
    float _231;
    float _232;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
    }
    else
    {
        _230 = _216;
        _231 = _217;
        _232 = _218;
    }
    float _277 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _287 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _277);
    float _288 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _277);
    float _289 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _277);
    vec4 _302 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _308 = _302.w;
    vec4 _320 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _336 = exp2(log2(1.0 - _308) * 8.0);
    vec4 _348 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _364 = exp2(log2(_308) * 8.0);
    vec4 _377 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    vec4 _401 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _410 = ((_320.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _401.x;
    float _413 = ((_320.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _401.y;
    float _416 = ((_320.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _401.z;
    float _423 = (((cbMtdParam._m0[12u].x * _348.x) - _410) * _336) + _410;
    float _424 = (((cbMtdParam._m0[12u].y * _348.y) - _413) * _336) + _413;
    float _425 = (((cbMtdParam._m0[12u].z * _348.z) - _416) * _336) + _416;
    float _432 = (((cbMtdParam._m0[11u].x * _377.x) - _423) * _364) + _423;
    float _433 = (((cbMtdParam._m0[11u].y * _377.y) - _424) * _364) + _424;
    float _434 = (((cbMtdParam._m0[11u].z * _377.z) - _425) * _364) + _425;
    float _435 = _401.w * _320.w;
    float _456 = cbMtdParam._m0[14u].z + texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x;
    float _463 = ((cbMtdParam._m0[14u].y - _456) * _336) + _456;
    float _466 = ((cbMtdParam._m0[15u].x - _463) * _364) + _463;
    vec4 _478 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _480 = _478.x;
    float _481 = _478.y;
    vec4 _500 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _517 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _525 = (_302.z * 2.0) * (cbMtdParam._m0[13u].x + _478.z);
    float _529 = (((_500.z - _525) + cbMtdParam._m0[14u].x) * _336) + _525;
    float _533 = (((_517.z - _529) + cbMtdParam._m0[13u].w) * _364) + _529;
    float _537 = (_302.x * 2.0) + (-1.0);
    float _539 = (_302.y * 2.0) + (-1.0);
    float _540 = dot(vec2(_537, _539), vec2(_537, _539));
    float _3666 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _545 = sqrt(1.0 - (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))));
    float _550 = ((_500.x - _480) * _336) + _480;
    float _551 = ((_500.y - _481) * _336) + _481;
    float _564 = ((((((_517.x - _550) * _364) + _550) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _537;
    float _565 = ((((((_517.y - _551) * _364) + _551) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _539;
    float _568 = fma(_545, _230, fma(_565, _222 * TANGENT.x, (_208 * _200) * _564));
    float _571 = fma(_545, _231, fma(_565, _222 * TANGENT.y, (_208 * _201) * _564));
    float _574 = fma(_545, _232, fma(_565, _222 * TANGENT.z, (_208 * _202) * _564));
    float _578 = inversesqrt(dot(vec3(_568, _571, _574), vec3(_568, _571, _574)));
    float _579 = _578 * _568;
    float _580 = _578 * _571;
    float _581 = _578 * _574;
    float _3677 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _582 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    float _3688 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _583 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    float _3699 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _584 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _3710 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _585 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _3721 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _586 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    float _3732 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _587 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    float _595 = cbMatDynParam._m0[9u].x * _584;
    float _596 = cbMatDynParam._m0[9u].y * _585;
    float _597 = cbMatDynParam._m0[9u].z * _586;
    float _604 = inversesqrt(dot(vec3(_287, _288, _289), vec3(_287, _288, _289)));
    float _605 = _604 * _287;
    float _606 = _604 * _288;
    float _607 = _604 * _289;
    float _608 = dot(vec3(_579, _580, _581), vec3(_605, _606, _607));
    float _614 = abs(exp2(log2(_608) * cbMatDynParam._m0[12u].x));
    float _615 = isnan(0.100000001490116119384765625) ? _614 : (isnan(_614) ? 0.100000001490116119384765625 : max(_614, 0.100000001490116119384765625));
    float _621 = ((isnan(0.699999988079071044921875) ? _615 : (isnan(_615) ? 0.699999988079071044921875 : min(_615, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _643 = 1.0 - cbMatDynParam._m0[8u].w;
    float _3753 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _646 = 1.0 - cbMatDynParam._m0[7u].w;
    float _3764 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _647 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _651 = dot(vec3(_579, _580, _581), vec3(0.0, -1.0, 0.0));
    float _3775 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _654 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _661 = (_654 * _584) * cbMatDynParam._m0[11u].x;
    float _663 = (_654 * _585) * cbMatDynParam._m0[11u].y;
    float _665 = (_654 * _586) * cbMatDynParam._m0[11u].z;
    float _672 = dot(vec3(_605, _606, _607), vec3(_579, _580, _581));
    float _675 = _672 * 2.0;
    float _685 = dot(vec3((-0.0) - (_605 - (_675 * _579)), (-0.0) - (_606 - (_675 * _580)), (-0.0) - (_607 - (_675 * _581))), vec3(0.0, -1.0, 0.0));
    float _3786 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _692 = exp2(log2(isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * 4.0);
    float _718 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _724 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _725 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _727 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _729 = _727.w;
    float _748 = fma(_581, cbSceneParam._m0[5u].z, fma(_580, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _579));
    float _751 = fma(_581, cbSceneParam._m0[6u].z, fma(_580, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _579));
    float _754 = fma(_581, cbSceneParam._m0[7u].z, fma(_580, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _579));
    vec4 _756 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _758 = _756.x;
    float _770 = (((_756.y - _583) + (_756.w * _583)) * cbMtdParam._m0[3u].x) + _583;
    vec4 _771 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _787 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_758 * _758)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _771.z;
    float _795 = (((cbMatDynParam._m0[15u].x - _587) * cbMatDynParam._m0[15u].w) * _787) + _587;
    float _803 = ((_787 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _770)) + _770;
    uint _827 = uint(roundEven(NORMAL.w)) * 13u;
    uint _828 = _827 + 9u;
    uint _829 = _828 + uint(cbMatDynParam._m0[0u].w);
    float _835 = (cbMtdParam._m0[0u].x * _595) * cbInstanceData._m0[_829].x;
    float _836 = (cbMtdParam._m0[0u].y * _596) * cbInstanceData._m0[_829].y;
    float _837 = (cbMtdParam._m0[0u].z * _597) * cbInstanceData._m0[_829].z;
    float _3797 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _838 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _3808 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _839 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _3819 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _840 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    vec4 _841 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _846 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _857 = (((_846.x - _795) + (_846.w * _795)) * cbMtdParam._m0[3u].x) + _795;
    float _870 = (cbMtdParam._m0[3u].x * (((_838 * _729) - _838) + _841.x)) + _838;
    float _871 = (cbMtdParam._m0[3u].x * (((_839 * _729) - _839) + _841.y)) + _839;
    float _872 = (cbMtdParam._m0[3u].x * (((_840 * _729) - _840) + _841.z)) + _840;
    vec4 _873 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _886 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_795 * (_595 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_795 * (_596 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_795 * (_597 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _873.z;
    float _890 = _886 * cbMatDynParam._m0[13u].w;
    float _900 = (_890 * (cbMatDynParam._m0[13u].x - _870)) + _870;
    float _901 = (_890 * (cbMatDynParam._m0[13u].y - _871)) + _871;
    float _902 = (_890 * (cbMatDynParam._m0[13u].z - _872)) + _872;
    float _910 = ((_886 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _857)) + _857;
    float _911 = 1.0 - _910;
    float _912 = _911 * _900;
    float _913 = _911 * _901;
    float _914 = _911 * _902;
    float _918 = (_900 + (-0.039999999105930328369140625)) * _910;
    float _919 = (_901 + (-0.039999999105930328369140625)) * _910;
    float _920 = (_902 + (-0.039999999105930328369140625)) * _910;
    float _921 = _918 + 0.039999999105930328369140625;
    float _922 = _919 + 0.039999999105930328369140625;
    float _923 = _920 + 0.039999999105930328369140625;
    vec4 _932 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _724, cbSceneParam._m0[86u].y * _725));
    float _935 = _932.x * TEXCOORD_4;
    float _936 = _608 * 2.0;
    float _940 = (_936 * _579) - _605;
    float _941 = (_936 * _580) - _606;
    float _942 = (_936 * _581) - _607;
    float _943 = abs(_672);
    float _3830 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _945 = sqrt(_803);
    float _957 = exp2((_945 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_945 * 3.0));
    float _963 = (1.0 - _957) * ((_945 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _964 = _957 * _945;
    float _992 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _996 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1000 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1302;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1027 = fma(_1000, cbModelParam._m0[26u].z, fma(_996, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _992));
        float _1031 = fma(_1000, cbModelParam._m0[27u].z, fma(_996, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _992));
        float _1035 = fma(_1000, cbModelParam._m0[28u].z, fma(_996, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _992));
        float _1060 = _992 + _579;
        float _1061 = _996 + _580;
        float _1062 = _1000 + _581;
        float _1072 = fma(_1062, cbModelParam._m0[26u].z, fma(_1061, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1060)) - _1027;
        float _1073 = fma(_1062, cbModelParam._m0[27u].z, fma(_1061, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1060)) - _1031;
        float _1074 = fma(_1062, cbModelParam._m0[28u].z, fma(_1061, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1060)) - _1035;
        float _1078 = inversesqrt(dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074)));
        float _1091 = ((_1078 * _1072) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1027 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1092 = ((_1078 * _1073) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1031 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1093 = ((_1078 * _1074) / cbModelParam._m0[34u].z) + ((((((_1035 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1091, _1092, _1093), 0.0);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1091, _1092, _1093), 0.0);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1091, _1092, _1093), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1091, _1092, _1093), 0.0);
        float _1130 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1096.x + (-0.5));
        float _1132 = _1130 * (_1096.y + (-0.5));
        float _1133 = _1130 * (_1096.z + (-0.5));
        float _1140 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1103.x + (-0.5));
        float _1142 = _1140 * (_1103.y + (-0.5));
        float _1143 = _1140 * (_1103.z + (-0.5));
        float _1150 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1110.x + (-0.5));
        float _1152 = _1150 * (_1110.y + (-0.5));
        float _1153 = _1150 * (_1110.z + (-0.5));
        float _1160 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1117.x + (-0.5));
        float _1162 = _1160 * (_1117.y + (-0.5));
        float _1163 = _1160 * (_1117.z + (-0.5));
        float _1164 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1167 = _1131 * 0.5;
        float _1168 = _1141 * 0.5;
        float _1169 = _1151 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1184 = (dot(vec3(_579, _580, _581), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1194 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1164 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1196 = _1195 * 2.0;
        float _1200 = (1.0 - _1195) / (_1195 + 1.0);
        float _3878 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1210 = ((((1.0 - _1201) * (_1196 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_1196 + 1.0))) + _1201) * _1164;
        float _1211 = _1132 * 0.5;
        float _1212 = _1142 * 0.5;
        float _1213 = _1152 * 0.5;
        float _1214 = dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213));
        float _1219 = (_1214 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1214);
        float _1227 = (dot(vec3(_579, _580, _581), vec3(_1219 * _1211, _1219 * _1212, _1219 * _1213)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1236 = sqrt(((_1212 * _1212) + (_1211 * _1211)) + (_1213 * _1213)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1238 = _1237 * 2.0;
        float _1242 = (1.0 - _1237) / (_1237 + 1.0);
        float _3911 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1252 = ((((1.0 - _1243) * (_1238 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1238 + 1.0))) + _1243) * _1165;
        float _1253 = _1133 * 0.5;
        float _1254 = _1143 * 0.5;
        float _1255 = _1153 * 0.5;
        float _1256 = dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255));
        float _1261 = (_1256 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1256);
        float _1269 = (dot(vec3(_579, _580, _581), vec3(_1261 * _1253, _1261 * _1254, _1261 * _1255)) + 1.0) * 0.5;
        float _3922 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1278 = sqrt(((_1254 * _1254) + (_1253 * _1253)) + (_1255 * _1255)) / (_1166 + 9.9999997473787516355514526367188e-06);
        float _3933 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1280 = _1279 * 2.0;
        float _1284 = (1.0 - _1279) / (_1279 + 1.0);
        float _3944 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1294 = ((((1.0 - _1285) * (_1280 + 2.0)) * exp2(log2(isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1280 + 1.0))) + _1285) * _1166;
        _1302 = _1133;
        _1304 = _1132;
        _1305 = _1131;
        _1306 = _1143;
        _1307 = _1142;
        _1308 = _1141;
        _1309 = _1153;
        _1310 = _1152;
        _1311 = _1151;
        _1312 = _1166;
        _1313 = _1165;
        _1314 = _1164;
        _1315 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)));
        _1316 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)));
        _1317 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)));
    }
    else
    {
        _1302 = _1303;
        _1304 = _1303;
        _1305 = _1303;
        _1306 = _1303;
        _1307 = _1303;
        _1308 = _1303;
        _1309 = _1303;
        _1310 = _1303;
        _1311 = _1303;
        _1312 = _1303;
        _1313 = _1303;
        _1314 = _1303;
        _1315 = 0.0;
        _1316 = 0.0;
        _1317 = 0.0;
    }
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1343 = fma(_1000, cbModelParam._m0[30u].z, fma(_996, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _992));
        float _1347 = fma(_1000, cbModelParam._m0[31u].z, fma(_996, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _992));
        float _1351 = fma(_1000, cbModelParam._m0[32u].z, fma(_996, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _992));
        float _1374 = _992 + _579;
        float _1375 = _996 + _580;
        float _1376 = _1000 + _581;
        float _1386 = fma(_1376, cbModelParam._m0[30u].z, fma(_1375, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1374)) - _1343;
        float _1387 = fma(_1376, cbModelParam._m0[31u].z, fma(_1375, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1374)) - _1347;
        float _1388 = fma(_1376, cbModelParam._m0[32u].z, fma(_1375, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1374)) - _1351;
        float _1392 = inversesqrt(dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388)));
        float _1405 = ((_1392 * _1386) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1343 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1406 = ((_1392 * _1387) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1347 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1407 = ((_1392 * _1388) / cbModelParam._m0[35u].z) + ((((((_1351 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        float _1442 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1409.x + (-0.5));
        float _1444 = _1442 * (_1409.y + (-0.5));
        float _1445 = _1442 * (_1409.z + (-0.5));
        float _1452 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1453 = _1452 * (_1416.x + (-0.5));
        float _1454 = _1452 * (_1416.y + (-0.5));
        float _1455 = _1452 * (_1416.z + (-0.5));
        float _1462 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1463 = _1462 * (_1423.x + (-0.5));
        float _1464 = _1462 * (_1423.y + (-0.5));
        float _1465 = _1462 * (_1423.z + (-0.5));
        float _1472 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1473 = _1472 * (_1430.x + (-0.5));
        float _1474 = _1472 * (_1430.y + (-0.5));
        float _1475 = _1472 * (_1430.z + (-0.5));
        float _1476 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1477 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1478 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1479 = _1443 * 0.5;
        float _1480 = _1453 * 0.5;
        float _1481 = _1463 * 0.5;
        float _1482 = dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481));
        float _1487 = (_1482 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1482);
        float _1495 = (dot(vec3(_579, _580, _581), vec3(_1487 * _1479, _1487 * _1480, _1487 * _1481)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1504 = sqrt(((_1480 * _1480) + (_1479 * _1479)) + (_1481 * _1481)) / (_1476 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1506 = _1505 * 2.0;
        float _1510 = (1.0 - _1505) / (_1505 + 1.0);
        float _4007 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1520 = ((((1.0 - _1511) * (_1506 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1506 + 1.0))) + _1511) * _1476;
        float _1521 = _1444 * 0.5;
        float _1522 = _1454 * 0.5;
        float _1523 = _1464 * 0.5;
        float _1524 = dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523));
        float _1529 = (_1524 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1524);
        float _1537 = (dot(vec3(_579, _580, _581), vec3(_1529 * _1521, _1529 * _1522, _1529 * _1523)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1546 = sqrt(((_1522 * _1522) + (_1521 * _1521)) + (_1523 * _1523)) / (_1477 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1548 = _1547 * 2.0;
        float _1552 = (1.0 - _1547) / (_1547 + 1.0);
        float _4040 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1562 = ((((1.0 - _1553) * (_1548 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1548 + 1.0))) + _1553) * _1477;
        float _1563 = _1445 * 0.5;
        float _1564 = _1455 * 0.5;
        float _1565 = _1465 * 0.5;
        float _1566 = dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565));
        float _1571 = (_1566 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1566);
        float _1579 = (dot(vec3(_579, _580, _581), vec3(_1571 * _1563, _1571 * _1564, _1571 * _1565)) + 1.0) * 0.5;
        float _4051 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1588 = sqrt(((_1564 * _1564) + (_1563 * _1563)) + (_1565 * _1565)) / (_1478 + 9.9999997473787516355514526367188e-06);
        float _4062 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1590 = _1589 * 2.0;
        float _1594 = (1.0 - _1589) / (_1589 + 1.0);
        float _4073 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1604 = ((((1.0 - _1595) * (_1590 + 2.0)) * exp2(log2(isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1590 + 1.0))) + _1595) * _1478;
        _1612 = _1445;
        _1613 = _1444;
        _1614 = _1443;
        _1615 = _1455;
        _1616 = _1454;
        _1617 = _1453;
        _1618 = _1465;
        _1619 = _1464;
        _1620 = _1463;
        _1621 = _1478;
        _1622 = _1477;
        _1623 = _1476;
        _1624 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)));
        _1625 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)));
        _1626 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)));
    }
    else
    {
        _1612 = _1303;
        _1613 = _1303;
        _1614 = _1303;
        _1615 = _1303;
        _1616 = _1303;
        _1617 = _1303;
        _1618 = _1303;
        _1619 = _1303;
        _1620 = _1303;
        _1621 = _1303;
        _1622 = _1303;
        _1623 = _1303;
        _1624 = 0.0;
        _1625 = 0.0;
        _1626 = 0.0;
    }
    float _1636 = (cbModelParam._m0[1u].x * (_1624 - _1315)) + _1315;
    float _1637 = (cbModelParam._m0[1u].x * (_1625 - _1316)) + _1316;
    float _1638 = (cbModelParam._m0[1u].x * (_1626 - _1317)) + _1317;
    float _1659 = fma(_1638, cbSceneParam._m0[89u].z, fma(_1637, cbSceneParam._m0[89u].y, _1636 * cbSceneParam._m0[89u].x));
    float _1662 = fma(_1638, cbSceneParam._m0[90u].z, fma(_1637, cbSceneParam._m0[90u].y, _1636 * cbSceneParam._m0[90u].x));
    float _1665 = fma(_1638, cbSceneParam._m0[91u].z, fma(_1637, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1636));
    float _1680 = _940 * 0.5;
    float _1681 = _941 * 0.5;
    float _1682 = _942 * 0.5;
    float _1683 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1614, _1617, _1620, _1623));
    float _1686 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1613, _1616, _1619, _1622));
    float _1689 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1612, _1615, _1618, _1621));
    float _1720;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1696 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1302, _1306, _1309, _1312));
        float _1700 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1304, _1307, _1310, _1313));
        float _1704 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1305, _1308, _1311, _1314));
        float _1711 = dot(vec4(cbModelParam._m0[39u]), vec4(_1680, _1681, _1682, 1.0));
        _1720 = dot(vec3(isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)), isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)), isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1711) ? 0.0 : (isnan(0.0) ? _1711 : max(0.0, _1711))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1720 = 1.0;
    }
    float _1731;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1722 = dot(vec4(cbModelParam._m0[40u]), vec4(_1680, _1681, _1682, 1.0));
        _1731 = dot(vec3(isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)), isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)), isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1722) ? 0.0 : (isnan(0.0) ? _1722 : max(0.0, _1722))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1731 = 1.0;
    }
    float _1735 = (_1731 * cbModelParam._m0[1u].x) + (_1720 * (1.0 - cbModelParam._m0[1u].x));
    float _1745 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _803);
    float _1746 = isnan(_1745) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1745 : min(cbModelParam._m0[25u].z, _1745));
    float _1826;
    float _1828;
    float _1830;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1793 = fma(_1000, cbModelParam._m0[13u].z, fma(_996, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _992)) + cbModelParam._m0[13u].w;
        float _1797 = fma(_1000, cbModelParam._m0[14u].z, fma(_996, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _992)) + cbModelParam._m0[14u].w;
        float _1801 = fma(_1000, cbModelParam._m0[15u].z, fma(_996, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _992)) + cbModelParam._m0[15u].w;
        float _1804 = fma(_942, cbModelParam._m0[13u].z, fma(_941, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _940));
        float _1807 = fma(_942, cbModelParam._m0[14u].z, fma(_941, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _940));
        float _1810 = fma(_942, cbModelParam._m0[15u].z, fma(_941, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _940));
        float _1838;
        if (_1804 > 0.0)
        {
            _1838 = abs((1.0 - _1793) / _1804);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1793 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1838 = frontier_phi_16_14_ladder;
        }
        float _2044;
        if (_1807 > 0.0)
        {
            _2044 = abs((1.0 - _1797) / _1807);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1797 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2044 = frontier_phi_25_21_ladder;
        }
        float _2298;
        if (_1810 > 0.0)
        {
            _2298 = abs((1.0 - _1801) / _1810);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1801 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2298 = frontier_phi_37_32_ladder;
        }
        float _2300 = isnan(_2044) ? _1838 : (isnan(_1838) ? _2044 : min(_1838, _2044));
        float _2301 = isnan(_2298) ? _2300 : (isnan(_2300) ? _2298 : min(_2300, _2298));
        float _2305 = (_2301 * _1804) + _1793;
        float _2306 = (_2301 * _1807) + _1797;
        float _2307 = (_2301 * _1810) + _1801;
        float _2308 = _2301 * 9.9999997473787516355514526367188e-05;
        float _2310 = (-1.0) - _2308;
        float _2312 = _2308 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2307 > _2312) || ((_2307 < _2310) || ((_2306 > _2312) || ((_2306 < _2310) || ((_2305 < _2310) || (_2305 > _2312))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2435 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2307, cbModelParam._m0[9u].z, fma(_2306, cbModelParam._m0[9u].y, _2305 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2307, cbModelParam._m0[10u].z, fma(_2306, cbModelParam._m0[10u].y, _2305 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2307, cbModelParam._m0[11u].z, fma(_2306, cbModelParam._m0[11u].y, _2305 * cbModelParam._m0[11u].x))), _1746);
            frontier_phi_15_37_ladder = _2435.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2435.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2435.x * cbModelParam._m0[1u].y;
        }
        _1826 = frontier_phi_15_37_ladder_2;
        _1828 = frontier_phi_15_37_ladder_1;
        _1830 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1814 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_940, _941, _942), _1746);
        _1826 = _1814.x * cbModelParam._m0[1u].y;
        _1828 = _1814.y * cbModelParam._m0[1u].y;
        _1830 = _1814.z * cbModelParam._m0[1u].y;
    }
    float _1834 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _803);
    float _1835 = isnan(_1834) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1834 : min(cbModelParam._m0[25u].w, _1834));
    float _1928;
    float _1930;
    float _1932;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1892 = fma(_1000, cbModelParam._m0[21u].z, fma(_996, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _992)) + cbModelParam._m0[21u].w;
        float _1896 = fma(_1000, cbModelParam._m0[22u].z, fma(_996, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _992)) + cbModelParam._m0[22u].w;
        float _1900 = fma(_1000, cbModelParam._m0[23u].z, fma(_996, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _992)) + cbModelParam._m0[23u].w;
        float _1903 = fma(_942, cbModelParam._m0[21u].z, fma(_941, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _940));
        float _1906 = fma(_942, cbModelParam._m0[22u].z, fma(_941, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _940));
        float _1909 = fma(_942, cbModelParam._m0[23u].z, fma(_941, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _940));
        float _2049;
        if (_1903 > 0.0)
        {
            _2049 = abs((1.0 - _1892) / _1903);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1892 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2049 = frontier_phi_27_23_ladder;
        }
        float _2325;
        if (_1906 > 0.0)
        {
            _2325 = abs((1.0 - _1896) / _1906);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1896 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2325 = frontier_phi_39_34_ladder;
        }
        float _2538;
        if (_1909 > 0.0)
        {
            _2538 = abs((1.0 - _1900) / _1909);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1900 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2538 = frontier_phi_48_45_ladder;
        }
        float _2540 = isnan(_2325) ? _2049 : (isnan(_2049) ? _2325 : min(_2049, _2325));
        float _2541 = isnan(_2538) ? _2540 : (isnan(_2540) ? _2538 : min(_2540, _2538));
        float _2545 = (_2541 * _1903) + _1892;
        float _2546 = (_2541 * _1906) + _1896;
        float _2547 = (_2541 * _1909) + _1900;
        float _2548 = _2541 * 9.9999997473787516355514526367188e-05;
        float _2549 = (-1.0) - _2548;
        float _2551 = _2548 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2547 > _2551) || ((_2547 < _2549) || ((_2546 > _2551) || ((_2546 < _2549) || ((_2545 < _2549) || (_2545 > _2551))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2771 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2547, cbModelParam._m0[17u].z, fma(_2546, cbModelParam._m0[17u].y, _2545 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2547, cbModelParam._m0[18u].z, fma(_2546, cbModelParam._m0[18u].y, _2545 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2547, cbModelParam._m0[19u].z, fma(_2546, cbModelParam._m0[19u].y, _2545 * cbModelParam._m0[19u].x))), _1835);
            frontier_phi_24_48_ladder = _2771.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2771.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2771.x * cbModelParam._m0[1u].z;
        }
        _1928 = frontier_phi_24_48_ladder_2;
        _1930 = frontier_phi_24_48_ladder_1;
        _1932 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1912 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_940, _941, _942), _1835);
        _1928 = _1912.x * cbModelParam._m0[1u].z;
        _1930 = _1912.y * cbModelParam._m0[1u].z;
        _1932 = _1912.z * cbModelParam._m0[1u].z;
    }
    float _1945 = (((_963 * _921) + _964) * _935) * ((cbModelParam._m0[1u].w * (_1928 - _1826)) + _1826);
    float _1947 = (((_963 * _922) + _964) * _935) * ((cbModelParam._m0[1u].w * (_1930 - _1828)) + _1828);
    float _1949 = (((_963 * _923) + _964) * _935) * ((cbModelParam._m0[1u].w * (_1932 - _1830)) + _1830);
    float _1952 = fma(_1949, cbSceneParam._m0[89u].z, fma(_1947, cbSceneParam._m0[89u].y, _1945 * cbSceneParam._m0[89u].x));
    float _1955 = fma(_1949, cbSceneParam._m0[90u].z, fma(_1947, cbSceneParam._m0[90u].y, _1945 * cbSceneParam._m0[90u].x));
    float _1958 = fma(_1949, cbSceneParam._m0[91u].z, fma(_1947, cbSceneParam._m0[91u].y, _1945 * cbSceneParam._m0[91u].x));
    uvec4 _1968 = floatBitsToUint(cbInstanceData._m0[_827 + 5u]);
    uint _1970 = _1968.x * 14u;
    uint _1971 = _1970 + 13u;
    float _1978 = _935 + (-1.0);
    float _1983 = (cbLight._m0[_1971].x * _1978) + 1.0;
    float _1984 = (cbLight._m0[_1971].y * _1978) + 1.0;
    float _1985 = (cbLight._m0[_1971].z * _1978) + 1.0;
    float _1986 = (cbLight._m0[_1971].w * _1978) + 1.0;
    uint _1987 = _1970 + 5u;
    float _1993 = isnan(1.0) ? _1984 : (isnan(_1984) ? 1.0 : min(_1984, 1.0));
    uint _1997 = _1970 + 4u;
    float _2003 = isnan(1.0) ? _1983 : (isnan(_1983) ? 1.0 : min(_1983, 1.0));
    uint _2007 = _1970 | 1u;
    float _2018 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_579, _580, _581));
    float _2021 = dot(vec3(cbLight._m0[_2007].xyz), vec3(_579, _580, _581));
    float _4209 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _4220 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2026 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * 0.3183098733425140380859375;
    float _2028 = (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * 0.3183098733425140380859375;
    float _2035 = ((cbLight._m0[_1987].x * _1993) * _2028) + ((cbLight._m0[_1997].x * _2003) * _2026);
    float _2036 = ((_1993 * cbLight._m0[_1987].y) * _2028) + ((_2003 * cbLight._m0[_1997].y) * _2026);
    float _2037 = ((_1993 * cbLight._m0[_1987].z) * _2028) + ((_2003 * cbLight._m0[_1997].z) * _2026);
    uvec4 _2041 = floatBitsToUint(cbLight._m0[_1970 + 12u]);
    bool _2043 = _2041.x == 0u;
    float _2054;
    float _2056;
    float _2058;
    if (_2043)
    {
        _2054 = _2035;
        _2056 = _2036;
        _2058 = _2037;
    }
    else
    {
        uint _2062 = _1970 + 6u;
        float _2078 = (dot(vec3(cbLight._m0[_1970 + 2u].xyz), vec3(_579, _580, _581)) * 0.5) + 0.5;
        float _2079 = _2078 * _2078;
        float _4231 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2080 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _2081 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
        _2054 = (((cbLight._m0[_2062].x * 0.3183098733425140380859375) * _2080) * _2081) + _2035;
        _2056 = (((cbLight._m0[_2062].y * 0.3183098733425140380859375) * _2080) * _2081) + _2036;
        _2058 = (((cbLight._m0[_2062].z * 0.3183098733425140380859375) * _2080) * _2081) + _2037;
    }
    bool _2061 = _2041.y == 0u;
    float _2099;
    float _2101;
    float _2103;
    if (_2061)
    {
        _2099 = _2054;
        _2101 = _2056;
        _2103 = _2058;
    }
    else
    {
        uint _2269 = _1970 + 7u;
        float _2285 = (dot(vec3(cbLight._m0[_1970 + 3u].xyz), vec3(_579, _580, _581)) * 0.5) + 0.5;
        float _2286 = _2285 * _2285;
        float _4247 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2287 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _2288 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
        _2099 = (((cbLight._m0[_2269].x * 0.3183098733425140380859375) * _2287) * _2288) + _2054;
        _2101 = (((cbLight._m0[_2269].y * 0.3183098733425140380859375) * _2287) * _2288) + _2056;
        _2103 = (((cbLight._m0[_2269].z * 0.3183098733425140380859375) * _2287) * _2288) + _2058;
    }
    uint _2106 = _1970 + 8u;
    float _2119 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1970].w)) * _803) * 0.949999988079071044921875);
    float _2120 = _2119 * _2119;
    float _2121 = cbLight._m0[_1970].x + _605;
    float _2122 = cbLight._m0[_1970].y + _606;
    float _2123 = cbLight._m0[_1970].z + _607;
    float _2127 = inversesqrt(dot(vec3(_2121, _2122, _2123), vec3(_2121, _2122, _2123)));
    float _2128 = _2127 * _2121;
    float _2129 = _2127 * _2122;
    float _2130 = _2127 * _2123;
    float _2131 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_1970].xyz));
    float _4263 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2134 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _4274 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _2135 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
    float _2136 = dot(vec3(_579, _580, _581), vec3(_2128, _2129, _2130));
    float _4285 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2139 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _2140 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_2128, _2129, _2130));
    float _4296 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2144 = _2120 * _2120;
    float _2148 = ((_2139 * _2139) * (_2144 + (-1.0))) + 1.0;
    float _2156 = exp2(log2(1.0 - (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0)))) * 5.0);
    float _2157 = 0.959999978542327880859375 - _918;
    float _2159 = 0.959999978542327880859375 - _919;
    float _2160 = 0.959999978542327880859375 - _920;
    float _2167 = 1.0 - _2120;
    float _2178 = (0.5 / (((_2135 * ((_2134 * _2167) + _2120)) + 9.9999999392252902907785028219223e-09) + (((_2135 * _2167) + _2120) * _2134))) * _2134;
    float _4307 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2180 = (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_2144 / ((_2148 * _2148) * 3.141590118408203125));
    uint _2191 = _1970 + 9u;
    float _2202 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2007].w)) * _803) * 0.949999988079071044921875);
    float _2203 = _2202 * _2202;
    float _2204 = cbLight._m0[_2007].x + _605;
    float _2205 = cbLight._m0[_2007].y + _606;
    float _2206 = cbLight._m0[_2007].z + _607;
    float _2210 = inversesqrt(dot(vec3(_2204, _2205, _2206), vec3(_2204, _2205, _2206)));
    float _2211 = _2210 * _2204;
    float _2212 = _2210 * _2205;
    float _2213 = _2210 * _2206;
    float _2214 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2007].xyz));
    float _4318 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2217 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
    float _2218 = dot(vec3(_579, _580, _581), vec3(_2211, _2212, _2213));
    float _4329 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2221 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
    float _2222 = dot(vec3(cbLight._m0[_2007].xyz), vec3(_2211, _2212, _2213));
    float _4340 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2226 = _2203 * _2203;
    float _2230 = ((_2221 * _2221) * (_2226 + (-1.0))) + 1.0;
    float _2237 = exp2(log2(1.0 - (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0)))) * 5.0);
    float _2244 = 1.0 - _2203;
    float _2254 = (0.5 / (((_2135 * ((_2217 * _2244) + _2203)) + 9.9999999392252902907785028219223e-09) + (((_2135 * _2244) + _2203) * _2217))) * _2217;
    float _4351 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2256 = (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_2226 / ((_2230 * _2230) * 3.141590118408203125));
    float _2266 = (((((_2237 * _2157) + _921) * cbLight._m0[_2191].x) * _2256) * _1993) + (((((_2156 * _2157) + _921) * cbLight._m0[_2106].x) * _2180) * _2003);
    float _2267 = (((((_2237 * _2159) + _922) * cbLight._m0[_2191].y) * _2256) * _1993) + (((((_2156 * _2159) + _922) * cbLight._m0[_2106].y) * _2180) * _2003);
    float _2268 = (((((_2237 * _2160) + _923) * cbLight._m0[_2191].z) * _2256) * _1993) + (((((_2156 * _2160) + _923) * cbLight._m0[_2106].z) * _2180) * _2003);
    float _2330;
    float _2332;
    float _2334;
    if (_2043)
    {
        _2330 = _2266;
        _2332 = _2267;
        _2334 = _2268;
    }
    else
    {
        uint _2336 = _1970 + 2u;
        uint _2340 = _1970 + 10u;
        float _2354 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2336].w)) * _803) * 0.949999988079071044921875);
        float _2355 = _2354 * _2354;
        float _2356 = cbLight._m0[_2336].x + _605;
        float _2357 = cbLight._m0[_2336].y + _606;
        float _2358 = cbLight._m0[_2336].z + _607;
        float _2362 = inversesqrt(dot(vec3(_2356, _2357, _2358), vec3(_2356, _2357, _2358)));
        float _2363 = _2362 * _2356;
        float _2364 = _2362 * _2357;
        float _2365 = _2362 * _2358;
        float _2366 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2336].xyz));
        float _4362 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2369 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _2370 = dot(vec3(_579, _580, _581), vec3(_2363, _2364, _2365));
        float _4373 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2373 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _2374 = dot(vec3(cbLight._m0[_2336].xyz), vec3(_2363, _2364, _2365));
        float _4384 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2378 = _2355 * _2355;
        float _2382 = ((_2373 * _2373) * (_2378 + (-1.0))) + 1.0;
        float _2389 = exp2(log2(1.0 - (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0)))) * 5.0);
        float _2396 = 1.0 - _2355;
        float _2406 = (0.5 / (((_2135 * ((_2369 * _2396) + _2355)) + 9.9999999392252902907785028219223e-09) + (((_2135 * _2396) + _2355) * _2369))) * _2369;
        float _4395 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2408 = (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_2378 / ((_2382 * _2382) * 3.141590118408203125));
        float _2409 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
        _2330 = (((((_2389 * _2157) + _921) * cbLight._m0[_2340].x) * _2408) * _2409) + _2266;
        _2332 = (((((_2389 * _2159) + _922) * cbLight._m0[_2340].y) * _2408) * _2409) + _2267;
        _2334 = (((((_2389 * _2160) + _923) * cbLight._m0[_2340].z) * _2408) * _2409) + _2268;
    }
    float _2444;
    float _2446;
    float _2448;
    if (_2061)
    {
        _2444 = _2330;
        _2446 = _2332;
        _2448 = _2334;
    }
    else
    {
        uint _2455 = _1970 + 3u;
        uint _2459 = _1970 + 11u;
        float _2473 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2455].w)) * _803) * 0.949999988079071044921875);
        float _2474 = _2473 * _2473;
        float _2475 = cbLight._m0[_2455].x + _605;
        float _2476 = cbLight._m0[_2455].y + _606;
        float _2477 = cbLight._m0[_2455].z + _607;
        float _2481 = inversesqrt(dot(vec3(_2475, _2476, _2477), vec3(_2475, _2476, _2477)));
        float _2482 = _2481 * _2475;
        float _2483 = _2481 * _2476;
        float _2484 = _2481 * _2477;
        float _2485 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2455].xyz));
        float _4411 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2488 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _2489 = dot(vec3(_579, _580, _581), vec3(_2482, _2483, _2484));
        float _4422 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2492 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _2493 = dot(vec3(cbLight._m0[_2455].xyz), vec3(_2482, _2483, _2484));
        float _4433 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2497 = _2474 * _2474;
        float _2501 = ((_2492 * _2492) * (_2497 + (-1.0))) + 1.0;
        float _2508 = exp2(log2(1.0 - (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) * 5.0);
        float _2515 = 1.0 - _2474;
        float _2525 = (0.5 / (((_2135 * ((_2488 * _2515) + _2474)) + 9.9999999392252902907785028219223e-09) + (((_2135 * _2515) + _2474) * _2488))) * _2488;
        float _4444 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2527 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_2497 / ((_2501 * _2501) * 3.141590118408203125));
        float _2528 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
        _2444 = (((((_2508 * _2157) + _921) * cbLight._m0[_2459].x) * _2527) * _2528) + _2330;
        _2446 = (((((_2508 * _2159) + _922) * cbLight._m0[_2459].y) * _2527) * _2528) + _2332;
        _2448 = (((((_2508 * _2160) + _923) * cbLight._m0[_2459].z) * _2527) * _2528) + _2334;
    }
    float _2662;
    float _2664;
    float _2666;
    float _2668;
    float _2670;
    float _2672;
    if (_1968.y == 0u)
    {
        float _2603 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2604 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2603;
        float _2605 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2603;
        float _2606 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2603;
        uvec4 _2618 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2619 = _2618.x;
        uint _2630 = uint((float(_2618.y) * floor(float(uint(cbSceneParam._m0[85u].y * _725) / _2619))) + floor(float(uint(cbSceneParam._m0[85u].x * _724) / _2619)));
        float _2640 = (log2(_2606 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2641 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        uint _2644 = uint(isnan(14.0) ? _2641 : (isnan(_2641) ? 14.0 : min(_2641, 14.0)));
        uvec4 _2649 = texelFetch(g_lightClusterGridBuffer, int(((_2644 << 2u) + (_2630 << 6u)) >> 2u));
        uint _2650 = _2649.x;
        uint _2651 = _2618.z;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        float _2784;
        float _2786;
        if (((((1u << ((_2651 >> 4u) & 15u)) + 4294967295u) & _2650) == 0u) || ((_2651 & 240u) == 0u))
        {
            _2776 = 0.0;
            _2778 = 0.0;
            _2780 = 0.0;
            _2782 = 0.0;
            _2784 = 0.0;
            _2786 = 0.0;
        }
        else
        {
            float _2777;
            float _2779;
            float _2781;
            float _2783;
            float _2785;
            float _2787;
            float _2929 = 0.0;
            float _2930 = 0.0;
            float _2931 = 0.0;
            float _2932 = 0.0;
            float _2933 = 0.0;
            float _2934 = 0.0;
            uint _2935 = 0u;
            uint _2944;
            bool _2945;
            for (;;)
            {
                _2944 = texelFetch(g_lightClassification, int((((_2644 << 5u) + (_2630 << 9u)) + (_2935 << 2u)) >> 2u)).x;
                _2945 = _2944 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2945)
                {
                    frontier_phi_63_pred = _2934;
                    frontier_phi_63_pred_1 = _2933;
                    frontier_phi_63_pred_2 = _2932;
                    frontier_phi_63_pred_3 = _2931;
                    frontier_phi_63_pred_4 = _2930;
                    frontier_phi_63_pred_5 = _2929;
                }
                else
                {
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    float _3058;
                    uint _3059;
                    _3053 = _2929;
                    _3054 = _2930;
                    _3055 = _2931;
                    _3056 = _2932;
                    _3057 = _2933;
                    _3058 = _2934;
                    _3059 = _2944;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    for (;;)
                    {
                        uint _3063 = uint(findLSB(_3059)) + (_2935 << 5u);
                        uint _3060 = (_3059 + 4294967295u) & _3059;
                        uint _3065 = _3063 * 48u;
                        vec4 _3079 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3065)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 3u)).x));
                        uint _3085 = (_3063 * 48u) + 4u;
                        vec4 _3098 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3085)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 3u)).x));
                        uint _3104 = (_3063 * 48u) + 8u;
                        vec3 _3115 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3104)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 2u)).x));
                        float _3119 = _3079.x - _2604;
                        float _3120 = _3079.y - _2605;
                        float _3121 = _3079.z - _2606;
                        float _3122 = dot(vec3(_3119, _3120, _3121), vec3(_3119, _3120, _3121));
                        float _3125 = inversesqrt(_3122);
                        float _3126 = _3125 * _3119;
                        float _3127 = _3125 * _3120;
                        float _3128 = _3125 * _3121;
                        float _3129 = dot(vec3(_748, _751, _754), vec3(_3126, _3127, _3128));
                        float _3134 = 1.0 - (_3122 * _3079.w);
                        float _4470 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                        float _3135 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                        float _3136 = sqrt(_3122) * _3098.w;
                        float _3139 = 1.39999997615814208984375 / (_3136 + 1.39999997615814208984375);
                        float _3140 = _3139 * _3139;
                        float _3143 = ((1.0 - _3140) * _3129) + _3140;
                        float _3146 = _3136 * _3136;
                        float _3149 = ((isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0))) * _3135) / ((_3146 * 0.699999988079071044921875) + 1.0);
                        float _3153 = (-0.0) - _2604;
                        float _3154 = (-0.0) - _2605;
                        float _3155 = (-0.0) - _2606;
                        float _3159 = inversesqrt(dot(vec3(_3153, _3154, _3155), vec3(_3153, _3154, _3155)));
                        float _3160 = _3159 * _3153;
                        float _3161 = _3159 * _3154;
                        float _3162 = _3159 * _3155;
                        float _3170 = exp2(log2(1.0 / ((_3146 * 3.5) + 5.0)) * 0.25);
                        float _3171 = 1.0 - _945;
                        float _3178 = sqrt(1.0 - ((1.0 - (_3171 * _3171)) * (1.0 - (_3170 * _3170))));
                        float _3179 = _3178 * _3178;
                        float _3180 = _3179 * _3179;
                        float _3181 = _3160 + _3126;
                        float _3182 = _3161 + _3127;
                        float _3183 = _3162 + _3128;
                        float _3187 = inversesqrt(dot(vec3(_3181, _3182, _3183), vec3(_3181, _3182, _3183)));
                        float _3191 = dot(vec3(_748, _751, _754), vec3(_3160, _3161, _3162));
                        float _4486 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                        float _3194 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                        float _3195 = dot(vec3(_748, _751, _754), vec3(_3187 * _3181, _3187 * _3182, _3187 * _3183));
                        float _4497 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                        float _3198 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                        float _3202 = ((_3198 * _3198) * (_3180 + (-1.0))) + 1.0;
                        float _3203 = _3139 * _3179;
                        float _3204 = _3203 * _3203;
                        float _3207 = ((1.0 - _3204) * _3129) + _3204;
                        float _4508 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                        float _3208 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                        float _3209 = 1.0 - _3179;
                        float _3219 = (0.5 / (((_3208 * ((_3194 * _3209) + _3179)) + 9.9999999392252902907785028219223e-09) + (((_3208 * _3209) + _3179) * _3194))) * _3208;
                        float _4519 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                        float _3230 = (((_3180 * 3.1415927410125732421875) * (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0)))) / ((_3202 * _3202) * ((_3146 * 2.1991131305694580078125) + 3.141590118408203125))) * _3135;
                        _2988 = (_3149 * _3098.x) + _3056;
                        _2989 = (_3149 * _3098.y) + _3057;
                        _2990 = (_3149 * _3098.z) + _3058;
                        _2985 = (_3230 * _3115.x) + _3053;
                        _2986 = (_3230 * _3115.y) + _3054;
                        _2987 = (_3230 * _3115.z) + _3055;
                        if (_3060 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3053 = _2985;
                            _3054 = _2986;
                            _3055 = _2987;
                            _3056 = _2988;
                            _3057 = _2989;
                            _3058 = _2990;
                            _3059 = _3060;
                        }
                    }
                    frontier_phi_63_pred = _2990;
                    frontier_phi_63_pred_1 = _2989;
                    frontier_phi_63_pred_2 = _2988;
                    frontier_phi_63_pred_3 = _2987;
                    frontier_phi_63_pred_4 = _2986;
                    frontier_phi_63_pred_5 = _2985;
                }
                _2787 = frontier_phi_63_pred;
                _2785 = frontier_phi_63_pred_1;
                _2783 = frontier_phi_63_pred_2;
                _2781 = frontier_phi_63_pred_3;
                _2779 = frontier_phi_63_pred_4;
                _2777 = frontier_phi_63_pred_5;
                uint _2936 = _2935 + 1u;
                if (_2936 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2929 = _2777;
                    _2930 = _2779;
                    _2931 = _2781;
                    _2932 = _2783;
                    _2933 = _2785;
                    _2934 = _2787;
                    _2935 = _2936;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2776 = _2777;
            _2778 = _2779;
            _2780 = _2781;
            _2782 = _2783;
            _2784 = _2785;
            _2786 = _2787;
        }
        uvec4 _2790 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2791 = _2790.z;
        uint _2793 = (_2791 >> 8u) & 15u;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        float _2905;
        float _2907;
        if (((4294967295u << _2793) & _2650) == 0u)
        {
            _2897 = _2776;
            _2899 = _2778;
            _2901 = _2780;
            _2903 = _2782;
            _2905 = _2784;
            _2907 = _2786;
        }
        else
        {
            float _2922 = inversesqrt(dot(vec3(_2604, _2605, _2606), vec3(_2604, _2605, _2606)));
            float _2923 = _2922 * _2604;
            float _2924 = _2922 * _2605;
            float _2925 = _2922 * _2606;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2793 < ((_2791 >> 12u) & 15u))
            {
                float _2898;
                float _2900;
                float _2902;
                float _2904;
                float _2906;
                float _2908;
                float _3036 = _2776;
                float _3037 = _2778;
                float _3038 = _2780;
                float _3039 = _2782;
                float _3040 = _2784;
                float _3041 = _2786;
                uint _3042 = _2793;
                uint _3051;
                bool _3052;
                for (;;)
                {
                    _3051 = texelFetch(g_lightClassification, int((((_2644 << 5u) + (_2630 << 9u)) + (_3042 << 2u)) >> 2u)).x;
                    _3052 = _3051 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3052)
                    {
                        frontier_phi_69_pred = _3041;
                        frontier_phi_69_pred_1 = _3040;
                        frontier_phi_69_pred_2 = _3039;
                        frontier_phi_69_pred_3 = _3038;
                        frontier_phi_69_pred_4 = _3037;
                        frontier_phi_69_pred_5 = _3036;
                    }
                    else
                    {
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3248 = _3036;
                        float _3249 = _3037;
                        float _3250 = _3038;
                        float _3251 = _3039;
                        float _3252 = _3040;
                        float _3253 = _3041;
                        uint _3254 = _3051;
                        uint _3255;
                        vec4 _3280;
                        float _3281;
                        vec4 _3296;
                        vec3 _3308;
                        vec4 _3323;
                        vec4 _3339;
                        float _3386;
                        bool _3387;
                        for (;;)
                        {
                            uint _3265 = ((_3042 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3254));
                            _3255 = (_3254 + 4294967295u) & _3254;
                            uint _3267 = _3265 * 40u;
                            _3280 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 3u)).x));
                            _3281 = _3280.w;
                            uint _3283 = (_3265 * 40u) + 4u;
                            _3296 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3283)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 3u)).x));
                            uint _3298 = (_3265 * 40u) + 8u;
                            _3308 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x));
                            uint _3310 = (_3265 * 40u) + 16u;
                            _3323 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 3u)).x));
                            uint _3326 = (_3265 * 40u) + 20u;
                            _3339 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 3u)).x));
                            uint _3342 = (_3265 * 40u) + 24u;
                            vec4 _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            uint _3361 = (_3265 * 40u) + 28u;
                            vec4 _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            _3386 = fma(_2606, _3374.z, fma(_2605, _3374.y, _3374.x * _2604)) + _3374.w;
                            _3387 = !((fma(_2606, _3355.z, fma(_2605, _3355.y, _3355.x * _2604)) + _3355.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3387)
                            {
                                float _3414 = _3280.x - _2604;
                                float _3415 = _3280.y - _2605;
                                float _3416 = _3280.z - _2606;
                                float _3417 = dot(vec3(_3414, _3415, _3416), vec3(_3414, _3415, _3416));
                                float _3420 = inversesqrt(_3417);
                                float _3421 = _3420 * _3414;
                                float _3422 = _3420 * _3415;
                                float _3423 = _3420 * _3416;
                                float _3427 = 1.0 - (_3417 / (_3281 * _3281));
                                float _4530 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3428 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                                float _3432 = sqrt(_3417) * _3296.w;
                                float _3434 = 1.39999997615814208984375 / (_3432 + 1.39999997615814208984375);
                                float _3435 = _3434 * _3434;
                                float _3438 = ((1.0 - _3435) * dot(vec3(_3421, _3422, _3423), vec3(_748, _751, _754))) + _3435;
                                float _3441 = _3432 * _3432;
                                float _3445 = (fma(_2606, _3323.z, fma(_2605, _3323.y, _3323.x * _2604)) + _3323.w) / _3386;
                                float _3446 = (fma(_2606, _3339.z, fma(_2605, _3339.y, _3339.x * _2604)) + _3339.w) / _3386;
                                float _3450 = 1.0 - dot(vec2(_3445, _3446), vec2(_3445, _3446));
                                float _4546 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3451 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                                float _3452 = _3451 * (((isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0))) * _3428) / ((_3441 * 0.699999988079071044921875) + 1.0));
                                float _3464 = exp2(log2(1.0 / ((_3441 * 3.5) + 5.0)) * 0.25);
                                float _3465 = 1.0 - _945;
                                float _3472 = sqrt(1.0 - ((1.0 - (_3465 * _3465)) * (1.0 - (_3464 * _3464))));
                                float _3473 = _3472 * _3472;
                                float _3474 = _3473 * _3473;
                                float _3475 = _3421 - _2923;
                                float _3476 = _3422 - _2924;
                                float _3477 = _3423 - _2925;
                                float _3481 = inversesqrt(dot(vec3(_3475, _3476, _3477), vec3(_3475, _3476, _3477)));
                                float _3485 = dot(vec3(_748, _751, _754), vec3((-0.0) - _2923, (-0.0) - _2924, (-0.0) - _2925));
                                float _4557 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3488 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                                float _3489 = dot(vec3(_748, _751, _754), vec3(_3481 * _3475, _3481 * _3476, _3481 * _3477));
                                float _4568 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                                float _3492 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                                float _3496 = ((_3492 * _3492) * (_3474 + (-1.0))) + 1.0;
                                float _3497 = _3434 * _3473;
                                float _3498 = _3497 * _3497;
                                float _3504 = ((1.0 - _3498) * dot(vec3(_748, _751, _754), vec3(_3421, _3422, _3423))) + _3498;
                                float _4579 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                                float _3505 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                                float _3506 = 1.0 - _3473;
                                float _3516 = (0.5 / (((_3505 * ((_3488 * _3506) + _3473)) + 9.9999999392252902907785028219223e-09) + (((_3505 * _3506) + _3473) * _3488))) * _3505;
                                float _4590 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3526 = (_3451 * _3428) * (((_3474 * 3.1415927410125732421875) * (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0)))) / ((_3496 * _3496) * ((_3441 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3452 * _3296.z;
                                frontier_phi_75_pred_1 = _3452 * _3296.y;
                                frontier_phi_75_pred_2 = _3452 * _3296.x;
                                frontier_phi_75_pred_3 = _3526 * _3308.z;
                                frontier_phi_75_pred_4 = _3526 * _3308.y;
                                frontier_phi_75_pred_5 = _3526 * _3308.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3535 = frontier_phi_75_pred;
                            _3534 = frontier_phi_75_pred_1;
                            _3533 = frontier_phi_75_pred_2;
                            _3532 = frontier_phi_75_pred_3;
                            _3531 = frontier_phi_75_pred_4;
                            _3530 = frontier_phi_75_pred_5;
                            _3238 = _3533 + _3251;
                            _3239 = _3534 + _3252;
                            _3240 = _3535 + _3253;
                            _3235 = _3530 + _3248;
                            _3236 = _3531 + _3249;
                            _3237 = _3532 + _3250;
                            if (_3255 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3237;
                                _3251 = _3238;
                                _3252 = _3239;
                                _3253 = _3240;
                                _3254 = _3255;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3240;
                        frontier_phi_69_pred_1 = _3239;
                        frontier_phi_69_pred_2 = _3238;
                        frontier_phi_69_pred_3 = _3237;
                        frontier_phi_69_pred_4 = _3236;
                        frontier_phi_69_pred_5 = _3235;
                    }
                    _2908 = frontier_phi_69_pred;
                    _2906 = frontier_phi_69_pred_1;
                    _2904 = frontier_phi_69_pred_2;
                    _2902 = frontier_phi_69_pred_3;
                    _2900 = frontier_phi_69_pred_4;
                    _2898 = frontier_phi_69_pred_5;
                    uint _3043 = _3042 + 1u;
                    if (_3043 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3036 = _2898;
                        _3037 = _2900;
                        _3038 = _2902;
                        _3039 = _2904;
                        _3040 = _2906;
                        _3041 = _2908;
                        _3042 = _3043;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2908;
                frontier_phi_57_58_ladder_1 = _2906;
                frontier_phi_57_58_ladder_2 = _2904;
                frontier_phi_57_58_ladder_3 = _2902;
                frontier_phi_57_58_ladder_4 = _2900;
                frontier_phi_57_58_ladder_5 = _2898;
            }
            else
            {
                frontier_phi_57_58_ladder = _2786;
                frontier_phi_57_58_ladder_1 = _2784;
                frontier_phi_57_58_ladder_2 = _2782;
                frontier_phi_57_58_ladder_3 = _2780;
                frontier_phi_57_58_ladder_4 = _2778;
                frontier_phi_57_58_ladder_5 = _2776;
            }
            _2897 = frontier_phi_57_58_ladder_5;
            _2899 = frontier_phi_57_58_ladder_4;
            _2901 = frontier_phi_57_58_ladder_3;
            _2903 = frontier_phi_57_58_ladder_2;
            _2905 = frontier_phi_57_58_ladder_1;
            _2907 = frontier_phi_57_58_ladder;
        }
        float _2912 = isnan(1.0) ? _935 : (isnan(_935) ? 1.0 : min(_935, 1.0));
        _2662 = (_2912 * _2903) + _2099;
        _2664 = (_2912 * _2905) + _2101;
        _2666 = (_2912 * _2907) + _2103;
        _2668 = ((_2897 * _921) * _2912) + _2444;
        _2670 = ((_2899 * _922) * _2912) + _2446;
        _2672 = ((_2901 * _923) * _2912) + _2448;
    }
    else
    {
        _2662 = _2099;
        _2664 = _2101;
        _2666 = _2103;
        _2668 = _2444;
        _2670 = _2446;
        _2672 = _2448;
    }
    uint _2678 = _828 + uint(cbMatDynParam._m0[0u].w);
    float _2684 = cbInstanceData._m0[_2678].x * ((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _621) + cbMatDynParam._m0[7u].x) + (((_661 - (_661 * _587)) + (cbMatDynParam._m0[11u].x * _692)) * cbMatDynParam._m0[9u].x));
    float _2685 = cbInstanceData._m0[_2678].y * ((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _621) + cbMatDynParam._m0[7u].y) + (((_663 - (_663 * _587)) + (cbMatDynParam._m0[11u].y * _692)) * cbMatDynParam._m0[9u].y));
    float _2686 = cbInstanceData._m0[_2678].z * ((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _621) + cbMatDynParam._m0[7u].z) + (((_665 - (_665 * _587)) + (cbMatDynParam._m0[11u].z * _692)) * cbMatDynParam._m0[9u].z));
    float _4606 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _4617 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _4628 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _4639 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _2704 = (((isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2662 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _935))) + ((_2668 + ((isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))) * _1735)) * cbPerFrame._m0[3u].x)) + _2684;
    float _2706 = (_2685 + ((_2670 + ((isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))) * _1735)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2664 + ((isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))) * _935)));
    float _2708 = (_2686 + ((_2672 + ((isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))) * _1735)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (_2666 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _935)));
    float _2716 = cbMatDynParam._m0[12u].y - (cbMatDynParam._m0[12u].y * ((((isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) - _647) * _621) + _647));
    float _2721 = cbInstanceData._m0[_827 + 6u].w * (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0)));
    float _2726 = _724 / cbSceneParam._m0[86u].x;
    float _2727 = _725 / cbSceneParam._m0[86u].y;
    vec4 _2741 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2726, _2727, (log2((isnan(cbSceneParam._m0[77u].w) ? _718 : (isnan(_718) ? cbSceneParam._m0[77u].w : min(_718, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2743 = _2741.x;
    float _2744 = _2741.y;
    float _2745 = _2741.z;
    float _2746 = _2741.w;
    float _2838;
    float _2840;
    float _2842;
    float _2844;
    if (_718 > cbSceneParam._m0[78u].w)
    {
        float _2801 = isnan(_718) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _718 : min(cbSceneParam._m0[80u].w, _718));
        float _2802 = _2801 / _718;
        float _2813 = _2802 * _287;
        float _2814 = _288 * _2802;
        float _2815 = (-0.0) - _2814;
        float _2816 = _2802 * _289;
        float _2818 = (cbSceneParam._m0[77u].w * _2815) / _2801;
        float _2819 = _2818 + cbSceneParam._m0[79u].w;
        float _2820 = cbSceneParam._m0[79u].w - _2814;
        float _2826 = sqrt(((_2813 * _2813) + (_2814 * _2814)) + (_2816 * _2816));
        float _2829 = (1.0 - (cbSceneParam._m0[77u].w / _2801)) * _2826;
        float _2834 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2836 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2998;
        if (abs((_2815 - _2818) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2998 = ((((_2819 > 0.0) ? exp2(_2834 * _2819) : (2.0 - exp2(_2836 * _2819))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2829;
        }
        else
        {
            float _2958 = 1.0 / cbSceneParam._m0[80u].x;
            float _2959 = isnan(_2820) ? _2819 : (isnan(_2819) ? _2820 : max(_2819, _2820));
            float _2960 = isnan(_2820) ? _2819 : (isnan(_2819) ? _2820 : min(_2819, _2820));
            float _2969 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : min(_2959, 0.0));
            float _2970 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : min(_2960, 0.0));
            _2998 = ((abs(_2826 / _2815) * cbSceneParam._m0[80u].y) * ((((_2969 - _2970) * 2.0) - ((exp2(_2834 * (isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0)))) - exp2(_2834 * (isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0))))) * _2958)) - ((exp2(_2836 * _2969) - exp2(_2836 * _2970)) * _2958))) + (_2829 * cbSceneParam._m0[80u].z);
        }
        vec4 _3000 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2726, _2727, 1.0), 0.0);
        float _3009 = exp2((_2998 * (-1.44269502162933349609375)) * (1.0 - _3000.w));
        float _3010 = log2(_3009);
        float _3026 = log2(_2746);
        _2838 = (exp2(_3026 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3010 * cbSceneParam._m0[78u].x)) * _3000.x) / cbSceneParam._m0[78u].x)) + _2743;
        _2840 = (exp2(_3026 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3010 * cbSceneParam._m0[78u].y)) * _3000.y) / cbSceneParam._m0[78u].y)) + _2744;
        _2842 = (exp2(_3026 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3010 * cbSceneParam._m0[78u].z)) * _3000.z) / cbSceneParam._m0[78u].z)) + _2745;
        _2844 = _3009 * _2746;
    }
    else
    {
        _2838 = _2743;
        _2840 = _2744;
        _2842 = _2745;
        _2844 = _2746;
    }
    float _2856 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2857 = _2856 == 3.0;
    float _2858 = log2(_2844);
    float _2862 = exp2(_2858 * cbSceneParam._m0[78u].x);
    float _2863 = exp2(_2858 * cbSceneParam._m0[78u].y);
    float _2864 = exp2(_2858 * cbSceneParam._m0[78u].z);
    float _2865 = _2862 * (isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0)));
    float _2866 = _2863 * (isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0)));
    float _2867 = _2864 * (isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0)));
    float _2876 = (_2856 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2876 * (_2857 ? _2865 : (_2865 + (cbSceneParam._m0[72u].w * _2838)));
    SV_Target.y = _2876 * (_2857 ? _2866 : (_2866 + (cbSceneParam._m0[72u].w * _2840)));
    SV_Target.z = _2876 * (_2857 ? _2867 : (_2867 + (cbSceneParam._m0[72u].w * _2842)));
    SV_Target.w = _2721;
    SV_Target_1.x = ((_2716 * _2684) * _2862) * _2876;
    SV_Target_1.y = ((_2716 * _2685) * _2863) * _2876;
    SV_Target_1.z = ((_2716 * _2686) * _2864) * _2876;
    SV_Target_1.w = _2721;
}


