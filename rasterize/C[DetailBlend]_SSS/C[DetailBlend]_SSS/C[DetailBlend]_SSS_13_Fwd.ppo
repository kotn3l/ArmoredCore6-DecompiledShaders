#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1129;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226;
    float _227;
    float _228;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
    }
    else
    {
        _226 = _212;
        _227 = _213;
        _228 = _214;
    }
    vec4 _242 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _260 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _272 = cbMtdParam._m0[9u].x * _260.x;
    float _273 = cbMtdParam._m0[9u].y * _260.y;
    float _274 = cbMtdParam._m0[9u].z * _260.z;
    float _280 = exp2(log2(1.0 - _242.w) * 8.0);
    vec4 _292 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _326 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _334 = (((((cbMtdParam._m0[12u].x * _292.x) - _272) * _280) + _272) * 4.55000019073486328125) * _326.x;
    float _336 = (((((cbMtdParam._m0[12u].y * _292.y) - _273) * _280) + _273) * 4.55000019073486328125) * _326.y;
    float _338 = (((((cbMtdParam._m0[12u].z * _292.z) - _274) * _280) + _274) * 4.55000019073486328125) * _326.z;
    float _339 = _326.w * _260.w;
    float _360 = cbMtdParam._m0[14u].z + texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x;
    float _363 = ((cbMtdParam._m0[14u].y - _360) * _280) + _360;
    vec4 _375 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _377 = _375.x;
    float _378 = _375.y;
    float _384 = cbMtdParam._m0[13u].x + _375.z;
    vec4 _397 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _409 = (_242.z * 2.0) * ((((_397.z - _384) + cbMtdParam._m0[14u].x) * _280) + _384);
    float _413 = (_242.x * 2.0) + (-1.0);
    float _415 = (_242.y * 2.0) + (-1.0);
    float _416 = dot(vec2(_413, _415), vec2(_413, _415));
    float _3463 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _421 = sqrt(1.0 - (isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0))));
    float _434 = ((((((_397.x - _377) * _280) + _377) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _413;
    float _435 = ((((((_397.y - _378) * _280) + _378) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _415;
    float _438 = fma(_421, _226, fma(_435, _218 * TANGENT.x, (_204 * _196) * _434));
    float _441 = fma(_421, _227, fma(_435, _218 * TANGENT.y, (_204 * _197) * _434));
    float _444 = fma(_421, _228, fma(_435, _218 * TANGENT.z, (_204 * _198) * _434));
    float _448 = inversesqrt(dot(vec3(_438, _441, _444), vec3(_438, _441, _444)));
    float _449 = _448 * _438;
    float _450 = _448 * _441;
    float _451 = _448 * _444;
    float _3474 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _452 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
    float _3485 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _453 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    float _3496 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _454 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    float _3507 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _455 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    float _3518 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _456 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    float _3529 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _457 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
    float _473 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _516 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _526 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _516);
    float _527 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _516);
    float _528 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _516);
    float _532 = inversesqrt(dot(vec3(_526, _527, _528), vec3(_526, _527, _528)));
    float _533 = _526 * _532;
    float _534 = _527 * _532;
    float _535 = _528 * _532;
    float _541 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _542 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _544 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _546 = _544.w;
    float _566 = fma(_451, cbSceneParam._m0[5u].z, fma(_450, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _449));
    float _569 = fma(_451, cbSceneParam._m0[6u].z, fma(_450, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _449));
    float _572 = fma(_451, cbSceneParam._m0[7u].z, fma(_450, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _449));
    vec4 _574 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _576 = _574.x;
    float _588 = (((_574.y - _453) + (_574.w * _453)) * cbMtdParam._m0[3u].x) + _453;
    vec4 _589 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _605 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_576 * _576)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _589.z;
    float _614 = (((cbMatDynParam._m0[15u].x - _457) * cbMatDynParam._m0[15u].w) * _605) + _457;
    float _622 = ((_605 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _588)) + _588;
    uint _646 = uint(roundEven(NORMAL.w)) * 13u;
    uint _648 = (_646 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _654 = (cbMtdParam._m0[0u].x * _454) * cbInstanceData._m0[_648].x;
    float _655 = (cbMtdParam._m0[0u].y * _455) * cbInstanceData._m0[_648].y;
    float _656 = (cbMtdParam._m0[0u].z * _456) * cbInstanceData._m0[_648].z;
    float _3540 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _657 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    float _3551 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _658 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
    float _3562 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _659 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
    vec4 _660 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _665 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _676 = (((_665.x - _614) + (_665.w * _614)) * cbMtdParam._m0[3u].x) + _614;
    float _689 = (cbMtdParam._m0[3u].x * (((_657 * _546) - _657) + _660.x)) + _657;
    float _690 = (cbMtdParam._m0[3u].x * (((_658 * _546) - _658) + _660.y)) + _658;
    float _691 = (cbMtdParam._m0[3u].x * (((_659 * _546) - _659) + _660.z)) + _659;
    float _705 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_614 * (_454 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_614 * (_455 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_614 * (_456 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _709 = _705 * cbMatDynParam._m0[13u].w;
    float _719 = (_709 * (cbMatDynParam._m0[13u].x - _689)) + _689;
    float _720 = (_709 * (cbMatDynParam._m0[13u].y - _690)) + _690;
    float _721 = (_709 * (cbMatDynParam._m0[13u].z - _691)) + _691;
    float _729 = ((_705 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _676)) + _676;
    float _730 = 1.0 - _729;
    float _731 = _730 * _719;
    float _732 = _730 * _720;
    float _733 = _730 * _721;
    float _737 = (_719 + (-0.039999999105930328369140625)) * _729;
    float _738 = (_720 + (-0.039999999105930328369140625)) * _729;
    float _739 = (_721 + (-0.039999999105930328369140625)) * _729;
    float _740 = _737 + 0.039999999105930328369140625;
    float _741 = _738 + 0.039999999105930328369140625;
    float _742 = _739 + 0.039999999105930328369140625;
    vec4 _751 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _541, cbSceneParam._m0[86u].y * _542));
    float _754 = _751.x * TEXCOORD_4;
    float _755 = dot(vec3(_449, _450, _451), vec3(_533, _534, _535));
    float _758 = _755 * 2.0;
    float _762 = (_758 * _449) - _533;
    float _763 = (_758 * _450) - _534;
    float _764 = (_758 * _451) - _535;
    float _768 = abs(dot(vec3(_533, _534, _535), vec3(_449, _450, _451)));
    float _3573 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _770 = sqrt(_622);
    float _783 = exp2((_770 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_770 * 3.0));
    float _789 = (1.0 - _783) * ((_770 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _790 = _783 * _770;
    float _818 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1128;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _853 = fma(_826, cbModelParam._m0[26u].z, fma(_822, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _818));
        float _857 = fma(_826, cbModelParam._m0[27u].z, fma(_822, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _818));
        float _861 = fma(_826, cbModelParam._m0[28u].z, fma(_822, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _818));
        float _886 = _818 + _449;
        float _887 = _822 + _450;
        float _888 = _826 + _451;
        float _898 = fma(_888, cbModelParam._m0[26u].z, fma(_887, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _886)) - _853;
        float _899 = fma(_888, cbModelParam._m0[27u].z, fma(_887, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _886)) - _857;
        float _900 = fma(_888, cbModelParam._m0[28u].z, fma(_887, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _886)) - _861;
        float _904 = inversesqrt(dot(vec3(_898, _899, _900), vec3(_898, _899, _900)));
        float _917 = ((_904 * _898) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_853 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _918 = ((_904 * _899) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_857 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _919 = ((_904 * _900) / cbModelParam._m0[34u].z) + ((((((_861 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        float _956 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_922.x + (-0.5));
        float _958 = _956 * (_922.y + (-0.5));
        float _959 = _956 * (_922.z + (-0.5));
        float _966 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_929.x + (-0.5));
        float _968 = _966 * (_929.y + (-0.5));
        float _969 = _966 * (_929.z + (-0.5));
        float _976 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _977 = _976 * (_936.x + (-0.5));
        float _978 = _976 * (_936.y + (-0.5));
        float _979 = _976 * (_936.z + (-0.5));
        float _986 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_943.x + (-0.5));
        float _988 = _986 * (_943.y + (-0.5));
        float _989 = _986 * (_943.z + (-0.5));
        float _990 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _991 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _992 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _993 = _957 * 0.5;
        float _994 = _967 * 0.5;
        float _995 = _977 * 0.5;
        float _996 = dot(vec3(_993, _994, _995), vec3(_993, _994, _995));
        float _1001 = (_996 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_996);
        float _1010 = (dot(vec3(_449, _450, _451), vec3(_1001 * _993, _1001 * _994, _1001 * _995)) + 1.0) * 0.5;
        float _3599 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1020 = sqrt(((_994 * _994) + (_993 * _993)) + (_995 * _995)) / (_990 + 9.9999997473787516355514526367188e-06);
        float _3610 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3621 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * (_1022 + 1.0))) + _1027) * _990;
        float _1037 = _958 * 0.5;
        float _1038 = _968 * 0.5;
        float _1039 = _978 * 0.5;
        float _1040 = dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039));
        float _1045 = (_1040 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1040);
        float _1053 = (dot(vec3(_449, _450, _451), vec3(_1045 * _1037, _1045 * _1038, _1045 * _1039)) + 1.0) * 0.5;
        float _3632 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1062 = sqrt(((_1038 * _1038) + (_1037 * _1037)) + (_1039 * _1039)) / (_991 + 9.9999997473787516355514526367188e-06);
        float _3643 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3654 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * (_1064 + 1.0))) + _1069) * _991;
        float _1079 = _959 * 0.5;
        float _1080 = _969 * 0.5;
        float _1081 = _979 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_449, _450, _451), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3665 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_992 + 9.9999997473787516355514526367188e-06);
        float _3676 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3687 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_1106 + 1.0))) + _1111) * _992;
        _1128 = _959;
        _1130 = _958;
        _1131 = _957;
        _1132 = _969;
        _1133 = _968;
        _1134 = _967;
        _1135 = _979;
        _1136 = _978;
        _1137 = _977;
        _1138 = _992;
        _1139 = _991;
        _1140 = _990;
        _1141 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
        _1142 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
        _1143 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
    }
    else
    {
        _1128 = _1129;
        _1130 = _1129;
        _1131 = _1129;
        _1132 = _1129;
        _1133 = _1129;
        _1134 = _1129;
        _1135 = _1129;
        _1136 = _1129;
        _1137 = _1129;
        _1138 = _1129;
        _1139 = _1129;
        _1140 = _1129;
        _1141 = 0.0;
        _1142 = 0.0;
        _1143 = 0.0;
    }
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1169 = fma(_826, cbModelParam._m0[30u].z, fma(_822, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _818));
        float _1173 = fma(_826, cbModelParam._m0[31u].z, fma(_822, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _818));
        float _1177 = fma(_826, cbModelParam._m0[32u].z, fma(_822, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _818));
        float _1200 = _818 + _449;
        float _1201 = _822 + _450;
        float _1202 = _826 + _451;
        float _1212 = fma(_1202, cbModelParam._m0[30u].z, fma(_1201, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1200)) - _1169;
        float _1213 = fma(_1202, cbModelParam._m0[31u].z, fma(_1201, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1200)) - _1173;
        float _1214 = fma(_1202, cbModelParam._m0[32u].z, fma(_1201, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1200)) - _1177;
        float _1218 = inversesqrt(dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214)));
        float _1231 = ((_1218 * _1212) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1169 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1232 = ((_1218 * _1213) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1173 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1233 = ((_1218 * _1214) / cbModelParam._m0[35u].z) + ((((((_1177 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        float _1268 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1235.x + (-0.5));
        float _1270 = _1268 * (_1235.y + (-0.5));
        float _1271 = _1268 * (_1235.z + (-0.5));
        float _1278 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1242.x + (-0.5));
        float _1280 = _1278 * (_1242.y + (-0.5));
        float _1281 = _1278 * (_1242.z + (-0.5));
        float _1288 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1249.x + (-0.5));
        float _1290 = _1288 * (_1249.y + (-0.5));
        float _1291 = _1288 * (_1249.z + (-0.5));
        float _1298 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1256.x + (-0.5));
        float _1300 = _1298 * (_1256.y + (-0.5));
        float _1301 = _1298 * (_1256.z + (-0.5));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1305 = _1269 * 0.5;
        float _1306 = _1279 * 0.5;
        float _1307 = _1289 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_449, _450, _451), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _3728 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _3739 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _3750 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * (_1332 + 1.0))) + _1337) * _1302;
        float _1347 = _1270 * 0.5;
        float _1348 = _1280 * 0.5;
        float _1349 = _1290 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1363 = (dot(vec3(_449, _450, _451), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _3761 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1372 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _3772 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _3783 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_1374 + 1.0))) + _1379) * _1303;
        float _1389 = _1271 * 0.5;
        float _1390 = _1281 * 0.5;
        float _1391 = _1291 * 0.5;
        float _1392 = dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391));
        float _1397 = (_1392 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1392);
        float _1405 = (dot(vec3(_449, _450, _451), vec3(_1397 * _1389, _1397 * _1390, _1397 * _1391)) + 1.0) * 0.5;
        float _3794 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1414 = sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391)) / (_1304 + 9.9999997473787516355514526367188e-06);
        float _3805 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1416 = _1415 * 2.0;
        float _1420 = (1.0 - _1415) / (_1415 + 1.0);
        float _3816 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1430 = ((((1.0 - _1421) * (_1416 + 2.0)) * exp2(log2(isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_1416 + 1.0))) + _1421) * _1304;
        _1438 = _1271;
        _1439 = _1270;
        _1440 = _1269;
        _1441 = _1281;
        _1442 = _1280;
        _1443 = _1279;
        _1444 = _1291;
        _1445 = _1290;
        _1446 = _1289;
        _1447 = _1304;
        _1448 = _1303;
        _1449 = _1302;
        _1450 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
        _1451 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
        _1452 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)));
    }
    else
    {
        _1438 = _1129;
        _1439 = _1129;
        _1440 = _1129;
        _1441 = _1129;
        _1442 = _1129;
        _1443 = _1129;
        _1444 = _1129;
        _1445 = _1129;
        _1446 = _1129;
        _1447 = _1129;
        _1448 = _1129;
        _1449 = _1129;
        _1450 = 0.0;
        _1451 = 0.0;
        _1452 = 0.0;
    }
    float _1462 = (cbModelParam._m0[1u].x * (_1450 - _1141)) + _1141;
    float _1463 = (cbModelParam._m0[1u].x * (_1451 - _1142)) + _1142;
    float _1464 = (cbModelParam._m0[1u].x * (_1452 - _1143)) + _1143;
    float _1485 = fma(_1464, cbSceneParam._m0[89u].z, fma(_1463, cbSceneParam._m0[89u].y, _1462 * cbSceneParam._m0[89u].x));
    float _1488 = fma(_1464, cbSceneParam._m0[90u].z, fma(_1463, cbSceneParam._m0[90u].y, _1462 * cbSceneParam._m0[90u].x));
    float _1491 = fma(_1464, cbSceneParam._m0[91u].z, fma(_1463, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1462));
    float _1506 = _762 * 0.5;
    float _1507 = _763 * 0.5;
    float _1508 = _764 * 0.5;
    float _1509 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1440, _1443, _1446, _1449));
    float _1512 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1439, _1442, _1445, _1448));
    float _1515 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1438, _1441, _1444, _1447));
    float _1546;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1522 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1128, _1132, _1135, _1138));
        float _1526 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1130, _1133, _1136, _1139));
        float _1530 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1131, _1134, _1137, _1140));
        float _1537 = dot(vec4(cbModelParam._m0[39u]), vec4(_1506, _1507, _1508, 1.0));
        _1546 = dot(vec3(isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)), isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)), isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1537) ? 0.0 : (isnan(0.0) ? _1537 : max(0.0, _1537))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1546 = 1.0;
    }
    float _1557;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1548 = dot(vec4(cbModelParam._m0[40u]), vec4(_1506, _1507, _1508, 1.0));
        _1557 = dot(vec3(isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)), isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)), isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1548) ? 0.0 : (isnan(0.0) ? _1548 : max(0.0, _1548))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1557 = 1.0;
    }
    float _1561 = (_1557 * cbModelParam._m0[1u].x) + (_1546 * (1.0 - cbModelParam._m0[1u].x));
    float _1571 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _622);
    float _1572 = isnan(_1571) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1571 : min(cbModelParam._m0[25u].z, _1571));
    float _1652;
    float _1654;
    float _1656;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1619 = fma(_826, cbModelParam._m0[13u].z, fma(_822, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _818)) + cbModelParam._m0[13u].w;
        float _1623 = fma(_826, cbModelParam._m0[14u].z, fma(_822, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _818)) + cbModelParam._m0[14u].w;
        float _1627 = fma(_826, cbModelParam._m0[15u].z, fma(_822, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _818)) + cbModelParam._m0[15u].w;
        float _1630 = fma(_764, cbModelParam._m0[13u].z, fma(_763, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _762));
        float _1633 = fma(_764, cbModelParam._m0[14u].z, fma(_763, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _762));
        float _1636 = fma(_764, cbModelParam._m0[15u].z, fma(_763, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _762));
        float _1664;
        if (_1630 > 0.0)
        {
            _1664 = abs((1.0 - _1619) / _1630);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1619 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1664 = frontier_phi_16_14_ladder;
        }
        float _1870;
        if (_1633 > 0.0)
        {
            _1870 = abs((1.0 - _1623) / _1633);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1623 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1870 = frontier_phi_25_21_ladder;
        }
        float _2124;
        if (_1636 > 0.0)
        {
            _2124 = abs((1.0 - _1627) / _1636);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1627 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2124 = frontier_phi_37_32_ladder;
        }
        float _2126 = isnan(_1870) ? _1664 : (isnan(_1664) ? _1870 : min(_1664, _1870));
        float _2127 = isnan(_2124) ? _2126 : (isnan(_2126) ? _2124 : min(_2126, _2124));
        float _2131 = (_2127 * _1630) + _1619;
        float _2132 = (_2127 * _1633) + _1623;
        float _2133 = (_2127 * _1636) + _1627;
        float _2134 = _2127 * 9.9999997473787516355514526367188e-05;
        float _2136 = (-1.0) - _2134;
        float _2138 = _2134 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2133 > _2138) || ((_2133 < _2136) || ((_2132 > _2138) || ((_2132 < _2136) || ((_2131 < _2136) || (_2131 > _2138))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2261 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2133, cbModelParam._m0[9u].z, fma(_2132, cbModelParam._m0[9u].y, _2131 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2133, cbModelParam._m0[10u].z, fma(_2132, cbModelParam._m0[10u].y, _2131 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2133, cbModelParam._m0[11u].z, fma(_2132, cbModelParam._m0[11u].y, _2131 * cbModelParam._m0[11u].x))), _1572);
            frontier_phi_15_37_ladder = _2261.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2261.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2261.x * cbModelParam._m0[1u].y;
        }
        _1652 = frontier_phi_15_37_ladder_2;
        _1654 = frontier_phi_15_37_ladder_1;
        _1656 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1640 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_762, _763, _764), _1572);
        _1652 = _1640.x * cbModelParam._m0[1u].y;
        _1654 = _1640.y * cbModelParam._m0[1u].y;
        _1656 = _1640.z * cbModelParam._m0[1u].y;
    }
    float _1660 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _622);
    float _1661 = isnan(_1660) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1660 : min(cbModelParam._m0[25u].w, _1660));
    float _1754;
    float _1756;
    float _1758;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1718 = fma(_826, cbModelParam._m0[21u].z, fma(_822, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _818)) + cbModelParam._m0[21u].w;
        float _1722 = fma(_826, cbModelParam._m0[22u].z, fma(_822, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _818)) + cbModelParam._m0[22u].w;
        float _1726 = fma(_826, cbModelParam._m0[23u].z, fma(_822, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _818)) + cbModelParam._m0[23u].w;
        float _1729 = fma(_764, cbModelParam._m0[21u].z, fma(_763, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _762));
        float _1732 = fma(_764, cbModelParam._m0[22u].z, fma(_763, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _762));
        float _1735 = fma(_764, cbModelParam._m0[23u].z, fma(_763, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _762));
        float _1875;
        if (_1729 > 0.0)
        {
            _1875 = abs((1.0 - _1718) / _1729);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1718 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1875 = frontier_phi_27_23_ladder;
        }
        float _2151;
        if (_1732 > 0.0)
        {
            _2151 = abs((1.0 - _1722) / _1732);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1722 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2151 = frontier_phi_39_34_ladder;
        }
        float _2364;
        if (_1735 > 0.0)
        {
            _2364 = abs((1.0 - _1726) / _1735);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1726 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2364 = frontier_phi_48_45_ladder;
        }
        float _2366 = isnan(_2151) ? _1875 : (isnan(_1875) ? _2151 : min(_1875, _2151));
        float _2367 = isnan(_2364) ? _2366 : (isnan(_2366) ? _2364 : min(_2366, _2364));
        float _2371 = (_2367 * _1729) + _1718;
        float _2372 = (_2367 * _1732) + _1722;
        float _2373 = (_2367 * _1735) + _1726;
        float _2374 = _2367 * 9.9999997473787516355514526367188e-05;
        float _2375 = (-1.0) - _2374;
        float _2377 = _2374 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2373 > _2377) || ((_2373 < _2375) || ((_2372 > _2377) || ((_2372 < _2375) || ((_2371 < _2375) || (_2371 > _2377))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2576 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2373, cbModelParam._m0[17u].z, fma(_2372, cbModelParam._m0[17u].y, _2371 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2373, cbModelParam._m0[18u].z, fma(_2372, cbModelParam._m0[18u].y, _2371 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2373, cbModelParam._m0[19u].z, fma(_2372, cbModelParam._m0[19u].y, _2371 * cbModelParam._m0[19u].x))), _1661);
            frontier_phi_24_48_ladder = _2576.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2576.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2576.x * cbModelParam._m0[1u].z;
        }
        _1754 = frontier_phi_24_48_ladder_2;
        _1756 = frontier_phi_24_48_ladder_1;
        _1758 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1738 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_762, _763, _764), _1661);
        _1754 = _1738.x * cbModelParam._m0[1u].z;
        _1756 = _1738.y * cbModelParam._m0[1u].z;
        _1758 = _1738.z * cbModelParam._m0[1u].z;
    }
    float _1771 = (((_789 * _740) + _790) * _754) * ((cbModelParam._m0[1u].w * (_1754 - _1652)) + _1652);
    float _1773 = (((_789 * _741) + _790) * _754) * ((cbModelParam._m0[1u].w * (_1756 - _1654)) + _1654);
    float _1775 = (((_789 * _742) + _790) * _754) * ((cbModelParam._m0[1u].w * (_1758 - _1656)) + _1656);
    float _1778 = fma(_1775, cbSceneParam._m0[89u].z, fma(_1773, cbSceneParam._m0[89u].y, _1771 * cbSceneParam._m0[89u].x));
    float _1781 = fma(_1775, cbSceneParam._m0[90u].z, fma(_1773, cbSceneParam._m0[90u].y, _1771 * cbSceneParam._m0[90u].x));
    float _1784 = fma(_1775, cbSceneParam._m0[91u].z, fma(_1773, cbSceneParam._m0[91u].y, _1771 * cbSceneParam._m0[91u].x));
    uvec4 _1794 = floatBitsToUint(cbInstanceData._m0[_646 + 5u]);
    uint _1796 = _1794.x * 14u;
    uint _1797 = _1796 + 13u;
    float _1804 = _754 + (-1.0);
    float _1809 = (cbLight._m0[_1797].x * _1804) + 1.0;
    float _1810 = (cbLight._m0[_1797].y * _1804) + 1.0;
    float _1811 = (cbLight._m0[_1797].z * _1804) + 1.0;
    float _1812 = (cbLight._m0[_1797].w * _1804) + 1.0;
    uint _1813 = _1796 + 5u;
    float _1819 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
    uint _1823 = _1796 + 4u;
    float _1829 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
    uint _1833 = _1796 | 1u;
    float _1844 = dot(vec3(cbLight._m0[_1796].xyz), vec3(_449, _450, _451));
    float _1847 = dot(vec3(cbLight._m0[_1833].xyz), vec3(_449, _450, _451));
    float _3952 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _3963 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1852 = (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * 0.3183098733425140380859375;
    float _1854 = (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * 0.3183098733425140380859375;
    float _1861 = ((cbLight._m0[_1813].x * _1819) * _1854) + ((cbLight._m0[_1823].x * _1829) * _1852);
    float _1862 = ((_1819 * cbLight._m0[_1813].y) * _1854) + ((_1829 * cbLight._m0[_1823].y) * _1852);
    float _1863 = ((_1819 * cbLight._m0[_1813].z) * _1854) + ((_1829 * cbLight._m0[_1823].z) * _1852);
    uvec4 _1867 = floatBitsToUint(cbLight._m0[_1796 + 12u]);
    bool _1869 = _1867.x == 0u;
    float _1880;
    float _1882;
    float _1884;
    if (_1869)
    {
        _1880 = _1861;
        _1882 = _1862;
        _1884 = _1863;
    }
    else
    {
        uint _1888 = _1796 + 6u;
        float _1904 = (dot(vec3(cbLight._m0[_1796 + 2u].xyz), vec3(_449, _450, _451)) * 0.5) + 0.5;
        float _1905 = _1904 * _1904;
        float _3974 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
        float _1906 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1907 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
        _1880 = (((cbLight._m0[_1888].x * 0.3183098733425140380859375) * _1906) * _1907) + _1861;
        _1882 = (((cbLight._m0[_1888].y * 0.3183098733425140380859375) * _1906) * _1907) + _1862;
        _1884 = (((cbLight._m0[_1888].z * 0.3183098733425140380859375) * _1906) * _1907) + _1863;
    }
    bool _1887 = _1867.y == 0u;
    float _1925;
    float _1927;
    float _1929;
    if (_1887)
    {
        _1925 = _1880;
        _1927 = _1882;
        _1929 = _1884;
    }
    else
    {
        uint _2095 = _1796 + 7u;
        float _2111 = (dot(vec3(cbLight._m0[_1796 + 3u].xyz), vec3(_449, _450, _451)) * 0.5) + 0.5;
        float _2112 = _2111 * _2111;
        float _3990 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2113 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _2114 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
        _1925 = (((cbLight._m0[_2095].x * 0.3183098733425140380859375) * _2113) * _2114) + _1880;
        _1927 = (((cbLight._m0[_2095].y * 0.3183098733425140380859375) * _2113) * _2114) + _1882;
        _1929 = (((cbLight._m0[_2095].z * 0.3183098733425140380859375) * _2113) * _2114) + _1884;
    }
    uint _1932 = _1796 + 8u;
    float _1945 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1796].w)) * _622) * 0.949999988079071044921875);
    float _1946 = _1945 * _1945;
    float _1947 = cbLight._m0[_1796].x + _533;
    float _1948 = cbLight._m0[_1796].y + _534;
    float _1949 = cbLight._m0[_1796].z + _535;
    float _1953 = inversesqrt(dot(vec3(_1947, _1948, _1949), vec3(_1947, _1948, _1949)));
    float _1954 = _1953 * _1947;
    float _1955 = _1953 * _1948;
    float _1956 = _1953 * _1949;
    float _1957 = dot(vec3(_449, _450, _451), vec3(cbLight._m0[_1796].xyz));
    float _4006 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1960 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _4017 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _1961 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _1962 = dot(vec3(_449, _450, _451), vec3(_1954, _1955, _1956));
    float _4028 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1965 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _1966 = dot(vec3(cbLight._m0[_1796].xyz), vec3(_1954, _1955, _1956));
    float _4039 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1970 = _1946 * _1946;
    float _1974 = ((_1965 * _1965) * (_1970 + (-1.0))) + 1.0;
    float _1982 = exp2(log2(1.0 - (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * 5.0);
    float _1983 = 0.959999978542327880859375 - _737;
    float _1985 = 0.959999978542327880859375 - _738;
    float _1986 = 0.959999978542327880859375 - _739;
    float _1993 = 1.0 - _1946;
    float _2004 = (0.5 / (((_1961 * ((_1960 * _1993) + _1946)) + 9.9999999392252902907785028219223e-09) + (((_1961 * _1993) + _1946) * _1960))) * _1960;
    float _4050 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2006 = (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_1970 / ((_1974 * _1974) * 3.141590118408203125));
    uint _2017 = _1796 + 9u;
    float _2028 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1833].w)) * _622) * 0.949999988079071044921875);
    float _2029 = _2028 * _2028;
    float _2030 = cbLight._m0[_1833].x + _533;
    float _2031 = cbLight._m0[_1833].y + _534;
    float _2032 = cbLight._m0[_1833].z + _535;
    float _2036 = inversesqrt(dot(vec3(_2030, _2031, _2032), vec3(_2030, _2031, _2032)));
    float _2037 = _2036 * _2030;
    float _2038 = _2036 * _2031;
    float _2039 = _2036 * _2032;
    float _2040 = dot(vec3(_449, _450, _451), vec3(cbLight._m0[_1833].xyz));
    float _4061 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2043 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _2044 = dot(vec3(_449, _450, _451), vec3(_2037, _2038, _2039));
    float _4072 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2047 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _2048 = dot(vec3(cbLight._m0[_1833].xyz), vec3(_2037, _2038, _2039));
    float _4083 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2052 = _2029 * _2029;
    float _2056 = ((_2047 * _2047) * (_2052 + (-1.0))) + 1.0;
    float _2063 = exp2(log2(1.0 - (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) * 5.0);
    float _2070 = 1.0 - _2029;
    float _2080 = (0.5 / (((_1961 * ((_2043 * _2070) + _2029)) + 9.9999999392252902907785028219223e-09) + (((_1961 * _2070) + _2029) * _2043))) * _2043;
    float _4094 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2082 = (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_2052 / ((_2056 * _2056) * 3.141590118408203125));
    float _2092 = (((((_2063 * _1983) + _740) * cbLight._m0[_2017].x) * _2082) * _1819) + (((((_1982 * _1983) + _740) * cbLight._m0[_1932].x) * _2006) * _1829);
    float _2093 = (((((_2063 * _1985) + _741) * cbLight._m0[_2017].y) * _2082) * _1819) + (((((_1982 * _1985) + _741) * cbLight._m0[_1932].y) * _2006) * _1829);
    float _2094 = (((((_2063 * _1986) + _742) * cbLight._m0[_2017].z) * _2082) * _1819) + (((((_1982 * _1986) + _742) * cbLight._m0[_1932].z) * _2006) * _1829);
    float _2156;
    float _2158;
    float _2160;
    if (_1869)
    {
        _2156 = _2092;
        _2158 = _2093;
        _2160 = _2094;
    }
    else
    {
        uint _2162 = _1796 + 2u;
        uint _2166 = _1796 + 10u;
        float _2180 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2162].w)) * _622) * 0.949999988079071044921875);
        float _2181 = _2180 * _2180;
        float _2182 = cbLight._m0[_2162].x + _533;
        float _2183 = cbLight._m0[_2162].y + _534;
        float _2184 = cbLight._m0[_2162].z + _535;
        float _2188 = inversesqrt(dot(vec3(_2182, _2183, _2184), vec3(_2182, _2183, _2184)));
        float _2189 = _2188 * _2182;
        float _2190 = _2188 * _2183;
        float _2191 = _2188 * _2184;
        float _2192 = dot(vec3(_449, _450, _451), vec3(cbLight._m0[_2162].xyz));
        float _4105 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2195 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _2196 = dot(vec3(_449, _450, _451), vec3(_2189, _2190, _2191));
        float _4116 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2199 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _2200 = dot(vec3(cbLight._m0[_2162].xyz), vec3(_2189, _2190, _2191));
        float _4127 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2204 = _2181 * _2181;
        float _2208 = ((_2199 * _2199) * (_2204 + (-1.0))) + 1.0;
        float _2215 = exp2(log2(1.0 - (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0)))) * 5.0);
        float _2222 = 1.0 - _2181;
        float _2232 = (0.5 / (((_1961 * ((_2195 * _2222) + _2181)) + 9.9999999392252902907785028219223e-09) + (((_1961 * _2222) + _2181) * _2195))) * _2195;
        float _4138 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2234 = (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_2204 / ((_2208 * _2208) * 3.141590118408203125));
        float _2235 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
        _2156 = (((((_2215 * _1983) + _740) * cbLight._m0[_2166].x) * _2234) * _2235) + _2092;
        _2158 = (((((_2215 * _1985) + _741) * cbLight._m0[_2166].y) * _2234) * _2235) + _2093;
        _2160 = (((((_2215 * _1986) + _742) * cbLight._m0[_2166].z) * _2234) * _2235) + _2094;
    }
    float _2270;
    float _2272;
    float _2274;
    if (_1887)
    {
        _2270 = _2156;
        _2272 = _2158;
        _2274 = _2160;
    }
    else
    {
        uint _2281 = _1796 + 3u;
        uint _2285 = _1796 + 11u;
        float _2299 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2281].w)) * _622) * 0.949999988079071044921875);
        float _2300 = _2299 * _2299;
        float _2301 = cbLight._m0[_2281].x + _533;
        float _2302 = cbLight._m0[_2281].y + _534;
        float _2303 = cbLight._m0[_2281].z + _535;
        float _2307 = inversesqrt(dot(vec3(_2301, _2302, _2303), vec3(_2301, _2302, _2303)));
        float _2308 = _2307 * _2301;
        float _2309 = _2307 * _2302;
        float _2310 = _2307 * _2303;
        float _2311 = dot(vec3(_449, _450, _451), vec3(cbLight._m0[_2281].xyz));
        float _4154 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2314 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _2315 = dot(vec3(_449, _450, _451), vec3(_2308, _2309, _2310));
        float _4165 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2318 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _2319 = dot(vec3(cbLight._m0[_2281].xyz), vec3(_2308, _2309, _2310));
        float _4176 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2323 = _2300 * _2300;
        float _2327 = ((_2318 * _2318) * (_2323 + (-1.0))) + 1.0;
        float _2334 = exp2(log2(1.0 - (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) * 5.0);
        float _2341 = 1.0 - _2300;
        float _2351 = (0.5 / (((_1961 * ((_2314 * _2341) + _2300)) + 9.9999999392252902907785028219223e-09) + (((_1961 * _2341) + _2300) * _2314))) * _2314;
        float _4187 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2353 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_2323 / ((_2327 * _2327) * 3.141590118408203125));
        float _2354 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
        _2270 = (((((_2334 * _1983) + _740) * cbLight._m0[_2285].x) * _2353) * _2354) + _2156;
        _2272 = (((((_2334 * _1985) + _741) * cbLight._m0[_2285].y) * _2353) * _2354) + _2158;
        _2274 = (((((_2334 * _1986) + _742) * cbLight._m0[_2285].z) * _2353) * _2354) + _2160;
    }
    float _2488;
    float _2490;
    float _2492;
    float _2494;
    float _2496;
    float _2498;
    if (_1794.y == 0u)
    {
        float _2429 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2430 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2429;
        float _2431 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2429;
        float _2432 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2429;
        uvec4 _2444 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2445 = _2444.x;
        uint _2456 = uint((float(_2444.y) * floor(float(uint(cbSceneParam._m0[85u].y * _542) / _2445))) + floor(float(uint(cbSceneParam._m0[85u].x * _541) / _2445)));
        float _2466 = (log2(_2432 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2467 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        uint _2470 = uint(isnan(14.0) ? _2467 : (isnan(_2467) ? 14.0 : min(_2467, 14.0)));
        uvec4 _2475 = texelFetch(g_lightClusterGridBuffer, int(((_2470 << 2u) + (_2456 << 6u)) >> 2u));
        uint _2476 = _2475.x;
        uint _2477 = _2444.z;
        float _2581;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        if (((((1u << ((_2477 >> 4u) & 15u)) + 4294967295u) & _2476) == 0u) || ((_2477 & 240u) == 0u))
        {
            _2581 = 0.0;
            _2583 = 0.0;
            _2585 = 0.0;
            _2587 = 0.0;
            _2589 = 0.0;
            _2591 = 0.0;
        }
        else
        {
            float _2582;
            float _2584;
            float _2586;
            float _2588;
            float _2590;
            float _2592;
            float _2725 = 0.0;
            float _2726 = 0.0;
            float _2727 = 0.0;
            float _2728 = 0.0;
            float _2729 = 0.0;
            float _2730 = 0.0;
            uint _2731 = 0u;
            uint _2740;
            bool _2741;
            for (;;)
            {
                _2740 = texelFetch(g_lightClassification, int((((_2470 << 5u) + (_2456 << 9u)) + (_2731 << 2u)) >> 2u)).x;
                _2741 = _2740 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2741)
                {
                    frontier_phi_63_pred = _2730;
                    frontier_phi_63_pred_1 = _2729;
                    frontier_phi_63_pred_2 = _2728;
                    frontier_phi_63_pred_3 = _2727;
                    frontier_phi_63_pred_4 = _2726;
                    frontier_phi_63_pred_5 = _2725;
                }
                else
                {
                    float _2849;
                    float _2850;
                    float _2851;
                    float _2852;
                    float _2853;
                    float _2854;
                    uint _2855;
                    _2849 = _2725;
                    _2850 = _2726;
                    _2851 = _2727;
                    _2852 = _2728;
                    _2853 = _2729;
                    _2854 = _2730;
                    _2855 = _2740;
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    float _2785;
                    float _2786;
                    for (;;)
                    {
                        uint _2859 = uint(findLSB(_2855)) + (_2731 << 5u);
                        uint _2856 = (_2855 + 4294967295u) & _2855;
                        uint _2861 = _2859 * 48u;
                        vec4 _2875 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2861)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 3u)).x));
                        uint _2881 = (_2859 * 48u) + 4u;
                        vec4 _2894 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2881)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2881 + 3u)).x));
                        uint _2900 = (_2859 * 48u) + 8u;
                        vec3 _2911 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2900)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 2u)).x));
                        float _2915 = _2875.x - _2430;
                        float _2916 = _2875.y - _2431;
                        float _2917 = _2875.z - _2432;
                        float _2918 = dot(vec3(_2915, _2916, _2917), vec3(_2915, _2916, _2917));
                        float _2921 = inversesqrt(_2918);
                        float _2922 = _2921 * _2915;
                        float _2923 = _2921 * _2916;
                        float _2924 = _2921 * _2917;
                        float _2925 = dot(vec3(_566, _569, _572), vec3(_2922, _2923, _2924));
                        float _2930 = 1.0 - (_2918 * _2875.w);
                        float _4213 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                        float _2931 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
                        float _2932 = sqrt(_2918) * _2894.w;
                        float _2935 = 1.39999997615814208984375 / (_2932 + 1.39999997615814208984375);
                        float _2936 = _2935 * _2935;
                        float _2939 = ((1.0 - _2936) * _2925) + _2936;
                        float _2942 = _2932 * _2932;
                        float _2946 = ((isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0))) * _2931) / ((_2942 * 0.699999988079071044921875) + 1.0);
                        float _2950 = (-0.0) - _2430;
                        float _2951 = (-0.0) - _2431;
                        float _2952 = (-0.0) - _2432;
                        float _2956 = inversesqrt(dot(vec3(_2950, _2951, _2952), vec3(_2950, _2951, _2952)));
                        float _2957 = _2956 * _2950;
                        float _2958 = _2956 * _2951;
                        float _2959 = _2956 * _2952;
                        float _2967 = exp2(log2(1.0 / ((_2942 * 3.5) + 5.0)) * 0.25);
                        float _2968 = 1.0 - _770;
                        float _2975 = sqrt(1.0 - ((1.0 - (_2968 * _2968)) * (1.0 - (_2967 * _2967))));
                        float _2976 = _2975 * _2975;
                        float _2977 = _2976 * _2976;
                        float _2978 = _2957 + _2922;
                        float _2979 = _2958 + _2923;
                        float _2980 = _2959 + _2924;
                        float _2984 = inversesqrt(dot(vec3(_2978, _2979, _2980), vec3(_2978, _2979, _2980)));
                        float _2988 = dot(vec3(_566, _569, _572), vec3(_2957, _2958, _2959));
                        float _4229 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                        float _2991 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                        float _2992 = dot(vec3(_566, _569, _572), vec3(_2984 * _2978, _2984 * _2979, _2984 * _2980));
                        float _4240 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                        float _2995 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
                        float _2999 = ((_2995 * _2995) * (_2977 + (-1.0))) + 1.0;
                        float _3000 = _2935 * _2976;
                        float _3001 = _3000 * _3000;
                        float _3004 = ((1.0 - _3001) * _2925) + _3001;
                        float _4251 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                        float _3005 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
                        float _3006 = 1.0 - _2976;
                        float _3016 = (0.5 / (((_3005 * ((_2991 * _3006) + _2976)) + 9.9999999392252902907785028219223e-09) + (((_3005 * _3006) + _2976) * _2991))) * _3005;
                        float _4262 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                        float _3027 = (((_2977 * 3.1415927410125732421875) * (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0)))) / ((_2999 * _2999) * ((_2942 * 2.1991131305694580078125) + 3.141590118408203125))) * _2931;
                        _2784 = (_2946 * _2894.x) + _2852;
                        _2785 = (_2946 * _2894.y) + _2853;
                        _2786 = (_2946 * _2894.z) + _2854;
                        _2781 = (_3027 * _2911.x) + _2849;
                        _2782 = (_3027 * _2911.y) + _2850;
                        _2783 = (_3027 * _2911.z) + _2851;
                        if (_2856 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2849 = _2781;
                            _2850 = _2782;
                            _2851 = _2783;
                            _2852 = _2784;
                            _2853 = _2785;
                            _2854 = _2786;
                            _2855 = _2856;
                        }
                    }
                    frontier_phi_63_pred = _2786;
                    frontier_phi_63_pred_1 = _2785;
                    frontier_phi_63_pred_2 = _2784;
                    frontier_phi_63_pred_3 = _2783;
                    frontier_phi_63_pred_4 = _2782;
                    frontier_phi_63_pred_5 = _2781;
                }
                _2592 = frontier_phi_63_pred;
                _2590 = frontier_phi_63_pred_1;
                _2588 = frontier_phi_63_pred_2;
                _2586 = frontier_phi_63_pred_3;
                _2584 = frontier_phi_63_pred_4;
                _2582 = frontier_phi_63_pred_5;
                uint _2732 = _2731 + 1u;
                if (_2732 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2725 = _2582;
                    _2726 = _2584;
                    _2727 = _2586;
                    _2728 = _2588;
                    _2729 = _2590;
                    _2730 = _2592;
                    _2731 = _2732;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2581 = _2582;
            _2583 = _2584;
            _2585 = _2586;
            _2587 = _2588;
            _2589 = _2590;
            _2591 = _2592;
        }
        uvec4 _2595 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2596 = _2595.z;
        uint _2598 = (_2596 >> 8u) & 15u;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        float _2701;
        float _2703;
        if (((4294967295u << _2598) & _2476) == 0u)
        {
            _2693 = _2581;
            _2695 = _2583;
            _2697 = _2585;
            _2699 = _2587;
            _2701 = _2589;
            _2703 = _2591;
        }
        else
        {
            float _2718 = inversesqrt(dot(vec3(_2430, _2431, _2432), vec3(_2430, _2431, _2432)));
            float _2719 = _2718 * _2430;
            float _2720 = _2718 * _2431;
            float _2721 = _2718 * _2432;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2598 < ((_2596 >> 12u) & 15u))
            {
                float _2694;
                float _2696;
                float _2698;
                float _2700;
                float _2702;
                float _2704;
                float _2832 = _2581;
                float _2833 = _2583;
                float _2834 = _2585;
                float _2835 = _2587;
                float _2836 = _2589;
                float _2837 = _2591;
                uint _2838 = _2598;
                uint _2847;
                bool _2848;
                for (;;)
                {
                    _2847 = texelFetch(g_lightClassification, int((((_2470 << 5u) + (_2456 << 9u)) + (_2838 << 2u)) >> 2u)).x;
                    _2848 = _2847 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2848)
                    {
                        frontier_phi_69_pred = _2837;
                        frontier_phi_69_pred_1 = _2836;
                        frontier_phi_69_pred_2 = _2835;
                        frontier_phi_69_pred_3 = _2834;
                        frontier_phi_69_pred_4 = _2833;
                        frontier_phi_69_pred_5 = _2832;
                    }
                    else
                    {
                        float _3032;
                        float _3033;
                        float _3034;
                        float _3035;
                        float _3036;
                        float _3037;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3045 = _2832;
                        float _3046 = _2833;
                        float _3047 = _2834;
                        float _3048 = _2835;
                        float _3049 = _2836;
                        float _3050 = _2837;
                        uint _3051 = _2847;
                        uint _3052;
                        vec4 _3077;
                        float _3078;
                        vec4 _3093;
                        vec3 _3105;
                        vec4 _3120;
                        vec4 _3136;
                        float _3183;
                        bool _3184;
                        for (;;)
                        {
                            uint _3062 = ((_2838 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3051));
                            _3052 = (_3051 + 4294967295u) & _3051;
                            uint _3064 = _3062 * 40u;
                            _3077 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3064)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 3u)).x));
                            _3078 = _3077.w;
                            uint _3080 = (_3062 * 40u) + 4u;
                            _3093 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 3u)).x));
                            uint _3095 = (_3062 * 40u) + 8u;
                            _3105 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3095)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 2u)).x));
                            uint _3107 = (_3062 * 40u) + 16u;
                            _3120 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 3u)).x));
                            uint _3123 = (_3062 * 40u) + 20u;
                            _3136 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 3u)).x));
                            uint _3139 = (_3062 * 40u) + 24u;
                            vec4 _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            uint _3158 = (_3062 * 40u) + 28u;
                            vec4 _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            _3183 = fma(_2432, _3171.z, fma(_2431, _3171.y, _3171.x * _2430)) + _3171.w;
                            _3184 = !((fma(_2432, _3152.z, fma(_2431, _3152.y, _3152.x * _2430)) + _3152.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3184)
                            {
                                float _3211 = _3077.x - _2430;
                                float _3212 = _3077.y - _2431;
                                float _3213 = _3077.z - _2432;
                                float _3214 = dot(vec3(_3211, _3212, _3213), vec3(_3211, _3212, _3213));
                                float _3217 = inversesqrt(_3214);
                                float _3218 = _3217 * _3211;
                                float _3219 = _3217 * _3212;
                                float _3220 = _3217 * _3213;
                                float _3224 = 1.0 - (_3214 / (_3078 * _3078));
                                float _4273 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                                float _3225 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
                                float _3229 = sqrt(_3214) * _3093.w;
                                float _3231 = 1.39999997615814208984375 / (_3229 + 1.39999997615814208984375);
                                float _3232 = _3231 * _3231;
                                float _3235 = ((1.0 - _3232) * dot(vec3(_3218, _3219, _3220), vec3(_566, _569, _572))) + _3232;
                                float _3238 = _3229 * _3229;
                                float _3242 = (fma(_2432, _3120.z, fma(_2431, _3120.y, _3120.x * _2430)) + _3120.w) / _3183;
                                float _3243 = (fma(_2432, _3136.z, fma(_2431, _3136.y, _3136.x * _2430)) + _3136.w) / _3183;
                                float _3247 = 1.0 - dot(vec2(_3242, _3243), vec2(_3242, _3243));
                                float _4289 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3248 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                                float _3249 = _3248 * (((isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0))) * _3225) / ((_3238 * 0.699999988079071044921875) + 1.0));
                                float _3261 = exp2(log2(1.0 / ((_3238 * 3.5) + 5.0)) * 0.25);
                                float _3262 = 1.0 - _770;
                                float _3269 = sqrt(1.0 - ((1.0 - (_3262 * _3262)) * (1.0 - (_3261 * _3261))));
                                float _3270 = _3269 * _3269;
                                float _3271 = _3270 * _3270;
                                float _3272 = _3218 - _2719;
                                float _3273 = _3219 - _2720;
                                float _3274 = _3220 - _2721;
                                float _3278 = inversesqrt(dot(vec3(_3272, _3273, _3274), vec3(_3272, _3273, _3274)));
                                float _3282 = dot(vec3(_566, _569, _572), vec3((-0.0) - _2719, (-0.0) - _2720, (-0.0) - _2721));
                                float _4300 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3285 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
                                float _3286 = dot(vec3(_566, _569, _572), vec3(_3278 * _3272, _3278 * _3273, _3278 * _3274));
                                float _4311 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3289 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
                                float _3293 = ((_3289 * _3289) * (_3271 + (-1.0))) + 1.0;
                                float _3294 = _3231 * _3270;
                                float _3295 = _3294 * _3294;
                                float _3301 = ((1.0 - _3295) * dot(vec3(_566, _569, _572), vec3(_3218, _3219, _3220))) + _3295;
                                float _4322 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                                float _3302 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                                float _3303 = 1.0 - _3270;
                                float _3313 = (0.5 / (((_3302 * ((_3285 * _3303) + _3270)) + 9.9999999392252902907785028219223e-09) + (((_3302 * _3303) + _3270) * _3285))) * _3302;
                                float _4333 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3323 = (_3248 * _3225) * (((_3271 * 3.1415927410125732421875) * (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0)))) / ((_3293 * _3293) * ((_3238 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3249 * _3093.z;
                                frontier_phi_75_pred_1 = _3249 * _3093.y;
                                frontier_phi_75_pred_2 = _3249 * _3093.x;
                                frontier_phi_75_pred_3 = _3323 * _3105.z;
                                frontier_phi_75_pred_4 = _3323 * _3105.y;
                                frontier_phi_75_pred_5 = _3323 * _3105.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3332 = frontier_phi_75_pred;
                            _3331 = frontier_phi_75_pred_1;
                            _3330 = frontier_phi_75_pred_2;
                            _3329 = frontier_phi_75_pred_3;
                            _3328 = frontier_phi_75_pred_4;
                            _3327 = frontier_phi_75_pred_5;
                            _3035 = _3330 + _3048;
                            _3036 = _3331 + _3049;
                            _3037 = _3332 + _3050;
                            _3032 = _3327 + _3045;
                            _3033 = _3328 + _3046;
                            _3034 = _3329 + _3047;
                            if (_3052 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3045 = _3032;
                                _3046 = _3033;
                                _3047 = _3034;
                                _3048 = _3035;
                                _3049 = _3036;
                                _3050 = _3037;
                                _3051 = _3052;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3037;
                        frontier_phi_69_pred_1 = _3036;
                        frontier_phi_69_pred_2 = _3035;
                        frontier_phi_69_pred_3 = _3034;
                        frontier_phi_69_pred_4 = _3033;
                        frontier_phi_69_pred_5 = _3032;
                    }
                    _2704 = frontier_phi_69_pred;
                    _2702 = frontier_phi_69_pred_1;
                    _2700 = frontier_phi_69_pred_2;
                    _2698 = frontier_phi_69_pred_3;
                    _2696 = frontier_phi_69_pred_4;
                    _2694 = frontier_phi_69_pred_5;
                    uint _2839 = _2838 + 1u;
                    if (_2839 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2832 = _2694;
                        _2833 = _2696;
                        _2834 = _2698;
                        _2835 = _2700;
                        _2836 = _2702;
                        _2837 = _2704;
                        _2838 = _2839;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2704;
                frontier_phi_57_58_ladder_1 = _2702;
                frontier_phi_57_58_ladder_2 = _2700;
                frontier_phi_57_58_ladder_3 = _2698;
                frontier_phi_57_58_ladder_4 = _2696;
                frontier_phi_57_58_ladder_5 = _2694;
            }
            else
            {
                frontier_phi_57_58_ladder = _2591;
                frontier_phi_57_58_ladder_1 = _2589;
                frontier_phi_57_58_ladder_2 = _2587;
                frontier_phi_57_58_ladder_3 = _2585;
                frontier_phi_57_58_ladder_4 = _2583;
                frontier_phi_57_58_ladder_5 = _2581;
            }
            _2693 = frontier_phi_57_58_ladder_5;
            _2695 = frontier_phi_57_58_ladder_4;
            _2697 = frontier_phi_57_58_ladder_3;
            _2699 = frontier_phi_57_58_ladder_2;
            _2701 = frontier_phi_57_58_ladder_1;
            _2703 = frontier_phi_57_58_ladder;
        }
        float _2708 = isnan(1.0) ? _754 : (isnan(_754) ? 1.0 : min(_754, 1.0));
        _2488 = (_2708 * _2699) + _1925;
        _2490 = (_2708 * _2701) + _1927;
        _2492 = (_2708 * _2703) + _1929;
        _2494 = ((_2693 * _740) * _2708) + _2270;
        _2496 = ((_2695 * _741) * _2708) + _2272;
        _2498 = ((_2697 * _742) * _2708) + _2274;
    }
    else
    {
        _2488 = _1925;
        _2490 = _1927;
        _2492 = _1929;
        _2494 = _2270;
        _2496 = _2272;
        _2498 = _2274;
    }
    float _4349 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _4360 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _4371 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _4382 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _2516 = ((isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_2488 + ((isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))) * _754))) + ((_2494 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1561)) * cbPerFrame._m0[3u].x);
    float _2517 = ((isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2490 + ((isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))) * _754))) + ((_2496 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1561)) * cbPerFrame._m0[3u].x);
    float _2518 = ((isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_2492 + ((isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))) * _754))) + ((_2498 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1561)) * cbPerFrame._m0[3u].x);
    float _2526 = cbInstanceData._m0[_646 + 6u].w * (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0)));
    float _2531 = _541 / cbSceneParam._m0[86u].x;
    float _2532 = _542 / cbSceneParam._m0[86u].y;
    vec4 _2546 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2531, _2532, (log2((isnan(cbSceneParam._m0[77u].w) ? _473 : (isnan(_473) ? cbSceneParam._m0[77u].w : min(_473, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2548 = _2546.x;
    float _2549 = _2546.y;
    float _2550 = _2546.z;
    float _2551 = _2546.w;
    float _2643;
    float _2645;
    float _2647;
    float _2649;
    if (_473 > cbSceneParam._m0[78u].w)
    {
        float _2606 = isnan(_473) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _473 : min(cbSceneParam._m0[80u].w, _473));
        float _2607 = _2606 / _473;
        float _2618 = _2607 * _526;
        float _2619 = _527 * _2607;
        float _2620 = (-0.0) - _2619;
        float _2621 = _2607 * _528;
        float _2623 = (cbSceneParam._m0[77u].w * _2620) / _2606;
        float _2624 = _2623 + cbSceneParam._m0[79u].w;
        float _2625 = cbSceneParam._m0[79u].w - _2619;
        float _2631 = sqrt(((_2618 * _2618) + (_2619 * _2619)) + (_2621 * _2621));
        float _2634 = (1.0 - (cbSceneParam._m0[77u].w / _2606)) * _2631;
        float _2639 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2641 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2794;
        if (abs((_2620 - _2623) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2794 = ((((_2624 > 0.0) ? exp2(_2639 * _2624) : (2.0 - exp2(_2641 * _2624))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2634;
        }
        else
        {
            float _2754 = 1.0 / cbSceneParam._m0[80u].x;
            float _2755 = isnan(_2625) ? _2624 : (isnan(_2624) ? _2625 : max(_2624, _2625));
            float _2756 = isnan(_2625) ? _2624 : (isnan(_2624) ? _2625 : min(_2624, _2625));
            float _2765 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : min(_2755, 0.0));
            float _2766 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : min(_2756, 0.0));
            _2794 = ((abs(_2631 / _2620) * cbSceneParam._m0[80u].y) * ((((_2765 - _2766) * 2.0) - ((exp2(_2639 * (isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0)))) - exp2(_2639 * (isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0))))) * _2754)) - ((exp2(_2641 * _2765) - exp2(_2641 * _2766)) * _2754))) + (_2634 * cbSceneParam._m0[80u].z);
        }
        vec4 _2796 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2531, _2532, 1.0), 0.0);
        float _2805 = exp2((_2794 * (-1.44269502162933349609375)) * (1.0 - _2796.w));
        float _2806 = log2(_2805);
        float _2822 = log2(_2551);
        _2643 = (exp2(_2822 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2806 * cbSceneParam._m0[78u].x)) * _2796.x) / cbSceneParam._m0[78u].x)) + _2548;
        _2645 = (exp2(_2822 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2806 * cbSceneParam._m0[78u].y)) * _2796.y) / cbSceneParam._m0[78u].y)) + _2549;
        _2647 = (exp2(_2822 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2806 * cbSceneParam._m0[78u].z)) * _2796.z) / cbSceneParam._m0[78u].z)) + _2550;
        _2649 = _2805 * _2551;
    }
    else
    {
        _2643 = _2548;
        _2645 = _2549;
        _2647 = _2550;
        _2649 = _2551;
    }
    float _2661 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2662 = _2661 == 3.0;
    float _2663 = log2(_2649);
    float _2670 = exp2(_2663 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0)));
    float _2671 = exp2(_2663 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0)));
    float _2672 = exp2(_2663 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0)));
    float _2681 = (_2661 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2681 * (_2662 ? _2670 : (_2670 + (cbSceneParam._m0[72u].w * _2643)));
    SV_Target.y = _2681 * (_2662 ? _2671 : (_2671 + (cbSceneParam._m0[72u].w * _2645)));
    SV_Target.z = _2681 * (_2662 ? _2672 : (_2672 + (cbSceneParam._m0[72u].w * _2647)));
    SV_Target.w = _2526;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2526;
}


