#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1249;
float _3661;
float _3662;
float _3663;
float _3664;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236;
    float _237;
    float _238;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
    }
    else
    {
        _236 = _222;
        _237 = _223;
        _238 = _224;
    }
    vec4 _252 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _258 = _252.w;
    vec4 _270 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _282 = cbMtdParam._m0[9u].x * _270.x;
    float _283 = cbMtdParam._m0[9u].y * _270.y;
    float _284 = cbMtdParam._m0[9u].z * _270.z;
    float _290 = exp2(log2(1.0 - _258) * 8.0);
    vec4 _302 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _327 = exp2(log2(_258) * 8.0);
    vec4 _340 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    vec4 _365 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _373 = (((((cbMtdParam._m0[12u].x * _302.x) - _282) * _290) + _282) * 4.55000019073486328125) * _365.x;
    float _375 = (((((cbMtdParam._m0[12u].y * _302.y) - _283) * _290) + _283) * 4.55000019073486328125) * _365.y;
    float _377 = (((((cbMtdParam._m0[12u].z * _302.z) - _284) * _290) + _284) * 4.55000019073486328125) * _365.z;
    float _384 = (((cbMtdParam._m0[11u].x * _340.x) - _373) * _327) + _373;
    float _385 = (((cbMtdParam._m0[11u].y * _340.y) - _375) * _327) + _375;
    float _386 = (((cbMtdParam._m0[11u].z * _340.z) - _377) * _327) + _377;
    float _387 = _365.w * _270.w;
    vec4 _404 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _408 = cbMtdParam._m0[14u].z + _404.x;
    float _411 = ((cbMtdParam._m0[14u].y - _408) * _290) + _408;
    float _418 = ((cbMtdParam._m0[15u].x - _411) * _327) + _411;
    vec4 _430 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _432 = _430.x;
    float _433 = _430.y;
    float _439 = cbMtdParam._m0[13u].x + _430.z;
    vec4 _452 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _473 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _481 = (_252.z * 2.0) * ((((_452.z - _439) + cbMtdParam._m0[14u].x) * _290) + _439);
    float _485 = (((_473.z - _481) + cbMtdParam._m0[13u].w) * _327) + _481;
    float _489 = (_252.x * 2.0) + (-1.0);
    float _491 = (_252.y * 2.0) + (-1.0);
    float _492 = dot(vec2(_489, _491), vec2(_489, _491));
    float _3673 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _497 = sqrt(1.0 - (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))));
    float _502 = ((_452.x - _432) * _290) + _432;
    float _503 = ((_452.y - _433) * _290) + _433;
    float _516 = ((((((_473.x - _502) * _327) + _502) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _489;
    float _517 = ((((((_473.y - _503) * _327) + _503) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _491;
    float _520 = fma(_497, _236, fma(_517, _228 * TANGENT.x, (_214 * _206) * _516));
    float _523 = fma(_497, _237, fma(_517, _228 * TANGENT.y, (_214 * _207) * _516));
    float _526 = fma(_497, _238, fma(_517, _228 * TANGENT.z, (_214 * _208) * _516));
    float _530 = inversesqrt(dot(vec3(_520, _523, _526), vec3(_520, _523, _526)));
    float _531 = _530 * _520;
    float _532 = _530 * _523;
    float _533 = _530 * _526;
    float _3684 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _534 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _3695 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _535 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _3706 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _536 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _3717 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _537 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _3728 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _538 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _3739 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _539 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _555 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _597 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _607 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _597);
    float _608 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _597);
    float _609 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _597);
    float _613 = inversesqrt(dot(vec3(_607, _608, _609), vec3(_607, _608, _609)));
    float _614 = _607 * _613;
    float _615 = _608 * _613;
    float _616 = _609 * _613;
    vec4 _621 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _623 = _621.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _928 = sqrt(((_607 * _607) + (_608 * _608)) + (_609 * _609));
        float _934 = (cbMatDynParam._m0[5u].x * _928) + cbMatDynParam._m0[5u].y;
        float _3750 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _939 = (cbMatDynParam._m0[5u].z * _928) + cbMatDynParam._m0[5u].w;
        float _3761 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) - _935)) + _935) < ((_623 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _634 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _635 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _637 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _639 = _637.w;
    float _658 = fma(_533, cbSceneParam._m0[5u].z, fma(_532, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _531));
    float _661 = fma(_533, cbSceneParam._m0[6u].z, fma(_532, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _531));
    float _664 = fma(_533, cbSceneParam._m0[7u].z, fma(_532, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _531));
    vec4 _666 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _668 = _666.x;
    float _680 = (((_666.y - _535) + (_666.w * _535)) * cbMtdParam._m0[3u].x) + _535;
    vec4 _681 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _697 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_668 * _668)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _681.z;
    float _705 = (((cbMatDynParam._m0[15u].x - _539) * cbMatDynParam._m0[15u].w) * _697) + _539;
    float _713 = ((_697 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _680)) + _680;
    uint _737 = uint(roundEven(NORMAL.w)) * 13u;
    uint _738 = _737 + 9u;
    uint _739 = _738 + uint(cbMatDynParam._m0[0u].w);
    float _745 = (cbMtdParam._m0[0u].x * _536) * cbInstanceData._m0[_739].x;
    float _746 = (cbMtdParam._m0[0u].y * _537) * cbInstanceData._m0[_739].y;
    float _747 = (cbMtdParam._m0[0u].z * _538) * cbInstanceData._m0[_739].z;
    float _3772 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _748 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _3783 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _749 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _3794 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _750 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    vec4 _751 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _756 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _767 = (((_756.x - _705) + (_756.w * _705)) * cbMtdParam._m0[3u].x) + _705;
    float _780 = (cbMtdParam._m0[3u].x * (((_748 * _639) - _748) + _751.x)) + _748;
    float _781 = (cbMtdParam._m0[3u].x * (((_749 * _639) - _749) + _751.y)) + _749;
    float _782 = (cbMtdParam._m0[3u].x * (((_750 * _639) - _750) + _751.z)) + _750;
    vec4 _783 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _796 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_705 * (_536 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_705 * (_537 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_705 * (_538 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _783.z;
    float _800 = _796 * cbMatDynParam._m0[13u].w;
    float _810 = (_800 * (cbMatDynParam._m0[13u].x - _780)) + _780;
    float _811 = (_800 * (cbMatDynParam._m0[13u].y - _781)) + _781;
    float _812 = (_800 * (cbMatDynParam._m0[13u].z - _782)) + _782;
    float _820 = ((_796 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _767)) + _767;
    float _821 = 1.0 - _820;
    float _822 = _821 * _810;
    float _823 = _821 * _811;
    float _824 = _821 * _812;
    float _828 = (_810 + (-0.039999999105930328369140625)) * _820;
    float _829 = (_811 + (-0.039999999105930328369140625)) * _820;
    float _830 = (_812 + (-0.039999999105930328369140625)) * _820;
    float _831 = _828 + 0.039999999105930328369140625;
    float _832 = _829 + 0.039999999105930328369140625;
    float _833 = _830 + 0.039999999105930328369140625;
    vec4 _842 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _634, cbSceneParam._m0[86u].y * _635));
    float _845 = _842.x * TEXCOORD_4;
    float _846 = dot(vec3(_531, _532, _533), vec3(_614, _615, _616));
    float _849 = _846 * 2.0;
    float _853 = (_849 * _531) - _614;
    float _854 = (_849 * _532) - _615;
    float _855 = (_849 * _533) - _616;
    float _859 = abs(dot(vec3(_614, _615, _616), vec3(_531, _532, _533)));
    float _3805 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _861 = sqrt(_713);
    float _874 = exp2((_861 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_861 * 3.0));
    float _880 = (1.0 - _874) * ((_861 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _881 = _874 * _861;
    float _909 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _913 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _917 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1248;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _973 = fma(_917, cbModelParam._m0[26u].z, fma(_913, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _909));
        float _977 = fma(_917, cbModelParam._m0[27u].z, fma(_913, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _909));
        float _981 = fma(_917, cbModelParam._m0[28u].z, fma(_913, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _909));
        float _1006 = _909 + _531;
        float _1007 = _913 + _532;
        float _1008 = _917 + _533;
        float _1018 = fma(_1008, cbModelParam._m0[26u].z, fma(_1007, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1006)) - _973;
        float _1019 = fma(_1008, cbModelParam._m0[27u].z, fma(_1007, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1006)) - _977;
        float _1020 = fma(_1008, cbModelParam._m0[28u].z, fma(_1007, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1006)) - _981;
        float _1024 = inversesqrt(dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020)));
        float _1037 = ((_1024 * _1018) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_973 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1038 = ((_1024 * _1019) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_977 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1039 = ((_1024 * _1020) / cbModelParam._m0[34u].z) + ((((((_981 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        float _1076 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1042.x + (-0.5));
        float _1078 = _1076 * (_1042.y + (-0.5));
        float _1079 = _1076 * (_1042.z + (-0.5));
        float _1086 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1049.x + (-0.5));
        float _1088 = _1086 * (_1049.y + (-0.5));
        float _1089 = _1086 * (_1049.z + (-0.5));
        float _1096 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1056.x + (-0.5));
        float _1098 = _1096 * (_1056.y + (-0.5));
        float _1099 = _1096 * (_1056.z + (-0.5));
        float _1106 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1063.x + (-0.5));
        float _1108 = _1106 * (_1063.y + (-0.5));
        float _1109 = _1106 * (_1063.z + (-0.5));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1112 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1113 = _1077 * 0.5;
        float _1114 = _1087 * 0.5;
        float _1115 = _1097 * 0.5;
        float _1116 = dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115));
        float _1121 = (_1116 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1116);
        float _1130 = (dot(vec3(_531, _532, _533), vec3(_1121 * _1113, _1121 * _1114, _1121 * _1115)) + 1.0) * 0.5;
        float _3831 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1140 = sqrt(((_1114 * _1114) + (_1113 * _1113)) + (_1115 * _1115)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3842 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _3853 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_1142 + 1.0))) + _1147) * _1110;
        float _1157 = _1078 * 0.5;
        float _1158 = _1088 * 0.5;
        float _1159 = _1098 * 0.5;
        float _1160 = dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159));
        float _1165 = (_1160 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1160);
        float _1173 = (dot(vec3(_531, _532, _533), vec3(_1165 * _1157, _1165 * _1158, _1165 * _1159)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1182 = sqrt(((_1158 * _1158) + (_1157 * _1157)) + (_1159 * _1159)) / (_1111 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _3886 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_1184 + 1.0))) + _1189) * _1111;
        float _1199 = _1079 * 0.5;
        float _1200 = _1089 * 0.5;
        float _1201 = _1099 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1215 = (dot(vec3(_531, _532, _533), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _3897 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1224 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1112 + 9.9999997473787516355514526367188e-06);
        float _3908 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _3919 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_1226 + 1.0))) + _1231) * _1112;
        _1248 = _1079;
        _1250 = _1078;
        _1251 = _1077;
        _1252 = _1089;
        _1253 = _1088;
        _1254 = _1087;
        _1255 = _1099;
        _1256 = _1098;
        _1257 = _1097;
        _1258 = _1112;
        _1259 = _1111;
        _1260 = _1110;
        _1261 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
        _1262 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
        _1263 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
    }
    else
    {
        _1248 = _1249;
        _1250 = _1249;
        _1251 = _1249;
        _1252 = _1249;
        _1253 = _1249;
        _1254 = _1249;
        _1255 = _1249;
        _1256 = _1249;
        _1257 = _1249;
        _1258 = _1249;
        _1259 = _1249;
        _1260 = _1249;
        _1261 = 0.0;
        _1262 = 0.0;
        _1263 = 0.0;
    }
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1292 = fma(_917, cbModelParam._m0[30u].z, fma(_913, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _909));
        float _1296 = fma(_917, cbModelParam._m0[31u].z, fma(_913, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _909));
        float _1300 = fma(_917, cbModelParam._m0[32u].z, fma(_913, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _909));
        float _1323 = _909 + _531;
        float _1324 = _913 + _532;
        float _1325 = _917 + _533;
        float _1335 = fma(_1325, cbModelParam._m0[30u].z, fma(_1324, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1323)) - _1292;
        float _1336 = fma(_1325, cbModelParam._m0[31u].z, fma(_1324, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1323)) - _1296;
        float _1337 = fma(_1325, cbModelParam._m0[32u].z, fma(_1324, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1323)) - _1300;
        float _1341 = inversesqrt(dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337)));
        float _1354 = ((_1341 * _1335) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1292 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1355 = ((_1341 * _1336) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1296 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1356 = ((_1341 * _1337) / cbModelParam._m0[35u].z) + ((((((_1300 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1358 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        vec4 _1365 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        float _1391 = exp2((_1358.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1358.x + (-0.5));
        float _1393 = _1391 * (_1358.y + (-0.5));
        float _1394 = _1391 * (_1358.z + (-0.5));
        float _1401 = exp2((_1365.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1365.x + (-0.5));
        float _1403 = _1401 * (_1365.y + (-0.5));
        float _1404 = _1401 * (_1365.z + (-0.5));
        float _1411 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1372.x + (-0.5));
        float _1413 = _1411 * (_1372.y + (-0.5));
        float _1414 = _1411 * (_1372.z + (-0.5));
        float _1421 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1379.x + (-0.5));
        float _1423 = _1421 * (_1379.y + (-0.5));
        float _1424 = _1421 * (_1379.z + (-0.5));
        float _1425 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1426 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1427 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1428 = _1392 * 0.5;
        float _1429 = _1402 * 0.5;
        float _1430 = _1412 * 0.5;
        float _1431 = dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430));
        float _1436 = (_1431 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1431);
        float _1444 = (dot(vec3(_531, _532, _533), vec3(_1436 * _1428, _1436 * _1429, _1436 * _1430)) + 1.0) * 0.5;
        float _3960 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1453 = sqrt(((_1429 * _1429) + (_1428 * _1428)) + (_1430 * _1430)) / (_1425 + 9.9999997473787516355514526367188e-06);
        float _3971 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1455 = _1454 * 2.0;
        float _1459 = (1.0 - _1454) / (_1454 + 1.0);
        float _3982 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1469 = ((((1.0 - _1460) * (_1455 + 2.0)) * exp2(log2(isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1455 + 1.0))) + _1460) * _1425;
        float _1470 = _1393 * 0.5;
        float _1471 = _1403 * 0.5;
        float _1472 = _1413 * 0.5;
        float _1473 = dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472));
        float _1478 = (_1473 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1473);
        float _1486 = (dot(vec3(_531, _532, _533), vec3(_1478 * _1470, _1478 * _1471, _1478 * _1472)) + 1.0) * 0.5;
        float _3993 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1495 = sqrt(((_1471 * _1471) + (_1470 * _1470)) + (_1472 * _1472)) / (_1426 + 9.9999997473787516355514526367188e-06);
        float _4004 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1497 = _1496 * 2.0;
        float _1501 = (1.0 - _1496) / (_1496 + 1.0);
        float _4015 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1511 = ((((1.0 - _1502) * (_1497 + 2.0)) * exp2(log2(isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1497 + 1.0))) + _1502) * _1426;
        float _1512 = _1394 * 0.5;
        float _1513 = _1404 * 0.5;
        float _1514 = _1414 * 0.5;
        float _1515 = dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514));
        float _1520 = (_1515 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1515);
        float _1528 = (dot(vec3(_531, _532, _533), vec3(_1520 * _1512, _1520 * _1513, _1520 * _1514)) + 1.0) * 0.5;
        float _4026 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1537 = sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514)) / (_1427 + 9.9999997473787516355514526367188e-06);
        float _4037 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1539 = _1538 * 2.0;
        float _1543 = (1.0 - _1538) / (_1538 + 1.0);
        float _4048 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1553 = ((((1.0 - _1544) * (_1539 + 2.0)) * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1539 + 1.0))) + _1544) * _1427;
        _1561 = _1394;
        _1562 = _1393;
        _1563 = _1392;
        _1564 = _1404;
        _1565 = _1403;
        _1566 = _1402;
        _1567 = _1414;
        _1568 = _1413;
        _1569 = _1412;
        _1570 = _1427;
        _1571 = _1426;
        _1572 = _1425;
        _1573 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)));
        _1574 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)));
        _1575 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)));
    }
    else
    {
        _1561 = _1249;
        _1562 = _1249;
        _1563 = _1249;
        _1564 = _1249;
        _1565 = _1249;
        _1566 = _1249;
        _1567 = _1249;
        _1568 = _1249;
        _1569 = _1249;
        _1570 = _1249;
        _1571 = _1249;
        _1572 = _1249;
        _1573 = 0.0;
        _1574 = 0.0;
        _1575 = 0.0;
    }
    float _1585 = (cbModelParam._m0[1u].x * (_1573 - _1261)) + _1261;
    float _1586 = (cbModelParam._m0[1u].x * (_1574 - _1262)) + _1262;
    float _1587 = (cbModelParam._m0[1u].x * (_1575 - _1263)) + _1263;
    float _1608 = fma(_1587, cbSceneParam._m0[89u].z, fma(_1586, cbSceneParam._m0[89u].y, _1585 * cbSceneParam._m0[89u].x));
    float _1611 = fma(_1587, cbSceneParam._m0[90u].z, fma(_1586, cbSceneParam._m0[90u].y, _1585 * cbSceneParam._m0[90u].x));
    float _1614 = fma(_1587, cbSceneParam._m0[91u].z, fma(_1586, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1585));
    float _1629 = _853 * 0.5;
    float _1630 = _854 * 0.5;
    float _1631 = _855 * 0.5;
    float _1632 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1563, _1566, _1569, _1572));
    float _1635 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1562, _1565, _1568, _1571));
    float _1638 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1561, _1564, _1567, _1570));
    float _1669;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1645 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1248, _1252, _1255, _1258));
        float _1649 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1250, _1253, _1256, _1259));
        float _1653 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1251, _1254, _1257, _1260));
        float _1660 = dot(vec4(cbModelParam._m0[39u]), vec4(_1629, _1630, _1631, 1.0));
        _1669 = dot(vec3(isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)), isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)), isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1660) ? 0.0 : (isnan(0.0) ? _1660 : max(0.0, _1660))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1669 = 1.0;
    }
    float _1680;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1671 = dot(vec4(cbModelParam._m0[40u]), vec4(_1629, _1630, _1631, 1.0));
        _1680 = dot(vec3(isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)), isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)), isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1671) ? 0.0 : (isnan(0.0) ? _1671 : max(0.0, _1671))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1680 = 1.0;
    }
    float _1684 = (_1680 * cbModelParam._m0[1u].x) + (_1669 * (1.0 - cbModelParam._m0[1u].x));
    float _1694 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _713);
    float _1695 = isnan(_1694) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1694 : min(cbModelParam._m0[25u].z, _1694));
    float _1775;
    float _1777;
    float _1779;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1742 = fma(_917, cbModelParam._m0[13u].z, fma(_913, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _909)) + cbModelParam._m0[13u].w;
        float _1746 = fma(_917, cbModelParam._m0[14u].z, fma(_913, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _909)) + cbModelParam._m0[14u].w;
        float _1750 = fma(_917, cbModelParam._m0[15u].z, fma(_913, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _909)) + cbModelParam._m0[15u].w;
        float _1753 = fma(_855, cbModelParam._m0[13u].z, fma(_854, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _853));
        float _1756 = fma(_855, cbModelParam._m0[14u].z, fma(_854, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _853));
        float _1759 = fma(_855, cbModelParam._m0[15u].z, fma(_854, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _853));
        float _1787;
        if (_1753 > 0.0)
        {
            _1787 = abs((1.0 - _1742) / _1753);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1742 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1787 = frontier_phi_19_17_ladder;
        }
        float _2014;
        if (_1756 > 0.0)
        {
            _2014 = abs((1.0 - _1746) / _1756);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1746 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2014 = frontier_phi_28_24_ladder;
        }
        float _2271;
        if (_1759 > 0.0)
        {
            _2271 = abs((1.0 - _1750) / _1759);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1750 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2271 = frontier_phi_40_35_ladder;
        }
        float _2273 = isnan(_2014) ? _1787 : (isnan(_1787) ? _2014 : min(_1787, _2014));
        float _2274 = isnan(_2271) ? _2273 : (isnan(_2273) ? _2271 : min(_2273, _2271));
        float _2278 = (_2274 * _1753) + _1742;
        float _2279 = (_2274 * _1756) + _1746;
        float _2280 = (_2274 * _1759) + _1750;
        float _2281 = _2274 * 9.9999997473787516355514526367188e-05;
        float _2283 = (-1.0) - _2281;
        float _2285 = _2281 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2280 > _2285) || ((_2280 < _2283) || ((_2279 > _2285) || ((_2279 < _2283) || ((_2278 < _2283) || (_2278 > _2285))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2408 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2280, cbModelParam._m0[9u].z, fma(_2279, cbModelParam._m0[9u].y, _2278 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2280, cbModelParam._m0[10u].z, fma(_2279, cbModelParam._m0[10u].y, _2278 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2280, cbModelParam._m0[11u].z, fma(_2279, cbModelParam._m0[11u].y, _2278 * cbModelParam._m0[11u].x))), _1695);
            frontier_phi_18_40_ladder = _2408.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2408.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2408.x * cbModelParam._m0[1u].y;
        }
        _1775 = frontier_phi_18_40_ladder_2;
        _1777 = frontier_phi_18_40_ladder_1;
        _1779 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1763 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_853, _854, _855), _1695);
        _1775 = _1763.x * cbModelParam._m0[1u].y;
        _1777 = _1763.y * cbModelParam._m0[1u].y;
        _1779 = _1763.z * cbModelParam._m0[1u].y;
    }
    float _1783 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _713);
    float _1784 = isnan(_1783) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1783 : min(cbModelParam._m0[25u].w, _1783));
    float _1877;
    float _1879;
    float _1881;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1841 = fma(_917, cbModelParam._m0[21u].z, fma(_913, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _909)) + cbModelParam._m0[21u].w;
        float _1845 = fma(_917, cbModelParam._m0[22u].z, fma(_913, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _909)) + cbModelParam._m0[22u].w;
        float _1849 = fma(_917, cbModelParam._m0[23u].z, fma(_913, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _909)) + cbModelParam._m0[23u].w;
        float _1852 = fma(_855, cbModelParam._m0[21u].z, fma(_854, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _853));
        float _1855 = fma(_855, cbModelParam._m0[22u].z, fma(_854, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _853));
        float _1858 = fma(_855, cbModelParam._m0[23u].z, fma(_854, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _853));
        float _2019;
        if (_1852 > 0.0)
        {
            _2019 = abs((1.0 - _1841) / _1852);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1841 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2019 = frontier_phi_30_26_ladder;
        }
        float _2298;
        if (_1855 > 0.0)
        {
            _2298 = abs((1.0 - _1845) / _1855);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1845 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2298 = frontier_phi_42_37_ladder;
        }
        float _2511;
        if (_1858 > 0.0)
        {
            _2511 = abs((1.0 - _1849) / _1858);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1849 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2511 = frontier_phi_51_48_ladder;
        }
        float _2513 = isnan(_2298) ? _2019 : (isnan(_2019) ? _2298 : min(_2019, _2298));
        float _2514 = isnan(_2511) ? _2513 : (isnan(_2513) ? _2511 : min(_2513, _2511));
        float _2518 = (_2514 * _1852) + _1841;
        float _2519 = (_2514 * _1855) + _1845;
        float _2520 = (_2514 * _1858) + _1849;
        float _2521 = _2514 * 9.9999997473787516355514526367188e-05;
        float _2522 = (-1.0) - _2521;
        float _2524 = _2521 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2520 > _2524) || ((_2520 < _2522) || ((_2519 > _2524) || ((_2519 < _2522) || ((_2518 < _2522) || (_2518 > _2524))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2723 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2520, cbModelParam._m0[17u].z, fma(_2519, cbModelParam._m0[17u].y, _2518 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2520, cbModelParam._m0[18u].z, fma(_2519, cbModelParam._m0[18u].y, _2518 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2520, cbModelParam._m0[19u].z, fma(_2519, cbModelParam._m0[19u].y, _2518 * cbModelParam._m0[19u].x))), _1784);
            frontier_phi_27_51_ladder = _2723.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2723.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2723.x * cbModelParam._m0[1u].z;
        }
        _1877 = frontier_phi_27_51_ladder_2;
        _1879 = frontier_phi_27_51_ladder_1;
        _1881 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1861 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_853, _854, _855), _1784);
        _1877 = _1861.x * cbModelParam._m0[1u].z;
        _1879 = _1861.y * cbModelParam._m0[1u].z;
        _1881 = _1861.z * cbModelParam._m0[1u].z;
    }
    float _1894 = (((_880 * _831) + _881) * _845) * ((cbModelParam._m0[1u].w * (_1877 - _1775)) + _1775);
    float _1896 = (((_880 * _832) + _881) * _845) * ((cbModelParam._m0[1u].w * (_1879 - _1777)) + _1777);
    float _1898 = (((_880 * _833) + _881) * _845) * ((cbModelParam._m0[1u].w * (_1881 - _1779)) + _1779);
    float _1901 = fma(_1898, cbSceneParam._m0[89u].z, fma(_1896, cbSceneParam._m0[89u].y, _1894 * cbSceneParam._m0[89u].x));
    float _1904 = fma(_1898, cbSceneParam._m0[90u].z, fma(_1896, cbSceneParam._m0[90u].y, _1894 * cbSceneParam._m0[90u].x));
    float _1907 = fma(_1898, cbSceneParam._m0[91u].z, fma(_1896, cbSceneParam._m0[91u].y, _1894 * cbSceneParam._m0[91u].x));
    vec4 _1915 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_634, _635));
    float _1917 = _1915.w;
    float _1929 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1917);
    float _1930 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1917);
    float _1931 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1917);
    uvec4 _1935 = floatBitsToUint(cbInstanceData._m0[_737 + 5u]);
    uint _1937 = _1935.x * 14u;
    uint _1938 = _1937 + 13u;
    float _1945 = _845 + (-1.0);
    float _1950 = (cbLight._m0[_1938].x * _1945) + 1.0;
    float _1951 = (cbLight._m0[_1938].y * _1945) + 1.0;
    float _1952 = (cbLight._m0[_1938].z * _1945) + 1.0;
    float _1953 = (cbLight._m0[_1938].w * _1945) + 1.0;
    uint _1954 = _1937 + 5u;
    float _1960 = isnan(1.0) ? _1951 : (isnan(_1951) ? 1.0 : min(_1951, 1.0));
    uint _1964 = _1937 + 4u;
    float _1973 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
    uint _1977 = _1937 | 1u;
    float _1988 = dot(vec3(cbLight._m0[_1937].xyz), vec3(_531, _532, _533));
    float _1991 = dot(vec3(cbLight._m0[_1977].xyz), vec3(_531, _532, _533));
    float _4184 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _4195 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1996 = (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * 0.3183098733425140380859375;
    float _1998 = (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * 0.3183098733425140380859375;
    float _2005 = ((cbLight._m0[_1954].x * _1960) * _1998) + (((cbLight._m0[_1964].x * _1929) * _1973) * _1996);
    float _2006 = ((_1960 * cbLight._m0[_1954].y) * _1998) + (((cbLight._m0[_1964].y * _1930) * _1973) * _1996);
    float _2007 = ((_1960 * cbLight._m0[_1954].z) * _1998) + (((cbLight._m0[_1964].z * _1931) * _1973) * _1996);
    uvec4 _2011 = floatBitsToUint(cbLight._m0[_1937 + 12u]);
    bool _2013 = _2011.x == 0u;
    float _2024;
    float _2026;
    float _2028;
    if (_2013)
    {
        _2024 = _2005;
        _2026 = _2006;
        _2028 = _2007;
    }
    else
    {
        uint _2032 = _1937 + 6u;
        float _2048 = (dot(vec3(cbLight._m0[_1937 + 2u].xyz), vec3(_531, _532, _533)) * 0.5) + 0.5;
        float _2049 = _2048 * _2048;
        float _4206 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2050 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _2051 = isnan(1.0) ? _1952 : (isnan(_1952) ? 1.0 : min(_1952, 1.0));
        _2024 = (((cbLight._m0[_2032].x * 0.3183098733425140380859375) * _2050) * _2051) + _2005;
        _2026 = (((cbLight._m0[_2032].y * 0.3183098733425140380859375) * _2050) * _2051) + _2006;
        _2028 = (((cbLight._m0[_2032].z * 0.3183098733425140380859375) * _2050) * _2051) + _2007;
    }
    bool _2031 = _2011.y == 0u;
    float _2069;
    float _2071;
    float _2073;
    if (_2031)
    {
        _2069 = _2024;
        _2071 = _2026;
        _2073 = _2028;
    }
    else
    {
        uint _2242 = _1937 + 7u;
        float _2258 = (dot(vec3(cbLight._m0[_1937 + 3u].xyz), vec3(_531, _532, _533)) * 0.5) + 0.5;
        float _2259 = _2258 * _2258;
        float _4222 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2260 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _2261 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
        _2069 = (((cbLight._m0[_2242].x * 0.3183098733425140380859375) * _2260) * _2261) + _2024;
        _2071 = (((cbLight._m0[_2242].y * 0.3183098733425140380859375) * _2260) * _2261) + _2026;
        _2073 = (((cbLight._m0[_2242].z * 0.3183098733425140380859375) * _2260) * _2261) + _2028;
    }
    uint _2076 = _1937 + 8u;
    float _2089 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1937].w)) * _713) * 0.949999988079071044921875);
    float _2090 = _2089 * _2089;
    float _2091 = cbLight._m0[_1937].x + _614;
    float _2092 = cbLight._m0[_1937].y + _615;
    float _2093 = cbLight._m0[_1937].z + _616;
    float _2097 = inversesqrt(dot(vec3(_2091, _2092, _2093), vec3(_2091, _2092, _2093)));
    float _2098 = _2097 * _2091;
    float _2099 = _2097 * _2092;
    float _2100 = _2097 * _2093;
    float _2101 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_1937].xyz));
    float _4238 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2104 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _4249 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _2105 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _2106 = dot(vec3(_531, _532, _533), vec3(_2098, _2099, _2100));
    float _4260 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2109 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _2110 = dot(vec3(cbLight._m0[_1937].xyz), vec3(_2098, _2099, _2100));
    float _4271 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2114 = _2090 * _2090;
    float _2118 = ((_2109 * _2109) * (_2114 + (-1.0))) + 1.0;
    float _2126 = exp2(log2(1.0 - (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0)))) * 5.0);
    float _2127 = 0.959999978542327880859375 - _828;
    float _2129 = 0.959999978542327880859375 - _829;
    float _2130 = 0.959999978542327880859375 - _830;
    float _2137 = 1.0 - _2090;
    float _2148 = (0.5 / (((_2105 * ((_2104 * _2137) + _2090)) + 9.9999999392252902907785028219223e-09) + (((_2105 * _2137) + _2090) * _2104))) * _2104;
    float _4282 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2150 = (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_2114 / ((_2118 * _2118) * 3.141590118408203125));
    uint _2164 = _1937 + 9u;
    float _2175 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1977].w)) * _713) * 0.949999988079071044921875);
    float _2176 = _2175 * _2175;
    float _2177 = cbLight._m0[_1977].x + _614;
    float _2178 = cbLight._m0[_1977].y + _615;
    float _2179 = cbLight._m0[_1977].z + _616;
    float _2183 = inversesqrt(dot(vec3(_2177, _2178, _2179), vec3(_2177, _2178, _2179)));
    float _2184 = _2183 * _2177;
    float _2185 = _2183 * _2178;
    float _2186 = _2183 * _2179;
    float _2187 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_1977].xyz));
    float _4293 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2190 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    float _2191 = dot(vec3(_531, _532, _533), vec3(_2184, _2185, _2186));
    float _4304 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2194 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
    float _2195 = dot(vec3(cbLight._m0[_1977].xyz), vec3(_2184, _2185, _2186));
    float _4315 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2199 = _2176 * _2176;
    float _2203 = ((_2194 * _2194) * (_2199 + (-1.0))) + 1.0;
    float _2210 = exp2(log2(1.0 - (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0)))) * 5.0);
    float _2217 = 1.0 - _2176;
    float _2227 = (0.5 / (((_2105 * ((_2190 * _2217) + _2176)) + 9.9999999392252902907785028219223e-09) + (((_2105 * _2217) + _2176) * _2190))) * _2190;
    float _4326 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2229 = (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_2199 / ((_2203 * _2203) * 3.141590118408203125));
    float _2239 = (((((_2210 * _2127) + _831) * cbLight._m0[_2164].x) * _2229) * _1960) + ((((cbLight._m0[_2076].x * _1929) * ((_2126 * _2127) + _831)) * _2150) * _1973);
    float _2240 = (((((_2210 * _2129) + _832) * cbLight._m0[_2164].y) * _2229) * _1960) + ((((cbLight._m0[_2076].y * _1930) * ((_2126 * _2129) + _832)) * _2150) * _1973);
    float _2241 = (((((_2210 * _2130) + _833) * cbLight._m0[_2164].z) * _2229) * _1960) + ((((cbLight._m0[_2076].z * _1931) * ((_2126 * _2130) + _833)) * _2150) * _1973);
    float _2303;
    float _2305;
    float _2307;
    if (_2013)
    {
        _2303 = _2239;
        _2305 = _2240;
        _2307 = _2241;
    }
    else
    {
        uint _2309 = _1937 + 2u;
        uint _2313 = _1937 + 10u;
        float _2327 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2309].w)) * _713) * 0.949999988079071044921875);
        float _2328 = _2327 * _2327;
        float _2329 = cbLight._m0[_2309].x + _614;
        float _2330 = cbLight._m0[_2309].y + _615;
        float _2331 = cbLight._m0[_2309].z + _616;
        float _2335 = inversesqrt(dot(vec3(_2329, _2330, _2331), vec3(_2329, _2330, _2331)));
        float _2336 = _2335 * _2329;
        float _2337 = _2335 * _2330;
        float _2338 = _2335 * _2331;
        float _2339 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_2309].xyz));
        float _4337 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2342 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _2343 = dot(vec3(_531, _532, _533), vec3(_2336, _2337, _2338));
        float _4348 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2346 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _2347 = dot(vec3(cbLight._m0[_2309].xyz), vec3(_2336, _2337, _2338));
        float _4359 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2351 = _2328 * _2328;
        float _2355 = ((_2346 * _2346) * (_2351 + (-1.0))) + 1.0;
        float _2362 = exp2(log2(1.0 - (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0)))) * 5.0);
        float _2369 = 1.0 - _2328;
        float _2379 = (0.5 / (((_2105 * ((_2342 * _2369) + _2328)) + 9.9999999392252902907785028219223e-09) + (((_2105 * _2369) + _2328) * _2342))) * _2342;
        float _4370 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2381 = (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_2351 / ((_2355 * _2355) * 3.141590118408203125));
        float _2382 = isnan(1.0) ? _1952 : (isnan(_1952) ? 1.0 : min(_1952, 1.0));
        _2303 = (((((_2362 * _2127) + _831) * cbLight._m0[_2313].x) * _2381) * _2382) + _2239;
        _2305 = (((((_2362 * _2129) + _832) * cbLight._m0[_2313].y) * _2381) * _2382) + _2240;
        _2307 = (((((_2362 * _2130) + _833) * cbLight._m0[_2313].z) * _2381) * _2382) + _2241;
    }
    float _2417;
    float _2419;
    float _2421;
    if (_2031)
    {
        _2417 = _2303;
        _2419 = _2305;
        _2421 = _2307;
    }
    else
    {
        uint _2428 = _1937 + 3u;
        uint _2432 = _1937 + 11u;
        float _2446 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2428].w)) * _713) * 0.949999988079071044921875);
        float _2447 = _2446 * _2446;
        float _2448 = cbLight._m0[_2428].x + _614;
        float _2449 = cbLight._m0[_2428].y + _615;
        float _2450 = cbLight._m0[_2428].z + _616;
        float _2454 = inversesqrt(dot(vec3(_2448, _2449, _2450), vec3(_2448, _2449, _2450)));
        float _2455 = _2454 * _2448;
        float _2456 = _2454 * _2449;
        float _2457 = _2454 * _2450;
        float _2458 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_2428].xyz));
        float _4386 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2461 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _2462 = dot(vec3(_531, _532, _533), vec3(_2455, _2456, _2457));
        float _4397 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2465 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _2466 = dot(vec3(cbLight._m0[_2428].xyz), vec3(_2455, _2456, _2457));
        float _4408 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2470 = _2447 * _2447;
        float _2474 = ((_2465 * _2465) * (_2470 + (-1.0))) + 1.0;
        float _2481 = exp2(log2(1.0 - (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0)))) * 5.0);
        float _2488 = 1.0 - _2447;
        float _2498 = (0.5 / (((_2105 * ((_2461 * _2488) + _2447)) + 9.9999999392252902907785028219223e-09) + (((_2105 * _2488) + _2447) * _2461))) * _2461;
        float _4419 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2500 = (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_2470 / ((_2474 * _2474) * 3.141590118408203125));
        float _2501 = isnan(1.0) ? _1953 : (isnan(_1953) ? 1.0 : min(_1953, 1.0));
        _2417 = (((((_2481 * _2127) + _831) * cbLight._m0[_2432].x) * _2500) * _2501) + _2303;
        _2419 = (((((_2481 * _2129) + _832) * cbLight._m0[_2432].y) * _2500) * _2501) + _2305;
        _2421 = (((((_2481 * _2130) + _833) * cbLight._m0[_2432].z) * _2500) * _2501) + _2307;
    }
    float _2635;
    float _2637;
    float _2639;
    float _2641;
    float _2643;
    float _2645;
    if (_1935.y == 0u)
    {
        float _2576 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2577 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2576;
        float _2578 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2576;
        float _2579 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2576;
        uvec4 _2591 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2592 = _2591.x;
        uint _2603 = uint((float(_2591.y) * floor(float(uint(cbSceneParam._m0[85u].y * _635) / _2592))) + floor(float(uint(cbSceneParam._m0[85u].x * _634) / _2592)));
        float _2613 = (log2(_2579 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2614 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        uint _2617 = uint(isnan(14.0) ? _2614 : (isnan(_2614) ? 14.0 : min(_2614, 14.0)));
        uvec4 _2622 = texelFetch(g_lightClusterGridBuffer, int(((_2617 << 2u) + (_2603 << 6u)) >> 2u));
        uint _2623 = _2622.x;
        uint _2624 = _2591.z;
        float _2728;
        float _2730;
        float _2732;
        float _2734;
        float _2736;
        float _2738;
        if (((((1u << ((_2624 >> 4u) & 15u)) + 4294967295u) & _2623) == 0u) || ((_2624 & 240u) == 0u))
        {
            _2728 = 0.0;
            _2730 = 0.0;
            _2732 = 0.0;
            _2734 = 0.0;
            _2736 = 0.0;
            _2738 = 0.0;
        }
        else
        {
            float _2729;
            float _2731;
            float _2733;
            float _2735;
            float _2737;
            float _2739;
            float _2880 = 0.0;
            float _2881 = 0.0;
            float _2882 = 0.0;
            float _2883 = 0.0;
            float _2884 = 0.0;
            float _2885 = 0.0;
            uint _2886 = 0u;
            uint _2895;
            bool _2896;
            for (;;)
            {
                _2895 = texelFetch(g_lightClassification, int((((_2617 << 5u) + (_2603 << 9u)) + (_2886 << 2u)) >> 2u)).x;
                _2896 = _2895 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2896)
                {
                    frontier_phi_68_pred = _2882;
                    frontier_phi_68_pred_1 = _2885;
                    frontier_phi_68_pred_2 = _2884;
                    frontier_phi_68_pred_3 = _2883;
                    frontier_phi_68_pred_4 = _2881;
                    frontier_phi_68_pred_5 = _2880;
                }
                else
                {
                    float _3025;
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    float _3030;
                    uint _3031;
                    _3025 = _2880;
                    _3026 = _2881;
                    _3027 = _2882;
                    _3028 = _2883;
                    _3029 = _2884;
                    _3030 = _2885;
                    _3031 = _2895;
                    float _2952;
                    float _2953;
                    float _2954;
                    float _2955;
                    float _2956;
                    float _2957;
                    for (;;)
                    {
                        uint _3035 = uint(findLSB(_3031)) + (_2886 << 5u);
                        uint _3032 = (_3031 + 4294967295u) & _3031;
                        uint _3037 = _3035 * 48u;
                        vec4 _3051 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3037)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 3u)).x));
                        uint _3057 = (_3035 * 48u) + 4u;
                        vec4 _3070 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3057)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 3u)).x));
                        uint _3076 = (_3035 * 48u) + 8u;
                        vec3 _3087 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3076)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 2u)).x));
                        float _3091 = _3051.x - _2577;
                        float _3092 = _3051.y - _2578;
                        float _3093 = _3051.z - _2579;
                        float _3094 = dot(vec3(_3091, _3092, _3093), vec3(_3091, _3092, _3093));
                        float _3097 = inversesqrt(_3094);
                        float _3098 = _3097 * _3091;
                        float _3099 = _3097 * _3092;
                        float _3100 = _3097 * _3093;
                        float _3101 = dot(vec3(_658, _661, _664), vec3(_3098, _3099, _3100));
                        float _3106 = 1.0 - (_3094 * _3051.w);
                        float _4445 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                        float _3107 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                        float _3108 = sqrt(_3094) * _3070.w;
                        float _3111 = 1.39999997615814208984375 / (_3108 + 1.39999997615814208984375);
                        float _3112 = _3111 * _3111;
                        float _3115 = ((1.0 - _3112) * _3101) + _3112;
                        float _3118 = _3108 * _3108;
                        float _3122 = ((isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0))) * _3107) / ((_3118 * 0.699999988079071044921875) + 1.0);
                        float _3126 = (-0.0) - _2577;
                        float _3127 = (-0.0) - _2578;
                        float _3128 = (-0.0) - _2579;
                        float _3132 = inversesqrt(dot(vec3(_3126, _3127, _3128), vec3(_3126, _3127, _3128)));
                        float _3133 = _3132 * _3126;
                        float _3134 = _3132 * _3127;
                        float _3135 = _3132 * _3128;
                        float _3143 = exp2(log2(1.0 / ((_3118 * 3.5) + 5.0)) * 0.25);
                        float _3144 = 1.0 - _861;
                        float _3151 = sqrt(1.0 - ((1.0 - (_3144 * _3144)) * (1.0 - (_3143 * _3143))));
                        float _3152 = _3151 * _3151;
                        float _3153 = _3152 * _3152;
                        float _3154 = _3133 + _3098;
                        float _3155 = _3134 + _3099;
                        float _3156 = _3135 + _3100;
                        float _3160 = inversesqrt(dot(vec3(_3154, _3155, _3156), vec3(_3154, _3155, _3156)));
                        float _3164 = dot(vec3(_658, _661, _664), vec3(_3133, _3134, _3135));
                        float _4461 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                        float _3167 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                        float _3168 = dot(vec3(_658, _661, _664), vec3(_3160 * _3154, _3160 * _3155, _3160 * _3156));
                        float _4472 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                        float _3171 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                        float _3175 = ((_3171 * _3171) * (_3153 + (-1.0))) + 1.0;
                        float _3176 = _3111 * _3152;
                        float _3177 = _3176 * _3176;
                        float _3180 = ((1.0 - _3177) * _3101) + _3177;
                        float _4483 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                        float _3181 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
                        float _3182 = 1.0 - _3152;
                        float _3192 = (0.5 / (((_3181 * ((_3167 * _3182) + _3152)) + 9.9999999392252902907785028219223e-09) + (((_3181 * _3182) + _3152) * _3167))) * _3181;
                        float _4494 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                        float _3203 = (((_3153 * 3.1415927410125732421875) * (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0)))) / ((_3175 * _3175) * ((_3118 * 2.1991131305694580078125) + 3.141590118408203125))) * _3107;
                        _2955 = (_3122 * _3070.x) + _3028;
                        _2956 = (_3122 * _3070.y) + _3029;
                        _2957 = (_3122 * _3070.z) + _3030;
                        _2952 = (_3203 * _3087.x) + _3025;
                        _2953 = (_3203 * _3087.y) + _3026;
                        _2954 = (_3203 * _3087.z) + _3027;
                        if (_3032 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3025 = _2952;
                            _3026 = _2953;
                            _3027 = _2954;
                            _3028 = _2955;
                            _3029 = _2956;
                            _3030 = _2957;
                            _3031 = _3032;
                        }
                    }
                    frontier_phi_68_pred = _2954;
                    frontier_phi_68_pred_1 = _2957;
                    frontier_phi_68_pred_2 = _2956;
                    frontier_phi_68_pred_3 = _2955;
                    frontier_phi_68_pred_4 = _2953;
                    frontier_phi_68_pred_5 = _2952;
                }
                _2733 = frontier_phi_68_pred;
                _2739 = frontier_phi_68_pred_1;
                _2737 = frontier_phi_68_pred_2;
                _2735 = frontier_phi_68_pred_3;
                _2731 = frontier_phi_68_pred_4;
                _2729 = frontier_phi_68_pred_5;
                uint _2887 = _2886 + 1u;
                if (_2887 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2880 = _2729;
                    _2881 = _2731;
                    _2882 = _2733;
                    _2883 = _2735;
                    _2884 = _2737;
                    _2885 = _2739;
                    _2886 = _2887;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2728 = _2729;
            _2730 = _2731;
            _2732 = _2733;
            _2734 = _2735;
            _2736 = _2737;
            _2738 = _2739;
        }
        uvec4 _2742 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2743 = _2742.z;
        uint _2745 = (_2743 >> 8u) & 15u;
        float _2848;
        float _2850;
        float _2852;
        float _2854;
        float _2856;
        float _2858;
        if (((4294967295u << _2745) & _2623) == 0u)
        {
            _2848 = _2728;
            _2850 = _2730;
            _2852 = _2732;
            _2854 = _2734;
            _2856 = _2736;
            _2858 = _2738;
        }
        else
        {
            float _2873 = inversesqrt(dot(vec3(_2577, _2578, _2579), vec3(_2577, _2578, _2579)));
            float _2874 = _2873 * _2577;
            float _2875 = _2873 * _2578;
            float _2876 = _2873 * _2579;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2745 < ((_2743 >> 12u) & 15u))
            {
                float _2849;
                float _2851;
                float _2853;
                float _2855;
                float _2857;
                float _2859;
                float _3008 = _2728;
                float _3009 = _2730;
                float _3010 = _2732;
                float _3011 = _2734;
                float _3012 = _2736;
                float _3013 = _2738;
                uint _3014 = _2745;
                uint _3023;
                bool _3024;
                for (;;)
                {
                    _3023 = texelFetch(g_lightClassification, int((((_2617 << 5u) + (_2603 << 9u)) + (_3014 << 2u)) >> 2u)).x;
                    _3024 = _3023 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3024)
                    {
                        frontier_phi_79_pred = _3013;
                        frontier_phi_79_pred_1 = _3012;
                        frontier_phi_79_pred_2 = _3011;
                        frontier_phi_79_pred_3 = _3010;
                        frontier_phi_79_pred_4 = _3009;
                        frontier_phi_79_pred_5 = _3008;
                    }
                    else
                    {
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3222;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3230 = _3008;
                        float _3231 = _3009;
                        float _3232 = _3010;
                        float _3233 = _3011;
                        float _3234 = _3012;
                        float _3235 = _3013;
                        uint _3236 = _3023;
                        uint _3237;
                        vec4 _3262;
                        float _3263;
                        vec4 _3278;
                        vec3 _3290;
                        vec4 _3305;
                        vec4 _3321;
                        float _3368;
                        bool _3369;
                        for (;;)
                        {
                            uint _3247 = ((_3014 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3236));
                            _3237 = (_3236 + 4294967295u) & _3236;
                            uint _3249 = _3247 * 40u;
                            _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            _3263 = _3262.w;
                            uint _3265 = (_3247 * 40u) + 4u;
                            _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            uint _3280 = (_3247 * 40u) + 8u;
                            _3290 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x));
                            uint _3292 = (_3247 * 40u) + 16u;
                            _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            uint _3308 = (_3247 * 40u) + 20u;
                            _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            uint _3324 = (_3247 * 40u) + 24u;
                            vec4 _3337 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 3u)).x));
                            uint _3343 = (_3247 * 40u) + 28u;
                            vec4 _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            _3368 = fma(_2579, _3356.z, fma(_2578, _3356.y, _3356.x * _2577)) + _3356.w;
                            _3369 = !((fma(_2579, _3337.z, fma(_2578, _3337.y, _3337.x * _2577)) + _3337.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3369)
                            {
                                float _3396 = _3262.x - _2577;
                                float _3397 = _3262.y - _2578;
                                float _3398 = _3262.z - _2579;
                                float _3399 = dot(vec3(_3396, _3397, _3398), vec3(_3396, _3397, _3398));
                                float _3402 = inversesqrt(_3399);
                                float _3403 = _3402 * _3396;
                                float _3404 = _3402 * _3397;
                                float _3405 = _3402 * _3398;
                                float _3409 = 1.0 - (_3399 / (_3263 * _3263));
                                float _4505 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3410 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                                float _3414 = sqrt(_3399) * _3278.w;
                                float _3416 = 1.39999997615814208984375 / (_3414 + 1.39999997615814208984375);
                                float _3417 = _3416 * _3416;
                                float _3420 = ((1.0 - _3417) * dot(vec3(_3403, _3404, _3405), vec3(_658, _661, _664))) + _3417;
                                float _3423 = _3414 * _3414;
                                float _3427 = (fma(_2579, _3305.z, fma(_2578, _3305.y, _3305.x * _2577)) + _3305.w) / _3368;
                                float _3428 = (fma(_2579, _3321.z, fma(_2578, _3321.y, _3321.x * _2577)) + _3321.w) / _3368;
                                float _3432 = 1.0 - dot(vec2(_3427, _3428), vec2(_3427, _3428));
                                float _4521 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3433 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                                float _3434 = _3433 * (((isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0))) * _3410) / ((_3423 * 0.699999988079071044921875) + 1.0));
                                float _3446 = exp2(log2(1.0 / ((_3423 * 3.5) + 5.0)) * 0.25);
                                float _3447 = 1.0 - _861;
                                float _3454 = sqrt(1.0 - ((1.0 - (_3447 * _3447)) * (1.0 - (_3446 * _3446))));
                                float _3455 = _3454 * _3454;
                                float _3456 = _3455 * _3455;
                                float _3457 = _3403 - _2874;
                                float _3458 = _3404 - _2875;
                                float _3459 = _3405 - _2876;
                                float _3463 = inversesqrt(dot(vec3(_3457, _3458, _3459), vec3(_3457, _3458, _3459)));
                                float _3467 = dot(vec3(_658, _661, _664), vec3((-0.0) - _2874, (-0.0) - _2875, (-0.0) - _2876));
                                float _4532 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                                float _3470 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                                float _3471 = dot(vec3(_658, _661, _664), vec3(_3463 * _3457, _3463 * _3458, _3463 * _3459));
                                float _4543 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3474 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                                float _3478 = ((_3474 * _3474) * (_3456 + (-1.0))) + 1.0;
                                float _3479 = _3416 * _3455;
                                float _3480 = _3479 * _3479;
                                float _3486 = ((1.0 - _3480) * dot(vec3(_658, _661, _664), vec3(_3403, _3404, _3405))) + _3480;
                                float _4554 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3487 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                                float _3488 = 1.0 - _3455;
                                float _3498 = (0.5 / (((_3487 * ((_3470 * _3488) + _3455)) + 9.9999999392252902907785028219223e-09) + (((_3487 * _3488) + _3455) * _3470))) * _3487;
                                float _4565 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3508 = (_3433 * _3410) * (((_3456 * 3.1415927410125732421875) * (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0)))) / ((_3478 * _3478) * ((_3423 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3434 * _3278.z;
                                frontier_phi_85_pred_1 = _3434 * _3278.y;
                                frontier_phi_85_pred_2 = _3434 * _3278.x;
                                frontier_phi_85_pred_3 = _3508 * _3290.z;
                                frontier_phi_85_pred_4 = _3508 * _3290.y;
                                frontier_phi_85_pred_5 = _3508 * _3290.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3517 = frontier_phi_85_pred;
                            _3516 = frontier_phi_85_pred_1;
                            _3515 = frontier_phi_85_pred_2;
                            _3514 = frontier_phi_85_pred_3;
                            _3513 = frontier_phi_85_pred_4;
                            _3512 = frontier_phi_85_pred_5;
                            _3220 = _3515 + _3233;
                            _3221 = _3516 + _3234;
                            _3222 = _3517 + _3235;
                            _3217 = _3512 + _3230;
                            _3218 = _3513 + _3231;
                            _3219 = _3514 + _3232;
                            if (_3237 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3230 = _3217;
                                _3231 = _3218;
                                _3232 = _3219;
                                _3233 = _3220;
                                _3234 = _3221;
                                _3235 = _3222;
                                _3236 = _3237;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3222;
                        frontier_phi_79_pred_1 = _3221;
                        frontier_phi_79_pred_2 = _3220;
                        frontier_phi_79_pred_3 = _3219;
                        frontier_phi_79_pred_4 = _3218;
                        frontier_phi_79_pred_5 = _3217;
                    }
                    _2859 = frontier_phi_79_pred;
                    _2857 = frontier_phi_79_pred_1;
                    _2855 = frontier_phi_79_pred_2;
                    _2853 = frontier_phi_79_pred_3;
                    _2851 = frontier_phi_79_pred_4;
                    _2849 = frontier_phi_79_pred_5;
                    uint _3015 = _3014 + 1u;
                    if (_3015 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3008 = _2849;
                        _3009 = _2851;
                        _3010 = _2853;
                        _3011 = _2855;
                        _3012 = _2857;
                        _3013 = _2859;
                        _3014 = _3015;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2855;
                frontier_phi_60_61_ladder_1 = _2859;
                frontier_phi_60_61_ladder_2 = _2857;
                frontier_phi_60_61_ladder_3 = _2853;
                frontier_phi_60_61_ladder_4 = _2851;
                frontier_phi_60_61_ladder_5 = _2849;
            }
            else
            {
                frontier_phi_60_61_ladder = _2734;
                frontier_phi_60_61_ladder_1 = _2738;
                frontier_phi_60_61_ladder_2 = _2736;
                frontier_phi_60_61_ladder_3 = _2732;
                frontier_phi_60_61_ladder_4 = _2730;
                frontier_phi_60_61_ladder_5 = _2728;
            }
            _2848 = frontier_phi_60_61_ladder_5;
            _2850 = frontier_phi_60_61_ladder_4;
            _2852 = frontier_phi_60_61_ladder_3;
            _2854 = frontier_phi_60_61_ladder;
            _2856 = frontier_phi_60_61_ladder_2;
            _2858 = frontier_phi_60_61_ladder_1;
        }
        float _2863 = isnan(1.0) ? _845 : (isnan(_845) ? 1.0 : min(_845, 1.0));
        _2635 = (_2863 * _2854) + _2069;
        _2637 = (_2863 * _2856) + _2071;
        _2639 = (_2863 * _2858) + _2073;
        _2641 = ((_2848 * _831) * _2863) + _2417;
        _2643 = ((_2850 * _832) * _2863) + _2419;
        _2645 = ((_2852 * _833) * _2863) + _2421;
    }
    else
    {
        _2635 = _2069;
        _2637 = _2071;
        _2639 = _2073;
        _2641 = _2417;
        _2643 = _2419;
        _2645 = _2421;
    }
    float _4581 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _4592 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _4603 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _4614 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _2663 = ((isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_2635 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _845))) + ((_2641 + ((isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))) * _1684)) * cbPerFrame._m0[3u].x);
    float _2664 = ((isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (_2637 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _845))) + ((_2643 + ((isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0))) * _1684)) * cbPerFrame._m0[3u].x);
    float _2665 = ((isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (_2639 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _845))) + ((_2645 + ((isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0))) * _1684)) * cbPerFrame._m0[3u].x);
    float _2666 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
    float _2667 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
    float _2668 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
    float _2673 = cbInstanceData._m0[_737 + 6u].w * (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)));
    float _2678 = _634 / cbSceneParam._m0[86u].x;
    float _2679 = _635 / cbSceneParam._m0[86u].y;
    vec4 _2693 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2678, _2679, (log2((isnan(cbSceneParam._m0[77u].w) ? _555 : (isnan(_555) ? cbSceneParam._m0[77u].w : min(_555, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2695 = _2693.x;
    float _2696 = _2693.y;
    float _2697 = _2693.z;
    float _2698 = _2693.w;
    float _2790;
    float _2792;
    float _2794;
    float _2796;
    if (_555 > cbSceneParam._m0[78u].w)
    {
        float _2753 = isnan(_555) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _555 : min(cbSceneParam._m0[80u].w, _555));
        float _2754 = _2753 / _555;
        float _2765 = _2754 * _607;
        float _2766 = _608 * _2754;
        float _2767 = (-0.0) - _2766;
        float _2768 = _2754 * _609;
        float _2770 = (cbSceneParam._m0[77u].w * _2767) / _2753;
        float _2771 = _2770 + cbSceneParam._m0[79u].w;
        float _2772 = cbSceneParam._m0[79u].w - _2766;
        float _2778 = sqrt(((_2765 * _2765) + (_2766 * _2766)) + (_2768 * _2768));
        float _2781 = (1.0 - (cbSceneParam._m0[77u].w / _2753)) * _2778;
        float _2786 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2788 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2965;
        if (abs((_2767 - _2770) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2965 = ((((_2771 > 0.0) ? exp2(_2786 * _2771) : (2.0 - exp2(_2788 * _2771))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2781;
        }
        else
        {
            float _2909 = 1.0 / cbSceneParam._m0[80u].x;
            float _2910 = isnan(_2772) ? _2771 : (isnan(_2771) ? _2772 : max(_2771, _2772));
            float _2911 = isnan(_2772) ? _2771 : (isnan(_2771) ? _2772 : min(_2771, _2772));
            float _2920 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : min(_2910, 0.0));
            float _2921 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : min(_2911, 0.0));
            _2965 = ((abs(_2778 / _2767) * cbSceneParam._m0[80u].y) * ((((_2920 - _2921) * 2.0) - ((exp2(_2786 * (isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0)))) - exp2(_2786 * (isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0))))) * _2909)) - ((exp2(_2788 * _2920) - exp2(_2788 * _2921)) * _2909))) + (_2781 * cbSceneParam._m0[80u].z);
        }
        vec4 _2967 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2678, _2679, 1.0), 0.0);
        float _2976 = exp2((_2965 * (-1.44269502162933349609375)) * (1.0 - _2967.w));
        float _2977 = log2(_2976);
        float _2993 = log2(_2698);
        _2790 = (exp2(_2993 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2977 * cbSceneParam._m0[78u].x)) * _2967.x) / cbSceneParam._m0[78u].x)) + _2695;
        _2792 = (exp2(_2993 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2977 * cbSceneParam._m0[78u].y)) * _2967.y) / cbSceneParam._m0[78u].y)) + _2696;
        _2794 = (exp2(_2993 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2977 * cbSceneParam._m0[78u].z)) * _2967.z) / cbSceneParam._m0[78u].z)) + _2697;
        _2796 = _2976 * _2698;
    }
    else
    {
        _2790 = _2695;
        _2792 = _2696;
        _2794 = _2697;
        _2796 = _2698;
    }
    bool _3003;
    vec4 _2806;
    vec4 _2828;
    float _2830;
    float _2834;
    float _2835;
    float _2836;
    float _2837;
    bool _2847;
    for (;;)
    {
        _2806 = cbMatDynParam._m0[0u];
        float _2808 = roundEven(_2806.y);
        bool _2809 = _2808 == 3.0;
        float _2810 = log2(_2796);
        float _2817 = exp2(_2810 * cbSceneParam._m0[78u].x) * _2666;
        float _2818 = exp2(_2810 * cbSceneParam._m0[78u].y) * _2667;
        float _2819 = exp2(_2810 * cbSceneParam._m0[78u].z) * _2668;
        float _2826 = _623 + (-0.5);
        _2828 = cbMtdParam._m0[1u];
        _2830 = _2828.y * _2826;
        float _2833 = (_2808 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2834 = _2833 * (_2809 ? _2817 : (_2817 + (cbSceneParam._m0[72u].w * _2790)));
        _2835 = _2833 * (_2809 ? _2818 : (_2818 + (cbSceneParam._m0[72u].w * _2792)));
        _2836 = _2833 * (_2809 ? _2819 : (_2819 + (cbSceneParam._m0[72u].w * _2794)));
        _2837 = _2826 * 0.999000012874603271484375;
        _2847 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2847)
        {
            if ((cbInstanceData._m0[_737 + 7u].x + _2837) < 0.5)
            {
                _3003 = true;
                break;
            }
        }
        uint _2944 = _738 + uint(_2806.w);
        if ((cbInstanceData._m0[_2944].w < 1.0) && ((cbInstanceData._m0[_2944].w + _2837) < 0.5))
        {
            _3003 = true;
            break;
        }
        if ((_2830 + _387) < _2828.x)
        {
            _3003 = true;
            break;
        }
        _3003 = false;
        break;
    }
    float _3208;
    if (_3003)
    {
        discard_state = true;
        _3208 = 0.0;
    }
    else
    {
        _3208 = _2673;
    }
    SV_Target.x = _2834;
    SV_Target.y = _2835;
    SV_Target.z = _2836;
    SV_Target.w = _3208;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2673;
    discard_exit();
}


