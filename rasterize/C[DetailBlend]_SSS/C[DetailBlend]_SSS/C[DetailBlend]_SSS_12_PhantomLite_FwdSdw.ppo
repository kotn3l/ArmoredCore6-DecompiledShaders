#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1383;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238;
    float _239;
    float _240;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
    }
    else
    {
        _238 = _224;
        _239 = _225;
        _240 = _226;
    }
    float _285 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _295 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _285);
    float _296 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _285);
    float _297 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _285);
    vec4 _310 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _315 = _310.z;
    float _316 = _310.w;
    float _322 = exp2(log2(_315 * 22.0) * 260.0);
    float _323 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _324 = isnan(1.0) ? _323 : (isnan(_323) ? 1.0 : min(_323, 1.0));
    vec4 _338 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _348 = cbMtdParam._m0[10u].x * _338.x;
    float _349 = cbMtdParam._m0[10u].y * _338.y;
    float _350 = cbMtdParam._m0[10u].z * _338.z;
    vec4 _362 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _377 = exp2(log2(1.0 - _316) * 8.0);
    vec4 _389 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _405 = exp2(log2(_316) * 8.0);
    vec4 _418 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    vec4 _442 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _464 = (((((_362.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _442.x) - _348) * _324) + _348;
    float _465 = (((((_362.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _442.y) - _349) * _324) + _349;
    float _466 = (((((_362.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _442.z) - _350) * _324) + _350;
    float _473 = (((cbMtdParam._m0[12u].x * _389.x) - _464) * _377) + _464;
    float _474 = (((cbMtdParam._m0[12u].y * _389.y) - _465) * _377) + _465;
    float _475 = (((cbMtdParam._m0[12u].z * _389.z) - _466) * _377) + _466;
    float _482 = (((cbMtdParam._m0[11u].x * _418.x) - _473) * _405) + _473;
    float _483 = (((cbMtdParam._m0[11u].y * _418.y) - _474) * _405) + _474;
    float _484 = (((cbMtdParam._m0[11u].z * _418.z) - _475) * _405) + _475;
    float _485 = _442.w * _362.w;
    float _514 = (((texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _324) + cbMtdParam._m0[15u].y;
    float _517 = ((cbMtdParam._m0[14u].y - _514) * _377) + _514;
    float _520 = ((cbMtdParam._m0[15u].x - _517) * _405) + _517;
    vec4 _532 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _534 = _532.x;
    float _535 = _532.y;
    float _541 = cbMtdParam._m0[13u].y + _532.z;
    vec4 _553 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _572 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _589 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _600 = ((((_315 * 2.0) * (cbMtdParam._m0[13u].x + _553.z)) - _541) * _324) + _541;
    float _604 = (((_572.z - _600) + cbMtdParam._m0[14u].x) * _377) + _600;
    float _608 = (((_589.z - _604) + cbMtdParam._m0[13u].w) * _405) + _604;
    float _612 = (_310.x * 2.0) + (-1.0);
    float _614 = (_310.y * 2.0) + (-1.0);
    float _615 = dot(vec2(_612, _614), vec2(_612, _614));
    float _4039 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _620 = sqrt(1.0 - (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))));
    float _625 = ((_553.x - _534) * _324) + _534;
    float _626 = ((_553.y - _535) * _324) + _535;
    float _631 = ((_572.x - _625) * _377) + _625;
    float _632 = ((_572.y - _626) * _377) + _626;
    float _645 = ((((((_589.x - _631) * _405) + _631) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _612;
    float _646 = ((((((_589.y - _632) * _405) + _632) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _614;
    float _649 = fma(_620, _238, fma(_646, _230 * TANGENT.x, (_216 * _208) * _645));
    float _652 = fma(_620, _239, fma(_646, _230 * TANGENT.y, (_216 * _209) * _645));
    float _655 = fma(_620, _240, fma(_646, _230 * TANGENT.z, (_216 * _210) * _645));
    float _659 = inversesqrt(dot(vec3(_649, _652, _655), vec3(_649, _652, _655)));
    float _660 = _659 * _649;
    float _661 = _659 * _652;
    float _662 = _659 * _655;
    float _4050 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _663 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _4061 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _664 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _4072 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _665 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _4083 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _666 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _4094 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _667 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _4105 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _668 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _676 = cbMatDynParam._m0[9u].x * _665;
    float _677 = cbMatDynParam._m0[9u].y * _666;
    float _678 = cbMatDynParam._m0[9u].z * _667;
    float _685 = inversesqrt(dot(vec3(_295, _296, _297), vec3(_295, _296, _297)));
    float _686 = _685 * _295;
    float _687 = _685 * _296;
    float _688 = _685 * _297;
    float _689 = dot(vec3(_660, _661, _662), vec3(_686, _687, _688));
    float _695 = abs(exp2(log2(_689) * cbMatDynParam._m0[12u].x));
    float _696 = isnan(0.100000001490116119384765625) ? _695 : (isnan(_695) ? 0.100000001490116119384765625 : max(_695, 0.100000001490116119384765625));
    float _702 = ((isnan(0.699999988079071044921875) ? _696 : (isnan(_696) ? 0.699999988079071044921875 : min(_696, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _724 = 1.0 - cbMatDynParam._m0[8u].w;
    float _4126 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _727 = 1.0 - cbMatDynParam._m0[7u].w;
    float _4137 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _728 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _732 = dot(vec3(_660, _661, _662), vec3(0.0, -1.0, 0.0));
    float _4148 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _735 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _742 = (_735 * _665) * cbMatDynParam._m0[11u].x;
    float _744 = (_735 * _666) * cbMatDynParam._m0[11u].y;
    float _746 = (_735 * _667) * cbMatDynParam._m0[11u].z;
    float _753 = dot(vec3(_686, _687, _688), vec3(_660, _661, _662));
    float _756 = _753 * 2.0;
    float _766 = dot(vec3((-0.0) - (_686 - (_756 * _660)), (-0.0) - (_687 - (_756 * _661)), (-0.0) - (_688 - (_756 * _662))), vec3(0.0, -1.0, 0.0));
    float _4159 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _773 = exp2(log2(isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * 4.0);
    float _799 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _805 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _806 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _808 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _810 = _808.w;
    float _828 = fma(_662, cbSceneParam._m0[5u].z, fma(_661, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _660));
    float _831 = fma(_662, cbSceneParam._m0[6u].z, fma(_661, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _660));
    float _834 = fma(_662, cbSceneParam._m0[7u].z, fma(_661, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _660));
    vec4 _836 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _838 = _836.x;
    float _850 = (((_836.y - _664) + (_836.w * _664)) * cbMtdParam._m0[3u].x) + _664;
    vec4 _851 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _867 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_838 * _838)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _851.z;
    float _875 = (((cbMatDynParam._m0[15u].x - _668) * cbMatDynParam._m0[15u].w) * _867) + _668;
    float _883 = ((_867 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _850)) + _850;
    uint _907 = uint(roundEven(NORMAL.w)) * 13u;
    uint _908 = _907 + 9u;
    uint _909 = _908 + uint(cbMatDynParam._m0[0u].w);
    float _915 = (cbMtdParam._m0[0u].x * _676) * cbInstanceData._m0[_909].x;
    float _916 = (cbMtdParam._m0[0u].y * _677) * cbInstanceData._m0[_909].y;
    float _917 = (cbMtdParam._m0[0u].z * _678) * cbInstanceData._m0[_909].z;
    float _4170 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _918 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _4181 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _919 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _4192 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _920 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    vec4 _921 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _926 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _937 = (((_926.x - _875) + (_926.w * _875)) * cbMtdParam._m0[3u].x) + _875;
    float _950 = (cbMtdParam._m0[3u].x * (((_918 * _810) - _918) + _921.x)) + _918;
    float _951 = (cbMtdParam._m0[3u].x * (((_919 * _810) - _919) + _921.y)) + _919;
    float _952 = (cbMtdParam._m0[3u].x * (((_920 * _810) - _920) + _921.z)) + _920;
    float _966 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_875 * (_676 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_875 * (_677 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_875 * (_678 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _970 = _966 * cbMatDynParam._m0[13u].w;
    float _980 = (_970 * (cbMatDynParam._m0[13u].x - _950)) + _950;
    float _981 = (_970 * (cbMatDynParam._m0[13u].y - _951)) + _951;
    float _982 = (_970 * (cbMatDynParam._m0[13u].z - _952)) + _952;
    float _990 = ((_966 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _937)) + _937;
    float _991 = 1.0 - _990;
    float _992 = _991 * _980;
    float _993 = _991 * _981;
    float _994 = _991 * _982;
    float _998 = (_980 + (-0.039999999105930328369140625)) * _990;
    float _999 = (_981 + (-0.039999999105930328369140625)) * _990;
    float _1000 = (_982 + (-0.039999999105930328369140625)) * _990;
    float _1001 = _998 + 0.039999999105930328369140625;
    float _1002 = _999 + 0.039999999105930328369140625;
    float _1003 = _1000 + 0.039999999105930328369140625;
    vec4 _1012 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _805, cbSceneParam._m0[86u].y * _806));
    float _1015 = _1012.x * TEXCOORD_4;
    float _1016 = _689 * 2.0;
    float _1020 = (_1016 * _660) - _686;
    float _1021 = (_1016 * _661) - _687;
    float _1022 = (_1016 * _662) - _688;
    float _1023 = abs(_753);
    float _4203 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _1025 = sqrt(_883);
    float _1037 = exp2((_1025 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1025 * 3.0));
    float _1043 = (1.0 - _1037) * ((_1025 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1044 = _1037 * _1025;
    float _1072 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1076 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1080 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1382;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1107 = fma(_1080, cbModelParam._m0[26u].z, fma(_1076, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1072));
        float _1111 = fma(_1080, cbModelParam._m0[27u].z, fma(_1076, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1072));
        float _1115 = fma(_1080, cbModelParam._m0[28u].z, fma(_1076, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1072));
        float _1140 = _1072 + _660;
        float _1141 = _1076 + _661;
        float _1142 = _1080 + _662;
        float _1152 = fma(_1142, cbModelParam._m0[26u].z, fma(_1141, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1140)) - _1107;
        float _1153 = fma(_1142, cbModelParam._m0[27u].z, fma(_1141, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1140)) - _1111;
        float _1154 = fma(_1142, cbModelParam._m0[28u].z, fma(_1141, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1140)) - _1115;
        float _1158 = inversesqrt(dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154)));
        float _1171 = ((_1158 * _1152) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1107 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1172 = ((_1158 * _1153) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1111 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1173 = ((_1158 * _1154) / cbModelParam._m0[34u].z) + ((((((_1115 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        float _1210 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1176.x + (-0.5));
        float _1212 = _1210 * (_1176.y + (-0.5));
        float _1213 = _1210 * (_1176.z + (-0.5));
        float _1220 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1183.x + (-0.5));
        float _1222 = _1220 * (_1183.y + (-0.5));
        float _1223 = _1220 * (_1183.z + (-0.5));
        float _1230 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1190.x + (-0.5));
        float _1232 = _1230 * (_1190.y + (-0.5));
        float _1233 = _1230 * (_1190.z + (-0.5));
        float _1240 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1197.x + (-0.5));
        float _1242 = _1240 * (_1197.y + (-0.5));
        float _1243 = _1240 * (_1197.z + (-0.5));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = _1211 * 0.5;
        float _1248 = _1221 * 0.5;
        float _1249 = _1231 * 0.5;
        float _1250 = dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249));
        float _1255 = (_1250 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1250);
        float _1264 = (dot(vec3(_660, _661, _662), vec3(_1255 * _1247, _1255 * _1248, _1255 * _1249)) + 1.0) * 0.5;
        float _4229 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1274 = sqrt(((_1248 * _1248) + (_1247 * _1247)) + (_1249 * _1249)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _4240 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1276 = _1275 * 2.0;
        float _1280 = (1.0 - _1275) / (_1275 + 1.0);
        float _4251 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1290 = ((((1.0 - _1281) * (_1276 + 2.0)) * exp2(log2(isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_1276 + 1.0))) + _1281) * _1244;
        float _1291 = _1212 * 0.5;
        float _1292 = _1222 * 0.5;
        float _1293 = _1232 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1307 = (dot(vec3(_660, _661, _662), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _4262 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1316 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _4273 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _4284 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_1318 + 1.0))) + _1323) * _1245;
        float _1333 = _1213 * 0.5;
        float _1334 = _1223 * 0.5;
        float _1335 = _1233 * 0.5;
        float _1336 = dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335));
        float _1341 = (_1336 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1336);
        float _1349 = (dot(vec3(_660, _661, _662), vec3(_1341 * _1333, _1341 * _1334, _1341 * _1335)) + 1.0) * 0.5;
        float _4295 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1358 = sqrt(((_1334 * _1334) + (_1333 * _1333)) + (_1335 * _1335)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _4306 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1360 = _1359 * 2.0;
        float _1364 = (1.0 - _1359) / (_1359 + 1.0);
        float _4317 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1374 = ((((1.0 - _1365) * (_1360 + 2.0)) * exp2(log2(isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_1360 + 1.0))) + _1365) * _1246;
        _1382 = _1213;
        _1384 = _1212;
        _1385 = _1211;
        _1386 = _1223;
        _1387 = _1222;
        _1388 = _1221;
        _1389 = _1233;
        _1390 = _1232;
        _1391 = _1231;
        _1392 = _1246;
        _1393 = _1245;
        _1394 = _1244;
        _1395 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)));
        _1396 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
        _1397 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)));
    }
    else
    {
        _1382 = _1383;
        _1384 = _1383;
        _1385 = _1383;
        _1386 = _1383;
        _1387 = _1383;
        _1388 = _1383;
        _1389 = _1383;
        _1390 = _1383;
        _1391 = _1383;
        _1392 = _1383;
        _1393 = _1383;
        _1394 = _1383;
        _1395 = 0.0;
        _1396 = 0.0;
        _1397 = 0.0;
    }
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1423 = fma(_1080, cbModelParam._m0[30u].z, fma(_1076, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1072));
        float _1427 = fma(_1080, cbModelParam._m0[31u].z, fma(_1076, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1072));
        float _1431 = fma(_1080, cbModelParam._m0[32u].z, fma(_1076, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1072));
        float _1454 = _1072 + _660;
        float _1455 = _1076 + _661;
        float _1456 = _1080 + _662;
        float _1466 = fma(_1456, cbModelParam._m0[30u].z, fma(_1455, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1454)) - _1423;
        float _1467 = fma(_1456, cbModelParam._m0[31u].z, fma(_1455, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1454)) - _1427;
        float _1468 = fma(_1456, cbModelParam._m0[32u].z, fma(_1455, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1454)) - _1431;
        float _1472 = inversesqrt(dot(vec3(_1466, _1467, _1468), vec3(_1466, _1467, _1468)));
        float _1485 = ((_1472 * _1466) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1423 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1486 = ((_1472 * _1467) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1427 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1487 = ((_1472 * _1468) / cbModelParam._m0[35u].z) + ((((((_1431 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1489 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        vec4 _1496 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        vec4 _1503 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        vec4 _1510 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        float _1522 = exp2((_1489.w + (-0.5)) * 20.0) * 2.0;
        float _1523 = _1522 * (_1489.x + (-0.5));
        float _1524 = _1522 * (_1489.y + (-0.5));
        float _1525 = _1522 * (_1489.z + (-0.5));
        float _1532 = exp2((_1496.w + (-0.5)) * 20.0) * 2.0;
        float _1533 = _1532 * (_1496.x + (-0.5));
        float _1534 = _1532 * (_1496.y + (-0.5));
        float _1535 = _1532 * (_1496.z + (-0.5));
        float _1542 = exp2((_1503.w + (-0.5)) * 20.0) * 2.0;
        float _1543 = _1542 * (_1503.x + (-0.5));
        float _1544 = _1542 * (_1503.y + (-0.5));
        float _1545 = _1542 * (_1503.z + (-0.5));
        float _1552 = exp2((_1510.w + (-0.5)) * 20.0) * 2.0;
        float _1553 = _1552 * (_1510.x + (-0.5));
        float _1554 = _1552 * (_1510.y + (-0.5));
        float _1555 = _1552 * (_1510.z + (-0.5));
        float _1556 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1557 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1558 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1559 = _1523 * 0.5;
        float _1560 = _1533 * 0.5;
        float _1561 = _1543 * 0.5;
        float _1562 = dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561));
        float _1567 = (_1562 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1562);
        float _1575 = (dot(vec3(_660, _661, _662), vec3(_1567 * _1559, _1567 * _1560, _1567 * _1561)) + 1.0) * 0.5;
        float _4358 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1584 = sqrt(((_1560 * _1560) + (_1559 * _1559)) + (_1561 * _1561)) / (_1556 + 9.9999997473787516355514526367188e-06);
        float _4369 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _1586 = _1585 * 2.0;
        float _1590 = (1.0 - _1585) / (_1585 + 1.0);
        float _4380 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _1600 = ((((1.0 - _1591) * (_1586 + 2.0)) * exp2(log2(isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_1586 + 1.0))) + _1591) * _1556;
        float _1601 = _1524 * 0.5;
        float _1602 = _1534 * 0.5;
        float _1603 = _1544 * 0.5;
        float _1604 = dot(vec3(_1601, _1602, _1603), vec3(_1601, _1602, _1603));
        float _1609 = (_1604 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1604);
        float _1617 = (dot(vec3(_660, _661, _662), vec3(_1609 * _1601, _1609 * _1602, _1609 * _1603)) + 1.0) * 0.5;
        float _4391 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1626 = sqrt(((_1602 * _1602) + (_1601 * _1601)) + (_1603 * _1603)) / (_1557 + 9.9999997473787516355514526367188e-06);
        float _4402 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _1628 = _1627 * 2.0;
        float _1632 = (1.0 - _1627) / (_1627 + 1.0);
        float _4413 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _1642 = ((((1.0 - _1633) * (_1628 + 2.0)) * exp2(log2(isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (_1628 + 1.0))) + _1633) * _1557;
        float _1643 = _1525 * 0.5;
        float _1644 = _1535 * 0.5;
        float _1645 = _1545 * 0.5;
        float _1646 = dot(vec3(_1643, _1644, _1645), vec3(_1643, _1644, _1645));
        float _1651 = (_1646 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1646);
        float _1659 = (dot(vec3(_660, _661, _662), vec3(_1651 * _1643, _1651 * _1644, _1651 * _1645)) + 1.0) * 0.5;
        float _4424 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1668 = sqrt(((_1644 * _1644) + (_1643 * _1643)) + (_1645 * _1645)) / (_1558 + 9.9999997473787516355514526367188e-06);
        float _4435 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _1670 = _1669 * 2.0;
        float _1674 = (1.0 - _1669) / (_1669 + 1.0);
        float _4446 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _1684 = ((((1.0 - _1675) * (_1670 + 2.0)) * exp2(log2(isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_1670 + 1.0))) + _1675) * _1558;
        _1692 = _1525;
        _1693 = _1524;
        _1694 = _1523;
        _1695 = _1535;
        _1696 = _1534;
        _1697 = _1533;
        _1698 = _1545;
        _1699 = _1544;
        _1700 = _1543;
        _1701 = _1558;
        _1702 = _1557;
        _1703 = _1556;
        _1704 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)));
        _1705 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)));
        _1706 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)));
    }
    else
    {
        _1692 = _1383;
        _1693 = _1383;
        _1694 = _1383;
        _1695 = _1383;
        _1696 = _1383;
        _1697 = _1383;
        _1698 = _1383;
        _1699 = _1383;
        _1700 = _1383;
        _1701 = _1383;
        _1702 = _1383;
        _1703 = _1383;
        _1704 = 0.0;
        _1705 = 0.0;
        _1706 = 0.0;
    }
    float _1716 = (cbModelParam._m0[1u].x * (_1704 - _1395)) + _1395;
    float _1717 = (cbModelParam._m0[1u].x * (_1705 - _1396)) + _1396;
    float _1718 = (cbModelParam._m0[1u].x * (_1706 - _1397)) + _1397;
    float _1739 = fma(_1718, cbSceneParam._m0[89u].z, fma(_1717, cbSceneParam._m0[89u].y, _1716 * cbSceneParam._m0[89u].x));
    float _1742 = fma(_1718, cbSceneParam._m0[90u].z, fma(_1717, cbSceneParam._m0[90u].y, _1716 * cbSceneParam._m0[90u].x));
    float _1745 = fma(_1718, cbSceneParam._m0[91u].z, fma(_1717, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1716));
    float _1760 = _1020 * 0.5;
    float _1761 = _1021 * 0.5;
    float _1762 = _1022 * 0.5;
    float _1763 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1694, _1697, _1700, _1703));
    float _1766 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1693, _1696, _1699, _1702));
    float _1769 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1692, _1695, _1698, _1701));
    float _1800;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1776 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1382, _1386, _1389, _1392));
        float _1780 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1384, _1387, _1390, _1393));
        float _1784 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1385, _1388, _1391, _1394));
        float _1791 = dot(vec4(cbModelParam._m0[39u]), vec4(_1760, _1761, _1762, 1.0));
        _1800 = dot(vec3(isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)), isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)), isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1791) ? 0.0 : (isnan(0.0) ? _1791 : max(0.0, _1791))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1800 = 1.0;
    }
    float _1811;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1802 = dot(vec4(cbModelParam._m0[40u]), vec4(_1760, _1761, _1762, 1.0));
        _1811 = dot(vec3(isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)), isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1802) ? 0.0 : (isnan(0.0) ? _1802 : max(0.0, _1802))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1811 = 1.0;
    }
    float _1815 = (_1811 * cbModelParam._m0[1u].x) + (_1800 * (1.0 - cbModelParam._m0[1u].x));
    float _1825 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _883);
    float _1826 = isnan(_1825) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1825 : min(cbModelParam._m0[25u].z, _1825));
    float _1906;
    float _1908;
    float _1910;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1873 = fma(_1080, cbModelParam._m0[13u].z, fma(_1076, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1072)) + cbModelParam._m0[13u].w;
        float _1877 = fma(_1080, cbModelParam._m0[14u].z, fma(_1076, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1072)) + cbModelParam._m0[14u].w;
        float _1881 = fma(_1080, cbModelParam._m0[15u].z, fma(_1076, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1072)) + cbModelParam._m0[15u].w;
        float _1884 = fma(_1022, cbModelParam._m0[13u].z, fma(_1021, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1020));
        float _1887 = fma(_1022, cbModelParam._m0[14u].z, fma(_1021, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1020));
        float _1890 = fma(_1022, cbModelParam._m0[15u].z, fma(_1021, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1020));
        float _1918;
        if (_1884 > 0.0)
        {
            _1918 = abs((1.0 - _1873) / _1884);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1873 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1918 = frontier_phi_16_14_ladder;
        }
        float _2093;
        if (_1887 > 0.0)
        {
            _2093 = abs((1.0 - _1877) / _1887);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1877 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2093 = frontier_phi_25_21_ladder;
        }
        float _2388;
        if (_1890 > 0.0)
        {
            _2388 = abs((1.0 - _1881) / _1890);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1881 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2388 = frontier_phi_37_32_ladder;
        }
        float _2390 = isnan(_2093) ? _1918 : (isnan(_1918) ? _2093 : min(_1918, _2093));
        float _2391 = isnan(_2388) ? _2390 : (isnan(_2390) ? _2388 : min(_2390, _2388));
        float _2395 = (_2391 * _1884) + _1873;
        float _2396 = (_2391 * _1887) + _1877;
        float _2397 = (_2391 * _1890) + _1881;
        float _2398 = _2391 * 9.9999997473787516355514526367188e-05;
        float _2400 = (-1.0) - _2398;
        float _2402 = _2398 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2397 > _2402) || ((_2397 < _2400) || ((_2396 > _2402) || ((_2396 < _2400) || ((_2395 < _2400) || (_2395 > _2402))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2542 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2397, cbModelParam._m0[9u].z, fma(_2396, cbModelParam._m0[9u].y, _2395 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2397, cbModelParam._m0[10u].z, fma(_2396, cbModelParam._m0[10u].y, _2395 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2397, cbModelParam._m0[11u].z, fma(_2396, cbModelParam._m0[11u].y, _2395 * cbModelParam._m0[11u].x))), _1826);
            frontier_phi_15_37_ladder = _2542.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2542.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2542.z * cbModelParam._m0[1u].y;
        }
        _1906 = frontier_phi_15_37_ladder_1;
        _1908 = frontier_phi_15_37_ladder;
        _1910 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1894 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1020, _1021, _1022), _1826);
        _1906 = _1894.x * cbModelParam._m0[1u].y;
        _1908 = _1894.y * cbModelParam._m0[1u].y;
        _1910 = _1894.z * cbModelParam._m0[1u].y;
    }
    float _1914 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _883);
    float _1915 = isnan(_1914) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1914 : min(cbModelParam._m0[25u].w, _1914));
    float _2008;
    float _2010;
    float _2012;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1972 = fma(_1080, cbModelParam._m0[21u].z, fma(_1076, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1072)) + cbModelParam._m0[21u].w;
        float _1976 = fma(_1080, cbModelParam._m0[22u].z, fma(_1076, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1072)) + cbModelParam._m0[22u].w;
        float _1980 = fma(_1080, cbModelParam._m0[23u].z, fma(_1076, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1072)) + cbModelParam._m0[23u].w;
        float _1983 = fma(_1022, cbModelParam._m0[21u].z, fma(_1021, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1020));
        float _1986 = fma(_1022, cbModelParam._m0[22u].z, fma(_1021, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1020));
        float _1989 = fma(_1022, cbModelParam._m0[23u].z, fma(_1021, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1020));
        float _2098;
        if (_1983 > 0.0)
        {
            _2098 = abs((1.0 - _1972) / _1983);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1972 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2098 = frontier_phi_27_23_ladder;
        }
        float _2415;
        if (_1986 > 0.0)
        {
            _2415 = abs((1.0 - _1976) / _1986);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1976 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2415 = frontier_phi_39_34_ladder;
        }
        float _2753;
        if (_1989 > 0.0)
        {
            _2753 = abs((1.0 - _1980) / _1989);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1980 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2753 = frontier_phi_49_46_ladder;
        }
        float _2755 = isnan(_2415) ? _2098 : (isnan(_2098) ? _2415 : min(_2098, _2415));
        float _2756 = isnan(_2753) ? _2755 : (isnan(_2755) ? _2753 : min(_2755, _2753));
        float _2760 = (_2756 * _1983) + _1972;
        float _2761 = (_2756 * _1986) + _1976;
        float _2762 = (_2756 * _1989) + _1980;
        float _2763 = _2756 * 9.9999997473787516355514526367188e-05;
        float _2764 = (-1.0) - _2763;
        float _2766 = _2763 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2762 > _2766) || ((_2762 < _2764) || ((_2761 > _2766) || ((_2761 < _2764) || ((_2760 < _2764) || (_2760 > _2766))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2884 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2762, cbModelParam._m0[17u].z, fma(_2761, cbModelParam._m0[17u].y, _2760 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2762, cbModelParam._m0[18u].z, fma(_2761, cbModelParam._m0[18u].y, _2760 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2762, cbModelParam._m0[19u].z, fma(_2761, cbModelParam._m0[19u].y, _2760 * cbModelParam._m0[19u].x))), _1915);
            frontier_phi_24_49_ladder = _2884.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2884.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2884.x * cbModelParam._m0[1u].z;
        }
        _2008 = frontier_phi_24_49_ladder_2;
        _2010 = frontier_phi_24_49_ladder_1;
        _2012 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1992 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1020, _1021, _1022), _1915);
        _2008 = _1992.x * cbModelParam._m0[1u].z;
        _2010 = _1992.y * cbModelParam._m0[1u].z;
        _2012 = _1992.z * cbModelParam._m0[1u].z;
    }
    float _2025 = (((_1043 * _1001) + _1044) * _1015) * ((cbModelParam._m0[1u].w * (_2008 - _1906)) + _1906);
    float _2027 = (((_1043 * _1002) + _1044) * _1015) * ((cbModelParam._m0[1u].w * (_2010 - _1908)) + _1908);
    float _2029 = (((_1043 * _1003) + _1044) * _1015) * ((cbModelParam._m0[1u].w * (_2012 - _1910)) + _1910);
    float _2032 = fma(_2029, cbSceneParam._m0[89u].z, fma(_2027, cbSceneParam._m0[89u].y, _2025 * cbSceneParam._m0[89u].x));
    float _2035 = fma(_2029, cbSceneParam._m0[90u].z, fma(_2027, cbSceneParam._m0[90u].y, _2025 * cbSceneParam._m0[90u].x));
    float _2038 = fma(_2029, cbSceneParam._m0[91u].z, fma(_2027, cbSceneParam._m0[91u].y, _2025 * cbSceneParam._m0[91u].x));
    float _2072 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2076 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2080 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2084 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2085 = _2072 / _2084;
    float _2086 = _2076 / _2084;
    float _2087 = _2080 / _2084;
    float _2234;
    float _2235;
    float _2236;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2114 = ((uint(_2087 > cbSceneParam._m0[59u].y) + uint(_2087 > cbSceneParam._m0[59u].x)) + uint(_2087 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2115 = _2114 + 43u;
        uint _2123 = _2114 + 44u;
        uint _2131 = _2114 + 45u;
        uint _2139 = _2114 + 46u;
        float _2150 = fma(_2084, cbSceneParam._m0[_2115].w, fma(_2080, cbSceneParam._m0[_2115].z, fma(_2076, cbSceneParam._m0[_2115].y, _2072 * cbSceneParam._m0[_2115].x)));
        float _2154 = fma(_2084, cbSceneParam._m0[_2123].w, fma(_2080, cbSceneParam._m0[_2123].z, fma(_2076, cbSceneParam._m0[_2123].y, _2072 * cbSceneParam._m0[_2123].x)));
        float _2162 = fma(_2084, cbSceneParam._m0[_2139].w, fma(_2080, cbSceneParam._m0[_2139].z, fma(_2076, cbSceneParam._m0[_2139].y, _2072 * cbSceneParam._m0[_2139].x)));
        float _2167 = cbSceneParam._m0[33u].z * _2162;
        float _2169 = cbSceneParam._m0[33u].w * _2162;
        float _2172 = fma(_2084, cbSceneParam._m0[_2131].w, fma(_2080, cbSceneParam._m0[_2131].z, fma(_2076, cbSceneParam._m0[_2131].y, _2072 * cbSceneParam._m0[_2131].x))) / _2162;
        float _2220 = (cbSceneParam._m0[33u].x - sqrt(((_2086 * _2086) + (_2085 * _2085)) + (_2087 * _2087))) * cbSceneParam._m0[33u].y;
        float _4572 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2227 = (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2167 + _2150) / _2162, (_2169 + _2154) / _2162), _2172), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2169 + _2150) / _2162, (_2154 - _2167) / _2162), _2172), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2150 - _2167) / _2162, (_2154 - _2169) / _2162), _2172), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2150 - _2169) / _2162, (_2167 + _2154) / _2162), _2172), 0.0)).x), vec4(0.25)));
        _2234 = 1.0 - (_2227 * cbSceneParam._m0[34u].x);
        _2235 = 1.0 - (_2227 * cbSceneParam._m0[34u].y);
        _2236 = 1.0 - (_2227 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2234 = 1.0;
        _2235 = 1.0;
        _2236 = 1.0;
    }
    float _2300;
    float _2302;
    float _2304;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2288 = fma(_2084, cbSceneParam._m0[63u].w, fma(_2080, cbSceneParam._m0[63u].z, fma(_2076, cbSceneParam._m0[63u].y, _2072 * cbSceneParam._m0[63u].x)));
        float _2289 = fma(_2084, cbSceneParam._m0[60u].w, fma(_2080, cbSceneParam._m0[60u].z, fma(_2076, cbSceneParam._m0[60u].y, _2072 * cbSceneParam._m0[60u].x))) / _2288;
        float _2290 = fma(_2084, cbSceneParam._m0[61u].w, fma(_2080, cbSceneParam._m0[61u].z, fma(_2076, cbSceneParam._m0[61u].y, _2072 * cbSceneParam._m0[61u].x))) / _2288;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2289 >= cbSceneParam._m0[64u].x) && (_2290 >= cbSceneParam._m0[64u].y)) && (_2289 <= cbSceneParam._m0[64u].z)) && (_2290 <= cbSceneParam._m0[64u].w))
        {
            float _2428 = fma(_2084, cbSceneParam._m0[62u].w, fma(_2080, cbSceneParam._m0[62u].z, fma(_2076, cbSceneParam._m0[62u].y, _2072 * cbSceneParam._m0[62u].x))) / _2288;
            float _2432 = isnan(cbSceneParam._m0[41u].w) ? _2428 : (isnan(_2428) ? cbSceneParam._m0[41u].w : max(_2428, cbSceneParam._m0[41u].w));
            float _2475 = (cbSceneParam._m0[33u].x - sqrt(((_2086 * _2086) + (_2085 * _2085)) + (_2087 * _2087))) * cbSceneParam._m0[33u].y;
            float _4588 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
            float _2482 = (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2289, cbSceneParam._m0[33u].w + _2290), _2432), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2289, _2290 - cbSceneParam._m0[33u].z), _2432), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2289 - cbSceneParam._m0[33u].z, _2290 - cbSceneParam._m0[33u].w), _2432), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2289 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2290), _2432), 0.0)).x), vec4(0.25)));
            float _2486 = 1.0 - (_2482 * cbSceneParam._m0[34u].x);
            float _2487 = 1.0 - (_2482 * cbSceneParam._m0[34u].y);
            float _2488 = 1.0 - (_2482 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2487) ? _2235 : (isnan(_2235) ? _2487 : min(_2235, _2487));
            frontier_phi_36_35_ladder_1 = isnan(_2488) ? _2236 : (isnan(_2236) ? _2488 : min(_2236, _2488));
            frontier_phi_36_35_ladder_2 = isnan(_2486) ? _2234 : (isnan(_2234) ? _2486 : min(_2234, _2486));
        }
        else
        {
            frontier_phi_36_35_ladder = _2235;
            frontier_phi_36_35_ladder_1 = _2236;
            frontier_phi_36_35_ladder_2 = _2234;
        }
        _2300 = frontier_phi_36_35_ladder_2;
        _2302 = frontier_phi_36_35_ladder;
        _2304 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2300 = _2234;
        _2302 = _2235;
        _2304 = _2236;
    }
    uvec4 _2309 = floatBitsToUint(cbInstanceData._m0[_907 + 5u]);
    uint _2311 = _2309.x * 14u;
    uint _2312 = _2311 + 13u;
    float _2319 = _1015 + (-1.0);
    float _2324 = (cbLight._m0[_2312].x * _2319) + 1.0;
    float _2325 = (cbLight._m0[_2312].y * _2319) + 1.0;
    float _2326 = (cbLight._m0[_2312].z * _2319) + 1.0;
    float _2327 = (cbLight._m0[_2312].w * _2319) + 1.0;
    uint _2328 = _2311 + 5u;
    float _2334 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
    uint _2338 = _2311 + 4u;
    float _2347 = isnan(1.0) ? _2324 : (isnan(_2324) ? 1.0 : min(_2324, 1.0));
    uint _2351 = _2311 | 1u;
    float _2362 = dot(vec3(cbLight._m0[_2311].xyz), vec3(_660, _661, _662));
    float _2365 = dot(vec3(cbLight._m0[_2351].xyz), vec3(_660, _661, _662));
    float _4624 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _4635 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2370 = (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * 0.3183098733425140380859375;
    float _2372 = (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * 0.3183098733425140380859375;
    float _2379 = ((cbLight._m0[_2328].x * _2334) * _2372) + (((cbLight._m0[_2338].x * _2300) * _2347) * _2370);
    float _2380 = ((_2334 * cbLight._m0[_2328].y) * _2372) + (((cbLight._m0[_2338].y * _2302) * _2347) * _2370);
    float _2381 = ((_2334 * cbLight._m0[_2328].z) * _2372) + (((cbLight._m0[_2338].z * _2304) * _2347) * _2370);
    uvec4 _2385 = floatBitsToUint(cbLight._m0[_2311 + 12u]);
    bool _2387 = _2385.x == 0u;
    float _2489;
    float _2491;
    float _2493;
    if (_2387)
    {
        _2489 = _2379;
        _2491 = _2380;
        _2493 = _2381;
    }
    else
    {
        uint _2497 = _2311 + 6u;
        float _2513 = (dot(vec3(cbLight._m0[_2311 + 2u].xyz), vec3(_660, _661, _662)) * 0.5) + 0.5;
        float _2514 = _2513 * _2513;
        float _4646 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2515 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _2516 = isnan(1.0) ? _2326 : (isnan(_2326) ? 1.0 : min(_2326, 1.0));
        _2489 = (((cbLight._m0[_2497].x * 0.3183098733425140380859375) * _2515) * _2516) + _2379;
        _2491 = (((cbLight._m0[_2497].y * 0.3183098733425140380859375) * _2515) * _2516) + _2380;
        _2493 = (((cbLight._m0[_2497].z * 0.3183098733425140380859375) * _2515) * _2516) + _2381;
    }
    bool _2496 = _2385.y == 0u;
    float _2551;
    float _2553;
    float _2555;
    if (_2496)
    {
        _2551 = _2489;
        _2553 = _2491;
        _2555 = _2493;
    }
    else
    {
        uint _2724 = _2311 + 7u;
        float _2740 = (dot(vec3(cbLight._m0[_2311 + 3u].xyz), vec3(_660, _661, _662)) * 0.5) + 0.5;
        float _2741 = _2740 * _2740;
        float _4662 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
        float _2742 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
        float _2743 = isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0));
        _2551 = (((cbLight._m0[_2724].x * 0.3183098733425140380859375) * _2742) * _2743) + _2489;
        _2553 = (((cbLight._m0[_2724].y * 0.3183098733425140380859375) * _2742) * _2743) + _2491;
        _2555 = (((cbLight._m0[_2724].z * 0.3183098733425140380859375) * _2742) * _2743) + _2493;
    }
    uint _2558 = _2311 + 8u;
    float _2571 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2311].w)) * _883) * 0.949999988079071044921875);
    float _2572 = _2571 * _2571;
    float _2573 = cbLight._m0[_2311].x + _686;
    float _2574 = cbLight._m0[_2311].y + _687;
    float _2575 = cbLight._m0[_2311].z + _688;
    float _2579 = inversesqrt(dot(vec3(_2573, _2574, _2575), vec3(_2573, _2574, _2575)));
    float _2580 = _2579 * _2573;
    float _2581 = _2579 * _2574;
    float _2582 = _2579 * _2575;
    float _2583 = dot(vec3(_660, _661, _662), vec3(cbLight._m0[_2311].xyz));
    float _4678 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2586 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
    float _4689 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _2587 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
    float _2588 = dot(vec3(_660, _661, _662), vec3(_2580, _2581, _2582));
    float _4700 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
    float _2591 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
    float _2592 = dot(vec3(cbLight._m0[_2311].xyz), vec3(_2580, _2581, _2582));
    float _4711 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
    float _2596 = _2572 * _2572;
    float _2600 = ((_2591 * _2591) * (_2596 + (-1.0))) + 1.0;
    float _2608 = exp2(log2(1.0 - (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0)))) * 5.0);
    float _2609 = 0.959999978542327880859375 - _998;
    float _2611 = 0.959999978542327880859375 - _999;
    float _2612 = 0.959999978542327880859375 - _1000;
    float _2619 = 1.0 - _2572;
    float _2630 = (0.5 / (((_2587 * ((_2586 * _2619) + _2572)) + 9.9999999392252902907785028219223e-09) + (((_2587 * _2619) + _2572) * _2586))) * _2586;
    float _4722 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
    float _2632 = (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * (_2596 / ((_2600 * _2600) * 3.141590118408203125));
    uint _2646 = _2311 + 9u;
    float _2657 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2351].w)) * _883) * 0.949999988079071044921875);
    float _2658 = _2657 * _2657;
    float _2659 = cbLight._m0[_2351].x + _686;
    float _2660 = cbLight._m0[_2351].y + _687;
    float _2661 = cbLight._m0[_2351].z + _688;
    float _2665 = inversesqrt(dot(vec3(_2659, _2660, _2661), vec3(_2659, _2660, _2661)));
    float _2666 = _2665 * _2659;
    float _2667 = _2665 * _2660;
    float _2668 = _2665 * _2661;
    float _2669 = dot(vec3(_660, _661, _662), vec3(cbLight._m0[_2351].xyz));
    float _4733 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
    float _2672 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
    float _2673 = dot(vec3(_660, _661, _662), vec3(_2666, _2667, _2668));
    float _4744 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
    float _2676 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
    float _2677 = dot(vec3(cbLight._m0[_2351].xyz), vec3(_2666, _2667, _2668));
    float _4755 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
    float _2681 = _2658 * _2658;
    float _2685 = ((_2676 * _2676) * (_2681 + (-1.0))) + 1.0;
    float _2692 = exp2(log2(1.0 - (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0)))) * 5.0);
    float _2699 = 1.0 - _2658;
    float _2709 = (0.5 / (((_2587 * ((_2672 * _2699) + _2658)) + 9.9999999392252902907785028219223e-09) + (((_2587 * _2699) + _2658) * _2672))) * _2672;
    float _4766 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
    float _2711 = (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_2681 / ((_2685 * _2685) * 3.141590118408203125));
    float _2721 = (((((_2692 * _2609) + _1001) * cbLight._m0[_2646].x) * _2711) * _2334) + ((((cbLight._m0[_2558].x * _2300) * ((_2608 * _2609) + _1001)) * _2632) * _2347);
    float _2722 = (((((_2692 * _2611) + _1002) * cbLight._m0[_2646].y) * _2711) * _2334) + ((((cbLight._m0[_2558].y * _2302) * ((_2608 * _2611) + _1002)) * _2632) * _2347);
    float _2723 = (((((_2692 * _2612) + _1003) * cbLight._m0[_2646].z) * _2711) * _2334) + ((((cbLight._m0[_2558].z * _2304) * ((_2608 * _2612) + _1003)) * _2632) * _2347);
    float _2779;
    float _2781;
    float _2783;
    if (_2387)
    {
        _2779 = _2721;
        _2781 = _2722;
        _2783 = _2723;
    }
    else
    {
        uint _2785 = _2311 + 2u;
        uint _2789 = _2311 + 10u;
        float _2803 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2785].w)) * _883) * 0.949999988079071044921875);
        float _2804 = _2803 * _2803;
        float _2805 = cbLight._m0[_2785].x + _686;
        float _2806 = cbLight._m0[_2785].y + _687;
        float _2807 = cbLight._m0[_2785].z + _688;
        float _2811 = inversesqrt(dot(vec3(_2805, _2806, _2807), vec3(_2805, _2806, _2807)));
        float _2812 = _2811 * _2805;
        float _2813 = _2811 * _2806;
        float _2814 = _2811 * _2807;
        float _2815 = dot(vec3(_660, _661, _662), vec3(cbLight._m0[_2785].xyz));
        float _4777 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        float _2818 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
        float _2819 = dot(vec3(_660, _661, _662), vec3(_2812, _2813, _2814));
        float _4788 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        float _2822 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
        float _2823 = dot(vec3(cbLight._m0[_2785].xyz), vec3(_2812, _2813, _2814));
        float _4799 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
        float _2827 = _2804 * _2804;
        float _2831 = ((_2822 * _2822) * (_2827 + (-1.0))) + 1.0;
        float _2838 = exp2(log2(1.0 - (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0)))) * 5.0);
        float _2845 = 1.0 - _2804;
        float _2855 = (0.5 / (((_2587 * ((_2818 * _2845) + _2804)) + 9.9999999392252902907785028219223e-09) + (((_2587 * _2845) + _2804) * _2818))) * _2818;
        float _4810 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        float _2857 = (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0))) * (_2827 / ((_2831 * _2831) * 3.141590118408203125));
        float _2858 = isnan(1.0) ? _2326 : (isnan(_2326) ? 1.0 : min(_2326, 1.0));
        _2779 = (((((_2838 * _2609) + _1001) * cbLight._m0[_2789].x) * _2857) * _2858) + _2721;
        _2781 = (((((_2838 * _2611) + _1002) * cbLight._m0[_2789].y) * _2857) * _2858) + _2722;
        _2783 = (((((_2838 * _2612) + _1003) * cbLight._m0[_2789].z) * _2857) * _2858) + _2723;
    }
    float _2889;
    float _2891;
    float _2893;
    if (_2496)
    {
        _2889 = _2779;
        _2891 = _2781;
        _2893 = _2783;
    }
    else
    {
        uint _2900 = _2311 + 3u;
        uint _2904 = _2311 + 11u;
        float _2918 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2900].w)) * _883) * 0.949999988079071044921875);
        float _2919 = _2918 * _2918;
        float _2920 = cbLight._m0[_2900].x + _686;
        float _2921 = cbLight._m0[_2900].y + _687;
        float _2922 = cbLight._m0[_2900].z + _688;
        float _2926 = inversesqrt(dot(vec3(_2920, _2921, _2922), vec3(_2920, _2921, _2922)));
        float _2927 = _2926 * _2920;
        float _2928 = _2926 * _2921;
        float _2929 = _2926 * _2922;
        float _2930 = dot(vec3(_660, _661, _662), vec3(cbLight._m0[_2900].xyz));
        float _4826 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
        float _2933 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
        float _2934 = dot(vec3(_660, _661, _662), vec3(_2927, _2928, _2929));
        float _4837 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
        float _2937 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
        float _2938 = dot(vec3(cbLight._m0[_2900].xyz), vec3(_2927, _2928, _2929));
        float _4848 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
        float _2942 = _2919 * _2919;
        float _2946 = ((_2937 * _2937) * (_2942 + (-1.0))) + 1.0;
        float _2953 = exp2(log2(1.0 - (isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0)))) * 5.0);
        float _2960 = 1.0 - _2919;
        float _2970 = (0.5 / (((_2587 * ((_2933 * _2960) + _2919)) + 9.9999999392252902907785028219223e-09) + (((_2587 * _2960) + _2919) * _2933))) * _2933;
        float _4859 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
        float _2972 = (isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0))) * (_2942 / ((_2946 * _2946) * 3.141590118408203125));
        float _2973 = isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0));
        _2889 = (((((_2953 * _2609) + _1001) * cbLight._m0[_2904].x) * _2972) * _2973) + _2779;
        _2891 = (((((_2953 * _2611) + _1002) * cbLight._m0[_2904].y) * _2972) * _2973) + _2781;
        _2893 = (((((_2953 * _2612) + _1003) * cbLight._m0[_2904].z) * _2972) * _2973) + _2783;
    }
    float _3038;
    float _3040;
    float _3042;
    float _3044;
    float _3046;
    float _3048;
    if (_2309.y == 0u)
    {
        uvec4 _2994 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2995 = _2994.x;
        uint _3006 = uint((float(_2994.y) * floor(float(uint(cbSceneParam._m0[85u].y * _806) / _2995))) + floor(float(uint(cbSceneParam._m0[85u].x * _805) / _2995)));
        float _3016 = (log2(_2087 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3017 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
        uint _3020 = uint(isnan(14.0) ? _3017 : (isnan(_3017) ? 14.0 : min(_3017, 14.0)));
        uvec4 _3025 = texelFetch(g_lightClusterGridBuffer, int(((_3020 << 2u) + (_3006 << 6u)) >> 2u));
        uint _3026 = _3025.x;
        uint _3027 = _2994.z;
        float _3131;
        float _3133;
        float _3135;
        float _3137;
        float _3139;
        float _3141;
        if (((((1u << ((_3027 >> 4u) & 15u)) + 4294967295u) & _3026) == 0u) || ((_3027 & 240u) == 0u))
        {
            _3131 = 0.0;
            _3133 = 0.0;
            _3135 = 0.0;
            _3137 = 0.0;
            _3139 = 0.0;
            _3141 = 0.0;
        }
        else
        {
            float _3132;
            float _3134;
            float _3136;
            float _3138;
            float _3140;
            float _3142;
            float _3284 = 0.0;
            float _3285 = 0.0;
            float _3286 = 0.0;
            float _3287 = 0.0;
            float _3288 = 0.0;
            float _3289 = 0.0;
            uint _3290 = 0u;
            uint _3299;
            bool _3300;
            for (;;)
            {
                _3299 = texelFetch(g_lightClassification, int((((_3020 << 5u) + (_3006 << 9u)) + (_3290 << 2u)) >> 2u)).x;
                _3300 = _3299 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3300)
                {
                    frontier_phi_68_pred = _3289;
                    frontier_phi_68_pred_1 = _3288;
                    frontier_phi_68_pred_2 = _3287;
                    frontier_phi_68_pred_3 = _3285;
                    frontier_phi_68_pred_4 = _3284;
                    frontier_phi_68_pred_5 = _3286;
                }
                else
                {
                    float _3408;
                    float _3409;
                    float _3410;
                    float _3411;
                    float _3412;
                    float _3413;
                    uint _3414;
                    _3408 = _3284;
                    _3409 = _3285;
                    _3410 = _3286;
                    _3411 = _3287;
                    _3412 = _3288;
                    _3413 = _3289;
                    _3414 = _3299;
                    float _3340;
                    float _3341;
                    float _3342;
                    float _3343;
                    float _3344;
                    float _3345;
                    for (;;)
                    {
                        uint _3418 = uint(findLSB(_3414)) + (_3290 << 5u);
                        uint _3415 = (_3414 + 4294967295u) & _3414;
                        uint _3420 = _3418 * 48u;
                        vec4 _3434 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3420)).x, texelFetch(g_PointLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3420 + 3u)).x));
                        uint _3440 = (_3418 * 48u) + 4u;
                        vec4 _3453 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3440)).x, texelFetch(g_PointLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3440 + 3u)).x));
                        uint _3459 = (_3418 * 48u) + 8u;
                        vec3 _3470 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3459)).x, texelFetch(g_PointLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3459 + 2u)).x));
                        float _3474 = _3434.x - _2085;
                        float _3475 = _3434.y - _2086;
                        float _3476 = _3434.z - _2087;
                        float _3477 = dot(vec3(_3474, _3475, _3476), vec3(_3474, _3475, _3476));
                        float _3480 = inversesqrt(_3477);
                        float _3481 = _3480 * _3474;
                        float _3482 = _3480 * _3475;
                        float _3483 = _3480 * _3476;
                        float _3484 = dot(vec3(_828, _831, _834), vec3(_3481, _3482, _3483));
                        float _3489 = 1.0 - (_3477 * _3434.w);
                        float _4885 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                        float _3490 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
                        float _3491 = sqrt(_3477) * _3453.w;
                        float _3494 = 1.39999997615814208984375 / (_3491 + 1.39999997615814208984375);
                        float _3495 = _3494 * _3494;
                        float _3498 = ((1.0 - _3495) * _3484) + _3495;
                        float _3501 = _3491 * _3491;
                        float _3504 = ((isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0))) * _3490) / ((_3501 * 0.699999988079071044921875) + 1.0);
                        float _3508 = (-0.0) - _2085;
                        float _3509 = (-0.0) - _2086;
                        float _3510 = (-0.0) - _2087;
                        float _3514 = inversesqrt(dot(vec3(_3508, _3509, _3510), vec3(_3508, _3509, _3510)));
                        float _3515 = _3514 * _3508;
                        float _3516 = _3514 * _3509;
                        float _3517 = _3514 * _3510;
                        float _3524 = exp2(log2(1.0 / ((_3501 * 3.5) + 5.0)) * 0.25);
                        float _3525 = 1.0 - _1025;
                        float _3532 = sqrt(1.0 - ((1.0 - (_3525 * _3525)) * (1.0 - (_3524 * _3524))));
                        float _3533 = _3532 * _3532;
                        float _3534 = _3533 * _3533;
                        float _3535 = _3515 + _3481;
                        float _3536 = _3516 + _3482;
                        float _3537 = _3517 + _3483;
                        float _3541 = inversesqrt(dot(vec3(_3535, _3536, _3537), vec3(_3535, _3536, _3537)));
                        float _3545 = dot(vec3(_828, _831, _834), vec3(_3515, _3516, _3517));
                        float _4901 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                        float _3548 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
                        float _3549 = dot(vec3(_828, _831, _834), vec3(_3541 * _3535, _3541 * _3536, _3541 * _3537));
                        float _4912 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                        float _3552 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
                        float _3556 = ((_3552 * _3552) * (_3534 + (-1.0))) + 1.0;
                        float _3557 = _3494 * _3533;
                        float _3558 = _3557 * _3557;
                        float _3561 = ((1.0 - _3558) * _3484) + _3558;
                        float _4923 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                        float _3562 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
                        float _3563 = 1.0 - _3533;
                        float _3573 = (0.5 / (((_3562 * ((_3548 * _3563) + _3533)) + 9.9999999392252902907785028219223e-09) + (((_3562 * _3563) + _3533) * _3548))) * _3562;
                        float _4934 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                        float _3584 = (((_3534 * 3.1415927410125732421875) * (isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0)))) / ((_3556 * _3556) * ((_3501 * 2.1991131305694580078125) + 3.141590118408203125))) * _3490;
                        _3343 = (_3504 * _3453.x) + _3411;
                        _3344 = (_3504 * _3453.y) + _3412;
                        _3345 = (_3504 * _3453.z) + _3413;
                        _3340 = (_3584 * _3470.x) + _3408;
                        _3341 = (_3584 * _3470.y) + _3409;
                        _3342 = (_3584 * _3470.z) + _3410;
                        if (_3415 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3408 = _3340;
                            _3409 = _3341;
                            _3410 = _3342;
                            _3411 = _3343;
                            _3412 = _3344;
                            _3413 = _3345;
                            _3414 = _3415;
                        }
                    }
                    frontier_phi_68_pred = _3345;
                    frontier_phi_68_pred_1 = _3344;
                    frontier_phi_68_pred_2 = _3343;
                    frontier_phi_68_pred_3 = _3341;
                    frontier_phi_68_pred_4 = _3340;
                    frontier_phi_68_pred_5 = _3342;
                }
                _3142 = frontier_phi_68_pred;
                _3140 = frontier_phi_68_pred_1;
                _3138 = frontier_phi_68_pred_2;
                _3134 = frontier_phi_68_pred_3;
                _3132 = frontier_phi_68_pred_4;
                _3136 = frontier_phi_68_pred_5;
                uint _3291 = _3290 + 1u;
                if (_3291 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3284 = _3132;
                    _3285 = _3134;
                    _3286 = _3136;
                    _3287 = _3138;
                    _3288 = _3140;
                    _3289 = _3142;
                    _3290 = _3291;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3131 = _3132;
            _3133 = _3134;
            _3135 = _3136;
            _3137 = _3138;
            _3139 = _3140;
            _3141 = _3142;
        }
        uvec4 _3145 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3146 = _3145.z;
        uint _3148 = (_3146 >> 8u) & 15u;
        float _3252;
        float _3254;
        float _3256;
        float _3258;
        float _3260;
        float _3262;
        if (((4294967295u << _3148) & _3026) == 0u)
        {
            _3252 = _3131;
            _3254 = _3133;
            _3256 = _3135;
            _3258 = _3137;
            _3260 = _3139;
            _3262 = _3141;
        }
        else
        {
            float _3277 = inversesqrt(dot(vec3(_2085, _2086, _2087), vec3(_2085, _2086, _2087)));
            float _3278 = _3277 * _2085;
            float _3279 = _3277 * _2086;
            float _3280 = _3277 * _2087;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3148 < ((_3146 >> 12u) & 15u))
            {
                float _3253;
                float _3255;
                float _3257;
                float _3259;
                float _3261;
                float _3263;
                float _3391 = _3131;
                float _3392 = _3133;
                float _3393 = _3135;
                float _3394 = _3137;
                float _3395 = _3139;
                float _3396 = _3141;
                uint _3397 = _3148;
                uint _3406;
                bool _3407;
                for (;;)
                {
                    _3406 = texelFetch(g_lightClassification, int((((_3020 << 5u) + (_3006 << 9u)) + (_3397 << 2u)) >> 2u)).x;
                    _3407 = _3406 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3407)
                    {
                        frontier_phi_74_pred = _3393;
                        frontier_phi_74_pred_1 = _3392;
                        frontier_phi_74_pred_2 = _3391;
                        frontier_phi_74_pred_3 = _3396;
                        frontier_phi_74_pred_4 = _3395;
                        frontier_phi_74_pred_5 = _3394;
                    }
                    else
                    {
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3884;
                        float _3885;
                        float _3886;
                        float _3887;
                        float _3888;
                        float _3889;
                        float _3602 = _3391;
                        float _3603 = _3392;
                        float _3604 = _3393;
                        float _3605 = _3394;
                        float _3606 = _3395;
                        float _3607 = _3396;
                        uint _3608 = _3406;
                        uint _3609;
                        vec4 _3634;
                        float _3635;
                        vec4 _3650;
                        vec3 _3662;
                        vec4 _3677;
                        vec4 _3693;
                        float _3740;
                        bool _3741;
                        for (;;)
                        {
                            uint _3619 = ((_3397 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3608));
                            _3609 = (_3608 + 4294967295u) & _3608;
                            uint _3621 = _3619 * 40u;
                            _3634 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 3u)).x));
                            _3635 = _3634.w;
                            uint _3637 = (_3619 * 40u) + 4u;
                            _3650 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 3u)).x));
                            uint _3652 = (_3619 * 40u) + 8u;
                            _3662 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3652)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 2u)).x));
                            uint _3664 = (_3619 * 40u) + 16u;
                            _3677 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3664)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 3u)).x));
                            uint _3680 = (_3619 * 40u) + 20u;
                            _3693 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3680)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 3u)).x));
                            uint _3696 = (_3619 * 40u) + 24u;
                            vec4 _3709 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3696)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 3u)).x));
                            uint _3715 = (_3619 * 40u) + 28u;
                            vec4 _3728 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3715)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 3u)).x));
                            _3740 = fma(_2087, _3728.z, fma(_2086, _3728.y, _3728.x * _2085)) + _3728.w;
                            _3741 = !((fma(_2087, _3709.z, fma(_2086, _3709.y, _3709.x * _2085)) + _3709.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3741)
                            {
                                float _3768 = _3634.x - _2085;
                                float _3769 = _3634.y - _2086;
                                float _3770 = _3634.z - _2087;
                                float _3771 = dot(vec3(_3768, _3769, _3770), vec3(_3768, _3769, _3770));
                                float _3774 = inversesqrt(_3771);
                                float _3775 = _3774 * _3768;
                                float _3776 = _3774 * _3769;
                                float _3777 = _3774 * _3770;
                                float _3781 = 1.0 - (_3771 / (_3635 * _3635));
                                float _4945 = isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0));
                                float _3782 = isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0));
                                float _3786 = sqrt(_3771) * _3650.w;
                                float _3788 = 1.39999997615814208984375 / (_3786 + 1.39999997615814208984375);
                                float _3789 = _3788 * _3788;
                                float _3792 = ((1.0 - _3789) * dot(vec3(_3775, _3776, _3777), vec3(_828, _831, _834))) + _3789;
                                float _3795 = _3786 * _3786;
                                float _3799 = (fma(_2087, _3677.z, fma(_2086, _3677.y, _3677.x * _2085)) + _3677.w) / _3740;
                                float _3800 = (fma(_2087, _3693.z, fma(_2086, _3693.y, _3693.x * _2085)) + _3693.w) / _3740;
                                float _3804 = 1.0 - dot(vec2(_3799, _3800), vec2(_3799, _3800));
                                float _4961 = isnan(0.0) ? _3804 : (isnan(_3804) ? 0.0 : max(_3804, 0.0));
                                float _3805 = isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0));
                                float _3806 = _3805 * (((isnan(0.0) ? _3792 : (isnan(_3792) ? 0.0 : max(_3792, 0.0))) * _3782) / ((_3795 * 0.699999988079071044921875) + 1.0));
                                float _3818 = exp2(log2(1.0 / ((_3795 * 3.5) + 5.0)) * 0.25);
                                float _3819 = 1.0 - _1025;
                                float _3826 = sqrt(1.0 - ((1.0 - (_3819 * _3819)) * (1.0 - (_3818 * _3818))));
                                float _3827 = _3826 * _3826;
                                float _3828 = _3827 * _3827;
                                float _3829 = _3775 - _3278;
                                float _3830 = _3776 - _3279;
                                float _3831 = _3777 - _3280;
                                float _3835 = inversesqrt(dot(vec3(_3829, _3830, _3831), vec3(_3829, _3830, _3831)));
                                float _3839 = dot(vec3(_828, _831, _834), vec3((-0.0) - _3278, (-0.0) - _3279, (-0.0) - _3280));
                                float _4972 = isnan(0.0) ? _3839 : (isnan(_3839) ? 0.0 : max(_3839, 0.0));
                                float _3842 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
                                float _3843 = dot(vec3(_828, _831, _834), vec3(_3835 * _3829, _3835 * _3830, _3835 * _3831));
                                float _4983 = isnan(0.0) ? _3843 : (isnan(_3843) ? 0.0 : max(_3843, 0.0));
                                float _3846 = isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0));
                                float _3850 = ((_3846 * _3846) * (_3828 + (-1.0))) + 1.0;
                                float _3851 = _3788 * _3827;
                                float _3852 = _3851 * _3851;
                                float _3858 = ((1.0 - _3852) * dot(vec3(_828, _831, _834), vec3(_3775, _3776, _3777))) + _3852;
                                float _4994 = isnan(0.0) ? _3858 : (isnan(_3858) ? 0.0 : max(_3858, 0.0));
                                float _3859 = isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0));
                                float _3860 = 1.0 - _3827;
                                float _3870 = (0.5 / (((_3859 * ((_3842 * _3860) + _3827)) + 9.9999999392252902907785028219223e-09) + (((_3859 * _3860) + _3827) * _3842))) * _3859;
                                float _5005 = isnan(0.0) ? _3870 : (isnan(_3870) ? 0.0 : max(_3870, 0.0));
                                float _3880 = (_3805 * _3782) * (((_3828 * 3.1415927410125732421875) * (isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0)))) / ((_3850 * _3850) * ((_3795 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3880 * _3662.z;
                                frontier_phi_80_pred_1 = _3880 * _3662.y;
                                frontier_phi_80_pred_2 = _3880 * _3662.x;
                                frontier_phi_80_pred_3 = _3806 * _3650.z;
                                frontier_phi_80_pred_4 = _3806 * _3650.y;
                                frontier_phi_80_pred_5 = _3806 * _3650.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3886 = frontier_phi_80_pred;
                            _3885 = frontier_phi_80_pred_1;
                            _3884 = frontier_phi_80_pred_2;
                            _3889 = frontier_phi_80_pred_3;
                            _3888 = frontier_phi_80_pred_4;
                            _3887 = frontier_phi_80_pred_5;
                            _3592 = _3887 + _3605;
                            _3593 = _3888 + _3606;
                            _3594 = _3889 + _3607;
                            _3589 = _3884 + _3602;
                            _3590 = _3885 + _3603;
                            _3591 = _3886 + _3604;
                            if (_3609 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3602 = _3589;
                                _3603 = _3590;
                                _3604 = _3591;
                                _3605 = _3592;
                                _3606 = _3593;
                                _3607 = _3594;
                                _3608 = _3609;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3591;
                        frontier_phi_74_pred_1 = _3590;
                        frontier_phi_74_pred_2 = _3589;
                        frontier_phi_74_pred_3 = _3594;
                        frontier_phi_74_pred_4 = _3593;
                        frontier_phi_74_pred_5 = _3592;
                    }
                    _3257 = frontier_phi_74_pred;
                    _3255 = frontier_phi_74_pred_1;
                    _3253 = frontier_phi_74_pred_2;
                    _3263 = frontier_phi_74_pred_3;
                    _3261 = frontier_phi_74_pred_4;
                    _3259 = frontier_phi_74_pred_5;
                    uint _3398 = _3397 + 1u;
                    if (_3398 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3391 = _3253;
                        _3392 = _3255;
                        _3393 = _3257;
                        _3394 = _3259;
                        _3395 = _3261;
                        _3396 = _3263;
                        _3397 = _3398;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3261;
                frontier_phi_62_63_ladder_1 = _3259;
                frontier_phi_62_63_ladder_2 = _3257;
                frontier_phi_62_63_ladder_3 = _3263;
                frontier_phi_62_63_ladder_4 = _3255;
                frontier_phi_62_63_ladder_5 = _3253;
            }
            else
            {
                frontier_phi_62_63_ladder = _3139;
                frontier_phi_62_63_ladder_1 = _3137;
                frontier_phi_62_63_ladder_2 = _3135;
                frontier_phi_62_63_ladder_3 = _3141;
                frontier_phi_62_63_ladder_4 = _3133;
                frontier_phi_62_63_ladder_5 = _3131;
            }
            _3252 = frontier_phi_62_63_ladder_5;
            _3254 = frontier_phi_62_63_ladder_4;
            _3256 = frontier_phi_62_63_ladder_2;
            _3258 = frontier_phi_62_63_ladder_1;
            _3260 = frontier_phi_62_63_ladder;
            _3262 = frontier_phi_62_63_ladder_3;
        }
        float _3267 = isnan(1.0) ? _1015 : (isnan(_1015) ? 1.0 : min(_1015, 1.0));
        _3038 = (_3267 * _3258) + _2551;
        _3040 = (_3267 * _3260) + _2553;
        _3042 = (_3267 * _3262) + _2555;
        _3044 = ((_3252 * _1001) * _3267) + _2889;
        _3046 = ((_3254 * _1002) * _3267) + _2891;
        _3048 = ((_3256 * _1003) * _3267) + _2893;
    }
    else
    {
        _3038 = _2551;
        _3040 = _2553;
        _3042 = _2555;
        _3044 = _2889;
        _3046 = _2891;
        _3048 = _2893;
    }
    uint _3054 = _908 + uint(cbMatDynParam._m0[0u].w);
    float _3060 = cbInstanceData._m0[_3054].x * ((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _702) + cbMatDynParam._m0[7u].x) + (((_742 - (_742 * _668)) + (cbMatDynParam._m0[11u].x * _773)) * cbMatDynParam._m0[9u].x));
    float _3061 = cbInstanceData._m0[_3054].y * ((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _702) + cbMatDynParam._m0[7u].y) + (((_744 - (_744 * _668)) + (cbMatDynParam._m0[11u].y * _773)) * cbMatDynParam._m0[9u].y));
    float _3062 = cbInstanceData._m0[_3054].z * ((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _702) + cbMatDynParam._m0[7u].z) + (((_746 - (_746 * _668)) + (cbMatDynParam._m0[11u].z * _773)) * cbMatDynParam._m0[9u].z));
    float _5021 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _5032 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _5043 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _5054 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _3080 = (((isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0))) * (_3038 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _1015))) + ((_3044 + ((isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0))) * _1815)) * cbPerFrame._m0[3u].x)) + _3060;
    float _3082 = (_3061 + ((_3046 + ((isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0))) * _1815)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0))) * (_3040 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _1015)));
    float _3084 = (_3062 + ((_3048 + ((isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0))) * _1815)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0))) * (_3042 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1015)));
    float _3092 = cbMatDynParam._m0[12u].y - (cbMatDynParam._m0[12u].y * ((((isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) - _728) * _702) + _728));
    float _3097 = cbInstanceData._m0[_907 + 6u].w * (isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0)));
    float _3102 = _805 / cbSceneParam._m0[86u].x;
    float _3103 = _806 / cbSceneParam._m0[86u].y;
    vec4 _3117 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3102, _3103, (log2((isnan(cbSceneParam._m0[77u].w) ? _799 : (isnan(_799) ? cbSceneParam._m0[77u].w : min(_799, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3119 = _3117.x;
    float _3120 = _3117.y;
    float _3121 = _3117.z;
    float _3122 = _3117.w;
    float _3193;
    float _3195;
    float _3197;
    float _3199;
    if (_799 > cbSceneParam._m0[78u].w)
    {
        float _3156 = isnan(_799) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _799 : min(cbSceneParam._m0[80u].w, _799));
        float _3157 = _3156 / _799;
        float _3168 = _3157 * _295;
        float _3169 = _296 * _3157;
        float _3170 = (-0.0) - _3169;
        float _3171 = _3157 * _297;
        float _3173 = (cbSceneParam._m0[77u].w * _3170) / _3156;
        float _3174 = _3173 + cbSceneParam._m0[79u].w;
        float _3175 = cbSceneParam._m0[79u].w - _3169;
        float _3181 = sqrt(((_3168 * _3168) + (_3169 * _3169)) + (_3171 * _3171));
        float _3184 = (1.0 - (cbSceneParam._m0[77u].w / _3156)) * _3181;
        float _3189 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3191 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3353;
        if (abs((_3170 - _3173) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3353 = ((((_3174 > 0.0) ? exp2(_3189 * _3174) : (2.0 - exp2(_3191 * _3174))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3184;
        }
        else
        {
            float _3313 = 1.0 / cbSceneParam._m0[80u].x;
            float _3314 = isnan(_3175) ? _3174 : (isnan(_3174) ? _3175 : max(_3174, _3175));
            float _3315 = isnan(_3175) ? _3174 : (isnan(_3174) ? _3175 : min(_3174, _3175));
            float _3324 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : min(_3314, 0.0));
            float _3325 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : min(_3315, 0.0));
            _3353 = ((abs(_3181 / _3170) * cbSceneParam._m0[80u].y) * ((((_3324 - _3325) * 2.0) - ((exp2(_3189 * (isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0)))) - exp2(_3189 * (isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0))))) * _3313)) - ((exp2(_3191 * _3324) - exp2(_3191 * _3325)) * _3313))) + (_3184 * cbSceneParam._m0[80u].z);
        }
        vec4 _3355 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3102, _3103, 1.0), 0.0);
        float _3364 = exp2((_3353 * (-1.44269502162933349609375)) * (1.0 - _3355.w));
        float _3365 = log2(_3364);
        float _3381 = log2(_3122);
        _3193 = (exp2(_3381 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3365 * cbSceneParam._m0[78u].x)) * _3355.x) / cbSceneParam._m0[78u].x)) + _3119;
        _3195 = (exp2(_3381 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3365 * cbSceneParam._m0[78u].y)) * _3355.y) / cbSceneParam._m0[78u].y)) + _3120;
        _3197 = (exp2(_3381 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3365 * cbSceneParam._m0[78u].z)) * _3355.z) / cbSceneParam._m0[78u].z)) + _3121;
        _3199 = _3364 * _3122;
    }
    else
    {
        _3193 = _3119;
        _3195 = _3120;
        _3197 = _3121;
        _3199 = _3122;
    }
    float _3211 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3212 = _3211 == 3.0;
    float _3213 = log2(_3199);
    float _3217 = exp2(_3213 * cbSceneParam._m0[78u].x);
    float _3218 = exp2(_3213 * cbSceneParam._m0[78u].y);
    float _3219 = exp2(_3213 * cbSceneParam._m0[78u].z);
    float _3220 = _3217 * (isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0)));
    float _3221 = _3218 * (isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0)));
    float _3222 = _3219 * (isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0)));
    float _3231 = (_3211 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3231 * (_3212 ? _3220 : (_3220 + (cbSceneParam._m0[72u].w * _3193)));
    SV_Target.y = _3231 * (_3212 ? _3221 : (_3221 + (cbSceneParam._m0[72u].w * _3195)));
    SV_Target.z = _3231 * (_3212 ? _3222 : (_3222 + (cbSceneParam._m0[72u].w * _3197)));
    SV_Target.w = _3097;
    SV_Target_1.x = ((_3092 * _3060) * _3217) * _3231;
    SV_Target_1.y = ((_3092 * _3061) * _3218) * _3231;
    SV_Target_1.z = ((_3092 * _3062) * _3219) * _3231;
    SV_Target_1.w = _3097;
}


