#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1311;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230;
    float _231;
    float _232;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
    }
    else
    {
        _230 = _216;
        _231 = _217;
        _232 = _218;
    }
    float _277 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _287 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _277);
    float _288 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _277);
    float _289 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _277);
    vec4 _302 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _307 = _302.z;
    float _314 = exp2(log2(_307 * 22.0) * 260.0);
    float _315 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _316 = isnan(1.0) ? _315 : (isnan(_315) ? 1.0 : min(_315, 1.0));
    vec4 _330 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _340 = cbMtdParam._m0[10u].x * _330.x;
    float _341 = cbMtdParam._m0[10u].y * _330.y;
    float _342 = cbMtdParam._m0[10u].z * _330.z;
    vec4 _354 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _381 = exp2(log2(1.0 - _302.w) * 8.0);
    vec4 _393 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _418 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _426 = (((((cbMtdParam._m0[9u].x * _354.x) - _340) * _316) + _340) * 4.55000019073486328125) * _418.x;
    float _428 = (((((cbMtdParam._m0[9u].y * _354.y) - _341) * _316) + _341) * 4.55000019073486328125) * _418.y;
    float _430 = (((((cbMtdParam._m0[9u].z * _354.z) - _342) * _316) + _342) * 4.55000019073486328125) * _418.z;
    float _437 = (((cbMtdParam._m0[12u].x * _393.x) - _426) * _381) + _426;
    float _438 = (((cbMtdParam._m0[12u].y * _393.y) - _428) * _381) + _428;
    float _439 = (((cbMtdParam._m0[12u].z * _393.z) - _430) * _381) + _430;
    float _440 = _418.w * _354.w;
    float _468 = (((texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _316) + cbMtdParam._m0[15u].y;
    float _471 = ((cbMtdParam._m0[14u].y - _468) * _381) + _468;
    vec4 _483 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _485 = _483.x;
    float _486 = _483.y;
    float _492 = cbMtdParam._m0[13u].y + _483.z;
    vec4 _504 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _526 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _539 = (((_316 * (_307 + (-0.5))) + 0.5) * 2.0) * ((((_504.z - _492) + cbMtdParam._m0[13u].x) * _316) + _492);
    float _543 = (((_526.z - _539) + cbMtdParam._m0[14u].x) * _381) + _539;
    float _547 = (_302.x * 2.0) + (-1.0);
    float _549 = (_302.y * 2.0) + (-1.0);
    float _550 = dot(vec2(_547, _549), vec2(_547, _549));
    float _3684 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _555 = sqrt(1.0 - (isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))));
    float _560 = ((_504.x - _485) * _316) + _485;
    float _561 = ((_504.y - _486) * _316) + _486;
    float _574 = ((((((_526.x - _560) * _381) + _560) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _547;
    float _575 = ((((((_526.y - _561) * _381) + _561) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _549;
    float _578 = fma(_555, _230, fma(_575, _222 * TANGENT.x, (_208 * _200) * _574));
    float _581 = fma(_555, _231, fma(_575, _222 * TANGENT.y, (_208 * _201) * _574));
    float _584 = fma(_555, _232, fma(_575, _222 * TANGENT.z, (_208 * _202) * _574));
    float _588 = inversesqrt(dot(vec3(_578, _581, _584), vec3(_578, _581, _584)));
    float _589 = _588 * _578;
    float _590 = _588 * _581;
    float _591 = _588 * _584;
    float _3695 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _592 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _3706 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _593 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _3717 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _594 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _3728 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _595 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _3739 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _596 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _3750 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _597 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    float _605 = cbMatDynParam._m0[9u].x * _594;
    float _606 = cbMatDynParam._m0[9u].y * _595;
    float _607 = cbMatDynParam._m0[9u].z * _596;
    float _614 = inversesqrt(dot(vec3(_287, _288, _289), vec3(_287, _288, _289)));
    float _615 = _614 * _287;
    float _616 = _614 * _288;
    float _617 = _614 * _289;
    float _618 = dot(vec3(_589, _590, _591), vec3(_615, _616, _617));
    float _624 = abs(exp2(log2(_618) * cbMatDynParam._m0[12u].x));
    float _625 = isnan(0.100000001490116119384765625) ? _624 : (isnan(_624) ? 0.100000001490116119384765625 : max(_624, 0.100000001490116119384765625));
    float _631 = ((isnan(0.699999988079071044921875) ? _625 : (isnan(_625) ? 0.699999988079071044921875 : min(_625, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _654 = 1.0 - cbMatDynParam._m0[8u].w;
    float _3771 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _657 = 1.0 - cbMatDynParam._m0[7u].w;
    float _3782 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _658 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    float _662 = dot(vec3(_589, _590, _591), vec3(0.0, -1.0, 0.0));
    float _3793 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _665 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _672 = (_665 * _594) * cbMatDynParam._m0[11u].x;
    float _674 = (_665 * _595) * cbMatDynParam._m0[11u].y;
    float _676 = (_665 * _596) * cbMatDynParam._m0[11u].z;
    float _683 = dot(vec3(_615, _616, _617), vec3(_589, _590, _591));
    float _686 = _683 * 2.0;
    float _696 = dot(vec3((-0.0) - (_615 - (_686 * _589)), (-0.0) - (_616 - (_686 * _590)), (-0.0) - (_617 - (_686 * _591))), vec3(0.0, -1.0, 0.0));
    float _3804 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _703 = exp2(log2(isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * 4.0);
    float _729 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _735 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _736 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _738 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _740 = _738.w;
    float _758 = fma(_591, cbSceneParam._m0[5u].z, fma(_590, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _589));
    float _761 = fma(_591, cbSceneParam._m0[6u].z, fma(_590, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _589));
    float _764 = fma(_591, cbSceneParam._m0[7u].z, fma(_590, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _589));
    vec4 _766 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _768 = _766.x;
    float _780 = (((_766.y - _593) + (_766.w * _593)) * cbMtdParam._m0[3u].x) + _593;
    vec4 _781 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _797 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_768 * _768)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _781.z;
    float _805 = (((cbMatDynParam._m0[15u].x - _597) * cbMatDynParam._m0[15u].w) * _797) + _597;
    float _813 = ((_797 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _780)) + _780;
    uint _837 = uint(roundEven(NORMAL.w)) * 13u;
    uint _838 = _837 + 9u;
    uint _839 = _838 + uint(cbMatDynParam._m0[0u].w);
    float _845 = (cbMtdParam._m0[0u].x * _605) * cbInstanceData._m0[_839].x;
    float _846 = (cbMtdParam._m0[0u].y * _606) * cbInstanceData._m0[_839].y;
    float _847 = (cbMtdParam._m0[0u].z * _607) * cbInstanceData._m0[_839].z;
    float _3815 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _848 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _3826 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _849 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _3837 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _850 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    vec4 _851 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _856 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _867 = (((_856.x - _805) + (_856.w * _805)) * cbMtdParam._m0[3u].x) + _805;
    float _880 = (cbMtdParam._m0[3u].x * (((_848 * _740) - _848) + _851.x)) + _848;
    float _881 = (cbMtdParam._m0[3u].x * (((_849 * _740) - _849) + _851.y)) + _849;
    float _882 = (cbMtdParam._m0[3u].x * (((_850 * _740) - _850) + _851.z)) + _850;
    float _896 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_805 * (_605 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_805 * (_606 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_805 * (_607 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _900 = _896 * cbMatDynParam._m0[13u].w;
    float _910 = (_900 * (cbMatDynParam._m0[13u].x - _880)) + _880;
    float _911 = (_900 * (cbMatDynParam._m0[13u].y - _881)) + _881;
    float _912 = (_900 * (cbMatDynParam._m0[13u].z - _882)) + _882;
    float _920 = ((_896 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _867)) + _867;
    float _921 = 1.0 - _920;
    float _922 = _921 * _910;
    float _923 = _921 * _911;
    float _924 = _921 * _912;
    float _928 = (_910 + (-0.039999999105930328369140625)) * _920;
    float _929 = (_911 + (-0.039999999105930328369140625)) * _920;
    float _930 = (_912 + (-0.039999999105930328369140625)) * _920;
    float _931 = _928 + 0.039999999105930328369140625;
    float _932 = _929 + 0.039999999105930328369140625;
    float _933 = _930 + 0.039999999105930328369140625;
    vec4 _942 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _735, cbSceneParam._m0[86u].y * _736));
    float _945 = _942.x * TEXCOORD_4;
    float _946 = _618 * 2.0;
    float _950 = (_946 * _589) - _615;
    float _951 = (_946 * _590) - _616;
    float _952 = (_946 * _591) - _617;
    float _953 = abs(_683);
    float _3848 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _955 = sqrt(_813);
    float _967 = exp2((_955 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_955 * 3.0));
    float _973 = (1.0 - _967) * ((_955 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _974 = _967 * _955;
    float _1002 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1006 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1010 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1310;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1037 = fma(_1010, cbModelParam._m0[26u].z, fma(_1006, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1002));
        float _1041 = fma(_1010, cbModelParam._m0[27u].z, fma(_1006, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1002));
        float _1045 = fma(_1010, cbModelParam._m0[28u].z, fma(_1006, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1002));
        float _1068 = _1002 + _589;
        float _1069 = _1006 + _590;
        float _1070 = _1010 + _591;
        float _1080 = fma(_1070, cbModelParam._m0[26u].z, fma(_1069, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1068)) - _1037;
        float _1081 = fma(_1070, cbModelParam._m0[27u].z, fma(_1069, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1068)) - _1041;
        float _1082 = fma(_1070, cbModelParam._m0[28u].z, fma(_1069, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1068)) - _1045;
        float _1086 = inversesqrt(dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082)));
        float _1099 = ((_1086 * _1080) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1037 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1100 = ((_1086 * _1081) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1041 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1101 = ((_1086 * _1082) / cbModelParam._m0[34u].z) + ((((((_1045 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        float _1138 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1104.x + (-0.5));
        float _1140 = _1138 * (_1104.y + (-0.5));
        float _1141 = _1138 * (_1104.z + (-0.5));
        float _1148 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1111.x + (-0.5));
        float _1150 = _1148 * (_1111.y + (-0.5));
        float _1151 = _1148 * (_1111.z + (-0.5));
        float _1158 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1118.x + (-0.5));
        float _1160 = _1158 * (_1118.y + (-0.5));
        float _1161 = _1158 * (_1118.z + (-0.5));
        float _1168 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1125.x + (-0.5));
        float _1170 = _1168 * (_1125.y + (-0.5));
        float _1171 = _1168 * (_1125.z + (-0.5));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1175 = _1139 * 0.5;
        float _1176 = _1149 * 0.5;
        float _1177 = _1159 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1192 = (dot(vec3(_589, _590, _591), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3874 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1202 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _3885 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1204 = _1203 * 2.0;
        float _1208 = (1.0 - _1203) / (_1203 + 1.0);
        float _3896 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1218 = ((((1.0 - _1209) * (_1204 + 2.0)) * exp2(log2(isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * (_1204 + 1.0))) + _1209) * _1172;
        float _1219 = _1140 * 0.5;
        float _1220 = _1150 * 0.5;
        float _1221 = _1160 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1235 = (dot(vec3(_589, _590, _591), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _3907 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1244 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _3918 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _3929 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_1246 + 1.0))) + _1251) * _1173;
        float _1261 = _1141 * 0.5;
        float _1262 = _1151 * 0.5;
        float _1263 = _1161 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_589, _590, _591), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _3940 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1174 + 9.9999997473787516355514526367188e-06);
        float _3951 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _3962 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_1288 + 1.0))) + _1293) * _1174;
        _1310 = _1141;
        _1312 = _1140;
        _1313 = _1139;
        _1314 = _1151;
        _1315 = _1150;
        _1316 = _1149;
        _1317 = _1161;
        _1318 = _1160;
        _1319 = _1159;
        _1320 = _1174;
        _1321 = _1173;
        _1322 = _1172;
        _1323 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)));
        _1324 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
        _1325 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
    }
    else
    {
        _1310 = _1311;
        _1312 = _1311;
        _1313 = _1311;
        _1314 = _1311;
        _1315 = _1311;
        _1316 = _1311;
        _1317 = _1311;
        _1318 = _1311;
        _1319 = _1311;
        _1320 = _1311;
        _1321 = _1311;
        _1322 = _1311;
        _1323 = 0.0;
        _1324 = 0.0;
        _1325 = 0.0;
    }
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1351 = fma(_1010, cbModelParam._m0[30u].z, fma(_1006, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1002));
        float _1355 = fma(_1010, cbModelParam._m0[31u].z, fma(_1006, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1002));
        float _1359 = fma(_1010, cbModelParam._m0[32u].z, fma(_1006, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1002));
        float _1382 = _1002 + _589;
        float _1383 = _1006 + _590;
        float _1384 = _1010 + _591;
        float _1394 = fma(_1384, cbModelParam._m0[30u].z, fma(_1383, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1382)) - _1351;
        float _1395 = fma(_1384, cbModelParam._m0[31u].z, fma(_1383, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1382)) - _1355;
        float _1396 = fma(_1384, cbModelParam._m0[32u].z, fma(_1383, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1382)) - _1359;
        float _1400 = inversesqrt(dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396)));
        float _1413 = ((_1400 * _1394) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1351 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1414 = ((_1400 * _1395) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1355 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1415 = ((_1400 * _1396) / cbModelParam._m0[35u].z) + ((((((_1359 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1413, _1414, _1415), 0.0);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1413, _1414, _1415), 0.0);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1413, _1414, _1415), 0.0);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1413, _1414, _1415), 0.0);
        float _1450 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1451 = _1450 * (_1417.x + (-0.5));
        float _1452 = _1450 * (_1417.y + (-0.5));
        float _1453 = _1450 * (_1417.z + (-0.5));
        float _1460 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1461 = _1460 * (_1424.x + (-0.5));
        float _1462 = _1460 * (_1424.y + (-0.5));
        float _1463 = _1460 * (_1424.z + (-0.5));
        float _1470 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1471 = _1470 * (_1431.x + (-0.5));
        float _1472 = _1470 * (_1431.y + (-0.5));
        float _1473 = _1470 * (_1431.z + (-0.5));
        float _1480 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1481 = _1480 * (_1438.x + (-0.5));
        float _1482 = _1480 * (_1438.y + (-0.5));
        float _1483 = _1480 * (_1438.z + (-0.5));
        float _1484 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1485 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1486 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1487 = _1451 * 0.5;
        float _1488 = _1461 * 0.5;
        float _1489 = _1471 * 0.5;
        float _1490 = dot(vec3(_1487, _1488, _1489), vec3(_1487, _1488, _1489));
        float _1495 = (_1490 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1490);
        float _1503 = (dot(vec3(_589, _590, _591), vec3(_1495 * _1487, _1495 * _1488, _1495 * _1489)) + 1.0) * 0.5;
        float _4003 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1512 = sqrt(((_1488 * _1488) + (_1487 * _1487)) + (_1489 * _1489)) / (_1484 + 9.9999997473787516355514526367188e-06);
        float _4014 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1514 = _1513 * 2.0;
        float _1518 = (1.0 - _1513) / (_1513 + 1.0);
        float _4025 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1528 = ((((1.0 - _1519) * (_1514 + 2.0)) * exp2(log2(isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1514 + 1.0))) + _1519) * _1484;
        float _1529 = _1452 * 0.5;
        float _1530 = _1462 * 0.5;
        float _1531 = _1472 * 0.5;
        float _1532 = dot(vec3(_1529, _1530, _1531), vec3(_1529, _1530, _1531));
        float _1537 = (_1532 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1532);
        float _1545 = (dot(vec3(_589, _590, _591), vec3(_1537 * _1529, _1537 * _1530, _1537 * _1531)) + 1.0) * 0.5;
        float _4036 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1554 = sqrt(((_1530 * _1530) + (_1529 * _1529)) + (_1531 * _1531)) / (_1485 + 9.9999997473787516355514526367188e-06);
        float _4047 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1556 = _1555 * 2.0;
        float _1560 = (1.0 - _1555) / (_1555 + 1.0);
        float _4058 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1570 = ((((1.0 - _1561) * (_1556 + 2.0)) * exp2(log2(isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_1556 + 1.0))) + _1561) * _1485;
        float _1571 = _1453 * 0.5;
        float _1572 = _1463 * 0.5;
        float _1573 = _1473 * 0.5;
        float _1574 = dot(vec3(_1571, _1572, _1573), vec3(_1571, _1572, _1573));
        float _1579 = (_1574 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1574);
        float _1587 = (dot(vec3(_589, _590, _591), vec3(_1579 * _1571, _1579 * _1572, _1579 * _1573)) + 1.0) * 0.5;
        float _4069 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1596 = sqrt(((_1572 * _1572) + (_1571 * _1571)) + (_1573 * _1573)) / (_1486 + 9.9999997473787516355514526367188e-06);
        float _4080 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1598 = _1597 * 2.0;
        float _1602 = (1.0 - _1597) / (_1597 + 1.0);
        float _4091 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1612 = ((((1.0 - _1603) * (_1598 + 2.0)) * exp2(log2(isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_1598 + 1.0))) + _1603) * _1486;
        _1620 = _1453;
        _1621 = _1452;
        _1622 = _1451;
        _1623 = _1463;
        _1624 = _1462;
        _1625 = _1461;
        _1626 = _1473;
        _1627 = _1472;
        _1628 = _1471;
        _1629 = _1486;
        _1630 = _1485;
        _1631 = _1484;
        _1632 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)));
        _1633 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)));
        _1634 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)));
    }
    else
    {
        _1620 = _1311;
        _1621 = _1311;
        _1622 = _1311;
        _1623 = _1311;
        _1624 = _1311;
        _1625 = _1311;
        _1626 = _1311;
        _1627 = _1311;
        _1628 = _1311;
        _1629 = _1311;
        _1630 = _1311;
        _1631 = _1311;
        _1632 = 0.0;
        _1633 = 0.0;
        _1634 = 0.0;
    }
    float _1644 = (cbModelParam._m0[1u].x * (_1632 - _1323)) + _1323;
    float _1645 = (cbModelParam._m0[1u].x * (_1633 - _1324)) + _1324;
    float _1646 = (cbModelParam._m0[1u].x * (_1634 - _1325)) + _1325;
    float _1667 = fma(_1646, cbSceneParam._m0[89u].z, fma(_1645, cbSceneParam._m0[89u].y, _1644 * cbSceneParam._m0[89u].x));
    float _1670 = fma(_1646, cbSceneParam._m0[90u].z, fma(_1645, cbSceneParam._m0[90u].y, _1644 * cbSceneParam._m0[90u].x));
    float _1673 = fma(_1646, cbSceneParam._m0[91u].z, fma(_1645, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1644));
    float _1688 = _950 * 0.5;
    float _1689 = _951 * 0.5;
    float _1690 = _952 * 0.5;
    float _1691 = dot(vec4(_1688, _1689, _1690, 1.0), vec4(_1622, _1625, _1628, _1631));
    float _1694 = dot(vec4(_1688, _1689, _1690, 1.0), vec4(_1621, _1624, _1627, _1630));
    float _1697 = dot(vec4(_1688, _1689, _1690, 1.0), vec4(_1620, _1623, _1626, _1629));
    float _1728;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1704 = dot(vec4(_1688, _1689, _1690, 1.0), vec4(_1310, _1314, _1317, _1320));
        float _1708 = dot(vec4(_1688, _1689, _1690, 1.0), vec4(_1312, _1315, _1318, _1321));
        float _1712 = dot(vec4(_1688, _1689, _1690, 1.0), vec4(_1313, _1316, _1319, _1322));
        float _1719 = dot(vec4(cbModelParam._m0[39u]), vec4(_1688, _1689, _1690, 1.0));
        _1728 = dot(vec3(isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)), isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)), isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1719) ? 0.0 : (isnan(0.0) ? _1719 : max(0.0, _1719))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1728 = 1.0;
    }
    float _1739;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1730 = dot(vec4(cbModelParam._m0[40u]), vec4(_1688, _1689, _1690, 1.0));
        _1739 = dot(vec3(isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)), isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)), isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1730) ? 0.0 : (isnan(0.0) ? _1730 : max(0.0, _1730))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1739 = 1.0;
    }
    float _1743 = (_1739 * cbModelParam._m0[1u].x) + (_1728 * (1.0 - cbModelParam._m0[1u].x));
    float _1753 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _813);
    float _1754 = isnan(_1753) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1753 : min(cbModelParam._m0[25u].z, _1753));
    float _1834;
    float _1836;
    float _1838;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1801 = fma(_1010, cbModelParam._m0[13u].z, fma(_1006, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1002)) + cbModelParam._m0[13u].w;
        float _1805 = fma(_1010, cbModelParam._m0[14u].z, fma(_1006, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1002)) + cbModelParam._m0[14u].w;
        float _1809 = fma(_1010, cbModelParam._m0[15u].z, fma(_1006, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1002)) + cbModelParam._m0[15u].w;
        float _1812 = fma(_952, cbModelParam._m0[13u].z, fma(_951, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _950));
        float _1815 = fma(_952, cbModelParam._m0[14u].z, fma(_951, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _950));
        float _1818 = fma(_952, cbModelParam._m0[15u].z, fma(_951, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _950));
        float _1846;
        if (_1812 > 0.0)
        {
            _1846 = abs((1.0 - _1801) / _1812);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1801 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1846 = frontier_phi_16_14_ladder;
        }
        float _2052;
        if (_1815 > 0.0)
        {
            _2052 = abs((1.0 - _1805) / _1815);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1805 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2052 = frontier_phi_25_21_ladder;
        }
        float _2306;
        if (_1818 > 0.0)
        {
            _2306 = abs((1.0 - _1809) / _1818);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1809 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2306 = frontier_phi_37_32_ladder;
        }
        float _2308 = isnan(_2052) ? _1846 : (isnan(_1846) ? _2052 : min(_1846, _2052));
        float _2309 = isnan(_2306) ? _2308 : (isnan(_2308) ? _2306 : min(_2308, _2306));
        float _2313 = (_2309 * _1812) + _1801;
        float _2314 = (_2309 * _1815) + _1805;
        float _2315 = (_2309 * _1818) + _1809;
        float _2316 = _2309 * 9.9999997473787516355514526367188e-05;
        float _2318 = (-1.0) - _2316;
        float _2320 = _2316 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2315 > _2320) || ((_2315 < _2318) || ((_2314 > _2320) || ((_2314 < _2318) || ((_2313 < _2318) || (_2313 > _2320))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2443 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2315, cbModelParam._m0[9u].z, fma(_2314, cbModelParam._m0[9u].y, _2313 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2315, cbModelParam._m0[10u].z, fma(_2314, cbModelParam._m0[10u].y, _2313 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2315, cbModelParam._m0[11u].z, fma(_2314, cbModelParam._m0[11u].y, _2313 * cbModelParam._m0[11u].x))), _1754);
            frontier_phi_15_37_ladder = _2443.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2443.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2443.x * cbModelParam._m0[1u].y;
        }
        _1834 = frontier_phi_15_37_ladder_2;
        _1836 = frontier_phi_15_37_ladder_1;
        _1838 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1822 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_950, _951, _952), _1754);
        _1834 = _1822.x * cbModelParam._m0[1u].y;
        _1836 = _1822.y * cbModelParam._m0[1u].y;
        _1838 = _1822.z * cbModelParam._m0[1u].y;
    }
    float _1842 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _813);
    float _1843 = isnan(_1842) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1842 : min(cbModelParam._m0[25u].w, _1842));
    float _1936;
    float _1938;
    float _1940;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1900 = fma(_1010, cbModelParam._m0[21u].z, fma(_1006, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1002)) + cbModelParam._m0[21u].w;
        float _1904 = fma(_1010, cbModelParam._m0[22u].z, fma(_1006, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1002)) + cbModelParam._m0[22u].w;
        float _1908 = fma(_1010, cbModelParam._m0[23u].z, fma(_1006, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1002)) + cbModelParam._m0[23u].w;
        float _1911 = fma(_952, cbModelParam._m0[21u].z, fma(_951, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _950));
        float _1914 = fma(_952, cbModelParam._m0[22u].z, fma(_951, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _950));
        float _1917 = fma(_952, cbModelParam._m0[23u].z, fma(_951, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _950));
        float _2057;
        if (_1911 > 0.0)
        {
            _2057 = abs((1.0 - _1900) / _1911);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1900 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2057 = frontier_phi_27_23_ladder;
        }
        float _2333;
        if (_1914 > 0.0)
        {
            _2333 = abs((1.0 - _1904) / _1914);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1904 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2333 = frontier_phi_39_34_ladder;
        }
        float _2546;
        if (_1917 > 0.0)
        {
            _2546 = abs((1.0 - _1908) / _1917);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1908 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2546 = frontier_phi_48_45_ladder;
        }
        float _2548 = isnan(_2333) ? _2057 : (isnan(_2057) ? _2333 : min(_2057, _2333));
        float _2549 = isnan(_2546) ? _2548 : (isnan(_2548) ? _2546 : min(_2548, _2546));
        float _2553 = (_2549 * _1911) + _1900;
        float _2554 = (_2549 * _1914) + _1904;
        float _2555 = (_2549 * _1917) + _1908;
        float _2556 = _2549 * 9.9999997473787516355514526367188e-05;
        float _2557 = (-1.0) - _2556;
        float _2559 = _2556 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2555 > _2559) || ((_2555 < _2557) || ((_2554 > _2559) || ((_2554 < _2557) || ((_2553 < _2557) || (_2553 > _2559))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2779 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2555, cbModelParam._m0[17u].z, fma(_2554, cbModelParam._m0[17u].y, _2553 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2555, cbModelParam._m0[18u].z, fma(_2554, cbModelParam._m0[18u].y, _2553 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2555, cbModelParam._m0[19u].z, fma(_2554, cbModelParam._m0[19u].y, _2553 * cbModelParam._m0[19u].x))), _1843);
            frontier_phi_24_48_ladder = _2779.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2779.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2779.x * cbModelParam._m0[1u].z;
        }
        _1936 = frontier_phi_24_48_ladder_2;
        _1938 = frontier_phi_24_48_ladder_1;
        _1940 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1920 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_950, _951, _952), _1843);
        _1936 = _1920.x * cbModelParam._m0[1u].z;
        _1938 = _1920.y * cbModelParam._m0[1u].z;
        _1940 = _1920.z * cbModelParam._m0[1u].z;
    }
    float _1953 = (((_973 * _931) + _974) * _945) * ((cbModelParam._m0[1u].w * (_1936 - _1834)) + _1834);
    float _1955 = (((_973 * _932) + _974) * _945) * ((cbModelParam._m0[1u].w * (_1938 - _1836)) + _1836);
    float _1957 = (((_973 * _933) + _974) * _945) * ((cbModelParam._m0[1u].w * (_1940 - _1838)) + _1838);
    float _1960 = fma(_1957, cbSceneParam._m0[89u].z, fma(_1955, cbSceneParam._m0[89u].y, _1953 * cbSceneParam._m0[89u].x));
    float _1963 = fma(_1957, cbSceneParam._m0[90u].z, fma(_1955, cbSceneParam._m0[90u].y, _1953 * cbSceneParam._m0[90u].x));
    float _1966 = fma(_1957, cbSceneParam._m0[91u].z, fma(_1955, cbSceneParam._m0[91u].y, _1953 * cbSceneParam._m0[91u].x));
    uvec4 _1976 = floatBitsToUint(cbInstanceData._m0[_837 + 5u]);
    uint _1978 = _1976.x * 14u;
    uint _1979 = _1978 + 13u;
    float _1986 = _945 + (-1.0);
    float _1991 = (cbLight._m0[_1979].x * _1986) + 1.0;
    float _1992 = (cbLight._m0[_1979].y * _1986) + 1.0;
    float _1993 = (cbLight._m0[_1979].z * _1986) + 1.0;
    float _1994 = (cbLight._m0[_1979].w * _1986) + 1.0;
    uint _1995 = _1978 + 5u;
    float _2001 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
    uint _2005 = _1978 + 4u;
    float _2011 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
    uint _2015 = _1978 | 1u;
    float _2026 = dot(vec3(cbLight._m0[_1978].xyz), vec3(_589, _590, _591));
    float _2029 = dot(vec3(cbLight._m0[_2015].xyz), vec3(_589, _590, _591));
    float _4227 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _4238 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2034 = (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * 0.3183098733425140380859375;
    float _2036 = (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * 0.3183098733425140380859375;
    float _2043 = ((cbLight._m0[_1995].x * _2001) * _2036) + ((cbLight._m0[_2005].x * _2011) * _2034);
    float _2044 = ((_2001 * cbLight._m0[_1995].y) * _2036) + ((_2011 * cbLight._m0[_2005].y) * _2034);
    float _2045 = ((_2001 * cbLight._m0[_1995].z) * _2036) + ((_2011 * cbLight._m0[_2005].z) * _2034);
    uvec4 _2049 = floatBitsToUint(cbLight._m0[_1978 + 12u]);
    bool _2051 = _2049.x == 0u;
    float _2062;
    float _2064;
    float _2066;
    if (_2051)
    {
        _2062 = _2043;
        _2064 = _2044;
        _2066 = _2045;
    }
    else
    {
        uint _2070 = _1978 + 6u;
        float _2086 = (dot(vec3(cbLight._m0[_1978 + 2u].xyz), vec3(_589, _590, _591)) * 0.5) + 0.5;
        float _2087 = _2086 * _2086;
        float _4249 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2088 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _2089 = isnan(1.0) ? _1993 : (isnan(_1993) ? 1.0 : min(_1993, 1.0));
        _2062 = (((cbLight._m0[_2070].x * 0.3183098733425140380859375) * _2088) * _2089) + _2043;
        _2064 = (((cbLight._m0[_2070].y * 0.3183098733425140380859375) * _2088) * _2089) + _2044;
        _2066 = (((cbLight._m0[_2070].z * 0.3183098733425140380859375) * _2088) * _2089) + _2045;
    }
    bool _2069 = _2049.y == 0u;
    float _2107;
    float _2109;
    float _2111;
    if (_2069)
    {
        _2107 = _2062;
        _2109 = _2064;
        _2111 = _2066;
    }
    else
    {
        uint _2277 = _1978 + 7u;
        float _2293 = (dot(vec3(cbLight._m0[_1978 + 3u].xyz), vec3(_589, _590, _591)) * 0.5) + 0.5;
        float _2294 = _2293 * _2293;
        float _4265 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2295 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _2296 = isnan(1.0) ? _1994 : (isnan(_1994) ? 1.0 : min(_1994, 1.0));
        _2107 = (((cbLight._m0[_2277].x * 0.3183098733425140380859375) * _2295) * _2296) + _2062;
        _2109 = (((cbLight._m0[_2277].y * 0.3183098733425140380859375) * _2295) * _2296) + _2064;
        _2111 = (((cbLight._m0[_2277].z * 0.3183098733425140380859375) * _2295) * _2296) + _2066;
    }
    uint _2114 = _1978 + 8u;
    float _2127 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1978].w)) * _813) * 0.949999988079071044921875);
    float _2128 = _2127 * _2127;
    float _2129 = cbLight._m0[_1978].x + _615;
    float _2130 = cbLight._m0[_1978].y + _616;
    float _2131 = cbLight._m0[_1978].z + _617;
    float _2135 = inversesqrt(dot(vec3(_2129, _2130, _2131), vec3(_2129, _2130, _2131)));
    float _2136 = _2135 * _2129;
    float _2137 = _2135 * _2130;
    float _2138 = _2135 * _2131;
    float _2139 = dot(vec3(_589, _590, _591), vec3(cbLight._m0[_1978].xyz));
    float _4281 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2142 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
    float _4292 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _2143 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
    float _2144 = dot(vec3(_589, _590, _591), vec3(_2136, _2137, _2138));
    float _4303 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2147 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
    float _2148 = dot(vec3(cbLight._m0[_1978].xyz), vec3(_2136, _2137, _2138));
    float _4314 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2152 = _2128 * _2128;
    float _2156 = ((_2147 * _2147) * (_2152 + (-1.0))) + 1.0;
    float _2164 = exp2(log2(1.0 - (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0)))) * 5.0);
    float _2165 = 0.959999978542327880859375 - _928;
    float _2167 = 0.959999978542327880859375 - _929;
    float _2168 = 0.959999978542327880859375 - _930;
    float _2175 = 1.0 - _2128;
    float _2186 = (0.5 / (((_2143 * ((_2142 * _2175) + _2128)) + 9.9999999392252902907785028219223e-09) + (((_2143 * _2175) + _2128) * _2142))) * _2142;
    float _4325 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2188 = (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_2152 / ((_2156 * _2156) * 3.141590118408203125));
    uint _2199 = _1978 + 9u;
    float _2210 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2015].w)) * _813) * 0.949999988079071044921875);
    float _2211 = _2210 * _2210;
    float _2212 = cbLight._m0[_2015].x + _615;
    float _2213 = cbLight._m0[_2015].y + _616;
    float _2214 = cbLight._m0[_2015].z + _617;
    float _2218 = inversesqrt(dot(vec3(_2212, _2213, _2214), vec3(_2212, _2213, _2214)));
    float _2219 = _2218 * _2212;
    float _2220 = _2218 * _2213;
    float _2221 = _2218 * _2214;
    float _2222 = dot(vec3(_589, _590, _591), vec3(cbLight._m0[_2015].xyz));
    float _4336 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2225 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    float _2226 = dot(vec3(_589, _590, _591), vec3(_2219, _2220, _2221));
    float _4347 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2229 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
    float _2230 = dot(vec3(cbLight._m0[_2015].xyz), vec3(_2219, _2220, _2221));
    float _4358 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2234 = _2211 * _2211;
    float _2238 = ((_2229 * _2229) * (_2234 + (-1.0))) + 1.0;
    float _2245 = exp2(log2(1.0 - (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0)))) * 5.0);
    float _2252 = 1.0 - _2211;
    float _2262 = (0.5 / (((_2143 * ((_2225 * _2252) + _2211)) + 9.9999999392252902907785028219223e-09) + (((_2143 * _2252) + _2211) * _2225))) * _2225;
    float _4369 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2264 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_2234 / ((_2238 * _2238) * 3.141590118408203125));
    float _2274 = (((((_2245 * _2165) + _931) * cbLight._m0[_2199].x) * _2264) * _2001) + (((((_2164 * _2165) + _931) * cbLight._m0[_2114].x) * _2188) * _2011);
    float _2275 = (((((_2245 * _2167) + _932) * cbLight._m0[_2199].y) * _2264) * _2001) + (((((_2164 * _2167) + _932) * cbLight._m0[_2114].y) * _2188) * _2011);
    float _2276 = (((((_2245 * _2168) + _933) * cbLight._m0[_2199].z) * _2264) * _2001) + (((((_2164 * _2168) + _933) * cbLight._m0[_2114].z) * _2188) * _2011);
    float _2338;
    float _2340;
    float _2342;
    if (_2051)
    {
        _2338 = _2274;
        _2340 = _2275;
        _2342 = _2276;
    }
    else
    {
        uint _2344 = _1978 + 2u;
        uint _2348 = _1978 + 10u;
        float _2362 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2344].w)) * _813) * 0.949999988079071044921875);
        float _2363 = _2362 * _2362;
        float _2364 = cbLight._m0[_2344].x + _615;
        float _2365 = cbLight._m0[_2344].y + _616;
        float _2366 = cbLight._m0[_2344].z + _617;
        float _2370 = inversesqrt(dot(vec3(_2364, _2365, _2366), vec3(_2364, _2365, _2366)));
        float _2371 = _2370 * _2364;
        float _2372 = _2370 * _2365;
        float _2373 = _2370 * _2366;
        float _2374 = dot(vec3(_589, _590, _591), vec3(cbLight._m0[_2344].xyz));
        float _4380 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2377 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _2378 = dot(vec3(_589, _590, _591), vec3(_2371, _2372, _2373));
        float _4391 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2381 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _2382 = dot(vec3(cbLight._m0[_2344].xyz), vec3(_2371, _2372, _2373));
        float _4402 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2386 = _2363 * _2363;
        float _2390 = ((_2381 * _2381) * (_2386 + (-1.0))) + 1.0;
        float _2397 = exp2(log2(1.0 - (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0)))) * 5.0);
        float _2404 = 1.0 - _2363;
        float _2414 = (0.5 / (((_2143 * ((_2377 * _2404) + _2363)) + 9.9999999392252902907785028219223e-09) + (((_2143 * _2404) + _2363) * _2377))) * _2377;
        float _4413 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2416 = (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_2386 / ((_2390 * _2390) * 3.141590118408203125));
        float _2417 = isnan(1.0) ? _1993 : (isnan(_1993) ? 1.0 : min(_1993, 1.0));
        _2338 = (((((_2397 * _2165) + _931) * cbLight._m0[_2348].x) * _2416) * _2417) + _2274;
        _2340 = (((((_2397 * _2167) + _932) * cbLight._m0[_2348].y) * _2416) * _2417) + _2275;
        _2342 = (((((_2397 * _2168) + _933) * cbLight._m0[_2348].z) * _2416) * _2417) + _2276;
    }
    float _2452;
    float _2454;
    float _2456;
    if (_2069)
    {
        _2452 = _2338;
        _2454 = _2340;
        _2456 = _2342;
    }
    else
    {
        uint _2463 = _1978 + 3u;
        uint _2467 = _1978 + 11u;
        float _2481 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2463].w)) * _813) * 0.949999988079071044921875);
        float _2482 = _2481 * _2481;
        float _2483 = cbLight._m0[_2463].x + _615;
        float _2484 = cbLight._m0[_2463].y + _616;
        float _2485 = cbLight._m0[_2463].z + _617;
        float _2489 = inversesqrt(dot(vec3(_2483, _2484, _2485), vec3(_2483, _2484, _2485)));
        float _2490 = _2489 * _2483;
        float _2491 = _2489 * _2484;
        float _2492 = _2489 * _2485;
        float _2493 = dot(vec3(_589, _590, _591), vec3(cbLight._m0[_2463].xyz));
        float _4429 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2496 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _2497 = dot(vec3(_589, _590, _591), vec3(_2490, _2491, _2492));
        float _4440 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2500 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _2501 = dot(vec3(cbLight._m0[_2463].xyz), vec3(_2490, _2491, _2492));
        float _4451 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2505 = _2482 * _2482;
        float _2509 = ((_2500 * _2500) * (_2505 + (-1.0))) + 1.0;
        float _2516 = exp2(log2(1.0 - (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0)))) * 5.0);
        float _2523 = 1.0 - _2482;
        float _2533 = (0.5 / (((_2143 * ((_2496 * _2523) + _2482)) + 9.9999999392252902907785028219223e-09) + (((_2143 * _2523) + _2482) * _2496))) * _2496;
        float _4462 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2535 = (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_2505 / ((_2509 * _2509) * 3.141590118408203125));
        float _2536 = isnan(1.0) ? _1994 : (isnan(_1994) ? 1.0 : min(_1994, 1.0));
        _2452 = (((((_2516 * _2165) + _931) * cbLight._m0[_2467].x) * _2535) * _2536) + _2338;
        _2454 = (((((_2516 * _2167) + _932) * cbLight._m0[_2467].y) * _2535) * _2536) + _2340;
        _2456 = (((((_2516 * _2168) + _933) * cbLight._m0[_2467].z) * _2535) * _2536) + _2342;
    }
    float _2670;
    float _2672;
    float _2674;
    float _2676;
    float _2678;
    float _2680;
    if (_1976.y == 0u)
    {
        float _2611 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2612 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2611;
        float _2613 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2611;
        float _2614 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2611;
        uvec4 _2626 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2627 = _2626.x;
        uint _2638 = uint((float(_2626.y) * floor(float(uint(cbSceneParam._m0[85u].y * _736) / _2627))) + floor(float(uint(cbSceneParam._m0[85u].x * _735) / _2627)));
        float _2648 = (log2(_2614 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2649 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        uint _2652 = uint(isnan(14.0) ? _2649 : (isnan(_2649) ? 14.0 : min(_2649, 14.0)));
        uvec4 _2657 = texelFetch(g_lightClusterGridBuffer, int(((_2652 << 2u) + (_2638 << 6u)) >> 2u));
        uint _2658 = _2657.x;
        uint _2659 = _2626.z;
        float _2784;
        float _2786;
        float _2788;
        float _2790;
        float _2792;
        float _2794;
        if (((((1u << ((_2659 >> 4u) & 15u)) + 4294967295u) & _2658) == 0u) || ((_2659 & 240u) == 0u))
        {
            _2784 = 0.0;
            _2786 = 0.0;
            _2788 = 0.0;
            _2790 = 0.0;
            _2792 = 0.0;
            _2794 = 0.0;
        }
        else
        {
            float _2785;
            float _2787;
            float _2789;
            float _2791;
            float _2793;
            float _2795;
            float _2937 = 0.0;
            float _2938 = 0.0;
            float _2939 = 0.0;
            float _2940 = 0.0;
            float _2941 = 0.0;
            float _2942 = 0.0;
            uint _2943 = 0u;
            uint _2952;
            bool _2953;
            for (;;)
            {
                _2952 = texelFetch(g_lightClassification, int((((_2652 << 5u) + (_2638 << 9u)) + (_2943 << 2u)) >> 2u)).x;
                _2953 = _2952 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2953)
                {
                    frontier_phi_63_pred = _2942;
                    frontier_phi_63_pred_1 = _2941;
                    frontier_phi_63_pred_2 = _2940;
                    frontier_phi_63_pred_3 = _2939;
                    frontier_phi_63_pred_4 = _2938;
                    frontier_phi_63_pred_5 = _2937;
                }
                else
                {
                    float _3061;
                    float _3062;
                    float _3063;
                    float _3064;
                    float _3065;
                    float _3066;
                    uint _3067;
                    _3061 = _2937;
                    _3062 = _2938;
                    _3063 = _2939;
                    _3064 = _2940;
                    _3065 = _2941;
                    _3066 = _2942;
                    _3067 = _2952;
                    float _2993;
                    float _2994;
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    for (;;)
                    {
                        uint _3071 = uint(findLSB(_3067)) + (_2943 << 5u);
                        uint _3068 = (_3067 + 4294967295u) & _3067;
                        uint _3073 = _3071 * 48u;
                        vec4 _3087 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3073)).x, texelFetch(g_PointLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3073 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3073 + 3u)).x));
                        uint _3093 = (_3071 * 48u) + 4u;
                        vec4 _3106 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3093)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3093 + 3u)).x));
                        uint _3112 = (_3071 * 48u) + 8u;
                        vec3 _3123 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3112)).x, texelFetch(g_PointLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3112 + 2u)).x));
                        float _3127 = _3087.x - _2612;
                        float _3128 = _3087.y - _2613;
                        float _3129 = _3087.z - _2614;
                        float _3130 = dot(vec3(_3127, _3128, _3129), vec3(_3127, _3128, _3129));
                        float _3133 = inversesqrt(_3130);
                        float _3134 = _3133 * _3127;
                        float _3135 = _3133 * _3128;
                        float _3136 = _3133 * _3129;
                        float _3137 = dot(vec3(_758, _761, _764), vec3(_3134, _3135, _3136));
                        float _3142 = 1.0 - (_3130 * _3087.w);
                        float _4488 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                        float _3143 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                        float _3144 = sqrt(_3130) * _3106.w;
                        float _3147 = 1.39999997615814208984375 / (_3144 + 1.39999997615814208984375);
                        float _3148 = _3147 * _3147;
                        float _3151 = ((1.0 - _3148) * _3137) + _3148;
                        float _3154 = _3144 * _3144;
                        float _3157 = ((isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0))) * _3143) / ((_3154 * 0.699999988079071044921875) + 1.0);
                        float _3161 = (-0.0) - _2612;
                        float _3162 = (-0.0) - _2613;
                        float _3163 = (-0.0) - _2614;
                        float _3167 = inversesqrt(dot(vec3(_3161, _3162, _3163), vec3(_3161, _3162, _3163)));
                        float _3168 = _3167 * _3161;
                        float _3169 = _3167 * _3162;
                        float _3170 = _3167 * _3163;
                        float _3178 = exp2(log2(1.0 / ((_3154 * 3.5) + 5.0)) * 0.25);
                        float _3179 = 1.0 - _955;
                        float _3186 = sqrt(1.0 - ((1.0 - (_3179 * _3179)) * (1.0 - (_3178 * _3178))));
                        float _3187 = _3186 * _3186;
                        float _3188 = _3187 * _3187;
                        float _3189 = _3168 + _3134;
                        float _3190 = _3169 + _3135;
                        float _3191 = _3170 + _3136;
                        float _3195 = inversesqrt(dot(vec3(_3189, _3190, _3191), vec3(_3189, _3190, _3191)));
                        float _3199 = dot(vec3(_758, _761, _764), vec3(_3168, _3169, _3170));
                        float _4504 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                        float _3202 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
                        float _3203 = dot(vec3(_758, _761, _764), vec3(_3195 * _3189, _3195 * _3190, _3195 * _3191));
                        float _4515 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                        float _3206 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                        float _3210 = ((_3206 * _3206) * (_3188 + (-1.0))) + 1.0;
                        float _3211 = _3147 * _3187;
                        float _3212 = _3211 * _3211;
                        float _3215 = ((1.0 - _3212) * _3137) + _3212;
                        float _4526 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                        float _3216 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
                        float _3217 = 1.0 - _3187;
                        float _3227 = (0.5 / (((_3216 * ((_3202 * _3217) + _3187)) + 9.9999999392252902907785028219223e-09) + (((_3216 * _3217) + _3187) * _3202))) * _3216;
                        float _4537 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                        float _3238 = (((_3188 * 3.1415927410125732421875) * (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0)))) / ((_3210 * _3210) * ((_3154 * 2.1991131305694580078125) + 3.141590118408203125))) * _3143;
                        _2996 = (_3157 * _3106.x) + _3064;
                        _2997 = (_3157 * _3106.y) + _3065;
                        _2998 = (_3157 * _3106.z) + _3066;
                        _2993 = (_3238 * _3123.x) + _3061;
                        _2994 = (_3238 * _3123.y) + _3062;
                        _2995 = (_3238 * _3123.z) + _3063;
                        if (_3068 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3061 = _2993;
                            _3062 = _2994;
                            _3063 = _2995;
                            _3064 = _2996;
                            _3065 = _2997;
                            _3066 = _2998;
                            _3067 = _3068;
                        }
                    }
                    frontier_phi_63_pred = _2998;
                    frontier_phi_63_pred_1 = _2997;
                    frontier_phi_63_pred_2 = _2996;
                    frontier_phi_63_pred_3 = _2995;
                    frontier_phi_63_pred_4 = _2994;
                    frontier_phi_63_pred_5 = _2993;
                }
                _2795 = frontier_phi_63_pred;
                _2793 = frontier_phi_63_pred_1;
                _2791 = frontier_phi_63_pred_2;
                _2789 = frontier_phi_63_pred_3;
                _2787 = frontier_phi_63_pred_4;
                _2785 = frontier_phi_63_pred_5;
                uint _2944 = _2943 + 1u;
                if (_2944 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2937 = _2785;
                    _2938 = _2787;
                    _2939 = _2789;
                    _2940 = _2791;
                    _2941 = _2793;
                    _2942 = _2795;
                    _2943 = _2944;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2784 = _2785;
            _2786 = _2787;
            _2788 = _2789;
            _2790 = _2791;
            _2792 = _2793;
            _2794 = _2795;
        }
        uvec4 _2798 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2799 = _2798.z;
        uint _2801 = (_2799 >> 8u) & 15u;
        float _2905;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        if (((4294967295u << _2801) & _2658) == 0u)
        {
            _2905 = _2784;
            _2907 = _2786;
            _2909 = _2788;
            _2911 = _2790;
            _2913 = _2792;
            _2915 = _2794;
        }
        else
        {
            float _2930 = inversesqrt(dot(vec3(_2612, _2613, _2614), vec3(_2612, _2613, _2614)));
            float _2931 = _2930 * _2612;
            float _2932 = _2930 * _2613;
            float _2933 = _2930 * _2614;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2801 < ((_2799 >> 12u) & 15u))
            {
                float _2906;
                float _2908;
                float _2910;
                float _2912;
                float _2914;
                float _2916;
                float _3044 = _2784;
                float _3045 = _2786;
                float _3046 = _2788;
                float _3047 = _2790;
                float _3048 = _2792;
                float _3049 = _2794;
                uint _3050 = _2801;
                uint _3059;
                bool _3060;
                for (;;)
                {
                    _3059 = texelFetch(g_lightClassification, int((((_2652 << 5u) + (_2638 << 9u)) + (_3050 << 2u)) >> 2u)).x;
                    _3060 = _3059 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3060)
                    {
                        frontier_phi_69_pred = _3049;
                        frontier_phi_69_pred_1 = _3048;
                        frontier_phi_69_pred_2 = _3047;
                        frontier_phi_69_pred_3 = _3046;
                        frontier_phi_69_pred_4 = _3045;
                        frontier_phi_69_pred_5 = _3044;
                    }
                    else
                    {
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3246;
                        float _3247;
                        float _3248;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3256 = _3044;
                        float _3257 = _3045;
                        float _3258 = _3046;
                        float _3259 = _3047;
                        float _3260 = _3048;
                        float _3261 = _3049;
                        uint _3262 = _3059;
                        uint _3263;
                        vec4 _3288;
                        float _3289;
                        vec4 _3304;
                        vec3 _3316;
                        vec4 _3331;
                        vec4 _3347;
                        float _3394;
                        bool _3395;
                        for (;;)
                        {
                            uint _3273 = ((_3050 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3262));
                            _3263 = (_3262 + 4294967295u) & _3262;
                            uint _3275 = _3273 * 40u;
                            _3288 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3275)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 3u)).x));
                            _3289 = _3288.w;
                            uint _3291 = (_3273 * 40u) + 4u;
                            _3304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 3u)).x));
                            uint _3306 = (_3273 * 40u) + 8u;
                            _3316 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x));
                            uint _3318 = (_3273 * 40u) + 16u;
                            _3331 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3318)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 3u)).x));
                            uint _3334 = (_3273 * 40u) + 20u;
                            _3347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 3u)).x));
                            uint _3350 = (_3273 * 40u) + 24u;
                            vec4 _3363 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 3u)).x));
                            uint _3369 = (_3273 * 40u) + 28u;
                            vec4 _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            _3394 = fma(_2614, _3382.z, fma(_2613, _3382.y, _3382.x * _2612)) + _3382.w;
                            _3395 = !((fma(_2614, _3363.z, fma(_2613, _3363.y, _3363.x * _2612)) + _3363.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3395)
                            {
                                float _3422 = _3288.x - _2612;
                                float _3423 = _3288.y - _2613;
                                float _3424 = _3288.z - _2614;
                                float _3425 = dot(vec3(_3422, _3423, _3424), vec3(_3422, _3423, _3424));
                                float _3428 = inversesqrt(_3425);
                                float _3429 = _3428 * _3422;
                                float _3430 = _3428 * _3423;
                                float _3431 = _3428 * _3424;
                                float _3435 = 1.0 - (_3425 / (_3289 * _3289));
                                float _4548 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                                float _3436 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                                float _3440 = sqrt(_3425) * _3304.w;
                                float _3442 = 1.39999997615814208984375 / (_3440 + 1.39999997615814208984375);
                                float _3443 = _3442 * _3442;
                                float _3446 = ((1.0 - _3443) * dot(vec3(_3429, _3430, _3431), vec3(_758, _761, _764))) + _3443;
                                float _3449 = _3440 * _3440;
                                float _3453 = (fma(_2614, _3331.z, fma(_2613, _3331.y, _3331.x * _2612)) + _3331.w) / _3394;
                                float _3454 = (fma(_2614, _3347.z, fma(_2613, _3347.y, _3347.x * _2612)) + _3347.w) / _3394;
                                float _3458 = 1.0 - dot(vec2(_3453, _3454), vec2(_3453, _3454));
                                float _4564 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                                float _3459 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                                float _3460 = _3459 * (((isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0))) * _3436) / ((_3449 * 0.699999988079071044921875) + 1.0));
                                float _3472 = exp2(log2(1.0 / ((_3449 * 3.5) + 5.0)) * 0.25);
                                float _3473 = 1.0 - _955;
                                float _3480 = sqrt(1.0 - ((1.0 - (_3473 * _3473)) * (1.0 - (_3472 * _3472))));
                                float _3481 = _3480 * _3480;
                                float _3482 = _3481 * _3481;
                                float _3483 = _3429 - _2931;
                                float _3484 = _3430 - _2932;
                                float _3485 = _3431 - _2933;
                                float _3489 = inversesqrt(dot(vec3(_3483, _3484, _3485), vec3(_3483, _3484, _3485)));
                                float _3493 = dot(vec3(_758, _761, _764), vec3((-0.0) - _2931, (-0.0) - _2932, (-0.0) - _2933));
                                float _4575 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                                float _3496 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
                                float _3497 = dot(vec3(_758, _761, _764), vec3(_3489 * _3483, _3489 * _3484, _3489 * _3485));
                                float _4586 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3500 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                                float _3504 = ((_3500 * _3500) * (_3482 + (-1.0))) + 1.0;
                                float _3505 = _3442 * _3481;
                                float _3506 = _3505 * _3505;
                                float _3512 = ((1.0 - _3506) * dot(vec3(_758, _761, _764), vec3(_3429, _3430, _3431))) + _3506;
                                float _4597 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3513 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
                                float _3514 = 1.0 - _3481;
                                float _3524 = (0.5 / (((_3513 * ((_3496 * _3514) + _3481)) + 9.9999999392252902907785028219223e-09) + (((_3513 * _3514) + _3481) * _3496))) * _3513;
                                float _4608 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3534 = (_3459 * _3436) * (((_3482 * 3.1415927410125732421875) * (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) / ((_3504 * _3504) * ((_3449 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3460 * _3304.z;
                                frontier_phi_75_pred_1 = _3460 * _3304.y;
                                frontier_phi_75_pred_2 = _3460 * _3304.x;
                                frontier_phi_75_pred_3 = _3534 * _3316.z;
                                frontier_phi_75_pred_4 = _3534 * _3316.y;
                                frontier_phi_75_pred_5 = _3534 * _3316.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3543 = frontier_phi_75_pred;
                            _3542 = frontier_phi_75_pred_1;
                            _3541 = frontier_phi_75_pred_2;
                            _3540 = frontier_phi_75_pred_3;
                            _3539 = frontier_phi_75_pred_4;
                            _3538 = frontier_phi_75_pred_5;
                            _3246 = _3541 + _3259;
                            _3247 = _3542 + _3260;
                            _3248 = _3543 + _3261;
                            _3243 = _3538 + _3256;
                            _3244 = _3539 + _3257;
                            _3245 = _3540 + _3258;
                            if (_3263 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3245;
                                _3259 = _3246;
                                _3260 = _3247;
                                _3261 = _3248;
                                _3262 = _3263;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3248;
                        frontier_phi_69_pred_1 = _3247;
                        frontier_phi_69_pred_2 = _3246;
                        frontier_phi_69_pred_3 = _3245;
                        frontier_phi_69_pred_4 = _3244;
                        frontier_phi_69_pred_5 = _3243;
                    }
                    _2916 = frontier_phi_69_pred;
                    _2914 = frontier_phi_69_pred_1;
                    _2912 = frontier_phi_69_pred_2;
                    _2910 = frontier_phi_69_pred_3;
                    _2908 = frontier_phi_69_pred_4;
                    _2906 = frontier_phi_69_pred_5;
                    uint _3051 = _3050 + 1u;
                    if (_3051 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3044 = _2906;
                        _3045 = _2908;
                        _3046 = _2910;
                        _3047 = _2912;
                        _3048 = _2914;
                        _3049 = _2916;
                        _3050 = _3051;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2916;
                frontier_phi_57_58_ladder_1 = _2914;
                frontier_phi_57_58_ladder_2 = _2912;
                frontier_phi_57_58_ladder_3 = _2910;
                frontier_phi_57_58_ladder_4 = _2908;
                frontier_phi_57_58_ladder_5 = _2906;
            }
            else
            {
                frontier_phi_57_58_ladder = _2794;
                frontier_phi_57_58_ladder_1 = _2792;
                frontier_phi_57_58_ladder_2 = _2790;
                frontier_phi_57_58_ladder_3 = _2788;
                frontier_phi_57_58_ladder_4 = _2786;
                frontier_phi_57_58_ladder_5 = _2784;
            }
            _2905 = frontier_phi_57_58_ladder_5;
            _2907 = frontier_phi_57_58_ladder_4;
            _2909 = frontier_phi_57_58_ladder_3;
            _2911 = frontier_phi_57_58_ladder_2;
            _2913 = frontier_phi_57_58_ladder_1;
            _2915 = frontier_phi_57_58_ladder;
        }
        float _2920 = isnan(1.0) ? _945 : (isnan(_945) ? 1.0 : min(_945, 1.0));
        _2670 = (_2920 * _2911) + _2107;
        _2672 = (_2920 * _2913) + _2109;
        _2674 = (_2920 * _2915) + _2111;
        _2676 = ((_2905 * _931) * _2920) + _2452;
        _2678 = ((_2907 * _932) * _2920) + _2454;
        _2680 = ((_2909 * _933) * _2920) + _2456;
    }
    else
    {
        _2670 = _2107;
        _2672 = _2109;
        _2674 = _2111;
        _2676 = _2452;
        _2678 = _2454;
        _2680 = _2456;
    }
    uint _2686 = _838 + uint(cbMatDynParam._m0[0u].w);
    float _2692 = cbInstanceData._m0[_2686].x * ((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _631) + cbMatDynParam._m0[7u].x) + (((_672 - (_672 * _597)) + (cbMatDynParam._m0[11u].x * _703)) * cbMatDynParam._m0[9u].x));
    float _2693 = cbInstanceData._m0[_2686].y * ((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _631) + cbMatDynParam._m0[7u].y) + (((_674 - (_674 * _597)) + (cbMatDynParam._m0[11u].y * _703)) * cbMatDynParam._m0[9u].y));
    float _2694 = cbInstanceData._m0[_2686].z * ((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _631) + cbMatDynParam._m0[7u].z) + (((_676 - (_676 * _597)) + (cbMatDynParam._m0[11u].z * _703)) * cbMatDynParam._m0[9u].z));
    float _4624 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _4635 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _4646 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _4657 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _2712 = (((isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_2670 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _945))) + ((_2676 + ((isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0))) * _1743)) * cbPerFrame._m0[3u].x)) + _2692;
    float _2714 = (_2693 + ((_2678 + ((isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0))) * _1743)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (_2672 + ((isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))) * _945)));
    float _2716 = (_2694 + ((_2680 + ((isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))) * _1743)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * (_2674 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _945)));
    float _2724 = cbMatDynParam._m0[12u].y - (cbMatDynParam._m0[12u].y * ((((isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) - _658) * _631) + _658));
    float _2729 = cbInstanceData._m0[_837 + 6u].w * (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0)));
    float _2734 = _735 / cbSceneParam._m0[86u].x;
    float _2735 = _736 / cbSceneParam._m0[86u].y;
    vec4 _2749 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2734, _2735, (log2((isnan(cbSceneParam._m0[77u].w) ? _729 : (isnan(_729) ? cbSceneParam._m0[77u].w : min(_729, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2751 = _2749.x;
    float _2752 = _2749.y;
    float _2753 = _2749.z;
    float _2754 = _2749.w;
    float _2846;
    float _2848;
    float _2850;
    float _2852;
    if (_729 > cbSceneParam._m0[78u].w)
    {
        float _2809 = isnan(_729) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _729 : min(cbSceneParam._m0[80u].w, _729));
        float _2810 = _2809 / _729;
        float _2821 = _2810 * _287;
        float _2822 = _288 * _2810;
        float _2823 = (-0.0) - _2822;
        float _2824 = _2810 * _289;
        float _2826 = (cbSceneParam._m0[77u].w * _2823) / _2809;
        float _2827 = _2826 + cbSceneParam._m0[79u].w;
        float _2828 = cbSceneParam._m0[79u].w - _2822;
        float _2834 = sqrt(((_2821 * _2821) + (_2822 * _2822)) + (_2824 * _2824));
        float _2837 = (1.0 - (cbSceneParam._m0[77u].w / _2809)) * _2834;
        float _2842 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2844 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3006;
        if (abs((_2823 - _2826) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3006 = ((((_2827 > 0.0) ? exp2(_2842 * _2827) : (2.0 - exp2(_2844 * _2827))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2837;
        }
        else
        {
            float _2966 = 1.0 / cbSceneParam._m0[80u].x;
            float _2967 = isnan(_2828) ? _2827 : (isnan(_2827) ? _2828 : max(_2827, _2828));
            float _2968 = isnan(_2828) ? _2827 : (isnan(_2827) ? _2828 : min(_2827, _2828));
            float _2977 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : min(_2967, 0.0));
            float _2978 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : min(_2968, 0.0));
            _3006 = ((abs(_2834 / _2823) * cbSceneParam._m0[80u].y) * ((((_2977 - _2978) * 2.0) - ((exp2(_2842 * (isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0)))) - exp2(_2842 * (isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0))))) * _2966)) - ((exp2(_2844 * _2977) - exp2(_2844 * _2978)) * _2966))) + (_2837 * cbSceneParam._m0[80u].z);
        }
        vec4 _3008 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2734, _2735, 1.0), 0.0);
        float _3017 = exp2((_3006 * (-1.44269502162933349609375)) * (1.0 - _3008.w));
        float _3018 = log2(_3017);
        float _3034 = log2(_2754);
        _2846 = (exp2(_3034 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3018 * cbSceneParam._m0[78u].x)) * _3008.x) / cbSceneParam._m0[78u].x)) + _2751;
        _2848 = (exp2(_3034 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3018 * cbSceneParam._m0[78u].y)) * _3008.y) / cbSceneParam._m0[78u].y)) + _2752;
        _2850 = (exp2(_3034 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3018 * cbSceneParam._m0[78u].z)) * _3008.z) / cbSceneParam._m0[78u].z)) + _2753;
        _2852 = _3017 * _2754;
    }
    else
    {
        _2846 = _2751;
        _2848 = _2752;
        _2850 = _2753;
        _2852 = _2754;
    }
    float _2864 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2865 = _2864 == 3.0;
    float _2866 = log2(_2852);
    float _2870 = exp2(_2866 * cbSceneParam._m0[78u].x);
    float _2871 = exp2(_2866 * cbSceneParam._m0[78u].y);
    float _2872 = exp2(_2866 * cbSceneParam._m0[78u].z);
    float _2873 = _2870 * (isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0)));
    float _2874 = _2871 * (isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0)));
    float _2875 = _2872 * (isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0)));
    float _2884 = (_2864 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2884 * (_2865 ? _2873 : (_2873 + (cbSceneParam._m0[72u].w * _2846)));
    SV_Target.y = _2884 * (_2865 ? _2874 : (_2874 + (cbSceneParam._m0[72u].w * _2848)));
    SV_Target.z = _2884 * (_2865 ? _2875 : (_2875 + (cbSceneParam._m0[72u].w * _2850)));
    SV_Target.w = _2729;
    SV_Target_1.x = ((_2724 * _2692) * _2870) * _2884;
    SV_Target_1.y = ((_2724 * _2693) * _2871) * _2884;
    SV_Target_1.z = ((_2724 * _2694) * _2872) * _2884;
    SV_Target_1.w = _2729;
}


