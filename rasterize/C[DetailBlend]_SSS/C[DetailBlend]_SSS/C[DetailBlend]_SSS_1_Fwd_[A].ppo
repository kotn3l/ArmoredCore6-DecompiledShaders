#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1179;
float _3569;
float _3570;
float _3571;
float _3572;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230;
    float _231;
    float _232;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
    }
    else
    {
        _230 = _216;
        _231 = _217;
        _232 = _218;
    }
    vec4 _246 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _251 = _246.z;
    float _257 = exp2(log2(_251 * 22.0) * 260.0);
    float _258 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _259 = isnan(1.0) ? _258 : (isnan(_258) ? 1.0 : min(_258, 1.0));
    vec4 _273 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _284 = cbMtdParam._m0[10u].x * _273.x;
    float _285 = cbMtdParam._m0[10u].y * _273.y;
    float _286 = cbMtdParam._m0[10u].z * _273.z;
    vec4 _298 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _333 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _341 = (((((cbMtdParam._m0[9u].x * _298.x) - _284) * _259) + _284) * 4.55000019073486328125) * _333.x;
    float _343 = (((((cbMtdParam._m0[9u].y * _298.y) - _285) * _259) + _285) * 4.55000019073486328125) * _333.y;
    float _345 = (((((cbMtdParam._m0[9u].z * _298.z) - _286) * _259) + _286) * 4.55000019073486328125) * _333.z;
    float _346 = _333.w * _298.w;
    vec4 _363 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _373 = (((_363.x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _259) + cbMtdParam._m0[15u].y;
    vec4 _386 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _388 = _386.x;
    float _389 = _386.y;
    float _395 = cbMtdParam._m0[13u].y + _386.z;
    vec4 _407 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _424 = (((_259 * (_251 + (-0.5))) + 0.5) * 2.0) * ((((_407.z - _395) + cbMtdParam._m0[13u].x) * _259) + _395);
    float _428 = (_246.x * 2.0) + (-1.0);
    float _430 = (_246.y * 2.0) + (-1.0);
    float _431 = dot(vec2(_428, _430), vec2(_428, _430));
    float _3591 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _436 = sqrt(1.0 - (isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))));
    float _449 = ((((((_407.x - _388) * _259) + _388) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _428;
    float _450 = ((((((_407.y - _389) * _259) + _389) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _430;
    float _453 = fma(_436, _230, fma(_450, _222 * TANGENT.x, (_208 * _200) * _449));
    float _456 = fma(_436, _231, fma(_450, _222 * TANGENT.y, (_208 * _201) * _449));
    float _459 = fma(_436, _232, fma(_450, _222 * TANGENT.z, (_208 * _202) * _449));
    float _463 = inversesqrt(dot(vec3(_453, _456, _459), vec3(_453, _456, _459)));
    float _464 = _463 * _453;
    float _465 = _463 * _456;
    float _466 = _463 * _459;
    float _3602 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _467 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
    float _3613 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _468 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
    float _3624 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _469 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
    float _3635 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _470 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
    float _3646 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _471 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _3657 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _472 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _488 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _529 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _539 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _529);
    float _540 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _529);
    float _541 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _529);
    float _545 = inversesqrt(dot(vec3(_539, _540, _541), vec3(_539, _540, _541)));
    float _546 = _539 * _545;
    float _547 = _540 * _545;
    float _548 = _541 * _545;
    vec4 _553 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _555 = _553.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _860 = sqrt(((_539 * _539) + (_540 * _540)) + (_541 * _541));
        float _866 = (cbMatDynParam._m0[5u].x * _860) + cbMatDynParam._m0[5u].y;
        float _3668 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _871 = (cbMatDynParam._m0[5u].z * _860) + cbMatDynParam._m0[5u].w;
        float _3679 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) - _867)) + _867) < ((_555 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _566 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _567 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _569 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _571 = _569.w;
    float _590 = fma(_466, cbSceneParam._m0[5u].z, fma(_465, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _464));
    float _593 = fma(_466, cbSceneParam._m0[6u].z, fma(_465, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _464));
    float _596 = fma(_466, cbSceneParam._m0[7u].z, fma(_465, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _464));
    vec4 _598 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _600 = _598.x;
    float _612 = (((_598.y - _468) + (_598.w * _468)) * cbMtdParam._m0[3u].x) + _468;
    float _629 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_600 * _600)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _637 = (((cbMatDynParam._m0[15u].x - _472) * cbMatDynParam._m0[15u].w) * _629) + _472;
    float _645 = ((_629 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _612)) + _612;
    uint _669 = uint(roundEven(NORMAL.w)) * 13u;
    uint _670 = _669 + 9u;
    uint _671 = _670 + uint(cbMatDynParam._m0[0u].w);
    float _677 = (cbMtdParam._m0[0u].x * _469) * cbInstanceData._m0[_671].x;
    float _678 = (cbMtdParam._m0[0u].y * _470) * cbInstanceData._m0[_671].y;
    float _679 = (cbMtdParam._m0[0u].z * _471) * cbInstanceData._m0[_671].z;
    float _3690 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _680 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
    float _3701 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _681 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
    float _3712 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _682 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    vec4 _683 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _688 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _699 = (((_688.x - _637) + (_688.w * _637)) * cbMtdParam._m0[3u].x) + _637;
    float _712 = (cbMtdParam._m0[3u].x * (((_680 * _571) - _680) + _683.x)) + _680;
    float _713 = (cbMtdParam._m0[3u].x * (((_681 * _571) - _681) + _683.y)) + _681;
    float _714 = (cbMtdParam._m0[3u].x * (((_682 * _571) - _682) + _683.z)) + _682;
    vec4 _715 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _728 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_637 * (_469 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_637 * (_470 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_637 * (_471 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _715.z;
    float _732 = _728 * cbMatDynParam._m0[13u].w;
    float _742 = (_732 * (cbMatDynParam._m0[13u].x - _712)) + _712;
    float _743 = (_732 * (cbMatDynParam._m0[13u].y - _713)) + _713;
    float _744 = (_732 * (cbMatDynParam._m0[13u].z - _714)) + _714;
    float _752 = ((_728 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _699)) + _699;
    float _753 = 1.0 - _752;
    float _754 = _753 * _742;
    float _755 = _753 * _743;
    float _756 = _753 * _744;
    float _760 = (_742 + (-0.039999999105930328369140625)) * _752;
    float _761 = (_743 + (-0.039999999105930328369140625)) * _752;
    float _762 = (_744 + (-0.039999999105930328369140625)) * _752;
    float _763 = _760 + 0.039999999105930328369140625;
    float _764 = _761 + 0.039999999105930328369140625;
    float _765 = _762 + 0.039999999105930328369140625;
    vec4 _774 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _566, cbSceneParam._m0[86u].y * _567));
    float _777 = _774.x * TEXCOORD_4;
    float _778 = dot(vec3(_464, _465, _466), vec3(_546, _547, _548));
    float _781 = _778 * 2.0;
    float _785 = (_781 * _464) - _546;
    float _786 = (_781 * _465) - _547;
    float _787 = (_781 * _466) - _548;
    float _791 = abs(dot(vec3(_546, _547, _548), vec3(_464, _465, _466)));
    float _3723 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _793 = sqrt(_645);
    float _806 = exp2((_793 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_793 * 3.0));
    float _812 = (1.0 - _806) * ((_793 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _813 = _806 * _793;
    float _841 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _845 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _849 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1178;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _905 = fma(_849, cbModelParam._m0[26u].z, fma(_845, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _841));
        float _909 = fma(_849, cbModelParam._m0[27u].z, fma(_845, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _841));
        float _913 = fma(_849, cbModelParam._m0[28u].z, fma(_845, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _841));
        float _936 = _841 + _464;
        float _937 = _845 + _465;
        float _938 = _849 + _466;
        float _948 = fma(_938, cbModelParam._m0[26u].z, fma(_937, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _936)) - _905;
        float _949 = fma(_938, cbModelParam._m0[27u].z, fma(_937, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _936)) - _909;
        float _950 = fma(_938, cbModelParam._m0[28u].z, fma(_937, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _936)) - _913;
        float _954 = inversesqrt(dot(vec3(_948, _949, _950), vec3(_948, _949, _950)));
        float _967 = ((_954 * _948) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_905 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _968 = ((_954 * _949) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_909 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _969 = ((_954 * _950) / cbModelParam._m0[34u].z) + ((((((_913 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        vec4 _993 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_967, _968, _969), 0.0);
        float _1006 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_972.x + (-0.5));
        float _1008 = _1006 * (_972.y + (-0.5));
        float _1009 = _1006 * (_972.z + (-0.5));
        float _1016 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_979.x + (-0.5));
        float _1018 = _1016 * (_979.y + (-0.5));
        float _1019 = _1016 * (_979.z + (-0.5));
        float _1026 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_986.x + (-0.5));
        float _1028 = _1026 * (_986.y + (-0.5));
        float _1029 = _1026 * (_986.z + (-0.5));
        float _1036 = exp2((_993.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_993.x + (-0.5));
        float _1038 = _1036 * (_993.y + (-0.5));
        float _1039 = _1036 * (_993.z + (-0.5));
        float _1040 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1041 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = _1007 * 0.5;
        float _1044 = _1017 * 0.5;
        float _1045 = _1027 * 0.5;
        float _1046 = dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045));
        float _1051 = (_1046 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1046);
        float _1060 = (dot(vec3(_464, _465, _466), vec3(_1051 * _1043, _1051 * _1044, _1051 * _1045)) + 1.0) * 0.5;
        float _3749 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1070 = sqrt(((_1044 * _1044) + (_1043 * _1043)) + (_1045 * _1045)) / (_1040 + 9.9999997473787516355514526367188e-06);
        float _3760 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1072 = _1071 * 2.0;
        float _1076 = (1.0 - _1071) / (_1071 + 1.0);
        float _3771 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1086 = ((((1.0 - _1077) * (_1072 + 2.0)) * exp2(log2(isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * (_1072 + 1.0))) + _1077) * _1040;
        float _1087 = _1008 * 0.5;
        float _1088 = _1018 * 0.5;
        float _1089 = _1028 * 0.5;
        float _1090 = dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089));
        float _1095 = (_1090 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1090);
        float _1103 = (dot(vec3(_464, _465, _466), vec3(_1095 * _1087, _1095 * _1088, _1095 * _1089)) + 1.0) * 0.5;
        float _3782 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1112 = sqrt(((_1088 * _1088) + (_1087 * _1087)) + (_1089 * _1089)) / (_1041 + 9.9999997473787516355514526367188e-06);
        float _3793 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _3804 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * (_1114 + 1.0))) + _1119) * _1041;
        float _1129 = _1009 * 0.5;
        float _1130 = _1019 * 0.5;
        float _1131 = _1029 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1145 = (dot(vec3(_464, _465, _466), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _3815 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1154 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _3826 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _3837 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * (_1156 + 1.0))) + _1161) * _1042;
        _1178 = _1009;
        _1180 = _1008;
        _1181 = _1007;
        _1182 = _1019;
        _1183 = _1018;
        _1184 = _1017;
        _1185 = _1029;
        _1186 = _1028;
        _1187 = _1027;
        _1188 = _1042;
        _1189 = _1041;
        _1190 = _1040;
        _1191 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0)));
        _1192 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
        _1193 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
    }
    else
    {
        _1178 = _1179;
        _1180 = _1179;
        _1181 = _1179;
        _1182 = _1179;
        _1183 = _1179;
        _1184 = _1179;
        _1185 = _1179;
        _1186 = _1179;
        _1187 = _1179;
        _1188 = _1179;
        _1189 = _1179;
        _1190 = _1179;
        _1191 = 0.0;
        _1192 = 0.0;
        _1193 = 0.0;
    }
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1222 = fma(_849, cbModelParam._m0[30u].z, fma(_845, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _841));
        float _1226 = fma(_849, cbModelParam._m0[31u].z, fma(_845, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _841));
        float _1230 = fma(_849, cbModelParam._m0[32u].z, fma(_845, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _841));
        float _1253 = _841 + _464;
        float _1254 = _845 + _465;
        float _1255 = _849 + _466;
        float _1265 = fma(_1255, cbModelParam._m0[30u].z, fma(_1254, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1253)) - _1222;
        float _1266 = fma(_1255, cbModelParam._m0[31u].z, fma(_1254, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1253)) - _1226;
        float _1267 = fma(_1255, cbModelParam._m0[32u].z, fma(_1254, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1253)) - _1230;
        float _1271 = inversesqrt(dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267)));
        float _1284 = ((_1271 * _1265) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1222 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1285 = ((_1271 * _1266) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1226 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1286 = ((_1271 * _1267) / cbModelParam._m0[35u].z) + ((((((_1230 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1284, _1285, _1286), 0.0);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1284, _1285, _1286), 0.0);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1284, _1285, _1286), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1284, _1285, _1286), 0.0);
        float _1321 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1288.x + (-0.5));
        float _1323 = _1321 * (_1288.y + (-0.5));
        float _1324 = _1321 * (_1288.z + (-0.5));
        float _1331 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1295.x + (-0.5));
        float _1333 = _1331 * (_1295.y + (-0.5));
        float _1334 = _1331 * (_1295.z + (-0.5));
        float _1341 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1302.x + (-0.5));
        float _1343 = _1341 * (_1302.y + (-0.5));
        float _1344 = _1341 * (_1302.z + (-0.5));
        float _1351 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1352 = _1351 * (_1309.x + (-0.5));
        float _1353 = _1351 * (_1309.y + (-0.5));
        float _1354 = _1351 * (_1309.z + (-0.5));
        float _1355 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1356 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1357 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1358 = _1322 * 0.5;
        float _1359 = _1332 * 0.5;
        float _1360 = _1342 * 0.5;
        float _1361 = dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360));
        float _1366 = (_1361 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1361);
        float _1374 = (dot(vec3(_464, _465, _466), vec3(_1366 * _1358, _1366 * _1359, _1366 * _1360)) + 1.0) * 0.5;
        float _3878 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1383 = sqrt(((_1359 * _1359) + (_1358 * _1358)) + (_1360 * _1360)) / (_1355 + 9.9999997473787516355514526367188e-06);
        float _3889 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1385 = _1384 * 2.0;
        float _1389 = (1.0 - _1384) / (_1384 + 1.0);
        float _3900 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1399 = ((((1.0 - _1390) * (_1385 + 2.0)) * exp2(log2(isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * (_1385 + 1.0))) + _1390) * _1355;
        float _1400 = _1323 * 0.5;
        float _1401 = _1333 * 0.5;
        float _1402 = _1343 * 0.5;
        float _1403 = dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402));
        float _1408 = (_1403 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1403);
        float _1416 = (dot(vec3(_464, _465, _466), vec3(_1408 * _1400, _1408 * _1401, _1408 * _1402)) + 1.0) * 0.5;
        float _3911 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1425 = sqrt(((_1401 * _1401) + (_1400 * _1400)) + (_1402 * _1402)) / (_1356 + 9.9999997473787516355514526367188e-06);
        float _3922 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1427 = _1426 * 2.0;
        float _1431 = (1.0 - _1426) / (_1426 + 1.0);
        float _3933 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1441 = ((((1.0 - _1432) * (_1427 + 2.0)) * exp2(log2(isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_1427 + 1.0))) + _1432) * _1356;
        float _1442 = _1324 * 0.5;
        float _1443 = _1334 * 0.5;
        float _1444 = _1344 * 0.5;
        float _1445 = dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444));
        float _1450 = (_1445 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1445);
        float _1458 = (dot(vec3(_464, _465, _466), vec3(_1450 * _1442, _1450 * _1443, _1450 * _1444)) + 1.0) * 0.5;
        float _3944 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1467 = sqrt(((_1443 * _1443) + (_1442 * _1442)) + (_1444 * _1444)) / (_1357 + 9.9999997473787516355514526367188e-06);
        float _3955 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1469 = _1468 * 2.0;
        float _1473 = (1.0 - _1468) / (_1468 + 1.0);
        float _3966 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1483 = ((((1.0 - _1474) * (_1469 + 2.0)) * exp2(log2(isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * (_1469 + 1.0))) + _1474) * _1357;
        _1491 = _1324;
        _1492 = _1323;
        _1493 = _1322;
        _1494 = _1334;
        _1495 = _1333;
        _1496 = _1332;
        _1497 = _1344;
        _1498 = _1343;
        _1499 = _1342;
        _1500 = _1357;
        _1501 = _1356;
        _1502 = _1355;
        _1503 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)));
        _1504 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)));
        _1505 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)));
    }
    else
    {
        _1491 = _1179;
        _1492 = _1179;
        _1493 = _1179;
        _1494 = _1179;
        _1495 = _1179;
        _1496 = _1179;
        _1497 = _1179;
        _1498 = _1179;
        _1499 = _1179;
        _1500 = _1179;
        _1501 = _1179;
        _1502 = _1179;
        _1503 = 0.0;
        _1504 = 0.0;
        _1505 = 0.0;
    }
    float _1515 = (cbModelParam._m0[1u].x * (_1503 - _1191)) + _1191;
    float _1516 = (cbModelParam._m0[1u].x * (_1504 - _1192)) + _1192;
    float _1517 = (cbModelParam._m0[1u].x * (_1505 - _1193)) + _1193;
    float _1538 = fma(_1517, cbSceneParam._m0[89u].z, fma(_1516, cbSceneParam._m0[89u].y, _1515 * cbSceneParam._m0[89u].x));
    float _1541 = fma(_1517, cbSceneParam._m0[90u].z, fma(_1516, cbSceneParam._m0[90u].y, _1515 * cbSceneParam._m0[90u].x));
    float _1544 = fma(_1517, cbSceneParam._m0[91u].z, fma(_1516, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1515));
    float _1559 = _785 * 0.5;
    float _1560 = _786 * 0.5;
    float _1561 = _787 * 0.5;
    float _1562 = dot(vec4(_1559, _1560, _1561, 1.0), vec4(_1493, _1496, _1499, _1502));
    float _1565 = dot(vec4(_1559, _1560, _1561, 1.0), vec4(_1492, _1495, _1498, _1501));
    float _1568 = dot(vec4(_1559, _1560, _1561, 1.0), vec4(_1491, _1494, _1497, _1500));
    float _1599;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1575 = dot(vec4(_1559, _1560, _1561, 1.0), vec4(_1178, _1182, _1185, _1188));
        float _1579 = dot(vec4(_1559, _1560, _1561, 1.0), vec4(_1180, _1183, _1186, _1189));
        float _1583 = dot(vec4(_1559, _1560, _1561, 1.0), vec4(_1181, _1184, _1187, _1190));
        float _1590 = dot(vec4(cbModelParam._m0[39u]), vec4(_1559, _1560, _1561, 1.0));
        _1599 = dot(vec3(isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)), isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)), isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1590) ? 0.0 : (isnan(0.0) ? _1590 : max(0.0, _1590))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1599 = 1.0;
    }
    float _1610;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1601 = dot(vec4(cbModelParam._m0[40u]), vec4(_1559, _1560, _1561, 1.0));
        _1610 = dot(vec3(isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)), isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)), isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1601) ? 0.0 : (isnan(0.0) ? _1601 : max(0.0, _1601))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1610 = 1.0;
    }
    float _1614 = (_1610 * cbModelParam._m0[1u].x) + (_1599 * (1.0 - cbModelParam._m0[1u].x));
    float _1624 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _645);
    float _1625 = isnan(_1624) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1624 : min(cbModelParam._m0[25u].z, _1624));
    float _1705;
    float _1707;
    float _1709;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1672 = fma(_849, cbModelParam._m0[13u].z, fma(_845, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _841)) + cbModelParam._m0[13u].w;
        float _1676 = fma(_849, cbModelParam._m0[14u].z, fma(_845, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _841)) + cbModelParam._m0[14u].w;
        float _1680 = fma(_849, cbModelParam._m0[15u].z, fma(_845, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _841)) + cbModelParam._m0[15u].w;
        float _1683 = fma(_787, cbModelParam._m0[13u].z, fma(_786, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _785));
        float _1686 = fma(_787, cbModelParam._m0[14u].z, fma(_786, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _785));
        float _1689 = fma(_787, cbModelParam._m0[15u].z, fma(_786, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _785));
        float _1717;
        if (_1683 > 0.0)
        {
            _1717 = abs((1.0 - _1672) / _1683);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1672 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1717 = frontier_phi_19_17_ladder;
        }
        float _1925;
        if (_1686 > 0.0)
        {
            _1925 = abs((1.0 - _1676) / _1686);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1676 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1925 = frontier_phi_28_24_ladder;
        }
        float _2179;
        if (_1689 > 0.0)
        {
            _2179 = abs((1.0 - _1680) / _1689);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1689 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1680 + 1.0) / _1689);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2179 = frontier_phi_40_35_ladder;
        }
        float _2181 = isnan(_1925) ? _1717 : (isnan(_1717) ? _1925 : min(_1717, _1925));
        float _2182 = isnan(_2179) ? _2181 : (isnan(_2181) ? _2179 : min(_2181, _2179));
        float _2186 = (_2182 * _1683) + _1672;
        float _2187 = (_2182 * _1686) + _1676;
        float _2188 = (_2182 * _1689) + _1680;
        float _2189 = _2182 * 9.9999997473787516355514526367188e-05;
        float _2191 = (-1.0) - _2189;
        float _2193 = _2189 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2188 > _2193) || ((_2188 < _2191) || ((_2187 > _2193) || ((_2187 < _2191) || ((_2186 < _2191) || (_2186 > _2193))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2316 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2188, cbModelParam._m0[9u].z, fma(_2187, cbModelParam._m0[9u].y, _2186 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2188, cbModelParam._m0[10u].z, fma(_2187, cbModelParam._m0[10u].y, _2186 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2188, cbModelParam._m0[11u].z, fma(_2187, cbModelParam._m0[11u].y, _2186 * cbModelParam._m0[11u].x))), _1625);
            frontier_phi_18_40_ladder = _2316.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2316.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2316.x * cbModelParam._m0[1u].y;
        }
        _1705 = frontier_phi_18_40_ladder_2;
        _1707 = frontier_phi_18_40_ladder_1;
        _1709 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1693 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_785, _786, _787), _1625);
        _1705 = _1693.x * cbModelParam._m0[1u].y;
        _1707 = _1693.y * cbModelParam._m0[1u].y;
        _1709 = _1693.z * cbModelParam._m0[1u].y;
    }
    float _1713 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _645);
    float _1714 = isnan(_1713) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1713 : min(cbModelParam._m0[25u].w, _1713));
    float _1807;
    float _1809;
    float _1811;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1771 = fma(_849, cbModelParam._m0[21u].z, fma(_845, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _841)) + cbModelParam._m0[21u].w;
        float _1775 = fma(_849, cbModelParam._m0[22u].z, fma(_845, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _841)) + cbModelParam._m0[22u].w;
        float _1779 = fma(_849, cbModelParam._m0[23u].z, fma(_845, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _841)) + cbModelParam._m0[23u].w;
        float _1782 = fma(_787, cbModelParam._m0[21u].z, fma(_786, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _785));
        float _1785 = fma(_787, cbModelParam._m0[22u].z, fma(_786, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _785));
        float _1788 = fma(_787, cbModelParam._m0[23u].z, fma(_786, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _785));
        float _1930;
        if (_1782 > 0.0)
        {
            _1930 = abs((1.0 - _1771) / _1782);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1771 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1930 = frontier_phi_30_26_ladder;
        }
        float _2206;
        if (_1785 > 0.0)
        {
            _2206 = abs((1.0 - _1775) / _1785);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1785 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1775 + 1.0) / _1785);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2206 = frontier_phi_42_37_ladder;
        }
        float _2419;
        if (_1788 > 0.0)
        {
            _2419 = abs((1.0 - _1779) / _1788);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1788 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1779 + 1.0) / _1788);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2419 = frontier_phi_51_48_ladder;
        }
        float _2421 = isnan(_2206) ? _1930 : (isnan(_1930) ? _2206 : min(_1930, _2206));
        float _2422 = isnan(_2419) ? _2421 : (isnan(_2421) ? _2419 : min(_2421, _2419));
        float _2426 = (_2422 * _1782) + _1771;
        float _2427 = (_2422 * _1785) + _1775;
        float _2428 = (_2422 * _1788) + _1779;
        float _2429 = _2422 * 9.9999997473787516355514526367188e-05;
        float _2430 = (-1.0) - _2429;
        float _2432 = _2429 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2428 > _2432) || ((_2428 < _2430) || ((_2427 > _2432) || ((_2427 < _2430) || ((_2426 < _2430) || (_2426 > _2432))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2631 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2428, cbModelParam._m0[17u].z, fma(_2427, cbModelParam._m0[17u].y, _2426 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2428, cbModelParam._m0[18u].z, fma(_2427, cbModelParam._m0[18u].y, _2426 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2428, cbModelParam._m0[19u].z, fma(_2427, cbModelParam._m0[19u].y, _2426 * cbModelParam._m0[19u].x))), _1714);
            frontier_phi_27_51_ladder = _2631.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2631.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2631.x * cbModelParam._m0[1u].z;
        }
        _1807 = frontier_phi_27_51_ladder_2;
        _1809 = frontier_phi_27_51_ladder_1;
        _1811 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1791 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_785, _786, _787), _1714);
        _1807 = _1791.x * cbModelParam._m0[1u].z;
        _1809 = _1791.y * cbModelParam._m0[1u].z;
        _1811 = _1791.z * cbModelParam._m0[1u].z;
    }
    float _1824 = (((_812 * _763) + _813) * _777) * ((cbModelParam._m0[1u].w * (_1807 - _1705)) + _1705);
    float _1826 = (((_812 * _764) + _813) * _777) * ((cbModelParam._m0[1u].w * (_1809 - _1707)) + _1707);
    float _1828 = (((_812 * _765) + _813) * _777) * ((cbModelParam._m0[1u].w * (_1811 - _1709)) + _1709);
    float _1831 = fma(_1828, cbSceneParam._m0[89u].z, fma(_1826, cbSceneParam._m0[89u].y, _1824 * cbSceneParam._m0[89u].x));
    float _1834 = fma(_1828, cbSceneParam._m0[90u].z, fma(_1826, cbSceneParam._m0[90u].y, _1824 * cbSceneParam._m0[90u].x));
    float _1837 = fma(_1828, cbSceneParam._m0[91u].z, fma(_1826, cbSceneParam._m0[91u].y, _1824 * cbSceneParam._m0[91u].x));
    uvec4 _1847 = floatBitsToUint(cbInstanceData._m0[_669 + 5u]);
    uint _1849 = _1847.x * 14u;
    uint _1850 = _1849 + 13u;
    float _1857 = _777 + (-1.0);
    float _1862 = (cbLight._m0[_1850].x * _1857) + 1.0;
    float _1863 = (cbLight._m0[_1850].y * _1857) + 1.0;
    float _1864 = (cbLight._m0[_1850].z * _1857) + 1.0;
    float _1865 = (cbLight._m0[_1850].w * _1857) + 1.0;
    uint _1866 = _1849 + 5u;
    float _1872 = isnan(1.0) ? _1863 : (isnan(_1863) ? 1.0 : min(_1863, 1.0));
    uint _1876 = _1849 + 4u;
    float _1883 = isnan(1.0) ? _1862 : (isnan(_1862) ? 1.0 : min(_1862, 1.0));
    uint _1887 = _1849 | 1u;
    float _1898 = dot(vec3(cbLight._m0[_1849].xyz), vec3(_464, _465, _466));
    float _1901 = dot(vec3(cbLight._m0[_1887].xyz), vec3(_464, _465, _466));
    float _4102 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _4113 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1906 = (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * 0.3183098733425140380859375;
    float _1908 = (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * 0.3183098733425140380859375;
    float _1915 = ((cbLight._m0[_1866].x * _1872) * _1908) + ((cbLight._m0[_1876].x * _1883) * _1906);
    float _1916 = ((_1872 * cbLight._m0[_1866].y) * _1908) + ((_1883 * cbLight._m0[_1876].y) * _1906);
    float _1917 = ((_1872 * cbLight._m0[_1866].z) * _1908) + ((_1883 * cbLight._m0[_1876].z) * _1906);
    uvec4 _1922 = floatBitsToUint(cbLight._m0[_1849 + 12u]);
    bool _1924 = _1922.x == 0u;
    float _1935;
    float _1937;
    float _1939;
    if (_1924)
    {
        _1935 = _1915;
        _1937 = _1916;
        _1939 = _1917;
    }
    else
    {
        uint _1943 = _1849 + 6u;
        float _1959 = (dot(vec3(cbLight._m0[_1849 + 2u].xyz), vec3(_464, _465, _466)) * 0.5) + 0.5;
        float _1960 = _1959 * _1959;
        float _4124 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
        float _1961 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1962 = isnan(1.0) ? _1864 : (isnan(_1864) ? 1.0 : min(_1864, 1.0));
        _1935 = (((cbLight._m0[_1943].x * 0.3183098733425140380859375) * _1961) * _1962) + _1915;
        _1937 = (((cbLight._m0[_1943].y * 0.3183098733425140380859375) * _1961) * _1962) + _1916;
        _1939 = (((cbLight._m0[_1943].z * 0.3183098733425140380859375) * _1961) * _1962) + _1917;
    }
    bool _1942 = _1922.y == 0u;
    float _1980;
    float _1982;
    float _1984;
    if (_1942)
    {
        _1980 = _1935;
        _1982 = _1937;
        _1984 = _1939;
    }
    else
    {
        uint _2150 = _1849 + 7u;
        float _2166 = (dot(vec3(cbLight._m0[_1849 + 3u].xyz), vec3(_464, _465, _466)) * 0.5) + 0.5;
        float _2167 = _2166 * _2166;
        float _4140 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2168 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _2169 = isnan(1.0) ? _1865 : (isnan(_1865) ? 1.0 : min(_1865, 1.0));
        _1980 = (((cbLight._m0[_2150].x * 0.3183098733425140380859375) * _2168) * _2169) + _1935;
        _1982 = (((cbLight._m0[_2150].y * 0.3183098733425140380859375) * _2168) * _2169) + _1937;
        _1984 = (((cbLight._m0[_2150].z * 0.3183098733425140380859375) * _2168) * _2169) + _1939;
    }
    uint _1987 = _1849 + 8u;
    float _2000 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1849].w)) * _645) * 0.949999988079071044921875);
    float _2001 = _2000 * _2000;
    float _2002 = cbLight._m0[_1849].x + _546;
    float _2003 = cbLight._m0[_1849].y + _547;
    float _2004 = cbLight._m0[_1849].z + _548;
    float _2008 = inversesqrt(dot(vec3(_2002, _2003, _2004), vec3(_2002, _2003, _2004)));
    float _2009 = _2008 * _2002;
    float _2010 = _2008 * _2003;
    float _2011 = _2008 * _2004;
    float _2012 = dot(vec3(_464, _465, _466), vec3(cbLight._m0[_1849].xyz));
    float _4156 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2015 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
    float _4167 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _2016 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _2017 = dot(vec3(_464, _465, _466), vec3(_2009, _2010, _2011));
    float _4178 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2020 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _2021 = dot(vec3(cbLight._m0[_1849].xyz), vec3(_2009, _2010, _2011));
    float _4189 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2025 = _2001 * _2001;
    float _2029 = ((_2020 * _2020) * (_2025 + (-1.0))) + 1.0;
    float _2037 = exp2(log2(1.0 - (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)))) * 5.0);
    float _2038 = 0.959999978542327880859375 - _760;
    float _2040 = 0.959999978542327880859375 - _761;
    float _2041 = 0.959999978542327880859375 - _762;
    float _2048 = 1.0 - _2001;
    float _2059 = (0.5 / (((_2016 * ((_2015 * _2048) + _2001)) + 9.9999999392252902907785028219223e-09) + (((_2016 * _2048) + _2001) * _2015))) * _2015;
    float _4200 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2061 = (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_2025 / ((_2029 * _2029) * 3.141590118408203125));
    uint _2072 = _1849 + 9u;
    float _2083 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1887].w)) * _645) * 0.949999988079071044921875);
    float _2084 = _2083 * _2083;
    float _2085 = cbLight._m0[_1887].x + _546;
    float _2086 = cbLight._m0[_1887].y + _547;
    float _2087 = cbLight._m0[_1887].z + _548;
    float _2091 = inversesqrt(dot(vec3(_2085, _2086, _2087), vec3(_2085, _2086, _2087)));
    float _2092 = _2091 * _2085;
    float _2093 = _2091 * _2086;
    float _2094 = _2091 * _2087;
    float _2095 = dot(vec3(_464, _465, _466), vec3(cbLight._m0[_1887].xyz));
    float _4211 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2098 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
    float _2099 = dot(vec3(_464, _465, _466), vec3(_2092, _2093, _2094));
    float _4222 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2102 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
    float _2103 = dot(vec3(cbLight._m0[_1887].xyz), vec3(_2092, _2093, _2094));
    float _4233 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2107 = _2084 * _2084;
    float _2111 = ((_2102 * _2102) * (_2107 + (-1.0))) + 1.0;
    float _2118 = exp2(log2(1.0 - (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0)))) * 5.0);
    float _2125 = 1.0 - _2084;
    float _2135 = (0.5 / (((_2016 * ((_2098 * _2125) + _2084)) + 9.9999999392252902907785028219223e-09) + (((_2016 * _2125) + _2084) * _2098))) * _2098;
    float _4244 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2137 = (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_2107 / ((_2111 * _2111) * 3.141590118408203125));
    float _2147 = (((((_2118 * _2038) + _763) * cbLight._m0[_2072].x) * _2137) * _1872) + (((((_2037 * _2038) + _763) * cbLight._m0[_1987].x) * _2061) * _1883);
    float _2148 = (((((_2118 * _2040) + _764) * cbLight._m0[_2072].y) * _2137) * _1872) + (((((_2037 * _2040) + _764) * cbLight._m0[_1987].y) * _2061) * _1883);
    float _2149 = (((((_2118 * _2041) + _765) * cbLight._m0[_2072].z) * _2137) * _1872) + (((((_2037 * _2041) + _765) * cbLight._m0[_1987].z) * _2061) * _1883);
    float _2211;
    float _2213;
    float _2215;
    if (_1924)
    {
        _2211 = _2147;
        _2213 = _2148;
        _2215 = _2149;
    }
    else
    {
        uint _2217 = _1849 + 2u;
        uint _2221 = _1849 + 10u;
        float _2235 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2217].w)) * _645) * 0.949999988079071044921875);
        float _2236 = _2235 * _2235;
        float _2237 = cbLight._m0[_2217].x + _546;
        float _2238 = cbLight._m0[_2217].y + _547;
        float _2239 = cbLight._m0[_2217].z + _548;
        float _2243 = inversesqrt(dot(vec3(_2237, _2238, _2239), vec3(_2237, _2238, _2239)));
        float _2244 = _2243 * _2237;
        float _2245 = _2243 * _2238;
        float _2246 = _2243 * _2239;
        float _2247 = dot(vec3(_464, _465, _466), vec3(cbLight._m0[_2217].xyz));
        float _4255 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2250 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _2251 = dot(vec3(_464, _465, _466), vec3(_2244, _2245, _2246));
        float _4266 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2254 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _2255 = dot(vec3(cbLight._m0[_2217].xyz), vec3(_2244, _2245, _2246));
        float _4277 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2259 = _2236 * _2236;
        float _2263 = ((_2254 * _2254) * (_2259 + (-1.0))) + 1.0;
        float _2270 = exp2(log2(1.0 - (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0)))) * 5.0);
        float _2277 = 1.0 - _2236;
        float _2287 = (0.5 / (((_2016 * ((_2250 * _2277) + _2236)) + 9.9999999392252902907785028219223e-09) + (((_2016 * _2277) + _2236) * _2250))) * _2250;
        float _4288 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2289 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_2259 / ((_2263 * _2263) * 3.141590118408203125));
        float _2290 = isnan(1.0) ? _1864 : (isnan(_1864) ? 1.0 : min(_1864, 1.0));
        _2211 = (((((_2270 * _2038) + _763) * cbLight._m0[_2221].x) * _2289) * _2290) + _2147;
        _2213 = (((((_2270 * _2040) + _764) * cbLight._m0[_2221].y) * _2289) * _2290) + _2148;
        _2215 = (((((_2270 * _2041) + _765) * cbLight._m0[_2221].z) * _2289) * _2290) + _2149;
    }
    float _2325;
    float _2327;
    float _2329;
    if (_1942)
    {
        _2325 = _2211;
        _2327 = _2213;
        _2329 = _2215;
    }
    else
    {
        uint _2336 = _1849 + 3u;
        uint _2340 = _1849 + 11u;
        float _2354 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2336].w)) * _645) * 0.949999988079071044921875);
        float _2355 = _2354 * _2354;
        float _2356 = cbLight._m0[_2336].x + _546;
        float _2357 = cbLight._m0[_2336].y + _547;
        float _2358 = cbLight._m0[_2336].z + _548;
        float _2362 = inversesqrt(dot(vec3(_2356, _2357, _2358), vec3(_2356, _2357, _2358)));
        float _2363 = _2362 * _2356;
        float _2364 = _2362 * _2357;
        float _2365 = _2362 * _2358;
        float _2366 = dot(vec3(_464, _465, _466), vec3(cbLight._m0[_2336].xyz));
        float _4304 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2369 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _2370 = dot(vec3(_464, _465, _466), vec3(_2363, _2364, _2365));
        float _4315 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2373 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _2374 = dot(vec3(cbLight._m0[_2336].xyz), vec3(_2363, _2364, _2365));
        float _4326 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2378 = _2355 * _2355;
        float _2382 = ((_2373 * _2373) * (_2378 + (-1.0))) + 1.0;
        float _2389 = exp2(log2(1.0 - (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0)))) * 5.0);
        float _2396 = 1.0 - _2355;
        float _2406 = (0.5 / (((_2016 * ((_2369 * _2396) + _2355)) + 9.9999999392252902907785028219223e-09) + (((_2016 * _2396) + _2355) * _2369))) * _2369;
        float _4337 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2408 = (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_2378 / ((_2382 * _2382) * 3.141590118408203125));
        float _2409 = isnan(1.0) ? _1865 : (isnan(_1865) ? 1.0 : min(_1865, 1.0));
        _2325 = (((((_2389 * _2038) + _763) * cbLight._m0[_2340].x) * _2408) * _2409) + _2211;
        _2327 = (((((_2389 * _2040) + _764) * cbLight._m0[_2340].y) * _2408) * _2409) + _2213;
        _2329 = (((((_2389 * _2041) + _765) * cbLight._m0[_2340].z) * _2408) * _2409) + _2215;
    }
    float _2543;
    float _2545;
    float _2547;
    float _2549;
    float _2551;
    float _2553;
    if (_1847.y == 0u)
    {
        float _2484 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2485 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2484;
        float _2486 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2484;
        float _2487 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2484;
        uvec4 _2499 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2500 = _2499.x;
        uint _2511 = uint((float(_2499.y) * floor(float(uint(cbSceneParam._m0[85u].y * _567) / _2500))) + floor(float(uint(cbSceneParam._m0[85u].x * _566) / _2500)));
        float _2521 = (log2(_2487 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2522 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        uint _2525 = uint(isnan(14.0) ? _2522 : (isnan(_2522) ? 14.0 : min(_2522, 14.0)));
        uvec4 _2530 = texelFetch(g_lightClusterGridBuffer, int(((_2525 << 2u) + (_2511 << 6u)) >> 2u));
        uint _2531 = _2530.x;
        uint _2532 = _2499.z;
        float _2636;
        float _2638;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        if (((((1u << ((_2532 >> 4u) & 15u)) + 4294967295u) & _2531) == 0u) || ((_2532 & 240u) == 0u))
        {
            _2636 = 0.0;
            _2638 = 0.0;
            _2640 = 0.0;
            _2642 = 0.0;
            _2644 = 0.0;
            _2646 = 0.0;
        }
        else
        {
            float _2637;
            float _2639;
            float _2641;
            float _2643;
            float _2645;
            float _2647;
            float _2788 = 0.0;
            float _2789 = 0.0;
            float _2790 = 0.0;
            float _2791 = 0.0;
            float _2792 = 0.0;
            float _2793 = 0.0;
            uint _2794 = 0u;
            uint _2803;
            bool _2804;
            for (;;)
            {
                _2803 = texelFetch(g_lightClassification, int((((_2525 << 5u) + (_2511 << 9u)) + (_2794 << 2u)) >> 2u)).x;
                _2804 = _2803 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2804)
                {
                    frontier_phi_68_pred = _2790;
                    frontier_phi_68_pred_1 = _2793;
                    frontier_phi_68_pred_2 = _2792;
                    frontier_phi_68_pred_3 = _2791;
                    frontier_phi_68_pred_4 = _2789;
                    frontier_phi_68_pred_5 = _2788;
                }
                else
                {
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    float _2937;
                    float _2938;
                    uint _2939;
                    _2933 = _2788;
                    _2934 = _2789;
                    _2935 = _2790;
                    _2936 = _2791;
                    _2937 = _2792;
                    _2938 = _2793;
                    _2939 = _2803;
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    for (;;)
                    {
                        uint _2943 = uint(findLSB(_2939)) + (_2794 << 5u);
                        uint _2940 = (_2939 + 4294967295u) & _2939;
                        uint _2945 = _2943 * 48u;
                        vec4 _2959 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2945)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 3u)).x));
                        uint _2965 = (_2943 * 48u) + 4u;
                        vec4 _2978 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2965)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 3u)).x));
                        uint _2984 = (_2943 * 48u) + 8u;
                        vec3 _2995 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2984)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 2u)).x));
                        float _2999 = _2959.x - _2485;
                        float _3000 = _2959.y - _2486;
                        float _3001 = _2959.z - _2487;
                        float _3002 = dot(vec3(_2999, _3000, _3001), vec3(_2999, _3000, _3001));
                        float _3005 = inversesqrt(_3002);
                        float _3006 = _3005 * _2999;
                        float _3007 = _3005 * _3000;
                        float _3008 = _3005 * _3001;
                        float _3009 = dot(vec3(_590, _593, _596), vec3(_3006, _3007, _3008));
                        float _3014 = 1.0 - (_3002 * _2959.w);
                        float _4363 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                        float _3015 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                        float _3016 = sqrt(_3002) * _2978.w;
                        float _3019 = 1.39999997615814208984375 / (_3016 + 1.39999997615814208984375);
                        float _3020 = _3019 * _3019;
                        float _3023 = ((1.0 - _3020) * _3009) + _3020;
                        float _3026 = _3016 * _3016;
                        float _3030 = ((isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0))) * _3015) / ((_3026 * 0.699999988079071044921875) + 1.0);
                        float _3034 = (-0.0) - _2485;
                        float _3035 = (-0.0) - _2486;
                        float _3036 = (-0.0) - _2487;
                        float _3040 = inversesqrt(dot(vec3(_3034, _3035, _3036), vec3(_3034, _3035, _3036)));
                        float _3041 = _3040 * _3034;
                        float _3042 = _3040 * _3035;
                        float _3043 = _3040 * _3036;
                        float _3051 = exp2(log2(1.0 / ((_3026 * 3.5) + 5.0)) * 0.25);
                        float _3052 = 1.0 - _793;
                        float _3059 = sqrt(1.0 - ((1.0 - (_3052 * _3052)) * (1.0 - (_3051 * _3051))));
                        float _3060 = _3059 * _3059;
                        float _3061 = _3060 * _3060;
                        float _3062 = _3041 + _3006;
                        float _3063 = _3042 + _3007;
                        float _3064 = _3043 + _3008;
                        float _3068 = inversesqrt(dot(vec3(_3062, _3063, _3064), vec3(_3062, _3063, _3064)));
                        float _3072 = dot(vec3(_590, _593, _596), vec3(_3041, _3042, _3043));
                        float _4379 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                        float _3075 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                        float _3076 = dot(vec3(_590, _593, _596), vec3(_3068 * _3062, _3068 * _3063, _3068 * _3064));
                        float _4390 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                        float _3079 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                        float _3083 = ((_3079 * _3079) * (_3061 + (-1.0))) + 1.0;
                        float _3084 = _3019 * _3060;
                        float _3085 = _3084 * _3084;
                        float _3088 = ((1.0 - _3085) * _3009) + _3085;
                        float _4401 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                        float _3089 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                        float _3090 = 1.0 - _3060;
                        float _3100 = (0.5 / (((_3089 * ((_3075 * _3090) + _3060)) + 9.9999999392252902907785028219223e-09) + (((_3089 * _3090) + _3060) * _3075))) * _3089;
                        float _4412 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                        float _3111 = (((_3061 * 3.1415927410125732421875) * (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0)))) / ((_3083 * _3083) * ((_3026 * 2.1991131305694580078125) + 3.141590118408203125))) * _3015;
                        _2863 = (_3030 * _2978.x) + _2936;
                        _2864 = (_3030 * _2978.y) + _2937;
                        _2865 = (_3030 * _2978.z) + _2938;
                        _2860 = (_3111 * _2995.x) + _2933;
                        _2861 = (_3111 * _2995.y) + _2934;
                        _2862 = (_3111 * _2995.z) + _2935;
                        if (_2940 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2933 = _2860;
                            _2934 = _2861;
                            _2935 = _2862;
                            _2936 = _2863;
                            _2937 = _2864;
                            _2938 = _2865;
                            _2939 = _2940;
                        }
                    }
                    frontier_phi_68_pred = _2862;
                    frontier_phi_68_pred_1 = _2865;
                    frontier_phi_68_pred_2 = _2864;
                    frontier_phi_68_pred_3 = _2863;
                    frontier_phi_68_pred_4 = _2861;
                    frontier_phi_68_pred_5 = _2860;
                }
                _2641 = frontier_phi_68_pred;
                _2647 = frontier_phi_68_pred_1;
                _2645 = frontier_phi_68_pred_2;
                _2643 = frontier_phi_68_pred_3;
                _2639 = frontier_phi_68_pred_4;
                _2637 = frontier_phi_68_pred_5;
                uint _2795 = _2794 + 1u;
                if (_2795 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2788 = _2637;
                    _2789 = _2639;
                    _2790 = _2641;
                    _2791 = _2643;
                    _2792 = _2645;
                    _2793 = _2647;
                    _2794 = _2795;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2636 = _2637;
            _2638 = _2639;
            _2640 = _2641;
            _2642 = _2643;
            _2644 = _2645;
            _2646 = _2647;
        }
        uvec4 _2650 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2651 = _2650.z;
        uint _2653 = (_2651 >> 8u) & 15u;
        float _2756;
        float _2758;
        float _2760;
        float _2762;
        float _2764;
        float _2766;
        if (((4294967295u << _2653) & _2531) == 0u)
        {
            _2756 = _2636;
            _2758 = _2638;
            _2760 = _2640;
            _2762 = _2642;
            _2764 = _2644;
            _2766 = _2646;
        }
        else
        {
            float _2781 = inversesqrt(dot(vec3(_2485, _2486, _2487), vec3(_2485, _2486, _2487)));
            float _2782 = _2781 * _2485;
            float _2783 = _2781 * _2486;
            float _2784 = _2781 * _2487;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2653 < ((_2651 >> 12u) & 15u))
            {
                float _2757;
                float _2759;
                float _2761;
                float _2763;
                float _2765;
                float _2767;
                float _2916 = _2636;
                float _2917 = _2638;
                float _2918 = _2640;
                float _2919 = _2642;
                float _2920 = _2644;
                float _2921 = _2646;
                uint _2922 = _2653;
                uint _2931;
                bool _2932;
                for (;;)
                {
                    _2931 = texelFetch(g_lightClassification, int((((_2525 << 5u) + (_2511 << 9u)) + (_2922 << 2u)) >> 2u)).x;
                    _2932 = _2931 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2932)
                    {
                        frontier_phi_79_pred = _2921;
                        frontier_phi_79_pred_1 = _2920;
                        frontier_phi_79_pred_2 = _2919;
                        frontier_phi_79_pred_3 = _2918;
                        frontier_phi_79_pred_4 = _2917;
                        frontier_phi_79_pred_5 = _2916;
                    }
                    else
                    {
                        float _3125;
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3138 = _2916;
                        float _3139 = _2917;
                        float _3140 = _2918;
                        float _3141 = _2919;
                        float _3142 = _2920;
                        float _3143 = _2921;
                        uint _3144 = _2931;
                        uint _3145;
                        vec4 _3170;
                        float _3171;
                        vec4 _3186;
                        vec3 _3198;
                        vec4 _3213;
                        vec4 _3229;
                        float _3276;
                        bool _3277;
                        for (;;)
                        {
                            uint _3155 = ((_2922 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3144));
                            _3145 = (_3144 + 4294967295u) & _3144;
                            uint _3157 = _3155 * 40u;
                            _3170 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 3u)).x));
                            _3171 = _3170.w;
                            uint _3173 = (_3155 * 40u) + 4u;
                            _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            uint _3188 = (_3155 * 40u) + 8u;
                            _3198 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x));
                            uint _3200 = (_3155 * 40u) + 16u;
                            _3213 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 3u)).x));
                            uint _3216 = (_3155 * 40u) + 20u;
                            _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            uint _3232 = (_3155 * 40u) + 24u;
                            vec4 _3245 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 3u)).x));
                            uint _3251 = (_3155 * 40u) + 28u;
                            vec4 _3264 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3251)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 3u)).x));
                            _3276 = fma(_2487, _3264.z, fma(_2486, _3264.y, _3264.x * _2485)) + _3264.w;
                            _3277 = !((fma(_2487, _3245.z, fma(_2486, _3245.y, _3245.x * _2485)) + _3245.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3277)
                            {
                                float _3304 = _3170.x - _2485;
                                float _3305 = _3170.y - _2486;
                                float _3306 = _3170.z - _2487;
                                float _3307 = dot(vec3(_3304, _3305, _3306), vec3(_3304, _3305, _3306));
                                float _3310 = inversesqrt(_3307);
                                float _3311 = _3310 * _3304;
                                float _3312 = _3310 * _3305;
                                float _3313 = _3310 * _3306;
                                float _3317 = 1.0 - (_3307 / (_3171 * _3171));
                                float _4423 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3318 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                                float _3322 = sqrt(_3307) * _3186.w;
                                float _3324 = 1.39999997615814208984375 / (_3322 + 1.39999997615814208984375);
                                float _3325 = _3324 * _3324;
                                float _3328 = ((1.0 - _3325) * dot(vec3(_3311, _3312, _3313), vec3(_590, _593, _596))) + _3325;
                                float _3331 = _3322 * _3322;
                                float _3335 = (fma(_2487, _3213.z, fma(_2486, _3213.y, _3213.x * _2485)) + _3213.w) / _3276;
                                float _3336 = (fma(_2487, _3229.z, fma(_2486, _3229.y, _3229.x * _2485)) + _3229.w) / _3276;
                                float _3340 = 1.0 - dot(vec2(_3335, _3336), vec2(_3335, _3336));
                                float _4439 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                                float _3341 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
                                float _3342 = _3341 * (((isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0))) * _3318) / ((_3331 * 0.699999988079071044921875) + 1.0));
                                float _3354 = exp2(log2(1.0 / ((_3331 * 3.5) + 5.0)) * 0.25);
                                float _3355 = 1.0 - _793;
                                float _3362 = sqrt(1.0 - ((1.0 - (_3355 * _3355)) * (1.0 - (_3354 * _3354))));
                                float _3363 = _3362 * _3362;
                                float _3364 = _3363 * _3363;
                                float _3365 = _3311 - _2782;
                                float _3366 = _3312 - _2783;
                                float _3367 = _3313 - _2784;
                                float _3371 = inversesqrt(dot(vec3(_3365, _3366, _3367), vec3(_3365, _3366, _3367)));
                                float _3375 = dot(vec3(_590, _593, _596), vec3((-0.0) - _2782, (-0.0) - _2783, (-0.0) - _2784));
                                float _4450 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                                float _3378 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
                                float _3379 = dot(vec3(_590, _593, _596), vec3(_3371 * _3365, _3371 * _3366, _3371 * _3367));
                                float _4461 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                                float _3382 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                                float _3386 = ((_3382 * _3382) * (_3364 + (-1.0))) + 1.0;
                                float _3387 = _3324 * _3363;
                                float _3388 = _3387 * _3387;
                                float _3394 = ((1.0 - _3388) * dot(vec3(_590, _593, _596), vec3(_3311, _3312, _3313))) + _3388;
                                float _4472 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                                float _3395 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                                float _3396 = 1.0 - _3363;
                                float _3406 = (0.5 / (((_3395 * ((_3378 * _3396) + _3363)) + 9.9999999392252902907785028219223e-09) + (((_3395 * _3396) + _3363) * _3378))) * _3395;
                                float _4483 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                                float _3416 = (_3341 * _3318) * (((_3364 * 3.1415927410125732421875) * (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0)))) / ((_3386 * _3386) * ((_3331 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3342 * _3186.z;
                                frontier_phi_85_pred_1 = _3342 * _3186.y;
                                frontier_phi_85_pred_2 = _3342 * _3186.x;
                                frontier_phi_85_pred_3 = _3416 * _3198.z;
                                frontier_phi_85_pred_4 = _3416 * _3198.y;
                                frontier_phi_85_pred_5 = _3416 * _3198.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3425 = frontier_phi_85_pred;
                            _3424 = frontier_phi_85_pred_1;
                            _3423 = frontier_phi_85_pred_2;
                            _3422 = frontier_phi_85_pred_3;
                            _3421 = frontier_phi_85_pred_4;
                            _3420 = frontier_phi_85_pred_5;
                            _3128 = _3423 + _3141;
                            _3129 = _3424 + _3142;
                            _3130 = _3425 + _3143;
                            _3125 = _3420 + _3138;
                            _3126 = _3421 + _3139;
                            _3127 = _3422 + _3140;
                            if (_3145 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3138 = _3125;
                                _3139 = _3126;
                                _3140 = _3127;
                                _3141 = _3128;
                                _3142 = _3129;
                                _3143 = _3130;
                                _3144 = _3145;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3130;
                        frontier_phi_79_pred_1 = _3129;
                        frontier_phi_79_pred_2 = _3128;
                        frontier_phi_79_pred_3 = _3127;
                        frontier_phi_79_pred_4 = _3126;
                        frontier_phi_79_pred_5 = _3125;
                    }
                    _2767 = frontier_phi_79_pred;
                    _2765 = frontier_phi_79_pred_1;
                    _2763 = frontier_phi_79_pred_2;
                    _2761 = frontier_phi_79_pred_3;
                    _2759 = frontier_phi_79_pred_4;
                    _2757 = frontier_phi_79_pred_5;
                    uint _2923 = _2922 + 1u;
                    if (_2923 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2916 = _2757;
                        _2917 = _2759;
                        _2918 = _2761;
                        _2919 = _2763;
                        _2920 = _2765;
                        _2921 = _2767;
                        _2922 = _2923;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2763;
                frontier_phi_60_61_ladder_1 = _2767;
                frontier_phi_60_61_ladder_2 = _2765;
                frontier_phi_60_61_ladder_3 = _2761;
                frontier_phi_60_61_ladder_4 = _2759;
                frontier_phi_60_61_ladder_5 = _2757;
            }
            else
            {
                frontier_phi_60_61_ladder = _2642;
                frontier_phi_60_61_ladder_1 = _2646;
                frontier_phi_60_61_ladder_2 = _2644;
                frontier_phi_60_61_ladder_3 = _2640;
                frontier_phi_60_61_ladder_4 = _2638;
                frontier_phi_60_61_ladder_5 = _2636;
            }
            _2756 = frontier_phi_60_61_ladder_5;
            _2758 = frontier_phi_60_61_ladder_4;
            _2760 = frontier_phi_60_61_ladder_3;
            _2762 = frontier_phi_60_61_ladder;
            _2764 = frontier_phi_60_61_ladder_2;
            _2766 = frontier_phi_60_61_ladder_1;
        }
        float _2771 = isnan(1.0) ? _777 : (isnan(_777) ? 1.0 : min(_777, 1.0));
        _2543 = (_2771 * _2762) + _1980;
        _2545 = (_2771 * _2764) + _1982;
        _2547 = (_2771 * _2766) + _1984;
        _2549 = ((_2756 * _763) * _2771) + _2325;
        _2551 = ((_2758 * _764) * _2771) + _2327;
        _2553 = ((_2760 * _765) * _2771) + _2329;
    }
    else
    {
        _2543 = _1980;
        _2545 = _1982;
        _2547 = _1984;
        _2549 = _2325;
        _2551 = _2327;
        _2553 = _2329;
    }
    float _4499 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _4510 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _4521 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _4532 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _2571 = ((isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_2543 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _777))) + ((_2549 + ((isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))) * _1614)) * cbPerFrame._m0[3u].x);
    float _2572 = ((isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (_2545 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _777))) + ((_2551 + ((isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))) * _1614)) * cbPerFrame._m0[3u].x);
    float _2573 = ((isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (_2547 + ((isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))) * _777))) + ((_2553 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1614)) * cbPerFrame._m0[3u].x);
    float _2574 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2575 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
    float _2576 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
    float _2581 = cbInstanceData._m0[_669 + 6u].w * (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0)));
    float _2586 = _566 / cbSceneParam._m0[86u].x;
    float _2587 = _567 / cbSceneParam._m0[86u].y;
    vec4 _2601 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2586, _2587, (log2((isnan(cbSceneParam._m0[77u].w) ? _488 : (isnan(_488) ? cbSceneParam._m0[77u].w : min(_488, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2603 = _2601.x;
    float _2604 = _2601.y;
    float _2605 = _2601.z;
    float _2606 = _2601.w;
    float _2698;
    float _2700;
    float _2702;
    float _2704;
    if (_488 > cbSceneParam._m0[78u].w)
    {
        float _2661 = isnan(_488) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _488 : min(cbSceneParam._m0[80u].w, _488));
        float _2662 = _2661 / _488;
        float _2673 = _2662 * _539;
        float _2674 = _540 * _2662;
        float _2675 = (-0.0) - _2674;
        float _2676 = _2662 * _541;
        float _2678 = (cbSceneParam._m0[77u].w * _2675) / _2661;
        float _2679 = _2678 + cbSceneParam._m0[79u].w;
        float _2680 = cbSceneParam._m0[79u].w - _2674;
        float _2686 = sqrt(((_2673 * _2673) + (_2674 * _2674)) + (_2676 * _2676));
        float _2689 = (1.0 - (cbSceneParam._m0[77u].w / _2661)) * _2686;
        float _2694 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2696 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2873;
        if (abs((_2675 - _2678) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2873 = ((((_2679 > 0.0) ? exp2(_2694 * _2679) : (2.0 - exp2(_2696 * _2679))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2689;
        }
        else
        {
            float _2817 = 1.0 / cbSceneParam._m0[80u].x;
            float _2818 = isnan(_2680) ? _2679 : (isnan(_2679) ? _2680 : max(_2679, _2680));
            float _2819 = isnan(_2680) ? _2679 : (isnan(_2679) ? _2680 : min(_2679, _2680));
            float _2828 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : min(_2818, 0.0));
            float _2829 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : min(_2819, 0.0));
            _2873 = ((abs(_2686 / _2675) * cbSceneParam._m0[80u].y) * ((((_2828 - _2829) * 2.0) - ((exp2(_2694 * (isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0)))) - exp2(_2694 * (isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0))))) * _2817)) - ((exp2(_2696 * _2828) - exp2(_2696 * _2829)) * _2817))) + (_2689 * cbSceneParam._m0[80u].z);
        }
        vec4 _2875 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2586, _2587, 1.0), 0.0);
        float _2884 = exp2((_2873 * (-1.44269502162933349609375)) * (1.0 - _2875.w));
        float _2885 = log2(_2884);
        float _2901 = log2(_2606);
        _2698 = (exp2(_2901 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2885 * cbSceneParam._m0[78u].x)) * _2875.x) / cbSceneParam._m0[78u].x)) + _2603;
        _2700 = (exp2(_2901 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2885 * cbSceneParam._m0[78u].y)) * _2875.y) / cbSceneParam._m0[78u].y)) + _2604;
        _2702 = (exp2(_2901 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2885 * cbSceneParam._m0[78u].z)) * _2875.z) / cbSceneParam._m0[78u].z)) + _2605;
        _2704 = _2884 * _2606;
    }
    else
    {
        _2698 = _2603;
        _2700 = _2604;
        _2702 = _2605;
        _2704 = _2606;
    }
    bool _2911;
    vec4 _2714;
    vec4 _2736;
    float _2738;
    float _2742;
    float _2743;
    float _2744;
    float _2745;
    bool _2755;
    for (;;)
    {
        _2714 = cbMatDynParam._m0[0u];
        float _2716 = roundEven(_2714.y);
        bool _2717 = _2716 == 3.0;
        float _2718 = log2(_2704);
        float _2725 = exp2(_2718 * cbSceneParam._m0[78u].x) * _2574;
        float _2726 = exp2(_2718 * cbSceneParam._m0[78u].y) * _2575;
        float _2727 = exp2(_2718 * cbSceneParam._m0[78u].z) * _2576;
        float _2734 = _555 + (-0.5);
        _2736 = cbMtdParam._m0[1u];
        _2738 = _2736.y * _2734;
        float _2741 = (_2716 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2742 = _2741 * (_2717 ? _2725 : (_2725 + (cbSceneParam._m0[72u].w * _2698)));
        _2743 = _2741 * (_2717 ? _2726 : (_2726 + (cbSceneParam._m0[72u].w * _2700)));
        _2744 = _2741 * (_2717 ? _2727 : (_2727 + (cbSceneParam._m0[72u].w * _2702)));
        _2745 = _2734 * 0.999000012874603271484375;
        _2755 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2755)
        {
            if ((cbInstanceData._m0[_669 + 7u].x + _2745) < 0.5)
            {
                _2911 = true;
                break;
            }
        }
        uint _2852 = _670 + uint(_2714.w);
        if ((cbInstanceData._m0[_2852].w < 1.0) && ((cbInstanceData._m0[_2852].w + _2745) < 0.5))
        {
            _2911 = true;
            break;
        }
        if ((_2738 + _346) < _2736.x)
        {
            _2911 = true;
            break;
        }
        _2911 = false;
        break;
    }
    float _3116;
    if (_2911)
    {
        discard_state = true;
        _3116 = 0.0;
    }
    else
    {
        _3116 = _2581;
    }
    SV_Target.x = _2742;
    SV_Target.y = _2743;
    SV_Target.z = _2744;
    SV_Target.w = _3116;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2581;
    discard_exit();
}


