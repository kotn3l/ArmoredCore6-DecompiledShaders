#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1323;
float _3711;
float _3712;
float _3713;
float _3714;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238;
    float _239;
    float _240;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
    }
    else
    {
        _238 = _224;
        _239 = _225;
        _240 = _226;
    }
    vec4 _254 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _259 = _254.z;
    float _260 = _254.w;
    float _266 = exp2(log2(_259 * 22.0) * 260.0);
    float _267 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _268 = isnan(1.0) ? _267 : (isnan(_267) ? 1.0 : min(_267, 1.0));
    vec4 _282 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _293 = cbMtdParam._m0[10u].x * _282.x;
    float _294 = cbMtdParam._m0[10u].y * _282.y;
    float _295 = cbMtdParam._m0[10u].z * _282.z;
    vec4 _307 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _323 = exp2(log2(1.0 - _260) * 8.0);
    vec4 _335 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _351 = exp2(log2(_260) * 8.0);
    vec4 _364 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    vec4 _389 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _411 = (((((_307.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _389.x) - _293) * _268) + _293;
    float _412 = (((((_307.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _389.y) - _294) * _268) + _294;
    float _413 = (((((_307.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _389.z) - _295) * _268) + _295;
    float _420 = (((cbMtdParam._m0[12u].x * _335.x) - _411) * _323) + _411;
    float _421 = (((cbMtdParam._m0[12u].y * _335.y) - _412) * _323) + _412;
    float _422 = (((cbMtdParam._m0[12u].z * _335.z) - _413) * _323) + _413;
    float _429 = (((cbMtdParam._m0[11u].x * _364.x) - _420) * _351) + _420;
    float _430 = (((cbMtdParam._m0[11u].y * _364.y) - _421) * _351) + _421;
    float _431 = (((cbMtdParam._m0[11u].z * _364.z) - _422) * _351) + _422;
    float _432 = _389.w * _307.w;
    float _461 = (((texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _268) + cbMtdParam._m0[15u].y;
    float _464 = ((cbMtdParam._m0[14u].y - _461) * _323) + _461;
    float _467 = ((cbMtdParam._m0[15u].x - _464) * _351) + _464;
    vec4 _480 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _482 = _480.x;
    float _483 = _480.y;
    float _489 = cbMtdParam._m0[13u].y + _480.z;
    vec4 _501 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _520 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _537 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _548 = ((((_259 * 2.0) * (cbMtdParam._m0[13u].x + _501.z)) - _489) * _268) + _489;
    float _552 = (((_520.z - _548) + cbMtdParam._m0[14u].x) * _323) + _548;
    float _556 = (((_537.z - _552) + cbMtdParam._m0[13u].w) * _351) + _552;
    float _560 = (_254.x * 2.0) + (-1.0);
    float _562 = (_254.y * 2.0) + (-1.0);
    float _563 = dot(vec2(_560, _562), vec2(_560, _562));
    float _3733 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _568 = sqrt(1.0 - (isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))));
    float _573 = ((_501.x - _482) * _268) + _482;
    float _574 = ((_501.y - _483) * _268) + _483;
    float _579 = ((_520.x - _573) * _323) + _573;
    float _580 = ((_520.y - _574) * _323) + _574;
    float _593 = ((((((_537.x - _579) * _351) + _579) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _560;
    float _594 = ((((((_537.y - _580) * _351) + _580) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _562;
    float _597 = fma(_568, _238, fma(_594, _230 * TANGENT.x, (_216 * _208) * _593));
    float _600 = fma(_568, _239, fma(_594, _230 * TANGENT.y, (_216 * _209) * _593));
    float _603 = fma(_568, _240, fma(_594, _230 * TANGENT.z, (_216 * _210) * _593));
    float _607 = inversesqrt(dot(vec3(_597, _600, _603), vec3(_597, _600, _603)));
    float _608 = _607 * _597;
    float _609 = _607 * _600;
    float _610 = _607 * _603;
    float _3744 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _611 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
    float _3755 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _612 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _3766 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _613 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _3777 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _614 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _3788 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _615 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _3799 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _616 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _632 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _672 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _682 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _672);
    float _683 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _672);
    float _684 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _672);
    float _688 = inversesqrt(dot(vec3(_682, _683, _684), vec3(_682, _683, _684)));
    float _689 = _682 * _688;
    float _690 = _683 * _688;
    float _691 = _684 * _688;
    vec4 _696 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _698 = _696.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1002 = sqrt(((_682 * _682) + (_683 * _683)) + (_684 * _684));
        float _1008 = (cbMatDynParam._m0[5u].x * _1002) + cbMatDynParam._m0[5u].y;
        float _3810 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1013 = (cbMatDynParam._m0[5u].z * _1002) + cbMatDynParam._m0[5u].w;
        float _3821 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) - _1009)) + _1009) < ((_698 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _709 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _710 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _712 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _714 = _712.w;
    float _732 = fma(_610, cbSceneParam._m0[5u].z, fma(_609, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _608));
    float _735 = fma(_610, cbSceneParam._m0[6u].z, fma(_609, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _608));
    float _738 = fma(_610, cbSceneParam._m0[7u].z, fma(_609, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _608));
    vec4 _740 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _742 = _740.x;
    float _754 = (((_740.y - _612) + (_740.w * _612)) * cbMtdParam._m0[3u].x) + _612;
    vec4 _755 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _771 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_742 * _742)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _755.z;
    float _779 = (((cbMatDynParam._m0[15u].x - _616) * cbMatDynParam._m0[15u].w) * _771) + _616;
    float _787 = ((_771 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _754)) + _754;
    uint _811 = uint(roundEven(NORMAL.w)) * 13u;
    uint _812 = _811 + 9u;
    uint _813 = _812 + uint(cbMatDynParam._m0[0u].w);
    float _819 = (cbMtdParam._m0[0u].x * _613) * cbInstanceData._m0[_813].x;
    float _820 = (cbMtdParam._m0[0u].y * _614) * cbInstanceData._m0[_813].y;
    float _821 = (cbMtdParam._m0[0u].z * _615) * cbInstanceData._m0[_813].z;
    float _3832 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _822 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _3843 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _823 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _3854 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _824 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    vec4 _825 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _830 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _841 = (((_830.x - _779) + (_830.w * _779)) * cbMtdParam._m0[3u].x) + _779;
    float _854 = (cbMtdParam._m0[3u].x * (((_822 * _714) - _822) + _825.x)) + _822;
    float _855 = (cbMtdParam._m0[3u].x * (((_823 * _714) - _823) + _825.y)) + _823;
    float _856 = (cbMtdParam._m0[3u].x * (((_824 * _714) - _824) + _825.z)) + _824;
    float _870 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_779 * (_613 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_779 * (_614 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_779 * (_615 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _874 = _870 * cbMatDynParam._m0[13u].w;
    float _884 = (_874 * (cbMatDynParam._m0[13u].x - _854)) + _854;
    float _885 = (_874 * (cbMatDynParam._m0[13u].y - _855)) + _855;
    float _886 = (_874 * (cbMatDynParam._m0[13u].z - _856)) + _856;
    float _894 = ((_870 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _841)) + _841;
    float _895 = 1.0 - _894;
    float _896 = _895 * _884;
    float _897 = _895 * _885;
    float _898 = _895 * _886;
    float _902 = (_884 + (-0.039999999105930328369140625)) * _894;
    float _903 = (_885 + (-0.039999999105930328369140625)) * _894;
    float _904 = (_886 + (-0.039999999105930328369140625)) * _894;
    float _905 = _902 + 0.039999999105930328369140625;
    float _906 = _903 + 0.039999999105930328369140625;
    float _907 = _904 + 0.039999999105930328369140625;
    vec4 _916 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _709, cbSceneParam._m0[86u].y * _710));
    float _919 = _916.x * TEXCOORD_4;
    float _920 = dot(vec3(_608, _609, _610), vec3(_689, _690, _691));
    float _923 = _920 * 2.0;
    float _927 = (_923 * _608) - _689;
    float _928 = (_923 * _609) - _690;
    float _929 = (_923 * _610) - _691;
    float _933 = abs(dot(vec3(_689, _690, _691), vec3(_608, _609, _610)));
    float _3865 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _935 = sqrt(_787);
    float _948 = exp2((_935 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_935 * 3.0));
    float _954 = (1.0 - _948) * ((_935 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _955 = _948 * _935;
    float _983 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _987 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _991 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1322;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1047 = fma(_991, cbModelParam._m0[26u].z, fma(_987, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _983));
        float _1051 = fma(_991, cbModelParam._m0[27u].z, fma(_987, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _983));
        float _1055 = fma(_991, cbModelParam._m0[28u].z, fma(_987, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _983));
        float _1080 = _983 + _608;
        float _1081 = _987 + _609;
        float _1082 = _991 + _610;
        float _1092 = fma(_1082, cbModelParam._m0[26u].z, fma(_1081, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1080)) - _1047;
        float _1093 = fma(_1082, cbModelParam._m0[27u].z, fma(_1081, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1080)) - _1051;
        float _1094 = fma(_1082, cbModelParam._m0[28u].z, fma(_1081, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1080)) - _1055;
        float _1098 = inversesqrt(dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094)));
        float _1111 = ((_1098 * _1092) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1047 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1112 = ((_1098 * _1093) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1051 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1113 = ((_1098 * _1094) / cbModelParam._m0[34u].z) + ((((((_1055 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        float _1150 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1116.x + (-0.5));
        float _1152 = _1150 * (_1116.y + (-0.5));
        float _1153 = _1150 * (_1116.z + (-0.5));
        float _1160 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1123.x + (-0.5));
        float _1162 = _1160 * (_1123.y + (-0.5));
        float _1163 = _1160 * (_1123.z + (-0.5));
        float _1170 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1130.x + (-0.5));
        float _1172 = _1170 * (_1130.y + (-0.5));
        float _1173 = _1170 * (_1130.z + (-0.5));
        float _1180 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1137.x + (-0.5));
        float _1182 = _1180 * (_1137.y + (-0.5));
        float _1183 = _1180 * (_1137.z + (-0.5));
        float _1184 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1185 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1186 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1187 = _1151 * 0.5;
        float _1188 = _1161 * 0.5;
        float _1189 = _1171 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1204 = (dot(vec3(_608, _609, _610), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _3891 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1214 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1184 + 9.9999997473787516355514526367188e-06);
        float _3902 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _3913 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1216 + 1.0))) + _1221) * _1184;
        float _1231 = _1152 * 0.5;
        float _1232 = _1162 * 0.5;
        float _1233 = _1172 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1247 = (dot(vec3(_608, _609, _610), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _3924 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1256 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1185 + 9.9999997473787516355514526367188e-06);
        float _3935 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _3946 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1258 + 1.0))) + _1263) * _1185;
        float _1273 = _1153 * 0.5;
        float _1274 = _1163 * 0.5;
        float _1275 = _1173 * 0.5;
        float _1276 = dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275));
        float _1281 = (_1276 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1276);
        float _1289 = (dot(vec3(_608, _609, _610), vec3(_1281 * _1273, _1281 * _1274, _1281 * _1275)) + 1.0) * 0.5;
        float _3957 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1298 = sqrt(((_1274 * _1274) + (_1273 * _1273)) + (_1275 * _1275)) / (_1186 + 9.9999997473787516355514526367188e-06);
        float _3968 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _3979 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1300 + 1.0))) + _1305) * _1186;
        _1322 = _1153;
        _1324 = _1152;
        _1325 = _1151;
        _1326 = _1163;
        _1327 = _1162;
        _1328 = _1161;
        _1329 = _1173;
        _1330 = _1172;
        _1331 = _1171;
        _1332 = _1186;
        _1333 = _1185;
        _1334 = _1184;
        _1335 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
        _1336 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
        _1337 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
    }
    else
    {
        _1322 = _1323;
        _1324 = _1323;
        _1325 = _1323;
        _1326 = _1323;
        _1327 = _1323;
        _1328 = _1323;
        _1329 = _1323;
        _1330 = _1323;
        _1331 = _1323;
        _1332 = _1323;
        _1333 = _1323;
        _1334 = _1323;
        _1335 = 0.0;
        _1336 = 0.0;
        _1337 = 0.0;
    }
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1366 = fma(_991, cbModelParam._m0[30u].z, fma(_987, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _983));
        float _1370 = fma(_991, cbModelParam._m0[31u].z, fma(_987, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _983));
        float _1374 = fma(_991, cbModelParam._m0[32u].z, fma(_987, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _983));
        float _1397 = _983 + _608;
        float _1398 = _987 + _609;
        float _1399 = _991 + _610;
        float _1409 = fma(_1399, cbModelParam._m0[30u].z, fma(_1398, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1397)) - _1366;
        float _1410 = fma(_1399, cbModelParam._m0[31u].z, fma(_1398, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1397)) - _1370;
        float _1411 = fma(_1399, cbModelParam._m0[32u].z, fma(_1398, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1397)) - _1374;
        float _1415 = inversesqrt(dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411)));
        float _1428 = ((_1415 * _1409) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1366 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1429 = ((_1415 * _1410) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1370 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1430 = ((_1415 * _1411) / cbModelParam._m0[35u].z) + ((((((_1374 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        vec4 _1439 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        float _1465 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1432.x + (-0.5));
        float _1467 = _1465 * (_1432.y + (-0.5));
        float _1468 = _1465 * (_1432.z + (-0.5));
        float _1475 = exp2((_1439.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1439.x + (-0.5));
        float _1477 = _1475 * (_1439.y + (-0.5));
        float _1478 = _1475 * (_1439.z + (-0.5));
        float _1485 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1486 = _1485 * (_1446.x + (-0.5));
        float _1487 = _1485 * (_1446.y + (-0.5));
        float _1488 = _1485 * (_1446.z + (-0.5));
        float _1495 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1496 = _1495 * (_1453.x + (-0.5));
        float _1497 = _1495 * (_1453.y + (-0.5));
        float _1498 = _1495 * (_1453.z + (-0.5));
        float _1499 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1500 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1501 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1502 = _1466 * 0.5;
        float _1503 = _1476 * 0.5;
        float _1504 = _1486 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_608, _609, _610), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4020 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1499 + 9.9999997473787516355514526367188e-06);
        float _4031 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4042 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1529 + 1.0))) + _1534) * _1499;
        float _1544 = _1467 * 0.5;
        float _1545 = _1477 * 0.5;
        float _1546 = _1487 * 0.5;
        float _1547 = dot(vec3(_1544, _1545, _1546), vec3(_1544, _1545, _1546));
        float _1552 = (_1547 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1547);
        float _1560 = (dot(vec3(_608, _609, _610), vec3(_1552 * _1544, _1552 * _1545, _1552 * _1546)) + 1.0) * 0.5;
        float _4053 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1569 = sqrt(((_1545 * _1545) + (_1544 * _1544)) + (_1546 * _1546)) / (_1500 + 9.9999997473787516355514526367188e-06);
        float _4064 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1571 = _1570 * 2.0;
        float _1575 = (1.0 - _1570) / (_1570 + 1.0);
        float _4075 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1585 = ((((1.0 - _1576) * (_1571 + 2.0)) * exp2(log2(isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_1571 + 1.0))) + _1576) * _1500;
        float _1586 = _1468 * 0.5;
        float _1587 = _1478 * 0.5;
        float _1588 = _1488 * 0.5;
        float _1589 = dot(vec3(_1586, _1587, _1588), vec3(_1586, _1587, _1588));
        float _1594 = (_1589 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1589);
        float _1602 = (dot(vec3(_608, _609, _610), vec3(_1594 * _1586, _1594 * _1587, _1594 * _1588)) + 1.0) * 0.5;
        float _4086 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1611 = sqrt(((_1587 * _1587) + (_1586 * _1586)) + (_1588 * _1588)) / (_1501 + 9.9999997473787516355514526367188e-06);
        float _4097 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1613 = _1612 * 2.0;
        float _1617 = (1.0 - _1612) / (_1612 + 1.0);
        float _4108 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1627 = ((((1.0 - _1618) * (_1613 + 2.0)) * exp2(log2(isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_1613 + 1.0))) + _1618) * _1501;
        _1635 = _1468;
        _1636 = _1467;
        _1637 = _1466;
        _1638 = _1478;
        _1639 = _1477;
        _1640 = _1476;
        _1641 = _1488;
        _1642 = _1487;
        _1643 = _1486;
        _1644 = _1501;
        _1645 = _1500;
        _1646 = _1499;
        _1647 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
        _1648 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)));
        _1649 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)));
    }
    else
    {
        _1635 = _1323;
        _1636 = _1323;
        _1637 = _1323;
        _1638 = _1323;
        _1639 = _1323;
        _1640 = _1323;
        _1641 = _1323;
        _1642 = _1323;
        _1643 = _1323;
        _1644 = _1323;
        _1645 = _1323;
        _1646 = _1323;
        _1647 = 0.0;
        _1648 = 0.0;
        _1649 = 0.0;
    }
    float _1659 = (cbModelParam._m0[1u].x * (_1647 - _1335)) + _1335;
    float _1660 = (cbModelParam._m0[1u].x * (_1648 - _1336)) + _1336;
    float _1661 = (cbModelParam._m0[1u].x * (_1649 - _1337)) + _1337;
    float _1682 = fma(_1661, cbSceneParam._m0[89u].z, fma(_1660, cbSceneParam._m0[89u].y, _1659 * cbSceneParam._m0[89u].x));
    float _1685 = fma(_1661, cbSceneParam._m0[90u].z, fma(_1660, cbSceneParam._m0[90u].y, _1659 * cbSceneParam._m0[90u].x));
    float _1688 = fma(_1661, cbSceneParam._m0[91u].z, fma(_1660, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1659));
    float _1703 = _927 * 0.5;
    float _1704 = _928 * 0.5;
    float _1705 = _929 * 0.5;
    float _1706 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1637, _1640, _1643, _1646));
    float _1709 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1636, _1639, _1642, _1645));
    float _1712 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1635, _1638, _1641, _1644));
    float _1743;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1719 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1322, _1326, _1329, _1332));
        float _1723 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1324, _1327, _1330, _1333));
        float _1727 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1325, _1328, _1331, _1334));
        float _1734 = dot(vec4(cbModelParam._m0[39u]), vec4(_1703, _1704, _1705, 1.0));
        _1743 = dot(vec3(isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)), isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)), isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1734) ? 0.0 : (isnan(0.0) ? _1734 : max(0.0, _1734))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1743 = 1.0;
    }
    float _1754;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1745 = dot(vec4(cbModelParam._m0[40u]), vec4(_1703, _1704, _1705, 1.0));
        _1754 = dot(vec3(isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)), isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)), isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1745) ? 0.0 : (isnan(0.0) ? _1745 : max(0.0, _1745))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1754 = 1.0;
    }
    float _1758 = (_1754 * cbModelParam._m0[1u].x) + (_1743 * (1.0 - cbModelParam._m0[1u].x));
    float _1768 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _787);
    float _1769 = isnan(_1768) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1768 : min(cbModelParam._m0[25u].z, _1768));
    float _1849;
    float _1851;
    float _1853;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1816 = fma(_991, cbModelParam._m0[13u].z, fma(_987, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _983)) + cbModelParam._m0[13u].w;
        float _1820 = fma(_991, cbModelParam._m0[14u].z, fma(_987, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _983)) + cbModelParam._m0[14u].w;
        float _1824 = fma(_991, cbModelParam._m0[15u].z, fma(_987, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _983)) + cbModelParam._m0[15u].w;
        float _1827 = fma(_929, cbModelParam._m0[13u].z, fma(_928, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _927));
        float _1830 = fma(_929, cbModelParam._m0[14u].z, fma(_928, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _927));
        float _1833 = fma(_929, cbModelParam._m0[15u].z, fma(_928, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _927));
        float _1861;
        if (_1827 > 0.0)
        {
            _1861 = abs((1.0 - _1816) / _1827);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1816 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1861 = frontier_phi_19_17_ladder;
        }
        float _2067;
        if (_1830 > 0.0)
        {
            _2067 = abs((1.0 - _1820) / _1830);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1820 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2067 = frontier_phi_28_24_ladder;
        }
        float _2321;
        if (_1833 > 0.0)
        {
            _2321 = abs((1.0 - _1824) / _1833);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1824 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2321 = frontier_phi_40_35_ladder;
        }
        float _2323 = isnan(_2067) ? _1861 : (isnan(_1861) ? _2067 : min(_1861, _2067));
        float _2324 = isnan(_2321) ? _2323 : (isnan(_2323) ? _2321 : min(_2323, _2321));
        float _2328 = (_2324 * _1827) + _1816;
        float _2329 = (_2324 * _1830) + _1820;
        float _2330 = (_2324 * _1833) + _1824;
        float _2331 = _2324 * 9.9999997473787516355514526367188e-05;
        float _2333 = (-1.0) - _2331;
        float _2335 = _2331 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2330 > _2335) || ((_2330 < _2333) || ((_2329 > _2335) || ((_2329 < _2333) || ((_2328 < _2333) || (_2328 > _2335))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2458 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2330, cbModelParam._m0[9u].z, fma(_2329, cbModelParam._m0[9u].y, _2328 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2330, cbModelParam._m0[10u].z, fma(_2329, cbModelParam._m0[10u].y, _2328 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2330, cbModelParam._m0[11u].z, fma(_2329, cbModelParam._m0[11u].y, _2328 * cbModelParam._m0[11u].x))), _1769);
            frontier_phi_18_40_ladder = _2458.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2458.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2458.x * cbModelParam._m0[1u].y;
        }
        _1849 = frontier_phi_18_40_ladder_2;
        _1851 = frontier_phi_18_40_ladder_1;
        _1853 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1837 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_927, _928, _929), _1769);
        _1849 = _1837.x * cbModelParam._m0[1u].y;
        _1851 = _1837.y * cbModelParam._m0[1u].y;
        _1853 = _1837.z * cbModelParam._m0[1u].y;
    }
    float _1857 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _787);
    float _1858 = isnan(_1857) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1857 : min(cbModelParam._m0[25u].w, _1857));
    float _1951;
    float _1953;
    float _1955;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1915 = fma(_991, cbModelParam._m0[21u].z, fma(_987, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _983)) + cbModelParam._m0[21u].w;
        float _1919 = fma(_991, cbModelParam._m0[22u].z, fma(_987, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _983)) + cbModelParam._m0[22u].w;
        float _1923 = fma(_991, cbModelParam._m0[23u].z, fma(_987, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _983)) + cbModelParam._m0[23u].w;
        float _1926 = fma(_929, cbModelParam._m0[21u].z, fma(_928, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _927));
        float _1929 = fma(_929, cbModelParam._m0[22u].z, fma(_928, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _927));
        float _1932 = fma(_929, cbModelParam._m0[23u].z, fma(_928, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _927));
        float _2072;
        if (_1926 > 0.0)
        {
            _2072 = abs((1.0 - _1915) / _1926);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1915 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2072 = frontier_phi_30_26_ladder;
        }
        float _2348;
        if (_1929 > 0.0)
        {
            _2348 = abs((1.0 - _1919) / _1929);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1919 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2348 = frontier_phi_42_37_ladder;
        }
        float _2561;
        if (_1932 > 0.0)
        {
            _2561 = abs((1.0 - _1923) / _1932);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1923 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2561 = frontier_phi_51_48_ladder;
        }
        float _2563 = isnan(_2348) ? _2072 : (isnan(_2072) ? _2348 : min(_2072, _2348));
        float _2564 = isnan(_2561) ? _2563 : (isnan(_2563) ? _2561 : min(_2563, _2561));
        float _2568 = (_2564 * _1926) + _1915;
        float _2569 = (_2564 * _1929) + _1919;
        float _2570 = (_2564 * _1932) + _1923;
        float _2571 = _2564 * 9.9999997473787516355514526367188e-05;
        float _2572 = (-1.0) - _2571;
        float _2574 = _2571 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2570 > _2574) || ((_2570 < _2572) || ((_2569 > _2574) || ((_2569 < _2572) || ((_2568 < _2572) || (_2568 > _2574))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2773 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2570, cbModelParam._m0[17u].z, fma(_2569, cbModelParam._m0[17u].y, _2568 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2570, cbModelParam._m0[18u].z, fma(_2569, cbModelParam._m0[18u].y, _2568 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2570, cbModelParam._m0[19u].z, fma(_2569, cbModelParam._m0[19u].y, _2568 * cbModelParam._m0[19u].x))), _1858);
            frontier_phi_27_51_ladder = _2773.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2773.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2773.x * cbModelParam._m0[1u].z;
        }
        _1951 = frontier_phi_27_51_ladder_2;
        _1953 = frontier_phi_27_51_ladder_1;
        _1955 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1935 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_927, _928, _929), _1858);
        _1951 = _1935.x * cbModelParam._m0[1u].z;
        _1953 = _1935.y * cbModelParam._m0[1u].z;
        _1955 = _1935.z * cbModelParam._m0[1u].z;
    }
    float _1968 = (((_954 * _905) + _955) * _919) * ((cbModelParam._m0[1u].w * (_1951 - _1849)) + _1849);
    float _1970 = (((_954 * _906) + _955) * _919) * ((cbModelParam._m0[1u].w * (_1953 - _1851)) + _1851);
    float _1972 = (((_954 * _907) + _955) * _919) * ((cbModelParam._m0[1u].w * (_1955 - _1853)) + _1853);
    float _1975 = fma(_1972, cbSceneParam._m0[89u].z, fma(_1970, cbSceneParam._m0[89u].y, _1968 * cbSceneParam._m0[89u].x));
    float _1978 = fma(_1972, cbSceneParam._m0[90u].z, fma(_1970, cbSceneParam._m0[90u].y, _1968 * cbSceneParam._m0[90u].x));
    float _1981 = fma(_1972, cbSceneParam._m0[91u].z, fma(_1970, cbSceneParam._m0[91u].y, _1968 * cbSceneParam._m0[91u].x));
    uvec4 _1991 = floatBitsToUint(cbInstanceData._m0[_811 + 5u]);
    uint _1993 = _1991.x * 14u;
    uint _1994 = _1993 + 13u;
    float _2001 = _919 + (-1.0);
    float _2006 = (cbLight._m0[_1994].x * _2001) + 1.0;
    float _2007 = (cbLight._m0[_1994].y * _2001) + 1.0;
    float _2008 = (cbLight._m0[_1994].z * _2001) + 1.0;
    float _2009 = (cbLight._m0[_1994].w * _2001) + 1.0;
    uint _2010 = _1993 + 5u;
    float _2016 = isnan(1.0) ? _2007 : (isnan(_2007) ? 1.0 : min(_2007, 1.0));
    uint _2020 = _1993 + 4u;
    float _2026 = isnan(1.0) ? _2006 : (isnan(_2006) ? 1.0 : min(_2006, 1.0));
    uint _2030 = _1993 | 1u;
    float _2041 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_608, _609, _610));
    float _2044 = dot(vec3(cbLight._m0[_2030].xyz), vec3(_608, _609, _610));
    float _4244 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _4255 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2049 = (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * 0.3183098733425140380859375;
    float _2051 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * 0.3183098733425140380859375;
    float _2058 = ((cbLight._m0[_2010].x * _2016) * _2051) + ((cbLight._m0[_2020].x * _2026) * _2049);
    float _2059 = ((_2016 * cbLight._m0[_2010].y) * _2051) + ((_2026 * cbLight._m0[_2020].y) * _2049);
    float _2060 = ((_2016 * cbLight._m0[_2010].z) * _2051) + ((_2026 * cbLight._m0[_2020].z) * _2049);
    uvec4 _2064 = floatBitsToUint(cbLight._m0[_1993 + 12u]);
    bool _2066 = _2064.x == 0u;
    float _2077;
    float _2079;
    float _2081;
    if (_2066)
    {
        _2077 = _2058;
        _2079 = _2059;
        _2081 = _2060;
    }
    else
    {
        uint _2085 = _1993 + 6u;
        float _2101 = (dot(vec3(cbLight._m0[_1993 + 2u].xyz), vec3(_608, _609, _610)) * 0.5) + 0.5;
        float _2102 = _2101 * _2101;
        float _4266 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2103 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _2104 = isnan(1.0) ? _2008 : (isnan(_2008) ? 1.0 : min(_2008, 1.0));
        _2077 = (((cbLight._m0[_2085].x * 0.3183098733425140380859375) * _2103) * _2104) + _2058;
        _2079 = (((cbLight._m0[_2085].y * 0.3183098733425140380859375) * _2103) * _2104) + _2059;
        _2081 = (((cbLight._m0[_2085].z * 0.3183098733425140380859375) * _2103) * _2104) + _2060;
    }
    bool _2084 = _2064.y == 0u;
    float _2122;
    float _2124;
    float _2126;
    if (_2084)
    {
        _2122 = _2077;
        _2124 = _2079;
        _2126 = _2081;
    }
    else
    {
        uint _2292 = _1993 + 7u;
        float _2308 = (dot(vec3(cbLight._m0[_1993 + 3u].xyz), vec3(_608, _609, _610)) * 0.5) + 0.5;
        float _2309 = _2308 * _2308;
        float _4282 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2310 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _2311 = isnan(1.0) ? _2009 : (isnan(_2009) ? 1.0 : min(_2009, 1.0));
        _2122 = (((cbLight._m0[_2292].x * 0.3183098733425140380859375) * _2310) * _2311) + _2077;
        _2124 = (((cbLight._m0[_2292].y * 0.3183098733425140380859375) * _2310) * _2311) + _2079;
        _2126 = (((cbLight._m0[_2292].z * 0.3183098733425140380859375) * _2310) * _2311) + _2081;
    }
    uint _2129 = _1993 + 8u;
    float _2142 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1993].w)) * _787) * 0.949999988079071044921875);
    float _2143 = _2142 * _2142;
    float _2144 = cbLight._m0[_1993].x + _689;
    float _2145 = cbLight._m0[_1993].y + _690;
    float _2146 = cbLight._m0[_1993].z + _691;
    float _2150 = inversesqrt(dot(vec3(_2144, _2145, _2146), vec3(_2144, _2145, _2146)));
    float _2151 = _2150 * _2144;
    float _2152 = _2150 * _2145;
    float _2153 = _2150 * _2146;
    float _2154 = dot(vec3(_608, _609, _610), vec3(cbLight._m0[_1993].xyz));
    float _4298 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2157 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
    float _4309 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _2158 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _2159 = dot(vec3(_608, _609, _610), vec3(_2151, _2152, _2153));
    float _4320 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2162 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _2163 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_2151, _2152, _2153));
    float _4331 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2167 = _2143 * _2143;
    float _2171 = ((_2162 * _2162) * (_2167 + (-1.0))) + 1.0;
    float _2179 = exp2(log2(1.0 - (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0)))) * 5.0);
    float _2180 = 0.959999978542327880859375 - _902;
    float _2182 = 0.959999978542327880859375 - _903;
    float _2183 = 0.959999978542327880859375 - _904;
    float _2190 = 1.0 - _2143;
    float _2201 = (0.5 / (((_2158 * ((_2157 * _2190) + _2143)) + 9.9999999392252902907785028219223e-09) + (((_2158 * _2190) + _2143) * _2157))) * _2157;
    float _4342 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2203 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_2167 / ((_2171 * _2171) * 3.141590118408203125));
    uint _2214 = _1993 + 9u;
    float _2225 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2030].w)) * _787) * 0.949999988079071044921875);
    float _2226 = _2225 * _2225;
    float _2227 = cbLight._m0[_2030].x + _689;
    float _2228 = cbLight._m0[_2030].y + _690;
    float _2229 = cbLight._m0[_2030].z + _691;
    float _2233 = inversesqrt(dot(vec3(_2227, _2228, _2229), vec3(_2227, _2228, _2229)));
    float _2234 = _2233 * _2227;
    float _2235 = _2233 * _2228;
    float _2236 = _2233 * _2229;
    float _2237 = dot(vec3(_608, _609, _610), vec3(cbLight._m0[_2030].xyz));
    float _4353 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2240 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
    float _2241 = dot(vec3(_608, _609, _610), vec3(_2234, _2235, _2236));
    float _4364 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2244 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
    float _2245 = dot(vec3(cbLight._m0[_2030].xyz), vec3(_2234, _2235, _2236));
    float _4375 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2249 = _2226 * _2226;
    float _2253 = ((_2244 * _2244) * (_2249 + (-1.0))) + 1.0;
    float _2260 = exp2(log2(1.0 - (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0)))) * 5.0);
    float _2267 = 1.0 - _2226;
    float _2277 = (0.5 / (((_2158 * ((_2240 * _2267) + _2226)) + 9.9999999392252902907785028219223e-09) + (((_2158 * _2267) + _2226) * _2240))) * _2240;
    float _4386 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2279 = (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_2249 / ((_2253 * _2253) * 3.141590118408203125));
    float _2289 = (((((_2260 * _2180) + _905) * cbLight._m0[_2214].x) * _2279) * _2016) + (((((_2179 * _2180) + _905) * cbLight._m0[_2129].x) * _2203) * _2026);
    float _2290 = (((((_2260 * _2182) + _906) * cbLight._m0[_2214].y) * _2279) * _2016) + (((((_2179 * _2182) + _906) * cbLight._m0[_2129].y) * _2203) * _2026);
    float _2291 = (((((_2260 * _2183) + _907) * cbLight._m0[_2214].z) * _2279) * _2016) + (((((_2179 * _2183) + _907) * cbLight._m0[_2129].z) * _2203) * _2026);
    float _2353;
    float _2355;
    float _2357;
    if (_2066)
    {
        _2353 = _2289;
        _2355 = _2290;
        _2357 = _2291;
    }
    else
    {
        uint _2359 = _1993 + 2u;
        uint _2363 = _1993 + 10u;
        float _2377 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2359].w)) * _787) * 0.949999988079071044921875);
        float _2378 = _2377 * _2377;
        float _2379 = cbLight._m0[_2359].x + _689;
        float _2380 = cbLight._m0[_2359].y + _690;
        float _2381 = cbLight._m0[_2359].z + _691;
        float _2385 = inversesqrt(dot(vec3(_2379, _2380, _2381), vec3(_2379, _2380, _2381)));
        float _2386 = _2385 * _2379;
        float _2387 = _2385 * _2380;
        float _2388 = _2385 * _2381;
        float _2389 = dot(vec3(_608, _609, _610), vec3(cbLight._m0[_2359].xyz));
        float _4397 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2392 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _2393 = dot(vec3(_608, _609, _610), vec3(_2386, _2387, _2388));
        float _4408 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2396 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2397 = dot(vec3(cbLight._m0[_2359].xyz), vec3(_2386, _2387, _2388));
        float _4419 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2401 = _2378 * _2378;
        float _2405 = ((_2396 * _2396) * (_2401 + (-1.0))) + 1.0;
        float _2412 = exp2(log2(1.0 - (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0)))) * 5.0);
        float _2419 = 1.0 - _2378;
        float _2429 = (0.5 / (((_2158 * ((_2392 * _2419) + _2378)) + 9.9999999392252902907785028219223e-09) + (((_2158 * _2419) + _2378) * _2392))) * _2392;
        float _4430 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2431 = (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_2401 / ((_2405 * _2405) * 3.141590118408203125));
        float _2432 = isnan(1.0) ? _2008 : (isnan(_2008) ? 1.0 : min(_2008, 1.0));
        _2353 = (((((_2412 * _2180) + _905) * cbLight._m0[_2363].x) * _2431) * _2432) + _2289;
        _2355 = (((((_2412 * _2182) + _906) * cbLight._m0[_2363].y) * _2431) * _2432) + _2290;
        _2357 = (((((_2412 * _2183) + _907) * cbLight._m0[_2363].z) * _2431) * _2432) + _2291;
    }
    float _2467;
    float _2469;
    float _2471;
    if (_2084)
    {
        _2467 = _2353;
        _2469 = _2355;
        _2471 = _2357;
    }
    else
    {
        uint _2478 = _1993 + 3u;
        uint _2482 = _1993 + 11u;
        float _2496 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2478].w)) * _787) * 0.949999988079071044921875);
        float _2497 = _2496 * _2496;
        float _2498 = cbLight._m0[_2478].x + _689;
        float _2499 = cbLight._m0[_2478].y + _690;
        float _2500 = cbLight._m0[_2478].z + _691;
        float _2504 = inversesqrt(dot(vec3(_2498, _2499, _2500), vec3(_2498, _2499, _2500)));
        float _2505 = _2504 * _2498;
        float _2506 = _2504 * _2499;
        float _2507 = _2504 * _2500;
        float _2508 = dot(vec3(_608, _609, _610), vec3(cbLight._m0[_2478].xyz));
        float _4446 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2511 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _2512 = dot(vec3(_608, _609, _610), vec3(_2505, _2506, _2507));
        float _4457 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2515 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _2516 = dot(vec3(cbLight._m0[_2478].xyz), vec3(_2505, _2506, _2507));
        float _4468 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2520 = _2497 * _2497;
        float _2524 = ((_2515 * _2515) * (_2520 + (-1.0))) + 1.0;
        float _2531 = exp2(log2(1.0 - (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0)))) * 5.0);
        float _2538 = 1.0 - _2497;
        float _2548 = (0.5 / (((_2158 * ((_2511 * _2538) + _2497)) + 9.9999999392252902907785028219223e-09) + (((_2158 * _2538) + _2497) * _2511))) * _2511;
        float _4479 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2550 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_2520 / ((_2524 * _2524) * 3.141590118408203125));
        float _2551 = isnan(1.0) ? _2009 : (isnan(_2009) ? 1.0 : min(_2009, 1.0));
        _2467 = (((((_2531 * _2180) + _905) * cbLight._m0[_2482].x) * _2550) * _2551) + _2353;
        _2469 = (((((_2531 * _2182) + _906) * cbLight._m0[_2482].y) * _2550) * _2551) + _2355;
        _2471 = (((((_2531 * _2183) + _907) * cbLight._m0[_2482].z) * _2550) * _2551) + _2357;
    }
    float _2685;
    float _2687;
    float _2689;
    float _2691;
    float _2693;
    float _2695;
    if (_1991.y == 0u)
    {
        float _2626 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2627 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2626;
        float _2628 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2626;
        float _2629 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2626;
        uvec4 _2641 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2642 = _2641.x;
        uint _2653 = uint((float(_2641.y) * floor(float(uint(cbSceneParam._m0[85u].y * _710) / _2642))) + floor(float(uint(cbSceneParam._m0[85u].x * _709) / _2642)));
        float _2663 = (log2(_2629 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2664 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        uint _2667 = uint(isnan(14.0) ? _2664 : (isnan(_2664) ? 14.0 : min(_2664, 14.0)));
        uvec4 _2672 = texelFetch(g_lightClusterGridBuffer, int(((_2667 << 2u) + (_2653 << 6u)) >> 2u));
        uint _2673 = _2672.x;
        uint _2674 = _2641.z;
        float _2778;
        float _2780;
        float _2782;
        float _2784;
        float _2786;
        float _2788;
        if (((((1u << ((_2674 >> 4u) & 15u)) + 4294967295u) & _2673) == 0u) || ((_2674 & 240u) == 0u))
        {
            _2778 = 0.0;
            _2780 = 0.0;
            _2782 = 0.0;
            _2784 = 0.0;
            _2786 = 0.0;
            _2788 = 0.0;
        }
        else
        {
            float _2779;
            float _2781;
            float _2783;
            float _2785;
            float _2787;
            float _2789;
            float _2930 = 0.0;
            float _2931 = 0.0;
            float _2932 = 0.0;
            float _2933 = 0.0;
            float _2934 = 0.0;
            float _2935 = 0.0;
            uint _2936 = 0u;
            uint _2945;
            bool _2946;
            for (;;)
            {
                _2945 = texelFetch(g_lightClassification, int((((_2667 << 5u) + (_2653 << 9u)) + (_2936 << 2u)) >> 2u)).x;
                _2946 = _2945 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2946)
                {
                    frontier_phi_68_pred = _2932;
                    frontier_phi_68_pred_1 = _2935;
                    frontier_phi_68_pred_2 = _2934;
                    frontier_phi_68_pred_3 = _2933;
                    frontier_phi_68_pred_4 = _2931;
                    frontier_phi_68_pred_5 = _2930;
                }
                else
                {
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    uint _3081;
                    _3075 = _2930;
                    _3076 = _2931;
                    _3077 = _2932;
                    _3078 = _2933;
                    _3079 = _2934;
                    _3080 = _2935;
                    _3081 = _2945;
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    float _3006;
                    float _3007;
                    for (;;)
                    {
                        uint _3085 = uint(findLSB(_3081)) + (_2936 << 5u);
                        uint _3082 = (_3081 + 4294967295u) & _3081;
                        uint _3087 = _3085 * 48u;
                        vec4 _3101 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3087)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 3u)).x));
                        uint _3107 = (_3085 * 48u) + 4u;
                        vec4 _3120 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3107)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 3u)).x));
                        uint _3126 = (_3085 * 48u) + 8u;
                        vec3 _3137 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3126)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 2u)).x));
                        float _3141 = _3101.x - _2627;
                        float _3142 = _3101.y - _2628;
                        float _3143 = _3101.z - _2629;
                        float _3144 = dot(vec3(_3141, _3142, _3143), vec3(_3141, _3142, _3143));
                        float _3147 = inversesqrt(_3144);
                        float _3148 = _3147 * _3141;
                        float _3149 = _3147 * _3142;
                        float _3150 = _3147 * _3143;
                        float _3151 = dot(vec3(_732, _735, _738), vec3(_3148, _3149, _3150));
                        float _3156 = 1.0 - (_3144 * _3101.w);
                        float _4505 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                        float _3157 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                        float _3158 = sqrt(_3144) * _3120.w;
                        float _3161 = 1.39999997615814208984375 / (_3158 + 1.39999997615814208984375);
                        float _3162 = _3161 * _3161;
                        float _3165 = ((1.0 - _3162) * _3151) + _3162;
                        float _3168 = _3158 * _3158;
                        float _3172 = ((isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0))) * _3157) / ((_3168 * 0.699999988079071044921875) + 1.0);
                        float _3176 = (-0.0) - _2627;
                        float _3177 = (-0.0) - _2628;
                        float _3178 = (-0.0) - _2629;
                        float _3182 = inversesqrt(dot(vec3(_3176, _3177, _3178), vec3(_3176, _3177, _3178)));
                        float _3183 = _3182 * _3176;
                        float _3184 = _3182 * _3177;
                        float _3185 = _3182 * _3178;
                        float _3193 = exp2(log2(1.0 / ((_3168 * 3.5) + 5.0)) * 0.25);
                        float _3194 = 1.0 - _935;
                        float _3201 = sqrt(1.0 - ((1.0 - (_3194 * _3194)) * (1.0 - (_3193 * _3193))));
                        float _3202 = _3201 * _3201;
                        float _3203 = _3202 * _3202;
                        float _3204 = _3183 + _3148;
                        float _3205 = _3184 + _3149;
                        float _3206 = _3185 + _3150;
                        float _3210 = inversesqrt(dot(vec3(_3204, _3205, _3206), vec3(_3204, _3205, _3206)));
                        float _3214 = dot(vec3(_732, _735, _738), vec3(_3183, _3184, _3185));
                        float _4521 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                        float _3217 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                        float _3218 = dot(vec3(_732, _735, _738), vec3(_3210 * _3204, _3210 * _3205, _3210 * _3206));
                        float _4532 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                        float _3221 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                        float _3225 = ((_3221 * _3221) * (_3203 + (-1.0))) + 1.0;
                        float _3226 = _3161 * _3202;
                        float _3227 = _3226 * _3226;
                        float _3230 = ((1.0 - _3227) * _3151) + _3227;
                        float _4543 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                        float _3231 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                        float _3232 = 1.0 - _3202;
                        float _3242 = (0.5 / (((_3231 * ((_3217 * _3232) + _3202)) + 9.9999999392252902907785028219223e-09) + (((_3231 * _3232) + _3202) * _3217))) * _3231;
                        float _4554 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                        float _3253 = (((_3203 * 3.1415927410125732421875) * (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0)))) / ((_3225 * _3225) * ((_3168 * 2.1991131305694580078125) + 3.141590118408203125))) * _3157;
                        _3005 = (_3172 * _3120.x) + _3078;
                        _3006 = (_3172 * _3120.y) + _3079;
                        _3007 = (_3172 * _3120.z) + _3080;
                        _3002 = (_3253 * _3137.x) + _3075;
                        _3003 = (_3253 * _3137.y) + _3076;
                        _3004 = (_3253 * _3137.z) + _3077;
                        if (_3082 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3075 = _3002;
                            _3076 = _3003;
                            _3077 = _3004;
                            _3078 = _3005;
                            _3079 = _3006;
                            _3080 = _3007;
                            _3081 = _3082;
                        }
                    }
                    frontier_phi_68_pred = _3004;
                    frontier_phi_68_pred_1 = _3007;
                    frontier_phi_68_pred_2 = _3006;
                    frontier_phi_68_pred_3 = _3005;
                    frontier_phi_68_pred_4 = _3003;
                    frontier_phi_68_pred_5 = _3002;
                }
                _2783 = frontier_phi_68_pred;
                _2789 = frontier_phi_68_pred_1;
                _2787 = frontier_phi_68_pred_2;
                _2785 = frontier_phi_68_pred_3;
                _2781 = frontier_phi_68_pred_4;
                _2779 = frontier_phi_68_pred_5;
                uint _2937 = _2936 + 1u;
                if (_2937 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2930 = _2779;
                    _2931 = _2781;
                    _2932 = _2783;
                    _2933 = _2785;
                    _2934 = _2787;
                    _2935 = _2789;
                    _2936 = _2937;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2778 = _2779;
            _2780 = _2781;
            _2782 = _2783;
            _2784 = _2785;
            _2786 = _2787;
            _2788 = _2789;
        }
        uvec4 _2792 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2793 = _2792.z;
        uint _2795 = (_2793 >> 8u) & 15u;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        if (((4294967295u << _2795) & _2673) == 0u)
        {
            _2898 = _2778;
            _2900 = _2780;
            _2902 = _2782;
            _2904 = _2784;
            _2906 = _2786;
            _2908 = _2788;
        }
        else
        {
            float _2923 = inversesqrt(dot(vec3(_2627, _2628, _2629), vec3(_2627, _2628, _2629)));
            float _2924 = _2923 * _2627;
            float _2925 = _2923 * _2628;
            float _2926 = _2923 * _2629;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2795 < ((_2793 >> 12u) & 15u))
            {
                float _2899;
                float _2901;
                float _2903;
                float _2905;
                float _2907;
                float _2909;
                float _3058 = _2778;
                float _3059 = _2780;
                float _3060 = _2782;
                float _3061 = _2784;
                float _3062 = _2786;
                float _3063 = _2788;
                uint _3064 = _2795;
                uint _3073;
                bool _3074;
                for (;;)
                {
                    _3073 = texelFetch(g_lightClassification, int((((_2667 << 5u) + (_2653 << 9u)) + (_3064 << 2u)) >> 2u)).x;
                    _3074 = _3073 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3074)
                    {
                        frontier_phi_79_pred = _3063;
                        frontier_phi_79_pred_1 = _3062;
                        frontier_phi_79_pred_2 = _3061;
                        frontier_phi_79_pred_3 = _3060;
                        frontier_phi_79_pred_4 = _3059;
                        frontier_phi_79_pred_5 = _3058;
                    }
                    else
                    {
                        float _3267;
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3271;
                        float _3272;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3280 = _3058;
                        float _3281 = _3059;
                        float _3282 = _3060;
                        float _3283 = _3061;
                        float _3284 = _3062;
                        float _3285 = _3063;
                        uint _3286 = _3073;
                        uint _3287;
                        vec4 _3312;
                        float _3313;
                        vec4 _3328;
                        vec3 _3340;
                        vec4 _3355;
                        vec4 _3371;
                        float _3418;
                        bool _3419;
                        for (;;)
                        {
                            uint _3297 = ((_3064 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3286));
                            _3287 = (_3286 + 4294967295u) & _3286;
                            uint _3299 = _3297 * 40u;
                            _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            _3313 = _3312.w;
                            uint _3315 = (_3297 * 40u) + 4u;
                            _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            uint _3330 = (_3297 * 40u) + 8u;
                            _3340 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x));
                            uint _3342 = (_3297 * 40u) + 16u;
                            _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            uint _3358 = (_3297 * 40u) + 20u;
                            _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            uint _3374 = (_3297 * 40u) + 24u;
                            vec4 _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            uint _3393 = (_3297 * 40u) + 28u;
                            vec4 _3406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 3u)).x));
                            _3418 = fma(_2629, _3406.z, fma(_2628, _3406.y, _3406.x * _2627)) + _3406.w;
                            _3419 = !((fma(_2629, _3387.z, fma(_2628, _3387.y, _3387.x * _2627)) + _3387.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3419)
                            {
                                float _3446 = _3312.x - _2627;
                                float _3447 = _3312.y - _2628;
                                float _3448 = _3312.z - _2629;
                                float _3449 = dot(vec3(_3446, _3447, _3448), vec3(_3446, _3447, _3448));
                                float _3452 = inversesqrt(_3449);
                                float _3453 = _3452 * _3446;
                                float _3454 = _3452 * _3447;
                                float _3455 = _3452 * _3448;
                                float _3459 = 1.0 - (_3449 / (_3313 * _3313));
                                float _4565 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3460 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                                float _3464 = sqrt(_3449) * _3328.w;
                                float _3466 = 1.39999997615814208984375 / (_3464 + 1.39999997615814208984375);
                                float _3467 = _3466 * _3466;
                                float _3470 = ((1.0 - _3467) * dot(vec3(_3453, _3454, _3455), vec3(_732, _735, _738))) + _3467;
                                float _3473 = _3464 * _3464;
                                float _3477 = (fma(_2629, _3355.z, fma(_2628, _3355.y, _3355.x * _2627)) + _3355.w) / _3418;
                                float _3478 = (fma(_2629, _3371.z, fma(_2628, _3371.y, _3371.x * _2627)) + _3371.w) / _3418;
                                float _3482 = 1.0 - dot(vec2(_3477, _3478), vec2(_3477, _3478));
                                float _4581 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                                float _3483 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                                float _3484 = _3483 * (((isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0))) * _3460) / ((_3473 * 0.699999988079071044921875) + 1.0));
                                float _3496 = exp2(log2(1.0 / ((_3473 * 3.5) + 5.0)) * 0.25);
                                float _3497 = 1.0 - _935;
                                float _3504 = sqrt(1.0 - ((1.0 - (_3497 * _3497)) * (1.0 - (_3496 * _3496))));
                                float _3505 = _3504 * _3504;
                                float _3506 = _3505 * _3505;
                                float _3507 = _3453 - _2924;
                                float _3508 = _3454 - _2925;
                                float _3509 = _3455 - _2926;
                                float _3513 = inversesqrt(dot(vec3(_3507, _3508, _3509), vec3(_3507, _3508, _3509)));
                                float _3517 = dot(vec3(_732, _735, _738), vec3((-0.0) - _2924, (-0.0) - _2925, (-0.0) - _2926));
                                float _4592 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3520 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                                float _3521 = dot(vec3(_732, _735, _738), vec3(_3513 * _3507, _3513 * _3508, _3513 * _3509));
                                float _4603 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3524 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                                float _3528 = ((_3524 * _3524) * (_3506 + (-1.0))) + 1.0;
                                float _3529 = _3466 * _3505;
                                float _3530 = _3529 * _3529;
                                float _3536 = ((1.0 - _3530) * dot(vec3(_732, _735, _738), vec3(_3453, _3454, _3455))) + _3530;
                                float _4614 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3537 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                                float _3538 = 1.0 - _3505;
                                float _3548 = (0.5 / (((_3537 * ((_3520 * _3538) + _3505)) + 9.9999999392252902907785028219223e-09) + (((_3537 * _3538) + _3505) * _3520))) * _3537;
                                float _4625 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3558 = (_3483 * _3460) * (((_3506 * 3.1415927410125732421875) * (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0)))) / ((_3528 * _3528) * ((_3473 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3484 * _3328.z;
                                frontier_phi_85_pred_1 = _3484 * _3328.y;
                                frontier_phi_85_pred_2 = _3484 * _3328.x;
                                frontier_phi_85_pred_3 = _3558 * _3340.z;
                                frontier_phi_85_pred_4 = _3558 * _3340.y;
                                frontier_phi_85_pred_5 = _3558 * _3340.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3567 = frontier_phi_85_pred;
                            _3566 = frontier_phi_85_pred_1;
                            _3565 = frontier_phi_85_pred_2;
                            _3564 = frontier_phi_85_pred_3;
                            _3563 = frontier_phi_85_pred_4;
                            _3562 = frontier_phi_85_pred_5;
                            _3270 = _3565 + _3283;
                            _3271 = _3566 + _3284;
                            _3272 = _3567 + _3285;
                            _3267 = _3562 + _3280;
                            _3268 = _3563 + _3281;
                            _3269 = _3564 + _3282;
                            if (_3287 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3280 = _3267;
                                _3281 = _3268;
                                _3282 = _3269;
                                _3283 = _3270;
                                _3284 = _3271;
                                _3285 = _3272;
                                _3286 = _3287;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3272;
                        frontier_phi_79_pred_1 = _3271;
                        frontier_phi_79_pred_2 = _3270;
                        frontier_phi_79_pred_3 = _3269;
                        frontier_phi_79_pred_4 = _3268;
                        frontier_phi_79_pred_5 = _3267;
                    }
                    _2909 = frontier_phi_79_pred;
                    _2907 = frontier_phi_79_pred_1;
                    _2905 = frontier_phi_79_pred_2;
                    _2903 = frontier_phi_79_pred_3;
                    _2901 = frontier_phi_79_pred_4;
                    _2899 = frontier_phi_79_pred_5;
                    uint _3065 = _3064 + 1u;
                    if (_3065 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3058 = _2899;
                        _3059 = _2901;
                        _3060 = _2903;
                        _3061 = _2905;
                        _3062 = _2907;
                        _3063 = _2909;
                        _3064 = _3065;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2905;
                frontier_phi_60_61_ladder_1 = _2909;
                frontier_phi_60_61_ladder_2 = _2907;
                frontier_phi_60_61_ladder_3 = _2903;
                frontier_phi_60_61_ladder_4 = _2901;
                frontier_phi_60_61_ladder_5 = _2899;
            }
            else
            {
                frontier_phi_60_61_ladder = _2784;
                frontier_phi_60_61_ladder_1 = _2788;
                frontier_phi_60_61_ladder_2 = _2786;
                frontier_phi_60_61_ladder_3 = _2782;
                frontier_phi_60_61_ladder_4 = _2780;
                frontier_phi_60_61_ladder_5 = _2778;
            }
            _2898 = frontier_phi_60_61_ladder_5;
            _2900 = frontier_phi_60_61_ladder_4;
            _2902 = frontier_phi_60_61_ladder_3;
            _2904 = frontier_phi_60_61_ladder;
            _2906 = frontier_phi_60_61_ladder_2;
            _2908 = frontier_phi_60_61_ladder_1;
        }
        float _2913 = isnan(1.0) ? _919 : (isnan(_919) ? 1.0 : min(_919, 1.0));
        _2685 = (_2913 * _2904) + _2122;
        _2687 = (_2913 * _2906) + _2124;
        _2689 = (_2913 * _2908) + _2126;
        _2691 = ((_2898 * _905) * _2913) + _2467;
        _2693 = ((_2900 * _906) * _2913) + _2469;
        _2695 = ((_2902 * _907) * _2913) + _2471;
    }
    else
    {
        _2685 = _2122;
        _2687 = _2124;
        _2689 = _2126;
        _2691 = _2467;
        _2693 = _2469;
        _2695 = _2471;
    }
    float _4641 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _4652 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _4663 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _4674 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _2713 = ((isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (_2685 + ((isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))) * _919))) + ((_2691 + ((isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0))) * _1758)) * cbPerFrame._m0[3u].x);
    float _2714 = ((isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (_2687 + ((isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))) * _919))) + ((_2693 + ((isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0))) * _1758)) * cbPerFrame._m0[3u].x);
    float _2715 = ((isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2689 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _919))) + ((_2695 + ((isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0))) * _1758)) * cbPerFrame._m0[3u].x);
    float _2716 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
    float _2717 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
    float _2718 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
    float _2723 = cbInstanceData._m0[_811 + 6u].w * (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0)));
    float _2728 = _709 / cbSceneParam._m0[86u].x;
    float _2729 = _710 / cbSceneParam._m0[86u].y;
    vec4 _2743 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2728, _2729, (log2((isnan(cbSceneParam._m0[77u].w) ? _632 : (isnan(_632) ? cbSceneParam._m0[77u].w : min(_632, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2745 = _2743.x;
    float _2746 = _2743.y;
    float _2747 = _2743.z;
    float _2748 = _2743.w;
    float _2840;
    float _2842;
    float _2844;
    float _2846;
    if (_632 > cbSceneParam._m0[78u].w)
    {
        float _2803 = isnan(_632) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _632 : min(cbSceneParam._m0[80u].w, _632));
        float _2804 = _2803 / _632;
        float _2815 = _2804 * _682;
        float _2816 = _683 * _2804;
        float _2817 = (-0.0) - _2816;
        float _2818 = _2804 * _684;
        float _2820 = (cbSceneParam._m0[77u].w * _2817) / _2803;
        float _2821 = _2820 + cbSceneParam._m0[79u].w;
        float _2822 = cbSceneParam._m0[79u].w - _2816;
        float _2828 = sqrt(((_2815 * _2815) + (_2816 * _2816)) + (_2818 * _2818));
        float _2831 = (1.0 - (cbSceneParam._m0[77u].w / _2803)) * _2828;
        float _2836 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2838 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3015;
        if (abs((_2817 - _2820) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3015 = ((((_2821 > 0.0) ? exp2(_2836 * _2821) : (2.0 - exp2(_2838 * _2821))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2831;
        }
        else
        {
            float _2959 = 1.0 / cbSceneParam._m0[80u].x;
            float _2960 = isnan(_2822) ? _2821 : (isnan(_2821) ? _2822 : max(_2821, _2822));
            float _2961 = isnan(_2822) ? _2821 : (isnan(_2821) ? _2822 : min(_2821, _2822));
            float _2970 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : min(_2960, 0.0));
            float _2971 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : min(_2961, 0.0));
            _3015 = ((abs(_2828 / _2817) * cbSceneParam._m0[80u].y) * ((((_2970 - _2971) * 2.0) - ((exp2(_2836 * (isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0)))) - exp2(_2836 * (isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0))))) * _2959)) - ((exp2(_2838 * _2970) - exp2(_2838 * _2971)) * _2959))) + (_2831 * cbSceneParam._m0[80u].z);
        }
        vec4 _3017 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2728, _2729, 1.0), 0.0);
        float _3026 = exp2((_3015 * (-1.44269502162933349609375)) * (1.0 - _3017.w));
        float _3027 = log2(_3026);
        float _3043 = log2(_2748);
        _2840 = (exp2(_3043 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3027 * cbSceneParam._m0[78u].x)) * _3017.x) / cbSceneParam._m0[78u].x)) + _2745;
        _2842 = (exp2(_3043 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3027 * cbSceneParam._m0[78u].y)) * _3017.y) / cbSceneParam._m0[78u].y)) + _2746;
        _2844 = (exp2(_3043 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3027 * cbSceneParam._m0[78u].z)) * _3017.z) / cbSceneParam._m0[78u].z)) + _2747;
        _2846 = _3026 * _2748;
    }
    else
    {
        _2840 = _2745;
        _2842 = _2746;
        _2844 = _2747;
        _2846 = _2748;
    }
    bool _3053;
    vec4 _2856;
    vec4 _2878;
    float _2880;
    float _2884;
    float _2885;
    float _2886;
    float _2887;
    bool _2897;
    for (;;)
    {
        _2856 = cbMatDynParam._m0[0u];
        float _2858 = roundEven(_2856.y);
        bool _2859 = _2858 == 3.0;
        float _2860 = log2(_2846);
        float _2867 = exp2(_2860 * cbSceneParam._m0[78u].x) * _2716;
        float _2868 = exp2(_2860 * cbSceneParam._m0[78u].y) * _2717;
        float _2869 = exp2(_2860 * cbSceneParam._m0[78u].z) * _2718;
        float _2876 = _698 + (-0.5);
        _2878 = cbMtdParam._m0[1u];
        _2880 = _2878.y * _2876;
        float _2883 = (_2858 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2884 = _2883 * (_2859 ? _2867 : (_2867 + (cbSceneParam._m0[72u].w * _2840)));
        _2885 = _2883 * (_2859 ? _2868 : (_2868 + (cbSceneParam._m0[72u].w * _2842)));
        _2886 = _2883 * (_2859 ? _2869 : (_2869 + (cbSceneParam._m0[72u].w * _2844)));
        _2887 = _2876 * 0.999000012874603271484375;
        _2897 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2897)
        {
            if ((cbInstanceData._m0[_811 + 7u].x + _2887) < 0.5)
            {
                _3053 = true;
                break;
            }
        }
        uint _2994 = _812 + uint(_2856.w);
        if ((cbInstanceData._m0[_2994].w < 1.0) && ((cbInstanceData._m0[_2994].w + _2887) < 0.5))
        {
            _3053 = true;
            break;
        }
        if ((_2880 + _432) < _2878.x)
        {
            _3053 = true;
            break;
        }
        _3053 = false;
        break;
    }
    float _3258;
    if (_3053)
    {
        discard_state = true;
        _3258 = 0.0;
    }
    else
    {
        _3258 = _2723;
    }
    SV_Target.x = _2884;
    SV_Target.y = _2885;
    SV_Target.z = _2886;
    SV_Target.w = _3258;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2723;
    discard_exit();
}


