#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1428;
float _4128;
float _4129;
float _4130;
float _4131;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = _227 * NORMAL.x;
    float _229 = _227 * NORMAL.y;
    float _230 = _227 * NORMAL.z;
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242;
    float _243;
    float _244;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
        _244 = (-0.0) - _230;
    }
    else
    {
        _242 = _228;
        _243 = _229;
        _244 = _230;
    }
    float _289 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _299 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _289);
    float _300 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _289);
    float _301 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _289);
    vec4 _314 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _319 = _314.z;
    float _320 = _314.w;
    float _326 = exp2(log2(_319 * 22.0) * 260.0);
    float _327 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _328 = isnan(1.0) ? _327 : (isnan(_327) ? 1.0 : min(_327, 1.0));
    vec4 _342 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _352 = cbMtdParam._m0[10u].x * _342.x;
    float _353 = cbMtdParam._m0[10u].y * _342.y;
    float _354 = cbMtdParam._m0[10u].z * _342.z;
    vec4 _366 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _381 = exp2(log2(1.0 - _320) * 8.0);
    vec4 _393 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _409 = exp2(log2(_320) * 8.0);
    vec4 _422 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    vec4 _446 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _468 = (((((_366.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _446.x) - _352) * _328) + _352;
    float _469 = (((((_366.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _446.y) - _353) * _328) + _353;
    float _470 = (((((_366.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _446.z) - _354) * _328) + _354;
    float _477 = (((cbMtdParam._m0[12u].x * _393.x) - _468) * _381) + _468;
    float _478 = (((cbMtdParam._m0[12u].y * _393.y) - _469) * _381) + _469;
    float _479 = (((cbMtdParam._m0[12u].z * _393.z) - _470) * _381) + _470;
    float _486 = (((cbMtdParam._m0[11u].x * _422.x) - _477) * _409) + _477;
    float _487 = (((cbMtdParam._m0[11u].y * _422.y) - _478) * _409) + _478;
    float _488 = (((cbMtdParam._m0[11u].z * _422.z) - _479) * _409) + _479;
    float _489 = _446.w * _366.w;
    float _518 = (((texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _328) + cbMtdParam._m0[15u].y;
    float _521 = ((cbMtdParam._m0[14u].y - _518) * _381) + _518;
    float _524 = ((cbMtdParam._m0[15u].x - _521) * _409) + _521;
    vec4 _536 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _538 = _536.x;
    float _539 = _536.y;
    float _545 = cbMtdParam._m0[13u].y + _536.z;
    vec4 _557 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _576 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _593 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _604 = ((((_319 * 2.0) * (cbMtdParam._m0[13u].x + _557.z)) - _545) * _328) + _545;
    float _608 = (((_576.z - _604) + cbMtdParam._m0[14u].x) * _381) + _604;
    float _612 = (((_593.z - _608) + cbMtdParam._m0[13u].w) * _409) + _608;
    float _616 = (_314.x * 2.0) + (-1.0);
    float _618 = (_314.y * 2.0) + (-1.0);
    float _619 = dot(vec2(_616, _618), vec2(_616, _618));
    float _4150 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _624 = sqrt(1.0 - (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))));
    float _629 = ((_557.x - _538) * _328) + _538;
    float _630 = ((_557.y - _539) * _328) + _539;
    float _635 = ((_576.x - _629) * _381) + _629;
    float _636 = ((_576.y - _630) * _381) + _630;
    float _649 = ((((((_593.x - _635) * _409) + _635) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _616;
    float _650 = ((((((_593.y - _636) * _409) + _636) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _618;
    float _653 = fma(_624, _242, fma(_650, _234 * TANGENT.x, (_220 * _212) * _649));
    float _656 = fma(_624, _243, fma(_650, _234 * TANGENT.y, (_220 * _213) * _649));
    float _659 = fma(_624, _244, fma(_650, _234 * TANGENT.z, (_220 * _214) * _649));
    float _663 = inversesqrt(dot(vec3(_653, _656, _659), vec3(_653, _656, _659)));
    float _664 = _663 * _653;
    float _665 = _663 * _656;
    float _666 = _663 * _659;
    float _4161 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _667 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _4172 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _668 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _4183 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _669 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _4194 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _670 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _4205 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _671 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _4216 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _672 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _680 = cbMatDynParam._m0[9u].x * _669;
    float _681 = cbMatDynParam._m0[9u].y * _670;
    float _682 = cbMatDynParam._m0[9u].z * _671;
    float _689 = inversesqrt(dot(vec3(_299, _300, _301), vec3(_299, _300, _301)));
    float _690 = _689 * _299;
    float _691 = _689 * _300;
    float _692 = _689 * _301;
    float _693 = dot(vec3(_664, _665, _666), vec3(_690, _691, _692));
    float _699 = abs(exp2(log2(_693) * cbMatDynParam._m0[12u].x));
    float _700 = isnan(0.100000001490116119384765625) ? _699 : (isnan(_699) ? 0.100000001490116119384765625 : max(_699, 0.100000001490116119384765625));
    float _706 = ((isnan(0.699999988079071044921875) ? _700 : (isnan(_700) ? 0.699999988079071044921875 : min(_700, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _728 = 1.0 - cbMatDynParam._m0[8u].w;
    float _4237 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _731 = 1.0 - cbMatDynParam._m0[7u].w;
    float _4248 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _732 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _736 = dot(vec3(_664, _665, _666), vec3(0.0, -1.0, 0.0));
    float _4259 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _739 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _746 = (_739 * _669) * cbMatDynParam._m0[11u].x;
    float _748 = (_739 * _670) * cbMatDynParam._m0[11u].y;
    float _750 = (_739 * _671) * cbMatDynParam._m0[11u].z;
    float _757 = dot(vec3(_690, _691, _692), vec3(_664, _665, _666));
    float _760 = _757 * 2.0;
    float _770 = dot(vec3((-0.0) - (_690 - (_760 * _664)), (-0.0) - (_691 - (_760 * _665)), (-0.0) - (_692 - (_760 * _666))), vec3(0.0, -1.0, 0.0));
    float _4270 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _777 = exp2(log2(isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * 4.0);
    float _803 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _808 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _810 = _808.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1107 = sqrt(((_299 * _299) + (_300 * _300)) + (_301 * _301));
        float _1113 = (cbMatDynParam._m0[5u].x * _1107) + cbMatDynParam._m0[5u].y;
        float _4281 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1118 = (cbMatDynParam._m0[5u].z * _1107) + cbMatDynParam._m0[5u].w;
        float _4292 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) - _1114)) + _1114) < ((_810 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _821 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _822 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _824 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _826 = _824.w;
    float _844 = fma(_666, cbSceneParam._m0[5u].z, fma(_665, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _664));
    float _847 = fma(_666, cbSceneParam._m0[6u].z, fma(_665, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _664));
    float _850 = fma(_666, cbSceneParam._m0[7u].z, fma(_665, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _664));
    vec4 _852 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _854 = _852.x;
    float _866 = (((_852.y - _668) + (_852.w * _668)) * cbMtdParam._m0[3u].x) + _668;
    vec4 _867 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _883 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_854 * _854)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _867.z;
    float _891 = (((cbMatDynParam._m0[15u].x - _672) * cbMatDynParam._m0[15u].w) * _883) + _672;
    float _899 = ((_883 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _866)) + _866;
    uint _923 = uint(roundEven(NORMAL.w)) * 13u;
    uint _924 = _923 + 9u;
    uint _925 = _924 + uint(cbMatDynParam._m0[0u].w);
    float _931 = (cbMtdParam._m0[0u].x * _680) * cbInstanceData._m0[_925].x;
    float _932 = (cbMtdParam._m0[0u].y * _681) * cbInstanceData._m0[_925].y;
    float _933 = (cbMtdParam._m0[0u].z * _682) * cbInstanceData._m0[_925].z;
    float _4303 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _934 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
    float _4314 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _935 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    float _4325 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _936 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
    vec4 _937 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _942 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _953 = (((_942.x - _891) + (_942.w * _891)) * cbMtdParam._m0[3u].x) + _891;
    float _966 = (cbMtdParam._m0[3u].x * (((_934 * _826) - _934) + _937.x)) + _934;
    float _967 = (cbMtdParam._m0[3u].x * (((_935 * _826) - _935) + _937.y)) + _935;
    float _968 = (cbMtdParam._m0[3u].x * (((_936 * _826) - _936) + _937.z)) + _936;
    float _982 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_891 * (_680 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_891 * (_681 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_891 * (_682 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _986 = _982 * cbMatDynParam._m0[13u].w;
    float _996 = (_986 * (cbMatDynParam._m0[13u].x - _966)) + _966;
    float _997 = (_986 * (cbMatDynParam._m0[13u].y - _967)) + _967;
    float _998 = (_986 * (cbMatDynParam._m0[13u].z - _968)) + _968;
    float _1006 = ((_982 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _953)) + _953;
    float _1007 = 1.0 - _1006;
    float _1008 = _1007 * _996;
    float _1009 = _1007 * _997;
    float _1010 = _1007 * _998;
    float _1014 = (_996 + (-0.039999999105930328369140625)) * _1006;
    float _1015 = (_997 + (-0.039999999105930328369140625)) * _1006;
    float _1016 = (_998 + (-0.039999999105930328369140625)) * _1006;
    float _1017 = _1014 + 0.039999999105930328369140625;
    float _1018 = _1015 + 0.039999999105930328369140625;
    float _1019 = _1016 + 0.039999999105930328369140625;
    vec4 _1028 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _821, cbSceneParam._m0[86u].y * _822));
    float _1031 = _1028.x * TEXCOORD_4;
    float _1032 = _693 * 2.0;
    float _1036 = (_1032 * _664) - _690;
    float _1037 = (_1032 * _665) - _691;
    float _1038 = (_1032 * _666) - _692;
    float _1039 = abs(_757);
    float _4336 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _1041 = sqrt(_899);
    float _1053 = exp2((_1041 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1041 * 3.0));
    float _1059 = (1.0 - _1053) * ((_1041 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1060 = _1053 * _1041;
    float _1088 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1092 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1096 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1427;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1152 = fma(_1096, cbModelParam._m0[26u].z, fma(_1092, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1088));
        float _1156 = fma(_1096, cbModelParam._m0[27u].z, fma(_1092, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1088));
        float _1160 = fma(_1096, cbModelParam._m0[28u].z, fma(_1092, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1088));
        float _1185 = _1088 + _664;
        float _1186 = _1092 + _665;
        float _1187 = _1096 + _666;
        float _1197 = fma(_1187, cbModelParam._m0[26u].z, fma(_1186, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1185)) - _1152;
        float _1198 = fma(_1187, cbModelParam._m0[27u].z, fma(_1186, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1185)) - _1156;
        float _1199 = fma(_1187, cbModelParam._m0[28u].z, fma(_1186, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1185)) - _1160;
        float _1203 = inversesqrt(dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199)));
        float _1216 = ((_1203 * _1197) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1152 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1217 = ((_1203 * _1198) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1156 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1218 = ((_1203 * _1199) / cbModelParam._m0[34u].z) + ((((((_1160 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        float _1255 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1221.x + (-0.5));
        float _1257 = _1255 * (_1221.y + (-0.5));
        float _1258 = _1255 * (_1221.z + (-0.5));
        float _1265 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1228.x + (-0.5));
        float _1267 = _1265 * (_1228.y + (-0.5));
        float _1268 = _1265 * (_1228.z + (-0.5));
        float _1275 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1235.x + (-0.5));
        float _1277 = _1275 * (_1235.y + (-0.5));
        float _1278 = _1275 * (_1235.z + (-0.5));
        float _1285 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1242.x + (-0.5));
        float _1287 = _1285 * (_1242.y + (-0.5));
        float _1288 = _1285 * (_1242.z + (-0.5));
        float _1289 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = _1256 * 0.5;
        float _1293 = _1266 * 0.5;
        float _1294 = _1276 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1309 = (dot(vec3(_664, _665, _666), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _4362 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1319 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1289 + 9.9999997473787516355514526367188e-06);
        float _4373 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _4384 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_1321 + 1.0))) + _1326) * _1289;
        float _1336 = _1257 * 0.5;
        float _1337 = _1267 * 0.5;
        float _1338 = _1277 * 0.5;
        float _1339 = dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338));
        float _1344 = (_1339 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1339);
        float _1352 = (dot(vec3(_664, _665, _666), vec3(_1344 * _1336, _1344 * _1337, _1344 * _1338)) + 1.0) * 0.5;
        float _4395 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1361 = sqrt(((_1337 * _1337) + (_1336 * _1336)) + (_1338 * _1338)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _4406 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _1363 = _1362 * 2.0;
        float _1367 = (1.0 - _1362) / (_1362 + 1.0);
        float _4417 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _1377 = ((((1.0 - _1368) * (_1363 + 2.0)) * exp2(log2(isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_1363 + 1.0))) + _1368) * _1290;
        float _1378 = _1258 * 0.5;
        float _1379 = _1268 * 0.5;
        float _1380 = _1278 * 0.5;
        float _1381 = dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380));
        float _1386 = (_1381 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1381);
        float _1394 = (dot(vec3(_664, _665, _666), vec3(_1386 * _1378, _1386 * _1379, _1386 * _1380)) + 1.0) * 0.5;
        float _4428 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1403 = sqrt(((_1379 * _1379) + (_1378 * _1378)) + (_1380 * _1380)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _4439 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _1405 = _1404 * 2.0;
        float _1409 = (1.0 - _1404) / (_1404 + 1.0);
        float _4450 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _1419 = ((((1.0 - _1410) * (_1405 + 2.0)) * exp2(log2(isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_1405 + 1.0))) + _1410) * _1291;
        _1427 = _1258;
        _1429 = _1257;
        _1430 = _1256;
        _1431 = _1268;
        _1432 = _1267;
        _1433 = _1266;
        _1434 = _1278;
        _1435 = _1277;
        _1436 = _1276;
        _1437 = _1291;
        _1438 = _1290;
        _1439 = _1289;
        _1440 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
        _1441 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)));
        _1442 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)));
    }
    else
    {
        _1427 = _1428;
        _1429 = _1428;
        _1430 = _1428;
        _1431 = _1428;
        _1432 = _1428;
        _1433 = _1428;
        _1434 = _1428;
        _1435 = _1428;
        _1436 = _1428;
        _1437 = _1428;
        _1438 = _1428;
        _1439 = _1428;
        _1440 = 0.0;
        _1441 = 0.0;
        _1442 = 0.0;
    }
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1471 = fma(_1096, cbModelParam._m0[30u].z, fma(_1092, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1088));
        float _1475 = fma(_1096, cbModelParam._m0[31u].z, fma(_1092, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1088));
        float _1479 = fma(_1096, cbModelParam._m0[32u].z, fma(_1092, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1088));
        float _1502 = _1088 + _664;
        float _1503 = _1092 + _665;
        float _1504 = _1096 + _666;
        float _1514 = fma(_1504, cbModelParam._m0[30u].z, fma(_1503, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1502)) - _1471;
        float _1515 = fma(_1504, cbModelParam._m0[31u].z, fma(_1503, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1502)) - _1475;
        float _1516 = fma(_1504, cbModelParam._m0[32u].z, fma(_1503, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1502)) - _1479;
        float _1520 = inversesqrt(dot(vec3(_1514, _1515, _1516), vec3(_1514, _1515, _1516)));
        float _1533 = ((_1520 * _1514) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1471 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1534 = ((_1520 * _1515) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1475 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1535 = ((_1520 * _1516) / cbModelParam._m0[35u].z) + ((((((_1479 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1537 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1533, _1534, _1535), 0.0);
        vec4 _1544 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1533, _1534, _1535), 0.0);
        vec4 _1551 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1533, _1534, _1535), 0.0);
        vec4 _1558 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1533, _1534, _1535), 0.0);
        float _1570 = exp2((_1537.w + (-0.5)) * 20.0) * 2.0;
        float _1571 = _1570 * (_1537.x + (-0.5));
        float _1572 = _1570 * (_1537.y + (-0.5));
        float _1573 = _1570 * (_1537.z + (-0.5));
        float _1580 = exp2((_1544.w + (-0.5)) * 20.0) * 2.0;
        float _1581 = _1580 * (_1544.x + (-0.5));
        float _1582 = _1580 * (_1544.y + (-0.5));
        float _1583 = _1580 * (_1544.z + (-0.5));
        float _1590 = exp2((_1551.w + (-0.5)) * 20.0) * 2.0;
        float _1591 = _1590 * (_1551.x + (-0.5));
        float _1592 = _1590 * (_1551.y + (-0.5));
        float _1593 = _1590 * (_1551.z + (-0.5));
        float _1600 = exp2((_1558.w + (-0.5)) * 20.0) * 2.0;
        float _1601 = _1600 * (_1558.x + (-0.5));
        float _1602 = _1600 * (_1558.y + (-0.5));
        float _1603 = _1600 * (_1558.z + (-0.5));
        float _1604 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1605 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1606 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1607 = _1571 * 0.5;
        float _1608 = _1581 * 0.5;
        float _1609 = _1591 * 0.5;
        float _1610 = dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609));
        float _1615 = (_1610 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1610);
        float _1623 = (dot(vec3(_664, _665, _666), vec3(_1615 * _1607, _1615 * _1608, _1615 * _1609)) + 1.0) * 0.5;
        float _4491 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1632 = sqrt(((_1608 * _1608) + (_1607 * _1607)) + (_1609 * _1609)) / (_1604 + 9.9999997473787516355514526367188e-06);
        float _4502 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _1634 = _1633 * 2.0;
        float _1638 = (1.0 - _1633) / (_1633 + 1.0);
        float _4513 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _1648 = ((((1.0 - _1639) * (_1634 + 2.0)) * exp2(log2(isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_1634 + 1.0))) + _1639) * _1604;
        float _1649 = _1572 * 0.5;
        float _1650 = _1582 * 0.5;
        float _1651 = _1592 * 0.5;
        float _1652 = dot(vec3(_1649, _1650, _1651), vec3(_1649, _1650, _1651));
        float _1657 = (_1652 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1652);
        float _1665 = (dot(vec3(_664, _665, _666), vec3(_1657 * _1649, _1657 * _1650, _1657 * _1651)) + 1.0) * 0.5;
        float _4524 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1674 = sqrt(((_1650 * _1650) + (_1649 * _1649)) + (_1651 * _1651)) / (_1605 + 9.9999997473787516355514526367188e-06);
        float _4535 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _1676 = _1675 * 2.0;
        float _1680 = (1.0 - _1675) / (_1675 + 1.0);
        float _4546 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _1690 = ((((1.0 - _1681) * (_1676 + 2.0)) * exp2(log2(isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_1676 + 1.0))) + _1681) * _1605;
        float _1691 = _1573 * 0.5;
        float _1692 = _1583 * 0.5;
        float _1693 = _1593 * 0.5;
        float _1694 = dot(vec3(_1691, _1692, _1693), vec3(_1691, _1692, _1693));
        float _1699 = (_1694 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1694);
        float _1707 = (dot(vec3(_664, _665, _666), vec3(_1699 * _1691, _1699 * _1692, _1699 * _1693)) + 1.0) * 0.5;
        float _4557 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1716 = sqrt(((_1692 * _1692) + (_1691 * _1691)) + (_1693 * _1693)) / (_1606 + 9.9999997473787516355514526367188e-06);
        float _4568 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _1718 = _1717 * 2.0;
        float _1722 = (1.0 - _1717) / (_1717 + 1.0);
        float _4579 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1723 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
        float _1732 = ((((1.0 - _1723) * (_1718 + 2.0)) * exp2(log2(isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (_1718 + 1.0))) + _1723) * _1606;
        _1740 = _1573;
        _1741 = _1572;
        _1742 = _1571;
        _1743 = _1583;
        _1744 = _1582;
        _1745 = _1581;
        _1746 = _1593;
        _1747 = _1592;
        _1748 = _1591;
        _1749 = _1606;
        _1750 = _1605;
        _1751 = _1604;
        _1752 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)));
        _1753 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)));
        _1754 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)));
    }
    else
    {
        _1740 = _1428;
        _1741 = _1428;
        _1742 = _1428;
        _1743 = _1428;
        _1744 = _1428;
        _1745 = _1428;
        _1746 = _1428;
        _1747 = _1428;
        _1748 = _1428;
        _1749 = _1428;
        _1750 = _1428;
        _1751 = _1428;
        _1752 = 0.0;
        _1753 = 0.0;
        _1754 = 0.0;
    }
    float _1764 = (cbModelParam._m0[1u].x * (_1752 - _1440)) + _1440;
    float _1765 = (cbModelParam._m0[1u].x * (_1753 - _1441)) + _1441;
    float _1766 = (cbModelParam._m0[1u].x * (_1754 - _1442)) + _1442;
    float _1787 = fma(_1766, cbSceneParam._m0[89u].z, fma(_1765, cbSceneParam._m0[89u].y, _1764 * cbSceneParam._m0[89u].x));
    float _1790 = fma(_1766, cbSceneParam._m0[90u].z, fma(_1765, cbSceneParam._m0[90u].y, _1764 * cbSceneParam._m0[90u].x));
    float _1793 = fma(_1766, cbSceneParam._m0[91u].z, fma(_1765, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1764));
    float _1808 = _1036 * 0.5;
    float _1809 = _1037 * 0.5;
    float _1810 = _1038 * 0.5;
    float _1811 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1742, _1745, _1748, _1751));
    float _1814 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1741, _1744, _1747, _1750));
    float _1817 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1740, _1743, _1746, _1749));
    float _1848;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1824 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1427, _1431, _1434, _1437));
        float _1828 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1429, _1432, _1435, _1438));
        float _1832 = dot(vec4(_1808, _1809, _1810, 1.0), vec4(_1430, _1433, _1436, _1439));
        float _1839 = dot(vec4(cbModelParam._m0[39u]), vec4(_1808, _1809, _1810, 1.0));
        _1848 = dot(vec3(isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0)), isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0)), isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1839) ? 0.0 : (isnan(0.0) ? _1839 : max(0.0, _1839))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1848 = 1.0;
    }
    float _1859;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1850 = dot(vec4(cbModelParam._m0[40u]), vec4(_1808, _1809, _1810, 1.0));
        _1859 = dot(vec3(isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)), isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)), isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1850) ? 0.0 : (isnan(0.0) ? _1850 : max(0.0, _1850))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1859 = 1.0;
    }
    float _1863 = (_1859 * cbModelParam._m0[1u].x) + (_1848 * (1.0 - cbModelParam._m0[1u].x));
    float _1873 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _899);
    float _1874 = isnan(_1873) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1873 : min(cbModelParam._m0[25u].z, _1873));
    float _1954;
    float _1956;
    float _1958;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1921 = fma(_1096, cbModelParam._m0[13u].z, fma(_1092, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1088)) + cbModelParam._m0[13u].w;
        float _1925 = fma(_1096, cbModelParam._m0[14u].z, fma(_1092, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1088)) + cbModelParam._m0[14u].w;
        float _1929 = fma(_1096, cbModelParam._m0[15u].z, fma(_1092, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1088)) + cbModelParam._m0[15u].w;
        float _1932 = fma(_1038, cbModelParam._m0[13u].z, fma(_1037, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1036));
        float _1935 = fma(_1038, cbModelParam._m0[14u].z, fma(_1037, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1036));
        float _1938 = fma(_1038, cbModelParam._m0[15u].z, fma(_1037, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1036));
        float _1966;
        if (_1932 > 0.0)
        {
            _1966 = abs((1.0 - _1921) / _1932);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1921 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1966 = frontier_phi_19_17_ladder;
        }
        float _2141;
        if (_1935 > 0.0)
        {
            _2141 = abs((1.0 - _1925) / _1935);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1925 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2141 = frontier_phi_28_24_ladder;
        }
        float _2436;
        if (_1938 > 0.0)
        {
            _2436 = abs((1.0 - _1929) / _1938);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1929 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2436 = frontier_phi_40_35_ladder;
        }
        float _2438 = isnan(_2141) ? _1966 : (isnan(_1966) ? _2141 : min(_1966, _2141));
        float _2439 = isnan(_2436) ? _2438 : (isnan(_2438) ? _2436 : min(_2438, _2436));
        float _2443 = (_2439 * _1932) + _1921;
        float _2444 = (_2439 * _1935) + _1925;
        float _2445 = (_2439 * _1938) + _1929;
        float _2446 = _2439 * 9.9999997473787516355514526367188e-05;
        float _2448 = (-1.0) - _2446;
        float _2450 = _2446 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2445 > _2450) || ((_2445 < _2448) || ((_2444 > _2450) || ((_2444 < _2448) || ((_2443 < _2448) || (_2443 > _2450))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2590 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2445, cbModelParam._m0[9u].z, fma(_2444, cbModelParam._m0[9u].y, _2443 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2445, cbModelParam._m0[10u].z, fma(_2444, cbModelParam._m0[10u].y, _2443 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2445, cbModelParam._m0[11u].z, fma(_2444, cbModelParam._m0[11u].y, _2443 * cbModelParam._m0[11u].x))), _1874);
            frontier_phi_18_40_ladder = _2590.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2590.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2590.x * cbModelParam._m0[1u].y;
        }
        _1954 = frontier_phi_18_40_ladder_2;
        _1956 = frontier_phi_18_40_ladder_1;
        _1958 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1942 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1036, _1037, _1038), _1874);
        _1954 = _1942.x * cbModelParam._m0[1u].y;
        _1956 = _1942.y * cbModelParam._m0[1u].y;
        _1958 = _1942.z * cbModelParam._m0[1u].y;
    }
    float _1962 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _899);
    float _1963 = isnan(_1962) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1962 : min(cbModelParam._m0[25u].w, _1962));
    float _2056;
    float _2058;
    float _2060;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2020 = fma(_1096, cbModelParam._m0[21u].z, fma(_1092, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1088)) + cbModelParam._m0[21u].w;
        float _2024 = fma(_1096, cbModelParam._m0[22u].z, fma(_1092, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1088)) + cbModelParam._m0[22u].w;
        float _2028 = fma(_1096, cbModelParam._m0[23u].z, fma(_1092, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1088)) + cbModelParam._m0[23u].w;
        float _2031 = fma(_1038, cbModelParam._m0[21u].z, fma(_1037, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1036));
        float _2034 = fma(_1038, cbModelParam._m0[22u].z, fma(_1037, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1036));
        float _2037 = fma(_1038, cbModelParam._m0[23u].z, fma(_1037, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1036));
        float _2146;
        if (_2031 > 0.0)
        {
            _2146 = abs((1.0 - _2020) / _2031);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2031 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2020 + 1.0) / _2031);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2146 = frontier_phi_30_26_ladder;
        }
        float _2463;
        if (_2034 > 0.0)
        {
            _2463 = abs((1.0 - _2024) / _2034);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2034 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2024 + 1.0) / _2034);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2463 = frontier_phi_42_37_ladder;
        }
        float _2801;
        if (_2037 > 0.0)
        {
            _2801 = abs((1.0 - _2028) / _2037);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2037 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_2028 + 1.0) / _2037);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2801 = frontier_phi_52_49_ladder;
        }
        float _2803 = isnan(_2463) ? _2146 : (isnan(_2146) ? _2463 : min(_2146, _2463));
        float _2804 = isnan(_2801) ? _2803 : (isnan(_2803) ? _2801 : min(_2803, _2801));
        float _2808 = (_2804 * _2031) + _2020;
        float _2809 = (_2804 * _2034) + _2024;
        float _2810 = (_2804 * _2037) + _2028;
        float _2811 = _2804 * 9.9999997473787516355514526367188e-05;
        float _2812 = (-1.0) - _2811;
        float _2814 = _2811 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2810 > _2814) || ((_2810 < _2812) || ((_2809 > _2814) || ((_2809 < _2812) || ((_2808 < _2812) || (_2808 > _2814))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2932 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2810, cbModelParam._m0[17u].z, fma(_2809, cbModelParam._m0[17u].y, _2808 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2810, cbModelParam._m0[18u].z, fma(_2809, cbModelParam._m0[18u].y, _2808 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2810, cbModelParam._m0[19u].z, fma(_2809, cbModelParam._m0[19u].y, _2808 * cbModelParam._m0[19u].x))), _1963);
            frontier_phi_27_52_ladder = _2932.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2932.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2932.x * cbModelParam._m0[1u].z;
        }
        _2056 = frontier_phi_27_52_ladder_2;
        _2058 = frontier_phi_27_52_ladder_1;
        _2060 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2040 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1036, _1037, _1038), _1963);
        _2056 = _2040.x * cbModelParam._m0[1u].z;
        _2058 = _2040.y * cbModelParam._m0[1u].z;
        _2060 = _2040.z * cbModelParam._m0[1u].z;
    }
    float _2073 = (((_1059 * _1017) + _1060) * _1031) * ((cbModelParam._m0[1u].w * (_2056 - _1954)) + _1954);
    float _2075 = (((_1059 * _1018) + _1060) * _1031) * ((cbModelParam._m0[1u].w * (_2058 - _1956)) + _1956);
    float _2077 = (((_1059 * _1019) + _1060) * _1031) * ((cbModelParam._m0[1u].w * (_2060 - _1958)) + _1958);
    float _2080 = fma(_2077, cbSceneParam._m0[89u].z, fma(_2075, cbSceneParam._m0[89u].y, _2073 * cbSceneParam._m0[89u].x));
    float _2083 = fma(_2077, cbSceneParam._m0[90u].z, fma(_2075, cbSceneParam._m0[90u].y, _2073 * cbSceneParam._m0[90u].x));
    float _2086 = fma(_2077, cbSceneParam._m0[91u].z, fma(_2075, cbSceneParam._m0[91u].y, _2073 * cbSceneParam._m0[91u].x));
    float _2120 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2124 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2128 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2132 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2133 = _2120 / _2132;
    float _2134 = _2124 / _2132;
    float _2135 = _2128 / _2132;
    float _2282;
    float _2283;
    float _2284;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2162 = ((uint(_2135 > cbSceneParam._m0[59u].y) + uint(_2135 > cbSceneParam._m0[59u].x)) + uint(_2135 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2163 = _2162 + 43u;
        uint _2171 = _2162 + 44u;
        uint _2179 = _2162 + 45u;
        uint _2187 = _2162 + 46u;
        float _2198 = fma(_2132, cbSceneParam._m0[_2163].w, fma(_2128, cbSceneParam._m0[_2163].z, fma(_2124, cbSceneParam._m0[_2163].y, _2120 * cbSceneParam._m0[_2163].x)));
        float _2202 = fma(_2132, cbSceneParam._m0[_2171].w, fma(_2128, cbSceneParam._m0[_2171].z, fma(_2124, cbSceneParam._m0[_2171].y, _2120 * cbSceneParam._m0[_2171].x)));
        float _2210 = fma(_2132, cbSceneParam._m0[_2187].w, fma(_2128, cbSceneParam._m0[_2187].z, fma(_2124, cbSceneParam._m0[_2187].y, _2120 * cbSceneParam._m0[_2187].x)));
        float _2215 = cbSceneParam._m0[33u].z * _2210;
        float _2217 = cbSceneParam._m0[33u].w * _2210;
        float _2220 = fma(_2132, cbSceneParam._m0[_2179].w, fma(_2128, cbSceneParam._m0[_2179].z, fma(_2124, cbSceneParam._m0[_2179].y, _2120 * cbSceneParam._m0[_2179].x))) / _2210;
        float _2268 = (cbSceneParam._m0[33u].x - sqrt(((_2134 * _2134) + (_2133 * _2133)) + (_2135 * _2135))) * cbSceneParam._m0[33u].y;
        float _4705 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2275 = (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2215 + _2198) / _2210, (_2217 + _2202) / _2210), _2220), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2217 + _2198) / _2210, (_2202 - _2215) / _2210), _2220), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2198 - _2215) / _2210, (_2202 - _2217) / _2210), _2220), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2198 - _2217) / _2210, (_2215 + _2202) / _2210), _2220), 0.0)).x), vec4(0.25)));
        _2282 = 1.0 - (_2275 * cbSceneParam._m0[34u].x);
        _2283 = 1.0 - (_2275 * cbSceneParam._m0[34u].y);
        _2284 = 1.0 - (_2275 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2282 = 1.0;
        _2283 = 1.0;
        _2284 = 1.0;
    }
    float _2348;
    float _2350;
    float _2352;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2336 = fma(_2132, cbSceneParam._m0[63u].w, fma(_2128, cbSceneParam._m0[63u].z, fma(_2124, cbSceneParam._m0[63u].y, _2120 * cbSceneParam._m0[63u].x)));
        float _2337 = fma(_2132, cbSceneParam._m0[60u].w, fma(_2128, cbSceneParam._m0[60u].z, fma(_2124, cbSceneParam._m0[60u].y, _2120 * cbSceneParam._m0[60u].x))) / _2336;
        float _2338 = fma(_2132, cbSceneParam._m0[61u].w, fma(_2128, cbSceneParam._m0[61u].z, fma(_2124, cbSceneParam._m0[61u].y, _2120 * cbSceneParam._m0[61u].x))) / _2336;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2337 >= cbSceneParam._m0[64u].x) && (_2338 >= cbSceneParam._m0[64u].y)) && (_2337 <= cbSceneParam._m0[64u].z)) && (_2338 <= cbSceneParam._m0[64u].w))
        {
            float _2476 = fma(_2132, cbSceneParam._m0[62u].w, fma(_2128, cbSceneParam._m0[62u].z, fma(_2124, cbSceneParam._m0[62u].y, _2120 * cbSceneParam._m0[62u].x))) / _2336;
            float _2480 = isnan(cbSceneParam._m0[41u].w) ? _2476 : (isnan(_2476) ? cbSceneParam._m0[41u].w : max(_2476, cbSceneParam._m0[41u].w));
            float _2523 = (cbSceneParam._m0[33u].x - sqrt(((_2134 * _2134) + (_2133 * _2133)) + (_2135 * _2135))) * cbSceneParam._m0[33u].y;
            float _4721 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
            float _2530 = (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2337, cbSceneParam._m0[33u].w + _2338), _2480), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2337, _2338 - cbSceneParam._m0[33u].z), _2480), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2337 - cbSceneParam._m0[33u].z, _2338 - cbSceneParam._m0[33u].w), _2480), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2337 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2338), _2480), 0.0)).x), vec4(0.25)));
            float _2534 = 1.0 - (_2530 * cbSceneParam._m0[34u].x);
            float _2535 = 1.0 - (_2530 * cbSceneParam._m0[34u].y);
            float _2536 = 1.0 - (_2530 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2535) ? _2283 : (isnan(_2283) ? _2535 : min(_2283, _2535));
            frontier_phi_39_38_ladder_1 = isnan(_2534) ? _2282 : (isnan(_2282) ? _2534 : min(_2282, _2534));
            frontier_phi_39_38_ladder_2 = isnan(_2536) ? _2284 : (isnan(_2284) ? _2536 : min(_2284, _2536));
        }
        else
        {
            frontier_phi_39_38_ladder = _2283;
            frontier_phi_39_38_ladder_1 = _2282;
            frontier_phi_39_38_ladder_2 = _2284;
        }
        _2348 = frontier_phi_39_38_ladder_1;
        _2350 = frontier_phi_39_38_ladder;
        _2352 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2348 = _2282;
        _2350 = _2283;
        _2352 = _2284;
    }
    uvec4 _2357 = floatBitsToUint(cbInstanceData._m0[_923 + 5u]);
    uint _2359 = _2357.x * 14u;
    uint _2360 = _2359 + 13u;
    float _2367 = _1031 + (-1.0);
    float _2372 = (cbLight._m0[_2360].x * _2367) + 1.0;
    float _2373 = (cbLight._m0[_2360].y * _2367) + 1.0;
    float _2374 = (cbLight._m0[_2360].z * _2367) + 1.0;
    float _2375 = (cbLight._m0[_2360].w * _2367) + 1.0;
    uint _2376 = _2359 + 5u;
    float _2382 = isnan(1.0) ? _2373 : (isnan(_2373) ? 1.0 : min(_2373, 1.0));
    uint _2386 = _2359 + 4u;
    float _2395 = isnan(1.0) ? _2372 : (isnan(_2372) ? 1.0 : min(_2372, 1.0));
    uint _2399 = _2359 | 1u;
    float _2410 = dot(vec3(cbLight._m0[_2359].xyz), vec3(_664, _665, _666));
    float _2413 = dot(vec3(cbLight._m0[_2399].xyz), vec3(_664, _665, _666));
    float _4757 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _4768 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2418 = (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * 0.3183098733425140380859375;
    float _2420 = (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * 0.3183098733425140380859375;
    float _2427 = ((cbLight._m0[_2376].x * _2382) * _2420) + (((cbLight._m0[_2386].x * _2348) * _2395) * _2418);
    float _2428 = ((_2382 * cbLight._m0[_2376].y) * _2420) + (((cbLight._m0[_2386].y * _2350) * _2395) * _2418);
    float _2429 = ((_2382 * cbLight._m0[_2376].z) * _2420) + (((cbLight._m0[_2386].z * _2352) * _2395) * _2418);
    uvec4 _2433 = floatBitsToUint(cbLight._m0[_2359 + 12u]);
    bool _2435 = _2433.x == 0u;
    float _2537;
    float _2539;
    float _2541;
    if (_2435)
    {
        _2537 = _2427;
        _2539 = _2428;
        _2541 = _2429;
    }
    else
    {
        uint _2545 = _2359 + 6u;
        float _2561 = (dot(vec3(cbLight._m0[_2359 + 2u].xyz), vec3(_664, _665, _666)) * 0.5) + 0.5;
        float _2562 = _2561 * _2561;
        float _4779 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2563 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
        float _2564 = isnan(1.0) ? _2374 : (isnan(_2374) ? 1.0 : min(_2374, 1.0));
        _2537 = (((cbLight._m0[_2545].x * 0.3183098733425140380859375) * _2563) * _2564) + _2427;
        _2539 = (((cbLight._m0[_2545].y * 0.3183098733425140380859375) * _2563) * _2564) + _2428;
        _2541 = (((cbLight._m0[_2545].z * 0.3183098733425140380859375) * _2563) * _2564) + _2429;
    }
    bool _2544 = _2433.y == 0u;
    float _2599;
    float _2601;
    float _2603;
    if (_2544)
    {
        _2599 = _2537;
        _2601 = _2539;
        _2603 = _2541;
    }
    else
    {
        uint _2772 = _2359 + 7u;
        float _2788 = (dot(vec3(cbLight._m0[_2359 + 3u].xyz), vec3(_664, _665, _666)) * 0.5) + 0.5;
        float _2789 = _2788 * _2788;
        float _4795 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        float _2790 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
        float _2791 = isnan(1.0) ? _2375 : (isnan(_2375) ? 1.0 : min(_2375, 1.0));
        _2599 = (((cbLight._m0[_2772].x * 0.3183098733425140380859375) * _2790) * _2791) + _2537;
        _2601 = (((cbLight._m0[_2772].y * 0.3183098733425140380859375) * _2790) * _2791) + _2539;
        _2603 = (((cbLight._m0[_2772].z * 0.3183098733425140380859375) * _2790) * _2791) + _2541;
    }
    uint _2606 = _2359 + 8u;
    float _2619 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2359].w)) * _899) * 0.949999988079071044921875);
    float _2620 = _2619 * _2619;
    float _2621 = cbLight._m0[_2359].x + _690;
    float _2622 = cbLight._m0[_2359].y + _691;
    float _2623 = cbLight._m0[_2359].z + _692;
    float _2627 = inversesqrt(dot(vec3(_2621, _2622, _2623), vec3(_2621, _2622, _2623)));
    float _2628 = _2627 * _2621;
    float _2629 = _2627 * _2622;
    float _2630 = _2627 * _2623;
    float _2631 = dot(vec3(_664, _665, _666), vec3(cbLight._m0[_2359].xyz));
    float _4811 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
    float _2634 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
    float _4822 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _2635 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
    float _2636 = dot(vec3(_664, _665, _666), vec3(_2628, _2629, _2630));
    float _4833 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
    float _2639 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
    float _2640 = dot(vec3(cbLight._m0[_2359].xyz), vec3(_2628, _2629, _2630));
    float _4844 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
    float _2644 = _2620 * _2620;
    float _2648 = ((_2639 * _2639) * (_2644 + (-1.0))) + 1.0;
    float _2656 = exp2(log2(1.0 - (isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0)))) * 5.0);
    float _2657 = 0.959999978542327880859375 - _1014;
    float _2659 = 0.959999978542327880859375 - _1015;
    float _2660 = 0.959999978542327880859375 - _1016;
    float _2667 = 1.0 - _2620;
    float _2678 = (0.5 / (((_2635 * ((_2634 * _2667) + _2620)) + 9.9999999392252902907785028219223e-09) + (((_2635 * _2667) + _2620) * _2634))) * _2634;
    float _4855 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
    float _2680 = (isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0))) * (_2644 / ((_2648 * _2648) * 3.141590118408203125));
    uint _2694 = _2359 + 9u;
    float _2705 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2399].w)) * _899) * 0.949999988079071044921875);
    float _2706 = _2705 * _2705;
    float _2707 = cbLight._m0[_2399].x + _690;
    float _2708 = cbLight._m0[_2399].y + _691;
    float _2709 = cbLight._m0[_2399].z + _692;
    float _2713 = inversesqrt(dot(vec3(_2707, _2708, _2709), vec3(_2707, _2708, _2709)));
    float _2714 = _2713 * _2707;
    float _2715 = _2713 * _2708;
    float _2716 = _2713 * _2709;
    float _2717 = dot(vec3(_664, _665, _666), vec3(cbLight._m0[_2399].xyz));
    float _4866 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
    float _2720 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
    float _2721 = dot(vec3(_664, _665, _666), vec3(_2714, _2715, _2716));
    float _4877 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
    float _2724 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
    float _2725 = dot(vec3(cbLight._m0[_2399].xyz), vec3(_2714, _2715, _2716));
    float _4888 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
    float _2729 = _2706 * _2706;
    float _2733 = ((_2724 * _2724) * (_2729 + (-1.0))) + 1.0;
    float _2740 = exp2(log2(1.0 - (isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0)))) * 5.0);
    float _2747 = 1.0 - _2706;
    float _2757 = (0.5 / (((_2635 * ((_2720 * _2747) + _2706)) + 9.9999999392252902907785028219223e-09) + (((_2635 * _2747) + _2706) * _2720))) * _2720;
    float _4899 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
    float _2759 = (isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0))) * (_2729 / ((_2733 * _2733) * 3.141590118408203125));
    float _2769 = (((((_2740 * _2657) + _1017) * cbLight._m0[_2694].x) * _2759) * _2382) + ((((cbLight._m0[_2606].x * _2348) * ((_2656 * _2657) + _1017)) * _2680) * _2395);
    float _2770 = (((((_2740 * _2659) + _1018) * cbLight._m0[_2694].y) * _2759) * _2382) + ((((cbLight._m0[_2606].y * _2350) * ((_2656 * _2659) + _1018)) * _2680) * _2395);
    float _2771 = (((((_2740 * _2660) + _1019) * cbLight._m0[_2694].z) * _2759) * _2382) + ((((cbLight._m0[_2606].z * _2352) * ((_2656 * _2660) + _1019)) * _2680) * _2395);
    float _2827;
    float _2829;
    float _2831;
    if (_2435)
    {
        _2827 = _2769;
        _2829 = _2770;
        _2831 = _2771;
    }
    else
    {
        uint _2833 = _2359 + 2u;
        uint _2837 = _2359 + 10u;
        float _2851 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2833].w)) * _899) * 0.949999988079071044921875);
        float _2852 = _2851 * _2851;
        float _2853 = cbLight._m0[_2833].x + _690;
        float _2854 = cbLight._m0[_2833].y + _691;
        float _2855 = cbLight._m0[_2833].z + _692;
        float _2859 = inversesqrt(dot(vec3(_2853, _2854, _2855), vec3(_2853, _2854, _2855)));
        float _2860 = _2859 * _2853;
        float _2861 = _2859 * _2854;
        float _2862 = _2859 * _2855;
        float _2863 = dot(vec3(_664, _665, _666), vec3(cbLight._m0[_2833].xyz));
        float _4910 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
        float _2866 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
        float _2867 = dot(vec3(_664, _665, _666), vec3(_2860, _2861, _2862));
        float _4921 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
        float _2870 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
        float _2871 = dot(vec3(cbLight._m0[_2833].xyz), vec3(_2860, _2861, _2862));
        float _4932 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
        float _2875 = _2852 * _2852;
        float _2879 = ((_2870 * _2870) * (_2875 + (-1.0))) + 1.0;
        float _2886 = exp2(log2(1.0 - (isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0)))) * 5.0);
        float _2893 = 1.0 - _2852;
        float _2903 = (0.5 / (((_2635 * ((_2866 * _2893) + _2852)) + 9.9999999392252902907785028219223e-09) + (((_2635 * _2893) + _2852) * _2866))) * _2866;
        float _4943 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
        float _2905 = (isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0))) * (_2875 / ((_2879 * _2879) * 3.141590118408203125));
        float _2906 = isnan(1.0) ? _2374 : (isnan(_2374) ? 1.0 : min(_2374, 1.0));
        _2827 = (((((_2886 * _2657) + _1017) * cbLight._m0[_2837].x) * _2905) * _2906) + _2769;
        _2829 = (((((_2886 * _2659) + _1018) * cbLight._m0[_2837].y) * _2905) * _2906) + _2770;
        _2831 = (((((_2886 * _2660) + _1019) * cbLight._m0[_2837].z) * _2905) * _2906) + _2771;
    }
    float _2937;
    float _2939;
    float _2941;
    if (_2544)
    {
        _2937 = _2827;
        _2939 = _2829;
        _2941 = _2831;
    }
    else
    {
        uint _2948 = _2359 + 3u;
        uint _2952 = _2359 + 11u;
        float _2966 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2948].w)) * _899) * 0.949999988079071044921875);
        float _2967 = _2966 * _2966;
        float _2968 = cbLight._m0[_2948].x + _690;
        float _2969 = cbLight._m0[_2948].y + _691;
        float _2970 = cbLight._m0[_2948].z + _692;
        float _2974 = inversesqrt(dot(vec3(_2968, _2969, _2970), vec3(_2968, _2969, _2970)));
        float _2975 = _2974 * _2968;
        float _2976 = _2974 * _2969;
        float _2977 = _2974 * _2970;
        float _2978 = dot(vec3(_664, _665, _666), vec3(cbLight._m0[_2948].xyz));
        float _4959 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
        float _2981 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
        float _2982 = dot(vec3(_664, _665, _666), vec3(_2975, _2976, _2977));
        float _4970 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
        float _2985 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
        float _2986 = dot(vec3(cbLight._m0[_2948].xyz), vec3(_2975, _2976, _2977));
        float _4981 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
        float _2990 = _2967 * _2967;
        float _2994 = ((_2985 * _2985) * (_2990 + (-1.0))) + 1.0;
        float _3001 = exp2(log2(1.0 - (isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0)))) * 5.0);
        float _3008 = 1.0 - _2967;
        float _3018 = (0.5 / (((_2635 * ((_2981 * _3008) + _2967)) + 9.9999999392252902907785028219223e-09) + (((_2635 * _3008) + _2967) * _2981))) * _2981;
        float _4992 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
        float _3020 = (isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0))) * (_2990 / ((_2994 * _2994) * 3.141590118408203125));
        float _3021 = isnan(1.0) ? _2375 : (isnan(_2375) ? 1.0 : min(_2375, 1.0));
        _2937 = (((((_3001 * _2657) + _1017) * cbLight._m0[_2952].x) * _3020) * _3021) + _2827;
        _2939 = (((((_3001 * _2659) + _1018) * cbLight._m0[_2952].y) * _3020) * _3021) + _2829;
        _2941 = (((((_3001 * _2660) + _1019) * cbLight._m0[_2952].z) * _3020) * _3021) + _2831;
    }
    float _3086;
    float _3088;
    float _3090;
    float _3092;
    float _3094;
    float _3096;
    if (_2357.y == 0u)
    {
        uvec4 _3042 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3043 = _3042.x;
        uint _3054 = uint((float(_3042.y) * floor(float(uint(cbSceneParam._m0[85u].y * _822) / _3043))) + floor(float(uint(cbSceneParam._m0[85u].x * _821) / _3043)));
        float _3064 = (log2(_2135 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3065 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
        uint _3068 = uint(isnan(14.0) ? _3065 : (isnan(_3065) ? 14.0 : min(_3065, 14.0)));
        uvec4 _3073 = texelFetch(g_lightClusterGridBuffer, int(((_3068 << 2u) + (_3054 << 6u)) >> 2u));
        uint _3074 = _3073.x;
        uint _3075 = _3042.z;
        float _3179;
        float _3181;
        float _3183;
        float _3185;
        float _3187;
        float _3189;
        if (((((1u << ((_3075 >> 4u) & 15u)) + 4294967295u) & _3074) == 0u) || ((_3075 & 240u) == 0u))
        {
            _3179 = 0.0;
            _3181 = 0.0;
            _3183 = 0.0;
            _3185 = 0.0;
            _3187 = 0.0;
            _3189 = 0.0;
        }
        else
        {
            float _3180;
            float _3182;
            float _3184;
            float _3186;
            float _3188;
            float _3190;
            float _3340 = 0.0;
            float _3341 = 0.0;
            float _3342 = 0.0;
            float _3343 = 0.0;
            float _3344 = 0.0;
            float _3345 = 0.0;
            uint _3346 = 0u;
            uint _3355;
            bool _3356;
            for (;;)
            {
                _3355 = texelFetch(g_lightClassification, int((((_3068 << 5u) + (_3054 << 9u)) + (_3346 << 2u)) >> 2u)).x;
                _3356 = _3355 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3356)
                {
                    frontier_phi_73_pred = _3345;
                    frontier_phi_73_pred_1 = _3344;
                    frontier_phi_73_pred_2 = _3343;
                    frontier_phi_73_pred_3 = _3342;
                    frontier_phi_73_pred_4 = _3341;
                    frontier_phi_73_pred_5 = _3340;
                }
                else
                {
                    float _3485;
                    float _3486;
                    float _3487;
                    float _3488;
                    float _3489;
                    float _3490;
                    uint _3491;
                    _3485 = _3340;
                    _3486 = _3341;
                    _3487 = _3342;
                    _3488 = _3343;
                    _3489 = _3344;
                    _3490 = _3345;
                    _3491 = _3355;
                    float _3412;
                    float _3413;
                    float _3414;
                    float _3415;
                    float _3416;
                    float _3417;
                    for (;;)
                    {
                        uint _3495 = uint(findLSB(_3491)) + (_3346 << 5u);
                        uint _3492 = (_3491 + 4294967295u) & _3491;
                        uint _3497 = _3495 * 48u;
                        vec4 _3511 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3497)).x, texelFetch(g_PointLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3497 + 3u)).x));
                        uint _3517 = (_3495 * 48u) + 4u;
                        vec4 _3530 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3517)).x, texelFetch(g_PointLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3517 + 3u)).x));
                        uint _3536 = (_3495 * 48u) + 8u;
                        vec3 _3547 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3536)).x, texelFetch(g_PointLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3536 + 2u)).x));
                        float _3551 = _3511.x - _2133;
                        float _3552 = _3511.y - _2134;
                        float _3553 = _3511.z - _2135;
                        float _3554 = dot(vec3(_3551, _3552, _3553), vec3(_3551, _3552, _3553));
                        float _3557 = inversesqrt(_3554);
                        float _3558 = _3557 * _3551;
                        float _3559 = _3557 * _3552;
                        float _3560 = _3557 * _3553;
                        float _3561 = dot(vec3(_844, _847, _850), vec3(_3558, _3559, _3560));
                        float _3566 = 1.0 - (_3554 * _3511.w);
                        float _5018 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                        float _3567 = isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0));
                        float _3568 = sqrt(_3554) * _3530.w;
                        float _3571 = 1.39999997615814208984375 / (_3568 + 1.39999997615814208984375);
                        float _3572 = _3571 * _3571;
                        float _3575 = ((1.0 - _3572) * _3561) + _3572;
                        float _3578 = _3568 * _3568;
                        float _3581 = ((isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0))) * _3567) / ((_3578 * 0.699999988079071044921875) + 1.0);
                        float _3585 = (-0.0) - _2133;
                        float _3586 = (-0.0) - _2134;
                        float _3587 = (-0.0) - _2135;
                        float _3591 = inversesqrt(dot(vec3(_3585, _3586, _3587), vec3(_3585, _3586, _3587)));
                        float _3592 = _3591 * _3585;
                        float _3593 = _3591 * _3586;
                        float _3594 = _3591 * _3587;
                        float _3601 = exp2(log2(1.0 / ((_3578 * 3.5) + 5.0)) * 0.25);
                        float _3602 = 1.0 - _1041;
                        float _3609 = sqrt(1.0 - ((1.0 - (_3602 * _3602)) * (1.0 - (_3601 * _3601))));
                        float _3610 = _3609 * _3609;
                        float _3611 = _3610 * _3610;
                        float _3612 = _3592 + _3558;
                        float _3613 = _3593 + _3559;
                        float _3614 = _3594 + _3560;
                        float _3618 = inversesqrt(dot(vec3(_3612, _3613, _3614), vec3(_3612, _3613, _3614)));
                        float _3622 = dot(vec3(_844, _847, _850), vec3(_3592, _3593, _3594));
                        float _5034 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                        float _3625 = isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0));
                        float _3626 = dot(vec3(_844, _847, _850), vec3(_3618 * _3612, _3618 * _3613, _3618 * _3614));
                        float _5045 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                        float _3629 = isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0));
                        float _3633 = ((_3629 * _3629) * (_3611 + (-1.0))) + 1.0;
                        float _3634 = _3571 * _3610;
                        float _3635 = _3634 * _3634;
                        float _3638 = ((1.0 - _3635) * _3561) + _3635;
                        float _5056 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                        float _3639 = isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0));
                        float _3640 = 1.0 - _3610;
                        float _3650 = (0.5 / (((_3639 * ((_3625 * _3640) + _3610)) + 9.9999999392252902907785028219223e-09) + (((_3639 * _3640) + _3610) * _3625))) * _3639;
                        float _5067 = isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0));
                        float _3661 = (((_3611 * 3.1415927410125732421875) * (isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0)))) / ((_3633 * _3633) * ((_3578 * 2.1991131305694580078125) + 3.141590118408203125))) * _3567;
                        _3415 = (_3581 * _3530.x) + _3488;
                        _3416 = (_3581 * _3530.y) + _3489;
                        _3417 = (_3581 * _3530.z) + _3490;
                        _3412 = (_3661 * _3547.x) + _3485;
                        _3413 = (_3661 * _3547.y) + _3486;
                        _3414 = (_3661 * _3547.z) + _3487;
                        if (_3492 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3485 = _3412;
                            _3486 = _3413;
                            _3487 = _3414;
                            _3488 = _3415;
                            _3489 = _3416;
                            _3490 = _3417;
                            _3491 = _3492;
                        }
                    }
                    frontier_phi_73_pred = _3417;
                    frontier_phi_73_pred_1 = _3416;
                    frontier_phi_73_pred_2 = _3415;
                    frontier_phi_73_pred_3 = _3414;
                    frontier_phi_73_pred_4 = _3413;
                    frontier_phi_73_pred_5 = _3412;
                }
                _3190 = frontier_phi_73_pred;
                _3188 = frontier_phi_73_pred_1;
                _3186 = frontier_phi_73_pred_2;
                _3184 = frontier_phi_73_pred_3;
                _3182 = frontier_phi_73_pred_4;
                _3180 = frontier_phi_73_pred_5;
                uint _3347 = _3346 + 1u;
                if (_3347 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3340 = _3180;
                    _3341 = _3182;
                    _3342 = _3184;
                    _3343 = _3186;
                    _3344 = _3188;
                    _3345 = _3190;
                    _3346 = _3347;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3179 = _3180;
            _3181 = _3182;
            _3183 = _3184;
            _3185 = _3186;
            _3187 = _3188;
            _3189 = _3190;
        }
        uvec4 _3193 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3194 = _3193.z;
        uint _3196 = (_3194 >> 8u) & 15u;
        float _3308;
        float _3310;
        float _3312;
        float _3314;
        float _3316;
        float _3318;
        if (((4294967295u << _3196) & _3074) == 0u)
        {
            _3308 = _3179;
            _3310 = _3181;
            _3312 = _3183;
            _3314 = _3185;
            _3316 = _3187;
            _3318 = _3189;
        }
        else
        {
            float _3333 = inversesqrt(dot(vec3(_2133, _2134, _2135), vec3(_2133, _2134, _2135)));
            float _3334 = _3333 * _2133;
            float _3335 = _3333 * _2134;
            float _3336 = _3333 * _2135;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3196 < ((_3194 >> 12u) & 15u))
            {
                float _3309;
                float _3311;
                float _3313;
                float _3315;
                float _3317;
                float _3319;
                float _3468 = _3179;
                float _3469 = _3181;
                float _3470 = _3183;
                float _3471 = _3185;
                float _3472 = _3187;
                float _3473 = _3189;
                uint _3474 = _3196;
                uint _3483;
                bool _3484;
                for (;;)
                {
                    _3483 = texelFetch(g_lightClassification, int((((_3068 << 5u) + (_3054 << 9u)) + (_3474 << 2u)) >> 2u)).x;
                    _3484 = _3483 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3484)
                    {
                        frontier_phi_84_pred = _3472;
                        frontier_phi_84_pred_1 = _3471;
                        frontier_phi_84_pred_2 = _3470;
                        frontier_phi_84_pred_3 = _3469;
                        frontier_phi_84_pred_4 = _3468;
                        frontier_phi_84_pred_5 = _3473;
                    }
                    else
                    {
                        float _3675;
                        float _3676;
                        float _3677;
                        float _3678;
                        float _3679;
                        float _3680;
                        float _3970;
                        float _3971;
                        float _3972;
                        float _3973;
                        float _3974;
                        float _3975;
                        float _3688 = _3468;
                        float _3689 = _3469;
                        float _3690 = _3470;
                        float _3691 = _3471;
                        float _3692 = _3472;
                        float _3693 = _3473;
                        uint _3694 = _3483;
                        uint _3695;
                        vec4 _3720;
                        float _3721;
                        vec4 _3736;
                        vec3 _3748;
                        vec4 _3763;
                        vec4 _3779;
                        float _3826;
                        bool _3827;
                        for (;;)
                        {
                            uint _3705 = ((_3474 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3694));
                            _3695 = (_3694 + 4294967295u) & _3694;
                            uint _3707 = _3705 * 40u;
                            _3720 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3707)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 3u)).x));
                            _3721 = _3720.w;
                            uint _3723 = (_3705 * 40u) + 4u;
                            _3736 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3723)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 3u)).x));
                            uint _3738 = (_3705 * 40u) + 8u;
                            _3748 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3738)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 2u)).x));
                            uint _3750 = (_3705 * 40u) + 16u;
                            _3763 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3750)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 3u)).x));
                            uint _3766 = (_3705 * 40u) + 20u;
                            _3779 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3766)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3766 + 3u)).x));
                            uint _3782 = (_3705 * 40u) + 24u;
                            vec4 _3795 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3782)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3782 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3782 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3782 + 3u)).x));
                            uint _3801 = (_3705 * 40u) + 28u;
                            vec4 _3814 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3801)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3801 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3801 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3801 + 3u)).x));
                            _3826 = fma(_2135, _3814.z, fma(_2134, _3814.y, _3814.x * _2133)) + _3814.w;
                            _3827 = !((fma(_2135, _3795.z, fma(_2134, _3795.y, _3795.x * _2133)) + _3795.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3827)
                            {
                                float _3854 = _3720.x - _2133;
                                float _3855 = _3720.y - _2134;
                                float _3856 = _3720.z - _2135;
                                float _3857 = dot(vec3(_3854, _3855, _3856), vec3(_3854, _3855, _3856));
                                float _3860 = inversesqrt(_3857);
                                float _3861 = _3860 * _3854;
                                float _3862 = _3860 * _3855;
                                float _3863 = _3860 * _3856;
                                float _3867 = 1.0 - (_3857 / (_3721 * _3721));
                                float _5078 = isnan(0.0) ? _3867 : (isnan(_3867) ? 0.0 : max(_3867, 0.0));
                                float _3868 = isnan(1.0) ? _5078 : (isnan(_5078) ? 1.0 : min(_5078, 1.0));
                                float _3872 = sqrt(_3857) * _3736.w;
                                float _3874 = 1.39999997615814208984375 / (_3872 + 1.39999997615814208984375);
                                float _3875 = _3874 * _3874;
                                float _3878 = ((1.0 - _3875) * dot(vec3(_3861, _3862, _3863), vec3(_844, _847, _850))) + _3875;
                                float _3881 = _3872 * _3872;
                                float _3885 = (fma(_2135, _3763.z, fma(_2134, _3763.y, _3763.x * _2133)) + _3763.w) / _3826;
                                float _3886 = (fma(_2135, _3779.z, fma(_2134, _3779.y, _3779.x * _2133)) + _3779.w) / _3826;
                                float _3890 = 1.0 - dot(vec2(_3885, _3886), vec2(_3885, _3886));
                                float _5094 = isnan(0.0) ? _3890 : (isnan(_3890) ? 0.0 : max(_3890, 0.0));
                                float _3891 = isnan(1.0) ? _5094 : (isnan(_5094) ? 1.0 : min(_5094, 1.0));
                                float _3892 = _3891 * (((isnan(0.0) ? _3878 : (isnan(_3878) ? 0.0 : max(_3878, 0.0))) * _3868) / ((_3881 * 0.699999988079071044921875) + 1.0));
                                float _3904 = exp2(log2(1.0 / ((_3881 * 3.5) + 5.0)) * 0.25);
                                float _3905 = 1.0 - _1041;
                                float _3912 = sqrt(1.0 - ((1.0 - (_3905 * _3905)) * (1.0 - (_3904 * _3904))));
                                float _3913 = _3912 * _3912;
                                float _3914 = _3913 * _3913;
                                float _3915 = _3861 - _3334;
                                float _3916 = _3862 - _3335;
                                float _3917 = _3863 - _3336;
                                float _3921 = inversesqrt(dot(vec3(_3915, _3916, _3917), vec3(_3915, _3916, _3917)));
                                float _3925 = dot(vec3(_844, _847, _850), vec3((-0.0) - _3334, (-0.0) - _3335, (-0.0) - _3336));
                                float _5105 = isnan(0.0) ? _3925 : (isnan(_3925) ? 0.0 : max(_3925, 0.0));
                                float _3928 = isnan(1.0) ? _5105 : (isnan(_5105) ? 1.0 : min(_5105, 1.0));
                                float _3929 = dot(vec3(_844, _847, _850), vec3(_3921 * _3915, _3921 * _3916, _3921 * _3917));
                                float _5116 = isnan(0.0) ? _3929 : (isnan(_3929) ? 0.0 : max(_3929, 0.0));
                                float _3932 = isnan(1.0) ? _5116 : (isnan(_5116) ? 1.0 : min(_5116, 1.0));
                                float _3936 = ((_3932 * _3932) * (_3914 + (-1.0))) + 1.0;
                                float _3937 = _3874 * _3913;
                                float _3938 = _3937 * _3937;
                                float _3944 = ((1.0 - _3938) * dot(vec3(_844, _847, _850), vec3(_3861, _3862, _3863))) + _3938;
                                float _5127 = isnan(0.0) ? _3944 : (isnan(_3944) ? 0.0 : max(_3944, 0.0));
                                float _3945 = isnan(1.0) ? _5127 : (isnan(_5127) ? 1.0 : min(_5127, 1.0));
                                float _3946 = 1.0 - _3913;
                                float _3956 = (0.5 / (((_3945 * ((_3928 * _3946) + _3913)) + 9.9999999392252902907785028219223e-09) + (((_3945 * _3946) + _3913) * _3928))) * _3945;
                                float _5138 = isnan(0.0) ? _3956 : (isnan(_3956) ? 0.0 : max(_3956, 0.0));
                                float _3966 = (_3891 * _3868) * (((_3914 * 3.1415927410125732421875) * (isnan(1.0) ? _5138 : (isnan(_5138) ? 1.0 : min(_5138, 1.0)))) / ((_3936 * _3936) * ((_3881 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3892 * _3736.y;
                                frontier_phi_90_pred_1 = _3892 * _3736.x;
                                frontier_phi_90_pred_2 = _3966 * _3748.z;
                                frontier_phi_90_pred_3 = _3966 * _3748.y;
                                frontier_phi_90_pred_4 = _3966 * _3748.x;
                                frontier_phi_90_pred_5 = _3892 * _3736.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3974 = frontier_phi_90_pred;
                            _3973 = frontier_phi_90_pred_1;
                            _3972 = frontier_phi_90_pred_2;
                            _3971 = frontier_phi_90_pred_3;
                            _3970 = frontier_phi_90_pred_4;
                            _3975 = frontier_phi_90_pred_5;
                            _3678 = _3973 + _3691;
                            _3679 = _3974 + _3692;
                            _3680 = _3975 + _3693;
                            _3675 = _3970 + _3688;
                            _3676 = _3971 + _3689;
                            _3677 = _3972 + _3690;
                            if (_3695 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3688 = _3675;
                                _3689 = _3676;
                                _3690 = _3677;
                                _3691 = _3678;
                                _3692 = _3679;
                                _3693 = _3680;
                                _3694 = _3695;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3679;
                        frontier_phi_84_pred_1 = _3678;
                        frontier_phi_84_pred_2 = _3677;
                        frontier_phi_84_pred_3 = _3676;
                        frontier_phi_84_pred_4 = _3675;
                        frontier_phi_84_pred_5 = _3680;
                    }
                    _3317 = frontier_phi_84_pred;
                    _3315 = frontier_phi_84_pred_1;
                    _3313 = frontier_phi_84_pred_2;
                    _3311 = frontier_phi_84_pred_3;
                    _3309 = frontier_phi_84_pred_4;
                    _3319 = frontier_phi_84_pred_5;
                    uint _3475 = _3474 + 1u;
                    if (_3475 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3468 = _3309;
                        _3469 = _3311;
                        _3470 = _3313;
                        _3471 = _3315;
                        _3472 = _3317;
                        _3473 = _3319;
                        _3474 = _3475;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3319;
                frontier_phi_65_66_ladder_1 = _3315;
                frontier_phi_65_66_ladder_2 = _3317;
                frontier_phi_65_66_ladder_3 = _3311;
                frontier_phi_65_66_ladder_4 = _3309;
                frontier_phi_65_66_ladder_5 = _3313;
            }
            else
            {
                frontier_phi_65_66_ladder = _3189;
                frontier_phi_65_66_ladder_1 = _3185;
                frontier_phi_65_66_ladder_2 = _3187;
                frontier_phi_65_66_ladder_3 = _3181;
                frontier_phi_65_66_ladder_4 = _3179;
                frontier_phi_65_66_ladder_5 = _3183;
            }
            _3308 = frontier_phi_65_66_ladder_4;
            _3310 = frontier_phi_65_66_ladder_3;
            _3312 = frontier_phi_65_66_ladder_5;
            _3314 = frontier_phi_65_66_ladder_1;
            _3316 = frontier_phi_65_66_ladder_2;
            _3318 = frontier_phi_65_66_ladder;
        }
        float _3323 = isnan(1.0) ? _1031 : (isnan(_1031) ? 1.0 : min(_1031, 1.0));
        _3086 = (_3323 * _3314) + _2599;
        _3088 = (_3323 * _3316) + _2601;
        _3090 = (_3323 * _3318) + _2603;
        _3092 = ((_3308 * _1017) * _3323) + _2937;
        _3094 = ((_3310 * _1018) * _3323) + _2939;
        _3096 = ((_3312 * _1019) * _3323) + _2941;
    }
    else
    {
        _3086 = _2599;
        _3088 = _2601;
        _3090 = _2603;
        _3092 = _2937;
        _3094 = _2939;
        _3096 = _2941;
    }
    uint _3102 = _924 + uint(cbMatDynParam._m0[0u].w);
    float _3108 = cbInstanceData._m0[_3102].x * ((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _706) + cbMatDynParam._m0[7u].x) + (((_746 - (_746 * _672)) + (cbMatDynParam._m0[11u].x * _777)) * cbMatDynParam._m0[9u].x));
    float _3109 = cbInstanceData._m0[_3102].y * ((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _706) + cbMatDynParam._m0[7u].y) + (((_748 - (_748 * _672)) + (cbMatDynParam._m0[11u].y * _777)) * cbMatDynParam._m0[9u].y));
    float _3110 = cbInstanceData._m0[_3102].z * ((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _706) + cbMatDynParam._m0[7u].z) + (((_750 - (_750 * _672)) + (cbMatDynParam._m0[11u].z * _777)) * cbMatDynParam._m0[9u].z));
    float _5154 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _5165 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _5176 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _5187 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _3128 = (((isnan(1.0) ? _5154 : (isnan(_5154) ? 1.0 : min(_5154, 1.0))) * (_3086 + ((isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))) * _1031))) + ((_3092 + ((isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0))) * _1863)) * cbPerFrame._m0[3u].x)) + _3108;
    float _3130 = (_3109 + ((_3094 + ((isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0))) * _1863)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5165 : (isnan(_5165) ? 1.0 : min(_5165, 1.0))) * (_3088 + ((isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))) * _1031)));
    float _3132 = (_3110 + ((_3096 + ((isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0))) * _1863)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5176 : (isnan(_5176) ? 1.0 : min(_5176, 1.0))) * (_3090 + ((isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))) * _1031)));
    float _3133 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
    float _3134 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
    float _3135 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
    float _3140 = cbMatDynParam._m0[12u].y - (cbMatDynParam._m0[12u].y * ((((isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) - _732) * _706) + _732));
    float _3145 = cbInstanceData._m0[_923 + 6u].w * (isnan(1.0) ? _5187 : (isnan(_5187) ? 1.0 : min(_5187, 1.0)));
    float _3150 = _821 / cbSceneParam._m0[86u].x;
    float _3151 = _822 / cbSceneParam._m0[86u].y;
    vec4 _3165 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3150, _3151, (log2((isnan(cbSceneParam._m0[77u].w) ? _803 : (isnan(_803) ? cbSceneParam._m0[77u].w : min(_803, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3167 = _3165.x;
    float _3168 = _3165.y;
    float _3169 = _3165.z;
    float _3170 = _3165.w;
    float _3241;
    float _3243;
    float _3245;
    float _3247;
    if (_803 > cbSceneParam._m0[78u].w)
    {
        float _3204 = isnan(_803) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _803 : min(cbSceneParam._m0[80u].w, _803));
        float _3205 = _3204 / _803;
        float _3216 = _3205 * _299;
        float _3217 = _300 * _3205;
        float _3218 = (-0.0) - _3217;
        float _3219 = _3205 * _301;
        float _3221 = (cbSceneParam._m0[77u].w * _3218) / _3204;
        float _3222 = _3221 + cbSceneParam._m0[79u].w;
        float _3223 = cbSceneParam._m0[79u].w - _3217;
        float _3229 = sqrt(((_3216 * _3216) + (_3217 * _3217)) + (_3219 * _3219));
        float _3232 = (1.0 - (cbSceneParam._m0[77u].w / _3204)) * _3229;
        float _3237 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3239 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3425;
        if (abs((_3218 - _3221) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3425 = ((((_3222 > 0.0) ? exp2(_3237 * _3222) : (2.0 - exp2(_3239 * _3222))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3232;
        }
        else
        {
            float _3369 = 1.0 / cbSceneParam._m0[80u].x;
            float _3370 = isnan(_3223) ? _3222 : (isnan(_3222) ? _3223 : max(_3222, _3223));
            float _3371 = isnan(_3223) ? _3222 : (isnan(_3222) ? _3223 : min(_3222, _3223));
            float _3380 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : min(_3370, 0.0));
            float _3381 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : min(_3371, 0.0));
            _3425 = ((abs(_3229 / _3218) * cbSceneParam._m0[80u].y) * ((((_3380 - _3381) * 2.0) - ((exp2(_3237 * (isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0)))) - exp2(_3237 * (isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0))))) * _3369)) - ((exp2(_3239 * _3380) - exp2(_3239 * _3381)) * _3369))) + (_3232 * cbSceneParam._m0[80u].z);
        }
        vec4 _3427 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3150, _3151, 1.0), 0.0);
        float _3436 = exp2((_3425 * (-1.44269502162933349609375)) * (1.0 - _3427.w));
        float _3437 = log2(_3436);
        float _3453 = log2(_3170);
        _3241 = (exp2(_3453 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3437 * cbSceneParam._m0[78u].x)) * _3427.x) / cbSceneParam._m0[78u].x)) + _3167;
        _3243 = (exp2(_3453 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3437 * cbSceneParam._m0[78u].y)) * _3427.y) / cbSceneParam._m0[78u].y)) + _3168;
        _3245 = (exp2(_3453 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3437 * cbSceneParam._m0[78u].z)) * _3427.z) / cbSceneParam._m0[78u].z)) + _3169;
        _3247 = _3436 * _3170;
    }
    else
    {
        _3241 = _3167;
        _3243 = _3168;
        _3245 = _3169;
        _3247 = _3170;
    }
    bool _3463;
    vec4 _3257;
    vec4 _3279;
    float _3281;
    float _3285;
    float _3286;
    float _3287;
    float _3290;
    float _3293;
    float _3296;
    float _3297;
    bool _3307;
    for (;;)
    {
        _3257 = cbMatDynParam._m0[0u];
        float _3259 = roundEven(_3257.y);
        bool _3260 = _3259 == 3.0;
        float _3261 = log2(_3247);
        float _3265 = exp2(_3261 * cbSceneParam._m0[78u].x);
        float _3266 = exp2(_3261 * cbSceneParam._m0[78u].y);
        float _3267 = exp2(_3261 * cbSceneParam._m0[78u].z);
        float _3268 = _3265 * _3133;
        float _3269 = _3266 * _3134;
        float _3270 = _3267 * _3135;
        float _3277 = _810 + (-0.5);
        _3279 = cbMtdParam._m0[1u];
        _3281 = _3279.y * _3277;
        float _3284 = (_3259 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3285 = _3284 * (_3260 ? _3268 : (_3268 + (cbSceneParam._m0[72u].w * _3241)));
        _3286 = _3284 * (_3260 ? _3269 : (_3269 + (cbSceneParam._m0[72u].w * _3243)));
        _3287 = _3284 * (_3260 ? _3270 : (_3270 + (cbSceneParam._m0[72u].w * _3245)));
        _3290 = ((_3140 * _3108) * _3265) * _3284;
        _3293 = ((_3140 * _3109) * _3266) * _3284;
        _3296 = ((_3140 * _3110) * _3267) * _3284;
        _3297 = _3277 * 0.999000012874603271484375;
        _3307 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3307)
        {
            if ((cbInstanceData._m0[_923 + 7u].x + _3297) < 0.5)
            {
                _3463 = true;
                break;
            }
        }
        uint _3404 = _924 + uint(_3257.w);
        if ((cbInstanceData._m0[_3404].w < 1.0) && ((cbInstanceData._m0[_3404].w + _3297) < 0.5))
        {
            _3463 = true;
            break;
        }
        if ((_3281 + _489) < _3279.x)
        {
            _3463 = true;
            break;
        }
        _3463 = false;
        break;
    }
    float _3666;
    if (_3463)
    {
        discard_state = true;
        _3666 = 0.0;
    }
    else
    {
        _3666 = _3145;
    }
    SV_Target.x = _3285;
    SV_Target.y = _3286;
    SV_Target.z = _3287;
    SV_Target.w = _3666;
    SV_Target_1.x = _3290;
    SV_Target_1.y = _3293;
    SV_Target_1.z = _3296;
    SV_Target_1.w = _3145;
    discard_exit();
}


