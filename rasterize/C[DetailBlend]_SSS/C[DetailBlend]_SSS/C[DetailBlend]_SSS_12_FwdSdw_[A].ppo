#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1327;
float _3998;
float _3999;
float _4000;
float _4001;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = _227 * NORMAL.x;
    float _229 = _227 * NORMAL.y;
    float _230 = _227 * NORMAL.z;
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242;
    float _243;
    float _244;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
        _244 = (-0.0) - _230;
    }
    else
    {
        _242 = _228;
        _243 = _229;
        _244 = _230;
    }
    vec4 _258 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _263 = _258.z;
    float _264 = _258.w;
    float _270 = exp2(log2(_263 * 22.0) * 260.0);
    float _271 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _272 = isnan(1.0) ? _271 : (isnan(_271) ? 1.0 : min(_271, 1.0));
    vec4 _286 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _297 = cbMtdParam._m0[10u].x * _286.x;
    float _298 = cbMtdParam._m0[10u].y * _286.y;
    float _299 = cbMtdParam._m0[10u].z * _286.z;
    vec4 _311 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _327 = exp2(log2(1.0 - _264) * 8.0);
    vec4 _339 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _355 = exp2(log2(_264) * 8.0);
    vec4 _368 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    vec4 _393 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _415 = (((((_311.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _393.x) - _297) * _272) + _297;
    float _416 = (((((_311.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _393.y) - _298) * _272) + _298;
    float _417 = (((((_311.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _393.z) - _299) * _272) + _299;
    float _424 = (((cbMtdParam._m0[12u].x * _339.x) - _415) * _327) + _415;
    float _425 = (((cbMtdParam._m0[12u].y * _339.y) - _416) * _327) + _416;
    float _426 = (((cbMtdParam._m0[12u].z * _339.z) - _417) * _327) + _417;
    float _433 = (((cbMtdParam._m0[11u].x * _368.x) - _424) * _355) + _424;
    float _434 = (((cbMtdParam._m0[11u].y * _368.y) - _425) * _355) + _425;
    float _435 = (((cbMtdParam._m0[11u].z * _368.z) - _426) * _355) + _426;
    float _436 = _393.w * _311.w;
    float _465 = (((texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _272) + cbMtdParam._m0[15u].y;
    float _468 = ((cbMtdParam._m0[14u].y - _465) * _327) + _465;
    float _471 = ((cbMtdParam._m0[15u].x - _468) * _355) + _468;
    vec4 _484 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _486 = _484.x;
    float _487 = _484.y;
    float _493 = cbMtdParam._m0[13u].y + _484.z;
    vec4 _505 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _524 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _541 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _552 = ((((_263 * 2.0) * (cbMtdParam._m0[13u].x + _505.z)) - _493) * _272) + _493;
    float _556 = (((_524.z - _552) + cbMtdParam._m0[14u].x) * _327) + _552;
    float _560 = (((_541.z - _556) + cbMtdParam._m0[13u].w) * _355) + _556;
    float _564 = (_258.x * 2.0) + (-1.0);
    float _566 = (_258.y * 2.0) + (-1.0);
    float _567 = dot(vec2(_564, _566), vec2(_564, _566));
    float _4020 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _572 = sqrt(1.0 - (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))));
    float _577 = ((_505.x - _486) * _272) + _486;
    float _578 = ((_505.y - _487) * _272) + _487;
    float _583 = ((_524.x - _577) * _327) + _577;
    float _584 = ((_524.y - _578) * _327) + _578;
    float _597 = ((((((_541.x - _583) * _355) + _583) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _564;
    float _598 = ((((((_541.y - _584) * _355) + _584) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _566;
    float _601 = fma(_572, _242, fma(_598, _234 * TANGENT.x, (_220 * _212) * _597));
    float _604 = fma(_572, _243, fma(_598, _234 * TANGENT.y, (_220 * _213) * _597));
    float _607 = fma(_572, _244, fma(_598, _234 * TANGENT.z, (_220 * _214) * _597));
    float _611 = inversesqrt(dot(vec3(_601, _604, _607), vec3(_601, _604, _607)));
    float _612 = _611 * _601;
    float _613 = _611 * _604;
    float _614 = _611 * _607;
    float _4031 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _615 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _4042 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _616 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _4053 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _617 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _4064 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _618 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _4075 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _619 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _4086 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _620 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _636 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _676 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _686 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _676);
    float _687 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _676);
    float _688 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _676);
    float _692 = inversesqrt(dot(vec3(_686, _687, _688), vec3(_686, _687, _688)));
    float _693 = _686 * _692;
    float _694 = _687 * _692;
    float _695 = _688 * _692;
    vec4 _700 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _702 = _700.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1006 = sqrt(((_686 * _686) + (_687 * _687)) + (_688 * _688));
        float _1012 = (cbMatDynParam._m0[5u].x * _1006) + cbMatDynParam._m0[5u].y;
        float _4097 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1017 = (cbMatDynParam._m0[5u].z * _1006) + cbMatDynParam._m0[5u].w;
        float _4108 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) - _1013)) + _1013) < ((_702 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _713 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _714 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _716 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _718 = _716.w;
    float _736 = fma(_614, cbSceneParam._m0[5u].z, fma(_613, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _612));
    float _739 = fma(_614, cbSceneParam._m0[6u].z, fma(_613, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _612));
    float _742 = fma(_614, cbSceneParam._m0[7u].z, fma(_613, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _612));
    vec4 _744 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _746 = _744.x;
    float _758 = (((_744.y - _616) + (_744.w * _616)) * cbMtdParam._m0[3u].x) + _616;
    vec4 _759 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _775 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_746 * _746)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _759.z;
    float _783 = (((cbMatDynParam._m0[15u].x - _620) * cbMatDynParam._m0[15u].w) * _775) + _620;
    float _791 = ((_775 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _758)) + _758;
    uint _815 = uint(roundEven(NORMAL.w)) * 13u;
    uint _816 = _815 + 9u;
    uint _817 = _816 + uint(cbMatDynParam._m0[0u].w);
    float _823 = (cbMtdParam._m0[0u].x * _617) * cbInstanceData._m0[_817].x;
    float _824 = (cbMtdParam._m0[0u].y * _618) * cbInstanceData._m0[_817].y;
    float _825 = (cbMtdParam._m0[0u].z * _619) * cbInstanceData._m0[_817].z;
    float _4119 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _826 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _4130 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _827 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _4141 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _828 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    vec4 _829 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _834 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _845 = (((_834.x - _783) + (_834.w * _783)) * cbMtdParam._m0[3u].x) + _783;
    float _858 = (cbMtdParam._m0[3u].x * (((_826 * _718) - _826) + _829.x)) + _826;
    float _859 = (cbMtdParam._m0[3u].x * (((_827 * _718) - _827) + _829.y)) + _827;
    float _860 = (cbMtdParam._m0[3u].x * (((_828 * _718) - _828) + _829.z)) + _828;
    float _874 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_783 * (_617 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_783 * (_618 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_783 * (_619 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _878 = _874 * cbMatDynParam._m0[13u].w;
    float _888 = (_878 * (cbMatDynParam._m0[13u].x - _858)) + _858;
    float _889 = (_878 * (cbMatDynParam._m0[13u].y - _859)) + _859;
    float _890 = (_878 * (cbMatDynParam._m0[13u].z - _860)) + _860;
    float _898 = ((_874 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _845)) + _845;
    float _899 = 1.0 - _898;
    float _900 = _899 * _888;
    float _901 = _899 * _889;
    float _902 = _899 * _890;
    float _906 = (_888 + (-0.039999999105930328369140625)) * _898;
    float _907 = (_889 + (-0.039999999105930328369140625)) * _898;
    float _908 = (_890 + (-0.039999999105930328369140625)) * _898;
    float _909 = _906 + 0.039999999105930328369140625;
    float _910 = _907 + 0.039999999105930328369140625;
    float _911 = _908 + 0.039999999105930328369140625;
    vec4 _920 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _713, cbSceneParam._m0[86u].y * _714));
    float _923 = _920.x * TEXCOORD_4;
    float _924 = dot(vec3(_612, _613, _614), vec3(_693, _694, _695));
    float _927 = _924 * 2.0;
    float _931 = (_927 * _612) - _693;
    float _932 = (_927 * _613) - _694;
    float _933 = (_927 * _614) - _695;
    float _937 = abs(dot(vec3(_693, _694, _695), vec3(_612, _613, _614)));
    float _4152 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _939 = sqrt(_791);
    float _952 = exp2((_939 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_939 * 3.0));
    float _958 = (1.0 - _952) * ((_939 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _959 = _952 * _939;
    float _987 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _991 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _995 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1326;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1051 = fma(_995, cbModelParam._m0[26u].z, fma(_991, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _987));
        float _1055 = fma(_995, cbModelParam._m0[27u].z, fma(_991, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _987));
        float _1059 = fma(_995, cbModelParam._m0[28u].z, fma(_991, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _987));
        float _1084 = _987 + _612;
        float _1085 = _991 + _613;
        float _1086 = _995 + _614;
        float _1096 = fma(_1086, cbModelParam._m0[26u].z, fma(_1085, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1084)) - _1051;
        float _1097 = fma(_1086, cbModelParam._m0[27u].z, fma(_1085, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1084)) - _1055;
        float _1098 = fma(_1086, cbModelParam._m0[28u].z, fma(_1085, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1084)) - _1059;
        float _1102 = inversesqrt(dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098)));
        float _1115 = ((_1102 * _1096) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1051 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1116 = ((_1102 * _1097) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1055 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1117 = ((_1102 * _1098) / cbModelParam._m0[34u].z) + ((((((_1059 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        float _1154 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1120.x + (-0.5));
        float _1156 = _1154 * (_1120.y + (-0.5));
        float _1157 = _1154 * (_1120.z + (-0.5));
        float _1164 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1127.x + (-0.5));
        float _1166 = _1164 * (_1127.y + (-0.5));
        float _1167 = _1164 * (_1127.z + (-0.5));
        float _1174 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1134.x + (-0.5));
        float _1176 = _1174 * (_1134.y + (-0.5));
        float _1177 = _1174 * (_1134.z + (-0.5));
        float _1184 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1141.x + (-0.5));
        float _1186 = _1184 * (_1141.y + (-0.5));
        float _1187 = _1184 * (_1141.z + (-0.5));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = _1155 * 0.5;
        float _1192 = _1165 * 0.5;
        float _1193 = _1175 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1208 = (dot(vec3(_612, _613, _614), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _4178 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1218 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _4189 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _4200 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_1220 + 1.0))) + _1225) * _1188;
        float _1235 = _1156 * 0.5;
        float _1236 = _1166 * 0.5;
        float _1237 = _1176 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_612, _613, _614), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _4211 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _4222 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _4233 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_1262 + 1.0))) + _1267) * _1189;
        float _1277 = _1157 * 0.5;
        float _1278 = _1167 * 0.5;
        float _1279 = _1177 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(_612, _613, _614), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _4244 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _4255 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _4266 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_1304 + 1.0))) + _1309) * _1190;
        _1326 = _1157;
        _1328 = _1156;
        _1329 = _1155;
        _1330 = _1167;
        _1331 = _1166;
        _1332 = _1165;
        _1333 = _1177;
        _1334 = _1176;
        _1335 = _1175;
        _1336 = _1190;
        _1337 = _1189;
        _1338 = _1188;
        _1339 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
        _1340 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
        _1341 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
    }
    else
    {
        _1326 = _1327;
        _1328 = _1327;
        _1329 = _1327;
        _1330 = _1327;
        _1331 = _1327;
        _1332 = _1327;
        _1333 = _1327;
        _1334 = _1327;
        _1335 = _1327;
        _1336 = _1327;
        _1337 = _1327;
        _1338 = _1327;
        _1339 = 0.0;
        _1340 = 0.0;
        _1341 = 0.0;
    }
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1370 = fma(_995, cbModelParam._m0[30u].z, fma(_991, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _987));
        float _1374 = fma(_995, cbModelParam._m0[31u].z, fma(_991, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _987));
        float _1378 = fma(_995, cbModelParam._m0[32u].z, fma(_991, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _987));
        float _1401 = _987 + _612;
        float _1402 = _991 + _613;
        float _1403 = _995 + _614;
        float _1413 = fma(_1403, cbModelParam._m0[30u].z, fma(_1402, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1401)) - _1370;
        float _1414 = fma(_1403, cbModelParam._m0[31u].z, fma(_1402, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1401)) - _1374;
        float _1415 = fma(_1403, cbModelParam._m0[32u].z, fma(_1402, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1401)) - _1378;
        float _1419 = inversesqrt(dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415)));
        float _1432 = ((_1419 * _1413) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1370 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1433 = ((_1419 * _1414) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1374 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1434 = ((_1419 * _1415) / cbModelParam._m0[35u].z) + ((((((_1378 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1436 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        vec4 _1443 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        vec4 _1450 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        vec4 _1457 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        float _1469 = exp2((_1436.w + (-0.5)) * 20.0) * 2.0;
        float _1470 = _1469 * (_1436.x + (-0.5));
        float _1471 = _1469 * (_1436.y + (-0.5));
        float _1472 = _1469 * (_1436.z + (-0.5));
        float _1479 = exp2((_1443.w + (-0.5)) * 20.0) * 2.0;
        float _1480 = _1479 * (_1443.x + (-0.5));
        float _1481 = _1479 * (_1443.y + (-0.5));
        float _1482 = _1479 * (_1443.z + (-0.5));
        float _1489 = exp2((_1450.w + (-0.5)) * 20.0) * 2.0;
        float _1490 = _1489 * (_1450.x + (-0.5));
        float _1491 = _1489 * (_1450.y + (-0.5));
        float _1492 = _1489 * (_1450.z + (-0.5));
        float _1499 = exp2((_1457.w + (-0.5)) * 20.0) * 2.0;
        float _1500 = _1499 * (_1457.x + (-0.5));
        float _1501 = _1499 * (_1457.y + (-0.5));
        float _1502 = _1499 * (_1457.z + (-0.5));
        float _1503 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1504 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1505 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1506 = _1470 * 0.5;
        float _1507 = _1480 * 0.5;
        float _1508 = _1490 * 0.5;
        float _1509 = dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508));
        float _1514 = (_1509 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1509);
        float _1522 = (dot(vec3(_612, _613, _614), vec3(_1514 * _1506, _1514 * _1507, _1514 * _1508)) + 1.0) * 0.5;
        float _4307 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1531 = sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508)) / (_1503 + 9.9999997473787516355514526367188e-06);
        float _4318 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1533 = _1532 * 2.0;
        float _1537 = (1.0 - _1532) / (_1532 + 1.0);
        float _4329 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1547 = ((((1.0 - _1538) * (_1533 + 2.0)) * exp2(log2(isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_1533 + 1.0))) + _1538) * _1503;
        float _1548 = _1471 * 0.5;
        float _1549 = _1481 * 0.5;
        float _1550 = _1491 * 0.5;
        float _1551 = dot(vec3(_1548, _1549, _1550), vec3(_1548, _1549, _1550));
        float _1556 = (_1551 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1551);
        float _1564 = (dot(vec3(_612, _613, _614), vec3(_1556 * _1548, _1556 * _1549, _1556 * _1550)) + 1.0) * 0.5;
        float _4340 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1573 = sqrt(((_1549 * _1549) + (_1548 * _1548)) + (_1550 * _1550)) / (_1504 + 9.9999997473787516355514526367188e-06);
        float _4351 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1575 = _1574 * 2.0;
        float _1579 = (1.0 - _1574) / (_1574 + 1.0);
        float _4362 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1589 = ((((1.0 - _1580) * (_1575 + 2.0)) * exp2(log2(isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_1575 + 1.0))) + _1580) * _1504;
        float _1590 = _1472 * 0.5;
        float _1591 = _1482 * 0.5;
        float _1592 = _1492 * 0.5;
        float _1593 = dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592));
        float _1598 = (_1593 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1593);
        float _1606 = (dot(vec3(_612, _613, _614), vec3(_1598 * _1590, _1598 * _1591, _1598 * _1592)) + 1.0) * 0.5;
        float _4373 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1615 = sqrt(((_1591 * _1591) + (_1590 * _1590)) + (_1592 * _1592)) / (_1505 + 9.9999997473787516355514526367188e-06);
        float _4384 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _1617 = _1616 * 2.0;
        float _1621 = (1.0 - _1616) / (_1616 + 1.0);
        float _4395 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _1631 = ((((1.0 - _1622) * (_1617 + 2.0)) * exp2(log2(isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_1617 + 1.0))) + _1622) * _1505;
        _1639 = _1472;
        _1640 = _1471;
        _1641 = _1470;
        _1642 = _1482;
        _1643 = _1481;
        _1644 = _1480;
        _1645 = _1492;
        _1646 = _1491;
        _1647 = _1490;
        _1648 = _1505;
        _1649 = _1504;
        _1650 = _1503;
        _1651 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)));
        _1652 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)));
        _1653 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)));
    }
    else
    {
        _1639 = _1327;
        _1640 = _1327;
        _1641 = _1327;
        _1642 = _1327;
        _1643 = _1327;
        _1644 = _1327;
        _1645 = _1327;
        _1646 = _1327;
        _1647 = _1327;
        _1648 = _1327;
        _1649 = _1327;
        _1650 = _1327;
        _1651 = 0.0;
        _1652 = 0.0;
        _1653 = 0.0;
    }
    float _1663 = (cbModelParam._m0[1u].x * (_1651 - _1339)) + _1339;
    float _1664 = (cbModelParam._m0[1u].x * (_1652 - _1340)) + _1340;
    float _1665 = (cbModelParam._m0[1u].x * (_1653 - _1341)) + _1341;
    float _1686 = fma(_1665, cbSceneParam._m0[89u].z, fma(_1664, cbSceneParam._m0[89u].y, _1663 * cbSceneParam._m0[89u].x));
    float _1689 = fma(_1665, cbSceneParam._m0[90u].z, fma(_1664, cbSceneParam._m0[90u].y, _1663 * cbSceneParam._m0[90u].x));
    float _1692 = fma(_1665, cbSceneParam._m0[91u].z, fma(_1664, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1663));
    float _1707 = _931 * 0.5;
    float _1708 = _932 * 0.5;
    float _1709 = _933 * 0.5;
    float _1710 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1641, _1644, _1647, _1650));
    float _1713 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1640, _1643, _1646, _1649));
    float _1716 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1639, _1642, _1645, _1648));
    float _1747;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1723 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1326, _1330, _1333, _1336));
        float _1727 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1328, _1331, _1334, _1337));
        float _1731 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1329, _1332, _1335, _1338));
        float _1738 = dot(vec4(cbModelParam._m0[39u]), vec4(_1707, _1708, _1709, 1.0));
        _1747 = dot(vec3(isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)), isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)), isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1738) ? 0.0 : (isnan(0.0) ? _1738 : max(0.0, _1738))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1747 = 1.0;
    }
    float _1758;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1749 = dot(vec4(cbModelParam._m0[40u]), vec4(_1707, _1708, _1709, 1.0));
        _1758 = dot(vec3(isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)), isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)), isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1749) ? 0.0 : (isnan(0.0) ? _1749 : max(0.0, _1749))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1758 = 1.0;
    }
    float _1762 = (_1758 * cbModelParam._m0[1u].x) + (_1747 * (1.0 - cbModelParam._m0[1u].x));
    float _1772 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _791);
    float _1773 = isnan(_1772) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1772 : min(cbModelParam._m0[25u].z, _1772));
    float _1853;
    float _1855;
    float _1857;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1820 = fma(_995, cbModelParam._m0[13u].z, fma(_991, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _987)) + cbModelParam._m0[13u].w;
        float _1824 = fma(_995, cbModelParam._m0[14u].z, fma(_991, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _987)) + cbModelParam._m0[14u].w;
        float _1828 = fma(_995, cbModelParam._m0[15u].z, fma(_991, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _987)) + cbModelParam._m0[15u].w;
        float _1831 = fma(_933, cbModelParam._m0[13u].z, fma(_932, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _931));
        float _1834 = fma(_933, cbModelParam._m0[14u].z, fma(_932, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _931));
        float _1837 = fma(_933, cbModelParam._m0[15u].z, fma(_932, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _931));
        float _1865;
        if (_1831 > 0.0)
        {
            _1865 = abs((1.0 - _1820) / _1831);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1820 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1865 = frontier_phi_19_17_ladder;
        }
        float _2040;
        if (_1834 > 0.0)
        {
            _2040 = abs((1.0 - _1824) / _1834);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1824 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2040 = frontier_phi_28_24_ladder;
        }
        float _2335;
        if (_1837 > 0.0)
        {
            _2335 = abs((1.0 - _1828) / _1837);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1828 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2335 = frontier_phi_40_35_ladder;
        }
        float _2337 = isnan(_2040) ? _1865 : (isnan(_1865) ? _2040 : min(_1865, _2040));
        float _2338 = isnan(_2335) ? _2337 : (isnan(_2337) ? _2335 : min(_2337, _2335));
        float _2342 = (_2338 * _1831) + _1820;
        float _2343 = (_2338 * _1834) + _1824;
        float _2344 = (_2338 * _1837) + _1828;
        float _2345 = _2338 * 9.9999997473787516355514526367188e-05;
        float _2347 = (-1.0) - _2345;
        float _2349 = _2345 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2344 > _2349) || ((_2344 < _2347) || ((_2343 > _2349) || ((_2343 < _2347) || ((_2342 < _2347) || (_2342 > _2349))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2489 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2344, cbModelParam._m0[9u].z, fma(_2343, cbModelParam._m0[9u].y, _2342 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2344, cbModelParam._m0[10u].z, fma(_2343, cbModelParam._m0[10u].y, _2342 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2344, cbModelParam._m0[11u].z, fma(_2343, cbModelParam._m0[11u].y, _2342 * cbModelParam._m0[11u].x))), _1773);
            frontier_phi_18_40_ladder = _2489.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2489.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2489.x * cbModelParam._m0[1u].y;
        }
        _1853 = frontier_phi_18_40_ladder_2;
        _1855 = frontier_phi_18_40_ladder_1;
        _1857 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1841 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_931, _932, _933), _1773);
        _1853 = _1841.x * cbModelParam._m0[1u].y;
        _1855 = _1841.y * cbModelParam._m0[1u].y;
        _1857 = _1841.z * cbModelParam._m0[1u].y;
    }
    float _1861 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _791);
    float _1862 = isnan(_1861) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1861 : min(cbModelParam._m0[25u].w, _1861));
    float _1955;
    float _1957;
    float _1959;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1919 = fma(_995, cbModelParam._m0[21u].z, fma(_991, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _987)) + cbModelParam._m0[21u].w;
        float _1923 = fma(_995, cbModelParam._m0[22u].z, fma(_991, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _987)) + cbModelParam._m0[22u].w;
        float _1927 = fma(_995, cbModelParam._m0[23u].z, fma(_991, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _987)) + cbModelParam._m0[23u].w;
        float _1930 = fma(_933, cbModelParam._m0[21u].z, fma(_932, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _931));
        float _1933 = fma(_933, cbModelParam._m0[22u].z, fma(_932, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _931));
        float _1936 = fma(_933, cbModelParam._m0[23u].z, fma(_932, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _931));
        float _2045;
        if (_1930 > 0.0)
        {
            _2045 = abs((1.0 - _1919) / _1930);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1919 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2045 = frontier_phi_30_26_ladder;
        }
        float _2362;
        if (_1933 > 0.0)
        {
            _2362 = abs((1.0 - _1923) / _1933);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1923 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2362 = frontier_phi_42_37_ladder;
        }
        float _2700;
        if (_1936 > 0.0)
        {
            _2700 = abs((1.0 - _1927) / _1936);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1927 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2700 = frontier_phi_52_49_ladder;
        }
        float _2702 = isnan(_2362) ? _2045 : (isnan(_2045) ? _2362 : min(_2045, _2362));
        float _2703 = isnan(_2700) ? _2702 : (isnan(_2702) ? _2700 : min(_2702, _2700));
        float _2707 = (_2703 * _1930) + _1919;
        float _2708 = (_2703 * _1933) + _1923;
        float _2709 = (_2703 * _1936) + _1927;
        float _2710 = _2703 * 9.9999997473787516355514526367188e-05;
        float _2711 = (-1.0) - _2710;
        float _2713 = _2710 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2709 > _2713) || ((_2709 < _2711) || ((_2708 > _2713) || ((_2708 < _2711) || ((_2707 < _2711) || (_2707 > _2713))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2831 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2709, cbModelParam._m0[17u].z, fma(_2708, cbModelParam._m0[17u].y, _2707 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2709, cbModelParam._m0[18u].z, fma(_2708, cbModelParam._m0[18u].y, _2707 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2709, cbModelParam._m0[19u].z, fma(_2708, cbModelParam._m0[19u].y, _2707 * cbModelParam._m0[19u].x))), _1862);
            frontier_phi_27_52_ladder = _2831.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2831.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2831.x * cbModelParam._m0[1u].z;
        }
        _1955 = frontier_phi_27_52_ladder_2;
        _1957 = frontier_phi_27_52_ladder_1;
        _1959 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1939 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_931, _932, _933), _1862);
        _1955 = _1939.x * cbModelParam._m0[1u].z;
        _1957 = _1939.y * cbModelParam._m0[1u].z;
        _1959 = _1939.z * cbModelParam._m0[1u].z;
    }
    float _1972 = (((_958 * _909) + _959) * _923) * ((cbModelParam._m0[1u].w * (_1955 - _1853)) + _1853);
    float _1974 = (((_958 * _910) + _959) * _923) * ((cbModelParam._m0[1u].w * (_1957 - _1855)) + _1855);
    float _1976 = (((_958 * _911) + _959) * _923) * ((cbModelParam._m0[1u].w * (_1959 - _1857)) + _1857);
    float _1979 = fma(_1976, cbSceneParam._m0[89u].z, fma(_1974, cbSceneParam._m0[89u].y, _1972 * cbSceneParam._m0[89u].x));
    float _1982 = fma(_1976, cbSceneParam._m0[90u].z, fma(_1974, cbSceneParam._m0[90u].y, _1972 * cbSceneParam._m0[90u].x));
    float _1985 = fma(_1976, cbSceneParam._m0[91u].z, fma(_1974, cbSceneParam._m0[91u].y, _1972 * cbSceneParam._m0[91u].x));
    float _2019 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2023 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2027 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2031 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2032 = _2019 / _2031;
    float _2033 = _2023 / _2031;
    float _2034 = _2027 / _2031;
    float _2181;
    float _2182;
    float _2183;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2061 = ((uint(_2034 > cbSceneParam._m0[59u].y) + uint(_2034 > cbSceneParam._m0[59u].x)) + uint(_2034 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2062 = _2061 + 43u;
        uint _2070 = _2061 + 44u;
        uint _2078 = _2061 + 45u;
        uint _2086 = _2061 + 46u;
        float _2097 = fma(_2031, cbSceneParam._m0[_2062].w, fma(_2027, cbSceneParam._m0[_2062].z, fma(_2023, cbSceneParam._m0[_2062].y, _2019 * cbSceneParam._m0[_2062].x)));
        float _2101 = fma(_2031, cbSceneParam._m0[_2070].w, fma(_2027, cbSceneParam._m0[_2070].z, fma(_2023, cbSceneParam._m0[_2070].y, _2019 * cbSceneParam._m0[_2070].x)));
        float _2109 = fma(_2031, cbSceneParam._m0[_2086].w, fma(_2027, cbSceneParam._m0[_2086].z, fma(_2023, cbSceneParam._m0[_2086].y, _2019 * cbSceneParam._m0[_2086].x)));
        float _2114 = cbSceneParam._m0[33u].z * _2109;
        float _2116 = cbSceneParam._m0[33u].w * _2109;
        float _2119 = fma(_2031, cbSceneParam._m0[_2078].w, fma(_2027, cbSceneParam._m0[_2078].z, fma(_2023, cbSceneParam._m0[_2078].y, _2019 * cbSceneParam._m0[_2078].x))) / _2109;
        float _2167 = (cbSceneParam._m0[33u].x - sqrt(((_2033 * _2033) + (_2032 * _2032)) + (_2034 * _2034))) * cbSceneParam._m0[33u].y;
        float _4521 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2174 = (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2114 + _2097) / _2109, (_2116 + _2101) / _2109), _2119), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2116 + _2097) / _2109, (_2101 - _2114) / _2109), _2119), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2097 - _2114) / _2109, (_2101 - _2116) / _2109), _2119), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2097 - _2116) / _2109, (_2114 + _2101) / _2109), _2119), 0.0)).x), vec4(0.25)));
        _2181 = 1.0 - (_2174 * cbSceneParam._m0[34u].x);
        _2182 = 1.0 - (_2174 * cbSceneParam._m0[34u].y);
        _2183 = 1.0 - (_2174 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2181 = 1.0;
        _2182 = 1.0;
        _2183 = 1.0;
    }
    float _2247;
    float _2249;
    float _2251;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2235 = fma(_2031, cbSceneParam._m0[63u].w, fma(_2027, cbSceneParam._m0[63u].z, fma(_2023, cbSceneParam._m0[63u].y, _2019 * cbSceneParam._m0[63u].x)));
        float _2236 = fma(_2031, cbSceneParam._m0[60u].w, fma(_2027, cbSceneParam._m0[60u].z, fma(_2023, cbSceneParam._m0[60u].y, _2019 * cbSceneParam._m0[60u].x))) / _2235;
        float _2237 = fma(_2031, cbSceneParam._m0[61u].w, fma(_2027, cbSceneParam._m0[61u].z, fma(_2023, cbSceneParam._m0[61u].y, _2019 * cbSceneParam._m0[61u].x))) / _2235;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2236 >= cbSceneParam._m0[64u].x) && (_2237 >= cbSceneParam._m0[64u].y)) && (_2236 <= cbSceneParam._m0[64u].z)) && (_2237 <= cbSceneParam._m0[64u].w))
        {
            float _2375 = fma(_2031, cbSceneParam._m0[62u].w, fma(_2027, cbSceneParam._m0[62u].z, fma(_2023, cbSceneParam._m0[62u].y, _2019 * cbSceneParam._m0[62u].x))) / _2235;
            float _2379 = isnan(cbSceneParam._m0[41u].w) ? _2375 : (isnan(_2375) ? cbSceneParam._m0[41u].w : max(_2375, cbSceneParam._m0[41u].w));
            float _2422 = (cbSceneParam._m0[33u].x - sqrt(((_2033 * _2033) + (_2032 * _2032)) + (_2034 * _2034))) * cbSceneParam._m0[33u].y;
            float _4537 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
            float _2429 = (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2236, cbSceneParam._m0[33u].w + _2237), _2379), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2236, _2237 - cbSceneParam._m0[33u].z), _2379), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2236 - cbSceneParam._m0[33u].z, _2237 - cbSceneParam._m0[33u].w), _2379), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2236 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2237), _2379), 0.0)).x), vec4(0.25)));
            float _2433 = 1.0 - (_2429 * cbSceneParam._m0[34u].x);
            float _2434 = 1.0 - (_2429 * cbSceneParam._m0[34u].y);
            float _2435 = 1.0 - (_2429 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2434) ? _2182 : (isnan(_2182) ? _2434 : min(_2182, _2434));
            frontier_phi_39_38_ladder_1 = isnan(_2433) ? _2181 : (isnan(_2181) ? _2433 : min(_2181, _2433));
            frontier_phi_39_38_ladder_2 = isnan(_2435) ? _2183 : (isnan(_2183) ? _2435 : min(_2183, _2435));
        }
        else
        {
            frontier_phi_39_38_ladder = _2182;
            frontier_phi_39_38_ladder_1 = _2181;
            frontier_phi_39_38_ladder_2 = _2183;
        }
        _2247 = frontier_phi_39_38_ladder_1;
        _2249 = frontier_phi_39_38_ladder;
        _2251 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2247 = _2181;
        _2249 = _2182;
        _2251 = _2183;
    }
    uvec4 _2256 = floatBitsToUint(cbInstanceData._m0[_815 + 5u]);
    uint _2258 = _2256.x * 14u;
    uint _2259 = _2258 + 13u;
    float _2266 = _923 + (-1.0);
    float _2271 = (cbLight._m0[_2259].x * _2266) + 1.0;
    float _2272 = (cbLight._m0[_2259].y * _2266) + 1.0;
    float _2273 = (cbLight._m0[_2259].z * _2266) + 1.0;
    float _2274 = (cbLight._m0[_2259].w * _2266) + 1.0;
    uint _2275 = _2258 + 5u;
    float _2281 = isnan(1.0) ? _2272 : (isnan(_2272) ? 1.0 : min(_2272, 1.0));
    uint _2285 = _2258 + 4u;
    float _2294 = isnan(1.0) ? _2271 : (isnan(_2271) ? 1.0 : min(_2271, 1.0));
    uint _2298 = _2258 | 1u;
    float _2309 = dot(vec3(cbLight._m0[_2258].xyz), vec3(_612, _613, _614));
    float _2312 = dot(vec3(cbLight._m0[_2298].xyz), vec3(_612, _613, _614));
    float _4573 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _4584 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2317 = (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * 0.3183098733425140380859375;
    float _2319 = (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * 0.3183098733425140380859375;
    float _2326 = ((cbLight._m0[_2275].x * _2281) * _2319) + (((cbLight._m0[_2285].x * _2247) * _2294) * _2317);
    float _2327 = ((_2281 * cbLight._m0[_2275].y) * _2319) + (((cbLight._m0[_2285].y * _2249) * _2294) * _2317);
    float _2328 = ((_2281 * cbLight._m0[_2275].z) * _2319) + (((cbLight._m0[_2285].z * _2251) * _2294) * _2317);
    uvec4 _2332 = floatBitsToUint(cbLight._m0[_2258 + 12u]);
    bool _2334 = _2332.x == 0u;
    float _2436;
    float _2438;
    float _2440;
    if (_2334)
    {
        _2436 = _2326;
        _2438 = _2327;
        _2440 = _2328;
    }
    else
    {
        uint _2444 = _2258 + 6u;
        float _2460 = (dot(vec3(cbLight._m0[_2258 + 2u].xyz), vec3(_612, _613, _614)) * 0.5) + 0.5;
        float _2461 = _2460 * _2460;
        float _4595 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2462 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
        float _2463 = isnan(1.0) ? _2273 : (isnan(_2273) ? 1.0 : min(_2273, 1.0));
        _2436 = (((cbLight._m0[_2444].x * 0.3183098733425140380859375) * _2462) * _2463) + _2326;
        _2438 = (((cbLight._m0[_2444].y * 0.3183098733425140380859375) * _2462) * _2463) + _2327;
        _2440 = (((cbLight._m0[_2444].z * 0.3183098733425140380859375) * _2462) * _2463) + _2328;
    }
    bool _2443 = _2332.y == 0u;
    float _2498;
    float _2500;
    float _2502;
    if (_2443)
    {
        _2498 = _2436;
        _2500 = _2438;
        _2502 = _2440;
    }
    else
    {
        uint _2671 = _2258 + 7u;
        float _2687 = (dot(vec3(cbLight._m0[_2258 + 3u].xyz), vec3(_612, _613, _614)) * 0.5) + 0.5;
        float _2688 = _2687 * _2687;
        float _4611 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        float _2689 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
        float _2690 = isnan(1.0) ? _2274 : (isnan(_2274) ? 1.0 : min(_2274, 1.0));
        _2498 = (((cbLight._m0[_2671].x * 0.3183098733425140380859375) * _2689) * _2690) + _2436;
        _2500 = (((cbLight._m0[_2671].y * 0.3183098733425140380859375) * _2689) * _2690) + _2438;
        _2502 = (((cbLight._m0[_2671].z * 0.3183098733425140380859375) * _2689) * _2690) + _2440;
    }
    uint _2505 = _2258 + 8u;
    float _2518 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2258].w)) * _791) * 0.949999988079071044921875);
    float _2519 = _2518 * _2518;
    float _2520 = cbLight._m0[_2258].x + _693;
    float _2521 = cbLight._m0[_2258].y + _694;
    float _2522 = cbLight._m0[_2258].z + _695;
    float _2526 = inversesqrt(dot(vec3(_2520, _2521, _2522), vec3(_2520, _2521, _2522)));
    float _2527 = _2526 * _2520;
    float _2528 = _2526 * _2521;
    float _2529 = _2526 * _2522;
    float _2530 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_2258].xyz));
    float _4627 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
    float _2533 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
    float _4638 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _2534 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
    float _2535 = dot(vec3(_612, _613, _614), vec3(_2527, _2528, _2529));
    float _4649 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    float _2538 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
    float _2539 = dot(vec3(cbLight._m0[_2258].xyz), vec3(_2527, _2528, _2529));
    float _4660 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
    float _2543 = _2519 * _2519;
    float _2547 = ((_2538 * _2538) * (_2543 + (-1.0))) + 1.0;
    float _2555 = exp2(log2(1.0 - (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0)))) * 5.0);
    float _2556 = 0.959999978542327880859375 - _906;
    float _2558 = 0.959999978542327880859375 - _907;
    float _2559 = 0.959999978542327880859375 - _908;
    float _2566 = 1.0 - _2519;
    float _2577 = (0.5 / (((_2534 * ((_2533 * _2566) + _2519)) + 9.9999999392252902907785028219223e-09) + (((_2534 * _2566) + _2519) * _2533))) * _2533;
    float _4671 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
    float _2579 = (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * (_2543 / ((_2547 * _2547) * 3.141590118408203125));
    uint _2593 = _2258 + 9u;
    float _2604 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2298].w)) * _791) * 0.949999988079071044921875);
    float _2605 = _2604 * _2604;
    float _2606 = cbLight._m0[_2298].x + _693;
    float _2607 = cbLight._m0[_2298].y + _694;
    float _2608 = cbLight._m0[_2298].z + _695;
    float _2612 = inversesqrt(dot(vec3(_2606, _2607, _2608), vec3(_2606, _2607, _2608)));
    float _2613 = _2612 * _2606;
    float _2614 = _2612 * _2607;
    float _2615 = _2612 * _2608;
    float _2616 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_2298].xyz));
    float _4682 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
    float _2619 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
    float _2620 = dot(vec3(_612, _613, _614), vec3(_2613, _2614, _2615));
    float _4693 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
    float _2623 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
    float _2624 = dot(vec3(cbLight._m0[_2298].xyz), vec3(_2613, _2614, _2615));
    float _4704 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
    float _2628 = _2605 * _2605;
    float _2632 = ((_2623 * _2623) * (_2628 + (-1.0))) + 1.0;
    float _2639 = exp2(log2(1.0 - (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0)))) * 5.0);
    float _2646 = 1.0 - _2605;
    float _2656 = (0.5 / (((_2534 * ((_2619 * _2646) + _2605)) + 9.9999999392252902907785028219223e-09) + (((_2534 * _2646) + _2605) * _2619))) * _2619;
    float _4715 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
    float _2658 = (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0))) * (_2628 / ((_2632 * _2632) * 3.141590118408203125));
    float _2668 = (((((_2639 * _2556) + _909) * cbLight._m0[_2593].x) * _2658) * _2281) + ((((cbLight._m0[_2505].x * _2247) * ((_2555 * _2556) + _909)) * _2579) * _2294);
    float _2669 = (((((_2639 * _2558) + _910) * cbLight._m0[_2593].y) * _2658) * _2281) + ((((cbLight._m0[_2505].y * _2249) * ((_2555 * _2558) + _910)) * _2579) * _2294);
    float _2670 = (((((_2639 * _2559) + _911) * cbLight._m0[_2593].z) * _2658) * _2281) + ((((cbLight._m0[_2505].z * _2251) * ((_2555 * _2559) + _911)) * _2579) * _2294);
    float _2726;
    float _2728;
    float _2730;
    if (_2334)
    {
        _2726 = _2668;
        _2728 = _2669;
        _2730 = _2670;
    }
    else
    {
        uint _2732 = _2258 + 2u;
        uint _2736 = _2258 + 10u;
        float _2750 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2732].w)) * _791) * 0.949999988079071044921875);
        float _2751 = _2750 * _2750;
        float _2752 = cbLight._m0[_2732].x + _693;
        float _2753 = cbLight._m0[_2732].y + _694;
        float _2754 = cbLight._m0[_2732].z + _695;
        float _2758 = inversesqrt(dot(vec3(_2752, _2753, _2754), vec3(_2752, _2753, _2754)));
        float _2759 = _2758 * _2752;
        float _2760 = _2758 * _2753;
        float _2761 = _2758 * _2754;
        float _2762 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_2732].xyz));
        float _4726 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        float _2765 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
        float _2766 = dot(vec3(_612, _613, _614), vec3(_2759, _2760, _2761));
        float _4737 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        float _2769 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
        float _2770 = dot(vec3(cbLight._m0[_2732].xyz), vec3(_2759, _2760, _2761));
        float _4748 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        float _2774 = _2751 * _2751;
        float _2778 = ((_2769 * _2769) * (_2774 + (-1.0))) + 1.0;
        float _2785 = exp2(log2(1.0 - (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0)))) * 5.0);
        float _2792 = 1.0 - _2751;
        float _2802 = (0.5 / (((_2534 * ((_2765 * _2792) + _2751)) + 9.9999999392252902907785028219223e-09) + (((_2534 * _2792) + _2751) * _2765))) * _2765;
        float _4759 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
        float _2804 = (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_2774 / ((_2778 * _2778) * 3.141590118408203125));
        float _2805 = isnan(1.0) ? _2273 : (isnan(_2273) ? 1.0 : min(_2273, 1.0));
        _2726 = (((((_2785 * _2556) + _909) * cbLight._m0[_2736].x) * _2804) * _2805) + _2668;
        _2728 = (((((_2785 * _2558) + _910) * cbLight._m0[_2736].y) * _2804) * _2805) + _2669;
        _2730 = (((((_2785 * _2559) + _911) * cbLight._m0[_2736].z) * _2804) * _2805) + _2670;
    }
    float _2836;
    float _2838;
    float _2840;
    if (_2443)
    {
        _2836 = _2726;
        _2838 = _2728;
        _2840 = _2730;
    }
    else
    {
        uint _2847 = _2258 + 3u;
        uint _2851 = _2258 + 11u;
        float _2865 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2847].w)) * _791) * 0.949999988079071044921875);
        float _2866 = _2865 * _2865;
        float _2867 = cbLight._m0[_2847].x + _693;
        float _2868 = cbLight._m0[_2847].y + _694;
        float _2869 = cbLight._m0[_2847].z + _695;
        float _2873 = inversesqrt(dot(vec3(_2867, _2868, _2869), vec3(_2867, _2868, _2869)));
        float _2874 = _2873 * _2867;
        float _2875 = _2873 * _2868;
        float _2876 = _2873 * _2869;
        float _2877 = dot(vec3(_612, _613, _614), vec3(cbLight._m0[_2847].xyz));
        float _4775 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
        float _2880 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
        float _2881 = dot(vec3(_612, _613, _614), vec3(_2874, _2875, _2876));
        float _4786 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
        float _2884 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
        float _2885 = dot(vec3(cbLight._m0[_2847].xyz), vec3(_2874, _2875, _2876));
        float _4797 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
        float _2889 = _2866 * _2866;
        float _2893 = ((_2884 * _2884) * (_2889 + (-1.0))) + 1.0;
        float _2900 = exp2(log2(1.0 - (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0)))) * 5.0);
        float _2907 = 1.0 - _2866;
        float _2917 = (0.5 / (((_2534 * ((_2880 * _2907) + _2866)) + 9.9999999392252902907785028219223e-09) + (((_2534 * _2907) + _2866) * _2880))) * _2880;
        float _4808 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
        float _2919 = (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0))) * (_2889 / ((_2893 * _2893) * 3.141590118408203125));
        float _2920 = isnan(1.0) ? _2274 : (isnan(_2274) ? 1.0 : min(_2274, 1.0));
        _2836 = (((((_2900 * _2556) + _909) * cbLight._m0[_2851].x) * _2919) * _2920) + _2726;
        _2838 = (((((_2900 * _2558) + _910) * cbLight._m0[_2851].y) * _2919) * _2920) + _2728;
        _2840 = (((((_2900 * _2559) + _911) * cbLight._m0[_2851].z) * _2919) * _2920) + _2730;
    }
    float _2985;
    float _2987;
    float _2989;
    float _2991;
    float _2993;
    float _2995;
    if (_2256.y == 0u)
    {
        uvec4 _2941 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2942 = _2941.x;
        uint _2953 = uint((float(_2941.y) * floor(float(uint(cbSceneParam._m0[85u].y * _714) / _2942))) + floor(float(uint(cbSceneParam._m0[85u].x * _713) / _2942)));
        float _2963 = (log2(_2034 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2964 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
        uint _2967 = uint(isnan(14.0) ? _2964 : (isnan(_2964) ? 14.0 : min(_2964, 14.0)));
        uvec4 _2972 = texelFetch(g_lightClusterGridBuffer, int(((_2967 << 2u) + (_2953 << 6u)) >> 2u));
        uint _2973 = _2972.x;
        uint _2974 = _2941.z;
        float _3057;
        float _3059;
        float _3061;
        float _3063;
        float _3065;
        float _3067;
        if (((((1u << ((_2974 >> 4u) & 15u)) + 4294967295u) & _2973) == 0u) || ((_2974 & 240u) == 0u))
        {
            _3057 = 0.0;
            _3059 = 0.0;
            _3061 = 0.0;
            _3063 = 0.0;
            _3065 = 0.0;
            _3067 = 0.0;
        }
        else
        {
            float _3058;
            float _3060;
            float _3062;
            float _3064;
            float _3066;
            float _3068;
            float _3209 = 0.0;
            float _3210 = 0.0;
            float _3211 = 0.0;
            float _3212 = 0.0;
            float _3213 = 0.0;
            float _3214 = 0.0;
            uint _3215 = 0u;
            uint _3224;
            bool _3225;
            for (;;)
            {
                _3224 = texelFetch(g_lightClassification, int((((_2967 << 5u) + (_2953 << 9u)) + (_3215 << 2u)) >> 2u)).x;
                _3225 = _3224 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3225)
                {
                    frontier_phi_73_pred = _3214;
                    frontier_phi_73_pred_1 = _3213;
                    frontier_phi_73_pred_2 = _3212;
                    frontier_phi_73_pred_3 = _3211;
                    frontier_phi_73_pred_4 = _3210;
                    frontier_phi_73_pred_5 = _3209;
                }
                else
                {
                    float _3354;
                    float _3355;
                    float _3356;
                    float _3357;
                    float _3358;
                    float _3359;
                    uint _3360;
                    _3354 = _3209;
                    _3355 = _3210;
                    _3356 = _3211;
                    _3357 = _3212;
                    _3358 = _3213;
                    _3359 = _3214;
                    _3360 = _3224;
                    float _3281;
                    float _3282;
                    float _3283;
                    float _3284;
                    float _3285;
                    float _3286;
                    for (;;)
                    {
                        uint _3364 = uint(findLSB(_3360)) + (_3215 << 5u);
                        uint _3361 = (_3360 + 4294967295u) & _3360;
                        uint _3366 = _3364 * 48u;
                        vec4 _3380 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3366)).x, texelFetch(g_PointLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3366 + 3u)).x));
                        uint _3386 = (_3364 * 48u) + 4u;
                        vec4 _3399 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3386)).x, texelFetch(g_PointLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3386 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3386 + 3u)).x));
                        uint _3405 = (_3364 * 48u) + 8u;
                        vec3 _3416 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3405)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 2u)).x));
                        float _3420 = _3380.x - _2032;
                        float _3421 = _3380.y - _2033;
                        float _3422 = _3380.z - _2034;
                        float _3423 = dot(vec3(_3420, _3421, _3422), vec3(_3420, _3421, _3422));
                        float _3426 = inversesqrt(_3423);
                        float _3427 = _3426 * _3420;
                        float _3428 = _3426 * _3421;
                        float _3429 = _3426 * _3422;
                        float _3430 = dot(vec3(_736, _739, _742), vec3(_3427, _3428, _3429));
                        float _3435 = 1.0 - (_3423 * _3380.w);
                        float _4834 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                        float _3436 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
                        float _3437 = sqrt(_3423) * _3399.w;
                        float _3440 = 1.39999997615814208984375 / (_3437 + 1.39999997615814208984375);
                        float _3441 = _3440 * _3440;
                        float _3444 = ((1.0 - _3441) * _3430) + _3441;
                        float _3447 = _3437 * _3437;
                        float _3451 = ((isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0))) * _3436) / ((_3447 * 0.699999988079071044921875) + 1.0);
                        float _3455 = (-0.0) - _2032;
                        float _3456 = (-0.0) - _2033;
                        float _3457 = (-0.0) - _2034;
                        float _3461 = inversesqrt(dot(vec3(_3455, _3456, _3457), vec3(_3455, _3456, _3457)));
                        float _3462 = _3461 * _3455;
                        float _3463 = _3461 * _3456;
                        float _3464 = _3461 * _3457;
                        float _3471 = exp2(log2(1.0 / ((_3447 * 3.5) + 5.0)) * 0.25);
                        float _3472 = 1.0 - _939;
                        float _3479 = sqrt(1.0 - ((1.0 - (_3472 * _3472)) * (1.0 - (_3471 * _3471))));
                        float _3480 = _3479 * _3479;
                        float _3481 = _3480 * _3480;
                        float _3482 = _3462 + _3427;
                        float _3483 = _3463 + _3428;
                        float _3484 = _3464 + _3429;
                        float _3488 = inversesqrt(dot(vec3(_3482, _3483, _3484), vec3(_3482, _3483, _3484)));
                        float _3492 = dot(vec3(_736, _739, _742), vec3(_3462, _3463, _3464));
                        float _4850 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                        float _3495 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
                        float _3496 = dot(vec3(_736, _739, _742), vec3(_3488 * _3482, _3488 * _3483, _3488 * _3484));
                        float _4861 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                        float _3499 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                        float _3503 = ((_3499 * _3499) * (_3481 + (-1.0))) + 1.0;
                        float _3504 = _3440 * _3480;
                        float _3505 = _3504 * _3504;
                        float _3508 = ((1.0 - _3505) * _3430) + _3505;
                        float _4872 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                        float _3509 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
                        float _3510 = 1.0 - _3480;
                        float _3520 = (0.5 / (((_3509 * ((_3495 * _3510) + _3480)) + 9.9999999392252902907785028219223e-09) + (((_3509 * _3510) + _3480) * _3495))) * _3509;
                        float _4883 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                        float _3531 = (((_3481 * 3.1415927410125732421875) * (isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0)))) / ((_3503 * _3503) * ((_3447 * 2.1991131305694580078125) + 3.141590118408203125))) * _3436;
                        _3284 = (_3451 * _3399.x) + _3357;
                        _3285 = (_3451 * _3399.y) + _3358;
                        _3286 = (_3451 * _3399.z) + _3359;
                        _3281 = (_3531 * _3416.x) + _3354;
                        _3282 = (_3531 * _3416.y) + _3355;
                        _3283 = (_3531 * _3416.z) + _3356;
                        if (_3361 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3354 = _3281;
                            _3355 = _3282;
                            _3356 = _3283;
                            _3357 = _3284;
                            _3358 = _3285;
                            _3359 = _3286;
                            _3360 = _3361;
                        }
                    }
                    frontier_phi_73_pred = _3286;
                    frontier_phi_73_pred_1 = _3285;
                    frontier_phi_73_pred_2 = _3284;
                    frontier_phi_73_pred_3 = _3283;
                    frontier_phi_73_pred_4 = _3282;
                    frontier_phi_73_pred_5 = _3281;
                }
                _3068 = frontier_phi_73_pred;
                _3066 = frontier_phi_73_pred_1;
                _3064 = frontier_phi_73_pred_2;
                _3062 = frontier_phi_73_pred_3;
                _3060 = frontier_phi_73_pred_4;
                _3058 = frontier_phi_73_pred_5;
                uint _3216 = _3215 + 1u;
                if (_3216 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3209 = _3058;
                    _3210 = _3060;
                    _3211 = _3062;
                    _3212 = _3064;
                    _3213 = _3066;
                    _3214 = _3068;
                    _3215 = _3216;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3057 = _3058;
            _3059 = _3060;
            _3061 = _3062;
            _3063 = _3064;
            _3065 = _3066;
            _3067 = _3068;
        }
        uvec4 _3071 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3072 = _3071.z;
        uint _3074 = (_3072 >> 8u) & 15u;
        float _3177;
        float _3179;
        float _3181;
        float _3183;
        float _3185;
        float _3187;
        if (((4294967295u << _3074) & _2973) == 0u)
        {
            _3177 = _3057;
            _3179 = _3059;
            _3181 = _3061;
            _3183 = _3063;
            _3185 = _3065;
            _3187 = _3067;
        }
        else
        {
            float _3202 = inversesqrt(dot(vec3(_2032, _2033, _2034), vec3(_2032, _2033, _2034)));
            float _3203 = _3202 * _2032;
            float _3204 = _3202 * _2033;
            float _3205 = _3202 * _2034;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3074 < ((_3072 >> 12u) & 15u))
            {
                float _3178;
                float _3180;
                float _3182;
                float _3184;
                float _3186;
                float _3188;
                float _3337 = _3057;
                float _3338 = _3059;
                float _3339 = _3061;
                float _3340 = _3063;
                float _3341 = _3065;
                float _3342 = _3067;
                uint _3343 = _3074;
                uint _3352;
                bool _3353;
                for (;;)
                {
                    _3352 = texelFetch(g_lightClassification, int((((_2967 << 5u) + (_2953 << 9u)) + (_3343 << 2u)) >> 2u)).x;
                    _3353 = _3352 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3353)
                    {
                        frontier_phi_84_pred = _3341;
                        frontier_phi_84_pred_1 = _3340;
                        frontier_phi_84_pred_2 = _3339;
                        frontier_phi_84_pred_3 = _3338;
                        frontier_phi_84_pred_4 = _3337;
                        frontier_phi_84_pred_5 = _3342;
                    }
                    else
                    {
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3548;
                        float _3549;
                        float _3550;
                        float _3840;
                        float _3841;
                        float _3842;
                        float _3843;
                        float _3844;
                        float _3845;
                        float _3558 = _3337;
                        float _3559 = _3338;
                        float _3560 = _3339;
                        float _3561 = _3340;
                        float _3562 = _3341;
                        float _3563 = _3342;
                        uint _3564 = _3352;
                        uint _3565;
                        vec4 _3590;
                        float _3591;
                        vec4 _3606;
                        vec3 _3618;
                        vec4 _3633;
                        vec4 _3649;
                        float _3696;
                        bool _3697;
                        for (;;)
                        {
                            uint _3575 = ((_3343 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3564));
                            _3565 = (_3564 + 4294967295u) & _3564;
                            uint _3577 = _3575 * 40u;
                            _3590 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 3u)).x));
                            _3591 = _3590.w;
                            uint _3593 = (_3575 * 40u) + 4u;
                            _3606 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 3u)).x));
                            uint _3608 = (_3575 * 40u) + 8u;
                            _3618 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 2u)).x));
                            uint _3620 = (_3575 * 40u) + 16u;
                            _3633 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3620)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 3u)).x));
                            uint _3636 = (_3575 * 40u) + 20u;
                            _3649 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3636)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 3u)).x));
                            uint _3652 = (_3575 * 40u) + 24u;
                            vec4 _3665 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3652)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 3u)).x));
                            uint _3671 = (_3575 * 40u) + 28u;
                            vec4 _3684 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3671)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 3u)).x));
                            _3696 = fma(_2034, _3684.z, fma(_2033, _3684.y, _3684.x * _2032)) + _3684.w;
                            _3697 = !((fma(_2034, _3665.z, fma(_2033, _3665.y, _3665.x * _2032)) + _3665.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3697)
                            {
                                float _3724 = _3590.x - _2032;
                                float _3725 = _3590.y - _2033;
                                float _3726 = _3590.z - _2034;
                                float _3727 = dot(vec3(_3724, _3725, _3726), vec3(_3724, _3725, _3726));
                                float _3730 = inversesqrt(_3727);
                                float _3731 = _3730 * _3724;
                                float _3732 = _3730 * _3725;
                                float _3733 = _3730 * _3726;
                                float _3737 = 1.0 - (_3727 / (_3591 * _3591));
                                float _4894 = isnan(0.0) ? _3737 : (isnan(_3737) ? 0.0 : max(_3737, 0.0));
                                float _3738 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
                                float _3742 = sqrt(_3727) * _3606.w;
                                float _3744 = 1.39999997615814208984375 / (_3742 + 1.39999997615814208984375);
                                float _3745 = _3744 * _3744;
                                float _3748 = ((1.0 - _3745) * dot(vec3(_3731, _3732, _3733), vec3(_736, _739, _742))) + _3745;
                                float _3751 = _3742 * _3742;
                                float _3755 = (fma(_2034, _3633.z, fma(_2033, _3633.y, _3633.x * _2032)) + _3633.w) / _3696;
                                float _3756 = (fma(_2034, _3649.z, fma(_2033, _3649.y, _3649.x * _2032)) + _3649.w) / _3696;
                                float _3760 = 1.0 - dot(vec2(_3755, _3756), vec2(_3755, _3756));
                                float _4910 = isnan(0.0) ? _3760 : (isnan(_3760) ? 0.0 : max(_3760, 0.0));
                                float _3761 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
                                float _3762 = _3761 * (((isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0))) * _3738) / ((_3751 * 0.699999988079071044921875) + 1.0));
                                float _3774 = exp2(log2(1.0 / ((_3751 * 3.5) + 5.0)) * 0.25);
                                float _3775 = 1.0 - _939;
                                float _3782 = sqrt(1.0 - ((1.0 - (_3775 * _3775)) * (1.0 - (_3774 * _3774))));
                                float _3783 = _3782 * _3782;
                                float _3784 = _3783 * _3783;
                                float _3785 = _3731 - _3203;
                                float _3786 = _3732 - _3204;
                                float _3787 = _3733 - _3205;
                                float _3791 = inversesqrt(dot(vec3(_3785, _3786, _3787), vec3(_3785, _3786, _3787)));
                                float _3795 = dot(vec3(_736, _739, _742), vec3((-0.0) - _3203, (-0.0) - _3204, (-0.0) - _3205));
                                float _4921 = isnan(0.0) ? _3795 : (isnan(_3795) ? 0.0 : max(_3795, 0.0));
                                float _3798 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
                                float _3799 = dot(vec3(_736, _739, _742), vec3(_3791 * _3785, _3791 * _3786, _3791 * _3787));
                                float _4932 = isnan(0.0) ? _3799 : (isnan(_3799) ? 0.0 : max(_3799, 0.0));
                                float _3802 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
                                float _3806 = ((_3802 * _3802) * (_3784 + (-1.0))) + 1.0;
                                float _3807 = _3744 * _3783;
                                float _3808 = _3807 * _3807;
                                float _3814 = ((1.0 - _3808) * dot(vec3(_736, _739, _742), vec3(_3731, _3732, _3733))) + _3808;
                                float _4943 = isnan(0.0) ? _3814 : (isnan(_3814) ? 0.0 : max(_3814, 0.0));
                                float _3815 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
                                float _3816 = 1.0 - _3783;
                                float _3826 = (0.5 / (((_3815 * ((_3798 * _3816) + _3783)) + 9.9999999392252902907785028219223e-09) + (((_3815 * _3816) + _3783) * _3798))) * _3815;
                                float _4954 = isnan(0.0) ? _3826 : (isnan(_3826) ? 0.0 : max(_3826, 0.0));
                                float _3836 = (_3761 * _3738) * (((_3784 * 3.1415927410125732421875) * (isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0)))) / ((_3806 * _3806) * ((_3751 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3762 * _3606.y;
                                frontier_phi_90_pred_1 = _3762 * _3606.x;
                                frontier_phi_90_pred_2 = _3836 * _3618.z;
                                frontier_phi_90_pred_3 = _3836 * _3618.y;
                                frontier_phi_90_pred_4 = _3836 * _3618.x;
                                frontier_phi_90_pred_5 = _3762 * _3606.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3844 = frontier_phi_90_pred;
                            _3843 = frontier_phi_90_pred_1;
                            _3842 = frontier_phi_90_pred_2;
                            _3841 = frontier_phi_90_pred_3;
                            _3840 = frontier_phi_90_pred_4;
                            _3845 = frontier_phi_90_pred_5;
                            _3548 = _3843 + _3561;
                            _3549 = _3844 + _3562;
                            _3550 = _3845 + _3563;
                            _3545 = _3840 + _3558;
                            _3546 = _3841 + _3559;
                            _3547 = _3842 + _3560;
                            if (_3565 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3558 = _3545;
                                _3559 = _3546;
                                _3560 = _3547;
                                _3561 = _3548;
                                _3562 = _3549;
                                _3563 = _3550;
                                _3564 = _3565;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3549;
                        frontier_phi_84_pred_1 = _3548;
                        frontier_phi_84_pred_2 = _3547;
                        frontier_phi_84_pred_3 = _3546;
                        frontier_phi_84_pred_4 = _3545;
                        frontier_phi_84_pred_5 = _3550;
                    }
                    _3186 = frontier_phi_84_pred;
                    _3184 = frontier_phi_84_pred_1;
                    _3182 = frontier_phi_84_pred_2;
                    _3180 = frontier_phi_84_pred_3;
                    _3178 = frontier_phi_84_pred_4;
                    _3188 = frontier_phi_84_pred_5;
                    uint _3344 = _3343 + 1u;
                    if (_3344 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3337 = _3178;
                        _3338 = _3180;
                        _3339 = _3182;
                        _3340 = _3184;
                        _3341 = _3186;
                        _3342 = _3188;
                        _3343 = _3344;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3188;
                frontier_phi_65_66_ladder_1 = _3184;
                frontier_phi_65_66_ladder_2 = _3186;
                frontier_phi_65_66_ladder_3 = _3180;
                frontier_phi_65_66_ladder_4 = _3178;
                frontier_phi_65_66_ladder_5 = _3182;
            }
            else
            {
                frontier_phi_65_66_ladder = _3067;
                frontier_phi_65_66_ladder_1 = _3063;
                frontier_phi_65_66_ladder_2 = _3065;
                frontier_phi_65_66_ladder_3 = _3059;
                frontier_phi_65_66_ladder_4 = _3057;
                frontier_phi_65_66_ladder_5 = _3061;
            }
            _3177 = frontier_phi_65_66_ladder_4;
            _3179 = frontier_phi_65_66_ladder_3;
            _3181 = frontier_phi_65_66_ladder_5;
            _3183 = frontier_phi_65_66_ladder_1;
            _3185 = frontier_phi_65_66_ladder_2;
            _3187 = frontier_phi_65_66_ladder;
        }
        float _3192 = isnan(1.0) ? _923 : (isnan(_923) ? 1.0 : min(_923, 1.0));
        _2985 = (_3192 * _3183) + _2498;
        _2987 = (_3192 * _3185) + _2500;
        _2989 = (_3192 * _3187) + _2502;
        _2991 = ((_3177 * _909) * _3192) + _2836;
        _2993 = ((_3179 * _910) * _3192) + _2838;
        _2995 = ((_3181 * _911) * _3192) + _2840;
    }
    else
    {
        _2985 = _2498;
        _2987 = _2500;
        _2989 = _2502;
        _2991 = _2836;
        _2993 = _2838;
        _2995 = _2840;
    }
    float _4970 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _4981 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _4992 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _5003 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _3013 = ((isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0))) * (_2985 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _923))) + ((_2991 + ((isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0))) * _1762)) * cbPerFrame._m0[3u].x);
    float _3014 = ((isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0))) * (_2987 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _923))) + ((_2993 + ((isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0))) * _1762)) * cbPerFrame._m0[3u].x);
    float _3015 = ((isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0))) * (_2989 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _923))) + ((_2995 + ((isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0))) * _1762)) * cbPerFrame._m0[3u].x);
    float _3016 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
    float _3017 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
    float _3018 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
    float _3023 = cbInstanceData._m0[_815 + 6u].w * (isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0)));
    float _3028 = _713 / cbSceneParam._m0[86u].x;
    float _3029 = _714 / cbSceneParam._m0[86u].y;
    vec4 _3043 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3028, _3029, (log2((isnan(cbSceneParam._m0[77u].w) ? _636 : (isnan(_636) ? cbSceneParam._m0[77u].w : min(_636, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3045 = _3043.x;
    float _3046 = _3043.y;
    float _3047 = _3043.z;
    float _3048 = _3043.w;
    float _3119;
    float _3121;
    float _3123;
    float _3125;
    if (_636 > cbSceneParam._m0[78u].w)
    {
        float _3082 = isnan(_636) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _636 : min(cbSceneParam._m0[80u].w, _636));
        float _3083 = _3082 / _636;
        float _3094 = _3083 * _686;
        float _3095 = _687 * _3083;
        float _3096 = (-0.0) - _3095;
        float _3097 = _3083 * _688;
        float _3099 = (cbSceneParam._m0[77u].w * _3096) / _3082;
        float _3100 = _3099 + cbSceneParam._m0[79u].w;
        float _3101 = cbSceneParam._m0[79u].w - _3095;
        float _3107 = sqrt(((_3094 * _3094) + (_3095 * _3095)) + (_3097 * _3097));
        float _3110 = (1.0 - (cbSceneParam._m0[77u].w / _3082)) * _3107;
        float _3115 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3117 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3294;
        if (abs((_3096 - _3099) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3294 = ((((_3100 > 0.0) ? exp2(_3115 * _3100) : (2.0 - exp2(_3117 * _3100))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3110;
        }
        else
        {
            float _3238 = 1.0 / cbSceneParam._m0[80u].x;
            float _3239 = isnan(_3101) ? _3100 : (isnan(_3100) ? _3101 : max(_3100, _3101));
            float _3240 = isnan(_3101) ? _3100 : (isnan(_3100) ? _3101 : min(_3100, _3101));
            float _3249 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : min(_3239, 0.0));
            float _3250 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : min(_3240, 0.0));
            _3294 = ((abs(_3107 / _3096) * cbSceneParam._m0[80u].y) * ((((_3249 - _3250) * 2.0) - ((exp2(_3115 * (isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0)))) - exp2(_3115 * (isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0))))) * _3238)) - ((exp2(_3117 * _3249) - exp2(_3117 * _3250)) * _3238))) + (_3110 * cbSceneParam._m0[80u].z);
        }
        vec4 _3296 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3028, _3029, 1.0), 0.0);
        float _3305 = exp2((_3294 * (-1.44269502162933349609375)) * (1.0 - _3296.w));
        float _3306 = log2(_3305);
        float _3322 = log2(_3048);
        _3119 = (exp2(_3322 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3306 * cbSceneParam._m0[78u].x)) * _3296.x) / cbSceneParam._m0[78u].x)) + _3045;
        _3121 = (exp2(_3322 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3306 * cbSceneParam._m0[78u].y)) * _3296.y) / cbSceneParam._m0[78u].y)) + _3046;
        _3123 = (exp2(_3322 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3306 * cbSceneParam._m0[78u].z)) * _3296.z) / cbSceneParam._m0[78u].z)) + _3047;
        _3125 = _3305 * _3048;
    }
    else
    {
        _3119 = _3045;
        _3121 = _3046;
        _3123 = _3047;
        _3125 = _3048;
    }
    bool _3332;
    vec4 _3135;
    vec4 _3157;
    float _3159;
    float _3163;
    float _3164;
    float _3165;
    float _3166;
    bool _3176;
    for (;;)
    {
        _3135 = cbMatDynParam._m0[0u];
        float _3137 = roundEven(_3135.y);
        bool _3138 = _3137 == 3.0;
        float _3139 = log2(_3125);
        float _3146 = exp2(_3139 * cbSceneParam._m0[78u].x) * _3016;
        float _3147 = exp2(_3139 * cbSceneParam._m0[78u].y) * _3017;
        float _3148 = exp2(_3139 * cbSceneParam._m0[78u].z) * _3018;
        float _3155 = _702 + (-0.5);
        _3157 = cbMtdParam._m0[1u];
        _3159 = _3157.y * _3155;
        float _3162 = (_3137 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3163 = _3162 * (_3138 ? _3146 : (_3146 + (cbSceneParam._m0[72u].w * _3119)));
        _3164 = _3162 * (_3138 ? _3147 : (_3147 + (cbSceneParam._m0[72u].w * _3121)));
        _3165 = _3162 * (_3138 ? _3148 : (_3148 + (cbSceneParam._m0[72u].w * _3123)));
        _3166 = _3155 * 0.999000012874603271484375;
        _3176 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3176)
        {
            if ((cbInstanceData._m0[_815 + 7u].x + _3166) < 0.5)
            {
                _3332 = true;
                break;
            }
        }
        uint _3273 = _816 + uint(_3135.w);
        if ((cbInstanceData._m0[_3273].w < 1.0) && ((cbInstanceData._m0[_3273].w + _3166) < 0.5))
        {
            _3332 = true;
            break;
        }
        if ((_3159 + _436) < _3157.x)
        {
            _3332 = true;
            break;
        }
        _3332 = false;
        break;
    }
    float _3536;
    if (_3332)
    {
        discard_state = true;
        _3536 = 0.0;
    }
    else
    {
        _3536 = _3023;
    }
    SV_Target.x = _3163;
    SV_Target.y = _3164;
    SV_Target.z = _3165;
    SV_Target.w = _3536;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3023;
    discard_exit();
}


