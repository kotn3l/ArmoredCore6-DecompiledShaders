#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1285;
float _3986;
float _3987;
float _3988;
float _3989;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234;
    float _235;
    float _236;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
    }
    else
    {
        _234 = _220;
        _235 = _221;
        _236 = _222;
    }
    float _281 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _291 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _281);
    float _292 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _281);
    float _293 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _281);
    vec4 _306 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _311 = _306.z;
    float _317 = exp2(log2(_311 * 22.0) * 260.0);
    float _318 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _319 = isnan(1.0) ? _318 : (isnan(_318) ? 1.0 : min(_318, 1.0));
    vec4 _333 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _343 = cbMtdParam._m0[10u].x * _333.x;
    float _344 = cbMtdParam._m0[10u].y * _333.y;
    float _345 = cbMtdParam._m0[10u].z * _333.z;
    vec4 _357 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _391 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _399 = (((((cbMtdParam._m0[9u].x * _357.x) - _343) * _319) + _343) * 4.55000019073486328125) * _391.x;
    float _401 = (((((cbMtdParam._m0[9u].y * _357.y) - _344) * _319) + _344) * 4.55000019073486328125) * _391.y;
    float _403 = (((((cbMtdParam._m0[9u].z * _357.z) - _345) * _319) + _345) * 4.55000019073486328125) * _391.z;
    float _404 = _391.w * _357.w;
    vec4 _421 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _431 = (((_421.x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _319) + cbMtdParam._m0[15u].y;
    vec4 _443 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _445 = _443.x;
    float _446 = _443.y;
    float _452 = cbMtdParam._m0[13u].y + _443.z;
    vec4 _464 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _481 = (((_319 * (_311 + (-0.5))) + 0.5) * 2.0) * ((((_464.z - _452) + cbMtdParam._m0[13u].x) * _319) + _452);
    float _485 = (_306.x * 2.0) + (-1.0);
    float _487 = (_306.y * 2.0) + (-1.0);
    float _488 = dot(vec2(_485, _487), vec2(_485, _487));
    float _4008 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _493 = sqrt(1.0 - (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))));
    float _506 = ((((((_464.x - _445) * _319) + _445) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _485;
    float _507 = ((((((_464.y - _446) * _319) + _446) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _487;
    float _510 = fma(_493, _234, fma(_507, _226 * TANGENT.x, (_212 * _204) * _506));
    float _513 = fma(_493, _235, fma(_507, _226 * TANGENT.y, (_212 * _205) * _506));
    float _516 = fma(_493, _236, fma(_507, _226 * TANGENT.z, (_212 * _206) * _506));
    float _520 = inversesqrt(dot(vec3(_510, _513, _516), vec3(_510, _513, _516)));
    float _521 = _520 * _510;
    float _522 = _520 * _513;
    float _523 = _520 * _516;
    float _4019 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _524 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _4030 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _525 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _4041 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _526 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _4052 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _527 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _4063 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _528 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _4074 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _529 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _537 = cbMatDynParam._m0[9u].x * _526;
    float _538 = cbMatDynParam._m0[9u].y * _527;
    float _539 = cbMatDynParam._m0[9u].z * _528;
    float _547 = inversesqrt(dot(vec3(_291, _292, _293), vec3(_291, _292, _293)));
    float _548 = _547 * _291;
    float _549 = _547 * _292;
    float _550 = _547 * _293;
    float _551 = dot(vec3(_521, _522, _523), vec3(_548, _549, _550));
    float _557 = abs(exp2(log2(_551) * cbMatDynParam._m0[12u].x));
    float _558 = isnan(0.100000001490116119384765625) ? _557 : (isnan(_557) ? 0.100000001490116119384765625 : max(_557, 0.100000001490116119384765625));
    float _564 = ((isnan(0.699999988079071044921875) ? _558 : (isnan(_558) ? 0.699999988079071044921875 : min(_558, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _587 = 1.0 - cbMatDynParam._m0[8u].w;
    float _4095 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _590 = 1.0 - cbMatDynParam._m0[7u].w;
    float _4106 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _591 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _595 = dot(vec3(_521, _522, _523), vec3(0.0, -1.0, 0.0));
    float _4117 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _598 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _605 = (_598 * _526) * cbMatDynParam._m0[11u].x;
    float _607 = (_598 * _527) * cbMatDynParam._m0[11u].y;
    float _609 = (_598 * _528) * cbMatDynParam._m0[11u].z;
    float _616 = dot(vec3(_548, _549, _550), vec3(_521, _522, _523));
    float _619 = _616 * 2.0;
    float _629 = dot(vec3((-0.0) - (_548 - (_619 * _521)), (-0.0) - (_549 - (_619 * _522)), (-0.0) - (_550 - (_619 * _523))), vec3(0.0, -1.0, 0.0));
    float _4128 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _636 = exp2(log2(isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * 4.0);
    float _662 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _667 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _669 = _667.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _966 = sqrt(((_291 * _291) + (_292 * _292)) + (_293 * _293));
        float _972 = (cbMatDynParam._m0[5u].x * _966) + cbMatDynParam._m0[5u].y;
        float _4139 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _977 = (cbMatDynParam._m0[5u].z * _966) + cbMatDynParam._m0[5u].w;
        float _4150 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) - _973)) + _973) < ((_669 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _680 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _681 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _683 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _685 = _683.w;
    float _703 = fma(_523, cbSceneParam._m0[5u].z, fma(_522, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _521));
    float _706 = fma(_523, cbSceneParam._m0[6u].z, fma(_522, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _521));
    float _709 = fma(_523, cbSceneParam._m0[7u].z, fma(_522, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _521));
    vec4 _711 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _713 = _711.x;
    float _725 = (((_711.y - _525) + (_711.w * _525)) * cbMtdParam._m0[3u].x) + _525;
    float _742 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_713 * _713)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _750 = (((cbMatDynParam._m0[15u].x - _529) * cbMatDynParam._m0[15u].w) * _742) + _529;
    float _758 = ((_742 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _725)) + _725;
    uint _782 = uint(roundEven(NORMAL.w)) * 13u;
    uint _783 = _782 + 9u;
    uint _784 = _783 + uint(cbMatDynParam._m0[0u].w);
    float _790 = (cbMtdParam._m0[0u].x * _537) * cbInstanceData._m0[_784].x;
    float _791 = (cbMtdParam._m0[0u].y * _538) * cbInstanceData._m0[_784].y;
    float _792 = (cbMtdParam._m0[0u].z * _539) * cbInstanceData._m0[_784].z;
    float _4161 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _793 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _4172 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _794 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _4183 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _795 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    vec4 _796 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _801 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _812 = (((_801.x - _750) + (_801.w * _750)) * cbMtdParam._m0[3u].x) + _750;
    float _825 = (cbMtdParam._m0[3u].x * (((_793 * _685) - _793) + _796.x)) + _793;
    float _826 = (cbMtdParam._m0[3u].x * (((_794 * _685) - _794) + _796.y)) + _794;
    float _827 = (cbMtdParam._m0[3u].x * (((_795 * _685) - _795) + _796.z)) + _795;
    vec4 _828 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _841 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_750 * (_537 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_750 * (_538 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_750 * (_539 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _828.z;
    float _845 = _841 * cbMatDynParam._m0[13u].w;
    float _855 = (_845 * (cbMatDynParam._m0[13u].x - _825)) + _825;
    float _856 = (_845 * (cbMatDynParam._m0[13u].y - _826)) + _826;
    float _857 = (_845 * (cbMatDynParam._m0[13u].z - _827)) + _827;
    float _865 = ((_841 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _812)) + _812;
    float _866 = 1.0 - _865;
    float _867 = _866 * _855;
    float _868 = _866 * _856;
    float _869 = _866 * _857;
    float _873 = (_855 + (-0.039999999105930328369140625)) * _865;
    float _874 = (_856 + (-0.039999999105930328369140625)) * _865;
    float _875 = (_857 + (-0.039999999105930328369140625)) * _865;
    float _876 = _873 + 0.039999999105930328369140625;
    float _877 = _874 + 0.039999999105930328369140625;
    float _878 = _875 + 0.039999999105930328369140625;
    vec4 _887 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _680, cbSceneParam._m0[86u].y * _681));
    float _890 = _887.x * TEXCOORD_4;
    float _891 = _551 * 2.0;
    float _895 = (_891 * _521) - _548;
    float _896 = (_891 * _522) - _549;
    float _897 = (_891 * _523) - _550;
    float _898 = abs(_616);
    float _4194 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _900 = sqrt(_758);
    float _912 = exp2((_900 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_900 * 3.0));
    float _918 = (1.0 - _912) * ((_900 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _919 = _912 * _900;
    float _947 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _951 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _955 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1284;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1011 = fma(_955, cbModelParam._m0[26u].z, fma(_951, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _947));
        float _1015 = fma(_955, cbModelParam._m0[27u].z, fma(_951, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _947));
        float _1019 = fma(_955, cbModelParam._m0[28u].z, fma(_951, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _947));
        float _1042 = _947 + _521;
        float _1043 = _951 + _522;
        float _1044 = _955 + _523;
        float _1054 = fma(_1044, cbModelParam._m0[26u].z, fma(_1043, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1042)) - _1011;
        float _1055 = fma(_1044, cbModelParam._m0[27u].z, fma(_1043, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1042)) - _1015;
        float _1056 = fma(_1044, cbModelParam._m0[28u].z, fma(_1043, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1042)) - _1019;
        float _1060 = inversesqrt(dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056)));
        float _1073 = ((_1060 * _1054) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1011 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1074 = ((_1060 * _1055) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1015 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1075 = ((_1060 * _1056) / cbModelParam._m0[34u].z) + ((((((_1019 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1073, _1074, _1075), 0.0);
        float _1112 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1078.x + (-0.5));
        float _1114 = _1112 * (_1078.y + (-0.5));
        float _1115 = _1112 * (_1078.z + (-0.5));
        float _1122 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1085.x + (-0.5));
        float _1124 = _1122 * (_1085.y + (-0.5));
        float _1125 = _1122 * (_1085.z + (-0.5));
        float _1132 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1092.x + (-0.5));
        float _1134 = _1132 * (_1092.y + (-0.5));
        float _1135 = _1132 * (_1092.z + (-0.5));
        float _1142 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1099.x + (-0.5));
        float _1144 = _1142 * (_1099.y + (-0.5));
        float _1145 = _1142 * (_1099.z + (-0.5));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = _1113 * 0.5;
        float _1150 = _1123 * 0.5;
        float _1151 = _1133 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1166 = (dot(vec3(_521, _522, _523), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _4220 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1176 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _4231 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _4242 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_1178 + 1.0))) + _1183) * _1146;
        float _1193 = _1114 * 0.5;
        float _1194 = _1124 * 0.5;
        float _1195 = _1134 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(_521, _522, _523), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _4253 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _4264 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _4275 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_1220 + 1.0))) + _1225) * _1147;
        float _1235 = _1115 * 0.5;
        float _1236 = _1125 * 0.5;
        float _1237 = _1135 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_521, _522, _523), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _4286 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _4297 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _4308 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_1262 + 1.0))) + _1267) * _1148;
        _1284 = _1115;
        _1286 = _1114;
        _1287 = _1113;
        _1288 = _1125;
        _1289 = _1124;
        _1290 = _1123;
        _1291 = _1135;
        _1292 = _1134;
        _1293 = _1133;
        _1294 = _1148;
        _1295 = _1147;
        _1296 = _1146;
        _1297 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
        _1298 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
        _1299 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
    }
    else
    {
        _1284 = _1285;
        _1286 = _1285;
        _1287 = _1285;
        _1288 = _1285;
        _1289 = _1285;
        _1290 = _1285;
        _1291 = _1285;
        _1292 = _1285;
        _1293 = _1285;
        _1294 = _1285;
        _1295 = _1285;
        _1296 = _1285;
        _1297 = 0.0;
        _1298 = 0.0;
        _1299 = 0.0;
    }
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1328 = fma(_955, cbModelParam._m0[30u].z, fma(_951, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _947));
        float _1332 = fma(_955, cbModelParam._m0[31u].z, fma(_951, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _947));
        float _1336 = fma(_955, cbModelParam._m0[32u].z, fma(_951, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _947));
        float _1359 = _947 + _521;
        float _1360 = _951 + _522;
        float _1361 = _955 + _523;
        float _1371 = fma(_1361, cbModelParam._m0[30u].z, fma(_1360, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1359)) - _1328;
        float _1372 = fma(_1361, cbModelParam._m0[31u].z, fma(_1360, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1359)) - _1332;
        float _1373 = fma(_1361, cbModelParam._m0[32u].z, fma(_1360, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1359)) - _1336;
        float _1377 = inversesqrt(dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373)));
        float _1390 = ((_1377 * _1371) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1328 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1391 = ((_1377 * _1372) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1332 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1392 = ((_1377 * _1373) / cbModelParam._m0[35u].z) + ((((((_1336 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1394 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1390, _1391, _1392), 0.0);
        vec4 _1401 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1390, _1391, _1392), 0.0);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1390, _1391, _1392), 0.0);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1390, _1391, _1392), 0.0);
        float _1427 = exp2((_1394.w + (-0.5)) * 20.0) * 2.0;
        float _1428 = _1427 * (_1394.x + (-0.5));
        float _1429 = _1427 * (_1394.y + (-0.5));
        float _1430 = _1427 * (_1394.z + (-0.5));
        float _1437 = exp2((_1401.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1401.x + (-0.5));
        float _1439 = _1437 * (_1401.y + (-0.5));
        float _1440 = _1437 * (_1401.z + (-0.5));
        float _1447 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1408.x + (-0.5));
        float _1449 = _1447 * (_1408.y + (-0.5));
        float _1450 = _1447 * (_1408.z + (-0.5));
        float _1457 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1415.x + (-0.5));
        float _1459 = _1457 * (_1415.y + (-0.5));
        float _1460 = _1457 * (_1415.z + (-0.5));
        float _1461 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1462 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1463 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1464 = _1428 * 0.5;
        float _1465 = _1438 * 0.5;
        float _1466 = _1448 * 0.5;
        float _1467 = dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466));
        float _1472 = (_1467 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1467);
        float _1480 = (dot(vec3(_521, _522, _523), vec3(_1472 * _1464, _1472 * _1465, _1472 * _1466)) + 1.0) * 0.5;
        float _4349 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1489 = sqrt(((_1465 * _1465) + (_1464 * _1464)) + (_1466 * _1466)) / (_1461 + 9.9999997473787516355514526367188e-06);
        float _4360 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1491 = _1490 * 2.0;
        float _1495 = (1.0 - _1490) / (_1490 + 1.0);
        float _4371 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _1505 = ((((1.0 - _1496) * (_1491 + 2.0)) * exp2(log2(isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_1491 + 1.0))) + _1496) * _1461;
        float _1506 = _1429 * 0.5;
        float _1507 = _1439 * 0.5;
        float _1508 = _1449 * 0.5;
        float _1509 = dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508));
        float _1514 = (_1509 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1509);
        float _1522 = (dot(vec3(_521, _522, _523), vec3(_1514 * _1506, _1514 * _1507, _1514 * _1508)) + 1.0) * 0.5;
        float _4382 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1531 = sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508)) / (_1462 + 9.9999997473787516355514526367188e-06);
        float _4393 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _1533 = _1532 * 2.0;
        float _1537 = (1.0 - _1532) / (_1532 + 1.0);
        float _4404 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _1547 = ((((1.0 - _1538) * (_1533 + 2.0)) * exp2(log2(isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * (_1533 + 1.0))) + _1538) * _1462;
        float _1548 = _1430 * 0.5;
        float _1549 = _1440 * 0.5;
        float _1550 = _1450 * 0.5;
        float _1551 = dot(vec3(_1548, _1549, _1550), vec3(_1548, _1549, _1550));
        float _1556 = (_1551 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1551);
        float _1564 = (dot(vec3(_521, _522, _523), vec3(_1556 * _1548, _1556 * _1549, _1556 * _1550)) + 1.0) * 0.5;
        float _4415 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1573 = sqrt(((_1549 * _1549) + (_1548 * _1548)) + (_1550 * _1550)) / (_1463 + 9.9999997473787516355514526367188e-06);
        float _4426 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _1575 = _1574 * 2.0;
        float _1579 = (1.0 - _1574) / (_1574 + 1.0);
        float _4437 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _1589 = ((((1.0 - _1580) * (_1575 + 2.0)) * exp2(log2(isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_1575 + 1.0))) + _1580) * _1463;
        _1597 = _1430;
        _1598 = _1429;
        _1599 = _1428;
        _1600 = _1440;
        _1601 = _1439;
        _1602 = _1438;
        _1603 = _1450;
        _1604 = _1449;
        _1605 = _1448;
        _1606 = _1463;
        _1607 = _1462;
        _1608 = _1461;
        _1609 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)));
        _1610 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)));
        _1611 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)));
    }
    else
    {
        _1597 = _1285;
        _1598 = _1285;
        _1599 = _1285;
        _1600 = _1285;
        _1601 = _1285;
        _1602 = _1285;
        _1603 = _1285;
        _1604 = _1285;
        _1605 = _1285;
        _1606 = _1285;
        _1607 = _1285;
        _1608 = _1285;
        _1609 = 0.0;
        _1610 = 0.0;
        _1611 = 0.0;
    }
    float _1621 = (cbModelParam._m0[1u].x * (_1609 - _1297)) + _1297;
    float _1622 = (cbModelParam._m0[1u].x * (_1610 - _1298)) + _1298;
    float _1623 = (cbModelParam._m0[1u].x * (_1611 - _1299)) + _1299;
    float _1644 = fma(_1623, cbSceneParam._m0[89u].z, fma(_1622, cbSceneParam._m0[89u].y, _1621 * cbSceneParam._m0[89u].x));
    float _1647 = fma(_1623, cbSceneParam._m0[90u].z, fma(_1622, cbSceneParam._m0[90u].y, _1621 * cbSceneParam._m0[90u].x));
    float _1650 = fma(_1623, cbSceneParam._m0[91u].z, fma(_1622, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1621));
    float _1665 = _895 * 0.5;
    float _1666 = _896 * 0.5;
    float _1667 = _897 * 0.5;
    float _1668 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1599, _1602, _1605, _1608));
    float _1671 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1598, _1601, _1604, _1607));
    float _1674 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1597, _1600, _1603, _1606));
    float _1705;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1681 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1284, _1288, _1291, _1294));
        float _1685 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1286, _1289, _1292, _1295));
        float _1689 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1287, _1290, _1293, _1296));
        float _1696 = dot(vec4(cbModelParam._m0[39u]), vec4(_1665, _1666, _1667, 1.0));
        _1705 = dot(vec3(isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)), isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1696) ? 0.0 : (isnan(0.0) ? _1696 : max(0.0, _1696))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1705 = 1.0;
    }
    float _1716;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1707 = dot(vec4(cbModelParam._m0[40u]), vec4(_1665, _1666, _1667, 1.0));
        _1716 = dot(vec3(isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)), isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)), isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1707) ? 0.0 : (isnan(0.0) ? _1707 : max(0.0, _1707))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1716 = 1.0;
    }
    float _1720 = (_1716 * cbModelParam._m0[1u].x) + (_1705 * (1.0 - cbModelParam._m0[1u].x));
    float _1730 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _758);
    float _1731 = isnan(_1730) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1730 : min(cbModelParam._m0[25u].z, _1730));
    float _1811;
    float _1813;
    float _1815;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1778 = fma(_955, cbModelParam._m0[13u].z, fma(_951, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _947)) + cbModelParam._m0[13u].w;
        float _1782 = fma(_955, cbModelParam._m0[14u].z, fma(_951, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _947)) + cbModelParam._m0[14u].w;
        float _1786 = fma(_955, cbModelParam._m0[15u].z, fma(_951, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _947)) + cbModelParam._m0[15u].w;
        float _1789 = fma(_897, cbModelParam._m0[13u].z, fma(_896, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _895));
        float _1792 = fma(_897, cbModelParam._m0[14u].z, fma(_896, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _895));
        float _1795 = fma(_897, cbModelParam._m0[15u].z, fma(_896, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _895));
        float _1823;
        if (_1789 > 0.0)
        {
            _1823 = abs((1.0 - _1778) / _1789);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1778 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1823 = frontier_phi_19_17_ladder;
        }
        float _1998;
        if (_1792 > 0.0)
        {
            _1998 = abs((1.0 - _1782) / _1792);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1782 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1998 = frontier_phi_28_24_ladder;
        }
        float _2294;
        if (_1795 > 0.0)
        {
            _2294 = abs((1.0 - _1786) / _1795);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1786 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2294 = frontier_phi_40_35_ladder;
        }
        float _2296 = isnan(_1998) ? _1823 : (isnan(_1823) ? _1998 : min(_1823, _1998));
        float _2297 = isnan(_2294) ? _2296 : (isnan(_2296) ? _2294 : min(_2296, _2294));
        float _2301 = (_2297 * _1789) + _1778;
        float _2302 = (_2297 * _1792) + _1782;
        float _2303 = (_2297 * _1795) + _1786;
        float _2304 = _2297 * 9.9999997473787516355514526367188e-05;
        float _2306 = (-1.0) - _2304;
        float _2308 = _2304 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2303 > _2308) || ((_2303 < _2306) || ((_2302 > _2308) || ((_2302 < _2306) || ((_2301 < _2306) || (_2301 > _2308))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2448 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2303, cbModelParam._m0[9u].z, fma(_2302, cbModelParam._m0[9u].y, _2301 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2303, cbModelParam._m0[10u].z, fma(_2302, cbModelParam._m0[10u].y, _2301 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2303, cbModelParam._m0[11u].z, fma(_2302, cbModelParam._m0[11u].y, _2301 * cbModelParam._m0[11u].x))), _1731);
            frontier_phi_18_40_ladder = _2448.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2448.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2448.x * cbModelParam._m0[1u].y;
        }
        _1811 = frontier_phi_18_40_ladder_2;
        _1813 = frontier_phi_18_40_ladder_1;
        _1815 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1799 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_895, _896, _897), _1731);
        _1811 = _1799.x * cbModelParam._m0[1u].y;
        _1813 = _1799.y * cbModelParam._m0[1u].y;
        _1815 = _1799.z * cbModelParam._m0[1u].y;
    }
    float _1819 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _758);
    float _1820 = isnan(_1819) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1819 : min(cbModelParam._m0[25u].w, _1819));
    float _1913;
    float _1915;
    float _1917;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1877 = fma(_955, cbModelParam._m0[21u].z, fma(_951, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _947)) + cbModelParam._m0[21u].w;
        float _1881 = fma(_955, cbModelParam._m0[22u].z, fma(_951, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _947)) + cbModelParam._m0[22u].w;
        float _1885 = fma(_955, cbModelParam._m0[23u].z, fma(_951, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _947)) + cbModelParam._m0[23u].w;
        float _1888 = fma(_897, cbModelParam._m0[21u].z, fma(_896, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _895));
        float _1891 = fma(_897, cbModelParam._m0[22u].z, fma(_896, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _895));
        float _1894 = fma(_897, cbModelParam._m0[23u].z, fma(_896, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _895));
        float _2003;
        if (_1888 > 0.0)
        {
            _2003 = abs((1.0 - _1877) / _1888);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1877 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2003 = frontier_phi_30_26_ladder;
        }
        float _2321;
        if (_1891 > 0.0)
        {
            _2321 = abs((1.0 - _1881) / _1891);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1881 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2321 = frontier_phi_42_37_ladder;
        }
        float _2659;
        if (_1894 > 0.0)
        {
            _2659 = abs((1.0 - _1885) / _1894);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1885 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2659 = frontier_phi_52_49_ladder;
        }
        float _2661 = isnan(_2321) ? _2003 : (isnan(_2003) ? _2321 : min(_2003, _2321));
        float _2662 = isnan(_2659) ? _2661 : (isnan(_2661) ? _2659 : min(_2661, _2659));
        float _2666 = (_2662 * _1888) + _1877;
        float _2667 = (_2662 * _1891) + _1881;
        float _2668 = (_2662 * _1894) + _1885;
        float _2669 = _2662 * 9.9999997473787516355514526367188e-05;
        float _2670 = (-1.0) - _2669;
        float _2672 = _2669 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2668 > _2672) || ((_2668 < _2670) || ((_2667 > _2672) || ((_2667 < _2670) || ((_2666 < _2670) || (_2666 > _2672))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2790 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2668, cbModelParam._m0[17u].z, fma(_2667, cbModelParam._m0[17u].y, _2666 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2668, cbModelParam._m0[18u].z, fma(_2667, cbModelParam._m0[18u].y, _2666 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2668, cbModelParam._m0[19u].z, fma(_2667, cbModelParam._m0[19u].y, _2666 * cbModelParam._m0[19u].x))), _1820);
            frontier_phi_27_52_ladder = _2790.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2790.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2790.x * cbModelParam._m0[1u].z;
        }
        _1913 = frontier_phi_27_52_ladder_2;
        _1915 = frontier_phi_27_52_ladder_1;
        _1917 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1897 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_895, _896, _897), _1820);
        _1913 = _1897.x * cbModelParam._m0[1u].z;
        _1915 = _1897.y * cbModelParam._m0[1u].z;
        _1917 = _1897.z * cbModelParam._m0[1u].z;
    }
    float _1930 = (((_918 * _876) + _919) * _890) * ((cbModelParam._m0[1u].w * (_1913 - _1811)) + _1811);
    float _1932 = (((_918 * _877) + _919) * _890) * ((cbModelParam._m0[1u].w * (_1915 - _1813)) + _1813);
    float _1934 = (((_918 * _878) + _919) * _890) * ((cbModelParam._m0[1u].w * (_1917 - _1815)) + _1815);
    float _1937 = fma(_1934, cbSceneParam._m0[89u].z, fma(_1932, cbSceneParam._m0[89u].y, _1930 * cbSceneParam._m0[89u].x));
    float _1940 = fma(_1934, cbSceneParam._m0[90u].z, fma(_1932, cbSceneParam._m0[90u].y, _1930 * cbSceneParam._m0[90u].x));
    float _1943 = fma(_1934, cbSceneParam._m0[91u].z, fma(_1932, cbSceneParam._m0[91u].y, _1930 * cbSceneParam._m0[91u].x));
    float _1977 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1981 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1985 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1989 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1990 = _1977 / _1989;
    float _1991 = _1981 / _1989;
    float _1992 = _1985 / _1989;
    float _2139;
    float _2140;
    float _2141;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2019 = ((uint(_1992 > cbSceneParam._m0[59u].y) + uint(_1992 > cbSceneParam._m0[59u].x)) + uint(_1992 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2020 = _2019 + 43u;
        uint _2028 = _2019 + 44u;
        uint _2036 = _2019 + 45u;
        uint _2044 = _2019 + 46u;
        float _2055 = fma(_1989, cbSceneParam._m0[_2020].w, fma(_1985, cbSceneParam._m0[_2020].z, fma(_1981, cbSceneParam._m0[_2020].y, _1977 * cbSceneParam._m0[_2020].x)));
        float _2059 = fma(_1989, cbSceneParam._m0[_2028].w, fma(_1985, cbSceneParam._m0[_2028].z, fma(_1981, cbSceneParam._m0[_2028].y, _1977 * cbSceneParam._m0[_2028].x)));
        float _2067 = fma(_1989, cbSceneParam._m0[_2044].w, fma(_1985, cbSceneParam._m0[_2044].z, fma(_1981, cbSceneParam._m0[_2044].y, _1977 * cbSceneParam._m0[_2044].x)));
        float _2072 = cbSceneParam._m0[33u].z * _2067;
        float _2074 = cbSceneParam._m0[33u].w * _2067;
        float _2077 = fma(_1989, cbSceneParam._m0[_2036].w, fma(_1985, cbSceneParam._m0[_2036].z, fma(_1981, cbSceneParam._m0[_2036].y, _1977 * cbSceneParam._m0[_2036].x))) / _2067;
        float _2125 = (cbSceneParam._m0[33u].x - sqrt(((_1991 * _1991) + (_1990 * _1990)) + (_1992 * _1992))) * cbSceneParam._m0[33u].y;
        float _4563 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2132 = (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2072 + _2055) / _2067, (_2074 + _2059) / _2067), _2077), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2074 + _2055) / _2067, (_2059 - _2072) / _2067), _2077), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2055 - _2072) / _2067, (_2059 - _2074) / _2067), _2077), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2055 - _2074) / _2067, (_2072 + _2059) / _2067), _2077), 0.0)).x), vec4(0.25)));
        _2139 = 1.0 - (_2132 * cbSceneParam._m0[34u].x);
        _2140 = 1.0 - (_2132 * cbSceneParam._m0[34u].y);
        _2141 = 1.0 - (_2132 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2139 = 1.0;
        _2140 = 1.0;
        _2141 = 1.0;
    }
    float _2205;
    float _2207;
    float _2209;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2193 = fma(_1989, cbSceneParam._m0[63u].w, fma(_1985, cbSceneParam._m0[63u].z, fma(_1981, cbSceneParam._m0[63u].y, _1977 * cbSceneParam._m0[63u].x)));
        float _2194 = fma(_1989, cbSceneParam._m0[60u].w, fma(_1985, cbSceneParam._m0[60u].z, fma(_1981, cbSceneParam._m0[60u].y, _1977 * cbSceneParam._m0[60u].x))) / _2193;
        float _2195 = fma(_1989, cbSceneParam._m0[61u].w, fma(_1985, cbSceneParam._m0[61u].z, fma(_1981, cbSceneParam._m0[61u].y, _1977 * cbSceneParam._m0[61u].x))) / _2193;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2194 >= cbSceneParam._m0[64u].x) && (_2195 >= cbSceneParam._m0[64u].y)) && (_2194 <= cbSceneParam._m0[64u].z)) && (_2195 <= cbSceneParam._m0[64u].w))
        {
            float _2334 = fma(_1989, cbSceneParam._m0[62u].w, fma(_1985, cbSceneParam._m0[62u].z, fma(_1981, cbSceneParam._m0[62u].y, _1977 * cbSceneParam._m0[62u].x))) / _2193;
            float _2338 = isnan(cbSceneParam._m0[41u].w) ? _2334 : (isnan(_2334) ? cbSceneParam._m0[41u].w : max(_2334, cbSceneParam._m0[41u].w));
            float _2381 = (cbSceneParam._m0[33u].x - sqrt(((_1991 * _1991) + (_1990 * _1990)) + (_1992 * _1992))) * cbSceneParam._m0[33u].y;
            float _4579 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
            float _2388 = (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2194, cbSceneParam._m0[33u].w + _2195), _2338), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2194, _2195 - cbSceneParam._m0[33u].z), _2338), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2194 - cbSceneParam._m0[33u].z, _2195 - cbSceneParam._m0[33u].w), _2338), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2194 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2195), _2338), 0.0)).x), vec4(0.25)));
            float _2392 = 1.0 - (_2388 * cbSceneParam._m0[34u].x);
            float _2393 = 1.0 - (_2388 * cbSceneParam._m0[34u].y);
            float _2394 = 1.0 - (_2388 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2393) ? _2140 : (isnan(_2140) ? _2393 : min(_2140, _2393));
            frontier_phi_39_38_ladder_1 = isnan(_2392) ? _2139 : (isnan(_2139) ? _2392 : min(_2139, _2392));
            frontier_phi_39_38_ladder_2 = isnan(_2394) ? _2141 : (isnan(_2141) ? _2394 : min(_2141, _2394));
        }
        else
        {
            frontier_phi_39_38_ladder = _2140;
            frontier_phi_39_38_ladder_1 = _2139;
            frontier_phi_39_38_ladder_2 = _2141;
        }
        _2205 = frontier_phi_39_38_ladder_1;
        _2207 = frontier_phi_39_38_ladder;
        _2209 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2205 = _2139;
        _2207 = _2140;
        _2209 = _2141;
    }
    uvec4 _2214 = floatBitsToUint(cbInstanceData._m0[_782 + 5u]);
    uint _2216 = _2214.x * 14u;
    uint _2217 = _2216 + 13u;
    float _2224 = _890 + (-1.0);
    float _2229 = (cbLight._m0[_2217].x * _2224) + 1.0;
    float _2230 = (cbLight._m0[_2217].y * _2224) + 1.0;
    float _2231 = (cbLight._m0[_2217].z * _2224) + 1.0;
    float _2232 = (cbLight._m0[_2217].w * _2224) + 1.0;
    uint _2233 = _2216 + 5u;
    float _2239 = isnan(1.0) ? _2230 : (isnan(_2230) ? 1.0 : min(_2230, 1.0));
    uint _2243 = _2216 + 4u;
    float _2253 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
    uint _2257 = _2216 | 1u;
    float _2268 = dot(vec3(cbLight._m0[_2216].xyz), vec3(_521, _522, _523));
    float _2271 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_521, _522, _523));
    float _4615 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _4626 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2276 = (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * 0.3183098733425140380859375;
    float _2278 = (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * 0.3183098733425140380859375;
    float _2285 = ((cbLight._m0[_2233].x * _2239) * _2278) + (((cbLight._m0[_2243].x * _2205) * _2253) * _2276);
    float _2286 = ((_2239 * cbLight._m0[_2233].y) * _2278) + (((cbLight._m0[_2243].y * _2207) * _2253) * _2276);
    float _2287 = ((_2239 * cbLight._m0[_2233].z) * _2278) + (((cbLight._m0[_2243].z * _2209) * _2253) * _2276);
    uvec4 _2291 = floatBitsToUint(cbLight._m0[_2216 + 12u]);
    bool _2293 = _2291.x == 0u;
    float _2395;
    float _2397;
    float _2399;
    if (_2293)
    {
        _2395 = _2285;
        _2397 = _2286;
        _2399 = _2287;
    }
    else
    {
        uint _2403 = _2216 + 6u;
        float _2419 = (dot(vec3(cbLight._m0[_2216 + 2u].xyz), vec3(_521, _522, _523)) * 0.5) + 0.5;
        float _2420 = _2419 * _2419;
        float _4637 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2421 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
        float _2422 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
        _2395 = (((cbLight._m0[_2403].x * 0.3183098733425140380859375) * _2421) * _2422) + _2285;
        _2397 = (((cbLight._m0[_2403].y * 0.3183098733425140380859375) * _2421) * _2422) + _2286;
        _2399 = (((cbLight._m0[_2403].z * 0.3183098733425140380859375) * _2421) * _2422) + _2287;
    }
    bool _2402 = _2291.y == 0u;
    float _2457;
    float _2459;
    float _2461;
    if (_2402)
    {
        _2457 = _2395;
        _2459 = _2397;
        _2461 = _2399;
    }
    else
    {
        uint _2630 = _2216 + 7u;
        float _2646 = (dot(vec3(cbLight._m0[_2216 + 3u].xyz), vec3(_521, _522, _523)) * 0.5) + 0.5;
        float _2647 = _2646 * _2646;
        float _4653 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2648 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
        float _2649 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
        _2457 = (((cbLight._m0[_2630].x * 0.3183098733425140380859375) * _2648) * _2649) + _2395;
        _2459 = (((cbLight._m0[_2630].y * 0.3183098733425140380859375) * _2648) * _2649) + _2397;
        _2461 = (((cbLight._m0[_2630].z * 0.3183098733425140380859375) * _2648) * _2649) + _2399;
    }
    uint _2464 = _2216 + 8u;
    float _2477 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2216].w)) * _758) * 0.949999988079071044921875);
    float _2478 = _2477 * _2477;
    float _2479 = cbLight._m0[_2216].x + _548;
    float _2480 = cbLight._m0[_2216].y + _549;
    float _2481 = cbLight._m0[_2216].z + _550;
    float _2485 = inversesqrt(dot(vec3(_2479, _2480, _2481), vec3(_2479, _2480, _2481)));
    float _2486 = _2485 * _2479;
    float _2487 = _2485 * _2480;
    float _2488 = _2485 * _2481;
    float _2489 = dot(vec3(_521, _522, _523), vec3(cbLight._m0[_2216].xyz));
    float _4669 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2492 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
    float _4680 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _2493 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
    float _2494 = dot(vec3(_521, _522, _523), vec3(_2486, _2487, _2488));
    float _4691 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2497 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
    float _2498 = dot(vec3(cbLight._m0[_2216].xyz), vec3(_2486, _2487, _2488));
    float _4702 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
    float _2502 = _2478 * _2478;
    float _2506 = ((_2497 * _2497) * (_2502 + (-1.0))) + 1.0;
    float _2514 = exp2(log2(1.0 - (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0)))) * 5.0);
    float _2515 = 0.959999978542327880859375 - _873;
    float _2517 = 0.959999978542327880859375 - _874;
    float _2518 = 0.959999978542327880859375 - _875;
    float _2525 = 1.0 - _2478;
    float _2536 = (0.5 / (((_2493 * ((_2492 * _2525) + _2478)) + 9.9999999392252902907785028219223e-09) + (((_2493 * _2525) + _2478) * _2492))) * _2492;
    float _4713 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2538 = (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0))) * (_2502 / ((_2506 * _2506) * 3.141590118408203125));
    uint _2552 = _2216 + 9u;
    float _2563 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2257].w)) * _758) * 0.949999988079071044921875);
    float _2564 = _2563 * _2563;
    float _2565 = cbLight._m0[_2257].x + _548;
    float _2566 = cbLight._m0[_2257].y + _549;
    float _2567 = cbLight._m0[_2257].z + _550;
    float _2571 = inversesqrt(dot(vec3(_2565, _2566, _2567), vec3(_2565, _2566, _2567)));
    float _2572 = _2571 * _2565;
    float _2573 = _2571 * _2566;
    float _2574 = _2571 * _2567;
    float _2575 = dot(vec3(_521, _522, _523), vec3(cbLight._m0[_2257].xyz));
    float _4724 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
    float _2578 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
    float _2579 = dot(vec3(_521, _522, _523), vec3(_2572, _2573, _2574));
    float _4735 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
    float _2582 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
    float _2583 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_2572, _2573, _2574));
    float _4746 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2587 = _2564 * _2564;
    float _2591 = ((_2582 * _2582) * (_2587 + (-1.0))) + 1.0;
    float _2598 = exp2(log2(1.0 - (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0)))) * 5.0);
    float _2605 = 1.0 - _2564;
    float _2615 = (0.5 / (((_2493 * ((_2578 * _2605) + _2564)) + 9.9999999392252902907785028219223e-09) + (((_2493 * _2605) + _2564) * _2578))) * _2578;
    float _4757 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
    float _2617 = (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2587 / ((_2591 * _2591) * 3.141590118408203125));
    float _2627 = (((((_2598 * _2515) + _876) * cbLight._m0[_2552].x) * _2617) * _2239) + ((((cbLight._m0[_2464].x * _2205) * ((_2514 * _2515) + _876)) * _2538) * _2253);
    float _2628 = (((((_2598 * _2517) + _877) * cbLight._m0[_2552].y) * _2617) * _2239) + ((((cbLight._m0[_2464].y * _2207) * ((_2514 * _2517) + _877)) * _2538) * _2253);
    float _2629 = (((((_2598 * _2518) + _878) * cbLight._m0[_2552].z) * _2617) * _2239) + ((((cbLight._m0[_2464].z * _2209) * ((_2514 * _2518) + _878)) * _2538) * _2253);
    float _2685;
    float _2687;
    float _2689;
    if (_2293)
    {
        _2685 = _2627;
        _2687 = _2628;
        _2689 = _2629;
    }
    else
    {
        uint _2691 = _2216 + 2u;
        uint _2695 = _2216 + 10u;
        float _2709 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2691].w)) * _758) * 0.949999988079071044921875);
        float _2710 = _2709 * _2709;
        float _2711 = cbLight._m0[_2691].x + _548;
        float _2712 = cbLight._m0[_2691].y + _549;
        float _2713 = cbLight._m0[_2691].z + _550;
        float _2717 = inversesqrt(dot(vec3(_2711, _2712, _2713), vec3(_2711, _2712, _2713)));
        float _2718 = _2717 * _2711;
        float _2719 = _2717 * _2712;
        float _2720 = _2717 * _2713;
        float _2721 = dot(vec3(_521, _522, _523), vec3(cbLight._m0[_2691].xyz));
        float _4768 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2724 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
        float _2725 = dot(vec3(_521, _522, _523), vec3(_2718, _2719, _2720));
        float _4779 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2728 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
        float _2729 = dot(vec3(cbLight._m0[_2691].xyz), vec3(_2718, _2719, _2720));
        float _4790 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2733 = _2710 * _2710;
        float _2737 = ((_2728 * _2728) * (_2733 + (-1.0))) + 1.0;
        float _2744 = exp2(log2(1.0 - (isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0)))) * 5.0);
        float _2751 = 1.0 - _2710;
        float _2761 = (0.5 / (((_2493 * ((_2724 * _2751) + _2710)) + 9.9999999392252902907785028219223e-09) + (((_2493 * _2751) + _2710) * _2724))) * _2724;
        float _4801 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        float _2763 = (isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0))) * (_2733 / ((_2737 * _2737) * 3.141590118408203125));
        float _2764 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
        _2685 = (((((_2744 * _2515) + _876) * cbLight._m0[_2695].x) * _2763) * _2764) + _2627;
        _2687 = (((((_2744 * _2517) + _877) * cbLight._m0[_2695].y) * _2763) * _2764) + _2628;
        _2689 = (((((_2744 * _2518) + _878) * cbLight._m0[_2695].z) * _2763) * _2764) + _2629;
    }
    float _2795;
    float _2797;
    float _2799;
    if (_2402)
    {
        _2795 = _2685;
        _2797 = _2687;
        _2799 = _2689;
    }
    else
    {
        uint _2806 = _2216 + 3u;
        uint _2810 = _2216 + 11u;
        float _2824 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2806].w)) * _758) * 0.949999988079071044921875);
        float _2825 = _2824 * _2824;
        float _2826 = cbLight._m0[_2806].x + _548;
        float _2827 = cbLight._m0[_2806].y + _549;
        float _2828 = cbLight._m0[_2806].z + _550;
        float _2832 = inversesqrt(dot(vec3(_2826, _2827, _2828), vec3(_2826, _2827, _2828)));
        float _2833 = _2832 * _2826;
        float _2834 = _2832 * _2827;
        float _2835 = _2832 * _2828;
        float _2836 = dot(vec3(_521, _522, _523), vec3(cbLight._m0[_2806].xyz));
        float _4817 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        float _2839 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
        float _2840 = dot(vec3(_521, _522, _523), vec3(_2833, _2834, _2835));
        float _4828 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        float _2843 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
        float _2844 = dot(vec3(cbLight._m0[_2806].xyz), vec3(_2833, _2834, _2835));
        float _4839 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2848 = _2825 * _2825;
        float _2852 = ((_2843 * _2843) * (_2848 + (-1.0))) + 1.0;
        float _2859 = exp2(log2(1.0 - (isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0)))) * 5.0);
        float _2866 = 1.0 - _2825;
        float _2876 = (0.5 / (((_2493 * ((_2839 * _2866) + _2825)) + 9.9999999392252902907785028219223e-09) + (((_2493 * _2866) + _2825) * _2839))) * _2839;
        float _4850 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
        float _2878 = (isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0))) * (_2848 / ((_2852 * _2852) * 3.141590118408203125));
        float _2879 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
        _2795 = (((((_2859 * _2515) + _876) * cbLight._m0[_2810].x) * _2878) * _2879) + _2685;
        _2797 = (((((_2859 * _2517) + _877) * cbLight._m0[_2810].y) * _2878) * _2879) + _2687;
        _2799 = (((((_2859 * _2518) + _878) * cbLight._m0[_2810].z) * _2878) * _2879) + _2689;
    }
    float _2944;
    float _2946;
    float _2948;
    float _2950;
    float _2952;
    float _2954;
    if (_2214.y == 0u)
    {
        uvec4 _2900 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2901 = _2900.x;
        uint _2912 = uint((float(_2900.y) * floor(float(uint(cbSceneParam._m0[85u].y * _681) / _2901))) + floor(float(uint(cbSceneParam._m0[85u].x * _680) / _2901)));
        float _2922 = (log2(_1992 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2923 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
        uint _2926 = uint(isnan(14.0) ? _2923 : (isnan(_2923) ? 14.0 : min(_2923, 14.0)));
        uvec4 _2931 = texelFetch(g_lightClusterGridBuffer, int(((_2926 << 2u) + (_2912 << 6u)) >> 2u));
        uint _2932 = _2931.x;
        uint _2933 = _2900.z;
        float _3037;
        float _3039;
        float _3041;
        float _3043;
        float _3045;
        float _3047;
        if (((((1u << ((_2933 >> 4u) & 15u)) + 4294967295u) & _2932) == 0u) || ((_2933 & 240u) == 0u))
        {
            _3037 = 0.0;
            _3039 = 0.0;
            _3041 = 0.0;
            _3043 = 0.0;
            _3045 = 0.0;
            _3047 = 0.0;
        }
        else
        {
            float _3038;
            float _3040;
            float _3042;
            float _3044;
            float _3046;
            float _3048;
            float _3198 = 0.0;
            float _3199 = 0.0;
            float _3200 = 0.0;
            float _3201 = 0.0;
            float _3202 = 0.0;
            float _3203 = 0.0;
            uint _3204 = 0u;
            uint _3213;
            bool _3214;
            for (;;)
            {
                _3213 = texelFetch(g_lightClassification, int((((_2926 << 5u) + (_2912 << 9u)) + (_3204 << 2u)) >> 2u)).x;
                _3214 = _3213 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3214)
                {
                    frontier_phi_73_pred = _3203;
                    frontier_phi_73_pred_1 = _3202;
                    frontier_phi_73_pred_2 = _3201;
                    frontier_phi_73_pred_3 = _3200;
                    frontier_phi_73_pred_4 = _3199;
                    frontier_phi_73_pred_5 = _3198;
                }
                else
                {
                    float _3343;
                    float _3344;
                    float _3345;
                    float _3346;
                    float _3347;
                    float _3348;
                    uint _3349;
                    _3343 = _3198;
                    _3344 = _3199;
                    _3345 = _3200;
                    _3346 = _3201;
                    _3347 = _3202;
                    _3348 = _3203;
                    _3349 = _3213;
                    float _3270;
                    float _3271;
                    float _3272;
                    float _3273;
                    float _3274;
                    float _3275;
                    for (;;)
                    {
                        uint _3353 = uint(findLSB(_3349)) + (_3204 << 5u);
                        uint _3350 = (_3349 + 4294967295u) & _3349;
                        uint _3355 = _3353 * 48u;
                        vec4 _3369 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3355)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 3u)).x));
                        uint _3375 = (_3353 * 48u) + 4u;
                        vec4 _3388 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3375)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 3u)).x));
                        uint _3394 = (_3353 * 48u) + 8u;
                        vec3 _3405 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3394)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 2u)).x));
                        float _3409 = _3369.x - _1990;
                        float _3410 = _3369.y - _1991;
                        float _3411 = _3369.z - _1992;
                        float _3412 = dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411));
                        float _3415 = inversesqrt(_3412);
                        float _3416 = _3415 * _3409;
                        float _3417 = _3415 * _3410;
                        float _3418 = _3415 * _3411;
                        float _3419 = dot(vec3(_703, _706, _709), vec3(_3416, _3417, _3418));
                        float _3424 = 1.0 - (_3412 * _3369.w);
                        float _4876 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                        float _3425 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
                        float _3426 = sqrt(_3412) * _3388.w;
                        float _3429 = 1.39999997615814208984375 / (_3426 + 1.39999997615814208984375);
                        float _3430 = _3429 * _3429;
                        float _3433 = ((1.0 - _3430) * _3419) + _3430;
                        float _3436 = _3426 * _3426;
                        float _3439 = ((isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0))) * _3425) / ((_3436 * 0.699999988079071044921875) + 1.0);
                        float _3443 = (-0.0) - _1990;
                        float _3444 = (-0.0) - _1991;
                        float _3445 = (-0.0) - _1992;
                        float _3449 = inversesqrt(dot(vec3(_3443, _3444, _3445), vec3(_3443, _3444, _3445)));
                        float _3450 = _3449 * _3443;
                        float _3451 = _3449 * _3444;
                        float _3452 = _3449 * _3445;
                        float _3459 = exp2(log2(1.0 / ((_3436 * 3.5) + 5.0)) * 0.25);
                        float _3460 = 1.0 - _900;
                        float _3467 = sqrt(1.0 - ((1.0 - (_3460 * _3460)) * (1.0 - (_3459 * _3459))));
                        float _3468 = _3467 * _3467;
                        float _3469 = _3468 * _3468;
                        float _3470 = _3450 + _3416;
                        float _3471 = _3451 + _3417;
                        float _3472 = _3452 + _3418;
                        float _3476 = inversesqrt(dot(vec3(_3470, _3471, _3472), vec3(_3470, _3471, _3472)));
                        float _3480 = dot(vec3(_703, _706, _709), vec3(_3450, _3451, _3452));
                        float _4892 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                        float _3483 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
                        float _3484 = dot(vec3(_703, _706, _709), vec3(_3476 * _3470, _3476 * _3471, _3476 * _3472));
                        float _4903 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                        float _3487 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
                        float _3491 = ((_3487 * _3487) * (_3469 + (-1.0))) + 1.0;
                        float _3492 = _3429 * _3468;
                        float _3493 = _3492 * _3492;
                        float _3496 = ((1.0 - _3493) * _3419) + _3493;
                        float _4914 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                        float _3497 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
                        float _3498 = 1.0 - _3468;
                        float _3508 = (0.5 / (((_3497 * ((_3483 * _3498) + _3468)) + 9.9999999392252902907785028219223e-09) + (((_3497 * _3498) + _3468) * _3483))) * _3497;
                        float _4925 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                        float _3519 = (((_3469 * 3.1415927410125732421875) * (isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0)))) / ((_3491 * _3491) * ((_3436 * 2.1991131305694580078125) + 3.141590118408203125))) * _3425;
                        _3273 = (_3439 * _3388.x) + _3346;
                        _3274 = (_3439 * _3388.y) + _3347;
                        _3275 = (_3439 * _3388.z) + _3348;
                        _3270 = (_3519 * _3405.x) + _3343;
                        _3271 = (_3519 * _3405.y) + _3344;
                        _3272 = (_3519 * _3405.z) + _3345;
                        if (_3350 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3343 = _3270;
                            _3344 = _3271;
                            _3345 = _3272;
                            _3346 = _3273;
                            _3347 = _3274;
                            _3348 = _3275;
                            _3349 = _3350;
                        }
                    }
                    frontier_phi_73_pred = _3275;
                    frontier_phi_73_pred_1 = _3274;
                    frontier_phi_73_pred_2 = _3273;
                    frontier_phi_73_pred_3 = _3272;
                    frontier_phi_73_pred_4 = _3271;
                    frontier_phi_73_pred_5 = _3270;
                }
                _3048 = frontier_phi_73_pred;
                _3046 = frontier_phi_73_pred_1;
                _3044 = frontier_phi_73_pred_2;
                _3042 = frontier_phi_73_pred_3;
                _3040 = frontier_phi_73_pred_4;
                _3038 = frontier_phi_73_pred_5;
                uint _3205 = _3204 + 1u;
                if (_3205 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3198 = _3038;
                    _3199 = _3040;
                    _3200 = _3042;
                    _3201 = _3044;
                    _3202 = _3046;
                    _3203 = _3048;
                    _3204 = _3205;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3037 = _3038;
            _3039 = _3040;
            _3041 = _3042;
            _3043 = _3044;
            _3045 = _3046;
            _3047 = _3048;
        }
        uvec4 _3051 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3052 = _3051.z;
        uint _3054 = (_3052 >> 8u) & 15u;
        float _3166;
        float _3168;
        float _3170;
        float _3172;
        float _3174;
        float _3176;
        if (((4294967295u << _3054) & _2932) == 0u)
        {
            _3166 = _3037;
            _3168 = _3039;
            _3170 = _3041;
            _3172 = _3043;
            _3174 = _3045;
            _3176 = _3047;
        }
        else
        {
            float _3191 = inversesqrt(dot(vec3(_1990, _1991, _1992), vec3(_1990, _1991, _1992)));
            float _3192 = _3191 * _1990;
            float _3193 = _3191 * _1991;
            float _3194 = _3191 * _1992;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3054 < ((_3052 >> 12u) & 15u))
            {
                float _3167;
                float _3169;
                float _3171;
                float _3173;
                float _3175;
                float _3177;
                float _3326 = _3037;
                float _3327 = _3039;
                float _3328 = _3041;
                float _3329 = _3043;
                float _3330 = _3045;
                float _3331 = _3047;
                uint _3332 = _3054;
                uint _3341;
                bool _3342;
                for (;;)
                {
                    _3341 = texelFetch(g_lightClassification, int((((_2926 << 5u) + (_2912 << 9u)) + (_3332 << 2u)) >> 2u)).x;
                    _3342 = _3341 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3342)
                    {
                        frontier_phi_84_pred = _3330;
                        frontier_phi_84_pred_1 = _3329;
                        frontier_phi_84_pred_2 = _3328;
                        frontier_phi_84_pred_3 = _3327;
                        frontier_phi_84_pred_4 = _3326;
                        frontier_phi_84_pred_5 = _3331;
                    }
                    else
                    {
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3828;
                        float _3829;
                        float _3830;
                        float _3831;
                        float _3832;
                        float _3833;
                        float _3546 = _3326;
                        float _3547 = _3327;
                        float _3548 = _3328;
                        float _3549 = _3329;
                        float _3550 = _3330;
                        float _3551 = _3331;
                        uint _3552 = _3341;
                        uint _3553;
                        vec4 _3578;
                        float _3579;
                        vec4 _3594;
                        vec3 _3606;
                        vec4 _3621;
                        vec4 _3637;
                        float _3684;
                        bool _3685;
                        for (;;)
                        {
                            uint _3563 = ((_3332 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3552));
                            _3553 = (_3552 + 4294967295u) & _3552;
                            uint _3565 = _3563 * 40u;
                            _3578 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3565)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 3u)).x));
                            _3579 = _3578.w;
                            uint _3581 = (_3563 * 40u) + 4u;
                            _3594 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 3u)).x));
                            uint _3596 = (_3563 * 40u) + 8u;
                            _3606 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 2u)).x));
                            uint _3608 = (_3563 * 40u) + 16u;
                            _3621 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 3u)).x));
                            uint _3624 = (_3563 * 40u) + 20u;
                            _3637 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3624)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 3u)).x));
                            uint _3640 = (_3563 * 40u) + 24u;
                            vec4 _3653 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 3u)).x));
                            uint _3659 = (_3563 * 40u) + 28u;
                            vec4 _3672 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 3u)).x));
                            _3684 = fma(_1992, _3672.z, fma(_1991, _3672.y, _3672.x * _1990)) + _3672.w;
                            _3685 = !((fma(_1992, _3653.z, fma(_1991, _3653.y, _3653.x * _1990)) + _3653.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3685)
                            {
                                float _3712 = _3578.x - _1990;
                                float _3713 = _3578.y - _1991;
                                float _3714 = _3578.z - _1992;
                                float _3715 = dot(vec3(_3712, _3713, _3714), vec3(_3712, _3713, _3714));
                                float _3718 = inversesqrt(_3715);
                                float _3719 = _3718 * _3712;
                                float _3720 = _3718 * _3713;
                                float _3721 = _3718 * _3714;
                                float _3725 = 1.0 - (_3715 / (_3579 * _3579));
                                float _4936 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                                float _3726 = isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0));
                                float _3730 = sqrt(_3715) * _3594.w;
                                float _3732 = 1.39999997615814208984375 / (_3730 + 1.39999997615814208984375);
                                float _3733 = _3732 * _3732;
                                float _3736 = ((1.0 - _3733) * dot(vec3(_3719, _3720, _3721), vec3(_703, _706, _709))) + _3733;
                                float _3739 = _3730 * _3730;
                                float _3743 = (fma(_1992, _3621.z, fma(_1991, _3621.y, _3621.x * _1990)) + _3621.w) / _3684;
                                float _3744 = (fma(_1992, _3637.z, fma(_1991, _3637.y, _3637.x * _1990)) + _3637.w) / _3684;
                                float _3748 = 1.0 - dot(vec2(_3743, _3744), vec2(_3743, _3744));
                                float _4952 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3749 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
                                float _3750 = _3749 * (((isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0))) * _3726) / ((_3739 * 0.699999988079071044921875) + 1.0));
                                float _3762 = exp2(log2(1.0 / ((_3739 * 3.5) + 5.0)) * 0.25);
                                float _3763 = 1.0 - _900;
                                float _3770 = sqrt(1.0 - ((1.0 - (_3763 * _3763)) * (1.0 - (_3762 * _3762))));
                                float _3771 = _3770 * _3770;
                                float _3772 = _3771 * _3771;
                                float _3773 = _3719 - _3192;
                                float _3774 = _3720 - _3193;
                                float _3775 = _3721 - _3194;
                                float _3779 = inversesqrt(dot(vec3(_3773, _3774, _3775), vec3(_3773, _3774, _3775)));
                                float _3783 = dot(vec3(_703, _706, _709), vec3((-0.0) - _3192, (-0.0) - _3193, (-0.0) - _3194));
                                float _4963 = isnan(0.0) ? _3783 : (isnan(_3783) ? 0.0 : max(_3783, 0.0));
                                float _3786 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
                                float _3787 = dot(vec3(_703, _706, _709), vec3(_3779 * _3773, _3779 * _3774, _3779 * _3775));
                                float _4974 = isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0));
                                float _3790 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
                                float _3794 = ((_3790 * _3790) * (_3772 + (-1.0))) + 1.0;
                                float _3795 = _3732 * _3771;
                                float _3796 = _3795 * _3795;
                                float _3802 = ((1.0 - _3796) * dot(vec3(_703, _706, _709), vec3(_3719, _3720, _3721))) + _3796;
                                float _4985 = isnan(0.0) ? _3802 : (isnan(_3802) ? 0.0 : max(_3802, 0.0));
                                float _3803 = isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0));
                                float _3804 = 1.0 - _3771;
                                float _3814 = (0.5 / (((_3803 * ((_3786 * _3804) + _3771)) + 9.9999999392252902907785028219223e-09) + (((_3803 * _3804) + _3771) * _3786))) * _3803;
                                float _4996 = isnan(0.0) ? _3814 : (isnan(_3814) ? 0.0 : max(_3814, 0.0));
                                float _3824 = (_3749 * _3726) * (((_3772 * 3.1415927410125732421875) * (isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0)))) / ((_3794 * _3794) * ((_3739 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3750 * _3594.y;
                                frontier_phi_90_pred_1 = _3750 * _3594.x;
                                frontier_phi_90_pred_2 = _3824 * _3606.z;
                                frontier_phi_90_pred_3 = _3824 * _3606.y;
                                frontier_phi_90_pred_4 = _3824 * _3606.x;
                                frontier_phi_90_pred_5 = _3750 * _3594.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3832 = frontier_phi_90_pred;
                            _3831 = frontier_phi_90_pred_1;
                            _3830 = frontier_phi_90_pred_2;
                            _3829 = frontier_phi_90_pred_3;
                            _3828 = frontier_phi_90_pred_4;
                            _3833 = frontier_phi_90_pred_5;
                            _3536 = _3831 + _3549;
                            _3537 = _3832 + _3550;
                            _3538 = _3833 + _3551;
                            _3533 = _3828 + _3546;
                            _3534 = _3829 + _3547;
                            _3535 = _3830 + _3548;
                            if (_3553 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3546 = _3533;
                                _3547 = _3534;
                                _3548 = _3535;
                                _3549 = _3536;
                                _3550 = _3537;
                                _3551 = _3538;
                                _3552 = _3553;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3537;
                        frontier_phi_84_pred_1 = _3536;
                        frontier_phi_84_pred_2 = _3535;
                        frontier_phi_84_pred_3 = _3534;
                        frontier_phi_84_pred_4 = _3533;
                        frontier_phi_84_pred_5 = _3538;
                    }
                    _3175 = frontier_phi_84_pred;
                    _3173 = frontier_phi_84_pred_1;
                    _3171 = frontier_phi_84_pred_2;
                    _3169 = frontier_phi_84_pred_3;
                    _3167 = frontier_phi_84_pred_4;
                    _3177 = frontier_phi_84_pred_5;
                    uint _3333 = _3332 + 1u;
                    if (_3333 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3326 = _3167;
                        _3327 = _3169;
                        _3328 = _3171;
                        _3329 = _3173;
                        _3330 = _3175;
                        _3331 = _3177;
                        _3332 = _3333;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3177;
                frontier_phi_65_66_ladder_1 = _3173;
                frontier_phi_65_66_ladder_2 = _3175;
                frontier_phi_65_66_ladder_3 = _3169;
                frontier_phi_65_66_ladder_4 = _3167;
                frontier_phi_65_66_ladder_5 = _3171;
            }
            else
            {
                frontier_phi_65_66_ladder = _3047;
                frontier_phi_65_66_ladder_1 = _3043;
                frontier_phi_65_66_ladder_2 = _3045;
                frontier_phi_65_66_ladder_3 = _3039;
                frontier_phi_65_66_ladder_4 = _3037;
                frontier_phi_65_66_ladder_5 = _3041;
            }
            _3166 = frontier_phi_65_66_ladder_4;
            _3168 = frontier_phi_65_66_ladder_3;
            _3170 = frontier_phi_65_66_ladder_5;
            _3172 = frontier_phi_65_66_ladder_1;
            _3174 = frontier_phi_65_66_ladder_2;
            _3176 = frontier_phi_65_66_ladder;
        }
        float _3181 = isnan(1.0) ? _890 : (isnan(_890) ? 1.0 : min(_890, 1.0));
        _2944 = (_3181 * _3172) + _2457;
        _2946 = (_3181 * _3174) + _2459;
        _2948 = (_3181 * _3176) + _2461;
        _2950 = ((_3166 * _876) * _3181) + _2795;
        _2952 = ((_3168 * _877) * _3181) + _2797;
        _2954 = ((_3170 * _878) * _3181) + _2799;
    }
    else
    {
        _2944 = _2457;
        _2946 = _2459;
        _2948 = _2461;
        _2950 = _2795;
        _2952 = _2797;
        _2954 = _2799;
    }
    uint _2960 = _783 + uint(cbMatDynParam._m0[0u].w);
    float _2966 = cbInstanceData._m0[_2960].x * ((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _564) + cbMatDynParam._m0[7u].x) + (((_605 - (_605 * _529)) + (cbMatDynParam._m0[11u].x * _636)) * cbMatDynParam._m0[9u].x));
    float _2967 = cbInstanceData._m0[_2960].y * ((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _564) + cbMatDynParam._m0[7u].y) + (((_607 - (_607 * _529)) + (cbMatDynParam._m0[11u].y * _636)) * cbMatDynParam._m0[9u].y));
    float _2968 = cbInstanceData._m0[_2960].z * ((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _564) + cbMatDynParam._m0[7u].z) + (((_609 - (_609 * _529)) + (cbMatDynParam._m0[11u].z * _636)) * cbMatDynParam._m0[9u].z));
    float _5012 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _5023 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _5034 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _5045 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _2986 = (((isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0))) * (_2944 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _890))) + ((_2950 + ((isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))) * _1720)) * cbPerFrame._m0[3u].x)) + _2966;
    float _2988 = (_2967 + ((_2952 + ((isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))) * _1720)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0))) * (_2946 + ((isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))) * _890)));
    float _2990 = (_2968 + ((_2954 + ((isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))) * _1720)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0))) * (_2948 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _890)));
    float _2991 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
    float _2992 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
    float _2993 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
    float _2998 = cbMatDynParam._m0[12u].y - (cbMatDynParam._m0[12u].y * ((((isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) - _591) * _564) + _591));
    float _3003 = cbInstanceData._m0[_782 + 6u].w * (isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0)));
    float _3008 = _680 / cbSceneParam._m0[86u].x;
    float _3009 = _681 / cbSceneParam._m0[86u].y;
    vec4 _3023 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3008, _3009, (log2((isnan(cbSceneParam._m0[77u].w) ? _662 : (isnan(_662) ? cbSceneParam._m0[77u].w : min(_662, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3025 = _3023.x;
    float _3026 = _3023.y;
    float _3027 = _3023.z;
    float _3028 = _3023.w;
    float _3099;
    float _3101;
    float _3103;
    float _3105;
    if (_662 > cbSceneParam._m0[78u].w)
    {
        float _3062 = isnan(_662) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _662 : min(cbSceneParam._m0[80u].w, _662));
        float _3063 = _3062 / _662;
        float _3074 = _3063 * _291;
        float _3075 = _292 * _3063;
        float _3076 = (-0.0) - _3075;
        float _3077 = _3063 * _293;
        float _3079 = (cbSceneParam._m0[77u].w * _3076) / _3062;
        float _3080 = _3079 + cbSceneParam._m0[79u].w;
        float _3081 = cbSceneParam._m0[79u].w - _3075;
        float _3087 = sqrt(((_3074 * _3074) + (_3075 * _3075)) + (_3077 * _3077));
        float _3090 = (1.0 - (cbSceneParam._m0[77u].w / _3062)) * _3087;
        float _3095 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3097 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3283;
        if (abs((_3076 - _3079) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3283 = ((((_3080 > 0.0) ? exp2(_3095 * _3080) : (2.0 - exp2(_3097 * _3080))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3090;
        }
        else
        {
            float _3227 = 1.0 / cbSceneParam._m0[80u].x;
            float _3228 = isnan(_3081) ? _3080 : (isnan(_3080) ? _3081 : max(_3080, _3081));
            float _3229 = isnan(_3081) ? _3080 : (isnan(_3080) ? _3081 : min(_3080, _3081));
            float _3238 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : min(_3228, 0.0));
            float _3239 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : min(_3229, 0.0));
            _3283 = ((abs(_3087 / _3076) * cbSceneParam._m0[80u].y) * ((((_3238 - _3239) * 2.0) - ((exp2(_3095 * (isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0)))) - exp2(_3095 * (isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0))))) * _3227)) - ((exp2(_3097 * _3238) - exp2(_3097 * _3239)) * _3227))) + (_3090 * cbSceneParam._m0[80u].z);
        }
        vec4 _3285 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3008, _3009, 1.0), 0.0);
        float _3294 = exp2((_3283 * (-1.44269502162933349609375)) * (1.0 - _3285.w));
        float _3295 = log2(_3294);
        float _3311 = log2(_3028);
        _3099 = (exp2(_3311 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3295 * cbSceneParam._m0[78u].x)) * _3285.x) / cbSceneParam._m0[78u].x)) + _3025;
        _3101 = (exp2(_3311 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3295 * cbSceneParam._m0[78u].y)) * _3285.y) / cbSceneParam._m0[78u].y)) + _3026;
        _3103 = (exp2(_3311 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3295 * cbSceneParam._m0[78u].z)) * _3285.z) / cbSceneParam._m0[78u].z)) + _3027;
        _3105 = _3294 * _3028;
    }
    else
    {
        _3099 = _3025;
        _3101 = _3026;
        _3103 = _3027;
        _3105 = _3028;
    }
    bool _3321;
    vec4 _3115;
    vec4 _3137;
    float _3139;
    float _3143;
    float _3144;
    float _3145;
    float _3148;
    float _3151;
    float _3154;
    float _3155;
    bool _3165;
    for (;;)
    {
        _3115 = cbMatDynParam._m0[0u];
        float _3117 = roundEven(_3115.y);
        bool _3118 = _3117 == 3.0;
        float _3119 = log2(_3105);
        float _3123 = exp2(_3119 * cbSceneParam._m0[78u].x);
        float _3124 = exp2(_3119 * cbSceneParam._m0[78u].y);
        float _3125 = exp2(_3119 * cbSceneParam._m0[78u].z);
        float _3126 = _3123 * _2991;
        float _3127 = _3124 * _2992;
        float _3128 = _3125 * _2993;
        float _3135 = _669 + (-0.5);
        _3137 = cbMtdParam._m0[1u];
        _3139 = _3137.y * _3135;
        float _3142 = (_3117 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3143 = _3142 * (_3118 ? _3126 : (_3126 + (cbSceneParam._m0[72u].w * _3099)));
        _3144 = _3142 * (_3118 ? _3127 : (_3127 + (cbSceneParam._m0[72u].w * _3101)));
        _3145 = _3142 * (_3118 ? _3128 : (_3128 + (cbSceneParam._m0[72u].w * _3103)));
        _3148 = ((_2998 * _2966) * _3123) * _3142;
        _3151 = ((_2998 * _2967) * _3124) * _3142;
        _3154 = ((_2998 * _2968) * _3125) * _3142;
        _3155 = _3135 * 0.999000012874603271484375;
        _3165 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3165)
        {
            if ((cbInstanceData._m0[_782 + 7u].x + _3155) < 0.5)
            {
                _3321 = true;
                break;
            }
        }
        uint _3262 = _783 + uint(_3115.w);
        if ((cbInstanceData._m0[_3262].w < 1.0) && ((cbInstanceData._m0[_3262].w + _3155) < 0.5))
        {
            _3321 = true;
            break;
        }
        if ((_3139 + _404) < _3137.x)
        {
            _3321 = true;
            break;
        }
        _3321 = false;
        break;
    }
    float _3524;
    if (_3321)
    {
        discard_state = true;
        _3524 = 0.0;
    }
    else
    {
        _3524 = _3003;
    }
    SV_Target.x = _3143;
    SV_Target.y = _3144;
    SV_Target.z = _3145;
    SV_Target.w = _3524;
    SV_Target_1.x = _3148;
    SV_Target_1.y = _3151;
    SV_Target_1.z = _3154;
    SV_Target_1.w = _3003;
    discard_exit();
}


