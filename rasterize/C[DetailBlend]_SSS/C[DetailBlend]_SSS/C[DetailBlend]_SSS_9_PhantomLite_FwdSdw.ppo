#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1386;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238;
    float _239;
    float _240;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
    }
    else
    {
        _238 = _224;
        _239 = _225;
        _240 = _226;
    }
    float _285 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _295 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _285);
    float _296 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _285);
    float _297 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _285);
    vec4 _310 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _315 = _310.z;
    float _316 = _310.w;
    float _322 = exp2(log2(_315 * 22.0) * 260.0);
    float _323 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _324 = isnan(1.0) ? _323 : (isnan(_323) ? 1.0 : min(_323, 1.0));
    vec4 _338 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _348 = cbMtdParam._m0[10u].x * _338.x;
    float _349 = cbMtdParam._m0[10u].y * _338.y;
    float _350 = cbMtdParam._m0[10u].z * _338.z;
    vec4 _362 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _382 = (((cbMtdParam._m0[9u].x * _362.x) - _348) * _324) + _348;
    float _383 = (((cbMtdParam._m0[9u].y * _362.y) - _349) * _324) + _349;
    float _384 = (((cbMtdParam._m0[9u].z * _362.z) - _350) * _324) + _350;
    float _389 = exp2(log2(1.0 - _316) * 8.0);
    vec4 _401 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _421 = (((cbMtdParam._m0[12u].x * _401.x) - _382) * _389) + _382;
    float _422 = (((cbMtdParam._m0[12u].y * _401.y) - _383) * _389) + _383;
    float _423 = (((cbMtdParam._m0[12u].z * _401.z) - _384) * _389) + _384;
    float _426 = exp2(log2(_316) * 8.0);
    vec4 _439 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    vec4 _472 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _480 = (((((cbMtdParam._m0[11u].x * _439.x) - _421) * _426) + _421) * 4.55000019073486328125) * _472.x;
    float _482 = (((((cbMtdParam._m0[11u].y * _439.y) - _422) * _426) + _422) * 4.55000019073486328125) * _472.y;
    float _484 = (((((cbMtdParam._m0[11u].z * _439.z) - _423) * _426) + _423) * 4.55000019073486328125) * _472.z;
    float _485 = _472.w * _362.w;
    float _513 = (((texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _324) + cbMtdParam._m0[15u].y;
    float _516 = ((cbMtdParam._m0[14u].y - _513) * _389) + _513;
    float _520 = ((cbMtdParam._m0[15u].x - _516) * _426) + _516;
    vec4 _532 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _534 = _532.x;
    float _535 = _532.y;
    float _541 = cbMtdParam._m0[13u].y + _532.z;
    vec4 _553 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _562 = (((_553.z - _541) + cbMtdParam._m0[13u].x) * _324) + _541;
    vec4 _575 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _584 = (((_575.z - _562) + cbMtdParam._m0[14u].x) * _389) + _562;
    vec4 _596 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _613 = (((_324 * (_315 + (-0.5))) + 0.5) * 2.0) * ((((_596.z - _584) + cbMtdParam._m0[13u].w) * _426) + _584);
    float _617 = (_310.x * 2.0) + (-1.0);
    float _619 = (_310.y * 2.0) + (-1.0);
    float _620 = dot(vec2(_617, _619), vec2(_617, _619));
    float _4042 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _625 = sqrt(1.0 - (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))));
    float _630 = ((_553.x - _534) * _324) + _534;
    float _631 = ((_553.y - _535) * _324) + _535;
    float _636 = ((_575.x - _630) * _389) + _630;
    float _637 = ((_575.y - _631) * _389) + _631;
    float _650 = ((((((_596.x - _636) * _426) + _636) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _617;
    float _651 = ((((((_596.y - _637) * _426) + _637) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _619;
    float _654 = fma(_625, _238, fma(_651, _230 * TANGENT.x, (_216 * _208) * _650));
    float _657 = fma(_625, _239, fma(_651, _230 * TANGENT.y, (_216 * _209) * _650));
    float _660 = fma(_625, _240, fma(_651, _230 * TANGENT.z, (_216 * _210) * _650));
    float _664 = inversesqrt(dot(vec3(_654, _657, _660), vec3(_654, _657, _660)));
    float _665 = _664 * _654;
    float _666 = _664 * _657;
    float _667 = _664 * _660;
    float _4053 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _668 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _4064 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _669 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _4075 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _670 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _4086 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _671 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _4097 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _672 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _4108 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _673 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _681 = cbMatDynParam._m0[9u].x * _670;
    float _682 = cbMatDynParam._m0[9u].y * _671;
    float _683 = cbMatDynParam._m0[9u].z * _672;
    float _690 = inversesqrt(dot(vec3(_295, _296, _297), vec3(_295, _296, _297)));
    float _691 = _690 * _295;
    float _692 = _690 * _296;
    float _693 = _690 * _297;
    float _694 = dot(vec3(_665, _666, _667), vec3(_691, _692, _693));
    float _700 = abs(exp2(log2(_694) * cbMatDynParam._m0[12u].x));
    float _701 = isnan(0.100000001490116119384765625) ? _700 : (isnan(_700) ? 0.100000001490116119384765625 : max(_700, 0.100000001490116119384765625));
    float _707 = ((isnan(0.699999988079071044921875) ? _701 : (isnan(_701) ? 0.699999988079071044921875 : min(_701, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _729 = 1.0 - cbMatDynParam._m0[8u].w;
    float _4129 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _732 = 1.0 - cbMatDynParam._m0[7u].w;
    float _4140 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _733 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _737 = dot(vec3(_665, _666, _667), vec3(0.0, -1.0, 0.0));
    float _4151 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _740 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _747 = (_740 * _670) * cbMatDynParam._m0[11u].x;
    float _749 = (_740 * _671) * cbMatDynParam._m0[11u].y;
    float _751 = (_740 * _672) * cbMatDynParam._m0[11u].z;
    float _758 = dot(vec3(_691, _692, _693), vec3(_665, _666, _667));
    float _761 = _758 * 2.0;
    float _771 = dot(vec3((-0.0) - (_691 - (_761 * _665)), (-0.0) - (_692 - (_761 * _666)), (-0.0) - (_693 - (_761 * _667))), vec3(0.0, -1.0, 0.0));
    float _4162 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _778 = exp2(log2(isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * 4.0);
    float _804 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _810 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _811 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _813 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _815 = _813.w;
    float _833 = fma(_667, cbSceneParam._m0[5u].z, fma(_666, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _665));
    float _836 = fma(_667, cbSceneParam._m0[6u].z, fma(_666, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _665));
    float _839 = fma(_667, cbSceneParam._m0[7u].z, fma(_666, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _665));
    vec4 _841 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _843 = _841.x;
    float _855 = (((_841.y - _669) + (_841.w * _669)) * cbMtdParam._m0[3u].x) + _669;
    vec4 _856 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _872 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_843 * _843)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _856.z;
    float _880 = (((cbMatDynParam._m0[15u].x - _673) * cbMatDynParam._m0[15u].w) * _872) + _673;
    float _888 = ((_872 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _855)) + _855;
    uint _912 = uint(roundEven(NORMAL.w)) * 13u;
    uint _913 = _912 + 9u;
    uint _914 = _913 + uint(cbMatDynParam._m0[0u].w);
    float _920 = (cbMtdParam._m0[0u].x * _681) * cbInstanceData._m0[_914].x;
    float _921 = (cbMtdParam._m0[0u].y * _682) * cbInstanceData._m0[_914].y;
    float _922 = (cbMtdParam._m0[0u].z * _683) * cbInstanceData._m0[_914].z;
    float _4173 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _923 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _4184 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _924 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _4195 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _925 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    vec4 _926 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _931 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _942 = (((_931.x - _880) + (_931.w * _880)) * cbMtdParam._m0[3u].x) + _880;
    float _955 = (cbMtdParam._m0[3u].x * (((_923 * _815) - _923) + _926.x)) + _923;
    float _956 = (cbMtdParam._m0[3u].x * (((_924 * _815) - _924) + _926.y)) + _924;
    float _957 = (cbMtdParam._m0[3u].x * (((_925 * _815) - _925) + _926.z)) + _925;
    float _971 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_880 * (_681 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_880 * (_682 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_880 * (_683 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _975 = _971 * cbMatDynParam._m0[13u].w;
    float _985 = (_975 * (cbMatDynParam._m0[13u].x - _955)) + _955;
    float _986 = (_975 * (cbMatDynParam._m0[13u].y - _956)) + _956;
    float _987 = (_975 * (cbMatDynParam._m0[13u].z - _957)) + _957;
    float _995 = ((_971 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _942)) + _942;
    float _996 = 1.0 - _995;
    float _997 = _996 * _985;
    float _998 = _996 * _986;
    float _999 = _996 * _987;
    float _1003 = (_985 + (-0.039999999105930328369140625)) * _995;
    float _1004 = (_986 + (-0.039999999105930328369140625)) * _995;
    float _1005 = (_987 + (-0.039999999105930328369140625)) * _995;
    float _1006 = _1003 + 0.039999999105930328369140625;
    float _1007 = _1004 + 0.039999999105930328369140625;
    float _1008 = _1005 + 0.039999999105930328369140625;
    vec4 _1017 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _810, cbSceneParam._m0[86u].y * _811));
    float _1020 = _1017.x * TEXCOORD_4;
    float _1021 = _694 * 2.0;
    float _1025 = (_1021 * _665) - _691;
    float _1026 = (_1021 * _666) - _692;
    float _1027 = (_1021 * _667) - _693;
    float _1028 = abs(_758);
    float _4206 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _1030 = sqrt(_888);
    float _1042 = exp2((_1030 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1030 * 3.0));
    float _1048 = (1.0 - _1042) * ((_1030 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1049 = _1042 * _1030;
    float _1077 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1081 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1085 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1385;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1112 = fma(_1085, cbModelParam._m0[26u].z, fma(_1081, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1077));
        float _1116 = fma(_1085, cbModelParam._m0[27u].z, fma(_1081, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1077));
        float _1120 = fma(_1085, cbModelParam._m0[28u].z, fma(_1081, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1077));
        float _1143 = _1077 + _665;
        float _1144 = _1081 + _666;
        float _1145 = _1085 + _667;
        float _1155 = fma(_1145, cbModelParam._m0[26u].z, fma(_1144, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1143)) - _1112;
        float _1156 = fma(_1145, cbModelParam._m0[27u].z, fma(_1144, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1143)) - _1116;
        float _1157 = fma(_1145, cbModelParam._m0[28u].z, fma(_1144, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1143)) - _1120;
        float _1161 = inversesqrt(dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157)));
        float _1174 = ((_1161 * _1155) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1112 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1175 = ((_1161 * _1156) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1116 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1176 = ((_1161 * _1157) / cbModelParam._m0[34u].z) + ((((((_1120 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        float _1213 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1179.x + (-0.5));
        float _1215 = _1213 * (_1179.y + (-0.5));
        float _1216 = _1213 * (_1179.z + (-0.5));
        float _1223 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1186.x + (-0.5));
        float _1225 = _1223 * (_1186.y + (-0.5));
        float _1226 = _1223 * (_1186.z + (-0.5));
        float _1233 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1193.x + (-0.5));
        float _1235 = _1233 * (_1193.y + (-0.5));
        float _1236 = _1233 * (_1193.z + (-0.5));
        float _1243 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1200.x + (-0.5));
        float _1245 = _1243 * (_1200.y + (-0.5));
        float _1246 = _1243 * (_1200.z + (-0.5));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1250 = _1214 * 0.5;
        float _1251 = _1224 * 0.5;
        float _1252 = _1234 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1267 = (dot(vec3(_665, _666, _667), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _4232 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1277 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _4243 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _4254 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_1279 + 1.0))) + _1284) * _1247;
        float _1294 = _1215 * 0.5;
        float _1295 = _1225 * 0.5;
        float _1296 = _1235 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1310 = (dot(vec3(_665, _666, _667), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _4265 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1319 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _4276 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _4287 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_1321 + 1.0))) + _1326) * _1248;
        float _1336 = _1216 * 0.5;
        float _1337 = _1226 * 0.5;
        float _1338 = _1236 * 0.5;
        float _1339 = dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338));
        float _1344 = (_1339 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1339);
        float _1352 = (dot(vec3(_665, _666, _667), vec3(_1344 * _1336, _1344 * _1337, _1344 * _1338)) + 1.0) * 0.5;
        float _4298 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1361 = sqrt(((_1337 * _1337) + (_1336 * _1336)) + (_1338 * _1338)) / (_1249 + 9.9999997473787516355514526367188e-06);
        float _4309 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1363 = _1362 * 2.0;
        float _1367 = (1.0 - _1362) / (_1362 + 1.0);
        float _4320 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1377 = ((((1.0 - _1368) * (_1363 + 2.0)) * exp2(log2(isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_1363 + 1.0))) + _1368) * _1249;
        _1385 = _1216;
        _1387 = _1215;
        _1388 = _1214;
        _1389 = _1226;
        _1390 = _1225;
        _1391 = _1224;
        _1392 = _1236;
        _1393 = _1235;
        _1394 = _1234;
        _1395 = _1249;
        _1396 = _1248;
        _1397 = _1247;
        _1398 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
        _1399 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
        _1400 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)));
    }
    else
    {
        _1385 = _1386;
        _1387 = _1386;
        _1388 = _1386;
        _1389 = _1386;
        _1390 = _1386;
        _1391 = _1386;
        _1392 = _1386;
        _1393 = _1386;
        _1394 = _1386;
        _1395 = _1386;
        _1396 = _1386;
        _1397 = _1386;
        _1398 = 0.0;
        _1399 = 0.0;
        _1400 = 0.0;
    }
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1426 = fma(_1085, cbModelParam._m0[30u].z, fma(_1081, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1077));
        float _1430 = fma(_1085, cbModelParam._m0[31u].z, fma(_1081, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1077));
        float _1434 = fma(_1085, cbModelParam._m0[32u].z, fma(_1081, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1077));
        float _1457 = _1077 + _665;
        float _1458 = _1081 + _666;
        float _1459 = _1085 + _667;
        float _1469 = fma(_1459, cbModelParam._m0[30u].z, fma(_1458, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1457)) - _1426;
        float _1470 = fma(_1459, cbModelParam._m0[31u].z, fma(_1458, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1457)) - _1430;
        float _1471 = fma(_1459, cbModelParam._m0[32u].z, fma(_1458, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1457)) - _1434;
        float _1475 = inversesqrt(dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471)));
        float _1488 = ((_1475 * _1469) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1426 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1489 = ((_1475 * _1470) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1430 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1490 = ((_1475 * _1471) / cbModelParam._m0[35u].z) + ((((((_1434 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        float _1525 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1526 = _1525 * (_1492.x + (-0.5));
        float _1527 = _1525 * (_1492.y + (-0.5));
        float _1528 = _1525 * (_1492.z + (-0.5));
        float _1535 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1536 = _1535 * (_1499.x + (-0.5));
        float _1537 = _1535 * (_1499.y + (-0.5));
        float _1538 = _1535 * (_1499.z + (-0.5));
        float _1545 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1546 = _1545 * (_1506.x + (-0.5));
        float _1547 = _1545 * (_1506.y + (-0.5));
        float _1548 = _1545 * (_1506.z + (-0.5));
        float _1555 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1556 = _1555 * (_1513.x + (-0.5));
        float _1557 = _1555 * (_1513.y + (-0.5));
        float _1558 = _1555 * (_1513.z + (-0.5));
        float _1559 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1560 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1561 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1562 = _1526 * 0.5;
        float _1563 = _1536 * 0.5;
        float _1564 = _1546 * 0.5;
        float _1565 = dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564));
        float _1570 = (_1565 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1565);
        float _1578 = (dot(vec3(_665, _666, _667), vec3(_1570 * _1562, _1570 * _1563, _1570 * _1564)) + 1.0) * 0.5;
        float _4361 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1587 = sqrt(((_1563 * _1563) + (_1562 * _1562)) + (_1564 * _1564)) / (_1559 + 9.9999997473787516355514526367188e-06);
        float _4372 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1589 = _1588 * 2.0;
        float _1593 = (1.0 - _1588) / (_1588 + 1.0);
        float _4383 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1603 = ((((1.0 - _1594) * (_1589 + 2.0)) * exp2(log2(isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_1589 + 1.0))) + _1594) * _1559;
        float _1604 = _1527 * 0.5;
        float _1605 = _1537 * 0.5;
        float _1606 = _1547 * 0.5;
        float _1607 = dot(vec3(_1604, _1605, _1606), vec3(_1604, _1605, _1606));
        float _1612 = (_1607 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1607);
        float _1620 = (dot(vec3(_665, _666, _667), vec3(_1612 * _1604, _1612 * _1605, _1612 * _1606)) + 1.0) * 0.5;
        float _4394 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1629 = sqrt(((_1605 * _1605) + (_1604 * _1604)) + (_1606 * _1606)) / (_1560 + 9.9999997473787516355514526367188e-06);
        float _4405 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1631 = _1630 * 2.0;
        float _1635 = (1.0 - _1630) / (_1630 + 1.0);
        float _4416 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _1645 = ((((1.0 - _1636) * (_1631 + 2.0)) * exp2(log2(isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_1631 + 1.0))) + _1636) * _1560;
        float _1646 = _1528 * 0.5;
        float _1647 = _1538 * 0.5;
        float _1648 = _1548 * 0.5;
        float _1649 = dot(vec3(_1646, _1647, _1648), vec3(_1646, _1647, _1648));
        float _1654 = (_1649 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1649);
        float _1662 = (dot(vec3(_665, _666, _667), vec3(_1654 * _1646, _1654 * _1647, _1654 * _1648)) + 1.0) * 0.5;
        float _4427 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1671 = sqrt(((_1647 * _1647) + (_1646 * _1646)) + (_1648 * _1648)) / (_1561 + 9.9999997473787516355514526367188e-06);
        float _4438 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1673 = _1672 * 2.0;
        float _1677 = (1.0 - _1672) / (_1672 + 1.0);
        float _4449 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _1687 = ((((1.0 - _1678) * (_1673 + 2.0)) * exp2(log2(isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_1673 + 1.0))) + _1678) * _1561;
        _1695 = _1528;
        _1696 = _1527;
        _1697 = _1526;
        _1698 = _1538;
        _1699 = _1537;
        _1700 = _1536;
        _1701 = _1548;
        _1702 = _1547;
        _1703 = _1546;
        _1704 = _1561;
        _1705 = _1560;
        _1706 = _1559;
        _1707 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)));
        _1708 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)));
        _1709 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)));
    }
    else
    {
        _1695 = _1386;
        _1696 = _1386;
        _1697 = _1386;
        _1698 = _1386;
        _1699 = _1386;
        _1700 = _1386;
        _1701 = _1386;
        _1702 = _1386;
        _1703 = _1386;
        _1704 = _1386;
        _1705 = _1386;
        _1706 = _1386;
        _1707 = 0.0;
        _1708 = 0.0;
        _1709 = 0.0;
    }
    float _1719 = (cbModelParam._m0[1u].x * (_1707 - _1398)) + _1398;
    float _1720 = (cbModelParam._m0[1u].x * (_1708 - _1399)) + _1399;
    float _1721 = (cbModelParam._m0[1u].x * (_1709 - _1400)) + _1400;
    float _1742 = fma(_1721, cbSceneParam._m0[89u].z, fma(_1720, cbSceneParam._m0[89u].y, _1719 * cbSceneParam._m0[89u].x));
    float _1745 = fma(_1721, cbSceneParam._m0[90u].z, fma(_1720, cbSceneParam._m0[90u].y, _1719 * cbSceneParam._m0[90u].x));
    float _1748 = fma(_1721, cbSceneParam._m0[91u].z, fma(_1720, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1719));
    float _1763 = _1025 * 0.5;
    float _1764 = _1026 * 0.5;
    float _1765 = _1027 * 0.5;
    float _1766 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1697, _1700, _1703, _1706));
    float _1769 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1696, _1699, _1702, _1705));
    float _1772 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1695, _1698, _1701, _1704));
    float _1803;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1779 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1385, _1389, _1392, _1395));
        float _1783 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1387, _1390, _1393, _1396));
        float _1787 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1388, _1391, _1394, _1397));
        float _1794 = dot(vec4(cbModelParam._m0[39u]), vec4(_1763, _1764, _1765, 1.0));
        _1803 = dot(vec3(isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)), isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)), isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1794) ? 0.0 : (isnan(0.0) ? _1794 : max(0.0, _1794))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1803 = 1.0;
    }
    float _1814;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1805 = dot(vec4(cbModelParam._m0[40u]), vec4(_1763, _1764, _1765, 1.0));
        _1814 = dot(vec3(isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)), isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1805) ? 0.0 : (isnan(0.0) ? _1805 : max(0.0, _1805))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1814 = 1.0;
    }
    float _1818 = (_1814 * cbModelParam._m0[1u].x) + (_1803 * (1.0 - cbModelParam._m0[1u].x));
    float _1828 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _888);
    float _1829 = isnan(_1828) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1828 : min(cbModelParam._m0[25u].z, _1828));
    float _1909;
    float _1911;
    float _1913;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1876 = fma(_1085, cbModelParam._m0[13u].z, fma(_1081, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1077)) + cbModelParam._m0[13u].w;
        float _1880 = fma(_1085, cbModelParam._m0[14u].z, fma(_1081, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1077)) + cbModelParam._m0[14u].w;
        float _1884 = fma(_1085, cbModelParam._m0[15u].z, fma(_1081, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1077)) + cbModelParam._m0[15u].w;
        float _1887 = fma(_1027, cbModelParam._m0[13u].z, fma(_1026, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1025));
        float _1890 = fma(_1027, cbModelParam._m0[14u].z, fma(_1026, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1025));
        float _1893 = fma(_1027, cbModelParam._m0[15u].z, fma(_1026, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1025));
        float _1921;
        if (_1887 > 0.0)
        {
            _1921 = abs((1.0 - _1876) / _1887);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1876 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1921 = frontier_phi_16_14_ladder;
        }
        float _2096;
        if (_1890 > 0.0)
        {
            _2096 = abs((1.0 - _1880) / _1890);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1880 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2096 = frontier_phi_25_21_ladder;
        }
        float _2391;
        if (_1893 > 0.0)
        {
            _2391 = abs((1.0 - _1884) / _1893);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1884 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2391 = frontier_phi_37_32_ladder;
        }
        float _2393 = isnan(_2096) ? _1921 : (isnan(_1921) ? _2096 : min(_1921, _2096));
        float _2394 = isnan(_2391) ? _2393 : (isnan(_2393) ? _2391 : min(_2393, _2391));
        float _2398 = (_2394 * _1887) + _1876;
        float _2399 = (_2394 * _1890) + _1880;
        float _2400 = (_2394 * _1893) + _1884;
        float _2401 = _2394 * 9.9999997473787516355514526367188e-05;
        float _2403 = (-1.0) - _2401;
        float _2405 = _2401 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2400 > _2405) || ((_2400 < _2403) || ((_2399 > _2405) || ((_2399 < _2403) || ((_2398 < _2403) || (_2398 > _2405))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2545 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2400, cbModelParam._m0[9u].z, fma(_2399, cbModelParam._m0[9u].y, _2398 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2400, cbModelParam._m0[10u].z, fma(_2399, cbModelParam._m0[10u].y, _2398 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2400, cbModelParam._m0[11u].z, fma(_2399, cbModelParam._m0[11u].y, _2398 * cbModelParam._m0[11u].x))), _1829);
            frontier_phi_15_37_ladder = _2545.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2545.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2545.z * cbModelParam._m0[1u].y;
        }
        _1909 = frontier_phi_15_37_ladder_1;
        _1911 = frontier_phi_15_37_ladder;
        _1913 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1897 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1025, _1026, _1027), _1829);
        _1909 = _1897.x * cbModelParam._m0[1u].y;
        _1911 = _1897.y * cbModelParam._m0[1u].y;
        _1913 = _1897.z * cbModelParam._m0[1u].y;
    }
    float _1917 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _888);
    float _1918 = isnan(_1917) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1917 : min(cbModelParam._m0[25u].w, _1917));
    float _2011;
    float _2013;
    float _2015;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1975 = fma(_1085, cbModelParam._m0[21u].z, fma(_1081, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1077)) + cbModelParam._m0[21u].w;
        float _1979 = fma(_1085, cbModelParam._m0[22u].z, fma(_1081, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1077)) + cbModelParam._m0[22u].w;
        float _1983 = fma(_1085, cbModelParam._m0[23u].z, fma(_1081, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1077)) + cbModelParam._m0[23u].w;
        float _1986 = fma(_1027, cbModelParam._m0[21u].z, fma(_1026, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1025));
        float _1989 = fma(_1027, cbModelParam._m0[22u].z, fma(_1026, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1025));
        float _1992 = fma(_1027, cbModelParam._m0[23u].z, fma(_1026, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1025));
        float _2101;
        if (_1986 > 0.0)
        {
            _2101 = abs((1.0 - _1975) / _1986);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1975 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2101 = frontier_phi_27_23_ladder;
        }
        float _2418;
        if (_1989 > 0.0)
        {
            _2418 = abs((1.0 - _1979) / _1989);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1979 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2418 = frontier_phi_39_34_ladder;
        }
        float _2756;
        if (_1992 > 0.0)
        {
            _2756 = abs((1.0 - _1983) / _1992);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1983 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2756 = frontier_phi_49_46_ladder;
        }
        float _2758 = isnan(_2418) ? _2101 : (isnan(_2101) ? _2418 : min(_2101, _2418));
        float _2759 = isnan(_2756) ? _2758 : (isnan(_2758) ? _2756 : min(_2758, _2756));
        float _2763 = (_2759 * _1986) + _1975;
        float _2764 = (_2759 * _1989) + _1979;
        float _2765 = (_2759 * _1992) + _1983;
        float _2766 = _2759 * 9.9999997473787516355514526367188e-05;
        float _2767 = (-1.0) - _2766;
        float _2769 = _2766 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2765 > _2769) || ((_2765 < _2767) || ((_2764 > _2769) || ((_2764 < _2767) || ((_2763 < _2767) || (_2763 > _2769))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2887 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2765, cbModelParam._m0[17u].z, fma(_2764, cbModelParam._m0[17u].y, _2763 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2765, cbModelParam._m0[18u].z, fma(_2764, cbModelParam._m0[18u].y, _2763 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2765, cbModelParam._m0[19u].z, fma(_2764, cbModelParam._m0[19u].y, _2763 * cbModelParam._m0[19u].x))), _1918);
            frontier_phi_24_49_ladder = _2887.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2887.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2887.x * cbModelParam._m0[1u].z;
        }
        _2011 = frontier_phi_24_49_ladder_2;
        _2013 = frontier_phi_24_49_ladder_1;
        _2015 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1995 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1025, _1026, _1027), _1918);
        _2011 = _1995.x * cbModelParam._m0[1u].z;
        _2013 = _1995.y * cbModelParam._m0[1u].z;
        _2015 = _1995.z * cbModelParam._m0[1u].z;
    }
    float _2028 = (((_1048 * _1006) + _1049) * _1020) * ((cbModelParam._m0[1u].w * (_2011 - _1909)) + _1909);
    float _2030 = (((_1048 * _1007) + _1049) * _1020) * ((cbModelParam._m0[1u].w * (_2013 - _1911)) + _1911);
    float _2032 = (((_1048 * _1008) + _1049) * _1020) * ((cbModelParam._m0[1u].w * (_2015 - _1913)) + _1913);
    float _2035 = fma(_2032, cbSceneParam._m0[89u].z, fma(_2030, cbSceneParam._m0[89u].y, _2028 * cbSceneParam._m0[89u].x));
    float _2038 = fma(_2032, cbSceneParam._m0[90u].z, fma(_2030, cbSceneParam._m0[90u].y, _2028 * cbSceneParam._m0[90u].x));
    float _2041 = fma(_2032, cbSceneParam._m0[91u].z, fma(_2030, cbSceneParam._m0[91u].y, _2028 * cbSceneParam._m0[91u].x));
    float _2075 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2079 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2083 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2087 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2088 = _2075 / _2087;
    float _2089 = _2079 / _2087;
    float _2090 = _2083 / _2087;
    float _2237;
    float _2238;
    float _2239;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2117 = ((uint(_2090 > cbSceneParam._m0[59u].y) + uint(_2090 > cbSceneParam._m0[59u].x)) + uint(_2090 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2118 = _2117 + 43u;
        uint _2126 = _2117 + 44u;
        uint _2134 = _2117 + 45u;
        uint _2142 = _2117 + 46u;
        float _2153 = fma(_2087, cbSceneParam._m0[_2118].w, fma(_2083, cbSceneParam._m0[_2118].z, fma(_2079, cbSceneParam._m0[_2118].y, _2075 * cbSceneParam._m0[_2118].x)));
        float _2157 = fma(_2087, cbSceneParam._m0[_2126].w, fma(_2083, cbSceneParam._m0[_2126].z, fma(_2079, cbSceneParam._m0[_2126].y, _2075 * cbSceneParam._m0[_2126].x)));
        float _2165 = fma(_2087, cbSceneParam._m0[_2142].w, fma(_2083, cbSceneParam._m0[_2142].z, fma(_2079, cbSceneParam._m0[_2142].y, _2075 * cbSceneParam._m0[_2142].x)));
        float _2170 = cbSceneParam._m0[33u].z * _2165;
        float _2172 = cbSceneParam._m0[33u].w * _2165;
        float _2175 = fma(_2087, cbSceneParam._m0[_2134].w, fma(_2083, cbSceneParam._m0[_2134].z, fma(_2079, cbSceneParam._m0[_2134].y, _2075 * cbSceneParam._m0[_2134].x))) / _2165;
        float _2223 = (cbSceneParam._m0[33u].x - sqrt(((_2089 * _2089) + (_2088 * _2088)) + (_2090 * _2090))) * cbSceneParam._m0[33u].y;
        float _4575 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2230 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2170 + _2153) / _2165, (_2172 + _2157) / _2165), _2175), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2172 + _2153) / _2165, (_2157 - _2170) / _2165), _2175), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2153 - _2170) / _2165, (_2157 - _2172) / _2165), _2175), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2153 - _2172) / _2165, (_2170 + _2157) / _2165), _2175), 0.0)).x), vec4(0.25)));
        _2237 = 1.0 - (_2230 * cbSceneParam._m0[34u].x);
        _2238 = 1.0 - (_2230 * cbSceneParam._m0[34u].y);
        _2239 = 1.0 - (_2230 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2237 = 1.0;
        _2238 = 1.0;
        _2239 = 1.0;
    }
    float _2303;
    float _2305;
    float _2307;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2291 = fma(_2087, cbSceneParam._m0[63u].w, fma(_2083, cbSceneParam._m0[63u].z, fma(_2079, cbSceneParam._m0[63u].y, _2075 * cbSceneParam._m0[63u].x)));
        float _2292 = fma(_2087, cbSceneParam._m0[60u].w, fma(_2083, cbSceneParam._m0[60u].z, fma(_2079, cbSceneParam._m0[60u].y, _2075 * cbSceneParam._m0[60u].x))) / _2291;
        float _2293 = fma(_2087, cbSceneParam._m0[61u].w, fma(_2083, cbSceneParam._m0[61u].z, fma(_2079, cbSceneParam._m0[61u].y, _2075 * cbSceneParam._m0[61u].x))) / _2291;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2292 >= cbSceneParam._m0[64u].x) && (_2293 >= cbSceneParam._m0[64u].y)) && (_2292 <= cbSceneParam._m0[64u].z)) && (_2293 <= cbSceneParam._m0[64u].w))
        {
            float _2431 = fma(_2087, cbSceneParam._m0[62u].w, fma(_2083, cbSceneParam._m0[62u].z, fma(_2079, cbSceneParam._m0[62u].y, _2075 * cbSceneParam._m0[62u].x))) / _2291;
            float _2435 = isnan(cbSceneParam._m0[41u].w) ? _2431 : (isnan(_2431) ? cbSceneParam._m0[41u].w : max(_2431, cbSceneParam._m0[41u].w));
            float _2478 = (cbSceneParam._m0[33u].x - sqrt(((_2089 * _2089) + (_2088 * _2088)) + (_2090 * _2090))) * cbSceneParam._m0[33u].y;
            float _4591 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
            float _2485 = (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2292, cbSceneParam._m0[33u].w + _2293), _2435), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2292, _2293 - cbSceneParam._m0[33u].z), _2435), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2292 - cbSceneParam._m0[33u].z, _2293 - cbSceneParam._m0[33u].w), _2435), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2292 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2293), _2435), 0.0)).x), vec4(0.25)));
            float _2489 = 1.0 - (_2485 * cbSceneParam._m0[34u].x);
            float _2490 = 1.0 - (_2485 * cbSceneParam._m0[34u].y);
            float _2491 = 1.0 - (_2485 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2490) ? _2238 : (isnan(_2238) ? _2490 : min(_2238, _2490));
            frontier_phi_36_35_ladder_1 = isnan(_2491) ? _2239 : (isnan(_2239) ? _2491 : min(_2239, _2491));
            frontier_phi_36_35_ladder_2 = isnan(_2489) ? _2237 : (isnan(_2237) ? _2489 : min(_2237, _2489));
        }
        else
        {
            frontier_phi_36_35_ladder = _2238;
            frontier_phi_36_35_ladder_1 = _2239;
            frontier_phi_36_35_ladder_2 = _2237;
        }
        _2303 = frontier_phi_36_35_ladder_2;
        _2305 = frontier_phi_36_35_ladder;
        _2307 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2303 = _2237;
        _2305 = _2238;
        _2307 = _2239;
    }
    uvec4 _2312 = floatBitsToUint(cbInstanceData._m0[_912 + 5u]);
    uint _2314 = _2312.x * 14u;
    uint _2315 = _2314 + 13u;
    float _2322 = _1020 + (-1.0);
    float _2327 = (cbLight._m0[_2315].x * _2322) + 1.0;
    float _2328 = (cbLight._m0[_2315].y * _2322) + 1.0;
    float _2329 = (cbLight._m0[_2315].z * _2322) + 1.0;
    float _2330 = (cbLight._m0[_2315].w * _2322) + 1.0;
    uint _2331 = _2314 + 5u;
    float _2337 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
    uint _2341 = _2314 + 4u;
    float _2350 = isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0));
    uint _2354 = _2314 | 1u;
    float _2365 = dot(vec3(cbLight._m0[_2314].xyz), vec3(_665, _666, _667));
    float _2368 = dot(vec3(cbLight._m0[_2354].xyz), vec3(_665, _666, _667));
    float _4627 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _4638 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2373 = (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * 0.3183098733425140380859375;
    float _2375 = (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * 0.3183098733425140380859375;
    float _2382 = ((cbLight._m0[_2331].x * _2337) * _2375) + (((cbLight._m0[_2341].x * _2303) * _2350) * _2373);
    float _2383 = ((_2337 * cbLight._m0[_2331].y) * _2375) + (((cbLight._m0[_2341].y * _2305) * _2350) * _2373);
    float _2384 = ((_2337 * cbLight._m0[_2331].z) * _2375) + (((cbLight._m0[_2341].z * _2307) * _2350) * _2373);
    uvec4 _2388 = floatBitsToUint(cbLight._m0[_2314 + 12u]);
    bool _2390 = _2388.x == 0u;
    float _2492;
    float _2494;
    float _2496;
    if (_2390)
    {
        _2492 = _2382;
        _2494 = _2383;
        _2496 = _2384;
    }
    else
    {
        uint _2500 = _2314 + 6u;
        float _2516 = (dot(vec3(cbLight._m0[_2314 + 2u].xyz), vec3(_665, _666, _667)) * 0.5) + 0.5;
        float _2517 = _2516 * _2516;
        float _4649 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2518 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
        float _2519 = isnan(1.0) ? _2329 : (isnan(_2329) ? 1.0 : min(_2329, 1.0));
        _2492 = (((cbLight._m0[_2500].x * 0.3183098733425140380859375) * _2518) * _2519) + _2382;
        _2494 = (((cbLight._m0[_2500].y * 0.3183098733425140380859375) * _2518) * _2519) + _2383;
        _2496 = (((cbLight._m0[_2500].z * 0.3183098733425140380859375) * _2518) * _2519) + _2384;
    }
    bool _2499 = _2388.y == 0u;
    float _2554;
    float _2556;
    float _2558;
    if (_2499)
    {
        _2554 = _2492;
        _2556 = _2494;
        _2558 = _2496;
    }
    else
    {
        uint _2727 = _2314 + 7u;
        float _2743 = (dot(vec3(cbLight._m0[_2314 + 3u].xyz), vec3(_665, _666, _667)) * 0.5) + 0.5;
        float _2744 = _2743 * _2743;
        float _4665 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
        float _2745 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
        float _2746 = isnan(1.0) ? _2330 : (isnan(_2330) ? 1.0 : min(_2330, 1.0));
        _2554 = (((cbLight._m0[_2727].x * 0.3183098733425140380859375) * _2745) * _2746) + _2492;
        _2556 = (((cbLight._m0[_2727].y * 0.3183098733425140380859375) * _2745) * _2746) + _2494;
        _2558 = (((cbLight._m0[_2727].z * 0.3183098733425140380859375) * _2745) * _2746) + _2496;
    }
    uint _2561 = _2314 + 8u;
    float _2574 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2314].w)) * _888) * 0.949999988079071044921875);
    float _2575 = _2574 * _2574;
    float _2576 = cbLight._m0[_2314].x + _691;
    float _2577 = cbLight._m0[_2314].y + _692;
    float _2578 = cbLight._m0[_2314].z + _693;
    float _2582 = inversesqrt(dot(vec3(_2576, _2577, _2578), vec3(_2576, _2577, _2578)));
    float _2583 = _2582 * _2576;
    float _2584 = _2582 * _2577;
    float _2585 = _2582 * _2578;
    float _2586 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_2314].xyz));
    float _4681 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
    float _2589 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
    float _4692 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _2590 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
    float _2591 = dot(vec3(_665, _666, _667), vec3(_2583, _2584, _2585));
    float _4703 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
    float _2594 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
    float _2595 = dot(vec3(cbLight._m0[_2314].xyz), vec3(_2583, _2584, _2585));
    float _4714 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
    float _2599 = _2575 * _2575;
    float _2603 = ((_2594 * _2594) * (_2599 + (-1.0))) + 1.0;
    float _2611 = exp2(log2(1.0 - (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0)))) * 5.0);
    float _2612 = 0.959999978542327880859375 - _1003;
    float _2614 = 0.959999978542327880859375 - _1004;
    float _2615 = 0.959999978542327880859375 - _1005;
    float _2622 = 1.0 - _2575;
    float _2633 = (0.5 / (((_2590 * ((_2589 * _2622) + _2575)) + 9.9999999392252902907785028219223e-09) + (((_2590 * _2622) + _2575) * _2589))) * _2589;
    float _4725 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
    float _2635 = (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * (_2599 / ((_2603 * _2603) * 3.141590118408203125));
    uint _2649 = _2314 + 9u;
    float _2660 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2354].w)) * _888) * 0.949999988079071044921875);
    float _2661 = _2660 * _2660;
    float _2662 = cbLight._m0[_2354].x + _691;
    float _2663 = cbLight._m0[_2354].y + _692;
    float _2664 = cbLight._m0[_2354].z + _693;
    float _2668 = inversesqrt(dot(vec3(_2662, _2663, _2664), vec3(_2662, _2663, _2664)));
    float _2669 = _2668 * _2662;
    float _2670 = _2668 * _2663;
    float _2671 = _2668 * _2664;
    float _2672 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_2354].xyz));
    float _4736 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
    float _2675 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
    float _2676 = dot(vec3(_665, _666, _667), vec3(_2669, _2670, _2671));
    float _4747 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
    float _2679 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
    float _2680 = dot(vec3(cbLight._m0[_2354].xyz), vec3(_2669, _2670, _2671));
    float _4758 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
    float _2684 = _2661 * _2661;
    float _2688 = ((_2679 * _2679) * (_2684 + (-1.0))) + 1.0;
    float _2695 = exp2(log2(1.0 - (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0)))) * 5.0);
    float _2702 = 1.0 - _2661;
    float _2712 = (0.5 / (((_2590 * ((_2675 * _2702) + _2661)) + 9.9999999392252902907785028219223e-09) + (((_2590 * _2702) + _2661) * _2675))) * _2675;
    float _4769 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
    float _2714 = (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2684 / ((_2688 * _2688) * 3.141590118408203125));
    float _2724 = (((((_2695 * _2612) + _1006) * cbLight._m0[_2649].x) * _2714) * _2337) + ((((cbLight._m0[_2561].x * _2303) * ((_2611 * _2612) + _1006)) * _2635) * _2350);
    float _2725 = (((((_2695 * _2614) + _1007) * cbLight._m0[_2649].y) * _2714) * _2337) + ((((cbLight._m0[_2561].y * _2305) * ((_2611 * _2614) + _1007)) * _2635) * _2350);
    float _2726 = (((((_2695 * _2615) + _1008) * cbLight._m0[_2649].z) * _2714) * _2337) + ((((cbLight._m0[_2561].z * _2307) * ((_2611 * _2615) + _1008)) * _2635) * _2350);
    float _2782;
    float _2784;
    float _2786;
    if (_2390)
    {
        _2782 = _2724;
        _2784 = _2725;
        _2786 = _2726;
    }
    else
    {
        uint _2788 = _2314 + 2u;
        uint _2792 = _2314 + 10u;
        float _2806 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2788].w)) * _888) * 0.949999988079071044921875);
        float _2807 = _2806 * _2806;
        float _2808 = cbLight._m0[_2788].x + _691;
        float _2809 = cbLight._m0[_2788].y + _692;
        float _2810 = cbLight._m0[_2788].z + _693;
        float _2814 = inversesqrt(dot(vec3(_2808, _2809, _2810), vec3(_2808, _2809, _2810)));
        float _2815 = _2814 * _2808;
        float _2816 = _2814 * _2809;
        float _2817 = _2814 * _2810;
        float _2818 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_2788].xyz));
        float _4780 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        float _2821 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
        float _2822 = dot(vec3(_665, _666, _667), vec3(_2815, _2816, _2817));
        float _4791 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        float _2825 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
        float _2826 = dot(vec3(cbLight._m0[_2788].xyz), vec3(_2815, _2816, _2817));
        float _4802 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        float _2830 = _2807 * _2807;
        float _2834 = ((_2825 * _2825) * (_2830 + (-1.0))) + 1.0;
        float _2841 = exp2(log2(1.0 - (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0)))) * 5.0);
        float _2848 = 1.0 - _2807;
        float _2858 = (0.5 / (((_2590 * ((_2821 * _2848) + _2807)) + 9.9999999392252902907785028219223e-09) + (((_2590 * _2848) + _2807) * _2821))) * _2821;
        float _4813 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
        float _2860 = (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * (_2830 / ((_2834 * _2834) * 3.141590118408203125));
        float _2861 = isnan(1.0) ? _2329 : (isnan(_2329) ? 1.0 : min(_2329, 1.0));
        _2782 = (((((_2841 * _2612) + _1006) * cbLight._m0[_2792].x) * _2860) * _2861) + _2724;
        _2784 = (((((_2841 * _2614) + _1007) * cbLight._m0[_2792].y) * _2860) * _2861) + _2725;
        _2786 = (((((_2841 * _2615) + _1008) * cbLight._m0[_2792].z) * _2860) * _2861) + _2726;
    }
    float _2892;
    float _2894;
    float _2896;
    if (_2499)
    {
        _2892 = _2782;
        _2894 = _2784;
        _2896 = _2786;
    }
    else
    {
        uint _2903 = _2314 + 3u;
        uint _2907 = _2314 + 11u;
        float _2921 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2903].w)) * _888) * 0.949999988079071044921875);
        float _2922 = _2921 * _2921;
        float _2923 = cbLight._m0[_2903].x + _691;
        float _2924 = cbLight._m0[_2903].y + _692;
        float _2925 = cbLight._m0[_2903].z + _693;
        float _2929 = inversesqrt(dot(vec3(_2923, _2924, _2925), vec3(_2923, _2924, _2925)));
        float _2930 = _2929 * _2923;
        float _2931 = _2929 * _2924;
        float _2932 = _2929 * _2925;
        float _2933 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_2903].xyz));
        float _4829 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
        float _2936 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
        float _2937 = dot(vec3(_665, _666, _667), vec3(_2930, _2931, _2932));
        float _4840 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
        float _2940 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
        float _2941 = dot(vec3(cbLight._m0[_2903].xyz), vec3(_2930, _2931, _2932));
        float _4851 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
        float _2945 = _2922 * _2922;
        float _2949 = ((_2940 * _2940) * (_2945 + (-1.0))) + 1.0;
        float _2956 = exp2(log2(1.0 - (isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0)))) * 5.0);
        float _2963 = 1.0 - _2922;
        float _2973 = (0.5 / (((_2590 * ((_2936 * _2963) + _2922)) + 9.9999999392252902907785028219223e-09) + (((_2590 * _2963) + _2922) * _2936))) * _2936;
        float _4862 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
        float _2975 = (isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0))) * (_2945 / ((_2949 * _2949) * 3.141590118408203125));
        float _2976 = isnan(1.0) ? _2330 : (isnan(_2330) ? 1.0 : min(_2330, 1.0));
        _2892 = (((((_2956 * _2612) + _1006) * cbLight._m0[_2907].x) * _2975) * _2976) + _2782;
        _2894 = (((((_2956 * _2614) + _1007) * cbLight._m0[_2907].y) * _2975) * _2976) + _2784;
        _2896 = (((((_2956 * _2615) + _1008) * cbLight._m0[_2907].z) * _2975) * _2976) + _2786;
    }
    float _3041;
    float _3043;
    float _3045;
    float _3047;
    float _3049;
    float _3051;
    if (_2312.y == 0u)
    {
        uvec4 _2997 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2998 = _2997.x;
        uint _3009 = uint((float(_2997.y) * floor(float(uint(cbSceneParam._m0[85u].y * _811) / _2998))) + floor(float(uint(cbSceneParam._m0[85u].x * _810) / _2998)));
        float _3019 = (log2(_2090 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3020 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
        uint _3023 = uint(isnan(14.0) ? _3020 : (isnan(_3020) ? 14.0 : min(_3020, 14.0)));
        uvec4 _3028 = texelFetch(g_lightClusterGridBuffer, int(((_3023 << 2u) + (_3009 << 6u)) >> 2u));
        uint _3029 = _3028.x;
        uint _3030 = _2997.z;
        float _3134;
        float _3136;
        float _3138;
        float _3140;
        float _3142;
        float _3144;
        if (((((1u << ((_3030 >> 4u) & 15u)) + 4294967295u) & _3029) == 0u) || ((_3030 & 240u) == 0u))
        {
            _3134 = 0.0;
            _3136 = 0.0;
            _3138 = 0.0;
            _3140 = 0.0;
            _3142 = 0.0;
            _3144 = 0.0;
        }
        else
        {
            float _3135;
            float _3137;
            float _3139;
            float _3141;
            float _3143;
            float _3145;
            float _3287 = 0.0;
            float _3288 = 0.0;
            float _3289 = 0.0;
            float _3290 = 0.0;
            float _3291 = 0.0;
            float _3292 = 0.0;
            uint _3293 = 0u;
            uint _3302;
            bool _3303;
            for (;;)
            {
                _3302 = texelFetch(g_lightClassification, int((((_3023 << 5u) + (_3009 << 9u)) + (_3293 << 2u)) >> 2u)).x;
                _3303 = _3302 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3303)
                {
                    frontier_phi_68_pred = _3292;
                    frontier_phi_68_pred_1 = _3291;
                    frontier_phi_68_pred_2 = _3290;
                    frontier_phi_68_pred_3 = _3288;
                    frontier_phi_68_pred_4 = _3287;
                    frontier_phi_68_pred_5 = _3289;
                }
                else
                {
                    float _3411;
                    float _3412;
                    float _3413;
                    float _3414;
                    float _3415;
                    float _3416;
                    uint _3417;
                    _3411 = _3287;
                    _3412 = _3288;
                    _3413 = _3289;
                    _3414 = _3290;
                    _3415 = _3291;
                    _3416 = _3292;
                    _3417 = _3302;
                    float _3343;
                    float _3344;
                    float _3345;
                    float _3346;
                    float _3347;
                    float _3348;
                    for (;;)
                    {
                        uint _3421 = uint(findLSB(_3417)) + (_3293 << 5u);
                        uint _3418 = (_3417 + 4294967295u) & _3417;
                        uint _3423 = _3421 * 48u;
                        vec4 _3437 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3423)).x, texelFetch(g_PointLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3423 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3423 + 3u)).x));
                        uint _3443 = (_3421 * 48u) + 4u;
                        vec4 _3456 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3443)).x, texelFetch(g_PointLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3443 + 3u)).x));
                        uint _3462 = (_3421 * 48u) + 8u;
                        vec3 _3473 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3462)).x, texelFetch(g_PointLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3462 + 2u)).x));
                        float _3477 = _3437.x - _2088;
                        float _3478 = _3437.y - _2089;
                        float _3479 = _3437.z - _2090;
                        float _3480 = dot(vec3(_3477, _3478, _3479), vec3(_3477, _3478, _3479));
                        float _3483 = inversesqrt(_3480);
                        float _3484 = _3483 * _3477;
                        float _3485 = _3483 * _3478;
                        float _3486 = _3483 * _3479;
                        float _3487 = dot(vec3(_833, _836, _839), vec3(_3484, _3485, _3486));
                        float _3492 = 1.0 - (_3480 * _3437.w);
                        float _4888 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                        float _3493 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
                        float _3494 = sqrt(_3480) * _3456.w;
                        float _3497 = 1.39999997615814208984375 / (_3494 + 1.39999997615814208984375);
                        float _3498 = _3497 * _3497;
                        float _3501 = ((1.0 - _3498) * _3487) + _3498;
                        float _3504 = _3494 * _3494;
                        float _3507 = ((isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0))) * _3493) / ((_3504 * 0.699999988079071044921875) + 1.0);
                        float _3511 = (-0.0) - _2088;
                        float _3512 = (-0.0) - _2089;
                        float _3513 = (-0.0) - _2090;
                        float _3517 = inversesqrt(dot(vec3(_3511, _3512, _3513), vec3(_3511, _3512, _3513)));
                        float _3518 = _3517 * _3511;
                        float _3519 = _3517 * _3512;
                        float _3520 = _3517 * _3513;
                        float _3527 = exp2(log2(1.0 / ((_3504 * 3.5) + 5.0)) * 0.25);
                        float _3528 = 1.0 - _1030;
                        float _3535 = sqrt(1.0 - ((1.0 - (_3528 * _3528)) * (1.0 - (_3527 * _3527))));
                        float _3536 = _3535 * _3535;
                        float _3537 = _3536 * _3536;
                        float _3538 = _3518 + _3484;
                        float _3539 = _3519 + _3485;
                        float _3540 = _3520 + _3486;
                        float _3544 = inversesqrt(dot(vec3(_3538, _3539, _3540), vec3(_3538, _3539, _3540)));
                        float _3548 = dot(vec3(_833, _836, _839), vec3(_3518, _3519, _3520));
                        float _4904 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                        float _3551 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
                        float _3552 = dot(vec3(_833, _836, _839), vec3(_3544 * _3538, _3544 * _3539, _3544 * _3540));
                        float _4915 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                        float _3555 = isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0));
                        float _3559 = ((_3555 * _3555) * (_3537 + (-1.0))) + 1.0;
                        float _3560 = _3497 * _3536;
                        float _3561 = _3560 * _3560;
                        float _3564 = ((1.0 - _3561) * _3487) + _3561;
                        float _4926 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                        float _3565 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
                        float _3566 = 1.0 - _3536;
                        float _3576 = (0.5 / (((_3565 * ((_3551 * _3566) + _3536)) + 9.9999999392252902907785028219223e-09) + (((_3565 * _3566) + _3536) * _3551))) * _3565;
                        float _4937 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                        float _3587 = (((_3537 * 3.1415927410125732421875) * (isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0)))) / ((_3559 * _3559) * ((_3504 * 2.1991131305694580078125) + 3.141590118408203125))) * _3493;
                        _3346 = (_3507 * _3456.x) + _3414;
                        _3347 = (_3507 * _3456.y) + _3415;
                        _3348 = (_3507 * _3456.z) + _3416;
                        _3343 = (_3587 * _3473.x) + _3411;
                        _3344 = (_3587 * _3473.y) + _3412;
                        _3345 = (_3587 * _3473.z) + _3413;
                        if (_3418 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3411 = _3343;
                            _3412 = _3344;
                            _3413 = _3345;
                            _3414 = _3346;
                            _3415 = _3347;
                            _3416 = _3348;
                            _3417 = _3418;
                        }
                    }
                    frontier_phi_68_pred = _3348;
                    frontier_phi_68_pred_1 = _3347;
                    frontier_phi_68_pred_2 = _3346;
                    frontier_phi_68_pred_3 = _3344;
                    frontier_phi_68_pred_4 = _3343;
                    frontier_phi_68_pred_5 = _3345;
                }
                _3145 = frontier_phi_68_pred;
                _3143 = frontier_phi_68_pred_1;
                _3141 = frontier_phi_68_pred_2;
                _3137 = frontier_phi_68_pred_3;
                _3135 = frontier_phi_68_pred_4;
                _3139 = frontier_phi_68_pred_5;
                uint _3294 = _3293 + 1u;
                if (_3294 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3287 = _3135;
                    _3288 = _3137;
                    _3289 = _3139;
                    _3290 = _3141;
                    _3291 = _3143;
                    _3292 = _3145;
                    _3293 = _3294;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3134 = _3135;
            _3136 = _3137;
            _3138 = _3139;
            _3140 = _3141;
            _3142 = _3143;
            _3144 = _3145;
        }
        uvec4 _3148 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3149 = _3148.z;
        uint _3151 = (_3149 >> 8u) & 15u;
        float _3255;
        float _3257;
        float _3259;
        float _3261;
        float _3263;
        float _3265;
        if (((4294967295u << _3151) & _3029) == 0u)
        {
            _3255 = _3134;
            _3257 = _3136;
            _3259 = _3138;
            _3261 = _3140;
            _3263 = _3142;
            _3265 = _3144;
        }
        else
        {
            float _3280 = inversesqrt(dot(vec3(_2088, _2089, _2090), vec3(_2088, _2089, _2090)));
            float _3281 = _3280 * _2088;
            float _3282 = _3280 * _2089;
            float _3283 = _3280 * _2090;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3151 < ((_3149 >> 12u) & 15u))
            {
                float _3256;
                float _3258;
                float _3260;
                float _3262;
                float _3264;
                float _3266;
                float _3394 = _3134;
                float _3395 = _3136;
                float _3396 = _3138;
                float _3397 = _3140;
                float _3398 = _3142;
                float _3399 = _3144;
                uint _3400 = _3151;
                uint _3409;
                bool _3410;
                for (;;)
                {
                    _3409 = texelFetch(g_lightClassification, int((((_3023 << 5u) + (_3009 << 9u)) + (_3400 << 2u)) >> 2u)).x;
                    _3410 = _3409 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3410)
                    {
                        frontier_phi_74_pred = _3396;
                        frontier_phi_74_pred_1 = _3395;
                        frontier_phi_74_pred_2 = _3394;
                        frontier_phi_74_pred_3 = _3399;
                        frontier_phi_74_pred_4 = _3398;
                        frontier_phi_74_pred_5 = _3397;
                    }
                    else
                    {
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3596;
                        float _3597;
                        float _3887;
                        float _3888;
                        float _3889;
                        float _3890;
                        float _3891;
                        float _3892;
                        float _3605 = _3394;
                        float _3606 = _3395;
                        float _3607 = _3396;
                        float _3608 = _3397;
                        float _3609 = _3398;
                        float _3610 = _3399;
                        uint _3611 = _3409;
                        uint _3612;
                        vec4 _3637;
                        float _3638;
                        vec4 _3653;
                        vec3 _3665;
                        vec4 _3680;
                        vec4 _3696;
                        float _3743;
                        bool _3744;
                        for (;;)
                        {
                            uint _3622 = ((_3400 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3611));
                            _3612 = (_3611 + 4294967295u) & _3611;
                            uint _3624 = _3622 * 40u;
                            _3637 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3624)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 3u)).x));
                            _3638 = _3637.w;
                            uint _3640 = (_3622 * 40u) + 4u;
                            _3653 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 3u)).x));
                            uint _3655 = (_3622 * 40u) + 8u;
                            _3665 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3655)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 2u)).x));
                            uint _3667 = (_3622 * 40u) + 16u;
                            _3680 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3667)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 3u)).x));
                            uint _3683 = (_3622 * 40u) + 20u;
                            _3696 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3683)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 3u)).x));
                            uint _3699 = (_3622 * 40u) + 24u;
                            vec4 _3712 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3699)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 3u)).x));
                            uint _3718 = (_3622 * 40u) + 28u;
                            vec4 _3731 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3718)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 3u)).x));
                            _3743 = fma(_2090, _3731.z, fma(_2089, _3731.y, _3731.x * _2088)) + _3731.w;
                            _3744 = !((fma(_2090, _3712.z, fma(_2089, _3712.y, _3712.x * _2088)) + _3712.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3744)
                            {
                                float _3771 = _3637.x - _2088;
                                float _3772 = _3637.y - _2089;
                                float _3773 = _3637.z - _2090;
                                float _3774 = dot(vec3(_3771, _3772, _3773), vec3(_3771, _3772, _3773));
                                float _3777 = inversesqrt(_3774);
                                float _3778 = _3777 * _3771;
                                float _3779 = _3777 * _3772;
                                float _3780 = _3777 * _3773;
                                float _3784 = 1.0 - (_3774 / (_3638 * _3638));
                                float _4948 = isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0));
                                float _3785 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
                                float _3789 = sqrt(_3774) * _3653.w;
                                float _3791 = 1.39999997615814208984375 / (_3789 + 1.39999997615814208984375);
                                float _3792 = _3791 * _3791;
                                float _3795 = ((1.0 - _3792) * dot(vec3(_3778, _3779, _3780), vec3(_833, _836, _839))) + _3792;
                                float _3798 = _3789 * _3789;
                                float _3802 = (fma(_2090, _3680.z, fma(_2089, _3680.y, _3680.x * _2088)) + _3680.w) / _3743;
                                float _3803 = (fma(_2090, _3696.z, fma(_2089, _3696.y, _3696.x * _2088)) + _3696.w) / _3743;
                                float _3807 = 1.0 - dot(vec2(_3802, _3803), vec2(_3802, _3803));
                                float _4964 = isnan(0.0) ? _3807 : (isnan(_3807) ? 0.0 : max(_3807, 0.0));
                                float _3808 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
                                float _3809 = _3808 * (((isnan(0.0) ? _3795 : (isnan(_3795) ? 0.0 : max(_3795, 0.0))) * _3785) / ((_3798 * 0.699999988079071044921875) + 1.0));
                                float _3821 = exp2(log2(1.0 / ((_3798 * 3.5) + 5.0)) * 0.25);
                                float _3822 = 1.0 - _1030;
                                float _3829 = sqrt(1.0 - ((1.0 - (_3822 * _3822)) * (1.0 - (_3821 * _3821))));
                                float _3830 = _3829 * _3829;
                                float _3831 = _3830 * _3830;
                                float _3832 = _3778 - _3281;
                                float _3833 = _3779 - _3282;
                                float _3834 = _3780 - _3283;
                                float _3838 = inversesqrt(dot(vec3(_3832, _3833, _3834), vec3(_3832, _3833, _3834)));
                                float _3842 = dot(vec3(_833, _836, _839), vec3((-0.0) - _3281, (-0.0) - _3282, (-0.0) - _3283));
                                float _4975 = isnan(0.0) ? _3842 : (isnan(_3842) ? 0.0 : max(_3842, 0.0));
                                float _3845 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
                                float _3846 = dot(vec3(_833, _836, _839), vec3(_3838 * _3832, _3838 * _3833, _3838 * _3834));
                                float _4986 = isnan(0.0) ? _3846 : (isnan(_3846) ? 0.0 : max(_3846, 0.0));
                                float _3849 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
                                float _3853 = ((_3849 * _3849) * (_3831 + (-1.0))) + 1.0;
                                float _3854 = _3791 * _3830;
                                float _3855 = _3854 * _3854;
                                float _3861 = ((1.0 - _3855) * dot(vec3(_833, _836, _839), vec3(_3778, _3779, _3780))) + _3855;
                                float _4997 = isnan(0.0) ? _3861 : (isnan(_3861) ? 0.0 : max(_3861, 0.0));
                                float _3862 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
                                float _3863 = 1.0 - _3830;
                                float _3873 = (0.5 / (((_3862 * ((_3845 * _3863) + _3830)) + 9.9999999392252902907785028219223e-09) + (((_3862 * _3863) + _3830) * _3845))) * _3862;
                                float _5008 = isnan(0.0) ? _3873 : (isnan(_3873) ? 0.0 : max(_3873, 0.0));
                                float _3883 = (_3808 * _3785) * (((_3831 * 3.1415927410125732421875) * (isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0)))) / ((_3853 * _3853) * ((_3798 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3883 * _3665.z;
                                frontier_phi_80_pred_1 = _3883 * _3665.y;
                                frontier_phi_80_pred_2 = _3883 * _3665.x;
                                frontier_phi_80_pred_3 = _3809 * _3653.z;
                                frontier_phi_80_pred_4 = _3809 * _3653.y;
                                frontier_phi_80_pred_5 = _3809 * _3653.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3889 = frontier_phi_80_pred;
                            _3888 = frontier_phi_80_pred_1;
                            _3887 = frontier_phi_80_pred_2;
                            _3892 = frontier_phi_80_pred_3;
                            _3891 = frontier_phi_80_pred_4;
                            _3890 = frontier_phi_80_pred_5;
                            _3595 = _3890 + _3608;
                            _3596 = _3891 + _3609;
                            _3597 = _3892 + _3610;
                            _3592 = _3887 + _3605;
                            _3593 = _3888 + _3606;
                            _3594 = _3889 + _3607;
                            if (_3612 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3605 = _3592;
                                _3606 = _3593;
                                _3607 = _3594;
                                _3608 = _3595;
                                _3609 = _3596;
                                _3610 = _3597;
                                _3611 = _3612;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3594;
                        frontier_phi_74_pred_1 = _3593;
                        frontier_phi_74_pred_2 = _3592;
                        frontier_phi_74_pred_3 = _3597;
                        frontier_phi_74_pred_4 = _3596;
                        frontier_phi_74_pred_5 = _3595;
                    }
                    _3260 = frontier_phi_74_pred;
                    _3258 = frontier_phi_74_pred_1;
                    _3256 = frontier_phi_74_pred_2;
                    _3266 = frontier_phi_74_pred_3;
                    _3264 = frontier_phi_74_pred_4;
                    _3262 = frontier_phi_74_pred_5;
                    uint _3401 = _3400 + 1u;
                    if (_3401 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3394 = _3256;
                        _3395 = _3258;
                        _3396 = _3260;
                        _3397 = _3262;
                        _3398 = _3264;
                        _3399 = _3266;
                        _3400 = _3401;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3264;
                frontier_phi_62_63_ladder_1 = _3262;
                frontier_phi_62_63_ladder_2 = _3260;
                frontier_phi_62_63_ladder_3 = _3266;
                frontier_phi_62_63_ladder_4 = _3258;
                frontier_phi_62_63_ladder_5 = _3256;
            }
            else
            {
                frontier_phi_62_63_ladder = _3142;
                frontier_phi_62_63_ladder_1 = _3140;
                frontier_phi_62_63_ladder_2 = _3138;
                frontier_phi_62_63_ladder_3 = _3144;
                frontier_phi_62_63_ladder_4 = _3136;
                frontier_phi_62_63_ladder_5 = _3134;
            }
            _3255 = frontier_phi_62_63_ladder_5;
            _3257 = frontier_phi_62_63_ladder_4;
            _3259 = frontier_phi_62_63_ladder_2;
            _3261 = frontier_phi_62_63_ladder_1;
            _3263 = frontier_phi_62_63_ladder;
            _3265 = frontier_phi_62_63_ladder_3;
        }
        float _3270 = isnan(1.0) ? _1020 : (isnan(_1020) ? 1.0 : min(_1020, 1.0));
        _3041 = (_3270 * _3261) + _2554;
        _3043 = (_3270 * _3263) + _2556;
        _3045 = (_3270 * _3265) + _2558;
        _3047 = ((_3255 * _1006) * _3270) + _2892;
        _3049 = ((_3257 * _1007) * _3270) + _2894;
        _3051 = ((_3259 * _1008) * _3270) + _2896;
    }
    else
    {
        _3041 = _2554;
        _3043 = _2556;
        _3045 = _2558;
        _3047 = _2892;
        _3049 = _2894;
        _3051 = _2896;
    }
    uint _3057 = _913 + uint(cbMatDynParam._m0[0u].w);
    float _3063 = cbInstanceData._m0[_3057].x * ((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _707) + cbMatDynParam._m0[7u].x) + (((_747 - (_747 * _673)) + (cbMatDynParam._m0[11u].x * _778)) * cbMatDynParam._m0[9u].x));
    float _3064 = cbInstanceData._m0[_3057].y * ((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _707) + cbMatDynParam._m0[7u].y) + (((_749 - (_749 * _673)) + (cbMatDynParam._m0[11u].y * _778)) * cbMatDynParam._m0[9u].y));
    float _3065 = cbInstanceData._m0[_3057].z * ((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _707) + cbMatDynParam._m0[7u].z) + (((_751 - (_751 * _673)) + (cbMatDynParam._m0[11u].z * _778)) * cbMatDynParam._m0[9u].z));
    float _5024 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _5035 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _5046 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _5057 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _3083 = (((isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0))) * (_3041 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _1020))) + ((_3047 + ((isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0))) * _1818)) * cbPerFrame._m0[3u].x)) + _3063;
    float _3085 = (_3064 + ((_3049 + ((isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0))) * _1818)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0))) * (_3043 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1020)));
    float _3087 = (_3065 + ((_3051 + ((isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0))) * _1818)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0))) * (_3045 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _1020)));
    float _3095 = cbMatDynParam._m0[12u].y - (cbMatDynParam._m0[12u].y * ((((isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) - _733) * _707) + _733));
    float _3100 = cbInstanceData._m0[_912 + 6u].w * (isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0)));
    float _3105 = _810 / cbSceneParam._m0[86u].x;
    float _3106 = _811 / cbSceneParam._m0[86u].y;
    vec4 _3120 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3105, _3106, (log2((isnan(cbSceneParam._m0[77u].w) ? _804 : (isnan(_804) ? cbSceneParam._m0[77u].w : min(_804, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3122 = _3120.x;
    float _3123 = _3120.y;
    float _3124 = _3120.z;
    float _3125 = _3120.w;
    float _3196;
    float _3198;
    float _3200;
    float _3202;
    if (_804 > cbSceneParam._m0[78u].w)
    {
        float _3159 = isnan(_804) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _804 : min(cbSceneParam._m0[80u].w, _804));
        float _3160 = _3159 / _804;
        float _3171 = _3160 * _295;
        float _3172 = _296 * _3160;
        float _3173 = (-0.0) - _3172;
        float _3174 = _3160 * _297;
        float _3176 = (cbSceneParam._m0[77u].w * _3173) / _3159;
        float _3177 = _3176 + cbSceneParam._m0[79u].w;
        float _3178 = cbSceneParam._m0[79u].w - _3172;
        float _3184 = sqrt(((_3171 * _3171) + (_3172 * _3172)) + (_3174 * _3174));
        float _3187 = (1.0 - (cbSceneParam._m0[77u].w / _3159)) * _3184;
        float _3192 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3194 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3356;
        if (abs((_3173 - _3176) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3356 = ((((_3177 > 0.0) ? exp2(_3192 * _3177) : (2.0 - exp2(_3194 * _3177))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3187;
        }
        else
        {
            float _3316 = 1.0 / cbSceneParam._m0[80u].x;
            float _3317 = isnan(_3178) ? _3177 : (isnan(_3177) ? _3178 : max(_3177, _3178));
            float _3318 = isnan(_3178) ? _3177 : (isnan(_3177) ? _3178 : min(_3177, _3178));
            float _3327 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : min(_3317, 0.0));
            float _3328 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : min(_3318, 0.0));
            _3356 = ((abs(_3184 / _3173) * cbSceneParam._m0[80u].y) * ((((_3327 - _3328) * 2.0) - ((exp2(_3192 * (isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0)))) - exp2(_3192 * (isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0))))) * _3316)) - ((exp2(_3194 * _3327) - exp2(_3194 * _3328)) * _3316))) + (_3187 * cbSceneParam._m0[80u].z);
        }
        vec4 _3358 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3105, _3106, 1.0), 0.0);
        float _3367 = exp2((_3356 * (-1.44269502162933349609375)) * (1.0 - _3358.w));
        float _3368 = log2(_3367);
        float _3384 = log2(_3125);
        _3196 = (exp2(_3384 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3368 * cbSceneParam._m0[78u].x)) * _3358.x) / cbSceneParam._m0[78u].x)) + _3122;
        _3198 = (exp2(_3384 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3368 * cbSceneParam._m0[78u].y)) * _3358.y) / cbSceneParam._m0[78u].y)) + _3123;
        _3200 = (exp2(_3384 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3368 * cbSceneParam._m0[78u].z)) * _3358.z) / cbSceneParam._m0[78u].z)) + _3124;
        _3202 = _3367 * _3125;
    }
    else
    {
        _3196 = _3122;
        _3198 = _3123;
        _3200 = _3124;
        _3202 = _3125;
    }
    float _3214 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3215 = _3214 == 3.0;
    float _3216 = log2(_3202);
    float _3220 = exp2(_3216 * cbSceneParam._m0[78u].x);
    float _3221 = exp2(_3216 * cbSceneParam._m0[78u].y);
    float _3222 = exp2(_3216 * cbSceneParam._m0[78u].z);
    float _3223 = _3220 * (isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0)));
    float _3224 = _3221 * (isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0)));
    float _3225 = _3222 * (isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0)));
    float _3234 = (_3214 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3234 * (_3215 ? _3223 : (_3223 + (cbSceneParam._m0[72u].w * _3196)));
    SV_Target.y = _3234 * (_3215 ? _3224 : (_3224 + (cbSceneParam._m0[72u].w * _3198)));
    SV_Target.z = _3234 * (_3215 ? _3225 : (_3225 + (cbSceneParam._m0[72u].w * _3200)));
    SV_Target.w = _3100;
    SV_Target_1.x = ((_3095 * _3063) * _3220) * _3234;
    SV_Target_1.y = ((_3095 * _3064) * _3221) * _3234;
    SV_Target_1.z = ((_3095 * _3065) * _3222) * _3234;
    SV_Target_1.w = _3100;
}


