#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1431;
float _4131;
float _4132;
float _4133;
float _4134;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = _227 * NORMAL.x;
    float _229 = _227 * NORMAL.y;
    float _230 = _227 * NORMAL.z;
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242;
    float _243;
    float _244;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
        _244 = (-0.0) - _230;
    }
    else
    {
        _242 = _228;
        _243 = _229;
        _244 = _230;
    }
    float _289 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _299 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _289);
    float _300 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _289);
    float _301 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _289);
    vec4 _314 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _319 = _314.z;
    float _320 = _314.w;
    float _326 = exp2(log2(_319 * 22.0) * 260.0);
    float _327 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _328 = isnan(1.0) ? _327 : (isnan(_327) ? 1.0 : min(_327, 1.0));
    vec4 _342 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _352 = cbMtdParam._m0[10u].x * _342.x;
    float _353 = cbMtdParam._m0[10u].y * _342.y;
    float _354 = cbMtdParam._m0[10u].z * _342.z;
    vec4 _366 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _386 = (((cbMtdParam._m0[9u].x * _366.x) - _352) * _328) + _352;
    float _387 = (((cbMtdParam._m0[9u].y * _366.y) - _353) * _328) + _353;
    float _388 = (((cbMtdParam._m0[9u].z * _366.z) - _354) * _328) + _354;
    float _393 = exp2(log2(1.0 - _320) * 8.0);
    vec4 _405 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _425 = (((cbMtdParam._m0[12u].x * _405.x) - _386) * _393) + _386;
    float _426 = (((cbMtdParam._m0[12u].y * _405.y) - _387) * _393) + _387;
    float _427 = (((cbMtdParam._m0[12u].z * _405.z) - _388) * _393) + _388;
    float _430 = exp2(log2(_320) * 8.0);
    vec4 _443 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    vec4 _476 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _484 = (((((cbMtdParam._m0[11u].x * _443.x) - _425) * _430) + _425) * 4.55000019073486328125) * _476.x;
    float _486 = (((((cbMtdParam._m0[11u].y * _443.y) - _426) * _430) + _426) * 4.55000019073486328125) * _476.y;
    float _488 = (((((cbMtdParam._m0[11u].z * _443.z) - _427) * _430) + _427) * 4.55000019073486328125) * _476.z;
    float _489 = _476.w * _366.w;
    float _517 = (((texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _328) + cbMtdParam._m0[15u].y;
    float _520 = ((cbMtdParam._m0[14u].y - _517) * _393) + _517;
    float _524 = ((cbMtdParam._m0[15u].x - _520) * _430) + _520;
    vec4 _536 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _538 = _536.x;
    float _539 = _536.y;
    float _545 = cbMtdParam._m0[13u].y + _536.z;
    vec4 _557 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _566 = (((_557.z - _545) + cbMtdParam._m0[13u].x) * _328) + _545;
    vec4 _579 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _588 = (((_579.z - _566) + cbMtdParam._m0[14u].x) * _393) + _566;
    vec4 _600 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _617 = (((_328 * (_319 + (-0.5))) + 0.5) * 2.0) * ((((_600.z - _588) + cbMtdParam._m0[13u].w) * _430) + _588);
    float _621 = (_314.x * 2.0) + (-1.0);
    float _623 = (_314.y * 2.0) + (-1.0);
    float _624 = dot(vec2(_621, _623), vec2(_621, _623));
    float _4153 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _629 = sqrt(1.0 - (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))));
    float _634 = ((_557.x - _538) * _328) + _538;
    float _635 = ((_557.y - _539) * _328) + _539;
    float _640 = ((_579.x - _634) * _393) + _634;
    float _641 = ((_579.y - _635) * _393) + _635;
    float _654 = ((((((_600.x - _640) * _430) + _640) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _621;
    float _655 = ((((((_600.y - _641) * _430) + _641) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _623;
    float _658 = fma(_629, _242, fma(_655, _234 * TANGENT.x, (_220 * _212) * _654));
    float _661 = fma(_629, _243, fma(_655, _234 * TANGENT.y, (_220 * _213) * _654));
    float _664 = fma(_629, _244, fma(_655, _234 * TANGENT.z, (_220 * _214) * _654));
    float _668 = inversesqrt(dot(vec3(_658, _661, _664), vec3(_658, _661, _664)));
    float _669 = _668 * _658;
    float _670 = _668 * _661;
    float _671 = _668 * _664;
    float _4164 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _672 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _4175 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _673 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _4186 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _674 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _4197 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _675 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _4208 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _676 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _4219 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _677 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _685 = cbMatDynParam._m0[9u].x * _674;
    float _686 = cbMatDynParam._m0[9u].y * _675;
    float _687 = cbMatDynParam._m0[9u].z * _676;
    float _694 = inversesqrt(dot(vec3(_299, _300, _301), vec3(_299, _300, _301)));
    float _695 = _694 * _299;
    float _696 = _694 * _300;
    float _697 = _694 * _301;
    float _698 = dot(vec3(_669, _670, _671), vec3(_695, _696, _697));
    float _704 = abs(exp2(log2(_698) * cbMatDynParam._m0[12u].x));
    float _705 = isnan(0.100000001490116119384765625) ? _704 : (isnan(_704) ? 0.100000001490116119384765625 : max(_704, 0.100000001490116119384765625));
    float _711 = ((isnan(0.699999988079071044921875) ? _705 : (isnan(_705) ? 0.699999988079071044921875 : min(_705, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _733 = 1.0 - cbMatDynParam._m0[8u].w;
    float _4240 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _736 = 1.0 - cbMatDynParam._m0[7u].w;
    float _4251 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _737 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _741 = dot(vec3(_669, _670, _671), vec3(0.0, -1.0, 0.0));
    float _4262 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _744 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _751 = (_744 * _674) * cbMatDynParam._m0[11u].x;
    float _753 = (_744 * _675) * cbMatDynParam._m0[11u].y;
    float _755 = (_744 * _676) * cbMatDynParam._m0[11u].z;
    float _762 = dot(vec3(_695, _696, _697), vec3(_669, _670, _671));
    float _765 = _762 * 2.0;
    float _775 = dot(vec3((-0.0) - (_695 - (_765 * _669)), (-0.0) - (_696 - (_765 * _670)), (-0.0) - (_697 - (_765 * _671))), vec3(0.0, -1.0, 0.0));
    float _4273 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _782 = exp2(log2(isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * 4.0);
    float _808 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _813 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _815 = _813.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1112 = sqrt(((_299 * _299) + (_300 * _300)) + (_301 * _301));
        float _1118 = (cbMatDynParam._m0[5u].x * _1112) + cbMatDynParam._m0[5u].y;
        float _4284 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1123 = (cbMatDynParam._m0[5u].z * _1112) + cbMatDynParam._m0[5u].w;
        float _4295 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) - _1119)) + _1119) < ((_815 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _826 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _827 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _829 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _831 = _829.w;
    float _849 = fma(_671, cbSceneParam._m0[5u].z, fma(_670, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _669));
    float _852 = fma(_671, cbSceneParam._m0[6u].z, fma(_670, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _669));
    float _855 = fma(_671, cbSceneParam._m0[7u].z, fma(_670, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _669));
    vec4 _857 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _859 = _857.x;
    float _871 = (((_857.y - _673) + (_857.w * _673)) * cbMtdParam._m0[3u].x) + _673;
    vec4 _872 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _888 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_859 * _859)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _872.z;
    float _896 = (((cbMatDynParam._m0[15u].x - _677) * cbMatDynParam._m0[15u].w) * _888) + _677;
    float _904 = ((_888 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _871)) + _871;
    uint _928 = uint(roundEven(NORMAL.w)) * 13u;
    uint _929 = _928 + 9u;
    uint _930 = _929 + uint(cbMatDynParam._m0[0u].w);
    float _936 = (cbMtdParam._m0[0u].x * _685) * cbInstanceData._m0[_930].x;
    float _937 = (cbMtdParam._m0[0u].y * _686) * cbInstanceData._m0[_930].y;
    float _938 = (cbMtdParam._m0[0u].z * _687) * cbInstanceData._m0[_930].z;
    float _4306 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _939 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _4317 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _940 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    float _4328 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _941 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
    vec4 _942 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _947 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _958 = (((_947.x - _896) + (_947.w * _896)) * cbMtdParam._m0[3u].x) + _896;
    float _971 = (cbMtdParam._m0[3u].x * (((_939 * _831) - _939) + _942.x)) + _939;
    float _972 = (cbMtdParam._m0[3u].x * (((_940 * _831) - _940) + _942.y)) + _940;
    float _973 = (cbMtdParam._m0[3u].x * (((_941 * _831) - _941) + _942.z)) + _941;
    float _987 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_896 * (_685 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_896 * (_686 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_896 * (_687 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _991 = _987 * cbMatDynParam._m0[13u].w;
    float _1001 = (_991 * (cbMatDynParam._m0[13u].x - _971)) + _971;
    float _1002 = (_991 * (cbMatDynParam._m0[13u].y - _972)) + _972;
    float _1003 = (_991 * (cbMatDynParam._m0[13u].z - _973)) + _973;
    float _1011 = ((_987 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _958)) + _958;
    float _1012 = 1.0 - _1011;
    float _1013 = _1012 * _1001;
    float _1014 = _1012 * _1002;
    float _1015 = _1012 * _1003;
    float _1019 = (_1001 + (-0.039999999105930328369140625)) * _1011;
    float _1020 = (_1002 + (-0.039999999105930328369140625)) * _1011;
    float _1021 = (_1003 + (-0.039999999105930328369140625)) * _1011;
    float _1022 = _1019 + 0.039999999105930328369140625;
    float _1023 = _1020 + 0.039999999105930328369140625;
    float _1024 = _1021 + 0.039999999105930328369140625;
    vec4 _1033 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _826, cbSceneParam._m0[86u].y * _827));
    float _1036 = _1033.x * TEXCOORD_4;
    float _1037 = _698 * 2.0;
    float _1041 = (_1037 * _669) - _695;
    float _1042 = (_1037 * _670) - _696;
    float _1043 = (_1037 * _671) - _697;
    float _1044 = abs(_762);
    float _4339 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _1046 = sqrt(_904);
    float _1058 = exp2((_1046 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1046 * 3.0));
    float _1064 = (1.0 - _1058) * ((_1046 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1065 = _1058 * _1046;
    float _1093 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1097 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1101 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1430;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1157 = fma(_1101, cbModelParam._m0[26u].z, fma(_1097, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1093));
        float _1161 = fma(_1101, cbModelParam._m0[27u].z, fma(_1097, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1093));
        float _1165 = fma(_1101, cbModelParam._m0[28u].z, fma(_1097, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1093));
        float _1188 = _1093 + _669;
        float _1189 = _1097 + _670;
        float _1190 = _1101 + _671;
        float _1200 = fma(_1190, cbModelParam._m0[26u].z, fma(_1189, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1188)) - _1157;
        float _1201 = fma(_1190, cbModelParam._m0[27u].z, fma(_1189, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1188)) - _1161;
        float _1202 = fma(_1190, cbModelParam._m0[28u].z, fma(_1189, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1188)) - _1165;
        float _1206 = inversesqrt(dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202)));
        float _1219 = ((_1206 * _1200) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1157 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1220 = ((_1206 * _1201) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1161 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1221 = ((_1206 * _1202) / cbModelParam._m0[34u].z) + ((((((_1165 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        float _1258 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1224.x + (-0.5));
        float _1260 = _1258 * (_1224.y + (-0.5));
        float _1261 = _1258 * (_1224.z + (-0.5));
        float _1268 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1231.x + (-0.5));
        float _1270 = _1268 * (_1231.y + (-0.5));
        float _1271 = _1268 * (_1231.z + (-0.5));
        float _1278 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1238.x + (-0.5));
        float _1280 = _1278 * (_1238.y + (-0.5));
        float _1281 = _1278 * (_1238.z + (-0.5));
        float _1288 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1245.x + (-0.5));
        float _1290 = _1288 * (_1245.y + (-0.5));
        float _1291 = _1288 * (_1245.z + (-0.5));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = _1259 * 0.5;
        float _1296 = _1269 * 0.5;
        float _1297 = _1279 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1312 = (dot(vec3(_669, _670, _671), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _4365 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1322 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _4376 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _4387 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_1324 + 1.0))) + _1329) * _1292;
        float _1339 = _1260 * 0.5;
        float _1340 = _1270 * 0.5;
        float _1341 = _1280 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1355 = (dot(vec3(_669, _670, _671), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _4398 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1364 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _4409 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _4420 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_1366 + 1.0))) + _1371) * _1293;
        float _1381 = _1261 * 0.5;
        float _1382 = _1271 * 0.5;
        float _1383 = _1281 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1397 = (dot(vec3(_669, _670, _671), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _4431 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1406 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _4442 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _4453 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_1408 + 1.0))) + _1413) * _1294;
        _1430 = _1261;
        _1432 = _1260;
        _1433 = _1259;
        _1434 = _1271;
        _1435 = _1270;
        _1436 = _1269;
        _1437 = _1281;
        _1438 = _1280;
        _1439 = _1279;
        _1440 = _1294;
        _1441 = _1293;
        _1442 = _1292;
        _1443 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
        _1444 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
        _1445 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
    }
    else
    {
        _1430 = _1431;
        _1432 = _1431;
        _1433 = _1431;
        _1434 = _1431;
        _1435 = _1431;
        _1436 = _1431;
        _1437 = _1431;
        _1438 = _1431;
        _1439 = _1431;
        _1440 = _1431;
        _1441 = _1431;
        _1442 = _1431;
        _1443 = 0.0;
        _1444 = 0.0;
        _1445 = 0.0;
    }
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1474 = fma(_1101, cbModelParam._m0[30u].z, fma(_1097, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1093));
        float _1478 = fma(_1101, cbModelParam._m0[31u].z, fma(_1097, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1093));
        float _1482 = fma(_1101, cbModelParam._m0[32u].z, fma(_1097, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1093));
        float _1505 = _1093 + _669;
        float _1506 = _1097 + _670;
        float _1507 = _1101 + _671;
        float _1517 = fma(_1507, cbModelParam._m0[30u].z, fma(_1506, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1505)) - _1474;
        float _1518 = fma(_1507, cbModelParam._m0[31u].z, fma(_1506, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1505)) - _1478;
        float _1519 = fma(_1507, cbModelParam._m0[32u].z, fma(_1506, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1505)) - _1482;
        float _1523 = inversesqrt(dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519)));
        float _1536 = ((_1523 * _1517) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1474 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1537 = ((_1523 * _1518) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1478 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1538 = ((_1523 * _1519) / cbModelParam._m0[35u].z) + ((((((_1482 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1540 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1536, _1537, _1538), 0.0);
        vec4 _1547 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1536, _1537, _1538), 0.0);
        vec4 _1554 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1536, _1537, _1538), 0.0);
        vec4 _1561 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1536, _1537, _1538), 0.0);
        float _1573 = exp2((_1540.w + (-0.5)) * 20.0) * 2.0;
        float _1574 = _1573 * (_1540.x + (-0.5));
        float _1575 = _1573 * (_1540.y + (-0.5));
        float _1576 = _1573 * (_1540.z + (-0.5));
        float _1583 = exp2((_1547.w + (-0.5)) * 20.0) * 2.0;
        float _1584 = _1583 * (_1547.x + (-0.5));
        float _1585 = _1583 * (_1547.y + (-0.5));
        float _1586 = _1583 * (_1547.z + (-0.5));
        float _1593 = exp2((_1554.w + (-0.5)) * 20.0) * 2.0;
        float _1594 = _1593 * (_1554.x + (-0.5));
        float _1595 = _1593 * (_1554.y + (-0.5));
        float _1596 = _1593 * (_1554.z + (-0.5));
        float _1603 = exp2((_1561.w + (-0.5)) * 20.0) * 2.0;
        float _1604 = _1603 * (_1561.x + (-0.5));
        float _1605 = _1603 * (_1561.y + (-0.5));
        float _1606 = _1603 * (_1561.z + (-0.5));
        float _1607 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1608 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1609 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1610 = _1574 * 0.5;
        float _1611 = _1584 * 0.5;
        float _1612 = _1594 * 0.5;
        float _1613 = dot(vec3(_1610, _1611, _1612), vec3(_1610, _1611, _1612));
        float _1618 = (_1613 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1613);
        float _1626 = (dot(vec3(_669, _670, _671), vec3(_1618 * _1610, _1618 * _1611, _1618 * _1612)) + 1.0) * 0.5;
        float _4494 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1635 = sqrt(((_1611 * _1611) + (_1610 * _1610)) + (_1612 * _1612)) / (_1607 + 9.9999997473787516355514526367188e-06);
        float _4505 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _1637 = _1636 * 2.0;
        float _1641 = (1.0 - _1636) / (_1636 + 1.0);
        float _4516 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _1651 = ((((1.0 - _1642) * (_1637 + 2.0)) * exp2(log2(isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_1637 + 1.0))) + _1642) * _1607;
        float _1652 = _1575 * 0.5;
        float _1653 = _1585 * 0.5;
        float _1654 = _1595 * 0.5;
        float _1655 = dot(vec3(_1652, _1653, _1654), vec3(_1652, _1653, _1654));
        float _1660 = (_1655 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1655);
        float _1668 = (dot(vec3(_669, _670, _671), vec3(_1660 * _1652, _1660 * _1653, _1660 * _1654)) + 1.0) * 0.5;
        float _4527 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1677 = sqrt(((_1653 * _1653) + (_1652 * _1652)) + (_1654 * _1654)) / (_1608 + 9.9999997473787516355514526367188e-06);
        float _4538 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _1679 = _1678 * 2.0;
        float _1683 = (1.0 - _1678) / (_1678 + 1.0);
        float _4549 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _1693 = ((((1.0 - _1684) * (_1679 + 2.0)) * exp2(log2(isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_1679 + 1.0))) + _1684) * _1608;
        float _1694 = _1576 * 0.5;
        float _1695 = _1586 * 0.5;
        float _1696 = _1596 * 0.5;
        float _1697 = dot(vec3(_1694, _1695, _1696), vec3(_1694, _1695, _1696));
        float _1702 = (_1697 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1697);
        float _1710 = (dot(vec3(_669, _670, _671), vec3(_1702 * _1694, _1702 * _1695, _1702 * _1696)) + 1.0) * 0.5;
        float _4560 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1719 = sqrt(((_1695 * _1695) + (_1694 * _1694)) + (_1696 * _1696)) / (_1609 + 9.9999997473787516355514526367188e-06);
        float _4571 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1720 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _1721 = _1720 * 2.0;
        float _1725 = (1.0 - _1720) / (_1720 + 1.0);
        float _4582 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _1735 = ((((1.0 - _1726) * (_1721 + 2.0)) * exp2(log2(isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (_1721 + 1.0))) + _1726) * _1609;
        _1743 = _1576;
        _1744 = _1575;
        _1745 = _1574;
        _1746 = _1586;
        _1747 = _1585;
        _1748 = _1584;
        _1749 = _1596;
        _1750 = _1595;
        _1751 = _1594;
        _1752 = _1609;
        _1753 = _1608;
        _1754 = _1607;
        _1755 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)));
        _1756 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0)));
        _1757 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)));
    }
    else
    {
        _1743 = _1431;
        _1744 = _1431;
        _1745 = _1431;
        _1746 = _1431;
        _1747 = _1431;
        _1748 = _1431;
        _1749 = _1431;
        _1750 = _1431;
        _1751 = _1431;
        _1752 = _1431;
        _1753 = _1431;
        _1754 = _1431;
        _1755 = 0.0;
        _1756 = 0.0;
        _1757 = 0.0;
    }
    float _1767 = (cbModelParam._m0[1u].x * (_1755 - _1443)) + _1443;
    float _1768 = (cbModelParam._m0[1u].x * (_1756 - _1444)) + _1444;
    float _1769 = (cbModelParam._m0[1u].x * (_1757 - _1445)) + _1445;
    float _1790 = fma(_1769, cbSceneParam._m0[89u].z, fma(_1768, cbSceneParam._m0[89u].y, _1767 * cbSceneParam._m0[89u].x));
    float _1793 = fma(_1769, cbSceneParam._m0[90u].z, fma(_1768, cbSceneParam._m0[90u].y, _1767 * cbSceneParam._m0[90u].x));
    float _1796 = fma(_1769, cbSceneParam._m0[91u].z, fma(_1768, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1767));
    float _1811 = _1041 * 0.5;
    float _1812 = _1042 * 0.5;
    float _1813 = _1043 * 0.5;
    float _1814 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1745, _1748, _1751, _1754));
    float _1817 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1744, _1747, _1750, _1753));
    float _1820 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1743, _1746, _1749, _1752));
    float _1851;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1827 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1430, _1434, _1437, _1440));
        float _1831 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1432, _1435, _1438, _1441));
        float _1835 = dot(vec4(_1811, _1812, _1813, 1.0), vec4(_1433, _1436, _1439, _1442));
        float _1842 = dot(vec4(cbModelParam._m0[39u]), vec4(_1811, _1812, _1813, 1.0));
        _1851 = dot(vec3(isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0)), isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)), isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1842) ? 0.0 : (isnan(0.0) ? _1842 : max(0.0, _1842))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1851 = 1.0;
    }
    float _1862;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1853 = dot(vec4(cbModelParam._m0[40u]), vec4(_1811, _1812, _1813, 1.0));
        _1862 = dot(vec3(isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)), isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0)), isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1853) ? 0.0 : (isnan(0.0) ? _1853 : max(0.0, _1853))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1862 = 1.0;
    }
    float _1866 = (_1862 * cbModelParam._m0[1u].x) + (_1851 * (1.0 - cbModelParam._m0[1u].x));
    float _1876 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _904);
    float _1877 = isnan(_1876) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1876 : min(cbModelParam._m0[25u].z, _1876));
    float _1957;
    float _1959;
    float _1961;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1924 = fma(_1101, cbModelParam._m0[13u].z, fma(_1097, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1093)) + cbModelParam._m0[13u].w;
        float _1928 = fma(_1101, cbModelParam._m0[14u].z, fma(_1097, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1093)) + cbModelParam._m0[14u].w;
        float _1932 = fma(_1101, cbModelParam._m0[15u].z, fma(_1097, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1093)) + cbModelParam._m0[15u].w;
        float _1935 = fma(_1043, cbModelParam._m0[13u].z, fma(_1042, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1041));
        float _1938 = fma(_1043, cbModelParam._m0[14u].z, fma(_1042, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1041));
        float _1941 = fma(_1043, cbModelParam._m0[15u].z, fma(_1042, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1041));
        float _1969;
        if (_1935 > 0.0)
        {
            _1969 = abs((1.0 - _1924) / _1935);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1924 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1969 = frontier_phi_19_17_ladder;
        }
        float _2144;
        if (_1938 > 0.0)
        {
            _2144 = abs((1.0 - _1928) / _1938);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1928 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2144 = frontier_phi_28_24_ladder;
        }
        float _2439;
        if (_1941 > 0.0)
        {
            _2439 = abs((1.0 - _1932) / _1941);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1932 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2439 = frontier_phi_40_35_ladder;
        }
        float _2441 = isnan(_2144) ? _1969 : (isnan(_1969) ? _2144 : min(_1969, _2144));
        float _2442 = isnan(_2439) ? _2441 : (isnan(_2441) ? _2439 : min(_2441, _2439));
        float _2446 = (_2442 * _1935) + _1924;
        float _2447 = (_2442 * _1938) + _1928;
        float _2448 = (_2442 * _1941) + _1932;
        float _2449 = _2442 * 9.9999997473787516355514526367188e-05;
        float _2451 = (-1.0) - _2449;
        float _2453 = _2449 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2448 > _2453) || ((_2448 < _2451) || ((_2447 > _2453) || ((_2447 < _2451) || ((_2446 < _2451) || (_2446 > _2453))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2593 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2448, cbModelParam._m0[9u].z, fma(_2447, cbModelParam._m0[9u].y, _2446 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2448, cbModelParam._m0[10u].z, fma(_2447, cbModelParam._m0[10u].y, _2446 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2448, cbModelParam._m0[11u].z, fma(_2447, cbModelParam._m0[11u].y, _2446 * cbModelParam._m0[11u].x))), _1877);
            frontier_phi_18_40_ladder = _2593.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2593.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2593.x * cbModelParam._m0[1u].y;
        }
        _1957 = frontier_phi_18_40_ladder_2;
        _1959 = frontier_phi_18_40_ladder_1;
        _1961 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1945 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1041, _1042, _1043), _1877);
        _1957 = _1945.x * cbModelParam._m0[1u].y;
        _1959 = _1945.y * cbModelParam._m0[1u].y;
        _1961 = _1945.z * cbModelParam._m0[1u].y;
    }
    float _1965 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _904);
    float _1966 = isnan(_1965) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1965 : min(cbModelParam._m0[25u].w, _1965));
    float _2059;
    float _2061;
    float _2063;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2023 = fma(_1101, cbModelParam._m0[21u].z, fma(_1097, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1093)) + cbModelParam._m0[21u].w;
        float _2027 = fma(_1101, cbModelParam._m0[22u].z, fma(_1097, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1093)) + cbModelParam._m0[22u].w;
        float _2031 = fma(_1101, cbModelParam._m0[23u].z, fma(_1097, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1093)) + cbModelParam._m0[23u].w;
        float _2034 = fma(_1043, cbModelParam._m0[21u].z, fma(_1042, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1041));
        float _2037 = fma(_1043, cbModelParam._m0[22u].z, fma(_1042, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1041));
        float _2040 = fma(_1043, cbModelParam._m0[23u].z, fma(_1042, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1041));
        float _2149;
        if (_2034 > 0.0)
        {
            _2149 = abs((1.0 - _2023) / _2034);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2034 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2023 + 1.0) / _2034);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2149 = frontier_phi_30_26_ladder;
        }
        float _2466;
        if (_2037 > 0.0)
        {
            _2466 = abs((1.0 - _2027) / _2037);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2037 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2027 + 1.0) / _2037);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2466 = frontier_phi_42_37_ladder;
        }
        float _2804;
        if (_2040 > 0.0)
        {
            _2804 = abs((1.0 - _2031) / _2040);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2040 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_2031 + 1.0) / _2040);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2804 = frontier_phi_52_49_ladder;
        }
        float _2806 = isnan(_2466) ? _2149 : (isnan(_2149) ? _2466 : min(_2149, _2466));
        float _2807 = isnan(_2804) ? _2806 : (isnan(_2806) ? _2804 : min(_2806, _2804));
        float _2811 = (_2807 * _2034) + _2023;
        float _2812 = (_2807 * _2037) + _2027;
        float _2813 = (_2807 * _2040) + _2031;
        float _2814 = _2807 * 9.9999997473787516355514526367188e-05;
        float _2815 = (-1.0) - _2814;
        float _2817 = _2814 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2813 > _2817) || ((_2813 < _2815) || ((_2812 > _2817) || ((_2812 < _2815) || ((_2811 < _2815) || (_2811 > _2817))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2935 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2813, cbModelParam._m0[17u].z, fma(_2812, cbModelParam._m0[17u].y, _2811 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2813, cbModelParam._m0[18u].z, fma(_2812, cbModelParam._m0[18u].y, _2811 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2813, cbModelParam._m0[19u].z, fma(_2812, cbModelParam._m0[19u].y, _2811 * cbModelParam._m0[19u].x))), _1966);
            frontier_phi_27_52_ladder = _2935.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2935.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2935.x * cbModelParam._m0[1u].z;
        }
        _2059 = frontier_phi_27_52_ladder_2;
        _2061 = frontier_phi_27_52_ladder_1;
        _2063 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2043 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1041, _1042, _1043), _1966);
        _2059 = _2043.x * cbModelParam._m0[1u].z;
        _2061 = _2043.y * cbModelParam._m0[1u].z;
        _2063 = _2043.z * cbModelParam._m0[1u].z;
    }
    float _2076 = (((_1064 * _1022) + _1065) * _1036) * ((cbModelParam._m0[1u].w * (_2059 - _1957)) + _1957);
    float _2078 = (((_1064 * _1023) + _1065) * _1036) * ((cbModelParam._m0[1u].w * (_2061 - _1959)) + _1959);
    float _2080 = (((_1064 * _1024) + _1065) * _1036) * ((cbModelParam._m0[1u].w * (_2063 - _1961)) + _1961);
    float _2083 = fma(_2080, cbSceneParam._m0[89u].z, fma(_2078, cbSceneParam._m0[89u].y, _2076 * cbSceneParam._m0[89u].x));
    float _2086 = fma(_2080, cbSceneParam._m0[90u].z, fma(_2078, cbSceneParam._m0[90u].y, _2076 * cbSceneParam._m0[90u].x));
    float _2089 = fma(_2080, cbSceneParam._m0[91u].z, fma(_2078, cbSceneParam._m0[91u].y, _2076 * cbSceneParam._m0[91u].x));
    float _2123 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2127 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2131 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2135 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2136 = _2123 / _2135;
    float _2137 = _2127 / _2135;
    float _2138 = _2131 / _2135;
    float _2285;
    float _2286;
    float _2287;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2165 = ((uint(_2138 > cbSceneParam._m0[59u].y) + uint(_2138 > cbSceneParam._m0[59u].x)) + uint(_2138 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2166 = _2165 + 43u;
        uint _2174 = _2165 + 44u;
        uint _2182 = _2165 + 45u;
        uint _2190 = _2165 + 46u;
        float _2201 = fma(_2135, cbSceneParam._m0[_2166].w, fma(_2131, cbSceneParam._m0[_2166].z, fma(_2127, cbSceneParam._m0[_2166].y, _2123 * cbSceneParam._m0[_2166].x)));
        float _2205 = fma(_2135, cbSceneParam._m0[_2174].w, fma(_2131, cbSceneParam._m0[_2174].z, fma(_2127, cbSceneParam._m0[_2174].y, _2123 * cbSceneParam._m0[_2174].x)));
        float _2213 = fma(_2135, cbSceneParam._m0[_2190].w, fma(_2131, cbSceneParam._m0[_2190].z, fma(_2127, cbSceneParam._m0[_2190].y, _2123 * cbSceneParam._m0[_2190].x)));
        float _2218 = cbSceneParam._m0[33u].z * _2213;
        float _2220 = cbSceneParam._m0[33u].w * _2213;
        float _2223 = fma(_2135, cbSceneParam._m0[_2182].w, fma(_2131, cbSceneParam._m0[_2182].z, fma(_2127, cbSceneParam._m0[_2182].y, _2123 * cbSceneParam._m0[_2182].x))) / _2213;
        float _2271 = (cbSceneParam._m0[33u].x - sqrt(((_2137 * _2137) + (_2136 * _2136)) + (_2138 * _2138))) * cbSceneParam._m0[33u].y;
        float _4708 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2278 = (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2218 + _2201) / _2213, (_2220 + _2205) / _2213), _2223), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2220 + _2201) / _2213, (_2205 - _2218) / _2213), _2223), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2201 - _2218) / _2213, (_2205 - _2220) / _2213), _2223), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2201 - _2220) / _2213, (_2218 + _2205) / _2213), _2223), 0.0)).x), vec4(0.25)));
        _2285 = 1.0 - (_2278 * cbSceneParam._m0[34u].x);
        _2286 = 1.0 - (_2278 * cbSceneParam._m0[34u].y);
        _2287 = 1.0 - (_2278 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2285 = 1.0;
        _2286 = 1.0;
        _2287 = 1.0;
    }
    float _2351;
    float _2353;
    float _2355;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2339 = fma(_2135, cbSceneParam._m0[63u].w, fma(_2131, cbSceneParam._m0[63u].z, fma(_2127, cbSceneParam._m0[63u].y, _2123 * cbSceneParam._m0[63u].x)));
        float _2340 = fma(_2135, cbSceneParam._m0[60u].w, fma(_2131, cbSceneParam._m0[60u].z, fma(_2127, cbSceneParam._m0[60u].y, _2123 * cbSceneParam._m0[60u].x))) / _2339;
        float _2341 = fma(_2135, cbSceneParam._m0[61u].w, fma(_2131, cbSceneParam._m0[61u].z, fma(_2127, cbSceneParam._m0[61u].y, _2123 * cbSceneParam._m0[61u].x))) / _2339;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2340 >= cbSceneParam._m0[64u].x) && (_2341 >= cbSceneParam._m0[64u].y)) && (_2340 <= cbSceneParam._m0[64u].z)) && (_2341 <= cbSceneParam._m0[64u].w))
        {
            float _2479 = fma(_2135, cbSceneParam._m0[62u].w, fma(_2131, cbSceneParam._m0[62u].z, fma(_2127, cbSceneParam._m0[62u].y, _2123 * cbSceneParam._m0[62u].x))) / _2339;
            float _2483 = isnan(cbSceneParam._m0[41u].w) ? _2479 : (isnan(_2479) ? cbSceneParam._m0[41u].w : max(_2479, cbSceneParam._m0[41u].w));
            float _2526 = (cbSceneParam._m0[33u].x - sqrt(((_2137 * _2137) + (_2136 * _2136)) + (_2138 * _2138))) * cbSceneParam._m0[33u].y;
            float _4724 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
            float _2533 = (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2340, cbSceneParam._m0[33u].w + _2341), _2483), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2340, _2341 - cbSceneParam._m0[33u].z), _2483), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2340 - cbSceneParam._m0[33u].z, _2341 - cbSceneParam._m0[33u].w), _2483), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2340 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2341), _2483), 0.0)).x), vec4(0.25)));
            float _2537 = 1.0 - (_2533 * cbSceneParam._m0[34u].x);
            float _2538 = 1.0 - (_2533 * cbSceneParam._m0[34u].y);
            float _2539 = 1.0 - (_2533 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2538) ? _2286 : (isnan(_2286) ? _2538 : min(_2286, _2538));
            frontier_phi_39_38_ladder_1 = isnan(_2537) ? _2285 : (isnan(_2285) ? _2537 : min(_2285, _2537));
            frontier_phi_39_38_ladder_2 = isnan(_2539) ? _2287 : (isnan(_2287) ? _2539 : min(_2287, _2539));
        }
        else
        {
            frontier_phi_39_38_ladder = _2286;
            frontier_phi_39_38_ladder_1 = _2285;
            frontier_phi_39_38_ladder_2 = _2287;
        }
        _2351 = frontier_phi_39_38_ladder_1;
        _2353 = frontier_phi_39_38_ladder;
        _2355 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2351 = _2285;
        _2353 = _2286;
        _2355 = _2287;
    }
    uvec4 _2360 = floatBitsToUint(cbInstanceData._m0[_928 + 5u]);
    uint _2362 = _2360.x * 14u;
    uint _2363 = _2362 + 13u;
    float _2370 = _1036 + (-1.0);
    float _2375 = (cbLight._m0[_2363].x * _2370) + 1.0;
    float _2376 = (cbLight._m0[_2363].y * _2370) + 1.0;
    float _2377 = (cbLight._m0[_2363].z * _2370) + 1.0;
    float _2378 = (cbLight._m0[_2363].w * _2370) + 1.0;
    uint _2379 = _2362 + 5u;
    float _2385 = isnan(1.0) ? _2376 : (isnan(_2376) ? 1.0 : min(_2376, 1.0));
    uint _2389 = _2362 + 4u;
    float _2398 = isnan(1.0) ? _2375 : (isnan(_2375) ? 1.0 : min(_2375, 1.0));
    uint _2402 = _2362 | 1u;
    float _2413 = dot(vec3(cbLight._m0[_2362].xyz), vec3(_669, _670, _671));
    float _2416 = dot(vec3(cbLight._m0[_2402].xyz), vec3(_669, _670, _671));
    float _4760 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _4771 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2421 = (isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * 0.3183098733425140380859375;
    float _2423 = (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * 0.3183098733425140380859375;
    float _2430 = ((cbLight._m0[_2379].x * _2385) * _2423) + (((cbLight._m0[_2389].x * _2351) * _2398) * _2421);
    float _2431 = ((_2385 * cbLight._m0[_2379].y) * _2423) + (((cbLight._m0[_2389].y * _2353) * _2398) * _2421);
    float _2432 = ((_2385 * cbLight._m0[_2379].z) * _2423) + (((cbLight._m0[_2389].z * _2355) * _2398) * _2421);
    uvec4 _2436 = floatBitsToUint(cbLight._m0[_2362 + 12u]);
    bool _2438 = _2436.x == 0u;
    float _2540;
    float _2542;
    float _2544;
    if (_2438)
    {
        _2540 = _2430;
        _2542 = _2431;
        _2544 = _2432;
    }
    else
    {
        uint _2548 = _2362 + 6u;
        float _2564 = (dot(vec3(cbLight._m0[_2362 + 2u].xyz), vec3(_669, _670, _671)) * 0.5) + 0.5;
        float _2565 = _2564 * _2564;
        float _4782 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2566 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
        float _2567 = isnan(1.0) ? _2377 : (isnan(_2377) ? 1.0 : min(_2377, 1.0));
        _2540 = (((cbLight._m0[_2548].x * 0.3183098733425140380859375) * _2566) * _2567) + _2430;
        _2542 = (((cbLight._m0[_2548].y * 0.3183098733425140380859375) * _2566) * _2567) + _2431;
        _2544 = (((cbLight._m0[_2548].z * 0.3183098733425140380859375) * _2566) * _2567) + _2432;
    }
    bool _2547 = _2436.y == 0u;
    float _2602;
    float _2604;
    float _2606;
    if (_2547)
    {
        _2602 = _2540;
        _2604 = _2542;
        _2606 = _2544;
    }
    else
    {
        uint _2775 = _2362 + 7u;
        float _2791 = (dot(vec3(cbLight._m0[_2362 + 3u].xyz), vec3(_669, _670, _671)) * 0.5) + 0.5;
        float _2792 = _2791 * _2791;
        float _4798 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        float _2793 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
        float _2794 = isnan(1.0) ? _2378 : (isnan(_2378) ? 1.0 : min(_2378, 1.0));
        _2602 = (((cbLight._m0[_2775].x * 0.3183098733425140380859375) * _2793) * _2794) + _2540;
        _2604 = (((cbLight._m0[_2775].y * 0.3183098733425140380859375) * _2793) * _2794) + _2542;
        _2606 = (((cbLight._m0[_2775].z * 0.3183098733425140380859375) * _2793) * _2794) + _2544;
    }
    uint _2609 = _2362 + 8u;
    float _2622 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2362].w)) * _904) * 0.949999988079071044921875);
    float _2623 = _2622 * _2622;
    float _2624 = cbLight._m0[_2362].x + _695;
    float _2625 = cbLight._m0[_2362].y + _696;
    float _2626 = cbLight._m0[_2362].z + _697;
    float _2630 = inversesqrt(dot(vec3(_2624, _2625, _2626), vec3(_2624, _2625, _2626)));
    float _2631 = _2630 * _2624;
    float _2632 = _2630 * _2625;
    float _2633 = _2630 * _2626;
    float _2634 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_2362].xyz));
    float _4814 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
    float _2637 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
    float _4825 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _2638 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
    float _2639 = dot(vec3(_669, _670, _671), vec3(_2631, _2632, _2633));
    float _4836 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
    float _2642 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
    float _2643 = dot(vec3(cbLight._m0[_2362].xyz), vec3(_2631, _2632, _2633));
    float _4847 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
    float _2647 = _2623 * _2623;
    float _2651 = ((_2642 * _2642) * (_2647 + (-1.0))) + 1.0;
    float _2659 = exp2(log2(1.0 - (isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0)))) * 5.0);
    float _2660 = 0.959999978542327880859375 - _1019;
    float _2662 = 0.959999978542327880859375 - _1020;
    float _2663 = 0.959999978542327880859375 - _1021;
    float _2670 = 1.0 - _2623;
    float _2681 = (0.5 / (((_2638 * ((_2637 * _2670) + _2623)) + 9.9999999392252902907785028219223e-09) + (((_2638 * _2670) + _2623) * _2637))) * _2637;
    float _4858 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
    float _2683 = (isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0))) * (_2647 / ((_2651 * _2651) * 3.141590118408203125));
    uint _2697 = _2362 + 9u;
    float _2708 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2402].w)) * _904) * 0.949999988079071044921875);
    float _2709 = _2708 * _2708;
    float _2710 = cbLight._m0[_2402].x + _695;
    float _2711 = cbLight._m0[_2402].y + _696;
    float _2712 = cbLight._m0[_2402].z + _697;
    float _2716 = inversesqrt(dot(vec3(_2710, _2711, _2712), vec3(_2710, _2711, _2712)));
    float _2717 = _2716 * _2710;
    float _2718 = _2716 * _2711;
    float _2719 = _2716 * _2712;
    float _2720 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_2402].xyz));
    float _4869 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
    float _2723 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
    float _2724 = dot(vec3(_669, _670, _671), vec3(_2717, _2718, _2719));
    float _4880 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
    float _2727 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
    float _2728 = dot(vec3(cbLight._m0[_2402].xyz), vec3(_2717, _2718, _2719));
    float _4891 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
    float _2732 = _2709 * _2709;
    float _2736 = ((_2727 * _2727) * (_2732 + (-1.0))) + 1.0;
    float _2743 = exp2(log2(1.0 - (isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0)))) * 5.0);
    float _2750 = 1.0 - _2709;
    float _2760 = (0.5 / (((_2638 * ((_2723 * _2750) + _2709)) + 9.9999999392252902907785028219223e-09) + (((_2638 * _2750) + _2709) * _2723))) * _2723;
    float _4902 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
    float _2762 = (isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0))) * (_2732 / ((_2736 * _2736) * 3.141590118408203125));
    float _2772 = (((((_2743 * _2660) + _1022) * cbLight._m0[_2697].x) * _2762) * _2385) + ((((cbLight._m0[_2609].x * _2351) * ((_2659 * _2660) + _1022)) * _2683) * _2398);
    float _2773 = (((((_2743 * _2662) + _1023) * cbLight._m0[_2697].y) * _2762) * _2385) + ((((cbLight._m0[_2609].y * _2353) * ((_2659 * _2662) + _1023)) * _2683) * _2398);
    float _2774 = (((((_2743 * _2663) + _1024) * cbLight._m0[_2697].z) * _2762) * _2385) + ((((cbLight._m0[_2609].z * _2355) * ((_2659 * _2663) + _1024)) * _2683) * _2398);
    float _2830;
    float _2832;
    float _2834;
    if (_2438)
    {
        _2830 = _2772;
        _2832 = _2773;
        _2834 = _2774;
    }
    else
    {
        uint _2836 = _2362 + 2u;
        uint _2840 = _2362 + 10u;
        float _2854 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2836].w)) * _904) * 0.949999988079071044921875);
        float _2855 = _2854 * _2854;
        float _2856 = cbLight._m0[_2836].x + _695;
        float _2857 = cbLight._m0[_2836].y + _696;
        float _2858 = cbLight._m0[_2836].z + _697;
        float _2862 = inversesqrt(dot(vec3(_2856, _2857, _2858), vec3(_2856, _2857, _2858)));
        float _2863 = _2862 * _2856;
        float _2864 = _2862 * _2857;
        float _2865 = _2862 * _2858;
        float _2866 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_2836].xyz));
        float _4913 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
        float _2869 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
        float _2870 = dot(vec3(_669, _670, _671), vec3(_2863, _2864, _2865));
        float _4924 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
        float _2873 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
        float _2874 = dot(vec3(cbLight._m0[_2836].xyz), vec3(_2863, _2864, _2865));
        float _4935 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
        float _2878 = _2855 * _2855;
        float _2882 = ((_2873 * _2873) * (_2878 + (-1.0))) + 1.0;
        float _2889 = exp2(log2(1.0 - (isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0)))) * 5.0);
        float _2896 = 1.0 - _2855;
        float _2906 = (0.5 / (((_2638 * ((_2869 * _2896) + _2855)) + 9.9999999392252902907785028219223e-09) + (((_2638 * _2896) + _2855) * _2869))) * _2869;
        float _4946 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        float _2908 = (isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0))) * (_2878 / ((_2882 * _2882) * 3.141590118408203125));
        float _2909 = isnan(1.0) ? _2377 : (isnan(_2377) ? 1.0 : min(_2377, 1.0));
        _2830 = (((((_2889 * _2660) + _1022) * cbLight._m0[_2840].x) * _2908) * _2909) + _2772;
        _2832 = (((((_2889 * _2662) + _1023) * cbLight._m0[_2840].y) * _2908) * _2909) + _2773;
        _2834 = (((((_2889 * _2663) + _1024) * cbLight._m0[_2840].z) * _2908) * _2909) + _2774;
    }
    float _2940;
    float _2942;
    float _2944;
    if (_2547)
    {
        _2940 = _2830;
        _2942 = _2832;
        _2944 = _2834;
    }
    else
    {
        uint _2951 = _2362 + 3u;
        uint _2955 = _2362 + 11u;
        float _2969 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2951].w)) * _904) * 0.949999988079071044921875);
        float _2970 = _2969 * _2969;
        float _2971 = cbLight._m0[_2951].x + _695;
        float _2972 = cbLight._m0[_2951].y + _696;
        float _2973 = cbLight._m0[_2951].z + _697;
        float _2977 = inversesqrt(dot(vec3(_2971, _2972, _2973), vec3(_2971, _2972, _2973)));
        float _2978 = _2977 * _2971;
        float _2979 = _2977 * _2972;
        float _2980 = _2977 * _2973;
        float _2981 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_2951].xyz));
        float _4962 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
        float _2984 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
        float _2985 = dot(vec3(_669, _670, _671), vec3(_2978, _2979, _2980));
        float _4973 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
        float _2988 = isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0));
        float _2989 = dot(vec3(cbLight._m0[_2951].xyz), vec3(_2978, _2979, _2980));
        float _4984 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
        float _2993 = _2970 * _2970;
        float _2997 = ((_2988 * _2988) * (_2993 + (-1.0))) + 1.0;
        float _3004 = exp2(log2(1.0 - (isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0)))) * 5.0);
        float _3011 = 1.0 - _2970;
        float _3021 = (0.5 / (((_2638 * ((_2984 * _3011) + _2970)) + 9.9999999392252902907785028219223e-09) + (((_2638 * _3011) + _2970) * _2984))) * _2984;
        float _4995 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
        float _3023 = (isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0))) * (_2993 / ((_2997 * _2997) * 3.141590118408203125));
        float _3024 = isnan(1.0) ? _2378 : (isnan(_2378) ? 1.0 : min(_2378, 1.0));
        _2940 = (((((_3004 * _2660) + _1022) * cbLight._m0[_2955].x) * _3023) * _3024) + _2830;
        _2942 = (((((_3004 * _2662) + _1023) * cbLight._m0[_2955].y) * _3023) * _3024) + _2832;
        _2944 = (((((_3004 * _2663) + _1024) * cbLight._m0[_2955].z) * _3023) * _3024) + _2834;
    }
    float _3089;
    float _3091;
    float _3093;
    float _3095;
    float _3097;
    float _3099;
    if (_2360.y == 0u)
    {
        uvec4 _3045 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3046 = _3045.x;
        uint _3057 = uint((float(_3045.y) * floor(float(uint(cbSceneParam._m0[85u].y * _827) / _3046))) + floor(float(uint(cbSceneParam._m0[85u].x * _826) / _3046)));
        float _3067 = (log2(_2138 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3068 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
        uint _3071 = uint(isnan(14.0) ? _3068 : (isnan(_3068) ? 14.0 : min(_3068, 14.0)));
        uvec4 _3076 = texelFetch(g_lightClusterGridBuffer, int(((_3071 << 2u) + (_3057 << 6u)) >> 2u));
        uint _3077 = _3076.x;
        uint _3078 = _3045.z;
        float _3182;
        float _3184;
        float _3186;
        float _3188;
        float _3190;
        float _3192;
        if (((((1u << ((_3078 >> 4u) & 15u)) + 4294967295u) & _3077) == 0u) || ((_3078 & 240u) == 0u))
        {
            _3182 = 0.0;
            _3184 = 0.0;
            _3186 = 0.0;
            _3188 = 0.0;
            _3190 = 0.0;
            _3192 = 0.0;
        }
        else
        {
            float _3183;
            float _3185;
            float _3187;
            float _3189;
            float _3191;
            float _3193;
            float _3343 = 0.0;
            float _3344 = 0.0;
            float _3345 = 0.0;
            float _3346 = 0.0;
            float _3347 = 0.0;
            float _3348 = 0.0;
            uint _3349 = 0u;
            uint _3358;
            bool _3359;
            for (;;)
            {
                _3358 = texelFetch(g_lightClassification, int((((_3071 << 5u) + (_3057 << 9u)) + (_3349 << 2u)) >> 2u)).x;
                _3359 = _3358 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3359)
                {
                    frontier_phi_73_pred = _3348;
                    frontier_phi_73_pred_1 = _3347;
                    frontier_phi_73_pred_2 = _3346;
                    frontier_phi_73_pred_3 = _3345;
                    frontier_phi_73_pred_4 = _3344;
                    frontier_phi_73_pred_5 = _3343;
                }
                else
                {
                    float _3488;
                    float _3489;
                    float _3490;
                    float _3491;
                    float _3492;
                    float _3493;
                    uint _3494;
                    _3488 = _3343;
                    _3489 = _3344;
                    _3490 = _3345;
                    _3491 = _3346;
                    _3492 = _3347;
                    _3493 = _3348;
                    _3494 = _3358;
                    float _3415;
                    float _3416;
                    float _3417;
                    float _3418;
                    float _3419;
                    float _3420;
                    for (;;)
                    {
                        uint _3498 = uint(findLSB(_3494)) + (_3349 << 5u);
                        uint _3495 = (_3494 + 4294967295u) & _3494;
                        uint _3500 = _3498 * 48u;
                        vec4 _3514 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3500)).x, texelFetch(g_PointLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3500 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3500 + 3u)).x));
                        uint _3520 = (_3498 * 48u) + 4u;
                        vec4 _3533 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3520)).x, texelFetch(g_PointLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3520 + 3u)).x));
                        uint _3539 = (_3498 * 48u) + 8u;
                        vec3 _3550 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3539)).x, texelFetch(g_PointLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3539 + 2u)).x));
                        float _3554 = _3514.x - _2136;
                        float _3555 = _3514.y - _2137;
                        float _3556 = _3514.z - _2138;
                        float _3557 = dot(vec3(_3554, _3555, _3556), vec3(_3554, _3555, _3556));
                        float _3560 = inversesqrt(_3557);
                        float _3561 = _3560 * _3554;
                        float _3562 = _3560 * _3555;
                        float _3563 = _3560 * _3556;
                        float _3564 = dot(vec3(_849, _852, _855), vec3(_3561, _3562, _3563));
                        float _3569 = 1.0 - (_3557 * _3514.w);
                        float _5021 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                        float _3570 = isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0));
                        float _3571 = sqrt(_3557) * _3533.w;
                        float _3574 = 1.39999997615814208984375 / (_3571 + 1.39999997615814208984375);
                        float _3575 = _3574 * _3574;
                        float _3578 = ((1.0 - _3575) * _3564) + _3575;
                        float _3581 = _3571 * _3571;
                        float _3584 = ((isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0))) * _3570) / ((_3581 * 0.699999988079071044921875) + 1.0);
                        float _3588 = (-0.0) - _2136;
                        float _3589 = (-0.0) - _2137;
                        float _3590 = (-0.0) - _2138;
                        float _3594 = inversesqrt(dot(vec3(_3588, _3589, _3590), vec3(_3588, _3589, _3590)));
                        float _3595 = _3594 * _3588;
                        float _3596 = _3594 * _3589;
                        float _3597 = _3594 * _3590;
                        float _3604 = exp2(log2(1.0 / ((_3581 * 3.5) + 5.0)) * 0.25);
                        float _3605 = 1.0 - _1046;
                        float _3612 = sqrt(1.0 - ((1.0 - (_3605 * _3605)) * (1.0 - (_3604 * _3604))));
                        float _3613 = _3612 * _3612;
                        float _3614 = _3613 * _3613;
                        float _3615 = _3595 + _3561;
                        float _3616 = _3596 + _3562;
                        float _3617 = _3597 + _3563;
                        float _3621 = inversesqrt(dot(vec3(_3615, _3616, _3617), vec3(_3615, _3616, _3617)));
                        float _3625 = dot(vec3(_849, _852, _855), vec3(_3595, _3596, _3597));
                        float _5037 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                        float _3628 = isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0));
                        float _3629 = dot(vec3(_849, _852, _855), vec3(_3621 * _3615, _3621 * _3616, _3621 * _3617));
                        float _5048 = isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0));
                        float _3632 = isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0));
                        float _3636 = ((_3632 * _3632) * (_3614 + (-1.0))) + 1.0;
                        float _3637 = _3574 * _3613;
                        float _3638 = _3637 * _3637;
                        float _3641 = ((1.0 - _3638) * _3564) + _3638;
                        float _5059 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                        float _3642 = isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0));
                        float _3643 = 1.0 - _3613;
                        float _3653 = (0.5 / (((_3642 * ((_3628 * _3643) + _3613)) + 9.9999999392252902907785028219223e-09) + (((_3642 * _3643) + _3613) * _3628))) * _3642;
                        float _5070 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                        float _3664 = (((_3614 * 3.1415927410125732421875) * (isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0)))) / ((_3636 * _3636) * ((_3581 * 2.1991131305694580078125) + 3.141590118408203125))) * _3570;
                        _3418 = (_3584 * _3533.x) + _3491;
                        _3419 = (_3584 * _3533.y) + _3492;
                        _3420 = (_3584 * _3533.z) + _3493;
                        _3415 = (_3664 * _3550.x) + _3488;
                        _3416 = (_3664 * _3550.y) + _3489;
                        _3417 = (_3664 * _3550.z) + _3490;
                        if (_3495 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3488 = _3415;
                            _3489 = _3416;
                            _3490 = _3417;
                            _3491 = _3418;
                            _3492 = _3419;
                            _3493 = _3420;
                            _3494 = _3495;
                        }
                    }
                    frontier_phi_73_pred = _3420;
                    frontier_phi_73_pred_1 = _3419;
                    frontier_phi_73_pred_2 = _3418;
                    frontier_phi_73_pred_3 = _3417;
                    frontier_phi_73_pred_4 = _3416;
                    frontier_phi_73_pred_5 = _3415;
                }
                _3193 = frontier_phi_73_pred;
                _3191 = frontier_phi_73_pred_1;
                _3189 = frontier_phi_73_pred_2;
                _3187 = frontier_phi_73_pred_3;
                _3185 = frontier_phi_73_pred_4;
                _3183 = frontier_phi_73_pred_5;
                uint _3350 = _3349 + 1u;
                if (_3350 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3343 = _3183;
                    _3344 = _3185;
                    _3345 = _3187;
                    _3346 = _3189;
                    _3347 = _3191;
                    _3348 = _3193;
                    _3349 = _3350;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3182 = _3183;
            _3184 = _3185;
            _3186 = _3187;
            _3188 = _3189;
            _3190 = _3191;
            _3192 = _3193;
        }
        uvec4 _3196 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3197 = _3196.z;
        uint _3199 = (_3197 >> 8u) & 15u;
        float _3311;
        float _3313;
        float _3315;
        float _3317;
        float _3319;
        float _3321;
        if (((4294967295u << _3199) & _3077) == 0u)
        {
            _3311 = _3182;
            _3313 = _3184;
            _3315 = _3186;
            _3317 = _3188;
            _3319 = _3190;
            _3321 = _3192;
        }
        else
        {
            float _3336 = inversesqrt(dot(vec3(_2136, _2137, _2138), vec3(_2136, _2137, _2138)));
            float _3337 = _3336 * _2136;
            float _3338 = _3336 * _2137;
            float _3339 = _3336 * _2138;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3199 < ((_3197 >> 12u) & 15u))
            {
                float _3312;
                float _3314;
                float _3316;
                float _3318;
                float _3320;
                float _3322;
                float _3471 = _3182;
                float _3472 = _3184;
                float _3473 = _3186;
                float _3474 = _3188;
                float _3475 = _3190;
                float _3476 = _3192;
                uint _3477 = _3199;
                uint _3486;
                bool _3487;
                for (;;)
                {
                    _3486 = texelFetch(g_lightClassification, int((((_3071 << 5u) + (_3057 << 9u)) + (_3477 << 2u)) >> 2u)).x;
                    _3487 = _3486 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3487)
                    {
                        frontier_phi_84_pred = _3475;
                        frontier_phi_84_pred_1 = _3474;
                        frontier_phi_84_pred_2 = _3473;
                        frontier_phi_84_pred_3 = _3472;
                        frontier_phi_84_pred_4 = _3471;
                        frontier_phi_84_pred_5 = _3476;
                    }
                    else
                    {
                        float _3678;
                        float _3679;
                        float _3680;
                        float _3681;
                        float _3682;
                        float _3683;
                        float _3973;
                        float _3974;
                        float _3975;
                        float _3976;
                        float _3977;
                        float _3978;
                        float _3691 = _3471;
                        float _3692 = _3472;
                        float _3693 = _3473;
                        float _3694 = _3474;
                        float _3695 = _3475;
                        float _3696 = _3476;
                        uint _3697 = _3486;
                        uint _3698;
                        vec4 _3723;
                        float _3724;
                        vec4 _3739;
                        vec3 _3751;
                        vec4 _3766;
                        vec4 _3782;
                        float _3829;
                        bool _3830;
                        for (;;)
                        {
                            uint _3708 = ((_3477 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3697));
                            _3698 = (_3697 + 4294967295u) & _3697;
                            uint _3710 = _3708 * 40u;
                            _3723 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3710)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 3u)).x));
                            _3724 = _3723.w;
                            uint _3726 = (_3708 * 40u) + 4u;
                            _3739 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3726)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 3u)).x));
                            uint _3741 = (_3708 * 40u) + 8u;
                            _3751 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3741)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 2u)).x));
                            uint _3753 = (_3708 * 40u) + 16u;
                            _3766 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3753)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 3u)).x));
                            uint _3769 = (_3708 * 40u) + 20u;
                            _3782 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3769)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 3u)).x));
                            uint _3785 = (_3708 * 40u) + 24u;
                            vec4 _3798 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3785)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 3u)).x));
                            uint _3804 = (_3708 * 40u) + 28u;
                            vec4 _3817 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3804)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 3u)).x));
                            _3829 = fma(_2138, _3817.z, fma(_2137, _3817.y, _3817.x * _2136)) + _3817.w;
                            _3830 = !((fma(_2138, _3798.z, fma(_2137, _3798.y, _3798.x * _2136)) + _3798.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3830)
                            {
                                float _3857 = _3723.x - _2136;
                                float _3858 = _3723.y - _2137;
                                float _3859 = _3723.z - _2138;
                                float _3860 = dot(vec3(_3857, _3858, _3859), vec3(_3857, _3858, _3859));
                                float _3863 = inversesqrt(_3860);
                                float _3864 = _3863 * _3857;
                                float _3865 = _3863 * _3858;
                                float _3866 = _3863 * _3859;
                                float _3870 = 1.0 - (_3860 / (_3724 * _3724));
                                float _5081 = isnan(0.0) ? _3870 : (isnan(_3870) ? 0.0 : max(_3870, 0.0));
                                float _3871 = isnan(1.0) ? _5081 : (isnan(_5081) ? 1.0 : min(_5081, 1.0));
                                float _3875 = sqrt(_3860) * _3739.w;
                                float _3877 = 1.39999997615814208984375 / (_3875 + 1.39999997615814208984375);
                                float _3878 = _3877 * _3877;
                                float _3881 = ((1.0 - _3878) * dot(vec3(_3864, _3865, _3866), vec3(_849, _852, _855))) + _3878;
                                float _3884 = _3875 * _3875;
                                float _3888 = (fma(_2138, _3766.z, fma(_2137, _3766.y, _3766.x * _2136)) + _3766.w) / _3829;
                                float _3889 = (fma(_2138, _3782.z, fma(_2137, _3782.y, _3782.x * _2136)) + _3782.w) / _3829;
                                float _3893 = 1.0 - dot(vec2(_3888, _3889), vec2(_3888, _3889));
                                float _5097 = isnan(0.0) ? _3893 : (isnan(_3893) ? 0.0 : max(_3893, 0.0));
                                float _3894 = isnan(1.0) ? _5097 : (isnan(_5097) ? 1.0 : min(_5097, 1.0));
                                float _3895 = _3894 * (((isnan(0.0) ? _3881 : (isnan(_3881) ? 0.0 : max(_3881, 0.0))) * _3871) / ((_3884 * 0.699999988079071044921875) + 1.0));
                                float _3907 = exp2(log2(1.0 / ((_3884 * 3.5) + 5.0)) * 0.25);
                                float _3908 = 1.0 - _1046;
                                float _3915 = sqrt(1.0 - ((1.0 - (_3908 * _3908)) * (1.0 - (_3907 * _3907))));
                                float _3916 = _3915 * _3915;
                                float _3917 = _3916 * _3916;
                                float _3918 = _3864 - _3337;
                                float _3919 = _3865 - _3338;
                                float _3920 = _3866 - _3339;
                                float _3924 = inversesqrt(dot(vec3(_3918, _3919, _3920), vec3(_3918, _3919, _3920)));
                                float _3928 = dot(vec3(_849, _852, _855), vec3((-0.0) - _3337, (-0.0) - _3338, (-0.0) - _3339));
                                float _5108 = isnan(0.0) ? _3928 : (isnan(_3928) ? 0.0 : max(_3928, 0.0));
                                float _3931 = isnan(1.0) ? _5108 : (isnan(_5108) ? 1.0 : min(_5108, 1.0));
                                float _3932 = dot(vec3(_849, _852, _855), vec3(_3924 * _3918, _3924 * _3919, _3924 * _3920));
                                float _5119 = isnan(0.0) ? _3932 : (isnan(_3932) ? 0.0 : max(_3932, 0.0));
                                float _3935 = isnan(1.0) ? _5119 : (isnan(_5119) ? 1.0 : min(_5119, 1.0));
                                float _3939 = ((_3935 * _3935) * (_3917 + (-1.0))) + 1.0;
                                float _3940 = _3877 * _3916;
                                float _3941 = _3940 * _3940;
                                float _3947 = ((1.0 - _3941) * dot(vec3(_849, _852, _855), vec3(_3864, _3865, _3866))) + _3941;
                                float _5130 = isnan(0.0) ? _3947 : (isnan(_3947) ? 0.0 : max(_3947, 0.0));
                                float _3948 = isnan(1.0) ? _5130 : (isnan(_5130) ? 1.0 : min(_5130, 1.0));
                                float _3949 = 1.0 - _3916;
                                float _3959 = (0.5 / (((_3948 * ((_3931 * _3949) + _3916)) + 9.9999999392252902907785028219223e-09) + (((_3948 * _3949) + _3916) * _3931))) * _3948;
                                float _5141 = isnan(0.0) ? _3959 : (isnan(_3959) ? 0.0 : max(_3959, 0.0));
                                float _3969 = (_3894 * _3871) * (((_3917 * 3.1415927410125732421875) * (isnan(1.0) ? _5141 : (isnan(_5141) ? 1.0 : min(_5141, 1.0)))) / ((_3939 * _3939) * ((_3884 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3895 * _3739.y;
                                frontier_phi_90_pred_1 = _3895 * _3739.x;
                                frontier_phi_90_pred_2 = _3969 * _3751.z;
                                frontier_phi_90_pred_3 = _3969 * _3751.y;
                                frontier_phi_90_pred_4 = _3969 * _3751.x;
                                frontier_phi_90_pred_5 = _3895 * _3739.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3977 = frontier_phi_90_pred;
                            _3976 = frontier_phi_90_pred_1;
                            _3975 = frontier_phi_90_pred_2;
                            _3974 = frontier_phi_90_pred_3;
                            _3973 = frontier_phi_90_pred_4;
                            _3978 = frontier_phi_90_pred_5;
                            _3681 = _3976 + _3694;
                            _3682 = _3977 + _3695;
                            _3683 = _3978 + _3696;
                            _3678 = _3973 + _3691;
                            _3679 = _3974 + _3692;
                            _3680 = _3975 + _3693;
                            if (_3698 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3691 = _3678;
                                _3692 = _3679;
                                _3693 = _3680;
                                _3694 = _3681;
                                _3695 = _3682;
                                _3696 = _3683;
                                _3697 = _3698;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3682;
                        frontier_phi_84_pred_1 = _3681;
                        frontier_phi_84_pred_2 = _3680;
                        frontier_phi_84_pred_3 = _3679;
                        frontier_phi_84_pred_4 = _3678;
                        frontier_phi_84_pred_5 = _3683;
                    }
                    _3320 = frontier_phi_84_pred;
                    _3318 = frontier_phi_84_pred_1;
                    _3316 = frontier_phi_84_pred_2;
                    _3314 = frontier_phi_84_pred_3;
                    _3312 = frontier_phi_84_pred_4;
                    _3322 = frontier_phi_84_pred_5;
                    uint _3478 = _3477 + 1u;
                    if (_3478 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3471 = _3312;
                        _3472 = _3314;
                        _3473 = _3316;
                        _3474 = _3318;
                        _3475 = _3320;
                        _3476 = _3322;
                        _3477 = _3478;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3322;
                frontier_phi_65_66_ladder_1 = _3318;
                frontier_phi_65_66_ladder_2 = _3320;
                frontier_phi_65_66_ladder_3 = _3314;
                frontier_phi_65_66_ladder_4 = _3312;
                frontier_phi_65_66_ladder_5 = _3316;
            }
            else
            {
                frontier_phi_65_66_ladder = _3192;
                frontier_phi_65_66_ladder_1 = _3188;
                frontier_phi_65_66_ladder_2 = _3190;
                frontier_phi_65_66_ladder_3 = _3184;
                frontier_phi_65_66_ladder_4 = _3182;
                frontier_phi_65_66_ladder_5 = _3186;
            }
            _3311 = frontier_phi_65_66_ladder_4;
            _3313 = frontier_phi_65_66_ladder_3;
            _3315 = frontier_phi_65_66_ladder_5;
            _3317 = frontier_phi_65_66_ladder_1;
            _3319 = frontier_phi_65_66_ladder_2;
            _3321 = frontier_phi_65_66_ladder;
        }
        float _3326 = isnan(1.0) ? _1036 : (isnan(_1036) ? 1.0 : min(_1036, 1.0));
        _3089 = (_3326 * _3317) + _2602;
        _3091 = (_3326 * _3319) + _2604;
        _3093 = (_3326 * _3321) + _2606;
        _3095 = ((_3311 * _1022) * _3326) + _2940;
        _3097 = ((_3313 * _1023) * _3326) + _2942;
        _3099 = ((_3315 * _1024) * _3326) + _2944;
    }
    else
    {
        _3089 = _2602;
        _3091 = _2604;
        _3093 = _2606;
        _3095 = _2940;
        _3097 = _2942;
        _3099 = _2944;
    }
    uint _3105 = _929 + uint(cbMatDynParam._m0[0u].w);
    float _3111 = cbInstanceData._m0[_3105].x * ((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _711) + cbMatDynParam._m0[7u].x) + (((_751 - (_751 * _677)) + (cbMatDynParam._m0[11u].x * _782)) * cbMatDynParam._m0[9u].x));
    float _3112 = cbInstanceData._m0[_3105].y * ((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _711) + cbMatDynParam._m0[7u].y) + (((_753 - (_753 * _677)) + (cbMatDynParam._m0[11u].y * _782)) * cbMatDynParam._m0[9u].y));
    float _3113 = cbInstanceData._m0[_3105].z * ((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _711) + cbMatDynParam._m0[7u].z) + (((_755 - (_755 * _677)) + (cbMatDynParam._m0[11u].z * _782)) * cbMatDynParam._m0[9u].z));
    float _5157 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _5168 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _5179 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _5190 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _3131 = (((isnan(1.0) ? _5157 : (isnan(_5157) ? 1.0 : min(_5157, 1.0))) * (_3089 + ((isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))) * _1036))) + ((_3095 + ((isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0))) * _1866)) * cbPerFrame._m0[3u].x)) + _3111;
    float _3133 = (_3112 + ((_3097 + ((isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0))) * _1866)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5168 : (isnan(_5168) ? 1.0 : min(_5168, 1.0))) * (_3091 + ((isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))) * _1036)));
    float _3135 = (_3113 + ((_3099 + ((isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0))) * _1866)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5179 : (isnan(_5179) ? 1.0 : min(_5179, 1.0))) * (_3093 + ((isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))) * _1036)));
    float _3136 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
    float _3137 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
    float _3138 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
    float _3143 = cbMatDynParam._m0[12u].y - (cbMatDynParam._m0[12u].y * ((((isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) - _737) * _711) + _737));
    float _3148 = cbInstanceData._m0[_928 + 6u].w * (isnan(1.0) ? _5190 : (isnan(_5190) ? 1.0 : min(_5190, 1.0)));
    float _3153 = _826 / cbSceneParam._m0[86u].x;
    float _3154 = _827 / cbSceneParam._m0[86u].y;
    vec4 _3168 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3153, _3154, (log2((isnan(cbSceneParam._m0[77u].w) ? _808 : (isnan(_808) ? cbSceneParam._m0[77u].w : min(_808, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3170 = _3168.x;
    float _3171 = _3168.y;
    float _3172 = _3168.z;
    float _3173 = _3168.w;
    float _3244;
    float _3246;
    float _3248;
    float _3250;
    if (_808 > cbSceneParam._m0[78u].w)
    {
        float _3207 = isnan(_808) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _808 : min(cbSceneParam._m0[80u].w, _808));
        float _3208 = _3207 / _808;
        float _3219 = _3208 * _299;
        float _3220 = _300 * _3208;
        float _3221 = (-0.0) - _3220;
        float _3222 = _3208 * _301;
        float _3224 = (cbSceneParam._m0[77u].w * _3221) / _3207;
        float _3225 = _3224 + cbSceneParam._m0[79u].w;
        float _3226 = cbSceneParam._m0[79u].w - _3220;
        float _3232 = sqrt(((_3219 * _3219) + (_3220 * _3220)) + (_3222 * _3222));
        float _3235 = (1.0 - (cbSceneParam._m0[77u].w / _3207)) * _3232;
        float _3240 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3242 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3428;
        if (abs((_3221 - _3224) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3428 = ((((_3225 > 0.0) ? exp2(_3240 * _3225) : (2.0 - exp2(_3242 * _3225))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3235;
        }
        else
        {
            float _3372 = 1.0 / cbSceneParam._m0[80u].x;
            float _3373 = isnan(_3226) ? _3225 : (isnan(_3225) ? _3226 : max(_3225, _3226));
            float _3374 = isnan(_3226) ? _3225 : (isnan(_3225) ? _3226 : min(_3225, _3226));
            float _3383 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : min(_3373, 0.0));
            float _3384 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : min(_3374, 0.0));
            _3428 = ((abs(_3232 / _3221) * cbSceneParam._m0[80u].y) * ((((_3383 - _3384) * 2.0) - ((exp2(_3240 * (isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0)))) - exp2(_3240 * (isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0))))) * _3372)) - ((exp2(_3242 * _3383) - exp2(_3242 * _3384)) * _3372))) + (_3235 * cbSceneParam._m0[80u].z);
        }
        vec4 _3430 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3153, _3154, 1.0), 0.0);
        float _3439 = exp2((_3428 * (-1.44269502162933349609375)) * (1.0 - _3430.w));
        float _3440 = log2(_3439);
        float _3456 = log2(_3173);
        _3244 = (exp2(_3456 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3440 * cbSceneParam._m0[78u].x)) * _3430.x) / cbSceneParam._m0[78u].x)) + _3170;
        _3246 = (exp2(_3456 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3440 * cbSceneParam._m0[78u].y)) * _3430.y) / cbSceneParam._m0[78u].y)) + _3171;
        _3248 = (exp2(_3456 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3440 * cbSceneParam._m0[78u].z)) * _3430.z) / cbSceneParam._m0[78u].z)) + _3172;
        _3250 = _3439 * _3173;
    }
    else
    {
        _3244 = _3170;
        _3246 = _3171;
        _3248 = _3172;
        _3250 = _3173;
    }
    bool _3466;
    vec4 _3260;
    vec4 _3282;
    float _3284;
    float _3288;
    float _3289;
    float _3290;
    float _3293;
    float _3296;
    float _3299;
    float _3300;
    bool _3310;
    for (;;)
    {
        _3260 = cbMatDynParam._m0[0u];
        float _3262 = roundEven(_3260.y);
        bool _3263 = _3262 == 3.0;
        float _3264 = log2(_3250);
        float _3268 = exp2(_3264 * cbSceneParam._m0[78u].x);
        float _3269 = exp2(_3264 * cbSceneParam._m0[78u].y);
        float _3270 = exp2(_3264 * cbSceneParam._m0[78u].z);
        float _3271 = _3268 * _3136;
        float _3272 = _3269 * _3137;
        float _3273 = _3270 * _3138;
        float _3280 = _815 + (-0.5);
        _3282 = cbMtdParam._m0[1u];
        _3284 = _3282.y * _3280;
        float _3287 = (_3262 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3288 = _3287 * (_3263 ? _3271 : (_3271 + (cbSceneParam._m0[72u].w * _3244)));
        _3289 = _3287 * (_3263 ? _3272 : (_3272 + (cbSceneParam._m0[72u].w * _3246)));
        _3290 = _3287 * (_3263 ? _3273 : (_3273 + (cbSceneParam._m0[72u].w * _3248)));
        _3293 = ((_3143 * _3111) * _3268) * _3287;
        _3296 = ((_3143 * _3112) * _3269) * _3287;
        _3299 = ((_3143 * _3113) * _3270) * _3287;
        _3300 = _3280 * 0.999000012874603271484375;
        _3310 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3310)
        {
            if ((cbInstanceData._m0[_928 + 7u].x + _3300) < 0.5)
            {
                _3466 = true;
                break;
            }
        }
        uint _3407 = _929 + uint(_3260.w);
        if ((cbInstanceData._m0[_3407].w < 1.0) && ((cbInstanceData._m0[_3407].w + _3300) < 0.5))
        {
            _3466 = true;
            break;
        }
        if ((_3284 + _489) < _3282.x)
        {
            _3466 = true;
            break;
        }
        _3466 = false;
        break;
    }
    float _3669;
    if (_3466)
    {
        discard_state = true;
        _3669 = 0.0;
    }
    else
    {
        _3669 = _3148;
    }
    SV_Target.x = _3288;
    SV_Target.y = _3289;
    SV_Target.z = _3290;
    SV_Target.w = _3669;
    SV_Target_1.x = _3293;
    SV_Target_1.y = _3296;
    SV_Target_1.z = _3299;
    SV_Target_1.w = _3148;
    discard_exit();
}


