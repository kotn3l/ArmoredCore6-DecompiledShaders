#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1136;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _228;
    float _229;
    float _230;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _228 = (-0.0) - _214;
        _229 = (-0.0) - _215;
        _230 = (-0.0) - _216;
    }
    else
    {
        _228 = _214;
        _229 = _215;
        _230 = _216;
    }
    vec4 _244 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _249 = _244.z;
    float _255 = exp2(log2(_249 * 22.0) * 260.0);
    float _256 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _257 = isnan(1.0) ? _256 : (isnan(_256) ? 1.0 : min(_256, 1.0));
    vec4 _271 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _282 = cbMtdParam._m0[10u].x * _271.x;
    float _283 = cbMtdParam._m0[10u].y * _271.y;
    float _284 = cbMtdParam._m0[10u].z * _271.z;
    vec4 _296 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _331 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _339 = (((((cbMtdParam._m0[9u].x * _296.x) - _282) * _257) + _282) * 4.55000019073486328125) * _331.x;
    float _341 = (((((cbMtdParam._m0[9u].y * _296.y) - _283) * _257) + _283) * 4.55000019073486328125) * _331.y;
    float _343 = (((((cbMtdParam._m0[9u].z * _296.z) - _284) * _257) + _284) * 4.55000019073486328125) * _331.z;
    float _344 = _331.w * _296.w;
    float _371 = (((texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _257) + cbMtdParam._m0[15u].y;
    vec4 _384 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _386 = _384.x;
    float _387 = _384.y;
    float _393 = cbMtdParam._m0[13u].y + _384.z;
    vec4 _405 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _422 = (((_257 * (_249 + (-0.5))) + 0.5) * 2.0) * ((((_405.z - _393) + cbMtdParam._m0[13u].x) * _257) + _393);
    float _426 = (_244.x * 2.0) + (-1.0);
    float _428 = (_244.y * 2.0) + (-1.0);
    float _429 = dot(vec2(_426, _428), vec2(_426, _428));
    float _3506 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _434 = sqrt(1.0 - (isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))));
    float _447 = ((((((_405.x - _386) * _257) + _386) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _426;
    float _448 = ((((((_405.y - _387) * _257) + _387) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _428;
    float _451 = fma(_434, _228, fma(_448, _220 * TANGENT.x, (_206 * _198) * _447));
    float _454 = fma(_434, _229, fma(_448, _220 * TANGENT.y, (_206 * _199) * _447));
    float _457 = fma(_434, _230, fma(_448, _220 * TANGENT.z, (_206 * _200) * _447));
    float _461 = inversesqrt(dot(vec3(_451, _454, _457), vec3(_451, _454, _457)));
    float _462 = _461 * _451;
    float _463 = _461 * _454;
    float _464 = _461 * _457;
    float _3517 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _465 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    float _3528 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _466 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
    float _3539 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _467 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
    float _3550 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _468 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
    float _3561 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _469 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    float _3572 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _470 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
    float _486 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _527 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _537 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _527);
    float _538 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _527);
    float _539 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _527);
    float _543 = inversesqrt(dot(vec3(_537, _538, _539), vec3(_537, _538, _539)));
    float _544 = _537 * _543;
    float _545 = _538 * _543;
    float _546 = _539 * _543;
    float _552 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _553 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _555 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _557 = _555.w;
    float _576 = fma(_464, cbSceneParam._m0[5u].z, fma(_463, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _462));
    float _579 = fma(_464, cbSceneParam._m0[6u].z, fma(_463, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _462));
    float _582 = fma(_464, cbSceneParam._m0[7u].z, fma(_463, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _462));
    vec4 _584 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _586 = _584.x;
    float _598 = (((_584.y - _466) + (_584.w * _466)) * cbMtdParam._m0[3u].x) + _466;
    float _615 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_586 * _586)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _623 = (((cbMatDynParam._m0[15u].x - _470) * cbMatDynParam._m0[15u].w) * _615) + _470;
    float _631 = ((_615 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _598)) + _598;
    uint _655 = uint(roundEven(NORMAL.w)) * 13u;
    uint _657 = (_655 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _663 = (cbMtdParam._m0[0u].x * _467) * cbInstanceData._m0[_657].x;
    float _664 = (cbMtdParam._m0[0u].y * _468) * cbInstanceData._m0[_657].y;
    float _665 = (cbMtdParam._m0[0u].z * _469) * cbInstanceData._m0[_657].z;
    float _3583 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _666 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
    float _3594 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _667 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _3605 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _668 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
    vec4 _669 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _674 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _685 = (((_674.x - _623) + (_674.w * _623)) * cbMtdParam._m0[3u].x) + _623;
    float _698 = (cbMtdParam._m0[3u].x * (((_666 * _557) - _666) + _669.x)) + _666;
    float _699 = (cbMtdParam._m0[3u].x * (((_667 * _557) - _667) + _669.y)) + _667;
    float _700 = (cbMtdParam._m0[3u].x * (((_668 * _557) - _668) + _669.z)) + _668;
    vec4 _701 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _714 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_623 * (_467 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_623 * (_468 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_623 * (_469 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _701.z;
    float _718 = _714 * cbMatDynParam._m0[13u].w;
    float _728 = (_718 * (cbMatDynParam._m0[13u].x - _698)) + _698;
    float _729 = (_718 * (cbMatDynParam._m0[13u].y - _699)) + _699;
    float _730 = (_718 * (cbMatDynParam._m0[13u].z - _700)) + _700;
    float _738 = ((_714 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _685)) + _685;
    float _739 = 1.0 - _738;
    float _740 = _739 * _728;
    float _741 = _739 * _729;
    float _742 = _739 * _730;
    float _746 = (_728 + (-0.039999999105930328369140625)) * _738;
    float _747 = (_729 + (-0.039999999105930328369140625)) * _738;
    float _748 = (_730 + (-0.039999999105930328369140625)) * _738;
    float _749 = _746 + 0.039999999105930328369140625;
    float _750 = _747 + 0.039999999105930328369140625;
    float _751 = _748 + 0.039999999105930328369140625;
    vec4 _760 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _552, cbSceneParam._m0[86u].y * _553));
    float _763 = _760.x * TEXCOORD_4;
    float _764 = dot(vec3(_462, _463, _464), vec3(_544, _545, _546));
    float _767 = _764 * 2.0;
    float _771 = (_767 * _462) - _544;
    float _772 = (_767 * _463) - _545;
    float _773 = (_767 * _464) - _546;
    float _777 = abs(dot(vec3(_544, _545, _546), vec3(_462, _463, _464)));
    float _3616 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _779 = sqrt(_631);
    float _792 = exp2((_779 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_779 * 3.0));
    float _798 = (1.0 - _792) * ((_779 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _799 = _792 * _779;
    float _827 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _831 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _835 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1135;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _862 = fma(_835, cbModelParam._m0[26u].z, fma(_831, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _827));
        float _866 = fma(_835, cbModelParam._m0[27u].z, fma(_831, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _827));
        float _870 = fma(_835, cbModelParam._m0[28u].z, fma(_831, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _827));
        float _893 = _827 + _462;
        float _894 = _831 + _463;
        float _895 = _835 + _464;
        float _905 = fma(_895, cbModelParam._m0[26u].z, fma(_894, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _893)) - _862;
        float _906 = fma(_895, cbModelParam._m0[27u].z, fma(_894, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _893)) - _866;
        float _907 = fma(_895, cbModelParam._m0[28u].z, fma(_894, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _893)) - _870;
        float _911 = inversesqrt(dot(vec3(_905, _906, _907), vec3(_905, _906, _907)));
        float _924 = ((_911 * _905) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_862 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _925 = ((_911 * _906) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_866 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _926 = ((_911 * _907) / cbModelParam._m0[34u].z) + ((((((_870 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        float _963 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_929.x + (-0.5));
        float _965 = _963 * (_929.y + (-0.5));
        float _966 = _963 * (_929.z + (-0.5));
        float _973 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_936.x + (-0.5));
        float _975 = _973 * (_936.y + (-0.5));
        float _976 = _973 * (_936.z + (-0.5));
        float _983 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_943.x + (-0.5));
        float _985 = _983 * (_943.y + (-0.5));
        float _986 = _983 * (_943.z + (-0.5));
        float _993 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_950.x + (-0.5));
        float _995 = _993 * (_950.y + (-0.5));
        float _996 = _993 * (_950.z + (-0.5));
        float _997 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _998 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _999 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1000 = _964 * 0.5;
        float _1001 = _974 * 0.5;
        float _1002 = _984 * 0.5;
        float _1003 = dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002));
        float _1008 = (_1003 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1003);
        float _1017 = (dot(vec3(_462, _463, _464), vec3(_1008 * _1000, _1008 * _1001, _1008 * _1002)) + 1.0) * 0.5;
        float _3642 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1027 = sqrt(((_1001 * _1001) + (_1000 * _1000)) + (_1002 * _1002)) / (_997 + 9.9999997473787516355514526367188e-06);
        float _3653 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3664 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * (_1029 + 1.0))) + _1034) * _997;
        float _1044 = _965 * 0.5;
        float _1045 = _975 * 0.5;
        float _1046 = _985 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1060 = (dot(vec3(_462, _463, _464), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3675 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1069 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_998 + 9.9999997473787516355514526367188e-06);
        float _3686 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _3697 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (_1071 + 1.0))) + _1076) * _998;
        float _1086 = _966 * 0.5;
        float _1087 = _976 * 0.5;
        float _1088 = _986 * 0.5;
        float _1089 = dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088));
        float _1094 = (_1089 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1089);
        float _1102 = (dot(vec3(_462, _463, _464), vec3(_1094 * _1086, _1094 * _1087, _1094 * _1088)) + 1.0) * 0.5;
        float _3708 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1111 = sqrt(((_1087 * _1087) + (_1086 * _1086)) + (_1088 * _1088)) / (_999 + 9.9999997473787516355514526367188e-06);
        float _3719 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1113 = _1112 * 2.0;
        float _1117 = (1.0 - _1112) / (_1112 + 1.0);
        float _3730 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1127 = ((((1.0 - _1118) * (_1113 + 2.0)) * exp2(log2(isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * (_1113 + 1.0))) + _1118) * _999;
        _1135 = _966;
        _1137 = _965;
        _1138 = _964;
        _1139 = _976;
        _1140 = _975;
        _1141 = _974;
        _1142 = _986;
        _1143 = _985;
        _1144 = _984;
        _1145 = _999;
        _1146 = _998;
        _1147 = _997;
        _1148 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
        _1149 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
        _1150 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)));
    }
    else
    {
        _1135 = _1136;
        _1137 = _1136;
        _1138 = _1136;
        _1139 = _1136;
        _1140 = _1136;
        _1141 = _1136;
        _1142 = _1136;
        _1143 = _1136;
        _1144 = _1136;
        _1145 = _1136;
        _1146 = _1136;
        _1147 = _1136;
        _1148 = 0.0;
        _1149 = 0.0;
        _1150 = 0.0;
    }
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1176 = fma(_835, cbModelParam._m0[30u].z, fma(_831, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _827));
        float _1180 = fma(_835, cbModelParam._m0[31u].z, fma(_831, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _827));
        float _1184 = fma(_835, cbModelParam._m0[32u].z, fma(_831, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _827));
        float _1207 = _827 + _462;
        float _1208 = _831 + _463;
        float _1209 = _835 + _464;
        float _1219 = fma(_1209, cbModelParam._m0[30u].z, fma(_1208, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1207)) - _1176;
        float _1220 = fma(_1209, cbModelParam._m0[31u].z, fma(_1208, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1207)) - _1180;
        float _1221 = fma(_1209, cbModelParam._m0[32u].z, fma(_1208, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1207)) - _1184;
        float _1225 = inversesqrt(dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221)));
        float _1238 = ((_1225 * _1219) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1176 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1239 = ((_1225 * _1220) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1180 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1240 = ((_1225 * _1221) / cbModelParam._m0[35u].z) + ((((((_1184 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        float _1275 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1242.x + (-0.5));
        float _1277 = _1275 * (_1242.y + (-0.5));
        float _1278 = _1275 * (_1242.z + (-0.5));
        float _1285 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1249.x + (-0.5));
        float _1287 = _1285 * (_1249.y + (-0.5));
        float _1288 = _1285 * (_1249.z + (-0.5));
        float _1295 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1256.x + (-0.5));
        float _1297 = _1295 * (_1256.y + (-0.5));
        float _1298 = _1295 * (_1256.z + (-0.5));
        float _1305 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1263.x + (-0.5));
        float _1307 = _1305 * (_1263.y + (-0.5));
        float _1308 = _1305 * (_1263.z + (-0.5));
        float _1309 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1310 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1311 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1312 = _1276 * 0.5;
        float _1313 = _1286 * 0.5;
        float _1314 = _1296 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1328 = (dot(vec3(_462, _463, _464), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1337 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1309 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _3793 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1339 + 1.0))) + _1344) * _1309;
        float _1354 = _1277 * 0.5;
        float _1355 = _1287 * 0.5;
        float _1356 = _1297 * 0.5;
        float _1357 = dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356));
        float _1362 = (_1357 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1357);
        float _1370 = (dot(vec3(_462, _463, _464), vec3(_1362 * _1354, _1362 * _1355, _1362 * _1356)) + 1.0) * 0.5;
        float _3804 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1379 = sqrt(((_1355 * _1355) + (_1354 * _1354)) + (_1356 * _1356)) / (_1310 + 9.9999997473787516355514526367188e-06);
        float _3815 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1381 = _1380 * 2.0;
        float _1385 = (1.0 - _1380) / (_1380 + 1.0);
        float _3826 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1395 = ((((1.0 - _1386) * (_1381 + 2.0)) * exp2(log2(isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1381 + 1.0))) + _1386) * _1310;
        float _1396 = _1278 * 0.5;
        float _1397 = _1288 * 0.5;
        float _1398 = _1298 * 0.5;
        float _1399 = dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398));
        float _1404 = (_1399 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1399);
        float _1412 = (dot(vec3(_462, _463, _464), vec3(_1404 * _1396, _1404 * _1397, _1404 * _1398)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1421 = sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398)) / (_1311 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1423 = _1422 * 2.0;
        float _1427 = (1.0 - _1422) / (_1422 + 1.0);
        float _3859 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1437 = ((((1.0 - _1428) * (_1423 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1423 + 1.0))) + _1428) * _1311;
        _1445 = _1278;
        _1446 = _1277;
        _1447 = _1276;
        _1448 = _1288;
        _1449 = _1287;
        _1450 = _1286;
        _1451 = _1298;
        _1452 = _1297;
        _1453 = _1296;
        _1454 = _1311;
        _1455 = _1310;
        _1456 = _1309;
        _1457 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
        _1458 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)));
        _1459 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)));
    }
    else
    {
        _1445 = _1136;
        _1446 = _1136;
        _1447 = _1136;
        _1448 = _1136;
        _1449 = _1136;
        _1450 = _1136;
        _1451 = _1136;
        _1452 = _1136;
        _1453 = _1136;
        _1454 = _1136;
        _1455 = _1136;
        _1456 = _1136;
        _1457 = 0.0;
        _1458 = 0.0;
        _1459 = 0.0;
    }
    float _1469 = (cbModelParam._m0[1u].x * (_1457 - _1148)) + _1148;
    float _1470 = (cbModelParam._m0[1u].x * (_1458 - _1149)) + _1149;
    float _1471 = (cbModelParam._m0[1u].x * (_1459 - _1150)) + _1150;
    float _1492 = fma(_1471, cbSceneParam._m0[89u].z, fma(_1470, cbSceneParam._m0[89u].y, _1469 * cbSceneParam._m0[89u].x));
    float _1495 = fma(_1471, cbSceneParam._m0[90u].z, fma(_1470, cbSceneParam._m0[90u].y, _1469 * cbSceneParam._m0[90u].x));
    float _1498 = fma(_1471, cbSceneParam._m0[91u].z, fma(_1470, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1469));
    float _1513 = _771 * 0.5;
    float _1514 = _772 * 0.5;
    float _1515 = _773 * 0.5;
    float _1516 = dot(vec4(_1513, _1514, _1515, 1.0), vec4(_1447, _1450, _1453, _1456));
    float _1519 = dot(vec4(_1513, _1514, _1515, 1.0), vec4(_1446, _1449, _1452, _1455));
    float _1522 = dot(vec4(_1513, _1514, _1515, 1.0), vec4(_1445, _1448, _1451, _1454));
    float _1553;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1529 = dot(vec4(_1513, _1514, _1515, 1.0), vec4(_1135, _1139, _1142, _1145));
        float _1533 = dot(vec4(_1513, _1514, _1515, 1.0), vec4(_1137, _1140, _1143, _1146));
        float _1537 = dot(vec4(_1513, _1514, _1515, 1.0), vec4(_1138, _1141, _1144, _1147));
        float _1544 = dot(vec4(cbModelParam._m0[39u]), vec4(_1513, _1514, _1515, 1.0));
        _1553 = dot(vec3(isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)), isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)), isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1544) ? 0.0 : (isnan(0.0) ? _1544 : max(0.0, _1544))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1553 = 1.0;
    }
    float _1564;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1555 = dot(vec4(cbModelParam._m0[40u]), vec4(_1513, _1514, _1515, 1.0));
        _1564 = dot(vec3(isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)), isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)), isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1555) ? 0.0 : (isnan(0.0) ? _1555 : max(0.0, _1555))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1564 = 1.0;
    }
    float _1568 = (_1564 * cbModelParam._m0[1u].x) + (_1553 * (1.0 - cbModelParam._m0[1u].x));
    float _1578 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _631);
    float _1579 = isnan(_1578) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1578 : min(cbModelParam._m0[25u].z, _1578));
    float _1659;
    float _1661;
    float _1663;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1626 = fma(_835, cbModelParam._m0[13u].z, fma(_831, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _827)) + cbModelParam._m0[13u].w;
        float _1630 = fma(_835, cbModelParam._m0[14u].z, fma(_831, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _827)) + cbModelParam._m0[14u].w;
        float _1634 = fma(_835, cbModelParam._m0[15u].z, fma(_831, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _827)) + cbModelParam._m0[15u].w;
        float _1637 = fma(_773, cbModelParam._m0[13u].z, fma(_772, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _771));
        float _1640 = fma(_773, cbModelParam._m0[14u].z, fma(_772, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _771));
        float _1643 = fma(_773, cbModelParam._m0[15u].z, fma(_772, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _771));
        float _1671;
        if (_1637 > 0.0)
        {
            _1671 = abs((1.0 - _1626) / _1637);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1626 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1671 = frontier_phi_16_14_ladder;
        }
        float _1900;
        if (_1640 > 0.0)
        {
            _1900 = abs((1.0 - _1630) / _1640);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1630 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1900 = frontier_phi_25_21_ladder;
        }
        float _2157;
        if (_1643 > 0.0)
        {
            _2157 = abs((1.0 - _1634) / _1643);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1634 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2157 = frontier_phi_37_32_ladder;
        }
        float _2159 = isnan(_1900) ? _1671 : (isnan(_1671) ? _1900 : min(_1671, _1900));
        float _2160 = isnan(_2157) ? _2159 : (isnan(_2159) ? _2157 : min(_2159, _2157));
        float _2164 = (_2160 * _1637) + _1626;
        float _2165 = (_2160 * _1640) + _1630;
        float _2166 = (_2160 * _1643) + _1634;
        float _2167 = _2160 * 9.9999997473787516355514526367188e-05;
        float _2169 = (-1.0) - _2167;
        float _2171 = _2167 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2166 > _2171) || ((_2166 < _2169) || ((_2165 > _2171) || ((_2165 < _2169) || ((_2164 < _2169) || (_2164 > _2171))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2294 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2166, cbModelParam._m0[9u].z, fma(_2165, cbModelParam._m0[9u].y, _2164 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2166, cbModelParam._m0[10u].z, fma(_2165, cbModelParam._m0[10u].y, _2164 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2166, cbModelParam._m0[11u].z, fma(_2165, cbModelParam._m0[11u].y, _2164 * cbModelParam._m0[11u].x))), _1579);
            frontier_phi_15_37_ladder = _2294.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2294.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2294.x * cbModelParam._m0[1u].y;
        }
        _1659 = frontier_phi_15_37_ladder_2;
        _1661 = frontier_phi_15_37_ladder_1;
        _1663 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1647 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_771, _772, _773), _1579);
        _1659 = _1647.x * cbModelParam._m0[1u].y;
        _1661 = _1647.y * cbModelParam._m0[1u].y;
        _1663 = _1647.z * cbModelParam._m0[1u].y;
    }
    float _1667 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _631);
    float _1668 = isnan(_1667) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1667 : min(cbModelParam._m0[25u].w, _1667));
    float _1761;
    float _1763;
    float _1765;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1725 = fma(_835, cbModelParam._m0[21u].z, fma(_831, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _827)) + cbModelParam._m0[21u].w;
        float _1729 = fma(_835, cbModelParam._m0[22u].z, fma(_831, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _827)) + cbModelParam._m0[22u].w;
        float _1733 = fma(_835, cbModelParam._m0[23u].z, fma(_831, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _827)) + cbModelParam._m0[23u].w;
        float _1736 = fma(_773, cbModelParam._m0[21u].z, fma(_772, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _771));
        float _1739 = fma(_773, cbModelParam._m0[22u].z, fma(_772, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _771));
        float _1742 = fma(_773, cbModelParam._m0[23u].z, fma(_772, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _771));
        float _1905;
        if (_1736 > 0.0)
        {
            _1905 = abs((1.0 - _1725) / _1736);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1725 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1905 = frontier_phi_27_23_ladder;
        }
        float _2184;
        if (_1739 > 0.0)
        {
            _2184 = abs((1.0 - _1729) / _1739);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1729 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2184 = frontier_phi_39_34_ladder;
        }
        float _2397;
        if (_1742 > 0.0)
        {
            _2397 = abs((1.0 - _1733) / _1742);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1733 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2397 = frontier_phi_48_45_ladder;
        }
        float _2399 = isnan(_2184) ? _1905 : (isnan(_1905) ? _2184 : min(_1905, _2184));
        float _2400 = isnan(_2397) ? _2399 : (isnan(_2399) ? _2397 : min(_2399, _2397));
        float _2404 = (_2400 * _1736) + _1725;
        float _2405 = (_2400 * _1739) + _1729;
        float _2406 = (_2400 * _1742) + _1733;
        float _2407 = _2400 * 9.9999997473787516355514526367188e-05;
        float _2408 = (-1.0) - _2407;
        float _2410 = _2407 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2406 > _2410) || ((_2406 < _2408) || ((_2405 > _2410) || ((_2405 < _2408) || ((_2404 < _2408) || (_2404 > _2410))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2609 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2406, cbModelParam._m0[17u].z, fma(_2405, cbModelParam._m0[17u].y, _2404 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2406, cbModelParam._m0[18u].z, fma(_2405, cbModelParam._m0[18u].y, _2404 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2406, cbModelParam._m0[19u].z, fma(_2405, cbModelParam._m0[19u].y, _2404 * cbModelParam._m0[19u].x))), _1668);
            frontier_phi_24_48_ladder = _2609.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2609.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2609.x * cbModelParam._m0[1u].z;
        }
        _1761 = frontier_phi_24_48_ladder_2;
        _1763 = frontier_phi_24_48_ladder_1;
        _1765 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1745 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_771, _772, _773), _1668);
        _1761 = _1745.x * cbModelParam._m0[1u].z;
        _1763 = _1745.y * cbModelParam._m0[1u].z;
        _1765 = _1745.z * cbModelParam._m0[1u].z;
    }
    float _1778 = (((_798 * _749) + _799) * _763) * ((cbModelParam._m0[1u].w * (_1761 - _1659)) + _1659);
    float _1780 = (((_798 * _750) + _799) * _763) * ((cbModelParam._m0[1u].w * (_1763 - _1661)) + _1661);
    float _1782 = (((_798 * _751) + _799) * _763) * ((cbModelParam._m0[1u].w * (_1765 - _1663)) + _1663);
    float _1785 = fma(_1782, cbSceneParam._m0[89u].z, fma(_1780, cbSceneParam._m0[89u].y, _1778 * cbSceneParam._m0[89u].x));
    float _1788 = fma(_1782, cbSceneParam._m0[90u].z, fma(_1780, cbSceneParam._m0[90u].y, _1778 * cbSceneParam._m0[90u].x));
    float _1791 = fma(_1782, cbSceneParam._m0[91u].z, fma(_1780, cbSceneParam._m0[91u].y, _1778 * cbSceneParam._m0[91u].x));
    vec4 _1799 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_552, _553));
    float _1801 = _1799.w;
    float _1813 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1801);
    float _1814 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1801);
    float _1815 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1801);
    uvec4 _1819 = floatBitsToUint(cbInstanceData._m0[_655 + 5u]);
    uint _1821 = _1819.x * 14u;
    uint _1822 = _1821 + 13u;
    float _1829 = _763 + (-1.0);
    float _1834 = (cbLight._m0[_1822].x * _1829) + 1.0;
    float _1835 = (cbLight._m0[_1822].y * _1829) + 1.0;
    float _1836 = (cbLight._m0[_1822].z * _1829) + 1.0;
    float _1837 = (cbLight._m0[_1822].w * _1829) + 1.0;
    uint _1838 = _1821 + 5u;
    float _1844 = isnan(1.0) ? _1835 : (isnan(_1835) ? 1.0 : min(_1835, 1.0));
    uint _1848 = _1821 + 4u;
    float _1858 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
    uint _1862 = _1821 | 1u;
    float _1873 = dot(vec3(cbLight._m0[_1821].xyz), vec3(_462, _463, _464));
    float _1876 = dot(vec3(cbLight._m0[_1862].xyz), vec3(_462, _463, _464));
    float _3995 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _4006 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1881 = (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * 0.3183098733425140380859375;
    float _1883 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * 0.3183098733425140380859375;
    float _1890 = ((cbLight._m0[_1838].x * _1844) * _1883) + (((cbLight._m0[_1848].x * _1813) * _1858) * _1881);
    float _1891 = ((_1844 * cbLight._m0[_1838].y) * _1883) + (((cbLight._m0[_1848].y * _1814) * _1858) * _1881);
    float _1892 = ((_1844 * cbLight._m0[_1838].z) * _1883) + (((cbLight._m0[_1848].z * _1815) * _1858) * _1881);
    uvec4 _1897 = floatBitsToUint(cbLight._m0[_1821 + 12u]);
    bool _1899 = _1897.x == 0u;
    float _1910;
    float _1912;
    float _1914;
    if (_1899)
    {
        _1910 = _1890;
        _1912 = _1891;
        _1914 = _1892;
    }
    else
    {
        uint _1918 = _1821 + 6u;
        float _1934 = (dot(vec3(cbLight._m0[_1821 + 2u].xyz), vec3(_462, _463, _464)) * 0.5) + 0.5;
        float _1935 = _1934 * _1934;
        float _4017 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        float _1936 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1937 = isnan(1.0) ? _1836 : (isnan(_1836) ? 1.0 : min(_1836, 1.0));
        _1910 = (((cbLight._m0[_1918].x * 0.3183098733425140380859375) * _1936) * _1937) + _1890;
        _1912 = (((cbLight._m0[_1918].y * 0.3183098733425140380859375) * _1936) * _1937) + _1891;
        _1914 = (((cbLight._m0[_1918].z * 0.3183098733425140380859375) * _1936) * _1937) + _1892;
    }
    bool _1917 = _1897.y == 0u;
    float _1955;
    float _1957;
    float _1959;
    if (_1917)
    {
        _1955 = _1910;
        _1957 = _1912;
        _1959 = _1914;
    }
    else
    {
        uint _2128 = _1821 + 7u;
        float _2144 = (dot(vec3(cbLight._m0[_1821 + 3u].xyz), vec3(_462, _463, _464)) * 0.5) + 0.5;
        float _2145 = _2144 * _2144;
        float _4033 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2146 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _2147 = isnan(1.0) ? _1837 : (isnan(_1837) ? 1.0 : min(_1837, 1.0));
        _1955 = (((cbLight._m0[_2128].x * 0.3183098733425140380859375) * _2146) * _2147) + _1910;
        _1957 = (((cbLight._m0[_2128].y * 0.3183098733425140380859375) * _2146) * _2147) + _1912;
        _1959 = (((cbLight._m0[_2128].z * 0.3183098733425140380859375) * _2146) * _2147) + _1914;
    }
    uint _1962 = _1821 + 8u;
    float _1975 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1821].w)) * _631) * 0.949999988079071044921875);
    float _1976 = _1975 * _1975;
    float _1977 = cbLight._m0[_1821].x + _544;
    float _1978 = cbLight._m0[_1821].y + _545;
    float _1979 = cbLight._m0[_1821].z + _546;
    float _1983 = inversesqrt(dot(vec3(_1977, _1978, _1979), vec3(_1977, _1978, _1979)));
    float _1984 = _1983 * _1977;
    float _1985 = _1983 * _1978;
    float _1986 = _1983 * _1979;
    float _1987 = dot(vec3(_462, _463, _464), vec3(cbLight._m0[_1821].xyz));
    float _4049 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1990 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _4060 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _1991 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _1992 = dot(vec3(_462, _463, _464), vec3(_1984, _1985, _1986));
    float _4071 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1995 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _1996 = dot(vec3(cbLight._m0[_1821].xyz), vec3(_1984, _1985, _1986));
    float _4082 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _2000 = _1976 * _1976;
    float _2004 = ((_1995 * _1995) * (_2000 + (-1.0))) + 1.0;
    float _2012 = exp2(log2(1.0 - (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) * 5.0);
    float _2013 = 0.959999978542327880859375 - _746;
    float _2015 = 0.959999978542327880859375 - _747;
    float _2016 = 0.959999978542327880859375 - _748;
    float _2023 = 1.0 - _1976;
    float _2034 = (0.5 / (((_1991 * ((_1990 * _2023) + _1976)) + 9.9999999392252902907785028219223e-09) + (((_1991 * _2023) + _1976) * _1990))) * _1990;
    float _4093 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2036 = (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_2000 / ((_2004 * _2004) * 3.141590118408203125));
    uint _2050 = _1821 + 9u;
    float _2061 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1862].w)) * _631) * 0.949999988079071044921875);
    float _2062 = _2061 * _2061;
    float _2063 = cbLight._m0[_1862].x + _544;
    float _2064 = cbLight._m0[_1862].y + _545;
    float _2065 = cbLight._m0[_1862].z + _546;
    float _2069 = inversesqrt(dot(vec3(_2063, _2064, _2065), vec3(_2063, _2064, _2065)));
    float _2070 = _2069 * _2063;
    float _2071 = _2069 * _2064;
    float _2072 = _2069 * _2065;
    float _2073 = dot(vec3(_462, _463, _464), vec3(cbLight._m0[_1862].xyz));
    float _4104 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2076 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _2077 = dot(vec3(_462, _463, _464), vec3(_2070, _2071, _2072));
    float _4115 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2080 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _2081 = dot(vec3(cbLight._m0[_1862].xyz), vec3(_2070, _2071, _2072));
    float _4126 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2085 = _2062 * _2062;
    float _2089 = ((_2080 * _2080) * (_2085 + (-1.0))) + 1.0;
    float _2096 = exp2(log2(1.0 - (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0)))) * 5.0);
    float _2103 = 1.0 - _2062;
    float _2113 = (0.5 / (((_1991 * ((_2076 * _2103) + _2062)) + 9.9999999392252902907785028219223e-09) + (((_1991 * _2103) + _2062) * _2076))) * _2076;
    float _4137 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2115 = (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_2085 / ((_2089 * _2089) * 3.141590118408203125));
    float _2125 = (((((_2096 * _2013) + _749) * cbLight._m0[_2050].x) * _2115) * _1844) + ((((cbLight._m0[_1962].x * _1813) * ((_2012 * _2013) + _749)) * _2036) * _1858);
    float _2126 = (((((_2096 * _2015) + _750) * cbLight._m0[_2050].y) * _2115) * _1844) + ((((cbLight._m0[_1962].y * _1814) * ((_2012 * _2015) + _750)) * _2036) * _1858);
    float _2127 = (((((_2096 * _2016) + _751) * cbLight._m0[_2050].z) * _2115) * _1844) + ((((cbLight._m0[_1962].z * _1815) * ((_2012 * _2016) + _751)) * _2036) * _1858);
    float _2189;
    float _2191;
    float _2193;
    if (_1899)
    {
        _2189 = _2125;
        _2191 = _2126;
        _2193 = _2127;
    }
    else
    {
        uint _2195 = _1821 + 2u;
        uint _2199 = _1821 + 10u;
        float _2213 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2195].w)) * _631) * 0.949999988079071044921875);
        float _2214 = _2213 * _2213;
        float _2215 = cbLight._m0[_2195].x + _544;
        float _2216 = cbLight._m0[_2195].y + _545;
        float _2217 = cbLight._m0[_2195].z + _546;
        float _2221 = inversesqrt(dot(vec3(_2215, _2216, _2217), vec3(_2215, _2216, _2217)));
        float _2222 = _2221 * _2215;
        float _2223 = _2221 * _2216;
        float _2224 = _2221 * _2217;
        float _2225 = dot(vec3(_462, _463, _464), vec3(cbLight._m0[_2195].xyz));
        float _4148 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2228 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _2229 = dot(vec3(_462, _463, _464), vec3(_2222, _2223, _2224));
        float _4159 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2232 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _2233 = dot(vec3(cbLight._m0[_2195].xyz), vec3(_2222, _2223, _2224));
        float _4170 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2237 = _2214 * _2214;
        float _2241 = ((_2232 * _2232) * (_2237 + (-1.0))) + 1.0;
        float _2248 = exp2(log2(1.0 - (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) * 5.0);
        float _2255 = 1.0 - _2214;
        float _2265 = (0.5 / (((_1991 * ((_2228 * _2255) + _2214)) + 9.9999999392252902907785028219223e-09) + (((_1991 * _2255) + _2214) * _2228))) * _2228;
        float _4181 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2267 = (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_2237 / ((_2241 * _2241) * 3.141590118408203125));
        float _2268 = isnan(1.0) ? _1836 : (isnan(_1836) ? 1.0 : min(_1836, 1.0));
        _2189 = (((((_2248 * _2013) + _749) * cbLight._m0[_2199].x) * _2267) * _2268) + _2125;
        _2191 = (((((_2248 * _2015) + _750) * cbLight._m0[_2199].y) * _2267) * _2268) + _2126;
        _2193 = (((((_2248 * _2016) + _751) * cbLight._m0[_2199].z) * _2267) * _2268) + _2127;
    }
    float _2303;
    float _2305;
    float _2307;
    if (_1917)
    {
        _2303 = _2189;
        _2305 = _2191;
        _2307 = _2193;
    }
    else
    {
        uint _2314 = _1821 + 3u;
        uint _2318 = _1821 + 11u;
        float _2332 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2314].w)) * _631) * 0.949999988079071044921875);
        float _2333 = _2332 * _2332;
        float _2334 = cbLight._m0[_2314].x + _544;
        float _2335 = cbLight._m0[_2314].y + _545;
        float _2336 = cbLight._m0[_2314].z + _546;
        float _2340 = inversesqrt(dot(vec3(_2334, _2335, _2336), vec3(_2334, _2335, _2336)));
        float _2341 = _2340 * _2334;
        float _2342 = _2340 * _2335;
        float _2343 = _2340 * _2336;
        float _2344 = dot(vec3(_462, _463, _464), vec3(cbLight._m0[_2314].xyz));
        float _4197 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2347 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _2348 = dot(vec3(_462, _463, _464), vec3(_2341, _2342, _2343));
        float _4208 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2351 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _2352 = dot(vec3(cbLight._m0[_2314].xyz), vec3(_2341, _2342, _2343));
        float _4219 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2356 = _2333 * _2333;
        float _2360 = ((_2351 * _2351) * (_2356 + (-1.0))) + 1.0;
        float _2367 = exp2(log2(1.0 - (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) * 5.0);
        float _2374 = 1.0 - _2333;
        float _2384 = (0.5 / (((_1991 * ((_2347 * _2374) + _2333)) + 9.9999999392252902907785028219223e-09) + (((_1991 * _2374) + _2333) * _2347))) * _2347;
        float _4230 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2386 = (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_2356 / ((_2360 * _2360) * 3.141590118408203125));
        float _2387 = isnan(1.0) ? _1837 : (isnan(_1837) ? 1.0 : min(_1837, 1.0));
        _2303 = (((((_2367 * _2013) + _749) * cbLight._m0[_2318].x) * _2386) * _2387) + _2189;
        _2305 = (((((_2367 * _2015) + _750) * cbLight._m0[_2318].y) * _2386) * _2387) + _2191;
        _2307 = (((((_2367 * _2016) + _751) * cbLight._m0[_2318].z) * _2386) * _2387) + _2193;
    }
    float _2521;
    float _2523;
    float _2525;
    float _2527;
    float _2529;
    float _2531;
    if (_1819.y == 0u)
    {
        float _2462 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2463 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2462;
        float _2464 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2462;
        float _2465 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2462;
        uvec4 _2477 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2478 = _2477.x;
        uint _2489 = uint((float(_2477.y) * floor(float(uint(cbSceneParam._m0[85u].y * _553) / _2478))) + floor(float(uint(cbSceneParam._m0[85u].x * _552) / _2478)));
        float _2499 = (log2(_2465 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2500 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        uint _2503 = uint(isnan(14.0) ? _2500 : (isnan(_2500) ? 14.0 : min(_2500, 14.0)));
        uvec4 _2508 = texelFetch(g_lightClusterGridBuffer, int(((_2503 << 2u) + (_2489 << 6u)) >> 2u));
        uint _2509 = _2508.x;
        uint _2510 = _2477.z;
        float _2614;
        float _2616;
        float _2618;
        float _2620;
        float _2622;
        float _2624;
        if (((((1u << ((_2510 >> 4u) & 15u)) + 4294967295u) & _2509) == 0u) || ((_2510 & 240u) == 0u))
        {
            _2614 = 0.0;
            _2616 = 0.0;
            _2618 = 0.0;
            _2620 = 0.0;
            _2622 = 0.0;
            _2624 = 0.0;
        }
        else
        {
            float _2615;
            float _2617;
            float _2619;
            float _2621;
            float _2623;
            float _2625;
            float _2758 = 0.0;
            float _2759 = 0.0;
            float _2760 = 0.0;
            float _2761 = 0.0;
            float _2762 = 0.0;
            float _2763 = 0.0;
            uint _2764 = 0u;
            uint _2773;
            bool _2774;
            for (;;)
            {
                _2773 = texelFetch(g_lightClassification, int((((_2503 << 5u) + (_2489 << 9u)) + (_2764 << 2u)) >> 2u)).x;
                _2774 = _2773 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2774)
                {
                    frontier_phi_63_pred = _2763;
                    frontier_phi_63_pred_1 = _2762;
                    frontier_phi_63_pred_2 = _2761;
                    frontier_phi_63_pred_3 = _2760;
                    frontier_phi_63_pred_4 = _2759;
                    frontier_phi_63_pred_5 = _2758;
                }
                else
                {
                    float _2882;
                    float _2883;
                    float _2884;
                    float _2885;
                    float _2886;
                    float _2887;
                    uint _2888;
                    _2882 = _2758;
                    _2883 = _2759;
                    _2884 = _2760;
                    _2885 = _2761;
                    _2886 = _2762;
                    _2887 = _2763;
                    _2888 = _2773;
                    float _2814;
                    float _2815;
                    float _2816;
                    float _2817;
                    float _2818;
                    float _2819;
                    for (;;)
                    {
                        uint _2892 = uint(findLSB(_2888)) + (_2764 << 5u);
                        uint _2889 = (_2888 + 4294967295u) & _2888;
                        uint _2894 = _2892 * 48u;
                        vec4 _2908 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2894)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 3u)).x));
                        uint _2914 = (_2892 * 48u) + 4u;
                        vec4 _2927 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2914)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 3u)).x));
                        uint _2933 = (_2892 * 48u) + 8u;
                        vec3 _2944 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2933)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 2u)).x));
                        float _2948 = _2908.x - _2463;
                        float _2949 = _2908.y - _2464;
                        float _2950 = _2908.z - _2465;
                        float _2951 = dot(vec3(_2948, _2949, _2950), vec3(_2948, _2949, _2950));
                        float _2954 = inversesqrt(_2951);
                        float _2955 = _2954 * _2948;
                        float _2956 = _2954 * _2949;
                        float _2957 = _2954 * _2950;
                        float _2958 = dot(vec3(_576, _579, _582), vec3(_2955, _2956, _2957));
                        float _2963 = 1.0 - (_2951 * _2908.w);
                        float _4256 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
                        float _2964 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                        float _2965 = sqrt(_2951) * _2927.w;
                        float _2968 = 1.39999997615814208984375 / (_2965 + 1.39999997615814208984375);
                        float _2969 = _2968 * _2968;
                        float _2972 = ((1.0 - _2969) * _2958) + _2969;
                        float _2975 = _2965 * _2965;
                        float _2979 = ((isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0))) * _2964) / ((_2975 * 0.699999988079071044921875) + 1.0);
                        float _2983 = (-0.0) - _2463;
                        float _2984 = (-0.0) - _2464;
                        float _2985 = (-0.0) - _2465;
                        float _2989 = inversesqrt(dot(vec3(_2983, _2984, _2985), vec3(_2983, _2984, _2985)));
                        float _2990 = _2989 * _2983;
                        float _2991 = _2989 * _2984;
                        float _2992 = _2989 * _2985;
                        float _3000 = exp2(log2(1.0 / ((_2975 * 3.5) + 5.0)) * 0.25);
                        float _3001 = 1.0 - _779;
                        float _3008 = sqrt(1.0 - ((1.0 - (_3001 * _3001)) * (1.0 - (_3000 * _3000))));
                        float _3009 = _3008 * _3008;
                        float _3010 = _3009 * _3009;
                        float _3011 = _2990 + _2955;
                        float _3012 = _2991 + _2956;
                        float _3013 = _2992 + _2957;
                        float _3017 = inversesqrt(dot(vec3(_3011, _3012, _3013), vec3(_3011, _3012, _3013)));
                        float _3021 = dot(vec3(_576, _579, _582), vec3(_2990, _2991, _2992));
                        float _4272 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                        float _3024 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
                        float _3025 = dot(vec3(_576, _579, _582), vec3(_3017 * _3011, _3017 * _3012, _3017 * _3013));
                        float _4283 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                        float _3028 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                        float _3032 = ((_3028 * _3028) * (_3010 + (-1.0))) + 1.0;
                        float _3033 = _2968 * _3009;
                        float _3034 = _3033 * _3033;
                        float _3037 = ((1.0 - _3034) * _2958) + _3034;
                        float _4294 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                        float _3038 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
                        float _3039 = 1.0 - _3009;
                        float _3049 = (0.5 / (((_3038 * ((_3024 * _3039) + _3009)) + 9.9999999392252902907785028219223e-09) + (((_3038 * _3039) + _3009) * _3024))) * _3038;
                        float _4305 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                        float _3060 = (((_3010 * 3.1415927410125732421875) * (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) / ((_3032 * _3032) * ((_2975 * 2.1991131305694580078125) + 3.141590118408203125))) * _2964;
                        _2817 = (_2979 * _2927.x) + _2885;
                        _2818 = (_2979 * _2927.y) + _2886;
                        _2819 = (_2979 * _2927.z) + _2887;
                        _2814 = (_3060 * _2944.x) + _2882;
                        _2815 = (_3060 * _2944.y) + _2883;
                        _2816 = (_3060 * _2944.z) + _2884;
                        if (_2889 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2882 = _2814;
                            _2883 = _2815;
                            _2884 = _2816;
                            _2885 = _2817;
                            _2886 = _2818;
                            _2887 = _2819;
                            _2888 = _2889;
                        }
                    }
                    frontier_phi_63_pred = _2819;
                    frontier_phi_63_pred_1 = _2818;
                    frontier_phi_63_pred_2 = _2817;
                    frontier_phi_63_pred_3 = _2816;
                    frontier_phi_63_pred_4 = _2815;
                    frontier_phi_63_pred_5 = _2814;
                }
                _2625 = frontier_phi_63_pred;
                _2623 = frontier_phi_63_pred_1;
                _2621 = frontier_phi_63_pred_2;
                _2619 = frontier_phi_63_pred_3;
                _2617 = frontier_phi_63_pred_4;
                _2615 = frontier_phi_63_pred_5;
                uint _2765 = _2764 + 1u;
                if (_2765 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2758 = _2615;
                    _2759 = _2617;
                    _2760 = _2619;
                    _2761 = _2621;
                    _2762 = _2623;
                    _2763 = _2625;
                    _2764 = _2765;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2614 = _2615;
            _2616 = _2617;
            _2618 = _2619;
            _2620 = _2621;
            _2622 = _2623;
            _2624 = _2625;
        }
        uvec4 _2628 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2629 = _2628.z;
        uint _2631 = (_2629 >> 8u) & 15u;
        float _2726;
        float _2728;
        float _2730;
        float _2732;
        float _2734;
        float _2736;
        if (((4294967295u << _2631) & _2509) == 0u)
        {
            _2726 = _2614;
            _2728 = _2616;
            _2730 = _2618;
            _2732 = _2620;
            _2734 = _2622;
            _2736 = _2624;
        }
        else
        {
            float _2751 = inversesqrt(dot(vec3(_2463, _2464, _2465), vec3(_2463, _2464, _2465)));
            float _2752 = _2751 * _2463;
            float _2753 = _2751 * _2464;
            float _2754 = _2751 * _2465;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2631 < ((_2629 >> 12u) & 15u))
            {
                float _2727;
                float _2729;
                float _2731;
                float _2733;
                float _2735;
                float _2737;
                float _2865 = _2614;
                float _2866 = _2616;
                float _2867 = _2618;
                float _2868 = _2620;
                float _2869 = _2622;
                float _2870 = _2624;
                uint _2871 = _2631;
                uint _2880;
                bool _2881;
                for (;;)
                {
                    _2880 = texelFetch(g_lightClassification, int((((_2503 << 5u) + (_2489 << 9u)) + (_2871 << 2u)) >> 2u)).x;
                    _2881 = _2880 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2881)
                    {
                        frontier_phi_69_pred = _2870;
                        frontier_phi_69_pred_1 = _2869;
                        frontier_phi_69_pred_2 = _2868;
                        frontier_phi_69_pred_3 = _2867;
                        frontier_phi_69_pred_4 = _2866;
                        frontier_phi_69_pred_5 = _2865;
                    }
                    else
                    {
                        float _3065;
                        float _3066;
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3070;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3078 = _2865;
                        float _3079 = _2866;
                        float _3080 = _2867;
                        float _3081 = _2868;
                        float _3082 = _2869;
                        float _3083 = _2870;
                        uint _3084 = _2880;
                        uint _3085;
                        vec4 _3110;
                        float _3111;
                        vec4 _3126;
                        vec3 _3138;
                        vec4 _3153;
                        vec4 _3169;
                        float _3216;
                        bool _3217;
                        for (;;)
                        {
                            uint _3095 = ((_2871 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3084));
                            _3085 = (_3084 + 4294967295u) & _3084;
                            uint _3097 = _3095 * 40u;
                            _3110 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 3u)).x));
                            _3111 = _3110.w;
                            uint _3113 = (_3095 * 40u) + 4u;
                            _3126 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3113)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 3u)).x));
                            uint _3128 = (_3095 * 40u) + 8u;
                            _3138 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x));
                            uint _3140 = (_3095 * 40u) + 16u;
                            _3153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 3u)).x));
                            uint _3156 = (_3095 * 40u) + 20u;
                            _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            uint _3172 = (_3095 * 40u) + 24u;
                            vec4 _3185 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 3u)).x));
                            uint _3191 = (_3095 * 40u) + 28u;
                            vec4 _3204 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3191)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 3u)).x));
                            _3216 = fma(_2465, _3204.z, fma(_2464, _3204.y, _3204.x * _2463)) + _3204.w;
                            _3217 = !((fma(_2465, _3185.z, fma(_2464, _3185.y, _3185.x * _2463)) + _3185.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3217)
                            {
                                float _3244 = _3110.x - _2463;
                                float _3245 = _3110.y - _2464;
                                float _3246 = _3110.z - _2465;
                                float _3247 = dot(vec3(_3244, _3245, _3246), vec3(_3244, _3245, _3246));
                                float _3250 = inversesqrt(_3247);
                                float _3251 = _3250 * _3244;
                                float _3252 = _3250 * _3245;
                                float _3253 = _3250 * _3246;
                                float _3257 = 1.0 - (_3247 / (_3111 * _3111));
                                float _4316 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                                float _3258 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                                float _3262 = sqrt(_3247) * _3126.w;
                                float _3264 = 1.39999997615814208984375 / (_3262 + 1.39999997615814208984375);
                                float _3265 = _3264 * _3264;
                                float _3268 = ((1.0 - _3265) * dot(vec3(_3251, _3252, _3253), vec3(_576, _579, _582))) + _3265;
                                float _3271 = _3262 * _3262;
                                float _3275 = (fma(_2465, _3153.z, fma(_2464, _3153.y, _3153.x * _2463)) + _3153.w) / _3216;
                                float _3276 = (fma(_2465, _3169.z, fma(_2464, _3169.y, _3169.x * _2463)) + _3169.w) / _3216;
                                float _3280 = 1.0 - dot(vec2(_3275, _3276), vec2(_3275, _3276));
                                float _4332 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3281 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                                float _3282 = _3281 * (((isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0))) * _3258) / ((_3271 * 0.699999988079071044921875) + 1.0));
                                float _3294 = exp2(log2(1.0 / ((_3271 * 3.5) + 5.0)) * 0.25);
                                float _3295 = 1.0 - _779;
                                float _3302 = sqrt(1.0 - ((1.0 - (_3295 * _3295)) * (1.0 - (_3294 * _3294))));
                                float _3303 = _3302 * _3302;
                                float _3304 = _3303 * _3303;
                                float _3305 = _3251 - _2752;
                                float _3306 = _3252 - _2753;
                                float _3307 = _3253 - _2754;
                                float _3311 = inversesqrt(dot(vec3(_3305, _3306, _3307), vec3(_3305, _3306, _3307)));
                                float _3315 = dot(vec3(_576, _579, _582), vec3((-0.0) - _2752, (-0.0) - _2753, (-0.0) - _2754));
                                float _4343 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                                float _3318 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                                float _3319 = dot(vec3(_576, _579, _582), vec3(_3311 * _3305, _3311 * _3306, _3311 * _3307));
                                float _4354 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                                float _3322 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                                float _3326 = ((_3322 * _3322) * (_3304 + (-1.0))) + 1.0;
                                float _3327 = _3264 * _3303;
                                float _3328 = _3327 * _3327;
                                float _3334 = ((1.0 - _3328) * dot(vec3(_576, _579, _582), vec3(_3251, _3252, _3253))) + _3328;
                                float _4365 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                                float _3335 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                                float _3336 = 1.0 - _3303;
                                float _3346 = (0.5 / (((_3335 * ((_3318 * _3336) + _3303)) + 9.9999999392252902907785028219223e-09) + (((_3335 * _3336) + _3303) * _3318))) * _3335;
                                float _4376 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                                float _3356 = (_3281 * _3258) * (((_3304 * 3.1415927410125732421875) * (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0)))) / ((_3326 * _3326) * ((_3271 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3282 * _3126.z;
                                frontier_phi_75_pred_1 = _3282 * _3126.y;
                                frontier_phi_75_pred_2 = _3282 * _3126.x;
                                frontier_phi_75_pred_3 = _3356 * _3138.z;
                                frontier_phi_75_pred_4 = _3356 * _3138.y;
                                frontier_phi_75_pred_5 = _3356 * _3138.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3365 = frontier_phi_75_pred;
                            _3364 = frontier_phi_75_pred_1;
                            _3363 = frontier_phi_75_pred_2;
                            _3362 = frontier_phi_75_pred_3;
                            _3361 = frontier_phi_75_pred_4;
                            _3360 = frontier_phi_75_pred_5;
                            _3068 = _3363 + _3081;
                            _3069 = _3364 + _3082;
                            _3070 = _3365 + _3083;
                            _3065 = _3360 + _3078;
                            _3066 = _3361 + _3079;
                            _3067 = _3362 + _3080;
                            if (_3085 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3078 = _3065;
                                _3079 = _3066;
                                _3080 = _3067;
                                _3081 = _3068;
                                _3082 = _3069;
                                _3083 = _3070;
                                _3084 = _3085;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3070;
                        frontier_phi_69_pred_1 = _3069;
                        frontier_phi_69_pred_2 = _3068;
                        frontier_phi_69_pred_3 = _3067;
                        frontier_phi_69_pred_4 = _3066;
                        frontier_phi_69_pred_5 = _3065;
                    }
                    _2737 = frontier_phi_69_pred;
                    _2735 = frontier_phi_69_pred_1;
                    _2733 = frontier_phi_69_pred_2;
                    _2731 = frontier_phi_69_pred_3;
                    _2729 = frontier_phi_69_pred_4;
                    _2727 = frontier_phi_69_pred_5;
                    uint _2872 = _2871 + 1u;
                    if (_2872 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2865 = _2727;
                        _2866 = _2729;
                        _2867 = _2731;
                        _2868 = _2733;
                        _2869 = _2735;
                        _2870 = _2737;
                        _2871 = _2872;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2737;
                frontier_phi_57_58_ladder_1 = _2735;
                frontier_phi_57_58_ladder_2 = _2733;
                frontier_phi_57_58_ladder_3 = _2731;
                frontier_phi_57_58_ladder_4 = _2729;
                frontier_phi_57_58_ladder_5 = _2727;
            }
            else
            {
                frontier_phi_57_58_ladder = _2624;
                frontier_phi_57_58_ladder_1 = _2622;
                frontier_phi_57_58_ladder_2 = _2620;
                frontier_phi_57_58_ladder_3 = _2618;
                frontier_phi_57_58_ladder_4 = _2616;
                frontier_phi_57_58_ladder_5 = _2614;
            }
            _2726 = frontier_phi_57_58_ladder_5;
            _2728 = frontier_phi_57_58_ladder_4;
            _2730 = frontier_phi_57_58_ladder_3;
            _2732 = frontier_phi_57_58_ladder_2;
            _2734 = frontier_phi_57_58_ladder_1;
            _2736 = frontier_phi_57_58_ladder;
        }
        float _2741 = isnan(1.0) ? _763 : (isnan(_763) ? 1.0 : min(_763, 1.0));
        _2521 = (_2741 * _2732) + _1955;
        _2523 = (_2741 * _2734) + _1957;
        _2525 = (_2741 * _2736) + _1959;
        _2527 = ((_2726 * _749) * _2741) + _2303;
        _2529 = ((_2728 * _750) * _2741) + _2305;
        _2531 = ((_2730 * _751) * _2741) + _2307;
    }
    else
    {
        _2521 = _1955;
        _2523 = _1957;
        _2525 = _1959;
        _2527 = _2303;
        _2529 = _2305;
        _2531 = _2307;
    }
    float _4392 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _4403 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _4414 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _4425 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _2549 = ((isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_2521 + ((isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))) * _763))) + ((_2527 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1568)) * cbPerFrame._m0[3u].x);
    float _2550 = ((isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_2523 + ((isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))) * _763))) + ((_2529 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1568)) * cbPerFrame._m0[3u].x);
    float _2551 = ((isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_2525 + ((isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))) * _763))) + ((_2531 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1568)) * cbPerFrame._m0[3u].x);
    float _2559 = cbInstanceData._m0[_655 + 6u].w * (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)));
    float _2564 = _552 / cbSceneParam._m0[86u].x;
    float _2565 = _553 / cbSceneParam._m0[86u].y;
    vec4 _2579 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2564, _2565, (log2((isnan(cbSceneParam._m0[77u].w) ? _486 : (isnan(_486) ? cbSceneParam._m0[77u].w : min(_486, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2581 = _2579.x;
    float _2582 = _2579.y;
    float _2583 = _2579.z;
    float _2584 = _2579.w;
    float _2676;
    float _2678;
    float _2680;
    float _2682;
    if (_486 > cbSceneParam._m0[78u].w)
    {
        float _2639 = isnan(_486) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _486 : min(cbSceneParam._m0[80u].w, _486));
        float _2640 = _2639 / _486;
        float _2651 = _2640 * _537;
        float _2652 = _538 * _2640;
        float _2653 = (-0.0) - _2652;
        float _2654 = _2640 * _539;
        float _2656 = (cbSceneParam._m0[77u].w * _2653) / _2639;
        float _2657 = _2656 + cbSceneParam._m0[79u].w;
        float _2658 = cbSceneParam._m0[79u].w - _2652;
        float _2664 = sqrt(((_2651 * _2651) + (_2652 * _2652)) + (_2654 * _2654));
        float _2667 = (1.0 - (cbSceneParam._m0[77u].w / _2639)) * _2664;
        float _2672 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2674 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2827;
        if (abs((_2653 - _2656) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2827 = ((((_2657 > 0.0) ? exp2(_2672 * _2657) : (2.0 - exp2(_2674 * _2657))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2667;
        }
        else
        {
            float _2787 = 1.0 / cbSceneParam._m0[80u].x;
            float _2788 = isnan(_2658) ? _2657 : (isnan(_2657) ? _2658 : max(_2657, _2658));
            float _2789 = isnan(_2658) ? _2657 : (isnan(_2657) ? _2658 : min(_2657, _2658));
            float _2798 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : min(_2788, 0.0));
            float _2799 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : min(_2789, 0.0));
            _2827 = ((abs(_2664 / _2653) * cbSceneParam._m0[80u].y) * ((((_2798 - _2799) * 2.0) - ((exp2(_2672 * (isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0)))) - exp2(_2672 * (isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0))))) * _2787)) - ((exp2(_2674 * _2798) - exp2(_2674 * _2799)) * _2787))) + (_2667 * cbSceneParam._m0[80u].z);
        }
        vec4 _2829 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2564, _2565, 1.0), 0.0);
        float _2838 = exp2((_2827 * (-1.44269502162933349609375)) * (1.0 - _2829.w));
        float _2839 = log2(_2838);
        float _2855 = log2(_2584);
        _2676 = (exp2(_2855 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2839 * cbSceneParam._m0[78u].x)) * _2829.x) / cbSceneParam._m0[78u].x)) + _2581;
        _2678 = (exp2(_2855 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2839 * cbSceneParam._m0[78u].y)) * _2829.y) / cbSceneParam._m0[78u].y)) + _2582;
        _2680 = (exp2(_2855 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2839 * cbSceneParam._m0[78u].z)) * _2829.z) / cbSceneParam._m0[78u].z)) + _2583;
        _2682 = _2838 * _2584;
    }
    else
    {
        _2676 = _2581;
        _2678 = _2582;
        _2680 = _2583;
        _2682 = _2584;
    }
    float _2694 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2695 = _2694 == 3.0;
    float _2696 = log2(_2682);
    float _2703 = exp2(_2696 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0)));
    float _2704 = exp2(_2696 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0)));
    float _2705 = exp2(_2696 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0)));
    float _2714 = (_2694 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2714 * (_2695 ? _2703 : (_2703 + (cbSceneParam._m0[72u].w * _2676)));
    SV_Target.y = _2714 * (_2695 ? _2704 : (_2704 + (cbSceneParam._m0[72u].w * _2678)));
    SV_Target.z = _2714 * (_2695 ? _2705 : (_2705 + (cbSceneParam._m0[72u].w * _2680)));
    SV_Target.w = _2559;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2559;
}


