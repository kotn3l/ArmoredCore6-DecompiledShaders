#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1183;
float _3856;
float _3857;
float _3858;
float _3859;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234;
    float _235;
    float _236;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
    }
    else
    {
        _234 = _220;
        _235 = _221;
        _236 = _222;
    }
    vec4 _250 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _255 = _250.z;
    float _261 = exp2(log2(_255 * 22.0) * 260.0);
    float _262 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _263 = isnan(1.0) ? _262 : (isnan(_262) ? 1.0 : min(_262, 1.0));
    vec4 _277 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _288 = cbMtdParam._m0[10u].x * _277.x;
    float _289 = cbMtdParam._m0[10u].y * _277.y;
    float _290 = cbMtdParam._m0[10u].z * _277.z;
    vec4 _302 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _337 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _345 = (((((cbMtdParam._m0[9u].x * _302.x) - _288) * _263) + _288) * 4.55000019073486328125) * _337.x;
    float _347 = (((((cbMtdParam._m0[9u].y * _302.y) - _289) * _263) + _289) * 4.55000019073486328125) * _337.y;
    float _349 = (((((cbMtdParam._m0[9u].z * _302.z) - _290) * _263) + _290) * 4.55000019073486328125) * _337.z;
    float _350 = _337.w * _302.w;
    vec4 _367 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _377 = (((_367.x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _263) + cbMtdParam._m0[15u].y;
    vec4 _390 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _392 = _390.x;
    float _393 = _390.y;
    float _399 = cbMtdParam._m0[13u].y + _390.z;
    vec4 _411 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _428 = (((_263 * (_255 + (-0.5))) + 0.5) * 2.0) * ((((_411.z - _399) + cbMtdParam._m0[13u].x) * _263) + _399);
    float _432 = (_250.x * 2.0) + (-1.0);
    float _434 = (_250.y * 2.0) + (-1.0);
    float _435 = dot(vec2(_432, _434), vec2(_432, _434));
    float _3878 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _440 = sqrt(1.0 - (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))));
    float _453 = ((((((_411.x - _392) * _263) + _392) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _432;
    float _454 = ((((((_411.y - _393) * _263) + _393) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _434;
    float _457 = fma(_440, _234, fma(_454, _226 * TANGENT.x, (_212 * _204) * _453));
    float _460 = fma(_440, _235, fma(_454, _226 * TANGENT.y, (_212 * _205) * _453));
    float _463 = fma(_440, _236, fma(_454, _226 * TANGENT.z, (_212 * _206) * _453));
    float _467 = inversesqrt(dot(vec3(_457, _460, _463), vec3(_457, _460, _463)));
    float _468 = _467 * _457;
    float _469 = _467 * _460;
    float _470 = _467 * _463;
    float _3889 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _471 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _3900 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _472 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _3911 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _473 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _3922 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _474 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _3933 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _475 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _3944 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _476 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _492 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _533 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _543 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _533);
    float _544 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _533);
    float _545 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _533);
    float _549 = inversesqrt(dot(vec3(_543, _544, _545), vec3(_543, _544, _545)));
    float _550 = _543 * _549;
    float _551 = _544 * _549;
    float _552 = _545 * _549;
    vec4 _557 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _559 = _557.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _864 = sqrt(((_543 * _543) + (_544 * _544)) + (_545 * _545));
        float _870 = (cbMatDynParam._m0[5u].x * _864) + cbMatDynParam._m0[5u].y;
        float _3955 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _875 = (cbMatDynParam._m0[5u].z * _864) + cbMatDynParam._m0[5u].w;
        float _3966 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) - _871)) + _871) < ((_559 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _570 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _571 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _573 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _575 = _573.w;
    float _594 = fma(_470, cbSceneParam._m0[5u].z, fma(_469, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _468));
    float _597 = fma(_470, cbSceneParam._m0[6u].z, fma(_469, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _468));
    float _600 = fma(_470, cbSceneParam._m0[7u].z, fma(_469, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _468));
    vec4 _602 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _604 = _602.x;
    float _616 = (((_602.y - _472) + (_602.w * _472)) * cbMtdParam._m0[3u].x) + _472;
    float _633 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_604 * _604)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _641 = (((cbMatDynParam._m0[15u].x - _476) * cbMatDynParam._m0[15u].w) * _633) + _476;
    float _649 = ((_633 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _616)) + _616;
    uint _673 = uint(roundEven(NORMAL.w)) * 13u;
    uint _674 = _673 + 9u;
    uint _675 = _674 + uint(cbMatDynParam._m0[0u].w);
    float _681 = (cbMtdParam._m0[0u].x * _473) * cbInstanceData._m0[_675].x;
    float _682 = (cbMtdParam._m0[0u].y * _474) * cbInstanceData._m0[_675].y;
    float _683 = (cbMtdParam._m0[0u].z * _475) * cbInstanceData._m0[_675].z;
    float _3977 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _684 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _3988 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _685 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _3999 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _686 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    vec4 _687 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _692 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _703 = (((_692.x - _641) + (_692.w * _641)) * cbMtdParam._m0[3u].x) + _641;
    float _716 = (cbMtdParam._m0[3u].x * (((_684 * _575) - _684) + _687.x)) + _684;
    float _717 = (cbMtdParam._m0[3u].x * (((_685 * _575) - _685) + _687.y)) + _685;
    float _718 = (cbMtdParam._m0[3u].x * (((_686 * _575) - _686) + _687.z)) + _686;
    vec4 _719 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _732 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_641 * (_473 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_641 * (_474 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_641 * (_475 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _719.z;
    float _736 = _732 * cbMatDynParam._m0[13u].w;
    float _746 = (_736 * (cbMatDynParam._m0[13u].x - _716)) + _716;
    float _747 = (_736 * (cbMatDynParam._m0[13u].y - _717)) + _717;
    float _748 = (_736 * (cbMatDynParam._m0[13u].z - _718)) + _718;
    float _756 = ((_732 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _703)) + _703;
    float _757 = 1.0 - _756;
    float _758 = _757 * _746;
    float _759 = _757 * _747;
    float _760 = _757 * _748;
    float _764 = (_746 + (-0.039999999105930328369140625)) * _756;
    float _765 = (_747 + (-0.039999999105930328369140625)) * _756;
    float _766 = (_748 + (-0.039999999105930328369140625)) * _756;
    float _767 = _764 + 0.039999999105930328369140625;
    float _768 = _765 + 0.039999999105930328369140625;
    float _769 = _766 + 0.039999999105930328369140625;
    vec4 _778 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _570, cbSceneParam._m0[86u].y * _571));
    float _781 = _778.x * TEXCOORD_4;
    float _782 = dot(vec3(_468, _469, _470), vec3(_550, _551, _552));
    float _785 = _782 * 2.0;
    float _789 = (_785 * _468) - _550;
    float _790 = (_785 * _469) - _551;
    float _791 = (_785 * _470) - _552;
    float _795 = abs(dot(vec3(_550, _551, _552), vec3(_468, _469, _470)));
    float _4010 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _797 = sqrt(_649);
    float _810 = exp2((_797 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_797 * 3.0));
    float _816 = (1.0 - _810) * ((_797 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _817 = _810 * _797;
    float _845 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _849 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _853 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1182;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _909 = fma(_853, cbModelParam._m0[26u].z, fma(_849, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _845));
        float _913 = fma(_853, cbModelParam._m0[27u].z, fma(_849, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _845));
        float _917 = fma(_853, cbModelParam._m0[28u].z, fma(_849, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _845));
        float _940 = _845 + _468;
        float _941 = _849 + _469;
        float _942 = _853 + _470;
        float _952 = fma(_942, cbModelParam._m0[26u].z, fma(_941, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _940)) - _909;
        float _953 = fma(_942, cbModelParam._m0[27u].z, fma(_941, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _940)) - _913;
        float _954 = fma(_942, cbModelParam._m0[28u].z, fma(_941, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _940)) - _917;
        float _958 = inversesqrt(dot(vec3(_952, _953, _954), vec3(_952, _953, _954)));
        float _971 = ((_958 * _952) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_909 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _972 = ((_958 * _953) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_913 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _973 = ((_958 * _954) / cbModelParam._m0[34u].z) + ((((((_917 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        float _1010 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_976.x + (-0.5));
        float _1012 = _1010 * (_976.y + (-0.5));
        float _1013 = _1010 * (_976.z + (-0.5));
        float _1020 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_983.x + (-0.5));
        float _1022 = _1020 * (_983.y + (-0.5));
        float _1023 = _1020 * (_983.z + (-0.5));
        float _1030 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_990.x + (-0.5));
        float _1032 = _1030 * (_990.y + (-0.5));
        float _1033 = _1030 * (_990.z + (-0.5));
        float _1040 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_997.x + (-0.5));
        float _1042 = _1040 * (_997.y + (-0.5));
        float _1043 = _1040 * (_997.z + (-0.5));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1047 = _1011 * 0.5;
        float _1048 = _1021 * 0.5;
        float _1049 = _1031 * 0.5;
        float _1050 = dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049));
        float _1055 = (_1050 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1050);
        float _1064 = (dot(vec3(_468, _469, _470), vec3(_1055 * _1047, _1055 * _1048, _1055 * _1049)) + 1.0) * 0.5;
        float _4036 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1074 = sqrt(((_1048 * _1048) + (_1047 * _1047)) + (_1049 * _1049)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _4047 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1076 = _1075 * 2.0;
        float _1080 = (1.0 - _1075) / (_1075 + 1.0);
        float _4058 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1090 = ((((1.0 - _1081) * (_1076 + 2.0)) * exp2(log2(isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_1076 + 1.0))) + _1081) * _1044;
        float _1091 = _1012 * 0.5;
        float _1092 = _1022 * 0.5;
        float _1093 = _1032 * 0.5;
        float _1094 = dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093));
        float _1099 = (_1094 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1094);
        float _1107 = (dot(vec3(_468, _469, _470), vec3(_1099 * _1091, _1099 * _1092, _1099 * _1093)) + 1.0) * 0.5;
        float _4069 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1116 = sqrt(((_1092 * _1092) + (_1091 * _1091)) + (_1093 * _1093)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _4080 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1118 = _1117 * 2.0;
        float _1122 = (1.0 - _1117) / (_1117 + 1.0);
        float _4091 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1132 = ((((1.0 - _1123) * (_1118 + 2.0)) * exp2(log2(isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_1118 + 1.0))) + _1123) * _1045;
        float _1133 = _1013 * 0.5;
        float _1134 = _1023 * 0.5;
        float _1135 = _1033 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1149 = (dot(vec3(_468, _469, _470), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _4102 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1158 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1046 + 9.9999997473787516355514526367188e-06);
        float _4113 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _4124 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_1160 + 1.0))) + _1165) * _1046;
        _1182 = _1013;
        _1184 = _1012;
        _1185 = _1011;
        _1186 = _1023;
        _1187 = _1022;
        _1188 = _1021;
        _1189 = _1033;
        _1190 = _1032;
        _1191 = _1031;
        _1192 = _1046;
        _1193 = _1045;
        _1194 = _1044;
        _1195 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0)));
        _1196 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)));
        _1197 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
    }
    else
    {
        _1182 = _1183;
        _1184 = _1183;
        _1185 = _1183;
        _1186 = _1183;
        _1187 = _1183;
        _1188 = _1183;
        _1189 = _1183;
        _1190 = _1183;
        _1191 = _1183;
        _1192 = _1183;
        _1193 = _1183;
        _1194 = _1183;
        _1195 = 0.0;
        _1196 = 0.0;
        _1197 = 0.0;
    }
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1226 = fma(_853, cbModelParam._m0[30u].z, fma(_849, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _845));
        float _1230 = fma(_853, cbModelParam._m0[31u].z, fma(_849, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _845));
        float _1234 = fma(_853, cbModelParam._m0[32u].z, fma(_849, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _845));
        float _1257 = _845 + _468;
        float _1258 = _849 + _469;
        float _1259 = _853 + _470;
        float _1269 = fma(_1259, cbModelParam._m0[30u].z, fma(_1258, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1257)) - _1226;
        float _1270 = fma(_1259, cbModelParam._m0[31u].z, fma(_1258, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1257)) - _1230;
        float _1271 = fma(_1259, cbModelParam._m0[32u].z, fma(_1258, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1257)) - _1234;
        float _1275 = inversesqrt(dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271)));
        float _1288 = ((_1275 * _1269) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1226 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1289 = ((_1275 * _1270) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1230 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1290 = ((_1275 * _1271) / cbModelParam._m0[35u].z) + ((((((_1234 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1288, _1289, _1290), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1288, _1289, _1290), 0.0);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1288, _1289, _1290), 0.0);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1288, _1289, _1290), 0.0);
        float _1325 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1292.x + (-0.5));
        float _1327 = _1325 * (_1292.y + (-0.5));
        float _1328 = _1325 * (_1292.z + (-0.5));
        float _1335 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1299.x + (-0.5));
        float _1337 = _1335 * (_1299.y + (-0.5));
        float _1338 = _1335 * (_1299.z + (-0.5));
        float _1345 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1306.x + (-0.5));
        float _1347 = _1345 * (_1306.y + (-0.5));
        float _1348 = _1345 * (_1306.z + (-0.5));
        float _1355 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1313.x + (-0.5));
        float _1357 = _1355 * (_1313.y + (-0.5));
        float _1358 = _1355 * (_1313.z + (-0.5));
        float _1359 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1362 = _1326 * 0.5;
        float _1363 = _1336 * 0.5;
        float _1364 = _1346 * 0.5;
        float _1365 = dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364));
        float _1370 = (_1365 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1365);
        float _1378 = (dot(vec3(_468, _469, _470), vec3(_1370 * _1362, _1370 * _1363, _1370 * _1364)) + 1.0) * 0.5;
        float _4165 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1387 = sqrt(((_1363 * _1363) + (_1362 * _1362)) + (_1364 * _1364)) / (_1359 + 9.9999997473787516355514526367188e-06);
        float _4176 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1389 = _1388 * 2.0;
        float _1393 = (1.0 - _1388) / (_1388 + 1.0);
        float _4187 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1403 = ((((1.0 - _1394) * (_1389 + 2.0)) * exp2(log2(isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_1389 + 1.0))) + _1394) * _1359;
        float _1404 = _1327 * 0.5;
        float _1405 = _1337 * 0.5;
        float _1406 = _1347 * 0.5;
        float _1407 = dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406));
        float _1412 = (_1407 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1407);
        float _1420 = (dot(vec3(_468, _469, _470), vec3(_1412 * _1404, _1412 * _1405, _1412 * _1406)) + 1.0) * 0.5;
        float _4198 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1429 = sqrt(((_1405 * _1405) + (_1404 * _1404)) + (_1406 * _1406)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _4209 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1431 = _1430 * 2.0;
        float _1435 = (1.0 - _1430) / (_1430 + 1.0);
        float _4220 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1445 = ((((1.0 - _1436) * (_1431 + 2.0)) * exp2(log2(isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_1431 + 1.0))) + _1436) * _1360;
        float _1446 = _1328 * 0.5;
        float _1447 = _1338 * 0.5;
        float _1448 = _1348 * 0.5;
        float _1449 = dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448));
        float _1454 = (_1449 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1449);
        float _1462 = (dot(vec3(_468, _469, _470), vec3(_1454 * _1446, _1454 * _1447, _1454 * _1448)) + 1.0) * 0.5;
        float _4231 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1471 = sqrt(((_1447 * _1447) + (_1446 * _1446)) + (_1448 * _1448)) / (_1361 + 9.9999997473787516355514526367188e-06);
        float _4242 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1473 = _1472 * 2.0;
        float _1477 = (1.0 - _1472) / (_1472 + 1.0);
        float _4253 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1487 = ((((1.0 - _1478) * (_1473 + 2.0)) * exp2(log2(isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_1473 + 1.0))) + _1478) * _1361;
        _1495 = _1328;
        _1496 = _1327;
        _1497 = _1326;
        _1498 = _1338;
        _1499 = _1337;
        _1500 = _1336;
        _1501 = _1348;
        _1502 = _1347;
        _1503 = _1346;
        _1504 = _1361;
        _1505 = _1360;
        _1506 = _1359;
        _1507 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)));
        _1508 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)));
        _1509 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)));
    }
    else
    {
        _1495 = _1183;
        _1496 = _1183;
        _1497 = _1183;
        _1498 = _1183;
        _1499 = _1183;
        _1500 = _1183;
        _1501 = _1183;
        _1502 = _1183;
        _1503 = _1183;
        _1504 = _1183;
        _1505 = _1183;
        _1506 = _1183;
        _1507 = 0.0;
        _1508 = 0.0;
        _1509 = 0.0;
    }
    float _1519 = (cbModelParam._m0[1u].x * (_1507 - _1195)) + _1195;
    float _1520 = (cbModelParam._m0[1u].x * (_1508 - _1196)) + _1196;
    float _1521 = (cbModelParam._m0[1u].x * (_1509 - _1197)) + _1197;
    float _1542 = fma(_1521, cbSceneParam._m0[89u].z, fma(_1520, cbSceneParam._m0[89u].y, _1519 * cbSceneParam._m0[89u].x));
    float _1545 = fma(_1521, cbSceneParam._m0[90u].z, fma(_1520, cbSceneParam._m0[90u].y, _1519 * cbSceneParam._m0[90u].x));
    float _1548 = fma(_1521, cbSceneParam._m0[91u].z, fma(_1520, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1519));
    float _1563 = _789 * 0.5;
    float _1564 = _790 * 0.5;
    float _1565 = _791 * 0.5;
    float _1566 = dot(vec4(_1563, _1564, _1565, 1.0), vec4(_1497, _1500, _1503, _1506));
    float _1569 = dot(vec4(_1563, _1564, _1565, 1.0), vec4(_1496, _1499, _1502, _1505));
    float _1572 = dot(vec4(_1563, _1564, _1565, 1.0), vec4(_1495, _1498, _1501, _1504));
    float _1603;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1579 = dot(vec4(_1563, _1564, _1565, 1.0), vec4(_1182, _1186, _1189, _1192));
        float _1583 = dot(vec4(_1563, _1564, _1565, 1.0), vec4(_1184, _1187, _1190, _1193));
        float _1587 = dot(vec4(_1563, _1564, _1565, 1.0), vec4(_1185, _1188, _1191, _1194));
        float _1594 = dot(vec4(cbModelParam._m0[39u]), vec4(_1563, _1564, _1565, 1.0));
        _1603 = dot(vec3(isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)), isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)), isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1594) ? 0.0 : (isnan(0.0) ? _1594 : max(0.0, _1594))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1603 = 1.0;
    }
    float _1614;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1605 = dot(vec4(cbModelParam._m0[40u]), vec4(_1563, _1564, _1565, 1.0));
        _1614 = dot(vec3(isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)), isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)), isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1605) ? 0.0 : (isnan(0.0) ? _1605 : max(0.0, _1605))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1614 = 1.0;
    }
    float _1618 = (_1614 * cbModelParam._m0[1u].x) + (_1603 * (1.0 - cbModelParam._m0[1u].x));
    float _1628 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _649);
    float _1629 = isnan(_1628) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1628 : min(cbModelParam._m0[25u].z, _1628));
    float _1709;
    float _1711;
    float _1713;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1676 = fma(_853, cbModelParam._m0[13u].z, fma(_849, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _845)) + cbModelParam._m0[13u].w;
        float _1680 = fma(_853, cbModelParam._m0[14u].z, fma(_849, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _845)) + cbModelParam._m0[14u].w;
        float _1684 = fma(_853, cbModelParam._m0[15u].z, fma(_849, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _845)) + cbModelParam._m0[15u].w;
        float _1687 = fma(_791, cbModelParam._m0[13u].z, fma(_790, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _789));
        float _1690 = fma(_791, cbModelParam._m0[14u].z, fma(_790, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _789));
        float _1693 = fma(_791, cbModelParam._m0[15u].z, fma(_790, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _789));
        float _1721;
        if (_1687 > 0.0)
        {
            _1721 = abs((1.0 - _1676) / _1687);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1676 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1721 = frontier_phi_19_17_ladder;
        }
        float _1897;
        if (_1690 > 0.0)
        {
            _1897 = abs((1.0 - _1680) / _1690);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1680 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1897 = frontier_phi_28_24_ladder;
        }
        float _2193;
        if (_1693 > 0.0)
        {
            _2193 = abs((1.0 - _1684) / _1693);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1684 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2193 = frontier_phi_40_35_ladder;
        }
        float _2195 = isnan(_1897) ? _1721 : (isnan(_1721) ? _1897 : min(_1721, _1897));
        float _2196 = isnan(_2193) ? _2195 : (isnan(_2195) ? _2193 : min(_2195, _2193));
        float _2200 = (_2196 * _1687) + _1676;
        float _2201 = (_2196 * _1690) + _1680;
        float _2202 = (_2196 * _1693) + _1684;
        float _2203 = _2196 * 9.9999997473787516355514526367188e-05;
        float _2205 = (-1.0) - _2203;
        float _2207 = _2203 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2202 > _2207) || ((_2202 < _2205) || ((_2201 > _2207) || ((_2201 < _2205) || ((_2200 < _2205) || (_2200 > _2207))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2347 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2202, cbModelParam._m0[9u].z, fma(_2201, cbModelParam._m0[9u].y, _2200 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2202, cbModelParam._m0[10u].z, fma(_2201, cbModelParam._m0[10u].y, _2200 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2202, cbModelParam._m0[11u].z, fma(_2201, cbModelParam._m0[11u].y, _2200 * cbModelParam._m0[11u].x))), _1629);
            frontier_phi_18_40_ladder = _2347.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2347.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2347.x * cbModelParam._m0[1u].y;
        }
        _1709 = frontier_phi_18_40_ladder_2;
        _1711 = frontier_phi_18_40_ladder_1;
        _1713 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1697 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_789, _790, _791), _1629);
        _1709 = _1697.x * cbModelParam._m0[1u].y;
        _1711 = _1697.y * cbModelParam._m0[1u].y;
        _1713 = _1697.z * cbModelParam._m0[1u].y;
    }
    float _1717 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _649);
    float _1718 = isnan(_1717) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1717 : min(cbModelParam._m0[25u].w, _1717));
    float _1811;
    float _1813;
    float _1815;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1775 = fma(_853, cbModelParam._m0[21u].z, fma(_849, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _845)) + cbModelParam._m0[21u].w;
        float _1779 = fma(_853, cbModelParam._m0[22u].z, fma(_849, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _845)) + cbModelParam._m0[22u].w;
        float _1783 = fma(_853, cbModelParam._m0[23u].z, fma(_849, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _845)) + cbModelParam._m0[23u].w;
        float _1786 = fma(_791, cbModelParam._m0[21u].z, fma(_790, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _789));
        float _1789 = fma(_791, cbModelParam._m0[22u].z, fma(_790, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _789));
        float _1792 = fma(_791, cbModelParam._m0[23u].z, fma(_790, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _789));
        float _1902;
        if (_1786 > 0.0)
        {
            _1902 = abs((1.0 - _1775) / _1786);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1775 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1902 = frontier_phi_30_26_ladder;
        }
        float _2220;
        if (_1789 > 0.0)
        {
            _2220 = abs((1.0 - _1779) / _1789);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1779 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2220 = frontier_phi_42_37_ladder;
        }
        float _2558;
        if (_1792 > 0.0)
        {
            _2558 = abs((1.0 - _1783) / _1792);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1783 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2558 = frontier_phi_52_49_ladder;
        }
        float _2560 = isnan(_2220) ? _1902 : (isnan(_1902) ? _2220 : min(_1902, _2220));
        float _2561 = isnan(_2558) ? _2560 : (isnan(_2560) ? _2558 : min(_2560, _2558));
        float _2565 = (_2561 * _1786) + _1775;
        float _2566 = (_2561 * _1789) + _1779;
        float _2567 = (_2561 * _1792) + _1783;
        float _2568 = _2561 * 9.9999997473787516355514526367188e-05;
        float _2569 = (-1.0) - _2568;
        float _2571 = _2568 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2567 > _2571) || ((_2567 < _2569) || ((_2566 > _2571) || ((_2566 < _2569) || ((_2565 < _2569) || (_2565 > _2571))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2689 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2567, cbModelParam._m0[17u].z, fma(_2566, cbModelParam._m0[17u].y, _2565 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2567, cbModelParam._m0[18u].z, fma(_2566, cbModelParam._m0[18u].y, _2565 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2567, cbModelParam._m0[19u].z, fma(_2566, cbModelParam._m0[19u].y, _2565 * cbModelParam._m0[19u].x))), _1718);
            frontier_phi_27_52_ladder = _2689.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2689.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2689.x * cbModelParam._m0[1u].z;
        }
        _1811 = frontier_phi_27_52_ladder_2;
        _1813 = frontier_phi_27_52_ladder_1;
        _1815 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1795 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_789, _790, _791), _1718);
        _1811 = _1795.x * cbModelParam._m0[1u].z;
        _1813 = _1795.y * cbModelParam._m0[1u].z;
        _1815 = _1795.z * cbModelParam._m0[1u].z;
    }
    float _1828 = (((_816 * _767) + _817) * _781) * ((cbModelParam._m0[1u].w * (_1811 - _1709)) + _1709);
    float _1830 = (((_816 * _768) + _817) * _781) * ((cbModelParam._m0[1u].w * (_1813 - _1711)) + _1711);
    float _1832 = (((_816 * _769) + _817) * _781) * ((cbModelParam._m0[1u].w * (_1815 - _1713)) + _1713);
    float _1835 = fma(_1832, cbSceneParam._m0[89u].z, fma(_1830, cbSceneParam._m0[89u].y, _1828 * cbSceneParam._m0[89u].x));
    float _1838 = fma(_1832, cbSceneParam._m0[90u].z, fma(_1830, cbSceneParam._m0[90u].y, _1828 * cbSceneParam._m0[90u].x));
    float _1841 = fma(_1832, cbSceneParam._m0[91u].z, fma(_1830, cbSceneParam._m0[91u].y, _1828 * cbSceneParam._m0[91u].x));
    float _1876 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1880 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1884 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1888 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1889 = _1876 / _1888;
    float _1890 = _1880 / _1888;
    float _1891 = _1884 / _1888;
    float _2038;
    float _2039;
    float _2040;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1918 = ((uint(_1891 > cbSceneParam._m0[59u].y) + uint(_1891 > cbSceneParam._m0[59u].x)) + uint(_1891 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1919 = _1918 + 43u;
        uint _1927 = _1918 + 44u;
        uint _1935 = _1918 + 45u;
        uint _1943 = _1918 + 46u;
        float _1954 = fma(_1888, cbSceneParam._m0[_1919].w, fma(_1884, cbSceneParam._m0[_1919].z, fma(_1880, cbSceneParam._m0[_1919].y, _1876 * cbSceneParam._m0[_1919].x)));
        float _1958 = fma(_1888, cbSceneParam._m0[_1927].w, fma(_1884, cbSceneParam._m0[_1927].z, fma(_1880, cbSceneParam._m0[_1927].y, _1876 * cbSceneParam._m0[_1927].x)));
        float _1966 = fma(_1888, cbSceneParam._m0[_1943].w, fma(_1884, cbSceneParam._m0[_1943].z, fma(_1880, cbSceneParam._m0[_1943].y, _1876 * cbSceneParam._m0[_1943].x)));
        float _1971 = cbSceneParam._m0[33u].z * _1966;
        float _1973 = cbSceneParam._m0[33u].w * _1966;
        float _1976 = fma(_1888, cbSceneParam._m0[_1935].w, fma(_1884, cbSceneParam._m0[_1935].z, fma(_1880, cbSceneParam._m0[_1935].y, _1876 * cbSceneParam._m0[_1935].x))) / _1966;
        float _2024 = (cbSceneParam._m0[33u].x - sqrt(((_1890 * _1890) + (_1889 * _1889)) + (_1891 * _1891))) * cbSceneParam._m0[33u].y;
        float _4379 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        float _2031 = (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1971 + _1954) / _1966, (_1973 + _1958) / _1966), _1976), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1973 + _1954) / _1966, (_1958 - _1971) / _1966), _1976), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1954 - _1971) / _1966, (_1958 - _1973) / _1966), _1976), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1954 - _1973) / _1966, (_1971 + _1958) / _1966), _1976), 0.0)).x), vec4(0.25)));
        _2038 = 1.0 - (_2031 * cbSceneParam._m0[34u].x);
        _2039 = 1.0 - (_2031 * cbSceneParam._m0[34u].y);
        _2040 = 1.0 - (_2031 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2038 = 1.0;
        _2039 = 1.0;
        _2040 = 1.0;
    }
    float _2104;
    float _2106;
    float _2108;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2092 = fma(_1888, cbSceneParam._m0[63u].w, fma(_1884, cbSceneParam._m0[63u].z, fma(_1880, cbSceneParam._m0[63u].y, _1876 * cbSceneParam._m0[63u].x)));
        float _2093 = fma(_1888, cbSceneParam._m0[60u].w, fma(_1884, cbSceneParam._m0[60u].z, fma(_1880, cbSceneParam._m0[60u].y, _1876 * cbSceneParam._m0[60u].x))) / _2092;
        float _2094 = fma(_1888, cbSceneParam._m0[61u].w, fma(_1884, cbSceneParam._m0[61u].z, fma(_1880, cbSceneParam._m0[61u].y, _1876 * cbSceneParam._m0[61u].x))) / _2092;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2093 >= cbSceneParam._m0[64u].x) && (_2094 >= cbSceneParam._m0[64u].y)) && (_2093 <= cbSceneParam._m0[64u].z)) && (_2094 <= cbSceneParam._m0[64u].w))
        {
            float _2233 = fma(_1888, cbSceneParam._m0[62u].w, fma(_1884, cbSceneParam._m0[62u].z, fma(_1880, cbSceneParam._m0[62u].y, _1876 * cbSceneParam._m0[62u].x))) / _2092;
            float _2237 = isnan(cbSceneParam._m0[41u].w) ? _2233 : (isnan(_2233) ? cbSceneParam._m0[41u].w : max(_2233, cbSceneParam._m0[41u].w));
            float _2280 = (cbSceneParam._m0[33u].x - sqrt(((_1890 * _1890) + (_1889 * _1889)) + (_1891 * _1891))) * cbSceneParam._m0[33u].y;
            float _4395 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
            float _2287 = (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2093, cbSceneParam._m0[33u].w + _2094), _2237), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2093, _2094 - cbSceneParam._m0[33u].z), _2237), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2093 - cbSceneParam._m0[33u].z, _2094 - cbSceneParam._m0[33u].w), _2237), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2093 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2094), _2237), 0.0)).x), vec4(0.25)));
            float _2291 = 1.0 - (_2287 * cbSceneParam._m0[34u].x);
            float _2292 = 1.0 - (_2287 * cbSceneParam._m0[34u].y);
            float _2293 = 1.0 - (_2287 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2292) ? _2039 : (isnan(_2039) ? _2292 : min(_2039, _2292));
            frontier_phi_39_38_ladder_1 = isnan(_2291) ? _2038 : (isnan(_2038) ? _2291 : min(_2038, _2291));
            frontier_phi_39_38_ladder_2 = isnan(_2293) ? _2040 : (isnan(_2040) ? _2293 : min(_2040, _2293));
        }
        else
        {
            frontier_phi_39_38_ladder = _2039;
            frontier_phi_39_38_ladder_1 = _2038;
            frontier_phi_39_38_ladder_2 = _2040;
        }
        _2104 = frontier_phi_39_38_ladder_1;
        _2106 = frontier_phi_39_38_ladder;
        _2108 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2104 = _2038;
        _2106 = _2039;
        _2108 = _2040;
    }
    uvec4 _2113 = floatBitsToUint(cbInstanceData._m0[_673 + 5u]);
    uint _2115 = _2113.x * 14u;
    uint _2116 = _2115 + 13u;
    float _2123 = _781 + (-1.0);
    float _2128 = (cbLight._m0[_2116].x * _2123) + 1.0;
    float _2129 = (cbLight._m0[_2116].y * _2123) + 1.0;
    float _2130 = (cbLight._m0[_2116].z * _2123) + 1.0;
    float _2131 = (cbLight._m0[_2116].w * _2123) + 1.0;
    uint _2132 = _2115 + 5u;
    float _2138 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
    uint _2142 = _2115 + 4u;
    float _2152 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
    uint _2156 = _2115 | 1u;
    float _2167 = dot(vec3(cbLight._m0[_2115].xyz), vec3(_468, _469, _470));
    float _2170 = dot(vec3(cbLight._m0[_2156].xyz), vec3(_468, _469, _470));
    float _4431 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _4442 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2175 = (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * 0.3183098733425140380859375;
    float _2177 = (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * 0.3183098733425140380859375;
    float _2184 = ((cbLight._m0[_2132].x * _2138) * _2177) + (((cbLight._m0[_2142].x * _2104) * _2152) * _2175);
    float _2185 = ((_2138 * cbLight._m0[_2132].y) * _2177) + (((cbLight._m0[_2142].y * _2106) * _2152) * _2175);
    float _2186 = ((_2138 * cbLight._m0[_2132].z) * _2177) + (((cbLight._m0[_2142].z * _2108) * _2152) * _2175);
    uvec4 _2190 = floatBitsToUint(cbLight._m0[_2115 + 12u]);
    bool _2192 = _2190.x == 0u;
    float _2294;
    float _2296;
    float _2298;
    if (_2192)
    {
        _2294 = _2184;
        _2296 = _2185;
        _2298 = _2186;
    }
    else
    {
        uint _2302 = _2115 + 6u;
        float _2318 = (dot(vec3(cbLight._m0[_2115 + 2u].xyz), vec3(_468, _469, _470)) * 0.5) + 0.5;
        float _2319 = _2318 * _2318;
        float _4453 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2320 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _2321 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
        _2294 = (((cbLight._m0[_2302].x * 0.3183098733425140380859375) * _2320) * _2321) + _2184;
        _2296 = (((cbLight._m0[_2302].y * 0.3183098733425140380859375) * _2320) * _2321) + _2185;
        _2298 = (((cbLight._m0[_2302].z * 0.3183098733425140380859375) * _2320) * _2321) + _2186;
    }
    bool _2301 = _2190.y == 0u;
    float _2356;
    float _2358;
    float _2360;
    if (_2301)
    {
        _2356 = _2294;
        _2358 = _2296;
        _2360 = _2298;
    }
    else
    {
        uint _2529 = _2115 + 7u;
        float _2545 = (dot(vec3(cbLight._m0[_2115 + 3u].xyz), vec3(_468, _469, _470)) * 0.5) + 0.5;
        float _2546 = _2545 * _2545;
        float _4469 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2547 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _2548 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
        _2356 = (((cbLight._m0[_2529].x * 0.3183098733425140380859375) * _2547) * _2548) + _2294;
        _2358 = (((cbLight._m0[_2529].y * 0.3183098733425140380859375) * _2547) * _2548) + _2296;
        _2360 = (((cbLight._m0[_2529].z * 0.3183098733425140380859375) * _2547) * _2548) + _2298;
    }
    uint _2363 = _2115 + 8u;
    float _2376 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2115].w)) * _649) * 0.949999988079071044921875);
    float _2377 = _2376 * _2376;
    float _2378 = cbLight._m0[_2115].x + _550;
    float _2379 = cbLight._m0[_2115].y + _551;
    float _2380 = cbLight._m0[_2115].z + _552;
    float _2384 = inversesqrt(dot(vec3(_2378, _2379, _2380), vec3(_2378, _2379, _2380)));
    float _2385 = _2384 * _2378;
    float _2386 = _2384 * _2379;
    float _2387 = _2384 * _2380;
    float _2388 = dot(vec3(_468, _469, _470), vec3(cbLight._m0[_2115].xyz));
    float _4485 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2391 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
    float _4496 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _2392 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
    float _2393 = dot(vec3(_468, _469, _470), vec3(_2385, _2386, _2387));
    float _4507 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2396 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
    float _2397 = dot(vec3(cbLight._m0[_2115].xyz), vec3(_2385, _2386, _2387));
    float _4518 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2401 = _2377 * _2377;
    float _2405 = ((_2396 * _2396) * (_2401 + (-1.0))) + 1.0;
    float _2413 = exp2(log2(1.0 - (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0)))) * 5.0);
    float _2414 = 0.959999978542327880859375 - _764;
    float _2416 = 0.959999978542327880859375 - _765;
    float _2417 = 0.959999978542327880859375 - _766;
    float _2424 = 1.0 - _2377;
    float _2435 = (0.5 / (((_2392 * ((_2391 * _2424) + _2377)) + 9.9999999392252902907785028219223e-09) + (((_2392 * _2424) + _2377) * _2391))) * _2391;
    float _4529 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _2437 = (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_2401 / ((_2405 * _2405) * 3.141590118408203125));
    uint _2451 = _2115 + 9u;
    float _2462 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2156].w)) * _649) * 0.949999988079071044921875);
    float _2463 = _2462 * _2462;
    float _2464 = cbLight._m0[_2156].x + _550;
    float _2465 = cbLight._m0[_2156].y + _551;
    float _2466 = cbLight._m0[_2156].z + _552;
    float _2470 = inversesqrt(dot(vec3(_2464, _2465, _2466), vec3(_2464, _2465, _2466)));
    float _2471 = _2470 * _2464;
    float _2472 = _2470 * _2465;
    float _2473 = _2470 * _2466;
    float _2474 = dot(vec3(_468, _469, _470), vec3(cbLight._m0[_2156].xyz));
    float _4540 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
    float _2477 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
    float _2478 = dot(vec3(_468, _469, _470), vec3(_2471, _2472, _2473));
    float _4551 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
    float _2481 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
    float _2482 = dot(vec3(cbLight._m0[_2156].xyz), vec3(_2471, _2472, _2473));
    float _4562 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2486 = _2463 * _2463;
    float _2490 = ((_2481 * _2481) * (_2486 + (-1.0))) + 1.0;
    float _2497 = exp2(log2(1.0 - (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0)))) * 5.0);
    float _2504 = 1.0 - _2463;
    float _2514 = (0.5 / (((_2392 * ((_2477 * _2504) + _2463)) + 9.9999999392252902907785028219223e-09) + (((_2392 * _2504) + _2463) * _2477))) * _2477;
    float _4573 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
    float _2516 = (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2486 / ((_2490 * _2490) * 3.141590118408203125));
    float _2526 = (((((_2497 * _2414) + _767) * cbLight._m0[_2451].x) * _2516) * _2138) + ((((cbLight._m0[_2363].x * _2104) * ((_2413 * _2414) + _767)) * _2437) * _2152);
    float _2527 = (((((_2497 * _2416) + _768) * cbLight._m0[_2451].y) * _2516) * _2138) + ((((cbLight._m0[_2363].y * _2106) * ((_2413 * _2416) + _768)) * _2437) * _2152);
    float _2528 = (((((_2497 * _2417) + _769) * cbLight._m0[_2451].z) * _2516) * _2138) + ((((cbLight._m0[_2363].z * _2108) * ((_2413 * _2417) + _769)) * _2437) * _2152);
    float _2584;
    float _2586;
    float _2588;
    if (_2192)
    {
        _2584 = _2526;
        _2586 = _2527;
        _2588 = _2528;
    }
    else
    {
        uint _2590 = _2115 + 2u;
        uint _2594 = _2115 + 10u;
        float _2608 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2590].w)) * _649) * 0.949999988079071044921875);
        float _2609 = _2608 * _2608;
        float _2610 = cbLight._m0[_2590].x + _550;
        float _2611 = cbLight._m0[_2590].y + _551;
        float _2612 = cbLight._m0[_2590].z + _552;
        float _2616 = inversesqrt(dot(vec3(_2610, _2611, _2612), vec3(_2610, _2611, _2612)));
        float _2617 = _2616 * _2610;
        float _2618 = _2616 * _2611;
        float _2619 = _2616 * _2612;
        float _2620 = dot(vec3(_468, _469, _470), vec3(cbLight._m0[_2590].xyz));
        float _4584 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2623 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _2624 = dot(vec3(_468, _469, _470), vec3(_2617, _2618, _2619));
        float _4595 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2627 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
        float _2628 = dot(vec3(cbLight._m0[_2590].xyz), vec3(_2617, _2618, _2619));
        float _4606 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2632 = _2609 * _2609;
        float _2636 = ((_2627 * _2627) * (_2632 + (-1.0))) + 1.0;
        float _2643 = exp2(log2(1.0 - (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0)))) * 5.0);
        float _2650 = 1.0 - _2609;
        float _2660 = (0.5 / (((_2392 * ((_2623 * _2650) + _2609)) + 9.9999999392252902907785028219223e-09) + (((_2392 * _2650) + _2609) * _2623))) * _2623;
        float _4617 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2662 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2632 / ((_2636 * _2636) * 3.141590118408203125));
        float _2663 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
        _2584 = (((((_2643 * _2414) + _767) * cbLight._m0[_2594].x) * _2662) * _2663) + _2526;
        _2586 = (((((_2643 * _2416) + _768) * cbLight._m0[_2594].y) * _2662) * _2663) + _2527;
        _2588 = (((((_2643 * _2417) + _769) * cbLight._m0[_2594].z) * _2662) * _2663) + _2528;
    }
    float _2694;
    float _2696;
    float _2698;
    if (_2301)
    {
        _2694 = _2584;
        _2696 = _2586;
        _2698 = _2588;
    }
    else
    {
        uint _2705 = _2115 + 3u;
        uint _2709 = _2115 + 11u;
        float _2723 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2705].w)) * _649) * 0.949999988079071044921875);
        float _2724 = _2723 * _2723;
        float _2725 = cbLight._m0[_2705].x + _550;
        float _2726 = cbLight._m0[_2705].y + _551;
        float _2727 = cbLight._m0[_2705].z + _552;
        float _2731 = inversesqrt(dot(vec3(_2725, _2726, _2727), vec3(_2725, _2726, _2727)));
        float _2732 = _2731 * _2725;
        float _2733 = _2731 * _2726;
        float _2734 = _2731 * _2727;
        float _2735 = dot(vec3(_468, _469, _470), vec3(cbLight._m0[_2705].xyz));
        float _4633 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        float _2738 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
        float _2739 = dot(vec3(_468, _469, _470), vec3(_2732, _2733, _2734));
        float _4644 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2742 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
        float _2743 = dot(vec3(cbLight._m0[_2705].xyz), vec3(_2732, _2733, _2734));
        float _4655 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2747 = _2724 * _2724;
        float _2751 = ((_2742 * _2742) * (_2747 + (-1.0))) + 1.0;
        float _2758 = exp2(log2(1.0 - (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0)))) * 5.0);
        float _2765 = 1.0 - _2724;
        float _2775 = (0.5 / (((_2392 * ((_2738 * _2765) + _2724)) + 9.9999999392252902907785028219223e-09) + (((_2392 * _2765) + _2724) * _2738))) * _2738;
        float _4666 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        float _2777 = (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_2747 / ((_2751 * _2751) * 3.141590118408203125));
        float _2778 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
        _2694 = (((((_2758 * _2414) + _767) * cbLight._m0[_2709].x) * _2777) * _2778) + _2584;
        _2696 = (((((_2758 * _2416) + _768) * cbLight._m0[_2709].y) * _2777) * _2778) + _2586;
        _2698 = (((((_2758 * _2417) + _769) * cbLight._m0[_2709].z) * _2777) * _2778) + _2588;
    }
    float _2843;
    float _2845;
    float _2847;
    float _2849;
    float _2851;
    float _2853;
    if (_2113.y == 0u)
    {
        uvec4 _2799 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2800 = _2799.x;
        uint _2811 = uint((float(_2799.y) * floor(float(uint(cbSceneParam._m0[85u].y * _571) / _2800))) + floor(float(uint(cbSceneParam._m0[85u].x * _570) / _2800)));
        float _2821 = (log2(_1891 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2822 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        uint _2825 = uint(isnan(14.0) ? _2822 : (isnan(_2822) ? 14.0 : min(_2822, 14.0)));
        uvec4 _2830 = texelFetch(g_lightClusterGridBuffer, int(((_2825 << 2u) + (_2811 << 6u)) >> 2u));
        uint _2831 = _2830.x;
        uint _2832 = _2799.z;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        if (((((1u << ((_2832 >> 4u) & 15u)) + 4294967295u) & _2831) == 0u) || ((_2832 & 240u) == 0u))
        {
            _2915 = 0.0;
            _2917 = 0.0;
            _2919 = 0.0;
            _2921 = 0.0;
            _2923 = 0.0;
            _2925 = 0.0;
        }
        else
        {
            float _2916;
            float _2918;
            float _2920;
            float _2922;
            float _2924;
            float _2926;
            float _3067 = 0.0;
            float _3068 = 0.0;
            float _3069 = 0.0;
            float _3070 = 0.0;
            float _3071 = 0.0;
            float _3072 = 0.0;
            uint _3073 = 0u;
            uint _3082;
            bool _3083;
            for (;;)
            {
                _3082 = texelFetch(g_lightClassification, int((((_2825 << 5u) + (_2811 << 9u)) + (_3073 << 2u)) >> 2u)).x;
                _3083 = _3082 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3083)
                {
                    frontier_phi_73_pred = _3072;
                    frontier_phi_73_pred_1 = _3071;
                    frontier_phi_73_pred_2 = _3070;
                    frontier_phi_73_pred_3 = _3069;
                    frontier_phi_73_pred_4 = _3068;
                    frontier_phi_73_pred_5 = _3067;
                }
                else
                {
                    float _3212;
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    float _3217;
                    uint _3218;
                    _3212 = _3067;
                    _3213 = _3068;
                    _3214 = _3069;
                    _3215 = _3070;
                    _3216 = _3071;
                    _3217 = _3072;
                    _3218 = _3082;
                    float _3139;
                    float _3140;
                    float _3141;
                    float _3142;
                    float _3143;
                    float _3144;
                    for (;;)
                    {
                        uint _3222 = uint(findLSB(_3218)) + (_3073 << 5u);
                        uint _3219 = (_3218 + 4294967295u) & _3218;
                        uint _3224 = _3222 * 48u;
                        vec4 _3238 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3224)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 3u)).x));
                        uint _3244 = (_3222 * 48u) + 4u;
                        vec4 _3257 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3244)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 3u)).x));
                        uint _3263 = (_3222 * 48u) + 8u;
                        vec3 _3274 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3263)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 2u)).x));
                        float _3278 = _3238.x - _1889;
                        float _3279 = _3238.y - _1890;
                        float _3280 = _3238.z - _1891;
                        float _3281 = dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280));
                        float _3284 = inversesqrt(_3281);
                        float _3285 = _3284 * _3278;
                        float _3286 = _3284 * _3279;
                        float _3287 = _3284 * _3280;
                        float _3288 = dot(vec3(_594, _597, _600), vec3(_3285, _3286, _3287));
                        float _3293 = 1.0 - (_3281 * _3238.w);
                        float _4692 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                        float _3294 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                        float _3295 = sqrt(_3281) * _3257.w;
                        float _3298 = 1.39999997615814208984375 / (_3295 + 1.39999997615814208984375);
                        float _3299 = _3298 * _3298;
                        float _3302 = ((1.0 - _3299) * _3288) + _3299;
                        float _3305 = _3295 * _3295;
                        float _3309 = ((isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0))) * _3294) / ((_3305 * 0.699999988079071044921875) + 1.0);
                        float _3313 = (-0.0) - _1889;
                        float _3314 = (-0.0) - _1890;
                        float _3315 = (-0.0) - _1891;
                        float _3319 = inversesqrt(dot(vec3(_3313, _3314, _3315), vec3(_3313, _3314, _3315)));
                        float _3320 = _3319 * _3313;
                        float _3321 = _3319 * _3314;
                        float _3322 = _3319 * _3315;
                        float _3329 = exp2(log2(1.0 / ((_3305 * 3.5) + 5.0)) * 0.25);
                        float _3330 = 1.0 - _797;
                        float _3337 = sqrt(1.0 - ((1.0 - (_3330 * _3330)) * (1.0 - (_3329 * _3329))));
                        float _3338 = _3337 * _3337;
                        float _3339 = _3338 * _3338;
                        float _3340 = _3320 + _3285;
                        float _3341 = _3321 + _3286;
                        float _3342 = _3322 + _3287;
                        float _3346 = inversesqrt(dot(vec3(_3340, _3341, _3342), vec3(_3340, _3341, _3342)));
                        float _3350 = dot(vec3(_594, _597, _600), vec3(_3320, _3321, _3322));
                        float _4708 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                        float _3353 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                        float _3354 = dot(vec3(_594, _597, _600), vec3(_3346 * _3340, _3346 * _3341, _3346 * _3342));
                        float _4719 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                        float _3357 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                        float _3361 = ((_3357 * _3357) * (_3339 + (-1.0))) + 1.0;
                        float _3362 = _3298 * _3338;
                        float _3363 = _3362 * _3362;
                        float _3366 = ((1.0 - _3363) * _3288) + _3363;
                        float _4730 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                        float _3367 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                        float _3368 = 1.0 - _3338;
                        float _3378 = (0.5 / (((_3367 * ((_3353 * _3368) + _3338)) + 9.9999999392252902907785028219223e-09) + (((_3367 * _3368) + _3338) * _3353))) * _3367;
                        float _4741 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                        float _3389 = (((_3339 * 3.1415927410125732421875) * (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0)))) / ((_3361 * _3361) * ((_3305 * 2.1991131305694580078125) + 3.141590118408203125))) * _3294;
                        _3142 = (_3309 * _3257.x) + _3215;
                        _3143 = (_3309 * _3257.y) + _3216;
                        _3144 = (_3309 * _3257.z) + _3217;
                        _3139 = (_3389 * _3274.x) + _3212;
                        _3140 = (_3389 * _3274.y) + _3213;
                        _3141 = (_3389 * _3274.z) + _3214;
                        if (_3219 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3212 = _3139;
                            _3213 = _3140;
                            _3214 = _3141;
                            _3215 = _3142;
                            _3216 = _3143;
                            _3217 = _3144;
                            _3218 = _3219;
                        }
                    }
                    frontier_phi_73_pred = _3144;
                    frontier_phi_73_pred_1 = _3143;
                    frontier_phi_73_pred_2 = _3142;
                    frontier_phi_73_pred_3 = _3141;
                    frontier_phi_73_pred_4 = _3140;
                    frontier_phi_73_pred_5 = _3139;
                }
                _2926 = frontier_phi_73_pred;
                _2924 = frontier_phi_73_pred_1;
                _2922 = frontier_phi_73_pred_2;
                _2920 = frontier_phi_73_pred_3;
                _2918 = frontier_phi_73_pred_4;
                _2916 = frontier_phi_73_pred_5;
                uint _3074 = _3073 + 1u;
                if (_3074 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3067 = _2916;
                    _3068 = _2918;
                    _3069 = _2920;
                    _3070 = _2922;
                    _3071 = _2924;
                    _3072 = _2926;
                    _3073 = _3074;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2915 = _2916;
            _2917 = _2918;
            _2919 = _2920;
            _2921 = _2922;
            _2923 = _2924;
            _2925 = _2926;
        }
        uvec4 _2929 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2930 = _2929.z;
        uint _2932 = (_2930 >> 8u) & 15u;
        float _3035;
        float _3037;
        float _3039;
        float _3041;
        float _3043;
        float _3045;
        if (((4294967295u << _2932) & _2831) == 0u)
        {
            _3035 = _2915;
            _3037 = _2917;
            _3039 = _2919;
            _3041 = _2921;
            _3043 = _2923;
            _3045 = _2925;
        }
        else
        {
            float _3060 = inversesqrt(dot(vec3(_1889, _1890, _1891), vec3(_1889, _1890, _1891)));
            float _3061 = _3060 * _1889;
            float _3062 = _3060 * _1890;
            float _3063 = _3060 * _1891;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2932 < ((_2930 >> 12u) & 15u))
            {
                float _3036;
                float _3038;
                float _3040;
                float _3042;
                float _3044;
                float _3046;
                float _3195 = _2915;
                float _3196 = _2917;
                float _3197 = _2919;
                float _3198 = _2921;
                float _3199 = _2923;
                float _3200 = _2925;
                uint _3201 = _2932;
                uint _3210;
                bool _3211;
                for (;;)
                {
                    _3210 = texelFetch(g_lightClassification, int((((_2825 << 5u) + (_2811 << 9u)) + (_3201 << 2u)) >> 2u)).x;
                    _3211 = _3210 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3211)
                    {
                        frontier_phi_84_pred = _3199;
                        frontier_phi_84_pred_1 = _3198;
                        frontier_phi_84_pred_2 = _3197;
                        frontier_phi_84_pred_3 = _3196;
                        frontier_phi_84_pred_4 = _3195;
                        frontier_phi_84_pred_5 = _3200;
                    }
                    else
                    {
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3698;
                        float _3699;
                        float _3700;
                        float _3701;
                        float _3702;
                        float _3703;
                        float _3416 = _3195;
                        float _3417 = _3196;
                        float _3418 = _3197;
                        float _3419 = _3198;
                        float _3420 = _3199;
                        float _3421 = _3200;
                        uint _3422 = _3210;
                        uint _3423;
                        vec4 _3448;
                        float _3449;
                        vec4 _3464;
                        vec3 _3476;
                        vec4 _3491;
                        vec4 _3507;
                        float _3554;
                        bool _3555;
                        for (;;)
                        {
                            uint _3433 = ((_3201 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3422));
                            _3423 = (_3422 + 4294967295u) & _3422;
                            uint _3435 = _3433 * 40u;
                            _3448 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 3u)).x));
                            _3449 = _3448.w;
                            uint _3451 = (_3433 * 40u) + 4u;
                            _3464 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 3u)).x));
                            uint _3466 = (_3433 * 40u) + 8u;
                            _3476 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3466)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 2u)).x));
                            uint _3478 = (_3433 * 40u) + 16u;
                            _3491 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3478)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 3u)).x));
                            uint _3494 = (_3433 * 40u) + 20u;
                            _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            uint _3510 = (_3433 * 40u) + 24u;
                            vec4 _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            uint _3529 = (_3433 * 40u) + 28u;
                            vec4 _3542 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3529)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 3u)).x));
                            _3554 = fma(_1891, _3542.z, fma(_1890, _3542.y, _3542.x * _1889)) + _3542.w;
                            _3555 = !((fma(_1891, _3523.z, fma(_1890, _3523.y, _3523.x * _1889)) + _3523.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3555)
                            {
                                float _3582 = _3448.x - _1889;
                                float _3583 = _3448.y - _1890;
                                float _3584 = _3448.z - _1891;
                                float _3585 = dot(vec3(_3582, _3583, _3584), vec3(_3582, _3583, _3584));
                                float _3588 = inversesqrt(_3585);
                                float _3589 = _3588 * _3582;
                                float _3590 = _3588 * _3583;
                                float _3591 = _3588 * _3584;
                                float _3595 = 1.0 - (_3585 / (_3449 * _3449));
                                float _4752 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3596 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                                float _3600 = sqrt(_3585) * _3464.w;
                                float _3602 = 1.39999997615814208984375 / (_3600 + 1.39999997615814208984375);
                                float _3603 = _3602 * _3602;
                                float _3606 = ((1.0 - _3603) * dot(vec3(_3589, _3590, _3591), vec3(_594, _597, _600))) + _3603;
                                float _3609 = _3600 * _3600;
                                float _3613 = (fma(_1891, _3491.z, fma(_1890, _3491.y, _3491.x * _1889)) + _3491.w) / _3554;
                                float _3614 = (fma(_1891, _3507.z, fma(_1890, _3507.y, _3507.x * _1889)) + _3507.w) / _3554;
                                float _3618 = 1.0 - dot(vec2(_3613, _3614), vec2(_3613, _3614));
                                float _4768 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3619 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
                                float _3620 = _3619 * (((isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0))) * _3596) / ((_3609 * 0.699999988079071044921875) + 1.0));
                                float _3632 = exp2(log2(1.0 / ((_3609 * 3.5) + 5.0)) * 0.25);
                                float _3633 = 1.0 - _797;
                                float _3640 = sqrt(1.0 - ((1.0 - (_3633 * _3633)) * (1.0 - (_3632 * _3632))));
                                float _3641 = _3640 * _3640;
                                float _3642 = _3641 * _3641;
                                float _3643 = _3589 - _3061;
                                float _3644 = _3590 - _3062;
                                float _3645 = _3591 - _3063;
                                float _3649 = inversesqrt(dot(vec3(_3643, _3644, _3645), vec3(_3643, _3644, _3645)));
                                float _3653 = dot(vec3(_594, _597, _600), vec3((-0.0) - _3061, (-0.0) - _3062, (-0.0) - _3063));
                                float _4779 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                                float _3656 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                                float _3657 = dot(vec3(_594, _597, _600), vec3(_3649 * _3643, _3649 * _3644, _3649 * _3645));
                                float _4790 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0));
                                float _3660 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                                float _3664 = ((_3660 * _3660) * (_3642 + (-1.0))) + 1.0;
                                float _3665 = _3602 * _3641;
                                float _3666 = _3665 * _3665;
                                float _3672 = ((1.0 - _3666) * dot(vec3(_594, _597, _600), vec3(_3589, _3590, _3591))) + _3666;
                                float _4801 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                                float _3673 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                                float _3674 = 1.0 - _3641;
                                float _3684 = (0.5 / (((_3673 * ((_3656 * _3674) + _3641)) + 9.9999999392252902907785028219223e-09) + (((_3673 * _3674) + _3641) * _3656))) * _3673;
                                float _4812 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3694 = (_3619 * _3596) * (((_3642 * 3.1415927410125732421875) * (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0)))) / ((_3664 * _3664) * ((_3609 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3620 * _3464.y;
                                frontier_phi_90_pred_1 = _3620 * _3464.x;
                                frontier_phi_90_pred_2 = _3694 * _3476.z;
                                frontier_phi_90_pred_3 = _3694 * _3476.y;
                                frontier_phi_90_pred_4 = _3694 * _3476.x;
                                frontier_phi_90_pred_5 = _3620 * _3464.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3702 = frontier_phi_90_pred;
                            _3701 = frontier_phi_90_pred_1;
                            _3700 = frontier_phi_90_pred_2;
                            _3699 = frontier_phi_90_pred_3;
                            _3698 = frontier_phi_90_pred_4;
                            _3703 = frontier_phi_90_pred_5;
                            _3406 = _3701 + _3419;
                            _3407 = _3702 + _3420;
                            _3408 = _3703 + _3421;
                            _3403 = _3698 + _3416;
                            _3404 = _3699 + _3417;
                            _3405 = _3700 + _3418;
                            if (_3423 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3416 = _3403;
                                _3417 = _3404;
                                _3418 = _3405;
                                _3419 = _3406;
                                _3420 = _3407;
                                _3421 = _3408;
                                _3422 = _3423;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3407;
                        frontier_phi_84_pred_1 = _3406;
                        frontier_phi_84_pred_2 = _3405;
                        frontier_phi_84_pred_3 = _3404;
                        frontier_phi_84_pred_4 = _3403;
                        frontier_phi_84_pred_5 = _3408;
                    }
                    _3044 = frontier_phi_84_pred;
                    _3042 = frontier_phi_84_pred_1;
                    _3040 = frontier_phi_84_pred_2;
                    _3038 = frontier_phi_84_pred_3;
                    _3036 = frontier_phi_84_pred_4;
                    _3046 = frontier_phi_84_pred_5;
                    uint _3202 = _3201 + 1u;
                    if (_3202 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3195 = _3036;
                        _3196 = _3038;
                        _3197 = _3040;
                        _3198 = _3042;
                        _3199 = _3044;
                        _3200 = _3046;
                        _3201 = _3202;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3046;
                frontier_phi_65_66_ladder_1 = _3042;
                frontier_phi_65_66_ladder_2 = _3044;
                frontier_phi_65_66_ladder_3 = _3038;
                frontier_phi_65_66_ladder_4 = _3036;
                frontier_phi_65_66_ladder_5 = _3040;
            }
            else
            {
                frontier_phi_65_66_ladder = _2925;
                frontier_phi_65_66_ladder_1 = _2921;
                frontier_phi_65_66_ladder_2 = _2923;
                frontier_phi_65_66_ladder_3 = _2917;
                frontier_phi_65_66_ladder_4 = _2915;
                frontier_phi_65_66_ladder_5 = _2919;
            }
            _3035 = frontier_phi_65_66_ladder_4;
            _3037 = frontier_phi_65_66_ladder_3;
            _3039 = frontier_phi_65_66_ladder_5;
            _3041 = frontier_phi_65_66_ladder_1;
            _3043 = frontier_phi_65_66_ladder_2;
            _3045 = frontier_phi_65_66_ladder;
        }
        float _3050 = isnan(1.0) ? _781 : (isnan(_781) ? 1.0 : min(_781, 1.0));
        _2843 = (_3050 * _3041) + _2356;
        _2845 = (_3050 * _3043) + _2358;
        _2847 = (_3050 * _3045) + _2360;
        _2849 = ((_3035 * _767) * _3050) + _2694;
        _2851 = ((_3037 * _768) * _3050) + _2696;
        _2853 = ((_3039 * _769) * _3050) + _2698;
    }
    else
    {
        _2843 = _2356;
        _2845 = _2358;
        _2847 = _2360;
        _2849 = _2694;
        _2851 = _2696;
        _2853 = _2698;
    }
    float _4828 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _4839 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _4850 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _4861 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _2871 = ((isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0))) * (_2843 + ((isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))) * _781))) + ((_2849 + ((isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))) * _1618)) * cbPerFrame._m0[3u].x);
    float _2872 = ((isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0))) * (_2845 + ((isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))) * _781))) + ((_2851 + ((isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))) * _1618)) * cbPerFrame._m0[3u].x);
    float _2873 = ((isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0))) * (_2847 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _781))) + ((_2853 + ((isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))) * _1618)) * cbPerFrame._m0[3u].x);
    float _2874 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
    float _2875 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
    float _2876 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
    float _2881 = cbInstanceData._m0[_673 + 6u].w * (isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0)));
    float _2886 = _570 / cbSceneParam._m0[86u].x;
    float _2887 = _571 / cbSceneParam._m0[86u].y;
    vec4 _2901 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2886, _2887, (log2((isnan(cbSceneParam._m0[77u].w) ? _492 : (isnan(_492) ? cbSceneParam._m0[77u].w : min(_492, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2903 = _2901.x;
    float _2904 = _2901.y;
    float _2905 = _2901.z;
    float _2906 = _2901.w;
    float _2977;
    float _2979;
    float _2981;
    float _2983;
    if (_492 > cbSceneParam._m0[78u].w)
    {
        float _2940 = isnan(_492) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _492 : min(cbSceneParam._m0[80u].w, _492));
        float _2941 = _2940 / _492;
        float _2952 = _2941 * _543;
        float _2953 = _544 * _2941;
        float _2954 = (-0.0) - _2953;
        float _2955 = _2941 * _545;
        float _2957 = (cbSceneParam._m0[77u].w * _2954) / _2940;
        float _2958 = _2957 + cbSceneParam._m0[79u].w;
        float _2959 = cbSceneParam._m0[79u].w - _2953;
        float _2965 = sqrt(((_2952 * _2952) + (_2953 * _2953)) + (_2955 * _2955));
        float _2968 = (1.0 - (cbSceneParam._m0[77u].w / _2940)) * _2965;
        float _2973 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2975 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3152;
        if (abs((_2954 - _2957) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3152 = ((((_2958 > 0.0) ? exp2(_2973 * _2958) : (2.0 - exp2(_2975 * _2958))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2968;
        }
        else
        {
            float _3096 = 1.0 / cbSceneParam._m0[80u].x;
            float _3097 = isnan(_2959) ? _2958 : (isnan(_2958) ? _2959 : max(_2958, _2959));
            float _3098 = isnan(_2959) ? _2958 : (isnan(_2958) ? _2959 : min(_2958, _2959));
            float _3107 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : min(_3097, 0.0));
            float _3108 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : min(_3098, 0.0));
            _3152 = ((abs(_2965 / _2954) * cbSceneParam._m0[80u].y) * ((((_3107 - _3108) * 2.0) - ((exp2(_2973 * (isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0)))) - exp2(_2973 * (isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0))))) * _3096)) - ((exp2(_2975 * _3107) - exp2(_2975 * _3108)) * _3096))) + (_2968 * cbSceneParam._m0[80u].z);
        }
        vec4 _3154 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2886, _2887, 1.0), 0.0);
        float _3163 = exp2((_3152 * (-1.44269502162933349609375)) * (1.0 - _3154.w));
        float _3164 = log2(_3163);
        float _3180 = log2(_2906);
        _2977 = (exp2(_3180 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3164 * cbSceneParam._m0[78u].x)) * _3154.x) / cbSceneParam._m0[78u].x)) + _2903;
        _2979 = (exp2(_3180 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3164 * cbSceneParam._m0[78u].y)) * _3154.y) / cbSceneParam._m0[78u].y)) + _2904;
        _2981 = (exp2(_3180 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3164 * cbSceneParam._m0[78u].z)) * _3154.z) / cbSceneParam._m0[78u].z)) + _2905;
        _2983 = _3163 * _2906;
    }
    else
    {
        _2977 = _2903;
        _2979 = _2904;
        _2981 = _2905;
        _2983 = _2906;
    }
    bool _3190;
    vec4 _2993;
    vec4 _3015;
    float _3017;
    float _3021;
    float _3022;
    float _3023;
    float _3024;
    bool _3034;
    for (;;)
    {
        _2993 = cbMatDynParam._m0[0u];
        float _2995 = roundEven(_2993.y);
        bool _2996 = _2995 == 3.0;
        float _2997 = log2(_2983);
        float _3004 = exp2(_2997 * cbSceneParam._m0[78u].x) * _2874;
        float _3005 = exp2(_2997 * cbSceneParam._m0[78u].y) * _2875;
        float _3006 = exp2(_2997 * cbSceneParam._m0[78u].z) * _2876;
        float _3013 = _559 + (-0.5);
        _3015 = cbMtdParam._m0[1u];
        _3017 = _3015.y * _3013;
        float _3020 = (_2995 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3021 = _3020 * (_2996 ? _3004 : (_3004 + (cbSceneParam._m0[72u].w * _2977)));
        _3022 = _3020 * (_2996 ? _3005 : (_3005 + (cbSceneParam._m0[72u].w * _2979)));
        _3023 = _3020 * (_2996 ? _3006 : (_3006 + (cbSceneParam._m0[72u].w * _2981)));
        _3024 = _3013 * 0.999000012874603271484375;
        _3034 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3034)
        {
            if ((cbInstanceData._m0[_673 + 7u].x + _3024) < 0.5)
            {
                _3190 = true;
                break;
            }
        }
        uint _3131 = _674 + uint(_2993.w);
        if ((cbInstanceData._m0[_3131].w < 1.0) && ((cbInstanceData._m0[_3131].w + _3024) < 0.5))
        {
            _3190 = true;
            break;
        }
        if ((_3017 + _350) < _3015.x)
        {
            _3190 = true;
            break;
        }
        _3190 = false;
        break;
    }
    float _3394;
    if (_3190)
    {
        discard_state = true;
        _3394 = 0.0;
    }
    else
    {
        _3394 = _2881;
    }
    SV_Target.x = _3021;
    SV_Target.y = _3022;
    SV_Target.z = _3023;
    SV_Target.w = _3394;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2881;
    discard_exit();
}


