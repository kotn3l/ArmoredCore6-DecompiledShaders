#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1282;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238;
    float _239;
    float _240;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
    }
    else
    {
        _238 = _224;
        _239 = _225;
        _240 = _226;
    }
    vec4 _254 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _259 = _254.z;
    float _260 = _254.w;
    float _266 = exp2(log2(_259 * 22.0) * 260.0);
    float _267 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _268 = isnan(1.0) ? _267 : (isnan(_267) ? 1.0 : min(_267, 1.0));
    vec4 _282 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _293 = cbMtdParam._m0[10u].x * _282.x;
    float _294 = cbMtdParam._m0[10u].y * _282.y;
    float _295 = cbMtdParam._m0[10u].z * _282.z;
    vec4 _307 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _323 = exp2(log2(1.0 - _260) * 8.0);
    vec4 _335 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _351 = exp2(log2(_260) * 8.0);
    vec4 _364 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    vec4 _389 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _411 = (((((_307.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _389.x) - _293) * _268) + _293;
    float _412 = (((((_307.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _389.y) - _294) * _268) + _294;
    float _413 = (((((_307.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _389.z) - _295) * _268) + _295;
    float _420 = (((cbMtdParam._m0[12u].x * _335.x) - _411) * _323) + _411;
    float _421 = (((cbMtdParam._m0[12u].y * _335.y) - _412) * _323) + _412;
    float _422 = (((cbMtdParam._m0[12u].z * _335.z) - _413) * _323) + _413;
    float _429 = (((cbMtdParam._m0[11u].x * _364.x) - _420) * _351) + _420;
    float _430 = (((cbMtdParam._m0[11u].y * _364.y) - _421) * _351) + _421;
    float _431 = (((cbMtdParam._m0[11u].z * _364.z) - _422) * _351) + _422;
    float _432 = _389.w * _307.w;
    float _461 = (((texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _268) + cbMtdParam._m0[15u].y;
    float _464 = ((cbMtdParam._m0[14u].y - _461) * _323) + _461;
    float _467 = ((cbMtdParam._m0[15u].x - _464) * _351) + _464;
    vec4 _480 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _482 = _480.x;
    float _483 = _480.y;
    float _489 = cbMtdParam._m0[13u].y + _480.z;
    vec4 _501 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    vec4 _520 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _537 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _548 = ((((_259 * 2.0) * (cbMtdParam._m0[13u].x + _501.z)) - _489) * _268) + _489;
    float _552 = (((_520.z - _548) + cbMtdParam._m0[14u].x) * _323) + _548;
    float _556 = (((_537.z - _552) + cbMtdParam._m0[13u].w) * _351) + _552;
    float _560 = (_254.x * 2.0) + (-1.0);
    float _562 = (_254.y * 2.0) + (-1.0);
    float _563 = dot(vec2(_560, _562), vec2(_560, _562));
    float _3909 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _568 = sqrt(1.0 - (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))));
    float _573 = ((_501.x - _482) * _268) + _482;
    float _574 = ((_501.y - _483) * _268) + _483;
    float _579 = ((_520.x - _573) * _323) + _573;
    float _580 = ((_520.y - _574) * _323) + _574;
    float _593 = ((((((_537.x - _579) * _351) + _579) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _560;
    float _594 = ((((((_537.y - _580) * _351) + _580) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _562;
    float _597 = fma(_568, _238, fma(_594, _230 * TANGENT.x, (_216 * _208) * _593));
    float _600 = fma(_568, _239, fma(_594, _230 * TANGENT.y, (_216 * _209) * _593));
    float _603 = fma(_568, _240, fma(_594, _230 * TANGENT.z, (_216 * _210) * _593));
    float _607 = inversesqrt(dot(vec3(_597, _600, _603), vec3(_597, _600, _603)));
    float _608 = _607 * _597;
    float _609 = _607 * _600;
    float _610 = _607 * _603;
    float _3920 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _611 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _3931 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _612 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _3942 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _613 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _3953 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _614 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _3964 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _615 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _3975 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _616 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _632 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _672 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _682 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _672);
    float _683 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _672);
    float _684 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _672);
    float _688 = inversesqrt(dot(vec3(_682, _683, _684), vec3(_682, _683, _684)));
    float _689 = _682 * _688;
    float _690 = _683 * _688;
    float _691 = _684 * _688;
    float _697 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _698 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _700 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _702 = _700.w;
    float _720 = fma(_610, cbSceneParam._m0[5u].z, fma(_609, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _608));
    float _723 = fma(_610, cbSceneParam._m0[6u].z, fma(_609, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _608));
    float _726 = fma(_610, cbSceneParam._m0[7u].z, fma(_609, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _608));
    vec4 _728 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _730 = _728.x;
    float _742 = (((_728.y - _612) + (_728.w * _612)) * cbMtdParam._m0[3u].x) + _612;
    vec4 _743 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _759 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_730 * _730)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _743.z;
    float _767 = (((cbMatDynParam._m0[15u].x - _616) * cbMatDynParam._m0[15u].w) * _759) + _616;
    float _775 = ((_759 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _742)) + _742;
    uint _799 = uint(roundEven(NORMAL.w)) * 13u;
    uint _801 = (_799 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _807 = (cbMtdParam._m0[0u].x * _613) * cbInstanceData._m0[_801].x;
    float _808 = (cbMtdParam._m0[0u].y * _614) * cbInstanceData._m0[_801].y;
    float _809 = (cbMtdParam._m0[0u].z * _615) * cbInstanceData._m0[_801].z;
    float _3986 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _810 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _3997 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _811 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _4008 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _812 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    vec4 _813 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _818 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _829 = (((_818.x - _767) + (_818.w * _767)) * cbMtdParam._m0[3u].x) + _767;
    float _842 = (cbMtdParam._m0[3u].x * (((_810 * _702) - _810) + _813.x)) + _810;
    float _843 = (cbMtdParam._m0[3u].x * (((_811 * _702) - _811) + _813.y)) + _811;
    float _844 = (cbMtdParam._m0[3u].x * (((_812 * _702) - _812) + _813.z)) + _812;
    float _858 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_767 * (_613 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_767 * (_614 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_767 * (_615 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _862 = _858 * cbMatDynParam._m0[13u].w;
    float _872 = (_862 * (cbMatDynParam._m0[13u].x - _842)) + _842;
    float _873 = (_862 * (cbMatDynParam._m0[13u].y - _843)) + _843;
    float _874 = (_862 * (cbMatDynParam._m0[13u].z - _844)) + _844;
    float _882 = ((_858 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _829)) + _829;
    float _883 = 1.0 - _882;
    float _884 = _883 * _872;
    float _885 = _883 * _873;
    float _886 = _883 * _874;
    float _890 = (_872 + (-0.039999999105930328369140625)) * _882;
    float _891 = (_873 + (-0.039999999105930328369140625)) * _882;
    float _892 = (_874 + (-0.039999999105930328369140625)) * _882;
    float _893 = _890 + 0.039999999105930328369140625;
    float _894 = _891 + 0.039999999105930328369140625;
    float _895 = _892 + 0.039999999105930328369140625;
    vec4 _904 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _697, cbSceneParam._m0[86u].y * _698));
    float _907 = _904.x * TEXCOORD_4;
    float _908 = dot(vec3(_608, _609, _610), vec3(_689, _690, _691));
    float _911 = _908 * 2.0;
    float _915 = (_911 * _608) - _689;
    float _916 = (_911 * _609) - _690;
    float _917 = (_911 * _610) - _691;
    float _921 = abs(dot(vec3(_689, _690, _691), vec3(_608, _609, _610)));
    float _4019 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _923 = sqrt(_775);
    float _936 = exp2((_923 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_923 * 3.0));
    float _942 = (1.0 - _936) * ((_923 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _943 = _936 * _923;
    float _971 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _975 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _979 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1281;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1006 = fma(_979, cbModelParam._m0[26u].z, fma(_975, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _971));
        float _1010 = fma(_979, cbModelParam._m0[27u].z, fma(_975, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _971));
        float _1014 = fma(_979, cbModelParam._m0[28u].z, fma(_975, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _971));
        float _1039 = _971 + _608;
        float _1040 = _975 + _609;
        float _1041 = _979 + _610;
        float _1051 = fma(_1041, cbModelParam._m0[26u].z, fma(_1040, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1039)) - _1006;
        float _1052 = fma(_1041, cbModelParam._m0[27u].z, fma(_1040, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1039)) - _1010;
        float _1053 = fma(_1041, cbModelParam._m0[28u].z, fma(_1040, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1039)) - _1014;
        float _1057 = inversesqrt(dot(vec3(_1051, _1052, _1053), vec3(_1051, _1052, _1053)));
        float _1070 = ((_1057 * _1051) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1006 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1071 = ((_1057 * _1052) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1010 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1072 = ((_1057 * _1053) / cbModelParam._m0[34u].z) + ((((((_1014 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        float _1109 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1075.x + (-0.5));
        float _1111 = _1109 * (_1075.y + (-0.5));
        float _1112 = _1109 * (_1075.z + (-0.5));
        float _1119 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1082.x + (-0.5));
        float _1121 = _1119 * (_1082.y + (-0.5));
        float _1122 = _1119 * (_1082.z + (-0.5));
        float _1129 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1089.x + (-0.5));
        float _1131 = _1129 * (_1089.y + (-0.5));
        float _1132 = _1129 * (_1089.z + (-0.5));
        float _1139 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1096.x + (-0.5));
        float _1141 = _1139 * (_1096.y + (-0.5));
        float _1142 = _1139 * (_1096.z + (-0.5));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = _1110 * 0.5;
        float _1147 = _1120 * 0.5;
        float _1148 = _1130 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1163 = (dot(vec3(_608, _609, _610), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1173 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _4067 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1175 + 1.0))) + _1180) * _1143;
        float _1190 = _1111 * 0.5;
        float _1191 = _1121 * 0.5;
        float _1192 = _1131 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1206 = (dot(vec3(_608, _609, _610), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1215 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _4100 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1217 + 1.0))) + _1222) * _1144;
        float _1232 = _1112 * 0.5;
        float _1233 = _1122 * 0.5;
        float _1234 = _1132 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1248 = (dot(vec3(_608, _609, _610), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _4111 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1257 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _4122 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _4133 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_1259 + 1.0))) + _1264) * _1145;
        _1281 = _1112;
        _1283 = _1111;
        _1284 = _1110;
        _1285 = _1122;
        _1286 = _1121;
        _1287 = _1120;
        _1288 = _1132;
        _1289 = _1131;
        _1290 = _1130;
        _1291 = _1145;
        _1292 = _1144;
        _1293 = _1143;
        _1294 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
        _1295 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
        _1296 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
    }
    else
    {
        _1281 = _1282;
        _1283 = _1282;
        _1284 = _1282;
        _1285 = _1282;
        _1286 = _1282;
        _1287 = _1282;
        _1288 = _1282;
        _1289 = _1282;
        _1290 = _1282;
        _1291 = _1282;
        _1292 = _1282;
        _1293 = _1282;
        _1294 = 0.0;
        _1295 = 0.0;
        _1296 = 0.0;
    }
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1322 = fma(_979, cbModelParam._m0[30u].z, fma(_975, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _971));
        float _1326 = fma(_979, cbModelParam._m0[31u].z, fma(_975, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _971));
        float _1330 = fma(_979, cbModelParam._m0[32u].z, fma(_975, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _971));
        float _1353 = _971 + _608;
        float _1354 = _975 + _609;
        float _1355 = _979 + _610;
        float _1365 = fma(_1355, cbModelParam._m0[30u].z, fma(_1354, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1353)) - _1322;
        float _1366 = fma(_1355, cbModelParam._m0[31u].z, fma(_1354, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1353)) - _1326;
        float _1367 = fma(_1355, cbModelParam._m0[32u].z, fma(_1354, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1353)) - _1330;
        float _1371 = inversesqrt(dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367)));
        float _1384 = ((_1371 * _1365) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1322 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1385 = ((_1371 * _1366) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1326 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1386 = ((_1371 * _1367) / cbModelParam._m0[35u].z) + ((((((_1330 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1388 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1395 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        float _1421 = exp2((_1388.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1388.x + (-0.5));
        float _1423 = _1421 * (_1388.y + (-0.5));
        float _1424 = _1421 * (_1388.z + (-0.5));
        float _1431 = exp2((_1395.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1395.x + (-0.5));
        float _1433 = _1431 * (_1395.y + (-0.5));
        float _1434 = _1431 * (_1395.z + (-0.5));
        float _1441 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1402.x + (-0.5));
        float _1443 = _1441 * (_1402.y + (-0.5));
        float _1444 = _1441 * (_1402.z + (-0.5));
        float _1451 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1409.x + (-0.5));
        float _1453 = _1451 * (_1409.y + (-0.5));
        float _1454 = _1451 * (_1409.z + (-0.5));
        float _1455 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1456 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1457 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1458 = _1422 * 0.5;
        float _1459 = _1432 * 0.5;
        float _1460 = _1442 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1474 = (dot(vec3(_608, _609, _610), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _4174 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1483 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1455 + 9.9999997473787516355514526367188e-06);
        float _4185 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _4196 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1485 + 1.0))) + _1490) * _1455;
        float _1500 = _1423 * 0.5;
        float _1501 = _1433 * 0.5;
        float _1502 = _1443 * 0.5;
        float _1503 = dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502));
        float _1508 = (_1503 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1503);
        float _1516 = (dot(vec3(_608, _609, _610), vec3(_1508 * _1500, _1508 * _1501, _1508 * _1502)) + 1.0) * 0.5;
        float _4207 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1525 = sqrt(((_1501 * _1501) + (_1500 * _1500)) + (_1502 * _1502)) / (_1456 + 9.9999997473787516355514526367188e-06);
        float _4218 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1527 = _1526 * 2.0;
        float _1531 = (1.0 - _1526) / (_1526 + 1.0);
        float _4229 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1541 = ((((1.0 - _1532) * (_1527 + 2.0)) * exp2(log2(isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_1527 + 1.0))) + _1532) * _1456;
        float _1542 = _1424 * 0.5;
        float _1543 = _1434 * 0.5;
        float _1544 = _1444 * 0.5;
        float _1545 = dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544));
        float _1550 = (_1545 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1545);
        float _1558 = (dot(vec3(_608, _609, _610), vec3(_1550 * _1542, _1550 * _1543, _1550 * _1544)) + 1.0) * 0.5;
        float _4240 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1567 = sqrt(((_1543 * _1543) + (_1542 * _1542)) + (_1544 * _1544)) / (_1457 + 9.9999997473787516355514526367188e-06);
        float _4251 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1569 = _1568 * 2.0;
        float _1573 = (1.0 - _1568) / (_1568 + 1.0);
        float _4262 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1583 = ((((1.0 - _1574) * (_1569 + 2.0)) * exp2(log2(isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_1569 + 1.0))) + _1574) * _1457;
        _1591 = _1424;
        _1592 = _1423;
        _1593 = _1422;
        _1594 = _1434;
        _1595 = _1433;
        _1596 = _1432;
        _1597 = _1444;
        _1598 = _1443;
        _1599 = _1442;
        _1600 = _1457;
        _1601 = _1456;
        _1602 = _1455;
        _1603 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
        _1604 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)));
        _1605 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)));
    }
    else
    {
        _1591 = _1282;
        _1592 = _1282;
        _1593 = _1282;
        _1594 = _1282;
        _1595 = _1282;
        _1596 = _1282;
        _1597 = _1282;
        _1598 = _1282;
        _1599 = _1282;
        _1600 = _1282;
        _1601 = _1282;
        _1602 = _1282;
        _1603 = 0.0;
        _1604 = 0.0;
        _1605 = 0.0;
    }
    float _1615 = (cbModelParam._m0[1u].x * (_1603 - _1294)) + _1294;
    float _1616 = (cbModelParam._m0[1u].x * (_1604 - _1295)) + _1295;
    float _1617 = (cbModelParam._m0[1u].x * (_1605 - _1296)) + _1296;
    float _1638 = fma(_1617, cbSceneParam._m0[89u].z, fma(_1616, cbSceneParam._m0[89u].y, _1615 * cbSceneParam._m0[89u].x));
    float _1641 = fma(_1617, cbSceneParam._m0[90u].z, fma(_1616, cbSceneParam._m0[90u].y, _1615 * cbSceneParam._m0[90u].x));
    float _1644 = fma(_1617, cbSceneParam._m0[91u].z, fma(_1616, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1615));
    float _1659 = _915 * 0.5;
    float _1660 = _916 * 0.5;
    float _1661 = _917 * 0.5;
    float _1662 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1593, _1596, _1599, _1602));
    float _1665 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1592, _1595, _1598, _1601));
    float _1668 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1591, _1594, _1597, _1600));
    float _1699;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1675 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1281, _1285, _1288, _1291));
        float _1679 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1283, _1286, _1289, _1292));
        float _1683 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1284, _1287, _1290, _1293));
        float _1690 = dot(vec4(cbModelParam._m0[39u]), vec4(_1659, _1660, _1661, 1.0));
        _1699 = dot(vec3(isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1690) ? 0.0 : (isnan(0.0) ? _1690 : max(0.0, _1690))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1699 = 1.0;
    }
    float _1710;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1701 = dot(vec4(cbModelParam._m0[40u]), vec4(_1659, _1660, _1661, 1.0));
        _1710 = dot(vec3(isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)), isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)), isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1701) ? 0.0 : (isnan(0.0) ? _1701 : max(0.0, _1701))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1710 = 1.0;
    }
    float _1714 = (_1710 * cbModelParam._m0[1u].x) + (_1699 * (1.0 - cbModelParam._m0[1u].x));
    float _1724 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _775);
    float _1725 = isnan(_1724) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1724 : min(cbModelParam._m0[25u].z, _1724));
    float _1805;
    float _1807;
    float _1809;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1772 = fma(_979, cbModelParam._m0[13u].z, fma(_975, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _971)) + cbModelParam._m0[13u].w;
        float _1776 = fma(_979, cbModelParam._m0[14u].z, fma(_975, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _971)) + cbModelParam._m0[14u].w;
        float _1780 = fma(_979, cbModelParam._m0[15u].z, fma(_975, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _971)) + cbModelParam._m0[15u].w;
        float _1783 = fma(_917, cbModelParam._m0[13u].z, fma(_916, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _915));
        float _1786 = fma(_917, cbModelParam._m0[14u].z, fma(_916, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _915));
        float _1789 = fma(_917, cbModelParam._m0[15u].z, fma(_916, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _915));
        float _1817;
        if (_1783 > 0.0)
        {
            _1817 = abs((1.0 - _1772) / _1783);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1772 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1817 = frontier_phi_16_14_ladder;
        }
        float _1992;
        if (_1786 > 0.0)
        {
            _1992 = abs((1.0 - _1776) / _1786);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1776 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1992 = frontier_phi_25_21_ladder;
        }
        float _2287;
        if (_1789 > 0.0)
        {
            _2287 = abs((1.0 - _1780) / _1789);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1780 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2287 = frontier_phi_37_32_ladder;
        }
        float _2289 = isnan(_1992) ? _1817 : (isnan(_1817) ? _1992 : min(_1817, _1992));
        float _2290 = isnan(_2287) ? _2289 : (isnan(_2289) ? _2287 : min(_2289, _2287));
        float _2294 = (_2290 * _1783) + _1772;
        float _2295 = (_2290 * _1786) + _1776;
        float _2296 = (_2290 * _1789) + _1780;
        float _2297 = _2290 * 9.9999997473787516355514526367188e-05;
        float _2299 = (-1.0) - _2297;
        float _2301 = _2297 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2296 > _2301) || ((_2296 < _2299) || ((_2295 > _2301) || ((_2295 < _2299) || ((_2294 < _2299) || (_2294 > _2301))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2441 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2296, cbModelParam._m0[9u].z, fma(_2295, cbModelParam._m0[9u].y, _2294 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2296, cbModelParam._m0[10u].z, fma(_2295, cbModelParam._m0[10u].y, _2294 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2296, cbModelParam._m0[11u].z, fma(_2295, cbModelParam._m0[11u].y, _2294 * cbModelParam._m0[11u].x))), _1725);
            frontier_phi_15_37_ladder = _2441.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2441.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2441.z * cbModelParam._m0[1u].y;
        }
        _1805 = frontier_phi_15_37_ladder_1;
        _1807 = frontier_phi_15_37_ladder;
        _1809 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1793 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_915, _916, _917), _1725);
        _1805 = _1793.x * cbModelParam._m0[1u].y;
        _1807 = _1793.y * cbModelParam._m0[1u].y;
        _1809 = _1793.z * cbModelParam._m0[1u].y;
    }
    float _1813 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _775);
    float _1814 = isnan(_1813) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1813 : min(cbModelParam._m0[25u].w, _1813));
    float _1907;
    float _1909;
    float _1911;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1871 = fma(_979, cbModelParam._m0[21u].z, fma(_975, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _971)) + cbModelParam._m0[21u].w;
        float _1875 = fma(_979, cbModelParam._m0[22u].z, fma(_975, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _971)) + cbModelParam._m0[22u].w;
        float _1879 = fma(_979, cbModelParam._m0[23u].z, fma(_975, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _971)) + cbModelParam._m0[23u].w;
        float _1882 = fma(_917, cbModelParam._m0[21u].z, fma(_916, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _915));
        float _1885 = fma(_917, cbModelParam._m0[22u].z, fma(_916, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _915));
        float _1888 = fma(_917, cbModelParam._m0[23u].z, fma(_916, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _915));
        float _1997;
        if (_1882 > 0.0)
        {
            _1997 = abs((1.0 - _1871) / _1882);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1871 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1997 = frontier_phi_27_23_ladder;
        }
        float _2314;
        if (_1885 > 0.0)
        {
            _2314 = abs((1.0 - _1875) / _1885);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1875 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2314 = frontier_phi_39_34_ladder;
        }
        float _2652;
        if (_1888 > 0.0)
        {
            _2652 = abs((1.0 - _1879) / _1888);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1879 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2652 = frontier_phi_49_46_ladder;
        }
        float _2654 = isnan(_2314) ? _1997 : (isnan(_1997) ? _2314 : min(_1997, _2314));
        float _2655 = isnan(_2652) ? _2654 : (isnan(_2654) ? _2652 : min(_2654, _2652));
        float _2659 = (_2655 * _1882) + _1871;
        float _2660 = (_2655 * _1885) + _1875;
        float _2661 = (_2655 * _1888) + _1879;
        float _2662 = _2655 * 9.9999997473787516355514526367188e-05;
        float _2663 = (-1.0) - _2662;
        float _2665 = _2662 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2661 > _2665) || ((_2661 < _2663) || ((_2660 > _2665) || ((_2660 < _2663) || ((_2659 < _2663) || (_2659 > _2665))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2783 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2661, cbModelParam._m0[17u].z, fma(_2660, cbModelParam._m0[17u].y, _2659 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2661, cbModelParam._m0[18u].z, fma(_2660, cbModelParam._m0[18u].y, _2659 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2661, cbModelParam._m0[19u].z, fma(_2660, cbModelParam._m0[19u].y, _2659 * cbModelParam._m0[19u].x))), _1814);
            frontier_phi_24_49_ladder = _2783.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2783.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2783.x * cbModelParam._m0[1u].z;
        }
        _1907 = frontier_phi_24_49_ladder_2;
        _1909 = frontier_phi_24_49_ladder_1;
        _1911 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1891 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_915, _916, _917), _1814);
        _1907 = _1891.x * cbModelParam._m0[1u].z;
        _1909 = _1891.y * cbModelParam._m0[1u].z;
        _1911 = _1891.z * cbModelParam._m0[1u].z;
    }
    float _1924 = (((_942 * _893) + _943) * _907) * ((cbModelParam._m0[1u].w * (_1907 - _1805)) + _1805);
    float _1926 = (((_942 * _894) + _943) * _907) * ((cbModelParam._m0[1u].w * (_1909 - _1807)) + _1807);
    float _1928 = (((_942 * _895) + _943) * _907) * ((cbModelParam._m0[1u].w * (_1911 - _1809)) + _1809);
    float _1931 = fma(_1928, cbSceneParam._m0[89u].z, fma(_1926, cbSceneParam._m0[89u].y, _1924 * cbSceneParam._m0[89u].x));
    float _1934 = fma(_1928, cbSceneParam._m0[90u].z, fma(_1926, cbSceneParam._m0[90u].y, _1924 * cbSceneParam._m0[90u].x));
    float _1937 = fma(_1928, cbSceneParam._m0[91u].z, fma(_1926, cbSceneParam._m0[91u].y, _1924 * cbSceneParam._m0[91u].x));
    float _1971 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1975 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1979 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1983 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1984 = _1971 / _1983;
    float _1985 = _1975 / _1983;
    float _1986 = _1979 / _1983;
    float _2133;
    float _2134;
    float _2135;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2013 = ((uint(_1986 > cbSceneParam._m0[59u].y) + uint(_1986 > cbSceneParam._m0[59u].x)) + uint(_1986 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2014 = _2013 + 43u;
        uint _2022 = _2013 + 44u;
        uint _2030 = _2013 + 45u;
        uint _2038 = _2013 + 46u;
        float _2049 = fma(_1983, cbSceneParam._m0[_2014].w, fma(_1979, cbSceneParam._m0[_2014].z, fma(_1975, cbSceneParam._m0[_2014].y, _1971 * cbSceneParam._m0[_2014].x)));
        float _2053 = fma(_1983, cbSceneParam._m0[_2022].w, fma(_1979, cbSceneParam._m0[_2022].z, fma(_1975, cbSceneParam._m0[_2022].y, _1971 * cbSceneParam._m0[_2022].x)));
        float _2061 = fma(_1983, cbSceneParam._m0[_2038].w, fma(_1979, cbSceneParam._m0[_2038].z, fma(_1975, cbSceneParam._m0[_2038].y, _1971 * cbSceneParam._m0[_2038].x)));
        float _2066 = cbSceneParam._m0[33u].z * _2061;
        float _2068 = cbSceneParam._m0[33u].w * _2061;
        float _2071 = fma(_1983, cbSceneParam._m0[_2030].w, fma(_1979, cbSceneParam._m0[_2030].z, fma(_1975, cbSceneParam._m0[_2030].y, _1971 * cbSceneParam._m0[_2030].x))) / _2061;
        float _2119 = (cbSceneParam._m0[33u].x - sqrt(((_1985 * _1985) + (_1984 * _1984)) + (_1986 * _1986))) * cbSceneParam._m0[33u].y;
        float _4388 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2126 = (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2066 + _2049) / _2061, (_2068 + _2053) / _2061), _2071), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2068 + _2049) / _2061, (_2053 - _2066) / _2061), _2071), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2049 - _2066) / _2061, (_2053 - _2068) / _2061), _2071), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2049 - _2068) / _2061, (_2066 + _2053) / _2061), _2071), 0.0)).x), vec4(0.25)));
        _2133 = 1.0 - (_2126 * cbSceneParam._m0[34u].x);
        _2134 = 1.0 - (_2126 * cbSceneParam._m0[34u].y);
        _2135 = 1.0 - (_2126 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2133 = 1.0;
        _2134 = 1.0;
        _2135 = 1.0;
    }
    float _2199;
    float _2201;
    float _2203;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2187 = fma(_1983, cbSceneParam._m0[63u].w, fma(_1979, cbSceneParam._m0[63u].z, fma(_1975, cbSceneParam._m0[63u].y, _1971 * cbSceneParam._m0[63u].x)));
        float _2188 = fma(_1983, cbSceneParam._m0[60u].w, fma(_1979, cbSceneParam._m0[60u].z, fma(_1975, cbSceneParam._m0[60u].y, _1971 * cbSceneParam._m0[60u].x))) / _2187;
        float _2189 = fma(_1983, cbSceneParam._m0[61u].w, fma(_1979, cbSceneParam._m0[61u].z, fma(_1975, cbSceneParam._m0[61u].y, _1971 * cbSceneParam._m0[61u].x))) / _2187;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2188 >= cbSceneParam._m0[64u].x) && (_2189 >= cbSceneParam._m0[64u].y)) && (_2188 <= cbSceneParam._m0[64u].z)) && (_2189 <= cbSceneParam._m0[64u].w))
        {
            float _2327 = fma(_1983, cbSceneParam._m0[62u].w, fma(_1979, cbSceneParam._m0[62u].z, fma(_1975, cbSceneParam._m0[62u].y, _1971 * cbSceneParam._m0[62u].x))) / _2187;
            float _2331 = isnan(cbSceneParam._m0[41u].w) ? _2327 : (isnan(_2327) ? cbSceneParam._m0[41u].w : max(_2327, cbSceneParam._m0[41u].w));
            float _2374 = (cbSceneParam._m0[33u].x - sqrt(((_1985 * _1985) + (_1984 * _1984)) + (_1986 * _1986))) * cbSceneParam._m0[33u].y;
            float _4404 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
            float _2381 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2188, cbSceneParam._m0[33u].w + _2189), _2331), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2188, _2189 - cbSceneParam._m0[33u].z), _2331), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2188 - cbSceneParam._m0[33u].z, _2189 - cbSceneParam._m0[33u].w), _2331), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2188 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2189), _2331), 0.0)).x), vec4(0.25)));
            float _2385 = 1.0 - (_2381 * cbSceneParam._m0[34u].x);
            float _2386 = 1.0 - (_2381 * cbSceneParam._m0[34u].y);
            float _2387 = 1.0 - (_2381 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2386) ? _2134 : (isnan(_2134) ? _2386 : min(_2134, _2386));
            frontier_phi_36_35_ladder_1 = isnan(_2387) ? _2135 : (isnan(_2135) ? _2387 : min(_2135, _2387));
            frontier_phi_36_35_ladder_2 = isnan(_2385) ? _2133 : (isnan(_2133) ? _2385 : min(_2133, _2385));
        }
        else
        {
            frontier_phi_36_35_ladder = _2134;
            frontier_phi_36_35_ladder_1 = _2135;
            frontier_phi_36_35_ladder_2 = _2133;
        }
        _2199 = frontier_phi_36_35_ladder_2;
        _2201 = frontier_phi_36_35_ladder;
        _2203 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2199 = _2133;
        _2201 = _2134;
        _2203 = _2135;
    }
    uvec4 _2208 = floatBitsToUint(cbInstanceData._m0[_799 + 5u]);
    uint _2210 = _2208.x * 14u;
    uint _2211 = _2210 + 13u;
    float _2218 = _907 + (-1.0);
    float _2223 = (cbLight._m0[_2211].x * _2218) + 1.0;
    float _2224 = (cbLight._m0[_2211].y * _2218) + 1.0;
    float _2225 = (cbLight._m0[_2211].z * _2218) + 1.0;
    float _2226 = (cbLight._m0[_2211].w * _2218) + 1.0;
    uint _2227 = _2210 + 5u;
    float _2233 = isnan(1.0) ? _2224 : (isnan(_2224) ? 1.0 : min(_2224, 1.0));
    uint _2237 = _2210 + 4u;
    float _2246 = isnan(1.0) ? _2223 : (isnan(_2223) ? 1.0 : min(_2223, 1.0));
    uint _2250 = _2210 | 1u;
    float _2261 = dot(vec3(cbLight._m0[_2210].xyz), vec3(_608, _609, _610));
    float _2264 = dot(vec3(cbLight._m0[_2250].xyz), vec3(_608, _609, _610));
    float _4440 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _4451 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2269 = (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * 0.3183098733425140380859375;
    float _2271 = (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * 0.3183098733425140380859375;
    float _2278 = ((cbLight._m0[_2227].x * _2233) * _2271) + (((cbLight._m0[_2237].x * _2199) * _2246) * _2269);
    float _2279 = ((_2233 * cbLight._m0[_2227].y) * _2271) + (((cbLight._m0[_2237].y * _2201) * _2246) * _2269);
    float _2280 = ((_2233 * cbLight._m0[_2227].z) * _2271) + (((cbLight._m0[_2237].z * _2203) * _2246) * _2269);
    uvec4 _2284 = floatBitsToUint(cbLight._m0[_2210 + 12u]);
    bool _2286 = _2284.x == 0u;
    float _2388;
    float _2390;
    float _2392;
    if (_2286)
    {
        _2388 = _2278;
        _2390 = _2279;
        _2392 = _2280;
    }
    else
    {
        uint _2396 = _2210 + 6u;
        float _2412 = (dot(vec3(cbLight._m0[_2210 + 2u].xyz), vec3(_608, _609, _610)) * 0.5) + 0.5;
        float _2413 = _2412 * _2412;
        float _4462 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2414 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _2415 = isnan(1.0) ? _2225 : (isnan(_2225) ? 1.0 : min(_2225, 1.0));
        _2388 = (((cbLight._m0[_2396].x * 0.3183098733425140380859375) * _2414) * _2415) + _2278;
        _2390 = (((cbLight._m0[_2396].y * 0.3183098733425140380859375) * _2414) * _2415) + _2279;
        _2392 = (((cbLight._m0[_2396].z * 0.3183098733425140380859375) * _2414) * _2415) + _2280;
    }
    bool _2395 = _2284.y == 0u;
    float _2450;
    float _2452;
    float _2454;
    if (_2395)
    {
        _2450 = _2388;
        _2452 = _2390;
        _2454 = _2392;
    }
    else
    {
        uint _2623 = _2210 + 7u;
        float _2639 = (dot(vec3(cbLight._m0[_2210 + 3u].xyz), vec3(_608, _609, _610)) * 0.5) + 0.5;
        float _2640 = _2639 * _2639;
        float _4478 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2641 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _2642 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
        _2450 = (((cbLight._m0[_2623].x * 0.3183098733425140380859375) * _2641) * _2642) + _2388;
        _2452 = (((cbLight._m0[_2623].y * 0.3183098733425140380859375) * _2641) * _2642) + _2390;
        _2454 = (((cbLight._m0[_2623].z * 0.3183098733425140380859375) * _2641) * _2642) + _2392;
    }
    uint _2457 = _2210 + 8u;
    float _2470 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2210].w)) * _775) * 0.949999988079071044921875);
    float _2471 = _2470 * _2470;
    float _2472 = cbLight._m0[_2210].x + _689;
    float _2473 = cbLight._m0[_2210].y + _690;
    float _2474 = cbLight._m0[_2210].z + _691;
    float _2478 = inversesqrt(dot(vec3(_2472, _2473, _2474), vec3(_2472, _2473, _2474)));
    float _2479 = _2478 * _2472;
    float _2480 = _2478 * _2473;
    float _2481 = _2478 * _2474;
    float _2482 = dot(vec3(_608, _609, _610), vec3(cbLight._m0[_2210].xyz));
    float _4494 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2485 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
    float _4505 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _2486 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
    float _2487 = dot(vec3(_608, _609, _610), vec3(_2479, _2480, _2481));
    float _4516 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _2490 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
    float _2491 = dot(vec3(cbLight._m0[_2210].xyz), vec3(_2479, _2480, _2481));
    float _4527 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2495 = _2471 * _2471;
    float _2499 = ((_2490 * _2490) * (_2495 + (-1.0))) + 1.0;
    float _2507 = exp2(log2(1.0 - (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0)))) * 5.0);
    float _2508 = 0.959999978542327880859375 - _890;
    float _2510 = 0.959999978542327880859375 - _891;
    float _2511 = 0.959999978542327880859375 - _892;
    float _2518 = 1.0 - _2471;
    float _2529 = (0.5 / (((_2486 * ((_2485 * _2518) + _2471)) + 9.9999999392252902907785028219223e-09) + (((_2486 * _2518) + _2471) * _2485))) * _2485;
    float _4538 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2531 = (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * (_2495 / ((_2499 * _2499) * 3.141590118408203125));
    uint _2545 = _2210 + 9u;
    float _2556 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2250].w)) * _775) * 0.949999988079071044921875);
    float _2557 = _2556 * _2556;
    float _2558 = cbLight._m0[_2250].x + _689;
    float _2559 = cbLight._m0[_2250].y + _690;
    float _2560 = cbLight._m0[_2250].z + _691;
    float _2564 = inversesqrt(dot(vec3(_2558, _2559, _2560), vec3(_2558, _2559, _2560)));
    float _2565 = _2564 * _2558;
    float _2566 = _2564 * _2559;
    float _2567 = _2564 * _2560;
    float _2568 = dot(vec3(_608, _609, _610), vec3(cbLight._m0[_2250].xyz));
    float _4549 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    float _2571 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
    float _2572 = dot(vec3(_608, _609, _610), vec3(_2565, _2566, _2567));
    float _4560 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
    float _2575 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
    float _2576 = dot(vec3(cbLight._m0[_2250].xyz), vec3(_2565, _2566, _2567));
    float _4571 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
    float _2580 = _2557 * _2557;
    float _2584 = ((_2575 * _2575) * (_2580 + (-1.0))) + 1.0;
    float _2591 = exp2(log2(1.0 - (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0)))) * 5.0);
    float _2598 = 1.0 - _2557;
    float _2608 = (0.5 / (((_2486 * ((_2571 * _2598) + _2557)) + 9.9999999392252902907785028219223e-09) + (((_2486 * _2598) + _2557) * _2571))) * _2571;
    float _4582 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
    float _2610 = (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_2580 / ((_2584 * _2584) * 3.141590118408203125));
    float _2620 = (((((_2591 * _2508) + _893) * cbLight._m0[_2545].x) * _2610) * _2233) + ((((cbLight._m0[_2457].x * _2199) * ((_2507 * _2508) + _893)) * _2531) * _2246);
    float _2621 = (((((_2591 * _2510) + _894) * cbLight._m0[_2545].y) * _2610) * _2233) + ((((cbLight._m0[_2457].y * _2201) * ((_2507 * _2510) + _894)) * _2531) * _2246);
    float _2622 = (((((_2591 * _2511) + _895) * cbLight._m0[_2545].z) * _2610) * _2233) + ((((cbLight._m0[_2457].z * _2203) * ((_2507 * _2511) + _895)) * _2531) * _2246);
    float _2678;
    float _2680;
    float _2682;
    if (_2286)
    {
        _2678 = _2620;
        _2680 = _2621;
        _2682 = _2622;
    }
    else
    {
        uint _2684 = _2210 + 2u;
        uint _2688 = _2210 + 10u;
        float _2702 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2684].w)) * _775) * 0.949999988079071044921875);
        float _2703 = _2702 * _2702;
        float _2704 = cbLight._m0[_2684].x + _689;
        float _2705 = cbLight._m0[_2684].y + _690;
        float _2706 = cbLight._m0[_2684].z + _691;
        float _2710 = inversesqrt(dot(vec3(_2704, _2705, _2706), vec3(_2704, _2705, _2706)));
        float _2711 = _2710 * _2704;
        float _2712 = _2710 * _2705;
        float _2713 = _2710 * _2706;
        float _2714 = dot(vec3(_608, _609, _610), vec3(cbLight._m0[_2684].xyz));
        float _4593 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2717 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
        float _2718 = dot(vec3(_608, _609, _610), vec3(_2711, _2712, _2713));
        float _4604 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2721 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _2722 = dot(vec3(cbLight._m0[_2684].xyz), vec3(_2711, _2712, _2713));
        float _4615 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2726 = _2703 * _2703;
        float _2730 = ((_2721 * _2721) * (_2726 + (-1.0))) + 1.0;
        float _2737 = exp2(log2(1.0 - (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)))) * 5.0);
        float _2744 = 1.0 - _2703;
        float _2754 = (0.5 / (((_2486 * ((_2717 * _2744) + _2703)) + 9.9999999392252902907785028219223e-09) + (((_2486 * _2744) + _2703) * _2717))) * _2717;
        float _4626 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        float _2756 = (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2726 / ((_2730 * _2730) * 3.141590118408203125));
        float _2757 = isnan(1.0) ? _2225 : (isnan(_2225) ? 1.0 : min(_2225, 1.0));
        _2678 = (((((_2737 * _2508) + _893) * cbLight._m0[_2688].x) * _2756) * _2757) + _2620;
        _2680 = (((((_2737 * _2510) + _894) * cbLight._m0[_2688].y) * _2756) * _2757) + _2621;
        _2682 = (((((_2737 * _2511) + _895) * cbLight._m0[_2688].z) * _2756) * _2757) + _2622;
    }
    float _2788;
    float _2790;
    float _2792;
    if (_2395)
    {
        _2788 = _2678;
        _2790 = _2680;
        _2792 = _2682;
    }
    else
    {
        uint _2799 = _2210 + 3u;
        uint _2803 = _2210 + 11u;
        float _2817 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2799].w)) * _775) * 0.949999988079071044921875);
        float _2818 = _2817 * _2817;
        float _2819 = cbLight._m0[_2799].x + _689;
        float _2820 = cbLight._m0[_2799].y + _690;
        float _2821 = cbLight._m0[_2799].z + _691;
        float _2825 = inversesqrt(dot(vec3(_2819, _2820, _2821), vec3(_2819, _2820, _2821)));
        float _2826 = _2825 * _2819;
        float _2827 = _2825 * _2820;
        float _2828 = _2825 * _2821;
        float _2829 = dot(vec3(_608, _609, _610), vec3(cbLight._m0[_2799].xyz));
        float _4642 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        float _2832 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
        float _2833 = dot(vec3(_608, _609, _610), vec3(_2826, _2827, _2828));
        float _4653 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        float _2836 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
        float _2837 = dot(vec3(cbLight._m0[_2799].xyz), vec3(_2826, _2827, _2828));
        float _4664 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
        float _2841 = _2818 * _2818;
        float _2845 = ((_2836 * _2836) * (_2841 + (-1.0))) + 1.0;
        float _2852 = exp2(log2(1.0 - (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0)))) * 5.0);
        float _2859 = 1.0 - _2818;
        float _2869 = (0.5 / (((_2486 * ((_2832 * _2859) + _2818)) + 9.9999999392252902907785028219223e-09) + (((_2486 * _2859) + _2818) * _2832))) * _2832;
        float _4675 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
        float _2871 = (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_2841 / ((_2845 * _2845) * 3.141590118408203125));
        float _2872 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
        _2788 = (((((_2852 * _2508) + _893) * cbLight._m0[_2803].x) * _2871) * _2872) + _2678;
        _2790 = (((((_2852 * _2510) + _894) * cbLight._m0[_2803].y) * _2871) * _2872) + _2680;
        _2792 = (((((_2852 * _2511) + _895) * cbLight._m0[_2803].z) * _2871) * _2872) + _2682;
    }
    float _2937;
    float _2939;
    float _2941;
    float _2943;
    float _2945;
    float _2947;
    if (_2208.y == 0u)
    {
        uvec4 _2893 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2894 = _2893.x;
        uint _2905 = uint((float(_2893.y) * floor(float(uint(cbSceneParam._m0[85u].y * _698) / _2894))) + floor(float(uint(cbSceneParam._m0[85u].x * _697) / _2894)));
        float _2915 = (log2(_1986 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2916 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
        uint _2919 = uint(isnan(14.0) ? _2916 : (isnan(_2916) ? 14.0 : min(_2916, 14.0)));
        uvec4 _2924 = texelFetch(g_lightClusterGridBuffer, int(((_2919 << 2u) + (_2905 << 6u)) >> 2u));
        uint _2925 = _2924.x;
        uint _2926 = _2893.z;
        float _3009;
        float _3011;
        float _3013;
        float _3015;
        float _3017;
        float _3019;
        if (((((1u << ((_2926 >> 4u) & 15u)) + 4294967295u) & _2925) == 0u) || ((_2926 & 240u) == 0u))
        {
            _3009 = 0.0;
            _3011 = 0.0;
            _3013 = 0.0;
            _3015 = 0.0;
            _3017 = 0.0;
            _3019 = 0.0;
        }
        else
        {
            float _3010;
            float _3012;
            float _3014;
            float _3016;
            float _3018;
            float _3020;
            float _3153 = 0.0;
            float _3154 = 0.0;
            float _3155 = 0.0;
            float _3156 = 0.0;
            float _3157 = 0.0;
            float _3158 = 0.0;
            uint _3159 = 0u;
            uint _3168;
            bool _3169;
            for (;;)
            {
                _3168 = texelFetch(g_lightClassification, int((((_2919 << 5u) + (_2905 << 9u)) + (_3159 << 2u)) >> 2u)).x;
                _3169 = _3168 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3169)
                {
                    frontier_phi_68_pred = _3158;
                    frontier_phi_68_pred_1 = _3157;
                    frontier_phi_68_pred_2 = _3156;
                    frontier_phi_68_pred_3 = _3154;
                    frontier_phi_68_pred_4 = _3153;
                    frontier_phi_68_pred_5 = _3155;
                }
                else
                {
                    float _3277;
                    float _3278;
                    float _3279;
                    float _3280;
                    float _3281;
                    float _3282;
                    uint _3283;
                    _3277 = _3153;
                    _3278 = _3154;
                    _3279 = _3155;
                    _3280 = _3156;
                    _3281 = _3157;
                    _3282 = _3158;
                    _3283 = _3168;
                    float _3209;
                    float _3210;
                    float _3211;
                    float _3212;
                    float _3213;
                    float _3214;
                    for (;;)
                    {
                        uint _3287 = uint(findLSB(_3283)) + (_3159 << 5u);
                        uint _3284 = (_3283 + 4294967295u) & _3283;
                        uint _3289 = _3287 * 48u;
                        vec4 _3303 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3289)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 3u)).x));
                        uint _3309 = (_3287 * 48u) + 4u;
                        vec4 _3322 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3309)).x, texelFetch(g_PointLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3309 + 3u)).x));
                        uint _3328 = (_3287 * 48u) + 8u;
                        vec3 _3339 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3328)).x, texelFetch(g_PointLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3328 + 2u)).x));
                        float _3343 = _3303.x - _1984;
                        float _3344 = _3303.y - _1985;
                        float _3345 = _3303.z - _1986;
                        float _3346 = dot(vec3(_3343, _3344, _3345), vec3(_3343, _3344, _3345));
                        float _3349 = inversesqrt(_3346);
                        float _3350 = _3349 * _3343;
                        float _3351 = _3349 * _3344;
                        float _3352 = _3349 * _3345;
                        float _3353 = dot(vec3(_720, _723, _726), vec3(_3350, _3351, _3352));
                        float _3358 = 1.0 - (_3346 * _3303.w);
                        float _4701 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                        float _3359 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                        float _3360 = sqrt(_3346) * _3322.w;
                        float _3363 = 1.39999997615814208984375 / (_3360 + 1.39999997615814208984375);
                        float _3364 = _3363 * _3363;
                        float _3367 = ((1.0 - _3364) * _3353) + _3364;
                        float _3370 = _3360 * _3360;
                        float _3374 = ((isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0))) * _3359) / ((_3370 * 0.699999988079071044921875) + 1.0);
                        float _3378 = (-0.0) - _1984;
                        float _3379 = (-0.0) - _1985;
                        float _3380 = (-0.0) - _1986;
                        float _3384 = inversesqrt(dot(vec3(_3378, _3379, _3380), vec3(_3378, _3379, _3380)));
                        float _3385 = _3384 * _3378;
                        float _3386 = _3384 * _3379;
                        float _3387 = _3384 * _3380;
                        float _3394 = exp2(log2(1.0 / ((_3370 * 3.5) + 5.0)) * 0.25);
                        float _3395 = 1.0 - _923;
                        float _3402 = sqrt(1.0 - ((1.0 - (_3395 * _3395)) * (1.0 - (_3394 * _3394))));
                        float _3403 = _3402 * _3402;
                        float _3404 = _3403 * _3403;
                        float _3405 = _3385 + _3350;
                        float _3406 = _3386 + _3351;
                        float _3407 = _3387 + _3352;
                        float _3411 = inversesqrt(dot(vec3(_3405, _3406, _3407), vec3(_3405, _3406, _3407)));
                        float _3415 = dot(vec3(_720, _723, _726), vec3(_3385, _3386, _3387));
                        float _4717 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                        float _3418 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                        float _3419 = dot(vec3(_720, _723, _726), vec3(_3411 * _3405, _3411 * _3406, _3411 * _3407));
                        float _4728 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                        float _3422 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                        float _3426 = ((_3422 * _3422) * (_3404 + (-1.0))) + 1.0;
                        float _3427 = _3363 * _3403;
                        float _3428 = _3427 * _3427;
                        float _3431 = ((1.0 - _3428) * _3353) + _3428;
                        float _4739 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                        float _3432 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                        float _3433 = 1.0 - _3403;
                        float _3443 = (0.5 / (((_3432 * ((_3418 * _3433) + _3403)) + 9.9999999392252902907785028219223e-09) + (((_3432 * _3433) + _3403) * _3418))) * _3432;
                        float _4750 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                        float _3454 = (((_3404 * 3.1415927410125732421875) * (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0)))) / ((_3426 * _3426) * ((_3370 * 2.1991131305694580078125) + 3.141590118408203125))) * _3359;
                        _3212 = (_3374 * _3322.x) + _3280;
                        _3213 = (_3374 * _3322.y) + _3281;
                        _3214 = (_3374 * _3322.z) + _3282;
                        _3209 = (_3454 * _3339.x) + _3277;
                        _3210 = (_3454 * _3339.y) + _3278;
                        _3211 = (_3454 * _3339.z) + _3279;
                        if (_3284 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3277 = _3209;
                            _3278 = _3210;
                            _3279 = _3211;
                            _3280 = _3212;
                            _3281 = _3213;
                            _3282 = _3214;
                            _3283 = _3284;
                        }
                    }
                    frontier_phi_68_pred = _3214;
                    frontier_phi_68_pred_1 = _3213;
                    frontier_phi_68_pred_2 = _3212;
                    frontier_phi_68_pred_3 = _3210;
                    frontier_phi_68_pred_4 = _3209;
                    frontier_phi_68_pred_5 = _3211;
                }
                _3020 = frontier_phi_68_pred;
                _3018 = frontier_phi_68_pred_1;
                _3016 = frontier_phi_68_pred_2;
                _3012 = frontier_phi_68_pred_3;
                _3010 = frontier_phi_68_pred_4;
                _3014 = frontier_phi_68_pred_5;
                uint _3160 = _3159 + 1u;
                if (_3160 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3153 = _3010;
                    _3154 = _3012;
                    _3155 = _3014;
                    _3156 = _3016;
                    _3157 = _3018;
                    _3158 = _3020;
                    _3159 = _3160;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3009 = _3010;
            _3011 = _3012;
            _3013 = _3014;
            _3015 = _3016;
            _3017 = _3018;
            _3019 = _3020;
        }
        uvec4 _3023 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3024 = _3023.z;
        uint _3026 = (_3024 >> 8u) & 15u;
        float _3121;
        float _3123;
        float _3125;
        float _3127;
        float _3129;
        float _3131;
        if (((4294967295u << _3026) & _2925) == 0u)
        {
            _3121 = _3009;
            _3123 = _3011;
            _3125 = _3013;
            _3127 = _3015;
            _3129 = _3017;
            _3131 = _3019;
        }
        else
        {
            float _3146 = inversesqrt(dot(vec3(_1984, _1985, _1986), vec3(_1984, _1985, _1986)));
            float _3147 = _3146 * _1984;
            float _3148 = _3146 * _1985;
            float _3149 = _3146 * _1986;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3026 < ((_3024 >> 12u) & 15u))
            {
                float _3122;
                float _3124;
                float _3126;
                float _3128;
                float _3130;
                float _3132;
                float _3260 = _3009;
                float _3261 = _3011;
                float _3262 = _3013;
                float _3263 = _3015;
                float _3264 = _3017;
                float _3265 = _3019;
                uint _3266 = _3026;
                uint _3275;
                bool _3276;
                for (;;)
                {
                    _3275 = texelFetch(g_lightClassification, int((((_2919 << 5u) + (_2905 << 9u)) + (_3266 << 2u)) >> 2u)).x;
                    _3276 = _3275 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3276)
                    {
                        frontier_phi_74_pred = _3262;
                        frontier_phi_74_pred_1 = _3261;
                        frontier_phi_74_pred_2 = _3260;
                        frontier_phi_74_pred_3 = _3265;
                        frontier_phi_74_pred_4 = _3264;
                        frontier_phi_74_pred_5 = _3263;
                    }
                    else
                    {
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3754;
                        float _3755;
                        float _3756;
                        float _3757;
                        float _3758;
                        float _3759;
                        float _3472 = _3260;
                        float _3473 = _3261;
                        float _3474 = _3262;
                        float _3475 = _3263;
                        float _3476 = _3264;
                        float _3477 = _3265;
                        uint _3478 = _3275;
                        uint _3479;
                        vec4 _3504;
                        float _3505;
                        vec4 _3520;
                        vec3 _3532;
                        vec4 _3547;
                        vec4 _3563;
                        float _3610;
                        bool _3611;
                        for (;;)
                        {
                            uint _3489 = ((_3266 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3478));
                            _3479 = (_3478 + 4294967295u) & _3478;
                            uint _3491 = _3489 * 40u;
                            _3504 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 3u)).x));
                            _3505 = _3504.w;
                            uint _3507 = (_3489 * 40u) + 4u;
                            _3520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 3u)).x));
                            uint _3522 = (_3489 * 40u) + 8u;
                            _3532 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x));
                            uint _3534 = (_3489 * 40u) + 16u;
                            _3547 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3534)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 3u)).x));
                            uint _3550 = (_3489 * 40u) + 20u;
                            _3563 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3550)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 3u)).x));
                            uint _3566 = (_3489 * 40u) + 24u;
                            vec4 _3579 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 3u)).x));
                            uint _3585 = (_3489 * 40u) + 28u;
                            vec4 _3598 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 3u)).x));
                            _3610 = fma(_1986, _3598.z, fma(_1985, _3598.y, _3598.x * _1984)) + _3598.w;
                            _3611 = !((fma(_1986, _3579.z, fma(_1985, _3579.y, _3579.x * _1984)) + _3579.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3611)
                            {
                                float _3638 = _3504.x - _1984;
                                float _3639 = _3504.y - _1985;
                                float _3640 = _3504.z - _1986;
                                float _3641 = dot(vec3(_3638, _3639, _3640), vec3(_3638, _3639, _3640));
                                float _3644 = inversesqrt(_3641);
                                float _3645 = _3644 * _3638;
                                float _3646 = _3644 * _3639;
                                float _3647 = _3644 * _3640;
                                float _3651 = 1.0 - (_3641 / (_3505 * _3505));
                                float _4761 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                                float _3652 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                                float _3656 = sqrt(_3641) * _3520.w;
                                float _3658 = 1.39999997615814208984375 / (_3656 + 1.39999997615814208984375);
                                float _3659 = _3658 * _3658;
                                float _3662 = ((1.0 - _3659) * dot(vec3(_3645, _3646, _3647), vec3(_720, _723, _726))) + _3659;
                                float _3665 = _3656 * _3656;
                                float _3669 = (fma(_1986, _3547.z, fma(_1985, _3547.y, _3547.x * _1984)) + _3547.w) / _3610;
                                float _3670 = (fma(_1986, _3563.z, fma(_1985, _3563.y, _3563.x * _1984)) + _3563.w) / _3610;
                                float _3674 = 1.0 - dot(vec2(_3669, _3670), vec2(_3669, _3670));
                                float _4777 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                                float _3675 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                                float _3676 = _3675 * (((isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0))) * _3652) / ((_3665 * 0.699999988079071044921875) + 1.0));
                                float _3688 = exp2(log2(1.0 / ((_3665 * 3.5) + 5.0)) * 0.25);
                                float _3689 = 1.0 - _923;
                                float _3696 = sqrt(1.0 - ((1.0 - (_3689 * _3689)) * (1.0 - (_3688 * _3688))));
                                float _3697 = _3696 * _3696;
                                float _3698 = _3697 * _3697;
                                float _3699 = _3645 - _3147;
                                float _3700 = _3646 - _3148;
                                float _3701 = _3647 - _3149;
                                float _3705 = inversesqrt(dot(vec3(_3699, _3700, _3701), vec3(_3699, _3700, _3701)));
                                float _3709 = dot(vec3(_720, _723, _726), vec3((-0.0) - _3147, (-0.0) - _3148, (-0.0) - _3149));
                                float _4788 = isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0));
                                float _3712 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
                                float _3713 = dot(vec3(_720, _723, _726), vec3(_3705 * _3699, _3705 * _3700, _3705 * _3701));
                                float _4799 = isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0));
                                float _3716 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                                float _3720 = ((_3716 * _3716) * (_3698 + (-1.0))) + 1.0;
                                float _3721 = _3658 * _3697;
                                float _3722 = _3721 * _3721;
                                float _3728 = ((1.0 - _3722) * dot(vec3(_720, _723, _726), vec3(_3645, _3646, _3647))) + _3722;
                                float _4810 = isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0));
                                float _3729 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                                float _3730 = 1.0 - _3697;
                                float _3740 = (0.5 / (((_3729 * ((_3712 * _3730) + _3697)) + 9.9999999392252902907785028219223e-09) + (((_3729 * _3730) + _3697) * _3712))) * _3729;
                                float _4821 = isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0));
                                float _3750 = (_3675 * _3652) * (((_3698 * 3.1415927410125732421875) * (isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0)))) / ((_3720 * _3720) * ((_3665 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3750 * _3532.z;
                                frontier_phi_80_pred_1 = _3750 * _3532.y;
                                frontier_phi_80_pred_2 = _3750 * _3532.x;
                                frontier_phi_80_pred_3 = _3676 * _3520.z;
                                frontier_phi_80_pred_4 = _3676 * _3520.y;
                                frontier_phi_80_pred_5 = _3676 * _3520.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3756 = frontier_phi_80_pred;
                            _3755 = frontier_phi_80_pred_1;
                            _3754 = frontier_phi_80_pred_2;
                            _3759 = frontier_phi_80_pred_3;
                            _3758 = frontier_phi_80_pred_4;
                            _3757 = frontier_phi_80_pred_5;
                            _3462 = _3757 + _3475;
                            _3463 = _3758 + _3476;
                            _3464 = _3759 + _3477;
                            _3459 = _3754 + _3472;
                            _3460 = _3755 + _3473;
                            _3461 = _3756 + _3474;
                            if (_3479 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3472 = _3459;
                                _3473 = _3460;
                                _3474 = _3461;
                                _3475 = _3462;
                                _3476 = _3463;
                                _3477 = _3464;
                                _3478 = _3479;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3461;
                        frontier_phi_74_pred_1 = _3460;
                        frontier_phi_74_pred_2 = _3459;
                        frontier_phi_74_pred_3 = _3464;
                        frontier_phi_74_pred_4 = _3463;
                        frontier_phi_74_pred_5 = _3462;
                    }
                    _3126 = frontier_phi_74_pred;
                    _3124 = frontier_phi_74_pred_1;
                    _3122 = frontier_phi_74_pred_2;
                    _3132 = frontier_phi_74_pred_3;
                    _3130 = frontier_phi_74_pred_4;
                    _3128 = frontier_phi_74_pred_5;
                    uint _3267 = _3266 + 1u;
                    if (_3267 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3260 = _3122;
                        _3261 = _3124;
                        _3262 = _3126;
                        _3263 = _3128;
                        _3264 = _3130;
                        _3265 = _3132;
                        _3266 = _3267;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3130;
                frontier_phi_62_63_ladder_1 = _3128;
                frontier_phi_62_63_ladder_2 = _3126;
                frontier_phi_62_63_ladder_3 = _3132;
                frontier_phi_62_63_ladder_4 = _3124;
                frontier_phi_62_63_ladder_5 = _3122;
            }
            else
            {
                frontier_phi_62_63_ladder = _3017;
                frontier_phi_62_63_ladder_1 = _3015;
                frontier_phi_62_63_ladder_2 = _3013;
                frontier_phi_62_63_ladder_3 = _3019;
                frontier_phi_62_63_ladder_4 = _3011;
                frontier_phi_62_63_ladder_5 = _3009;
            }
            _3121 = frontier_phi_62_63_ladder_5;
            _3123 = frontier_phi_62_63_ladder_4;
            _3125 = frontier_phi_62_63_ladder_2;
            _3127 = frontier_phi_62_63_ladder_1;
            _3129 = frontier_phi_62_63_ladder;
            _3131 = frontier_phi_62_63_ladder_3;
        }
        float _3136 = isnan(1.0) ? _907 : (isnan(_907) ? 1.0 : min(_907, 1.0));
        _2937 = (_3136 * _3127) + _2450;
        _2939 = (_3136 * _3129) + _2452;
        _2941 = (_3136 * _3131) + _2454;
        _2943 = ((_3121 * _893) * _3136) + _2788;
        _2945 = ((_3123 * _894) * _3136) + _2790;
        _2947 = ((_3125 * _895) * _3136) + _2792;
    }
    else
    {
        _2937 = _2450;
        _2939 = _2452;
        _2941 = _2454;
        _2943 = _2788;
        _2945 = _2790;
        _2947 = _2792;
    }
    float _4837 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _4848 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _4859 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _4870 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _2965 = ((isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0))) * (_2937 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _907))) + ((_2943 + ((isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0))) * _1714)) * cbPerFrame._m0[3u].x);
    float _2966 = ((isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0))) * (_2939 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _907))) + ((_2945 + ((isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0))) * _1714)) * cbPerFrame._m0[3u].x);
    float _2967 = ((isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0))) * (_2941 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _907))) + ((_2947 + ((isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))) * _1714)) * cbPerFrame._m0[3u].x);
    float _2975 = cbInstanceData._m0[_799 + 6u].w * (isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0)));
    float _2980 = _697 / cbSceneParam._m0[86u].x;
    float _2981 = _698 / cbSceneParam._m0[86u].y;
    vec4 _2995 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2980, _2981, (log2((isnan(cbSceneParam._m0[77u].w) ? _632 : (isnan(_632) ? cbSceneParam._m0[77u].w : min(_632, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2997 = _2995.x;
    float _2998 = _2995.y;
    float _2999 = _2995.z;
    float _3000 = _2995.w;
    float _3071;
    float _3073;
    float _3075;
    float _3077;
    if (_632 > cbSceneParam._m0[78u].w)
    {
        float _3034 = isnan(_632) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _632 : min(cbSceneParam._m0[80u].w, _632));
        float _3035 = _3034 / _632;
        float _3046 = _3035 * _682;
        float _3047 = _683 * _3035;
        float _3048 = (-0.0) - _3047;
        float _3049 = _3035 * _684;
        float _3051 = (cbSceneParam._m0[77u].w * _3048) / _3034;
        float _3052 = _3051 + cbSceneParam._m0[79u].w;
        float _3053 = cbSceneParam._m0[79u].w - _3047;
        float _3059 = sqrt(((_3046 * _3046) + (_3047 * _3047)) + (_3049 * _3049));
        float _3062 = (1.0 - (cbSceneParam._m0[77u].w / _3034)) * _3059;
        float _3067 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3069 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3222;
        if (abs((_3048 - _3051) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3222 = ((((_3052 > 0.0) ? exp2(_3067 * _3052) : (2.0 - exp2(_3069 * _3052))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3062;
        }
        else
        {
            float _3182 = 1.0 / cbSceneParam._m0[80u].x;
            float _3183 = isnan(_3053) ? _3052 : (isnan(_3052) ? _3053 : max(_3052, _3053));
            float _3184 = isnan(_3053) ? _3052 : (isnan(_3052) ? _3053 : min(_3052, _3053));
            float _3193 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : min(_3183, 0.0));
            float _3194 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : min(_3184, 0.0));
            _3222 = ((abs(_3059 / _3048) * cbSceneParam._m0[80u].y) * ((((_3193 - _3194) * 2.0) - ((exp2(_3067 * (isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0)))) - exp2(_3067 * (isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0))))) * _3182)) - ((exp2(_3069 * _3193) - exp2(_3069 * _3194)) * _3182))) + (_3062 * cbSceneParam._m0[80u].z);
        }
        vec4 _3224 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2980, _2981, 1.0), 0.0);
        float _3233 = exp2((_3222 * (-1.44269502162933349609375)) * (1.0 - _3224.w));
        float _3234 = log2(_3233);
        float _3250 = log2(_3000);
        _3071 = (exp2(_3250 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3234 * cbSceneParam._m0[78u].x)) * _3224.x) / cbSceneParam._m0[78u].x)) + _2997;
        _3073 = (exp2(_3250 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3234 * cbSceneParam._m0[78u].y)) * _3224.y) / cbSceneParam._m0[78u].y)) + _2998;
        _3075 = (exp2(_3250 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3234 * cbSceneParam._m0[78u].z)) * _3224.z) / cbSceneParam._m0[78u].z)) + _2999;
        _3077 = _3233 * _3000;
    }
    else
    {
        _3071 = _2997;
        _3073 = _2998;
        _3075 = _2999;
        _3077 = _3000;
    }
    float _3089 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3090 = _3089 == 3.0;
    float _3091 = log2(_3077);
    float _3098 = exp2(_3091 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0)));
    float _3099 = exp2(_3091 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0)));
    float _3100 = exp2(_3091 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0)));
    float _3109 = (_3089 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3109 * (_3090 ? _3098 : (_3098 + (cbSceneParam._m0[72u].w * _3071)));
    SV_Target.y = _3109 * (_3090 ? _3099 : (_3099 + (cbSceneParam._m0[72u].w * _3073)));
    SV_Target.z = _3109 * (_3090 ? _3100 : (_3100 + (cbSceneParam._m0[72u].w * _3075)));
    SV_Target.w = _2975;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2975;
}


