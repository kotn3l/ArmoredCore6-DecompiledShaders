#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 5) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1282;
float _3983;
float _3984;
float _3985;
float _3986;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234;
    float _235;
    float _236;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
    }
    else
    {
        _234 = _220;
        _235 = _221;
        _236 = _222;
    }
    float _281 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _291 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _281);
    float _292 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _281);
    float _293 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _281);
    vec4 _306 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _311 = _306.z;
    float _317 = exp2(log2(_311 * 22.0) * 260.0);
    float _318 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _319 = isnan(1.0) ? _318 : (isnan(_318) ? 1.0 : min(_318, 1.0));
    vec4 _333 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _343 = cbMtdParam._m0[10u].x * _333.x;
    float _344 = cbMtdParam._m0[10u].y * _333.y;
    float _345 = cbMtdParam._m0[10u].z * _333.z;
    vec4 _357 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _379 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _401 = (((((_357.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _379.x) - _343) * _319) + _343;
    float _402 = (((((_357.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _379.y) - _344) * _319) + _344;
    float _403 = (((((_357.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _379.z) - _345) * _319) + _345;
    float _404 = _379.w * _357.w;
    vec4 _421 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _431 = (((_421.x - cbMtdParam._m0[15u].y) + cbMtdParam._m0[14u].z) * _319) + cbMtdParam._m0[15u].y;
    vec4 _443 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _445 = _443.x;
    float _446 = _443.y;
    float _452 = cbMtdParam._m0[13u].y + _443.z;
    vec4 _464 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _476 = ((((_311 * 2.0) * (cbMtdParam._m0[13u].x + _464.z)) - _452) * _319) + _452;
    float _480 = (_306.x * 2.0) + (-1.0);
    float _482 = (_306.y * 2.0) + (-1.0);
    float _483 = dot(vec2(_480, _482), vec2(_480, _482));
    float _4005 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _488 = sqrt(1.0 - (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))));
    float _501 = ((((((_464.x - _445) * _319) + _445) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _480;
    float _502 = ((((((_464.y - _446) * _319) + _446) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _482;
    float _505 = fma(_488, _234, fma(_502, _226 * TANGENT.x, (_212 * _204) * _501));
    float _508 = fma(_488, _235, fma(_502, _226 * TANGENT.y, (_212 * _205) * _501));
    float _511 = fma(_488, _236, fma(_502, _226 * TANGENT.z, (_212 * _206) * _501));
    float _515 = inversesqrt(dot(vec3(_505, _508, _511), vec3(_505, _508, _511)));
    float _516 = _515 * _505;
    float _517 = _515 * _508;
    float _518 = _515 * _511;
    float _4016 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _519 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _4027 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _520 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _4038 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _521 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _4049 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _522 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _4060 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _523 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _4071 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _524 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _532 = cbMatDynParam._m0[9u].x * _521;
    float _533 = cbMatDynParam._m0[9u].y * _522;
    float _534 = cbMatDynParam._m0[9u].z * _523;
    float _542 = inversesqrt(dot(vec3(_291, _292, _293), vec3(_291, _292, _293)));
    float _543 = _542 * _291;
    float _544 = _542 * _292;
    float _545 = _542 * _293;
    float _546 = dot(vec3(_516, _517, _518), vec3(_543, _544, _545));
    float _552 = abs(exp2(log2(_546) * cbMatDynParam._m0[12u].x));
    float _553 = isnan(0.100000001490116119384765625) ? _552 : (isnan(_552) ? 0.100000001490116119384765625 : max(_552, 0.100000001490116119384765625));
    float _559 = ((isnan(0.699999988079071044921875) ? _553 : (isnan(_553) ? 0.699999988079071044921875 : min(_553, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _582 = 1.0 - cbMatDynParam._m0[8u].w;
    float _4092 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _585 = 1.0 - cbMatDynParam._m0[7u].w;
    float _4103 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _586 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _590 = dot(vec3(_516, _517, _518), vec3(0.0, -1.0, 0.0));
    float _4114 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _593 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _600 = (_593 * _521) * cbMatDynParam._m0[11u].x;
    float _602 = (_593 * _522) * cbMatDynParam._m0[11u].y;
    float _604 = (_593 * _523) * cbMatDynParam._m0[11u].z;
    float _611 = dot(vec3(_543, _544, _545), vec3(_516, _517, _518));
    float _614 = _611 * 2.0;
    float _624 = dot(vec3((-0.0) - (_543 - (_614 * _516)), (-0.0) - (_544 - (_614 * _517)), (-0.0) - (_545 - (_614 * _518))), vec3(0.0, -1.0, 0.0));
    float _4125 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _631 = exp2(log2(isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * 4.0);
    float _657 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _662 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _664 = _662.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _961 = sqrt(((_291 * _291) + (_292 * _292)) + (_293 * _293));
        float _967 = (cbMatDynParam._m0[5u].x * _961) + cbMatDynParam._m0[5u].y;
        float _4136 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _972 = (cbMatDynParam._m0[5u].z * _961) + cbMatDynParam._m0[5u].w;
        float _4147 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) - _968)) + _968) < ((_664 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _675 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _676 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _678 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _680 = _678.w;
    float _698 = fma(_518, cbSceneParam._m0[5u].z, fma(_517, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _516));
    float _701 = fma(_518, cbSceneParam._m0[6u].z, fma(_517, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _516));
    float _704 = fma(_518, cbSceneParam._m0[7u].z, fma(_517, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _516));
    vec4 _706 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _708 = _706.x;
    float _720 = (((_706.y - _520) + (_706.w * _520)) * cbMtdParam._m0[3u].x) + _520;
    vec4 _721 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _737 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_708 * _708)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _721.z;
    float _745 = (((cbMatDynParam._m0[15u].x - _524) * cbMatDynParam._m0[15u].w) * _737) + _524;
    float _753 = ((_737 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _720)) + _720;
    uint _777 = uint(roundEven(NORMAL.w)) * 13u;
    uint _778 = _777 + 9u;
    uint _779 = _778 + uint(cbMatDynParam._m0[0u].w);
    float _785 = (cbMtdParam._m0[0u].x * _532) * cbInstanceData._m0[_779].x;
    float _786 = (cbMtdParam._m0[0u].y * _533) * cbInstanceData._m0[_779].y;
    float _787 = (cbMtdParam._m0[0u].z * _534) * cbInstanceData._m0[_779].z;
    float _4158 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _788 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _4169 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _789 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _4180 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _790 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    vec4 _791 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _796 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _807 = (((_796.x - _745) + (_796.w * _745)) * cbMtdParam._m0[3u].x) + _745;
    float _820 = (cbMtdParam._m0[3u].x * (((_788 * _680) - _788) + _791.x)) + _788;
    float _821 = (cbMtdParam._m0[3u].x * (((_789 * _680) - _789) + _791.y)) + _789;
    float _822 = (cbMtdParam._m0[3u].x * (((_790 * _680) - _790) + _791.z)) + _790;
    vec4 _823 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _836 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_745 * (_532 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_745 * (_533 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_745 * (_534 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _823.z;
    float _840 = _836 * cbMatDynParam._m0[13u].w;
    float _850 = (_840 * (cbMatDynParam._m0[13u].x - _820)) + _820;
    float _851 = (_840 * (cbMatDynParam._m0[13u].y - _821)) + _821;
    float _852 = (_840 * (cbMatDynParam._m0[13u].z - _822)) + _822;
    float _860 = ((_836 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _807)) + _807;
    float _861 = 1.0 - _860;
    float _862 = _861 * _850;
    float _863 = _861 * _851;
    float _864 = _861 * _852;
    float _868 = (_850 + (-0.039999999105930328369140625)) * _860;
    float _869 = (_851 + (-0.039999999105930328369140625)) * _860;
    float _870 = (_852 + (-0.039999999105930328369140625)) * _860;
    float _871 = _868 + 0.039999999105930328369140625;
    float _872 = _869 + 0.039999999105930328369140625;
    float _873 = _870 + 0.039999999105930328369140625;
    vec4 _882 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _675, cbSceneParam._m0[86u].y * _676));
    float _885 = _882.x * TEXCOORD_4;
    float _886 = _546 * 2.0;
    float _890 = (_886 * _516) - _543;
    float _891 = (_886 * _517) - _544;
    float _892 = (_886 * _518) - _545;
    float _893 = abs(_611);
    float _4191 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _895 = sqrt(_753);
    float _907 = exp2((_895 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_895 * 3.0));
    float _913 = (1.0 - _907) * ((_895 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _914 = _907 * _895;
    float _942 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _946 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _950 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1281;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1006 = fma(_950, cbModelParam._m0[26u].z, fma(_946, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _942));
        float _1010 = fma(_950, cbModelParam._m0[27u].z, fma(_946, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _942));
        float _1014 = fma(_950, cbModelParam._m0[28u].z, fma(_946, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _942));
        float _1039 = _942 + _516;
        float _1040 = _946 + _517;
        float _1041 = _950 + _518;
        float _1051 = fma(_1041, cbModelParam._m0[26u].z, fma(_1040, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1039)) - _1006;
        float _1052 = fma(_1041, cbModelParam._m0[27u].z, fma(_1040, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1039)) - _1010;
        float _1053 = fma(_1041, cbModelParam._m0[28u].z, fma(_1040, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1039)) - _1014;
        float _1057 = inversesqrt(dot(vec3(_1051, _1052, _1053), vec3(_1051, _1052, _1053)));
        float _1070 = ((_1057 * _1051) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1006 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1071 = ((_1057 * _1052) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1010 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1072 = ((_1057 * _1053) / cbModelParam._m0[34u].z) + ((((((_1014 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        float _1109 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1075.x + (-0.5));
        float _1111 = _1109 * (_1075.y + (-0.5));
        float _1112 = _1109 * (_1075.z + (-0.5));
        float _1119 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1082.x + (-0.5));
        float _1121 = _1119 * (_1082.y + (-0.5));
        float _1122 = _1119 * (_1082.z + (-0.5));
        float _1129 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1089.x + (-0.5));
        float _1131 = _1129 * (_1089.y + (-0.5));
        float _1132 = _1129 * (_1089.z + (-0.5));
        float _1139 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1096.x + (-0.5));
        float _1141 = _1139 * (_1096.y + (-0.5));
        float _1142 = _1139 * (_1096.z + (-0.5));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = _1110 * 0.5;
        float _1147 = _1120 * 0.5;
        float _1148 = _1130 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1163 = (dot(vec3(_516, _517, _518), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _4217 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1173 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _4228 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _4239 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_1175 + 1.0))) + _1180) * _1143;
        float _1190 = _1111 * 0.5;
        float _1191 = _1121 * 0.5;
        float _1192 = _1131 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1206 = (dot(vec3(_516, _517, _518), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _4250 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1215 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _4261 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _4272 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_1217 + 1.0))) + _1222) * _1144;
        float _1232 = _1112 * 0.5;
        float _1233 = _1122 * 0.5;
        float _1234 = _1132 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1248 = (dot(vec3(_516, _517, _518), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _4283 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1257 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _4294 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _4305 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_1259 + 1.0))) + _1264) * _1145;
        _1281 = _1112;
        _1283 = _1111;
        _1284 = _1110;
        _1285 = _1122;
        _1286 = _1121;
        _1287 = _1120;
        _1288 = _1132;
        _1289 = _1131;
        _1290 = _1130;
        _1291 = _1145;
        _1292 = _1144;
        _1293 = _1143;
        _1294 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
        _1295 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
        _1296 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
    }
    else
    {
        _1281 = _1282;
        _1283 = _1282;
        _1284 = _1282;
        _1285 = _1282;
        _1286 = _1282;
        _1287 = _1282;
        _1288 = _1282;
        _1289 = _1282;
        _1290 = _1282;
        _1291 = _1282;
        _1292 = _1282;
        _1293 = _1282;
        _1294 = 0.0;
        _1295 = 0.0;
        _1296 = 0.0;
    }
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1325 = fma(_950, cbModelParam._m0[30u].z, fma(_946, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _942));
        float _1329 = fma(_950, cbModelParam._m0[31u].z, fma(_946, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _942));
        float _1333 = fma(_950, cbModelParam._m0[32u].z, fma(_946, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _942));
        float _1356 = _942 + _516;
        float _1357 = _946 + _517;
        float _1358 = _950 + _518;
        float _1368 = fma(_1358, cbModelParam._m0[30u].z, fma(_1357, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1356)) - _1325;
        float _1369 = fma(_1358, cbModelParam._m0[31u].z, fma(_1357, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1356)) - _1329;
        float _1370 = fma(_1358, cbModelParam._m0[32u].z, fma(_1357, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1356)) - _1333;
        float _1374 = inversesqrt(dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370)));
        float _1387 = ((_1374 * _1368) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1325 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1388 = ((_1374 * _1369) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1329 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1389 = ((_1374 * _1370) / cbModelParam._m0[35u].z) + ((((((_1333 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        vec4 _1412 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        float _1424 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1425 = _1424 * (_1391.x + (-0.5));
        float _1426 = _1424 * (_1391.y + (-0.5));
        float _1427 = _1424 * (_1391.z + (-0.5));
        float _1434 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1435 = _1434 * (_1398.x + (-0.5));
        float _1436 = _1434 * (_1398.y + (-0.5));
        float _1437 = _1434 * (_1398.z + (-0.5));
        float _1444 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1445 = _1444 * (_1405.x + (-0.5));
        float _1446 = _1444 * (_1405.y + (-0.5));
        float _1447 = _1444 * (_1405.z + (-0.5));
        float _1454 = exp2((_1412.w + (-0.5)) * 20.0) * 2.0;
        float _1455 = _1454 * (_1412.x + (-0.5));
        float _1456 = _1454 * (_1412.y + (-0.5));
        float _1457 = _1454 * (_1412.z + (-0.5));
        float _1458 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1459 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1460 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1461 = _1425 * 0.5;
        float _1462 = _1435 * 0.5;
        float _1463 = _1445 * 0.5;
        float _1464 = dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463));
        float _1469 = (_1464 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1464);
        float _1477 = (dot(vec3(_516, _517, _518), vec3(_1469 * _1461, _1469 * _1462, _1469 * _1463)) + 1.0) * 0.5;
        float _4346 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1486 = sqrt(((_1462 * _1462) + (_1461 * _1461)) + (_1463 * _1463)) / (_1458 + 9.9999997473787516355514526367188e-06);
        float _4357 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1488 = _1487 * 2.0;
        float _1492 = (1.0 - _1487) / (_1487 + 1.0);
        float _4368 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _1502 = ((((1.0 - _1493) * (_1488 + 2.0)) * exp2(log2(isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_1488 + 1.0))) + _1493) * _1458;
        float _1503 = _1426 * 0.5;
        float _1504 = _1436 * 0.5;
        float _1505 = _1446 * 0.5;
        float _1506 = dot(vec3(_1503, _1504, _1505), vec3(_1503, _1504, _1505));
        float _1511 = (_1506 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1506);
        float _1519 = (dot(vec3(_516, _517, _518), vec3(_1511 * _1503, _1511 * _1504, _1511 * _1505)) + 1.0) * 0.5;
        float _4379 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1528 = sqrt(((_1504 * _1504) + (_1503 * _1503)) + (_1505 * _1505)) / (_1459 + 9.9999997473787516355514526367188e-06);
        float _4390 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _1530 = _1529 * 2.0;
        float _1534 = (1.0 - _1529) / (_1529 + 1.0);
        float _4401 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _1544 = ((((1.0 - _1535) * (_1530 + 2.0)) * exp2(log2(isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_1530 + 1.0))) + _1535) * _1459;
        float _1545 = _1427 * 0.5;
        float _1546 = _1437 * 0.5;
        float _1547 = _1447 * 0.5;
        float _1548 = dot(vec3(_1545, _1546, _1547), vec3(_1545, _1546, _1547));
        float _1553 = (_1548 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1548);
        float _1561 = (dot(vec3(_516, _517, _518), vec3(_1553 * _1545, _1553 * _1546, _1553 * _1547)) + 1.0) * 0.5;
        float _4412 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1570 = sqrt(((_1546 * _1546) + (_1545 * _1545)) + (_1547 * _1547)) / (_1460 + 9.9999997473787516355514526367188e-06);
        float _4423 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _1572 = _1571 * 2.0;
        float _1576 = (1.0 - _1571) / (_1571 + 1.0);
        float _4434 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _1586 = ((((1.0 - _1577) * (_1572 + 2.0)) * exp2(log2(isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_1572 + 1.0))) + _1577) * _1460;
        _1594 = _1427;
        _1595 = _1426;
        _1596 = _1425;
        _1597 = _1437;
        _1598 = _1436;
        _1599 = _1435;
        _1600 = _1447;
        _1601 = _1446;
        _1602 = _1445;
        _1603 = _1460;
        _1604 = _1459;
        _1605 = _1458;
        _1606 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)));
        _1607 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)));
        _1608 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)));
    }
    else
    {
        _1594 = _1282;
        _1595 = _1282;
        _1596 = _1282;
        _1597 = _1282;
        _1598 = _1282;
        _1599 = _1282;
        _1600 = _1282;
        _1601 = _1282;
        _1602 = _1282;
        _1603 = _1282;
        _1604 = _1282;
        _1605 = _1282;
        _1606 = 0.0;
        _1607 = 0.0;
        _1608 = 0.0;
    }
    float _1618 = (cbModelParam._m0[1u].x * (_1606 - _1294)) + _1294;
    float _1619 = (cbModelParam._m0[1u].x * (_1607 - _1295)) + _1295;
    float _1620 = (cbModelParam._m0[1u].x * (_1608 - _1296)) + _1296;
    float _1641 = fma(_1620, cbSceneParam._m0[89u].z, fma(_1619, cbSceneParam._m0[89u].y, _1618 * cbSceneParam._m0[89u].x));
    float _1644 = fma(_1620, cbSceneParam._m0[90u].z, fma(_1619, cbSceneParam._m0[90u].y, _1618 * cbSceneParam._m0[90u].x));
    float _1647 = fma(_1620, cbSceneParam._m0[91u].z, fma(_1619, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1618));
    float _1662 = _890 * 0.5;
    float _1663 = _891 * 0.5;
    float _1664 = _892 * 0.5;
    float _1665 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1596, _1599, _1602, _1605));
    float _1668 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1595, _1598, _1601, _1604));
    float _1671 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1594, _1597, _1600, _1603));
    float _1702;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1678 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1281, _1285, _1288, _1291));
        float _1682 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1283, _1286, _1289, _1292));
        float _1686 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1284, _1287, _1290, _1293));
        float _1693 = dot(vec4(cbModelParam._m0[39u]), vec4(_1662, _1663, _1664, 1.0));
        _1702 = dot(vec3(isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)), isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)), isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1693) ? 0.0 : (isnan(0.0) ? _1693 : max(0.0, _1693))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1702 = 1.0;
    }
    float _1713;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1704 = dot(vec4(cbModelParam._m0[40u]), vec4(_1662, _1663, _1664, 1.0));
        _1713 = dot(vec3(isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)), isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)), isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1704) ? 0.0 : (isnan(0.0) ? _1704 : max(0.0, _1704))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1713 = 1.0;
    }
    float _1717 = (_1713 * cbModelParam._m0[1u].x) + (_1702 * (1.0 - cbModelParam._m0[1u].x));
    float _1727 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _753);
    float _1728 = isnan(_1727) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1727 : min(cbModelParam._m0[25u].z, _1727));
    float _1808;
    float _1810;
    float _1812;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1775 = fma(_950, cbModelParam._m0[13u].z, fma(_946, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _942)) + cbModelParam._m0[13u].w;
        float _1779 = fma(_950, cbModelParam._m0[14u].z, fma(_946, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _942)) + cbModelParam._m0[14u].w;
        float _1783 = fma(_950, cbModelParam._m0[15u].z, fma(_946, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _942)) + cbModelParam._m0[15u].w;
        float _1786 = fma(_892, cbModelParam._m0[13u].z, fma(_891, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _890));
        float _1789 = fma(_892, cbModelParam._m0[14u].z, fma(_891, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _890));
        float _1792 = fma(_892, cbModelParam._m0[15u].z, fma(_891, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _890));
        float _1820;
        if (_1786 > 0.0)
        {
            _1820 = abs((1.0 - _1775) / _1786);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1775 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1820 = frontier_phi_19_17_ladder;
        }
        float _1995;
        if (_1789 > 0.0)
        {
            _1995 = abs((1.0 - _1779) / _1789);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1779 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1995 = frontier_phi_28_24_ladder;
        }
        float _2291;
        if (_1792 > 0.0)
        {
            _2291 = abs((1.0 - _1783) / _1792);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1783 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2291 = frontier_phi_40_35_ladder;
        }
        float _2293 = isnan(_1995) ? _1820 : (isnan(_1820) ? _1995 : min(_1820, _1995));
        float _2294 = isnan(_2291) ? _2293 : (isnan(_2293) ? _2291 : min(_2293, _2291));
        float _2298 = (_2294 * _1786) + _1775;
        float _2299 = (_2294 * _1789) + _1779;
        float _2300 = (_2294 * _1792) + _1783;
        float _2301 = _2294 * 9.9999997473787516355514526367188e-05;
        float _2303 = (-1.0) - _2301;
        float _2305 = _2301 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2300 > _2305) || ((_2300 < _2303) || ((_2299 > _2305) || ((_2299 < _2303) || ((_2298 < _2303) || (_2298 > _2305))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2445 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2300, cbModelParam._m0[9u].z, fma(_2299, cbModelParam._m0[9u].y, _2298 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2300, cbModelParam._m0[10u].z, fma(_2299, cbModelParam._m0[10u].y, _2298 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2300, cbModelParam._m0[11u].z, fma(_2299, cbModelParam._m0[11u].y, _2298 * cbModelParam._m0[11u].x))), _1728);
            frontier_phi_18_40_ladder = _2445.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2445.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2445.x * cbModelParam._m0[1u].y;
        }
        _1808 = frontier_phi_18_40_ladder_2;
        _1810 = frontier_phi_18_40_ladder_1;
        _1812 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1796 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_890, _891, _892), _1728);
        _1808 = _1796.x * cbModelParam._m0[1u].y;
        _1810 = _1796.y * cbModelParam._m0[1u].y;
        _1812 = _1796.z * cbModelParam._m0[1u].y;
    }
    float _1816 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _753);
    float _1817 = isnan(_1816) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1816 : min(cbModelParam._m0[25u].w, _1816));
    float _1910;
    float _1912;
    float _1914;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1874 = fma(_950, cbModelParam._m0[21u].z, fma(_946, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _942)) + cbModelParam._m0[21u].w;
        float _1878 = fma(_950, cbModelParam._m0[22u].z, fma(_946, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _942)) + cbModelParam._m0[22u].w;
        float _1882 = fma(_950, cbModelParam._m0[23u].z, fma(_946, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _942)) + cbModelParam._m0[23u].w;
        float _1885 = fma(_892, cbModelParam._m0[21u].z, fma(_891, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _890));
        float _1888 = fma(_892, cbModelParam._m0[22u].z, fma(_891, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _890));
        float _1891 = fma(_892, cbModelParam._m0[23u].z, fma(_891, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _890));
        float _2000;
        if (_1885 > 0.0)
        {
            _2000 = abs((1.0 - _1874) / _1885);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1874 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2000 = frontier_phi_30_26_ladder;
        }
        float _2318;
        if (_1888 > 0.0)
        {
            _2318 = abs((1.0 - _1878) / _1888);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1878 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2318 = frontier_phi_42_37_ladder;
        }
        float _2656;
        if (_1891 > 0.0)
        {
            _2656 = abs((1.0 - _1882) / _1891);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1882 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2656 = frontier_phi_52_49_ladder;
        }
        float _2658 = isnan(_2318) ? _2000 : (isnan(_2000) ? _2318 : min(_2000, _2318));
        float _2659 = isnan(_2656) ? _2658 : (isnan(_2658) ? _2656 : min(_2658, _2656));
        float _2663 = (_2659 * _1885) + _1874;
        float _2664 = (_2659 * _1888) + _1878;
        float _2665 = (_2659 * _1891) + _1882;
        float _2666 = _2659 * 9.9999997473787516355514526367188e-05;
        float _2667 = (-1.0) - _2666;
        float _2669 = _2666 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2665 > _2669) || ((_2665 < _2667) || ((_2664 > _2669) || ((_2664 < _2667) || ((_2663 < _2667) || (_2663 > _2669))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2787 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2665, cbModelParam._m0[17u].z, fma(_2664, cbModelParam._m0[17u].y, _2663 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2665, cbModelParam._m0[18u].z, fma(_2664, cbModelParam._m0[18u].y, _2663 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2665, cbModelParam._m0[19u].z, fma(_2664, cbModelParam._m0[19u].y, _2663 * cbModelParam._m0[19u].x))), _1817);
            frontier_phi_27_52_ladder = _2787.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2787.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2787.x * cbModelParam._m0[1u].z;
        }
        _1910 = frontier_phi_27_52_ladder_2;
        _1912 = frontier_phi_27_52_ladder_1;
        _1914 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1894 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_890, _891, _892), _1817);
        _1910 = _1894.x * cbModelParam._m0[1u].z;
        _1912 = _1894.y * cbModelParam._m0[1u].z;
        _1914 = _1894.z * cbModelParam._m0[1u].z;
    }
    float _1927 = (((_913 * _871) + _914) * _885) * ((cbModelParam._m0[1u].w * (_1910 - _1808)) + _1808);
    float _1929 = (((_913 * _872) + _914) * _885) * ((cbModelParam._m0[1u].w * (_1912 - _1810)) + _1810);
    float _1931 = (((_913 * _873) + _914) * _885) * ((cbModelParam._m0[1u].w * (_1914 - _1812)) + _1812);
    float _1934 = fma(_1931, cbSceneParam._m0[89u].z, fma(_1929, cbSceneParam._m0[89u].y, _1927 * cbSceneParam._m0[89u].x));
    float _1937 = fma(_1931, cbSceneParam._m0[90u].z, fma(_1929, cbSceneParam._m0[90u].y, _1927 * cbSceneParam._m0[90u].x));
    float _1940 = fma(_1931, cbSceneParam._m0[91u].z, fma(_1929, cbSceneParam._m0[91u].y, _1927 * cbSceneParam._m0[91u].x));
    float _1974 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1978 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1982 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1986 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1987 = _1974 / _1986;
    float _1988 = _1978 / _1986;
    float _1989 = _1982 / _1986;
    float _2136;
    float _2137;
    float _2138;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2016 = ((uint(_1989 > cbSceneParam._m0[59u].y) + uint(_1989 > cbSceneParam._m0[59u].x)) + uint(_1989 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2017 = _2016 + 43u;
        uint _2025 = _2016 + 44u;
        uint _2033 = _2016 + 45u;
        uint _2041 = _2016 + 46u;
        float _2052 = fma(_1986, cbSceneParam._m0[_2017].w, fma(_1982, cbSceneParam._m0[_2017].z, fma(_1978, cbSceneParam._m0[_2017].y, _1974 * cbSceneParam._m0[_2017].x)));
        float _2056 = fma(_1986, cbSceneParam._m0[_2025].w, fma(_1982, cbSceneParam._m0[_2025].z, fma(_1978, cbSceneParam._m0[_2025].y, _1974 * cbSceneParam._m0[_2025].x)));
        float _2064 = fma(_1986, cbSceneParam._m0[_2041].w, fma(_1982, cbSceneParam._m0[_2041].z, fma(_1978, cbSceneParam._m0[_2041].y, _1974 * cbSceneParam._m0[_2041].x)));
        float _2069 = cbSceneParam._m0[33u].z * _2064;
        float _2071 = cbSceneParam._m0[33u].w * _2064;
        float _2074 = fma(_1986, cbSceneParam._m0[_2033].w, fma(_1982, cbSceneParam._m0[_2033].z, fma(_1978, cbSceneParam._m0[_2033].y, _1974 * cbSceneParam._m0[_2033].x))) / _2064;
        float _2122 = (cbSceneParam._m0[33u].x - sqrt(((_1988 * _1988) + (_1987 * _1987)) + (_1989 * _1989))) * cbSceneParam._m0[33u].y;
        float _4560 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2129 = (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2069 + _2052) / _2064, (_2071 + _2056) / _2064), _2074), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2071 + _2052) / _2064, (_2056 - _2069) / _2064), _2074), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2052 - _2069) / _2064, (_2056 - _2071) / _2064), _2074), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2052 - _2071) / _2064, (_2069 + _2056) / _2064), _2074), 0.0)).x), vec4(0.25)));
        _2136 = 1.0 - (_2129 * cbSceneParam._m0[34u].x);
        _2137 = 1.0 - (_2129 * cbSceneParam._m0[34u].y);
        _2138 = 1.0 - (_2129 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2136 = 1.0;
        _2137 = 1.0;
        _2138 = 1.0;
    }
    float _2202;
    float _2204;
    float _2206;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2190 = fma(_1986, cbSceneParam._m0[63u].w, fma(_1982, cbSceneParam._m0[63u].z, fma(_1978, cbSceneParam._m0[63u].y, _1974 * cbSceneParam._m0[63u].x)));
        float _2191 = fma(_1986, cbSceneParam._m0[60u].w, fma(_1982, cbSceneParam._m0[60u].z, fma(_1978, cbSceneParam._m0[60u].y, _1974 * cbSceneParam._m0[60u].x))) / _2190;
        float _2192 = fma(_1986, cbSceneParam._m0[61u].w, fma(_1982, cbSceneParam._m0[61u].z, fma(_1978, cbSceneParam._m0[61u].y, _1974 * cbSceneParam._m0[61u].x))) / _2190;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2191 >= cbSceneParam._m0[64u].x) && (_2192 >= cbSceneParam._m0[64u].y)) && (_2191 <= cbSceneParam._m0[64u].z)) && (_2192 <= cbSceneParam._m0[64u].w))
        {
            float _2331 = fma(_1986, cbSceneParam._m0[62u].w, fma(_1982, cbSceneParam._m0[62u].z, fma(_1978, cbSceneParam._m0[62u].y, _1974 * cbSceneParam._m0[62u].x))) / _2190;
            float _2335 = isnan(cbSceneParam._m0[41u].w) ? _2331 : (isnan(_2331) ? cbSceneParam._m0[41u].w : max(_2331, cbSceneParam._m0[41u].w));
            float _2378 = (cbSceneParam._m0[33u].x - sqrt(((_1988 * _1988) + (_1987 * _1987)) + (_1989 * _1989))) * cbSceneParam._m0[33u].y;
            float _4576 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
            float _2385 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2191, cbSceneParam._m0[33u].w + _2192), _2335), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2191, _2192 - cbSceneParam._m0[33u].z), _2335), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2191 - cbSceneParam._m0[33u].z, _2192 - cbSceneParam._m0[33u].w), _2335), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2191 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2192), _2335), 0.0)).x), vec4(0.25)));
            float _2389 = 1.0 - (_2385 * cbSceneParam._m0[34u].x);
            float _2390 = 1.0 - (_2385 * cbSceneParam._m0[34u].y);
            float _2391 = 1.0 - (_2385 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2390) ? _2137 : (isnan(_2137) ? _2390 : min(_2137, _2390));
            frontier_phi_39_38_ladder_1 = isnan(_2389) ? _2136 : (isnan(_2136) ? _2389 : min(_2136, _2389));
            frontier_phi_39_38_ladder_2 = isnan(_2391) ? _2138 : (isnan(_2138) ? _2391 : min(_2138, _2391));
        }
        else
        {
            frontier_phi_39_38_ladder = _2137;
            frontier_phi_39_38_ladder_1 = _2136;
            frontier_phi_39_38_ladder_2 = _2138;
        }
        _2202 = frontier_phi_39_38_ladder_1;
        _2204 = frontier_phi_39_38_ladder;
        _2206 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2202 = _2136;
        _2204 = _2137;
        _2206 = _2138;
    }
    uvec4 _2211 = floatBitsToUint(cbInstanceData._m0[_777 + 5u]);
    uint _2213 = _2211.x * 14u;
    uint _2214 = _2213 + 13u;
    float _2221 = _885 + (-1.0);
    float _2226 = (cbLight._m0[_2214].x * _2221) + 1.0;
    float _2227 = (cbLight._m0[_2214].y * _2221) + 1.0;
    float _2228 = (cbLight._m0[_2214].z * _2221) + 1.0;
    float _2229 = (cbLight._m0[_2214].w * _2221) + 1.0;
    uint _2230 = _2213 + 5u;
    float _2236 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
    uint _2240 = _2213 + 4u;
    float _2250 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
    uint _2254 = _2213 | 1u;
    float _2265 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_516, _517, _518));
    float _2268 = dot(vec3(cbLight._m0[_2254].xyz), vec3(_516, _517, _518));
    float _4612 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _4623 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2273 = (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * 0.3183098733425140380859375;
    float _2275 = (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * 0.3183098733425140380859375;
    float _2282 = ((cbLight._m0[_2230].x * _2236) * _2275) + (((cbLight._m0[_2240].x * _2202) * _2250) * _2273);
    float _2283 = ((_2236 * cbLight._m0[_2230].y) * _2275) + (((cbLight._m0[_2240].y * _2204) * _2250) * _2273);
    float _2284 = ((_2236 * cbLight._m0[_2230].z) * _2275) + (((cbLight._m0[_2240].z * _2206) * _2250) * _2273);
    uvec4 _2288 = floatBitsToUint(cbLight._m0[_2213 + 12u]);
    bool _2290 = _2288.x == 0u;
    float _2392;
    float _2394;
    float _2396;
    if (_2290)
    {
        _2392 = _2282;
        _2394 = _2283;
        _2396 = _2284;
    }
    else
    {
        uint _2400 = _2213 + 6u;
        float _2416 = (dot(vec3(cbLight._m0[_2213 + 2u].xyz), vec3(_516, _517, _518)) * 0.5) + 0.5;
        float _2417 = _2416 * _2416;
        float _4634 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2418 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
        float _2419 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
        _2392 = (((cbLight._m0[_2400].x * 0.3183098733425140380859375) * _2418) * _2419) + _2282;
        _2394 = (((cbLight._m0[_2400].y * 0.3183098733425140380859375) * _2418) * _2419) + _2283;
        _2396 = (((cbLight._m0[_2400].z * 0.3183098733425140380859375) * _2418) * _2419) + _2284;
    }
    bool _2399 = _2288.y == 0u;
    float _2454;
    float _2456;
    float _2458;
    if (_2399)
    {
        _2454 = _2392;
        _2456 = _2394;
        _2458 = _2396;
    }
    else
    {
        uint _2627 = _2213 + 7u;
        float _2643 = (dot(vec3(cbLight._m0[_2213 + 3u].xyz), vec3(_516, _517, _518)) * 0.5) + 0.5;
        float _2644 = _2643 * _2643;
        float _4650 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2645 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
        float _2646 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
        _2454 = (((cbLight._m0[_2627].x * 0.3183098733425140380859375) * _2645) * _2646) + _2392;
        _2456 = (((cbLight._m0[_2627].y * 0.3183098733425140380859375) * _2645) * _2646) + _2394;
        _2458 = (((cbLight._m0[_2627].z * 0.3183098733425140380859375) * _2645) * _2646) + _2396;
    }
    uint _2461 = _2213 + 8u;
    float _2474 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2213].w)) * _753) * 0.949999988079071044921875);
    float _2475 = _2474 * _2474;
    float _2476 = cbLight._m0[_2213].x + _543;
    float _2477 = cbLight._m0[_2213].y + _544;
    float _2478 = cbLight._m0[_2213].z + _545;
    float _2482 = inversesqrt(dot(vec3(_2476, _2477, _2478), vec3(_2476, _2477, _2478)));
    float _2483 = _2482 * _2476;
    float _2484 = _2482 * _2477;
    float _2485 = _2482 * _2478;
    float _2486 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_2213].xyz));
    float _4666 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2489 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
    float _4677 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _2490 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
    float _2491 = dot(vec3(_516, _517, _518), vec3(_2483, _2484, _2485));
    float _4688 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2494 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
    float _2495 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_2483, _2484, _2485));
    float _4699 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
    float _2499 = _2475 * _2475;
    float _2503 = ((_2494 * _2494) * (_2499 + (-1.0))) + 1.0;
    float _2511 = exp2(log2(1.0 - (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0)))) * 5.0);
    float _2512 = 0.959999978542327880859375 - _868;
    float _2514 = 0.959999978542327880859375 - _869;
    float _2515 = 0.959999978542327880859375 - _870;
    float _2522 = 1.0 - _2475;
    float _2533 = (0.5 / (((_2490 * ((_2489 * _2522) + _2475)) + 9.9999999392252902907785028219223e-09) + (((_2490 * _2522) + _2475) * _2489))) * _2489;
    float _4710 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
    float _2535 = (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (_2499 / ((_2503 * _2503) * 3.141590118408203125));
    uint _2549 = _2213 + 9u;
    float _2560 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2254].w)) * _753) * 0.949999988079071044921875);
    float _2561 = _2560 * _2560;
    float _2562 = cbLight._m0[_2254].x + _543;
    float _2563 = cbLight._m0[_2254].y + _544;
    float _2564 = cbLight._m0[_2254].z + _545;
    float _2568 = inversesqrt(dot(vec3(_2562, _2563, _2564), vec3(_2562, _2563, _2564)));
    float _2569 = _2568 * _2562;
    float _2570 = _2568 * _2563;
    float _2571 = _2568 * _2564;
    float _2572 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_2254].xyz));
    float _4721 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
    float _2575 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
    float _2576 = dot(vec3(_516, _517, _518), vec3(_2569, _2570, _2571));
    float _4732 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
    float _2579 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
    float _2580 = dot(vec3(cbLight._m0[_2254].xyz), vec3(_2569, _2570, _2571));
    float _4743 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2584 = _2561 * _2561;
    float _2588 = ((_2579 * _2579) * (_2584 + (-1.0))) + 1.0;
    float _2595 = exp2(log2(1.0 - (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0)))) * 5.0);
    float _2602 = 1.0 - _2561;
    float _2612 = (0.5 / (((_2490 * ((_2575 * _2602) + _2561)) + 9.9999999392252902907785028219223e-09) + (((_2490 * _2602) + _2561) * _2575))) * _2575;
    float _4754 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
    float _2614 = (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2584 / ((_2588 * _2588) * 3.141590118408203125));
    float _2624 = (((((_2595 * _2512) + _871) * cbLight._m0[_2549].x) * _2614) * _2236) + ((((cbLight._m0[_2461].x * _2202) * ((_2511 * _2512) + _871)) * _2535) * _2250);
    float _2625 = (((((_2595 * _2514) + _872) * cbLight._m0[_2549].y) * _2614) * _2236) + ((((cbLight._m0[_2461].y * _2204) * ((_2511 * _2514) + _872)) * _2535) * _2250);
    float _2626 = (((((_2595 * _2515) + _873) * cbLight._m0[_2549].z) * _2614) * _2236) + ((((cbLight._m0[_2461].z * _2206) * ((_2511 * _2515) + _873)) * _2535) * _2250);
    float _2682;
    float _2684;
    float _2686;
    if (_2290)
    {
        _2682 = _2624;
        _2684 = _2625;
        _2686 = _2626;
    }
    else
    {
        uint _2688 = _2213 + 2u;
        uint _2692 = _2213 + 10u;
        float _2706 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2688].w)) * _753) * 0.949999988079071044921875);
        float _2707 = _2706 * _2706;
        float _2708 = cbLight._m0[_2688].x + _543;
        float _2709 = cbLight._m0[_2688].y + _544;
        float _2710 = cbLight._m0[_2688].z + _545;
        float _2714 = inversesqrt(dot(vec3(_2708, _2709, _2710), vec3(_2708, _2709, _2710)));
        float _2715 = _2714 * _2708;
        float _2716 = _2714 * _2709;
        float _2717 = _2714 * _2710;
        float _2718 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_2688].xyz));
        float _4765 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2721 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
        float _2722 = dot(vec3(_516, _517, _518), vec3(_2715, _2716, _2717));
        float _4776 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2725 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
        float _2726 = dot(vec3(cbLight._m0[_2688].xyz), vec3(_2715, _2716, _2717));
        float _4787 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        float _2730 = _2707 * _2707;
        float _2734 = ((_2725 * _2725) * (_2730 + (-1.0))) + 1.0;
        float _2741 = exp2(log2(1.0 - (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0)))) * 5.0);
        float _2748 = 1.0 - _2707;
        float _2758 = (0.5 / (((_2490 * ((_2721 * _2748) + _2707)) + 9.9999999392252902907785028219223e-09) + (((_2490 * _2748) + _2707) * _2721))) * _2721;
        float _4798 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        float _2760 = (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (_2730 / ((_2734 * _2734) * 3.141590118408203125));
        float _2761 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
        _2682 = (((((_2741 * _2512) + _871) * cbLight._m0[_2692].x) * _2760) * _2761) + _2624;
        _2684 = (((((_2741 * _2514) + _872) * cbLight._m0[_2692].y) * _2760) * _2761) + _2625;
        _2686 = (((((_2741 * _2515) + _873) * cbLight._m0[_2692].z) * _2760) * _2761) + _2626;
    }
    float _2792;
    float _2794;
    float _2796;
    if (_2399)
    {
        _2792 = _2682;
        _2794 = _2684;
        _2796 = _2686;
    }
    else
    {
        uint _2803 = _2213 + 3u;
        uint _2807 = _2213 + 11u;
        float _2821 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2803].w)) * _753) * 0.949999988079071044921875);
        float _2822 = _2821 * _2821;
        float _2823 = cbLight._m0[_2803].x + _543;
        float _2824 = cbLight._m0[_2803].y + _544;
        float _2825 = cbLight._m0[_2803].z + _545;
        float _2829 = inversesqrt(dot(vec3(_2823, _2824, _2825), vec3(_2823, _2824, _2825)));
        float _2830 = _2829 * _2823;
        float _2831 = _2829 * _2824;
        float _2832 = _2829 * _2825;
        float _2833 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_2803].xyz));
        float _4814 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        float _2836 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
        float _2837 = dot(vec3(_516, _517, _518), vec3(_2830, _2831, _2832));
        float _4825 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
        float _2840 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
        float _2841 = dot(vec3(cbLight._m0[_2803].xyz), vec3(_2830, _2831, _2832));
        float _4836 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        float _2845 = _2822 * _2822;
        float _2849 = ((_2840 * _2840) * (_2845 + (-1.0))) + 1.0;
        float _2856 = exp2(log2(1.0 - (isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0)))) * 5.0);
        float _2863 = 1.0 - _2822;
        float _2873 = (0.5 / (((_2490 * ((_2836 * _2863) + _2822)) + 9.9999999392252902907785028219223e-09) + (((_2490 * _2863) + _2822) * _2836))) * _2836;
        float _4847 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
        float _2875 = (isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0))) * (_2845 / ((_2849 * _2849) * 3.141590118408203125));
        float _2876 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
        _2792 = (((((_2856 * _2512) + _871) * cbLight._m0[_2807].x) * _2875) * _2876) + _2682;
        _2794 = (((((_2856 * _2514) + _872) * cbLight._m0[_2807].y) * _2875) * _2876) + _2684;
        _2796 = (((((_2856 * _2515) + _873) * cbLight._m0[_2807].z) * _2875) * _2876) + _2686;
    }
    float _2941;
    float _2943;
    float _2945;
    float _2947;
    float _2949;
    float _2951;
    if (_2211.y == 0u)
    {
        uvec4 _2897 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2898 = _2897.x;
        uint _2909 = uint((float(_2897.y) * floor(float(uint(cbSceneParam._m0[85u].y * _676) / _2898))) + floor(float(uint(cbSceneParam._m0[85u].x * _675) / _2898)));
        float _2919 = (log2(_1989 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2920 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
        uint _2923 = uint(isnan(14.0) ? _2920 : (isnan(_2920) ? 14.0 : min(_2920, 14.0)));
        uvec4 _2928 = texelFetch(g_lightClusterGridBuffer, int(((_2923 << 2u) + (_2909 << 6u)) >> 2u));
        uint _2929 = _2928.x;
        uint _2930 = _2897.z;
        float _3034;
        float _3036;
        float _3038;
        float _3040;
        float _3042;
        float _3044;
        if (((((1u << ((_2930 >> 4u) & 15u)) + 4294967295u) & _2929) == 0u) || ((_2930 & 240u) == 0u))
        {
            _3034 = 0.0;
            _3036 = 0.0;
            _3038 = 0.0;
            _3040 = 0.0;
            _3042 = 0.0;
            _3044 = 0.0;
        }
        else
        {
            float _3035;
            float _3037;
            float _3039;
            float _3041;
            float _3043;
            float _3045;
            float _3195 = 0.0;
            float _3196 = 0.0;
            float _3197 = 0.0;
            float _3198 = 0.0;
            float _3199 = 0.0;
            float _3200 = 0.0;
            uint _3201 = 0u;
            uint _3210;
            bool _3211;
            for (;;)
            {
                _3210 = texelFetch(g_lightClassification, int((((_2923 << 5u) + (_2909 << 9u)) + (_3201 << 2u)) >> 2u)).x;
                _3211 = _3210 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3211)
                {
                    frontier_phi_73_pred = _3200;
                    frontier_phi_73_pred_1 = _3199;
                    frontier_phi_73_pred_2 = _3198;
                    frontier_phi_73_pred_3 = _3197;
                    frontier_phi_73_pred_4 = _3196;
                    frontier_phi_73_pred_5 = _3195;
                }
                else
                {
                    float _3340;
                    float _3341;
                    float _3342;
                    float _3343;
                    float _3344;
                    float _3345;
                    uint _3346;
                    _3340 = _3195;
                    _3341 = _3196;
                    _3342 = _3197;
                    _3343 = _3198;
                    _3344 = _3199;
                    _3345 = _3200;
                    _3346 = _3210;
                    float _3267;
                    float _3268;
                    float _3269;
                    float _3270;
                    float _3271;
                    float _3272;
                    for (;;)
                    {
                        uint _3350 = uint(findLSB(_3346)) + (_3201 << 5u);
                        uint _3347 = (_3346 + 4294967295u) & _3346;
                        uint _3352 = _3350 * 48u;
                        vec4 _3366 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3352)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 3u)).x));
                        uint _3372 = (_3350 * 48u) + 4u;
                        vec4 _3385 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3372)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 3u)).x));
                        uint _3391 = (_3350 * 48u) + 8u;
                        vec3 _3402 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3391)).x, texelFetch(g_PointLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3391 + 2u)).x));
                        float _3406 = _3366.x - _1987;
                        float _3407 = _3366.y - _1988;
                        float _3408 = _3366.z - _1989;
                        float _3409 = dot(vec3(_3406, _3407, _3408), vec3(_3406, _3407, _3408));
                        float _3412 = inversesqrt(_3409);
                        float _3413 = _3412 * _3406;
                        float _3414 = _3412 * _3407;
                        float _3415 = _3412 * _3408;
                        float _3416 = dot(vec3(_698, _701, _704), vec3(_3413, _3414, _3415));
                        float _3421 = 1.0 - (_3409 * _3366.w);
                        float _4873 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                        float _3422 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
                        float _3423 = sqrt(_3409) * _3385.w;
                        float _3426 = 1.39999997615814208984375 / (_3423 + 1.39999997615814208984375);
                        float _3427 = _3426 * _3426;
                        float _3430 = ((1.0 - _3427) * _3416) + _3427;
                        float _3433 = _3423 * _3423;
                        float _3436 = ((isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0))) * _3422) / ((_3433 * 0.699999988079071044921875) + 1.0);
                        float _3440 = (-0.0) - _1987;
                        float _3441 = (-0.0) - _1988;
                        float _3442 = (-0.0) - _1989;
                        float _3446 = inversesqrt(dot(vec3(_3440, _3441, _3442), vec3(_3440, _3441, _3442)));
                        float _3447 = _3446 * _3440;
                        float _3448 = _3446 * _3441;
                        float _3449 = _3446 * _3442;
                        float _3456 = exp2(log2(1.0 / ((_3433 * 3.5) + 5.0)) * 0.25);
                        float _3457 = 1.0 - _895;
                        float _3464 = sqrt(1.0 - ((1.0 - (_3457 * _3457)) * (1.0 - (_3456 * _3456))));
                        float _3465 = _3464 * _3464;
                        float _3466 = _3465 * _3465;
                        float _3467 = _3447 + _3413;
                        float _3468 = _3448 + _3414;
                        float _3469 = _3449 + _3415;
                        float _3473 = inversesqrt(dot(vec3(_3467, _3468, _3469), vec3(_3467, _3468, _3469)));
                        float _3477 = dot(vec3(_698, _701, _704), vec3(_3447, _3448, _3449));
                        float _4889 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                        float _3480 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                        float _3481 = dot(vec3(_698, _701, _704), vec3(_3473 * _3467, _3473 * _3468, _3473 * _3469));
                        float _4900 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                        float _3484 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
                        float _3488 = ((_3484 * _3484) * (_3466 + (-1.0))) + 1.0;
                        float _3489 = _3426 * _3465;
                        float _3490 = _3489 * _3489;
                        float _3493 = ((1.0 - _3490) * _3416) + _3490;
                        float _4911 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                        float _3494 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
                        float _3495 = 1.0 - _3465;
                        float _3505 = (0.5 / (((_3494 * ((_3480 * _3495) + _3465)) + 9.9999999392252902907785028219223e-09) + (((_3494 * _3495) + _3465) * _3480))) * _3494;
                        float _4922 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                        float _3516 = (((_3466 * 3.1415927410125732421875) * (isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0)))) / ((_3488 * _3488) * ((_3433 * 2.1991131305694580078125) + 3.141590118408203125))) * _3422;
                        _3270 = (_3436 * _3385.x) + _3343;
                        _3271 = (_3436 * _3385.y) + _3344;
                        _3272 = (_3436 * _3385.z) + _3345;
                        _3267 = (_3516 * _3402.x) + _3340;
                        _3268 = (_3516 * _3402.y) + _3341;
                        _3269 = (_3516 * _3402.z) + _3342;
                        if (_3347 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3340 = _3267;
                            _3341 = _3268;
                            _3342 = _3269;
                            _3343 = _3270;
                            _3344 = _3271;
                            _3345 = _3272;
                            _3346 = _3347;
                        }
                    }
                    frontier_phi_73_pred = _3272;
                    frontier_phi_73_pred_1 = _3271;
                    frontier_phi_73_pred_2 = _3270;
                    frontier_phi_73_pred_3 = _3269;
                    frontier_phi_73_pred_4 = _3268;
                    frontier_phi_73_pred_5 = _3267;
                }
                _3045 = frontier_phi_73_pred;
                _3043 = frontier_phi_73_pred_1;
                _3041 = frontier_phi_73_pred_2;
                _3039 = frontier_phi_73_pred_3;
                _3037 = frontier_phi_73_pred_4;
                _3035 = frontier_phi_73_pred_5;
                uint _3202 = _3201 + 1u;
                if (_3202 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3195 = _3035;
                    _3196 = _3037;
                    _3197 = _3039;
                    _3198 = _3041;
                    _3199 = _3043;
                    _3200 = _3045;
                    _3201 = _3202;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3034 = _3035;
            _3036 = _3037;
            _3038 = _3039;
            _3040 = _3041;
            _3042 = _3043;
            _3044 = _3045;
        }
        uvec4 _3048 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3049 = _3048.z;
        uint _3051 = (_3049 >> 8u) & 15u;
        float _3163;
        float _3165;
        float _3167;
        float _3169;
        float _3171;
        float _3173;
        if (((4294967295u << _3051) & _2929) == 0u)
        {
            _3163 = _3034;
            _3165 = _3036;
            _3167 = _3038;
            _3169 = _3040;
            _3171 = _3042;
            _3173 = _3044;
        }
        else
        {
            float _3188 = inversesqrt(dot(vec3(_1987, _1988, _1989), vec3(_1987, _1988, _1989)));
            float _3189 = _3188 * _1987;
            float _3190 = _3188 * _1988;
            float _3191 = _3188 * _1989;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3051 < ((_3049 >> 12u) & 15u))
            {
                float _3164;
                float _3166;
                float _3168;
                float _3170;
                float _3172;
                float _3174;
                float _3323 = _3034;
                float _3324 = _3036;
                float _3325 = _3038;
                float _3326 = _3040;
                float _3327 = _3042;
                float _3328 = _3044;
                uint _3329 = _3051;
                uint _3338;
                bool _3339;
                for (;;)
                {
                    _3338 = texelFetch(g_lightClassification, int((((_2923 << 5u) + (_2909 << 9u)) + (_3329 << 2u)) >> 2u)).x;
                    _3339 = _3338 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3339)
                    {
                        frontier_phi_84_pred = _3327;
                        frontier_phi_84_pred_1 = _3326;
                        frontier_phi_84_pred_2 = _3325;
                        frontier_phi_84_pred_3 = _3324;
                        frontier_phi_84_pred_4 = _3323;
                        frontier_phi_84_pred_5 = _3328;
                    }
                    else
                    {
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3825;
                        float _3826;
                        float _3827;
                        float _3828;
                        float _3829;
                        float _3830;
                        float _3543 = _3323;
                        float _3544 = _3324;
                        float _3545 = _3325;
                        float _3546 = _3326;
                        float _3547 = _3327;
                        float _3548 = _3328;
                        uint _3549 = _3338;
                        uint _3550;
                        vec4 _3575;
                        float _3576;
                        vec4 _3591;
                        vec3 _3603;
                        vec4 _3618;
                        vec4 _3634;
                        float _3681;
                        bool _3682;
                        for (;;)
                        {
                            uint _3560 = ((_3329 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3549));
                            _3550 = (_3549 + 4294967295u) & _3549;
                            uint _3562 = _3560 * 40u;
                            _3575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 3u)).x));
                            _3576 = _3575.w;
                            uint _3578 = (_3560 * 40u) + 4u;
                            _3591 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 3u)).x));
                            uint _3593 = (_3560 * 40u) + 8u;
                            _3603 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 2u)).x));
                            uint _3605 = (_3560 * 40u) + 16u;
                            _3618 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 3u)).x));
                            uint _3621 = (_3560 * 40u) + 20u;
                            _3634 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 3u)).x));
                            uint _3637 = (_3560 * 40u) + 24u;
                            vec4 _3650 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 3u)).x));
                            uint _3656 = (_3560 * 40u) + 28u;
                            vec4 _3669 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3656)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3656 + 3u)).x));
                            _3681 = fma(_1989, _3669.z, fma(_1988, _3669.y, _3669.x * _1987)) + _3669.w;
                            _3682 = !((fma(_1989, _3650.z, fma(_1988, _3650.y, _3650.x * _1987)) + _3650.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3682)
                            {
                                float _3709 = _3575.x - _1987;
                                float _3710 = _3575.y - _1988;
                                float _3711 = _3575.z - _1989;
                                float _3712 = dot(vec3(_3709, _3710, _3711), vec3(_3709, _3710, _3711));
                                float _3715 = inversesqrt(_3712);
                                float _3716 = _3715 * _3709;
                                float _3717 = _3715 * _3710;
                                float _3718 = _3715 * _3711;
                                float _3722 = 1.0 - (_3712 / (_3576 * _3576));
                                float _4933 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                                float _3723 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
                                float _3727 = sqrt(_3712) * _3591.w;
                                float _3729 = 1.39999997615814208984375 / (_3727 + 1.39999997615814208984375);
                                float _3730 = _3729 * _3729;
                                float _3733 = ((1.0 - _3730) * dot(vec3(_3716, _3717, _3718), vec3(_698, _701, _704))) + _3730;
                                float _3736 = _3727 * _3727;
                                float _3740 = (fma(_1989, _3618.z, fma(_1988, _3618.y, _3618.x * _1987)) + _3618.w) / _3681;
                                float _3741 = (fma(_1989, _3634.z, fma(_1988, _3634.y, _3634.x * _1987)) + _3634.w) / _3681;
                                float _3745 = 1.0 - dot(vec2(_3740, _3741), vec2(_3740, _3741));
                                float _4949 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                                float _3746 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
                                float _3747 = _3746 * (((isnan(0.0) ? _3733 : (isnan(_3733) ? 0.0 : max(_3733, 0.0))) * _3723) / ((_3736 * 0.699999988079071044921875) + 1.0));
                                float _3759 = exp2(log2(1.0 / ((_3736 * 3.5) + 5.0)) * 0.25);
                                float _3760 = 1.0 - _895;
                                float _3767 = sqrt(1.0 - ((1.0 - (_3760 * _3760)) * (1.0 - (_3759 * _3759))));
                                float _3768 = _3767 * _3767;
                                float _3769 = _3768 * _3768;
                                float _3770 = _3716 - _3189;
                                float _3771 = _3717 - _3190;
                                float _3772 = _3718 - _3191;
                                float _3776 = inversesqrt(dot(vec3(_3770, _3771, _3772), vec3(_3770, _3771, _3772)));
                                float _3780 = dot(vec3(_698, _701, _704), vec3((-0.0) - _3189, (-0.0) - _3190, (-0.0) - _3191));
                                float _4960 = isnan(0.0) ? _3780 : (isnan(_3780) ? 0.0 : max(_3780, 0.0));
                                float _3783 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
                                float _3784 = dot(vec3(_698, _701, _704), vec3(_3776 * _3770, _3776 * _3771, _3776 * _3772));
                                float _4971 = isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0));
                                float _3787 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
                                float _3791 = ((_3787 * _3787) * (_3769 + (-1.0))) + 1.0;
                                float _3792 = _3729 * _3768;
                                float _3793 = _3792 * _3792;
                                float _3799 = ((1.0 - _3793) * dot(vec3(_698, _701, _704), vec3(_3716, _3717, _3718))) + _3793;
                                float _4982 = isnan(0.0) ? _3799 : (isnan(_3799) ? 0.0 : max(_3799, 0.0));
                                float _3800 = isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0));
                                float _3801 = 1.0 - _3768;
                                float _3811 = (0.5 / (((_3800 * ((_3783 * _3801) + _3768)) + 9.9999999392252902907785028219223e-09) + (((_3800 * _3801) + _3768) * _3783))) * _3800;
                                float _4993 = isnan(0.0) ? _3811 : (isnan(_3811) ? 0.0 : max(_3811, 0.0));
                                float _3821 = (_3746 * _3723) * (((_3769 * 3.1415927410125732421875) * (isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0)))) / ((_3791 * _3791) * ((_3736 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3747 * _3591.y;
                                frontier_phi_90_pred_1 = _3747 * _3591.x;
                                frontier_phi_90_pred_2 = _3821 * _3603.z;
                                frontier_phi_90_pred_3 = _3821 * _3603.y;
                                frontier_phi_90_pred_4 = _3821 * _3603.x;
                                frontier_phi_90_pred_5 = _3747 * _3591.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3829 = frontier_phi_90_pred;
                            _3828 = frontier_phi_90_pred_1;
                            _3827 = frontier_phi_90_pred_2;
                            _3826 = frontier_phi_90_pred_3;
                            _3825 = frontier_phi_90_pred_4;
                            _3830 = frontier_phi_90_pred_5;
                            _3533 = _3828 + _3546;
                            _3534 = _3829 + _3547;
                            _3535 = _3830 + _3548;
                            _3530 = _3825 + _3543;
                            _3531 = _3826 + _3544;
                            _3532 = _3827 + _3545;
                            if (_3550 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3543 = _3530;
                                _3544 = _3531;
                                _3545 = _3532;
                                _3546 = _3533;
                                _3547 = _3534;
                                _3548 = _3535;
                                _3549 = _3550;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3534;
                        frontier_phi_84_pred_1 = _3533;
                        frontier_phi_84_pred_2 = _3532;
                        frontier_phi_84_pred_3 = _3531;
                        frontier_phi_84_pred_4 = _3530;
                        frontier_phi_84_pred_5 = _3535;
                    }
                    _3172 = frontier_phi_84_pred;
                    _3170 = frontier_phi_84_pred_1;
                    _3168 = frontier_phi_84_pred_2;
                    _3166 = frontier_phi_84_pred_3;
                    _3164 = frontier_phi_84_pred_4;
                    _3174 = frontier_phi_84_pred_5;
                    uint _3330 = _3329 + 1u;
                    if (_3330 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3323 = _3164;
                        _3324 = _3166;
                        _3325 = _3168;
                        _3326 = _3170;
                        _3327 = _3172;
                        _3328 = _3174;
                        _3329 = _3330;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3174;
                frontier_phi_65_66_ladder_1 = _3170;
                frontier_phi_65_66_ladder_2 = _3172;
                frontier_phi_65_66_ladder_3 = _3166;
                frontier_phi_65_66_ladder_4 = _3164;
                frontier_phi_65_66_ladder_5 = _3168;
            }
            else
            {
                frontier_phi_65_66_ladder = _3044;
                frontier_phi_65_66_ladder_1 = _3040;
                frontier_phi_65_66_ladder_2 = _3042;
                frontier_phi_65_66_ladder_3 = _3036;
                frontier_phi_65_66_ladder_4 = _3034;
                frontier_phi_65_66_ladder_5 = _3038;
            }
            _3163 = frontier_phi_65_66_ladder_4;
            _3165 = frontier_phi_65_66_ladder_3;
            _3167 = frontier_phi_65_66_ladder_5;
            _3169 = frontier_phi_65_66_ladder_1;
            _3171 = frontier_phi_65_66_ladder_2;
            _3173 = frontier_phi_65_66_ladder;
        }
        float _3178 = isnan(1.0) ? _885 : (isnan(_885) ? 1.0 : min(_885, 1.0));
        _2941 = (_3178 * _3169) + _2454;
        _2943 = (_3178 * _3171) + _2456;
        _2945 = (_3178 * _3173) + _2458;
        _2947 = ((_3163 * _871) * _3178) + _2792;
        _2949 = ((_3165 * _872) * _3178) + _2794;
        _2951 = ((_3167 * _873) * _3178) + _2796;
    }
    else
    {
        _2941 = _2454;
        _2943 = _2456;
        _2945 = _2458;
        _2947 = _2792;
        _2949 = _2794;
        _2951 = _2796;
    }
    uint _2957 = _778 + uint(cbMatDynParam._m0[0u].w);
    float _2963 = cbInstanceData._m0[_2957].x * ((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _559) + cbMatDynParam._m0[7u].x) + (((_600 - (_600 * _524)) + (cbMatDynParam._m0[11u].x * _631)) * cbMatDynParam._m0[9u].x));
    float _2964 = cbInstanceData._m0[_2957].y * ((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _559) + cbMatDynParam._m0[7u].y) + (((_602 - (_602 * _524)) + (cbMatDynParam._m0[11u].y * _631)) * cbMatDynParam._m0[9u].y));
    float _2965 = cbInstanceData._m0[_2957].z * ((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _559) + cbMatDynParam._m0[7u].z) + (((_604 - (_604 * _524)) + (cbMatDynParam._m0[11u].z * _631)) * cbMatDynParam._m0[9u].z));
    float _5009 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _5020 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _5031 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _5042 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _2983 = (((isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0))) * (_2941 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _885))) + ((_2947 + ((isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0))) * _1717)) * cbPerFrame._m0[3u].x)) + _2963;
    float _2985 = (_2964 + ((_2949 + ((isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))) * _1717)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0))) * (_2943 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _885)));
    float _2987 = (_2965 + ((_2951 + ((isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))) * _1717)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0))) * (_2945 + ((isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))) * _885)));
    float _2988 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
    float _2989 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
    float _2990 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
    float _2995 = cbMatDynParam._m0[12u].y - (cbMatDynParam._m0[12u].y * ((((isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) - _586) * _559) + _586));
    float _3000 = cbInstanceData._m0[_777 + 6u].w * (isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0)));
    float _3005 = _675 / cbSceneParam._m0[86u].x;
    float _3006 = _676 / cbSceneParam._m0[86u].y;
    vec4 _3020 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3005, _3006, (log2((isnan(cbSceneParam._m0[77u].w) ? _657 : (isnan(_657) ? cbSceneParam._m0[77u].w : min(_657, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3022 = _3020.x;
    float _3023 = _3020.y;
    float _3024 = _3020.z;
    float _3025 = _3020.w;
    float _3096;
    float _3098;
    float _3100;
    float _3102;
    if (_657 > cbSceneParam._m0[78u].w)
    {
        float _3059 = isnan(_657) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _657 : min(cbSceneParam._m0[80u].w, _657));
        float _3060 = _3059 / _657;
        float _3071 = _3060 * _291;
        float _3072 = _292 * _3060;
        float _3073 = (-0.0) - _3072;
        float _3074 = _3060 * _293;
        float _3076 = (cbSceneParam._m0[77u].w * _3073) / _3059;
        float _3077 = _3076 + cbSceneParam._m0[79u].w;
        float _3078 = cbSceneParam._m0[79u].w - _3072;
        float _3084 = sqrt(((_3071 * _3071) + (_3072 * _3072)) + (_3074 * _3074));
        float _3087 = (1.0 - (cbSceneParam._m0[77u].w / _3059)) * _3084;
        float _3092 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3094 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3280;
        if (abs((_3073 - _3076) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3280 = ((((_3077 > 0.0) ? exp2(_3092 * _3077) : (2.0 - exp2(_3094 * _3077))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3087;
        }
        else
        {
            float _3224 = 1.0 / cbSceneParam._m0[80u].x;
            float _3225 = isnan(_3078) ? _3077 : (isnan(_3077) ? _3078 : max(_3077, _3078));
            float _3226 = isnan(_3078) ? _3077 : (isnan(_3077) ? _3078 : min(_3077, _3078));
            float _3235 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : min(_3225, 0.0));
            float _3236 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : min(_3226, 0.0));
            _3280 = ((abs(_3084 / _3073) * cbSceneParam._m0[80u].y) * ((((_3235 - _3236) * 2.0) - ((exp2(_3092 * (isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0)))) - exp2(_3092 * (isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0))))) * _3224)) - ((exp2(_3094 * _3235) - exp2(_3094 * _3236)) * _3224))) + (_3087 * cbSceneParam._m0[80u].z);
        }
        vec4 _3282 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3005, _3006, 1.0), 0.0);
        float _3291 = exp2((_3280 * (-1.44269502162933349609375)) * (1.0 - _3282.w));
        float _3292 = log2(_3291);
        float _3308 = log2(_3025);
        _3096 = (exp2(_3308 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3292 * cbSceneParam._m0[78u].x)) * _3282.x) / cbSceneParam._m0[78u].x)) + _3022;
        _3098 = (exp2(_3308 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3292 * cbSceneParam._m0[78u].y)) * _3282.y) / cbSceneParam._m0[78u].y)) + _3023;
        _3100 = (exp2(_3308 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3292 * cbSceneParam._m0[78u].z)) * _3282.z) / cbSceneParam._m0[78u].z)) + _3024;
        _3102 = _3291 * _3025;
    }
    else
    {
        _3096 = _3022;
        _3098 = _3023;
        _3100 = _3024;
        _3102 = _3025;
    }
    bool _3318;
    vec4 _3112;
    vec4 _3134;
    float _3136;
    float _3140;
    float _3141;
    float _3142;
    float _3145;
    float _3148;
    float _3151;
    float _3152;
    bool _3162;
    for (;;)
    {
        _3112 = cbMatDynParam._m0[0u];
        float _3114 = roundEven(_3112.y);
        bool _3115 = _3114 == 3.0;
        float _3116 = log2(_3102);
        float _3120 = exp2(_3116 * cbSceneParam._m0[78u].x);
        float _3121 = exp2(_3116 * cbSceneParam._m0[78u].y);
        float _3122 = exp2(_3116 * cbSceneParam._m0[78u].z);
        float _3123 = _3120 * _2988;
        float _3124 = _3121 * _2989;
        float _3125 = _3122 * _2990;
        float _3132 = _664 + (-0.5);
        _3134 = cbMtdParam._m0[1u];
        _3136 = _3134.y * _3132;
        float _3139 = (_3114 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3140 = _3139 * (_3115 ? _3123 : (_3123 + (cbSceneParam._m0[72u].w * _3096)));
        _3141 = _3139 * (_3115 ? _3124 : (_3124 + (cbSceneParam._m0[72u].w * _3098)));
        _3142 = _3139 * (_3115 ? _3125 : (_3125 + (cbSceneParam._m0[72u].w * _3100)));
        _3145 = ((_2995 * _2963) * _3120) * _3139;
        _3148 = ((_2995 * _2964) * _3121) * _3139;
        _3151 = ((_2995 * _2965) * _3122) * _3139;
        _3152 = _3132 * 0.999000012874603271484375;
        _3162 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3162)
        {
            if ((cbInstanceData._m0[_777 + 7u].x + _3152) < 0.5)
            {
                _3318 = true;
                break;
            }
        }
        uint _3259 = _778 + uint(_3112.w);
        if ((cbInstanceData._m0[_3259].w < 1.0) && ((cbInstanceData._m0[_3259].w + _3152) < 0.5))
        {
            _3318 = true;
            break;
        }
        if ((_3136 + _404) < _3134.x)
        {
            _3318 = true;
            break;
        }
        _3318 = false;
        break;
    }
    float _3521;
    if (_3318)
    {
        discard_state = true;
        _3521 = 0.0;
    }
    else
    {
        _3521 = _3000;
    }
    SV_Target.x = _3140;
    SV_Target.y = _3141;
    SV_Target.z = _3142;
    SV_Target.w = _3521;
    SV_Target_1.x = _3145;
    SV_Target_1.y = _3148;
    SV_Target_1.z = _3151;
    SV_Target_1.w = _3000;
    discard_exit();
}


