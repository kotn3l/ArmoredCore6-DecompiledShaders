#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1098;
float _3488;
float _3489;
float _3490;
float _3491;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226;
    float _227;
    float _228;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
    }
    else
    {
        _226 = _212;
        _227 = _213;
        _228 = _214;
    }
    vec4 _242 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _259 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _282 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _291 = ((_259.x * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _282.x;
    float _294 = ((_259.y * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _282.y;
    float _297 = ((_259.z * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _282.z;
    float _298 = _282.w * _259.w;
    vec4 _311 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _318 = cbMtdParam._m0[14u].z + _311.x;
    vec4 _330 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _342 = (_242.z * 2.0) * (cbMtdParam._m0[13u].x + _330.z);
    float _346 = (_242.x * 2.0) + (-1.0);
    float _348 = (_242.y * 2.0) + (-1.0);
    float _349 = dot(vec2(_346, _348), vec2(_346, _348));
    float _3500 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _355 = sqrt(1.0 - (isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))));
    float _362 = (((_330.x * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _346;
    float _363 = (((_330.y * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _348;
    float _366 = fma(_355, _226, fma(_363, _218 * TANGENT.x, (_204 * _196) * _362));
    float _369 = fma(_355, _227, fma(_363, _218 * TANGENT.y, (_204 * _197) * _362));
    float _372 = fma(_355, _228, fma(_363, _218 * TANGENT.z, (_204 * _198) * _362));
    float _376 = inversesqrt(dot(vec3(_366, _369, _372), vec3(_366, _369, _372)));
    float _377 = _376 * _366;
    float _378 = _376 * _369;
    float _379 = _376 * _372;
    float _3511 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _380 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
    float _3522 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _381 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
    float _3533 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _382 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    float _3544 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _383 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _3555 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _384 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
    float _3566 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _385 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
    float _401 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _444 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _454 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _444);
    float _455 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _444);
    float _456 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _444);
    float _460 = inversesqrt(dot(vec3(_454, _455, _456), vec3(_454, _455, _456)));
    float _461 = _454 * _460;
    float _462 = _455 * _460;
    float _463 = _456 * _460;
    vec4 _468 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _470 = _468.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _777 = sqrt(((_454 * _454) + (_455 * _455)) + (_456 * _456));
        float _783 = (cbMatDynParam._m0[5u].x * _777) + cbMatDynParam._m0[5u].y;
        float _3577 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _784 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _788 = (cbMatDynParam._m0[5u].z * _777) + cbMatDynParam._m0[5u].w;
        float _3588 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) - _784)) + _784) < ((_470 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _481 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _482 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _484 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _486 = _484.w;
    float _506 = fma(_379, cbSceneParam._m0[5u].z, fma(_378, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _377));
    float _509 = fma(_379, cbSceneParam._m0[6u].z, fma(_378, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _377));
    float _512 = fma(_379, cbSceneParam._m0[7u].z, fma(_378, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _377));
    vec4 _514 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _516 = _514.x;
    float _528 = (((_514.y - _381) + (_514.w * _381)) * cbMtdParam._m0[3u].x) + _381;
    float _545 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_516 * _516)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _554 = (((cbMatDynParam._m0[15u].x - _385) * cbMatDynParam._m0[15u].w) * _545) + _385;
    float _562 = ((_545 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _528)) + _528;
    uint _586 = uint(roundEven(NORMAL.w)) * 13u;
    uint _587 = _586 + 9u;
    uint _588 = _587 + uint(cbMatDynParam._m0[0u].w);
    float _594 = (cbMtdParam._m0[0u].x * _382) * cbInstanceData._m0[_588].x;
    float _595 = (cbMtdParam._m0[0u].y * _383) * cbInstanceData._m0[_588].y;
    float _596 = (cbMtdParam._m0[0u].z * _384) * cbInstanceData._m0[_588].z;
    float _3599 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _597 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _3610 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _598 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _3621 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _599 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    vec4 _600 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _605 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _616 = (((_605.x - _554) + (_605.w * _554)) * cbMtdParam._m0[3u].x) + _554;
    float _629 = (cbMtdParam._m0[3u].x * (((_597 * _486) - _597) + _600.x)) + _597;
    float _630 = (cbMtdParam._m0[3u].x * (((_598 * _486) - _598) + _600.y)) + _598;
    float _631 = (cbMtdParam._m0[3u].x * (((_599 * _486) - _599) + _600.z)) + _599;
    vec4 _632 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _645 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_554 * (_382 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_554 * (_383 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_554 * (_384 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _632.z;
    float _649 = _645 * cbMatDynParam._m0[13u].w;
    float _659 = (_649 * (cbMatDynParam._m0[13u].x - _629)) + _629;
    float _660 = (_649 * (cbMatDynParam._m0[13u].y - _630)) + _630;
    float _661 = (_649 * (cbMatDynParam._m0[13u].z - _631)) + _631;
    float _669 = ((_645 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _616)) + _616;
    float _670 = 1.0 - _669;
    float _671 = _670 * _659;
    float _672 = _670 * _660;
    float _673 = _670 * _661;
    float _677 = (_659 + (-0.039999999105930328369140625)) * _669;
    float _678 = (_660 + (-0.039999999105930328369140625)) * _669;
    float _679 = (_661 + (-0.039999999105930328369140625)) * _669;
    float _680 = _677 + 0.039999999105930328369140625;
    float _681 = _678 + 0.039999999105930328369140625;
    float _682 = _679 + 0.039999999105930328369140625;
    vec4 _691 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _481, cbSceneParam._m0[86u].y * _482));
    float _694 = _691.x * TEXCOORD_4;
    float _695 = dot(vec3(_377, _378, _379), vec3(_461, _462, _463));
    float _698 = _695 * 2.0;
    float _702 = (_698 * _377) - _461;
    float _703 = (_698 * _378) - _462;
    float _704 = (_698 * _379) - _463;
    float _708 = abs(dot(vec3(_461, _462, _463), vec3(_377, _378, _379)));
    float _3632 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _710 = sqrt(_562);
    float _723 = exp2((_710 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_710 * 3.0));
    float _729 = (1.0 - _723) * ((_710 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _730 = _723 * _710;
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _762 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _766 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1097;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _822 = fma(_766, cbModelParam._m0[26u].z, fma(_762, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _758));
        float _826 = fma(_766, cbModelParam._m0[27u].z, fma(_762, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _758));
        float _830 = fma(_766, cbModelParam._m0[28u].z, fma(_762, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _758));
        float _855 = _758 + _377;
        float _856 = _762 + _378;
        float _857 = _766 + _379;
        float _867 = fma(_857, cbModelParam._m0[26u].z, fma(_856, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _855)) - _822;
        float _868 = fma(_857, cbModelParam._m0[27u].z, fma(_856, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _855)) - _826;
        float _869 = fma(_857, cbModelParam._m0[28u].z, fma(_856, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _855)) - _830;
        float _873 = inversesqrt(dot(vec3(_867, _868, _869), vec3(_867, _868, _869)));
        float _886 = ((_873 * _867) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_822 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _887 = ((_873 * _868) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_826 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _888 = ((_873 * _869) / cbModelParam._m0[34u].z) + ((((((_830 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _891 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        float _925 = exp2((_891.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_891.x + (-0.5));
        float _927 = _925 * (_891.y + (-0.5));
        float _928 = _925 * (_891.z + (-0.5));
        float _935 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_898.x + (-0.5));
        float _937 = _935 * (_898.y + (-0.5));
        float _938 = _935 * (_898.z + (-0.5));
        float _945 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_905.x + (-0.5));
        float _947 = _945 * (_905.y + (-0.5));
        float _948 = _945 * (_905.z + (-0.5));
        float _955 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_912.x + (-0.5));
        float _957 = _955 * (_912.y + (-0.5));
        float _958 = _955 * (_912.z + (-0.5));
        float _959 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _960 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _961 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _962 = _926 * 0.5;
        float _963 = _936 * 0.5;
        float _964 = _946 * 0.5;
        float _965 = dot(vec3(_962, _963, _964), vec3(_962, _963, _964));
        float _970 = (_965 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_965);
        float _979 = (dot(vec3(_377, _378, _379), vec3(_970 * _962, _970 * _963, _970 * _964)) + 1.0) * 0.5;
        float _3658 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _989 = sqrt(((_963 * _963) + (_962 * _962)) + (_964 * _964)) / (_959 + 9.9999997473787516355514526367188e-06);
        float _3669 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _991 = _990 * 2.0;
        float _995 = (1.0 - _990) / (_990 + 1.0);
        float _3680 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _1005 = ((((1.0 - _996) * (_991 + 2.0)) * exp2(log2(isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) * (_991 + 1.0))) + _996) * _959;
        float _1006 = _927 * 0.5;
        float _1007 = _937 * 0.5;
        float _1008 = _947 * 0.5;
        float _1009 = dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008));
        float _1014 = (_1009 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1009);
        float _1022 = (dot(vec3(_377, _378, _379), vec3(_1014 * _1006, _1014 * _1007, _1014 * _1008)) + 1.0) * 0.5;
        float _3691 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1031 = sqrt(((_1007 * _1007) + (_1006 * _1006)) + (_1008 * _1008)) / (_960 + 9.9999997473787516355514526367188e-06);
        float _3702 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1033 = _1032 * 2.0;
        float _1037 = (1.0 - _1032) / (_1032 + 1.0);
        float _3713 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1047 = ((((1.0 - _1038) * (_1033 + 2.0)) * exp2(log2(isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * (_1033 + 1.0))) + _1038) * _960;
        float _1048 = _928 * 0.5;
        float _1049 = _938 * 0.5;
        float _1050 = _948 * 0.5;
        float _1051 = dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050));
        float _1056 = (_1051 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1051);
        float _1064 = (dot(vec3(_377, _378, _379), vec3(_1056 * _1048, _1056 * _1049, _1056 * _1050)) + 1.0) * 0.5;
        float _3724 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1073 = sqrt(((_1049 * _1049) + (_1048 * _1048)) + (_1050 * _1050)) / (_961 + 9.9999997473787516355514526367188e-06);
        float _3735 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _3746 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_1075 + 1.0))) + _1080) * _961;
        _1097 = _928;
        _1099 = _927;
        _1100 = _926;
        _1101 = _938;
        _1102 = _937;
        _1103 = _936;
        _1104 = _948;
        _1105 = _947;
        _1106 = _946;
        _1107 = _961;
        _1108 = _960;
        _1109 = _959;
        _1110 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0)));
        _1111 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0)));
        _1112 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
    }
    else
    {
        _1097 = _1098;
        _1099 = _1098;
        _1100 = _1098;
        _1101 = _1098;
        _1102 = _1098;
        _1103 = _1098;
        _1104 = _1098;
        _1105 = _1098;
        _1106 = _1098;
        _1107 = _1098;
        _1108 = _1098;
        _1109 = _1098;
        _1110 = 0.0;
        _1111 = 0.0;
        _1112 = 0.0;
    }
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1141 = fma(_766, cbModelParam._m0[30u].z, fma(_762, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _758));
        float _1145 = fma(_766, cbModelParam._m0[31u].z, fma(_762, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _758));
        float _1149 = fma(_766, cbModelParam._m0[32u].z, fma(_762, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _758));
        float _1172 = _758 + _377;
        float _1173 = _762 + _378;
        float _1174 = _766 + _379;
        float _1184 = fma(_1174, cbModelParam._m0[30u].z, fma(_1173, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1172)) - _1141;
        float _1185 = fma(_1174, cbModelParam._m0[31u].z, fma(_1173, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1172)) - _1145;
        float _1186 = fma(_1174, cbModelParam._m0[32u].z, fma(_1173, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1172)) - _1149;
        float _1190 = inversesqrt(dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186)));
        float _1203 = ((_1190 * _1184) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1141 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1204 = ((_1190 * _1185) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1145 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1205 = ((_1190 * _1186) / cbModelParam._m0[35u].z) + ((((((_1149 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        float _1240 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1207.x + (-0.5));
        float _1242 = _1240 * (_1207.y + (-0.5));
        float _1243 = _1240 * (_1207.z + (-0.5));
        float _1250 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1214.x + (-0.5));
        float _1252 = _1250 * (_1214.y + (-0.5));
        float _1253 = _1250 * (_1214.z + (-0.5));
        float _1260 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1221.x + (-0.5));
        float _1262 = _1260 * (_1221.y + (-0.5));
        float _1263 = _1260 * (_1221.z + (-0.5));
        float _1270 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1228.x + (-0.5));
        float _1272 = _1270 * (_1228.y + (-0.5));
        float _1273 = _1270 * (_1228.z + (-0.5));
        float _1274 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1275 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1276 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1277 = _1241 * 0.5;
        float _1278 = _1251 * 0.5;
        float _1279 = _1261 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(_377, _378, _379), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _3787 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1274 + 9.9999997473787516355514526367188e-06);
        float _3798 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _3809 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * (_1304 + 1.0))) + _1309) * _1274;
        float _1319 = _1242 * 0.5;
        float _1320 = _1252 * 0.5;
        float _1321 = _1262 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1335 = (dot(vec3(_377, _378, _379), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _3820 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1344 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1275 + 9.9999997473787516355514526367188e-06);
        float _3831 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _3842 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1346 + 1.0))) + _1351) * _1275;
        float _1361 = _1243 * 0.5;
        float _1362 = _1253 * 0.5;
        float _1363 = _1263 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1377 = (dot(vec3(_377, _378, _379), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1386 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1276 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1388 = _1387 * 2.0;
        float _1392 = (1.0 - _1387) / (_1387 + 1.0);
        float _3875 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1402 = ((((1.0 - _1393) * (_1388 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1388 + 1.0))) + _1393) * _1276;
        _1410 = _1243;
        _1411 = _1242;
        _1412 = _1241;
        _1413 = _1253;
        _1414 = _1252;
        _1415 = _1251;
        _1416 = _1263;
        _1417 = _1262;
        _1418 = _1261;
        _1419 = _1276;
        _1420 = _1275;
        _1421 = _1274;
        _1422 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
        _1423 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
        _1424 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)));
    }
    else
    {
        _1410 = _1098;
        _1411 = _1098;
        _1412 = _1098;
        _1413 = _1098;
        _1414 = _1098;
        _1415 = _1098;
        _1416 = _1098;
        _1417 = _1098;
        _1418 = _1098;
        _1419 = _1098;
        _1420 = _1098;
        _1421 = _1098;
        _1422 = 0.0;
        _1423 = 0.0;
        _1424 = 0.0;
    }
    float _1434 = (cbModelParam._m0[1u].x * (_1422 - _1110)) + _1110;
    float _1435 = (cbModelParam._m0[1u].x * (_1423 - _1111)) + _1111;
    float _1436 = (cbModelParam._m0[1u].x * (_1424 - _1112)) + _1112;
    float _1457 = fma(_1436, cbSceneParam._m0[89u].z, fma(_1435, cbSceneParam._m0[89u].y, _1434 * cbSceneParam._m0[89u].x));
    float _1460 = fma(_1436, cbSceneParam._m0[90u].z, fma(_1435, cbSceneParam._m0[90u].y, _1434 * cbSceneParam._m0[90u].x));
    float _1463 = fma(_1436, cbSceneParam._m0[91u].z, fma(_1435, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1434));
    float _1478 = _702 * 0.5;
    float _1479 = _703 * 0.5;
    float _1480 = _704 * 0.5;
    float _1481 = dot(vec4(_1478, _1479, _1480, 1.0), vec4(_1412, _1415, _1418, _1421));
    float _1484 = dot(vec4(_1478, _1479, _1480, 1.0), vec4(_1411, _1414, _1417, _1420));
    float _1487 = dot(vec4(_1478, _1479, _1480, 1.0), vec4(_1410, _1413, _1416, _1419));
    float _1518;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1494 = dot(vec4(_1478, _1479, _1480, 1.0), vec4(_1097, _1101, _1104, _1107));
        float _1498 = dot(vec4(_1478, _1479, _1480, 1.0), vec4(_1099, _1102, _1105, _1108));
        float _1502 = dot(vec4(_1478, _1479, _1480, 1.0), vec4(_1100, _1103, _1106, _1109));
        float _1509 = dot(vec4(cbModelParam._m0[39u]), vec4(_1478, _1479, _1480, 1.0));
        _1518 = dot(vec3(isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)), isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)), isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1509) ? 0.0 : (isnan(0.0) ? _1509 : max(0.0, _1509))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1518 = 1.0;
    }
    float _1529;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1520 = dot(vec4(cbModelParam._m0[40u]), vec4(_1478, _1479, _1480, 1.0));
        _1529 = dot(vec3(isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)), isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)), isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1520) ? 0.0 : (isnan(0.0) ? _1520 : max(0.0, _1520))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1529 = 1.0;
    }
    float _1533 = (_1529 * cbModelParam._m0[1u].x) + (_1518 * (1.0 - cbModelParam._m0[1u].x));
    float _1543 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _562);
    float _1544 = isnan(_1543) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1543 : min(cbModelParam._m0[25u].z, _1543));
    float _1624;
    float _1626;
    float _1628;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1591 = fma(_766, cbModelParam._m0[13u].z, fma(_762, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _758)) + cbModelParam._m0[13u].w;
        float _1595 = fma(_766, cbModelParam._m0[14u].z, fma(_762, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _758)) + cbModelParam._m0[14u].w;
        float _1599 = fma(_766, cbModelParam._m0[15u].z, fma(_762, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _758)) + cbModelParam._m0[15u].w;
        float _1602 = fma(_704, cbModelParam._m0[13u].z, fma(_703, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _702));
        float _1605 = fma(_704, cbModelParam._m0[14u].z, fma(_703, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _702));
        float _1608 = fma(_704, cbModelParam._m0[15u].z, fma(_703, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _702));
        float _1636;
        if (_1602 > 0.0)
        {
            _1636 = abs((1.0 - _1591) / _1602);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1591 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1636 = frontier_phi_19_17_ladder;
        }
        float _1844;
        if (_1605 > 0.0)
        {
            _1844 = abs((1.0 - _1595) / _1605);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1595 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1844 = frontier_phi_28_24_ladder;
        }
        float _2098;
        if (_1608 > 0.0)
        {
            _2098 = abs((1.0 - _1599) / _1608);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1608 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1599 + 1.0) / _1608);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2098 = frontier_phi_40_35_ladder;
        }
        float _2100 = isnan(_1844) ? _1636 : (isnan(_1636) ? _1844 : min(_1636, _1844));
        float _2101 = isnan(_2098) ? _2100 : (isnan(_2100) ? _2098 : min(_2100, _2098));
        float _2105 = (_2101 * _1602) + _1591;
        float _2106 = (_2101 * _1605) + _1595;
        float _2107 = (_2101 * _1608) + _1599;
        float _2108 = _2101 * 9.9999997473787516355514526367188e-05;
        float _2110 = (-1.0) - _2108;
        float _2112 = _2108 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2107 > _2112) || ((_2107 < _2110) || ((_2106 > _2112) || ((_2106 < _2110) || ((_2105 < _2110) || (_2105 > _2112))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2235 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2107, cbModelParam._m0[9u].z, fma(_2106, cbModelParam._m0[9u].y, _2105 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2107, cbModelParam._m0[10u].z, fma(_2106, cbModelParam._m0[10u].y, _2105 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2107, cbModelParam._m0[11u].z, fma(_2106, cbModelParam._m0[11u].y, _2105 * cbModelParam._m0[11u].x))), _1544);
            frontier_phi_18_40_ladder = _2235.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2235.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2235.x * cbModelParam._m0[1u].y;
        }
        _1624 = frontier_phi_18_40_ladder_2;
        _1626 = frontier_phi_18_40_ladder_1;
        _1628 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1612 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_702, _703, _704), _1544);
        _1624 = _1612.x * cbModelParam._m0[1u].y;
        _1626 = _1612.y * cbModelParam._m0[1u].y;
        _1628 = _1612.z * cbModelParam._m0[1u].y;
    }
    float _1632 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _562);
    float _1633 = isnan(_1632) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1632 : min(cbModelParam._m0[25u].w, _1632));
    float _1726;
    float _1728;
    float _1730;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1690 = fma(_766, cbModelParam._m0[21u].z, fma(_762, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _758)) + cbModelParam._m0[21u].w;
        float _1694 = fma(_766, cbModelParam._m0[22u].z, fma(_762, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _758)) + cbModelParam._m0[22u].w;
        float _1698 = fma(_766, cbModelParam._m0[23u].z, fma(_762, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _758)) + cbModelParam._m0[23u].w;
        float _1701 = fma(_704, cbModelParam._m0[21u].z, fma(_703, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _702));
        float _1704 = fma(_704, cbModelParam._m0[22u].z, fma(_703, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _702));
        float _1707 = fma(_704, cbModelParam._m0[23u].z, fma(_703, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _702));
        float _1849;
        if (_1701 > 0.0)
        {
            _1849 = abs((1.0 - _1690) / _1701);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1690 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1849 = frontier_phi_30_26_ladder;
        }
        float _2125;
        if (_1704 > 0.0)
        {
            _2125 = abs((1.0 - _1694) / _1704);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1704 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1694 + 1.0) / _1704);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2125 = frontier_phi_42_37_ladder;
        }
        float _2338;
        if (_1707 > 0.0)
        {
            _2338 = abs((1.0 - _1698) / _1707);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1707 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1698 + 1.0) / _1707);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2338 = frontier_phi_51_48_ladder;
        }
        float _2340 = isnan(_2125) ? _1849 : (isnan(_1849) ? _2125 : min(_1849, _2125));
        float _2341 = isnan(_2338) ? _2340 : (isnan(_2340) ? _2338 : min(_2340, _2338));
        float _2345 = (_2341 * _1701) + _1690;
        float _2346 = (_2341 * _1704) + _1694;
        float _2347 = (_2341 * _1707) + _1698;
        float _2348 = _2341 * 9.9999997473787516355514526367188e-05;
        float _2349 = (-1.0) - _2348;
        float _2351 = _2348 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2347 > _2351) || ((_2347 < _2349) || ((_2346 > _2351) || ((_2346 < _2349) || ((_2345 < _2349) || (_2345 > _2351))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2550 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2347, cbModelParam._m0[17u].z, fma(_2346, cbModelParam._m0[17u].y, _2345 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2347, cbModelParam._m0[18u].z, fma(_2346, cbModelParam._m0[18u].y, _2345 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2347, cbModelParam._m0[19u].z, fma(_2346, cbModelParam._m0[19u].y, _2345 * cbModelParam._m0[19u].x))), _1633);
            frontier_phi_27_51_ladder = _2550.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2550.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2550.x * cbModelParam._m0[1u].z;
        }
        _1726 = frontier_phi_27_51_ladder_2;
        _1728 = frontier_phi_27_51_ladder_1;
        _1730 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1710 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_702, _703, _704), _1633);
        _1726 = _1710.x * cbModelParam._m0[1u].z;
        _1728 = _1710.y * cbModelParam._m0[1u].z;
        _1730 = _1710.z * cbModelParam._m0[1u].z;
    }
    float _1743 = (((_729 * _680) + _730) * _694) * ((cbModelParam._m0[1u].w * (_1726 - _1624)) + _1624);
    float _1745 = (((_729 * _681) + _730) * _694) * ((cbModelParam._m0[1u].w * (_1728 - _1626)) + _1626);
    float _1747 = (((_729 * _682) + _730) * _694) * ((cbModelParam._m0[1u].w * (_1730 - _1628)) + _1628);
    float _1750 = fma(_1747, cbSceneParam._m0[89u].z, fma(_1745, cbSceneParam._m0[89u].y, _1743 * cbSceneParam._m0[89u].x));
    float _1753 = fma(_1747, cbSceneParam._m0[90u].z, fma(_1745, cbSceneParam._m0[90u].y, _1743 * cbSceneParam._m0[90u].x));
    float _1756 = fma(_1747, cbSceneParam._m0[91u].z, fma(_1745, cbSceneParam._m0[91u].y, _1743 * cbSceneParam._m0[91u].x));
    uvec4 _1766 = floatBitsToUint(cbInstanceData._m0[_586 + 5u]);
    uint _1768 = _1766.x * 14u;
    uint _1769 = _1768 + 13u;
    float _1776 = _694 + (-1.0);
    float _1781 = (cbLight._m0[_1769].x * _1776) + 1.0;
    float _1782 = (cbLight._m0[_1769].y * _1776) + 1.0;
    float _1783 = (cbLight._m0[_1769].z * _1776) + 1.0;
    float _1784 = (cbLight._m0[_1769].w * _1776) + 1.0;
    uint _1785 = _1768 + 5u;
    float _1791 = isnan(1.0) ? _1782 : (isnan(_1782) ? 1.0 : min(_1782, 1.0));
    uint _1795 = _1768 + 4u;
    float _1802 = isnan(1.0) ? _1781 : (isnan(_1781) ? 1.0 : min(_1781, 1.0));
    uint _1806 = _1768 | 1u;
    float _1817 = dot(vec3(cbLight._m0[_1768].xyz), vec3(_377, _378, _379));
    float _1820 = dot(vec3(cbLight._m0[_1806].xyz), vec3(_377, _378, _379));
    float _4011 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _4022 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1825 = (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * 0.3183098733425140380859375;
    float _1827 = (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * 0.3183098733425140380859375;
    float _1834 = ((cbLight._m0[_1785].x * _1791) * _1827) + ((cbLight._m0[_1795].x * _1802) * _1825);
    float _1835 = ((_1791 * cbLight._m0[_1785].y) * _1827) + ((_1802 * cbLight._m0[_1795].y) * _1825);
    float _1836 = ((_1791 * cbLight._m0[_1785].z) * _1827) + ((_1802 * cbLight._m0[_1795].z) * _1825);
    uvec4 _1841 = floatBitsToUint(cbLight._m0[_1768 + 12u]);
    bool _1843 = _1841.x == 0u;
    float _1854;
    float _1856;
    float _1858;
    if (_1843)
    {
        _1854 = _1834;
        _1856 = _1835;
        _1858 = _1836;
    }
    else
    {
        uint _1862 = _1768 + 6u;
        float _1878 = (dot(vec3(cbLight._m0[_1768 + 2u].xyz), vec3(_377, _378, _379)) * 0.5) + 0.5;
        float _1879 = _1878 * _1878;
        float _4033 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
        float _1880 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1881 = isnan(1.0) ? _1783 : (isnan(_1783) ? 1.0 : min(_1783, 1.0));
        _1854 = (((cbLight._m0[_1862].x * 0.3183098733425140380859375) * _1880) * _1881) + _1834;
        _1856 = (((cbLight._m0[_1862].y * 0.3183098733425140380859375) * _1880) * _1881) + _1835;
        _1858 = (((cbLight._m0[_1862].z * 0.3183098733425140380859375) * _1880) * _1881) + _1836;
    }
    bool _1861 = _1841.y == 0u;
    float _1899;
    float _1901;
    float _1903;
    if (_1861)
    {
        _1899 = _1854;
        _1901 = _1856;
        _1903 = _1858;
    }
    else
    {
        uint _2069 = _1768 + 7u;
        float _2085 = (dot(vec3(cbLight._m0[_1768 + 3u].xyz), vec3(_377, _378, _379)) * 0.5) + 0.5;
        float _2086 = _2085 * _2085;
        float _4049 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2087 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _2088 = isnan(1.0) ? _1784 : (isnan(_1784) ? 1.0 : min(_1784, 1.0));
        _1899 = (((cbLight._m0[_2069].x * 0.3183098733425140380859375) * _2087) * _2088) + _1854;
        _1901 = (((cbLight._m0[_2069].y * 0.3183098733425140380859375) * _2087) * _2088) + _1856;
        _1903 = (((cbLight._m0[_2069].z * 0.3183098733425140380859375) * _2087) * _2088) + _1858;
    }
    uint _1906 = _1768 + 8u;
    float _1919 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1768].w)) * _562) * 0.949999988079071044921875);
    float _1920 = _1919 * _1919;
    float _1921 = cbLight._m0[_1768].x + _461;
    float _1922 = cbLight._m0[_1768].y + _462;
    float _1923 = cbLight._m0[_1768].z + _463;
    float _1927 = inversesqrt(dot(vec3(_1921, _1922, _1923), vec3(_1921, _1922, _1923)));
    float _1928 = _1927 * _1921;
    float _1929 = _1927 * _1922;
    float _1930 = _1927 * _1923;
    float _1931 = dot(vec3(_377, _378, _379), vec3(cbLight._m0[_1768].xyz));
    float _4065 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1934 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _4076 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _1935 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _1936 = dot(vec3(_377, _378, _379), vec3(_1928, _1929, _1930));
    float _4087 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1939 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _1940 = dot(vec3(cbLight._m0[_1768].xyz), vec3(_1928, _1929, _1930));
    float _4098 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1944 = _1920 * _1920;
    float _1948 = ((_1939 * _1939) * (_1944 + (-1.0))) + 1.0;
    float _1956 = exp2(log2(1.0 - (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) * 5.0);
    float _1957 = 0.959999978542327880859375 - _677;
    float _1959 = 0.959999978542327880859375 - _678;
    float _1960 = 0.959999978542327880859375 - _679;
    float _1967 = 1.0 - _1920;
    float _1978 = (0.5 / (((_1935 * ((_1934 * _1967) + _1920)) + 9.9999999392252902907785028219223e-09) + (((_1935 * _1967) + _1920) * _1934))) * _1934;
    float _4109 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1980 = (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_1944 / ((_1948 * _1948) * 3.141590118408203125));
    uint _1991 = _1768 + 9u;
    float _2002 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1806].w)) * _562) * 0.949999988079071044921875);
    float _2003 = _2002 * _2002;
    float _2004 = cbLight._m0[_1806].x + _461;
    float _2005 = cbLight._m0[_1806].y + _462;
    float _2006 = cbLight._m0[_1806].z + _463;
    float _2010 = inversesqrt(dot(vec3(_2004, _2005, _2006), vec3(_2004, _2005, _2006)));
    float _2011 = _2010 * _2004;
    float _2012 = _2010 * _2005;
    float _2013 = _2010 * _2006;
    float _2014 = dot(vec3(_377, _378, _379), vec3(cbLight._m0[_1806].xyz));
    float _4120 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2017 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _2018 = dot(vec3(_377, _378, _379), vec3(_2011, _2012, _2013));
    float _4131 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2021 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _2022 = dot(vec3(cbLight._m0[_1806].xyz), vec3(_2011, _2012, _2013));
    float _4142 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2026 = _2003 * _2003;
    float _2030 = ((_2021 * _2021) * (_2026 + (-1.0))) + 1.0;
    float _2037 = exp2(log2(1.0 - (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)))) * 5.0);
    float _2044 = 1.0 - _2003;
    float _2054 = (0.5 / (((_1935 * ((_2017 * _2044) + _2003)) + 9.9999999392252902907785028219223e-09) + (((_1935 * _2044) + _2003) * _2017))) * _2017;
    float _4153 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2056 = (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_2026 / ((_2030 * _2030) * 3.141590118408203125));
    float _2066 = (((((_2037 * _1957) + _680) * cbLight._m0[_1991].x) * _2056) * _1791) + (((((_1956 * _1957) + _680) * cbLight._m0[_1906].x) * _1980) * _1802);
    float _2067 = (((((_2037 * _1959) + _681) * cbLight._m0[_1991].y) * _2056) * _1791) + (((((_1956 * _1959) + _681) * cbLight._m0[_1906].y) * _1980) * _1802);
    float _2068 = (((((_2037 * _1960) + _682) * cbLight._m0[_1991].z) * _2056) * _1791) + (((((_1956 * _1960) + _682) * cbLight._m0[_1906].z) * _1980) * _1802);
    float _2130;
    float _2132;
    float _2134;
    if (_1843)
    {
        _2130 = _2066;
        _2132 = _2067;
        _2134 = _2068;
    }
    else
    {
        uint _2136 = _1768 + 2u;
        uint _2140 = _1768 + 10u;
        float _2154 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2136].w)) * _562) * 0.949999988079071044921875);
        float _2155 = _2154 * _2154;
        float _2156 = cbLight._m0[_2136].x + _461;
        float _2157 = cbLight._m0[_2136].y + _462;
        float _2158 = cbLight._m0[_2136].z + _463;
        float _2162 = inversesqrt(dot(vec3(_2156, _2157, _2158), vec3(_2156, _2157, _2158)));
        float _2163 = _2162 * _2156;
        float _2164 = _2162 * _2157;
        float _2165 = _2162 * _2158;
        float _2166 = dot(vec3(_377, _378, _379), vec3(cbLight._m0[_2136].xyz));
        float _4164 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2169 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _2170 = dot(vec3(_377, _378, _379), vec3(_2163, _2164, _2165));
        float _4175 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2173 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _2174 = dot(vec3(cbLight._m0[_2136].xyz), vec3(_2163, _2164, _2165));
        float _4186 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2178 = _2155 * _2155;
        float _2182 = ((_2173 * _2173) * (_2178 + (-1.0))) + 1.0;
        float _2189 = exp2(log2(1.0 - (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) * 5.0);
        float _2196 = 1.0 - _2155;
        float _2206 = (0.5 / (((_1935 * ((_2169 * _2196) + _2155)) + 9.9999999392252902907785028219223e-09) + (((_1935 * _2196) + _2155) * _2169))) * _2169;
        float _4197 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2208 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_2178 / ((_2182 * _2182) * 3.141590118408203125));
        float _2209 = isnan(1.0) ? _1783 : (isnan(_1783) ? 1.0 : min(_1783, 1.0));
        _2130 = (((((_2189 * _1957) + _680) * cbLight._m0[_2140].x) * _2208) * _2209) + _2066;
        _2132 = (((((_2189 * _1959) + _681) * cbLight._m0[_2140].y) * _2208) * _2209) + _2067;
        _2134 = (((((_2189 * _1960) + _682) * cbLight._m0[_2140].z) * _2208) * _2209) + _2068;
    }
    float _2244;
    float _2246;
    float _2248;
    if (_1861)
    {
        _2244 = _2130;
        _2246 = _2132;
        _2248 = _2134;
    }
    else
    {
        uint _2255 = _1768 + 3u;
        uint _2259 = _1768 + 11u;
        float _2273 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2255].w)) * _562) * 0.949999988079071044921875);
        float _2274 = _2273 * _2273;
        float _2275 = cbLight._m0[_2255].x + _461;
        float _2276 = cbLight._m0[_2255].y + _462;
        float _2277 = cbLight._m0[_2255].z + _463;
        float _2281 = inversesqrt(dot(vec3(_2275, _2276, _2277), vec3(_2275, _2276, _2277)));
        float _2282 = _2281 * _2275;
        float _2283 = _2281 * _2276;
        float _2284 = _2281 * _2277;
        float _2285 = dot(vec3(_377, _378, _379), vec3(cbLight._m0[_2255].xyz));
        float _4213 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2288 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _2289 = dot(vec3(_377, _378, _379), vec3(_2282, _2283, _2284));
        float _4224 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        float _2292 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _2293 = dot(vec3(cbLight._m0[_2255].xyz), vec3(_2282, _2283, _2284));
        float _4235 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2297 = _2274 * _2274;
        float _2301 = ((_2292 * _2292) * (_2297 + (-1.0))) + 1.0;
        float _2308 = exp2(log2(1.0 - (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) * 5.0);
        float _2315 = 1.0 - _2274;
        float _2325 = (0.5 / (((_1935 * ((_2288 * _2315) + _2274)) + 9.9999999392252902907785028219223e-09) + (((_1935 * _2315) + _2274) * _2288))) * _2288;
        float _4246 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2327 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2297 / ((_2301 * _2301) * 3.141590118408203125));
        float _2328 = isnan(1.0) ? _1784 : (isnan(_1784) ? 1.0 : min(_1784, 1.0));
        _2244 = (((((_2308 * _1957) + _680) * cbLight._m0[_2259].x) * _2327) * _2328) + _2130;
        _2246 = (((((_2308 * _1959) + _681) * cbLight._m0[_2259].y) * _2327) * _2328) + _2132;
        _2248 = (((((_2308 * _1960) + _682) * cbLight._m0[_2259].z) * _2327) * _2328) + _2134;
    }
    float _2462;
    float _2464;
    float _2466;
    float _2468;
    float _2470;
    float _2472;
    if (_1766.y == 0u)
    {
        float _2403 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2404 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2403;
        float _2405 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2403;
        float _2406 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2403;
        uvec4 _2418 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2419 = _2418.x;
        uint _2430 = uint((float(_2418.y) * floor(float(uint(cbSceneParam._m0[85u].y * _482) / _2419))) + floor(float(uint(cbSceneParam._m0[85u].x * _481) / _2419)));
        float _2440 = (log2(_2406 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2441 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        uint _2444 = uint(isnan(14.0) ? _2441 : (isnan(_2441) ? 14.0 : min(_2441, 14.0)));
        uvec4 _2449 = texelFetch(g_lightClusterGridBuffer, int(((_2444 << 2u) + (_2430 << 6u)) >> 2u));
        uint _2450 = _2449.x;
        uint _2451 = _2418.z;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        float _2563;
        float _2565;
        if (((((1u << ((_2451 >> 4u) & 15u)) + 4294967295u) & _2450) == 0u) || ((_2451 & 240u) == 0u))
        {
            _2555 = 0.0;
            _2557 = 0.0;
            _2559 = 0.0;
            _2561 = 0.0;
            _2563 = 0.0;
            _2565 = 0.0;
        }
        else
        {
            float _2556;
            float _2558;
            float _2560;
            float _2562;
            float _2564;
            float _2566;
            float _2707 = 0.0;
            float _2708 = 0.0;
            float _2709 = 0.0;
            float _2710 = 0.0;
            float _2711 = 0.0;
            float _2712 = 0.0;
            uint _2713 = 0u;
            uint _2722;
            bool _2723;
            for (;;)
            {
                _2722 = texelFetch(g_lightClassification, int((((_2444 << 5u) + (_2430 << 9u)) + (_2713 << 2u)) >> 2u)).x;
                _2723 = _2722 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2723)
                {
                    frontier_phi_68_pred = _2709;
                    frontier_phi_68_pred_1 = _2712;
                    frontier_phi_68_pred_2 = _2711;
                    frontier_phi_68_pred_3 = _2710;
                    frontier_phi_68_pred_4 = _2708;
                    frontier_phi_68_pred_5 = _2707;
                }
                else
                {
                    float _2852;
                    float _2853;
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    uint _2858;
                    _2852 = _2707;
                    _2853 = _2708;
                    _2854 = _2709;
                    _2855 = _2710;
                    _2856 = _2711;
                    _2857 = _2712;
                    _2858 = _2722;
                    float _2779;
                    float _2780;
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    for (;;)
                    {
                        uint _2862 = uint(findLSB(_2858)) + (_2713 << 5u);
                        uint _2859 = (_2858 + 4294967295u) & _2858;
                        uint _2864 = _2862 * 48u;
                        vec4 _2878 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2864)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 3u)).x));
                        uint _2884 = (_2862 * 48u) + 4u;
                        vec4 _2897 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2884)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 3u)).x));
                        uint _2903 = (_2862 * 48u) + 8u;
                        vec3 _2914 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2903)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 2u)).x));
                        float _2918 = _2878.x - _2404;
                        float _2919 = _2878.y - _2405;
                        float _2920 = _2878.z - _2406;
                        float _2921 = dot(vec3(_2918, _2919, _2920), vec3(_2918, _2919, _2920));
                        float _2924 = inversesqrt(_2921);
                        float _2925 = _2924 * _2918;
                        float _2926 = _2924 * _2919;
                        float _2927 = _2924 * _2920;
                        float _2928 = dot(vec3(_506, _509, _512), vec3(_2925, _2926, _2927));
                        float _2933 = 1.0 - (_2921 * _2878.w);
                        float _4272 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
                        float _2934 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
                        float _2935 = sqrt(_2921) * _2897.w;
                        float _2938 = 1.39999997615814208984375 / (_2935 + 1.39999997615814208984375);
                        float _2939 = _2938 * _2938;
                        float _2942 = ((1.0 - _2939) * _2928) + _2939;
                        float _2945 = _2935 * _2935;
                        float _2949 = ((isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0))) * _2934) / ((_2945 * 0.699999988079071044921875) + 1.0);
                        float _2953 = (-0.0) - _2404;
                        float _2954 = (-0.0) - _2405;
                        float _2955 = (-0.0) - _2406;
                        float _2959 = inversesqrt(dot(vec3(_2953, _2954, _2955), vec3(_2953, _2954, _2955)));
                        float _2960 = _2959 * _2953;
                        float _2961 = _2959 * _2954;
                        float _2962 = _2959 * _2955;
                        float _2970 = exp2(log2(1.0 / ((_2945 * 3.5) + 5.0)) * 0.25);
                        float _2971 = 1.0 - _710;
                        float _2978 = sqrt(1.0 - ((1.0 - (_2971 * _2971)) * (1.0 - (_2970 * _2970))));
                        float _2979 = _2978 * _2978;
                        float _2980 = _2979 * _2979;
                        float _2981 = _2960 + _2925;
                        float _2982 = _2961 + _2926;
                        float _2983 = _2962 + _2927;
                        float _2987 = inversesqrt(dot(vec3(_2981, _2982, _2983), vec3(_2981, _2982, _2983)));
                        float _2991 = dot(vec3(_506, _509, _512), vec3(_2960, _2961, _2962));
                        float _4288 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                        float _2994 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
                        float _2995 = dot(vec3(_506, _509, _512), vec3(_2987 * _2981, _2987 * _2982, _2987 * _2983));
                        float _4299 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                        float _2998 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                        float _3002 = ((_2998 * _2998) * (_2980 + (-1.0))) + 1.0;
                        float _3003 = _2938 * _2979;
                        float _3004 = _3003 * _3003;
                        float _3007 = ((1.0 - _3004) * _2928) + _3004;
                        float _4310 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                        float _3008 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                        float _3009 = 1.0 - _2979;
                        float _3019 = (0.5 / (((_3008 * ((_2994 * _3009) + _2979)) + 9.9999999392252902907785028219223e-09) + (((_3008 * _3009) + _2979) * _2994))) * _3008;
                        float _4321 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
                        float _3030 = (((_2980 * 3.1415927410125732421875) * (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0)))) / ((_3002 * _3002) * ((_2945 * 2.1991131305694580078125) + 3.141590118408203125))) * _2934;
                        _2782 = (_2949 * _2897.x) + _2855;
                        _2783 = (_2949 * _2897.y) + _2856;
                        _2784 = (_2949 * _2897.z) + _2857;
                        _2779 = (_3030 * _2914.x) + _2852;
                        _2780 = (_3030 * _2914.y) + _2853;
                        _2781 = (_3030 * _2914.z) + _2854;
                        if (_2859 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2852 = _2779;
                            _2853 = _2780;
                            _2854 = _2781;
                            _2855 = _2782;
                            _2856 = _2783;
                            _2857 = _2784;
                            _2858 = _2859;
                        }
                    }
                    frontier_phi_68_pred = _2781;
                    frontier_phi_68_pred_1 = _2784;
                    frontier_phi_68_pred_2 = _2783;
                    frontier_phi_68_pred_3 = _2782;
                    frontier_phi_68_pred_4 = _2780;
                    frontier_phi_68_pred_5 = _2779;
                }
                _2560 = frontier_phi_68_pred;
                _2566 = frontier_phi_68_pred_1;
                _2564 = frontier_phi_68_pred_2;
                _2562 = frontier_phi_68_pred_3;
                _2558 = frontier_phi_68_pred_4;
                _2556 = frontier_phi_68_pred_5;
                uint _2714 = _2713 + 1u;
                if (_2714 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2707 = _2556;
                    _2708 = _2558;
                    _2709 = _2560;
                    _2710 = _2562;
                    _2711 = _2564;
                    _2712 = _2566;
                    _2713 = _2714;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2555 = _2556;
            _2557 = _2558;
            _2559 = _2560;
            _2561 = _2562;
            _2563 = _2564;
            _2565 = _2566;
        }
        uvec4 _2569 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2570 = _2569.z;
        uint _2572 = (_2570 >> 8u) & 15u;
        float _2675;
        float _2677;
        float _2679;
        float _2681;
        float _2683;
        float _2685;
        if (((4294967295u << _2572) & _2450) == 0u)
        {
            _2675 = _2555;
            _2677 = _2557;
            _2679 = _2559;
            _2681 = _2561;
            _2683 = _2563;
            _2685 = _2565;
        }
        else
        {
            float _2700 = inversesqrt(dot(vec3(_2404, _2405, _2406), vec3(_2404, _2405, _2406)));
            float _2701 = _2700 * _2404;
            float _2702 = _2700 * _2405;
            float _2703 = _2700 * _2406;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2572 < ((_2570 >> 12u) & 15u))
            {
                float _2676;
                float _2678;
                float _2680;
                float _2682;
                float _2684;
                float _2686;
                float _2835 = _2555;
                float _2836 = _2557;
                float _2837 = _2559;
                float _2838 = _2561;
                float _2839 = _2563;
                float _2840 = _2565;
                uint _2841 = _2572;
                uint _2850;
                bool _2851;
                for (;;)
                {
                    _2850 = texelFetch(g_lightClassification, int((((_2444 << 5u) + (_2430 << 9u)) + (_2841 << 2u)) >> 2u)).x;
                    _2851 = _2850 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2851)
                    {
                        frontier_phi_79_pred = _2840;
                        frontier_phi_79_pred_1 = _2839;
                        frontier_phi_79_pred_2 = _2838;
                        frontier_phi_79_pred_3 = _2837;
                        frontier_phi_79_pred_4 = _2836;
                        frontier_phi_79_pred_5 = _2835;
                    }
                    else
                    {
                        float _3044;
                        float _3045;
                        float _3046;
                        float _3047;
                        float _3048;
                        float _3049;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3057 = _2835;
                        float _3058 = _2836;
                        float _3059 = _2837;
                        float _3060 = _2838;
                        float _3061 = _2839;
                        float _3062 = _2840;
                        uint _3063 = _2850;
                        uint _3064;
                        vec4 _3089;
                        float _3090;
                        vec4 _3105;
                        vec3 _3117;
                        vec4 _3132;
                        vec4 _3148;
                        float _3195;
                        bool _3196;
                        for (;;)
                        {
                            uint _3074 = ((_2841 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3063));
                            _3064 = (_3063 + 4294967295u) & _3063;
                            uint _3076 = _3074 * 40u;
                            _3089 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3076)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 3u)).x));
                            _3090 = _3089.w;
                            uint _3092 = (_3074 * 40u) + 4u;
                            _3105 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 3u)).x));
                            uint _3107 = (_3074 * 40u) + 8u;
                            _3117 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x));
                            uint _3119 = (_3074 * 40u) + 16u;
                            _3132 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 3u)).x));
                            uint _3135 = (_3074 * 40u) + 20u;
                            _3148 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3135)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 3u)).x));
                            uint _3151 = (_3074 * 40u) + 24u;
                            vec4 _3164 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 3u)).x));
                            uint _3170 = (_3074 * 40u) + 28u;
                            vec4 _3183 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 3u)).x));
                            _3195 = fma(_2406, _3183.z, fma(_2405, _3183.y, _3183.x * _2404)) + _3183.w;
                            _3196 = !((fma(_2406, _3164.z, fma(_2405, _3164.y, _3164.x * _2404)) + _3164.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3196)
                            {
                                float _3223 = _3089.x - _2404;
                                float _3224 = _3089.y - _2405;
                                float _3225 = _3089.z - _2406;
                                float _3226 = dot(vec3(_3223, _3224, _3225), vec3(_3223, _3224, _3225));
                                float _3229 = inversesqrt(_3226);
                                float _3230 = _3229 * _3223;
                                float _3231 = _3229 * _3224;
                                float _3232 = _3229 * _3225;
                                float _3236 = 1.0 - (_3226 / (_3090 * _3090));
                                float _4332 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                                float _3237 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                                float _3241 = sqrt(_3226) * _3105.w;
                                float _3243 = 1.39999997615814208984375 / (_3241 + 1.39999997615814208984375);
                                float _3244 = _3243 * _3243;
                                float _3247 = ((1.0 - _3244) * dot(vec3(_3230, _3231, _3232), vec3(_506, _509, _512))) + _3244;
                                float _3250 = _3241 * _3241;
                                float _3254 = (fma(_2406, _3132.z, fma(_2405, _3132.y, _3132.x * _2404)) + _3132.w) / _3195;
                                float _3255 = (fma(_2406, _3148.z, fma(_2405, _3148.y, _3148.x * _2404)) + _3148.w) / _3195;
                                float _3259 = 1.0 - dot(vec2(_3254, _3255), vec2(_3254, _3255));
                                float _4348 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                                float _3260 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                                float _3261 = _3260 * (((isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0))) * _3237) / ((_3250 * 0.699999988079071044921875) + 1.0));
                                float _3273 = exp2(log2(1.0 / ((_3250 * 3.5) + 5.0)) * 0.25);
                                float _3274 = 1.0 - _710;
                                float _3281 = sqrt(1.0 - ((1.0 - (_3274 * _3274)) * (1.0 - (_3273 * _3273))));
                                float _3282 = _3281 * _3281;
                                float _3283 = _3282 * _3282;
                                float _3284 = _3230 - _2701;
                                float _3285 = _3231 - _2702;
                                float _3286 = _3232 - _2703;
                                float _3290 = inversesqrt(dot(vec3(_3284, _3285, _3286), vec3(_3284, _3285, _3286)));
                                float _3294 = dot(vec3(_506, _509, _512), vec3((-0.0) - _2701, (-0.0) - _2702, (-0.0) - _2703));
                                float _4359 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                                float _3297 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                                float _3298 = dot(vec3(_506, _509, _512), vec3(_3290 * _3284, _3290 * _3285, _3290 * _3286));
                                float _4370 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                                float _3301 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                                float _3305 = ((_3301 * _3301) * (_3283 + (-1.0))) + 1.0;
                                float _3306 = _3243 * _3282;
                                float _3307 = _3306 * _3306;
                                float _3313 = ((1.0 - _3307) * dot(vec3(_506, _509, _512), vec3(_3230, _3231, _3232))) + _3307;
                                float _4381 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3314 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                                float _3315 = 1.0 - _3282;
                                float _3325 = (0.5 / (((_3314 * ((_3297 * _3315) + _3282)) + 9.9999999392252902907785028219223e-09) + (((_3314 * _3315) + _3282) * _3297))) * _3314;
                                float _4392 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                                float _3335 = (_3260 * _3237) * (((_3283 * 3.1415927410125732421875) * (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0)))) / ((_3305 * _3305) * ((_3250 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3261 * _3105.z;
                                frontier_phi_85_pred_1 = _3261 * _3105.y;
                                frontier_phi_85_pred_2 = _3261 * _3105.x;
                                frontier_phi_85_pred_3 = _3335 * _3117.z;
                                frontier_phi_85_pred_4 = _3335 * _3117.y;
                                frontier_phi_85_pred_5 = _3335 * _3117.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3344 = frontier_phi_85_pred;
                            _3343 = frontier_phi_85_pred_1;
                            _3342 = frontier_phi_85_pred_2;
                            _3341 = frontier_phi_85_pred_3;
                            _3340 = frontier_phi_85_pred_4;
                            _3339 = frontier_phi_85_pred_5;
                            _3047 = _3342 + _3060;
                            _3048 = _3343 + _3061;
                            _3049 = _3344 + _3062;
                            _3044 = _3339 + _3057;
                            _3045 = _3340 + _3058;
                            _3046 = _3341 + _3059;
                            if (_3064 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3057 = _3044;
                                _3058 = _3045;
                                _3059 = _3046;
                                _3060 = _3047;
                                _3061 = _3048;
                                _3062 = _3049;
                                _3063 = _3064;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3049;
                        frontier_phi_79_pred_1 = _3048;
                        frontier_phi_79_pred_2 = _3047;
                        frontier_phi_79_pred_3 = _3046;
                        frontier_phi_79_pred_4 = _3045;
                        frontier_phi_79_pred_5 = _3044;
                    }
                    _2686 = frontier_phi_79_pred;
                    _2684 = frontier_phi_79_pred_1;
                    _2682 = frontier_phi_79_pred_2;
                    _2680 = frontier_phi_79_pred_3;
                    _2678 = frontier_phi_79_pred_4;
                    _2676 = frontier_phi_79_pred_5;
                    uint _2842 = _2841 + 1u;
                    if (_2842 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2835 = _2676;
                        _2836 = _2678;
                        _2837 = _2680;
                        _2838 = _2682;
                        _2839 = _2684;
                        _2840 = _2686;
                        _2841 = _2842;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2682;
                frontier_phi_60_61_ladder_1 = _2686;
                frontier_phi_60_61_ladder_2 = _2684;
                frontier_phi_60_61_ladder_3 = _2680;
                frontier_phi_60_61_ladder_4 = _2678;
                frontier_phi_60_61_ladder_5 = _2676;
            }
            else
            {
                frontier_phi_60_61_ladder = _2561;
                frontier_phi_60_61_ladder_1 = _2565;
                frontier_phi_60_61_ladder_2 = _2563;
                frontier_phi_60_61_ladder_3 = _2559;
                frontier_phi_60_61_ladder_4 = _2557;
                frontier_phi_60_61_ladder_5 = _2555;
            }
            _2675 = frontier_phi_60_61_ladder_5;
            _2677 = frontier_phi_60_61_ladder_4;
            _2679 = frontier_phi_60_61_ladder_3;
            _2681 = frontier_phi_60_61_ladder;
            _2683 = frontier_phi_60_61_ladder_2;
            _2685 = frontier_phi_60_61_ladder_1;
        }
        float _2690 = isnan(1.0) ? _694 : (isnan(_694) ? 1.0 : min(_694, 1.0));
        _2462 = (_2690 * _2681) + _1899;
        _2464 = (_2690 * _2683) + _1901;
        _2466 = (_2690 * _2685) + _1903;
        _2468 = ((_2675 * _680) * _2690) + _2244;
        _2470 = ((_2677 * _681) * _2690) + _2246;
        _2472 = ((_2679 * _682) * _2690) + _2248;
    }
    else
    {
        _2462 = _1899;
        _2464 = _1901;
        _2466 = _1903;
        _2468 = _2244;
        _2470 = _2246;
        _2472 = _2248;
    }
    float _4408 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _4419 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _4430 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _4441 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _2490 = ((isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_2462 + ((isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))) * _694))) + ((_2468 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _1533)) * cbPerFrame._m0[3u].x);
    float _2491 = ((isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_2464 + ((isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))) * _694))) + ((_2470 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _1533)) * cbPerFrame._m0[3u].x);
    float _2492 = ((isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_2466 + ((isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))) * _694))) + ((_2472 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _1533)) * cbPerFrame._m0[3u].x);
    float _2493 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2494 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2495 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
    float _2500 = cbInstanceData._m0[_586 + 6u].w * (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0)));
    float _2505 = _481 / cbSceneParam._m0[86u].x;
    float _2506 = _482 / cbSceneParam._m0[86u].y;
    vec4 _2520 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2505, _2506, (log2((isnan(cbSceneParam._m0[77u].w) ? _401 : (isnan(_401) ? cbSceneParam._m0[77u].w : min(_401, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2522 = _2520.x;
    float _2523 = _2520.y;
    float _2524 = _2520.z;
    float _2525 = _2520.w;
    float _2617;
    float _2619;
    float _2621;
    float _2623;
    if (_401 > cbSceneParam._m0[78u].w)
    {
        float _2580 = isnan(_401) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _401 : min(cbSceneParam._m0[80u].w, _401));
        float _2581 = _2580 / _401;
        float _2592 = _2581 * _454;
        float _2593 = _455 * _2581;
        float _2594 = (-0.0) - _2593;
        float _2595 = _2581 * _456;
        float _2597 = (cbSceneParam._m0[77u].w * _2594) / _2580;
        float _2598 = _2597 + cbSceneParam._m0[79u].w;
        float _2599 = cbSceneParam._m0[79u].w - _2593;
        float _2605 = sqrt(((_2592 * _2592) + (_2593 * _2593)) + (_2595 * _2595));
        float _2608 = (1.0 - (cbSceneParam._m0[77u].w / _2580)) * _2605;
        float _2613 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2615 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2792;
        if (abs((_2594 - _2597) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2792 = ((((_2598 > 0.0) ? exp2(_2613 * _2598) : (2.0 - exp2(_2615 * _2598))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2608;
        }
        else
        {
            float _2736 = 1.0 / cbSceneParam._m0[80u].x;
            float _2737 = isnan(_2599) ? _2598 : (isnan(_2598) ? _2599 : max(_2598, _2599));
            float _2738 = isnan(_2599) ? _2598 : (isnan(_2598) ? _2599 : min(_2598, _2599));
            float _2747 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : min(_2737, 0.0));
            float _2748 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : min(_2738, 0.0));
            _2792 = ((abs(_2605 / _2594) * cbSceneParam._m0[80u].y) * ((((_2747 - _2748) * 2.0) - ((exp2(_2613 * (isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0)))) - exp2(_2613 * (isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0))))) * _2736)) - ((exp2(_2615 * _2747) - exp2(_2615 * _2748)) * _2736))) + (_2608 * cbSceneParam._m0[80u].z);
        }
        vec4 _2794 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2505, _2506, 1.0), 0.0);
        float _2803 = exp2((_2792 * (-1.44269502162933349609375)) * (1.0 - _2794.w));
        float _2804 = log2(_2803);
        float _2820 = log2(_2525);
        _2617 = (exp2(_2820 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2804 * cbSceneParam._m0[78u].x)) * _2794.x) / cbSceneParam._m0[78u].x)) + _2522;
        _2619 = (exp2(_2820 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2804 * cbSceneParam._m0[78u].y)) * _2794.y) / cbSceneParam._m0[78u].y)) + _2523;
        _2621 = (exp2(_2820 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2804 * cbSceneParam._m0[78u].z)) * _2794.z) / cbSceneParam._m0[78u].z)) + _2524;
        _2623 = _2803 * _2525;
    }
    else
    {
        _2617 = _2522;
        _2619 = _2523;
        _2621 = _2524;
        _2623 = _2525;
    }
    bool _2830;
    vec4 _2633;
    vec4 _2655;
    float _2657;
    float _2661;
    float _2662;
    float _2663;
    float _2664;
    bool _2674;
    for (;;)
    {
        _2633 = cbMatDynParam._m0[0u];
        float _2635 = roundEven(_2633.y);
        bool _2636 = _2635 == 3.0;
        float _2637 = log2(_2623);
        float _2644 = exp2(_2637 * cbSceneParam._m0[78u].x) * _2493;
        float _2645 = exp2(_2637 * cbSceneParam._m0[78u].y) * _2494;
        float _2646 = exp2(_2637 * cbSceneParam._m0[78u].z) * _2495;
        float _2653 = _470 + (-0.5);
        _2655 = cbMtdParam._m0[1u];
        _2657 = _2655.y * _2653;
        float _2660 = (_2635 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2661 = _2660 * (_2636 ? _2644 : (_2644 + (cbSceneParam._m0[72u].w * _2617)));
        _2662 = _2660 * (_2636 ? _2645 : (_2645 + (cbSceneParam._m0[72u].w * _2619)));
        _2663 = _2660 * (_2636 ? _2646 : (_2646 + (cbSceneParam._m0[72u].w * _2621)));
        _2664 = _2653 * 0.999000012874603271484375;
        _2674 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2674)
        {
            if ((cbInstanceData._m0[_586 + 7u].x + _2664) < 0.5)
            {
                _2830 = true;
                break;
            }
        }
        uint _2771 = _587 + uint(_2633.w);
        if ((cbInstanceData._m0[_2771].w < 1.0) && ((cbInstanceData._m0[_2771].w + _2664) < 0.5))
        {
            _2830 = true;
            break;
        }
        if ((_2657 + _298) < _2655.x)
        {
            _2830 = true;
            break;
        }
        _2830 = false;
        break;
    }
    float _3035;
    if (_2830)
    {
        discard_state = true;
        _3035 = 0.0;
    }
    else
    {
        _3035 = _2500;
    }
    SV_Target.x = _2661;
    SV_Target.y = _2662;
    SV_Target.z = _2663;
    SV_Target.w = _3035;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2500;
    discard_exit();
}


