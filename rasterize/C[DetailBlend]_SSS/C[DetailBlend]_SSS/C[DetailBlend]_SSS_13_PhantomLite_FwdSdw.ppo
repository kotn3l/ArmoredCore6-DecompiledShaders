#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_7;
layout(set = 0, binding = 2) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D C_DetailBlend_SSS_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1234;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230;
    float _231;
    float _232;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
    }
    else
    {
        _230 = _216;
        _231 = _217;
        _232 = _218;
    }
    float _277 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _287 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _277);
    float _288 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _277);
    float _289 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _277);
    vec4 _302 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    vec4 _320 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _331 = cbMtdParam._m0[9u].x * _320.x;
    float _332 = cbMtdParam._m0[9u].y * _320.y;
    float _333 = cbMtdParam._m0[9u].z * _320.z;
    float _339 = exp2(log2(1.0 - _302.w) * 8.0);
    vec4 _351 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _385 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _393 = (((((cbMtdParam._m0[12u].x * _351.x) - _331) * _339) + _331) * 4.55000019073486328125) * _385.x;
    float _395 = (((((cbMtdParam._m0[12u].y * _351.y) - _332) * _339) + _332) * 4.55000019073486328125) * _385.y;
    float _397 = (((((cbMtdParam._m0[12u].z * _351.z) - _333) * _339) + _333) * 4.55000019073486328125) * _385.z;
    float _398 = _385.w * _320.w;
    float _419 = cbMtdParam._m0[14u].z + texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w)).x;
    float _422 = ((cbMtdParam._m0[14u].y - _419) * _339) + _419;
    vec4 _434 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _436 = _434.x;
    float _437 = _434.y;
    float _443 = cbMtdParam._m0[13u].x + _434.z;
    vec4 _456 = texture(sampler2D(C_DetailBlend_SSS_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _468 = (_302.z * 2.0) * ((((_456.z - _443) + cbMtdParam._m0[14u].x) * _339) + _443);
    float _472 = (_302.x * 2.0) + (-1.0);
    float _474 = (_302.y * 2.0) + (-1.0);
    float _475 = dot(vec2(_472, _474), vec2(_472, _474));
    float _3880 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _480 = sqrt(1.0 - (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))));
    float _493 = ((((((_456.x - _436) * _339) + _436) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _472;
    float _494 = ((((((_456.y - _437) * _339) + _437) * 2.0) + (-1.0)) * cbMtdParam._m0[13u].z) + _474;
    float _497 = fma(_480, _230, fma(_494, _222 * TANGENT.x, (_208 * _200) * _493));
    float _500 = fma(_480, _231, fma(_494, _222 * TANGENT.y, (_208 * _201) * _493));
    float _503 = fma(_480, _232, fma(_494, _222 * TANGENT.z, (_208 * _202) * _493));
    float _507 = inversesqrt(dot(vec3(_497, _500, _503), vec3(_497, _500, _503)));
    float _508 = _507 * _497;
    float _509 = _507 * _500;
    float _510 = _507 * _503;
    float _3891 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _511 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _3902 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _512 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _3913 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _513 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _3924 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _514 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _3935 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _515 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _3946 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _516 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _524 = cbMatDynParam._m0[9u].x * _513;
    float _525 = cbMatDynParam._m0[9u].y * _514;
    float _526 = cbMatDynParam._m0[9u].z * _515;
    float _533 = inversesqrt(dot(vec3(_287, _288, _289), vec3(_287, _288, _289)));
    float _534 = _533 * _287;
    float _535 = _533 * _288;
    float _536 = _533 * _289;
    float _537 = dot(vec3(_508, _509, _510), vec3(_534, _535, _536));
    float _543 = abs(exp2(log2(_537) * cbMatDynParam._m0[12u].x));
    float _544 = isnan(0.100000001490116119384765625) ? _543 : (isnan(_543) ? 0.100000001490116119384765625 : max(_543, 0.100000001490116119384765625));
    float _550 = ((isnan(0.699999988079071044921875) ? _544 : (isnan(_544) ? 0.699999988079071044921875 : min(_544, 0.699999988079071044921875))) + (-0.100000001490116119384765625)) * 1.66666662693023681640625;
    float _573 = 1.0 - cbMatDynParam._m0[8u].w;
    float _3967 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _576 = 1.0 - cbMatDynParam._m0[7u].w;
    float _3978 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _577 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _581 = dot(vec3(_508, _509, _510), vec3(0.0, -1.0, 0.0));
    float _3989 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _584 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _591 = (_584 * _513) * cbMatDynParam._m0[11u].x;
    float _593 = (_584 * _514) * cbMatDynParam._m0[11u].y;
    float _595 = (_584 * _515) * cbMatDynParam._m0[11u].z;
    float _602 = dot(vec3(_534, _535, _536), vec3(_508, _509, _510));
    float _605 = _602 * 2.0;
    float _615 = dot(vec3((-0.0) - (_534 - (_605 * _508)), (-0.0) - (_535 - (_605 * _509)), (-0.0) - (_536 - (_605 * _510))), vec3(0.0, -1.0, 0.0));
    float _4000 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _622 = exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * 4.0);
    float _648 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _654 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _655 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _657 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _659 = _657.w;
    float _678 = fma(_510, cbSceneParam._m0[5u].z, fma(_509, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _508));
    float _681 = fma(_510, cbSceneParam._m0[6u].z, fma(_509, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _508));
    float _684 = fma(_510, cbSceneParam._m0[7u].z, fma(_509, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _508));
    vec4 _686 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _688 = _686.x;
    float _700 = (((_686.y - _512) + (_686.w * _512)) * cbMtdParam._m0[3u].x) + _512;
    vec4 _701 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _717 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_688 * _688)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _701.z;
    float _726 = (((cbMatDynParam._m0[15u].x - _516) * cbMatDynParam._m0[15u].w) * _717) + _516;
    float _734 = ((_717 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _700)) + _700;
    uint _758 = uint(roundEven(NORMAL.w)) * 13u;
    uint _759 = _758 + 9u;
    uint _760 = _759 + uint(cbMatDynParam._m0[0u].w);
    float _766 = (cbMtdParam._m0[0u].x * _524) * cbInstanceData._m0[_760].x;
    float _767 = (cbMtdParam._m0[0u].y * _525) * cbInstanceData._m0[_760].y;
    float _768 = (cbMtdParam._m0[0u].z * _526) * cbInstanceData._m0[_760].z;
    float _4011 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _769 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _4022 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _770 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _4033 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _771 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    vec4 _772 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _777 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _788 = (((_777.x - _726) + (_777.w * _726)) * cbMtdParam._m0[3u].x) + _726;
    float _801 = (cbMtdParam._m0[3u].x * (((_769 * _659) - _769) + _772.x)) + _769;
    float _802 = (cbMtdParam._m0[3u].x * (((_770 * _659) - _770) + _772.y)) + _770;
    float _803 = (cbMtdParam._m0[3u].x * (((_771 * _659) - _771) + _772.z)) + _771;
    float _817 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_726 * (_524 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_726 * (_525 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_726 * (_526 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w)).z;
    float _821 = _817 * cbMatDynParam._m0[13u].w;
    float _831 = (_821 * (cbMatDynParam._m0[13u].x - _801)) + _801;
    float _832 = (_821 * (cbMatDynParam._m0[13u].y - _802)) + _802;
    float _833 = (_821 * (cbMatDynParam._m0[13u].z - _803)) + _803;
    float _841 = ((_817 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _788)) + _788;
    float _842 = 1.0 - _841;
    float _843 = _842 * _831;
    float _844 = _842 * _832;
    float _845 = _842 * _833;
    float _849 = (_831 + (-0.039999999105930328369140625)) * _841;
    float _850 = (_832 + (-0.039999999105930328369140625)) * _841;
    float _851 = (_833 + (-0.039999999105930328369140625)) * _841;
    float _852 = _849 + 0.039999999105930328369140625;
    float _853 = _850 + 0.039999999105930328369140625;
    float _854 = _851 + 0.039999999105930328369140625;
    vec4 _863 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _654, cbSceneParam._m0[86u].y * _655));
    float _866 = _863.x * TEXCOORD_4;
    float _867 = _537 * 2.0;
    float _871 = (_867 * _508) - _534;
    float _872 = (_867 * _509) - _535;
    float _873 = (_867 * _510) - _536;
    float _874 = abs(_602);
    float _4044 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _876 = sqrt(_734);
    float _888 = exp2((_876 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_876 * 3.0));
    float _894 = (1.0 - _888) * ((_876 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _895 = _888 * _876;
    float _923 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _927 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _931 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1233;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _958 = fma(_931, cbModelParam._m0[26u].z, fma(_927, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _923));
        float _962 = fma(_931, cbModelParam._m0[27u].z, fma(_927, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _923));
        float _966 = fma(_931, cbModelParam._m0[28u].z, fma(_927, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _923));
        float _991 = _923 + _508;
        float _992 = _927 + _509;
        float _993 = _931 + _510;
        float _1003 = fma(_993, cbModelParam._m0[26u].z, fma(_992, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _991)) - _958;
        float _1004 = fma(_993, cbModelParam._m0[27u].z, fma(_992, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _991)) - _962;
        float _1005 = fma(_993, cbModelParam._m0[28u].z, fma(_992, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _991)) - _966;
        float _1009 = inversesqrt(dot(vec3(_1003, _1004, _1005), vec3(_1003, _1004, _1005)));
        float _1022 = ((_1009 * _1003) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_958 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1023 = ((_1009 * _1004) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_962 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1024 = ((_1009 * _1005) / cbModelParam._m0[34u].z) + ((((((_966 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        float _1061 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1027.x + (-0.5));
        float _1063 = _1061 * (_1027.y + (-0.5));
        float _1064 = _1061 * (_1027.z + (-0.5));
        float _1071 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1034.x + (-0.5));
        float _1073 = _1071 * (_1034.y + (-0.5));
        float _1074 = _1071 * (_1034.z + (-0.5));
        float _1081 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1041.x + (-0.5));
        float _1083 = _1081 * (_1041.y + (-0.5));
        float _1084 = _1081 * (_1041.z + (-0.5));
        float _1091 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1048.x + (-0.5));
        float _1093 = _1091 * (_1048.y + (-0.5));
        float _1094 = _1091 * (_1048.z + (-0.5));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = _1062 * 0.5;
        float _1099 = _1072 * 0.5;
        float _1100 = _1082 * 0.5;
        float _1101 = dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100));
        float _1106 = (_1101 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1101);
        float _1115 = (dot(vec3(_508, _509, _510), vec3(_1106 * _1098, _1106 * _1099, _1106 * _1100)) + 1.0) * 0.5;
        float _4070 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1125 = sqrt(((_1099 * _1099) + (_1098 * _1098)) + (_1100 * _1100)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _4081 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _4092 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_1127 + 1.0))) + _1132) * _1095;
        float _1142 = _1063 * 0.5;
        float _1143 = _1073 * 0.5;
        float _1144 = _1083 * 0.5;
        float _1145 = dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144));
        float _1150 = (_1145 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1145);
        float _1158 = (dot(vec3(_508, _509, _510), vec3(_1150 * _1142, _1150 * _1143, _1150 * _1144)) + 1.0) * 0.5;
        float _4103 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1167 = sqrt(((_1143 * _1143) + (_1142 * _1142)) + (_1144 * _1144)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _4114 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _4125 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_1169 + 1.0))) + _1174) * _1096;
        float _1184 = _1064 * 0.5;
        float _1185 = _1074 * 0.5;
        float _1186 = _1084 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1200 = (dot(vec3(_508, _509, _510), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _4136 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1209 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _4147 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _4158 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1211 + 1.0))) + _1216) * _1097;
        _1233 = _1064;
        _1235 = _1063;
        _1236 = _1062;
        _1237 = _1074;
        _1238 = _1073;
        _1239 = _1072;
        _1240 = _1084;
        _1241 = _1083;
        _1242 = _1082;
        _1243 = _1097;
        _1244 = _1096;
        _1245 = _1095;
        _1246 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
        _1247 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
        _1248 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
    }
    else
    {
        _1233 = _1234;
        _1235 = _1234;
        _1236 = _1234;
        _1237 = _1234;
        _1238 = _1234;
        _1239 = _1234;
        _1240 = _1234;
        _1241 = _1234;
        _1242 = _1234;
        _1243 = _1234;
        _1244 = _1234;
        _1245 = _1234;
        _1246 = 0.0;
        _1247 = 0.0;
        _1248 = 0.0;
    }
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1274 = fma(_931, cbModelParam._m0[30u].z, fma(_927, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _923));
        float _1278 = fma(_931, cbModelParam._m0[31u].z, fma(_927, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _923));
        float _1282 = fma(_931, cbModelParam._m0[32u].z, fma(_927, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _923));
        float _1305 = _923 + _508;
        float _1306 = _927 + _509;
        float _1307 = _931 + _510;
        float _1317 = fma(_1307, cbModelParam._m0[30u].z, fma(_1306, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1305)) - _1274;
        float _1318 = fma(_1307, cbModelParam._m0[31u].z, fma(_1306, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1305)) - _1278;
        float _1319 = fma(_1307, cbModelParam._m0[32u].z, fma(_1306, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1305)) - _1282;
        float _1323 = inversesqrt(dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319)));
        float _1336 = ((_1323 * _1317) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1274 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1337 = ((_1323 * _1318) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1278 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1338 = ((_1323 * _1319) / cbModelParam._m0[35u].z) + ((((((_1282 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        float _1373 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1340.x + (-0.5));
        float _1375 = _1373 * (_1340.y + (-0.5));
        float _1376 = _1373 * (_1340.z + (-0.5));
        float _1383 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1347.x + (-0.5));
        float _1385 = _1383 * (_1347.y + (-0.5));
        float _1386 = _1383 * (_1347.z + (-0.5));
        float _1393 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1354.x + (-0.5));
        float _1395 = _1393 * (_1354.y + (-0.5));
        float _1396 = _1393 * (_1354.z + (-0.5));
        float _1403 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1361.x + (-0.5));
        float _1405 = _1403 * (_1361.y + (-0.5));
        float _1406 = _1403 * (_1361.z + (-0.5));
        float _1407 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1408 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1409 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1410 = _1374 * 0.5;
        float _1411 = _1384 * 0.5;
        float _1412 = _1394 * 0.5;
        float _1413 = dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412));
        float _1418 = (_1413 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1413);
        float _1426 = (dot(vec3(_508, _509, _510), vec3(_1418 * _1410, _1418 * _1411, _1418 * _1412)) + 1.0) * 0.5;
        float _4199 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1435 = sqrt(((_1411 * _1411) + (_1410 * _1410)) + (_1412 * _1412)) / (_1407 + 9.9999997473787516355514526367188e-06);
        float _4210 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1437 = _1436 * 2.0;
        float _1441 = (1.0 - _1436) / (_1436 + 1.0);
        float _4221 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1451 = ((((1.0 - _1442) * (_1437 + 2.0)) * exp2(log2(isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_1437 + 1.0))) + _1442) * _1407;
        float _1452 = _1375 * 0.5;
        float _1453 = _1385 * 0.5;
        float _1454 = _1395 * 0.5;
        float _1455 = dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454));
        float _1460 = (_1455 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1455);
        float _1468 = (dot(vec3(_508, _509, _510), vec3(_1460 * _1452, _1460 * _1453, _1460 * _1454)) + 1.0) * 0.5;
        float _4232 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1477 = sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454)) / (_1408 + 9.9999997473787516355514526367188e-06);
        float _4243 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1479 = _1478 * 2.0;
        float _1483 = (1.0 - _1478) / (_1478 + 1.0);
        float _4254 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1493 = ((((1.0 - _1484) * (_1479 + 2.0)) * exp2(log2(isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_1479 + 1.0))) + _1484) * _1408;
        float _1494 = _1376 * 0.5;
        float _1495 = _1386 * 0.5;
        float _1496 = _1396 * 0.5;
        float _1497 = dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496));
        float _1502 = (_1497 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1497);
        float _1510 = (dot(vec3(_508, _509, _510), vec3(_1502 * _1494, _1502 * _1495, _1502 * _1496)) + 1.0) * 0.5;
        float _4265 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1519 = sqrt(((_1495 * _1495) + (_1494 * _1494)) + (_1496 * _1496)) / (_1409 + 9.9999997473787516355514526367188e-06);
        float _4276 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1521 = _1520 * 2.0;
        float _1525 = (1.0 - _1520) / (_1520 + 1.0);
        float _4287 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1535 = ((((1.0 - _1526) * (_1521 + 2.0)) * exp2(log2(isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_1521 + 1.0))) + _1526) * _1409;
        _1543 = _1376;
        _1544 = _1375;
        _1545 = _1374;
        _1546 = _1386;
        _1547 = _1385;
        _1548 = _1384;
        _1549 = _1396;
        _1550 = _1395;
        _1551 = _1394;
        _1552 = _1409;
        _1553 = _1408;
        _1554 = _1407;
        _1555 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)));
        _1556 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)));
        _1557 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)));
    }
    else
    {
        _1543 = _1234;
        _1544 = _1234;
        _1545 = _1234;
        _1546 = _1234;
        _1547 = _1234;
        _1548 = _1234;
        _1549 = _1234;
        _1550 = _1234;
        _1551 = _1234;
        _1552 = _1234;
        _1553 = _1234;
        _1554 = _1234;
        _1555 = 0.0;
        _1556 = 0.0;
        _1557 = 0.0;
    }
    float _1567 = (cbModelParam._m0[1u].x * (_1555 - _1246)) + _1246;
    float _1568 = (cbModelParam._m0[1u].x * (_1556 - _1247)) + _1247;
    float _1569 = (cbModelParam._m0[1u].x * (_1557 - _1248)) + _1248;
    float _1590 = fma(_1569, cbSceneParam._m0[89u].z, fma(_1568, cbSceneParam._m0[89u].y, _1567 * cbSceneParam._m0[89u].x));
    float _1593 = fma(_1569, cbSceneParam._m0[90u].z, fma(_1568, cbSceneParam._m0[90u].y, _1567 * cbSceneParam._m0[90u].x));
    float _1596 = fma(_1569, cbSceneParam._m0[91u].z, fma(_1568, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1567));
    float _1611 = _871 * 0.5;
    float _1612 = _872 * 0.5;
    float _1613 = _873 * 0.5;
    float _1614 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1545, _1548, _1551, _1554));
    float _1617 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1544, _1547, _1550, _1553));
    float _1620 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1543, _1546, _1549, _1552));
    float _1651;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1627 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1233, _1237, _1240, _1243));
        float _1631 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1235, _1238, _1241, _1244));
        float _1635 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1236, _1239, _1242, _1245));
        float _1642 = dot(vec4(cbModelParam._m0[39u]), vec4(_1611, _1612, _1613, 1.0));
        _1651 = dot(vec3(isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)), isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)), isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1642) ? 0.0 : (isnan(0.0) ? _1642 : max(0.0, _1642))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1651 = 1.0;
    }
    float _1662;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1653 = dot(vec4(cbModelParam._m0[40u]), vec4(_1611, _1612, _1613, 1.0));
        _1662 = dot(vec3(isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)), isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)), isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1653) ? 0.0 : (isnan(0.0) ? _1653 : max(0.0, _1653))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1662 = 1.0;
    }
    float _1666 = (_1662 * cbModelParam._m0[1u].x) + (_1651 * (1.0 - cbModelParam._m0[1u].x));
    float _1676 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _734);
    float _1677 = isnan(_1676) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1676 : min(cbModelParam._m0[25u].z, _1676));
    float _1757;
    float _1759;
    float _1761;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1724 = fma(_931, cbModelParam._m0[13u].z, fma(_927, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _923)) + cbModelParam._m0[13u].w;
        float _1728 = fma(_931, cbModelParam._m0[14u].z, fma(_927, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _923)) + cbModelParam._m0[14u].w;
        float _1732 = fma(_931, cbModelParam._m0[15u].z, fma(_927, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _923)) + cbModelParam._m0[15u].w;
        float _1735 = fma(_873, cbModelParam._m0[13u].z, fma(_872, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _871));
        float _1738 = fma(_873, cbModelParam._m0[14u].z, fma(_872, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _871));
        float _1741 = fma(_873, cbModelParam._m0[15u].z, fma(_872, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _871));
        float _1769;
        if (_1735 > 0.0)
        {
            _1769 = abs((1.0 - _1724) / _1735);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1724 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1769 = frontier_phi_16_14_ladder;
        }
        float _1944;
        if (_1738 > 0.0)
        {
            _1944 = abs((1.0 - _1728) / _1738);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1728 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1944 = frontier_phi_25_21_ladder;
        }
        float _2239;
        if (_1741 > 0.0)
        {
            _2239 = abs((1.0 - _1732) / _1741);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1732 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2239 = frontier_phi_37_32_ladder;
        }
        float _2241 = isnan(_1944) ? _1769 : (isnan(_1769) ? _1944 : min(_1769, _1944));
        float _2242 = isnan(_2239) ? _2241 : (isnan(_2241) ? _2239 : min(_2241, _2239));
        float _2246 = (_2242 * _1735) + _1724;
        float _2247 = (_2242 * _1738) + _1728;
        float _2248 = (_2242 * _1741) + _1732;
        float _2249 = _2242 * 9.9999997473787516355514526367188e-05;
        float _2251 = (-1.0) - _2249;
        float _2253 = _2249 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2248 > _2253) || ((_2248 < _2251) || ((_2247 > _2253) || ((_2247 < _2251) || ((_2246 < _2251) || (_2246 > _2253))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2393 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2248, cbModelParam._m0[9u].z, fma(_2247, cbModelParam._m0[9u].y, _2246 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2248, cbModelParam._m0[10u].z, fma(_2247, cbModelParam._m0[10u].y, _2246 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2248, cbModelParam._m0[11u].z, fma(_2247, cbModelParam._m0[11u].y, _2246 * cbModelParam._m0[11u].x))), _1677);
            frontier_phi_15_37_ladder = _2393.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2393.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2393.z * cbModelParam._m0[1u].y;
        }
        _1757 = frontier_phi_15_37_ladder_1;
        _1759 = frontier_phi_15_37_ladder;
        _1761 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1745 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_871, _872, _873), _1677);
        _1757 = _1745.x * cbModelParam._m0[1u].y;
        _1759 = _1745.y * cbModelParam._m0[1u].y;
        _1761 = _1745.z * cbModelParam._m0[1u].y;
    }
    float _1765 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _734);
    float _1766 = isnan(_1765) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1765 : min(cbModelParam._m0[25u].w, _1765));
    float _1859;
    float _1861;
    float _1863;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1823 = fma(_931, cbModelParam._m0[21u].z, fma(_927, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _923)) + cbModelParam._m0[21u].w;
        float _1827 = fma(_931, cbModelParam._m0[22u].z, fma(_927, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _923)) + cbModelParam._m0[22u].w;
        float _1831 = fma(_931, cbModelParam._m0[23u].z, fma(_927, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _923)) + cbModelParam._m0[23u].w;
        float _1834 = fma(_873, cbModelParam._m0[21u].z, fma(_872, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _871));
        float _1837 = fma(_873, cbModelParam._m0[22u].z, fma(_872, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _871));
        float _1840 = fma(_873, cbModelParam._m0[23u].z, fma(_872, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _871));
        float _1949;
        if (_1834 > 0.0)
        {
            _1949 = abs((1.0 - _1823) / _1834);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1823 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1949 = frontier_phi_27_23_ladder;
        }
        float _2266;
        if (_1837 > 0.0)
        {
            _2266 = abs((1.0 - _1827) / _1837);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1827 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2266 = frontier_phi_39_34_ladder;
        }
        float _2604;
        if (_1840 > 0.0)
        {
            _2604 = abs((1.0 - _1831) / _1840);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1831 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2604 = frontier_phi_49_46_ladder;
        }
        float _2606 = isnan(_2266) ? _1949 : (isnan(_1949) ? _2266 : min(_1949, _2266));
        float _2607 = isnan(_2604) ? _2606 : (isnan(_2606) ? _2604 : min(_2606, _2604));
        float _2611 = (_2607 * _1834) + _1823;
        float _2612 = (_2607 * _1837) + _1827;
        float _2613 = (_2607 * _1840) + _1831;
        float _2614 = _2607 * 9.9999997473787516355514526367188e-05;
        float _2615 = (-1.0) - _2614;
        float _2617 = _2614 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2613 > _2617) || ((_2613 < _2615) || ((_2612 > _2617) || ((_2612 < _2615) || ((_2611 < _2615) || (_2611 > _2617))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2735 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2613, cbModelParam._m0[17u].z, fma(_2612, cbModelParam._m0[17u].y, _2611 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2613, cbModelParam._m0[18u].z, fma(_2612, cbModelParam._m0[18u].y, _2611 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2613, cbModelParam._m0[19u].z, fma(_2612, cbModelParam._m0[19u].y, _2611 * cbModelParam._m0[19u].x))), _1766);
            frontier_phi_24_49_ladder = _2735.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2735.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2735.x * cbModelParam._m0[1u].z;
        }
        _1859 = frontier_phi_24_49_ladder_2;
        _1861 = frontier_phi_24_49_ladder_1;
        _1863 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1843 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_871, _872, _873), _1766);
        _1859 = _1843.x * cbModelParam._m0[1u].z;
        _1861 = _1843.y * cbModelParam._m0[1u].z;
        _1863 = _1843.z * cbModelParam._m0[1u].z;
    }
    float _1876 = (((_894 * _852) + _895) * _866) * ((cbModelParam._m0[1u].w * (_1859 - _1757)) + _1757);
    float _1878 = (((_894 * _853) + _895) * _866) * ((cbModelParam._m0[1u].w * (_1861 - _1759)) + _1759);
    float _1880 = (((_894 * _854) + _895) * _866) * ((cbModelParam._m0[1u].w * (_1863 - _1761)) + _1761);
    float _1883 = fma(_1880, cbSceneParam._m0[89u].z, fma(_1878, cbSceneParam._m0[89u].y, _1876 * cbSceneParam._m0[89u].x));
    float _1886 = fma(_1880, cbSceneParam._m0[90u].z, fma(_1878, cbSceneParam._m0[90u].y, _1876 * cbSceneParam._m0[90u].x));
    float _1889 = fma(_1880, cbSceneParam._m0[91u].z, fma(_1878, cbSceneParam._m0[91u].y, _1876 * cbSceneParam._m0[91u].x));
    float _1923 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1927 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1931 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1935 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1936 = _1923 / _1935;
    float _1937 = _1927 / _1935;
    float _1938 = _1931 / _1935;
    float _2085;
    float _2086;
    float _2087;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1965 = ((uint(_1938 > cbSceneParam._m0[59u].y) + uint(_1938 > cbSceneParam._m0[59u].x)) + uint(_1938 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1966 = _1965 + 43u;
        uint _1974 = _1965 + 44u;
        uint _1982 = _1965 + 45u;
        uint _1990 = _1965 + 46u;
        float _2001 = fma(_1935, cbSceneParam._m0[_1966].w, fma(_1931, cbSceneParam._m0[_1966].z, fma(_1927, cbSceneParam._m0[_1966].y, _1923 * cbSceneParam._m0[_1966].x)));
        float _2005 = fma(_1935, cbSceneParam._m0[_1974].w, fma(_1931, cbSceneParam._m0[_1974].z, fma(_1927, cbSceneParam._m0[_1974].y, _1923 * cbSceneParam._m0[_1974].x)));
        float _2013 = fma(_1935, cbSceneParam._m0[_1990].w, fma(_1931, cbSceneParam._m0[_1990].z, fma(_1927, cbSceneParam._m0[_1990].y, _1923 * cbSceneParam._m0[_1990].x)));
        float _2018 = cbSceneParam._m0[33u].z * _2013;
        float _2020 = cbSceneParam._m0[33u].w * _2013;
        float _2023 = fma(_1935, cbSceneParam._m0[_1982].w, fma(_1931, cbSceneParam._m0[_1982].z, fma(_1927, cbSceneParam._m0[_1982].y, _1923 * cbSceneParam._m0[_1982].x))) / _2013;
        float _2071 = (cbSceneParam._m0[33u].x - sqrt(((_1937 * _1937) + (_1936 * _1936)) + (_1938 * _1938))) * cbSceneParam._m0[33u].y;
        float _4413 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2078 = (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2018 + _2001) / _2013, (_2020 + _2005) / _2013), _2023), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2020 + _2001) / _2013, (_2005 - _2018) / _2013), _2023), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2001 - _2018) / _2013, (_2005 - _2020) / _2013), _2023), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2001 - _2020) / _2013, (_2018 + _2005) / _2013), _2023), 0.0)).x), vec4(0.25)));
        _2085 = 1.0 - (_2078 * cbSceneParam._m0[34u].x);
        _2086 = 1.0 - (_2078 * cbSceneParam._m0[34u].y);
        _2087 = 1.0 - (_2078 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2085 = 1.0;
        _2086 = 1.0;
        _2087 = 1.0;
    }
    float _2151;
    float _2153;
    float _2155;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2139 = fma(_1935, cbSceneParam._m0[63u].w, fma(_1931, cbSceneParam._m0[63u].z, fma(_1927, cbSceneParam._m0[63u].y, _1923 * cbSceneParam._m0[63u].x)));
        float _2140 = fma(_1935, cbSceneParam._m0[60u].w, fma(_1931, cbSceneParam._m0[60u].z, fma(_1927, cbSceneParam._m0[60u].y, _1923 * cbSceneParam._m0[60u].x))) / _2139;
        float _2141 = fma(_1935, cbSceneParam._m0[61u].w, fma(_1931, cbSceneParam._m0[61u].z, fma(_1927, cbSceneParam._m0[61u].y, _1923 * cbSceneParam._m0[61u].x))) / _2139;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2140 >= cbSceneParam._m0[64u].x) && (_2141 >= cbSceneParam._m0[64u].y)) && (_2140 <= cbSceneParam._m0[64u].z)) && (_2141 <= cbSceneParam._m0[64u].w))
        {
            float _2279 = fma(_1935, cbSceneParam._m0[62u].w, fma(_1931, cbSceneParam._m0[62u].z, fma(_1927, cbSceneParam._m0[62u].y, _1923 * cbSceneParam._m0[62u].x))) / _2139;
            float _2283 = isnan(cbSceneParam._m0[41u].w) ? _2279 : (isnan(_2279) ? cbSceneParam._m0[41u].w : max(_2279, cbSceneParam._m0[41u].w));
            float _2326 = (cbSceneParam._m0[33u].x - sqrt(((_1937 * _1937) + (_1936 * _1936)) + (_1938 * _1938))) * cbSceneParam._m0[33u].y;
            float _4429 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
            float _2333 = (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2140, cbSceneParam._m0[33u].w + _2141), _2283), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2140, _2141 - cbSceneParam._m0[33u].z), _2283), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2140 - cbSceneParam._m0[33u].z, _2141 - cbSceneParam._m0[33u].w), _2283), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2140 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2141), _2283), 0.0)).x), vec4(0.25)));
            float _2337 = 1.0 - (_2333 * cbSceneParam._m0[34u].x);
            float _2338 = 1.0 - (_2333 * cbSceneParam._m0[34u].y);
            float _2339 = 1.0 - (_2333 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2338) ? _2086 : (isnan(_2086) ? _2338 : min(_2086, _2338));
            frontier_phi_36_35_ladder_1 = isnan(_2339) ? _2087 : (isnan(_2087) ? _2339 : min(_2087, _2339));
            frontier_phi_36_35_ladder_2 = isnan(_2337) ? _2085 : (isnan(_2085) ? _2337 : min(_2085, _2337));
        }
        else
        {
            frontier_phi_36_35_ladder = _2086;
            frontier_phi_36_35_ladder_1 = _2087;
            frontier_phi_36_35_ladder_2 = _2085;
        }
        _2151 = frontier_phi_36_35_ladder_2;
        _2153 = frontier_phi_36_35_ladder;
        _2155 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2151 = _2085;
        _2153 = _2086;
        _2155 = _2087;
    }
    uvec4 _2160 = floatBitsToUint(cbInstanceData._m0[_758 + 5u]);
    uint _2162 = _2160.x * 14u;
    uint _2163 = _2162 + 13u;
    float _2170 = _866 + (-1.0);
    float _2175 = (cbLight._m0[_2163].x * _2170) + 1.0;
    float _2176 = (cbLight._m0[_2163].y * _2170) + 1.0;
    float _2177 = (cbLight._m0[_2163].z * _2170) + 1.0;
    float _2178 = (cbLight._m0[_2163].w * _2170) + 1.0;
    uint _2179 = _2162 + 5u;
    float _2185 = isnan(1.0) ? _2176 : (isnan(_2176) ? 1.0 : min(_2176, 1.0));
    uint _2189 = _2162 + 4u;
    float _2198 = isnan(1.0) ? _2175 : (isnan(_2175) ? 1.0 : min(_2175, 1.0));
    uint _2202 = _2162 | 1u;
    float _2213 = dot(vec3(cbLight._m0[_2162].xyz), vec3(_508, _509, _510));
    float _2216 = dot(vec3(cbLight._m0[_2202].xyz), vec3(_508, _509, _510));
    float _4465 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _4476 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2221 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * 0.3183098733425140380859375;
    float _2223 = (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * 0.3183098733425140380859375;
    float _2230 = ((cbLight._m0[_2179].x * _2185) * _2223) + (((cbLight._m0[_2189].x * _2151) * _2198) * _2221);
    float _2231 = ((_2185 * cbLight._m0[_2179].y) * _2223) + (((cbLight._m0[_2189].y * _2153) * _2198) * _2221);
    float _2232 = ((_2185 * cbLight._m0[_2179].z) * _2223) + (((cbLight._m0[_2189].z * _2155) * _2198) * _2221);
    uvec4 _2236 = floatBitsToUint(cbLight._m0[_2162 + 12u]);
    bool _2238 = _2236.x == 0u;
    float _2340;
    float _2342;
    float _2344;
    if (_2238)
    {
        _2340 = _2230;
        _2342 = _2231;
        _2344 = _2232;
    }
    else
    {
        uint _2348 = _2162 + 6u;
        float _2364 = (dot(vec3(cbLight._m0[_2162 + 2u].xyz), vec3(_508, _509, _510)) * 0.5) + 0.5;
        float _2365 = _2364 * _2364;
        float _4487 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2366 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _2367 = isnan(1.0) ? _2177 : (isnan(_2177) ? 1.0 : min(_2177, 1.0));
        _2340 = (((cbLight._m0[_2348].x * 0.3183098733425140380859375) * _2366) * _2367) + _2230;
        _2342 = (((cbLight._m0[_2348].y * 0.3183098733425140380859375) * _2366) * _2367) + _2231;
        _2344 = (((cbLight._m0[_2348].z * 0.3183098733425140380859375) * _2366) * _2367) + _2232;
    }
    bool _2347 = _2236.y == 0u;
    float _2402;
    float _2404;
    float _2406;
    if (_2347)
    {
        _2402 = _2340;
        _2404 = _2342;
        _2406 = _2344;
    }
    else
    {
        uint _2575 = _2162 + 7u;
        float _2591 = (dot(vec3(cbLight._m0[_2162 + 3u].xyz), vec3(_508, _509, _510)) * 0.5) + 0.5;
        float _2592 = _2591 * _2591;
        float _4503 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2593 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2594 = isnan(1.0) ? _2178 : (isnan(_2178) ? 1.0 : min(_2178, 1.0));
        _2402 = (((cbLight._m0[_2575].x * 0.3183098733425140380859375) * _2593) * _2594) + _2340;
        _2404 = (((cbLight._m0[_2575].y * 0.3183098733425140380859375) * _2593) * _2594) + _2342;
        _2406 = (((cbLight._m0[_2575].z * 0.3183098733425140380859375) * _2593) * _2594) + _2344;
    }
    uint _2409 = _2162 + 8u;
    float _2422 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2162].w)) * _734) * 0.949999988079071044921875);
    float _2423 = _2422 * _2422;
    float _2424 = cbLight._m0[_2162].x + _534;
    float _2425 = cbLight._m0[_2162].y + _535;
    float _2426 = cbLight._m0[_2162].z + _536;
    float _2430 = inversesqrt(dot(vec3(_2424, _2425, _2426), vec3(_2424, _2425, _2426)));
    float _2431 = _2430 * _2424;
    float _2432 = _2430 * _2425;
    float _2433 = _2430 * _2426;
    float _2434 = dot(vec3(_508, _509, _510), vec3(cbLight._m0[_2162].xyz));
    float _4519 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2437 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
    float _4530 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _2438 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
    float _2439 = dot(vec3(_508, _509, _510), vec3(_2431, _2432, _2433));
    float _4541 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _2442 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
    float _2443 = dot(vec3(cbLight._m0[_2162].xyz), vec3(_2431, _2432, _2433));
    float _4552 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2447 = _2423 * _2423;
    float _2451 = ((_2442 * _2442) * (_2447 + (-1.0))) + 1.0;
    float _2459 = exp2(log2(1.0 - (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0)))) * 5.0);
    float _2460 = 0.959999978542327880859375 - _849;
    float _2462 = 0.959999978542327880859375 - _850;
    float _2463 = 0.959999978542327880859375 - _851;
    float _2470 = 1.0 - _2423;
    float _2481 = (0.5 / (((_2438 * ((_2437 * _2470) + _2423)) + 9.9999999392252902907785028219223e-09) + (((_2438 * _2470) + _2423) * _2437))) * _2437;
    float _4563 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2483 = (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0))) * (_2447 / ((_2451 * _2451) * 3.141590118408203125));
    uint _2497 = _2162 + 9u;
    float _2508 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2202].w)) * _734) * 0.949999988079071044921875);
    float _2509 = _2508 * _2508;
    float _2510 = cbLight._m0[_2202].x + _534;
    float _2511 = cbLight._m0[_2202].y + _535;
    float _2512 = cbLight._m0[_2202].z + _536;
    float _2516 = inversesqrt(dot(vec3(_2510, _2511, _2512), vec3(_2510, _2511, _2512)));
    float _2517 = _2516 * _2510;
    float _2518 = _2516 * _2511;
    float _2519 = _2516 * _2512;
    float _2520 = dot(vec3(_508, _509, _510), vec3(cbLight._m0[_2202].xyz));
    float _4574 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2523 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
    float _2524 = dot(vec3(_508, _509, _510), vec3(_2517, _2518, _2519));
    float _4585 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
    float _2527 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
    float _2528 = dot(vec3(cbLight._m0[_2202].xyz), vec3(_2517, _2518, _2519));
    float _4596 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
    float _2532 = _2509 * _2509;
    float _2536 = ((_2527 * _2527) * (_2532 + (-1.0))) + 1.0;
    float _2543 = exp2(log2(1.0 - (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0)))) * 5.0);
    float _2550 = 1.0 - _2509;
    float _2560 = (0.5 / (((_2438 * ((_2523 * _2550) + _2509)) + 9.9999999392252902907785028219223e-09) + (((_2438 * _2550) + _2509) * _2523))) * _2523;
    float _4607 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
    float _2562 = (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2532 / ((_2536 * _2536) * 3.141590118408203125));
    float _2572 = (((((_2543 * _2460) + _852) * cbLight._m0[_2497].x) * _2562) * _2185) + ((((cbLight._m0[_2409].x * _2151) * ((_2459 * _2460) + _852)) * _2483) * _2198);
    float _2573 = (((((_2543 * _2462) + _853) * cbLight._m0[_2497].y) * _2562) * _2185) + ((((cbLight._m0[_2409].y * _2153) * ((_2459 * _2462) + _853)) * _2483) * _2198);
    float _2574 = (((((_2543 * _2463) + _854) * cbLight._m0[_2497].z) * _2562) * _2185) + ((((cbLight._m0[_2409].z * _2155) * ((_2459 * _2463) + _854)) * _2483) * _2198);
    float _2630;
    float _2632;
    float _2634;
    if (_2238)
    {
        _2630 = _2572;
        _2632 = _2573;
        _2634 = _2574;
    }
    else
    {
        uint _2636 = _2162 + 2u;
        uint _2640 = _2162 + 10u;
        float _2654 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2636].w)) * _734) * 0.949999988079071044921875);
        float _2655 = _2654 * _2654;
        float _2656 = cbLight._m0[_2636].x + _534;
        float _2657 = cbLight._m0[_2636].y + _535;
        float _2658 = cbLight._m0[_2636].z + _536;
        float _2662 = inversesqrt(dot(vec3(_2656, _2657, _2658), vec3(_2656, _2657, _2658)));
        float _2663 = _2662 * _2656;
        float _2664 = _2662 * _2657;
        float _2665 = _2662 * _2658;
        float _2666 = dot(vec3(_508, _509, _510), vec3(cbLight._m0[_2636].xyz));
        float _4618 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2669 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
        float _2670 = dot(vec3(_508, _509, _510), vec3(_2663, _2664, _2665));
        float _4629 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2673 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
        float _2674 = dot(vec3(cbLight._m0[_2636].xyz), vec3(_2663, _2664, _2665));
        float _4640 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2678 = _2655 * _2655;
        float _2682 = ((_2673 * _2673) * (_2678 + (-1.0))) + 1.0;
        float _2689 = exp2(log2(1.0 - (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0)))) * 5.0);
        float _2696 = 1.0 - _2655;
        float _2706 = (0.5 / (((_2438 * ((_2669 * _2696) + _2655)) + 9.9999999392252902907785028219223e-09) + (((_2438 * _2696) + _2655) * _2669))) * _2669;
        float _4651 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2708 = (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (_2678 / ((_2682 * _2682) * 3.141590118408203125));
        float _2709 = isnan(1.0) ? _2177 : (isnan(_2177) ? 1.0 : min(_2177, 1.0));
        _2630 = (((((_2689 * _2460) + _852) * cbLight._m0[_2640].x) * _2708) * _2709) + _2572;
        _2632 = (((((_2689 * _2462) + _853) * cbLight._m0[_2640].y) * _2708) * _2709) + _2573;
        _2634 = (((((_2689 * _2463) + _854) * cbLight._m0[_2640].z) * _2708) * _2709) + _2574;
    }
    float _2740;
    float _2742;
    float _2744;
    if (_2347)
    {
        _2740 = _2630;
        _2742 = _2632;
        _2744 = _2634;
    }
    else
    {
        uint _2751 = _2162 + 3u;
        uint _2755 = _2162 + 11u;
        float _2769 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2751].w)) * _734) * 0.949999988079071044921875);
        float _2770 = _2769 * _2769;
        float _2771 = cbLight._m0[_2751].x + _534;
        float _2772 = cbLight._m0[_2751].y + _535;
        float _2773 = cbLight._m0[_2751].z + _536;
        float _2777 = inversesqrt(dot(vec3(_2771, _2772, _2773), vec3(_2771, _2772, _2773)));
        float _2778 = _2777 * _2771;
        float _2779 = _2777 * _2772;
        float _2780 = _2777 * _2773;
        float _2781 = dot(vec3(_508, _509, _510), vec3(cbLight._m0[_2751].xyz));
        float _4667 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
        float _2784 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
        float _2785 = dot(vec3(_508, _509, _510), vec3(_2778, _2779, _2780));
        float _4678 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        float _2788 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
        float _2789 = dot(vec3(cbLight._m0[_2751].xyz), vec3(_2778, _2779, _2780));
        float _4689 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        float _2793 = _2770 * _2770;
        float _2797 = ((_2788 * _2788) * (_2793 + (-1.0))) + 1.0;
        float _2804 = exp2(log2(1.0 - (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0)))) * 5.0);
        float _2811 = 1.0 - _2770;
        float _2821 = (0.5 / (((_2438 * ((_2784 * _2811) + _2770)) + 9.9999999392252902907785028219223e-09) + (((_2438 * _2811) + _2770) * _2784))) * _2784;
        float _4700 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        float _2823 = (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0))) * (_2793 / ((_2797 * _2797) * 3.141590118408203125));
        float _2824 = isnan(1.0) ? _2178 : (isnan(_2178) ? 1.0 : min(_2178, 1.0));
        _2740 = (((((_2804 * _2460) + _852) * cbLight._m0[_2755].x) * _2823) * _2824) + _2630;
        _2742 = (((((_2804 * _2462) + _853) * cbLight._m0[_2755].y) * _2823) * _2824) + _2632;
        _2744 = (((((_2804 * _2463) + _854) * cbLight._m0[_2755].z) * _2823) * _2824) + _2634;
    }
    float _2889;
    float _2891;
    float _2893;
    float _2895;
    float _2897;
    float _2899;
    if (_2160.y == 0u)
    {
        uvec4 _2845 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2846 = _2845.x;
        uint _2857 = uint((float(_2845.y) * floor(float(uint(cbSceneParam._m0[85u].y * _655) / _2846))) + floor(float(uint(cbSceneParam._m0[85u].x * _654) / _2846)));
        float _2867 = (log2(_1938 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2868 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
        uint _2871 = uint(isnan(14.0) ? _2868 : (isnan(_2868) ? 14.0 : min(_2868, 14.0)));
        uvec4 _2876 = texelFetch(g_lightClusterGridBuffer, int(((_2871 << 2u) + (_2857 << 6u)) >> 2u));
        uint _2877 = _2876.x;
        uint _2878 = _2845.z;
        float _2982;
        float _2984;
        float _2986;
        float _2988;
        float _2990;
        float _2992;
        if (((((1u << ((_2878 >> 4u) & 15u)) + 4294967295u) & _2877) == 0u) || ((_2878 & 240u) == 0u))
        {
            _2982 = 0.0;
            _2984 = 0.0;
            _2986 = 0.0;
            _2988 = 0.0;
            _2990 = 0.0;
            _2992 = 0.0;
        }
        else
        {
            float _2983;
            float _2985;
            float _2987;
            float _2989;
            float _2991;
            float _2993;
            float _3135 = 0.0;
            float _3136 = 0.0;
            float _3137 = 0.0;
            float _3138 = 0.0;
            float _3139 = 0.0;
            float _3140 = 0.0;
            uint _3141 = 0u;
            uint _3150;
            bool _3151;
            for (;;)
            {
                _3150 = texelFetch(g_lightClassification, int((((_2871 << 5u) + (_2857 << 9u)) + (_3141 << 2u)) >> 2u)).x;
                _3151 = _3150 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3151)
                {
                    frontier_phi_68_pred = _3140;
                    frontier_phi_68_pred_1 = _3139;
                    frontier_phi_68_pred_2 = _3138;
                    frontier_phi_68_pred_3 = _3136;
                    frontier_phi_68_pred_4 = _3135;
                    frontier_phi_68_pred_5 = _3137;
                }
                else
                {
                    float _3259;
                    float _3260;
                    float _3261;
                    float _3262;
                    float _3263;
                    float _3264;
                    uint _3265;
                    _3259 = _3135;
                    _3260 = _3136;
                    _3261 = _3137;
                    _3262 = _3138;
                    _3263 = _3139;
                    _3264 = _3140;
                    _3265 = _3150;
                    float _3191;
                    float _3192;
                    float _3193;
                    float _3194;
                    float _3195;
                    float _3196;
                    for (;;)
                    {
                        uint _3269 = uint(findLSB(_3265)) + (_3141 << 5u);
                        uint _3266 = (_3265 + 4294967295u) & _3265;
                        uint _3271 = _3269 * 48u;
                        vec4 _3285 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3271)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 3u)).x));
                        uint _3291 = (_3269 * 48u) + 4u;
                        vec4 _3304 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3291)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 3u)).x));
                        uint _3310 = (_3269 * 48u) + 8u;
                        vec3 _3321 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3310)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 2u)).x));
                        float _3325 = _3285.x - _1936;
                        float _3326 = _3285.y - _1937;
                        float _3327 = _3285.z - _1938;
                        float _3328 = dot(vec3(_3325, _3326, _3327), vec3(_3325, _3326, _3327));
                        float _3331 = inversesqrt(_3328);
                        float _3332 = _3331 * _3325;
                        float _3333 = _3331 * _3326;
                        float _3334 = _3331 * _3327;
                        float _3335 = dot(vec3(_678, _681, _684), vec3(_3332, _3333, _3334));
                        float _3340 = 1.0 - (_3328 * _3285.w);
                        float _4726 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                        float _3341 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                        float _3342 = sqrt(_3328) * _3304.w;
                        float _3345 = 1.39999997615814208984375 / (_3342 + 1.39999997615814208984375);
                        float _3346 = _3345 * _3345;
                        float _3349 = ((1.0 - _3346) * _3335) + _3346;
                        float _3352 = _3342 * _3342;
                        float _3355 = ((isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0))) * _3341) / ((_3352 * 0.699999988079071044921875) + 1.0);
                        float _3359 = (-0.0) - _1936;
                        float _3360 = (-0.0) - _1937;
                        float _3361 = (-0.0) - _1938;
                        float _3365 = inversesqrt(dot(vec3(_3359, _3360, _3361), vec3(_3359, _3360, _3361)));
                        float _3366 = _3365 * _3359;
                        float _3367 = _3365 * _3360;
                        float _3368 = _3365 * _3361;
                        float _3375 = exp2(log2(1.0 / ((_3352 * 3.5) + 5.0)) * 0.25);
                        float _3376 = 1.0 - _876;
                        float _3383 = sqrt(1.0 - ((1.0 - (_3376 * _3376)) * (1.0 - (_3375 * _3375))));
                        float _3384 = _3383 * _3383;
                        float _3385 = _3384 * _3384;
                        float _3386 = _3366 + _3332;
                        float _3387 = _3367 + _3333;
                        float _3388 = _3368 + _3334;
                        float _3392 = inversesqrt(dot(vec3(_3386, _3387, _3388), vec3(_3386, _3387, _3388)));
                        float _3396 = dot(vec3(_678, _681, _684), vec3(_3366, _3367, _3368));
                        float _4742 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                        float _3399 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                        float _3400 = dot(vec3(_678, _681, _684), vec3(_3392 * _3386, _3392 * _3387, _3392 * _3388));
                        float _4753 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                        float _3403 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                        float _3407 = ((_3403 * _3403) * (_3385 + (-1.0))) + 1.0;
                        float _3408 = _3345 * _3384;
                        float _3409 = _3408 * _3408;
                        float _3412 = ((1.0 - _3409) * _3335) + _3409;
                        float _4764 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                        float _3413 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                        float _3414 = 1.0 - _3384;
                        float _3424 = (0.5 / (((_3413 * ((_3399 * _3414) + _3384)) + 9.9999999392252902907785028219223e-09) + (((_3413 * _3414) + _3384) * _3399))) * _3413;
                        float _4775 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                        float _3435 = (((_3385 * 3.1415927410125732421875) * (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0)))) / ((_3407 * _3407) * ((_3352 * 2.1991131305694580078125) + 3.141590118408203125))) * _3341;
                        _3194 = (_3355 * _3304.x) + _3262;
                        _3195 = (_3355 * _3304.y) + _3263;
                        _3196 = (_3355 * _3304.z) + _3264;
                        _3191 = (_3435 * _3321.x) + _3259;
                        _3192 = (_3435 * _3321.y) + _3260;
                        _3193 = (_3435 * _3321.z) + _3261;
                        if (_3266 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3259 = _3191;
                            _3260 = _3192;
                            _3261 = _3193;
                            _3262 = _3194;
                            _3263 = _3195;
                            _3264 = _3196;
                            _3265 = _3266;
                        }
                    }
                    frontier_phi_68_pred = _3196;
                    frontier_phi_68_pred_1 = _3195;
                    frontier_phi_68_pred_2 = _3194;
                    frontier_phi_68_pred_3 = _3192;
                    frontier_phi_68_pred_4 = _3191;
                    frontier_phi_68_pred_5 = _3193;
                }
                _2993 = frontier_phi_68_pred;
                _2991 = frontier_phi_68_pred_1;
                _2989 = frontier_phi_68_pred_2;
                _2985 = frontier_phi_68_pred_3;
                _2983 = frontier_phi_68_pred_4;
                _2987 = frontier_phi_68_pred_5;
                uint _3142 = _3141 + 1u;
                if (_3142 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3135 = _2983;
                    _3136 = _2985;
                    _3137 = _2987;
                    _3138 = _2989;
                    _3139 = _2991;
                    _3140 = _2993;
                    _3141 = _3142;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2982 = _2983;
            _2984 = _2985;
            _2986 = _2987;
            _2988 = _2989;
            _2990 = _2991;
            _2992 = _2993;
        }
        uvec4 _2996 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2997 = _2996.z;
        uint _2999 = (_2997 >> 8u) & 15u;
        float _3103;
        float _3105;
        float _3107;
        float _3109;
        float _3111;
        float _3113;
        if (((4294967295u << _2999) & _2877) == 0u)
        {
            _3103 = _2982;
            _3105 = _2984;
            _3107 = _2986;
            _3109 = _2988;
            _3111 = _2990;
            _3113 = _2992;
        }
        else
        {
            float _3128 = inversesqrt(dot(vec3(_1936, _1937, _1938), vec3(_1936, _1937, _1938)));
            float _3129 = _3128 * _1936;
            float _3130 = _3128 * _1937;
            float _3131 = _3128 * _1938;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2999 < ((_2997 >> 12u) & 15u))
            {
                float _3104;
                float _3106;
                float _3108;
                float _3110;
                float _3112;
                float _3114;
                float _3242 = _2982;
                float _3243 = _2984;
                float _3244 = _2986;
                float _3245 = _2988;
                float _3246 = _2990;
                float _3247 = _2992;
                uint _3248 = _2999;
                uint _3257;
                bool _3258;
                for (;;)
                {
                    _3257 = texelFetch(g_lightClassification, int((((_2871 << 5u) + (_2857 << 9u)) + (_3248 << 2u)) >> 2u)).x;
                    _3258 = _3257 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3258)
                    {
                        frontier_phi_74_pred = _3244;
                        frontier_phi_74_pred_1 = _3243;
                        frontier_phi_74_pred_2 = _3242;
                        frontier_phi_74_pred_3 = _3247;
                        frontier_phi_74_pred_4 = _3246;
                        frontier_phi_74_pred_5 = _3245;
                    }
                    else
                    {
                        float _3440;
                        float _3441;
                        float _3442;
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3735;
                        float _3736;
                        float _3737;
                        float _3738;
                        float _3739;
                        float _3740;
                        float _3453 = _3242;
                        float _3454 = _3243;
                        float _3455 = _3244;
                        float _3456 = _3245;
                        float _3457 = _3246;
                        float _3458 = _3247;
                        uint _3459 = _3257;
                        uint _3460;
                        vec4 _3485;
                        float _3486;
                        vec4 _3501;
                        vec3 _3513;
                        vec4 _3528;
                        vec4 _3544;
                        float _3591;
                        bool _3592;
                        for (;;)
                        {
                            uint _3470 = ((_3248 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3459));
                            _3460 = (_3459 + 4294967295u) & _3459;
                            uint _3472 = _3470 * 40u;
                            _3485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 3u)).x));
                            _3486 = _3485.w;
                            uint _3488 = (_3470 * 40u) + 4u;
                            _3501 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3488)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 3u)).x));
                            uint _3503 = (_3470 * 40u) + 8u;
                            _3513 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x));
                            uint _3515 = (_3470 * 40u) + 16u;
                            _3528 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 3u)).x));
                            uint _3531 = (_3470 * 40u) + 20u;
                            _3544 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 3u)).x));
                            uint _3547 = (_3470 * 40u) + 24u;
                            vec4 _3560 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 3u)).x));
                            uint _3566 = (_3470 * 40u) + 28u;
                            vec4 _3579 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 3u)).x));
                            _3591 = fma(_1938, _3579.z, fma(_1937, _3579.y, _3579.x * _1936)) + _3579.w;
                            _3592 = !((fma(_1938, _3560.z, fma(_1937, _3560.y, _3560.x * _1936)) + _3560.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3592)
                            {
                                float _3619 = _3485.x - _1936;
                                float _3620 = _3485.y - _1937;
                                float _3621 = _3485.z - _1938;
                                float _3622 = dot(vec3(_3619, _3620, _3621), vec3(_3619, _3620, _3621));
                                float _3625 = inversesqrt(_3622);
                                float _3626 = _3625 * _3619;
                                float _3627 = _3625 * _3620;
                                float _3628 = _3625 * _3621;
                                float _3632 = 1.0 - (_3622 / (_3486 * _3486));
                                float _4786 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                                float _3633 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                                float _3637 = sqrt(_3622) * _3501.w;
                                float _3639 = 1.39999997615814208984375 / (_3637 + 1.39999997615814208984375);
                                float _3640 = _3639 * _3639;
                                float _3643 = ((1.0 - _3640) * dot(vec3(_3626, _3627, _3628), vec3(_678, _681, _684))) + _3640;
                                float _3646 = _3637 * _3637;
                                float _3650 = (fma(_1938, _3528.z, fma(_1937, _3528.y, _3528.x * _1936)) + _3528.w) / _3591;
                                float _3651 = (fma(_1938, _3544.z, fma(_1937, _3544.y, _3544.x * _1936)) + _3544.w) / _3591;
                                float _3655 = 1.0 - dot(vec2(_3650, _3651), vec2(_3650, _3651));
                                float _4802 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                                float _3656 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                                float _3657 = _3656 * (((isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0))) * _3633) / ((_3646 * 0.699999988079071044921875) + 1.0));
                                float _3669 = exp2(log2(1.0 / ((_3646 * 3.5) + 5.0)) * 0.25);
                                float _3670 = 1.0 - _876;
                                float _3677 = sqrt(1.0 - ((1.0 - (_3670 * _3670)) * (1.0 - (_3669 * _3669))));
                                float _3678 = _3677 * _3677;
                                float _3679 = _3678 * _3678;
                                float _3680 = _3626 - _3129;
                                float _3681 = _3627 - _3130;
                                float _3682 = _3628 - _3131;
                                float _3686 = inversesqrt(dot(vec3(_3680, _3681, _3682), vec3(_3680, _3681, _3682)));
                                float _3690 = dot(vec3(_678, _681, _684), vec3((-0.0) - _3129, (-0.0) - _3130, (-0.0) - _3131));
                                float _4813 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0));
                                float _3693 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
                                float _3694 = dot(vec3(_678, _681, _684), vec3(_3686 * _3680, _3686 * _3681, _3686 * _3682));
                                float _4824 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                                float _3697 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                                float _3701 = ((_3697 * _3697) * (_3679 + (-1.0))) + 1.0;
                                float _3702 = _3639 * _3678;
                                float _3703 = _3702 * _3702;
                                float _3709 = ((1.0 - _3703) * dot(vec3(_678, _681, _684), vec3(_3626, _3627, _3628))) + _3703;
                                float _4835 = isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0));
                                float _3710 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                                float _3711 = 1.0 - _3678;
                                float _3721 = (0.5 / (((_3710 * ((_3693 * _3711) + _3678)) + 9.9999999392252902907785028219223e-09) + (((_3710 * _3711) + _3678) * _3693))) * _3710;
                                float _4846 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3731 = (_3656 * _3633) * (((_3679 * 3.1415927410125732421875) * (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0)))) / ((_3701 * _3701) * ((_3646 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3731 * _3513.z;
                                frontier_phi_80_pred_1 = _3731 * _3513.y;
                                frontier_phi_80_pred_2 = _3731 * _3513.x;
                                frontier_phi_80_pred_3 = _3657 * _3501.z;
                                frontier_phi_80_pred_4 = _3657 * _3501.y;
                                frontier_phi_80_pred_5 = _3657 * _3501.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3737 = frontier_phi_80_pred;
                            _3736 = frontier_phi_80_pred_1;
                            _3735 = frontier_phi_80_pred_2;
                            _3740 = frontier_phi_80_pred_3;
                            _3739 = frontier_phi_80_pred_4;
                            _3738 = frontier_phi_80_pred_5;
                            _3443 = _3738 + _3456;
                            _3444 = _3739 + _3457;
                            _3445 = _3740 + _3458;
                            _3440 = _3735 + _3453;
                            _3441 = _3736 + _3454;
                            _3442 = _3737 + _3455;
                            if (_3460 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3453 = _3440;
                                _3454 = _3441;
                                _3455 = _3442;
                                _3456 = _3443;
                                _3457 = _3444;
                                _3458 = _3445;
                                _3459 = _3460;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3442;
                        frontier_phi_74_pred_1 = _3441;
                        frontier_phi_74_pred_2 = _3440;
                        frontier_phi_74_pred_3 = _3445;
                        frontier_phi_74_pred_4 = _3444;
                        frontier_phi_74_pred_5 = _3443;
                    }
                    _3108 = frontier_phi_74_pred;
                    _3106 = frontier_phi_74_pred_1;
                    _3104 = frontier_phi_74_pred_2;
                    _3114 = frontier_phi_74_pred_3;
                    _3112 = frontier_phi_74_pred_4;
                    _3110 = frontier_phi_74_pred_5;
                    uint _3249 = _3248 + 1u;
                    if (_3249 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3242 = _3104;
                        _3243 = _3106;
                        _3244 = _3108;
                        _3245 = _3110;
                        _3246 = _3112;
                        _3247 = _3114;
                        _3248 = _3249;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3112;
                frontier_phi_62_63_ladder_1 = _3110;
                frontier_phi_62_63_ladder_2 = _3108;
                frontier_phi_62_63_ladder_3 = _3114;
                frontier_phi_62_63_ladder_4 = _3106;
                frontier_phi_62_63_ladder_5 = _3104;
            }
            else
            {
                frontier_phi_62_63_ladder = _2990;
                frontier_phi_62_63_ladder_1 = _2988;
                frontier_phi_62_63_ladder_2 = _2986;
                frontier_phi_62_63_ladder_3 = _2992;
                frontier_phi_62_63_ladder_4 = _2984;
                frontier_phi_62_63_ladder_5 = _2982;
            }
            _3103 = frontier_phi_62_63_ladder_5;
            _3105 = frontier_phi_62_63_ladder_4;
            _3107 = frontier_phi_62_63_ladder_2;
            _3109 = frontier_phi_62_63_ladder_1;
            _3111 = frontier_phi_62_63_ladder;
            _3113 = frontier_phi_62_63_ladder_3;
        }
        float _3118 = isnan(1.0) ? _866 : (isnan(_866) ? 1.0 : min(_866, 1.0));
        _2889 = (_3118 * _3109) + _2402;
        _2891 = (_3118 * _3111) + _2404;
        _2893 = (_3118 * _3113) + _2406;
        _2895 = ((_3103 * _852) * _3118) + _2740;
        _2897 = ((_3105 * _853) * _3118) + _2742;
        _2899 = ((_3107 * _854) * _3118) + _2744;
    }
    else
    {
        _2889 = _2402;
        _2891 = _2404;
        _2893 = _2406;
        _2895 = _2740;
        _2897 = _2742;
        _2899 = _2744;
    }
    uint _2905 = _759 + uint(cbMatDynParam._m0[0u].w);
    float _2911 = cbInstanceData._m0[_2905].x * ((((cbMatDynParam._m0[8u].x - cbMatDynParam._m0[7u].x) * _550) + cbMatDynParam._m0[7u].x) + (((_591 - (_591 * _516)) + (cbMatDynParam._m0[11u].x * _622)) * cbMatDynParam._m0[9u].x));
    float _2912 = cbInstanceData._m0[_2905].y * ((((cbMatDynParam._m0[8u].y - cbMatDynParam._m0[7u].y) * _550) + cbMatDynParam._m0[7u].y) + (((_593 - (_593 * _516)) + (cbMatDynParam._m0[11u].y * _622)) * cbMatDynParam._m0[9u].y));
    float _2913 = cbInstanceData._m0[_2905].z * ((((cbMatDynParam._m0[8u].z - cbMatDynParam._m0[7u].z) * _550) + cbMatDynParam._m0[7u].z) + (((_595 - (_595 * _516)) + (cbMatDynParam._m0[11u].z * _622)) * cbMatDynParam._m0[9u].z));
    float _4862 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _4873 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _4884 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _4895 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _2931 = (((isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0))) * (_2889 + ((isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))) * _866))) + ((_2895 + ((isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))) * _1666)) * cbPerFrame._m0[3u].x)) + _2911;
    float _2933 = (_2912 + ((_2897 + ((isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))) * _1666)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0))) * (_2891 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _866)));
    float _2935 = (_2913 + ((_2899 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1666)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0))) * (_2893 + ((isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))) * _866)));
    float _2943 = cbMatDynParam._m0[12u].y - (cbMatDynParam._m0[12u].y * ((((isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) - _577) * _550) + _577));
    float _2948 = cbInstanceData._m0[_758 + 6u].w * (isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0)));
    float _2953 = _654 / cbSceneParam._m0[86u].x;
    float _2954 = _655 / cbSceneParam._m0[86u].y;
    vec4 _2968 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2953, _2954, (log2((isnan(cbSceneParam._m0[77u].w) ? _648 : (isnan(_648) ? cbSceneParam._m0[77u].w : min(_648, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2970 = _2968.x;
    float _2971 = _2968.y;
    float _2972 = _2968.z;
    float _2973 = _2968.w;
    float _3044;
    float _3046;
    float _3048;
    float _3050;
    if (_648 > cbSceneParam._m0[78u].w)
    {
        float _3007 = isnan(_648) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _648 : min(cbSceneParam._m0[80u].w, _648));
        float _3008 = _3007 / _648;
        float _3019 = _3008 * _287;
        float _3020 = _288 * _3008;
        float _3021 = (-0.0) - _3020;
        float _3022 = _3008 * _289;
        float _3024 = (cbSceneParam._m0[77u].w * _3021) / _3007;
        float _3025 = _3024 + cbSceneParam._m0[79u].w;
        float _3026 = cbSceneParam._m0[79u].w - _3020;
        float _3032 = sqrt(((_3019 * _3019) + (_3020 * _3020)) + (_3022 * _3022));
        float _3035 = (1.0 - (cbSceneParam._m0[77u].w / _3007)) * _3032;
        float _3040 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3042 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3204;
        if (abs((_3021 - _3024) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3204 = ((((_3025 > 0.0) ? exp2(_3040 * _3025) : (2.0 - exp2(_3042 * _3025))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3035;
        }
        else
        {
            float _3164 = 1.0 / cbSceneParam._m0[80u].x;
            float _3165 = isnan(_3026) ? _3025 : (isnan(_3025) ? _3026 : max(_3025, _3026));
            float _3166 = isnan(_3026) ? _3025 : (isnan(_3025) ? _3026 : min(_3025, _3026));
            float _3175 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : min(_3165, 0.0));
            float _3176 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : min(_3166, 0.0));
            _3204 = ((abs(_3032 / _3021) * cbSceneParam._m0[80u].y) * ((((_3175 - _3176) * 2.0) - ((exp2(_3040 * (isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0)))) - exp2(_3040 * (isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0))))) * _3164)) - ((exp2(_3042 * _3175) - exp2(_3042 * _3176)) * _3164))) + (_3035 * cbSceneParam._m0[80u].z);
        }
        vec4 _3206 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2953, _2954, 1.0), 0.0);
        float _3215 = exp2((_3204 * (-1.44269502162933349609375)) * (1.0 - _3206.w));
        float _3216 = log2(_3215);
        float _3232 = log2(_2973);
        _3044 = (exp2(_3232 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3216 * cbSceneParam._m0[78u].x)) * _3206.x) / cbSceneParam._m0[78u].x)) + _2970;
        _3046 = (exp2(_3232 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3216 * cbSceneParam._m0[78u].y)) * _3206.y) / cbSceneParam._m0[78u].y)) + _2971;
        _3048 = (exp2(_3232 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3216 * cbSceneParam._m0[78u].z)) * _3206.z) / cbSceneParam._m0[78u].z)) + _2972;
        _3050 = _3215 * _2973;
    }
    else
    {
        _3044 = _2970;
        _3046 = _2971;
        _3048 = _2972;
        _3050 = _2973;
    }
    float _3062 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3063 = _3062 == 3.0;
    float _3064 = log2(_3050);
    float _3068 = exp2(_3064 * cbSceneParam._m0[78u].x);
    float _3069 = exp2(_3064 * cbSceneParam._m0[78u].y);
    float _3070 = exp2(_3064 * cbSceneParam._m0[78u].z);
    float _3071 = _3068 * (isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0)));
    float _3072 = _3069 * (isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0)));
    float _3073 = _3070 * (isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0)));
    float _3082 = (_3062 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3082 * (_3063 ? _3071 : (_3071 + (cbSceneParam._m0[72u].w * _3044)));
    SV_Target.y = _3082 * (_3063 ? _3072 : (_3072 + (cbSceneParam._m0[72u].w * _3046)));
    SV_Target.z = _3082 * (_3063 ? _3073 : (_3073 + (cbSceneParam._m0[72u].w * _3048)));
    SV_Target.w = _2948;
    SV_Target_1.x = ((_2943 * _2911) * _3068) * _3082;
    SV_Target_1.y = ((_2943 * _2912) * _3069) * _3082;
    SV_Target_1.z = ((_2943 * _2913) * _3070) * _3082;
    SV_Target_1.w = _2948;
}


