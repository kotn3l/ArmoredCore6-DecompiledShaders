#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1095;
float _3795;
float _3796;
float _3797;
float _3798;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _251 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _257 = _251.x * cbMtdParam._m0[9u].x;
    float _258 = _251.y * cbMtdParam._m0[9u].y;
    float _259 = _251.z * cbMtdParam._m0[9u].z;
    vec4 _282 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _302 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _305 = _302.x + 0.00999999977648258209228515625;
    float _313 = (TEXCOORD_8 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_8)) * _305)) * (cbMtdParam._m0[15u].z + 1.0);
    float _3807 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _314 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _321 = (_314 * ((_282.x * cbMtdParam._m0[12u].x) - _257)) + _257;
    float _322 = (_314 * ((_282.y * cbMtdParam._m0[12u].y) - _258)) + _258;
    float _323 = (_314 * ((_282.z * cbMtdParam._m0[12u].z) - _259)) + _259;
    vec4 _335 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    vec4 _358 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _362 = _358.z;
    float _365 = (_358.x * 2.0) + (-1.0);
    float _366 = (_358.y * 2.0) + (-1.0);
    float _367 = dot(vec2(_365, _366), vec2(_365, _366));
    float _3818 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _372 = sqrt(1.0 - (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))));
    float _380 = (((_335.z - _362) * TEXCOORD_8) * cbMtdParam._m0[16u].x) + _362;
    vec4 _414 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _428 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3829 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _429 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _437 = (((_429 * _429) * (3.0 - (_429 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _446 = cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x;
    float _454 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3840 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _459 = (_455 * _455) * (3.0 - (_455 * 2.0));
    float _460 = _459 * cbMtdParam._m0[16u].w;
    float _461 = _459 * cbMtdParam._m0[17u].x;
    float _462 = sin(_446);
    float _463 = cos(_446);
    float _464 = TEXCOORD.z - _460;
    float _465 = TEXCOORD.w - _461;
    vec4 _485 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_460 + fma(_465, (-0.0) - _462, _464 * _463))) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (fma(_465, _463, _464 * _462) + _461)) + cbTextureTilingScale._m0[0u].w));
    float _491 = (cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].w) * _485.x;
    float _493 = (cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].w) * _485.y;
    float _495 = (cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].w) * _485.z;
    float _511 = (TEXCOORD_5.x - ((_305 * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[16u].z)) * (cbMtdParam._m0[13u].x + 1.0);
    float _3851 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _512 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _518 = ((((_335.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[15u].x) + _365;
    float _519 = ((((_335.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[15u].x) + _366;
    float _522 = fma(_372, _222 * NORMAL.x, fma(_519, _229 * TANGENT.x, (_215 * _207) * _518));
    float _525 = fma(_372, _222 * NORMAL.y, fma(_519, _229 * TANGENT.y, (_215 * _208) * _518));
    float _528 = fma(_372, _222 * NORMAL.z, fma(_519, _229 * TANGENT.z, (_215 * _209) * _518));
    float _532 = inversesqrt(dot(vec3(_522, _525, _528), vec3(_522, _525, _528)));
    float _533 = _532 * _522;
    float _534 = _532 * _525;
    float _535 = _532 * _528;
    float _3862 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _536 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
    float _3873 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _3884 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _3895 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _555 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _596 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _606 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _596);
    float _607 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _596);
    float _608 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _596);
    float _612 = inversesqrt(dot(vec3(_606, _607, _608), vec3(_606, _607, _608)));
    float _613 = _606 * _612;
    float _614 = _607 * _612;
    float _615 = _608 * _612;
    vec4 _620 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _622 = _620.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _775 = sqrt(((_606 * _606) + (_607 * _607)) + (_608 * _608));
        float _781 = (cbMatDynParam._m0[5u].x * _775) + cbMatDynParam._m0[5u].y;
        float _3906 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _782 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _786 = (cbMatDynParam._m0[5u].z * _775) + cbMatDynParam._m0[5u].w;
        float _3917 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) - _782)) + _782) < ((_622 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _633 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _634 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _652 = fma(_535, cbSceneParam._m0[5u].z, fma(_534, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _533));
    float _655 = fma(_535, cbSceneParam._m0[6u].z, fma(_534, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _533));
    float _658 = fma(_535, cbSceneParam._m0[7u].z, fma(_534, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _533));
    uint _671 = uint(roundEven(NORMAL.w)) * 13u;
    uint _672 = _671 + 9u;
    uint _673 = _672 + uint(cbMatDynParam._m0[0u].w);
    float _679 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0)))) * cbInstanceData._m0[_673].x;
    float _680 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0)))) * cbInstanceData._m0[_673].y;
    float _681 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) * cbInstanceData._m0[_673].z;
    float _3928 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _682 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _3939 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _683 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _3950 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _684 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    vec4 _693 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _633, cbSceneParam._m0[86u].y * _634));
    float _696 = _693.x * TEXCOORD_5.w;
    float _697 = dot(vec3(_533, _534, _535), vec3(_613, _614, _615));
    float _700 = _697 * 2.0;
    float _704 = (_700 * _533) - _613;
    float _705 = (_700 * _534) - _614;
    float _706 = (_700 * _535) - _615;
    float _710 = abs(dot(vec3(_613, _614, _615), vec3(_533, _534, _535)));
    float _3961 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _712 = sqrt(_536);
    float _724 = exp2((_712 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_712 * 3.0));
    float _756 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _760 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _764 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1094;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _819 = fma(_764, cbModelParam._m0[26u].z, fma(_760, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _756));
        float _823 = fma(_764, cbModelParam._m0[27u].z, fma(_760, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _756));
        float _827 = fma(_764, cbModelParam._m0[28u].z, fma(_760, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _756));
        float _852 = _756 + _533;
        float _853 = _760 + _534;
        float _854 = _764 + _535;
        float _864 = fma(_854, cbModelParam._m0[26u].z, fma(_853, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _852)) - _819;
        float _865 = fma(_854, cbModelParam._m0[27u].z, fma(_853, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _852)) - _823;
        float _866 = fma(_854, cbModelParam._m0[28u].z, fma(_853, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _852)) - _827;
        float _870 = inversesqrt(dot(vec3(_864, _865, _866), vec3(_864, _865, _866)));
        float _883 = ((_870 * _864) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_819 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _884 = ((_870 * _865) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_823 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _885 = ((_870 * _866) / cbModelParam._m0[34u].z) + ((((((_827 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _888 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_883, _884, _885), 0.0);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_883, _884, _885), 0.0);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_883, _884, _885), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_883, _884, _885), 0.0);
        float _922 = exp2((_888.w + (-0.5)) * 20.0) * 2.0;
        float _923 = _922 * (_888.x + (-0.5));
        float _924 = _922 * (_888.y + (-0.5));
        float _925 = _922 * (_888.z + (-0.5));
        float _932 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _933 = _932 * (_895.x + (-0.5));
        float _934 = _932 * (_895.y + (-0.5));
        float _935 = _932 * (_895.z + (-0.5));
        float _942 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _943 = _942 * (_902.x + (-0.5));
        float _944 = _942 * (_902.y + (-0.5));
        float _945 = _942 * (_902.z + (-0.5));
        float _952 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _953 = _952 * (_909.x + (-0.5));
        float _954 = _952 * (_909.y + (-0.5));
        float _955 = _952 * (_909.z + (-0.5));
        float _956 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _959 = _923 * 0.5;
        float _960 = _933 * 0.5;
        float _961 = _943 * 0.5;
        float _962 = dot(vec3(_959, _960, _961), vec3(_959, _960, _961));
        float _967 = (_962 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_962);
        float _976 = (dot(vec3(_533, _534, _535), vec3(_967 * _959, _967 * _960, _967 * _961)) + 1.0) * 0.5;
        float _3987 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _986 = sqrt(((_960 * _960) + (_959 * _959)) + (_961 * _961)) / (_956 + 9.9999997473787516355514526367188e-06);
        float _3998 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _988 = _987 * 2.0;
        float _992 = (1.0 - _987) / (_987 + 1.0);
        float _4009 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1002 = ((((1.0 - _993) * (_988 + 2.0)) * exp2(log2(isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_988 + 1.0))) + _993) * _956;
        float _1003 = _924 * 0.5;
        float _1004 = _934 * 0.5;
        float _1005 = _944 * 0.5;
        float _1006 = dot(vec3(_1003, _1004, _1005), vec3(_1003, _1004, _1005));
        float _1011 = (_1006 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1006);
        float _1019 = (dot(vec3(_533, _534, _535), vec3(_1011 * _1003, _1011 * _1004, _1011 * _1005)) + 1.0) * 0.5;
        float _4020 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1028 = sqrt(((_1004 * _1004) + (_1003 * _1003)) + (_1005 * _1005)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _4031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1030 = _1029 * 2.0;
        float _1034 = (1.0 - _1029) / (_1029 + 1.0);
        float _4042 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1044 = ((((1.0 - _1035) * (_1030 + 2.0)) * exp2(log2(isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1030 + 1.0))) + _1035) * _957;
        float _1045 = _925 * 0.5;
        float _1046 = _935 * 0.5;
        float _1047 = _945 * 0.5;
        float _1048 = dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047));
        float _1053 = (_1048 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1048);
        float _1061 = (dot(vec3(_533, _534, _535), vec3(_1053 * _1045, _1053 * _1046, _1053 * _1047)) + 1.0) * 0.5;
        float _4053 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1070 = sqrt(((_1046 * _1046) + (_1045 * _1045)) + (_1047 * _1047)) / (_958 + 9.9999997473787516355514526367188e-06);
        float _4064 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1072 = _1071 * 2.0;
        float _1076 = (1.0 - _1071) / (_1071 + 1.0);
        float _4075 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1086 = ((((1.0 - _1077) * (_1072 + 2.0)) * exp2(log2(isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_1072 + 1.0))) + _1077) * _958;
        _1094 = _925;
        _1096 = _924;
        _1097 = _923;
        _1098 = _935;
        _1099 = _934;
        _1100 = _933;
        _1101 = _945;
        _1102 = _944;
        _1103 = _943;
        _1104 = _958;
        _1105 = _957;
        _1106 = _956;
        _1107 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0)));
        _1108 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0)));
        _1109 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0)));
    }
    else
    {
        _1094 = _1095;
        _1096 = _1095;
        _1097 = _1095;
        _1098 = _1095;
        _1099 = _1095;
        _1100 = _1095;
        _1101 = _1095;
        _1102 = _1095;
        _1103 = _1095;
        _1104 = _1095;
        _1105 = _1095;
        _1106 = _1095;
        _1107 = 0.0;
        _1108 = 0.0;
        _1109 = 0.0;
    }
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1138 = fma(_764, cbModelParam._m0[30u].z, fma(_760, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _756));
        float _1142 = fma(_764, cbModelParam._m0[31u].z, fma(_760, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _756));
        float _1146 = fma(_764, cbModelParam._m0[32u].z, fma(_760, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _756));
        float _1169 = _756 + _533;
        float _1170 = _760 + _534;
        float _1171 = _764 + _535;
        float _1181 = fma(_1171, cbModelParam._m0[30u].z, fma(_1170, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1169)) - _1138;
        float _1182 = fma(_1171, cbModelParam._m0[31u].z, fma(_1170, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1169)) - _1142;
        float _1183 = fma(_1171, cbModelParam._m0[32u].z, fma(_1170, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1169)) - _1146;
        float _1187 = inversesqrt(dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183)));
        float _1200 = ((_1187 * _1181) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1138 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1201 = ((_1187 * _1182) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1142 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1202 = ((_1187 * _1183) / cbModelParam._m0[35u].z) + ((((((_1146 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        float _1237 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1204.x + (-0.5));
        float _1239 = _1237 * (_1204.y + (-0.5));
        float _1240 = _1237 * (_1204.z + (-0.5));
        float _1247 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1211.x + (-0.5));
        float _1249 = _1247 * (_1211.y + (-0.5));
        float _1250 = _1247 * (_1211.z + (-0.5));
        float _1257 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1218.x + (-0.5));
        float _1259 = _1257 * (_1218.y + (-0.5));
        float _1260 = _1257 * (_1218.z + (-0.5));
        float _1267 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1225.x + (-0.5));
        float _1269 = _1267 * (_1225.y + (-0.5));
        float _1270 = _1267 * (_1225.z + (-0.5));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = _1238 * 0.5;
        float _1275 = _1248 * 0.5;
        float _1276 = _1258 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1290 = (dot(vec3(_533, _534, _535), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _4116 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1299 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _4127 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _4138 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_1301 + 1.0))) + _1306) * _1271;
        float _1316 = _1239 * 0.5;
        float _1317 = _1249 * 0.5;
        float _1318 = _1259 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1332 = (dot(vec3(_533, _534, _535), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _4149 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1341 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _4160 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _4171 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_1343 + 1.0))) + _1348) * _1272;
        float _1358 = _1240 * 0.5;
        float _1359 = _1250 * 0.5;
        float _1360 = _1260 * 0.5;
        float _1361 = dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360));
        float _1366 = (_1361 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1361);
        float _1374 = (dot(vec3(_533, _534, _535), vec3(_1366 * _1358, _1366 * _1359, _1366 * _1360)) + 1.0) * 0.5;
        float _4182 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1383 = sqrt(((_1359 * _1359) + (_1358 * _1358)) + (_1360 * _1360)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _4193 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1385 = _1384 * 2.0;
        float _1389 = (1.0 - _1384) / (_1384 + 1.0);
        float _4204 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1399 = ((((1.0 - _1390) * (_1385 + 2.0)) * exp2(log2(isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_1385 + 1.0))) + _1390) * _1273;
        _1407 = _1240;
        _1408 = _1239;
        _1409 = _1238;
        _1410 = _1250;
        _1411 = _1249;
        _1412 = _1248;
        _1413 = _1260;
        _1414 = _1259;
        _1415 = _1258;
        _1416 = _1273;
        _1417 = _1272;
        _1418 = _1271;
        _1419 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
        _1420 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
        _1421 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)));
    }
    else
    {
        _1407 = _1095;
        _1408 = _1095;
        _1409 = _1095;
        _1410 = _1095;
        _1411 = _1095;
        _1412 = _1095;
        _1413 = _1095;
        _1414 = _1095;
        _1415 = _1095;
        _1416 = _1095;
        _1417 = _1095;
        _1418 = _1095;
        _1419 = 0.0;
        _1420 = 0.0;
        _1421 = 0.0;
    }
    float _1431 = (cbModelParam._m0[1u].x * (_1419 - _1107)) + _1107;
    float _1432 = (cbModelParam._m0[1u].x * (_1420 - _1108)) + _1108;
    float _1433 = (cbModelParam._m0[1u].x * (_1421 - _1109)) + _1109;
    float _1454 = fma(_1433, cbSceneParam._m0[89u].z, fma(_1432, cbSceneParam._m0[89u].y, _1431 * cbSceneParam._m0[89u].x));
    float _1457 = fma(_1433, cbSceneParam._m0[90u].z, fma(_1432, cbSceneParam._m0[90u].y, _1431 * cbSceneParam._m0[90u].x));
    float _1460 = fma(_1433, cbSceneParam._m0[91u].z, fma(_1432, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1431));
    float _1475 = _704 * 0.5;
    float _1476 = _705 * 0.5;
    float _1477 = _706 * 0.5;
    float _1478 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1409, _1412, _1415, _1418));
    float _1481 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1408, _1411, _1414, _1417));
    float _1484 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1407, _1410, _1413, _1416));
    float _1518;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1491 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1094, _1098, _1101, _1104));
        float _1495 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1096, _1099, _1102, _1105));
        float _1499 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1097, _1100, _1103, _1106));
        float _1506 = dot(vec4(cbModelParam._m0[39u]), vec4(_1475, _1476, _1477, 1.0));
        _1518 = dot(vec3(isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)), isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)), isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1506) ? 0.0 : (isnan(0.0) ? _1506 : max(0.0, _1506))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1518 = 1.0;
    }
    float _1529;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1520 = dot(vec4(cbModelParam._m0[40u]), vec4(_1475, _1476, _1477, 1.0));
        _1529 = dot(vec3(isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)), isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)), isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1520) ? 0.0 : (isnan(0.0) ? _1520 : max(0.0, _1520))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1529 = 1.0;
    }
    float _1533 = (_1529 * cbModelParam._m0[1u].x) + (_1518 * (1.0 - cbModelParam._m0[1u].x));
    float _1543 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _536);
    float _1544 = isnan(_1543) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1543 : min(cbModelParam._m0[25u].z, _1543));
    float _1624;
    float _1626;
    float _1628;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1591 = fma(_764, cbModelParam._m0[13u].z, fma(_760, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _756)) + cbModelParam._m0[13u].w;
        float _1595 = fma(_764, cbModelParam._m0[14u].z, fma(_760, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _756)) + cbModelParam._m0[14u].w;
        float _1599 = fma(_764, cbModelParam._m0[15u].z, fma(_760, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _756)) + cbModelParam._m0[15u].w;
        float _1602 = fma(_706, cbModelParam._m0[13u].z, fma(_705, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _704));
        float _1605 = fma(_706, cbModelParam._m0[14u].z, fma(_705, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _704));
        float _1608 = fma(_706, cbModelParam._m0[15u].z, fma(_705, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _704));
        float _1636;
        if (_1602 > 0.0)
        {
            _1636 = abs((1.0 - _1591) / _1602);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1591 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1636 = frontier_phi_17_15_ladder;
        }
        float _1807;
        if (_1605 > 0.0)
        {
            _1807 = abs((1.0 - _1595) / _1605);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1595 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1807 = frontier_phi_26_22_ladder;
        }
        float _2103;
        if (_1608 > 0.0)
        {
            _2103 = abs((1.0 - _1599) / _1608);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1608 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1599 + 1.0) / _1608);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2103 = frontier_phi_38_33_ladder;
        }
        float _2105 = isnan(_1807) ? _1636 : (isnan(_1636) ? _1807 : min(_1636, _1807));
        float _2106 = isnan(_2103) ? _2105 : (isnan(_2105) ? _2103 : min(_2105, _2103));
        float _2110 = (_2106 * _1602) + _1591;
        float _2111 = (_2106 * _1605) + _1595;
        float _2112 = (_2106 * _1608) + _1599;
        float _2113 = _2106 * 9.9999997473787516355514526367188e-05;
        float _2115 = (-1.0) - _2113;
        float _2117 = _2113 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2112 > _2117) || ((_2112 < _2115) || ((_2111 > _2117) || ((_2111 < _2115) || ((_2110 < _2115) || (_2110 > _2117))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2257 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2112, cbModelParam._m0[9u].z, fma(_2111, cbModelParam._m0[9u].y, _2110 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2112, cbModelParam._m0[10u].z, fma(_2111, cbModelParam._m0[10u].y, _2110 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2112, cbModelParam._m0[11u].z, fma(_2111, cbModelParam._m0[11u].y, _2110 * cbModelParam._m0[11u].x))), _1544);
            frontier_phi_16_38_ladder = _2257.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2257.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2257.x * cbModelParam._m0[1u].y;
        }
        _1624 = frontier_phi_16_38_ladder_2;
        _1626 = frontier_phi_16_38_ladder_1;
        _1628 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1612 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_704, _705, _706), _1544);
        _1624 = _1612.x * cbModelParam._m0[1u].y;
        _1626 = _1612.y * cbModelParam._m0[1u].y;
        _1628 = _1612.z * cbModelParam._m0[1u].y;
    }
    float _1632 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _536);
    float _1633 = isnan(_1632) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1632 : min(cbModelParam._m0[25u].w, _1632));
    float _1724;
    float _1726;
    float _1728;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1688 = fma(_764, cbModelParam._m0[21u].z, fma(_760, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _756)) + cbModelParam._m0[21u].w;
        float _1692 = fma(_764, cbModelParam._m0[22u].z, fma(_760, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _756)) + cbModelParam._m0[22u].w;
        float _1696 = fma(_764, cbModelParam._m0[23u].z, fma(_760, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _756)) + cbModelParam._m0[23u].w;
        float _1699 = fma(_706, cbModelParam._m0[21u].z, fma(_705, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _704));
        float _1702 = fma(_706, cbModelParam._m0[22u].z, fma(_705, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _704));
        float _1705 = fma(_706, cbModelParam._m0[23u].z, fma(_705, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _704));
        float _1812;
        if (_1699 > 0.0)
        {
            _1812 = abs((1.0 - _1688) / _1699);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1699 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1688 + 1.0) / _1699);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1812 = frontier_phi_28_24_ladder;
        }
        float _2130;
        if (_1702 > 0.0)
        {
            _2130 = abs((1.0 - _1692) / _1702);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1702 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1692 + 1.0) / _1702);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2130 = frontier_phi_40_35_ladder;
        }
        float _2457;
        if (_1705 > 0.0)
        {
            _2457 = abs((1.0 - _1696) / _1705);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1705 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1696 + 1.0) / _1705);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2457 = frontier_phi_50_47_ladder;
        }
        float _2459 = isnan(_2130) ? _1812 : (isnan(_1812) ? _2130 : min(_1812, _2130));
        float _2460 = isnan(_2457) ? _2459 : (isnan(_2459) ? _2457 : min(_2459, _2457));
        float _2464 = (_2460 * _1699) + _1688;
        float _2465 = (_2460 * _1702) + _1692;
        float _2466 = (_2460 * _1705) + _1696;
        float _2467 = _2460 * 9.9999997473787516355514526367188e-05;
        float _2468 = (-1.0) - _2467;
        float _2470 = _2467 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2466 > _2470) || ((_2466 < _2468) || ((_2465 > _2470) || ((_2465 < _2468) || ((_2464 < _2468) || (_2464 > _2470))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2584 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2466, cbModelParam._m0[17u].z, fma(_2465, cbModelParam._m0[17u].y, _2464 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2466, cbModelParam._m0[18u].z, fma(_2465, cbModelParam._m0[18u].y, _2464 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2466, cbModelParam._m0[19u].z, fma(_2465, cbModelParam._m0[19u].y, _2464 * cbModelParam._m0[19u].x))), _1633);
            frontier_phi_25_50_ladder = _2584.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2584.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2584.x * cbModelParam._m0[1u].z;
        }
        _1724 = frontier_phi_25_50_ladder_2;
        _1726 = frontier_phi_25_50_ladder_1;
        _1728 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1708 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_704, _705, _706), _1633);
        _1724 = _1708.x * cbModelParam._m0[1u].z;
        _1726 = _1708.y * cbModelParam._m0[1u].z;
        _1728 = _1708.z * cbModelParam._m0[1u].z;
    }
    float _1740 = ((((1.0 - _724) * ((_712 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_724 * _712)) * _696;
    float _1741 = _1740 * ((cbModelParam._m0[1u].w * (_1724 - _1624)) + _1624);
    float _1742 = _1740 * ((cbModelParam._m0[1u].w * (_1726 - _1626)) + _1626);
    float _1743 = _1740 * ((cbModelParam._m0[1u].w * (_1728 - _1628)) + _1628);
    float _1746 = fma(_1743, cbSceneParam._m0[89u].z, fma(_1742, cbSceneParam._m0[89u].y, _1741 * cbSceneParam._m0[89u].x));
    float _1749 = fma(_1743, cbSceneParam._m0[90u].z, fma(_1742, cbSceneParam._m0[90u].y, _1741 * cbSceneParam._m0[90u].x));
    float _1752 = fma(_1743, cbSceneParam._m0[91u].z, fma(_1742, cbSceneParam._m0[91u].y, _1741 * cbSceneParam._m0[91u].x));
    float _1786 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1790 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1794 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1798 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1799 = _1786 / _1798;
    float _1800 = _1790 / _1798;
    float _1801 = _1794 / _1798;
    float _1948;
    float _1949;
    float _1950;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1828 = ((uint(_1801 > cbSceneParam._m0[59u].y) + uint(_1801 > cbSceneParam._m0[59u].x)) + uint(_1801 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1829 = _1828 + 43u;
        uint _1837 = _1828 + 44u;
        uint _1845 = _1828 + 45u;
        uint _1853 = _1828 + 46u;
        float _1864 = fma(_1798, cbSceneParam._m0[_1829].w, fma(_1794, cbSceneParam._m0[_1829].z, fma(_1790, cbSceneParam._m0[_1829].y, _1786 * cbSceneParam._m0[_1829].x)));
        float _1868 = fma(_1798, cbSceneParam._m0[_1837].w, fma(_1794, cbSceneParam._m0[_1837].z, fma(_1790, cbSceneParam._m0[_1837].y, _1786 * cbSceneParam._m0[_1837].x)));
        float _1876 = fma(_1798, cbSceneParam._m0[_1853].w, fma(_1794, cbSceneParam._m0[_1853].z, fma(_1790, cbSceneParam._m0[_1853].y, _1786 * cbSceneParam._m0[_1853].x)));
        float _1881 = cbSceneParam._m0[33u].z * _1876;
        float _1883 = cbSceneParam._m0[33u].w * _1876;
        float _1886 = fma(_1798, cbSceneParam._m0[_1845].w, fma(_1794, cbSceneParam._m0[_1845].z, fma(_1790, cbSceneParam._m0[_1845].y, _1786 * cbSceneParam._m0[_1845].x))) / _1876;
        float _1934 = (cbSceneParam._m0[33u].x - sqrt(((_1800 * _1800) + (_1799 * _1799)) + (_1801 * _1801))) * cbSceneParam._m0[33u].y;
        float _4330 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        float _1941 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1881 + _1864) / _1876, (_1883 + _1868) / _1876), _1886), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1883 + _1864) / _1876, (_1868 - _1881) / _1876), _1886), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1864 - _1881) / _1876, (_1868 - _1883) / _1876), _1886), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1864 - _1883) / _1876, (_1881 + _1868) / _1876), _1886), 0.0)).x), vec4(0.25)));
        _1948 = 1.0 - (_1941 * cbSceneParam._m0[34u].x);
        _1949 = 1.0 - (_1941 * cbSceneParam._m0[34u].y);
        _1950 = 1.0 - (_1941 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1948 = 1.0;
        _1949 = 1.0;
        _1950 = 1.0;
    }
    float _2014;
    float _2016;
    float _2018;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2002 = fma(_1798, cbSceneParam._m0[63u].w, fma(_1794, cbSceneParam._m0[63u].z, fma(_1790, cbSceneParam._m0[63u].y, _1786 * cbSceneParam._m0[63u].x)));
        float _2003 = fma(_1798, cbSceneParam._m0[60u].w, fma(_1794, cbSceneParam._m0[60u].z, fma(_1790, cbSceneParam._m0[60u].y, _1786 * cbSceneParam._m0[60u].x))) / _2002;
        float _2004 = fma(_1798, cbSceneParam._m0[61u].w, fma(_1794, cbSceneParam._m0[61u].z, fma(_1790, cbSceneParam._m0[61u].y, _1786 * cbSceneParam._m0[61u].x))) / _2002;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2003 >= cbSceneParam._m0[64u].x) && (_2004 >= cbSceneParam._m0[64u].y)) && (_2003 <= cbSceneParam._m0[64u].z)) && (_2004 <= cbSceneParam._m0[64u].w))
        {
            float _2143 = fma(_1798, cbSceneParam._m0[62u].w, fma(_1794, cbSceneParam._m0[62u].z, fma(_1790, cbSceneParam._m0[62u].y, _1786 * cbSceneParam._m0[62u].x))) / _2002;
            float _2147 = isnan(cbSceneParam._m0[41u].w) ? _2143 : (isnan(_2143) ? cbSceneParam._m0[41u].w : max(_2143, cbSceneParam._m0[41u].w));
            float _2190 = (cbSceneParam._m0[33u].x - sqrt(((_1800 * _1800) + (_1799 * _1799)) + (_1801 * _1801))) * cbSceneParam._m0[33u].y;
            float _4346 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
            float _2197 = (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2003, cbSceneParam._m0[33u].w + _2004), _2147), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2003, _2004 - cbSceneParam._m0[33u].z), _2147), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2003 - cbSceneParam._m0[33u].z, _2004 - cbSceneParam._m0[33u].w), _2147), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2003 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2004), _2147), 0.0)).x), vec4(0.25)));
            float _2201 = 1.0 - (_2197 * cbSceneParam._m0[34u].x);
            float _2202 = 1.0 - (_2197 * cbSceneParam._m0[34u].y);
            float _2203 = 1.0 - (_2197 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2203) ? _1950 : (isnan(_1950) ? _2203 : min(_1950, _2203));
            frontier_phi_37_36_ladder_1 = isnan(_2202) ? _1949 : (isnan(_1949) ? _2202 : min(_1949, _2202));
            frontier_phi_37_36_ladder_2 = isnan(_2201) ? _1948 : (isnan(_1948) ? _2201 : min(_1948, _2201));
        }
        else
        {
            frontier_phi_37_36_ladder = _1950;
            frontier_phi_37_36_ladder_1 = _1949;
            frontier_phi_37_36_ladder_2 = _1948;
        }
        _2014 = frontier_phi_37_36_ladder_2;
        _2016 = frontier_phi_37_36_ladder_1;
        _2018 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2014 = _1948;
        _2016 = _1949;
        _2018 = _1950;
    }
    uvec4 _2023 = floatBitsToUint(cbInstanceData._m0[_671 + 5u]);
    uint _2025 = _2023.x * 14u;
    uint _2026 = _2025 + 13u;
    float _2033 = _696 + (-1.0);
    float _2038 = (cbLight._m0[_2026].x * _2033) + 1.0;
    float _2039 = (cbLight._m0[_2026].y * _2033) + 1.0;
    float _2040 = (cbLight._m0[_2026].z * _2033) + 1.0;
    float _2041 = (cbLight._m0[_2026].w * _2033) + 1.0;
    uint _2042 = _2025 + 5u;
    float _2048 = isnan(1.0) ? _2039 : (isnan(_2039) ? 1.0 : min(_2039, 1.0));
    uint _2052 = _2025 + 4u;
    float _2062 = isnan(1.0) ? _2038 : (isnan(_2038) ? 1.0 : min(_2038, 1.0));
    uint _2066 = _2025 | 1u;
    float _2077 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_533, _534, _535));
    float _2080 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_533, _534, _535));
    float _4382 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _4393 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2085 = (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * 0.3183098733425140380859375;
    float _2087 = (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * 0.3183098733425140380859375;
    float _2094 = ((cbLight._m0[_2042].x * _2048) * _2087) + (((cbLight._m0[_2052].x * _2014) * _2062) * _2085);
    float _2095 = ((_2048 * cbLight._m0[_2042].y) * _2087) + (((cbLight._m0[_2052].y * _2016) * _2062) * _2085);
    float _2096 = ((_2048 * cbLight._m0[_2042].z) * _2087) + (((cbLight._m0[_2052].z * _2018) * _2062) * _2085);
    uvec4 _2100 = floatBitsToUint(cbLight._m0[_2025 + 12u]);
    bool _2102 = _2100.x == 0u;
    float _2204;
    float _2206;
    float _2208;
    if (_2102)
    {
        _2204 = _2094;
        _2206 = _2095;
        _2208 = _2096;
    }
    else
    {
        uint _2212 = _2025 + 6u;
        float _2228 = (dot(vec3(cbLight._m0[_2025 + 2u].xyz), vec3(_533, _534, _535)) * 0.5) + 0.5;
        float _2229 = _2228 * _2228;
        float _4404 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2230 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _2231 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
        _2204 = (((cbLight._m0[_2212].x * 0.3183098733425140380859375) * _2230) * _2231) + _2094;
        _2206 = (((cbLight._m0[_2212].y * 0.3183098733425140380859375) * _2230) * _2231) + _2095;
        _2208 = (((cbLight._m0[_2212].z * 0.3183098733425140380859375) * _2230) * _2231) + _2096;
    }
    bool _2211 = _2100.y == 0u;
    float _2266;
    float _2268;
    float _2270;
    if (_2211)
    {
        _2266 = _2204;
        _2268 = _2206;
        _2270 = _2208;
    }
    else
    {
        uint _2428 = _2025 + 7u;
        float _2444 = (dot(vec3(cbLight._m0[_2025 + 3u].xyz), vec3(_533, _534, _535)) * 0.5) + 0.5;
        float _2445 = _2444 * _2444;
        float _4420 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2446 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _2447 = isnan(1.0) ? _2041 : (isnan(_2041) ? 1.0 : min(_2041, 1.0));
        _2266 = (((cbLight._m0[_2428].x * 0.3183098733425140380859375) * _2446) * _2447) + _2204;
        _2268 = (((cbLight._m0[_2428].y * 0.3183098733425140380859375) * _2446) * _2447) + _2206;
        _2270 = (((cbLight._m0[_2428].z * 0.3183098733425140380859375) * _2446) * _2447) + _2208;
    }
    uint _2273 = _2025 + 8u;
    float _2286 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2025].w)) * _536) * 0.949999988079071044921875);
    float _2287 = _2286 * _2286;
    float _2288 = cbLight._m0[_2025].x + _613;
    float _2289 = cbLight._m0[_2025].y + _614;
    float _2290 = cbLight._m0[_2025].z + _615;
    float _2294 = inversesqrt(dot(vec3(_2288, _2289, _2290), vec3(_2288, _2289, _2290)));
    float _2295 = _2294 * _2288;
    float _2296 = _2294 * _2289;
    float _2297 = _2294 * _2290;
    float _2298 = dot(vec3(_533, _534, _535), vec3(cbLight._m0[_2025].xyz));
    float _4436 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2301 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
    float _4447 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _2302 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _2303 = dot(vec3(_533, _534, _535), vec3(_2295, _2296, _2297));
    float _4458 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2306 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
    float _2307 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_2295, _2296, _2297));
    float _4469 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2311 = _2287 * _2287;
    float _2315 = ((_2306 * _2306) * (_2311 + (-1.0))) + 1.0;
    float _2326 = (exp2(log2(1.0 - (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2327 = 1.0 - _2287;
    float _2338 = (0.5 / (((_2302 * ((_2301 * _2327) + _2287)) + 9.9999999392252902907785028219223e-09) + (((_2302 * _2327) + _2287) * _2301))) * _2301;
    float _4480 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2340 = (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_2311 / ((_2315 * _2315) * 3.141590118408203125));
    uint _2354 = _2025 + 9u;
    float _2365 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2066].w)) * _536) * 0.949999988079071044921875);
    float _2366 = _2365 * _2365;
    float _2367 = cbLight._m0[_2066].x + _613;
    float _2368 = cbLight._m0[_2066].y + _614;
    float _2369 = cbLight._m0[_2066].z + _615;
    float _2373 = inversesqrt(dot(vec3(_2367, _2368, _2369), vec3(_2367, _2368, _2369)));
    float _2374 = _2373 * _2367;
    float _2375 = _2373 * _2368;
    float _2376 = _2373 * _2369;
    float _2377 = dot(vec3(_533, _534, _535), vec3(cbLight._m0[_2066].xyz));
    float _4491 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2380 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
    float _2381 = dot(vec3(_533, _534, _535), vec3(_2374, _2375, _2376));
    float _4502 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2384 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
    float _2385 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_2374, _2375, _2376));
    float _4513 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2389 = _2366 * _2366;
    float _2393 = ((_2384 * _2384) * (_2389 + (-1.0))) + 1.0;
    float _2402 = (exp2(log2(1.0 - (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2403 = 1.0 - _2366;
    float _2413 = (0.5 / (((_2302 * ((_2380 * _2403) + _2366)) + 9.9999999392252902907785028219223e-09) + (((_2302 * _2403) + _2366) * _2380))) * _2380;
    float _4524 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2415 = (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2389 / ((_2393 * _2393) * 3.141590118408203125));
    float _2425 = (((_2402 * cbLight._m0[_2354].x) * _2415) * _2048) + ((((cbLight._m0[_2273].x * _2014) * _2326) * _2340) * _2062);
    float _2426 = (((_2402 * cbLight._m0[_2354].y) * _2415) * _2048) + ((((cbLight._m0[_2273].y * _2016) * _2326) * _2340) * _2062);
    float _2427 = (((_2402 * cbLight._m0[_2354].z) * _2415) * _2048) + ((((cbLight._m0[_2273].z * _2018) * _2326) * _2340) * _2062);
    float _2483;
    float _2485;
    float _2487;
    if (_2102)
    {
        _2483 = _2425;
        _2485 = _2426;
        _2487 = _2427;
    }
    else
    {
        uint _2489 = _2025 + 2u;
        uint _2493 = _2025 + 10u;
        float _2507 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2489].w)) * _536) * 0.949999988079071044921875);
        float _2508 = _2507 * _2507;
        float _2509 = cbLight._m0[_2489].x + _613;
        float _2510 = cbLight._m0[_2489].y + _614;
        float _2511 = cbLight._m0[_2489].z + _615;
        float _2515 = inversesqrt(dot(vec3(_2509, _2510, _2511), vec3(_2509, _2510, _2511)));
        float _2516 = _2515 * _2509;
        float _2517 = _2515 * _2510;
        float _2518 = _2515 * _2511;
        float _2519 = dot(vec3(_533, _534, _535), vec3(cbLight._m0[_2489].xyz));
        float _4535 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2522 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _2523 = dot(vec3(_533, _534, _535), vec3(_2516, _2517, _2518));
        float _4546 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2526 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _2527 = dot(vec3(cbLight._m0[_2489].xyz), vec3(_2516, _2517, _2518));
        float _4557 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2531 = _2508 * _2508;
        float _2535 = ((_2526 * _2526) * (_2531 + (-1.0))) + 1.0;
        float _2544 = (exp2(log2(1.0 - (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2545 = 1.0 - _2508;
        float _2555 = (0.5 / (((_2302 * ((_2522 * _2545) + _2508)) + 9.9999999392252902907785028219223e-09) + (((_2302 * _2545) + _2508) * _2522))) * _2522;
        float _4568 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2557 = (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_2531 / ((_2535 * _2535) * 3.141590118408203125));
        float _2558 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
        _2483 = (((_2544 * cbLight._m0[_2493].x) * _2557) * _2558) + _2425;
        _2485 = (((_2544 * cbLight._m0[_2493].y) * _2557) * _2558) + _2426;
        _2487 = (((_2544 * cbLight._m0[_2493].z) * _2557) * _2558) + _2427;
    }
    float _2589;
    float _2591;
    float _2593;
    if (_2211)
    {
        _2589 = _2483;
        _2591 = _2485;
        _2593 = _2487;
    }
    else
    {
        uint _2600 = _2025 + 3u;
        uint _2604 = _2025 + 11u;
        float _2618 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2600].w)) * _536) * 0.949999988079071044921875);
        float _2619 = _2618 * _2618;
        float _2620 = cbLight._m0[_2600].x + _613;
        float _2621 = cbLight._m0[_2600].y + _614;
        float _2622 = cbLight._m0[_2600].z + _615;
        float _2626 = inversesqrt(dot(vec3(_2620, _2621, _2622), vec3(_2620, _2621, _2622)));
        float _2627 = _2626 * _2620;
        float _2628 = _2626 * _2621;
        float _2629 = _2626 * _2622;
        float _2630 = dot(vec3(_533, _534, _535), vec3(cbLight._m0[_2600].xyz));
        float _4584 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2633 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _2634 = dot(vec3(_533, _534, _535), vec3(_2627, _2628, _2629));
        float _4595 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2637 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
        float _2638 = dot(vec3(cbLight._m0[_2600].xyz), vec3(_2627, _2628, _2629));
        float _4606 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2642 = _2619 * _2619;
        float _2646 = ((_2637 * _2637) * (_2642 + (-1.0))) + 1.0;
        float _2655 = (exp2(log2(1.0 - (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2656 = 1.0 - _2619;
        float _2666 = (0.5 / (((_2302 * ((_2633 * _2656) + _2619)) + 9.9999999392252902907785028219223e-09) + (((_2302 * _2656) + _2619) * _2633))) * _2633;
        float _4617 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2668 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2642 / ((_2646 * _2646) * 3.141590118408203125));
        float _2669 = isnan(1.0) ? _2041 : (isnan(_2041) ? 1.0 : min(_2041, 1.0));
        _2589 = (((_2655 * cbLight._m0[_2604].x) * _2668) * _2669) + _2483;
        _2591 = (((_2655 * cbLight._m0[_2604].y) * _2668) * _2669) + _2485;
        _2593 = (((_2655 * cbLight._m0[_2604].z) * _2668) * _2669) + _2487;
    }
    float _2735;
    float _2737;
    float _2739;
    float _2741;
    float _2743;
    float _2745;
    if (_2023.y == 0u)
    {
        uvec4 _2690 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2691 = _2690.x;
        uint _2702 = uint((float(_2690.y) * floor(float(uint(cbSceneParam._m0[85u].y * _634) / _2691))) + floor(float(uint(cbSceneParam._m0[85u].x * _633) / _2691)));
        float _2712 = (log2(_1801 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2713 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        uint _2716 = uint(isnan(14.0) ? _2713 : (isnan(_2713) ? 14.0 : min(_2713, 14.0)));
        uvec4 _2721 = texelFetch(g_lightClusterGridBuffer, int(((_2716 << 2u) + (_2702 << 6u)) >> 2u));
        uint _2722 = _2721.x;
        uint _2723 = _2690.z;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        if (((((1u << ((_2723 >> 4u) & 15u)) + 4294967295u) & _2722) == 0u) || ((_2723 & 240u) == 0u))
        {
            _2847 = 0.0;
            _2849 = 0.0;
            _2851 = 0.0;
            _2853 = 0.0;
            _2855 = 0.0;
            _2857 = 0.0;
        }
        else
        {
            float _2848;
            float _2850;
            float _2852;
            float _2854;
            float _2856;
            float _2858;
            float _3008 = 0.0;
            float _3009 = 0.0;
            float _3010 = 0.0;
            float _3011 = 0.0;
            float _3012 = 0.0;
            float _3013 = 0.0;
            uint _3014 = 0u;
            uint _3023;
            bool _3024;
            for (;;)
            {
                _3023 = texelFetch(g_lightClassification, int((((_2716 << 5u) + (_2702 << 9u)) + (_3014 << 2u)) >> 2u)).x;
                _3024 = _3023 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3024)
                {
                    frontier_phi_71_pred = _3013;
                    frontier_phi_71_pred_1 = _3012;
                    frontier_phi_71_pred_2 = _3011;
                    frontier_phi_71_pred_3 = _3010;
                    frontier_phi_71_pred_4 = _3009;
                    frontier_phi_71_pred_5 = _3008;
                }
                else
                {
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    uint _3159;
                    _3153 = _3008;
                    _3154 = _3009;
                    _3155 = _3010;
                    _3156 = _3011;
                    _3157 = _3012;
                    _3158 = _3013;
                    _3159 = _3023;
                    float _3080;
                    float _3081;
                    float _3082;
                    float _3083;
                    float _3084;
                    float _3085;
                    for (;;)
                    {
                        uint _3163 = uint(findLSB(_3159)) + (_3014 << 5u);
                        uint _3160 = (_3159 + 4294967295u) & _3159;
                        uint _3165 = _3163 * 48u;
                        vec4 _3179 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3165)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 3u)).x));
                        uint _3185 = (_3163 * 48u) + 4u;
                        vec4 _3198 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3185)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 3u)).x));
                        uint _3204 = (_3163 * 48u) + 8u;
                        vec3 _3215 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3204)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 2u)).x));
                        float _3219 = _3179.x - _1799;
                        float _3220 = _3179.y - _1800;
                        float _3221 = _3179.z - _1801;
                        float _3222 = dot(vec3(_3219, _3220, _3221), vec3(_3219, _3220, _3221));
                        float _3225 = inversesqrt(_3222);
                        float _3226 = _3225 * _3219;
                        float _3227 = _3225 * _3220;
                        float _3228 = _3225 * _3221;
                        float _3229 = dot(vec3(_652, _655, _658), vec3(_3226, _3227, _3228));
                        float _3234 = 1.0 - (_3222 * _3179.w);
                        float _4643 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                        float _3235 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
                        float _3236 = sqrt(_3222) * _3198.w;
                        float _3239 = 1.39999997615814208984375 / (_3236 + 1.39999997615814208984375);
                        float _3240 = _3239 * _3239;
                        float _3243 = ((1.0 - _3240) * _3229) + _3240;
                        float _3246 = _3236 * _3236;
                        float _3250 = ((isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0))) * _3235) / ((_3246 * 0.699999988079071044921875) + 1.0);
                        float _3254 = (-0.0) - _1799;
                        float _3255 = (-0.0) - _1800;
                        float _3256 = (-0.0) - _1801;
                        float _3260 = inversesqrt(dot(vec3(_3254, _3255, _3256), vec3(_3254, _3255, _3256)));
                        float _3261 = _3260 * _3254;
                        float _3262 = _3260 * _3255;
                        float _3263 = _3260 * _3256;
                        float _3270 = exp2(log2(1.0 / ((_3246 * 3.5) + 5.0)) * 0.25);
                        float _3271 = 1.0 - _712;
                        float _3278 = sqrt(1.0 - ((1.0 - (_3271 * _3271)) * (1.0 - (_3270 * _3270))));
                        float _3279 = _3278 * _3278;
                        float _3280 = _3279 * _3279;
                        float _3281 = _3261 + _3226;
                        float _3282 = _3262 + _3227;
                        float _3283 = _3263 + _3228;
                        float _3287 = inversesqrt(dot(vec3(_3281, _3282, _3283), vec3(_3281, _3282, _3283)));
                        float _3291 = dot(vec3(_652, _655, _658), vec3(_3261, _3262, _3263));
                        float _4659 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                        float _3294 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                        float _3295 = dot(vec3(_652, _655, _658), vec3(_3287 * _3281, _3287 * _3282, _3287 * _3283));
                        float _4670 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                        float _3298 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                        float _3302 = ((_3298 * _3298) * (_3280 + (-1.0))) + 1.0;
                        float _3303 = _3239 * _3279;
                        float _3304 = _3303 * _3303;
                        float _3307 = ((1.0 - _3304) * _3229) + _3304;
                        float _4681 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                        float _3308 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                        float _3309 = 1.0 - _3279;
                        float _3319 = (0.5 / (((_3308 * ((_3294 * _3309) + _3279)) + 9.9999999392252902907785028219223e-09) + (((_3308 * _3309) + _3279) * _3294))) * _3308;
                        float _4692 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                        float _3330 = (((_3280 * 3.1415927410125732421875) * (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0)))) / ((_3302 * _3302) * ((_3246 * 2.1991131305694580078125) + 3.141590118408203125))) * _3235;
                        _3083 = (_3250 * _3198.x) + _3156;
                        _3084 = (_3250 * _3198.y) + _3157;
                        _3085 = (_3250 * _3198.z) + _3158;
                        _3080 = (_3330 * _3215.x) + _3153;
                        _3081 = (_3330 * _3215.y) + _3154;
                        _3082 = (_3330 * _3215.z) + _3155;
                        if (_3160 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3153 = _3080;
                            _3154 = _3081;
                            _3155 = _3082;
                            _3156 = _3083;
                            _3157 = _3084;
                            _3158 = _3085;
                            _3159 = _3160;
                        }
                    }
                    frontier_phi_71_pred = _3085;
                    frontier_phi_71_pred_1 = _3084;
                    frontier_phi_71_pred_2 = _3083;
                    frontier_phi_71_pred_3 = _3082;
                    frontier_phi_71_pred_4 = _3081;
                    frontier_phi_71_pred_5 = _3080;
                }
                _2858 = frontier_phi_71_pred;
                _2856 = frontier_phi_71_pred_1;
                _2854 = frontier_phi_71_pred_2;
                _2852 = frontier_phi_71_pred_3;
                _2850 = frontier_phi_71_pred_4;
                _2848 = frontier_phi_71_pred_5;
                uint _3015 = _3014 + 1u;
                if (_3015 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3008 = _2848;
                    _3009 = _2850;
                    _3010 = _2852;
                    _3011 = _2854;
                    _3012 = _2856;
                    _3013 = _2858;
                    _3014 = _3015;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2847 = _2848;
            _2849 = _2850;
            _2851 = _2852;
            _2853 = _2854;
            _2855 = _2856;
            _2857 = _2858;
        }
        uvec4 _2861 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2862 = _2861.z;
        uint _2864 = (_2862 >> 8u) & 15u;
        float _2976;
        float _2978;
        float _2980;
        float _2982;
        float _2984;
        float _2986;
        if (((4294967295u << _2864) & _2722) == 0u)
        {
            _2976 = _2847;
            _2978 = _2849;
            _2980 = _2851;
            _2982 = _2853;
            _2984 = _2855;
            _2986 = _2857;
        }
        else
        {
            float _3001 = inversesqrt(dot(vec3(_1799, _1800, _1801), vec3(_1799, _1800, _1801)));
            float _3002 = _3001 * _1799;
            float _3003 = _3001 * _1800;
            float _3004 = _3001 * _1801;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2864 < ((_2862 >> 12u) & 15u))
            {
                float _2977;
                float _2979;
                float _2981;
                float _2983;
                float _2985;
                float _2987;
                float _3136 = _2847;
                float _3137 = _2849;
                float _3138 = _2851;
                float _3139 = _2853;
                float _3140 = _2855;
                float _3141 = _2857;
                uint _3142 = _2864;
                uint _3151;
                bool _3152;
                for (;;)
                {
                    _3151 = texelFetch(g_lightClassification, int((((_2716 << 5u) + (_2702 << 9u)) + (_3142 << 2u)) >> 2u)).x;
                    _3152 = _3151 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3152)
                    {
                        frontier_phi_82_pred = _3141;
                        frontier_phi_82_pred_1 = _3140;
                        frontier_phi_82_pred_2 = _3139;
                        frontier_phi_82_pred_3 = _3138;
                        frontier_phi_82_pred_4 = _3137;
                        frontier_phi_82_pred_5 = _3136;
                    }
                    else
                    {
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3639;
                        float _3640;
                        float _3641;
                        float _3642;
                        float _3643;
                        float _3644;
                        float _3357 = _3136;
                        float _3358 = _3137;
                        float _3359 = _3138;
                        float _3360 = _3139;
                        float _3361 = _3140;
                        float _3362 = _3141;
                        uint _3363 = _3151;
                        uint _3364;
                        vec4 _3389;
                        float _3390;
                        vec4 _3405;
                        vec3 _3417;
                        vec4 _3432;
                        vec4 _3448;
                        float _3495;
                        bool _3496;
                        for (;;)
                        {
                            uint _3374 = ((_3142 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3363));
                            _3364 = (_3363 + 4294967295u) & _3363;
                            uint _3376 = _3374 * 40u;
                            _3389 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3376)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 3u)).x));
                            _3390 = _3389.w;
                            uint _3392 = (_3374 * 40u) + 4u;
                            _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            uint _3407 = (_3374 * 40u) + 8u;
                            _3417 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3407)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 2u)).x));
                            uint _3419 = (_3374 * 40u) + 16u;
                            _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            uint _3435 = (_3374 * 40u) + 20u;
                            _3448 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 3u)).x));
                            uint _3451 = (_3374 * 40u) + 24u;
                            vec4 _3464 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 3u)).x));
                            uint _3470 = (_3374 * 40u) + 28u;
                            vec4 _3483 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3470)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 3u)).x));
                            _3495 = fma(_1801, _3483.z, fma(_1800, _3483.y, _3483.x * _1799)) + _3483.w;
                            _3496 = !((fma(_1801, _3464.z, fma(_1800, _3464.y, _3464.x * _1799)) + _3464.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3496)
                            {
                                float _3523 = _3389.x - _1799;
                                float _3524 = _3389.y - _1800;
                                float _3525 = _3389.z - _1801;
                                float _3526 = dot(vec3(_3523, _3524, _3525), vec3(_3523, _3524, _3525));
                                float _3529 = inversesqrt(_3526);
                                float _3530 = _3529 * _3523;
                                float _3531 = _3529 * _3524;
                                float _3532 = _3529 * _3525;
                                float _3536 = 1.0 - (_3526 / (_3390 * _3390));
                                float _4703 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3537 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
                                float _3541 = sqrt(_3526) * _3405.w;
                                float _3543 = 1.39999997615814208984375 / (_3541 + 1.39999997615814208984375);
                                float _3544 = _3543 * _3543;
                                float _3547 = ((1.0 - _3544) * dot(vec3(_3530, _3531, _3532), vec3(_652, _655, _658))) + _3544;
                                float _3550 = _3541 * _3541;
                                float _3554 = (fma(_1801, _3432.z, fma(_1800, _3432.y, _3432.x * _1799)) + _3432.w) / _3495;
                                float _3555 = (fma(_1801, _3448.z, fma(_1800, _3448.y, _3448.x * _1799)) + _3448.w) / _3495;
                                float _3559 = 1.0 - dot(vec2(_3554, _3555), vec2(_3554, _3555));
                                float _4719 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                                float _3560 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3561 = _3560 * (((isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0))) * _3537) / ((_3550 * 0.699999988079071044921875) + 1.0));
                                float _3573 = exp2(log2(1.0 / ((_3550 * 3.5) + 5.0)) * 0.25);
                                float _3574 = 1.0 - _712;
                                float _3581 = sqrt(1.0 - ((1.0 - (_3574 * _3574)) * (1.0 - (_3573 * _3573))));
                                float _3582 = _3581 * _3581;
                                float _3583 = _3582 * _3582;
                                float _3584 = _3530 - _3002;
                                float _3585 = _3531 - _3003;
                                float _3586 = _3532 - _3004;
                                float _3590 = inversesqrt(dot(vec3(_3584, _3585, _3586), vec3(_3584, _3585, _3586)));
                                float _3594 = dot(vec3(_652, _655, _658), vec3((-0.0) - _3002, (-0.0) - _3003, (-0.0) - _3004));
                                float _4730 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                                float _3597 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                                float _3598 = dot(vec3(_652, _655, _658), vec3(_3590 * _3584, _3590 * _3585, _3590 * _3586));
                                float _4741 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3601 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                                float _3605 = ((_3601 * _3601) * (_3583 + (-1.0))) + 1.0;
                                float _3606 = _3543 * _3582;
                                float _3607 = _3606 * _3606;
                                float _3613 = ((1.0 - _3607) * dot(vec3(_652, _655, _658), vec3(_3530, _3531, _3532))) + _3607;
                                float _4752 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                                float _3614 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                                float _3615 = 1.0 - _3582;
                                float _3625 = (0.5 / (((_3614 * ((_3597 * _3615) + _3582)) + 9.9999999392252902907785028219223e-09) + (((_3614 * _3615) + _3582) * _3597))) * _3614;
                                float _4763 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                                float _3635 = (_3560 * _3537) * (((_3583 * 3.1415927410125732421875) * (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) / ((_3605 * _3605) * ((_3550 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3561 * _3405.z;
                                frontier_phi_88_pred_1 = _3561 * _3405.y;
                                frontier_phi_88_pred_2 = _3561 * _3405.x;
                                frontier_phi_88_pred_3 = _3635 * _3417.z;
                                frontier_phi_88_pred_4 = _3635 * _3417.y;
                                frontier_phi_88_pred_5 = _3635 * _3417.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3644 = frontier_phi_88_pred;
                            _3643 = frontier_phi_88_pred_1;
                            _3642 = frontier_phi_88_pred_2;
                            _3641 = frontier_phi_88_pred_3;
                            _3640 = frontier_phi_88_pred_4;
                            _3639 = frontier_phi_88_pred_5;
                            _3347 = _3642 + _3360;
                            _3348 = _3643 + _3361;
                            _3349 = _3644 + _3362;
                            _3344 = _3639 + _3357;
                            _3345 = _3640 + _3358;
                            _3346 = _3641 + _3359;
                            if (_3364 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3357 = _3344;
                                _3358 = _3345;
                                _3359 = _3346;
                                _3360 = _3347;
                                _3361 = _3348;
                                _3362 = _3349;
                                _3363 = _3364;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3349;
                        frontier_phi_82_pred_1 = _3348;
                        frontier_phi_82_pred_2 = _3347;
                        frontier_phi_82_pred_3 = _3346;
                        frontier_phi_82_pred_4 = _3345;
                        frontier_phi_82_pred_5 = _3344;
                    }
                    _2987 = frontier_phi_82_pred;
                    _2985 = frontier_phi_82_pred_1;
                    _2983 = frontier_phi_82_pred_2;
                    _2981 = frontier_phi_82_pred_3;
                    _2979 = frontier_phi_82_pred_4;
                    _2977 = frontier_phi_82_pred_5;
                    uint _3143 = _3142 + 1u;
                    if (_3143 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3136 = _2977;
                        _3137 = _2979;
                        _3138 = _2981;
                        _3139 = _2983;
                        _3140 = _2985;
                        _3141 = _2987;
                        _3142 = _3143;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2983;
                frontier_phi_63_64_ladder_1 = _2987;
                frontier_phi_63_64_ladder_2 = _2985;
                frontier_phi_63_64_ladder_3 = _2981;
                frontier_phi_63_64_ladder_4 = _2979;
                frontier_phi_63_64_ladder_5 = _2977;
            }
            else
            {
                frontier_phi_63_64_ladder = _2853;
                frontier_phi_63_64_ladder_1 = _2857;
                frontier_phi_63_64_ladder_2 = _2855;
                frontier_phi_63_64_ladder_3 = _2851;
                frontier_phi_63_64_ladder_4 = _2849;
                frontier_phi_63_64_ladder_5 = _2847;
            }
            _2976 = frontier_phi_63_64_ladder_5;
            _2978 = frontier_phi_63_64_ladder_4;
            _2980 = frontier_phi_63_64_ladder_3;
            _2982 = frontier_phi_63_64_ladder;
            _2984 = frontier_phi_63_64_ladder_2;
            _2986 = frontier_phi_63_64_ladder_1;
        }
        float _2991 = isnan(1.0) ? _696 : (isnan(_696) ? 1.0 : min(_696, 1.0));
        _2735 = (_2991 * _2982) + _2266;
        _2737 = (_2991 * _2984) + _2268;
        _2739 = (_2991 * _2986) + _2270;
        _2741 = ((_2976 * 0.039999999105930328369140625) * _2991) + _2589;
        _2743 = ((_2978 * 0.039999999105930328369140625) * _2991) + _2591;
        _2745 = ((_2980 * 0.039999999105930328369140625) * _2991) + _2593;
    }
    else
    {
        _2735 = _2266;
        _2737 = _2268;
        _2739 = _2270;
        _2741 = _2589;
        _2743 = _2591;
        _2745 = _2593;
    }
    uint _2751 = _672 + uint(cbMatDynParam._m0[0u].w);
    float _2757 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].y;
    float _2763 = (((((_2757 * cbMtdParam._m0[10u].x) * _414.x) * _437) * _512) * (((1.0 - _491) * cbMtdParam._m0[16u].y) + _491)) * cbInstanceData._m0[_2751].x;
    float _2769 = (((((_2757 * cbMtdParam._m0[10u].y) * _414.y) * _437) * _512) * (((1.0 - _493) * cbMtdParam._m0[16u].y) + _493)) * cbInstanceData._m0[_2751].y;
    float _2775 = (((((_2757 * cbMtdParam._m0[10u].z) * _414.z) * _437) * _512) * (((1.0 - _495) * cbMtdParam._m0[16u].y) + _495)) * cbInstanceData._m0[_2751].z;
    float _4779 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _4790 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _4801 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _2792 = (((isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2735 + ((isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))) * _696))) + ((_2741 + ((isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))) * _1533)) * cbPerFrame._m0[3u].x)) + _2763;
    float _2794 = (_2769 + ((_2743 + ((isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))) * _1533)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * (_2737 + ((isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))) * _696)));
    float _2796 = (_2775 + ((_2745 + ((isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))) * _1533)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0))) * (_2739 + ((isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))) * _696)));
    float _2797 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
    float _2798 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
    float _2799 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
    float _2805 = cbMtdParam._m0[2u].x * _2763;
    float _2806 = cbMtdParam._m0[2u].y * _2769;
    float _2807 = cbMtdParam._m0[2u].z * _2775;
    float _4827 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2809 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
    uint _2810 = _671 + 6u;
    float _2818 = _633 / cbSceneParam._m0[86u].x;
    float _2819 = _634 / cbSceneParam._m0[86u].y;
    vec4 _2833 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2818, _2819, (log2((isnan(cbSceneParam._m0[77u].w) ? _555 : (isnan(_555) ? cbSceneParam._m0[77u].w : min(_555, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2835 = _2833.x;
    float _2836 = _2833.y;
    float _2837 = _2833.z;
    float _2838 = _2833.w;
    float _2909;
    float _2911;
    float _2913;
    float _2915;
    if (_555 > cbSceneParam._m0[78u].w)
    {
        float _2872 = isnan(_555) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _555 : min(cbSceneParam._m0[80u].w, _555));
        float _2873 = _2872 / _555;
        float _2884 = _2873 * _606;
        float _2885 = _607 * _2873;
        float _2886 = (-0.0) - _2885;
        float _2887 = _2873 * _608;
        float _2889 = (cbSceneParam._m0[77u].w * _2886) / _2872;
        float _2890 = _2889 + cbSceneParam._m0[79u].w;
        float _2891 = cbSceneParam._m0[79u].w - _2885;
        float _2897 = sqrt(((_2884 * _2884) + (_2885 * _2885)) + (_2887 * _2887));
        float _2900 = (1.0 - (cbSceneParam._m0[77u].w / _2872)) * _2897;
        float _2905 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2907 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3093;
        if (abs((_2886 - _2889) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3093 = ((((_2890 > 0.0) ? exp2(_2905 * _2890) : (2.0 - exp2(_2907 * _2890))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2900;
        }
        else
        {
            float _3037 = 1.0 / cbSceneParam._m0[80u].x;
            float _3038 = isnan(_2891) ? _2890 : (isnan(_2890) ? _2891 : max(_2890, _2891));
            float _3039 = isnan(_2891) ? _2890 : (isnan(_2890) ? _2891 : min(_2890, _2891));
            float _3048 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : min(_3038, 0.0));
            float _3049 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : min(_3039, 0.0));
            _3093 = ((abs(_2897 / _2886) * cbSceneParam._m0[80u].y) * ((((_3048 - _3049) * 2.0) - ((exp2(_2905 * (isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0)))) - exp2(_2905 * (isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0))))) * _3037)) - ((exp2(_2907 * _3048) - exp2(_2907 * _3049)) * _3037))) + (_2900 * cbSceneParam._m0[80u].z);
        }
        vec4 _3095 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2818, _2819, 1.0), 0.0);
        float _3104 = exp2((_3093 * (-1.44269502162933349609375)) * (1.0 - _3095.w));
        float _3105 = log2(_3104);
        float _3121 = log2(_2838);
        _2909 = (exp2(_3121 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3105 * cbSceneParam._m0[78u].x)) * _3095.x) / cbSceneParam._m0[78u].x)) + _2835;
        _2911 = (exp2(_3121 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3105 * cbSceneParam._m0[78u].y)) * _3095.y) / cbSceneParam._m0[78u].y)) + _2836;
        _2913 = (exp2(_3121 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3105 * cbSceneParam._m0[78u].z)) * _3095.z) / cbSceneParam._m0[78u].z)) + _2837;
        _2915 = _3104 * _2838;
    }
    else
    {
        _2909 = _2835;
        _2911 = _2836;
        _2913 = _2837;
        _2915 = _2838;
    }
    bool _3131;
    vec4 _2925;
    vec4 _2947;
    float _2949;
    float _2953;
    float _2954;
    float _2955;
    float _2958;
    float _2961;
    float _2964;
    float _2965;
    bool _2975;
    for (;;)
    {
        _2925 = cbMatDynParam._m0[0u];
        float _2927 = roundEven(_2925.y);
        bool _2928 = _2927 == 3.0;
        float _2929 = log2(_2915);
        float _2933 = exp2(_2929 * cbSceneParam._m0[78u].x);
        float _2934 = exp2(_2929 * cbSceneParam._m0[78u].y);
        float _2935 = exp2(_2929 * cbSceneParam._m0[78u].z);
        float _2936 = _2933 * _2797;
        float _2937 = _2934 * _2798;
        float _2938 = _2935 * _2799;
        float _2945 = _622 + (-0.5);
        _2947 = cbMtdParam._m0[1u];
        _2949 = _2947.y * _2945;
        float _2952 = (_2927 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2953 = _2952 * (_2928 ? _2936 : (_2936 + (cbSceneParam._m0[72u].w * _2909)));
        _2954 = _2952 * (_2928 ? _2937 : (_2937 + (cbSceneParam._m0[72u].w * _2911)));
        _2955 = _2952 * (_2928 ? _2938 : (_2938 + (cbSceneParam._m0[72u].w * _2913)));
        _2958 = ((_2805 * _2809) * _2933) * _2952;
        _2961 = ((_2806 * _2809) * _2934) * _2952;
        _2964 = ((_2807 * _2809) * _2935) * _2952;
        _2965 = _2945 * 0.999000012874603271484375;
        _2975 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2975)
        {
            if ((cbInstanceData._m0[_671 + 7u].x + _2965) < 0.5)
            {
                _3131 = true;
                break;
            }
        }
        uint _3072 = _672 + uint(_2925.w);
        if ((cbInstanceData._m0[_3072].w < 1.0) && ((cbInstanceData._m0[_3072].w + _2965) < 0.5))
        {
            _3131 = true;
            break;
        }
        if ((_2949 + 1.0) < _2947.x)
        {
            _3131 = true;
            break;
        }
        _3131 = false;
        break;
    }
    float _3335;
    if (_3131)
    {
        discard_state = true;
        _3335 = 0.0;
    }
    else
    {
        _3335 = cbInstanceData._m0[_2810].w;
    }
    SV_Target.x = _2953;
    SV_Target.y = _2954;
    SV_Target.z = _2955;
    SV_Target.w = _3335;
    SV_Target_1.x = _2958;
    SV_Target_1.y = _2961;
    SV_Target_1.z = _2964;
    SV_Target_1.w = cbInstanceData._m0[_2810].w;
    discard_exit();
}


