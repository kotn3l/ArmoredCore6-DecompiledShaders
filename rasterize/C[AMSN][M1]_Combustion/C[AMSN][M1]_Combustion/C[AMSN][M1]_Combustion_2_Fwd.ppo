#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_21;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1002;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _239 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _245 = _239.x * cbMtdParam._m0[9u].x;
    float _246 = _239.y * cbMtdParam._m0[9u].y;
    float _247 = _239.z * cbMtdParam._m0[9u].z;
    vec4 _260 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    vec4 _275 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _277 = _275.x;
    vec4 _290 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _294 = _290.z;
    float _298 = (_290.x * 2.0) + (-1.0);
    float _300 = (_290.y * 2.0) + (-1.0);
    float _301 = dot(vec2(_298, _300), vec2(_298, _300));
    float _3386 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _307 = sqrt(1.0 - (isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0))));
    vec4 _347 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _361 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3397 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _362 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
    float _370 = (((_362 * _362) * (3.0 - (_362 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _379 = cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x;
    float _387 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3408 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
    float _392 = (_388 * _388) * (3.0 - (_388 * 2.0));
    float _393 = _392 * cbMtdParam._m0[16u].w;
    float _394 = _392 * cbMtdParam._m0[17u].x;
    float _395 = sin(_379);
    float _396 = cos(_379);
    float _397 = TEXCOORD.z - _393;
    float _398 = TEXCOORD.w - _394;
    vec4 _418 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_393 + fma(_398, (-0.0) - _395, _397 * _396))) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (fma(_398, _396, _397 * _395) + _394)) + cbTextureTilingScale._m0[0u].w));
    float _424 = (cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].w) * _418.x;
    float _426 = (cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].w) * _418.y;
    float _428 = (cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].w) * _418.z;
    float _446 = (TEXCOORD_5.x - (((_260.x + 0.00999999977648258209228515625) * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[16u].z)) * (cbMtdParam._m0[13u].x + 1.0);
    float _3419 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _447 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    float _450 = fma(_307, _210 * NORMAL.x, fma(_300, _217 * TANGENT.x, (_203 * _195) * _298));
    float _453 = fma(_307, _210 * NORMAL.y, fma(_300, _217 * TANGENT.y, (_203 * _196) * _298));
    float _456 = fma(_307, _210 * NORMAL.z, fma(_300, _217 * TANGENT.z, (_203 * _197) * _298));
    float _460 = inversesqrt(dot(vec3(_450, _453, _456), vec3(_450, _453, _456)));
    float _461 = _460 * _450;
    float _462 = _460 * _453;
    float _463 = _460 * _456;
    float _3430 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _464 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
    float _3441 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3452 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3463 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3474 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _468 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
    float _484 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _525 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _535 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _525);
    float _536 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _525);
    float _537 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _525);
    float _541 = inversesqrt(dot(vec3(_535, _536, _537), vec3(_535, _536, _537)));
    float _542 = _535 * _541;
    float _543 = _536 * _541;
    float _544 = _537 * _541;
    float _550 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _551 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _569 = fma(_463, cbSceneParam._m0[5u].z, fma(_462, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _461));
    float _572 = fma(_463, cbSceneParam._m0[6u].z, fma(_462, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _461));
    float _575 = fma(_463, cbSceneParam._m0[7u].z, fma(_462, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _461));
    uint _588 = uint(roundEven(NORMAL.w)) * 13u;
    uint _589 = _588 + 9u;
    uint _590 = _589 + uint(cbMatDynParam._m0[0u].w);
    float _596 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0)))) * cbInstanceData._m0[_590].x;
    float _597 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0)))) * cbInstanceData._m0[_590].y;
    float _598 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0)))) * cbInstanceData._m0[_590].z;
    float _3485 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _599 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    float _3496 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _600 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    float _3507 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _601 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    float _602 = 1.0 - _468;
    float _603 = _599 * _602;
    float _604 = _600 * _602;
    float _605 = _601 * _602;
    float _610 = (_599 + (-0.039999999105930328369140625)) * _468;
    float _611 = (_600 + (-0.039999999105930328369140625)) * _468;
    float _612 = (_601 + (-0.039999999105930328369140625)) * _468;
    float _613 = _610 + 0.039999999105930328369140625;
    float _615 = _611 + 0.039999999105930328369140625;
    float _616 = _612 + 0.039999999105930328369140625;
    vec4 _625 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _550, cbSceneParam._m0[86u].y * _551));
    float _628 = _625.x * TEXCOORD_5.w;
    float _629 = dot(vec3(_461, _462, _463), vec3(_542, _543, _544));
    float _632 = _629 * 2.0;
    float _636 = (_632 * _461) - _542;
    float _637 = (_632 * _462) - _543;
    float _638 = (_632 * _463) - _544;
    float _642 = abs(dot(vec3(_542, _543, _544), vec3(_461, _462, _463)));
    float _3518 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _644 = sqrt(_464);
    float _656 = exp2((_644 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_644 * 3.0));
    float _662 = (1.0 - _656) * ((_644 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _663 = _656 * _644;
    float _691 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _695 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _699 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1001;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _726 = fma(_699, cbModelParam._m0[26u].z, fma(_695, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _691));
        float _730 = fma(_699, cbModelParam._m0[27u].z, fma(_695, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _691));
        float _734 = fma(_699, cbModelParam._m0[28u].z, fma(_695, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _691));
        float _759 = _691 + _461;
        float _760 = _695 + _462;
        float _761 = _699 + _463;
        float _771 = fma(_761, cbModelParam._m0[26u].z, fma(_760, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _759)) - _726;
        float _772 = fma(_761, cbModelParam._m0[27u].z, fma(_760, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _759)) - _730;
        float _773 = fma(_761, cbModelParam._m0[28u].z, fma(_760, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _759)) - _734;
        float _777 = inversesqrt(dot(vec3(_771, _772, _773), vec3(_771, _772, _773)));
        float _790 = ((_777 * _771) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_726 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _791 = ((_777 * _772) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_730 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _792 = ((_777 * _773) / cbModelParam._m0[34u].z) + ((((((_734 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _795 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_790, _791, _792), 0.0);
        vec4 _802 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_790, _791, _792), 0.0);
        vec4 _809 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_790, _791, _792), 0.0);
        vec4 _816 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_790, _791, _792), 0.0);
        float _829 = exp2((_795.w + (-0.5)) * 20.0) * 2.0;
        float _830 = _829 * (_795.x + (-0.5));
        float _831 = _829 * (_795.y + (-0.5));
        float _832 = _829 * (_795.z + (-0.5));
        float _839 = exp2((_802.w + (-0.5)) * 20.0) * 2.0;
        float _840 = _839 * (_802.x + (-0.5));
        float _841 = _839 * (_802.y + (-0.5));
        float _842 = _839 * (_802.z + (-0.5));
        float _849 = exp2((_809.w + (-0.5)) * 20.0) * 2.0;
        float _850 = _849 * (_809.x + (-0.5));
        float _851 = _849 * (_809.y + (-0.5));
        float _852 = _849 * (_809.z + (-0.5));
        float _859 = exp2((_816.w + (-0.5)) * 20.0) * 2.0;
        float _860 = _859 * (_816.x + (-0.5));
        float _861 = _859 * (_816.y + (-0.5));
        float _862 = _859 * (_816.z + (-0.5));
        float _863 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _864 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _865 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _866 = _830 * 0.5;
        float _867 = _840 * 0.5;
        float _868 = _850 * 0.5;
        float _869 = dot(vec3(_866, _867, _868), vec3(_866, _867, _868));
        float _874 = (_869 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_869);
        float _883 = (dot(vec3(_461, _462, _463), vec3(_874 * _866, _874 * _867, _874 * _868)) + 1.0) * 0.5;
        float _3544 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _893 = sqrt(((_867 * _867) + (_866 * _866)) + (_868 * _868)) / (_863 + 9.9999997473787516355514526367188e-06);
        float _3555 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _895 = _894 * 2.0;
        float _899 = (1.0 - _894) / (_894 + 1.0);
        float _3566 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _900 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _909 = ((((1.0 - _900) * (_895 + 2.0)) * exp2(log2(isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * (_895 + 1.0))) + _900) * _863;
        float _910 = _831 * 0.5;
        float _911 = _841 * 0.5;
        float _912 = _851 * 0.5;
        float _913 = dot(vec3(_910, _911, _912), vec3(_910, _911, _912));
        float _918 = (_913 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_913);
        float _926 = (dot(vec3(_461, _462, _463), vec3(_918 * _910, _918 * _911, _918 * _912)) + 1.0) * 0.5;
        float _3577 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _935 = sqrt(((_911 * _911) + (_910 * _910)) + (_912 * _912)) / (_864 + 9.9999997473787516355514526367188e-06);
        float _3588 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _937 = _936 * 2.0;
        float _941 = (1.0 - _936) / (_936 + 1.0);
        float _3599 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _951 = ((((1.0 - _942) * (_937 + 2.0)) * exp2(log2(isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * (_937 + 1.0))) + _942) * _864;
        float _952 = _832 * 0.5;
        float _953 = _842 * 0.5;
        float _954 = _852 * 0.5;
        float _955 = dot(vec3(_952, _953, _954), vec3(_952, _953, _954));
        float _960 = (_955 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_955);
        float _968 = (dot(vec3(_461, _462, _463), vec3(_960 * _952, _960 * _953, _960 * _954)) + 1.0) * 0.5;
        float _3610 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _977 = sqrt(((_953 * _953) + (_952 * _952)) + (_954 * _954)) / (_865 + 9.9999997473787516355514526367188e-06);
        float _3621 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _979 = _978 * 2.0;
        float _983 = (1.0 - _978) / (_978 + 1.0);
        float _3632 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _993 = ((((1.0 - _984) * (_979 + 2.0)) * exp2(log2(isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * (_979 + 1.0))) + _984) * _865;
        _1001 = _832;
        _1003 = _831;
        _1004 = _830;
        _1005 = _842;
        _1006 = _841;
        _1007 = _840;
        _1008 = _852;
        _1009 = _851;
        _1010 = _850;
        _1011 = _865;
        _1012 = _864;
        _1013 = _863;
        _1014 = cbModelParam._m0[36u].z * (isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0)));
        _1015 = cbModelParam._m0[36u].z * (isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0)));
        _1016 = cbModelParam._m0[36u].z * (isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0)));
    }
    else
    {
        _1001 = _1002;
        _1003 = _1002;
        _1004 = _1002;
        _1005 = _1002;
        _1006 = _1002;
        _1007 = _1002;
        _1008 = _1002;
        _1009 = _1002;
        _1010 = _1002;
        _1011 = _1002;
        _1012 = _1002;
        _1013 = _1002;
        _1014 = 0.0;
        _1015 = 0.0;
        _1016 = 0.0;
    }
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1042 = fma(_699, cbModelParam._m0[30u].z, fma(_695, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _691));
        float _1046 = fma(_699, cbModelParam._m0[31u].z, fma(_695, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _691));
        float _1050 = fma(_699, cbModelParam._m0[32u].z, fma(_695, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _691));
        float _1073 = _691 + _461;
        float _1074 = _695 + _462;
        float _1075 = _699 + _463;
        float _1085 = fma(_1075, cbModelParam._m0[30u].z, fma(_1074, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1073)) - _1042;
        float _1086 = fma(_1075, cbModelParam._m0[31u].z, fma(_1074, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1073)) - _1046;
        float _1087 = fma(_1075, cbModelParam._m0[32u].z, fma(_1074, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1073)) - _1050;
        float _1091 = inversesqrt(dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087)));
        float _1104 = ((_1091 * _1085) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1042 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1105 = ((_1091 * _1086) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1046 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1106 = ((_1091 * _1087) / cbModelParam._m0[35u].z) + ((((((_1050 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        float _1141 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1108.x + (-0.5));
        float _1143 = _1141 * (_1108.y + (-0.5));
        float _1144 = _1141 * (_1108.z + (-0.5));
        float _1151 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1115.x + (-0.5));
        float _1153 = _1151 * (_1115.y + (-0.5));
        float _1154 = _1151 * (_1115.z + (-0.5));
        float _1161 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1122.x + (-0.5));
        float _1163 = _1161 * (_1122.y + (-0.5));
        float _1164 = _1161 * (_1122.z + (-0.5));
        float _1171 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1129.x + (-0.5));
        float _1173 = _1171 * (_1129.y + (-0.5));
        float _1174 = _1171 * (_1129.z + (-0.5));
        float _1175 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = _1142 * 0.5;
        float _1179 = _1152 * 0.5;
        float _1180 = _1162 * 0.5;
        float _1181 = dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180));
        float _1186 = (_1181 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1181);
        float _1194 = (dot(vec3(_461, _462, _463), vec3(_1186 * _1178, _1186 * _1179, _1186 * _1180)) + 1.0) * 0.5;
        float _3673 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1203 = sqrt(((_1179 * _1179) + (_1178 * _1178)) + (_1180 * _1180)) / (_1175 + 9.9999997473787516355514526367188e-06);
        float _3684 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1205 = _1204 * 2.0;
        float _1209 = (1.0 - _1204) / (_1204 + 1.0);
        float _3695 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1219 = ((((1.0 - _1210) * (_1205 + 2.0)) * exp2(log2(isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * (_1205 + 1.0))) + _1210) * _1175;
        float _1220 = _1143 * 0.5;
        float _1221 = _1153 * 0.5;
        float _1222 = _1163 * 0.5;
        float _1223 = dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222));
        float _1228 = (_1223 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1223);
        float _1236 = (dot(vec3(_461, _462, _463), vec3(_1228 * _1220, _1228 * _1221, _1228 * _1222)) + 1.0) * 0.5;
        float _3706 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1245 = sqrt(((_1221 * _1221) + (_1220 * _1220)) + (_1222 * _1222)) / (_1176 + 9.9999997473787516355514526367188e-06);
        float _3717 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1247 = _1246 * 2.0;
        float _1251 = (1.0 - _1246) / (_1246 + 1.0);
        float _3728 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1261 = ((((1.0 - _1252) * (_1247 + 2.0)) * exp2(log2(isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * (_1247 + 1.0))) + _1252) * _1176;
        float _1262 = _1144 * 0.5;
        float _1263 = _1154 * 0.5;
        float _1264 = _1164 * 0.5;
        float _1265 = dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264));
        float _1270 = (_1265 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1265);
        float _1278 = (dot(vec3(_461, _462, _463), vec3(_1270 * _1262, _1270 * _1263, _1270 * _1264)) + 1.0) * 0.5;
        float _3739 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1287 = sqrt(((_1263 * _1263) + (_1262 * _1262)) + (_1264 * _1264)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _3750 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1289 = _1288 * 2.0;
        float _1293 = (1.0 - _1288) / (_1288 + 1.0);
        float _3761 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1303 = ((((1.0 - _1294) * (_1289 + 2.0)) * exp2(log2(isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * (_1289 + 1.0))) + _1294) * _1177;
        _1311 = _1144;
        _1312 = _1143;
        _1313 = _1142;
        _1314 = _1154;
        _1315 = _1153;
        _1316 = _1152;
        _1317 = _1164;
        _1318 = _1163;
        _1319 = _1162;
        _1320 = _1177;
        _1321 = _1176;
        _1322 = _1175;
        _1323 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)));
        _1324 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)));
        _1325 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)));
    }
    else
    {
        _1311 = _1002;
        _1312 = _1002;
        _1313 = _1002;
        _1314 = _1002;
        _1315 = _1002;
        _1316 = _1002;
        _1317 = _1002;
        _1318 = _1002;
        _1319 = _1002;
        _1320 = _1002;
        _1321 = _1002;
        _1322 = _1002;
        _1323 = 0.0;
        _1324 = 0.0;
        _1325 = 0.0;
    }
    float _1335 = (cbModelParam._m0[1u].x * (_1323 - _1014)) + _1014;
    float _1336 = (cbModelParam._m0[1u].x * (_1324 - _1015)) + _1015;
    float _1337 = (cbModelParam._m0[1u].x * (_1325 - _1016)) + _1016;
    float _1358 = fma(_1337, cbSceneParam._m0[89u].z, fma(_1336, cbSceneParam._m0[89u].y, _1335 * cbSceneParam._m0[89u].x));
    float _1361 = fma(_1337, cbSceneParam._m0[90u].z, fma(_1336, cbSceneParam._m0[90u].y, _1335 * cbSceneParam._m0[90u].x));
    float _1364 = fma(_1337, cbSceneParam._m0[91u].z, fma(_1336, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1335));
    float _1379 = _636 * 0.5;
    float _1380 = _637 * 0.5;
    float _1381 = _638 * 0.5;
    float _1382 = dot(vec4(_1379, _1380, _1381, 1.0), vec4(_1313, _1316, _1319, _1322));
    float _1385 = dot(vec4(_1379, _1380, _1381, 1.0), vec4(_1312, _1315, _1318, _1321));
    float _1388 = dot(vec4(_1379, _1380, _1381, 1.0), vec4(_1311, _1314, _1317, _1320));
    float _1422;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1395 = dot(vec4(_1379, _1380, _1381, 1.0), vec4(_1001, _1005, _1008, _1011));
        float _1399 = dot(vec4(_1379, _1380, _1381, 1.0), vec4(_1003, _1006, _1009, _1012));
        float _1403 = dot(vec4(_1379, _1380, _1381, 1.0), vec4(_1004, _1007, _1010, _1013));
        float _1410 = dot(vec4(cbModelParam._m0[39u]), vec4(_1379, _1380, _1381, 1.0));
        _1422 = dot(vec3(isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)), isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)), isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1410) ? 0.0 : (isnan(0.0) ? _1410 : max(0.0, _1410))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1422 = 1.0;
    }
    float _1433;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1424 = dot(vec4(cbModelParam._m0[40u]), vec4(_1379, _1380, _1381, 1.0));
        _1433 = dot(vec3(isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)), isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)), isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1424) ? 0.0 : (isnan(0.0) ? _1424 : max(0.0, _1424))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1433 = 1.0;
    }
    float _1437 = (_1433 * cbModelParam._m0[1u].x) + (_1422 * (1.0 - cbModelParam._m0[1u].x));
    float _1447 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _464);
    float _1448 = isnan(_1447) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1447 : min(cbModelParam._m0[25u].z, _1447));
    float _1528;
    float _1530;
    float _1532;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1495 = fma(_699, cbModelParam._m0[13u].z, fma(_695, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _691)) + cbModelParam._m0[13u].w;
        float _1499 = fma(_699, cbModelParam._m0[14u].z, fma(_695, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _691)) + cbModelParam._m0[14u].w;
        float _1503 = fma(_699, cbModelParam._m0[15u].z, fma(_695, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _691)) + cbModelParam._m0[15u].w;
        float _1506 = fma(_638, cbModelParam._m0[13u].z, fma(_637, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _636));
        float _1509 = fma(_638, cbModelParam._m0[14u].z, fma(_637, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _636));
        float _1512 = fma(_638, cbModelParam._m0[15u].z, fma(_637, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _636));
        float _1540;
        if (_1506 > 0.0)
        {
            _1540 = abs((1.0 - _1495) / _1506);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1495 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1540 = frontier_phi_14_12_ladder;
        }
        float _1745;
        if (_1509 > 0.0)
        {
            _1745 = abs((1.0 - _1499) / _1509);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1499 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1745 = frontier_phi_23_19_ladder;
        }
        float _1999;
        if (_1512 > 0.0)
        {
            _1999 = abs((1.0 - _1503) / _1512);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1503 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1999 = frontier_phi_35_30_ladder;
        }
        float _2001 = isnan(_1745) ? _1540 : (isnan(_1540) ? _1745 : min(_1540, _1745));
        float _2002 = isnan(_1999) ? _2001 : (isnan(_2001) ? _1999 : min(_2001, _1999));
        float _2006 = (_2002 * _1506) + _1495;
        float _2007 = (_2002 * _1509) + _1499;
        float _2008 = (_2002 * _1512) + _1503;
        float _2009 = _2002 * 9.9999997473787516355514526367188e-05;
        float _2011 = (-1.0) - _2009;
        float _2013 = _2009 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2008 > _2013) || ((_2008 < _2011) || ((_2007 > _2013) || ((_2007 < _2011) || ((_2006 < _2011) || (_2006 > _2013))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2136 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2008, cbModelParam._m0[9u].z, fma(_2007, cbModelParam._m0[9u].y, _2006 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2008, cbModelParam._m0[10u].z, fma(_2007, cbModelParam._m0[10u].y, _2006 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2008, cbModelParam._m0[11u].z, fma(_2007, cbModelParam._m0[11u].y, _2006 * cbModelParam._m0[11u].x))), _1448);
            frontier_phi_13_35_ladder = _2136.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2136.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2136.x * cbModelParam._m0[1u].y;
        }
        _1528 = frontier_phi_13_35_ladder_2;
        _1530 = frontier_phi_13_35_ladder_1;
        _1532 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1516 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_636, _637, _638), _1448);
        _1528 = _1516.x * cbModelParam._m0[1u].y;
        _1530 = _1516.y * cbModelParam._m0[1u].y;
        _1532 = _1516.z * cbModelParam._m0[1u].y;
    }
    float _1536 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _464);
    float _1537 = isnan(_1536) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1536 : min(cbModelParam._m0[25u].w, _1536));
    float _1628;
    float _1630;
    float _1632;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1592 = fma(_699, cbModelParam._m0[21u].z, fma(_695, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _691)) + cbModelParam._m0[21u].w;
        float _1596 = fma(_699, cbModelParam._m0[22u].z, fma(_695, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _691)) + cbModelParam._m0[22u].w;
        float _1600 = fma(_699, cbModelParam._m0[23u].z, fma(_695, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _691)) + cbModelParam._m0[23u].w;
        float _1603 = fma(_638, cbModelParam._m0[21u].z, fma(_637, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _636));
        float _1606 = fma(_638, cbModelParam._m0[22u].z, fma(_637, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _636));
        float _1609 = fma(_638, cbModelParam._m0[23u].z, fma(_637, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _636));
        float _1750;
        if (_1603 > 0.0)
        {
            _1750 = abs((1.0 - _1592) / _1603);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1592 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1750 = frontier_phi_25_21_ladder;
        }
        float _2026;
        if (_1606 > 0.0)
        {
            _2026 = abs((1.0 - _1596) / _1606);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1596 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2026 = frontier_phi_37_32_ladder;
        }
        float _2239;
        if (_1609 > 0.0)
        {
            _2239 = abs((1.0 - _1600) / _1609);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1600 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2239 = frontier_phi_46_43_ladder;
        }
        float _2241 = isnan(_2026) ? _1750 : (isnan(_1750) ? _2026 : min(_1750, _2026));
        float _2242 = isnan(_2239) ? _2241 : (isnan(_2241) ? _2239 : min(_2241, _2239));
        float _2246 = (_2242 * _1603) + _1592;
        float _2247 = (_2242 * _1606) + _1596;
        float _2248 = (_2242 * _1609) + _1600;
        float _2249 = _2242 * 9.9999997473787516355514526367188e-05;
        float _2250 = (-1.0) - _2249;
        float _2252 = _2249 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2248 > _2252) || ((_2248 < _2250) || ((_2247 > _2252) || ((_2247 < _2250) || ((_2246 < _2250) || (_2246 > _2252))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2492 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2248, cbModelParam._m0[17u].z, fma(_2247, cbModelParam._m0[17u].y, _2246 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2248, cbModelParam._m0[18u].z, fma(_2247, cbModelParam._m0[18u].y, _2246 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2248, cbModelParam._m0[19u].z, fma(_2247, cbModelParam._m0[19u].y, _2246 * cbModelParam._m0[19u].x))), _1537);
            frontier_phi_22_46_ladder = _2492.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2492.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2492.x * cbModelParam._m0[1u].z;
        }
        _1628 = frontier_phi_22_46_ladder_2;
        _1630 = frontier_phi_22_46_ladder_1;
        _1632 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1612 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_636, _637, _638), _1537);
        _1628 = _1612.x * cbModelParam._m0[1u].z;
        _1630 = _1612.y * cbModelParam._m0[1u].z;
        _1632 = _1612.z * cbModelParam._m0[1u].z;
    }
    float _1645 = (((_662 * _613) + _663) * _628) * ((cbModelParam._m0[1u].w * (_1628 - _1528)) + _1528);
    float _1647 = (((_662 * _615) + _663) * _628) * ((cbModelParam._m0[1u].w * (_1630 - _1530)) + _1530);
    float _1649 = (((_662 * _616) + _663) * _628) * ((cbModelParam._m0[1u].w * (_1632 - _1532)) + _1532);
    float _1652 = fma(_1649, cbSceneParam._m0[89u].z, fma(_1647, cbSceneParam._m0[89u].y, _1645 * cbSceneParam._m0[89u].x));
    float _1655 = fma(_1649, cbSceneParam._m0[90u].z, fma(_1647, cbSceneParam._m0[90u].y, _1645 * cbSceneParam._m0[90u].x));
    float _1658 = fma(_1649, cbSceneParam._m0[91u].z, fma(_1647, cbSceneParam._m0[91u].y, _1645 * cbSceneParam._m0[91u].x));
    uvec4 _1668 = floatBitsToUint(cbInstanceData._m0[_588 + 5u]);
    uint _1670 = _1668.x * 14u;
    uint _1671 = _1670 + 13u;
    float _1678 = _628 + (-1.0);
    float _1683 = (cbLight._m0[_1671].x * _1678) + 1.0;
    float _1684 = (cbLight._m0[_1671].y * _1678) + 1.0;
    float _1685 = (cbLight._m0[_1671].z * _1678) + 1.0;
    float _1686 = (cbLight._m0[_1671].w * _1678) + 1.0;
    uint _1687 = _1670 + 5u;
    float _1693 = isnan(1.0) ? _1684 : (isnan(_1684) ? 1.0 : min(_1684, 1.0));
    uint _1697 = _1670 + 4u;
    float _1703 = isnan(1.0) ? _1683 : (isnan(_1683) ? 1.0 : min(_1683, 1.0));
    uint _1707 = _1670 | 1u;
    float _1718 = dot(vec3(cbLight._m0[_1670].xyz), vec3(_461, _462, _463));
    float _1721 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_461, _462, _463));
    float _3897 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
    float _3908 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
    float _1726 = (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * 0.3183098733425140380859375;
    float _1728 = (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * 0.3183098733425140380859375;
    float _1735 = ((cbLight._m0[_1687].x * _1693) * _1728) + ((cbLight._m0[_1697].x * _1703) * _1726);
    float _1736 = ((_1693 * cbLight._m0[_1687].y) * _1728) + ((_1703 * cbLight._m0[_1697].y) * _1726);
    float _1737 = ((_1693 * cbLight._m0[_1687].z) * _1728) + ((_1703 * cbLight._m0[_1697].z) * _1726);
    uvec4 _1742 = floatBitsToUint(cbLight._m0[_1670 + 12u]);
    bool _1744 = _1742.x == 0u;
    float _1755;
    float _1757;
    float _1759;
    if (_1744)
    {
        _1755 = _1735;
        _1757 = _1736;
        _1759 = _1737;
    }
    else
    {
        uint _1763 = _1670 + 6u;
        float _1779 = (dot(vec3(cbLight._m0[_1670 + 2u].xyz), vec3(_461, _462, _463)) * 0.5) + 0.5;
        float _1780 = _1779 * _1779;
        float _3919 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1781 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1782 = isnan(1.0) ? _1685 : (isnan(_1685) ? 1.0 : min(_1685, 1.0));
        _1755 = (((cbLight._m0[_1763].x * 0.3183098733425140380859375) * _1781) * _1782) + _1735;
        _1757 = (((cbLight._m0[_1763].y * 0.3183098733425140380859375) * _1781) * _1782) + _1736;
        _1759 = (((cbLight._m0[_1763].z * 0.3183098733425140380859375) * _1781) * _1782) + _1737;
    }
    bool _1762 = _1742.y == 0u;
    float _1800;
    float _1802;
    float _1804;
    if (_1762)
    {
        _1800 = _1755;
        _1802 = _1757;
        _1804 = _1759;
    }
    else
    {
        uint _1970 = _1670 + 7u;
        float _1986 = (dot(vec3(cbLight._m0[_1670 + 3u].xyz), vec3(_461, _462, _463)) * 0.5) + 0.5;
        float _1987 = _1986 * _1986;
        float _3935 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
        float _1988 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1989 = isnan(1.0) ? _1686 : (isnan(_1686) ? 1.0 : min(_1686, 1.0));
        _1800 = (((cbLight._m0[_1970].x * 0.3183098733425140380859375) * _1988) * _1989) + _1755;
        _1802 = (((cbLight._m0[_1970].y * 0.3183098733425140380859375) * _1988) * _1989) + _1757;
        _1804 = (((cbLight._m0[_1970].z * 0.3183098733425140380859375) * _1988) * _1989) + _1759;
    }
    uint _1807 = _1670 + 8u;
    float _1820 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1670].w)) * _464) * 0.949999988079071044921875);
    float _1821 = _1820 * _1820;
    float _1822 = cbLight._m0[_1670].x + _542;
    float _1823 = cbLight._m0[_1670].y + _543;
    float _1824 = cbLight._m0[_1670].z + _544;
    float _1828 = inversesqrt(dot(vec3(_1822, _1823, _1824), vec3(_1822, _1823, _1824)));
    float _1829 = _1828 * _1822;
    float _1830 = _1828 * _1823;
    float _1831 = _1828 * _1824;
    float _1832 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_1670].xyz));
    float _3951 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1835 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _3962 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _1836 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _1837 = dot(vec3(_461, _462, _463), vec3(_1829, _1830, _1831));
    float _3973 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1840 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _1841 = dot(vec3(cbLight._m0[_1670].xyz), vec3(_1829, _1830, _1831));
    float _3984 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _1845 = _1821 * _1821;
    float _1849 = ((_1840 * _1840) * (_1845 + (-1.0))) + 1.0;
    float _1857 = exp2(log2(1.0 - (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) * 5.0);
    float _1858 = 0.959999978542327880859375 - _610;
    float _1860 = 0.959999978542327880859375 - _611;
    float _1861 = 0.959999978542327880859375 - _612;
    float _1868 = 1.0 - _1821;
    float _1879 = (0.5 / (((_1836 * ((_1835 * _1868) + _1821)) + 9.9999999392252902907785028219223e-09) + (((_1836 * _1868) + _1821) * _1835))) * _1835;
    float _3995 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1881 = (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1845 / ((_1849 * _1849) * 3.141590118408203125));
    uint _1892 = _1670 + 9u;
    float _1903 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1707].w)) * _464) * 0.949999988079071044921875);
    float _1904 = _1903 * _1903;
    float _1905 = cbLight._m0[_1707].x + _542;
    float _1906 = cbLight._m0[_1707].y + _543;
    float _1907 = cbLight._m0[_1707].z + _544;
    float _1911 = inversesqrt(dot(vec3(_1905, _1906, _1907), vec3(_1905, _1906, _1907)));
    float _1912 = _1911 * _1905;
    float _1913 = _1911 * _1906;
    float _1914 = _1911 * _1907;
    float _1915 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_1707].xyz));
    float _4006 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1918 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _1919 = dot(vec3(_461, _462, _463), vec3(_1912, _1913, _1914));
    float _4017 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1922 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _1923 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_1912, _1913, _1914));
    float _4028 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1927 = _1904 * _1904;
    float _1931 = ((_1922 * _1922) * (_1927 + (-1.0))) + 1.0;
    float _1938 = exp2(log2(1.0 - (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * 5.0);
    float _1945 = 1.0 - _1904;
    float _1955 = (0.5 / (((_1836 * ((_1918 * _1945) + _1904)) + 9.9999999392252902907785028219223e-09) + (((_1836 * _1945) + _1904) * _1918))) * _1918;
    float _4039 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1957 = (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1927 / ((_1931 * _1931) * 3.141590118408203125));
    float _1967 = (((((_1938 * _1858) + _613) * cbLight._m0[_1892].x) * _1957) * _1693) + (((((_1857 * _1858) + _613) * cbLight._m0[_1807].x) * _1881) * _1703);
    float _1968 = (((((_1938 * _1860) + _615) * cbLight._m0[_1892].y) * _1957) * _1693) + (((((_1857 * _1860) + _615) * cbLight._m0[_1807].y) * _1881) * _1703);
    float _1969 = (((((_1938 * _1861) + _616) * cbLight._m0[_1892].z) * _1957) * _1693) + (((((_1857 * _1861) + _616) * cbLight._m0[_1807].z) * _1881) * _1703);
    float _2031;
    float _2033;
    float _2035;
    if (_1744)
    {
        _2031 = _1967;
        _2033 = _1968;
        _2035 = _1969;
    }
    else
    {
        uint _2037 = _1670 + 2u;
        uint _2041 = _1670 + 10u;
        float _2055 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2037].w)) * _464) * 0.949999988079071044921875);
        float _2056 = _2055 * _2055;
        float _2057 = cbLight._m0[_2037].x + _542;
        float _2058 = cbLight._m0[_2037].y + _543;
        float _2059 = cbLight._m0[_2037].z + _544;
        float _2063 = inversesqrt(dot(vec3(_2057, _2058, _2059), vec3(_2057, _2058, _2059)));
        float _2064 = _2063 * _2057;
        float _2065 = _2063 * _2058;
        float _2066 = _2063 * _2059;
        float _2067 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_2037].xyz));
        float _4050 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2070 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _2071 = dot(vec3(_461, _462, _463), vec3(_2064, _2065, _2066));
        float _4061 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2074 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _2075 = dot(vec3(cbLight._m0[_2037].xyz), vec3(_2064, _2065, _2066));
        float _4072 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2079 = _2056 * _2056;
        float _2083 = ((_2074 * _2074) * (_2079 + (-1.0))) + 1.0;
        float _2090 = exp2(log2(1.0 - (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) * 5.0);
        float _2097 = 1.0 - _2056;
        float _2107 = (0.5 / (((_1836 * ((_2070 * _2097) + _2056)) + 9.9999999392252902907785028219223e-09) + (((_1836 * _2097) + _2056) * _2070))) * _2070;
        float _4083 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2109 = (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_2079 / ((_2083 * _2083) * 3.141590118408203125));
        float _2110 = isnan(1.0) ? _1685 : (isnan(_1685) ? 1.0 : min(_1685, 1.0));
        _2031 = (((((_2090 * _1858) + _613) * cbLight._m0[_2041].x) * _2109) * _2110) + _1967;
        _2033 = (((((_2090 * _1860) + _615) * cbLight._m0[_2041].y) * _2109) * _2110) + _1968;
        _2035 = (((((_2090 * _1861) + _616) * cbLight._m0[_2041].z) * _2109) * _2110) + _1969;
    }
    float _2145;
    float _2147;
    float _2149;
    if (_1762)
    {
        _2145 = _2031;
        _2147 = _2033;
        _2149 = _2035;
    }
    else
    {
        uint _2156 = _1670 + 3u;
        uint _2160 = _1670 + 11u;
        float _2174 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2156].w)) * _464) * 0.949999988079071044921875);
        float _2175 = _2174 * _2174;
        float _2176 = cbLight._m0[_2156].x + _542;
        float _2177 = cbLight._m0[_2156].y + _543;
        float _2178 = cbLight._m0[_2156].z + _544;
        float _2182 = inversesqrt(dot(vec3(_2176, _2177, _2178), vec3(_2176, _2177, _2178)));
        float _2183 = _2182 * _2176;
        float _2184 = _2182 * _2177;
        float _2185 = _2182 * _2178;
        float _2186 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_2156].xyz));
        float _4099 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2189 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _2190 = dot(vec3(_461, _462, _463), vec3(_2183, _2184, _2185));
        float _4110 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2193 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _2194 = dot(vec3(cbLight._m0[_2156].xyz), vec3(_2183, _2184, _2185));
        float _4121 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        float _2198 = _2175 * _2175;
        float _2202 = ((_2193 * _2193) * (_2198 + (-1.0))) + 1.0;
        float _2209 = exp2(log2(1.0 - (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) * 5.0);
        float _2216 = 1.0 - _2175;
        float _2226 = (0.5 / (((_1836 * ((_2189 * _2216) + _2175)) + 9.9999999392252902907785028219223e-09) + (((_1836 * _2216) + _2175) * _2189))) * _2189;
        float _4132 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2228 = (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_2198 / ((_2202 * _2202) * 3.141590118408203125));
        float _2229 = isnan(1.0) ? _1686 : (isnan(_1686) ? 1.0 : min(_1686, 1.0));
        _2145 = (((((_2209 * _1858) + _613) * cbLight._m0[_2160].x) * _2228) * _2229) + _2031;
        _2147 = (((((_2209 * _1860) + _615) * cbLight._m0[_2160].y) * _2228) * _2229) + _2033;
        _2149 = (((((_2209 * _1861) + _616) * cbLight._m0[_2160].z) * _2228) * _2229) + _2035;
    }
    float _2364;
    float _2366;
    float _2368;
    float _2370;
    float _2372;
    float _2374;
    if (_1668.y == 0u)
    {
        float _2304 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2305 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2304;
        float _2306 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2304;
        float _2307 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2304;
        uvec4 _2319 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2320 = _2319.x;
        uint _2331 = uint((float(_2319.y) * floor(float(uint(cbSceneParam._m0[85u].y * _551) / _2320))) + floor(float(uint(cbSceneParam._m0[85u].x * _550) / _2320)));
        float _2341 = (log2(_2307 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2342 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        uint _2345 = uint(isnan(14.0) ? _2342 : (isnan(_2342) ? 14.0 : min(_2342, 14.0)));
        uvec4 _2350 = texelFetch(g_lightClusterGridBuffer, int(((_2345 << 2u) + (_2331 << 6u)) >> 2u));
        uint _2351 = _2350.x;
        uint _2352 = _2319.z;
        float _2497;
        float _2499;
        float _2501;
        float _2503;
        float _2505;
        float _2507;
        if (((((1u << ((_2352 >> 4u) & 15u)) + 4294967295u) & _2351) == 0u) || ((_2352 & 240u) == 0u))
        {
            _2497 = 0.0;
            _2499 = 0.0;
            _2501 = 0.0;
            _2503 = 0.0;
            _2505 = 0.0;
            _2507 = 0.0;
        }
        else
        {
            float _2498;
            float _2500;
            float _2502;
            float _2504;
            float _2506;
            float _2508;
            float _2650 = 0.0;
            float _2651 = 0.0;
            float _2652 = 0.0;
            float _2653 = 0.0;
            float _2654 = 0.0;
            float _2655 = 0.0;
            uint _2656 = 0u;
            uint _2665;
            bool _2666;
            for (;;)
            {
                _2665 = texelFetch(g_lightClassification, int((((_2345 << 5u) + (_2331 << 9u)) + (_2656 << 2u)) >> 2u)).x;
                _2666 = _2665 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2666)
                {
                    frontier_phi_61_pred = _2650;
                    frontier_phi_61_pred_1 = _2655;
                    frontier_phi_61_pred_2 = _2654;
                    frontier_phi_61_pred_3 = _2653;
                    frontier_phi_61_pred_4 = _2652;
                    frontier_phi_61_pred_5 = _2651;
                }
                else
                {
                    float _2774;
                    float _2775;
                    float _2776;
                    float _2777;
                    float _2778;
                    float _2779;
                    uint _2780;
                    _2774 = _2650;
                    _2775 = _2651;
                    _2776 = _2652;
                    _2777 = _2653;
                    _2778 = _2654;
                    _2779 = _2655;
                    _2780 = _2665;
                    float _2706;
                    float _2707;
                    float _2708;
                    float _2709;
                    float _2710;
                    float _2711;
                    for (;;)
                    {
                        uint _2784 = uint(findLSB(_2780)) + (_2656 << 5u);
                        uint _2781 = (_2780 + 4294967295u) & _2780;
                        uint _2786 = _2784 * 48u;
                        vec4 _2800 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2786)).x, texelFetch(g_PointLightRenderingBuffer, int(_2786 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2786 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2786 + 3u)).x));
                        uint _2806 = (_2784 * 48u) + 4u;
                        vec4 _2819 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2806)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 3u)).x));
                        uint _2825 = (_2784 * 48u) + 8u;
                        vec3 _2836 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2825)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 2u)).x));
                        float _2840 = _2800.x - _2305;
                        float _2841 = _2800.y - _2306;
                        float _2842 = _2800.z - _2307;
                        float _2843 = dot(vec3(_2840, _2841, _2842), vec3(_2840, _2841, _2842));
                        float _2846 = inversesqrt(_2843);
                        float _2847 = _2846 * _2840;
                        float _2848 = _2846 * _2841;
                        float _2849 = _2846 * _2842;
                        float _2850 = dot(vec3(_569, _572, _575), vec3(_2847, _2848, _2849));
                        float _2855 = 1.0 - (_2843 * _2800.w);
                        float _4158 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                        float _2856 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
                        float _2857 = sqrt(_2843) * _2819.w;
                        float _2860 = 1.39999997615814208984375 / (_2857 + 1.39999997615814208984375);
                        float _2861 = _2860 * _2860;
                        float _2864 = ((1.0 - _2861) * _2850) + _2861;
                        float _2867 = _2857 * _2857;
                        float _2871 = ((isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0))) * _2856) / ((_2867 * 0.699999988079071044921875) + 1.0);
                        float _2875 = (-0.0) - _2305;
                        float _2876 = (-0.0) - _2306;
                        float _2877 = (-0.0) - _2307;
                        float _2881 = inversesqrt(dot(vec3(_2875, _2876, _2877), vec3(_2875, _2876, _2877)));
                        float _2882 = _2881 * _2875;
                        float _2883 = _2881 * _2876;
                        float _2884 = _2881 * _2877;
                        float _2892 = exp2(log2(1.0 / ((_2867 * 3.5) + 5.0)) * 0.25);
                        float _2893 = 1.0 - _644;
                        float _2900 = sqrt(1.0 - ((1.0 - (_2893 * _2893)) * (1.0 - (_2892 * _2892))));
                        float _2901 = _2900 * _2900;
                        float _2902 = _2901 * _2901;
                        float _2903 = _2882 + _2847;
                        float _2904 = _2883 + _2848;
                        float _2905 = _2884 + _2849;
                        float _2909 = inversesqrt(dot(vec3(_2903, _2904, _2905), vec3(_2903, _2904, _2905)));
                        float _2913 = dot(vec3(_569, _572, _575), vec3(_2882, _2883, _2884));
                        float _4174 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
                        float _2916 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                        float _2917 = dot(vec3(_569, _572, _575), vec3(_2909 * _2903, _2909 * _2904, _2909 * _2905));
                        float _4185 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
                        float _2920 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                        float _2924 = ((_2920 * _2920) * (_2902 + (-1.0))) + 1.0;
                        float _2925 = _2860 * _2901;
                        float _2926 = _2925 * _2925;
                        float _2929 = ((1.0 - _2926) * _2850) + _2926;
                        float _4196 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
                        float _2930 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                        float _2931 = 1.0 - _2901;
                        float _2941 = (0.5 / (((_2930 * ((_2916 * _2931) + _2901)) + 9.9999999392252902907785028219223e-09) + (((_2930 * _2931) + _2901) * _2916))) * _2930;
                        float _4207 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                        float _2952 = (((_2902 * 3.1415927410125732421875) * (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) / ((_2924 * _2924) * ((_2867 * 2.1991131305694580078125) + 3.141590118408203125))) * _2856;
                        _2709 = (_2871 * _2819.x) + _2777;
                        _2710 = (_2871 * _2819.y) + _2778;
                        _2711 = (_2871 * _2819.z) + _2779;
                        _2706 = (_2952 * _2836.x) + _2774;
                        _2707 = (_2952 * _2836.y) + _2775;
                        _2708 = (_2952 * _2836.z) + _2776;
                        if (_2781 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2774 = _2706;
                            _2775 = _2707;
                            _2776 = _2708;
                            _2777 = _2709;
                            _2778 = _2710;
                            _2779 = _2711;
                            _2780 = _2781;
                        }
                    }
                    frontier_phi_61_pred = _2706;
                    frontier_phi_61_pred_1 = _2711;
                    frontier_phi_61_pred_2 = _2710;
                    frontier_phi_61_pred_3 = _2709;
                    frontier_phi_61_pred_4 = _2708;
                    frontier_phi_61_pred_5 = _2707;
                }
                _2498 = frontier_phi_61_pred;
                _2508 = frontier_phi_61_pred_1;
                _2506 = frontier_phi_61_pred_2;
                _2504 = frontier_phi_61_pred_3;
                _2502 = frontier_phi_61_pred_4;
                _2500 = frontier_phi_61_pred_5;
                uint _2657 = _2656 + 1u;
                if (_2657 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2650 = _2498;
                    _2651 = _2500;
                    _2652 = _2502;
                    _2653 = _2504;
                    _2654 = _2506;
                    _2655 = _2508;
                    _2656 = _2657;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2497 = _2498;
            _2499 = _2500;
            _2501 = _2502;
            _2503 = _2504;
            _2505 = _2506;
            _2507 = _2508;
        }
        uvec4 _2511 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2512 = _2511.z;
        uint _2514 = (_2512 >> 8u) & 15u;
        float _2618;
        float _2620;
        float _2622;
        float _2624;
        float _2626;
        float _2628;
        if (((4294967295u << _2514) & _2351) == 0u)
        {
            _2618 = _2497;
            _2620 = _2499;
            _2622 = _2501;
            _2624 = _2503;
            _2626 = _2505;
            _2628 = _2507;
        }
        else
        {
            float _2643 = inversesqrt(dot(vec3(_2305, _2306, _2307), vec3(_2305, _2306, _2307)));
            float _2644 = _2643 * _2305;
            float _2645 = _2643 * _2306;
            float _2646 = _2643 * _2307;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2514 < ((_2512 >> 12u) & 15u))
            {
                float _2619;
                float _2621;
                float _2623;
                float _2625;
                float _2627;
                float _2629;
                float _2757 = _2497;
                float _2758 = _2499;
                float _2759 = _2501;
                float _2760 = _2503;
                float _2761 = _2505;
                float _2762 = _2507;
                uint _2763 = _2514;
                uint _2772;
                bool _2773;
                for (;;)
                {
                    _2772 = texelFetch(g_lightClassification, int((((_2345 << 5u) + (_2331 << 9u)) + (_2763 << 2u)) >> 2u)).x;
                    _2773 = _2772 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2773)
                    {
                        frontier_phi_67_pred = _2760;
                        frontier_phi_67_pred_1 = _2761;
                        frontier_phi_67_pred_2 = _2762;
                        frontier_phi_67_pred_3 = _2759;
                        frontier_phi_67_pred_4 = _2758;
                        frontier_phi_67_pred_5 = _2757;
                    }
                    else
                    {
                        float _2957;
                        float _2958;
                        float _2959;
                        float _2960;
                        float _2961;
                        float _2962;
                        float _3252;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _2970 = _2757;
                        float _2971 = _2758;
                        float _2972 = _2759;
                        float _2973 = _2760;
                        float _2974 = _2761;
                        float _2975 = _2762;
                        uint _2976 = _2772;
                        uint _2977;
                        vec4 _3002;
                        float _3003;
                        vec4 _3018;
                        vec3 _3030;
                        vec4 _3045;
                        vec4 _3061;
                        float _3108;
                        bool _3109;
                        for (;;)
                        {
                            uint _2987 = ((_2763 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2976));
                            _2977 = (_2976 + 4294967295u) & _2976;
                            uint _2989 = _2987 * 40u;
                            _3002 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2989)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 3u)).x));
                            _3003 = _3002.w;
                            uint _3005 = (_2987 * 40u) + 4u;
                            _3018 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3005)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 3u)).x));
                            uint _3020 = (_2987 * 40u) + 8u;
                            _3030 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 2u)).x));
                            uint _3032 = (_2987 * 40u) + 16u;
                            _3045 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 3u)).x));
                            uint _3048 = (_2987 * 40u) + 20u;
                            _3061 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 3u)).x));
                            uint _3064 = (_2987 * 40u) + 24u;
                            vec4 _3077 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3064)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 3u)).x));
                            uint _3083 = (_2987 * 40u) + 28u;
                            vec4 _3096 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 3u)).x));
                            _3108 = fma(_2307, _3096.z, fma(_2306, _3096.y, _3096.x * _2305)) + _3096.w;
                            _3109 = !((fma(_2307, _3077.z, fma(_2306, _3077.y, _3077.x * _2305)) + _3077.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3109)
                            {
                                float _3136 = _3002.x - _2305;
                                float _3137 = _3002.y - _2306;
                                float _3138 = _3002.z - _2307;
                                float _3139 = dot(vec3(_3136, _3137, _3138), vec3(_3136, _3137, _3138));
                                float _3142 = inversesqrt(_3139);
                                float _3143 = _3142 * _3136;
                                float _3144 = _3142 * _3137;
                                float _3145 = _3142 * _3138;
                                float _3149 = 1.0 - (_3139 / (_3003 * _3003));
                                float _4218 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                                float _3150 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
                                float _3154 = sqrt(_3139) * _3018.w;
                                float _3156 = 1.39999997615814208984375 / (_3154 + 1.39999997615814208984375);
                                float _3157 = _3156 * _3156;
                                float _3160 = ((1.0 - _3157) * dot(vec3(_3143, _3144, _3145), vec3(_569, _572, _575))) + _3157;
                                float _3163 = _3154 * _3154;
                                float _3167 = (fma(_2307, _3045.z, fma(_2306, _3045.y, _3045.x * _2305)) + _3045.w) / _3108;
                                float _3168 = (fma(_2307, _3061.z, fma(_2306, _3061.y, _3061.x * _2305)) + _3061.w) / _3108;
                                float _3172 = 1.0 - dot(vec2(_3167, _3168), vec2(_3167, _3168));
                                float _4234 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                                float _3173 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                                float _3174 = _3173 * (((isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0))) * _3150) / ((_3163 * 0.699999988079071044921875) + 1.0));
                                float _3186 = exp2(log2(1.0 / ((_3163 * 3.5) + 5.0)) * 0.25);
                                float _3187 = 1.0 - _644;
                                float _3194 = sqrt(1.0 - ((1.0 - (_3187 * _3187)) * (1.0 - (_3186 * _3186))));
                                float _3195 = _3194 * _3194;
                                float _3196 = _3195 * _3195;
                                float _3197 = _3143 - _2644;
                                float _3198 = _3144 - _2645;
                                float _3199 = _3145 - _2646;
                                float _3203 = inversesqrt(dot(vec3(_3197, _3198, _3199), vec3(_3197, _3198, _3199)));
                                float _3207 = dot(vec3(_569, _572, _575), vec3((-0.0) - _2644, (-0.0) - _2645, (-0.0) - _2646));
                                float _4245 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3210 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                                float _3211 = dot(vec3(_569, _572, _575), vec3(_3203 * _3197, _3203 * _3198, _3203 * _3199));
                                float _4256 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                                float _3214 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                                float _3218 = ((_3214 * _3214) * (_3196 + (-1.0))) + 1.0;
                                float _3219 = _3156 * _3195;
                                float _3220 = _3219 * _3219;
                                float _3226 = ((1.0 - _3220) * dot(vec3(_569, _572, _575), vec3(_3143, _3144, _3145))) + _3220;
                                float _4267 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                                float _3227 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                                float _3228 = 1.0 - _3195;
                                float _3238 = (0.5 / (((_3227 * ((_3210 * _3228) + _3195)) + 9.9999999392252902907785028219223e-09) + (((_3227 * _3228) + _3195) * _3210))) * _3227;
                                float _4278 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                                float _3248 = (_3173 * _3150) * (((_3196 * 3.1415927410125732421875) * (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) / ((_3218 * _3218) * ((_3163 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3248 * _3030.x;
                                frontier_phi_73_pred_1 = _3248 * _3030.y;
                                frontier_phi_73_pred_2 = _3174 * _3018.z;
                                frontier_phi_73_pred_3 = _3174 * _3018.y;
                                frontier_phi_73_pred_4 = _3174 * _3018.x;
                                frontier_phi_73_pred_5 = _3248 * _3030.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3252 = frontier_phi_73_pred;
                            _3253 = frontier_phi_73_pred_1;
                            _3257 = frontier_phi_73_pred_2;
                            _3256 = frontier_phi_73_pred_3;
                            _3255 = frontier_phi_73_pred_4;
                            _3254 = frontier_phi_73_pred_5;
                            _2960 = _3255 + _2973;
                            _2961 = _3256 + _2974;
                            _2962 = _3257 + _2975;
                            _2957 = _3252 + _2970;
                            _2958 = _3253 + _2971;
                            _2959 = _3254 + _2972;
                            if (_2977 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2970 = _2957;
                                _2971 = _2958;
                                _2972 = _2959;
                                _2973 = _2960;
                                _2974 = _2961;
                                _2975 = _2962;
                                _2976 = _2977;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2960;
                        frontier_phi_67_pred_1 = _2961;
                        frontier_phi_67_pred_2 = _2962;
                        frontier_phi_67_pred_3 = _2959;
                        frontier_phi_67_pred_4 = _2958;
                        frontier_phi_67_pred_5 = _2957;
                    }
                    _2625 = frontier_phi_67_pred;
                    _2627 = frontier_phi_67_pred_1;
                    _2629 = frontier_phi_67_pred_2;
                    _2623 = frontier_phi_67_pred_3;
                    _2621 = frontier_phi_67_pred_4;
                    _2619 = frontier_phi_67_pred_5;
                    uint _2764 = _2763 + 1u;
                    if (_2764 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2757 = _2619;
                        _2758 = _2621;
                        _2759 = _2623;
                        _2760 = _2625;
                        _2761 = _2627;
                        _2762 = _2629;
                        _2763 = _2764;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2627;
                frontier_phi_55_56_ladder_1 = _2629;
                frontier_phi_55_56_ladder_2 = _2625;
                frontier_phi_55_56_ladder_3 = _2623;
                frontier_phi_55_56_ladder_4 = _2621;
                frontier_phi_55_56_ladder_5 = _2619;
            }
            else
            {
                frontier_phi_55_56_ladder = _2505;
                frontier_phi_55_56_ladder_1 = _2507;
                frontier_phi_55_56_ladder_2 = _2503;
                frontier_phi_55_56_ladder_3 = _2501;
                frontier_phi_55_56_ladder_4 = _2499;
                frontier_phi_55_56_ladder_5 = _2497;
            }
            _2618 = frontier_phi_55_56_ladder_5;
            _2620 = frontier_phi_55_56_ladder_4;
            _2622 = frontier_phi_55_56_ladder_3;
            _2624 = frontier_phi_55_56_ladder_2;
            _2626 = frontier_phi_55_56_ladder;
            _2628 = frontier_phi_55_56_ladder_1;
        }
        float _2633 = isnan(1.0) ? _628 : (isnan(_628) ? 1.0 : min(_628, 1.0));
        _2364 = (_2633 * _2624) + _1800;
        _2366 = (_2633 * _2626) + _1802;
        _2368 = (_2633 * _2628) + _1804;
        _2370 = ((_2618 * _613) * _2633) + _2145;
        _2372 = ((_2620 * _615) * _2633) + _2147;
        _2374 = ((_2622 * _616) * _2633) + _2149;
    }
    else
    {
        _2364 = _1800;
        _2366 = _1802;
        _2368 = _1804;
        _2370 = _2145;
        _2372 = _2147;
        _2374 = _2149;
    }
    uint _2380 = _589 + uint(cbMatDynParam._m0[0u].w);
    float _2386 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].y;
    float _2392 = (((((_2386 * cbMtdParam._m0[10u].x) * _347.x) * _370) * _447) * (((1.0 - _424) * cbMtdParam._m0[16u].y) + _424)) * cbInstanceData._m0[_2380].x;
    float _2398 = (((((_2386 * cbMtdParam._m0[10u].y) * _347.y) * _370) * _447) * (((1.0 - _426) * cbMtdParam._m0[16u].y) + _426)) * cbInstanceData._m0[_2380].y;
    float _2404 = (((((_2386 * cbMtdParam._m0[10u].z) * _347.z) * _370) * _447) * (((1.0 - _428) * cbMtdParam._m0[16u].y) + _428)) * cbInstanceData._m0[_2380].z;
    float _4294 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _4305 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _4316 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _2421 = (((isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2364 + ((isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0))) * _628))) + ((_2370 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _1437)) * cbPerFrame._m0[3u].x)) + _2392;
    float _2423 = (_2398 + ((_2372 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _1437)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_2366 + ((isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))) * _628)));
    float _2425 = (_2404 + ((_2374 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _1437)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2368 + ((isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0))) * _628)));
    float _4342 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2438 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
    uint _2439 = _588 + 6u;
    float _2447 = _550 / cbSceneParam._m0[86u].x;
    float _2448 = _551 / cbSceneParam._m0[86u].y;
    vec4 _2462 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2447, _2448, (log2((isnan(cbSceneParam._m0[77u].w) ? _484 : (isnan(_484) ? cbSceneParam._m0[77u].w : min(_484, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2464 = _2462.x;
    float _2465 = _2462.y;
    float _2466 = _2462.z;
    float _2467 = _2462.w;
    float _2559;
    float _2561;
    float _2563;
    float _2565;
    if (_484 > cbSceneParam._m0[78u].w)
    {
        float _2522 = isnan(_484) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _484 : min(cbSceneParam._m0[80u].w, _484));
        float _2523 = _2522 / _484;
        float _2534 = _2523 * _535;
        float _2535 = _536 * _2523;
        float _2536 = (-0.0) - _2535;
        float _2537 = _2523 * _537;
        float _2539 = (cbSceneParam._m0[77u].w * _2536) / _2522;
        float _2540 = _2539 + cbSceneParam._m0[79u].w;
        float _2541 = cbSceneParam._m0[79u].w - _2535;
        float _2547 = sqrt(((_2534 * _2534) + (_2535 * _2535)) + (_2537 * _2537));
        float _2550 = (1.0 - (cbSceneParam._m0[77u].w / _2522)) * _2547;
        float _2555 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2557 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2719;
        if (abs((_2536 - _2539) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2719 = ((((_2540 > 0.0) ? exp2(_2555 * _2540) : (2.0 - exp2(_2557 * _2540))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2550;
        }
        else
        {
            float _2679 = 1.0 / cbSceneParam._m0[80u].x;
            float _2680 = isnan(_2541) ? _2540 : (isnan(_2540) ? _2541 : max(_2540, _2541));
            float _2681 = isnan(_2541) ? _2540 : (isnan(_2540) ? _2541 : min(_2540, _2541));
            float _2690 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : min(_2680, 0.0));
            float _2691 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : min(_2681, 0.0));
            _2719 = ((abs(_2547 / _2536) * cbSceneParam._m0[80u].y) * ((((_2690 - _2691) * 2.0) - ((exp2(_2555 * (isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0)))) - exp2(_2555 * (isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0))))) * _2679)) - ((exp2(_2557 * _2690) - exp2(_2557 * _2691)) * _2679))) + (_2550 * cbSceneParam._m0[80u].z);
        }
        vec4 _2721 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2447, _2448, 1.0), 0.0);
        float _2730 = exp2((_2719 * (-1.44269502162933349609375)) * (1.0 - _2721.w));
        float _2731 = log2(_2730);
        float _2747 = log2(_2467);
        _2559 = (exp2(_2747 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2731 * cbSceneParam._m0[78u].x)) * _2721.x) / cbSceneParam._m0[78u].x)) + _2464;
        _2561 = (exp2(_2747 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2731 * cbSceneParam._m0[78u].y)) * _2721.y) / cbSceneParam._m0[78u].y)) + _2465;
        _2563 = (exp2(_2747 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2731 * cbSceneParam._m0[78u].z)) * _2721.z) / cbSceneParam._m0[78u].z)) + _2466;
        _2565 = _2730 * _2467;
    }
    else
    {
        _2559 = _2464;
        _2561 = _2465;
        _2563 = _2466;
        _2565 = _2467;
    }
    float _2577 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2578 = _2577 == 3.0;
    float _2579 = log2(_2565);
    float _2583 = exp2(_2579 * cbSceneParam._m0[78u].x);
    float _2584 = exp2(_2579 * cbSceneParam._m0[78u].y);
    float _2585 = exp2(_2579 * cbSceneParam._m0[78u].z);
    float _2586 = _2583 * (isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0)));
    float _2587 = _2584 * (isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0)));
    float _2588 = _2585 * (isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0)));
    float _2597 = (_2577 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2597 * (_2578 ? _2586 : (_2586 + (cbSceneParam._m0[72u].w * _2559)));
    SV_Target.y = _2597 * (_2578 ? _2587 : (_2587 + (cbSceneParam._m0[72u].w * _2561)));
    SV_Target.z = _2597 * (_2578 ? _2588 : (_2588 + (cbSceneParam._m0[72u].w * _2563)));
    SV_Target.w = cbInstanceData._m0[_2439].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2392) * _2438) * _2583) * _2597;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2398) * _2438) * _2584) * _2597;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2404) * _2438) * _2585) * _2597;
    SV_Target_1.w = cbInstanceData._m0[_2439].w;
}


