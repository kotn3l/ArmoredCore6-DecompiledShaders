#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_21;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1131;
float _3592;
float _3593;
float _3594;
float _3595;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _251 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _257 = _251.x * cbMtdParam._m0[9u].x;
    float _258 = _251.y * cbMtdParam._m0[9u].y;
    float _259 = _251.z * cbMtdParam._m0[9u].z;
    vec4 _282 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _302 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _305 = _302.x + 0.00999999977648258209228515625;
    float _313 = (TEXCOORD_8 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_8)) * _305)) * (cbMtdParam._m0[15u].z + 1.0);
    float _3604 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _314 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    float _321 = (_314 * ((_282.x * cbMtdParam._m0[12u].x) - _257)) + _257;
    float _322 = (_314 * ((_282.y * cbMtdParam._m0[12u].y) - _258)) + _258;
    float _323 = (_314 * ((_282.z * cbMtdParam._m0[12u].z) - _259)) + _259;
    vec4 _336 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _338 = _336.x;
    float _340 = _338 - (_338 * TEXCOORD_8);
    vec4 _352 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    vec4 _375 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _379 = _375.z;
    float _382 = (_375.x * 2.0) + (-1.0);
    float _383 = (_375.y * 2.0) + (-1.0);
    float _384 = dot(vec2(_382, _383), vec2(_382, _383));
    float _3615 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _389 = sqrt(1.0 - (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0))));
    float _397 = (((_352.z - _379) * TEXCOORD_8) * cbMtdParam._m0[16u].x) + _379;
    vec4 _431 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _445 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3626 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _446 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _454 = (((_446 * _446) * (3.0 - (_446 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _463 = cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x;
    float _471 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3637 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _472 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
    float _476 = (_472 * _472) * (3.0 - (_472 * 2.0));
    float _477 = _476 * cbMtdParam._m0[16u].w;
    float _478 = _476 * cbMtdParam._m0[17u].x;
    float _479 = sin(_463);
    float _480 = cos(_463);
    float _481 = TEXCOORD.z - _477;
    float _482 = TEXCOORD.w - _478;
    vec4 _502 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_477 + fma(_482, (-0.0) - _479, _481 * _480))) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (fma(_482, _480, _481 * _479) + _478)) + cbTextureTilingScale._m0[0u].w));
    float _508 = (cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].w) * _502.x;
    float _510 = (cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].w) * _502.y;
    float _512 = (cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].w) * _502.z;
    float _528 = (TEXCOORD_5.x - ((_305 * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[16u].z)) * (cbMtdParam._m0[13u].x + 1.0);
    float _3648 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _529 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _535 = ((((_352.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[15u].x) + _382;
    float _536 = ((((_352.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[15u].x) + _383;
    float _539 = fma(_389, _222 * NORMAL.x, fma(_536, _229 * TANGENT.x, (_215 * _207) * _535));
    float _542 = fma(_389, _222 * NORMAL.y, fma(_536, _229 * TANGENT.y, (_215 * _208) * _535));
    float _545 = fma(_389, _222 * NORMAL.z, fma(_536, _229 * TANGENT.z, (_215 * _209) * _535));
    float _549 = inversesqrt(dot(vec3(_539, _542, _545), vec3(_539, _542, _545)));
    float _550 = _549 * _539;
    float _551 = _549 * _542;
    float _552 = _549 * _545;
    float _3659 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _553 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _3670 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _3681 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _3692 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _3703 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _557 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _573 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _614 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _624 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _614);
    float _625 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _614);
    float _626 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _614);
    float _630 = inversesqrt(dot(vec3(_624, _625, _626), vec3(_624, _625, _626)));
    float _631 = _624 * _630;
    float _632 = _625 * _630;
    float _633 = _626 * _630;
    vec4 _638 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _640 = _638.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _811 = sqrt(((_624 * _624) + (_625 * _625)) + (_626 * _626));
        float _817 = (cbMatDynParam._m0[5u].x * _811) + cbMatDynParam._m0[5u].y;
        float _3714 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _818 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _822 = (cbMatDynParam._m0[5u].z * _811) + cbMatDynParam._m0[5u].w;
        float _3725 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) - _818)) + _818) < ((_640 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _651 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _652 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _670 = fma(_552, cbSceneParam._m0[5u].z, fma(_551, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _550));
    float _673 = fma(_552, cbSceneParam._m0[6u].z, fma(_551, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _550));
    float _676 = fma(_552, cbSceneParam._m0[7u].z, fma(_551, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _550));
    uint _689 = uint(roundEven(NORMAL.w)) * 13u;
    uint _690 = _689 + 9u;
    uint _691 = _690 + uint(cbMatDynParam._m0[0u].w);
    float _697 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0)))) * cbInstanceData._m0[_691].x;
    float _698 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0)))) * cbInstanceData._m0[_691].y;
    float _699 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0)))) * cbInstanceData._m0[_691].z;
    float _3736 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _700 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _3747 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _701 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _3758 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _702 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _703 = 1.0 - _557;
    float _704 = _700 * _703;
    float _705 = _701 * _703;
    float _706 = _702 * _703;
    float _711 = (_700 + (-0.039999999105930328369140625)) * _557;
    float _712 = (_701 + (-0.039999999105930328369140625)) * _557;
    float _713 = (_702 + (-0.039999999105930328369140625)) * _557;
    float _714 = _711 + 0.039999999105930328369140625;
    float _716 = _712 + 0.039999999105930328369140625;
    float _717 = _713 + 0.039999999105930328369140625;
    vec4 _726 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _651, cbSceneParam._m0[86u].y * _652));
    float _729 = _726.x * TEXCOORD_5.w;
    float _730 = dot(vec3(_550, _551, _552), vec3(_631, _632, _633));
    float _733 = _730 * 2.0;
    float _737 = (_733 * _550) - _631;
    float _738 = (_733 * _551) - _632;
    float _739 = (_733 * _552) - _633;
    float _743 = abs(dot(vec3(_631, _632, _633), vec3(_550, _551, _552)));
    float _3769 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _745 = sqrt(_553);
    float _757 = exp2((_745 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_745 * 3.0));
    float _763 = (1.0 - _757) * ((_745 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _764 = _757 * _745;
    float _792 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _796 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _800 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1130;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _855 = fma(_800, cbModelParam._m0[26u].z, fma(_796, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _792));
        float _859 = fma(_800, cbModelParam._m0[27u].z, fma(_796, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _792));
        float _863 = fma(_800, cbModelParam._m0[28u].z, fma(_796, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _792));
        float _888 = _792 + _550;
        float _889 = _796 + _551;
        float _890 = _800 + _552;
        float _900 = fma(_890, cbModelParam._m0[26u].z, fma(_889, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _888)) - _855;
        float _901 = fma(_890, cbModelParam._m0[27u].z, fma(_889, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _888)) - _859;
        float _902 = fma(_890, cbModelParam._m0[28u].z, fma(_889, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _888)) - _863;
        float _906 = inversesqrt(dot(vec3(_900, _901, _902), vec3(_900, _901, _902)));
        float _919 = ((_906 * _900) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_855 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _920 = ((_906 * _901) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_859 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _921 = ((_906 * _902) / cbModelParam._m0[34u].z) + ((((((_863 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_919, _920, _921), 0.0);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_919, _920, _921), 0.0);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_919, _920, _921), 0.0);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_919, _920, _921), 0.0);
        float _958 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _959 = _958 * (_924.x + (-0.5));
        float _960 = _958 * (_924.y + (-0.5));
        float _961 = _958 * (_924.z + (-0.5));
        float _968 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_931.x + (-0.5));
        float _970 = _968 * (_931.y + (-0.5));
        float _971 = _968 * (_931.z + (-0.5));
        float _978 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _979 = _978 * (_938.x + (-0.5));
        float _980 = _978 * (_938.y + (-0.5));
        float _981 = _978 * (_938.z + (-0.5));
        float _988 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _989 = _988 * (_945.x + (-0.5));
        float _990 = _988 * (_945.y + (-0.5));
        float _991 = _988 * (_945.z + (-0.5));
        float _992 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _993 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _994 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _995 = _959 * 0.5;
        float _996 = _969 * 0.5;
        float _997 = _979 * 0.5;
        float _998 = dot(vec3(_995, _996, _997), vec3(_995, _996, _997));
        float _1003 = (_998 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_998);
        float _1012 = (dot(vec3(_550, _551, _552), vec3(_1003 * _995, _1003 * _996, _1003 * _997)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1022 = sqrt(((_996 * _996) + (_995 * _995)) + (_997 * _997)) / (_992 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1024 = _1023 * 2.0;
        float _1028 = (1.0 - _1023) / (_1023 + 1.0);
        float _3817 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1038 = ((((1.0 - _1029) * (_1024 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1024 + 1.0))) + _1029) * _992;
        float _1039 = _960 * 0.5;
        float _1040 = _970 * 0.5;
        float _1041 = _980 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1055 = (dot(vec3(_550, _551, _552), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _3828 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1064 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_993 + 9.9999997473787516355514526367188e-06);
        float _3839 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1066 = _1065 * 2.0;
        float _1070 = (1.0 - _1065) / (_1065 + 1.0);
        float _3850 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1080 = ((((1.0 - _1071) * (_1066 + 2.0)) * exp2(log2(isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1066 + 1.0))) + _1071) * _993;
        float _1081 = _961 * 0.5;
        float _1082 = _971 * 0.5;
        float _1083 = _981 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1097 = (dot(vec3(_550, _551, _552), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _3861 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1106 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_994 + 9.9999997473787516355514526367188e-06);
        float _3872 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1108 = _1107 * 2.0;
        float _1112 = (1.0 - _1107) / (_1107 + 1.0);
        float _3883 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1122 = ((((1.0 - _1113) * (_1108 + 2.0)) * exp2(log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1108 + 1.0))) + _1113) * _994;
        _1130 = _961;
        _1132 = _960;
        _1133 = _959;
        _1134 = _971;
        _1135 = _970;
        _1136 = _969;
        _1137 = _981;
        _1138 = _980;
        _1139 = _979;
        _1140 = _994;
        _1141 = _993;
        _1142 = _992;
        _1143 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0)));
        _1144 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0)));
        _1145 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)));
    }
    else
    {
        _1130 = _1131;
        _1132 = _1131;
        _1133 = _1131;
        _1134 = _1131;
        _1135 = _1131;
        _1136 = _1131;
        _1137 = _1131;
        _1138 = _1131;
        _1139 = _1131;
        _1140 = _1131;
        _1141 = _1131;
        _1142 = _1131;
        _1143 = 0.0;
        _1144 = 0.0;
        _1145 = 0.0;
    }
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1174 = fma(_800, cbModelParam._m0[30u].z, fma(_796, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _792));
        float _1178 = fma(_800, cbModelParam._m0[31u].z, fma(_796, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _792));
        float _1182 = fma(_800, cbModelParam._m0[32u].z, fma(_796, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _792));
        float _1205 = _792 + _550;
        float _1206 = _796 + _551;
        float _1207 = _800 + _552;
        float _1217 = fma(_1207, cbModelParam._m0[30u].z, fma(_1206, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1205)) - _1174;
        float _1218 = fma(_1207, cbModelParam._m0[31u].z, fma(_1206, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1205)) - _1178;
        float _1219 = fma(_1207, cbModelParam._m0[32u].z, fma(_1206, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1205)) - _1182;
        float _1223 = inversesqrt(dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219)));
        float _1236 = ((_1223 * _1217) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1174 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1237 = ((_1223 * _1218) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1178 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1238 = ((_1223 * _1219) / cbModelParam._m0[35u].z) + ((((((_1182 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1236, _1237, _1238), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1236, _1237, _1238), 0.0);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1236, _1237, _1238), 0.0);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1236, _1237, _1238), 0.0);
        float _1273 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1240.x + (-0.5));
        float _1275 = _1273 * (_1240.y + (-0.5));
        float _1276 = _1273 * (_1240.z + (-0.5));
        float _1283 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1247.x + (-0.5));
        float _1285 = _1283 * (_1247.y + (-0.5));
        float _1286 = _1283 * (_1247.z + (-0.5));
        float _1293 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1254.x + (-0.5));
        float _1295 = _1293 * (_1254.y + (-0.5));
        float _1296 = _1293 * (_1254.z + (-0.5));
        float _1303 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1261.x + (-0.5));
        float _1305 = _1303 * (_1261.y + (-0.5));
        float _1306 = _1303 * (_1261.z + (-0.5));
        float _1307 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1308 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1309 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1310 = _1274 * 0.5;
        float _1311 = _1284 * 0.5;
        float _1312 = _1294 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_550, _551, _552), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _3924 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1307 + 9.9999997473787516355514526367188e-06);
        float _3935 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _3946 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1337 + 1.0))) + _1342) * _1307;
        float _1352 = _1275 * 0.5;
        float _1353 = _1285 * 0.5;
        float _1354 = _1295 * 0.5;
        float _1355 = dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354));
        float _1360 = (_1355 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1355);
        float _1368 = (dot(vec3(_550, _551, _552), vec3(_1360 * _1352, _1360 * _1353, _1360 * _1354)) + 1.0) * 0.5;
        float _3957 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1377 = sqrt(((_1353 * _1353) + (_1352 * _1352)) + (_1354 * _1354)) / (_1308 + 9.9999997473787516355514526367188e-06);
        float _3968 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1379 = _1378 * 2.0;
        float _1383 = (1.0 - _1378) / (_1378 + 1.0);
        float _3979 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1393 = ((((1.0 - _1384) * (_1379 + 2.0)) * exp2(log2(isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1379 + 1.0))) + _1384) * _1308;
        float _1394 = _1276 * 0.5;
        float _1395 = _1286 * 0.5;
        float _1396 = _1296 * 0.5;
        float _1397 = dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396));
        float _1402 = (_1397 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1397);
        float _1410 = (dot(vec3(_550, _551, _552), vec3(_1402 * _1394, _1402 * _1395, _1402 * _1396)) + 1.0) * 0.5;
        float _3990 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1419 = sqrt(((_1395 * _1395) + (_1394 * _1394)) + (_1396 * _1396)) / (_1309 + 9.9999997473787516355514526367188e-06);
        float _4001 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1421 = _1420 * 2.0;
        float _1425 = (1.0 - _1420) / (_1420 + 1.0);
        float _4012 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1435 = ((((1.0 - _1426) * (_1421 + 2.0)) * exp2(log2(isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1421 + 1.0))) + _1426) * _1309;
        _1443 = _1276;
        _1444 = _1275;
        _1445 = _1274;
        _1446 = _1286;
        _1447 = _1285;
        _1448 = _1284;
        _1449 = _1296;
        _1450 = _1295;
        _1451 = _1294;
        _1452 = _1309;
        _1453 = _1308;
        _1454 = _1307;
        _1455 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
        _1456 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)));
        _1457 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)));
    }
    else
    {
        _1443 = _1131;
        _1444 = _1131;
        _1445 = _1131;
        _1446 = _1131;
        _1447 = _1131;
        _1448 = _1131;
        _1449 = _1131;
        _1450 = _1131;
        _1451 = _1131;
        _1452 = _1131;
        _1453 = _1131;
        _1454 = _1131;
        _1455 = 0.0;
        _1456 = 0.0;
        _1457 = 0.0;
    }
    float _1467 = (cbModelParam._m0[1u].x * (_1455 - _1143)) + _1143;
    float _1468 = (cbModelParam._m0[1u].x * (_1456 - _1144)) + _1144;
    float _1469 = (cbModelParam._m0[1u].x * (_1457 - _1145)) + _1145;
    float _1490 = fma(_1469, cbSceneParam._m0[89u].z, fma(_1468, cbSceneParam._m0[89u].y, _1467 * cbSceneParam._m0[89u].x));
    float _1493 = fma(_1469, cbSceneParam._m0[90u].z, fma(_1468, cbSceneParam._m0[90u].y, _1467 * cbSceneParam._m0[90u].x));
    float _1496 = fma(_1469, cbSceneParam._m0[91u].z, fma(_1468, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1467));
    float _1511 = _737 * 0.5;
    float _1512 = _738 * 0.5;
    float _1513 = _739 * 0.5;
    float _1514 = dot(vec4(_1511, _1512, _1513, 1.0), vec4(_1445, _1448, _1451, _1454));
    float _1517 = dot(vec4(_1511, _1512, _1513, 1.0), vec4(_1444, _1447, _1450, _1453));
    float _1520 = dot(vec4(_1511, _1512, _1513, 1.0), vec4(_1443, _1446, _1449, _1452));
    float _1554;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1527 = dot(vec4(_1511, _1512, _1513, 1.0), vec4(_1130, _1134, _1137, _1140));
        float _1531 = dot(vec4(_1511, _1512, _1513, 1.0), vec4(_1132, _1135, _1138, _1141));
        float _1535 = dot(vec4(_1511, _1512, _1513, 1.0), vec4(_1133, _1136, _1139, _1142));
        float _1542 = dot(vec4(cbModelParam._m0[39u]), vec4(_1511, _1512, _1513, 1.0));
        _1554 = dot(vec3(isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)), isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)), isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1542) ? 0.0 : (isnan(0.0) ? _1542 : max(0.0, _1542))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1554 = 1.0;
    }
    float _1565;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1556 = dot(vec4(cbModelParam._m0[40u]), vec4(_1511, _1512, _1513, 1.0));
        _1565 = dot(vec3(isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)), isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)), isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1556) ? 0.0 : (isnan(0.0) ? _1556 : max(0.0, _1556))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1565 = 1.0;
    }
    float _1569 = (_1565 * cbModelParam._m0[1u].x) + (_1554 * (1.0 - cbModelParam._m0[1u].x));
    float _1579 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _553);
    float _1580 = isnan(_1579) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1579 : min(cbModelParam._m0[25u].z, _1579));
    float _1660;
    float _1662;
    float _1664;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1627 = fma(_800, cbModelParam._m0[13u].z, fma(_796, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _792)) + cbModelParam._m0[13u].w;
        float _1631 = fma(_800, cbModelParam._m0[14u].z, fma(_796, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _792)) + cbModelParam._m0[14u].w;
        float _1635 = fma(_800, cbModelParam._m0[15u].z, fma(_796, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _792)) + cbModelParam._m0[15u].w;
        float _1638 = fma(_739, cbModelParam._m0[13u].z, fma(_738, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _737));
        float _1641 = fma(_739, cbModelParam._m0[14u].z, fma(_738, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _737));
        float _1644 = fma(_739, cbModelParam._m0[15u].z, fma(_738, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _737));
        float _1672;
        if (_1638 > 0.0)
        {
            _1672 = abs((1.0 - _1627) / _1638);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1627 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1672 = frontier_phi_17_15_ladder;
        }
        float _1897;
        if (_1641 > 0.0)
        {
            _1897 = abs((1.0 - _1631) / _1641);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1631 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1897 = frontier_phi_26_22_ladder;
        }
        float _2154;
        if (_1644 > 0.0)
        {
            _2154 = abs((1.0 - _1635) / _1644);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1635 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2154 = frontier_phi_38_33_ladder;
        }
        float _2156 = isnan(_1897) ? _1672 : (isnan(_1672) ? _1897 : min(_1672, _1897));
        float _2157 = isnan(_2154) ? _2156 : (isnan(_2156) ? _2154 : min(_2156, _2154));
        float _2161 = (_2157 * _1638) + _1627;
        float _2162 = (_2157 * _1641) + _1631;
        float _2163 = (_2157 * _1644) + _1635;
        float _2164 = _2157 * 9.9999997473787516355514526367188e-05;
        float _2166 = (-1.0) - _2164;
        float _2168 = _2164 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2163 > _2168) || ((_2163 < _2166) || ((_2162 > _2168) || ((_2162 < _2166) || ((_2161 < _2166) || (_2161 > _2168))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2291 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2163, cbModelParam._m0[9u].z, fma(_2162, cbModelParam._m0[9u].y, _2161 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2163, cbModelParam._m0[10u].z, fma(_2162, cbModelParam._m0[10u].y, _2161 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2163, cbModelParam._m0[11u].z, fma(_2162, cbModelParam._m0[11u].y, _2161 * cbModelParam._m0[11u].x))), _1580);
            frontier_phi_16_38_ladder = _2291.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2291.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2291.x * cbModelParam._m0[1u].y;
        }
        _1660 = frontier_phi_16_38_ladder_2;
        _1662 = frontier_phi_16_38_ladder_1;
        _1664 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1648 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_737, _738, _739), _1580);
        _1660 = _1648.x * cbModelParam._m0[1u].y;
        _1662 = _1648.y * cbModelParam._m0[1u].y;
        _1664 = _1648.z * cbModelParam._m0[1u].y;
    }
    float _1668 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _553);
    float _1669 = isnan(_1668) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1668 : min(cbModelParam._m0[25u].w, _1668));
    float _1760;
    float _1762;
    float _1764;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1724 = fma(_800, cbModelParam._m0[21u].z, fma(_796, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _792)) + cbModelParam._m0[21u].w;
        float _1728 = fma(_800, cbModelParam._m0[22u].z, fma(_796, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _792)) + cbModelParam._m0[22u].w;
        float _1732 = fma(_800, cbModelParam._m0[23u].z, fma(_796, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _792)) + cbModelParam._m0[23u].w;
        float _1735 = fma(_739, cbModelParam._m0[21u].z, fma(_738, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _737));
        float _1738 = fma(_739, cbModelParam._m0[22u].z, fma(_738, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _737));
        float _1741 = fma(_739, cbModelParam._m0[23u].z, fma(_738, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _737));
        float _1902;
        if (_1735 > 0.0)
        {
            _1902 = abs((1.0 - _1724) / _1735);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1724 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1902 = frontier_phi_28_24_ladder;
        }
        float _2181;
        if (_1738 > 0.0)
        {
            _2181 = abs((1.0 - _1728) / _1738);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1728 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2181 = frontier_phi_40_35_ladder;
        }
        float _2394;
        if (_1741 > 0.0)
        {
            _2394 = abs((1.0 - _1732) / _1741);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1732 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2394 = frontier_phi_49_46_ladder;
        }
        float _2396 = isnan(_2181) ? _1902 : (isnan(_1902) ? _2181 : min(_1902, _2181));
        float _2397 = isnan(_2394) ? _2396 : (isnan(_2396) ? _2394 : min(_2396, _2394));
        float _2401 = (_2397 * _1735) + _1724;
        float _2402 = (_2397 * _1738) + _1728;
        float _2403 = (_2397 * _1741) + _1732;
        float _2404 = _2397 * 9.9999997473787516355514526367188e-05;
        float _2405 = (-1.0) - _2404;
        float _2407 = _2404 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2403 > _2407) || ((_2403 < _2405) || ((_2402 > _2407) || ((_2402 < _2405) || ((_2401 < _2405) || (_2401 > _2407))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2647 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2403, cbModelParam._m0[17u].z, fma(_2402, cbModelParam._m0[17u].y, _2401 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2403, cbModelParam._m0[18u].z, fma(_2402, cbModelParam._m0[18u].y, _2401 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2403, cbModelParam._m0[19u].z, fma(_2402, cbModelParam._m0[19u].y, _2401 * cbModelParam._m0[19u].x))), _1669);
            frontier_phi_25_49_ladder = _2647.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2647.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2647.x * cbModelParam._m0[1u].z;
        }
        _1760 = frontier_phi_25_49_ladder_2;
        _1762 = frontier_phi_25_49_ladder_1;
        _1764 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1744 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_737, _738, _739), _1669);
        _1760 = _1744.x * cbModelParam._m0[1u].z;
        _1762 = _1744.y * cbModelParam._m0[1u].z;
        _1764 = _1744.z * cbModelParam._m0[1u].z;
    }
    float _1777 = (((_763 * _714) + _764) * _729) * ((cbModelParam._m0[1u].w * (_1760 - _1660)) + _1660);
    float _1779 = (((_763 * _716) + _764) * _729) * ((cbModelParam._m0[1u].w * (_1762 - _1662)) + _1662);
    float _1781 = (((_763 * _717) + _764) * _729) * ((cbModelParam._m0[1u].w * (_1764 - _1664)) + _1664);
    float _1784 = fma(_1781, cbSceneParam._m0[89u].z, fma(_1779, cbSceneParam._m0[89u].y, _1777 * cbSceneParam._m0[89u].x));
    float _1787 = fma(_1781, cbSceneParam._m0[90u].z, fma(_1779, cbSceneParam._m0[90u].y, _1777 * cbSceneParam._m0[90u].x));
    float _1790 = fma(_1781, cbSceneParam._m0[91u].z, fma(_1779, cbSceneParam._m0[91u].y, _1777 * cbSceneParam._m0[91u].x));
    vec4 _1798 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_651, _652));
    float _1800 = _1798.w;
    float _1812 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1800);
    float _1813 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1800);
    float _1814 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1800);
    uvec4 _1818 = floatBitsToUint(cbInstanceData._m0[_689 + 5u]);
    uint _1820 = _1818.x * 14u;
    uint _1821 = _1820 + 13u;
    float _1828 = _729 + (-1.0);
    float _1833 = (cbLight._m0[_1821].x * _1828) + 1.0;
    float _1834 = (cbLight._m0[_1821].y * _1828) + 1.0;
    float _1835 = (cbLight._m0[_1821].z * _1828) + 1.0;
    float _1836 = (cbLight._m0[_1821].w * _1828) + 1.0;
    uint _1837 = _1820 + 5u;
    float _1843 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
    uint _1847 = _1820 + 4u;
    float _1856 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
    uint _1860 = _1820 | 1u;
    float _1871 = dot(vec3(cbLight._m0[_1820].xyz), vec3(_550, _551, _552));
    float _1874 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_550, _551, _552));
    float _4148 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _4159 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1879 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * 0.3183098733425140380859375;
    float _1881 = (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * 0.3183098733425140380859375;
    float _1888 = ((cbLight._m0[_1837].x * _1843) * _1881) + (((cbLight._m0[_1847].x * _1812) * _1856) * _1879);
    float _1889 = ((_1843 * cbLight._m0[_1837].y) * _1881) + (((cbLight._m0[_1847].y * _1813) * _1856) * _1879);
    float _1890 = ((_1843 * cbLight._m0[_1837].z) * _1881) + (((cbLight._m0[_1847].z * _1814) * _1856) * _1879);
    uvec4 _1894 = floatBitsToUint(cbLight._m0[_1820 + 12u]);
    bool _1896 = _1894.x == 0u;
    float _1907;
    float _1909;
    float _1911;
    if (_1896)
    {
        _1907 = _1888;
        _1909 = _1889;
        _1911 = _1890;
    }
    else
    {
        uint _1915 = _1820 + 6u;
        float _1931 = (dot(vec3(cbLight._m0[_1820 + 2u].xyz), vec3(_550, _551, _552)) * 0.5) + 0.5;
        float _1932 = _1931 * _1931;
        float _4170 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1933 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1934 = isnan(1.0) ? _1835 : (isnan(_1835) ? 1.0 : min(_1835, 1.0));
        _1907 = (((cbLight._m0[_1915].x * 0.3183098733425140380859375) * _1933) * _1934) + _1888;
        _1909 = (((cbLight._m0[_1915].y * 0.3183098733425140380859375) * _1933) * _1934) + _1889;
        _1911 = (((cbLight._m0[_1915].z * 0.3183098733425140380859375) * _1933) * _1934) + _1890;
    }
    bool _1914 = _1894.y == 0u;
    float _1952;
    float _1954;
    float _1956;
    if (_1914)
    {
        _1952 = _1907;
        _1954 = _1909;
        _1956 = _1911;
    }
    else
    {
        uint _2125 = _1820 + 7u;
        float _2141 = (dot(vec3(cbLight._m0[_1820 + 3u].xyz), vec3(_550, _551, _552)) * 0.5) + 0.5;
        float _2142 = _2141 * _2141;
        float _4186 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2143 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _2144 = isnan(1.0) ? _1836 : (isnan(_1836) ? 1.0 : min(_1836, 1.0));
        _1952 = (((cbLight._m0[_2125].x * 0.3183098733425140380859375) * _2143) * _2144) + _1907;
        _1954 = (((cbLight._m0[_2125].y * 0.3183098733425140380859375) * _2143) * _2144) + _1909;
        _1956 = (((cbLight._m0[_2125].z * 0.3183098733425140380859375) * _2143) * _2144) + _1911;
    }
    uint _1959 = _1820 + 8u;
    float _1972 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1820].w)) * _553) * 0.949999988079071044921875);
    float _1973 = _1972 * _1972;
    float _1974 = cbLight._m0[_1820].x + _631;
    float _1975 = cbLight._m0[_1820].y + _632;
    float _1976 = cbLight._m0[_1820].z + _633;
    float _1980 = inversesqrt(dot(vec3(_1974, _1975, _1976), vec3(_1974, _1975, _1976)));
    float _1981 = _1980 * _1974;
    float _1982 = _1980 * _1975;
    float _1983 = _1980 * _1976;
    float _1984 = dot(vec3(_550, _551, _552), vec3(cbLight._m0[_1820].xyz));
    float _4202 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1987 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _4213 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _1988 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _1989 = dot(vec3(_550, _551, _552), vec3(_1981, _1982, _1983));
    float _4224 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1992 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _1993 = dot(vec3(cbLight._m0[_1820].xyz), vec3(_1981, _1982, _1983));
    float _4235 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1997 = _1973 * _1973;
    float _2001 = ((_1992 * _1992) * (_1997 + (-1.0))) + 1.0;
    float _2009 = exp2(log2(1.0 - (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) * 5.0);
    float _2010 = 0.959999978542327880859375 - _711;
    float _2012 = 0.959999978542327880859375 - _712;
    float _2013 = 0.959999978542327880859375 - _713;
    float _2020 = 1.0 - _1973;
    float _2031 = (0.5 / (((_1988 * ((_1987 * _2020) + _1973)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2020) + _1973) * _1987))) * _1987;
    float _4246 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2033 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_1997 / ((_2001 * _2001) * 3.141590118408203125));
    uint _2047 = _1820 + 9u;
    float _2058 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1860].w)) * _553) * 0.949999988079071044921875);
    float _2059 = _2058 * _2058;
    float _2060 = cbLight._m0[_1860].x + _631;
    float _2061 = cbLight._m0[_1860].y + _632;
    float _2062 = cbLight._m0[_1860].z + _633;
    float _2066 = inversesqrt(dot(vec3(_2060, _2061, _2062), vec3(_2060, _2061, _2062)));
    float _2067 = _2066 * _2060;
    float _2068 = _2066 * _2061;
    float _2069 = _2066 * _2062;
    float _2070 = dot(vec3(_550, _551, _552), vec3(cbLight._m0[_1860].xyz));
    float _4257 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2073 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _2074 = dot(vec3(_550, _551, _552), vec3(_2067, _2068, _2069));
    float _4268 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2077 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    float _2078 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_2067, _2068, _2069));
    float _4279 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2082 = _2059 * _2059;
    float _2086 = ((_2077 * _2077) * (_2082 + (-1.0))) + 1.0;
    float _2093 = exp2(log2(1.0 - (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) * 5.0);
    float _2100 = 1.0 - _2059;
    float _2110 = (0.5 / (((_1988 * ((_2073 * _2100) + _2059)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2100) + _2059) * _2073))) * _2073;
    float _4290 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2112 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2082 / ((_2086 * _2086) * 3.141590118408203125));
    float _2122 = (((((_2093 * _2010) + _714) * cbLight._m0[_2047].x) * _2112) * _1843) + ((((cbLight._m0[_1959].x * _1812) * ((_2009 * _2010) + _714)) * _2033) * _1856);
    float _2123 = (((((_2093 * _2012) + _716) * cbLight._m0[_2047].y) * _2112) * _1843) + ((((cbLight._m0[_1959].y * _1813) * ((_2009 * _2012) + _716)) * _2033) * _1856);
    float _2124 = (((((_2093 * _2013) + _717) * cbLight._m0[_2047].z) * _2112) * _1843) + ((((cbLight._m0[_1959].z * _1814) * ((_2009 * _2013) + _717)) * _2033) * _1856);
    float _2186;
    float _2188;
    float _2190;
    if (_1896)
    {
        _2186 = _2122;
        _2188 = _2123;
        _2190 = _2124;
    }
    else
    {
        uint _2192 = _1820 + 2u;
        uint _2196 = _1820 + 10u;
        float _2210 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2192].w)) * _553) * 0.949999988079071044921875);
        float _2211 = _2210 * _2210;
        float _2212 = cbLight._m0[_2192].x + _631;
        float _2213 = cbLight._m0[_2192].y + _632;
        float _2214 = cbLight._m0[_2192].z + _633;
        float _2218 = inversesqrt(dot(vec3(_2212, _2213, _2214), vec3(_2212, _2213, _2214)));
        float _2219 = _2218 * _2212;
        float _2220 = _2218 * _2213;
        float _2221 = _2218 * _2214;
        float _2222 = dot(vec3(_550, _551, _552), vec3(cbLight._m0[_2192].xyz));
        float _4301 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2225 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _2226 = dot(vec3(_550, _551, _552), vec3(_2219, _2220, _2221));
        float _4312 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2229 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _2230 = dot(vec3(cbLight._m0[_2192].xyz), vec3(_2219, _2220, _2221));
        float _4323 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2234 = _2211 * _2211;
        float _2238 = ((_2229 * _2229) * (_2234 + (-1.0))) + 1.0;
        float _2245 = exp2(log2(1.0 - (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) * 5.0);
        float _2252 = 1.0 - _2211;
        float _2262 = (0.5 / (((_1988 * ((_2225 * _2252) + _2211)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2252) + _2211) * _2225))) * _2225;
        float _4334 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2264 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2234 / ((_2238 * _2238) * 3.141590118408203125));
        float _2265 = isnan(1.0) ? _1835 : (isnan(_1835) ? 1.0 : min(_1835, 1.0));
        _2186 = (((((_2245 * _2010) + _714) * cbLight._m0[_2196].x) * _2264) * _2265) + _2122;
        _2188 = (((((_2245 * _2012) + _716) * cbLight._m0[_2196].y) * _2264) * _2265) + _2123;
        _2190 = (((((_2245 * _2013) + _717) * cbLight._m0[_2196].z) * _2264) * _2265) + _2124;
    }
    float _2300;
    float _2302;
    float _2304;
    if (_1914)
    {
        _2300 = _2186;
        _2302 = _2188;
        _2304 = _2190;
    }
    else
    {
        uint _2311 = _1820 + 3u;
        uint _2315 = _1820 + 11u;
        float _2329 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2311].w)) * _553) * 0.949999988079071044921875);
        float _2330 = _2329 * _2329;
        float _2331 = cbLight._m0[_2311].x + _631;
        float _2332 = cbLight._m0[_2311].y + _632;
        float _2333 = cbLight._m0[_2311].z + _633;
        float _2337 = inversesqrt(dot(vec3(_2331, _2332, _2333), vec3(_2331, _2332, _2333)));
        float _2338 = _2337 * _2331;
        float _2339 = _2337 * _2332;
        float _2340 = _2337 * _2333;
        float _2341 = dot(vec3(_550, _551, _552), vec3(cbLight._m0[_2311].xyz));
        float _4350 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2344 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _2345 = dot(vec3(_550, _551, _552), vec3(_2338, _2339, _2340));
        float _4361 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2348 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2349 = dot(vec3(cbLight._m0[_2311].xyz), vec3(_2338, _2339, _2340));
        float _4372 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2353 = _2330 * _2330;
        float _2357 = ((_2348 * _2348) * (_2353 + (-1.0))) + 1.0;
        float _2364 = exp2(log2(1.0 - (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) * 5.0);
        float _2371 = 1.0 - _2330;
        float _2381 = (0.5 / (((_1988 * ((_2344 * _2371) + _2330)) + 9.9999999392252902907785028219223e-09) + (((_1988 * _2371) + _2330) * _2344))) * _2344;
        float _4383 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2383 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2353 / ((_2357 * _2357) * 3.141590118408203125));
        float _2384 = isnan(1.0) ? _1836 : (isnan(_1836) ? 1.0 : min(_1836, 1.0));
        _2300 = (((((_2364 * _2010) + _714) * cbLight._m0[_2315].x) * _2383) * _2384) + _2186;
        _2302 = (((((_2364 * _2012) + _716) * cbLight._m0[_2315].y) * _2383) * _2384) + _2188;
        _2304 = (((((_2364 * _2013) + _717) * cbLight._m0[_2315].z) * _2383) * _2384) + _2190;
    }
    float _2519;
    float _2521;
    float _2523;
    float _2525;
    float _2527;
    float _2529;
    if (_1818.y == 0u)
    {
        float _2459 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2460 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2459;
        float _2461 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2459;
        float _2462 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2459;
        uvec4 _2474 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2475 = _2474.x;
        uint _2486 = uint((float(_2474.y) * floor(float(uint(cbSceneParam._m0[85u].y * _652) / _2475))) + floor(float(uint(cbSceneParam._m0[85u].x * _651) / _2475)));
        float _2496 = (log2(_2462 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2497 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        uint _2500 = uint(isnan(14.0) ? _2497 : (isnan(_2497) ? 14.0 : min(_2497, 14.0)));
        uvec4 _2505 = texelFetch(g_lightClusterGridBuffer, int(((_2500 << 2u) + (_2486 << 6u)) >> 2u));
        uint _2506 = _2505.x;
        uint _2507 = _2474.z;
        float _2652;
        float _2654;
        float _2656;
        float _2658;
        float _2660;
        float _2662;
        if (((((1u << ((_2507 >> 4u) & 15u)) + 4294967295u) & _2506) == 0u) || ((_2507 & 240u) == 0u))
        {
            _2652 = 0.0;
            _2654 = 0.0;
            _2656 = 0.0;
            _2658 = 0.0;
            _2660 = 0.0;
            _2662 = 0.0;
        }
        else
        {
            float _2653;
            float _2655;
            float _2657;
            float _2659;
            float _2661;
            float _2663;
            float _2813 = 0.0;
            float _2814 = 0.0;
            float _2815 = 0.0;
            float _2816 = 0.0;
            float _2817 = 0.0;
            float _2818 = 0.0;
            uint _2819 = 0u;
            uint _2828;
            bool _2829;
            for (;;)
            {
                _2828 = texelFetch(g_lightClassification, int((((_2500 << 5u) + (_2486 << 9u)) + (_2819 << 2u)) >> 2u)).x;
                _2829 = _2828 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2829)
                {
                    frontier_phi_66_pred = _2813;
                    frontier_phi_66_pred_1 = _2818;
                    frontier_phi_66_pred_2 = _2817;
                    frontier_phi_66_pred_3 = _2816;
                    frontier_phi_66_pred_4 = _2815;
                    frontier_phi_66_pred_5 = _2814;
                }
                else
                {
                    float _2958;
                    float _2959;
                    float _2960;
                    float _2961;
                    float _2962;
                    float _2963;
                    uint _2964;
                    _2958 = _2813;
                    _2959 = _2814;
                    _2960 = _2815;
                    _2961 = _2816;
                    _2962 = _2817;
                    _2963 = _2818;
                    _2964 = _2828;
                    float _2885;
                    float _2886;
                    float _2887;
                    float _2888;
                    float _2889;
                    float _2890;
                    for (;;)
                    {
                        uint _2968 = uint(findLSB(_2964)) + (_2819 << 5u);
                        uint _2965 = (_2964 + 4294967295u) & _2964;
                        uint _2970 = _2968 * 48u;
                        vec4 _2984 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2970)).x, texelFetch(g_PointLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2970 + 3u)).x));
                        uint _2990 = (_2968 * 48u) + 4u;
                        vec4 _3003 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2990)).x, texelFetch(g_PointLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2990 + 3u)).x));
                        uint _3009 = (_2968 * 48u) + 8u;
                        vec3 _3020 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3009)).x, texelFetch(g_PointLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3009 + 2u)).x));
                        float _3024 = _2984.x - _2460;
                        float _3025 = _2984.y - _2461;
                        float _3026 = _2984.z - _2462;
                        float _3027 = dot(vec3(_3024, _3025, _3026), vec3(_3024, _3025, _3026));
                        float _3030 = inversesqrt(_3027);
                        float _3031 = _3030 * _3024;
                        float _3032 = _3030 * _3025;
                        float _3033 = _3030 * _3026;
                        float _3034 = dot(vec3(_670, _673, _676), vec3(_3031, _3032, _3033));
                        float _3039 = 1.0 - (_3027 * _2984.w);
                        float _4409 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                        float _3040 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                        float _3041 = sqrt(_3027) * _3003.w;
                        float _3044 = 1.39999997615814208984375 / (_3041 + 1.39999997615814208984375);
                        float _3045 = _3044 * _3044;
                        float _3048 = ((1.0 - _3045) * _3034) + _3045;
                        float _3051 = _3041 * _3041;
                        float _3055 = ((isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0))) * _3040) / ((_3051 * 0.699999988079071044921875) + 1.0);
                        float _3059 = (-0.0) - _2460;
                        float _3060 = (-0.0) - _2461;
                        float _3061 = (-0.0) - _2462;
                        float _3065 = inversesqrt(dot(vec3(_3059, _3060, _3061), vec3(_3059, _3060, _3061)));
                        float _3066 = _3065 * _3059;
                        float _3067 = _3065 * _3060;
                        float _3068 = _3065 * _3061;
                        float _3076 = exp2(log2(1.0 / ((_3051 * 3.5) + 5.0)) * 0.25);
                        float _3077 = 1.0 - _745;
                        float _3084 = sqrt(1.0 - ((1.0 - (_3077 * _3077)) * (1.0 - (_3076 * _3076))));
                        float _3085 = _3084 * _3084;
                        float _3086 = _3085 * _3085;
                        float _3087 = _3066 + _3031;
                        float _3088 = _3067 + _3032;
                        float _3089 = _3068 + _3033;
                        float _3093 = inversesqrt(dot(vec3(_3087, _3088, _3089), vec3(_3087, _3088, _3089)));
                        float _3097 = dot(vec3(_670, _673, _676), vec3(_3066, _3067, _3068));
                        float _4425 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                        float _3100 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                        float _3101 = dot(vec3(_670, _673, _676), vec3(_3093 * _3087, _3093 * _3088, _3093 * _3089));
                        float _4436 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                        float _3104 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                        float _3108 = ((_3104 * _3104) * (_3086 + (-1.0))) + 1.0;
                        float _3109 = _3044 * _3085;
                        float _3110 = _3109 * _3109;
                        float _3113 = ((1.0 - _3110) * _3034) + _3110;
                        float _4447 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                        float _3114 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                        float _3115 = 1.0 - _3085;
                        float _3125 = (0.5 / (((_3114 * ((_3100 * _3115) + _3085)) + 9.9999999392252902907785028219223e-09) + (((_3114 * _3115) + _3085) * _3100))) * _3114;
                        float _4458 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                        float _3136 = (((_3086 * 3.1415927410125732421875) * (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) / ((_3108 * _3108) * ((_3051 * 2.1991131305694580078125) + 3.141590118408203125))) * _3040;
                        _2888 = (_3055 * _3003.x) + _2961;
                        _2889 = (_3055 * _3003.y) + _2962;
                        _2890 = (_3055 * _3003.z) + _2963;
                        _2885 = (_3136 * _3020.x) + _2958;
                        _2886 = (_3136 * _3020.y) + _2959;
                        _2887 = (_3136 * _3020.z) + _2960;
                        if (_2965 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2958 = _2885;
                            _2959 = _2886;
                            _2960 = _2887;
                            _2961 = _2888;
                            _2962 = _2889;
                            _2963 = _2890;
                            _2964 = _2965;
                        }
                    }
                    frontier_phi_66_pred = _2885;
                    frontier_phi_66_pred_1 = _2890;
                    frontier_phi_66_pred_2 = _2889;
                    frontier_phi_66_pred_3 = _2888;
                    frontier_phi_66_pred_4 = _2887;
                    frontier_phi_66_pred_5 = _2886;
                }
                _2653 = frontier_phi_66_pred;
                _2663 = frontier_phi_66_pred_1;
                _2661 = frontier_phi_66_pred_2;
                _2659 = frontier_phi_66_pred_3;
                _2657 = frontier_phi_66_pred_4;
                _2655 = frontier_phi_66_pred_5;
                uint _2820 = _2819 + 1u;
                if (_2820 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2813 = _2653;
                    _2814 = _2655;
                    _2815 = _2657;
                    _2816 = _2659;
                    _2817 = _2661;
                    _2818 = _2663;
                    _2819 = _2820;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2652 = _2653;
            _2654 = _2655;
            _2656 = _2657;
            _2658 = _2659;
            _2660 = _2661;
            _2662 = _2663;
        }
        uvec4 _2666 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2667 = _2666.z;
        uint _2669 = (_2667 >> 8u) & 15u;
        float _2781;
        float _2783;
        float _2785;
        float _2787;
        float _2789;
        float _2791;
        if (((4294967295u << _2669) & _2506) == 0u)
        {
            _2781 = _2652;
            _2783 = _2654;
            _2785 = _2656;
            _2787 = _2658;
            _2789 = _2660;
            _2791 = _2662;
        }
        else
        {
            float _2806 = inversesqrt(dot(vec3(_2460, _2461, _2462), vec3(_2460, _2461, _2462)));
            float _2807 = _2806 * _2460;
            float _2808 = _2806 * _2461;
            float _2809 = _2806 * _2462;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2669 < ((_2667 >> 12u) & 15u))
            {
                float _2782;
                float _2784;
                float _2786;
                float _2788;
                float _2790;
                float _2792;
                float _2941 = _2652;
                float _2942 = _2654;
                float _2943 = _2656;
                float _2944 = _2658;
                float _2945 = _2660;
                float _2946 = _2662;
                uint _2947 = _2669;
                uint _2956;
                bool _2957;
                for (;;)
                {
                    _2956 = texelFetch(g_lightClassification, int((((_2500 << 5u) + (_2486 << 9u)) + (_2947 << 2u)) >> 2u)).x;
                    _2957 = _2956 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2957)
                    {
                        frontier_phi_77_pred = _2946;
                        frontier_phi_77_pred_1 = _2945;
                        frontier_phi_77_pred_2 = _2944;
                        frontier_phi_77_pred_3 = _2943;
                        frontier_phi_77_pred_4 = _2942;
                        frontier_phi_77_pred_5 = _2941;
                    }
                    else
                    {
                        float _3150;
                        float _3151;
                        float _3152;
                        float _3153;
                        float _3154;
                        float _3155;
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3163 = _2941;
                        float _3164 = _2942;
                        float _3165 = _2943;
                        float _3166 = _2944;
                        float _3167 = _2945;
                        float _3168 = _2946;
                        uint _3169 = _2956;
                        uint _3170;
                        vec4 _3195;
                        float _3196;
                        vec4 _3211;
                        vec3 _3223;
                        vec4 _3238;
                        vec4 _3254;
                        float _3301;
                        bool _3302;
                        for (;;)
                        {
                            uint _3180 = ((_2947 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3169));
                            _3170 = (_3169 + 4294967295u) & _3169;
                            uint _3182 = _3180 * 40u;
                            _3195 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 3u)).x));
                            _3196 = _3195.w;
                            uint _3198 = (_3180 * 40u) + 4u;
                            _3211 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 3u)).x));
                            uint _3213 = (_3180 * 40u) + 8u;
                            _3223 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x));
                            uint _3225 = (_3180 * 40u) + 16u;
                            _3238 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 3u)).x));
                            uint _3241 = (_3180 * 40u) + 20u;
                            _3254 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3241)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 3u)).x));
                            uint _3257 = (_3180 * 40u) + 24u;
                            vec4 _3270 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 3u)).x));
                            uint _3276 = (_3180 * 40u) + 28u;
                            vec4 _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            _3301 = fma(_2462, _3289.z, fma(_2461, _3289.y, _3289.x * _2460)) + _3289.w;
                            _3302 = !((fma(_2462, _3270.z, fma(_2461, _3270.y, _3270.x * _2460)) + _3270.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3302)
                            {
                                float _3329 = _3195.x - _2460;
                                float _3330 = _3195.y - _2461;
                                float _3331 = _3195.z - _2462;
                                float _3332 = dot(vec3(_3329, _3330, _3331), vec3(_3329, _3330, _3331));
                                float _3335 = inversesqrt(_3332);
                                float _3336 = _3335 * _3329;
                                float _3337 = _3335 * _3330;
                                float _3338 = _3335 * _3331;
                                float _3342 = 1.0 - (_3332 / (_3196 * _3196));
                                float _4469 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                                float _3343 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                                float _3347 = sqrt(_3332) * _3211.w;
                                float _3349 = 1.39999997615814208984375 / (_3347 + 1.39999997615814208984375);
                                float _3350 = _3349 * _3349;
                                float _3353 = ((1.0 - _3350) * dot(vec3(_3336, _3337, _3338), vec3(_670, _673, _676))) + _3350;
                                float _3356 = _3347 * _3347;
                                float _3360 = (fma(_2462, _3238.z, fma(_2461, _3238.y, _3238.x * _2460)) + _3238.w) / _3301;
                                float _3361 = (fma(_2462, _3254.z, fma(_2461, _3254.y, _3254.x * _2460)) + _3254.w) / _3301;
                                float _3365 = 1.0 - dot(vec2(_3360, _3361), vec2(_3360, _3361));
                                float _4485 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                                float _3366 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                                float _3367 = _3366 * (((isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0))) * _3343) / ((_3356 * 0.699999988079071044921875) + 1.0));
                                float _3379 = exp2(log2(1.0 / ((_3356 * 3.5) + 5.0)) * 0.25);
                                float _3380 = 1.0 - _745;
                                float _3387 = sqrt(1.0 - ((1.0 - (_3380 * _3380)) * (1.0 - (_3379 * _3379))));
                                float _3388 = _3387 * _3387;
                                float _3389 = _3388 * _3388;
                                float _3390 = _3336 - _2807;
                                float _3391 = _3337 - _2808;
                                float _3392 = _3338 - _2809;
                                float _3396 = inversesqrt(dot(vec3(_3390, _3391, _3392), vec3(_3390, _3391, _3392)));
                                float _3400 = dot(vec3(_670, _673, _676), vec3((-0.0) - _2807, (-0.0) - _2808, (-0.0) - _2809));
                                float _4496 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                                float _3403 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                                float _3404 = dot(vec3(_670, _673, _676), vec3(_3396 * _3390, _3396 * _3391, _3396 * _3392));
                                float _4507 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                                float _3407 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                                float _3411 = ((_3407 * _3407) * (_3389 + (-1.0))) + 1.0;
                                float _3412 = _3349 * _3388;
                                float _3413 = _3412 * _3412;
                                float _3419 = ((1.0 - _3413) * dot(vec3(_670, _673, _676), vec3(_3336, _3337, _3338))) + _3413;
                                float _4518 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                                float _3420 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                                float _3421 = 1.0 - _3388;
                                float _3431 = (0.5 / (((_3420 * ((_3403 * _3421) + _3388)) + 9.9999999392252902907785028219223e-09) + (((_3420 * _3421) + _3388) * _3403))) * _3420;
                                float _4529 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                                float _3441 = (_3366 * _3343) * (((_3389 * 3.1415927410125732421875) * (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0)))) / ((_3411 * _3411) * ((_3356 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3367 * _3211.y;
                                frontier_phi_83_pred_1 = _3367 * _3211.x;
                                frontier_phi_83_pred_2 = _3441 * _3223.z;
                                frontier_phi_83_pred_3 = _3441 * _3223.y;
                                frontier_phi_83_pred_4 = _3441 * _3223.x;
                                frontier_phi_83_pred_5 = _3367 * _3211.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3449 = frontier_phi_83_pred;
                            _3448 = frontier_phi_83_pred_1;
                            _3447 = frontier_phi_83_pred_2;
                            _3446 = frontier_phi_83_pred_3;
                            _3445 = frontier_phi_83_pred_4;
                            _3450 = frontier_phi_83_pred_5;
                            _3153 = _3448 + _3166;
                            _3154 = _3449 + _3167;
                            _3155 = _3450 + _3168;
                            _3150 = _3445 + _3163;
                            _3151 = _3446 + _3164;
                            _3152 = _3447 + _3165;
                            if (_3170 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3163 = _3150;
                                _3164 = _3151;
                                _3165 = _3152;
                                _3166 = _3153;
                                _3167 = _3154;
                                _3168 = _3155;
                                _3169 = _3170;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3155;
                        frontier_phi_77_pred_1 = _3154;
                        frontier_phi_77_pred_2 = _3153;
                        frontier_phi_77_pred_3 = _3152;
                        frontier_phi_77_pred_4 = _3151;
                        frontier_phi_77_pred_5 = _3150;
                    }
                    _2792 = frontier_phi_77_pred;
                    _2790 = frontier_phi_77_pred_1;
                    _2788 = frontier_phi_77_pred_2;
                    _2786 = frontier_phi_77_pred_3;
                    _2784 = frontier_phi_77_pred_4;
                    _2782 = frontier_phi_77_pred_5;
                    uint _2948 = _2947 + 1u;
                    if (_2948 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2941 = _2782;
                        _2942 = _2784;
                        _2943 = _2786;
                        _2944 = _2788;
                        _2945 = _2790;
                        _2946 = _2792;
                        _2947 = _2948;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2786;
                frontier_phi_58_59_ladder_1 = _2792;
                frontier_phi_58_59_ladder_2 = _2790;
                frontier_phi_58_59_ladder_3 = _2788;
                frontier_phi_58_59_ladder_4 = _2784;
                frontier_phi_58_59_ladder_5 = _2782;
            }
            else
            {
                frontier_phi_58_59_ladder = _2656;
                frontier_phi_58_59_ladder_1 = _2662;
                frontier_phi_58_59_ladder_2 = _2660;
                frontier_phi_58_59_ladder_3 = _2658;
                frontier_phi_58_59_ladder_4 = _2654;
                frontier_phi_58_59_ladder_5 = _2652;
            }
            _2781 = frontier_phi_58_59_ladder_5;
            _2783 = frontier_phi_58_59_ladder_4;
            _2785 = frontier_phi_58_59_ladder;
            _2787 = frontier_phi_58_59_ladder_3;
            _2789 = frontier_phi_58_59_ladder_2;
            _2791 = frontier_phi_58_59_ladder_1;
        }
        float _2796 = isnan(1.0) ? _729 : (isnan(_729) ? 1.0 : min(_729, 1.0));
        _2519 = (_2796 * _2787) + _1952;
        _2521 = (_2796 * _2789) + _1954;
        _2523 = (_2796 * _2791) + _1956;
        _2525 = ((_2781 * _714) * _2796) + _2300;
        _2527 = ((_2783 * _716) * _2796) + _2302;
        _2529 = ((_2785 * _717) * _2796) + _2304;
    }
    else
    {
        _2519 = _1952;
        _2521 = _1954;
        _2523 = _1956;
        _2525 = _2300;
        _2527 = _2302;
        _2529 = _2304;
    }
    uint _2535 = _690 + uint(cbMatDynParam._m0[0u].w);
    float _2541 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].y;
    float _2547 = (((((_2541 * cbMtdParam._m0[10u].x) * _431.x) * _454) * _529) * (((1.0 - _508) * cbMtdParam._m0[16u].y) + _508)) * cbInstanceData._m0[_2535].x;
    float _2553 = (((((_2541 * cbMtdParam._m0[10u].y) * _431.y) * _454) * _529) * (((1.0 - _510) * cbMtdParam._m0[16u].y) + _510)) * cbInstanceData._m0[_2535].y;
    float _2559 = (((((_2541 * cbMtdParam._m0[10u].z) * _431.z) * _454) * _529) * (((1.0 - _512) * cbMtdParam._m0[16u].y) + _512)) * cbInstanceData._m0[_2535].z;
    float _4545 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _4556 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _4567 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _2576 = (((isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * (_2519 + ((isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))) * _729))) + ((_2525 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1569)) * cbPerFrame._m0[3u].x)) + _2547;
    float _2578 = (_2553 + ((_2527 + ((isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))) * _1569)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2521 + ((isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))) * _729)));
    float _2580 = (_2559 + ((_2529 + ((isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))) * _1569)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * (_2523 + ((isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))) * _729)));
    float _2581 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
    float _2582 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2583 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2589 = cbMtdParam._m0[2u].x * _2547;
    float _2590 = cbMtdParam._m0[2u].y * _2553;
    float _2591 = cbMtdParam._m0[2u].z * _2559;
    float _4593 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2593 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
    uint _2594 = _689 + 6u;
    float _2602 = _651 / cbSceneParam._m0[86u].x;
    float _2603 = _652 / cbSceneParam._m0[86u].y;
    vec4 _2617 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2602, _2603, (log2((isnan(cbSceneParam._m0[77u].w) ? _573 : (isnan(_573) ? cbSceneParam._m0[77u].w : min(_573, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2619 = _2617.x;
    float _2620 = _2617.y;
    float _2621 = _2617.z;
    float _2622 = _2617.w;
    float _2714;
    float _2716;
    float _2718;
    float _2720;
    if (_573 > cbSceneParam._m0[78u].w)
    {
        float _2677 = isnan(_573) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _573 : min(cbSceneParam._m0[80u].w, _573));
        float _2678 = _2677 / _573;
        float _2689 = _2678 * _624;
        float _2690 = _625 * _2678;
        float _2691 = (-0.0) - _2690;
        float _2692 = _2678 * _626;
        float _2694 = (cbSceneParam._m0[77u].w * _2691) / _2677;
        float _2695 = _2694 + cbSceneParam._m0[79u].w;
        float _2696 = cbSceneParam._m0[79u].w - _2690;
        float _2702 = sqrt(((_2689 * _2689) + (_2690 * _2690)) + (_2692 * _2692));
        float _2705 = (1.0 - (cbSceneParam._m0[77u].w / _2677)) * _2702;
        float _2710 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2712 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2898;
        if (abs((_2691 - _2694) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2898 = ((((_2695 > 0.0) ? exp2(_2710 * _2695) : (2.0 - exp2(_2712 * _2695))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2705;
        }
        else
        {
            float _2842 = 1.0 / cbSceneParam._m0[80u].x;
            float _2843 = isnan(_2696) ? _2695 : (isnan(_2695) ? _2696 : max(_2695, _2696));
            float _2844 = isnan(_2696) ? _2695 : (isnan(_2695) ? _2696 : min(_2695, _2696));
            float _2853 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : min(_2843, 0.0));
            float _2854 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : min(_2844, 0.0));
            _2898 = ((abs(_2702 / _2691) * cbSceneParam._m0[80u].y) * ((((_2853 - _2854) * 2.0) - ((exp2(_2710 * (isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0)))) - exp2(_2710 * (isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0))))) * _2842)) - ((exp2(_2712 * _2853) - exp2(_2712 * _2854)) * _2842))) + (_2705 * cbSceneParam._m0[80u].z);
        }
        vec4 _2900 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2602, _2603, 1.0), 0.0);
        float _2909 = exp2((_2898 * (-1.44269502162933349609375)) * (1.0 - _2900.w));
        float _2910 = log2(_2909);
        float _2926 = log2(_2622);
        _2714 = (exp2(_2926 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2910 * cbSceneParam._m0[78u].x)) * _2900.x) / cbSceneParam._m0[78u].x)) + _2619;
        _2716 = (exp2(_2926 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2910 * cbSceneParam._m0[78u].y)) * _2900.y) / cbSceneParam._m0[78u].y)) + _2620;
        _2718 = (exp2(_2926 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2910 * cbSceneParam._m0[78u].z)) * _2900.z) / cbSceneParam._m0[78u].z)) + _2621;
        _2720 = _2909 * _2622;
    }
    else
    {
        _2714 = _2619;
        _2716 = _2620;
        _2718 = _2621;
        _2720 = _2622;
    }
    bool _2936;
    vec4 _2730;
    vec4 _2752;
    float _2754;
    float _2758;
    float _2759;
    float _2760;
    float _2763;
    float _2766;
    float _2769;
    float _2770;
    bool _2780;
    for (;;)
    {
        _2730 = cbMatDynParam._m0[0u];
        float _2732 = roundEven(_2730.y);
        bool _2733 = _2732 == 3.0;
        float _2734 = log2(_2720);
        float _2738 = exp2(_2734 * cbSceneParam._m0[78u].x);
        float _2739 = exp2(_2734 * cbSceneParam._m0[78u].y);
        float _2740 = exp2(_2734 * cbSceneParam._m0[78u].z);
        float _2741 = _2738 * _2581;
        float _2742 = _2739 * _2582;
        float _2743 = _2740 * _2583;
        float _2750 = _640 + (-0.5);
        _2752 = cbMtdParam._m0[1u];
        _2754 = _2752.y * _2750;
        float _2757 = (_2732 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2758 = _2757 * (_2733 ? _2741 : (_2741 + (cbSceneParam._m0[72u].w * _2714)));
        _2759 = _2757 * (_2733 ? _2742 : (_2742 + (cbSceneParam._m0[72u].w * _2716)));
        _2760 = _2757 * (_2733 ? _2743 : (_2743 + (cbSceneParam._m0[72u].w * _2718)));
        _2763 = ((_2589 * _2593) * _2738) * _2757;
        _2766 = ((_2590 * _2593) * _2739) * _2757;
        _2769 = ((_2591 * _2593) * _2740) * _2757;
        _2770 = _2750 * 0.999000012874603271484375;
        _2780 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2780)
        {
            if ((cbInstanceData._m0[_689 + 7u].x + _2770) < 0.5)
            {
                _2936 = true;
                break;
            }
        }
        uint _2877 = _690 + uint(_2730.w);
        if ((cbInstanceData._m0[_2877].w < 1.0) && ((cbInstanceData._m0[_2877].w + _2770) < 0.5))
        {
            _2936 = true;
            break;
        }
        if ((_2754 + 1.0) < _2752.x)
        {
            _2936 = true;
            break;
        }
        _2936 = false;
        break;
    }
    float _3141;
    if (_2936)
    {
        discard_state = true;
        _3141 = 0.0;
    }
    else
    {
        _3141 = cbInstanceData._m0[_2594].w;
    }
    SV_Target.x = _2758;
    SV_Target.y = _2759;
    SV_Target.z = _2760;
    SV_Target.w = _3141;
    SV_Target_1.x = _2763;
    SV_Target_1.y = _2766;
    SV_Target_1.z = _2769;
    SV_Target_1.w = cbInstanceData._m0[_2594].w;
    discard_exit();
}


