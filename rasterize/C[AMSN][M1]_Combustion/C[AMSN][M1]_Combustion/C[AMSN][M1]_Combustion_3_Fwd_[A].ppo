#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1010;
float _3428;
float _3429;
float _3430;
float _3431;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _241 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _247 = _241.x * cbMtdParam._m0[9u].x;
    float _248 = _241.y * cbMtdParam._m0[9u].y;
    float _249 = _241.z * cbMtdParam._m0[9u].z;
    vec4 _262 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    vec4 _277 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _281 = _277.z;
    float _285 = (_277.x * 2.0) + (-1.0);
    float _287 = (_277.y * 2.0) + (-1.0);
    float _288 = dot(vec2(_285, _287), vec2(_285, _287));
    float _3440 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _294 = sqrt(1.0 - (isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0))));
    vec4 _334 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _348 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3451 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _349 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
    float _357 = (((_349 * _349) * (3.0 - (_349 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _366 = cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x;
    float _374 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3462 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _375 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
    float _379 = (_375 * _375) * (3.0 - (_375 * 2.0));
    float _380 = _379 * cbMtdParam._m0[16u].w;
    float _381 = _379 * cbMtdParam._m0[17u].x;
    float _382 = sin(_366);
    float _383 = cos(_366);
    float _384 = TEXCOORD.z - _380;
    float _385 = TEXCOORD.w - _381;
    vec4 _405 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_380 + fma(_385, (-0.0) - _382, _384 * _383))) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (fma(_385, _383, _384 * _382) + _381)) + cbTextureTilingScale._m0[0u].w));
    float _411 = (cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].w) * _405.x;
    float _413 = (cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].w) * _405.y;
    float _415 = (cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].w) * _405.z;
    float _433 = (TEXCOORD_5.x - (((_262.x + 0.00999999977648258209228515625) * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[16u].z)) * (cbMtdParam._m0[13u].x + 1.0);
    float _3473 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
    float _437 = fma(_294, _212 * NORMAL.x, fma(_287, _219 * TANGENT.x, (_205 * _197) * _285));
    float _440 = fma(_294, _212 * NORMAL.y, fma(_287, _219 * TANGENT.y, (_205 * _198) * _285));
    float _443 = fma(_294, _212 * NORMAL.z, fma(_287, _219 * TANGENT.z, (_205 * _199) * _285));
    float _447 = inversesqrt(dot(vec3(_437, _440, _443), vec3(_437, _440, _443)));
    float _448 = _447 * _437;
    float _449 = _447 * _440;
    float _450 = _447 * _443;
    float _3484 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _451 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
    float _3495 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3506 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _3517 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _470 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _511 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _521 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _511);
    float _522 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _511);
    float _523 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _511);
    float _527 = inversesqrt(dot(vec3(_521, _522, _523), vec3(_521, _522, _523)));
    float _528 = _521 * _527;
    float _529 = _522 * _527;
    float _530 = _523 * _527;
    vec4 _535 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _537 = _535.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _690 = sqrt(((_521 * _521) + (_522 * _522)) + (_523 * _523));
        float _696 = (cbMatDynParam._m0[5u].x * _690) + cbMatDynParam._m0[5u].y;
        float _3528 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        float _697 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _701 = (cbMatDynParam._m0[5u].z * _690) + cbMatDynParam._m0[5u].w;
        float _3539 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) - _697)) + _697) < ((_537 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _548 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _549 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _567 = fma(_450, cbSceneParam._m0[5u].z, fma(_449, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _448));
    float _570 = fma(_450, cbSceneParam._m0[6u].z, fma(_449, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _448));
    float _573 = fma(_450, cbSceneParam._m0[7u].z, fma(_449, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _448));
    uint _586 = uint(roundEven(NORMAL.w)) * 13u;
    uint _587 = _586 + 9u;
    uint _588 = _587 + uint(cbMatDynParam._m0[0u].w);
    float _594 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0)))) * cbInstanceData._m0[_588].x;
    float _595 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0)))) * cbInstanceData._m0[_588].y;
    float _596 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0)))) * cbInstanceData._m0[_588].z;
    float _3550 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _597 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
    float _3561 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _598 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    float _3572 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _599 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
    vec4 _608 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _548, cbSceneParam._m0[86u].y * _549));
    float _611 = _608.x * TEXCOORD_5.w;
    float _612 = dot(vec3(_448, _449, _450), vec3(_528, _529, _530));
    float _615 = _612 * 2.0;
    float _619 = (_615 * _448) - _528;
    float _620 = (_615 * _449) - _529;
    float _621 = (_615 * _450) - _530;
    float _625 = abs(dot(vec3(_528, _529, _530), vec3(_448, _449, _450)));
    float _3583 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _627 = sqrt(_451);
    float _639 = exp2((_627 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_627 * 3.0));
    float _671 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _675 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _679 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1009;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _734 = fma(_679, cbModelParam._m0[26u].z, fma(_675, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _671));
        float _738 = fma(_679, cbModelParam._m0[27u].z, fma(_675, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _671));
        float _742 = fma(_679, cbModelParam._m0[28u].z, fma(_675, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _671));
        float _767 = _671 + _448;
        float _768 = _675 + _449;
        float _769 = _679 + _450;
        float _779 = fma(_769, cbModelParam._m0[26u].z, fma(_768, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _767)) - _734;
        float _780 = fma(_769, cbModelParam._m0[27u].z, fma(_768, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _767)) - _738;
        float _781 = fma(_769, cbModelParam._m0[28u].z, fma(_768, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _767)) - _742;
        float _785 = inversesqrt(dot(vec3(_779, _780, _781), vec3(_779, _780, _781)));
        float _798 = ((_785 * _779) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_734 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _799 = ((_785 * _780) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_738 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _800 = ((_785 * _781) / cbModelParam._m0[34u].z) + ((((((_742 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _803 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_798, _799, _800), 0.0);
        vec4 _810 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_798, _799, _800), 0.0);
        vec4 _817 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_798, _799, _800), 0.0);
        vec4 _824 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_798, _799, _800), 0.0);
        float _837 = exp2((_803.w + (-0.5)) * 20.0) * 2.0;
        float _838 = _837 * (_803.x + (-0.5));
        float _839 = _837 * (_803.y + (-0.5));
        float _840 = _837 * (_803.z + (-0.5));
        float _847 = exp2((_810.w + (-0.5)) * 20.0) * 2.0;
        float _848 = _847 * (_810.x + (-0.5));
        float _849 = _847 * (_810.y + (-0.5));
        float _850 = _847 * (_810.z + (-0.5));
        float _857 = exp2((_817.w + (-0.5)) * 20.0) * 2.0;
        float _858 = _857 * (_817.x + (-0.5));
        float _859 = _857 * (_817.y + (-0.5));
        float _860 = _857 * (_817.z + (-0.5));
        float _867 = exp2((_824.w + (-0.5)) * 20.0) * 2.0;
        float _868 = _867 * (_824.x + (-0.5));
        float _869 = _867 * (_824.y + (-0.5));
        float _870 = _867 * (_824.z + (-0.5));
        float _871 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _872 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _873 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _874 = _838 * 0.5;
        float _875 = _848 * 0.5;
        float _876 = _858 * 0.5;
        float _877 = dot(vec3(_874, _875, _876), vec3(_874, _875, _876));
        float _882 = (_877 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_877);
        float _891 = (dot(vec3(_448, _449, _450), vec3(_882 * _874, _882 * _875, _882 * _876)) + 1.0) * 0.5;
        float _3609 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _901 = sqrt(((_875 * _875) + (_874 * _874)) + (_876 * _876)) / (_871 + 9.9999997473787516355514526367188e-06);
        float _3620 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _903 = _902 * 2.0;
        float _907 = (1.0 - _902) / (_902 + 1.0);
        float _3631 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _917 = ((((1.0 - _908) * (_903 + 2.0)) * exp2(log2(isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * (_903 + 1.0))) + _908) * _871;
        float _918 = _839 * 0.5;
        float _919 = _849 * 0.5;
        float _920 = _859 * 0.5;
        float _921 = dot(vec3(_918, _919, _920), vec3(_918, _919, _920));
        float _926 = (_921 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_921);
        float _934 = (dot(vec3(_448, _449, _450), vec3(_926 * _918, _926 * _919, _926 * _920)) + 1.0) * 0.5;
        float _3642 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _943 = sqrt(((_919 * _919) + (_918 * _918)) + (_920 * _920)) / (_872 + 9.9999997473787516355514526367188e-06);
        float _3653 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _945 = _944 * 2.0;
        float _949 = (1.0 - _944) / (_944 + 1.0);
        float _3664 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _959 = ((((1.0 - _950) * (_945 + 2.0)) * exp2(log2(isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * (_945 + 1.0))) + _950) * _872;
        float _960 = _840 * 0.5;
        float _961 = _850 * 0.5;
        float _962 = _860 * 0.5;
        float _963 = dot(vec3(_960, _961, _962), vec3(_960, _961, _962));
        float _968 = (_963 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_963);
        float _976 = (dot(vec3(_448, _449, _450), vec3(_968 * _960, _968 * _961, _968 * _962)) + 1.0) * 0.5;
        float _3675 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _985 = sqrt(((_961 * _961) + (_960 * _960)) + (_962 * _962)) / (_873 + 9.9999997473787516355514526367188e-06);
        float _3686 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _987 = _986 * 2.0;
        float _991 = (1.0 - _986) / (_986 + 1.0);
        float _3697 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1001 = ((((1.0 - _992) * (_987 + 2.0)) * exp2(log2(isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (_987 + 1.0))) + _992) * _873;
        _1009 = _840;
        _1011 = _839;
        _1012 = _838;
        _1013 = _850;
        _1014 = _849;
        _1015 = _848;
        _1016 = _860;
        _1017 = _859;
        _1018 = _858;
        _1019 = _873;
        _1020 = _872;
        _1021 = _871;
        _1022 = cbModelParam._m0[36u].z * (isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0)));
        _1023 = cbModelParam._m0[36u].z * (isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0)));
        _1024 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0)));
    }
    else
    {
        _1009 = _1010;
        _1011 = _1010;
        _1012 = _1010;
        _1013 = _1010;
        _1014 = _1010;
        _1015 = _1010;
        _1016 = _1010;
        _1017 = _1010;
        _1018 = _1010;
        _1019 = _1010;
        _1020 = _1010;
        _1021 = _1010;
        _1022 = 0.0;
        _1023 = 0.0;
        _1024 = 0.0;
    }
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1053 = fma(_679, cbModelParam._m0[30u].z, fma(_675, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _671));
        float _1057 = fma(_679, cbModelParam._m0[31u].z, fma(_675, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _671));
        float _1061 = fma(_679, cbModelParam._m0[32u].z, fma(_675, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _671));
        float _1084 = _671 + _448;
        float _1085 = _675 + _449;
        float _1086 = _679 + _450;
        float _1096 = fma(_1086, cbModelParam._m0[30u].z, fma(_1085, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1084)) - _1053;
        float _1097 = fma(_1086, cbModelParam._m0[31u].z, fma(_1085, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1084)) - _1057;
        float _1098 = fma(_1086, cbModelParam._m0[32u].z, fma(_1085, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1084)) - _1061;
        float _1102 = inversesqrt(dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098)));
        float _1115 = ((_1102 * _1096) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1053 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1116 = ((_1102 * _1097) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1057 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1117 = ((_1102 * _1098) / cbModelParam._m0[35u].z) + ((((((_1061 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        float _1152 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1119.x + (-0.5));
        float _1154 = _1152 * (_1119.y + (-0.5));
        float _1155 = _1152 * (_1119.z + (-0.5));
        float _1162 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1126.x + (-0.5));
        float _1164 = _1162 * (_1126.y + (-0.5));
        float _1165 = _1162 * (_1126.z + (-0.5));
        float _1172 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1133.x + (-0.5));
        float _1174 = _1172 * (_1133.y + (-0.5));
        float _1175 = _1172 * (_1133.z + (-0.5));
        float _1182 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1140.x + (-0.5));
        float _1184 = _1182 * (_1140.y + (-0.5));
        float _1185 = _1182 * (_1140.z + (-0.5));
        float _1186 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = _1153 * 0.5;
        float _1190 = _1163 * 0.5;
        float _1191 = _1173 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1205 = (dot(vec3(_448, _449, _450), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _3738 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1214 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1186 + 9.9999997473787516355514526367188e-06);
        float _3749 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _3760 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_1216 + 1.0))) + _1221) * _1186;
        float _1231 = _1154 * 0.5;
        float _1232 = _1164 * 0.5;
        float _1233 = _1174 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1247 = (dot(vec3(_448, _449, _450), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1256 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _3793 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1258 + 1.0))) + _1263) * _1187;
        float _1273 = _1155 * 0.5;
        float _1274 = _1165 * 0.5;
        float _1275 = _1175 * 0.5;
        float _1276 = dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275));
        float _1281 = (_1276 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1276);
        float _1289 = (dot(vec3(_448, _449, _450), vec3(_1281 * _1273, _1281 * _1274, _1281 * _1275)) + 1.0) * 0.5;
        float _3804 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1298 = sqrt(((_1274 * _1274) + (_1273 * _1273)) + (_1275 * _1275)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _3815 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _3826 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1300 + 1.0))) + _1305) * _1188;
        _1322 = _1155;
        _1323 = _1154;
        _1324 = _1153;
        _1325 = _1165;
        _1326 = _1164;
        _1327 = _1163;
        _1328 = _1175;
        _1329 = _1174;
        _1330 = _1173;
        _1331 = _1188;
        _1332 = _1187;
        _1333 = _1186;
        _1334 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
        _1335 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
        _1336 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
    }
    else
    {
        _1322 = _1010;
        _1323 = _1010;
        _1324 = _1010;
        _1325 = _1010;
        _1326 = _1010;
        _1327 = _1010;
        _1328 = _1010;
        _1329 = _1010;
        _1330 = _1010;
        _1331 = _1010;
        _1332 = _1010;
        _1333 = _1010;
        _1334 = 0.0;
        _1335 = 0.0;
        _1336 = 0.0;
    }
    float _1346 = (cbModelParam._m0[1u].x * (_1334 - _1022)) + _1022;
    float _1347 = (cbModelParam._m0[1u].x * (_1335 - _1023)) + _1023;
    float _1348 = (cbModelParam._m0[1u].x * (_1336 - _1024)) + _1024;
    float _1369 = fma(_1348, cbSceneParam._m0[89u].z, fma(_1347, cbSceneParam._m0[89u].y, _1346 * cbSceneParam._m0[89u].x));
    float _1372 = fma(_1348, cbSceneParam._m0[90u].z, fma(_1347, cbSceneParam._m0[90u].y, _1346 * cbSceneParam._m0[90u].x));
    float _1375 = fma(_1348, cbSceneParam._m0[91u].z, fma(_1347, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1346));
    float _1390 = _619 * 0.5;
    float _1391 = _620 * 0.5;
    float _1392 = _621 * 0.5;
    float _1393 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1324, _1327, _1330, _1333));
    float _1396 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1323, _1326, _1329, _1332));
    float _1399 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1322, _1325, _1328, _1331));
    float _1433;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1406 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1009, _1013, _1016, _1019));
        float _1410 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1011, _1014, _1017, _1020));
        float _1414 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1012, _1015, _1018, _1021));
        float _1421 = dot(vec4(cbModelParam._m0[39u]), vec4(_1390, _1391, _1392, 1.0));
        _1433 = dot(vec3(isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)), isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)), isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1421) ? 0.0 : (isnan(0.0) ? _1421 : max(0.0, _1421))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1433 = 1.0;
    }
    float _1444;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1435 = dot(vec4(cbModelParam._m0[40u]), vec4(_1390, _1391, _1392, 1.0));
        _1444 = dot(vec3(isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)), isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)), isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1435) ? 0.0 : (isnan(0.0) ? _1435 : max(0.0, _1435))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1444 = 1.0;
    }
    float _1448 = (_1444 * cbModelParam._m0[1u].x) + (_1433 * (1.0 - cbModelParam._m0[1u].x));
    float _1458 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _451);
    float _1459 = isnan(_1458) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1458 : min(cbModelParam._m0[25u].z, _1458));
    float _1539;
    float _1541;
    float _1543;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1506 = fma(_679, cbModelParam._m0[13u].z, fma(_675, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _671)) + cbModelParam._m0[13u].w;
        float _1510 = fma(_679, cbModelParam._m0[14u].z, fma(_675, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _671)) + cbModelParam._m0[14u].w;
        float _1514 = fma(_679, cbModelParam._m0[15u].z, fma(_675, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _671)) + cbModelParam._m0[15u].w;
        float _1517 = fma(_621, cbModelParam._m0[13u].z, fma(_620, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _619));
        float _1520 = fma(_621, cbModelParam._m0[14u].z, fma(_620, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _619));
        float _1523 = fma(_621, cbModelParam._m0[15u].z, fma(_620, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _619));
        float _1551;
        if (_1517 > 0.0)
        {
            _1551 = abs((1.0 - _1506) / _1517);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1517 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1506 + 1.0) / _1517);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1551 = frontier_phi_17_15_ladder;
        }
        float _1755;
        if (_1520 > 0.0)
        {
            _1755 = abs((1.0 - _1510) / _1520);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1510 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1755 = frontier_phi_26_22_ladder;
        }
        float _1998;
        if (_1523 > 0.0)
        {
            _1998 = abs((1.0 - _1514) / _1523);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1523 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1514 + 1.0) / _1523);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1998 = frontier_phi_38_33_ladder;
        }
        float _2000 = isnan(_1755) ? _1551 : (isnan(_1551) ? _1755 : min(_1551, _1755));
        float _2001 = isnan(_1998) ? _2000 : (isnan(_2000) ? _1998 : min(_2000, _1998));
        float _2005 = (_2001 * _1517) + _1506;
        float _2006 = (_2001 * _1520) + _1510;
        float _2007 = (_2001 * _1523) + _1514;
        float _2008 = _2001 * 9.9999997473787516355514526367188e-05;
        float _2010 = (-1.0) - _2008;
        float _2012 = _2008 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2007 > _2012) || ((_2007 < _2010) || ((_2006 > _2012) || ((_2006 < _2010) || ((_2005 < _2010) || (_2005 > _2012))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2131 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2007, cbModelParam._m0[9u].z, fma(_2006, cbModelParam._m0[9u].y, _2005 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2007, cbModelParam._m0[10u].z, fma(_2006, cbModelParam._m0[10u].y, _2005 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2007, cbModelParam._m0[11u].z, fma(_2006, cbModelParam._m0[11u].y, _2005 * cbModelParam._m0[11u].x))), _1459);
            frontier_phi_16_38_ladder = _2131.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2131.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2131.x * cbModelParam._m0[1u].y;
        }
        _1539 = frontier_phi_16_38_ladder_2;
        _1541 = frontier_phi_16_38_ladder_1;
        _1543 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1527 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_619, _620, _621), _1459);
        _1539 = _1527.x * cbModelParam._m0[1u].y;
        _1541 = _1527.y * cbModelParam._m0[1u].y;
        _1543 = _1527.z * cbModelParam._m0[1u].y;
    }
    float _1547 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _451);
    float _1548 = isnan(_1547) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1547 : min(cbModelParam._m0[25u].w, _1547));
    float _1639;
    float _1641;
    float _1643;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1603 = fma(_679, cbModelParam._m0[21u].z, fma(_675, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _671)) + cbModelParam._m0[21u].w;
        float _1607 = fma(_679, cbModelParam._m0[22u].z, fma(_675, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _671)) + cbModelParam._m0[22u].w;
        float _1611 = fma(_679, cbModelParam._m0[23u].z, fma(_675, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _671)) + cbModelParam._m0[23u].w;
        float _1614 = fma(_621, cbModelParam._m0[21u].z, fma(_620, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _619));
        float _1617 = fma(_621, cbModelParam._m0[22u].z, fma(_620, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _619));
        float _1620 = fma(_621, cbModelParam._m0[23u].z, fma(_620, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _619));
        float _1760;
        if (_1614 > 0.0)
        {
            _1760 = abs((1.0 - _1603) / _1614);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1614 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1603 + 1.0) / _1614);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1760 = frontier_phi_28_24_ladder;
        }
        float _2025;
        if (_1617 > 0.0)
        {
            _2025 = abs((1.0 - _1607) / _1617);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1607 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2025 = frontier_phi_40_35_ladder;
        }
        float _2230;
        if (_1620 > 0.0)
        {
            _2230 = abs((1.0 - _1611) / _1620);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1611 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2230 = frontier_phi_49_46_ladder;
        }
        float _2232 = isnan(_2025) ? _1760 : (isnan(_1760) ? _2025 : min(_1760, _2025));
        float _2233 = isnan(_2230) ? _2232 : (isnan(_2232) ? _2230 : min(_2232, _2230));
        float _2237 = (_2233 * _1614) + _1603;
        float _2238 = (_2233 * _1617) + _1607;
        float _2239 = (_2233 * _1620) + _1611;
        float _2240 = _2233 * 9.9999997473787516355514526367188e-05;
        float _2241 = (-1.0) - _2240;
        float _2243 = _2240 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2239 > _2243) || ((_2239 < _2241) || ((_2238 > _2243) || ((_2238 < _2241) || ((_2237 < _2241) || (_2237 > _2243))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2483 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2239, cbModelParam._m0[17u].z, fma(_2238, cbModelParam._m0[17u].y, _2237 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2239, cbModelParam._m0[18u].z, fma(_2238, cbModelParam._m0[18u].y, _2237 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2239, cbModelParam._m0[19u].z, fma(_2238, cbModelParam._m0[19u].y, _2237 * cbModelParam._m0[19u].x))), _1548);
            frontier_phi_25_49_ladder = _2483.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2483.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2483.x * cbModelParam._m0[1u].z;
        }
        _1639 = frontier_phi_25_49_ladder_2;
        _1641 = frontier_phi_25_49_ladder_1;
        _1643 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1623 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_619, _620, _621), _1548);
        _1639 = _1623.x * cbModelParam._m0[1u].z;
        _1641 = _1623.y * cbModelParam._m0[1u].z;
        _1643 = _1623.z * cbModelParam._m0[1u].z;
    }
    float _1655 = ((((1.0 - _639) * ((_627 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_639 * _627)) * _611;
    float _1656 = _1655 * ((cbModelParam._m0[1u].w * (_1639 - _1539)) + _1539);
    float _1657 = _1655 * ((cbModelParam._m0[1u].w * (_1641 - _1541)) + _1541);
    float _1658 = _1655 * ((cbModelParam._m0[1u].w * (_1643 - _1543)) + _1543);
    float _1661 = fma(_1658, cbSceneParam._m0[89u].z, fma(_1657, cbSceneParam._m0[89u].y, _1656 * cbSceneParam._m0[89u].x));
    float _1664 = fma(_1658, cbSceneParam._m0[90u].z, fma(_1657, cbSceneParam._m0[90u].y, _1656 * cbSceneParam._m0[90u].x));
    float _1667 = fma(_1658, cbSceneParam._m0[91u].z, fma(_1657, cbSceneParam._m0[91u].y, _1656 * cbSceneParam._m0[91u].x));
    uvec4 _1677 = floatBitsToUint(cbInstanceData._m0[_586 + 5u]);
    uint _1679 = _1677.x * 14u;
    uint _1680 = _1679 + 13u;
    float _1687 = _611 + (-1.0);
    float _1692 = (cbLight._m0[_1680].x * _1687) + 1.0;
    float _1693 = (cbLight._m0[_1680].y * _1687) + 1.0;
    float _1694 = (cbLight._m0[_1680].z * _1687) + 1.0;
    float _1695 = (cbLight._m0[_1680].w * _1687) + 1.0;
    uint _1696 = _1679 + 5u;
    float _1702 = isnan(1.0) ? _1693 : (isnan(_1693) ? 1.0 : min(_1693, 1.0));
    uint _1706 = _1679 + 4u;
    float _1713 = isnan(1.0) ? _1692 : (isnan(_1692) ? 1.0 : min(_1692, 1.0));
    uint _1717 = _1679 | 1u;
    float _1728 = dot(vec3(cbLight._m0[_1679].xyz), vec3(_448, _449, _450));
    float _1731 = dot(vec3(cbLight._m0[_1717].xyz), vec3(_448, _449, _450));
    float _3962 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
    float _3973 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
    float _1736 = (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * 0.3183098733425140380859375;
    float _1738 = (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * 0.3183098733425140380859375;
    float _1745 = ((cbLight._m0[_1696].x * _1702) * _1738) + ((cbLight._m0[_1706].x * _1713) * _1736);
    float _1746 = ((_1702 * cbLight._m0[_1696].y) * _1738) + ((_1713 * cbLight._m0[_1706].y) * _1736);
    float _1747 = ((_1702 * cbLight._m0[_1696].z) * _1738) + ((_1713 * cbLight._m0[_1706].z) * _1736);
    uvec4 _1752 = floatBitsToUint(cbLight._m0[_1679 + 12u]);
    bool _1754 = _1752.x == 0u;
    float _1765;
    float _1767;
    float _1769;
    if (_1754)
    {
        _1765 = _1745;
        _1767 = _1746;
        _1769 = _1747;
    }
    else
    {
        uint _1773 = _1679 + 6u;
        float _1789 = (dot(vec3(cbLight._m0[_1679 + 2u].xyz), vec3(_448, _449, _450)) * 0.5) + 0.5;
        float _1790 = _1789 * _1789;
        float _3984 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
        float _1791 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1792 = isnan(1.0) ? _1694 : (isnan(_1694) ? 1.0 : min(_1694, 1.0));
        _1765 = (((cbLight._m0[_1773].x * 0.3183098733425140380859375) * _1791) * _1792) + _1745;
        _1767 = (((cbLight._m0[_1773].y * 0.3183098733425140380859375) * _1791) * _1792) + _1746;
        _1769 = (((cbLight._m0[_1773].z * 0.3183098733425140380859375) * _1791) * _1792) + _1747;
    }
    bool _1772 = _1752.y == 0u;
    float _1810;
    float _1812;
    float _1814;
    if (_1772)
    {
        _1810 = _1765;
        _1812 = _1767;
        _1814 = _1769;
    }
    else
    {
        uint _1969 = _1679 + 7u;
        float _1985 = (dot(vec3(cbLight._m0[_1679 + 3u].xyz), vec3(_448, _449, _450)) * 0.5) + 0.5;
        float _1986 = _1985 * _1985;
        float _4000 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
        float _1987 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1988 = isnan(1.0) ? _1695 : (isnan(_1695) ? 1.0 : min(_1695, 1.0));
        _1810 = (((cbLight._m0[_1969].x * 0.3183098733425140380859375) * _1987) * _1988) + _1765;
        _1812 = (((cbLight._m0[_1969].y * 0.3183098733425140380859375) * _1987) * _1988) + _1767;
        _1814 = (((cbLight._m0[_1969].z * 0.3183098733425140380859375) * _1987) * _1988) + _1769;
    }
    uint _1817 = _1679 + 8u;
    float _1830 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1679].w)) * _451) * 0.949999988079071044921875);
    float _1831 = _1830 * _1830;
    float _1832 = cbLight._m0[_1679].x + _528;
    float _1833 = cbLight._m0[_1679].y + _529;
    float _1834 = cbLight._m0[_1679].z + _530;
    float _1838 = inversesqrt(dot(vec3(_1832, _1833, _1834), vec3(_1832, _1833, _1834)));
    float _1839 = _1838 * _1832;
    float _1840 = _1838 * _1833;
    float _1841 = _1838 * _1834;
    float _1842 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_1679].xyz));
    float _4016 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _1845 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _4027 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _1846 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _1847 = dot(vec3(_448, _449, _450), vec3(_1839, _1840, _1841));
    float _4038 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1850 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _1851 = dot(vec3(cbLight._m0[_1679].xyz), vec3(_1839, _1840, _1841));
    float _4049 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1855 = _1831 * _1831;
    float _1859 = ((_1850 * _1850) * (_1855 + (-1.0))) + 1.0;
    float _1870 = (exp2(log2(1.0 - (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1871 = 1.0 - _1831;
    float _1882 = (0.5 / (((_1846 * ((_1845 * _1871) + _1831)) + 9.9999999392252902907785028219223e-09) + (((_1846 * _1871) + _1831) * _1845))) * _1845;
    float _4060 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _1884 = (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1855 / ((_1859 * _1859) * 3.141590118408203125));
    uint _1895 = _1679 + 9u;
    float _1906 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1717].w)) * _451) * 0.949999988079071044921875);
    float _1907 = _1906 * _1906;
    float _1908 = cbLight._m0[_1717].x + _528;
    float _1909 = cbLight._m0[_1717].y + _529;
    float _1910 = cbLight._m0[_1717].z + _530;
    float _1914 = inversesqrt(dot(vec3(_1908, _1909, _1910), vec3(_1908, _1909, _1910)));
    float _1915 = _1914 * _1908;
    float _1916 = _1914 * _1909;
    float _1917 = _1914 * _1910;
    float _1918 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_1717].xyz));
    float _4071 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1921 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _1922 = dot(vec3(_448, _449, _450), vec3(_1915, _1916, _1917));
    float _4082 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _1925 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _1926 = dot(vec3(cbLight._m0[_1717].xyz), vec3(_1915, _1916, _1917));
    float _4093 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1930 = _1907 * _1907;
    float _1934 = ((_1925 * _1925) * (_1930 + (-1.0))) + 1.0;
    float _1943 = (exp2(log2(1.0 - (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1944 = 1.0 - _1907;
    float _1954 = (0.5 / (((_1846 * ((_1921 * _1944) + _1907)) + 9.9999999392252902907785028219223e-09) + (((_1846 * _1944) + _1907) * _1921))) * _1921;
    float _4104 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1956 = (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_1930 / ((_1934 * _1934) * 3.141590118408203125));
    float _1966 = (((_1943 * cbLight._m0[_1895].x) * _1956) * _1702) + (((_1870 * cbLight._m0[_1817].x) * _1884) * _1713);
    float _1967 = (((_1943 * cbLight._m0[_1895].y) * _1956) * _1702) + (((_1870 * cbLight._m0[_1817].y) * _1884) * _1713);
    float _1968 = (((_1943 * cbLight._m0[_1895].z) * _1956) * _1702) + (((_1870 * cbLight._m0[_1817].z) * _1884) * _1713);
    float _2030;
    float _2032;
    float _2034;
    if (_1754)
    {
        _2030 = _1966;
        _2032 = _1967;
        _2034 = _1968;
    }
    else
    {
        uint _2036 = _1679 + 2u;
        uint _2040 = _1679 + 10u;
        float _2054 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2036].w)) * _451) * 0.949999988079071044921875);
        float _2055 = _2054 * _2054;
        float _2056 = cbLight._m0[_2036].x + _528;
        float _2057 = cbLight._m0[_2036].y + _529;
        float _2058 = cbLight._m0[_2036].z + _530;
        float _2062 = inversesqrt(dot(vec3(_2056, _2057, _2058), vec3(_2056, _2057, _2058)));
        float _2063 = _2062 * _2056;
        float _2064 = _2062 * _2057;
        float _2065 = _2062 * _2058;
        float _2066 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_2036].xyz));
        float _4115 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2069 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _2070 = dot(vec3(_448, _449, _450), vec3(_2063, _2064, _2065));
        float _4126 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2073 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _2074 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_2063, _2064, _2065));
        float _4137 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2078 = _2055 * _2055;
        float _2082 = ((_2073 * _2073) * (_2078 + (-1.0))) + 1.0;
        float _2091 = (exp2(log2(1.0 - (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2092 = 1.0 - _2055;
        float _2102 = (0.5 / (((_1846 * ((_2069 * _2092) + _2055)) + 9.9999999392252902907785028219223e-09) + (((_1846 * _2092) + _2055) * _2069))) * _2069;
        float _4148 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2104 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_2078 / ((_2082 * _2082) * 3.141590118408203125));
        float _2105 = isnan(1.0) ? _1694 : (isnan(_1694) ? 1.0 : min(_1694, 1.0));
        _2030 = (((_2091 * cbLight._m0[_2040].x) * _2104) * _2105) + _1966;
        _2032 = (((_2091 * cbLight._m0[_2040].y) * _2104) * _2105) + _1967;
        _2034 = (((_2091 * cbLight._m0[_2040].z) * _2104) * _2105) + _1968;
    }
    float _2140;
    float _2142;
    float _2144;
    if (_1772)
    {
        _2140 = _2030;
        _2142 = _2032;
        _2144 = _2034;
    }
    else
    {
        uint _2151 = _1679 + 3u;
        uint _2155 = _1679 + 11u;
        float _2169 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2151].w)) * _451) * 0.949999988079071044921875);
        float _2170 = _2169 * _2169;
        float _2171 = cbLight._m0[_2151].x + _528;
        float _2172 = cbLight._m0[_2151].y + _529;
        float _2173 = cbLight._m0[_2151].z + _530;
        float _2177 = inversesqrt(dot(vec3(_2171, _2172, _2173), vec3(_2171, _2172, _2173)));
        float _2178 = _2177 * _2171;
        float _2179 = _2177 * _2172;
        float _2180 = _2177 * _2173;
        float _2181 = dot(vec3(_448, _449, _450), vec3(cbLight._m0[_2151].xyz));
        float _4164 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2184 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _2185 = dot(vec3(_448, _449, _450), vec3(_2178, _2179, _2180));
        float _4175 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2188 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _2189 = dot(vec3(cbLight._m0[_2151].xyz), vec3(_2178, _2179, _2180));
        float _4186 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2193 = _2170 * _2170;
        float _2197 = ((_2188 * _2188) * (_2193 + (-1.0))) + 1.0;
        float _2206 = (exp2(log2(1.0 - (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2207 = 1.0 - _2170;
        float _2217 = (0.5 / (((_1846 * ((_2184 * _2207) + _2170)) + 9.9999999392252902907785028219223e-09) + (((_1846 * _2207) + _2170) * _2184))) * _2184;
        float _4197 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2219 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_2193 / ((_2197 * _2197) * 3.141590118408203125));
        float _2220 = isnan(1.0) ? _1695 : (isnan(_1695) ? 1.0 : min(_1695, 1.0));
        _2140 = (((_2206 * cbLight._m0[_2155].x) * _2219) * _2220) + _2030;
        _2142 = (((_2206 * cbLight._m0[_2155].y) * _2219) * _2220) + _2032;
        _2144 = (((_2206 * cbLight._m0[_2155].z) * _2219) * _2220) + _2034;
    }
    float _2355;
    float _2357;
    float _2359;
    float _2361;
    float _2363;
    float _2365;
    if (_1677.y == 0u)
    {
        float _2295 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2296 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2295;
        float _2297 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2295;
        float _2298 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2295;
        uvec4 _2310 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2311 = _2310.x;
        uint _2322 = uint((float(_2310.y) * floor(float(uint(cbSceneParam._m0[85u].y * _549) / _2311))) + floor(float(uint(cbSceneParam._m0[85u].x * _548) / _2311)));
        float _2332 = (log2(_2298 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2333 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        uint _2336 = uint(isnan(14.0) ? _2333 : (isnan(_2333) ? 14.0 : min(_2333, 14.0)));
        uvec4 _2341 = texelFetch(g_lightClusterGridBuffer, int(((_2336 << 2u) + (_2322 << 6u)) >> 2u));
        uint _2342 = _2341.x;
        uint _2343 = _2310.z;
        float _2488;
        float _2490;
        float _2492;
        float _2494;
        float _2496;
        float _2498;
        if (((((1u << ((_2343 >> 4u) & 15u)) + 4294967295u) & _2342) == 0u) || ((_2343 & 240u) == 0u))
        {
            _2488 = 0.0;
            _2490 = 0.0;
            _2492 = 0.0;
            _2494 = 0.0;
            _2496 = 0.0;
            _2498 = 0.0;
        }
        else
        {
            float _2489;
            float _2491;
            float _2493;
            float _2495;
            float _2497;
            float _2499;
            float _2649 = 0.0;
            float _2650 = 0.0;
            float _2651 = 0.0;
            float _2652 = 0.0;
            float _2653 = 0.0;
            float _2654 = 0.0;
            uint _2655 = 0u;
            uint _2664;
            bool _2665;
            for (;;)
            {
                _2664 = texelFetch(g_lightClassification, int((((_2336 << 5u) + (_2322 << 9u)) + (_2655 << 2u)) >> 2u)).x;
                _2665 = _2664 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2665)
                {
                    frontier_phi_66_pred = _2649;
                    frontier_phi_66_pred_1 = _2654;
                    frontier_phi_66_pred_2 = _2653;
                    frontier_phi_66_pred_3 = _2652;
                    frontier_phi_66_pred_4 = _2651;
                    frontier_phi_66_pred_5 = _2650;
                }
                else
                {
                    float _2794;
                    float _2795;
                    float _2796;
                    float _2797;
                    float _2798;
                    float _2799;
                    uint _2800;
                    _2794 = _2649;
                    _2795 = _2650;
                    _2796 = _2651;
                    _2797 = _2652;
                    _2798 = _2653;
                    _2799 = _2654;
                    _2800 = _2664;
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    float _2725;
                    float _2726;
                    for (;;)
                    {
                        uint _2804 = uint(findLSB(_2800)) + (_2655 << 5u);
                        uint _2801 = (_2800 + 4294967295u) & _2800;
                        uint _2806 = _2804 * 48u;
                        vec4 _2820 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2806)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 3u)).x));
                        uint _2826 = (_2804 * 48u) + 4u;
                        vec4 _2839 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2826)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 3u)).x));
                        uint _2845 = (_2804 * 48u) + 8u;
                        vec3 _2856 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2845)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 2u)).x));
                        float _2860 = _2820.x - _2296;
                        float _2861 = _2820.y - _2297;
                        float _2862 = _2820.z - _2298;
                        float _2863 = dot(vec3(_2860, _2861, _2862), vec3(_2860, _2861, _2862));
                        float _2866 = inversesqrt(_2863);
                        float _2867 = _2866 * _2860;
                        float _2868 = _2866 * _2861;
                        float _2869 = _2866 * _2862;
                        float _2870 = dot(vec3(_567, _570, _573), vec3(_2867, _2868, _2869));
                        float _2875 = 1.0 - (_2863 * _2820.w);
                        float _4223 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
                        float _2876 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                        float _2877 = sqrt(_2863) * _2839.w;
                        float _2880 = 1.39999997615814208984375 / (_2877 + 1.39999997615814208984375);
                        float _2881 = _2880 * _2880;
                        float _2884 = ((1.0 - _2881) * _2870) + _2881;
                        float _2887 = _2877 * _2877;
                        float _2891 = ((isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0))) * _2876) / ((_2887 * 0.699999988079071044921875) + 1.0);
                        float _2895 = (-0.0) - _2296;
                        float _2896 = (-0.0) - _2297;
                        float _2897 = (-0.0) - _2298;
                        float _2901 = inversesqrt(dot(vec3(_2895, _2896, _2897), vec3(_2895, _2896, _2897)));
                        float _2902 = _2901 * _2895;
                        float _2903 = _2901 * _2896;
                        float _2904 = _2901 * _2897;
                        float _2912 = exp2(log2(1.0 / ((_2887 * 3.5) + 5.0)) * 0.25);
                        float _2913 = 1.0 - _627;
                        float _2920 = sqrt(1.0 - ((1.0 - (_2913 * _2913)) * (1.0 - (_2912 * _2912))));
                        float _2921 = _2920 * _2920;
                        float _2922 = _2921 * _2921;
                        float _2923 = _2902 + _2867;
                        float _2924 = _2903 + _2868;
                        float _2925 = _2904 + _2869;
                        float _2929 = inversesqrt(dot(vec3(_2923, _2924, _2925), vec3(_2923, _2924, _2925)));
                        float _2933 = dot(vec3(_567, _570, _573), vec3(_2902, _2903, _2904));
                        float _4239 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
                        float _2936 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
                        float _2937 = dot(vec3(_567, _570, _573), vec3(_2929 * _2923, _2929 * _2924, _2929 * _2925));
                        float _4250 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                        float _2940 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
                        float _2944 = ((_2940 * _2940) * (_2922 + (-1.0))) + 1.0;
                        float _2945 = _2880 * _2921;
                        float _2946 = _2945 * _2945;
                        float _2949 = ((1.0 - _2946) * _2870) + _2946;
                        float _4261 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
                        float _2950 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
                        float _2951 = 1.0 - _2921;
                        float _2961 = (0.5 / (((_2950 * ((_2936 * _2951) + _2921)) + 9.9999999392252902907785028219223e-09) + (((_2950 * _2951) + _2921) * _2936))) * _2950;
                        float _4272 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
                        float _2972 = (((_2922 * 3.1415927410125732421875) * (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)))) / ((_2944 * _2944) * ((_2887 * 2.1991131305694580078125) + 3.141590118408203125))) * _2876;
                        _2724 = (_2891 * _2839.x) + _2797;
                        _2725 = (_2891 * _2839.y) + _2798;
                        _2726 = (_2891 * _2839.z) + _2799;
                        _2721 = (_2972 * _2856.x) + _2794;
                        _2722 = (_2972 * _2856.y) + _2795;
                        _2723 = (_2972 * _2856.z) + _2796;
                        if (_2801 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2794 = _2721;
                            _2795 = _2722;
                            _2796 = _2723;
                            _2797 = _2724;
                            _2798 = _2725;
                            _2799 = _2726;
                            _2800 = _2801;
                        }
                    }
                    frontier_phi_66_pred = _2721;
                    frontier_phi_66_pred_1 = _2726;
                    frontier_phi_66_pred_2 = _2725;
                    frontier_phi_66_pred_3 = _2724;
                    frontier_phi_66_pred_4 = _2723;
                    frontier_phi_66_pred_5 = _2722;
                }
                _2489 = frontier_phi_66_pred;
                _2499 = frontier_phi_66_pred_1;
                _2497 = frontier_phi_66_pred_2;
                _2495 = frontier_phi_66_pred_3;
                _2493 = frontier_phi_66_pred_4;
                _2491 = frontier_phi_66_pred_5;
                uint _2656 = _2655 + 1u;
                if (_2656 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2649 = _2489;
                    _2650 = _2491;
                    _2651 = _2493;
                    _2652 = _2495;
                    _2653 = _2497;
                    _2654 = _2499;
                    _2655 = _2656;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2488 = _2489;
            _2490 = _2491;
            _2492 = _2493;
            _2494 = _2495;
            _2496 = _2497;
            _2498 = _2499;
        }
        uvec4 _2502 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2503 = _2502.z;
        uint _2505 = (_2503 >> 8u) & 15u;
        float _2617;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        if (((4294967295u << _2505) & _2342) == 0u)
        {
            _2617 = _2488;
            _2619 = _2490;
            _2621 = _2492;
            _2623 = _2494;
            _2625 = _2496;
            _2627 = _2498;
        }
        else
        {
            float _2642 = inversesqrt(dot(vec3(_2296, _2297, _2298), vec3(_2296, _2297, _2298)));
            float _2643 = _2642 * _2296;
            float _2644 = _2642 * _2297;
            float _2645 = _2642 * _2298;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2505 < ((_2503 >> 12u) & 15u))
            {
                float _2618;
                float _2620;
                float _2622;
                float _2624;
                float _2626;
                float _2628;
                float _2777 = _2488;
                float _2778 = _2490;
                float _2779 = _2492;
                float _2780 = _2494;
                float _2781 = _2496;
                float _2782 = _2498;
                uint _2783 = _2505;
                uint _2792;
                bool _2793;
                for (;;)
                {
                    _2792 = texelFetch(g_lightClassification, int((((_2336 << 5u) + (_2322 << 9u)) + (_2783 << 2u)) >> 2u)).x;
                    _2793 = _2792 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2793)
                    {
                        frontier_phi_77_pred = _2782;
                        frontier_phi_77_pred_1 = _2781;
                        frontier_phi_77_pred_2 = _2780;
                        frontier_phi_77_pred_3 = _2779;
                        frontier_phi_77_pred_4 = _2778;
                        frontier_phi_77_pred_5 = _2777;
                    }
                    else
                    {
                        float _2986;
                        float _2987;
                        float _2988;
                        float _2989;
                        float _2990;
                        float _2991;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _2999 = _2777;
                        float _3000 = _2778;
                        float _3001 = _2779;
                        float _3002 = _2780;
                        float _3003 = _2781;
                        float _3004 = _2782;
                        uint _3005 = _2792;
                        uint _3006;
                        vec4 _3031;
                        float _3032;
                        vec4 _3047;
                        vec3 _3059;
                        vec4 _3074;
                        vec4 _3090;
                        float _3137;
                        bool _3138;
                        for (;;)
                        {
                            uint _3016 = ((_2783 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3005));
                            _3006 = (_3005 + 4294967295u) & _3005;
                            uint _3018 = _3016 * 40u;
                            _3031 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3018)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 3u)).x));
                            _3032 = _3031.w;
                            uint _3034 = (_3016 * 40u) + 4u;
                            _3047 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3034)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 3u)).x));
                            uint _3049 = (_3016 * 40u) + 8u;
                            _3059 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x));
                            uint _3061 = (_3016 * 40u) + 16u;
                            _3074 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 3u)).x));
                            uint _3077 = (_3016 * 40u) + 20u;
                            _3090 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3077)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 3u)).x));
                            uint _3093 = (_3016 * 40u) + 24u;
                            vec4 _3106 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3093)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 3u)).x));
                            uint _3112 = (_3016 * 40u) + 28u;
                            vec4 _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            _3137 = fma(_2298, _3125.z, fma(_2297, _3125.y, _3125.x * _2296)) + _3125.w;
                            _3138 = !((fma(_2298, _3106.z, fma(_2297, _3106.y, _3106.x * _2296)) + _3106.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3138)
                            {
                                float _3165 = _3031.x - _2296;
                                float _3166 = _3031.y - _2297;
                                float _3167 = _3031.z - _2298;
                                float _3168 = dot(vec3(_3165, _3166, _3167), vec3(_3165, _3166, _3167));
                                float _3171 = inversesqrt(_3168);
                                float _3172 = _3171 * _3165;
                                float _3173 = _3171 * _3166;
                                float _3174 = _3171 * _3167;
                                float _3178 = 1.0 - (_3168 / (_3032 * _3032));
                                float _4283 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                                float _3179 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                                float _3183 = sqrt(_3168) * _3047.w;
                                float _3185 = 1.39999997615814208984375 / (_3183 + 1.39999997615814208984375);
                                float _3186 = _3185 * _3185;
                                float _3189 = ((1.0 - _3186) * dot(vec3(_3172, _3173, _3174), vec3(_567, _570, _573))) + _3186;
                                float _3192 = _3183 * _3183;
                                float _3196 = (fma(_2298, _3074.z, fma(_2297, _3074.y, _3074.x * _2296)) + _3074.w) / _3137;
                                float _3197 = (fma(_2298, _3090.z, fma(_2297, _3090.y, _3090.x * _2296)) + _3090.w) / _3137;
                                float _3201 = 1.0 - dot(vec2(_3196, _3197), vec2(_3196, _3197));
                                float _4299 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                                float _3202 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                                float _3203 = _3202 * (((isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0))) * _3179) / ((_3192 * 0.699999988079071044921875) + 1.0));
                                float _3215 = exp2(log2(1.0 / ((_3192 * 3.5) + 5.0)) * 0.25);
                                float _3216 = 1.0 - _627;
                                float _3223 = sqrt(1.0 - ((1.0 - (_3216 * _3216)) * (1.0 - (_3215 * _3215))));
                                float _3224 = _3223 * _3223;
                                float _3225 = _3224 * _3224;
                                float _3226 = _3172 - _2643;
                                float _3227 = _3173 - _2644;
                                float _3228 = _3174 - _2645;
                                float _3232 = inversesqrt(dot(vec3(_3226, _3227, _3228), vec3(_3226, _3227, _3228)));
                                float _3236 = dot(vec3(_567, _570, _573), vec3((-0.0) - _2643, (-0.0) - _2644, (-0.0) - _2645));
                                float _4310 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                                float _3239 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                                float _3240 = dot(vec3(_567, _570, _573), vec3(_3232 * _3226, _3232 * _3227, _3232 * _3228));
                                float _4321 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                                float _3243 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                                float _3247 = ((_3243 * _3243) * (_3225 + (-1.0))) + 1.0;
                                float _3248 = _3185 * _3224;
                                float _3249 = _3248 * _3248;
                                float _3255 = ((1.0 - _3249) * dot(vec3(_567, _570, _573), vec3(_3172, _3173, _3174))) + _3249;
                                float _4332 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                                float _3256 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                                float _3257 = 1.0 - _3224;
                                float _3267 = (0.5 / (((_3256 * ((_3239 * _3257) + _3224)) + 9.9999999392252902907785028219223e-09) + (((_3256 * _3257) + _3224) * _3239))) * _3256;
                                float _4343 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3277 = (_3202 * _3179) * (((_3225 * 3.1415927410125732421875) * (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0)))) / ((_3247 * _3247) * ((_3192 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3203 * _3047.y;
                                frontier_phi_83_pred_1 = _3203 * _3047.x;
                                frontier_phi_83_pred_2 = _3277 * _3059.z;
                                frontier_phi_83_pred_3 = _3277 * _3059.y;
                                frontier_phi_83_pred_4 = _3277 * _3059.x;
                                frontier_phi_83_pred_5 = _3203 * _3047.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3285 = frontier_phi_83_pred;
                            _3284 = frontier_phi_83_pred_1;
                            _3283 = frontier_phi_83_pred_2;
                            _3282 = frontier_phi_83_pred_3;
                            _3281 = frontier_phi_83_pred_4;
                            _3286 = frontier_phi_83_pred_5;
                            _2989 = _3284 + _3002;
                            _2990 = _3285 + _3003;
                            _2991 = _3286 + _3004;
                            _2986 = _3281 + _2999;
                            _2987 = _3282 + _3000;
                            _2988 = _3283 + _3001;
                            if (_3006 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2999 = _2986;
                                _3000 = _2987;
                                _3001 = _2988;
                                _3002 = _2989;
                                _3003 = _2990;
                                _3004 = _2991;
                                _3005 = _3006;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2991;
                        frontier_phi_77_pred_1 = _2990;
                        frontier_phi_77_pred_2 = _2989;
                        frontier_phi_77_pred_3 = _2988;
                        frontier_phi_77_pred_4 = _2987;
                        frontier_phi_77_pred_5 = _2986;
                    }
                    _2628 = frontier_phi_77_pred;
                    _2626 = frontier_phi_77_pred_1;
                    _2624 = frontier_phi_77_pred_2;
                    _2622 = frontier_phi_77_pred_3;
                    _2620 = frontier_phi_77_pred_4;
                    _2618 = frontier_phi_77_pred_5;
                    uint _2784 = _2783 + 1u;
                    if (_2784 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2777 = _2618;
                        _2778 = _2620;
                        _2779 = _2622;
                        _2780 = _2624;
                        _2781 = _2626;
                        _2782 = _2628;
                        _2783 = _2784;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2622;
                frontier_phi_58_59_ladder_1 = _2628;
                frontier_phi_58_59_ladder_2 = _2626;
                frontier_phi_58_59_ladder_3 = _2624;
                frontier_phi_58_59_ladder_4 = _2620;
                frontier_phi_58_59_ladder_5 = _2618;
            }
            else
            {
                frontier_phi_58_59_ladder = _2492;
                frontier_phi_58_59_ladder_1 = _2498;
                frontier_phi_58_59_ladder_2 = _2496;
                frontier_phi_58_59_ladder_3 = _2494;
                frontier_phi_58_59_ladder_4 = _2490;
                frontier_phi_58_59_ladder_5 = _2488;
            }
            _2617 = frontier_phi_58_59_ladder_5;
            _2619 = frontier_phi_58_59_ladder_4;
            _2621 = frontier_phi_58_59_ladder;
            _2623 = frontier_phi_58_59_ladder_3;
            _2625 = frontier_phi_58_59_ladder_2;
            _2627 = frontier_phi_58_59_ladder_1;
        }
        float _2632 = isnan(1.0) ? _611 : (isnan(_611) ? 1.0 : min(_611, 1.0));
        _2355 = (_2632 * _2623) + _1810;
        _2357 = (_2632 * _2625) + _1812;
        _2359 = (_2632 * _2627) + _1814;
        _2361 = ((_2617 * 0.039999999105930328369140625) * _2632) + _2140;
        _2363 = ((_2619 * 0.039999999105930328369140625) * _2632) + _2142;
        _2365 = ((_2621 * 0.039999999105930328369140625) * _2632) + _2144;
    }
    else
    {
        _2355 = _1810;
        _2357 = _1812;
        _2359 = _1814;
        _2361 = _2140;
        _2363 = _2142;
        _2365 = _2144;
    }
    uint _2371 = _587 + uint(cbMatDynParam._m0[0u].w);
    float _2377 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].y;
    float _2383 = (((((_2377 * cbMtdParam._m0[10u].x) * _334.x) * _357) * _434) * (((1.0 - _411) * cbMtdParam._m0[16u].y) + _411)) * cbInstanceData._m0[_2371].x;
    float _2389 = (((((_2377 * cbMtdParam._m0[10u].y) * _334.y) * _357) * _434) * (((1.0 - _413) * cbMtdParam._m0[16u].y) + _413)) * cbInstanceData._m0[_2371].y;
    float _2395 = (((((_2377 * cbMtdParam._m0[10u].z) * _334.z) * _357) * _434) * (((1.0 - _415) * cbMtdParam._m0[16u].y) + _415)) * cbInstanceData._m0[_2371].z;
    float _4359 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _4370 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _4381 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _2412 = (((isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_2355 + ((isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0))) * _611))) + ((_2361 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _1448)) * cbPerFrame._m0[3u].x)) + _2383;
    float _2414 = (_2389 + ((_2363 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _1448)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_2357 + ((isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0))) * _611)));
    float _2416 = (_2395 + ((_2365 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _1448)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_2359 + ((isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0))) * _611)));
    float _2417 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2418 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2419 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2425 = cbMtdParam._m0[2u].x * _2383;
    float _2426 = cbMtdParam._m0[2u].y * _2389;
    float _2427 = cbMtdParam._m0[2u].z * _2395;
    float _4407 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2429 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
    uint _2430 = _586 + 6u;
    float _2438 = _548 / cbSceneParam._m0[86u].x;
    float _2439 = _549 / cbSceneParam._m0[86u].y;
    vec4 _2453 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2438, _2439, (log2((isnan(cbSceneParam._m0[77u].w) ? _470 : (isnan(_470) ? cbSceneParam._m0[77u].w : min(_470, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2455 = _2453.x;
    float _2456 = _2453.y;
    float _2457 = _2453.z;
    float _2458 = _2453.w;
    float _2550;
    float _2552;
    float _2554;
    float _2556;
    if (_470 > cbSceneParam._m0[78u].w)
    {
        float _2513 = isnan(_470) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _470 : min(cbSceneParam._m0[80u].w, _470));
        float _2514 = _2513 / _470;
        float _2525 = _2514 * _521;
        float _2526 = _522 * _2514;
        float _2527 = (-0.0) - _2526;
        float _2528 = _2514 * _523;
        float _2530 = (cbSceneParam._m0[77u].w * _2527) / _2513;
        float _2531 = _2530 + cbSceneParam._m0[79u].w;
        float _2532 = cbSceneParam._m0[79u].w - _2526;
        float _2538 = sqrt(((_2525 * _2525) + (_2526 * _2526)) + (_2528 * _2528));
        float _2541 = (1.0 - (cbSceneParam._m0[77u].w / _2513)) * _2538;
        float _2546 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2548 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2734;
        if (abs((_2527 - _2530) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2734 = ((((_2531 > 0.0) ? exp2(_2546 * _2531) : (2.0 - exp2(_2548 * _2531))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2541;
        }
        else
        {
            float _2678 = 1.0 / cbSceneParam._m0[80u].x;
            float _2679 = isnan(_2532) ? _2531 : (isnan(_2531) ? _2532 : max(_2531, _2532));
            float _2680 = isnan(_2532) ? _2531 : (isnan(_2531) ? _2532 : min(_2531, _2532));
            float _2689 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : min(_2679, 0.0));
            float _2690 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : min(_2680, 0.0));
            _2734 = ((abs(_2538 / _2527) * cbSceneParam._m0[80u].y) * ((((_2689 - _2690) * 2.0) - ((exp2(_2546 * (isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0)))) - exp2(_2546 * (isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0))))) * _2678)) - ((exp2(_2548 * _2689) - exp2(_2548 * _2690)) * _2678))) + (_2541 * cbSceneParam._m0[80u].z);
        }
        vec4 _2736 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2438, _2439, 1.0), 0.0);
        float _2745 = exp2((_2734 * (-1.44269502162933349609375)) * (1.0 - _2736.w));
        float _2746 = log2(_2745);
        float _2762 = log2(_2458);
        _2550 = (exp2(_2762 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2746 * cbSceneParam._m0[78u].x)) * _2736.x) / cbSceneParam._m0[78u].x)) + _2455;
        _2552 = (exp2(_2762 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2746 * cbSceneParam._m0[78u].y)) * _2736.y) / cbSceneParam._m0[78u].y)) + _2456;
        _2554 = (exp2(_2762 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2746 * cbSceneParam._m0[78u].z)) * _2736.z) / cbSceneParam._m0[78u].z)) + _2457;
        _2556 = _2745 * _2458;
    }
    else
    {
        _2550 = _2455;
        _2552 = _2456;
        _2554 = _2457;
        _2556 = _2458;
    }
    bool _2772;
    vec4 _2566;
    vec4 _2588;
    float _2590;
    float _2594;
    float _2595;
    float _2596;
    float _2599;
    float _2602;
    float _2605;
    float _2606;
    bool _2616;
    for (;;)
    {
        _2566 = cbMatDynParam._m0[0u];
        float _2568 = roundEven(_2566.y);
        bool _2569 = _2568 == 3.0;
        float _2570 = log2(_2556);
        float _2574 = exp2(_2570 * cbSceneParam._m0[78u].x);
        float _2575 = exp2(_2570 * cbSceneParam._m0[78u].y);
        float _2576 = exp2(_2570 * cbSceneParam._m0[78u].z);
        float _2577 = _2574 * _2417;
        float _2578 = _2575 * _2418;
        float _2579 = _2576 * _2419;
        float _2586 = _537 + (-0.5);
        _2588 = cbMtdParam._m0[1u];
        _2590 = _2588.y * _2586;
        float _2593 = (_2568 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2594 = _2593 * (_2569 ? _2577 : (_2577 + (cbSceneParam._m0[72u].w * _2550)));
        _2595 = _2593 * (_2569 ? _2578 : (_2578 + (cbSceneParam._m0[72u].w * _2552)));
        _2596 = _2593 * (_2569 ? _2579 : (_2579 + (cbSceneParam._m0[72u].w * _2554)));
        _2599 = ((_2425 * _2429) * _2574) * _2593;
        _2602 = ((_2426 * _2429) * _2575) * _2593;
        _2605 = ((_2427 * _2429) * _2576) * _2593;
        _2606 = _2586 * 0.999000012874603271484375;
        _2616 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2616)
        {
            if ((cbInstanceData._m0[_586 + 7u].x + _2606) < 0.5)
            {
                _2772 = true;
                break;
            }
        }
        uint _2713 = _587 + uint(_2566.w);
        if ((cbInstanceData._m0[_2713].w < 1.0) && ((cbInstanceData._m0[_2713].w + _2606) < 0.5))
        {
            _2772 = true;
            break;
        }
        if ((_2590 + 1.0) < _2588.x)
        {
            _2772 = true;
            break;
        }
        _2772 = false;
        break;
    }
    float _2977;
    if (_2772)
    {
        discard_state = true;
        _2977 = 0.0;
    }
    else
    {
        _2977 = cbInstanceData._m0[_2430].w;
    }
    SV_Target.x = _2594;
    SV_Target.y = _2595;
    SV_Target.z = _2596;
    SV_Target.w = _2977;
    SV_Target_1.x = _2599;
    SV_Target_1.y = _2602;
    SV_Target_1.z = _2605;
    SV_Target_1.w = cbInstanceData._m0[_2430].w;
    discard_exit();
}


