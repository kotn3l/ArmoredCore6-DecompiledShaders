#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_21;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1087;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _247 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _253 = _247.x * cbMtdParam._m0[9u].x;
    float _254 = _247.y * cbMtdParam._m0[9u].y;
    float _255 = _247.z * cbMtdParam._m0[9u].z;
    vec4 _278 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _298 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _301 = _298.x + 0.00999999977648258209228515625;
    float _309 = (TEXCOORD_8 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_8)) * _301)) * (cbMtdParam._m0[15u].z + 1.0);
    float _3494 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _310 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
    float _317 = (_310 * ((_278.x * cbMtdParam._m0[12u].x) - _253)) + _253;
    float _318 = (_310 * ((_278.y * cbMtdParam._m0[12u].y) - _254)) + _254;
    float _319 = (_310 * ((_278.z * cbMtdParam._m0[12u].z) - _255)) + _255;
    vec4 _332 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _334 = _332.x;
    float _336 = _334 - (_334 * TEXCOORD_8);
    vec4 _348 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    vec4 _371 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _375 = _371.z;
    float _378 = (_371.x * 2.0) + (-1.0);
    float _379 = (_371.y * 2.0) + (-1.0);
    float _380 = dot(vec2(_378, _379), vec2(_378, _379));
    float _3505 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _385 = sqrt(1.0 - (isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0))));
    float _393 = (((_348.z - _375) * TEXCOORD_8) * cbMtdParam._m0[16u].x) + _375;
    vec4 _427 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _441 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3516 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _442 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
    float _450 = (((_442 * _442) * (3.0 - (_442 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _459 = cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x;
    float _467 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3527 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _468 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
    float _472 = (_468 * _468) * (3.0 - (_468 * 2.0));
    float _473 = _472 * cbMtdParam._m0[16u].w;
    float _474 = _472 * cbMtdParam._m0[17u].x;
    float _475 = sin(_459);
    float _476 = cos(_459);
    float _477 = TEXCOORD.z - _473;
    float _478 = TEXCOORD.w - _474;
    vec4 _498 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_473 + fma(_478, (-0.0) - _475, _477 * _476))) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (fma(_478, _476, _477 * _475) + _474)) + cbTextureTilingScale._m0[0u].w));
    float _504 = (cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].w) * _498.x;
    float _506 = (cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].w) * _498.y;
    float _508 = (cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].w) * _498.z;
    float _524 = (TEXCOORD_5.x - ((_301 * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[16u].z)) * (cbMtdParam._m0[13u].x + 1.0);
    float _3538 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _525 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
    float _531 = ((((_348.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[15u].x) + _378;
    float _532 = ((((_348.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[15u].x) + _379;
    float _535 = fma(_385, _218 * NORMAL.x, fma(_532, _225 * TANGENT.x, (_211 * _203) * _531));
    float _538 = fma(_385, _218 * NORMAL.y, fma(_532, _225 * TANGENT.y, (_211 * _204) * _531));
    float _541 = fma(_385, _218 * NORMAL.z, fma(_532, _225 * TANGENT.z, (_211 * _205) * _531));
    float _545 = inversesqrt(dot(vec3(_535, _538, _541), vec3(_535, _538, _541)));
    float _546 = _545 * _535;
    float _547 = _545 * _538;
    float _548 = _545 * _541;
    float _3549 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _549 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
    float _3560 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3571 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3582 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3593 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _553 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
    float _569 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _610 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _620 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _610);
    float _621 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _610);
    float _622 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _610);
    float _626 = inversesqrt(dot(vec3(_620, _621, _622), vec3(_620, _621, _622)));
    float _627 = _620 * _626;
    float _628 = _621 * _626;
    float _629 = _622 * _626;
    float _635 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _636 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _654 = fma(_548, cbSceneParam._m0[5u].z, fma(_547, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _546));
    float _657 = fma(_548, cbSceneParam._m0[6u].z, fma(_547, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _546));
    float _660 = fma(_548, cbSceneParam._m0[7u].z, fma(_547, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _546));
    uint _673 = uint(roundEven(NORMAL.w)) * 13u;
    uint _674 = _673 + 9u;
    uint _675 = _674 + uint(cbMatDynParam._m0[0u].w);
    float _681 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0)))) * cbInstanceData._m0[_675].x;
    float _682 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0)))) * cbInstanceData._m0[_675].y;
    float _683 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0)))) * cbInstanceData._m0[_675].z;
    float _3604 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _684 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    float _3615 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _685 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
    float _3626 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _686 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _687 = 1.0 - _553;
    float _688 = _684 * _687;
    float _689 = _685 * _687;
    float _690 = _686 * _687;
    float _695 = (_684 + (-0.039999999105930328369140625)) * _553;
    float _696 = (_685 + (-0.039999999105930328369140625)) * _553;
    float _697 = (_686 + (-0.039999999105930328369140625)) * _553;
    float _698 = _695 + 0.039999999105930328369140625;
    float _700 = _696 + 0.039999999105930328369140625;
    float _701 = _697 + 0.039999999105930328369140625;
    vec4 _710 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _635, cbSceneParam._m0[86u].y * _636));
    float _713 = _710.x * TEXCOORD_5.w;
    float _714 = dot(vec3(_546, _547, _548), vec3(_627, _628, _629));
    float _717 = _714 * 2.0;
    float _721 = (_717 * _546) - _627;
    float _722 = (_717 * _547) - _628;
    float _723 = (_717 * _548) - _629;
    float _727 = abs(dot(vec3(_627, _628, _629), vec3(_546, _547, _548)));
    float _3637 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _729 = sqrt(_549);
    float _741 = exp2((_729 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_729 * 3.0));
    float _747 = (1.0 - _741) * ((_729 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _748 = _741 * _729;
    float _776 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _780 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _784 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1086;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _811 = fma(_784, cbModelParam._m0[26u].z, fma(_780, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _776));
        float _815 = fma(_784, cbModelParam._m0[27u].z, fma(_780, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _776));
        float _819 = fma(_784, cbModelParam._m0[28u].z, fma(_780, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _776));
        float _844 = _776 + _546;
        float _845 = _780 + _547;
        float _846 = _784 + _548;
        float _856 = fma(_846, cbModelParam._m0[26u].z, fma(_845, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _844)) - _811;
        float _857 = fma(_846, cbModelParam._m0[27u].z, fma(_845, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _844)) - _815;
        float _858 = fma(_846, cbModelParam._m0[28u].z, fma(_845, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _844)) - _819;
        float _862 = inversesqrt(dot(vec3(_856, _857, _858), vec3(_856, _857, _858)));
        float _875 = ((_862 * _856) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_811 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _876 = ((_862 * _857) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_815 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _877 = ((_862 * _858) / cbModelParam._m0[34u].z) + ((((((_819 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        float _914 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _915 = _914 * (_880.x + (-0.5));
        float _916 = _914 * (_880.y + (-0.5));
        float _917 = _914 * (_880.z + (-0.5));
        float _924 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _925 = _924 * (_887.x + (-0.5));
        float _926 = _924 * (_887.y + (-0.5));
        float _927 = _924 * (_887.z + (-0.5));
        float _934 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _935 = _934 * (_894.x + (-0.5));
        float _936 = _934 * (_894.y + (-0.5));
        float _937 = _934 * (_894.z + (-0.5));
        float _944 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _945 = _944 * (_901.x + (-0.5));
        float _946 = _944 * (_901.y + (-0.5));
        float _947 = _944 * (_901.z + (-0.5));
        float _948 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _949 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _950 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _951 = _915 * 0.5;
        float _952 = _925 * 0.5;
        float _953 = _935 * 0.5;
        float _954 = dot(vec3(_951, _952, _953), vec3(_951, _952, _953));
        float _959 = (_954 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_954);
        float _968 = (dot(vec3(_546, _547, _548), vec3(_959 * _951, _959 * _952, _959 * _953)) + 1.0) * 0.5;
        float _3663 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _978 = sqrt(((_952 * _952) + (_951 * _951)) + (_953 * _953)) / (_948 + 9.9999997473787516355514526367188e-06);
        float _3674 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _980 = _979 * 2.0;
        float _984 = (1.0 - _979) / (_979 + 1.0);
        float _3685 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _994 = ((((1.0 - _985) * (_980 + 2.0)) * exp2(log2(isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * (_980 + 1.0))) + _985) * _948;
        float _995 = _916 * 0.5;
        float _996 = _926 * 0.5;
        float _997 = _936 * 0.5;
        float _998 = dot(vec3(_995, _996, _997), vec3(_995, _996, _997));
        float _1003 = (_998 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_998);
        float _1011 = (dot(vec3(_546, _547, _548), vec3(_1003 * _995, _1003 * _996, _1003 * _997)) + 1.0) * 0.5;
        float _3696 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1020 = sqrt(((_996 * _996) + (_995 * _995)) + (_997 * _997)) / (_949 + 9.9999997473787516355514526367188e-06);
        float _3707 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3718 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * (_1022 + 1.0))) + _1027) * _949;
        float _1037 = _917 * 0.5;
        float _1038 = _927 * 0.5;
        float _1039 = _937 * 0.5;
        float _1040 = dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039));
        float _1045 = (_1040 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1040);
        float _1053 = (dot(vec3(_546, _547, _548), vec3(_1045 * _1037, _1045 * _1038, _1045 * _1039)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1062 = sqrt(((_1038 * _1038) + (_1037 * _1037)) + (_1039 * _1039)) / (_950 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3751 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1064 + 1.0))) + _1069) * _950;
        _1086 = _917;
        _1088 = _916;
        _1089 = _915;
        _1090 = _927;
        _1091 = _926;
        _1092 = _925;
        _1093 = _937;
        _1094 = _936;
        _1095 = _935;
        _1096 = _950;
        _1097 = _949;
        _1098 = _948;
        _1099 = cbModelParam._m0[36u].z * (isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0)));
        _1100 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
        _1101 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
    }
    else
    {
        _1086 = _1087;
        _1088 = _1087;
        _1089 = _1087;
        _1090 = _1087;
        _1091 = _1087;
        _1092 = _1087;
        _1093 = _1087;
        _1094 = _1087;
        _1095 = _1087;
        _1096 = _1087;
        _1097 = _1087;
        _1098 = _1087;
        _1099 = 0.0;
        _1100 = 0.0;
        _1101 = 0.0;
    }
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1127 = fma(_784, cbModelParam._m0[30u].z, fma(_780, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _776));
        float _1131 = fma(_784, cbModelParam._m0[31u].z, fma(_780, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _776));
        float _1135 = fma(_784, cbModelParam._m0[32u].z, fma(_780, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _776));
        float _1158 = _776 + _546;
        float _1159 = _780 + _547;
        float _1160 = _784 + _548;
        float _1170 = fma(_1160, cbModelParam._m0[30u].z, fma(_1159, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1158)) - _1127;
        float _1171 = fma(_1160, cbModelParam._m0[31u].z, fma(_1159, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1158)) - _1131;
        float _1172 = fma(_1160, cbModelParam._m0[32u].z, fma(_1159, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1158)) - _1135;
        float _1176 = inversesqrt(dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172)));
        float _1189 = ((_1176 * _1170) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1127 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1190 = ((_1176 * _1171) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1131 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1191 = ((_1176 * _1172) / cbModelParam._m0[35u].z) + ((((((_1135 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        float _1226 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1193.x + (-0.5));
        float _1228 = _1226 * (_1193.y + (-0.5));
        float _1229 = _1226 * (_1193.z + (-0.5));
        float _1236 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1200.x + (-0.5));
        float _1238 = _1236 * (_1200.y + (-0.5));
        float _1239 = _1236 * (_1200.z + (-0.5));
        float _1246 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1207.x + (-0.5));
        float _1248 = _1246 * (_1207.y + (-0.5));
        float _1249 = _1246 * (_1207.z + (-0.5));
        float _1256 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1214.x + (-0.5));
        float _1258 = _1256 * (_1214.y + (-0.5));
        float _1259 = _1256 * (_1214.z + (-0.5));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = _1227 * 0.5;
        float _1264 = _1237 * 0.5;
        float _1265 = _1247 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_546, _547, _548), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _3792 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _3803 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _3814 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_1290 + 1.0))) + _1295) * _1260;
        float _1305 = _1228 * 0.5;
        float _1306 = _1238 * 0.5;
        float _1307 = _1248 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_546, _547, _548), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _3825 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1261 + 9.9999997473787516355514526367188e-06);
        float _3836 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _3847 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * (_1332 + 1.0))) + _1337) * _1261;
        float _1347 = _1229 * 0.5;
        float _1348 = _1239 * 0.5;
        float _1349 = _1249 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1363 = (dot(vec3(_546, _547, _548), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _3858 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1372 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _3869 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _3880 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1374 + 1.0))) + _1379) * _1262;
        _1396 = _1229;
        _1397 = _1228;
        _1398 = _1227;
        _1399 = _1239;
        _1400 = _1238;
        _1401 = _1237;
        _1402 = _1249;
        _1403 = _1248;
        _1404 = _1247;
        _1405 = _1262;
        _1406 = _1261;
        _1407 = _1260;
        _1408 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1409 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
        _1410 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
    }
    else
    {
        _1396 = _1087;
        _1397 = _1087;
        _1398 = _1087;
        _1399 = _1087;
        _1400 = _1087;
        _1401 = _1087;
        _1402 = _1087;
        _1403 = _1087;
        _1404 = _1087;
        _1405 = _1087;
        _1406 = _1087;
        _1407 = _1087;
        _1408 = 0.0;
        _1409 = 0.0;
        _1410 = 0.0;
    }
    float _1420 = (cbModelParam._m0[1u].x * (_1408 - _1099)) + _1099;
    float _1421 = (cbModelParam._m0[1u].x * (_1409 - _1100)) + _1100;
    float _1422 = (cbModelParam._m0[1u].x * (_1410 - _1101)) + _1101;
    float _1443 = fma(_1422, cbSceneParam._m0[89u].z, fma(_1421, cbSceneParam._m0[89u].y, _1420 * cbSceneParam._m0[89u].x));
    float _1446 = fma(_1422, cbSceneParam._m0[90u].z, fma(_1421, cbSceneParam._m0[90u].y, _1420 * cbSceneParam._m0[90u].x));
    float _1449 = fma(_1422, cbSceneParam._m0[91u].z, fma(_1421, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1420));
    float _1464 = _721 * 0.5;
    float _1465 = _722 * 0.5;
    float _1466 = _723 * 0.5;
    float _1467 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1398, _1401, _1404, _1407));
    float _1470 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1397, _1400, _1403, _1406));
    float _1473 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1396, _1399, _1402, _1405));
    float _1507;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1480 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1086, _1090, _1093, _1096));
        float _1484 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1088, _1091, _1094, _1097));
        float _1488 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1089, _1092, _1095, _1098));
        float _1495 = dot(vec4(cbModelParam._m0[39u]), vec4(_1464, _1465, _1466, 1.0));
        _1507 = dot(vec3(isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)), isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)), isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1495) ? 0.0 : (isnan(0.0) ? _1495 : max(0.0, _1495))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1507 = 1.0;
    }
    float _1518;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1509 = dot(vec4(cbModelParam._m0[40u]), vec4(_1464, _1465, _1466, 1.0));
        _1518 = dot(vec3(isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)), isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)), isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1509) ? 0.0 : (isnan(0.0) ? _1509 : max(0.0, _1509))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1518 = 1.0;
    }
    float _1522 = (_1518 * cbModelParam._m0[1u].x) + (_1507 * (1.0 - cbModelParam._m0[1u].x));
    float _1532 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _549);
    float _1533 = isnan(_1532) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1532 : min(cbModelParam._m0[25u].z, _1532));
    float _1613;
    float _1615;
    float _1617;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1580 = fma(_784, cbModelParam._m0[13u].z, fma(_780, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _776)) + cbModelParam._m0[13u].w;
        float _1584 = fma(_784, cbModelParam._m0[14u].z, fma(_780, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _776)) + cbModelParam._m0[14u].w;
        float _1588 = fma(_784, cbModelParam._m0[15u].z, fma(_780, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _776)) + cbModelParam._m0[15u].w;
        float _1591 = fma(_723, cbModelParam._m0[13u].z, fma(_722, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _721));
        float _1594 = fma(_723, cbModelParam._m0[14u].z, fma(_722, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _721));
        float _1597 = fma(_723, cbModelParam._m0[15u].z, fma(_722, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _721));
        float _1625;
        if (_1591 > 0.0)
        {
            _1625 = abs((1.0 - _1580) / _1591);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1580 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1625 = frontier_phi_14_12_ladder;
        }
        float _1850;
        if (_1594 > 0.0)
        {
            _1850 = abs((1.0 - _1584) / _1594);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1594 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1584 + 1.0) / _1594);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1850 = frontier_phi_23_19_ladder;
        }
        float _2107;
        if (_1597 > 0.0)
        {
            _2107 = abs((1.0 - _1588) / _1597);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1597 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1588 + 1.0) / _1597);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2107 = frontier_phi_35_30_ladder;
        }
        float _2109 = isnan(_1850) ? _1625 : (isnan(_1625) ? _1850 : min(_1625, _1850));
        float _2110 = isnan(_2107) ? _2109 : (isnan(_2109) ? _2107 : min(_2109, _2107));
        float _2114 = (_2110 * _1591) + _1580;
        float _2115 = (_2110 * _1594) + _1584;
        float _2116 = (_2110 * _1597) + _1588;
        float _2117 = _2110 * 9.9999997473787516355514526367188e-05;
        float _2119 = (-1.0) - _2117;
        float _2121 = _2117 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2116 > _2121) || ((_2116 < _2119) || ((_2115 > _2121) || ((_2115 < _2119) || ((_2114 < _2119) || (_2114 > _2121))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2244 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2116, cbModelParam._m0[9u].z, fma(_2115, cbModelParam._m0[9u].y, _2114 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2116, cbModelParam._m0[10u].z, fma(_2115, cbModelParam._m0[10u].y, _2114 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2116, cbModelParam._m0[11u].z, fma(_2115, cbModelParam._m0[11u].y, _2114 * cbModelParam._m0[11u].x))), _1533);
            frontier_phi_13_35_ladder = _2244.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2244.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2244.x * cbModelParam._m0[1u].y;
        }
        _1613 = frontier_phi_13_35_ladder_2;
        _1615 = frontier_phi_13_35_ladder_1;
        _1617 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1601 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_721, _722, _723), _1533);
        _1613 = _1601.x * cbModelParam._m0[1u].y;
        _1615 = _1601.y * cbModelParam._m0[1u].y;
        _1617 = _1601.z * cbModelParam._m0[1u].y;
    }
    float _1621 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _549);
    float _1622 = isnan(_1621) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1621 : min(cbModelParam._m0[25u].w, _1621));
    float _1713;
    float _1715;
    float _1717;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1677 = fma(_784, cbModelParam._m0[21u].z, fma(_780, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _776)) + cbModelParam._m0[21u].w;
        float _1681 = fma(_784, cbModelParam._m0[22u].z, fma(_780, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _776)) + cbModelParam._m0[22u].w;
        float _1685 = fma(_784, cbModelParam._m0[23u].z, fma(_780, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _776)) + cbModelParam._m0[23u].w;
        float _1688 = fma(_723, cbModelParam._m0[21u].z, fma(_722, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _721));
        float _1691 = fma(_723, cbModelParam._m0[22u].z, fma(_722, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _721));
        float _1694 = fma(_723, cbModelParam._m0[23u].z, fma(_722, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _721));
        float _1855;
        if (_1688 > 0.0)
        {
            _1855 = abs((1.0 - _1677) / _1688);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1677 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1855 = frontier_phi_25_21_ladder;
        }
        float _2134;
        if (_1691 > 0.0)
        {
            _2134 = abs((1.0 - _1681) / _1691);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1691 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1681 + 1.0) / _1691);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2134 = frontier_phi_37_32_ladder;
        }
        float _2347;
        if (_1694 > 0.0)
        {
            _2347 = abs((1.0 - _1685) / _1694);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1685 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2347 = frontier_phi_46_43_ladder;
        }
        float _2349 = isnan(_2134) ? _1855 : (isnan(_1855) ? _2134 : min(_1855, _2134));
        float _2350 = isnan(_2347) ? _2349 : (isnan(_2349) ? _2347 : min(_2349, _2347));
        float _2354 = (_2350 * _1688) + _1677;
        float _2355 = (_2350 * _1691) + _1681;
        float _2356 = (_2350 * _1694) + _1685;
        float _2357 = _2350 * 9.9999997473787516355514526367188e-05;
        float _2358 = (-1.0) - _2357;
        float _2360 = _2357 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2356 > _2360) || ((_2356 < _2358) || ((_2355 > _2360) || ((_2355 < _2358) || ((_2354 < _2358) || (_2354 > _2360))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2600 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2356, cbModelParam._m0[17u].z, fma(_2355, cbModelParam._m0[17u].y, _2354 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2356, cbModelParam._m0[18u].z, fma(_2355, cbModelParam._m0[18u].y, _2354 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2356, cbModelParam._m0[19u].z, fma(_2355, cbModelParam._m0[19u].y, _2354 * cbModelParam._m0[19u].x))), _1622);
            frontier_phi_22_46_ladder = _2600.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2600.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2600.x * cbModelParam._m0[1u].z;
        }
        _1713 = frontier_phi_22_46_ladder_2;
        _1715 = frontier_phi_22_46_ladder_1;
        _1717 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1697 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_721, _722, _723), _1622);
        _1713 = _1697.x * cbModelParam._m0[1u].z;
        _1715 = _1697.y * cbModelParam._m0[1u].z;
        _1717 = _1697.z * cbModelParam._m0[1u].z;
    }
    float _1730 = (((_747 * _698) + _748) * _713) * ((cbModelParam._m0[1u].w * (_1713 - _1613)) + _1613);
    float _1732 = (((_747 * _700) + _748) * _713) * ((cbModelParam._m0[1u].w * (_1715 - _1615)) + _1615);
    float _1734 = (((_747 * _701) + _748) * _713) * ((cbModelParam._m0[1u].w * (_1717 - _1617)) + _1617);
    float _1737 = fma(_1734, cbSceneParam._m0[89u].z, fma(_1732, cbSceneParam._m0[89u].y, _1730 * cbSceneParam._m0[89u].x));
    float _1740 = fma(_1734, cbSceneParam._m0[90u].z, fma(_1732, cbSceneParam._m0[90u].y, _1730 * cbSceneParam._m0[90u].x));
    float _1743 = fma(_1734, cbSceneParam._m0[91u].z, fma(_1732, cbSceneParam._m0[91u].y, _1730 * cbSceneParam._m0[91u].x));
    vec4 _1751 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_635, _636));
    float _1753 = _1751.w;
    float _1765 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1753);
    float _1766 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1753);
    float _1767 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1753);
    uvec4 _1771 = floatBitsToUint(cbInstanceData._m0[_673 + 5u]);
    uint _1773 = _1771.x * 14u;
    uint _1774 = _1773 + 13u;
    float _1781 = _713 + (-1.0);
    float _1786 = (cbLight._m0[_1774].x * _1781) + 1.0;
    float _1787 = (cbLight._m0[_1774].y * _1781) + 1.0;
    float _1788 = (cbLight._m0[_1774].z * _1781) + 1.0;
    float _1789 = (cbLight._m0[_1774].w * _1781) + 1.0;
    uint _1790 = _1773 + 5u;
    float _1796 = isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0));
    uint _1800 = _1773 + 4u;
    float _1809 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
    uint _1813 = _1773 | 1u;
    float _1824 = dot(vec3(cbLight._m0[_1773].xyz), vec3(_546, _547, _548));
    float _1827 = dot(vec3(cbLight._m0[_1813].xyz), vec3(_546, _547, _548));
    float _4016 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _4027 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1832 = (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * 0.3183098733425140380859375;
    float _1834 = (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * 0.3183098733425140380859375;
    float _1841 = ((cbLight._m0[_1790].x * _1796) * _1834) + (((cbLight._m0[_1800].x * _1765) * _1809) * _1832);
    float _1842 = ((_1796 * cbLight._m0[_1790].y) * _1834) + (((cbLight._m0[_1800].y * _1766) * _1809) * _1832);
    float _1843 = ((_1796 * cbLight._m0[_1790].z) * _1834) + (((cbLight._m0[_1800].z * _1767) * _1809) * _1832);
    uvec4 _1847 = floatBitsToUint(cbLight._m0[_1773 + 12u]);
    bool _1849 = _1847.x == 0u;
    float _1860;
    float _1862;
    float _1864;
    if (_1849)
    {
        _1860 = _1841;
        _1862 = _1842;
        _1864 = _1843;
    }
    else
    {
        uint _1868 = _1773 + 6u;
        float _1884 = (dot(vec3(cbLight._m0[_1773 + 2u].xyz), vec3(_546, _547, _548)) * 0.5) + 0.5;
        float _1885 = _1884 * _1884;
        float _4038 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
        float _1886 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1887 = isnan(1.0) ? _1788 : (isnan(_1788) ? 1.0 : min(_1788, 1.0));
        _1860 = (((cbLight._m0[_1868].x * 0.3183098733425140380859375) * _1886) * _1887) + _1841;
        _1862 = (((cbLight._m0[_1868].y * 0.3183098733425140380859375) * _1886) * _1887) + _1842;
        _1864 = (((cbLight._m0[_1868].z * 0.3183098733425140380859375) * _1886) * _1887) + _1843;
    }
    bool _1867 = _1847.y == 0u;
    float _1905;
    float _1907;
    float _1909;
    if (_1867)
    {
        _1905 = _1860;
        _1907 = _1862;
        _1909 = _1864;
    }
    else
    {
        uint _2078 = _1773 + 7u;
        float _2094 = (dot(vec3(cbLight._m0[_1773 + 3u].xyz), vec3(_546, _547, _548)) * 0.5) + 0.5;
        float _2095 = _2094 * _2094;
        float _4054 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        float _2096 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _2097 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
        _1905 = (((cbLight._m0[_2078].x * 0.3183098733425140380859375) * _2096) * _2097) + _1860;
        _1907 = (((cbLight._m0[_2078].y * 0.3183098733425140380859375) * _2096) * _2097) + _1862;
        _1909 = (((cbLight._m0[_2078].z * 0.3183098733425140380859375) * _2096) * _2097) + _1864;
    }
    uint _1912 = _1773 + 8u;
    float _1925 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1773].w)) * _549) * 0.949999988079071044921875);
    float _1926 = _1925 * _1925;
    float _1927 = cbLight._m0[_1773].x + _627;
    float _1928 = cbLight._m0[_1773].y + _628;
    float _1929 = cbLight._m0[_1773].z + _629;
    float _1933 = inversesqrt(dot(vec3(_1927, _1928, _1929), vec3(_1927, _1928, _1929)));
    float _1934 = _1933 * _1927;
    float _1935 = _1933 * _1928;
    float _1936 = _1933 * _1929;
    float _1937 = dot(vec3(_546, _547, _548), vec3(cbLight._m0[_1773].xyz));
    float _4070 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1940 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _4081 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _1941 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _1942 = dot(vec3(_546, _547, _548), vec3(_1934, _1935, _1936));
    float _4092 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1945 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _1946 = dot(vec3(cbLight._m0[_1773].xyz), vec3(_1934, _1935, _1936));
    float _4103 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1950 = _1926 * _1926;
    float _1954 = ((_1945 * _1945) * (_1950 + (-1.0))) + 1.0;
    float _1962 = exp2(log2(1.0 - (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) * 5.0);
    float _1963 = 0.959999978542327880859375 - _695;
    float _1965 = 0.959999978542327880859375 - _696;
    float _1966 = 0.959999978542327880859375 - _697;
    float _1973 = 1.0 - _1926;
    float _1984 = (0.5 / (((_1941 * ((_1940 * _1973) + _1926)) + 9.9999999392252902907785028219223e-09) + (((_1941 * _1973) + _1926) * _1940))) * _1940;
    float _4114 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1986 = (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1950 / ((_1954 * _1954) * 3.141590118408203125));
    uint _2000 = _1773 + 9u;
    float _2011 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1813].w)) * _549) * 0.949999988079071044921875);
    float _2012 = _2011 * _2011;
    float _2013 = cbLight._m0[_1813].x + _627;
    float _2014 = cbLight._m0[_1813].y + _628;
    float _2015 = cbLight._m0[_1813].z + _629;
    float _2019 = inversesqrt(dot(vec3(_2013, _2014, _2015), vec3(_2013, _2014, _2015)));
    float _2020 = _2019 * _2013;
    float _2021 = _2019 * _2014;
    float _2022 = _2019 * _2015;
    float _2023 = dot(vec3(_546, _547, _548), vec3(cbLight._m0[_1813].xyz));
    float _4125 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2026 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _2027 = dot(vec3(_546, _547, _548), vec3(_2020, _2021, _2022));
    float _4136 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2030 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _2031 = dot(vec3(cbLight._m0[_1813].xyz), vec3(_2020, _2021, _2022));
    float _4147 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2035 = _2012 * _2012;
    float _2039 = ((_2030 * _2030) * (_2035 + (-1.0))) + 1.0;
    float _2046 = exp2(log2(1.0 - (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) * 5.0);
    float _2053 = 1.0 - _2012;
    float _2063 = (0.5 / (((_1941 * ((_2026 * _2053) + _2012)) + 9.9999999392252902907785028219223e-09) + (((_1941 * _2053) + _2012) * _2026))) * _2026;
    float _4158 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2065 = (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_2035 / ((_2039 * _2039) * 3.141590118408203125));
    float _2075 = (((((_2046 * _1963) + _698) * cbLight._m0[_2000].x) * _2065) * _1796) + ((((cbLight._m0[_1912].x * _1765) * ((_1962 * _1963) + _698)) * _1986) * _1809);
    float _2076 = (((((_2046 * _1965) + _700) * cbLight._m0[_2000].y) * _2065) * _1796) + ((((cbLight._m0[_1912].y * _1766) * ((_1962 * _1965) + _700)) * _1986) * _1809);
    float _2077 = (((((_2046 * _1966) + _701) * cbLight._m0[_2000].z) * _2065) * _1796) + ((((cbLight._m0[_1912].z * _1767) * ((_1962 * _1966) + _701)) * _1986) * _1809);
    float _2139;
    float _2141;
    float _2143;
    if (_1849)
    {
        _2139 = _2075;
        _2141 = _2076;
        _2143 = _2077;
    }
    else
    {
        uint _2145 = _1773 + 2u;
        uint _2149 = _1773 + 10u;
        float _2163 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2145].w)) * _549) * 0.949999988079071044921875);
        float _2164 = _2163 * _2163;
        float _2165 = cbLight._m0[_2145].x + _627;
        float _2166 = cbLight._m0[_2145].y + _628;
        float _2167 = cbLight._m0[_2145].z + _629;
        float _2171 = inversesqrt(dot(vec3(_2165, _2166, _2167), vec3(_2165, _2166, _2167)));
        float _2172 = _2171 * _2165;
        float _2173 = _2171 * _2166;
        float _2174 = _2171 * _2167;
        float _2175 = dot(vec3(_546, _547, _548), vec3(cbLight._m0[_2145].xyz));
        float _4169 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        float _2178 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _2179 = dot(vec3(_546, _547, _548), vec3(_2172, _2173, _2174));
        float _4180 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2182 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _2183 = dot(vec3(cbLight._m0[_2145].xyz), vec3(_2172, _2173, _2174));
        float _4191 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        float _2187 = _2164 * _2164;
        float _2191 = ((_2182 * _2182) * (_2187 + (-1.0))) + 1.0;
        float _2198 = exp2(log2(1.0 - (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) * 5.0);
        float _2205 = 1.0 - _2164;
        float _2215 = (0.5 / (((_1941 * ((_2178 * _2205) + _2164)) + 9.9999999392252902907785028219223e-09) + (((_1941 * _2205) + _2164) * _2178))) * _2178;
        float _4202 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2217 = (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2187 / ((_2191 * _2191) * 3.141590118408203125));
        float _2218 = isnan(1.0) ? _1788 : (isnan(_1788) ? 1.0 : min(_1788, 1.0));
        _2139 = (((((_2198 * _1963) + _698) * cbLight._m0[_2149].x) * _2217) * _2218) + _2075;
        _2141 = (((((_2198 * _1965) + _700) * cbLight._m0[_2149].y) * _2217) * _2218) + _2076;
        _2143 = (((((_2198 * _1966) + _701) * cbLight._m0[_2149].z) * _2217) * _2218) + _2077;
    }
    float _2253;
    float _2255;
    float _2257;
    if (_1867)
    {
        _2253 = _2139;
        _2255 = _2141;
        _2257 = _2143;
    }
    else
    {
        uint _2264 = _1773 + 3u;
        uint _2268 = _1773 + 11u;
        float _2282 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2264].w)) * _549) * 0.949999988079071044921875);
        float _2283 = _2282 * _2282;
        float _2284 = cbLight._m0[_2264].x + _627;
        float _2285 = cbLight._m0[_2264].y + _628;
        float _2286 = cbLight._m0[_2264].z + _629;
        float _2290 = inversesqrt(dot(vec3(_2284, _2285, _2286), vec3(_2284, _2285, _2286)));
        float _2291 = _2290 * _2284;
        float _2292 = _2290 * _2285;
        float _2293 = _2290 * _2286;
        float _2294 = dot(vec3(_546, _547, _548), vec3(cbLight._m0[_2264].xyz));
        float _4218 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2297 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _2298 = dot(vec3(_546, _547, _548), vec3(_2291, _2292, _2293));
        float _4229 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2301 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _2302 = dot(vec3(cbLight._m0[_2264].xyz), vec3(_2291, _2292, _2293));
        float _4240 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2306 = _2283 * _2283;
        float _2310 = ((_2301 * _2301) * (_2306 + (-1.0))) + 1.0;
        float _2317 = exp2(log2(1.0 - (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0)))) * 5.0);
        float _2324 = 1.0 - _2283;
        float _2334 = (0.5 / (((_1941 * ((_2297 * _2324) + _2283)) + 9.9999999392252902907785028219223e-09) + (((_1941 * _2324) + _2283) * _2297))) * _2297;
        float _4251 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2336 = (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_2306 / ((_2310 * _2310) * 3.141590118408203125));
        float _2337 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
        _2253 = (((((_2317 * _1963) + _698) * cbLight._m0[_2268].x) * _2336) * _2337) + _2139;
        _2255 = (((((_2317 * _1965) + _700) * cbLight._m0[_2268].y) * _2336) * _2337) + _2141;
        _2257 = (((((_2317 * _1966) + _701) * cbLight._m0[_2268].z) * _2336) * _2337) + _2143;
    }
    float _2472;
    float _2474;
    float _2476;
    float _2478;
    float _2480;
    float _2482;
    if (_1771.y == 0u)
    {
        float _2412 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2413 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2412;
        float _2414 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2412;
        float _2415 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2412;
        uvec4 _2427 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2428 = _2427.x;
        uint _2439 = uint((float(_2427.y) * floor(float(uint(cbSceneParam._m0[85u].y * _636) / _2428))) + floor(float(uint(cbSceneParam._m0[85u].x * _635) / _2428)));
        float _2449 = (log2(_2415 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2450 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        uint _2453 = uint(isnan(14.0) ? _2450 : (isnan(_2450) ? 14.0 : min(_2450, 14.0)));
        uvec4 _2458 = texelFetch(g_lightClusterGridBuffer, int(((_2453 << 2u) + (_2439 << 6u)) >> 2u));
        uint _2459 = _2458.x;
        uint _2460 = _2427.z;
        float _2605;
        float _2607;
        float _2609;
        float _2611;
        float _2613;
        float _2615;
        if (((((1u << ((_2460 >> 4u) & 15u)) + 4294967295u) & _2459) == 0u) || ((_2460 & 240u) == 0u))
        {
            _2605 = 0.0;
            _2607 = 0.0;
            _2609 = 0.0;
            _2611 = 0.0;
            _2613 = 0.0;
            _2615 = 0.0;
        }
        else
        {
            float _2606;
            float _2608;
            float _2610;
            float _2612;
            float _2614;
            float _2616;
            float _2758 = 0.0;
            float _2759 = 0.0;
            float _2760 = 0.0;
            float _2761 = 0.0;
            float _2762 = 0.0;
            float _2763 = 0.0;
            uint _2764 = 0u;
            uint _2773;
            bool _2774;
            for (;;)
            {
                _2773 = texelFetch(g_lightClassification, int((((_2453 << 5u) + (_2439 << 9u)) + (_2764 << 2u)) >> 2u)).x;
                _2774 = _2773 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2774)
                {
                    frontier_phi_61_pred = _2758;
                    frontier_phi_61_pred_1 = _2763;
                    frontier_phi_61_pred_2 = _2762;
                    frontier_phi_61_pred_3 = _2761;
                    frontier_phi_61_pred_4 = _2760;
                    frontier_phi_61_pred_5 = _2759;
                }
                else
                {
                    float _2882;
                    float _2883;
                    float _2884;
                    float _2885;
                    float _2886;
                    float _2887;
                    uint _2888;
                    _2882 = _2758;
                    _2883 = _2759;
                    _2884 = _2760;
                    _2885 = _2761;
                    _2886 = _2762;
                    _2887 = _2763;
                    _2888 = _2773;
                    float _2814;
                    float _2815;
                    float _2816;
                    float _2817;
                    float _2818;
                    float _2819;
                    for (;;)
                    {
                        uint _2892 = uint(findLSB(_2888)) + (_2764 << 5u);
                        uint _2889 = (_2888 + 4294967295u) & _2888;
                        uint _2894 = _2892 * 48u;
                        vec4 _2908 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2894)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 3u)).x));
                        uint _2914 = (_2892 * 48u) + 4u;
                        vec4 _2927 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2914)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 3u)).x));
                        uint _2933 = (_2892 * 48u) + 8u;
                        vec3 _2944 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2933)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 2u)).x));
                        float _2948 = _2908.x - _2413;
                        float _2949 = _2908.y - _2414;
                        float _2950 = _2908.z - _2415;
                        float _2951 = dot(vec3(_2948, _2949, _2950), vec3(_2948, _2949, _2950));
                        float _2954 = inversesqrt(_2951);
                        float _2955 = _2954 * _2948;
                        float _2956 = _2954 * _2949;
                        float _2957 = _2954 * _2950;
                        float _2958 = dot(vec3(_654, _657, _660), vec3(_2955, _2956, _2957));
                        float _2963 = 1.0 - (_2951 * _2908.w);
                        float _4277 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
                        float _2964 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                        float _2965 = sqrt(_2951) * _2927.w;
                        float _2968 = 1.39999997615814208984375 / (_2965 + 1.39999997615814208984375);
                        float _2969 = _2968 * _2968;
                        float _2972 = ((1.0 - _2969) * _2958) + _2969;
                        float _2975 = _2965 * _2965;
                        float _2979 = ((isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0))) * _2964) / ((_2975 * 0.699999988079071044921875) + 1.0);
                        float _2983 = (-0.0) - _2413;
                        float _2984 = (-0.0) - _2414;
                        float _2985 = (-0.0) - _2415;
                        float _2989 = inversesqrt(dot(vec3(_2983, _2984, _2985), vec3(_2983, _2984, _2985)));
                        float _2990 = _2989 * _2983;
                        float _2991 = _2989 * _2984;
                        float _2992 = _2989 * _2985;
                        float _3000 = exp2(log2(1.0 / ((_2975 * 3.5) + 5.0)) * 0.25);
                        float _3001 = 1.0 - _729;
                        float _3008 = sqrt(1.0 - ((1.0 - (_3001 * _3001)) * (1.0 - (_3000 * _3000))));
                        float _3009 = _3008 * _3008;
                        float _3010 = _3009 * _3009;
                        float _3011 = _2990 + _2955;
                        float _3012 = _2991 + _2956;
                        float _3013 = _2992 + _2957;
                        float _3017 = inversesqrt(dot(vec3(_3011, _3012, _3013), vec3(_3011, _3012, _3013)));
                        float _3021 = dot(vec3(_654, _657, _660), vec3(_2990, _2991, _2992));
                        float _4293 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                        float _3024 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                        float _3025 = dot(vec3(_654, _657, _660), vec3(_3017 * _3011, _3017 * _3012, _3017 * _3013));
                        float _4304 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                        float _3028 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                        float _3032 = ((_3028 * _3028) * (_3010 + (-1.0))) + 1.0;
                        float _3033 = _2968 * _3009;
                        float _3034 = _3033 * _3033;
                        float _3037 = ((1.0 - _3034) * _2958) + _3034;
                        float _4315 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                        float _3038 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
                        float _3039 = 1.0 - _3009;
                        float _3049 = (0.5 / (((_3038 * ((_3024 * _3039) + _3009)) + 9.9999999392252902907785028219223e-09) + (((_3038 * _3039) + _3009) * _3024))) * _3038;
                        float _4326 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                        float _3060 = (((_3010 * 3.1415927410125732421875) * (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0)))) / ((_3032 * _3032) * ((_2975 * 2.1991131305694580078125) + 3.141590118408203125))) * _2964;
                        _2817 = (_2979 * _2927.x) + _2885;
                        _2818 = (_2979 * _2927.y) + _2886;
                        _2819 = (_2979 * _2927.z) + _2887;
                        _2814 = (_3060 * _2944.x) + _2882;
                        _2815 = (_3060 * _2944.y) + _2883;
                        _2816 = (_3060 * _2944.z) + _2884;
                        if (_2889 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2882 = _2814;
                            _2883 = _2815;
                            _2884 = _2816;
                            _2885 = _2817;
                            _2886 = _2818;
                            _2887 = _2819;
                            _2888 = _2889;
                        }
                    }
                    frontier_phi_61_pred = _2814;
                    frontier_phi_61_pred_1 = _2819;
                    frontier_phi_61_pred_2 = _2818;
                    frontier_phi_61_pred_3 = _2817;
                    frontier_phi_61_pred_4 = _2816;
                    frontier_phi_61_pred_5 = _2815;
                }
                _2606 = frontier_phi_61_pred;
                _2616 = frontier_phi_61_pred_1;
                _2614 = frontier_phi_61_pred_2;
                _2612 = frontier_phi_61_pred_3;
                _2610 = frontier_phi_61_pred_4;
                _2608 = frontier_phi_61_pred_5;
                uint _2765 = _2764 + 1u;
                if (_2765 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2758 = _2606;
                    _2759 = _2608;
                    _2760 = _2610;
                    _2761 = _2612;
                    _2762 = _2614;
                    _2763 = _2616;
                    _2764 = _2765;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2605 = _2606;
            _2607 = _2608;
            _2609 = _2610;
            _2611 = _2612;
            _2613 = _2614;
            _2615 = _2616;
        }
        uvec4 _2619 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2620 = _2619.z;
        uint _2622 = (_2620 >> 8u) & 15u;
        float _2726;
        float _2728;
        float _2730;
        float _2732;
        float _2734;
        float _2736;
        if (((4294967295u << _2622) & _2459) == 0u)
        {
            _2726 = _2605;
            _2728 = _2607;
            _2730 = _2609;
            _2732 = _2611;
            _2734 = _2613;
            _2736 = _2615;
        }
        else
        {
            float _2751 = inversesqrt(dot(vec3(_2413, _2414, _2415), vec3(_2413, _2414, _2415)));
            float _2752 = _2751 * _2413;
            float _2753 = _2751 * _2414;
            float _2754 = _2751 * _2415;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2622 < ((_2620 >> 12u) & 15u))
            {
                float _2727;
                float _2729;
                float _2731;
                float _2733;
                float _2735;
                float _2737;
                float _2865 = _2605;
                float _2866 = _2607;
                float _2867 = _2609;
                float _2868 = _2611;
                float _2869 = _2613;
                float _2870 = _2615;
                uint _2871 = _2622;
                uint _2880;
                bool _2881;
                for (;;)
                {
                    _2880 = texelFetch(g_lightClassification, int((((_2453 << 5u) + (_2439 << 9u)) + (_2871 << 2u)) >> 2u)).x;
                    _2881 = _2880 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2881)
                    {
                        frontier_phi_67_pred = _2868;
                        frontier_phi_67_pred_1 = _2869;
                        frontier_phi_67_pred_2 = _2870;
                        frontier_phi_67_pred_3 = _2867;
                        frontier_phi_67_pred_4 = _2866;
                        frontier_phi_67_pred_5 = _2865;
                    }
                    else
                    {
                        float _3065;
                        float _3066;
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3070;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3078 = _2865;
                        float _3079 = _2866;
                        float _3080 = _2867;
                        float _3081 = _2868;
                        float _3082 = _2869;
                        float _3083 = _2870;
                        uint _3084 = _2880;
                        uint _3085;
                        vec4 _3110;
                        float _3111;
                        vec4 _3126;
                        vec3 _3138;
                        vec4 _3153;
                        vec4 _3169;
                        float _3216;
                        bool _3217;
                        for (;;)
                        {
                            uint _3095 = ((_2871 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3084));
                            _3085 = (_3084 + 4294967295u) & _3084;
                            uint _3097 = _3095 * 40u;
                            _3110 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 3u)).x));
                            _3111 = _3110.w;
                            uint _3113 = (_3095 * 40u) + 4u;
                            _3126 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3113)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 3u)).x));
                            uint _3128 = (_3095 * 40u) + 8u;
                            _3138 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x));
                            uint _3140 = (_3095 * 40u) + 16u;
                            _3153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 3u)).x));
                            uint _3156 = (_3095 * 40u) + 20u;
                            _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            uint _3172 = (_3095 * 40u) + 24u;
                            vec4 _3185 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 3u)).x));
                            uint _3191 = (_3095 * 40u) + 28u;
                            vec4 _3204 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3191)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 3u)).x));
                            _3216 = fma(_2415, _3204.z, fma(_2414, _3204.y, _3204.x * _2413)) + _3204.w;
                            _3217 = !((fma(_2415, _3185.z, fma(_2414, _3185.y, _3185.x * _2413)) + _3185.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3217)
                            {
                                float _3244 = _3110.x - _2413;
                                float _3245 = _3110.y - _2414;
                                float _3246 = _3110.z - _2415;
                                float _3247 = dot(vec3(_3244, _3245, _3246), vec3(_3244, _3245, _3246));
                                float _3250 = inversesqrt(_3247);
                                float _3251 = _3250 * _3244;
                                float _3252 = _3250 * _3245;
                                float _3253 = _3250 * _3246;
                                float _3257 = 1.0 - (_3247 / (_3111 * _3111));
                                float _4337 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                                float _3258 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                                float _3262 = sqrt(_3247) * _3126.w;
                                float _3264 = 1.39999997615814208984375 / (_3262 + 1.39999997615814208984375);
                                float _3265 = _3264 * _3264;
                                float _3268 = ((1.0 - _3265) * dot(vec3(_3251, _3252, _3253), vec3(_654, _657, _660))) + _3265;
                                float _3271 = _3262 * _3262;
                                float _3275 = (fma(_2415, _3153.z, fma(_2414, _3153.y, _3153.x * _2413)) + _3153.w) / _3216;
                                float _3276 = (fma(_2415, _3169.z, fma(_2414, _3169.y, _3169.x * _2413)) + _3169.w) / _3216;
                                float _3280 = 1.0 - dot(vec2(_3275, _3276), vec2(_3275, _3276));
                                float _4353 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3281 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                                float _3282 = _3281 * (((isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0))) * _3258) / ((_3271 * 0.699999988079071044921875) + 1.0));
                                float _3294 = exp2(log2(1.0 / ((_3271 * 3.5) + 5.0)) * 0.25);
                                float _3295 = 1.0 - _729;
                                float _3302 = sqrt(1.0 - ((1.0 - (_3295 * _3295)) * (1.0 - (_3294 * _3294))));
                                float _3303 = _3302 * _3302;
                                float _3304 = _3303 * _3303;
                                float _3305 = _3251 - _2752;
                                float _3306 = _3252 - _2753;
                                float _3307 = _3253 - _2754;
                                float _3311 = inversesqrt(dot(vec3(_3305, _3306, _3307), vec3(_3305, _3306, _3307)));
                                float _3315 = dot(vec3(_654, _657, _660), vec3((-0.0) - _2752, (-0.0) - _2753, (-0.0) - _2754));
                                float _4364 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                                float _3318 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                                float _3319 = dot(vec3(_654, _657, _660), vec3(_3311 * _3305, _3311 * _3306, _3311 * _3307));
                                float _4375 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                                float _3322 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                                float _3326 = ((_3322 * _3322) * (_3304 + (-1.0))) + 1.0;
                                float _3327 = _3264 * _3303;
                                float _3328 = _3327 * _3327;
                                float _3334 = ((1.0 - _3328) * dot(vec3(_654, _657, _660), vec3(_3251, _3252, _3253))) + _3328;
                                float _4386 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                                float _3335 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                                float _3336 = 1.0 - _3303;
                                float _3346 = (0.5 / (((_3335 * ((_3318 * _3336) + _3303)) + 9.9999999392252902907785028219223e-09) + (((_3335 * _3336) + _3303) * _3318))) * _3335;
                                float _4397 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                                float _3356 = (_3281 * _3258) * (((_3304 * 3.1415927410125732421875) * (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0)))) / ((_3326 * _3326) * ((_3271 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3356 * _3138.x;
                                frontier_phi_73_pred_1 = _3356 * _3138.y;
                                frontier_phi_73_pred_2 = _3282 * _3126.z;
                                frontier_phi_73_pred_3 = _3282 * _3126.y;
                                frontier_phi_73_pred_4 = _3282 * _3126.x;
                                frontier_phi_73_pred_5 = _3356 * _3138.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3360 = frontier_phi_73_pred;
                            _3361 = frontier_phi_73_pred_1;
                            _3365 = frontier_phi_73_pred_2;
                            _3364 = frontier_phi_73_pred_3;
                            _3363 = frontier_phi_73_pred_4;
                            _3362 = frontier_phi_73_pred_5;
                            _3068 = _3363 + _3081;
                            _3069 = _3364 + _3082;
                            _3070 = _3365 + _3083;
                            _3065 = _3360 + _3078;
                            _3066 = _3361 + _3079;
                            _3067 = _3362 + _3080;
                            if (_3085 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3078 = _3065;
                                _3079 = _3066;
                                _3080 = _3067;
                                _3081 = _3068;
                                _3082 = _3069;
                                _3083 = _3070;
                                _3084 = _3085;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3068;
                        frontier_phi_67_pred_1 = _3069;
                        frontier_phi_67_pred_2 = _3070;
                        frontier_phi_67_pred_3 = _3067;
                        frontier_phi_67_pred_4 = _3066;
                        frontier_phi_67_pred_5 = _3065;
                    }
                    _2733 = frontier_phi_67_pred;
                    _2735 = frontier_phi_67_pred_1;
                    _2737 = frontier_phi_67_pred_2;
                    _2731 = frontier_phi_67_pred_3;
                    _2729 = frontier_phi_67_pred_4;
                    _2727 = frontier_phi_67_pred_5;
                    uint _2872 = _2871 + 1u;
                    if (_2872 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2865 = _2727;
                        _2866 = _2729;
                        _2867 = _2731;
                        _2868 = _2733;
                        _2869 = _2735;
                        _2870 = _2737;
                        _2871 = _2872;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2735;
                frontier_phi_55_56_ladder_1 = _2737;
                frontier_phi_55_56_ladder_2 = _2733;
                frontier_phi_55_56_ladder_3 = _2731;
                frontier_phi_55_56_ladder_4 = _2729;
                frontier_phi_55_56_ladder_5 = _2727;
            }
            else
            {
                frontier_phi_55_56_ladder = _2613;
                frontier_phi_55_56_ladder_1 = _2615;
                frontier_phi_55_56_ladder_2 = _2611;
                frontier_phi_55_56_ladder_3 = _2609;
                frontier_phi_55_56_ladder_4 = _2607;
                frontier_phi_55_56_ladder_5 = _2605;
            }
            _2726 = frontier_phi_55_56_ladder_5;
            _2728 = frontier_phi_55_56_ladder_4;
            _2730 = frontier_phi_55_56_ladder_3;
            _2732 = frontier_phi_55_56_ladder_2;
            _2734 = frontier_phi_55_56_ladder;
            _2736 = frontier_phi_55_56_ladder_1;
        }
        float _2741 = isnan(1.0) ? _713 : (isnan(_713) ? 1.0 : min(_713, 1.0));
        _2472 = (_2741 * _2732) + _1905;
        _2474 = (_2741 * _2734) + _1907;
        _2476 = (_2741 * _2736) + _1909;
        _2478 = ((_2726 * _698) * _2741) + _2253;
        _2480 = ((_2728 * _700) * _2741) + _2255;
        _2482 = ((_2730 * _701) * _2741) + _2257;
    }
    else
    {
        _2472 = _1905;
        _2474 = _1907;
        _2476 = _1909;
        _2478 = _2253;
        _2480 = _2255;
        _2482 = _2257;
    }
    uint _2488 = _674 + uint(cbMatDynParam._m0[0u].w);
    float _2494 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].y;
    float _2500 = (((((_2494 * cbMtdParam._m0[10u].x) * _427.x) * _450) * _525) * (((1.0 - _504) * cbMtdParam._m0[16u].y) + _504)) * cbInstanceData._m0[_2488].x;
    float _2506 = (((((_2494 * cbMtdParam._m0[10u].y) * _427.y) * _450) * _525) * (((1.0 - _506) * cbMtdParam._m0[16u].y) + _506)) * cbInstanceData._m0[_2488].y;
    float _2512 = (((((_2494 * cbMtdParam._m0[10u].z) * _427.z) * _450) * _525) * (((1.0 - _508) * cbMtdParam._m0[16u].y) + _508)) * cbInstanceData._m0[_2488].z;
    float _4413 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _4424 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _4435 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _2529 = (((isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_2472 + ((isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))) * _713))) + ((_2478 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _1522)) * cbPerFrame._m0[3u].x)) + _2500;
    float _2531 = (_2506 + ((_2480 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _1522)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_2474 + ((isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0))) * _713)));
    float _2533 = (_2512 + ((_2482 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _1522)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_2476 + ((isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))) * _713)));
    float _4461 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2546 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
    uint _2547 = _673 + 6u;
    float _2555 = _635 / cbSceneParam._m0[86u].x;
    float _2556 = _636 / cbSceneParam._m0[86u].y;
    vec4 _2570 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2555, _2556, (log2((isnan(cbSceneParam._m0[77u].w) ? _569 : (isnan(_569) ? cbSceneParam._m0[77u].w : min(_569, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2572 = _2570.x;
    float _2573 = _2570.y;
    float _2574 = _2570.z;
    float _2575 = _2570.w;
    float _2667;
    float _2669;
    float _2671;
    float _2673;
    if (_569 > cbSceneParam._m0[78u].w)
    {
        float _2630 = isnan(_569) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _569 : min(cbSceneParam._m0[80u].w, _569));
        float _2631 = _2630 / _569;
        float _2642 = _2631 * _620;
        float _2643 = _621 * _2631;
        float _2644 = (-0.0) - _2643;
        float _2645 = _2631 * _622;
        float _2647 = (cbSceneParam._m0[77u].w * _2644) / _2630;
        float _2648 = _2647 + cbSceneParam._m0[79u].w;
        float _2649 = cbSceneParam._m0[79u].w - _2643;
        float _2655 = sqrt(((_2642 * _2642) + (_2643 * _2643)) + (_2645 * _2645));
        float _2658 = (1.0 - (cbSceneParam._m0[77u].w / _2630)) * _2655;
        float _2663 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2665 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2827;
        if (abs((_2644 - _2647) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2827 = ((((_2648 > 0.0) ? exp2(_2663 * _2648) : (2.0 - exp2(_2665 * _2648))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2658;
        }
        else
        {
            float _2787 = 1.0 / cbSceneParam._m0[80u].x;
            float _2788 = isnan(_2649) ? _2648 : (isnan(_2648) ? _2649 : max(_2648, _2649));
            float _2789 = isnan(_2649) ? _2648 : (isnan(_2648) ? _2649 : min(_2648, _2649));
            float _2798 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : min(_2788, 0.0));
            float _2799 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : min(_2789, 0.0));
            _2827 = ((abs(_2655 / _2644) * cbSceneParam._m0[80u].y) * ((((_2798 - _2799) * 2.0) - ((exp2(_2663 * (isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0)))) - exp2(_2663 * (isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0))))) * _2787)) - ((exp2(_2665 * _2798) - exp2(_2665 * _2799)) * _2787))) + (_2658 * cbSceneParam._m0[80u].z);
        }
        vec4 _2829 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2555, _2556, 1.0), 0.0);
        float _2838 = exp2((_2827 * (-1.44269502162933349609375)) * (1.0 - _2829.w));
        float _2839 = log2(_2838);
        float _2855 = log2(_2575);
        _2667 = (exp2(_2855 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2839 * cbSceneParam._m0[78u].x)) * _2829.x) / cbSceneParam._m0[78u].x)) + _2572;
        _2669 = (exp2(_2855 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2839 * cbSceneParam._m0[78u].y)) * _2829.y) / cbSceneParam._m0[78u].y)) + _2573;
        _2671 = (exp2(_2855 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2839 * cbSceneParam._m0[78u].z)) * _2829.z) / cbSceneParam._m0[78u].z)) + _2574;
        _2673 = _2838 * _2575;
    }
    else
    {
        _2667 = _2572;
        _2669 = _2573;
        _2671 = _2574;
        _2673 = _2575;
    }
    float _2685 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2686 = _2685 == 3.0;
    float _2687 = log2(_2673);
    float _2691 = exp2(_2687 * cbSceneParam._m0[78u].x);
    float _2692 = exp2(_2687 * cbSceneParam._m0[78u].y);
    float _2693 = exp2(_2687 * cbSceneParam._m0[78u].z);
    float _2694 = _2691 * (isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0)));
    float _2695 = _2692 * (isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0)));
    float _2696 = _2693 * (isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0)));
    float _2705 = (_2685 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2705 * (_2686 ? _2694 : (_2694 + (cbSceneParam._m0[72u].w * _2667)));
    SV_Target.y = _2705 * (_2686 ? _2695 : (_2695 + (cbSceneParam._m0[72u].w * _2669)));
    SV_Target.z = _2705 * (_2686 ? _2696 : (_2696 + (cbSceneParam._m0[72u].w * _2671)));
    SV_Target.w = cbInstanceData._m0[_2547].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2500) * _2546) * _2691) * _2705;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2506) * _2546) * _2692) * _2705;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2512) * _2546) * _2693) * _2705;
    SV_Target_1.w = cbInstanceData._m0[_2547].w;
}


