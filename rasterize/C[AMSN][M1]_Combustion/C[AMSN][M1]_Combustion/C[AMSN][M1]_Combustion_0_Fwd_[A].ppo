#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_21;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1129;
float _3566;
float _3567;
float _3568;
float _3569;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _249 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _255 = _249.x * cbMtdParam._m0[9u].x;
    float _256 = _249.y * cbMtdParam._m0[9u].y;
    float _257 = _249.z * cbMtdParam._m0[9u].z;
    vec4 _280 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _300 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _303 = _300.x + 0.00999999977648258209228515625;
    float _311 = (TEXCOORD_8 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_8)) * _303)) * (cbMtdParam._m0[15u].z + 1.0);
    float _3578 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _312 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    float _319 = (_312 * ((_280.x * cbMtdParam._m0[12u].x) - _255)) + _255;
    float _320 = (_312 * ((_280.y * cbMtdParam._m0[12u].y) - _256)) + _256;
    float _321 = (_312 * ((_280.z * cbMtdParam._m0[12u].z) - _257)) + _257;
    vec4 _334 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _336 = _334.x;
    float _338 = _336 - (_336 * TEXCOORD_8);
    vec4 _350 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    vec4 _373 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _377 = _373.z;
    float _380 = (_373.x * 2.0) + (-1.0);
    float _381 = (_373.y * 2.0) + (-1.0);
    float _382 = dot(vec2(_380, _381), vec2(_380, _381));
    float _3589 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _387 = sqrt(1.0 - (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))));
    float _395 = (((_350.z - _377) * TEXCOORD_8) * cbMtdParam._m0[16u].x) + _377;
    vec4 _429 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _443 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3600 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _444 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
    float _452 = (((_444 * _444) * (3.0 - (_444 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _461 = cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x;
    float _469 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3611 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _470 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
    float _474 = (_470 * _470) * (3.0 - (_470 * 2.0));
    float _475 = _474 * cbMtdParam._m0[16u].w;
    float _476 = _474 * cbMtdParam._m0[17u].x;
    float _477 = sin(_461);
    float _478 = cos(_461);
    float _479 = TEXCOORD.z - _475;
    float _480 = TEXCOORD.w - _476;
    vec4 _500 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_475 + fma(_480, (-0.0) - _477, _479 * _478))) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (fma(_480, _478, _479 * _477) + _476)) + cbTextureTilingScale._m0[0u].w));
    float _506 = (cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].w) * _500.x;
    float _508 = (cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].w) * _500.y;
    float _510 = (cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].w) * _500.z;
    float _526 = (TEXCOORD_5.x - ((_303 * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[16u].z)) * (cbMtdParam._m0[13u].x + 1.0);
    float _3622 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _527 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
    float _533 = ((((_350.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[15u].x) + _380;
    float _534 = ((((_350.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[15u].x) + _381;
    float _537 = fma(_387, _220 * NORMAL.x, fma(_534, _227 * TANGENT.x, (_213 * _205) * _533));
    float _540 = fma(_387, _220 * NORMAL.y, fma(_534, _227 * TANGENT.y, (_213 * _206) * _533));
    float _543 = fma(_387, _220 * NORMAL.z, fma(_534, _227 * TANGENT.z, (_213 * _207) * _533));
    float _547 = inversesqrt(dot(vec3(_537, _540, _543), vec3(_537, _540, _543)));
    float _548 = _547 * _537;
    float _549 = _547 * _540;
    float _550 = _547 * _543;
    float _3633 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _551 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    float _3644 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3655 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3666 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _3677 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _555 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    float _571 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _612 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _622 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _612);
    float _623 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _612);
    float _624 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _612);
    float _628 = inversesqrt(dot(vec3(_622, _623, _624), vec3(_622, _623, _624)));
    float _629 = _622 * _628;
    float _630 = _623 * _628;
    float _631 = _624 * _628;
    vec4 _636 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _638 = _636.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _809 = sqrt(((_622 * _622) + (_623 * _623)) + (_624 * _624));
        float _815 = (cbMatDynParam._m0[5u].x * _809) + cbMatDynParam._m0[5u].y;
        float _3688 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _816 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _820 = (cbMatDynParam._m0[5u].z * _809) + cbMatDynParam._m0[5u].w;
        float _3699 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) - _816)) + _816) < ((_638 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _649 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _650 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _668 = fma(_550, cbSceneParam._m0[5u].z, fma(_549, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _548));
    float _671 = fma(_550, cbSceneParam._m0[6u].z, fma(_549, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _548));
    float _674 = fma(_550, cbSceneParam._m0[7u].z, fma(_549, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _548));
    uint _687 = uint(roundEven(NORMAL.w)) * 13u;
    uint _688 = _687 + 9u;
    uint _689 = _688 + uint(cbMatDynParam._m0[0u].w);
    float _695 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0)))) * cbInstanceData._m0[_689].x;
    float _696 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0)))) * cbInstanceData._m0[_689].y;
    float _697 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0)))) * cbInstanceData._m0[_689].z;
    float _3710 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _698 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _3721 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _699 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    float _3732 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _700 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    float _701 = 1.0 - _555;
    float _702 = _698 * _701;
    float _703 = _699 * _701;
    float _704 = _700 * _701;
    float _709 = (_698 + (-0.039999999105930328369140625)) * _555;
    float _710 = (_699 + (-0.039999999105930328369140625)) * _555;
    float _711 = (_700 + (-0.039999999105930328369140625)) * _555;
    float _712 = _709 + 0.039999999105930328369140625;
    float _714 = _710 + 0.039999999105930328369140625;
    float _715 = _711 + 0.039999999105930328369140625;
    vec4 _724 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _649, cbSceneParam._m0[86u].y * _650));
    float _727 = _724.x * TEXCOORD_5.w;
    float _728 = dot(vec3(_548, _549, _550), vec3(_629, _630, _631));
    float _731 = _728 * 2.0;
    float _735 = (_731 * _548) - _629;
    float _736 = (_731 * _549) - _630;
    float _737 = (_731 * _550) - _631;
    float _741 = abs(dot(vec3(_629, _630, _631), vec3(_548, _549, _550)));
    float _3743 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _743 = sqrt(_551);
    float _755 = exp2((_743 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_743 * 3.0));
    float _761 = (1.0 - _755) * ((_743 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _762 = _755 * _743;
    float _790 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _794 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _798 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1128;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _853 = fma(_798, cbModelParam._m0[26u].z, fma(_794, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _790));
        float _857 = fma(_798, cbModelParam._m0[27u].z, fma(_794, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _790));
        float _861 = fma(_798, cbModelParam._m0[28u].z, fma(_794, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _790));
        float _886 = _790 + _548;
        float _887 = _794 + _549;
        float _888 = _798 + _550;
        float _898 = fma(_888, cbModelParam._m0[26u].z, fma(_887, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _886)) - _853;
        float _899 = fma(_888, cbModelParam._m0[27u].z, fma(_887, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _886)) - _857;
        float _900 = fma(_888, cbModelParam._m0[28u].z, fma(_887, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _886)) - _861;
        float _904 = inversesqrt(dot(vec3(_898, _899, _900), vec3(_898, _899, _900)));
        float _917 = ((_904 * _898) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_853 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _918 = ((_904 * _899) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_857 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _919 = ((_904 * _900) / cbModelParam._m0[34u].z) + ((((((_861 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        float _956 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_922.x + (-0.5));
        float _958 = _956 * (_922.y + (-0.5));
        float _959 = _956 * (_922.z + (-0.5));
        float _966 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_929.x + (-0.5));
        float _968 = _966 * (_929.y + (-0.5));
        float _969 = _966 * (_929.z + (-0.5));
        float _976 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _977 = _976 * (_936.x + (-0.5));
        float _978 = _976 * (_936.y + (-0.5));
        float _979 = _976 * (_936.z + (-0.5));
        float _986 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_943.x + (-0.5));
        float _988 = _986 * (_943.y + (-0.5));
        float _989 = _986 * (_943.z + (-0.5));
        float _990 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _991 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _992 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _993 = _957 * 0.5;
        float _994 = _967 * 0.5;
        float _995 = _977 * 0.5;
        float _996 = dot(vec3(_993, _994, _995), vec3(_993, _994, _995));
        float _1001 = (_996 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_996);
        float _1010 = (dot(vec3(_548, _549, _550), vec3(_1001 * _993, _1001 * _994, _1001 * _995)) + 1.0) * 0.5;
        float _3769 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1020 = sqrt(((_994 * _994) + (_993 * _993)) + (_995 * _995)) / (_990 + 9.9999997473787516355514526367188e-06);
        float _3780 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3791 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_1022 + 1.0))) + _1027) * _990;
        float _1037 = _958 * 0.5;
        float _1038 = _968 * 0.5;
        float _1039 = _978 * 0.5;
        float _1040 = dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039));
        float _1045 = (_1040 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1040);
        float _1053 = (dot(vec3(_548, _549, _550), vec3(_1045 * _1037, _1045 * _1038, _1045 * _1039)) + 1.0) * 0.5;
        float _3802 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1062 = sqrt(((_1038 * _1038) + (_1037 * _1037)) + (_1039 * _1039)) / (_991 + 9.9999997473787516355514526367188e-06);
        float _3813 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3824 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * (_1064 + 1.0))) + _1069) * _991;
        float _1079 = _959 * 0.5;
        float _1080 = _969 * 0.5;
        float _1081 = _979 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_548, _549, _550), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3835 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_992 + 9.9999997473787516355514526367188e-06);
        float _3846 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3857 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * (_1106 + 1.0))) + _1111) * _992;
        _1128 = _959;
        _1130 = _958;
        _1131 = _957;
        _1132 = _969;
        _1133 = _968;
        _1134 = _967;
        _1135 = _979;
        _1136 = _978;
        _1137 = _977;
        _1138 = _992;
        _1139 = _991;
        _1140 = _990;
        _1141 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
        _1142 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
        _1143 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
    }
    else
    {
        _1128 = _1129;
        _1130 = _1129;
        _1131 = _1129;
        _1132 = _1129;
        _1133 = _1129;
        _1134 = _1129;
        _1135 = _1129;
        _1136 = _1129;
        _1137 = _1129;
        _1138 = _1129;
        _1139 = _1129;
        _1140 = _1129;
        _1141 = 0.0;
        _1142 = 0.0;
        _1143 = 0.0;
    }
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1172 = fma(_798, cbModelParam._m0[30u].z, fma(_794, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _790));
        float _1176 = fma(_798, cbModelParam._m0[31u].z, fma(_794, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _790));
        float _1180 = fma(_798, cbModelParam._m0[32u].z, fma(_794, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _790));
        float _1203 = _790 + _548;
        float _1204 = _794 + _549;
        float _1205 = _798 + _550;
        float _1215 = fma(_1205, cbModelParam._m0[30u].z, fma(_1204, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1203)) - _1172;
        float _1216 = fma(_1205, cbModelParam._m0[31u].z, fma(_1204, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1203)) - _1176;
        float _1217 = fma(_1205, cbModelParam._m0[32u].z, fma(_1204, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1203)) - _1180;
        float _1221 = inversesqrt(dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217)));
        float _1234 = ((_1221 * _1215) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1172 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1235 = ((_1221 * _1216) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1176 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1236 = ((_1221 * _1217) / cbModelParam._m0[35u].z) + ((((((_1180 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1234, _1235, _1236), 0.0);
        float _1271 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1238.x + (-0.5));
        float _1273 = _1271 * (_1238.y + (-0.5));
        float _1274 = _1271 * (_1238.z + (-0.5));
        float _1281 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1245.x + (-0.5));
        float _1283 = _1281 * (_1245.y + (-0.5));
        float _1284 = _1281 * (_1245.z + (-0.5));
        float _1291 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1252.x + (-0.5));
        float _1293 = _1291 * (_1252.y + (-0.5));
        float _1294 = _1291 * (_1252.z + (-0.5));
        float _1301 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1259.x + (-0.5));
        float _1303 = _1301 * (_1259.y + (-0.5));
        float _1304 = _1301 * (_1259.z + (-0.5));
        float _1305 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1306 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1307 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1308 = _1272 * 0.5;
        float _1309 = _1282 * 0.5;
        float _1310 = _1292 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1324 = (dot(vec3(_548, _549, _550), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _3898 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1333 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1305 + 9.9999997473787516355514526367188e-06);
        float _3909 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _3920 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1335 + 1.0))) + _1340) * _1305;
        float _1350 = _1273 * 0.5;
        float _1351 = _1283 * 0.5;
        float _1352 = _1293 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_548, _549, _550), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _3931 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1306 + 9.9999997473787516355514526367188e-06);
        float _3942 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _3953 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_1377 + 1.0))) + _1382) * _1306;
        float _1392 = _1274 * 0.5;
        float _1393 = _1284 * 0.5;
        float _1394 = _1294 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_548, _549, _550), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _3964 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1307 + 9.9999997473787516355514526367188e-06);
        float _3975 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _3986 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1419 + 1.0))) + _1424) * _1307;
        _1441 = _1274;
        _1442 = _1273;
        _1443 = _1272;
        _1444 = _1284;
        _1445 = _1283;
        _1446 = _1282;
        _1447 = _1294;
        _1448 = _1293;
        _1449 = _1292;
        _1450 = _1307;
        _1451 = _1306;
        _1452 = _1305;
        _1453 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
        _1454 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
        _1455 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
    }
    else
    {
        _1441 = _1129;
        _1442 = _1129;
        _1443 = _1129;
        _1444 = _1129;
        _1445 = _1129;
        _1446 = _1129;
        _1447 = _1129;
        _1448 = _1129;
        _1449 = _1129;
        _1450 = _1129;
        _1451 = _1129;
        _1452 = _1129;
        _1453 = 0.0;
        _1454 = 0.0;
        _1455 = 0.0;
    }
    float _1465 = (cbModelParam._m0[1u].x * (_1453 - _1141)) + _1141;
    float _1466 = (cbModelParam._m0[1u].x * (_1454 - _1142)) + _1142;
    float _1467 = (cbModelParam._m0[1u].x * (_1455 - _1143)) + _1143;
    float _1488 = fma(_1467, cbSceneParam._m0[89u].z, fma(_1466, cbSceneParam._m0[89u].y, _1465 * cbSceneParam._m0[89u].x));
    float _1491 = fma(_1467, cbSceneParam._m0[90u].z, fma(_1466, cbSceneParam._m0[90u].y, _1465 * cbSceneParam._m0[90u].x));
    float _1494 = fma(_1467, cbSceneParam._m0[91u].z, fma(_1466, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1465));
    float _1509 = _735 * 0.5;
    float _1510 = _736 * 0.5;
    float _1511 = _737 * 0.5;
    float _1512 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1443, _1446, _1449, _1452));
    float _1515 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1442, _1445, _1448, _1451));
    float _1518 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1441, _1444, _1447, _1450));
    float _1552;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1525 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1128, _1132, _1135, _1138));
        float _1529 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1130, _1133, _1136, _1139));
        float _1533 = dot(vec4(_1509, _1510, _1511, 1.0), vec4(_1131, _1134, _1137, _1140));
        float _1540 = dot(vec4(cbModelParam._m0[39u]), vec4(_1509, _1510, _1511, 1.0));
        _1552 = dot(vec3(isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)), isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)), isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1540) ? 0.0 : (isnan(0.0) ? _1540 : max(0.0, _1540))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1552 = 1.0;
    }
    float _1563;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1554 = dot(vec4(cbModelParam._m0[40u]), vec4(_1509, _1510, _1511, 1.0));
        _1563 = dot(vec3(isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)), isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)), isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1554) ? 0.0 : (isnan(0.0) ? _1554 : max(0.0, _1554))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1563 = 1.0;
    }
    float _1567 = (_1563 * cbModelParam._m0[1u].x) + (_1552 * (1.0 - cbModelParam._m0[1u].x));
    float _1577 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _551);
    float _1578 = isnan(_1577) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1577 : min(cbModelParam._m0[25u].z, _1577));
    float _1658;
    float _1660;
    float _1662;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1625 = fma(_798, cbModelParam._m0[13u].z, fma(_794, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _790)) + cbModelParam._m0[13u].w;
        float _1629 = fma(_798, cbModelParam._m0[14u].z, fma(_794, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _790)) + cbModelParam._m0[14u].w;
        float _1633 = fma(_798, cbModelParam._m0[15u].z, fma(_794, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _790)) + cbModelParam._m0[15u].w;
        float _1636 = fma(_737, cbModelParam._m0[13u].z, fma(_736, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _735));
        float _1639 = fma(_737, cbModelParam._m0[14u].z, fma(_736, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _735));
        float _1642 = fma(_737, cbModelParam._m0[15u].z, fma(_736, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _735));
        float _1670;
        if (_1636 > 0.0)
        {
            _1670 = abs((1.0 - _1625) / _1636);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1625 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1670 = frontier_phi_17_15_ladder;
        }
        float _1874;
        if (_1639 > 0.0)
        {
            _1874 = abs((1.0 - _1629) / _1639);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1629 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1874 = frontier_phi_26_22_ladder;
        }
        float _2128;
        if (_1642 > 0.0)
        {
            _2128 = abs((1.0 - _1633) / _1642);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1633 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2128 = frontier_phi_38_33_ladder;
        }
        float _2130 = isnan(_1874) ? _1670 : (isnan(_1670) ? _1874 : min(_1670, _1874));
        float _2131 = isnan(_2128) ? _2130 : (isnan(_2130) ? _2128 : min(_2130, _2128));
        float _2135 = (_2131 * _1636) + _1625;
        float _2136 = (_2131 * _1639) + _1629;
        float _2137 = (_2131 * _1642) + _1633;
        float _2138 = _2131 * 9.9999997473787516355514526367188e-05;
        float _2140 = (-1.0) - _2138;
        float _2142 = _2138 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2137 > _2142) || ((_2137 < _2140) || ((_2136 > _2142) || ((_2136 < _2140) || ((_2135 < _2140) || (_2135 > _2142))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2265 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2137, cbModelParam._m0[9u].z, fma(_2136, cbModelParam._m0[9u].y, _2135 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2137, cbModelParam._m0[10u].z, fma(_2136, cbModelParam._m0[10u].y, _2135 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2137, cbModelParam._m0[11u].z, fma(_2136, cbModelParam._m0[11u].y, _2135 * cbModelParam._m0[11u].x))), _1578);
            frontier_phi_16_38_ladder = _2265.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2265.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2265.x * cbModelParam._m0[1u].y;
        }
        _1658 = frontier_phi_16_38_ladder_2;
        _1660 = frontier_phi_16_38_ladder_1;
        _1662 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1646 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_735, _736, _737), _1578);
        _1658 = _1646.x * cbModelParam._m0[1u].y;
        _1660 = _1646.y * cbModelParam._m0[1u].y;
        _1662 = _1646.z * cbModelParam._m0[1u].y;
    }
    float _1666 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _551);
    float _1667 = isnan(_1666) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1666 : min(cbModelParam._m0[25u].w, _1666));
    float _1758;
    float _1760;
    float _1762;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1722 = fma(_798, cbModelParam._m0[21u].z, fma(_794, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _790)) + cbModelParam._m0[21u].w;
        float _1726 = fma(_798, cbModelParam._m0[22u].z, fma(_794, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _790)) + cbModelParam._m0[22u].w;
        float _1730 = fma(_798, cbModelParam._m0[23u].z, fma(_794, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _790)) + cbModelParam._m0[23u].w;
        float _1733 = fma(_737, cbModelParam._m0[21u].z, fma(_736, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _735));
        float _1736 = fma(_737, cbModelParam._m0[22u].z, fma(_736, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _735));
        float _1739 = fma(_737, cbModelParam._m0[23u].z, fma(_736, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _735));
        float _1879;
        if (_1733 > 0.0)
        {
            _1879 = abs((1.0 - _1722) / _1733);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1722 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1879 = frontier_phi_28_24_ladder;
        }
        float _2155;
        if (_1736 > 0.0)
        {
            _2155 = abs((1.0 - _1726) / _1736);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1726 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2155 = frontier_phi_40_35_ladder;
        }
        float _2368;
        if (_1739 > 0.0)
        {
            _2368 = abs((1.0 - _1730) / _1739);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1730 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2368 = frontier_phi_49_46_ladder;
        }
        float _2370 = isnan(_2155) ? _1879 : (isnan(_1879) ? _2155 : min(_1879, _2155));
        float _2371 = isnan(_2368) ? _2370 : (isnan(_2370) ? _2368 : min(_2370, _2368));
        float _2375 = (_2371 * _1733) + _1722;
        float _2376 = (_2371 * _1736) + _1726;
        float _2377 = (_2371 * _1739) + _1730;
        float _2378 = _2371 * 9.9999997473787516355514526367188e-05;
        float _2379 = (-1.0) - _2378;
        float _2381 = _2378 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2377 > _2381) || ((_2377 < _2379) || ((_2376 > _2381) || ((_2376 < _2379) || ((_2375 < _2379) || (_2375 > _2381))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2621 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2377, cbModelParam._m0[17u].z, fma(_2376, cbModelParam._m0[17u].y, _2375 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2377, cbModelParam._m0[18u].z, fma(_2376, cbModelParam._m0[18u].y, _2375 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2377, cbModelParam._m0[19u].z, fma(_2376, cbModelParam._m0[19u].y, _2375 * cbModelParam._m0[19u].x))), _1667);
            frontier_phi_25_49_ladder = _2621.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2621.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2621.x * cbModelParam._m0[1u].z;
        }
        _1758 = frontier_phi_25_49_ladder_2;
        _1760 = frontier_phi_25_49_ladder_1;
        _1762 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1742 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_735, _736, _737), _1667);
        _1758 = _1742.x * cbModelParam._m0[1u].z;
        _1760 = _1742.y * cbModelParam._m0[1u].z;
        _1762 = _1742.z * cbModelParam._m0[1u].z;
    }
    float _1775 = (((_761 * _712) + _762) * _727) * ((cbModelParam._m0[1u].w * (_1758 - _1658)) + _1658);
    float _1777 = (((_761 * _714) + _762) * _727) * ((cbModelParam._m0[1u].w * (_1760 - _1660)) + _1660);
    float _1779 = (((_761 * _715) + _762) * _727) * ((cbModelParam._m0[1u].w * (_1762 - _1662)) + _1662);
    float _1782 = fma(_1779, cbSceneParam._m0[89u].z, fma(_1777, cbSceneParam._m0[89u].y, _1775 * cbSceneParam._m0[89u].x));
    float _1785 = fma(_1779, cbSceneParam._m0[90u].z, fma(_1777, cbSceneParam._m0[90u].y, _1775 * cbSceneParam._m0[90u].x));
    float _1788 = fma(_1779, cbSceneParam._m0[91u].z, fma(_1777, cbSceneParam._m0[91u].y, _1775 * cbSceneParam._m0[91u].x));
    uvec4 _1798 = floatBitsToUint(cbInstanceData._m0[_687 + 5u]);
    uint _1800 = _1798.x * 14u;
    uint _1801 = _1800 + 13u;
    float _1808 = _727 + (-1.0);
    float _1813 = (cbLight._m0[_1801].x * _1808) + 1.0;
    float _1814 = (cbLight._m0[_1801].y * _1808) + 1.0;
    float _1815 = (cbLight._m0[_1801].z * _1808) + 1.0;
    float _1816 = (cbLight._m0[_1801].w * _1808) + 1.0;
    uint _1817 = _1800 + 5u;
    float _1823 = isnan(1.0) ? _1814 : (isnan(_1814) ? 1.0 : min(_1814, 1.0));
    uint _1827 = _1800 + 4u;
    float _1833 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
    uint _1837 = _1800 | 1u;
    float _1848 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_548, _549, _550));
    float _1851 = dot(vec3(cbLight._m0[_1837].xyz), vec3(_548, _549, _550));
    float _4122 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _4133 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1856 = (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * 0.3183098733425140380859375;
    float _1858 = (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * 0.3183098733425140380859375;
    float _1865 = ((cbLight._m0[_1817].x * _1823) * _1858) + ((cbLight._m0[_1827].x * _1833) * _1856);
    float _1866 = ((_1823 * cbLight._m0[_1817].y) * _1858) + ((_1833 * cbLight._m0[_1827].y) * _1856);
    float _1867 = ((_1823 * cbLight._m0[_1817].z) * _1858) + ((_1833 * cbLight._m0[_1827].z) * _1856);
    uvec4 _1871 = floatBitsToUint(cbLight._m0[_1800 + 12u]);
    bool _1873 = _1871.x == 0u;
    float _1884;
    float _1886;
    float _1888;
    if (_1873)
    {
        _1884 = _1865;
        _1886 = _1866;
        _1888 = _1867;
    }
    else
    {
        uint _1892 = _1800 + 6u;
        float _1908 = (dot(vec3(cbLight._m0[_1800 + 2u].xyz), vec3(_548, _549, _550)) * 0.5) + 0.5;
        float _1909 = _1908 * _1908;
        float _4144 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
        float _1910 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1911 = isnan(1.0) ? _1815 : (isnan(_1815) ? 1.0 : min(_1815, 1.0));
        _1884 = (((cbLight._m0[_1892].x * 0.3183098733425140380859375) * _1910) * _1911) + _1865;
        _1886 = (((cbLight._m0[_1892].y * 0.3183098733425140380859375) * _1910) * _1911) + _1866;
        _1888 = (((cbLight._m0[_1892].z * 0.3183098733425140380859375) * _1910) * _1911) + _1867;
    }
    bool _1891 = _1871.y == 0u;
    float _1929;
    float _1931;
    float _1933;
    if (_1891)
    {
        _1929 = _1884;
        _1931 = _1886;
        _1933 = _1888;
    }
    else
    {
        uint _2099 = _1800 + 7u;
        float _2115 = (dot(vec3(cbLight._m0[_1800 + 3u].xyz), vec3(_548, _549, _550)) * 0.5) + 0.5;
        float _2116 = _2115 * _2115;
        float _4160 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2117 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _2118 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
        _1929 = (((cbLight._m0[_2099].x * 0.3183098733425140380859375) * _2117) * _2118) + _1884;
        _1931 = (((cbLight._m0[_2099].y * 0.3183098733425140380859375) * _2117) * _2118) + _1886;
        _1933 = (((cbLight._m0[_2099].z * 0.3183098733425140380859375) * _2117) * _2118) + _1888;
    }
    uint _1936 = _1800 + 8u;
    float _1949 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1800].w)) * _551) * 0.949999988079071044921875);
    float _1950 = _1949 * _1949;
    float _1951 = cbLight._m0[_1800].x + _629;
    float _1952 = cbLight._m0[_1800].y + _630;
    float _1953 = cbLight._m0[_1800].z + _631;
    float _1957 = inversesqrt(dot(vec3(_1951, _1952, _1953), vec3(_1951, _1952, _1953)));
    float _1958 = _1957 * _1951;
    float _1959 = _1957 * _1952;
    float _1960 = _1957 * _1953;
    float _1961 = dot(vec3(_548, _549, _550), vec3(cbLight._m0[_1800].xyz));
    float _4176 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1964 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _4187 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _1965 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _1966 = dot(vec3(_548, _549, _550), vec3(_1958, _1959, _1960));
    float _4198 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1969 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _1970 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_1958, _1959, _1960));
    float _4209 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1974 = _1950 * _1950;
    float _1978 = ((_1969 * _1969) * (_1974 + (-1.0))) + 1.0;
    float _1986 = exp2(log2(1.0 - (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0)))) * 5.0);
    float _1987 = 0.959999978542327880859375 - _709;
    float _1989 = 0.959999978542327880859375 - _710;
    float _1990 = 0.959999978542327880859375 - _711;
    float _1997 = 1.0 - _1950;
    float _2008 = (0.5 / (((_1965 * ((_1964 * _1997) + _1950)) + 9.9999999392252902907785028219223e-09) + (((_1965 * _1997) + _1950) * _1964))) * _1964;
    float _4220 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2010 = (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_1974 / ((_1978 * _1978) * 3.141590118408203125));
    uint _2021 = _1800 + 9u;
    float _2032 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1837].w)) * _551) * 0.949999988079071044921875);
    float _2033 = _2032 * _2032;
    float _2034 = cbLight._m0[_1837].x + _629;
    float _2035 = cbLight._m0[_1837].y + _630;
    float _2036 = cbLight._m0[_1837].z + _631;
    float _2040 = inversesqrt(dot(vec3(_2034, _2035, _2036), vec3(_2034, _2035, _2036)));
    float _2041 = _2040 * _2034;
    float _2042 = _2040 * _2035;
    float _2043 = _2040 * _2036;
    float _2044 = dot(vec3(_548, _549, _550), vec3(cbLight._m0[_1837].xyz));
    float _4231 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2047 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _2048 = dot(vec3(_548, _549, _550), vec3(_2041, _2042, _2043));
    float _4242 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2051 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    float _2052 = dot(vec3(cbLight._m0[_1837].xyz), vec3(_2041, _2042, _2043));
    float _4253 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2056 = _2033 * _2033;
    float _2060 = ((_2051 * _2051) * (_2056 + (-1.0))) + 1.0;
    float _2067 = exp2(log2(1.0 - (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0)))) * 5.0);
    float _2074 = 1.0 - _2033;
    float _2084 = (0.5 / (((_1965 * ((_2047 * _2074) + _2033)) + 9.9999999392252902907785028219223e-09) + (((_1965 * _2074) + _2033) * _2047))) * _2047;
    float _4264 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2086 = (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_2056 / ((_2060 * _2060) * 3.141590118408203125));
    float _2096 = (((((_2067 * _1987) + _712) * cbLight._m0[_2021].x) * _2086) * _1823) + (((((_1986 * _1987) + _712) * cbLight._m0[_1936].x) * _2010) * _1833);
    float _2097 = (((((_2067 * _1989) + _714) * cbLight._m0[_2021].y) * _2086) * _1823) + (((((_1986 * _1989) + _714) * cbLight._m0[_1936].y) * _2010) * _1833);
    float _2098 = (((((_2067 * _1990) + _715) * cbLight._m0[_2021].z) * _2086) * _1823) + (((((_1986 * _1990) + _715) * cbLight._m0[_1936].z) * _2010) * _1833);
    float _2160;
    float _2162;
    float _2164;
    if (_1873)
    {
        _2160 = _2096;
        _2162 = _2097;
        _2164 = _2098;
    }
    else
    {
        uint _2166 = _1800 + 2u;
        uint _2170 = _1800 + 10u;
        float _2184 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2166].w)) * _551) * 0.949999988079071044921875);
        float _2185 = _2184 * _2184;
        float _2186 = cbLight._m0[_2166].x + _629;
        float _2187 = cbLight._m0[_2166].y + _630;
        float _2188 = cbLight._m0[_2166].z + _631;
        float _2192 = inversesqrt(dot(vec3(_2186, _2187, _2188), vec3(_2186, _2187, _2188)));
        float _2193 = _2192 * _2186;
        float _2194 = _2192 * _2187;
        float _2195 = _2192 * _2188;
        float _2196 = dot(vec3(_548, _549, _550), vec3(cbLight._m0[_2166].xyz));
        float _4275 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2199 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _2200 = dot(vec3(_548, _549, _550), vec3(_2193, _2194, _2195));
        float _4286 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2203 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _2204 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_2193, _2194, _2195));
        float _4297 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
        float _2208 = _2185 * _2185;
        float _2212 = ((_2203 * _2203) * (_2208 + (-1.0))) + 1.0;
        float _2219 = exp2(log2(1.0 - (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) * 5.0);
        float _2226 = 1.0 - _2185;
        float _2236 = (0.5 / (((_1965 * ((_2199 * _2226) + _2185)) + 9.9999999392252902907785028219223e-09) + (((_1965 * _2226) + _2185) * _2199))) * _2199;
        float _4308 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2238 = (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_2208 / ((_2212 * _2212) * 3.141590118408203125));
        float _2239 = isnan(1.0) ? _1815 : (isnan(_1815) ? 1.0 : min(_1815, 1.0));
        _2160 = (((((_2219 * _1987) + _712) * cbLight._m0[_2170].x) * _2238) * _2239) + _2096;
        _2162 = (((((_2219 * _1989) + _714) * cbLight._m0[_2170].y) * _2238) * _2239) + _2097;
        _2164 = (((((_2219 * _1990) + _715) * cbLight._m0[_2170].z) * _2238) * _2239) + _2098;
    }
    float _2274;
    float _2276;
    float _2278;
    if (_1891)
    {
        _2274 = _2160;
        _2276 = _2162;
        _2278 = _2164;
    }
    else
    {
        uint _2285 = _1800 + 3u;
        uint _2289 = _1800 + 11u;
        float _2303 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2285].w)) * _551) * 0.949999988079071044921875);
        float _2304 = _2303 * _2303;
        float _2305 = cbLight._m0[_2285].x + _629;
        float _2306 = cbLight._m0[_2285].y + _630;
        float _2307 = cbLight._m0[_2285].z + _631;
        float _2311 = inversesqrt(dot(vec3(_2305, _2306, _2307), vec3(_2305, _2306, _2307)));
        float _2312 = _2311 * _2305;
        float _2313 = _2311 * _2306;
        float _2314 = _2311 * _2307;
        float _2315 = dot(vec3(_548, _549, _550), vec3(cbLight._m0[_2285].xyz));
        float _4324 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2318 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _2319 = dot(vec3(_548, _549, _550), vec3(_2312, _2313, _2314));
        float _4335 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2322 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _2323 = dot(vec3(cbLight._m0[_2285].xyz), vec3(_2312, _2313, _2314));
        float _4346 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2327 = _2304 * _2304;
        float _2331 = ((_2322 * _2322) * (_2327 + (-1.0))) + 1.0;
        float _2338 = exp2(log2(1.0 - (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0)))) * 5.0);
        float _2345 = 1.0 - _2304;
        float _2355 = (0.5 / (((_1965 * ((_2318 * _2345) + _2304)) + 9.9999999392252902907785028219223e-09) + (((_1965 * _2345) + _2304) * _2318))) * _2318;
        float _4357 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2357 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2327 / ((_2331 * _2331) * 3.141590118408203125));
        float _2358 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
        _2274 = (((((_2338 * _1987) + _712) * cbLight._m0[_2289].x) * _2357) * _2358) + _2160;
        _2276 = (((((_2338 * _1989) + _714) * cbLight._m0[_2289].y) * _2357) * _2358) + _2162;
        _2278 = (((((_2338 * _1990) + _715) * cbLight._m0[_2289].z) * _2357) * _2358) + _2164;
    }
    float _2493;
    float _2495;
    float _2497;
    float _2499;
    float _2501;
    float _2503;
    if (_1798.y == 0u)
    {
        float _2433 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2434 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2433;
        float _2435 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2433;
        float _2436 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2433;
        uvec4 _2448 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2449 = _2448.x;
        uint _2460 = uint((float(_2448.y) * floor(float(uint(cbSceneParam._m0[85u].y * _650) / _2449))) + floor(float(uint(cbSceneParam._m0[85u].x * _649) / _2449)));
        float _2470 = (log2(_2436 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2471 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        uint _2474 = uint(isnan(14.0) ? _2471 : (isnan(_2471) ? 14.0 : min(_2471, 14.0)));
        uvec4 _2479 = texelFetch(g_lightClusterGridBuffer, int(((_2474 << 2u) + (_2460 << 6u)) >> 2u));
        uint _2480 = _2479.x;
        uint _2481 = _2448.z;
        float _2626;
        float _2628;
        float _2630;
        float _2632;
        float _2634;
        float _2636;
        if (((((1u << ((_2481 >> 4u) & 15u)) + 4294967295u) & _2480) == 0u) || ((_2481 & 240u) == 0u))
        {
            _2626 = 0.0;
            _2628 = 0.0;
            _2630 = 0.0;
            _2632 = 0.0;
            _2634 = 0.0;
            _2636 = 0.0;
        }
        else
        {
            float _2627;
            float _2629;
            float _2631;
            float _2633;
            float _2635;
            float _2637;
            float _2787 = 0.0;
            float _2788 = 0.0;
            float _2789 = 0.0;
            float _2790 = 0.0;
            float _2791 = 0.0;
            float _2792 = 0.0;
            uint _2793 = 0u;
            uint _2802;
            bool _2803;
            for (;;)
            {
                _2802 = texelFetch(g_lightClassification, int((((_2474 << 5u) + (_2460 << 9u)) + (_2793 << 2u)) >> 2u)).x;
                _2803 = _2802 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2803)
                {
                    frontier_phi_66_pred = _2787;
                    frontier_phi_66_pred_1 = _2792;
                    frontier_phi_66_pred_2 = _2791;
                    frontier_phi_66_pred_3 = _2790;
                    frontier_phi_66_pred_4 = _2789;
                    frontier_phi_66_pred_5 = _2788;
                }
                else
                {
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    float _2937;
                    uint _2938;
                    _2932 = _2787;
                    _2933 = _2788;
                    _2934 = _2789;
                    _2935 = _2790;
                    _2936 = _2791;
                    _2937 = _2792;
                    _2938 = _2802;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    float _2864;
                    for (;;)
                    {
                        uint _2942 = uint(findLSB(_2938)) + (_2793 << 5u);
                        uint _2939 = (_2938 + 4294967295u) & _2938;
                        uint _2944 = _2942 * 48u;
                        vec4 _2958 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2944)).x, texelFetch(g_PointLightRenderingBuffer, int(_2944 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2944 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2944 + 3u)).x));
                        uint _2964 = (_2942 * 48u) + 4u;
                        vec4 _2977 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2964)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 3u)).x));
                        uint _2983 = (_2942 * 48u) + 8u;
                        vec3 _2994 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2983)).x, texelFetch(g_PointLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2983 + 2u)).x));
                        float _2998 = _2958.x - _2434;
                        float _2999 = _2958.y - _2435;
                        float _3000 = _2958.z - _2436;
                        float _3001 = dot(vec3(_2998, _2999, _3000), vec3(_2998, _2999, _3000));
                        float _3004 = inversesqrt(_3001);
                        float _3005 = _3004 * _2998;
                        float _3006 = _3004 * _2999;
                        float _3007 = _3004 * _3000;
                        float _3008 = dot(vec3(_668, _671, _674), vec3(_3005, _3006, _3007));
                        float _3013 = 1.0 - (_3001 * _2958.w);
                        float _4383 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                        float _3014 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                        float _3015 = sqrt(_3001) * _2977.w;
                        float _3018 = 1.39999997615814208984375 / (_3015 + 1.39999997615814208984375);
                        float _3019 = _3018 * _3018;
                        float _3022 = ((1.0 - _3019) * _3008) + _3019;
                        float _3025 = _3015 * _3015;
                        float _3029 = ((isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0))) * _3014) / ((_3025 * 0.699999988079071044921875) + 1.0);
                        float _3033 = (-0.0) - _2434;
                        float _3034 = (-0.0) - _2435;
                        float _3035 = (-0.0) - _2436;
                        float _3039 = inversesqrt(dot(vec3(_3033, _3034, _3035), vec3(_3033, _3034, _3035)));
                        float _3040 = _3039 * _3033;
                        float _3041 = _3039 * _3034;
                        float _3042 = _3039 * _3035;
                        float _3050 = exp2(log2(1.0 / ((_3025 * 3.5) + 5.0)) * 0.25);
                        float _3051 = 1.0 - _743;
                        float _3058 = sqrt(1.0 - ((1.0 - (_3051 * _3051)) * (1.0 - (_3050 * _3050))));
                        float _3059 = _3058 * _3058;
                        float _3060 = _3059 * _3059;
                        float _3061 = _3040 + _3005;
                        float _3062 = _3041 + _3006;
                        float _3063 = _3042 + _3007;
                        float _3067 = inversesqrt(dot(vec3(_3061, _3062, _3063), vec3(_3061, _3062, _3063)));
                        float _3071 = dot(vec3(_668, _671, _674), vec3(_3040, _3041, _3042));
                        float _4399 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                        float _3074 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                        float _3075 = dot(vec3(_668, _671, _674), vec3(_3067 * _3061, _3067 * _3062, _3067 * _3063));
                        float _4410 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                        float _3078 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                        float _3082 = ((_3078 * _3078) * (_3060 + (-1.0))) + 1.0;
                        float _3083 = _3018 * _3059;
                        float _3084 = _3083 * _3083;
                        float _3087 = ((1.0 - _3084) * _3008) + _3084;
                        float _4421 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                        float _3088 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                        float _3089 = 1.0 - _3059;
                        float _3099 = (0.5 / (((_3088 * ((_3074 * _3089) + _3059)) + 9.9999999392252902907785028219223e-09) + (((_3088 * _3089) + _3059) * _3074))) * _3088;
                        float _4432 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                        float _3110 = (((_3060 * 3.1415927410125732421875) * (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) / ((_3082 * _3082) * ((_3025 * 2.1991131305694580078125) + 3.141590118408203125))) * _3014;
                        _2862 = (_3029 * _2977.x) + _2935;
                        _2863 = (_3029 * _2977.y) + _2936;
                        _2864 = (_3029 * _2977.z) + _2937;
                        _2859 = (_3110 * _2994.x) + _2932;
                        _2860 = (_3110 * _2994.y) + _2933;
                        _2861 = (_3110 * _2994.z) + _2934;
                        if (_2939 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2932 = _2859;
                            _2933 = _2860;
                            _2934 = _2861;
                            _2935 = _2862;
                            _2936 = _2863;
                            _2937 = _2864;
                            _2938 = _2939;
                        }
                    }
                    frontier_phi_66_pred = _2859;
                    frontier_phi_66_pred_1 = _2864;
                    frontier_phi_66_pred_2 = _2863;
                    frontier_phi_66_pred_3 = _2862;
                    frontier_phi_66_pred_4 = _2861;
                    frontier_phi_66_pred_5 = _2860;
                }
                _2627 = frontier_phi_66_pred;
                _2637 = frontier_phi_66_pred_1;
                _2635 = frontier_phi_66_pred_2;
                _2633 = frontier_phi_66_pred_3;
                _2631 = frontier_phi_66_pred_4;
                _2629 = frontier_phi_66_pred_5;
                uint _2794 = _2793 + 1u;
                if (_2794 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2787 = _2627;
                    _2788 = _2629;
                    _2789 = _2631;
                    _2790 = _2633;
                    _2791 = _2635;
                    _2792 = _2637;
                    _2793 = _2794;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2626 = _2627;
            _2628 = _2629;
            _2630 = _2631;
            _2632 = _2633;
            _2634 = _2635;
            _2636 = _2637;
        }
        uvec4 _2640 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2641 = _2640.z;
        uint _2643 = (_2641 >> 8u) & 15u;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        if (((4294967295u << _2643) & _2480) == 0u)
        {
            _2755 = _2626;
            _2757 = _2628;
            _2759 = _2630;
            _2761 = _2632;
            _2763 = _2634;
            _2765 = _2636;
        }
        else
        {
            float _2780 = inversesqrt(dot(vec3(_2434, _2435, _2436), vec3(_2434, _2435, _2436)));
            float _2781 = _2780 * _2434;
            float _2782 = _2780 * _2435;
            float _2783 = _2780 * _2436;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2643 < ((_2641 >> 12u) & 15u))
            {
                float _2756;
                float _2758;
                float _2760;
                float _2762;
                float _2764;
                float _2766;
                float _2915 = _2626;
                float _2916 = _2628;
                float _2917 = _2630;
                float _2918 = _2632;
                float _2919 = _2634;
                float _2920 = _2636;
                uint _2921 = _2643;
                uint _2930;
                bool _2931;
                for (;;)
                {
                    _2930 = texelFetch(g_lightClassification, int((((_2474 << 5u) + (_2460 << 9u)) + (_2921 << 2u)) >> 2u)).x;
                    _2931 = _2930 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2931)
                    {
                        frontier_phi_77_pred = _2920;
                        frontier_phi_77_pred_1 = _2919;
                        frontier_phi_77_pred_2 = _2918;
                        frontier_phi_77_pred_3 = _2917;
                        frontier_phi_77_pred_4 = _2916;
                        frontier_phi_77_pred_5 = _2915;
                    }
                    else
                    {
                        float _3124;
                        float _3125;
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3137 = _2915;
                        float _3138 = _2916;
                        float _3139 = _2917;
                        float _3140 = _2918;
                        float _3141 = _2919;
                        float _3142 = _2920;
                        uint _3143 = _2930;
                        uint _3144;
                        vec4 _3169;
                        float _3170;
                        vec4 _3185;
                        vec3 _3197;
                        vec4 _3212;
                        vec4 _3228;
                        float _3275;
                        bool _3276;
                        for (;;)
                        {
                            uint _3154 = ((_2921 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3143));
                            _3144 = (_3143 + 4294967295u) & _3143;
                            uint _3156 = _3154 * 40u;
                            _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            _3170 = _3169.w;
                            uint _3172 = (_3154 * 40u) + 4u;
                            _3185 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 3u)).x));
                            uint _3187 = (_3154 * 40u) + 8u;
                            _3197 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3187)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 2u)).x));
                            uint _3199 = (_3154 * 40u) + 16u;
                            _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            uint _3215 = (_3154 * 40u) + 20u;
                            _3228 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3215)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 3u)).x));
                            uint _3231 = (_3154 * 40u) + 24u;
                            vec4 _3244 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3231)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 3u)).x));
                            uint _3250 = (_3154 * 40u) + 28u;
                            vec4 _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            _3275 = fma(_2436, _3263.z, fma(_2435, _3263.y, _3263.x * _2434)) + _3263.w;
                            _3276 = !((fma(_2436, _3244.z, fma(_2435, _3244.y, _3244.x * _2434)) + _3244.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3276)
                            {
                                float _3303 = _3169.x - _2434;
                                float _3304 = _3169.y - _2435;
                                float _3305 = _3169.z - _2436;
                                float _3306 = dot(vec3(_3303, _3304, _3305), vec3(_3303, _3304, _3305));
                                float _3309 = inversesqrt(_3306);
                                float _3310 = _3309 * _3303;
                                float _3311 = _3309 * _3304;
                                float _3312 = _3309 * _3305;
                                float _3316 = 1.0 - (_3306 / (_3170 * _3170));
                                float _4443 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                                float _3317 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                                float _3321 = sqrt(_3306) * _3185.w;
                                float _3323 = 1.39999997615814208984375 / (_3321 + 1.39999997615814208984375);
                                float _3324 = _3323 * _3323;
                                float _3327 = ((1.0 - _3324) * dot(vec3(_3310, _3311, _3312), vec3(_668, _671, _674))) + _3324;
                                float _3330 = _3321 * _3321;
                                float _3334 = (fma(_2436, _3212.z, fma(_2435, _3212.y, _3212.x * _2434)) + _3212.w) / _3275;
                                float _3335 = (fma(_2436, _3228.z, fma(_2435, _3228.y, _3228.x * _2434)) + _3228.w) / _3275;
                                float _3339 = 1.0 - dot(vec2(_3334, _3335), vec2(_3334, _3335));
                                float _4459 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                                float _3340 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                                float _3341 = _3340 * (((isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0))) * _3317) / ((_3330 * 0.699999988079071044921875) + 1.0));
                                float _3353 = exp2(log2(1.0 / ((_3330 * 3.5) + 5.0)) * 0.25);
                                float _3354 = 1.0 - _743;
                                float _3361 = sqrt(1.0 - ((1.0 - (_3354 * _3354)) * (1.0 - (_3353 * _3353))));
                                float _3362 = _3361 * _3361;
                                float _3363 = _3362 * _3362;
                                float _3364 = _3310 - _2781;
                                float _3365 = _3311 - _2782;
                                float _3366 = _3312 - _2783;
                                float _3370 = inversesqrt(dot(vec3(_3364, _3365, _3366), vec3(_3364, _3365, _3366)));
                                float _3374 = dot(vec3(_668, _671, _674), vec3((-0.0) - _2781, (-0.0) - _2782, (-0.0) - _2783));
                                float _4470 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3377 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                                float _3378 = dot(vec3(_668, _671, _674), vec3(_3370 * _3364, _3370 * _3365, _3370 * _3366));
                                float _4481 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                                float _3381 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
                                float _3385 = ((_3381 * _3381) * (_3363 + (-1.0))) + 1.0;
                                float _3386 = _3323 * _3362;
                                float _3387 = _3386 * _3386;
                                float _3393 = ((1.0 - _3387) * dot(vec3(_668, _671, _674), vec3(_3310, _3311, _3312))) + _3387;
                                float _4492 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3394 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                                float _3395 = 1.0 - _3362;
                                float _3405 = (0.5 / (((_3394 * ((_3377 * _3395) + _3362)) + 9.9999999392252902907785028219223e-09) + (((_3394 * _3395) + _3362) * _3377))) * _3394;
                                float _4503 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                                float _3415 = (_3340 * _3317) * (((_3363 * 3.1415927410125732421875) * (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0)))) / ((_3385 * _3385) * ((_3330 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3341 * _3185.y;
                                frontier_phi_83_pred_1 = _3341 * _3185.x;
                                frontier_phi_83_pred_2 = _3415 * _3197.z;
                                frontier_phi_83_pred_3 = _3415 * _3197.y;
                                frontier_phi_83_pred_4 = _3415 * _3197.x;
                                frontier_phi_83_pred_5 = _3341 * _3185.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3423 = frontier_phi_83_pred;
                            _3422 = frontier_phi_83_pred_1;
                            _3421 = frontier_phi_83_pred_2;
                            _3420 = frontier_phi_83_pred_3;
                            _3419 = frontier_phi_83_pred_4;
                            _3424 = frontier_phi_83_pred_5;
                            _3127 = _3422 + _3140;
                            _3128 = _3423 + _3141;
                            _3129 = _3424 + _3142;
                            _3124 = _3419 + _3137;
                            _3125 = _3420 + _3138;
                            _3126 = _3421 + _3139;
                            if (_3144 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3137 = _3124;
                                _3138 = _3125;
                                _3139 = _3126;
                                _3140 = _3127;
                                _3141 = _3128;
                                _3142 = _3129;
                                _3143 = _3144;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3129;
                        frontier_phi_77_pred_1 = _3128;
                        frontier_phi_77_pred_2 = _3127;
                        frontier_phi_77_pred_3 = _3126;
                        frontier_phi_77_pred_4 = _3125;
                        frontier_phi_77_pred_5 = _3124;
                    }
                    _2766 = frontier_phi_77_pred;
                    _2764 = frontier_phi_77_pred_1;
                    _2762 = frontier_phi_77_pred_2;
                    _2760 = frontier_phi_77_pred_3;
                    _2758 = frontier_phi_77_pred_4;
                    _2756 = frontier_phi_77_pred_5;
                    uint _2922 = _2921 + 1u;
                    if (_2922 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2915 = _2756;
                        _2916 = _2758;
                        _2917 = _2760;
                        _2918 = _2762;
                        _2919 = _2764;
                        _2920 = _2766;
                        _2921 = _2922;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2760;
                frontier_phi_58_59_ladder_1 = _2766;
                frontier_phi_58_59_ladder_2 = _2764;
                frontier_phi_58_59_ladder_3 = _2762;
                frontier_phi_58_59_ladder_4 = _2758;
                frontier_phi_58_59_ladder_5 = _2756;
            }
            else
            {
                frontier_phi_58_59_ladder = _2630;
                frontier_phi_58_59_ladder_1 = _2636;
                frontier_phi_58_59_ladder_2 = _2634;
                frontier_phi_58_59_ladder_3 = _2632;
                frontier_phi_58_59_ladder_4 = _2628;
                frontier_phi_58_59_ladder_5 = _2626;
            }
            _2755 = frontier_phi_58_59_ladder_5;
            _2757 = frontier_phi_58_59_ladder_4;
            _2759 = frontier_phi_58_59_ladder;
            _2761 = frontier_phi_58_59_ladder_3;
            _2763 = frontier_phi_58_59_ladder_2;
            _2765 = frontier_phi_58_59_ladder_1;
        }
        float _2770 = isnan(1.0) ? _727 : (isnan(_727) ? 1.0 : min(_727, 1.0));
        _2493 = (_2770 * _2761) + _1929;
        _2495 = (_2770 * _2763) + _1931;
        _2497 = (_2770 * _2765) + _1933;
        _2499 = ((_2755 * _712) * _2770) + _2274;
        _2501 = ((_2757 * _714) * _2770) + _2276;
        _2503 = ((_2759 * _715) * _2770) + _2278;
    }
    else
    {
        _2493 = _1929;
        _2495 = _1931;
        _2497 = _1933;
        _2499 = _2274;
        _2501 = _2276;
        _2503 = _2278;
    }
    uint _2509 = _688 + uint(cbMatDynParam._m0[0u].w);
    float _2515 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].y;
    float _2521 = (((((_2515 * cbMtdParam._m0[10u].x) * _429.x) * _452) * _527) * (((1.0 - _506) * cbMtdParam._m0[16u].y) + _506)) * cbInstanceData._m0[_2509].x;
    float _2527 = (((((_2515 * cbMtdParam._m0[10u].y) * _429.y) * _452) * _527) * (((1.0 - _508) * cbMtdParam._m0[16u].y) + _508)) * cbInstanceData._m0[_2509].y;
    float _2533 = (((((_2515 * cbMtdParam._m0[10u].z) * _429.z) * _452) * _527) * (((1.0 - _510) * cbMtdParam._m0[16u].y) + _510)) * cbInstanceData._m0[_2509].z;
    float _4519 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _4530 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _4541 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _2550 = (((isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * (_2493 + ((isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))) * _727))) + ((_2499 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1567)) * cbPerFrame._m0[3u].x)) + _2521;
    float _2552 = (_2527 + ((_2501 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1567)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_2495 + ((isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))) * _727)));
    float _2554 = (_2533 + ((_2503 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1567)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * (_2497 + ((isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))) * _727)));
    float _2555 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
    float _2556 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
    float _2557 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
    float _2563 = cbMtdParam._m0[2u].x * _2521;
    float _2564 = cbMtdParam._m0[2u].y * _2527;
    float _2565 = cbMtdParam._m0[2u].z * _2533;
    float _4567 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2567 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
    uint _2568 = _687 + 6u;
    float _2576 = _649 / cbSceneParam._m0[86u].x;
    float _2577 = _650 / cbSceneParam._m0[86u].y;
    vec4 _2591 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2576, _2577, (log2((isnan(cbSceneParam._m0[77u].w) ? _571 : (isnan(_571) ? cbSceneParam._m0[77u].w : min(_571, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2593 = _2591.x;
    float _2594 = _2591.y;
    float _2595 = _2591.z;
    float _2596 = _2591.w;
    float _2688;
    float _2690;
    float _2692;
    float _2694;
    if (_571 > cbSceneParam._m0[78u].w)
    {
        float _2651 = isnan(_571) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _571 : min(cbSceneParam._m0[80u].w, _571));
        float _2652 = _2651 / _571;
        float _2663 = _2652 * _622;
        float _2664 = _623 * _2652;
        float _2665 = (-0.0) - _2664;
        float _2666 = _2652 * _624;
        float _2668 = (cbSceneParam._m0[77u].w * _2665) / _2651;
        float _2669 = _2668 + cbSceneParam._m0[79u].w;
        float _2670 = cbSceneParam._m0[79u].w - _2664;
        float _2676 = sqrt(((_2663 * _2663) + (_2664 * _2664)) + (_2666 * _2666));
        float _2679 = (1.0 - (cbSceneParam._m0[77u].w / _2651)) * _2676;
        float _2684 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2686 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2872;
        if (abs((_2665 - _2668) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2872 = ((((_2669 > 0.0) ? exp2(_2684 * _2669) : (2.0 - exp2(_2686 * _2669))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2679;
        }
        else
        {
            float _2816 = 1.0 / cbSceneParam._m0[80u].x;
            float _2817 = isnan(_2670) ? _2669 : (isnan(_2669) ? _2670 : max(_2669, _2670));
            float _2818 = isnan(_2670) ? _2669 : (isnan(_2669) ? _2670 : min(_2669, _2670));
            float _2827 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : min(_2817, 0.0));
            float _2828 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : min(_2818, 0.0));
            _2872 = ((abs(_2676 / _2665) * cbSceneParam._m0[80u].y) * ((((_2827 - _2828) * 2.0) - ((exp2(_2684 * (isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0)))) - exp2(_2684 * (isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0))))) * _2816)) - ((exp2(_2686 * _2827) - exp2(_2686 * _2828)) * _2816))) + (_2679 * cbSceneParam._m0[80u].z);
        }
        vec4 _2874 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2576, _2577, 1.0), 0.0);
        float _2883 = exp2((_2872 * (-1.44269502162933349609375)) * (1.0 - _2874.w));
        float _2884 = log2(_2883);
        float _2900 = log2(_2596);
        _2688 = (exp2(_2900 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2884 * cbSceneParam._m0[78u].x)) * _2874.x) / cbSceneParam._m0[78u].x)) + _2593;
        _2690 = (exp2(_2900 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2884 * cbSceneParam._m0[78u].y)) * _2874.y) / cbSceneParam._m0[78u].y)) + _2594;
        _2692 = (exp2(_2900 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2884 * cbSceneParam._m0[78u].z)) * _2874.z) / cbSceneParam._m0[78u].z)) + _2595;
        _2694 = _2883 * _2596;
    }
    else
    {
        _2688 = _2593;
        _2690 = _2594;
        _2692 = _2595;
        _2694 = _2596;
    }
    bool _2910;
    vec4 _2704;
    vec4 _2726;
    float _2728;
    float _2732;
    float _2733;
    float _2734;
    float _2737;
    float _2740;
    float _2743;
    float _2744;
    bool _2754;
    for (;;)
    {
        _2704 = cbMatDynParam._m0[0u];
        float _2706 = roundEven(_2704.y);
        bool _2707 = _2706 == 3.0;
        float _2708 = log2(_2694);
        float _2712 = exp2(_2708 * cbSceneParam._m0[78u].x);
        float _2713 = exp2(_2708 * cbSceneParam._m0[78u].y);
        float _2714 = exp2(_2708 * cbSceneParam._m0[78u].z);
        float _2715 = _2712 * _2555;
        float _2716 = _2713 * _2556;
        float _2717 = _2714 * _2557;
        float _2724 = _638 + (-0.5);
        _2726 = cbMtdParam._m0[1u];
        _2728 = _2726.y * _2724;
        float _2731 = (_2706 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2732 = _2731 * (_2707 ? _2715 : (_2715 + (cbSceneParam._m0[72u].w * _2688)));
        _2733 = _2731 * (_2707 ? _2716 : (_2716 + (cbSceneParam._m0[72u].w * _2690)));
        _2734 = _2731 * (_2707 ? _2717 : (_2717 + (cbSceneParam._m0[72u].w * _2692)));
        _2737 = ((_2563 * _2567) * _2712) * _2731;
        _2740 = ((_2564 * _2567) * _2713) * _2731;
        _2743 = ((_2565 * _2567) * _2714) * _2731;
        _2744 = _2724 * 0.999000012874603271484375;
        _2754 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2754)
        {
            if ((cbInstanceData._m0[_687 + 7u].x + _2744) < 0.5)
            {
                _2910 = true;
                break;
            }
        }
        uint _2851 = _688 + uint(_2704.w);
        if ((cbInstanceData._m0[_2851].w < 1.0) && ((cbInstanceData._m0[_2851].w + _2744) < 0.5))
        {
            _2910 = true;
            break;
        }
        if ((_2728 + 1.0) < _2726.x)
        {
            _2910 = true;
            break;
        }
        _2910 = false;
        break;
    }
    float _3115;
    if (_2910)
    {
        discard_state = true;
        _3115 = 0.0;
    }
    else
    {
        _3115 = cbInstanceData._m0[_2568].w;
    }
    SV_Target.x = _2732;
    SV_Target.y = _2733;
    SV_Target.z = _2734;
    SV_Target.w = _3115;
    SV_Target_1.x = _2737;
    SV_Target_1.y = _2740;
    SV_Target_1.z = _2743;
    SV_Target_1.w = cbInstanceData._m0[_2568].w;
    discard_exit();
}


