#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1093;
float _3534;
float _3535;
float _3536;
float _3537;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _249 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _255 = _249.x * cbMtdParam._m0[9u].x;
    float _256 = _249.y * cbMtdParam._m0[9u].y;
    float _257 = _249.z * cbMtdParam._m0[9u].z;
    vec4 _280 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _300 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _303 = _300.x + 0.00999999977648258209228515625;
    float _311 = (TEXCOORD_8 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_8)) * _303)) * (cbMtdParam._m0[15u].z + 1.0);
    float _3546 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _312 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
    float _319 = (_312 * ((_280.x * cbMtdParam._m0[12u].x) - _255)) + _255;
    float _320 = (_312 * ((_280.y * cbMtdParam._m0[12u].y) - _256)) + _256;
    float _321 = (_312 * ((_280.z * cbMtdParam._m0[12u].z) - _257)) + _257;
    vec4 _333 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    vec4 _356 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _360 = _356.z;
    float _363 = (_356.x * 2.0) + (-1.0);
    float _364 = (_356.y * 2.0) + (-1.0);
    float _365 = dot(vec2(_363, _364), vec2(_363, _364));
    float _3557 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _370 = sqrt(1.0 - (isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0))));
    float _378 = (((_333.z - _360) * TEXCOORD_8) * cbMtdParam._m0[16u].x) + _360;
    vec4 _412 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _426 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3568 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _427 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
    float _435 = (((_427 * _427) * (3.0 - (_427 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _444 = cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x;
    float _452 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3579 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _453 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
    float _457 = (_453 * _453) * (3.0 - (_453 * 2.0));
    float _458 = _457 * cbMtdParam._m0[16u].w;
    float _459 = _457 * cbMtdParam._m0[17u].x;
    float _460 = sin(_444);
    float _461 = cos(_444);
    float _462 = TEXCOORD.z - _458;
    float _463 = TEXCOORD.w - _459;
    vec4 _483 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_458 + fma(_463, (-0.0) - _460, _462 * _461))) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (fma(_463, _461, _462 * _460) + _459)) + cbTextureTilingScale._m0[0u].w));
    float _489 = (cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].w) * _483.x;
    float _491 = (cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].w) * _483.y;
    float _493 = (cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].w) * _483.z;
    float _509 = (TEXCOORD_5.x - ((_303 * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[16u].z)) * (cbMtdParam._m0[13u].x + 1.0);
    float _3590 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _510 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
    float _516 = ((((_333.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[15u].x) + _363;
    float _517 = ((((_333.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[15u].x) + _364;
    float _520 = fma(_370, _220 * NORMAL.x, fma(_517, _227 * TANGENT.x, (_213 * _205) * _516));
    float _523 = fma(_370, _220 * NORMAL.y, fma(_517, _227 * TANGENT.y, (_213 * _206) * _516));
    float _526 = fma(_370, _220 * NORMAL.z, fma(_517, _227 * TANGENT.z, (_213 * _207) * _516));
    float _530 = inversesqrt(dot(vec3(_520, _523, _526), vec3(_520, _523, _526)));
    float _531 = _530 * _520;
    float _532 = _530 * _523;
    float _533 = _530 * _526;
    float _3601 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _534 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
    float _3612 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3623 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3634 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _553 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _594 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _604 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _594);
    float _605 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _594);
    float _606 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _594);
    float _610 = inversesqrt(dot(vec3(_604, _605, _606), vec3(_604, _605, _606)));
    float _611 = _604 * _610;
    float _612 = _605 * _610;
    float _613 = _606 * _610;
    vec4 _618 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _620 = _618.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _773 = sqrt(((_604 * _604) + (_605 * _605)) + (_606 * _606));
        float _779 = (cbMatDynParam._m0[5u].x * _773) + cbMatDynParam._m0[5u].y;
        float _3645 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _780 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _784 = (cbMatDynParam._m0[5u].z * _773) + cbMatDynParam._m0[5u].w;
        float _3656 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) - _780)) + _780) < ((_620 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _631 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _632 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _650 = fma(_533, cbSceneParam._m0[5u].z, fma(_532, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _531));
    float _653 = fma(_533, cbSceneParam._m0[6u].z, fma(_532, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _531));
    float _656 = fma(_533, cbSceneParam._m0[7u].z, fma(_532, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _531));
    uint _669 = uint(roundEven(NORMAL.w)) * 13u;
    uint _670 = _669 + 9u;
    uint _671 = _670 + uint(cbMatDynParam._m0[0u].w);
    float _677 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0)))) * cbInstanceData._m0[_671].x;
    float _678 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0)))) * cbInstanceData._m0[_671].y;
    float _679 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0)))) * cbInstanceData._m0[_671].z;
    float _3667 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _680 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
    float _3678 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _681 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
    float _3689 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _682 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    vec4 _691 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _631, cbSceneParam._m0[86u].y * _632));
    float _694 = _691.x * TEXCOORD_5.w;
    float _695 = dot(vec3(_531, _532, _533), vec3(_611, _612, _613));
    float _698 = _695 * 2.0;
    float _702 = (_698 * _531) - _611;
    float _703 = (_698 * _532) - _612;
    float _704 = (_698 * _533) - _613;
    float _708 = abs(dot(vec3(_611, _612, _613), vec3(_531, _532, _533)));
    float _3700 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _710 = sqrt(_534);
    float _722 = exp2((_710 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_710 * 3.0));
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _762 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1092;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _817 = fma(_762, cbModelParam._m0[26u].z, fma(_758, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _754));
        float _821 = fma(_762, cbModelParam._m0[27u].z, fma(_758, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _754));
        float _825 = fma(_762, cbModelParam._m0[28u].z, fma(_758, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _754));
        float _850 = _754 + _531;
        float _851 = _758 + _532;
        float _852 = _762 + _533;
        float _862 = fma(_852, cbModelParam._m0[26u].z, fma(_851, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _850)) - _817;
        float _863 = fma(_852, cbModelParam._m0[27u].z, fma(_851, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _850)) - _821;
        float _864 = fma(_852, cbModelParam._m0[28u].z, fma(_851, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _850)) - _825;
        float _868 = inversesqrt(dot(vec3(_862, _863, _864), vec3(_862, _863, _864)));
        float _881 = ((_868 * _862) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_817 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _882 = ((_868 * _863) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_821 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _883 = ((_868 * _864) / cbModelParam._m0[34u].z) + ((((((_825 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _886 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_881, _882, _883), 0.0);
        vec4 _893 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_881, _882, _883), 0.0);
        vec4 _900 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_881, _882, _883), 0.0);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_881, _882, _883), 0.0);
        float _920 = exp2((_886.w + (-0.5)) * 20.0) * 2.0;
        float _921 = _920 * (_886.x + (-0.5));
        float _922 = _920 * (_886.y + (-0.5));
        float _923 = _920 * (_886.z + (-0.5));
        float _930 = exp2((_893.w + (-0.5)) * 20.0) * 2.0;
        float _931 = _930 * (_893.x + (-0.5));
        float _932 = _930 * (_893.y + (-0.5));
        float _933 = _930 * (_893.z + (-0.5));
        float _940 = exp2((_900.w + (-0.5)) * 20.0) * 2.0;
        float _941 = _940 * (_900.x + (-0.5));
        float _942 = _940 * (_900.y + (-0.5));
        float _943 = _940 * (_900.z + (-0.5));
        float _950 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _951 = _950 * (_907.x + (-0.5));
        float _952 = _950 * (_907.y + (-0.5));
        float _953 = _950 * (_907.z + (-0.5));
        float _954 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _957 = _921 * 0.5;
        float _958 = _931 * 0.5;
        float _959 = _941 * 0.5;
        float _960 = dot(vec3(_957, _958, _959), vec3(_957, _958, _959));
        float _965 = (_960 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_960);
        float _974 = (dot(vec3(_531, _532, _533), vec3(_965 * _957, _965 * _958, _965 * _959)) + 1.0) * 0.5;
        float _3726 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _984 = sqrt(((_958 * _958) + (_957 * _957)) + (_959 * _959)) / (_954 + 9.9999997473787516355514526367188e-06);
        float _3737 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _986 = _985 * 2.0;
        float _990 = (1.0 - _985) / (_985 + 1.0);
        float _3748 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1000 = ((((1.0 - _991) * (_986 + 2.0)) * exp2(log2(isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * (_986 + 1.0))) + _991) * _954;
        float _1001 = _922 * 0.5;
        float _1002 = _932 * 0.5;
        float _1003 = _942 * 0.5;
        float _1004 = dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003));
        float _1009 = (_1004 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1004);
        float _1017 = (dot(vec3(_531, _532, _533), vec3(_1009 * _1001, _1009 * _1002, _1009 * _1003)) + 1.0) * 0.5;
        float _3759 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1026 = sqrt(((_1002 * _1002) + (_1001 * _1001)) + (_1003 * _1003)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3770 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1028 = _1027 * 2.0;
        float _1032 = (1.0 - _1027) / (_1027 + 1.0);
        float _3781 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1042 = ((((1.0 - _1033) * (_1028 + 2.0)) * exp2(log2(isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_1028 + 1.0))) + _1033) * _955;
        float _1043 = _923 * 0.5;
        float _1044 = _933 * 0.5;
        float _1045 = _943 * 0.5;
        float _1046 = dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045));
        float _1051 = (_1046 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1046);
        float _1059 = (dot(vec3(_531, _532, _533), vec3(_1051 * _1043, _1051 * _1044, _1051 * _1045)) + 1.0) * 0.5;
        float _3792 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1068 = sqrt(((_1044 * _1044) + (_1043 * _1043)) + (_1045 * _1045)) / (_956 + 9.9999997473787516355514526367188e-06);
        float _3803 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1070 = _1069 * 2.0;
        float _1074 = (1.0 - _1069) / (_1069 + 1.0);
        float _3814 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1084 = ((((1.0 - _1075) * (_1070 + 2.0)) * exp2(log2(isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_1070 + 1.0))) + _1075) * _956;
        _1092 = _923;
        _1094 = _922;
        _1095 = _921;
        _1096 = _933;
        _1097 = _932;
        _1098 = _931;
        _1099 = _943;
        _1100 = _942;
        _1101 = _941;
        _1102 = _956;
        _1103 = _955;
        _1104 = _954;
        _1105 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0)));
        _1106 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0)));
        _1107 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0)));
    }
    else
    {
        _1092 = _1093;
        _1094 = _1093;
        _1095 = _1093;
        _1096 = _1093;
        _1097 = _1093;
        _1098 = _1093;
        _1099 = _1093;
        _1100 = _1093;
        _1101 = _1093;
        _1102 = _1093;
        _1103 = _1093;
        _1104 = _1093;
        _1105 = 0.0;
        _1106 = 0.0;
        _1107 = 0.0;
    }
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1136 = fma(_762, cbModelParam._m0[30u].z, fma(_758, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _754));
        float _1140 = fma(_762, cbModelParam._m0[31u].z, fma(_758, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _754));
        float _1144 = fma(_762, cbModelParam._m0[32u].z, fma(_758, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _754));
        float _1167 = _754 + _531;
        float _1168 = _758 + _532;
        float _1169 = _762 + _533;
        float _1179 = fma(_1169, cbModelParam._m0[30u].z, fma(_1168, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1167)) - _1136;
        float _1180 = fma(_1169, cbModelParam._m0[31u].z, fma(_1168, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1167)) - _1140;
        float _1181 = fma(_1169, cbModelParam._m0[32u].z, fma(_1168, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1167)) - _1144;
        float _1185 = inversesqrt(dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181)));
        float _1198 = ((_1185 * _1179) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1136 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1199 = ((_1185 * _1180) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1140 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1200 = ((_1185 * _1181) / cbModelParam._m0[35u].z) + ((((((_1144 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        float _1235 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1202.x + (-0.5));
        float _1237 = _1235 * (_1202.y + (-0.5));
        float _1238 = _1235 * (_1202.z + (-0.5));
        float _1245 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1209.x + (-0.5));
        float _1247 = _1245 * (_1209.y + (-0.5));
        float _1248 = _1245 * (_1209.z + (-0.5));
        float _1255 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1216.x + (-0.5));
        float _1257 = _1255 * (_1216.y + (-0.5));
        float _1258 = _1255 * (_1216.z + (-0.5));
        float _1265 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1223.x + (-0.5));
        float _1267 = _1265 * (_1223.y + (-0.5));
        float _1268 = _1265 * (_1223.z + (-0.5));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = _1236 * 0.5;
        float _1273 = _1246 * 0.5;
        float _1274 = _1256 * 0.5;
        float _1275 = dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274));
        float _1280 = (_1275 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1275);
        float _1288 = (dot(vec3(_531, _532, _533), vec3(_1280 * _1272, _1280 * _1273, _1280 * _1274)) + 1.0) * 0.5;
        float _3855 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1297 = sqrt(((_1273 * _1273) + (_1272 * _1272)) + (_1274 * _1274)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _3866 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _3877 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_1299 + 1.0))) + _1304) * _1269;
        float _1314 = _1237 * 0.5;
        float _1315 = _1247 * 0.5;
        float _1316 = _1257 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1330 = (dot(vec3(_531, _532, _533), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _3888 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1339 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1270 + 9.9999997473787516355514526367188e-06);
        float _3899 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _3910 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1341 + 1.0))) + _1346) * _1270;
        float _1356 = _1238 * 0.5;
        float _1357 = _1248 * 0.5;
        float _1358 = _1258 * 0.5;
        float _1359 = dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358));
        float _1364 = (_1359 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1359);
        float _1372 = (dot(vec3(_531, _532, _533), vec3(_1364 * _1356, _1364 * _1357, _1364 * _1358)) + 1.0) * 0.5;
        float _3921 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1381 = sqrt(((_1357 * _1357) + (_1356 * _1356)) + (_1358 * _1358)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _3932 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1383 = _1382 * 2.0;
        float _1387 = (1.0 - _1382) / (_1382 + 1.0);
        float _3943 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1397 = ((((1.0 - _1388) * (_1383 + 2.0)) * exp2(log2(isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_1383 + 1.0))) + _1388) * _1271;
        _1405 = _1238;
        _1406 = _1237;
        _1407 = _1236;
        _1408 = _1248;
        _1409 = _1247;
        _1410 = _1246;
        _1411 = _1258;
        _1412 = _1257;
        _1413 = _1256;
        _1414 = _1271;
        _1415 = _1270;
        _1416 = _1269;
        _1417 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
        _1418 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
        _1419 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)));
    }
    else
    {
        _1405 = _1093;
        _1406 = _1093;
        _1407 = _1093;
        _1408 = _1093;
        _1409 = _1093;
        _1410 = _1093;
        _1411 = _1093;
        _1412 = _1093;
        _1413 = _1093;
        _1414 = _1093;
        _1415 = _1093;
        _1416 = _1093;
        _1417 = 0.0;
        _1418 = 0.0;
        _1419 = 0.0;
    }
    float _1429 = (cbModelParam._m0[1u].x * (_1417 - _1105)) + _1105;
    float _1430 = (cbModelParam._m0[1u].x * (_1418 - _1106)) + _1106;
    float _1431 = (cbModelParam._m0[1u].x * (_1419 - _1107)) + _1107;
    float _1452 = fma(_1431, cbSceneParam._m0[89u].z, fma(_1430, cbSceneParam._m0[89u].y, _1429 * cbSceneParam._m0[89u].x));
    float _1455 = fma(_1431, cbSceneParam._m0[90u].z, fma(_1430, cbSceneParam._m0[90u].y, _1429 * cbSceneParam._m0[90u].x));
    float _1458 = fma(_1431, cbSceneParam._m0[91u].z, fma(_1430, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1429));
    float _1473 = _702 * 0.5;
    float _1474 = _703 * 0.5;
    float _1475 = _704 * 0.5;
    float _1476 = dot(vec4(_1473, _1474, _1475, 1.0), vec4(_1407, _1410, _1413, _1416));
    float _1479 = dot(vec4(_1473, _1474, _1475, 1.0), vec4(_1406, _1409, _1412, _1415));
    float _1482 = dot(vec4(_1473, _1474, _1475, 1.0), vec4(_1405, _1408, _1411, _1414));
    float _1516;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1489 = dot(vec4(_1473, _1474, _1475, 1.0), vec4(_1092, _1096, _1099, _1102));
        float _1493 = dot(vec4(_1473, _1474, _1475, 1.0), vec4(_1094, _1097, _1100, _1103));
        float _1497 = dot(vec4(_1473, _1474, _1475, 1.0), vec4(_1095, _1098, _1101, _1104));
        float _1504 = dot(vec4(cbModelParam._m0[39u]), vec4(_1473, _1474, _1475, 1.0));
        _1516 = dot(vec3(isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)), isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)), isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1504) ? 0.0 : (isnan(0.0) ? _1504 : max(0.0, _1504))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1516 = 1.0;
    }
    float _1527;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1518 = dot(vec4(cbModelParam._m0[40u]), vec4(_1473, _1474, _1475, 1.0));
        _1527 = dot(vec3(isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)), isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)), isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1518) ? 0.0 : (isnan(0.0) ? _1518 : max(0.0, _1518))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1527 = 1.0;
    }
    float _1531 = (_1527 * cbModelParam._m0[1u].x) + (_1516 * (1.0 - cbModelParam._m0[1u].x));
    float _1541 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _534);
    float _1542 = isnan(_1541) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1541 : min(cbModelParam._m0[25u].z, _1541));
    float _1622;
    float _1624;
    float _1626;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1589 = fma(_762, cbModelParam._m0[13u].z, fma(_758, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _754)) + cbModelParam._m0[13u].w;
        float _1593 = fma(_762, cbModelParam._m0[14u].z, fma(_758, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _754)) + cbModelParam._m0[14u].w;
        float _1597 = fma(_762, cbModelParam._m0[15u].z, fma(_758, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _754)) + cbModelParam._m0[15u].w;
        float _1600 = fma(_704, cbModelParam._m0[13u].z, fma(_703, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _702));
        float _1603 = fma(_704, cbModelParam._m0[14u].z, fma(_703, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _702));
        float _1606 = fma(_704, cbModelParam._m0[15u].z, fma(_703, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _702));
        float _1634;
        if (_1600 > 0.0)
        {
            _1634 = abs((1.0 - _1589) / _1600);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1600 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1589 + 1.0) / _1600);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1634 = frontier_phi_17_15_ladder;
        }
        float _1858;
        if (_1603 > 0.0)
        {
            _1858 = abs((1.0 - _1593) / _1603);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1593 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1858 = frontier_phi_26_22_ladder;
        }
        float _2104;
        if (_1606 > 0.0)
        {
            _2104 = abs((1.0 - _1597) / _1606);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1597 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2104 = frontier_phi_38_33_ladder;
        }
        float _2106 = isnan(_1858) ? _1634 : (isnan(_1634) ? _1858 : min(_1634, _1858));
        float _2107 = isnan(_2104) ? _2106 : (isnan(_2106) ? _2104 : min(_2106, _2104));
        float _2111 = (_2107 * _1600) + _1589;
        float _2112 = (_2107 * _1603) + _1593;
        float _2113 = (_2107 * _1606) + _1597;
        float _2114 = _2107 * 9.9999997473787516355514526367188e-05;
        float _2116 = (-1.0) - _2114;
        float _2118 = _2114 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2113 > _2118) || ((_2113 < _2116) || ((_2112 > _2118) || ((_2112 < _2116) || ((_2111 < _2116) || (_2111 > _2118))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2237 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2113, cbModelParam._m0[9u].z, fma(_2112, cbModelParam._m0[9u].y, _2111 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2113, cbModelParam._m0[10u].z, fma(_2112, cbModelParam._m0[10u].y, _2111 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2113, cbModelParam._m0[11u].z, fma(_2112, cbModelParam._m0[11u].y, _2111 * cbModelParam._m0[11u].x))), _1542);
            frontier_phi_16_38_ladder = _2237.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2237.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2237.x * cbModelParam._m0[1u].y;
        }
        _1622 = frontier_phi_16_38_ladder_2;
        _1624 = frontier_phi_16_38_ladder_1;
        _1626 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1610 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_702, _703, _704), _1542);
        _1622 = _1610.x * cbModelParam._m0[1u].y;
        _1624 = _1610.y * cbModelParam._m0[1u].y;
        _1626 = _1610.z * cbModelParam._m0[1u].y;
    }
    float _1630 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _534);
    float _1631 = isnan(_1630) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1630 : min(cbModelParam._m0[25u].w, _1630));
    float _1722;
    float _1724;
    float _1726;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1686 = fma(_762, cbModelParam._m0[21u].z, fma(_758, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _754)) + cbModelParam._m0[21u].w;
        float _1690 = fma(_762, cbModelParam._m0[22u].z, fma(_758, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _754)) + cbModelParam._m0[22u].w;
        float _1694 = fma(_762, cbModelParam._m0[23u].z, fma(_758, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _754)) + cbModelParam._m0[23u].w;
        float _1697 = fma(_704, cbModelParam._m0[21u].z, fma(_703, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _702));
        float _1700 = fma(_704, cbModelParam._m0[22u].z, fma(_703, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _702));
        float _1703 = fma(_704, cbModelParam._m0[23u].z, fma(_703, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _702));
        float _1863;
        if (_1697 > 0.0)
        {
            _1863 = abs((1.0 - _1686) / _1697);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1697 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1686 + 1.0) / _1697);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1863 = frontier_phi_28_24_ladder;
        }
        float _2131;
        if (_1700 > 0.0)
        {
            _2131 = abs((1.0 - _1690) / _1700);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1700 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1690 + 1.0) / _1700);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2131 = frontier_phi_40_35_ladder;
        }
        float _2336;
        if (_1703 > 0.0)
        {
            _2336 = abs((1.0 - _1694) / _1703);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1694 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2336 = frontier_phi_49_46_ladder;
        }
        float _2338 = isnan(_2131) ? _1863 : (isnan(_1863) ? _2131 : min(_1863, _2131));
        float _2339 = isnan(_2336) ? _2338 : (isnan(_2338) ? _2336 : min(_2338, _2336));
        float _2343 = (_2339 * _1697) + _1686;
        float _2344 = (_2339 * _1700) + _1690;
        float _2345 = (_2339 * _1703) + _1694;
        float _2346 = _2339 * 9.9999997473787516355514526367188e-05;
        float _2347 = (-1.0) - _2346;
        float _2349 = _2346 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2345 > _2349) || ((_2345 < _2347) || ((_2344 > _2349) || ((_2344 < _2347) || ((_2343 < _2347) || (_2343 > _2349))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2589 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2345, cbModelParam._m0[17u].z, fma(_2344, cbModelParam._m0[17u].y, _2343 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2345, cbModelParam._m0[18u].z, fma(_2344, cbModelParam._m0[18u].y, _2343 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2345, cbModelParam._m0[19u].z, fma(_2344, cbModelParam._m0[19u].y, _2343 * cbModelParam._m0[19u].x))), _1631);
            frontier_phi_25_49_ladder = _2589.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2589.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2589.x * cbModelParam._m0[1u].z;
        }
        _1722 = frontier_phi_25_49_ladder_2;
        _1724 = frontier_phi_25_49_ladder_1;
        _1726 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1706 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_702, _703, _704), _1631);
        _1722 = _1706.x * cbModelParam._m0[1u].z;
        _1724 = _1706.y * cbModelParam._m0[1u].z;
        _1726 = _1706.z * cbModelParam._m0[1u].z;
    }
    float _1738 = ((((1.0 - _722) * ((_710 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_722 * _710)) * _694;
    float _1739 = _1738 * ((cbModelParam._m0[1u].w * (_1722 - _1622)) + _1622);
    float _1740 = _1738 * ((cbModelParam._m0[1u].w * (_1724 - _1624)) + _1624);
    float _1741 = _1738 * ((cbModelParam._m0[1u].w * (_1726 - _1626)) + _1626);
    float _1744 = fma(_1741, cbSceneParam._m0[89u].z, fma(_1740, cbSceneParam._m0[89u].y, _1739 * cbSceneParam._m0[89u].x));
    float _1747 = fma(_1741, cbSceneParam._m0[90u].z, fma(_1740, cbSceneParam._m0[90u].y, _1739 * cbSceneParam._m0[90u].x));
    float _1750 = fma(_1741, cbSceneParam._m0[91u].z, fma(_1740, cbSceneParam._m0[91u].y, _1739 * cbSceneParam._m0[91u].x));
    vec4 _1758 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_631, _632));
    float _1760 = _1758.w;
    float _1772 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1760);
    float _1773 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1760);
    float _1774 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1760);
    uvec4 _1778 = floatBitsToUint(cbInstanceData._m0[_669 + 5u]);
    uint _1780 = _1778.x * 14u;
    uint _1781 = _1780 + 13u;
    float _1788 = _694 + (-1.0);
    float _1793 = (cbLight._m0[_1781].x * _1788) + 1.0;
    float _1794 = (cbLight._m0[_1781].y * _1788) + 1.0;
    float _1795 = (cbLight._m0[_1781].z * _1788) + 1.0;
    float _1796 = (cbLight._m0[_1781].w * _1788) + 1.0;
    uint _1797 = _1780 + 5u;
    float _1803 = isnan(1.0) ? _1794 : (isnan(_1794) ? 1.0 : min(_1794, 1.0));
    uint _1807 = _1780 + 4u;
    float _1817 = isnan(1.0) ? _1793 : (isnan(_1793) ? 1.0 : min(_1793, 1.0));
    uint _1821 = _1780 | 1u;
    float _1832 = dot(vec3(cbLight._m0[_1780].xyz), vec3(_531, _532, _533));
    float _1835 = dot(vec3(cbLight._m0[_1821].xyz), vec3(_531, _532, _533));
    float _4079 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _4090 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1840 = (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * 0.3183098733425140380859375;
    float _1842 = (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * 0.3183098733425140380859375;
    float _1849 = ((cbLight._m0[_1797].x * _1803) * _1842) + (((cbLight._m0[_1807].x * _1772) * _1817) * _1840);
    float _1850 = ((_1803 * cbLight._m0[_1797].y) * _1842) + (((cbLight._m0[_1807].y * _1773) * _1817) * _1840);
    float _1851 = ((_1803 * cbLight._m0[_1797].z) * _1842) + (((cbLight._m0[_1807].z * _1774) * _1817) * _1840);
    uvec4 _1855 = floatBitsToUint(cbLight._m0[_1780 + 12u]);
    bool _1857 = _1855.x == 0u;
    float _1868;
    float _1870;
    float _1872;
    if (_1857)
    {
        _1868 = _1849;
        _1870 = _1850;
        _1872 = _1851;
    }
    else
    {
        uint _1876 = _1780 + 6u;
        float _1892 = (dot(vec3(cbLight._m0[_1780 + 2u].xyz), vec3(_531, _532, _533)) * 0.5) + 0.5;
        float _1893 = _1892 * _1892;
        float _4101 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
        float _1894 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1895 = isnan(1.0) ? _1795 : (isnan(_1795) ? 1.0 : min(_1795, 1.0));
        _1868 = (((cbLight._m0[_1876].x * 0.3183098733425140380859375) * _1894) * _1895) + _1849;
        _1870 = (((cbLight._m0[_1876].y * 0.3183098733425140380859375) * _1894) * _1895) + _1850;
        _1872 = (((cbLight._m0[_1876].z * 0.3183098733425140380859375) * _1894) * _1895) + _1851;
    }
    bool _1875 = _1855.y == 0u;
    float _1913;
    float _1915;
    float _1917;
    if (_1875)
    {
        _1913 = _1868;
        _1915 = _1870;
        _1917 = _1872;
    }
    else
    {
        uint _2075 = _1780 + 7u;
        float _2091 = (dot(vec3(cbLight._m0[_1780 + 3u].xyz), vec3(_531, _532, _533)) * 0.5) + 0.5;
        float _2092 = _2091 * _2091;
        float _4117 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2093 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _2094 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
        _1913 = (((cbLight._m0[_2075].x * 0.3183098733425140380859375) * _2093) * _2094) + _1868;
        _1915 = (((cbLight._m0[_2075].y * 0.3183098733425140380859375) * _2093) * _2094) + _1870;
        _1917 = (((cbLight._m0[_2075].z * 0.3183098733425140380859375) * _2093) * _2094) + _1872;
    }
    uint _1920 = _1780 + 8u;
    float _1933 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1780].w)) * _534) * 0.949999988079071044921875);
    float _1934 = _1933 * _1933;
    float _1935 = cbLight._m0[_1780].x + _611;
    float _1936 = cbLight._m0[_1780].y + _612;
    float _1937 = cbLight._m0[_1780].z + _613;
    float _1941 = inversesqrt(dot(vec3(_1935, _1936, _1937), vec3(_1935, _1936, _1937)));
    float _1942 = _1941 * _1935;
    float _1943 = _1941 * _1936;
    float _1944 = _1941 * _1937;
    float _1945 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_1780].xyz));
    float _4133 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1948 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _4144 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _1949 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _1950 = dot(vec3(_531, _532, _533), vec3(_1942, _1943, _1944));
    float _4155 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1953 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _1954 = dot(vec3(cbLight._m0[_1780].xyz), vec3(_1942, _1943, _1944));
    float _4166 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1958 = _1934 * _1934;
    float _1962 = ((_1953 * _1953) * (_1958 + (-1.0))) + 1.0;
    float _1973 = (exp2(log2(1.0 - (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1974 = 1.0 - _1934;
    float _1985 = (0.5 / (((_1949 * ((_1948 * _1974) + _1934)) + 9.9999999392252902907785028219223e-09) + (((_1949 * _1974) + _1934) * _1948))) * _1948;
    float _4177 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1987 = (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1958 / ((_1962 * _1962) * 3.141590118408203125));
    uint _2001 = _1780 + 9u;
    float _2012 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1821].w)) * _534) * 0.949999988079071044921875);
    float _2013 = _2012 * _2012;
    float _2014 = cbLight._m0[_1821].x + _611;
    float _2015 = cbLight._m0[_1821].y + _612;
    float _2016 = cbLight._m0[_1821].z + _613;
    float _2020 = inversesqrt(dot(vec3(_2014, _2015, _2016), vec3(_2014, _2015, _2016)));
    float _2021 = _2020 * _2014;
    float _2022 = _2020 * _2015;
    float _2023 = _2020 * _2016;
    float _2024 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_1821].xyz));
    float _4188 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2027 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _2028 = dot(vec3(_531, _532, _533), vec3(_2021, _2022, _2023));
    float _4199 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2031 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _2032 = dot(vec3(cbLight._m0[_1821].xyz), vec3(_2021, _2022, _2023));
    float _4210 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2036 = _2013 * _2013;
    float _2040 = ((_2031 * _2031) * (_2036 + (-1.0))) + 1.0;
    float _2049 = (exp2(log2(1.0 - (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2050 = 1.0 - _2013;
    float _2060 = (0.5 / (((_1949 * ((_2027 * _2050) + _2013)) + 9.9999999392252902907785028219223e-09) + (((_1949 * _2050) + _2013) * _2027))) * _2027;
    float _4221 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2062 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_2036 / ((_2040 * _2040) * 3.141590118408203125));
    float _2072 = (((_2049 * cbLight._m0[_2001].x) * _2062) * _1803) + ((((cbLight._m0[_1920].x * _1772) * _1973) * _1987) * _1817);
    float _2073 = (((_2049 * cbLight._m0[_2001].y) * _2062) * _1803) + ((((cbLight._m0[_1920].y * _1773) * _1973) * _1987) * _1817);
    float _2074 = (((_2049 * cbLight._m0[_2001].z) * _2062) * _1803) + ((((cbLight._m0[_1920].z * _1774) * _1973) * _1987) * _1817);
    float _2136;
    float _2138;
    float _2140;
    if (_1857)
    {
        _2136 = _2072;
        _2138 = _2073;
        _2140 = _2074;
    }
    else
    {
        uint _2142 = _1780 + 2u;
        uint _2146 = _1780 + 10u;
        float _2160 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2142].w)) * _534) * 0.949999988079071044921875);
        float _2161 = _2160 * _2160;
        float _2162 = cbLight._m0[_2142].x + _611;
        float _2163 = cbLight._m0[_2142].y + _612;
        float _2164 = cbLight._m0[_2142].z + _613;
        float _2168 = inversesqrt(dot(vec3(_2162, _2163, _2164), vec3(_2162, _2163, _2164)));
        float _2169 = _2168 * _2162;
        float _2170 = _2168 * _2163;
        float _2171 = _2168 * _2164;
        float _2172 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_2142].xyz));
        float _4232 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2175 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _2176 = dot(vec3(_531, _532, _533), vec3(_2169, _2170, _2171));
        float _4243 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2179 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _2180 = dot(vec3(cbLight._m0[_2142].xyz), vec3(_2169, _2170, _2171));
        float _4254 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2184 = _2161 * _2161;
        float _2188 = ((_2179 * _2179) * (_2184 + (-1.0))) + 1.0;
        float _2197 = (exp2(log2(1.0 - (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2198 = 1.0 - _2161;
        float _2208 = (0.5 / (((_1949 * ((_2175 * _2198) + _2161)) + 9.9999999392252902907785028219223e-09) + (((_1949 * _2198) + _2161) * _2175))) * _2175;
        float _4265 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2210 = (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_2184 / ((_2188 * _2188) * 3.141590118408203125));
        float _2211 = isnan(1.0) ? _1795 : (isnan(_1795) ? 1.0 : min(_1795, 1.0));
        _2136 = (((_2197 * cbLight._m0[_2146].x) * _2210) * _2211) + _2072;
        _2138 = (((_2197 * cbLight._m0[_2146].y) * _2210) * _2211) + _2073;
        _2140 = (((_2197 * cbLight._m0[_2146].z) * _2210) * _2211) + _2074;
    }
    float _2246;
    float _2248;
    float _2250;
    if (_1875)
    {
        _2246 = _2136;
        _2248 = _2138;
        _2250 = _2140;
    }
    else
    {
        uint _2257 = _1780 + 3u;
        uint _2261 = _1780 + 11u;
        float _2275 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2257].w)) * _534) * 0.949999988079071044921875);
        float _2276 = _2275 * _2275;
        float _2277 = cbLight._m0[_2257].x + _611;
        float _2278 = cbLight._m0[_2257].y + _612;
        float _2279 = cbLight._m0[_2257].z + _613;
        float _2283 = inversesqrt(dot(vec3(_2277, _2278, _2279), vec3(_2277, _2278, _2279)));
        float _2284 = _2283 * _2277;
        float _2285 = _2283 * _2278;
        float _2286 = _2283 * _2279;
        float _2287 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_2257].xyz));
        float _4281 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2290 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _2291 = dot(vec3(_531, _532, _533), vec3(_2284, _2285, _2286));
        float _4292 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2294 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _2295 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_2284, _2285, _2286));
        float _4303 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2299 = _2276 * _2276;
        float _2303 = ((_2294 * _2294) * (_2299 + (-1.0))) + 1.0;
        float _2312 = (exp2(log2(1.0 - (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2313 = 1.0 - _2276;
        float _2323 = (0.5 / (((_1949 * ((_2290 * _2313) + _2276)) + 9.9999999392252902907785028219223e-09) + (((_1949 * _2313) + _2276) * _2290))) * _2290;
        float _4314 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2325 = (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_2299 / ((_2303 * _2303) * 3.141590118408203125));
        float _2326 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
        _2246 = (((_2312 * cbLight._m0[_2261].x) * _2325) * _2326) + _2136;
        _2248 = (((_2312 * cbLight._m0[_2261].y) * _2325) * _2326) + _2138;
        _2250 = (((_2312 * cbLight._m0[_2261].z) * _2325) * _2326) + _2140;
    }
    float _2461;
    float _2463;
    float _2465;
    float _2467;
    float _2469;
    float _2471;
    if (_1778.y == 0u)
    {
        float _2401 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2402 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2401;
        float _2403 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2401;
        float _2404 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2401;
        uvec4 _2416 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2417 = _2416.x;
        uint _2428 = uint((float(_2416.y) * floor(float(uint(cbSceneParam._m0[85u].y * _632) / _2417))) + floor(float(uint(cbSceneParam._m0[85u].x * _631) / _2417)));
        float _2438 = (log2(_2404 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2439 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        uint _2442 = uint(isnan(14.0) ? _2439 : (isnan(_2439) ? 14.0 : min(_2439, 14.0)));
        uvec4 _2447 = texelFetch(g_lightClusterGridBuffer, int(((_2442 << 2u) + (_2428 << 6u)) >> 2u));
        uint _2448 = _2447.x;
        uint _2449 = _2416.z;
        float _2594;
        float _2596;
        float _2598;
        float _2600;
        float _2602;
        float _2604;
        if (((((1u << ((_2449 >> 4u) & 15u)) + 4294967295u) & _2448) == 0u) || ((_2449 & 240u) == 0u))
        {
            _2594 = 0.0;
            _2596 = 0.0;
            _2598 = 0.0;
            _2600 = 0.0;
            _2602 = 0.0;
            _2604 = 0.0;
        }
        else
        {
            float _2595;
            float _2597;
            float _2599;
            float _2601;
            float _2603;
            float _2605;
            float _2755 = 0.0;
            float _2756 = 0.0;
            float _2757 = 0.0;
            float _2758 = 0.0;
            float _2759 = 0.0;
            float _2760 = 0.0;
            uint _2761 = 0u;
            uint _2770;
            bool _2771;
            for (;;)
            {
                _2770 = texelFetch(g_lightClassification, int((((_2442 << 5u) + (_2428 << 9u)) + (_2761 << 2u)) >> 2u)).x;
                _2771 = _2770 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2771)
                {
                    frontier_phi_66_pred = _2755;
                    frontier_phi_66_pred_1 = _2760;
                    frontier_phi_66_pred_2 = _2759;
                    frontier_phi_66_pred_3 = _2758;
                    frontier_phi_66_pred_4 = _2757;
                    frontier_phi_66_pred_5 = _2756;
                }
                else
                {
                    float _2900;
                    float _2901;
                    float _2902;
                    float _2903;
                    float _2904;
                    float _2905;
                    uint _2906;
                    _2900 = _2755;
                    _2901 = _2756;
                    _2902 = _2757;
                    _2903 = _2758;
                    _2904 = _2759;
                    _2905 = _2760;
                    _2906 = _2770;
                    float _2827;
                    float _2828;
                    float _2829;
                    float _2830;
                    float _2831;
                    float _2832;
                    for (;;)
                    {
                        uint _2910 = uint(findLSB(_2906)) + (_2761 << 5u);
                        uint _2907 = (_2906 + 4294967295u) & _2906;
                        uint _2912 = _2910 * 48u;
                        vec4 _2926 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2912)).x, texelFetch(g_PointLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2912 + 3u)).x));
                        uint _2932 = (_2910 * 48u) + 4u;
                        vec4 _2945 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2932)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 3u)).x));
                        uint _2951 = (_2910 * 48u) + 8u;
                        vec3 _2962 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2951)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 2u)).x));
                        float _2966 = _2926.x - _2402;
                        float _2967 = _2926.y - _2403;
                        float _2968 = _2926.z - _2404;
                        float _2969 = dot(vec3(_2966, _2967, _2968), vec3(_2966, _2967, _2968));
                        float _2972 = inversesqrt(_2969);
                        float _2973 = _2972 * _2966;
                        float _2974 = _2972 * _2967;
                        float _2975 = _2972 * _2968;
                        float _2976 = dot(vec3(_650, _653, _656), vec3(_2973, _2974, _2975));
                        float _2981 = 1.0 - (_2969 * _2926.w);
                        float _4340 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
                        float _2982 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                        float _2983 = sqrt(_2969) * _2945.w;
                        float _2986 = 1.39999997615814208984375 / (_2983 + 1.39999997615814208984375);
                        float _2987 = _2986 * _2986;
                        float _2990 = ((1.0 - _2987) * _2976) + _2987;
                        float _2993 = _2983 * _2983;
                        float _2997 = ((isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0))) * _2982) / ((_2993 * 0.699999988079071044921875) + 1.0);
                        float _3001 = (-0.0) - _2402;
                        float _3002 = (-0.0) - _2403;
                        float _3003 = (-0.0) - _2404;
                        float _3007 = inversesqrt(dot(vec3(_3001, _3002, _3003), vec3(_3001, _3002, _3003)));
                        float _3008 = _3007 * _3001;
                        float _3009 = _3007 * _3002;
                        float _3010 = _3007 * _3003;
                        float _3018 = exp2(log2(1.0 / ((_2993 * 3.5) + 5.0)) * 0.25);
                        float _3019 = 1.0 - _710;
                        float _3026 = sqrt(1.0 - ((1.0 - (_3019 * _3019)) * (1.0 - (_3018 * _3018))));
                        float _3027 = _3026 * _3026;
                        float _3028 = _3027 * _3027;
                        float _3029 = _3008 + _2973;
                        float _3030 = _3009 + _2974;
                        float _3031 = _3010 + _2975;
                        float _3035 = inversesqrt(dot(vec3(_3029, _3030, _3031), vec3(_3029, _3030, _3031)));
                        float _3039 = dot(vec3(_650, _653, _656), vec3(_3008, _3009, _3010));
                        float _4356 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                        float _3042 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                        float _3043 = dot(vec3(_650, _653, _656), vec3(_3035 * _3029, _3035 * _3030, _3035 * _3031));
                        float _4367 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3046 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                        float _3050 = ((_3046 * _3046) * (_3028 + (-1.0))) + 1.0;
                        float _3051 = _2986 * _3027;
                        float _3052 = _3051 * _3051;
                        float _3055 = ((1.0 - _3052) * _2976) + _3052;
                        float _4378 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                        float _3056 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                        float _3057 = 1.0 - _3027;
                        float _3067 = (0.5 / (((_3056 * ((_3042 * _3057) + _3027)) + 9.9999999392252902907785028219223e-09) + (((_3056 * _3057) + _3027) * _3042))) * _3056;
                        float _4389 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                        float _3078 = (((_3028 * 3.1415927410125732421875) * (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0)))) / ((_3050 * _3050) * ((_2993 * 2.1991131305694580078125) + 3.141590118408203125))) * _2982;
                        _2830 = (_2997 * _2945.x) + _2903;
                        _2831 = (_2997 * _2945.y) + _2904;
                        _2832 = (_2997 * _2945.z) + _2905;
                        _2827 = (_3078 * _2962.x) + _2900;
                        _2828 = (_3078 * _2962.y) + _2901;
                        _2829 = (_3078 * _2962.z) + _2902;
                        if (_2907 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2900 = _2827;
                            _2901 = _2828;
                            _2902 = _2829;
                            _2903 = _2830;
                            _2904 = _2831;
                            _2905 = _2832;
                            _2906 = _2907;
                        }
                    }
                    frontier_phi_66_pred = _2827;
                    frontier_phi_66_pred_1 = _2832;
                    frontier_phi_66_pred_2 = _2831;
                    frontier_phi_66_pred_3 = _2830;
                    frontier_phi_66_pred_4 = _2829;
                    frontier_phi_66_pred_5 = _2828;
                }
                _2595 = frontier_phi_66_pred;
                _2605 = frontier_phi_66_pred_1;
                _2603 = frontier_phi_66_pred_2;
                _2601 = frontier_phi_66_pred_3;
                _2599 = frontier_phi_66_pred_4;
                _2597 = frontier_phi_66_pred_5;
                uint _2762 = _2761 + 1u;
                if (_2762 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2755 = _2595;
                    _2756 = _2597;
                    _2757 = _2599;
                    _2758 = _2601;
                    _2759 = _2603;
                    _2760 = _2605;
                    _2761 = _2762;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2594 = _2595;
            _2596 = _2597;
            _2598 = _2599;
            _2600 = _2601;
            _2602 = _2603;
            _2604 = _2605;
        }
        uvec4 _2608 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2609 = _2608.z;
        uint _2611 = (_2609 >> 8u) & 15u;
        float _2723;
        float _2725;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        if (((4294967295u << _2611) & _2448) == 0u)
        {
            _2723 = _2594;
            _2725 = _2596;
            _2727 = _2598;
            _2729 = _2600;
            _2731 = _2602;
            _2733 = _2604;
        }
        else
        {
            float _2748 = inversesqrt(dot(vec3(_2402, _2403, _2404), vec3(_2402, _2403, _2404)));
            float _2749 = _2748 * _2402;
            float _2750 = _2748 * _2403;
            float _2751 = _2748 * _2404;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2611 < ((_2609 >> 12u) & 15u))
            {
                float _2724;
                float _2726;
                float _2728;
                float _2730;
                float _2732;
                float _2734;
                float _2883 = _2594;
                float _2884 = _2596;
                float _2885 = _2598;
                float _2886 = _2600;
                float _2887 = _2602;
                float _2888 = _2604;
                uint _2889 = _2611;
                uint _2898;
                bool _2899;
                for (;;)
                {
                    _2898 = texelFetch(g_lightClassification, int((((_2442 << 5u) + (_2428 << 9u)) + (_2889 << 2u)) >> 2u)).x;
                    _2899 = _2898 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2899)
                    {
                        frontier_phi_77_pred = _2888;
                        frontier_phi_77_pred_1 = _2887;
                        frontier_phi_77_pred_2 = _2886;
                        frontier_phi_77_pred_3 = _2885;
                        frontier_phi_77_pred_4 = _2884;
                        frontier_phi_77_pred_5 = _2883;
                    }
                    else
                    {
                        float _3092;
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3096;
                        float _3097;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3105 = _2883;
                        float _3106 = _2884;
                        float _3107 = _2885;
                        float _3108 = _2886;
                        float _3109 = _2887;
                        float _3110 = _2888;
                        uint _3111 = _2898;
                        uint _3112;
                        vec4 _3137;
                        float _3138;
                        vec4 _3153;
                        vec3 _3165;
                        vec4 _3180;
                        vec4 _3196;
                        float _3243;
                        bool _3244;
                        for (;;)
                        {
                            uint _3122 = ((_2889 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3111));
                            _3112 = (_3111 + 4294967295u) & _3111;
                            uint _3124 = _3122 * 40u;
                            _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            _3138 = _3137.w;
                            uint _3140 = (_3122 * 40u) + 4u;
                            _3153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 3u)).x));
                            uint _3155 = (_3122 * 40u) + 8u;
                            _3165 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x));
                            uint _3167 = (_3122 * 40u) + 16u;
                            _3180 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 3u)).x));
                            uint _3183 = (_3122 * 40u) + 20u;
                            _3196 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 3u)).x));
                            uint _3199 = (_3122 * 40u) + 24u;
                            vec4 _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            uint _3218 = (_3122 * 40u) + 28u;
                            vec4 _3231 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3218)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 3u)).x));
                            _3243 = fma(_2404, _3231.z, fma(_2403, _3231.y, _3231.x * _2402)) + _3231.w;
                            _3244 = !((fma(_2404, _3212.z, fma(_2403, _3212.y, _3212.x * _2402)) + _3212.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3244)
                            {
                                float _3271 = _3137.x - _2402;
                                float _3272 = _3137.y - _2403;
                                float _3273 = _3137.z - _2404;
                                float _3274 = dot(vec3(_3271, _3272, _3273), vec3(_3271, _3272, _3273));
                                float _3277 = inversesqrt(_3274);
                                float _3278 = _3277 * _3271;
                                float _3279 = _3277 * _3272;
                                float _3280 = _3277 * _3273;
                                float _3284 = 1.0 - (_3274 / (_3138 * _3138));
                                float _4400 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3285 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                                float _3289 = sqrt(_3274) * _3153.w;
                                float _3291 = 1.39999997615814208984375 / (_3289 + 1.39999997615814208984375);
                                float _3292 = _3291 * _3291;
                                float _3295 = ((1.0 - _3292) * dot(vec3(_3278, _3279, _3280), vec3(_650, _653, _656))) + _3292;
                                float _3298 = _3289 * _3289;
                                float _3302 = (fma(_2404, _3180.z, fma(_2403, _3180.y, _3180.x * _2402)) + _3180.w) / _3243;
                                float _3303 = (fma(_2404, _3196.z, fma(_2403, _3196.y, _3196.x * _2402)) + _3196.w) / _3243;
                                float _3307 = 1.0 - dot(vec2(_3302, _3303), vec2(_3302, _3303));
                                float _4416 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                                float _3308 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                                float _3309 = _3308 * (((isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0))) * _3285) / ((_3298 * 0.699999988079071044921875) + 1.0));
                                float _3321 = exp2(log2(1.0 / ((_3298 * 3.5) + 5.0)) * 0.25);
                                float _3322 = 1.0 - _710;
                                float _3329 = sqrt(1.0 - ((1.0 - (_3322 * _3322)) * (1.0 - (_3321 * _3321))));
                                float _3330 = _3329 * _3329;
                                float _3331 = _3330 * _3330;
                                float _3332 = _3278 - _2749;
                                float _3333 = _3279 - _2750;
                                float _3334 = _3280 - _2751;
                                float _3338 = inversesqrt(dot(vec3(_3332, _3333, _3334), vec3(_3332, _3333, _3334)));
                                float _3342 = dot(vec3(_650, _653, _656), vec3((-0.0) - _2749, (-0.0) - _2750, (-0.0) - _2751));
                                float _4427 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                                float _3345 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                                float _3346 = dot(vec3(_650, _653, _656), vec3(_3338 * _3332, _3338 * _3333, _3338 * _3334));
                                float _4438 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                                float _3349 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                                float _3353 = ((_3349 * _3349) * (_3331 + (-1.0))) + 1.0;
                                float _3354 = _3291 * _3330;
                                float _3355 = _3354 * _3354;
                                float _3361 = ((1.0 - _3355) * dot(vec3(_650, _653, _656), vec3(_3278, _3279, _3280))) + _3355;
                                float _4449 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3362 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                                float _3363 = 1.0 - _3330;
                                float _3373 = (0.5 / (((_3362 * ((_3345 * _3363) + _3330)) + 9.9999999392252902907785028219223e-09) + (((_3362 * _3363) + _3330) * _3345))) * _3362;
                                float _4460 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3383 = (_3308 * _3285) * (((_3331 * 3.1415927410125732421875) * (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) / ((_3353 * _3353) * ((_3298 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3309 * _3153.y;
                                frontier_phi_83_pred_1 = _3309 * _3153.x;
                                frontier_phi_83_pred_2 = _3383 * _3165.z;
                                frontier_phi_83_pred_3 = _3383 * _3165.y;
                                frontier_phi_83_pred_4 = _3383 * _3165.x;
                                frontier_phi_83_pred_5 = _3309 * _3153.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3391 = frontier_phi_83_pred;
                            _3390 = frontier_phi_83_pred_1;
                            _3389 = frontier_phi_83_pred_2;
                            _3388 = frontier_phi_83_pred_3;
                            _3387 = frontier_phi_83_pred_4;
                            _3392 = frontier_phi_83_pred_5;
                            _3095 = _3390 + _3108;
                            _3096 = _3391 + _3109;
                            _3097 = _3392 + _3110;
                            _3092 = _3387 + _3105;
                            _3093 = _3388 + _3106;
                            _3094 = _3389 + _3107;
                            if (_3112 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3105 = _3092;
                                _3106 = _3093;
                                _3107 = _3094;
                                _3108 = _3095;
                                _3109 = _3096;
                                _3110 = _3097;
                                _3111 = _3112;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3097;
                        frontier_phi_77_pred_1 = _3096;
                        frontier_phi_77_pred_2 = _3095;
                        frontier_phi_77_pred_3 = _3094;
                        frontier_phi_77_pred_4 = _3093;
                        frontier_phi_77_pred_5 = _3092;
                    }
                    _2734 = frontier_phi_77_pred;
                    _2732 = frontier_phi_77_pred_1;
                    _2730 = frontier_phi_77_pred_2;
                    _2728 = frontier_phi_77_pred_3;
                    _2726 = frontier_phi_77_pred_4;
                    _2724 = frontier_phi_77_pred_5;
                    uint _2890 = _2889 + 1u;
                    if (_2890 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2883 = _2724;
                        _2884 = _2726;
                        _2885 = _2728;
                        _2886 = _2730;
                        _2887 = _2732;
                        _2888 = _2734;
                        _2889 = _2890;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2728;
                frontier_phi_58_59_ladder_1 = _2734;
                frontier_phi_58_59_ladder_2 = _2732;
                frontier_phi_58_59_ladder_3 = _2730;
                frontier_phi_58_59_ladder_4 = _2726;
                frontier_phi_58_59_ladder_5 = _2724;
            }
            else
            {
                frontier_phi_58_59_ladder = _2598;
                frontier_phi_58_59_ladder_1 = _2604;
                frontier_phi_58_59_ladder_2 = _2602;
                frontier_phi_58_59_ladder_3 = _2600;
                frontier_phi_58_59_ladder_4 = _2596;
                frontier_phi_58_59_ladder_5 = _2594;
            }
            _2723 = frontier_phi_58_59_ladder_5;
            _2725 = frontier_phi_58_59_ladder_4;
            _2727 = frontier_phi_58_59_ladder;
            _2729 = frontier_phi_58_59_ladder_3;
            _2731 = frontier_phi_58_59_ladder_2;
            _2733 = frontier_phi_58_59_ladder_1;
        }
        float _2738 = isnan(1.0) ? _694 : (isnan(_694) ? 1.0 : min(_694, 1.0));
        _2461 = (_2738 * _2729) + _1913;
        _2463 = (_2738 * _2731) + _1915;
        _2465 = (_2738 * _2733) + _1917;
        _2467 = ((_2723 * 0.039999999105930328369140625) * _2738) + _2246;
        _2469 = ((_2725 * 0.039999999105930328369140625) * _2738) + _2248;
        _2471 = ((_2727 * 0.039999999105930328369140625) * _2738) + _2250;
    }
    else
    {
        _2461 = _1913;
        _2463 = _1915;
        _2465 = _1917;
        _2467 = _2246;
        _2469 = _2248;
        _2471 = _2250;
    }
    uint _2477 = _670 + uint(cbMatDynParam._m0[0u].w);
    float _2483 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].y;
    float _2489 = (((((_2483 * cbMtdParam._m0[10u].x) * _412.x) * _435) * _510) * (((1.0 - _489) * cbMtdParam._m0[16u].y) + _489)) * cbInstanceData._m0[_2477].x;
    float _2495 = (((((_2483 * cbMtdParam._m0[10u].y) * _412.y) * _435) * _510) * (((1.0 - _491) * cbMtdParam._m0[16u].y) + _491)) * cbInstanceData._m0[_2477].y;
    float _2501 = (((((_2483 * cbMtdParam._m0[10u].z) * _412.z) * _435) * _510) * (((1.0 - _493) * cbMtdParam._m0[16u].y) + _493)) * cbInstanceData._m0[_2477].z;
    float _4476 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _4487 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _4498 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _2518 = (((isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2461 + ((isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))) * _694))) + ((_2467 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _1531)) * cbPerFrame._m0[3u].x)) + _2489;
    float _2520 = (_2495 + ((_2469 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _1531)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2463 + ((isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))) * _694)));
    float _2522 = (_2501 + ((_2471 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _1531)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (_2465 + ((isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))) * _694)));
    float _2523 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2524 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2525 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
    float _2531 = cbMtdParam._m0[2u].x * _2489;
    float _2532 = cbMtdParam._m0[2u].y * _2495;
    float _2533 = cbMtdParam._m0[2u].z * _2501;
    float _4524 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2535 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
    uint _2536 = _669 + 6u;
    float _2544 = _631 / cbSceneParam._m0[86u].x;
    float _2545 = _632 / cbSceneParam._m0[86u].y;
    vec4 _2559 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2544, _2545, (log2((isnan(cbSceneParam._m0[77u].w) ? _553 : (isnan(_553) ? cbSceneParam._m0[77u].w : min(_553, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2561 = _2559.x;
    float _2562 = _2559.y;
    float _2563 = _2559.z;
    float _2564 = _2559.w;
    float _2656;
    float _2658;
    float _2660;
    float _2662;
    if (_553 > cbSceneParam._m0[78u].w)
    {
        float _2619 = isnan(_553) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _553 : min(cbSceneParam._m0[80u].w, _553));
        float _2620 = _2619 / _553;
        float _2631 = _2620 * _604;
        float _2632 = _605 * _2620;
        float _2633 = (-0.0) - _2632;
        float _2634 = _2620 * _606;
        float _2636 = (cbSceneParam._m0[77u].w * _2633) / _2619;
        float _2637 = _2636 + cbSceneParam._m0[79u].w;
        float _2638 = cbSceneParam._m0[79u].w - _2632;
        float _2644 = sqrt(((_2631 * _2631) + (_2632 * _2632)) + (_2634 * _2634));
        float _2647 = (1.0 - (cbSceneParam._m0[77u].w / _2619)) * _2644;
        float _2652 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2654 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2840;
        if (abs((_2633 - _2636) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2840 = ((((_2637 > 0.0) ? exp2(_2652 * _2637) : (2.0 - exp2(_2654 * _2637))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2647;
        }
        else
        {
            float _2784 = 1.0 / cbSceneParam._m0[80u].x;
            float _2785 = isnan(_2638) ? _2637 : (isnan(_2637) ? _2638 : max(_2637, _2638));
            float _2786 = isnan(_2638) ? _2637 : (isnan(_2637) ? _2638 : min(_2637, _2638));
            float _2795 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : min(_2785, 0.0));
            float _2796 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : min(_2786, 0.0));
            _2840 = ((abs(_2644 / _2633) * cbSceneParam._m0[80u].y) * ((((_2795 - _2796) * 2.0) - ((exp2(_2652 * (isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0)))) - exp2(_2652 * (isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0))))) * _2784)) - ((exp2(_2654 * _2795) - exp2(_2654 * _2796)) * _2784))) + (_2647 * cbSceneParam._m0[80u].z);
        }
        vec4 _2842 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2544, _2545, 1.0), 0.0);
        float _2851 = exp2((_2840 * (-1.44269502162933349609375)) * (1.0 - _2842.w));
        float _2852 = log2(_2851);
        float _2868 = log2(_2564);
        _2656 = (exp2(_2868 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2852 * cbSceneParam._m0[78u].x)) * _2842.x) / cbSceneParam._m0[78u].x)) + _2561;
        _2658 = (exp2(_2868 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2852 * cbSceneParam._m0[78u].y)) * _2842.y) / cbSceneParam._m0[78u].y)) + _2562;
        _2660 = (exp2(_2868 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2852 * cbSceneParam._m0[78u].z)) * _2842.z) / cbSceneParam._m0[78u].z)) + _2563;
        _2662 = _2851 * _2564;
    }
    else
    {
        _2656 = _2561;
        _2658 = _2562;
        _2660 = _2563;
        _2662 = _2564;
    }
    bool _2878;
    vec4 _2672;
    vec4 _2694;
    float _2696;
    float _2700;
    float _2701;
    float _2702;
    float _2705;
    float _2708;
    float _2711;
    float _2712;
    bool _2722;
    for (;;)
    {
        _2672 = cbMatDynParam._m0[0u];
        float _2674 = roundEven(_2672.y);
        bool _2675 = _2674 == 3.0;
        float _2676 = log2(_2662);
        float _2680 = exp2(_2676 * cbSceneParam._m0[78u].x);
        float _2681 = exp2(_2676 * cbSceneParam._m0[78u].y);
        float _2682 = exp2(_2676 * cbSceneParam._m0[78u].z);
        float _2683 = _2680 * _2523;
        float _2684 = _2681 * _2524;
        float _2685 = _2682 * _2525;
        float _2692 = _620 + (-0.5);
        _2694 = cbMtdParam._m0[1u];
        _2696 = _2694.y * _2692;
        float _2699 = (_2674 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2700 = _2699 * (_2675 ? _2683 : (_2683 + (cbSceneParam._m0[72u].w * _2656)));
        _2701 = _2699 * (_2675 ? _2684 : (_2684 + (cbSceneParam._m0[72u].w * _2658)));
        _2702 = _2699 * (_2675 ? _2685 : (_2685 + (cbSceneParam._m0[72u].w * _2660)));
        _2705 = ((_2531 * _2535) * _2680) * _2699;
        _2708 = ((_2532 * _2535) * _2681) * _2699;
        _2711 = ((_2533 * _2535) * _2682) * _2699;
        _2712 = _2692 * 0.999000012874603271484375;
        _2722 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2722)
        {
            if ((cbInstanceData._m0[_669 + 7u].x + _2712) < 0.5)
            {
                _2878 = true;
                break;
            }
        }
        uint _2819 = _670 + uint(_2672.w);
        if ((cbInstanceData._m0[_2819].w < 1.0) && ((cbInstanceData._m0[_2819].w + _2712) < 0.5))
        {
            _2878 = true;
            break;
        }
        if ((_2696 + 1.0) < _2694.x)
        {
            _2878 = true;
            break;
        }
        _2878 = false;
        break;
    }
    float _3083;
    if (_2878)
    {
        discard_state = true;
        _3083 = 0.0;
    }
    else
    {
        _3083 = cbInstanceData._m0[_2536].w;
    }
    SV_Target.x = _2700;
    SV_Target.y = _2701;
    SV_Target.z = _2702;
    SV_Target.w = _3083;
    SV_Target_1.x = _2705;
    SV_Target_1.y = _2708;
    SV_Target_1.z = _2711;
    SV_Target_1.w = cbInstanceData._m0[_2536].w;
    discard_exit();
}


