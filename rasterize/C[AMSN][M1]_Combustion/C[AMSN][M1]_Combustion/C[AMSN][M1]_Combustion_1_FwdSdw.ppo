#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1051;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _247 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _253 = _247.x * cbMtdParam._m0[9u].x;
    float _254 = _247.y * cbMtdParam._m0[9u].y;
    float _255 = _247.z * cbMtdParam._m0[9u].z;
    vec4 _278 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _298 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _301 = _298.x + 0.00999999977648258209228515625;
    float _309 = (TEXCOORD_8 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_8)) * _301)) * (cbMtdParam._m0[15u].z + 1.0);
    float _3697 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _310 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    float _317 = (_310 * ((_278.x * cbMtdParam._m0[12u].x) - _253)) + _253;
    float _318 = (_310 * ((_278.y * cbMtdParam._m0[12u].y) - _254)) + _254;
    float _319 = (_310 * ((_278.z * cbMtdParam._m0[12u].z) - _255)) + _255;
    vec4 _331 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    vec4 _354 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _358 = _354.z;
    float _361 = (_354.x * 2.0) + (-1.0);
    float _362 = (_354.y * 2.0) + (-1.0);
    float _363 = dot(vec2(_361, _362), vec2(_361, _362));
    float _3708 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _368 = sqrt(1.0 - (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))));
    float _376 = (((_331.z - _358) * TEXCOORD_8) * cbMtdParam._m0[16u].x) + _358;
    vec4 _410 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _424 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3719 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _433 = (((_425 * _425) * (3.0 - (_425 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _442 = cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x;
    float _450 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3730 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _451 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _455 = (_451 * _451) * (3.0 - (_451 * 2.0));
    float _456 = _455 * cbMtdParam._m0[16u].w;
    float _457 = _455 * cbMtdParam._m0[17u].x;
    float _458 = sin(_442);
    float _459 = cos(_442);
    float _460 = TEXCOORD.z - _456;
    float _461 = TEXCOORD.w - _457;
    vec4 _481 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_456 + fma(_461, (-0.0) - _458, _460 * _459))) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (fma(_461, _459, _460 * _458) + _457)) + cbTextureTilingScale._m0[0u].w));
    float _487 = (cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].w) * _481.x;
    float _489 = (cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].w) * _481.y;
    float _491 = (cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].w) * _481.z;
    float _507 = (TEXCOORD_5.x - ((_301 * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[16u].z)) * (cbMtdParam._m0[13u].x + 1.0);
    float _3741 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _508 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _514 = ((((_331.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[15u].x) + _361;
    float _515 = ((((_331.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[15u].x) + _362;
    float _518 = fma(_368, _218 * NORMAL.x, fma(_515, _225 * TANGENT.x, (_211 * _203) * _514));
    float _521 = fma(_368, _218 * NORMAL.y, fma(_515, _225 * TANGENT.y, (_211 * _204) * _514));
    float _524 = fma(_368, _218 * NORMAL.z, fma(_515, _225 * TANGENT.z, (_211 * _205) * _514));
    float _528 = inversesqrt(dot(vec3(_518, _521, _524), vec3(_518, _521, _524)));
    float _529 = _528 * _518;
    float _530 = _528 * _521;
    float _531 = _528 * _524;
    float _3752 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _532 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _3763 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3774 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3785 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _551 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _592 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _602 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _592);
    float _603 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _592);
    float _604 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _592);
    float _608 = inversesqrt(dot(vec3(_602, _603, _604), vec3(_602, _603, _604)));
    float _609 = _602 * _608;
    float _610 = _603 * _608;
    float _611 = _604 * _608;
    float _617 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _618 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _636 = fma(_531, cbSceneParam._m0[5u].z, fma(_530, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _529));
    float _639 = fma(_531, cbSceneParam._m0[6u].z, fma(_530, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _529));
    float _642 = fma(_531, cbSceneParam._m0[7u].z, fma(_530, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _529));
    uint _655 = uint(roundEven(NORMAL.w)) * 13u;
    uint _656 = _655 + 9u;
    uint _657 = _656 + uint(cbMatDynParam._m0[0u].w);
    float _663 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0)))) * cbInstanceData._m0[_657].x;
    float _664 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0)))) * cbInstanceData._m0[_657].y;
    float _665 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) * cbInstanceData._m0[_657].z;
    float _3796 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _666 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _3807 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _667 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _3818 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _668 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    vec4 _677 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _617, cbSceneParam._m0[86u].y * _618));
    float _680 = _677.x * TEXCOORD_5.w;
    float _681 = dot(vec3(_529, _530, _531), vec3(_609, _610, _611));
    float _684 = _681 * 2.0;
    float _688 = (_684 * _529) - _609;
    float _689 = (_684 * _530) - _610;
    float _690 = (_684 * _531) - _611;
    float _694 = abs(dot(vec3(_609, _610, _611), vec3(_529, _530, _531)));
    float _3829 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _696 = sqrt(_532);
    float _708 = exp2((_696 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_696 * 3.0));
    float _740 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1050;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _775 = fma(_748, cbModelParam._m0[26u].z, fma(_744, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _740));
        float _779 = fma(_748, cbModelParam._m0[27u].z, fma(_744, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _740));
        float _783 = fma(_748, cbModelParam._m0[28u].z, fma(_744, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _740));
        float _808 = _740 + _529;
        float _809 = _744 + _530;
        float _810 = _748 + _531;
        float _820 = fma(_810, cbModelParam._m0[26u].z, fma(_809, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _808)) - _775;
        float _821 = fma(_810, cbModelParam._m0[27u].z, fma(_809, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _808)) - _779;
        float _822 = fma(_810, cbModelParam._m0[28u].z, fma(_809, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _808)) - _783;
        float _826 = inversesqrt(dot(vec3(_820, _821, _822), vec3(_820, _821, _822)));
        float _839 = ((_826 * _820) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_775 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _840 = ((_826 * _821) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_779 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _841 = ((_826 * _822) / cbModelParam._m0[34u].z) + ((((((_783 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_839, _840, _841), 0.0);
        float _878 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_844.x + (-0.5));
        float _880 = _878 * (_844.y + (-0.5));
        float _881 = _878 * (_844.z + (-0.5));
        float _888 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_851.x + (-0.5));
        float _890 = _888 * (_851.y + (-0.5));
        float _891 = _888 * (_851.z + (-0.5));
        float _898 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_858.x + (-0.5));
        float _900 = _898 * (_858.y + (-0.5));
        float _901 = _898 * (_858.z + (-0.5));
        float _908 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_865.x + (-0.5));
        float _910 = _908 * (_865.y + (-0.5));
        float _911 = _908 * (_865.z + (-0.5));
        float _912 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _913 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _914 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _915 = _879 * 0.5;
        float _916 = _889 * 0.5;
        float _917 = _899 * 0.5;
        float _918 = dot(vec3(_915, _916, _917), vec3(_915, _916, _917));
        float _923 = (_918 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_918);
        float _932 = (dot(vec3(_529, _530, _531), vec3(_923 * _915, _923 * _916, _923 * _917)) + 1.0) * 0.5;
        float _3855 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _942 = sqrt(((_916 * _916) + (_915 * _915)) + (_917 * _917)) / (_912 + 9.9999997473787516355514526367188e-06);
        float _3866 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _944 = _943 * 2.0;
        float _948 = (1.0 - _943) / (_943 + 1.0);
        float _3877 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _958 = ((((1.0 - _949) * (_944 + 2.0)) * exp2(log2(isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_944 + 1.0))) + _949) * _912;
        float _959 = _880 * 0.5;
        float _960 = _890 * 0.5;
        float _961 = _900 * 0.5;
        float _962 = dot(vec3(_959, _960, _961), vec3(_959, _960, _961));
        float _967 = (_962 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_962);
        float _975 = (dot(vec3(_529, _530, _531), vec3(_967 * _959, _967 * _960, _967 * _961)) + 1.0) * 0.5;
        float _3888 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _984 = sqrt(((_960 * _960) + (_959 * _959)) + (_961 * _961)) / (_913 + 9.9999997473787516355514526367188e-06);
        float _3899 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _986 = _985 * 2.0;
        float _990 = (1.0 - _985) / (_985 + 1.0);
        float _3910 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1000 = ((((1.0 - _991) * (_986 + 2.0)) * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_986 + 1.0))) + _991) * _913;
        float _1001 = _881 * 0.5;
        float _1002 = _891 * 0.5;
        float _1003 = _901 * 0.5;
        float _1004 = dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003));
        float _1009 = (_1004 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1004);
        float _1017 = (dot(vec3(_529, _530, _531), vec3(_1009 * _1001, _1009 * _1002, _1009 * _1003)) + 1.0) * 0.5;
        float _3921 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1026 = sqrt(((_1002 * _1002) + (_1001 * _1001)) + (_1003 * _1003)) / (_914 + 9.9999997473787516355514526367188e-06);
        float _3932 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1028 = _1027 * 2.0;
        float _1032 = (1.0 - _1027) / (_1027 + 1.0);
        float _3943 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1042 = ((((1.0 - _1033) * (_1028 + 2.0)) * exp2(log2(isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_1028 + 1.0))) + _1033) * _914;
        _1050 = _881;
        _1052 = _880;
        _1053 = _879;
        _1054 = _891;
        _1055 = _890;
        _1056 = _889;
        _1057 = _901;
        _1058 = _900;
        _1059 = _899;
        _1060 = _914;
        _1061 = _913;
        _1062 = _912;
        _1063 = cbModelParam._m0[36u].z * (isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0)));
        _1064 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0)));
        _1065 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0)));
    }
    else
    {
        _1050 = _1051;
        _1052 = _1051;
        _1053 = _1051;
        _1054 = _1051;
        _1055 = _1051;
        _1056 = _1051;
        _1057 = _1051;
        _1058 = _1051;
        _1059 = _1051;
        _1060 = _1051;
        _1061 = _1051;
        _1062 = _1051;
        _1063 = 0.0;
        _1064 = 0.0;
        _1065 = 0.0;
    }
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1091 = fma(_748, cbModelParam._m0[30u].z, fma(_744, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _740));
        float _1095 = fma(_748, cbModelParam._m0[31u].z, fma(_744, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _740));
        float _1099 = fma(_748, cbModelParam._m0[32u].z, fma(_744, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _740));
        float _1122 = _740 + _529;
        float _1123 = _744 + _530;
        float _1124 = _748 + _531;
        float _1134 = fma(_1124, cbModelParam._m0[30u].z, fma(_1123, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1122)) - _1091;
        float _1135 = fma(_1124, cbModelParam._m0[31u].z, fma(_1123, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1122)) - _1095;
        float _1136 = fma(_1124, cbModelParam._m0[32u].z, fma(_1123, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1122)) - _1099;
        float _1140 = inversesqrt(dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136)));
        float _1153 = ((_1140 * _1134) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1091 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1154 = ((_1140 * _1135) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1095 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1155 = ((_1140 * _1136) / cbModelParam._m0[35u].z) + ((((((_1099 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1153, _1154, _1155), 0.0);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1153, _1154, _1155), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1153, _1154, _1155), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1153, _1154, _1155), 0.0);
        float _1190 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1157.x + (-0.5));
        float _1192 = _1190 * (_1157.y + (-0.5));
        float _1193 = _1190 * (_1157.z + (-0.5));
        float _1200 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1164.x + (-0.5));
        float _1202 = _1200 * (_1164.y + (-0.5));
        float _1203 = _1200 * (_1164.z + (-0.5));
        float _1210 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1171.x + (-0.5));
        float _1212 = _1210 * (_1171.y + (-0.5));
        float _1213 = _1210 * (_1171.z + (-0.5));
        float _1220 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1178.x + (-0.5));
        float _1222 = _1220 * (_1178.y + (-0.5));
        float _1223 = _1220 * (_1178.z + (-0.5));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = _1191 * 0.5;
        float _1228 = _1201 * 0.5;
        float _1229 = _1211 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1243 = (dot(vec3(_529, _530, _531), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _3984 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1252 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _3995 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _4006 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_1254 + 1.0))) + _1259) * _1224;
        float _1269 = _1192 * 0.5;
        float _1270 = _1202 * 0.5;
        float _1271 = _1212 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_529, _530, _531), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _4017 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _4028 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _4039 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1296 + 1.0))) + _1301) * _1225;
        float _1311 = _1193 * 0.5;
        float _1312 = _1203 * 0.5;
        float _1313 = _1213 * 0.5;
        float _1314 = dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313));
        float _1319 = (_1314 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1314);
        float _1327 = (dot(vec3(_529, _530, _531), vec3(_1319 * _1311, _1319 * _1312, _1319 * _1313)) + 1.0) * 0.5;
        float _4050 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1336 = sqrt(((_1312 * _1312) + (_1311 * _1311)) + (_1313 * _1313)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _4061 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1338 = _1337 * 2.0;
        float _1342 = (1.0 - _1337) / (_1337 + 1.0);
        float _4072 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1352 = ((((1.0 - _1343) * (_1338 + 2.0)) * exp2(log2(isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_1338 + 1.0))) + _1343) * _1226;
        _1360 = _1193;
        _1361 = _1192;
        _1362 = _1191;
        _1363 = _1203;
        _1364 = _1202;
        _1365 = _1201;
        _1366 = _1213;
        _1367 = _1212;
        _1368 = _1211;
        _1369 = _1226;
        _1370 = _1225;
        _1371 = _1224;
        _1372 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
        _1373 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
        _1374 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)));
    }
    else
    {
        _1360 = _1051;
        _1361 = _1051;
        _1362 = _1051;
        _1363 = _1051;
        _1364 = _1051;
        _1365 = _1051;
        _1366 = _1051;
        _1367 = _1051;
        _1368 = _1051;
        _1369 = _1051;
        _1370 = _1051;
        _1371 = _1051;
        _1372 = 0.0;
        _1373 = 0.0;
        _1374 = 0.0;
    }
    float _1384 = (cbModelParam._m0[1u].x * (_1372 - _1063)) + _1063;
    float _1385 = (cbModelParam._m0[1u].x * (_1373 - _1064)) + _1064;
    float _1386 = (cbModelParam._m0[1u].x * (_1374 - _1065)) + _1065;
    float _1407 = fma(_1386, cbSceneParam._m0[89u].z, fma(_1385, cbSceneParam._m0[89u].y, _1384 * cbSceneParam._m0[89u].x));
    float _1410 = fma(_1386, cbSceneParam._m0[90u].z, fma(_1385, cbSceneParam._m0[90u].y, _1384 * cbSceneParam._m0[90u].x));
    float _1413 = fma(_1386, cbSceneParam._m0[91u].z, fma(_1385, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1384));
    float _1428 = _688 * 0.5;
    float _1429 = _689 * 0.5;
    float _1430 = _690 * 0.5;
    float _1431 = dot(vec4(_1428, _1429, _1430, 1.0), vec4(_1362, _1365, _1368, _1371));
    float _1434 = dot(vec4(_1428, _1429, _1430, 1.0), vec4(_1361, _1364, _1367, _1370));
    float _1437 = dot(vec4(_1428, _1429, _1430, 1.0), vec4(_1360, _1363, _1366, _1369));
    float _1471;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1444 = dot(vec4(_1428, _1429, _1430, 1.0), vec4(_1050, _1054, _1057, _1060));
        float _1448 = dot(vec4(_1428, _1429, _1430, 1.0), vec4(_1052, _1055, _1058, _1061));
        float _1452 = dot(vec4(_1428, _1429, _1430, 1.0), vec4(_1053, _1056, _1059, _1062));
        float _1459 = dot(vec4(cbModelParam._m0[39u]), vec4(_1428, _1429, _1430, 1.0));
        _1471 = dot(vec3(isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)), isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)), isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1459) ? 0.0 : (isnan(0.0) ? _1459 : max(0.0, _1459))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1471 = 1.0;
    }
    float _1482;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1473 = dot(vec4(cbModelParam._m0[40u]), vec4(_1428, _1429, _1430, 1.0));
        _1482 = dot(vec3(isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)), isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)), isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1473) ? 0.0 : (isnan(0.0) ? _1473 : max(0.0, _1473))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1482 = 1.0;
    }
    float _1486 = (_1482 * cbModelParam._m0[1u].x) + (_1471 * (1.0 - cbModelParam._m0[1u].x));
    float _1496 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _532);
    float _1497 = isnan(_1496) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1496 : min(cbModelParam._m0[25u].z, _1496));
    float _1577;
    float _1579;
    float _1581;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1544 = fma(_748, cbModelParam._m0[13u].z, fma(_744, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _740)) + cbModelParam._m0[13u].w;
        float _1548 = fma(_748, cbModelParam._m0[14u].z, fma(_744, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _740)) + cbModelParam._m0[14u].w;
        float _1552 = fma(_748, cbModelParam._m0[15u].z, fma(_744, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _740)) + cbModelParam._m0[15u].w;
        float _1555 = fma(_690, cbModelParam._m0[13u].z, fma(_689, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _688));
        float _1558 = fma(_690, cbModelParam._m0[14u].z, fma(_689, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _688));
        float _1561 = fma(_690, cbModelParam._m0[15u].z, fma(_689, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _688));
        float _1589;
        if (_1555 > 0.0)
        {
            _1589 = abs((1.0 - _1544) / _1555);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1544 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1589 = frontier_phi_14_12_ladder;
        }
        float _1760;
        if (_1558 > 0.0)
        {
            _1760 = abs((1.0 - _1548) / _1558);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1548 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1760 = frontier_phi_23_19_ladder;
        }
        float _2056;
        if (_1561 > 0.0)
        {
            _2056 = abs((1.0 - _1552) / _1561);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1552 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2056 = frontier_phi_35_30_ladder;
        }
        float _2058 = isnan(_1760) ? _1589 : (isnan(_1589) ? _1760 : min(_1589, _1760));
        float _2059 = isnan(_2056) ? _2058 : (isnan(_2058) ? _2056 : min(_2058, _2056));
        float _2063 = (_2059 * _1555) + _1544;
        float _2064 = (_2059 * _1558) + _1548;
        float _2065 = (_2059 * _1561) + _1552;
        float _2066 = _2059 * 9.9999997473787516355514526367188e-05;
        float _2068 = (-1.0) - _2066;
        float _2070 = _2066 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2065 > _2070) || ((_2065 < _2068) || ((_2064 > _2070) || ((_2064 < _2068) || ((_2063 < _2068) || (_2063 > _2070))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2210 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2065, cbModelParam._m0[9u].z, fma(_2064, cbModelParam._m0[9u].y, _2063 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2065, cbModelParam._m0[10u].z, fma(_2064, cbModelParam._m0[10u].y, _2063 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2065, cbModelParam._m0[11u].z, fma(_2064, cbModelParam._m0[11u].y, _2063 * cbModelParam._m0[11u].x))), _1497);
            frontier_phi_13_35_ladder = _2210.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2210.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2210.x * cbModelParam._m0[1u].y;
        }
        _1577 = frontier_phi_13_35_ladder_2;
        _1579 = frontier_phi_13_35_ladder_1;
        _1581 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1565 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_688, _689, _690), _1497);
        _1577 = _1565.x * cbModelParam._m0[1u].y;
        _1579 = _1565.y * cbModelParam._m0[1u].y;
        _1581 = _1565.z * cbModelParam._m0[1u].y;
    }
    float _1585 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _532);
    float _1586 = isnan(_1585) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1585 : min(cbModelParam._m0[25u].w, _1585));
    float _1677;
    float _1679;
    float _1681;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1641 = fma(_748, cbModelParam._m0[21u].z, fma(_744, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _740)) + cbModelParam._m0[21u].w;
        float _1645 = fma(_748, cbModelParam._m0[22u].z, fma(_744, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _740)) + cbModelParam._m0[22u].w;
        float _1649 = fma(_748, cbModelParam._m0[23u].z, fma(_744, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _740)) + cbModelParam._m0[23u].w;
        float _1652 = fma(_690, cbModelParam._m0[21u].z, fma(_689, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _688));
        float _1655 = fma(_690, cbModelParam._m0[22u].z, fma(_689, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _688));
        float _1658 = fma(_690, cbModelParam._m0[23u].z, fma(_689, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _688));
        float _1765;
        if (_1652 > 0.0)
        {
            _1765 = abs((1.0 - _1641) / _1652);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1641 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1765 = frontier_phi_25_21_ladder;
        }
        float _2083;
        if (_1655 > 0.0)
        {
            _2083 = abs((1.0 - _1645) / _1655);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1645 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2083 = frontier_phi_37_32_ladder;
        }
        float _2410;
        if (_1658 > 0.0)
        {
            _2410 = abs((1.0 - _1649) / _1658);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1649 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2410 = frontier_phi_47_44_ladder;
        }
        float _2412 = isnan(_2083) ? _1765 : (isnan(_1765) ? _2083 : min(_1765, _2083));
        float _2413 = isnan(_2410) ? _2412 : (isnan(_2412) ? _2410 : min(_2412, _2410));
        float _2417 = (_2413 * _1652) + _1641;
        float _2418 = (_2413 * _1655) + _1645;
        float _2419 = (_2413 * _1658) + _1649;
        float _2420 = _2413 * 9.9999997473787516355514526367188e-05;
        float _2421 = (-1.0) - _2420;
        float _2423 = _2420 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2419 > _2423) || ((_2419 < _2421) || ((_2418 > _2423) || ((_2418 < _2421) || ((_2417 < _2421) || (_2417 > _2423))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2537 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2419, cbModelParam._m0[17u].z, fma(_2418, cbModelParam._m0[17u].y, _2417 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2419, cbModelParam._m0[18u].z, fma(_2418, cbModelParam._m0[18u].y, _2417 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2419, cbModelParam._m0[19u].z, fma(_2418, cbModelParam._m0[19u].y, _2417 * cbModelParam._m0[19u].x))), _1586);
            frontier_phi_22_47_ladder = _2537.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2537.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2537.x * cbModelParam._m0[1u].z;
        }
        _1677 = frontier_phi_22_47_ladder_2;
        _1679 = frontier_phi_22_47_ladder_1;
        _1681 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1661 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_688, _689, _690), _1586);
        _1677 = _1661.x * cbModelParam._m0[1u].z;
        _1679 = _1661.y * cbModelParam._m0[1u].z;
        _1681 = _1661.z * cbModelParam._m0[1u].z;
    }
    float _1693 = ((((1.0 - _708) * ((_696 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_708 * _696)) * _680;
    float _1694 = _1693 * ((cbModelParam._m0[1u].w * (_1677 - _1577)) + _1577);
    float _1695 = _1693 * ((cbModelParam._m0[1u].w * (_1679 - _1579)) + _1579);
    float _1696 = _1693 * ((cbModelParam._m0[1u].w * (_1681 - _1581)) + _1581);
    float _1699 = fma(_1696, cbSceneParam._m0[89u].z, fma(_1695, cbSceneParam._m0[89u].y, _1694 * cbSceneParam._m0[89u].x));
    float _1702 = fma(_1696, cbSceneParam._m0[90u].z, fma(_1695, cbSceneParam._m0[90u].y, _1694 * cbSceneParam._m0[90u].x));
    float _1705 = fma(_1696, cbSceneParam._m0[91u].z, fma(_1695, cbSceneParam._m0[91u].y, _1694 * cbSceneParam._m0[91u].x));
    float _1739 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1743 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1747 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1751 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1752 = _1739 / _1751;
    float _1753 = _1743 / _1751;
    float _1754 = _1747 / _1751;
    float _1901;
    float _1902;
    float _1903;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1781 = ((uint(_1754 > cbSceneParam._m0[59u].y) + uint(_1754 > cbSceneParam._m0[59u].x)) + uint(_1754 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1782 = _1781 + 43u;
        uint _1790 = _1781 + 44u;
        uint _1798 = _1781 + 45u;
        uint _1806 = _1781 + 46u;
        float _1817 = fma(_1751, cbSceneParam._m0[_1782].w, fma(_1747, cbSceneParam._m0[_1782].z, fma(_1743, cbSceneParam._m0[_1782].y, _1739 * cbSceneParam._m0[_1782].x)));
        float _1821 = fma(_1751, cbSceneParam._m0[_1790].w, fma(_1747, cbSceneParam._m0[_1790].z, fma(_1743, cbSceneParam._m0[_1790].y, _1739 * cbSceneParam._m0[_1790].x)));
        float _1829 = fma(_1751, cbSceneParam._m0[_1806].w, fma(_1747, cbSceneParam._m0[_1806].z, fma(_1743, cbSceneParam._m0[_1806].y, _1739 * cbSceneParam._m0[_1806].x)));
        float _1834 = cbSceneParam._m0[33u].z * _1829;
        float _1836 = cbSceneParam._m0[33u].w * _1829;
        float _1839 = fma(_1751, cbSceneParam._m0[_1798].w, fma(_1747, cbSceneParam._m0[_1798].z, fma(_1743, cbSceneParam._m0[_1798].y, _1739 * cbSceneParam._m0[_1798].x))) / _1829;
        float _1887 = (cbSceneParam._m0[33u].x - sqrt(((_1753 * _1753) + (_1752 * _1752)) + (_1754 * _1754))) * cbSceneParam._m0[33u].y;
        float _4198 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1894 = (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1834 + _1817) / _1829, (_1836 + _1821) / _1829), _1839), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1836 + _1817) / _1829, (_1821 - _1834) / _1829), _1839), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1817 - _1834) / _1829, (_1821 - _1836) / _1829), _1839), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1817 - _1836) / _1829, (_1834 + _1821) / _1829), _1839), 0.0)).x), vec4(0.25)));
        _1901 = 1.0 - (_1894 * cbSceneParam._m0[34u].x);
        _1902 = 1.0 - (_1894 * cbSceneParam._m0[34u].y);
        _1903 = 1.0 - (_1894 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1901 = 1.0;
        _1902 = 1.0;
        _1903 = 1.0;
    }
    float _1967;
    float _1969;
    float _1971;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1955 = fma(_1751, cbSceneParam._m0[63u].w, fma(_1747, cbSceneParam._m0[63u].z, fma(_1743, cbSceneParam._m0[63u].y, _1739 * cbSceneParam._m0[63u].x)));
        float _1956 = fma(_1751, cbSceneParam._m0[60u].w, fma(_1747, cbSceneParam._m0[60u].z, fma(_1743, cbSceneParam._m0[60u].y, _1739 * cbSceneParam._m0[60u].x))) / _1955;
        float _1957 = fma(_1751, cbSceneParam._m0[61u].w, fma(_1747, cbSceneParam._m0[61u].z, fma(_1743, cbSceneParam._m0[61u].y, _1739 * cbSceneParam._m0[61u].x))) / _1955;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1956 >= cbSceneParam._m0[64u].x) && (_1957 >= cbSceneParam._m0[64u].y)) && (_1956 <= cbSceneParam._m0[64u].z)) && (_1957 <= cbSceneParam._m0[64u].w))
        {
            float _2096 = fma(_1751, cbSceneParam._m0[62u].w, fma(_1747, cbSceneParam._m0[62u].z, fma(_1743, cbSceneParam._m0[62u].y, _1739 * cbSceneParam._m0[62u].x))) / _1955;
            float _2100 = isnan(cbSceneParam._m0[41u].w) ? _2096 : (isnan(_2096) ? cbSceneParam._m0[41u].w : max(_2096, cbSceneParam._m0[41u].w));
            float _2143 = (cbSceneParam._m0[33u].x - sqrt(((_1753 * _1753) + (_1752 * _1752)) + (_1754 * _1754))) * cbSceneParam._m0[33u].y;
            float _4214 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
            float _2150 = (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1956, cbSceneParam._m0[33u].w + _1957), _2100), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1956, _1957 - cbSceneParam._m0[33u].z), _2100), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1956 - cbSceneParam._m0[33u].z, _1957 - cbSceneParam._m0[33u].w), _2100), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1956 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1957), _2100), 0.0)).x), vec4(0.25)));
            float _2154 = 1.0 - (_2150 * cbSceneParam._m0[34u].x);
            float _2155 = 1.0 - (_2150 * cbSceneParam._m0[34u].y);
            float _2156 = 1.0 - (_2150 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2156) ? _1903 : (isnan(_1903) ? _2156 : min(_1903, _2156));
            frontier_phi_34_33_ladder_1 = isnan(_2155) ? _1902 : (isnan(_1902) ? _2155 : min(_1902, _2155));
            frontier_phi_34_33_ladder_2 = isnan(_2154) ? _1901 : (isnan(_1901) ? _2154 : min(_1901, _2154));
        }
        else
        {
            frontier_phi_34_33_ladder = _1903;
            frontier_phi_34_33_ladder_1 = _1902;
            frontier_phi_34_33_ladder_2 = _1901;
        }
        _1967 = frontier_phi_34_33_ladder_2;
        _1969 = frontier_phi_34_33_ladder_1;
        _1971 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1967 = _1901;
        _1969 = _1902;
        _1971 = _1903;
    }
    uvec4 _1976 = floatBitsToUint(cbInstanceData._m0[_655 + 5u]);
    uint _1978 = _1976.x * 14u;
    uint _1979 = _1978 + 13u;
    float _1986 = _680 + (-1.0);
    float _1991 = (cbLight._m0[_1979].x * _1986) + 1.0;
    float _1992 = (cbLight._m0[_1979].y * _1986) + 1.0;
    float _1993 = (cbLight._m0[_1979].z * _1986) + 1.0;
    float _1994 = (cbLight._m0[_1979].w * _1986) + 1.0;
    uint _1995 = _1978 + 5u;
    float _2001 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
    uint _2005 = _1978 + 4u;
    float _2015 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
    uint _2019 = _1978 | 1u;
    float _2030 = dot(vec3(cbLight._m0[_1978].xyz), vec3(_529, _530, _531));
    float _2033 = dot(vec3(cbLight._m0[_2019].xyz), vec3(_529, _530, _531));
    float _4250 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _4261 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2038 = (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * 0.3183098733425140380859375;
    float _2040 = (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * 0.3183098733425140380859375;
    float _2047 = ((cbLight._m0[_1995].x * _2001) * _2040) + (((cbLight._m0[_2005].x * _1967) * _2015) * _2038);
    float _2048 = ((_2001 * cbLight._m0[_1995].y) * _2040) + (((cbLight._m0[_2005].y * _1969) * _2015) * _2038);
    float _2049 = ((_2001 * cbLight._m0[_1995].z) * _2040) + (((cbLight._m0[_2005].z * _1971) * _2015) * _2038);
    uvec4 _2053 = floatBitsToUint(cbLight._m0[_1978 + 12u]);
    bool _2055 = _2053.x == 0u;
    float _2157;
    float _2159;
    float _2161;
    if (_2055)
    {
        _2157 = _2047;
        _2159 = _2048;
        _2161 = _2049;
    }
    else
    {
        uint _2165 = _1978 + 6u;
        float _2181 = (dot(vec3(cbLight._m0[_1978 + 2u].xyz), vec3(_529, _530, _531)) * 0.5) + 0.5;
        float _2182 = _2181 * _2181;
        float _4272 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2183 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _2184 = isnan(1.0) ? _1993 : (isnan(_1993) ? 1.0 : min(_1993, 1.0));
        _2157 = (((cbLight._m0[_2165].x * 0.3183098733425140380859375) * _2183) * _2184) + _2047;
        _2159 = (((cbLight._m0[_2165].y * 0.3183098733425140380859375) * _2183) * _2184) + _2048;
        _2161 = (((cbLight._m0[_2165].z * 0.3183098733425140380859375) * _2183) * _2184) + _2049;
    }
    bool _2164 = _2053.y == 0u;
    float _2219;
    float _2221;
    float _2223;
    if (_2164)
    {
        _2219 = _2157;
        _2221 = _2159;
        _2223 = _2161;
    }
    else
    {
        uint _2381 = _1978 + 7u;
        float _2397 = (dot(vec3(cbLight._m0[_1978 + 3u].xyz), vec3(_529, _530, _531)) * 0.5) + 0.5;
        float _2398 = _2397 * _2397;
        float _4288 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2399 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _2400 = isnan(1.0) ? _1994 : (isnan(_1994) ? 1.0 : min(_1994, 1.0));
        _2219 = (((cbLight._m0[_2381].x * 0.3183098733425140380859375) * _2399) * _2400) + _2157;
        _2221 = (((cbLight._m0[_2381].y * 0.3183098733425140380859375) * _2399) * _2400) + _2159;
        _2223 = (((cbLight._m0[_2381].z * 0.3183098733425140380859375) * _2399) * _2400) + _2161;
    }
    uint _2226 = _1978 + 8u;
    float _2239 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1978].w)) * _532) * 0.949999988079071044921875);
    float _2240 = _2239 * _2239;
    float _2241 = cbLight._m0[_1978].x + _609;
    float _2242 = cbLight._m0[_1978].y + _610;
    float _2243 = cbLight._m0[_1978].z + _611;
    float _2247 = inversesqrt(dot(vec3(_2241, _2242, _2243), vec3(_2241, _2242, _2243)));
    float _2248 = _2247 * _2241;
    float _2249 = _2247 * _2242;
    float _2250 = _2247 * _2243;
    float _2251 = dot(vec3(_529, _530, _531), vec3(cbLight._m0[_1978].xyz));
    float _4304 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2254 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
    float _4315 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _2255 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _2256 = dot(vec3(_529, _530, _531), vec3(_2248, _2249, _2250));
    float _4326 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2259 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _2260 = dot(vec3(cbLight._m0[_1978].xyz), vec3(_2248, _2249, _2250));
    float _4337 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2264 = _2240 * _2240;
    float _2268 = ((_2259 * _2259) * (_2264 + (-1.0))) + 1.0;
    float _2279 = (exp2(log2(1.0 - (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2280 = 1.0 - _2240;
    float _2291 = (0.5 / (((_2255 * ((_2254 * _2280) + _2240)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2280) + _2240) * _2254))) * _2254;
    float _4348 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2293 = (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_2264 / ((_2268 * _2268) * 3.141590118408203125));
    uint _2307 = _1978 + 9u;
    float _2318 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2019].w)) * _532) * 0.949999988079071044921875);
    float _2319 = _2318 * _2318;
    float _2320 = cbLight._m0[_2019].x + _609;
    float _2321 = cbLight._m0[_2019].y + _610;
    float _2322 = cbLight._m0[_2019].z + _611;
    float _2326 = inversesqrt(dot(vec3(_2320, _2321, _2322), vec3(_2320, _2321, _2322)));
    float _2327 = _2326 * _2320;
    float _2328 = _2326 * _2321;
    float _2329 = _2326 * _2322;
    float _2330 = dot(vec3(_529, _530, _531), vec3(cbLight._m0[_2019].xyz));
    float _4359 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2333 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _2334 = dot(vec3(_529, _530, _531), vec3(_2327, _2328, _2329));
    float _4370 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2337 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    float _2338 = dot(vec3(cbLight._m0[_2019].xyz), vec3(_2327, _2328, _2329));
    float _4381 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2342 = _2319 * _2319;
    float _2346 = ((_2337 * _2337) * (_2342 + (-1.0))) + 1.0;
    float _2355 = (exp2(log2(1.0 - (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2356 = 1.0 - _2319;
    float _2366 = (0.5 / (((_2255 * ((_2333 * _2356) + _2319)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2356) + _2319) * _2333))) * _2333;
    float _4392 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2368 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_2342 / ((_2346 * _2346) * 3.141590118408203125));
    float _2378 = (((_2355 * cbLight._m0[_2307].x) * _2368) * _2001) + ((((cbLight._m0[_2226].x * _1967) * _2279) * _2293) * _2015);
    float _2379 = (((_2355 * cbLight._m0[_2307].y) * _2368) * _2001) + ((((cbLight._m0[_2226].y * _1969) * _2279) * _2293) * _2015);
    float _2380 = (((_2355 * cbLight._m0[_2307].z) * _2368) * _2001) + ((((cbLight._m0[_2226].z * _1971) * _2279) * _2293) * _2015);
    float _2436;
    float _2438;
    float _2440;
    if (_2055)
    {
        _2436 = _2378;
        _2438 = _2379;
        _2440 = _2380;
    }
    else
    {
        uint _2442 = _1978 + 2u;
        uint _2446 = _1978 + 10u;
        float _2460 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2442].w)) * _532) * 0.949999988079071044921875);
        float _2461 = _2460 * _2460;
        float _2462 = cbLight._m0[_2442].x + _609;
        float _2463 = cbLight._m0[_2442].y + _610;
        float _2464 = cbLight._m0[_2442].z + _611;
        float _2468 = inversesqrt(dot(vec3(_2462, _2463, _2464), vec3(_2462, _2463, _2464)));
        float _2469 = _2468 * _2462;
        float _2470 = _2468 * _2463;
        float _2471 = _2468 * _2464;
        float _2472 = dot(vec3(_529, _530, _531), vec3(cbLight._m0[_2442].xyz));
        float _4403 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2475 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _2476 = dot(vec3(_529, _530, _531), vec3(_2469, _2470, _2471));
        float _4414 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2479 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _2480 = dot(vec3(cbLight._m0[_2442].xyz), vec3(_2469, _2470, _2471));
        float _4425 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2484 = _2461 * _2461;
        float _2488 = ((_2479 * _2479) * (_2484 + (-1.0))) + 1.0;
        float _2497 = (exp2(log2(1.0 - (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2498 = 1.0 - _2461;
        float _2508 = (0.5 / (((_2255 * ((_2475 * _2498) + _2461)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2498) + _2461) * _2475))) * _2475;
        float _4436 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2510 = (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_2484 / ((_2488 * _2488) * 3.141590118408203125));
        float _2511 = isnan(1.0) ? _1993 : (isnan(_1993) ? 1.0 : min(_1993, 1.0));
        _2436 = (((_2497 * cbLight._m0[_2446].x) * _2510) * _2511) + _2378;
        _2438 = (((_2497 * cbLight._m0[_2446].y) * _2510) * _2511) + _2379;
        _2440 = (((_2497 * cbLight._m0[_2446].z) * _2510) * _2511) + _2380;
    }
    float _2542;
    float _2544;
    float _2546;
    if (_2164)
    {
        _2542 = _2436;
        _2544 = _2438;
        _2546 = _2440;
    }
    else
    {
        uint _2553 = _1978 + 3u;
        uint _2557 = _1978 + 11u;
        float _2571 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2553].w)) * _532) * 0.949999988079071044921875);
        float _2572 = _2571 * _2571;
        float _2573 = cbLight._m0[_2553].x + _609;
        float _2574 = cbLight._m0[_2553].y + _610;
        float _2575 = cbLight._m0[_2553].z + _611;
        float _2579 = inversesqrt(dot(vec3(_2573, _2574, _2575), vec3(_2573, _2574, _2575)));
        float _2580 = _2579 * _2573;
        float _2581 = _2579 * _2574;
        float _2582 = _2579 * _2575;
        float _2583 = dot(vec3(_529, _530, _531), vec3(cbLight._m0[_2553].xyz));
        float _4452 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2586 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _2587 = dot(vec3(_529, _530, _531), vec3(_2580, _2581, _2582));
        float _4463 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2590 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _2591 = dot(vec3(cbLight._m0[_2553].xyz), vec3(_2580, _2581, _2582));
        float _4474 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2595 = _2572 * _2572;
        float _2599 = ((_2590 * _2590) * (_2595 + (-1.0))) + 1.0;
        float _2608 = (exp2(log2(1.0 - (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2609 = 1.0 - _2572;
        float _2619 = (0.5 / (((_2255 * ((_2586 * _2609) + _2572)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2609) + _2572) * _2586))) * _2586;
        float _4485 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2621 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_2595 / ((_2599 * _2599) * 3.141590118408203125));
        float _2622 = isnan(1.0) ? _1994 : (isnan(_1994) ? 1.0 : min(_1994, 1.0));
        _2542 = (((_2608 * cbLight._m0[_2557].x) * _2621) * _2622) + _2436;
        _2544 = (((_2608 * cbLight._m0[_2557].y) * _2621) * _2622) + _2438;
        _2546 = (((_2608 * cbLight._m0[_2557].z) * _2621) * _2622) + _2440;
    }
    float _2688;
    float _2690;
    float _2692;
    float _2694;
    float _2696;
    float _2698;
    if (_1976.y == 0u)
    {
        uvec4 _2643 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2644 = _2643.x;
        uint _2655 = uint((float(_2643.y) * floor(float(uint(cbSceneParam._m0[85u].y * _618) / _2644))) + floor(float(uint(cbSceneParam._m0[85u].x * _617) / _2644)));
        float _2665 = (log2(_1754 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2666 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        uint _2669 = uint(isnan(14.0) ? _2666 : (isnan(_2666) ? 14.0 : min(_2666, 14.0)));
        uvec4 _2674 = texelFetch(g_lightClusterGridBuffer, int(((_2669 << 2u) + (_2655 << 6u)) >> 2u));
        uint _2675 = _2674.x;
        uint _2676 = _2643.z;
        float _2800;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        float _2810;
        if (((((1u << ((_2676 >> 4u) & 15u)) + 4294967295u) & _2675) == 0u) || ((_2676 & 240u) == 0u))
        {
            _2800 = 0.0;
            _2802 = 0.0;
            _2804 = 0.0;
            _2806 = 0.0;
            _2808 = 0.0;
            _2810 = 0.0;
        }
        else
        {
            float _2801;
            float _2803;
            float _2805;
            float _2807;
            float _2809;
            float _2811;
            float _2953 = 0.0;
            float _2954 = 0.0;
            float _2955 = 0.0;
            float _2956 = 0.0;
            float _2957 = 0.0;
            float _2958 = 0.0;
            uint _2959 = 0u;
            uint _2968;
            bool _2969;
            for (;;)
            {
                _2968 = texelFetch(g_lightClassification, int((((_2669 << 5u) + (_2655 << 9u)) + (_2959 << 2u)) >> 2u)).x;
                _2969 = _2968 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2969)
                {
                    frontier_phi_66_pred = _2958;
                    frontier_phi_66_pred_1 = _2957;
                    frontier_phi_66_pred_2 = _2956;
                    frontier_phi_66_pred_3 = _2955;
                    frontier_phi_66_pred_4 = _2954;
                    frontier_phi_66_pred_5 = _2953;
                }
                else
                {
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    float _3082;
                    uint _3083;
                    _3077 = _2953;
                    _3078 = _2954;
                    _3079 = _2955;
                    _3080 = _2956;
                    _3081 = _2957;
                    _3082 = _2958;
                    _3083 = _2968;
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    float _3014;
                    for (;;)
                    {
                        uint _3087 = uint(findLSB(_3083)) + (_2959 << 5u);
                        uint _3084 = (_3083 + 4294967295u) & _3083;
                        uint _3089 = _3087 * 48u;
                        vec4 _3103 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3089)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 3u)).x));
                        uint _3109 = (_3087 * 48u) + 4u;
                        vec4 _3122 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3109)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 3u)).x));
                        uint _3128 = (_3087 * 48u) + 8u;
                        vec3 _3139 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3128)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 2u)).x));
                        float _3143 = _3103.x - _1752;
                        float _3144 = _3103.y - _1753;
                        float _3145 = _3103.z - _1754;
                        float _3146 = dot(vec3(_3143, _3144, _3145), vec3(_3143, _3144, _3145));
                        float _3149 = inversesqrt(_3146);
                        float _3150 = _3149 * _3143;
                        float _3151 = _3149 * _3144;
                        float _3152 = _3149 * _3145;
                        float _3153 = dot(vec3(_636, _639, _642), vec3(_3150, _3151, _3152));
                        float _3158 = 1.0 - (_3146 * _3103.w);
                        float _4511 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                        float _3159 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                        float _3160 = sqrt(_3146) * _3122.w;
                        float _3163 = 1.39999997615814208984375 / (_3160 + 1.39999997615814208984375);
                        float _3164 = _3163 * _3163;
                        float _3167 = ((1.0 - _3164) * _3153) + _3164;
                        float _3170 = _3160 * _3160;
                        float _3174 = ((isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0))) * _3159) / ((_3170 * 0.699999988079071044921875) + 1.0);
                        float _3178 = (-0.0) - _1752;
                        float _3179 = (-0.0) - _1753;
                        float _3180 = (-0.0) - _1754;
                        float _3184 = inversesqrt(dot(vec3(_3178, _3179, _3180), vec3(_3178, _3179, _3180)));
                        float _3185 = _3184 * _3178;
                        float _3186 = _3184 * _3179;
                        float _3187 = _3184 * _3180;
                        float _3194 = exp2(log2(1.0 / ((_3170 * 3.5) + 5.0)) * 0.25);
                        float _3195 = 1.0 - _696;
                        float _3202 = sqrt(1.0 - ((1.0 - (_3195 * _3195)) * (1.0 - (_3194 * _3194))));
                        float _3203 = _3202 * _3202;
                        float _3204 = _3203 * _3203;
                        float _3205 = _3185 + _3150;
                        float _3206 = _3186 + _3151;
                        float _3207 = _3187 + _3152;
                        float _3211 = inversesqrt(dot(vec3(_3205, _3206, _3207), vec3(_3205, _3206, _3207)));
                        float _3215 = dot(vec3(_636, _639, _642), vec3(_3185, _3186, _3187));
                        float _4527 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                        float _3218 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                        float _3219 = dot(vec3(_636, _639, _642), vec3(_3211 * _3205, _3211 * _3206, _3211 * _3207));
                        float _4538 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                        float _3222 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                        float _3226 = ((_3222 * _3222) * (_3204 + (-1.0))) + 1.0;
                        float _3227 = _3163 * _3203;
                        float _3228 = _3227 * _3227;
                        float _3231 = ((1.0 - _3228) * _3153) + _3228;
                        float _4549 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                        float _3232 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                        float _3233 = 1.0 - _3203;
                        float _3243 = (0.5 / (((_3232 * ((_3218 * _3233) + _3203)) + 9.9999999392252902907785028219223e-09) + (((_3232 * _3233) + _3203) * _3218))) * _3232;
                        float _4560 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                        float _3254 = (((_3204 * 3.1415927410125732421875) * (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0)))) / ((_3226 * _3226) * ((_3170 * 2.1991131305694580078125) + 3.141590118408203125))) * _3159;
                        _3012 = (_3174 * _3122.x) + _3080;
                        _3013 = (_3174 * _3122.y) + _3081;
                        _3014 = (_3174 * _3122.z) + _3082;
                        _3009 = (_3254 * _3139.x) + _3077;
                        _3010 = (_3254 * _3139.y) + _3078;
                        _3011 = (_3254 * _3139.z) + _3079;
                        if (_3084 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3077 = _3009;
                            _3078 = _3010;
                            _3079 = _3011;
                            _3080 = _3012;
                            _3081 = _3013;
                            _3082 = _3014;
                            _3083 = _3084;
                        }
                    }
                    frontier_phi_66_pred = _3014;
                    frontier_phi_66_pred_1 = _3013;
                    frontier_phi_66_pred_2 = _3012;
                    frontier_phi_66_pred_3 = _3011;
                    frontier_phi_66_pred_4 = _3010;
                    frontier_phi_66_pred_5 = _3009;
                }
                _2811 = frontier_phi_66_pred;
                _2809 = frontier_phi_66_pred_1;
                _2807 = frontier_phi_66_pred_2;
                _2805 = frontier_phi_66_pred_3;
                _2803 = frontier_phi_66_pred_4;
                _2801 = frontier_phi_66_pred_5;
                uint _2960 = _2959 + 1u;
                if (_2960 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2953 = _2801;
                    _2954 = _2803;
                    _2955 = _2805;
                    _2956 = _2807;
                    _2957 = _2809;
                    _2958 = _2811;
                    _2959 = _2960;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2800 = _2801;
            _2802 = _2803;
            _2804 = _2805;
            _2806 = _2807;
            _2808 = _2809;
            _2810 = _2811;
        }
        uvec4 _2814 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2815 = _2814.z;
        uint _2817 = (_2815 >> 8u) & 15u;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        float _2929;
        float _2931;
        if (((4294967295u << _2817) & _2675) == 0u)
        {
            _2921 = _2800;
            _2923 = _2802;
            _2925 = _2804;
            _2927 = _2806;
            _2929 = _2808;
            _2931 = _2810;
        }
        else
        {
            float _2946 = inversesqrt(dot(vec3(_1752, _1753, _1754), vec3(_1752, _1753, _1754)));
            float _2947 = _2946 * _1752;
            float _2948 = _2946 * _1753;
            float _2949 = _2946 * _1754;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2817 < ((_2815 >> 12u) & 15u))
            {
                float _2922;
                float _2924;
                float _2926;
                float _2928;
                float _2930;
                float _2932;
                float _3060 = _2800;
                float _3061 = _2802;
                float _3062 = _2804;
                float _3063 = _2806;
                float _3064 = _2808;
                float _3065 = _2810;
                uint _3066 = _2817;
                uint _3075;
                bool _3076;
                for (;;)
                {
                    _3075 = texelFetch(g_lightClassification, int((((_2669 << 5u) + (_2655 << 9u)) + (_3066 << 2u)) >> 2u)).x;
                    _3076 = _3075 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3076)
                    {
                        frontier_phi_72_pred = _3065;
                        frontier_phi_72_pred_1 = _3064;
                        frontier_phi_72_pred_2 = _3063;
                        frontier_phi_72_pred_3 = _3062;
                        frontier_phi_72_pred_4 = _3061;
                        frontier_phi_72_pred_5 = _3060;
                    }
                    else
                    {
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3272 = _3060;
                        float _3273 = _3061;
                        float _3274 = _3062;
                        float _3275 = _3063;
                        float _3276 = _3064;
                        float _3277 = _3065;
                        uint _3278 = _3075;
                        uint _3279;
                        vec4 _3304;
                        float _3305;
                        vec4 _3320;
                        vec3 _3332;
                        vec4 _3347;
                        vec4 _3363;
                        float _3410;
                        bool _3411;
                        for (;;)
                        {
                            uint _3289 = ((_3066 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3278));
                            _3279 = (_3278 + 4294967295u) & _3278;
                            uint _3291 = _3289 * 40u;
                            _3304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 3u)).x));
                            _3305 = _3304.w;
                            uint _3307 = (_3289 * 40u) + 4u;
                            _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            uint _3322 = (_3289 * 40u) + 8u;
                            _3332 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x));
                            uint _3334 = (_3289 * 40u) + 16u;
                            _3347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 3u)).x));
                            uint _3350 = (_3289 * 40u) + 20u;
                            _3363 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 3u)).x));
                            uint _3366 = (_3289 * 40u) + 24u;
                            vec4 _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            uint _3385 = (_3289 * 40u) + 28u;
                            vec4 _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            _3410 = fma(_1754, _3398.z, fma(_1753, _3398.y, _3398.x * _1752)) + _3398.w;
                            _3411 = !((fma(_1754, _3379.z, fma(_1753, _3379.y, _3379.x * _1752)) + _3379.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3411)
                            {
                                float _3438 = _3304.x - _1752;
                                float _3439 = _3304.y - _1753;
                                float _3440 = _3304.z - _1754;
                                float _3441 = dot(vec3(_3438, _3439, _3440), vec3(_3438, _3439, _3440));
                                float _3444 = inversesqrt(_3441);
                                float _3445 = _3444 * _3438;
                                float _3446 = _3444 * _3439;
                                float _3447 = _3444 * _3440;
                                float _3451 = 1.0 - (_3441 / (_3305 * _3305));
                                float _4571 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3452 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                                float _3456 = sqrt(_3441) * _3320.w;
                                float _3458 = 1.39999997615814208984375 / (_3456 + 1.39999997615814208984375);
                                float _3459 = _3458 * _3458;
                                float _3462 = ((1.0 - _3459) * dot(vec3(_3445, _3446, _3447), vec3(_636, _639, _642))) + _3459;
                                float _3465 = _3456 * _3456;
                                float _3469 = (fma(_1754, _3347.z, fma(_1753, _3347.y, _3347.x * _1752)) + _3347.w) / _3410;
                                float _3470 = (fma(_1754, _3363.z, fma(_1753, _3363.y, _3363.x * _1752)) + _3363.w) / _3410;
                                float _3474 = 1.0 - dot(vec2(_3469, _3470), vec2(_3469, _3470));
                                float _4587 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3475 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                                float _3476 = _3475 * (((isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0))) * _3452) / ((_3465 * 0.699999988079071044921875) + 1.0));
                                float _3488 = exp2(log2(1.0 / ((_3465 * 3.5) + 5.0)) * 0.25);
                                float _3489 = 1.0 - _696;
                                float _3496 = sqrt(1.0 - ((1.0 - (_3489 * _3489)) * (1.0 - (_3488 * _3488))));
                                float _3497 = _3496 * _3496;
                                float _3498 = _3497 * _3497;
                                float _3499 = _3445 - _2947;
                                float _3500 = _3446 - _2948;
                                float _3501 = _3447 - _2949;
                                float _3505 = inversesqrt(dot(vec3(_3499, _3500, _3501), vec3(_3499, _3500, _3501)));
                                float _3509 = dot(vec3(_636, _639, _642), vec3((-0.0) - _2947, (-0.0) - _2948, (-0.0) - _2949));
                                float _4598 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                                float _3512 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                                float _3513 = dot(vec3(_636, _639, _642), vec3(_3505 * _3499, _3505 * _3500, _3505 * _3501));
                                float _4609 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3516 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                                float _3520 = ((_3516 * _3516) * (_3498 + (-1.0))) + 1.0;
                                float _3521 = _3458 * _3497;
                                float _3522 = _3521 * _3521;
                                float _3528 = ((1.0 - _3522) * dot(vec3(_636, _639, _642), vec3(_3445, _3446, _3447))) + _3522;
                                float _4620 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                                float _3529 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                                float _3530 = 1.0 - _3497;
                                float _3540 = (0.5 / (((_3529 * ((_3512 * _3530) + _3497)) + 9.9999999392252902907785028219223e-09) + (((_3529 * _3530) + _3497) * _3512))) * _3529;
                                float _4631 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                                float _3550 = (_3475 * _3452) * (((_3498 * 3.1415927410125732421875) * (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) / ((_3520 * _3520) * ((_3465 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3476 * _3320.y;
                                frontier_phi_78_pred_1 = _3476 * _3320.x;
                                frontier_phi_78_pred_2 = _3550 * _3332.z;
                                frontier_phi_78_pred_3 = _3550 * _3332.y;
                                frontier_phi_78_pred_4 = _3550 * _3332.x;
                                frontier_phi_78_pred_5 = _3476 * _3320.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3558 = frontier_phi_78_pred;
                            _3557 = frontier_phi_78_pred_1;
                            _3556 = frontier_phi_78_pred_2;
                            _3555 = frontier_phi_78_pred_3;
                            _3554 = frontier_phi_78_pred_4;
                            _3559 = frontier_phi_78_pred_5;
                            _3262 = _3557 + _3275;
                            _3263 = _3558 + _3276;
                            _3264 = _3559 + _3277;
                            _3259 = _3554 + _3272;
                            _3260 = _3555 + _3273;
                            _3261 = _3556 + _3274;
                            if (_3279 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3272 = _3259;
                                _3273 = _3260;
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3263;
                                _3277 = _3264;
                                _3278 = _3279;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3264;
                        frontier_phi_72_pred_1 = _3263;
                        frontier_phi_72_pred_2 = _3262;
                        frontier_phi_72_pred_3 = _3261;
                        frontier_phi_72_pred_4 = _3260;
                        frontier_phi_72_pred_5 = _3259;
                    }
                    _2932 = frontier_phi_72_pred;
                    _2930 = frontier_phi_72_pred_1;
                    _2928 = frontier_phi_72_pred_2;
                    _2926 = frontier_phi_72_pred_3;
                    _2924 = frontier_phi_72_pred_4;
                    _2922 = frontier_phi_72_pred_5;
                    uint _3067 = _3066 + 1u;
                    if (_3067 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3060 = _2922;
                        _3061 = _2924;
                        _3062 = _2926;
                        _3063 = _2928;
                        _3064 = _2930;
                        _3065 = _2932;
                        _3066 = _3067;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2932;
                frontier_phi_60_61_ladder_1 = _2930;
                frontier_phi_60_61_ladder_2 = _2926;
                frontier_phi_60_61_ladder_3 = _2924;
                frontier_phi_60_61_ladder_4 = _2922;
                frontier_phi_60_61_ladder_5 = _2928;
            }
            else
            {
                frontier_phi_60_61_ladder = _2810;
                frontier_phi_60_61_ladder_1 = _2808;
                frontier_phi_60_61_ladder_2 = _2804;
                frontier_phi_60_61_ladder_3 = _2802;
                frontier_phi_60_61_ladder_4 = _2800;
                frontier_phi_60_61_ladder_5 = _2806;
            }
            _2921 = frontier_phi_60_61_ladder_4;
            _2923 = frontier_phi_60_61_ladder_3;
            _2925 = frontier_phi_60_61_ladder_2;
            _2927 = frontier_phi_60_61_ladder_5;
            _2929 = frontier_phi_60_61_ladder_1;
            _2931 = frontier_phi_60_61_ladder;
        }
        float _2936 = isnan(1.0) ? _680 : (isnan(_680) ? 1.0 : min(_680, 1.0));
        _2688 = (_2936 * _2927) + _2219;
        _2690 = (_2936 * _2929) + _2221;
        _2692 = (_2936 * _2931) + _2223;
        _2694 = ((_2921 * 0.039999999105930328369140625) * _2936) + _2542;
        _2696 = ((_2923 * 0.039999999105930328369140625) * _2936) + _2544;
        _2698 = ((_2925 * 0.039999999105930328369140625) * _2936) + _2546;
    }
    else
    {
        _2688 = _2219;
        _2690 = _2221;
        _2692 = _2223;
        _2694 = _2542;
        _2696 = _2544;
        _2698 = _2546;
    }
    uint _2704 = _656 + uint(cbMatDynParam._m0[0u].w);
    float _2710 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].y;
    float _2716 = (((((_2710 * cbMtdParam._m0[10u].x) * _410.x) * _433) * _508) * (((1.0 - _487) * cbMtdParam._m0[16u].y) + _487)) * cbInstanceData._m0[_2704].x;
    float _2722 = (((((_2710 * cbMtdParam._m0[10u].y) * _410.y) * _433) * _508) * (((1.0 - _489) * cbMtdParam._m0[16u].y) + _489)) * cbInstanceData._m0[_2704].y;
    float _2728 = (((((_2710 * cbMtdParam._m0[10u].z) * _410.z) * _433) * _508) * (((1.0 - _491) * cbMtdParam._m0[16u].y) + _491)) * cbInstanceData._m0[_2704].z;
    float _4647 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _4658 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _4669 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _2745 = (((isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * (_2688 + ((isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))) * _680))) + ((_2694 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _1486)) * cbPerFrame._m0[3u].x)) + _2716;
    float _2747 = (_2722 + ((_2696 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _1486)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_2690 + ((isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))) * _680)));
    float _2749 = (_2728 + ((_2698 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _1486)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * (_2692 + ((isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0))) * _680)));
    float _4695 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2762 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
    uint _2763 = _655 + 6u;
    float _2771 = _617 / cbSceneParam._m0[86u].x;
    float _2772 = _618 / cbSceneParam._m0[86u].y;
    vec4 _2786 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2771, _2772, (log2((isnan(cbSceneParam._m0[77u].w) ? _551 : (isnan(_551) ? cbSceneParam._m0[77u].w : min(_551, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2788 = _2786.x;
    float _2789 = _2786.y;
    float _2790 = _2786.z;
    float _2791 = _2786.w;
    float _2862;
    float _2864;
    float _2866;
    float _2868;
    if (_551 > cbSceneParam._m0[78u].w)
    {
        float _2825 = isnan(_551) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _551 : min(cbSceneParam._m0[80u].w, _551));
        float _2826 = _2825 / _551;
        float _2837 = _2826 * _602;
        float _2838 = _603 * _2826;
        float _2839 = (-0.0) - _2838;
        float _2840 = _2826 * _604;
        float _2842 = (cbSceneParam._m0[77u].w * _2839) / _2825;
        float _2843 = _2842 + cbSceneParam._m0[79u].w;
        float _2844 = cbSceneParam._m0[79u].w - _2838;
        float _2850 = sqrt(((_2837 * _2837) + (_2838 * _2838)) + (_2840 * _2840));
        float _2853 = (1.0 - (cbSceneParam._m0[77u].w / _2825)) * _2850;
        float _2858 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2860 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3022;
        if (abs((_2839 - _2842) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3022 = ((((_2843 > 0.0) ? exp2(_2858 * _2843) : (2.0 - exp2(_2860 * _2843))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2853;
        }
        else
        {
            float _2982 = 1.0 / cbSceneParam._m0[80u].x;
            float _2983 = isnan(_2844) ? _2843 : (isnan(_2843) ? _2844 : max(_2843, _2844));
            float _2984 = isnan(_2844) ? _2843 : (isnan(_2843) ? _2844 : min(_2843, _2844));
            float _2993 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : min(_2983, 0.0));
            float _2994 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : min(_2984, 0.0));
            _3022 = ((abs(_2850 / _2839) * cbSceneParam._m0[80u].y) * ((((_2993 - _2994) * 2.0) - ((exp2(_2858 * (isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0)))) - exp2(_2858 * (isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0))))) * _2982)) - ((exp2(_2860 * _2993) - exp2(_2860 * _2994)) * _2982))) + (_2853 * cbSceneParam._m0[80u].z);
        }
        vec4 _3024 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2771, _2772, 1.0), 0.0);
        float _3033 = exp2((_3022 * (-1.44269502162933349609375)) * (1.0 - _3024.w));
        float _3034 = log2(_3033);
        float _3050 = log2(_2791);
        _2862 = (exp2(_3050 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3034 * cbSceneParam._m0[78u].x)) * _3024.x) / cbSceneParam._m0[78u].x)) + _2788;
        _2864 = (exp2(_3050 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3034 * cbSceneParam._m0[78u].y)) * _3024.y) / cbSceneParam._m0[78u].y)) + _2789;
        _2866 = (exp2(_3050 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3034 * cbSceneParam._m0[78u].z)) * _3024.z) / cbSceneParam._m0[78u].z)) + _2790;
        _2868 = _3033 * _2791;
    }
    else
    {
        _2862 = _2788;
        _2864 = _2789;
        _2866 = _2790;
        _2868 = _2791;
    }
    float _2880 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2881 = _2880 == 3.0;
    float _2882 = log2(_2868);
    float _2886 = exp2(_2882 * cbSceneParam._m0[78u].x);
    float _2887 = exp2(_2882 * cbSceneParam._m0[78u].y);
    float _2888 = exp2(_2882 * cbSceneParam._m0[78u].z);
    float _2889 = _2886 * (isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0)));
    float _2890 = _2887 * (isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0)));
    float _2891 = _2888 * (isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0)));
    float _2900 = (_2880 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2900 * (_2881 ? _2889 : (_2889 + (cbSceneParam._m0[72u].w * _2862)));
    SV_Target.y = _2900 * (_2881 ? _2890 : (_2890 + (cbSceneParam._m0[72u].w * _2864)));
    SV_Target.z = _2900 * (_2881 ? _2891 : (_2891 + (cbSceneParam._m0[72u].w * _2866)));
    SV_Target.w = cbInstanceData._m0[_2763].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2716) * _2762) * _2886) * _2900;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2722) * _2762) * _2887) * _2900;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2728) * _2762) * _2888) * _2900;
    SV_Target_1.w = cbInstanceData._m0[_2763].w;
}


