#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1049;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _245 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _251 = _245.x * cbMtdParam._m0[9u].x;
    float _252 = _245.y * cbMtdParam._m0[9u].y;
    float _253 = _245.z * cbMtdParam._m0[9u].z;
    vec4 _276 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _296 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _299 = _296.x + 0.00999999977648258209228515625;
    float _307 = (TEXCOORD_8 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_8)) * _299)) * (cbMtdParam._m0[15u].z + 1.0);
    float _3436 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _308 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
    float _315 = (_308 * ((_276.x * cbMtdParam._m0[12u].x) - _251)) + _251;
    float _316 = (_308 * ((_276.y * cbMtdParam._m0[12u].y) - _252)) + _252;
    float _317 = (_308 * ((_276.z * cbMtdParam._m0[12u].z) - _253)) + _253;
    vec4 _329 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    vec4 _352 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _356 = _352.z;
    float _359 = (_352.x * 2.0) + (-1.0);
    float _360 = (_352.y * 2.0) + (-1.0);
    float _361 = dot(vec2(_359, _360), vec2(_359, _360));
    float _3447 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _366 = sqrt(1.0 - (isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0))));
    float _374 = (((_329.z - _356) * TEXCOORD_8) * cbMtdParam._m0[16u].x) + _356;
    vec4 _408 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _422 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3458 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
    float _431 = (((_423 * _423) * (3.0 - (_423 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _440 = cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x;
    float _448 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3469 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _449 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
    float _453 = (_449 * _449) * (3.0 - (_449 * 2.0));
    float _454 = _453 * cbMtdParam._m0[16u].w;
    float _455 = _453 * cbMtdParam._m0[17u].x;
    float _456 = sin(_440);
    float _457 = cos(_440);
    float _458 = TEXCOORD.z - _454;
    float _459 = TEXCOORD.w - _455;
    vec4 _479 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_454 + fma(_459, (-0.0) - _456, _458 * _457))) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (fma(_459, _457, _458 * _456) + _455)) + cbTextureTilingScale._m0[0u].w));
    float _485 = (cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].w) * _479.x;
    float _487 = (cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].w) * _479.y;
    float _489 = (cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].w) * _479.z;
    float _505 = (TEXCOORD_5.x - ((_299 * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[16u].z)) * (cbMtdParam._m0[13u].x + 1.0);
    float _3480 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _506 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
    float _512 = ((((_329.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[15u].x) + _359;
    float _513 = ((((_329.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[15u].x) + _360;
    float _516 = fma(_366, _216 * NORMAL.x, fma(_513, _223 * TANGENT.x, (_209 * _201) * _512));
    float _519 = fma(_366, _216 * NORMAL.y, fma(_513, _223 * TANGENT.y, (_209 * _202) * _512));
    float _522 = fma(_366, _216 * NORMAL.z, fma(_513, _223 * TANGENT.z, (_209 * _203) * _512));
    float _526 = inversesqrt(dot(vec3(_516, _519, _522), vec3(_516, _519, _522)));
    float _527 = _526 * _516;
    float _528 = _526 * _519;
    float _529 = _526 * _522;
    float _3491 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _530 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
    float _3502 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3513 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3524 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _549 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _590 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _600 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _590);
    float _601 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _590);
    float _602 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _590);
    float _606 = inversesqrt(dot(vec3(_600, _601, _602), vec3(_600, _601, _602)));
    float _607 = _600 * _606;
    float _608 = _601 * _606;
    float _609 = _602 * _606;
    float _615 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _616 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _634 = fma(_529, cbSceneParam._m0[5u].z, fma(_528, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _527));
    float _637 = fma(_529, cbSceneParam._m0[6u].z, fma(_528, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _527));
    float _640 = fma(_529, cbSceneParam._m0[7u].z, fma(_528, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _527));
    uint _653 = uint(roundEven(NORMAL.w)) * 13u;
    uint _654 = _653 + 9u;
    uint _655 = _654 + uint(cbMatDynParam._m0[0u].w);
    float _661 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0)))) * cbInstanceData._m0[_655].x;
    float _662 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0)))) * cbInstanceData._m0[_655].y;
    float _663 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0)))) * cbInstanceData._m0[_655].z;
    float _3535 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _664 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
    float _3546 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _665 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
    float _3557 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _666 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
    vec4 _675 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _615, cbSceneParam._m0[86u].y * _616));
    float _678 = _675.x * TEXCOORD_5.w;
    float _679 = dot(vec3(_527, _528, _529), vec3(_607, _608, _609));
    float _682 = _679 * 2.0;
    float _686 = (_682 * _527) - _607;
    float _687 = (_682 * _528) - _608;
    float _688 = (_682 * _529) - _609;
    float _692 = abs(dot(vec3(_607, _608, _609), vec3(_527, _528, _529)));
    float _3568 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _694 = sqrt(_530);
    float _706 = exp2((_694 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_694 * 3.0));
    float _738 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _742 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _746 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1048;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _773 = fma(_746, cbModelParam._m0[26u].z, fma(_742, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _738));
        float _777 = fma(_746, cbModelParam._m0[27u].z, fma(_742, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _738));
        float _781 = fma(_746, cbModelParam._m0[28u].z, fma(_742, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _738));
        float _806 = _738 + _527;
        float _807 = _742 + _528;
        float _808 = _746 + _529;
        float _818 = fma(_808, cbModelParam._m0[26u].z, fma(_807, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _806)) - _773;
        float _819 = fma(_808, cbModelParam._m0[27u].z, fma(_807, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _806)) - _777;
        float _820 = fma(_808, cbModelParam._m0[28u].z, fma(_807, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _806)) - _781;
        float _824 = inversesqrt(dot(vec3(_818, _819, _820), vec3(_818, _819, _820)));
        float _837 = ((_824 * _818) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_773 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _838 = ((_824 * _819) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_777 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _839 = ((_824 * _820) / cbModelParam._m0[34u].z) + ((((((_781 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        vec4 _863 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_837, _838, _839), 0.0);
        float _876 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _877 = _876 * (_842.x + (-0.5));
        float _878 = _876 * (_842.y + (-0.5));
        float _879 = _876 * (_842.z + (-0.5));
        float _886 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _887 = _886 * (_849.x + (-0.5));
        float _888 = _886 * (_849.y + (-0.5));
        float _889 = _886 * (_849.z + (-0.5));
        float _896 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _897 = _896 * (_856.x + (-0.5));
        float _898 = _896 * (_856.y + (-0.5));
        float _899 = _896 * (_856.z + (-0.5));
        float _906 = exp2((_863.w + (-0.5)) * 20.0) * 2.0;
        float _907 = _906 * (_863.x + (-0.5));
        float _908 = _906 * (_863.y + (-0.5));
        float _909 = _906 * (_863.z + (-0.5));
        float _910 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _911 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _912 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _913 = _877 * 0.5;
        float _914 = _887 * 0.5;
        float _915 = _897 * 0.5;
        float _916 = dot(vec3(_913, _914, _915), vec3(_913, _914, _915));
        float _921 = (_916 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_916);
        float _930 = (dot(vec3(_527, _528, _529), vec3(_921 * _913, _921 * _914, _921 * _915)) + 1.0) * 0.5;
        float _3594 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _940 = sqrt(((_914 * _914) + (_913 * _913)) + (_915 * _915)) / (_910 + 9.9999997473787516355514526367188e-06);
        float _3605 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
        float _942 = _941 * 2.0;
        float _946 = (1.0 - _941) / (_941 + 1.0);
        float _3616 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _956 = ((((1.0 - _947) * (_942 + 2.0)) * exp2(log2(isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0))) * (_942 + 1.0))) + _947) * _910;
        float _957 = _878 * 0.5;
        float _958 = _888 * 0.5;
        float _959 = _898 * 0.5;
        float _960 = dot(vec3(_957, _958, _959), vec3(_957, _958, _959));
        float _965 = (_960 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_960);
        float _973 = (dot(vec3(_527, _528, _529), vec3(_965 * _957, _965 * _958, _965 * _959)) + 1.0) * 0.5;
        float _3627 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _982 = sqrt(((_958 * _958) + (_957 * _957)) + (_959 * _959)) / (_911 + 9.9999997473787516355514526367188e-06);
        float _3638 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _984 = _983 * 2.0;
        float _988 = (1.0 - _983) / (_983 + 1.0);
        float _3649 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _998 = ((((1.0 - _989) * (_984 + 2.0)) * exp2(log2(isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * (_984 + 1.0))) + _989) * _911;
        float _999 = _879 * 0.5;
        float _1000 = _889 * 0.5;
        float _1001 = _899 * 0.5;
        float _1002 = dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001));
        float _1007 = (_1002 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1002);
        float _1015 = (dot(vec3(_527, _528, _529), vec3(_1007 * _999, _1007 * _1000, _1007 * _1001)) + 1.0) * 0.5;
        float _3660 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1024 = sqrt(((_1000 * _1000) + (_999 * _999)) + (_1001 * _1001)) / (_912 + 9.9999997473787516355514526367188e-06);
        float _3671 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _1026 = _1025 * 2.0;
        float _1030 = (1.0 - _1025) / (_1025 + 1.0);
        float _3682 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1040 = ((((1.0 - _1031) * (_1026 + 2.0)) * exp2(log2(isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * (_1026 + 1.0))) + _1031) * _912;
        _1048 = _879;
        _1050 = _878;
        _1051 = _877;
        _1052 = _889;
        _1053 = _888;
        _1054 = _887;
        _1055 = _899;
        _1056 = _898;
        _1057 = _897;
        _1058 = _912;
        _1059 = _911;
        _1060 = _910;
        _1061 = cbModelParam._m0[36u].z * (isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0)));
        _1062 = cbModelParam._m0[36u].z * (isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0)));
        _1063 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0)));
    }
    else
    {
        _1048 = _1049;
        _1050 = _1049;
        _1051 = _1049;
        _1052 = _1049;
        _1053 = _1049;
        _1054 = _1049;
        _1055 = _1049;
        _1056 = _1049;
        _1057 = _1049;
        _1058 = _1049;
        _1059 = _1049;
        _1060 = _1049;
        _1061 = 0.0;
        _1062 = 0.0;
        _1063 = 0.0;
    }
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1089 = fma(_746, cbModelParam._m0[30u].z, fma(_742, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _738));
        float _1093 = fma(_746, cbModelParam._m0[31u].z, fma(_742, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _738));
        float _1097 = fma(_746, cbModelParam._m0[32u].z, fma(_742, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _738));
        float _1120 = _738 + _527;
        float _1121 = _742 + _528;
        float _1122 = _746 + _529;
        float _1132 = fma(_1122, cbModelParam._m0[30u].z, fma(_1121, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1120)) - _1089;
        float _1133 = fma(_1122, cbModelParam._m0[31u].z, fma(_1121, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1120)) - _1093;
        float _1134 = fma(_1122, cbModelParam._m0[32u].z, fma(_1121, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1120)) - _1097;
        float _1138 = inversesqrt(dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134)));
        float _1151 = ((_1138 * _1132) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1089 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1152 = ((_1138 * _1133) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1093 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1153 = ((_1138 * _1134) / cbModelParam._m0[35u].z) + ((((((_1097 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        float _1188 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1155.x + (-0.5));
        float _1190 = _1188 * (_1155.y + (-0.5));
        float _1191 = _1188 * (_1155.z + (-0.5));
        float _1198 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1162.x + (-0.5));
        float _1200 = _1198 * (_1162.y + (-0.5));
        float _1201 = _1198 * (_1162.z + (-0.5));
        float _1208 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1169.x + (-0.5));
        float _1210 = _1208 * (_1169.y + (-0.5));
        float _1211 = _1208 * (_1169.z + (-0.5));
        float _1218 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1176.x + (-0.5));
        float _1220 = _1218 * (_1176.y + (-0.5));
        float _1221 = _1218 * (_1176.z + (-0.5));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = _1189 * 0.5;
        float _1226 = _1199 * 0.5;
        float _1227 = _1209 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1241 = (dot(vec3(_527, _528, _529), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _3723 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1250 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _3734 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _3745 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * (_1252 + 1.0))) + _1257) * _1222;
        float _1267 = _1190 * 0.5;
        float _1268 = _1200 * 0.5;
        float _1269 = _1210 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_527, _528, _529), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _3756 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _3767 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _3778 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_1294 + 1.0))) + _1299) * _1223;
        float _1309 = _1191 * 0.5;
        float _1310 = _1201 * 0.5;
        float _1311 = _1211 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_527, _528, _529), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _3789 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _3800 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _3811 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * (_1336 + 1.0))) + _1341) * _1224;
        _1358 = _1191;
        _1359 = _1190;
        _1360 = _1189;
        _1361 = _1201;
        _1362 = _1200;
        _1363 = _1199;
        _1364 = _1211;
        _1365 = _1210;
        _1366 = _1209;
        _1367 = _1224;
        _1368 = _1223;
        _1369 = _1222;
        _1370 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
        _1371 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
        _1372 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
    }
    else
    {
        _1358 = _1049;
        _1359 = _1049;
        _1360 = _1049;
        _1361 = _1049;
        _1362 = _1049;
        _1363 = _1049;
        _1364 = _1049;
        _1365 = _1049;
        _1366 = _1049;
        _1367 = _1049;
        _1368 = _1049;
        _1369 = _1049;
        _1370 = 0.0;
        _1371 = 0.0;
        _1372 = 0.0;
    }
    float _1382 = (cbModelParam._m0[1u].x * (_1370 - _1061)) + _1061;
    float _1383 = (cbModelParam._m0[1u].x * (_1371 - _1062)) + _1062;
    float _1384 = (cbModelParam._m0[1u].x * (_1372 - _1063)) + _1063;
    float _1405 = fma(_1384, cbSceneParam._m0[89u].z, fma(_1383, cbSceneParam._m0[89u].y, _1382 * cbSceneParam._m0[89u].x));
    float _1408 = fma(_1384, cbSceneParam._m0[90u].z, fma(_1383, cbSceneParam._m0[90u].y, _1382 * cbSceneParam._m0[90u].x));
    float _1411 = fma(_1384, cbSceneParam._m0[91u].z, fma(_1383, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1382));
    float _1426 = _686 * 0.5;
    float _1427 = _687 * 0.5;
    float _1428 = _688 * 0.5;
    float _1429 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1360, _1363, _1366, _1369));
    float _1432 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1359, _1362, _1365, _1368));
    float _1435 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1358, _1361, _1364, _1367));
    float _1469;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1442 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1048, _1052, _1055, _1058));
        float _1446 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1050, _1053, _1056, _1059));
        float _1450 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1051, _1054, _1057, _1060));
        float _1457 = dot(vec4(cbModelParam._m0[39u]), vec4(_1426, _1427, _1428, 1.0));
        _1469 = dot(vec3(isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)), isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1457) ? 0.0 : (isnan(0.0) ? _1457 : max(0.0, _1457))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1469 = 1.0;
    }
    float _1480;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1471 = dot(vec4(cbModelParam._m0[40u]), vec4(_1426, _1427, _1428, 1.0));
        _1480 = dot(vec3(isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)), isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)), isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1471) ? 0.0 : (isnan(0.0) ? _1471 : max(0.0, _1471))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1480 = 1.0;
    }
    float _1484 = (_1480 * cbModelParam._m0[1u].x) + (_1469 * (1.0 - cbModelParam._m0[1u].x));
    float _1494 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _530);
    float _1495 = isnan(_1494) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1494 : min(cbModelParam._m0[25u].z, _1494));
    float _1575;
    float _1577;
    float _1579;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1542 = fma(_746, cbModelParam._m0[13u].z, fma(_742, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _738)) + cbModelParam._m0[13u].w;
        float _1546 = fma(_746, cbModelParam._m0[14u].z, fma(_742, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _738)) + cbModelParam._m0[14u].w;
        float _1550 = fma(_746, cbModelParam._m0[15u].z, fma(_742, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _738)) + cbModelParam._m0[15u].w;
        float _1553 = fma(_688, cbModelParam._m0[13u].z, fma(_687, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _686));
        float _1556 = fma(_688, cbModelParam._m0[14u].z, fma(_687, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _686));
        float _1559 = fma(_688, cbModelParam._m0[15u].z, fma(_687, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _686));
        float _1587;
        if (_1553 > 0.0)
        {
            _1587 = abs((1.0 - _1542) / _1553);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1542 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1587 = frontier_phi_14_12_ladder;
        }
        float _1811;
        if (_1556 > 0.0)
        {
            _1811 = abs((1.0 - _1546) / _1556);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1556 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1546 + 1.0) / _1556);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1811 = frontier_phi_23_19_ladder;
        }
        float _2057;
        if (_1559 > 0.0)
        {
            _2057 = abs((1.0 - _1550) / _1559);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1550 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2057 = frontier_phi_35_30_ladder;
        }
        float _2059 = isnan(_1811) ? _1587 : (isnan(_1587) ? _1811 : min(_1587, _1811));
        float _2060 = isnan(_2057) ? _2059 : (isnan(_2059) ? _2057 : min(_2059, _2057));
        float _2064 = (_2060 * _1553) + _1542;
        float _2065 = (_2060 * _1556) + _1546;
        float _2066 = (_2060 * _1559) + _1550;
        float _2067 = _2060 * 9.9999997473787516355514526367188e-05;
        float _2069 = (-1.0) - _2067;
        float _2071 = _2067 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2066 > _2071) || ((_2066 < _2069) || ((_2065 > _2071) || ((_2065 < _2069) || ((_2064 < _2069) || (_2064 > _2071))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2190 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2066, cbModelParam._m0[9u].z, fma(_2065, cbModelParam._m0[9u].y, _2064 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2066, cbModelParam._m0[10u].z, fma(_2065, cbModelParam._m0[10u].y, _2064 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2066, cbModelParam._m0[11u].z, fma(_2065, cbModelParam._m0[11u].y, _2064 * cbModelParam._m0[11u].x))), _1495);
            frontier_phi_13_35_ladder = _2190.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2190.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2190.x * cbModelParam._m0[1u].y;
        }
        _1575 = frontier_phi_13_35_ladder_2;
        _1577 = frontier_phi_13_35_ladder_1;
        _1579 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1563 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_686, _687, _688), _1495);
        _1575 = _1563.x * cbModelParam._m0[1u].y;
        _1577 = _1563.y * cbModelParam._m0[1u].y;
        _1579 = _1563.z * cbModelParam._m0[1u].y;
    }
    float _1583 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _530);
    float _1584 = isnan(_1583) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1583 : min(cbModelParam._m0[25u].w, _1583));
    float _1675;
    float _1677;
    float _1679;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1639 = fma(_746, cbModelParam._m0[21u].z, fma(_742, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _738)) + cbModelParam._m0[21u].w;
        float _1643 = fma(_746, cbModelParam._m0[22u].z, fma(_742, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _738)) + cbModelParam._m0[22u].w;
        float _1647 = fma(_746, cbModelParam._m0[23u].z, fma(_742, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _738)) + cbModelParam._m0[23u].w;
        float _1650 = fma(_688, cbModelParam._m0[21u].z, fma(_687, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _686));
        float _1653 = fma(_688, cbModelParam._m0[22u].z, fma(_687, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _686));
        float _1656 = fma(_688, cbModelParam._m0[23u].z, fma(_687, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _686));
        float _1816;
        if (_1650 > 0.0)
        {
            _1816 = abs((1.0 - _1639) / _1650);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1639 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1816 = frontier_phi_25_21_ladder;
        }
        float _2084;
        if (_1653 > 0.0)
        {
            _2084 = abs((1.0 - _1643) / _1653);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1643 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2084 = frontier_phi_37_32_ladder;
        }
        float _2289;
        if (_1656 > 0.0)
        {
            _2289 = abs((1.0 - _1647) / _1656);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1647 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2289 = frontier_phi_46_43_ladder;
        }
        float _2291 = isnan(_2084) ? _1816 : (isnan(_1816) ? _2084 : min(_1816, _2084));
        float _2292 = isnan(_2289) ? _2291 : (isnan(_2291) ? _2289 : min(_2291, _2289));
        float _2296 = (_2292 * _1650) + _1639;
        float _2297 = (_2292 * _1653) + _1643;
        float _2298 = (_2292 * _1656) + _1647;
        float _2299 = _2292 * 9.9999997473787516355514526367188e-05;
        float _2300 = (-1.0) - _2299;
        float _2302 = _2299 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2298 > _2302) || ((_2298 < _2300) || ((_2297 > _2302) || ((_2297 < _2300) || ((_2296 < _2300) || (_2296 > _2302))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2542 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2298, cbModelParam._m0[17u].z, fma(_2297, cbModelParam._m0[17u].y, _2296 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2298, cbModelParam._m0[18u].z, fma(_2297, cbModelParam._m0[18u].y, _2296 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2298, cbModelParam._m0[19u].z, fma(_2297, cbModelParam._m0[19u].y, _2296 * cbModelParam._m0[19u].x))), _1584);
            frontier_phi_22_46_ladder = _2542.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2542.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2542.x * cbModelParam._m0[1u].z;
        }
        _1675 = frontier_phi_22_46_ladder_2;
        _1677 = frontier_phi_22_46_ladder_1;
        _1679 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1659 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_686, _687, _688), _1584);
        _1675 = _1659.x * cbModelParam._m0[1u].z;
        _1677 = _1659.y * cbModelParam._m0[1u].z;
        _1679 = _1659.z * cbModelParam._m0[1u].z;
    }
    float _1691 = ((((1.0 - _706) * ((_694 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_706 * _694)) * _678;
    float _1692 = _1691 * ((cbModelParam._m0[1u].w * (_1675 - _1575)) + _1575);
    float _1693 = _1691 * ((cbModelParam._m0[1u].w * (_1677 - _1577)) + _1577);
    float _1694 = _1691 * ((cbModelParam._m0[1u].w * (_1679 - _1579)) + _1579);
    float _1697 = fma(_1694, cbSceneParam._m0[89u].z, fma(_1693, cbSceneParam._m0[89u].y, _1692 * cbSceneParam._m0[89u].x));
    float _1700 = fma(_1694, cbSceneParam._m0[90u].z, fma(_1693, cbSceneParam._m0[90u].y, _1692 * cbSceneParam._m0[90u].x));
    float _1703 = fma(_1694, cbSceneParam._m0[91u].z, fma(_1693, cbSceneParam._m0[91u].y, _1692 * cbSceneParam._m0[91u].x));
    vec4 _1711 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_615, _616));
    float _1713 = _1711.w;
    float _1725 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1713);
    float _1726 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1713);
    float _1727 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1713);
    uvec4 _1731 = floatBitsToUint(cbInstanceData._m0[_653 + 5u]);
    uint _1733 = _1731.x * 14u;
    uint _1734 = _1733 + 13u;
    float _1741 = _678 + (-1.0);
    float _1746 = (cbLight._m0[_1734].x * _1741) + 1.0;
    float _1747 = (cbLight._m0[_1734].y * _1741) + 1.0;
    float _1748 = (cbLight._m0[_1734].z * _1741) + 1.0;
    float _1749 = (cbLight._m0[_1734].w * _1741) + 1.0;
    uint _1750 = _1733 + 5u;
    float _1756 = isnan(1.0) ? _1747 : (isnan(_1747) ? 1.0 : min(_1747, 1.0));
    uint _1760 = _1733 + 4u;
    float _1770 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
    uint _1774 = _1733 | 1u;
    float _1785 = dot(vec3(cbLight._m0[_1733].xyz), vec3(_527, _528, _529));
    float _1788 = dot(vec3(cbLight._m0[_1774].xyz), vec3(_527, _528, _529));
    float _3947 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _3958 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1793 = (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * 0.3183098733425140380859375;
    float _1795 = (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * 0.3183098733425140380859375;
    float _1802 = ((cbLight._m0[_1750].x * _1756) * _1795) + (((cbLight._m0[_1760].x * _1725) * _1770) * _1793);
    float _1803 = ((_1756 * cbLight._m0[_1750].y) * _1795) + (((cbLight._m0[_1760].y * _1726) * _1770) * _1793);
    float _1804 = ((_1756 * cbLight._m0[_1750].z) * _1795) + (((cbLight._m0[_1760].z * _1727) * _1770) * _1793);
    uvec4 _1808 = floatBitsToUint(cbLight._m0[_1733 + 12u]);
    bool _1810 = _1808.x == 0u;
    float _1821;
    float _1823;
    float _1825;
    if (_1810)
    {
        _1821 = _1802;
        _1823 = _1803;
        _1825 = _1804;
    }
    else
    {
        uint _1829 = _1733 + 6u;
        float _1845 = (dot(vec3(cbLight._m0[_1733 + 2u].xyz), vec3(_527, _528, _529)) * 0.5) + 0.5;
        float _1846 = _1845 * _1845;
        float _3969 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
        float _1847 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1848 = isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0));
        _1821 = (((cbLight._m0[_1829].x * 0.3183098733425140380859375) * _1847) * _1848) + _1802;
        _1823 = (((cbLight._m0[_1829].y * 0.3183098733425140380859375) * _1847) * _1848) + _1803;
        _1825 = (((cbLight._m0[_1829].z * 0.3183098733425140380859375) * _1847) * _1848) + _1804;
    }
    bool _1828 = _1808.y == 0u;
    float _1866;
    float _1868;
    float _1870;
    if (_1828)
    {
        _1866 = _1821;
        _1868 = _1823;
        _1870 = _1825;
    }
    else
    {
        uint _2028 = _1733 + 7u;
        float _2044 = (dot(vec3(cbLight._m0[_1733 + 3u].xyz), vec3(_527, _528, _529)) * 0.5) + 0.5;
        float _2045 = _2044 * _2044;
        float _3985 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2046 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _2047 = isnan(1.0) ? _1749 : (isnan(_1749) ? 1.0 : min(_1749, 1.0));
        _1866 = (((cbLight._m0[_2028].x * 0.3183098733425140380859375) * _2046) * _2047) + _1821;
        _1868 = (((cbLight._m0[_2028].y * 0.3183098733425140380859375) * _2046) * _2047) + _1823;
        _1870 = (((cbLight._m0[_2028].z * 0.3183098733425140380859375) * _2046) * _2047) + _1825;
    }
    uint _1873 = _1733 + 8u;
    float _1886 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1733].w)) * _530) * 0.949999988079071044921875);
    float _1887 = _1886 * _1886;
    float _1888 = cbLight._m0[_1733].x + _607;
    float _1889 = cbLight._m0[_1733].y + _608;
    float _1890 = cbLight._m0[_1733].z + _609;
    float _1894 = inversesqrt(dot(vec3(_1888, _1889, _1890), vec3(_1888, _1889, _1890)));
    float _1895 = _1894 * _1888;
    float _1896 = _1894 * _1889;
    float _1897 = _1894 * _1890;
    float _1898 = dot(vec3(_527, _528, _529), vec3(cbLight._m0[_1733].xyz));
    float _4001 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1901 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _4012 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _1902 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _1903 = dot(vec3(_527, _528, _529), vec3(_1895, _1896, _1897));
    float _4023 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1906 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _1907 = dot(vec3(cbLight._m0[_1733].xyz), vec3(_1895, _1896, _1897));
    float _4034 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1911 = _1887 * _1887;
    float _1915 = ((_1906 * _1906) * (_1911 + (-1.0))) + 1.0;
    float _1926 = (exp2(log2(1.0 - (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1927 = 1.0 - _1887;
    float _1938 = (0.5 / (((_1902 * ((_1901 * _1927) + _1887)) + 9.9999999392252902907785028219223e-09) + (((_1902 * _1927) + _1887) * _1901))) * _1901;
    float _4045 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1940 = (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1911 / ((_1915 * _1915) * 3.141590118408203125));
    uint _1954 = _1733 + 9u;
    float _1965 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1774].w)) * _530) * 0.949999988079071044921875);
    float _1966 = _1965 * _1965;
    float _1967 = cbLight._m0[_1774].x + _607;
    float _1968 = cbLight._m0[_1774].y + _608;
    float _1969 = cbLight._m0[_1774].z + _609;
    float _1973 = inversesqrt(dot(vec3(_1967, _1968, _1969), vec3(_1967, _1968, _1969)));
    float _1974 = _1973 * _1967;
    float _1975 = _1973 * _1968;
    float _1976 = _1973 * _1969;
    float _1977 = dot(vec3(_527, _528, _529), vec3(cbLight._m0[_1774].xyz));
    float _4056 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1980 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _1981 = dot(vec3(_527, _528, _529), vec3(_1974, _1975, _1976));
    float _4067 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1984 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _1985 = dot(vec3(cbLight._m0[_1774].xyz), vec3(_1974, _1975, _1976));
    float _4078 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1989 = _1966 * _1966;
    float _1993 = ((_1984 * _1984) * (_1989 + (-1.0))) + 1.0;
    float _2002 = (exp2(log2(1.0 - (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2003 = 1.0 - _1966;
    float _2013 = (0.5 / (((_1902 * ((_1980 * _2003) + _1966)) + 9.9999999392252902907785028219223e-09) + (((_1902 * _2003) + _1966) * _1980))) * _1980;
    float _4089 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2015 = (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_1989 / ((_1993 * _1993) * 3.141590118408203125));
    float _2025 = (((_2002 * cbLight._m0[_1954].x) * _2015) * _1756) + ((((cbLight._m0[_1873].x * _1725) * _1926) * _1940) * _1770);
    float _2026 = (((_2002 * cbLight._m0[_1954].y) * _2015) * _1756) + ((((cbLight._m0[_1873].y * _1726) * _1926) * _1940) * _1770);
    float _2027 = (((_2002 * cbLight._m0[_1954].z) * _2015) * _1756) + ((((cbLight._m0[_1873].z * _1727) * _1926) * _1940) * _1770);
    float _2089;
    float _2091;
    float _2093;
    if (_1810)
    {
        _2089 = _2025;
        _2091 = _2026;
        _2093 = _2027;
    }
    else
    {
        uint _2095 = _1733 + 2u;
        uint _2099 = _1733 + 10u;
        float _2113 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2095].w)) * _530) * 0.949999988079071044921875);
        float _2114 = _2113 * _2113;
        float _2115 = cbLight._m0[_2095].x + _607;
        float _2116 = cbLight._m0[_2095].y + _608;
        float _2117 = cbLight._m0[_2095].z + _609;
        float _2121 = inversesqrt(dot(vec3(_2115, _2116, _2117), vec3(_2115, _2116, _2117)));
        float _2122 = _2121 * _2115;
        float _2123 = _2121 * _2116;
        float _2124 = _2121 * _2117;
        float _2125 = dot(vec3(_527, _528, _529), vec3(cbLight._m0[_2095].xyz));
        float _4100 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2128 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _2129 = dot(vec3(_527, _528, _529), vec3(_2122, _2123, _2124));
        float _4111 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2132 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _2133 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_2122, _2123, _2124));
        float _4122 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2137 = _2114 * _2114;
        float _2141 = ((_2132 * _2132) * (_2137 + (-1.0))) + 1.0;
        float _2150 = (exp2(log2(1.0 - (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2151 = 1.0 - _2114;
        float _2161 = (0.5 / (((_1902 * ((_2128 * _2151) + _2114)) + 9.9999999392252902907785028219223e-09) + (((_1902 * _2151) + _2114) * _2128))) * _2128;
        float _4133 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2163 = (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_2137 / ((_2141 * _2141) * 3.141590118408203125));
        float _2164 = isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0));
        _2089 = (((_2150 * cbLight._m0[_2099].x) * _2163) * _2164) + _2025;
        _2091 = (((_2150 * cbLight._m0[_2099].y) * _2163) * _2164) + _2026;
        _2093 = (((_2150 * cbLight._m0[_2099].z) * _2163) * _2164) + _2027;
    }
    float _2199;
    float _2201;
    float _2203;
    if (_1828)
    {
        _2199 = _2089;
        _2201 = _2091;
        _2203 = _2093;
    }
    else
    {
        uint _2210 = _1733 + 3u;
        uint _2214 = _1733 + 11u;
        float _2228 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2210].w)) * _530) * 0.949999988079071044921875);
        float _2229 = _2228 * _2228;
        float _2230 = cbLight._m0[_2210].x + _607;
        float _2231 = cbLight._m0[_2210].y + _608;
        float _2232 = cbLight._m0[_2210].z + _609;
        float _2236 = inversesqrt(dot(vec3(_2230, _2231, _2232), vec3(_2230, _2231, _2232)));
        float _2237 = _2236 * _2230;
        float _2238 = _2236 * _2231;
        float _2239 = _2236 * _2232;
        float _2240 = dot(vec3(_527, _528, _529), vec3(cbLight._m0[_2210].xyz));
        float _4149 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2243 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _2244 = dot(vec3(_527, _528, _529), vec3(_2237, _2238, _2239));
        float _4160 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2247 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _2248 = dot(vec3(cbLight._m0[_2210].xyz), vec3(_2237, _2238, _2239));
        float _4171 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2252 = _2229 * _2229;
        float _2256 = ((_2247 * _2247) * (_2252 + (-1.0))) + 1.0;
        float _2265 = (exp2(log2(1.0 - (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2266 = 1.0 - _2229;
        float _2276 = (0.5 / (((_1902 * ((_2243 * _2266) + _2229)) + 9.9999999392252902907785028219223e-09) + (((_1902 * _2266) + _2229) * _2243))) * _2243;
        float _4182 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2278 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_2252 / ((_2256 * _2256) * 3.141590118408203125));
        float _2279 = isnan(1.0) ? _1749 : (isnan(_1749) ? 1.0 : min(_1749, 1.0));
        _2199 = (((_2265 * cbLight._m0[_2214].x) * _2278) * _2279) + _2089;
        _2201 = (((_2265 * cbLight._m0[_2214].y) * _2278) * _2279) + _2091;
        _2203 = (((_2265 * cbLight._m0[_2214].z) * _2278) * _2279) + _2093;
    }
    float _2414;
    float _2416;
    float _2418;
    float _2420;
    float _2422;
    float _2424;
    if (_1731.y == 0u)
    {
        float _2354 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2355 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2354;
        float _2356 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2354;
        float _2357 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2354;
        uvec4 _2369 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2370 = _2369.x;
        uint _2381 = uint((float(_2369.y) * floor(float(uint(cbSceneParam._m0[85u].y * _616) / _2370))) + floor(float(uint(cbSceneParam._m0[85u].x * _615) / _2370)));
        float _2391 = (log2(_2357 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2392 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        uint _2395 = uint(isnan(14.0) ? _2392 : (isnan(_2392) ? 14.0 : min(_2392, 14.0)));
        uvec4 _2400 = texelFetch(g_lightClusterGridBuffer, int(((_2395 << 2u) + (_2381 << 6u)) >> 2u));
        uint _2401 = _2400.x;
        uint _2402 = _2369.z;
        float _2547;
        float _2549;
        float _2551;
        float _2553;
        float _2555;
        float _2557;
        if (((((1u << ((_2402 >> 4u) & 15u)) + 4294967295u) & _2401) == 0u) || ((_2402 & 240u) == 0u))
        {
            _2547 = 0.0;
            _2549 = 0.0;
            _2551 = 0.0;
            _2553 = 0.0;
            _2555 = 0.0;
            _2557 = 0.0;
        }
        else
        {
            float _2548;
            float _2550;
            float _2552;
            float _2554;
            float _2556;
            float _2558;
            float _2700 = 0.0;
            float _2701 = 0.0;
            float _2702 = 0.0;
            float _2703 = 0.0;
            float _2704 = 0.0;
            float _2705 = 0.0;
            uint _2706 = 0u;
            uint _2715;
            bool _2716;
            for (;;)
            {
                _2715 = texelFetch(g_lightClassification, int((((_2395 << 5u) + (_2381 << 9u)) + (_2706 << 2u)) >> 2u)).x;
                _2716 = _2715 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2716)
                {
                    frontier_phi_61_pred = _2700;
                    frontier_phi_61_pred_1 = _2705;
                    frontier_phi_61_pred_2 = _2704;
                    frontier_phi_61_pred_3 = _2703;
                    frontier_phi_61_pred_4 = _2702;
                    frontier_phi_61_pred_5 = _2701;
                }
                else
                {
                    float _2824;
                    float _2825;
                    float _2826;
                    float _2827;
                    float _2828;
                    float _2829;
                    uint _2830;
                    _2824 = _2700;
                    _2825 = _2701;
                    _2826 = _2702;
                    _2827 = _2703;
                    _2828 = _2704;
                    _2829 = _2705;
                    _2830 = _2715;
                    float _2756;
                    float _2757;
                    float _2758;
                    float _2759;
                    float _2760;
                    float _2761;
                    for (;;)
                    {
                        uint _2834 = uint(findLSB(_2830)) + (_2706 << 5u);
                        uint _2831 = (_2830 + 4294967295u) & _2830;
                        uint _2836 = _2834 * 48u;
                        vec4 _2850 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2836)).x, texelFetch(g_PointLightRenderingBuffer, int(_2836 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2836 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2836 + 3u)).x));
                        uint _2856 = (_2834 * 48u) + 4u;
                        vec4 _2869 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2856)).x, texelFetch(g_PointLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2856 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2856 + 3u)).x));
                        uint _2875 = (_2834 * 48u) + 8u;
                        vec3 _2886 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2875)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 2u)).x));
                        float _2890 = _2850.x - _2355;
                        float _2891 = _2850.y - _2356;
                        float _2892 = _2850.z - _2357;
                        float _2893 = dot(vec3(_2890, _2891, _2892), vec3(_2890, _2891, _2892));
                        float _2896 = inversesqrt(_2893);
                        float _2897 = _2896 * _2890;
                        float _2898 = _2896 * _2891;
                        float _2899 = _2896 * _2892;
                        float _2900 = dot(vec3(_634, _637, _640), vec3(_2897, _2898, _2899));
                        float _2905 = 1.0 - (_2893 * _2850.w);
                        float _4208 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
                        float _2906 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                        float _2907 = sqrt(_2893) * _2869.w;
                        float _2910 = 1.39999997615814208984375 / (_2907 + 1.39999997615814208984375);
                        float _2911 = _2910 * _2910;
                        float _2914 = ((1.0 - _2911) * _2900) + _2911;
                        float _2917 = _2907 * _2907;
                        float _2921 = ((isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0))) * _2906) / ((_2917 * 0.699999988079071044921875) + 1.0);
                        float _2925 = (-0.0) - _2355;
                        float _2926 = (-0.0) - _2356;
                        float _2927 = (-0.0) - _2357;
                        float _2931 = inversesqrt(dot(vec3(_2925, _2926, _2927), vec3(_2925, _2926, _2927)));
                        float _2932 = _2931 * _2925;
                        float _2933 = _2931 * _2926;
                        float _2934 = _2931 * _2927;
                        float _2942 = exp2(log2(1.0 / ((_2917 * 3.5) + 5.0)) * 0.25);
                        float _2943 = 1.0 - _694;
                        float _2950 = sqrt(1.0 - ((1.0 - (_2943 * _2943)) * (1.0 - (_2942 * _2942))));
                        float _2951 = _2950 * _2950;
                        float _2952 = _2951 * _2951;
                        float _2953 = _2932 + _2897;
                        float _2954 = _2933 + _2898;
                        float _2955 = _2934 + _2899;
                        float _2959 = inversesqrt(dot(vec3(_2953, _2954, _2955), vec3(_2953, _2954, _2955)));
                        float _2963 = dot(vec3(_634, _637, _640), vec3(_2932, _2933, _2934));
                        float _4224 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
                        float _2966 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
                        float _2967 = dot(vec3(_634, _637, _640), vec3(_2959 * _2953, _2959 * _2954, _2959 * _2955));
                        float _4235 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
                        float _2970 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
                        float _2974 = ((_2970 * _2970) * (_2952 + (-1.0))) + 1.0;
                        float _2975 = _2910 * _2951;
                        float _2976 = _2975 * _2975;
                        float _2979 = ((1.0 - _2976) * _2900) + _2976;
                        float _4246 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
                        float _2980 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
                        float _2981 = 1.0 - _2951;
                        float _2991 = (0.5 / (((_2980 * ((_2966 * _2981) + _2951)) + 9.9999999392252902907785028219223e-09) + (((_2980 * _2981) + _2951) * _2966))) * _2980;
                        float _4257 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                        float _3002 = (((_2952 * 3.1415927410125732421875) * (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0)))) / ((_2974 * _2974) * ((_2917 * 2.1991131305694580078125) + 3.141590118408203125))) * _2906;
                        _2759 = (_2921 * _2869.x) + _2827;
                        _2760 = (_2921 * _2869.y) + _2828;
                        _2761 = (_2921 * _2869.z) + _2829;
                        _2756 = (_3002 * _2886.x) + _2824;
                        _2757 = (_3002 * _2886.y) + _2825;
                        _2758 = (_3002 * _2886.z) + _2826;
                        if (_2831 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2824 = _2756;
                            _2825 = _2757;
                            _2826 = _2758;
                            _2827 = _2759;
                            _2828 = _2760;
                            _2829 = _2761;
                            _2830 = _2831;
                        }
                    }
                    frontier_phi_61_pred = _2756;
                    frontier_phi_61_pred_1 = _2761;
                    frontier_phi_61_pred_2 = _2760;
                    frontier_phi_61_pred_3 = _2759;
                    frontier_phi_61_pred_4 = _2758;
                    frontier_phi_61_pred_5 = _2757;
                }
                _2548 = frontier_phi_61_pred;
                _2558 = frontier_phi_61_pred_1;
                _2556 = frontier_phi_61_pred_2;
                _2554 = frontier_phi_61_pred_3;
                _2552 = frontier_phi_61_pred_4;
                _2550 = frontier_phi_61_pred_5;
                uint _2707 = _2706 + 1u;
                if (_2707 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2700 = _2548;
                    _2701 = _2550;
                    _2702 = _2552;
                    _2703 = _2554;
                    _2704 = _2556;
                    _2705 = _2558;
                    _2706 = _2707;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2547 = _2548;
            _2549 = _2550;
            _2551 = _2552;
            _2553 = _2554;
            _2555 = _2556;
            _2557 = _2558;
        }
        uvec4 _2561 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2562 = _2561.z;
        uint _2564 = (_2562 >> 8u) & 15u;
        float _2668;
        float _2670;
        float _2672;
        float _2674;
        float _2676;
        float _2678;
        if (((4294967295u << _2564) & _2401) == 0u)
        {
            _2668 = _2547;
            _2670 = _2549;
            _2672 = _2551;
            _2674 = _2553;
            _2676 = _2555;
            _2678 = _2557;
        }
        else
        {
            float _2693 = inversesqrt(dot(vec3(_2355, _2356, _2357), vec3(_2355, _2356, _2357)));
            float _2694 = _2693 * _2355;
            float _2695 = _2693 * _2356;
            float _2696 = _2693 * _2357;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2564 < ((_2562 >> 12u) & 15u))
            {
                float _2669;
                float _2671;
                float _2673;
                float _2675;
                float _2677;
                float _2679;
                float _2807 = _2547;
                float _2808 = _2549;
                float _2809 = _2551;
                float _2810 = _2553;
                float _2811 = _2555;
                float _2812 = _2557;
                uint _2813 = _2564;
                uint _2822;
                bool _2823;
                for (;;)
                {
                    _2822 = texelFetch(g_lightClassification, int((((_2395 << 5u) + (_2381 << 9u)) + (_2813 << 2u)) >> 2u)).x;
                    _2823 = _2822 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2823)
                    {
                        frontier_phi_67_pred = _2810;
                        frontier_phi_67_pred_1 = _2811;
                        frontier_phi_67_pred_2 = _2812;
                        frontier_phi_67_pred_3 = _2809;
                        frontier_phi_67_pred_4 = _2808;
                        frontier_phi_67_pred_5 = _2807;
                    }
                    else
                    {
                        float _3007;
                        float _3008;
                        float _3009;
                        float _3010;
                        float _3011;
                        float _3012;
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3020 = _2807;
                        float _3021 = _2808;
                        float _3022 = _2809;
                        float _3023 = _2810;
                        float _3024 = _2811;
                        float _3025 = _2812;
                        uint _3026 = _2822;
                        uint _3027;
                        vec4 _3052;
                        float _3053;
                        vec4 _3068;
                        vec3 _3080;
                        vec4 _3095;
                        vec4 _3111;
                        float _3158;
                        bool _3159;
                        for (;;)
                        {
                            uint _3037 = ((_2813 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3026));
                            _3027 = (_3026 + 4294967295u) & _3026;
                            uint _3039 = _3037 * 40u;
                            _3052 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3039)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 3u)).x));
                            _3053 = _3052.w;
                            uint _3055 = (_3037 * 40u) + 4u;
                            _3068 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3055)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 3u)).x));
                            uint _3070 = (_3037 * 40u) + 8u;
                            _3080 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3070)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 2u)).x));
                            uint _3082 = (_3037 * 40u) + 16u;
                            _3095 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3082)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 3u)).x));
                            uint _3098 = (_3037 * 40u) + 20u;
                            _3111 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3098)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 3u)).x));
                            uint _3114 = (_3037 * 40u) + 24u;
                            vec4 _3127 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 3u)).x));
                            uint _3133 = (_3037 * 40u) + 28u;
                            vec4 _3146 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 3u)).x));
                            _3158 = fma(_2357, _3146.z, fma(_2356, _3146.y, _3146.x * _2355)) + _3146.w;
                            _3159 = !((fma(_2357, _3127.z, fma(_2356, _3127.y, _3127.x * _2355)) + _3127.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3159)
                            {
                                float _3186 = _3052.x - _2355;
                                float _3187 = _3052.y - _2356;
                                float _3188 = _3052.z - _2357;
                                float _3189 = dot(vec3(_3186, _3187, _3188), vec3(_3186, _3187, _3188));
                                float _3192 = inversesqrt(_3189);
                                float _3193 = _3192 * _3186;
                                float _3194 = _3192 * _3187;
                                float _3195 = _3192 * _3188;
                                float _3199 = 1.0 - (_3189 / (_3053 * _3053));
                                float _4268 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                                float _3200 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                                float _3204 = sqrt(_3189) * _3068.w;
                                float _3206 = 1.39999997615814208984375 / (_3204 + 1.39999997615814208984375);
                                float _3207 = _3206 * _3206;
                                float _3210 = ((1.0 - _3207) * dot(vec3(_3193, _3194, _3195), vec3(_634, _637, _640))) + _3207;
                                float _3213 = _3204 * _3204;
                                float _3217 = (fma(_2357, _3095.z, fma(_2356, _3095.y, _3095.x * _2355)) + _3095.w) / _3158;
                                float _3218 = (fma(_2357, _3111.z, fma(_2356, _3111.y, _3111.x * _2355)) + _3111.w) / _3158;
                                float _3222 = 1.0 - dot(vec2(_3217, _3218), vec2(_3217, _3218));
                                float _4284 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                                float _3223 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
                                float _3224 = _3223 * (((isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0))) * _3200) / ((_3213 * 0.699999988079071044921875) + 1.0));
                                float _3236 = exp2(log2(1.0 / ((_3213 * 3.5) + 5.0)) * 0.25);
                                float _3237 = 1.0 - _694;
                                float _3244 = sqrt(1.0 - ((1.0 - (_3237 * _3237)) * (1.0 - (_3236 * _3236))));
                                float _3245 = _3244 * _3244;
                                float _3246 = _3245 * _3245;
                                float _3247 = _3193 - _2694;
                                float _3248 = _3194 - _2695;
                                float _3249 = _3195 - _2696;
                                float _3253 = inversesqrt(dot(vec3(_3247, _3248, _3249), vec3(_3247, _3248, _3249)));
                                float _3257 = dot(vec3(_634, _637, _640), vec3((-0.0) - _2694, (-0.0) - _2695, (-0.0) - _2696));
                                float _4295 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                                float _3260 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
                                float _3261 = dot(vec3(_634, _637, _640), vec3(_3253 * _3247, _3253 * _3248, _3253 * _3249));
                                float _4306 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                                float _3264 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                                float _3268 = ((_3264 * _3264) * (_3246 + (-1.0))) + 1.0;
                                float _3269 = _3206 * _3245;
                                float _3270 = _3269 * _3269;
                                float _3276 = ((1.0 - _3270) * dot(vec3(_634, _637, _640), vec3(_3193, _3194, _3195))) + _3270;
                                float _4317 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                                float _3277 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                                float _3278 = 1.0 - _3245;
                                float _3288 = (0.5 / (((_3277 * ((_3260 * _3278) + _3245)) + 9.9999999392252902907785028219223e-09) + (((_3277 * _3278) + _3245) * _3260))) * _3277;
                                float _4328 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                                float _3298 = (_3223 * _3200) * (((_3246 * 3.1415927410125732421875) * (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) / ((_3268 * _3268) * ((_3213 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3298 * _3080.x;
                                frontier_phi_73_pred_1 = _3298 * _3080.y;
                                frontier_phi_73_pred_2 = _3224 * _3068.z;
                                frontier_phi_73_pred_3 = _3224 * _3068.y;
                                frontier_phi_73_pred_4 = _3224 * _3068.x;
                                frontier_phi_73_pred_5 = _3298 * _3080.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3302 = frontier_phi_73_pred;
                            _3303 = frontier_phi_73_pred_1;
                            _3307 = frontier_phi_73_pred_2;
                            _3306 = frontier_phi_73_pred_3;
                            _3305 = frontier_phi_73_pred_4;
                            _3304 = frontier_phi_73_pred_5;
                            _3010 = _3305 + _3023;
                            _3011 = _3306 + _3024;
                            _3012 = _3307 + _3025;
                            _3007 = _3302 + _3020;
                            _3008 = _3303 + _3021;
                            _3009 = _3304 + _3022;
                            if (_3027 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3020 = _3007;
                                _3021 = _3008;
                                _3022 = _3009;
                                _3023 = _3010;
                                _3024 = _3011;
                                _3025 = _3012;
                                _3026 = _3027;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3010;
                        frontier_phi_67_pred_1 = _3011;
                        frontier_phi_67_pred_2 = _3012;
                        frontier_phi_67_pred_3 = _3009;
                        frontier_phi_67_pred_4 = _3008;
                        frontier_phi_67_pred_5 = _3007;
                    }
                    _2675 = frontier_phi_67_pred;
                    _2677 = frontier_phi_67_pred_1;
                    _2679 = frontier_phi_67_pred_2;
                    _2673 = frontier_phi_67_pred_3;
                    _2671 = frontier_phi_67_pred_4;
                    _2669 = frontier_phi_67_pred_5;
                    uint _2814 = _2813 + 1u;
                    if (_2814 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2807 = _2669;
                        _2808 = _2671;
                        _2809 = _2673;
                        _2810 = _2675;
                        _2811 = _2677;
                        _2812 = _2679;
                        _2813 = _2814;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2677;
                frontier_phi_55_56_ladder_1 = _2679;
                frontier_phi_55_56_ladder_2 = _2675;
                frontier_phi_55_56_ladder_3 = _2673;
                frontier_phi_55_56_ladder_4 = _2671;
                frontier_phi_55_56_ladder_5 = _2669;
            }
            else
            {
                frontier_phi_55_56_ladder = _2555;
                frontier_phi_55_56_ladder_1 = _2557;
                frontier_phi_55_56_ladder_2 = _2553;
                frontier_phi_55_56_ladder_3 = _2551;
                frontier_phi_55_56_ladder_4 = _2549;
                frontier_phi_55_56_ladder_5 = _2547;
            }
            _2668 = frontier_phi_55_56_ladder_5;
            _2670 = frontier_phi_55_56_ladder_4;
            _2672 = frontier_phi_55_56_ladder_3;
            _2674 = frontier_phi_55_56_ladder_2;
            _2676 = frontier_phi_55_56_ladder;
            _2678 = frontier_phi_55_56_ladder_1;
        }
        float _2683 = isnan(1.0) ? _678 : (isnan(_678) ? 1.0 : min(_678, 1.0));
        _2414 = (_2683 * _2674) + _1866;
        _2416 = (_2683 * _2676) + _1868;
        _2418 = (_2683 * _2678) + _1870;
        _2420 = ((_2668 * 0.039999999105930328369140625) * _2683) + _2199;
        _2422 = ((_2670 * 0.039999999105930328369140625) * _2683) + _2201;
        _2424 = ((_2672 * 0.039999999105930328369140625) * _2683) + _2203;
    }
    else
    {
        _2414 = _1866;
        _2416 = _1868;
        _2418 = _1870;
        _2420 = _2199;
        _2422 = _2201;
        _2424 = _2203;
    }
    uint _2430 = _654 + uint(cbMatDynParam._m0[0u].w);
    float _2436 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].y;
    float _2442 = (((((_2436 * cbMtdParam._m0[10u].x) * _408.x) * _431) * _506) * (((1.0 - _485) * cbMtdParam._m0[16u].y) + _485)) * cbInstanceData._m0[_2430].x;
    float _2448 = (((((_2436 * cbMtdParam._m0[10u].y) * _408.y) * _431) * _506) * (((1.0 - _487) * cbMtdParam._m0[16u].y) + _487)) * cbInstanceData._m0[_2430].y;
    float _2454 = (((((_2436 * cbMtdParam._m0[10u].z) * _408.z) * _431) * _506) * (((1.0 - _489) * cbMtdParam._m0[16u].y) + _489)) * cbInstanceData._m0[_2430].z;
    float _4344 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _4355 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _4366 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _2471 = (((isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_2414 + ((isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))) * _678))) + ((_2420 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _1484)) * cbPerFrame._m0[3u].x)) + _2442;
    float _2473 = (_2448 + ((_2422 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _1484)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_2416 + ((isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))) * _678)));
    float _2475 = (_2454 + ((_2424 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _1484)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_2418 + ((isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))) * _678)));
    float _4392 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2488 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    uint _2489 = _653 + 6u;
    float _2497 = _615 / cbSceneParam._m0[86u].x;
    float _2498 = _616 / cbSceneParam._m0[86u].y;
    vec4 _2512 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2497, _2498, (log2((isnan(cbSceneParam._m0[77u].w) ? _549 : (isnan(_549) ? cbSceneParam._m0[77u].w : min(_549, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2514 = _2512.x;
    float _2515 = _2512.y;
    float _2516 = _2512.z;
    float _2517 = _2512.w;
    float _2609;
    float _2611;
    float _2613;
    float _2615;
    if (_549 > cbSceneParam._m0[78u].w)
    {
        float _2572 = isnan(_549) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _549 : min(cbSceneParam._m0[80u].w, _549));
        float _2573 = _2572 / _549;
        float _2584 = _2573 * _600;
        float _2585 = _601 * _2573;
        float _2586 = (-0.0) - _2585;
        float _2587 = _2573 * _602;
        float _2589 = (cbSceneParam._m0[77u].w * _2586) / _2572;
        float _2590 = _2589 + cbSceneParam._m0[79u].w;
        float _2591 = cbSceneParam._m0[79u].w - _2585;
        float _2597 = sqrt(((_2584 * _2584) + (_2585 * _2585)) + (_2587 * _2587));
        float _2600 = (1.0 - (cbSceneParam._m0[77u].w / _2572)) * _2597;
        float _2605 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2607 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2769;
        if (abs((_2586 - _2589) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2769 = ((((_2590 > 0.0) ? exp2(_2605 * _2590) : (2.0 - exp2(_2607 * _2590))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2600;
        }
        else
        {
            float _2729 = 1.0 / cbSceneParam._m0[80u].x;
            float _2730 = isnan(_2591) ? _2590 : (isnan(_2590) ? _2591 : max(_2590, _2591));
            float _2731 = isnan(_2591) ? _2590 : (isnan(_2590) ? _2591 : min(_2590, _2591));
            float _2740 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : min(_2730, 0.0));
            float _2741 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : min(_2731, 0.0));
            _2769 = ((abs(_2597 / _2586) * cbSceneParam._m0[80u].y) * ((((_2740 - _2741) * 2.0) - ((exp2(_2605 * (isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0)))) - exp2(_2605 * (isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0))))) * _2729)) - ((exp2(_2607 * _2740) - exp2(_2607 * _2741)) * _2729))) + (_2600 * cbSceneParam._m0[80u].z);
        }
        vec4 _2771 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2497, _2498, 1.0), 0.0);
        float _2780 = exp2((_2769 * (-1.44269502162933349609375)) * (1.0 - _2771.w));
        float _2781 = log2(_2780);
        float _2797 = log2(_2517);
        _2609 = (exp2(_2797 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2781 * cbSceneParam._m0[78u].x)) * _2771.x) / cbSceneParam._m0[78u].x)) + _2514;
        _2611 = (exp2(_2797 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2781 * cbSceneParam._m0[78u].y)) * _2771.y) / cbSceneParam._m0[78u].y)) + _2515;
        _2613 = (exp2(_2797 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2781 * cbSceneParam._m0[78u].z)) * _2771.z) / cbSceneParam._m0[78u].z)) + _2516;
        _2615 = _2780 * _2517;
    }
    else
    {
        _2609 = _2514;
        _2611 = _2515;
        _2613 = _2516;
        _2615 = _2517;
    }
    float _2627 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2628 = _2627 == 3.0;
    float _2629 = log2(_2615);
    float _2633 = exp2(_2629 * cbSceneParam._m0[78u].x);
    float _2634 = exp2(_2629 * cbSceneParam._m0[78u].y);
    float _2635 = exp2(_2629 * cbSceneParam._m0[78u].z);
    float _2636 = _2633 * (isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0)));
    float _2637 = _2634 * (isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0)));
    float _2638 = _2635 * (isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0)));
    float _2647 = (_2627 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2647 * (_2628 ? _2636 : (_2636 + (cbSceneParam._m0[72u].w * _2609)));
    SV_Target.y = _2647 * (_2628 ? _2637 : (_2637 + (cbSceneParam._m0[72u].w * _2611)));
    SV_Target.z = _2647 * (_2628 ? _2638 : (_2638 + (cbSceneParam._m0[72u].w * _2613)));
    SV_Target.w = cbInstanceData._m0[_2489].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2442) * _2488) * _2633) * _2647;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2448) * _2488) * _2634) * _2647;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2454) * _2488) * _2635) * _2647;
    SV_Target_1.w = cbInstanceData._m0[_2489].w;
}


