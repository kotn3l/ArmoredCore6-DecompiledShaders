#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1012;
float _3454;
float _3455;
float _3456;
float _3457;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _243 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _249 = _243.x * cbMtdParam._m0[9u].x;
    float _250 = _243.y * cbMtdParam._m0[9u].y;
    float _251 = _243.z * cbMtdParam._m0[9u].z;
    vec4 _264 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    vec4 _279 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _283 = _279.z;
    float _287 = (_279.x * 2.0) + (-1.0);
    float _289 = (_279.y * 2.0) + (-1.0);
    float _290 = dot(vec2(_287, _289), vec2(_287, _289));
    float _3466 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _296 = sqrt(1.0 - (isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0))));
    vec4 _336 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _350 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3477 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _351 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    float _359 = (((_351 * _351) * (3.0 - (_351 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _368 = cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x;
    float _376 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3488 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _377 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    float _381 = (_377 * _377) * (3.0 - (_377 * 2.0));
    float _382 = _381 * cbMtdParam._m0[16u].w;
    float _383 = _381 * cbMtdParam._m0[17u].x;
    float _384 = sin(_368);
    float _385 = cos(_368);
    float _386 = TEXCOORD.z - _382;
    float _387 = TEXCOORD.w - _383;
    vec4 _407 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_382 + fma(_387, (-0.0) - _384, _386 * _385))) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (fma(_387, _385, _386 * _384) + _383)) + cbTextureTilingScale._m0[0u].w));
    float _413 = (cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].w) * _407.x;
    float _415 = (cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].w) * _407.y;
    float _417 = (cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].w) * _407.z;
    float _435 = (TEXCOORD_5.x - (((_264.x + 0.00999999977648258209228515625) * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[16u].z)) * (cbMtdParam._m0[13u].x + 1.0);
    float _3499 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _436 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    float _439 = fma(_296, _214 * NORMAL.x, fma(_289, _221 * TANGENT.x, (_207 * _199) * _287));
    float _442 = fma(_296, _214 * NORMAL.y, fma(_289, _221 * TANGENT.y, (_207 * _200) * _287));
    float _445 = fma(_296, _214 * NORMAL.z, fma(_289, _221 * TANGENT.z, (_207 * _201) * _287));
    float _449 = inversesqrt(dot(vec3(_439, _442, _445), vec3(_439, _442, _445)));
    float _450 = _449 * _439;
    float _451 = _449 * _442;
    float _452 = _449 * _445;
    float _3510 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _453 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
    float _3521 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3532 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _3543 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _472 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _513 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _523 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _513);
    float _524 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _513);
    float _525 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _513);
    float _529 = inversesqrt(dot(vec3(_523, _524, _525), vec3(_523, _524, _525)));
    float _530 = _523 * _529;
    float _531 = _524 * _529;
    float _532 = _525 * _529;
    vec4 _537 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _539 = _537.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _692 = sqrt(((_523 * _523) + (_524 * _524)) + (_525 * _525));
        float _698 = (cbMatDynParam._m0[5u].x * _692) + cbMatDynParam._m0[5u].y;
        float _3554 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
        float _699 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _703 = (cbMatDynParam._m0[5u].z * _692) + cbMatDynParam._m0[5u].w;
        float _3565 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) - _699)) + _699) < ((_539 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _550 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _551 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _569 = fma(_452, cbSceneParam._m0[5u].z, fma(_451, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _450));
    float _572 = fma(_452, cbSceneParam._m0[6u].z, fma(_451, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _450));
    float _575 = fma(_452, cbSceneParam._m0[7u].z, fma(_451, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _450));
    uint _588 = uint(roundEven(NORMAL.w)) * 13u;
    uint _589 = _588 + 9u;
    uint _590 = _589 + uint(cbMatDynParam._m0[0u].w);
    float _596 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0)))) * cbInstanceData._m0[_590].x;
    float _597 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0)))) * cbInstanceData._m0[_590].y;
    float _598 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0)))) * cbInstanceData._m0[_590].z;
    float _3576 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _599 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _3587 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _600 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    float _3598 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _601 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
    vec4 _610 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _550, cbSceneParam._m0[86u].y * _551));
    float _613 = _610.x * TEXCOORD_5.w;
    float _614 = dot(vec3(_450, _451, _452), vec3(_530, _531, _532));
    float _617 = _614 * 2.0;
    float _621 = (_617 * _450) - _530;
    float _622 = (_617 * _451) - _531;
    float _623 = (_617 * _452) - _532;
    float _627 = abs(dot(vec3(_530, _531, _532), vec3(_450, _451, _452)));
    float _3609 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _629 = sqrt(_453);
    float _641 = exp2((_629 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_629 * 3.0));
    float _673 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _677 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _681 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1011;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _736 = fma(_681, cbModelParam._m0[26u].z, fma(_677, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _673));
        float _740 = fma(_681, cbModelParam._m0[27u].z, fma(_677, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _673));
        float _744 = fma(_681, cbModelParam._m0[28u].z, fma(_677, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _673));
        float _769 = _673 + _450;
        float _770 = _677 + _451;
        float _771 = _681 + _452;
        float _781 = fma(_771, cbModelParam._m0[26u].z, fma(_770, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _769)) - _736;
        float _782 = fma(_771, cbModelParam._m0[27u].z, fma(_770, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _769)) - _740;
        float _783 = fma(_771, cbModelParam._m0[28u].z, fma(_770, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _769)) - _744;
        float _787 = inversesqrt(dot(vec3(_781, _782, _783), vec3(_781, _782, _783)));
        float _800 = ((_787 * _781) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_736 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _801 = ((_787 * _782) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_740 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _802 = ((_787 * _783) / cbModelParam._m0[34u].z) + ((((((_744 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _805 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_800, _801, _802), 0.0);
        vec4 _812 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_800, _801, _802), 0.0);
        vec4 _819 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_800, _801, _802), 0.0);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_800, _801, _802), 0.0);
        float _839 = exp2((_805.w + (-0.5)) * 20.0) * 2.0;
        float _840 = _839 * (_805.x + (-0.5));
        float _841 = _839 * (_805.y + (-0.5));
        float _842 = _839 * (_805.z + (-0.5));
        float _849 = exp2((_812.w + (-0.5)) * 20.0) * 2.0;
        float _850 = _849 * (_812.x + (-0.5));
        float _851 = _849 * (_812.y + (-0.5));
        float _852 = _849 * (_812.z + (-0.5));
        float _859 = exp2((_819.w + (-0.5)) * 20.0) * 2.0;
        float _860 = _859 * (_819.x + (-0.5));
        float _861 = _859 * (_819.y + (-0.5));
        float _862 = _859 * (_819.z + (-0.5));
        float _869 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _870 = _869 * (_826.x + (-0.5));
        float _871 = _869 * (_826.y + (-0.5));
        float _872 = _869 * (_826.z + (-0.5));
        float _873 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _874 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _875 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _876 = _840 * 0.5;
        float _877 = _850 * 0.5;
        float _878 = _860 * 0.5;
        float _879 = dot(vec3(_876, _877, _878), vec3(_876, _877, _878));
        float _884 = (_879 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_879);
        float _893 = (dot(vec3(_450, _451, _452), vec3(_884 * _876, _884 * _877, _884 * _878)) + 1.0) * 0.5;
        float _3635 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _903 = sqrt(((_877 * _877) + (_876 * _876)) + (_878 * _878)) / (_873 + 9.9999997473787516355514526367188e-06);
        float _3646 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _904 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _905 = _904 * 2.0;
        float _909 = (1.0 - _904) / (_904 + 1.0);
        float _3657 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _919 = ((((1.0 - _910) * (_905 + 2.0)) * exp2(log2(isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) * (_905 + 1.0))) + _910) * _873;
        float _920 = _841 * 0.5;
        float _921 = _851 * 0.5;
        float _922 = _861 * 0.5;
        float _923 = dot(vec3(_920, _921, _922), vec3(_920, _921, _922));
        float _928 = (_923 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_923);
        float _936 = (dot(vec3(_450, _451, _452), vec3(_928 * _920, _928 * _921, _928 * _922)) + 1.0) * 0.5;
        float _3668 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _945 = sqrt(((_921 * _921) + (_920 * _920)) + (_922 * _922)) / (_874 + 9.9999997473787516355514526367188e-06);
        float _3679 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _947 = _946 * 2.0;
        float _951 = (1.0 - _946) / (_946 + 1.0);
        float _3690 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _961 = ((((1.0 - _952) * (_947 + 2.0)) * exp2(log2(isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * (_947 + 1.0))) + _952) * _874;
        float _962 = _842 * 0.5;
        float _963 = _852 * 0.5;
        float _964 = _862 * 0.5;
        float _965 = dot(vec3(_962, _963, _964), vec3(_962, _963, _964));
        float _970 = (_965 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_965);
        float _978 = (dot(vec3(_450, _451, _452), vec3(_970 * _962, _970 * _963, _970 * _964)) + 1.0) * 0.5;
        float _3701 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _987 = sqrt(((_963 * _963) + (_962 * _962)) + (_964 * _964)) / (_875 + 9.9999997473787516355514526367188e-06);
        float _3712 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _989 = _988 * 2.0;
        float _993 = (1.0 - _988) / (_988 + 1.0);
        float _3723 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1003 = ((((1.0 - _994) * (_989 + 2.0)) * exp2(log2(isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * (_989 + 1.0))) + _994) * _875;
        _1011 = _842;
        _1013 = _841;
        _1014 = _840;
        _1015 = _852;
        _1016 = _851;
        _1017 = _850;
        _1018 = _862;
        _1019 = _861;
        _1020 = _860;
        _1021 = _875;
        _1022 = _874;
        _1023 = _873;
        _1024 = cbModelParam._m0[36u].z * (isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0)));
        _1025 = cbModelParam._m0[36u].z * (isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0)));
        _1026 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0)));
    }
    else
    {
        _1011 = _1012;
        _1013 = _1012;
        _1014 = _1012;
        _1015 = _1012;
        _1016 = _1012;
        _1017 = _1012;
        _1018 = _1012;
        _1019 = _1012;
        _1020 = _1012;
        _1021 = _1012;
        _1022 = _1012;
        _1023 = _1012;
        _1024 = 0.0;
        _1025 = 0.0;
        _1026 = 0.0;
    }
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1055 = fma(_681, cbModelParam._m0[30u].z, fma(_677, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _673));
        float _1059 = fma(_681, cbModelParam._m0[31u].z, fma(_677, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _673));
        float _1063 = fma(_681, cbModelParam._m0[32u].z, fma(_677, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _673));
        float _1086 = _673 + _450;
        float _1087 = _677 + _451;
        float _1088 = _681 + _452;
        float _1098 = fma(_1088, cbModelParam._m0[30u].z, fma(_1087, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1086)) - _1055;
        float _1099 = fma(_1088, cbModelParam._m0[31u].z, fma(_1087, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1086)) - _1059;
        float _1100 = fma(_1088, cbModelParam._m0[32u].z, fma(_1087, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1086)) - _1063;
        float _1104 = inversesqrt(dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100)));
        float _1117 = ((_1104 * _1098) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1055 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1118 = ((_1104 * _1099) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1059 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1119 = ((_1104 * _1100) / cbModelParam._m0[35u].z) + ((((((_1063 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        float _1154 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1121.x + (-0.5));
        float _1156 = _1154 * (_1121.y + (-0.5));
        float _1157 = _1154 * (_1121.z + (-0.5));
        float _1164 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1128.x + (-0.5));
        float _1166 = _1164 * (_1128.y + (-0.5));
        float _1167 = _1164 * (_1128.z + (-0.5));
        float _1174 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1135.x + (-0.5));
        float _1176 = _1174 * (_1135.y + (-0.5));
        float _1177 = _1174 * (_1135.z + (-0.5));
        float _1184 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1142.x + (-0.5));
        float _1186 = _1184 * (_1142.y + (-0.5));
        float _1187 = _1184 * (_1142.z + (-0.5));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = _1155 * 0.5;
        float _1192 = _1165 * 0.5;
        float _1193 = _1175 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1207 = (dot(vec3(_450, _451, _452), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _3764 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1216 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _3775 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _3786 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * (_1218 + 1.0))) + _1223) * _1188;
        float _1233 = _1156 * 0.5;
        float _1234 = _1166 * 0.5;
        float _1235 = _1176 * 0.5;
        float _1236 = dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235));
        float _1241 = (_1236 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1236);
        float _1249 = (dot(vec3(_450, _451, _452), vec3(_1241 * _1233, _1241 * _1234, _1241 * _1235)) + 1.0) * 0.5;
        float _3797 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1258 = sqrt(((_1234 * _1234) + (_1233 * _1233)) + (_1235 * _1235)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _3808 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _3819 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * (_1260 + 1.0))) + _1265) * _1189;
        float _1275 = _1157 * 0.5;
        float _1276 = _1167 * 0.5;
        float _1277 = _1177 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1291 = (dot(vec3(_450, _451, _452), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _3830 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1300 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _3841 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1302 = _1301 * 2.0;
        float _1306 = (1.0 - _1301) / (_1301 + 1.0);
        float _3852 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1316 = ((((1.0 - _1307) * (_1302 + 2.0)) * exp2(log2(isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * (_1302 + 1.0))) + _1307) * _1190;
        _1324 = _1157;
        _1325 = _1156;
        _1326 = _1155;
        _1327 = _1167;
        _1328 = _1166;
        _1329 = _1165;
        _1330 = _1177;
        _1331 = _1176;
        _1332 = _1175;
        _1333 = _1190;
        _1334 = _1189;
        _1335 = _1188;
        _1336 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
        _1337 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
        _1338 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)));
    }
    else
    {
        _1324 = _1012;
        _1325 = _1012;
        _1326 = _1012;
        _1327 = _1012;
        _1328 = _1012;
        _1329 = _1012;
        _1330 = _1012;
        _1331 = _1012;
        _1332 = _1012;
        _1333 = _1012;
        _1334 = _1012;
        _1335 = _1012;
        _1336 = 0.0;
        _1337 = 0.0;
        _1338 = 0.0;
    }
    float _1348 = (cbModelParam._m0[1u].x * (_1336 - _1024)) + _1024;
    float _1349 = (cbModelParam._m0[1u].x * (_1337 - _1025)) + _1025;
    float _1350 = (cbModelParam._m0[1u].x * (_1338 - _1026)) + _1026;
    float _1371 = fma(_1350, cbSceneParam._m0[89u].z, fma(_1349, cbSceneParam._m0[89u].y, _1348 * cbSceneParam._m0[89u].x));
    float _1374 = fma(_1350, cbSceneParam._m0[90u].z, fma(_1349, cbSceneParam._m0[90u].y, _1348 * cbSceneParam._m0[90u].x));
    float _1377 = fma(_1350, cbSceneParam._m0[91u].z, fma(_1349, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1348));
    float _1392 = _621 * 0.5;
    float _1393 = _622 * 0.5;
    float _1394 = _623 * 0.5;
    float _1395 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1326, _1329, _1332, _1335));
    float _1398 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1325, _1328, _1331, _1334));
    float _1401 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1324, _1327, _1330, _1333));
    float _1435;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1408 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1011, _1015, _1018, _1021));
        float _1412 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1013, _1016, _1019, _1022));
        float _1416 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1014, _1017, _1020, _1023));
        float _1423 = dot(vec4(cbModelParam._m0[39u]), vec4(_1392, _1393, _1394, 1.0));
        _1435 = dot(vec3(isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)), isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)), isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1423) ? 0.0 : (isnan(0.0) ? _1423 : max(0.0, _1423))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1435 = 1.0;
    }
    float _1446;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1437 = dot(vec4(cbModelParam._m0[40u]), vec4(_1392, _1393, _1394, 1.0));
        _1446 = dot(vec3(isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)), isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)), isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1437) ? 0.0 : (isnan(0.0) ? _1437 : max(0.0, _1437))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1446 = 1.0;
    }
    float _1450 = (_1446 * cbModelParam._m0[1u].x) + (_1435 * (1.0 - cbModelParam._m0[1u].x));
    float _1460 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _453);
    float _1461 = isnan(_1460) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1460 : min(cbModelParam._m0[25u].z, _1460));
    float _1541;
    float _1543;
    float _1545;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1508 = fma(_681, cbModelParam._m0[13u].z, fma(_677, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _673)) + cbModelParam._m0[13u].w;
        float _1512 = fma(_681, cbModelParam._m0[14u].z, fma(_677, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _673)) + cbModelParam._m0[14u].w;
        float _1516 = fma(_681, cbModelParam._m0[15u].z, fma(_677, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _673)) + cbModelParam._m0[15u].w;
        float _1519 = fma(_623, cbModelParam._m0[13u].z, fma(_622, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _621));
        float _1522 = fma(_623, cbModelParam._m0[14u].z, fma(_622, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _621));
        float _1525 = fma(_623, cbModelParam._m0[15u].z, fma(_622, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _621));
        float _1553;
        if (_1519 > 0.0)
        {
            _1553 = abs((1.0 - _1508) / _1519);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1519 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1508 + 1.0) / _1519);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1553 = frontier_phi_17_15_ladder;
        }
        float _1778;
        if (_1522 > 0.0)
        {
            _1778 = abs((1.0 - _1512) / _1522);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1522 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1512 + 1.0) / _1522);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1778 = frontier_phi_26_22_ladder;
        }
        float _2024;
        if (_1525 > 0.0)
        {
            _2024 = abs((1.0 - _1516) / _1525);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1525 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1516 + 1.0) / _1525);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2024 = frontier_phi_38_33_ladder;
        }
        float _2026 = isnan(_1778) ? _1553 : (isnan(_1553) ? _1778 : min(_1553, _1778));
        float _2027 = isnan(_2024) ? _2026 : (isnan(_2026) ? _2024 : min(_2026, _2024));
        float _2031 = (_2027 * _1519) + _1508;
        float _2032 = (_2027 * _1522) + _1512;
        float _2033 = (_2027 * _1525) + _1516;
        float _2034 = _2027 * 9.9999997473787516355514526367188e-05;
        float _2036 = (-1.0) - _2034;
        float _2038 = _2034 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2033 > _2038) || ((_2033 < _2036) || ((_2032 > _2038) || ((_2032 < _2036) || ((_2031 < _2036) || (_2031 > _2038))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2157 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2033, cbModelParam._m0[9u].z, fma(_2032, cbModelParam._m0[9u].y, _2031 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2033, cbModelParam._m0[10u].z, fma(_2032, cbModelParam._m0[10u].y, _2031 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2033, cbModelParam._m0[11u].z, fma(_2032, cbModelParam._m0[11u].y, _2031 * cbModelParam._m0[11u].x))), _1461);
            frontier_phi_16_38_ladder = _2157.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2157.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2157.x * cbModelParam._m0[1u].y;
        }
        _1541 = frontier_phi_16_38_ladder_2;
        _1543 = frontier_phi_16_38_ladder_1;
        _1545 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1529 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_621, _622, _623), _1461);
        _1541 = _1529.x * cbModelParam._m0[1u].y;
        _1543 = _1529.y * cbModelParam._m0[1u].y;
        _1545 = _1529.z * cbModelParam._m0[1u].y;
    }
    float _1549 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _453);
    float _1550 = isnan(_1549) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1549 : min(cbModelParam._m0[25u].w, _1549));
    float _1641;
    float _1643;
    float _1645;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1605 = fma(_681, cbModelParam._m0[21u].z, fma(_677, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _673)) + cbModelParam._m0[21u].w;
        float _1609 = fma(_681, cbModelParam._m0[22u].z, fma(_677, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _673)) + cbModelParam._m0[22u].w;
        float _1613 = fma(_681, cbModelParam._m0[23u].z, fma(_677, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _673)) + cbModelParam._m0[23u].w;
        float _1616 = fma(_623, cbModelParam._m0[21u].z, fma(_622, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _621));
        float _1619 = fma(_623, cbModelParam._m0[22u].z, fma(_622, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _621));
        float _1622 = fma(_623, cbModelParam._m0[23u].z, fma(_622, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _621));
        float _1783;
        if (_1616 > 0.0)
        {
            _1783 = abs((1.0 - _1605) / _1616);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1616 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1605 + 1.0) / _1616);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1783 = frontier_phi_28_24_ladder;
        }
        float _2051;
        if (_1619 > 0.0)
        {
            _2051 = abs((1.0 - _1609) / _1619);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1609 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2051 = frontier_phi_40_35_ladder;
        }
        float _2256;
        if (_1622 > 0.0)
        {
            _2256 = abs((1.0 - _1613) / _1622);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1613 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2256 = frontier_phi_49_46_ladder;
        }
        float _2258 = isnan(_2051) ? _1783 : (isnan(_1783) ? _2051 : min(_1783, _2051));
        float _2259 = isnan(_2256) ? _2258 : (isnan(_2258) ? _2256 : min(_2258, _2256));
        float _2263 = (_2259 * _1616) + _1605;
        float _2264 = (_2259 * _1619) + _1609;
        float _2265 = (_2259 * _1622) + _1613;
        float _2266 = _2259 * 9.9999997473787516355514526367188e-05;
        float _2267 = (-1.0) - _2266;
        float _2269 = _2266 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2265 > _2269) || ((_2265 < _2267) || ((_2264 > _2269) || ((_2264 < _2267) || ((_2263 < _2267) || (_2263 > _2269))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2509 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2265, cbModelParam._m0[17u].z, fma(_2264, cbModelParam._m0[17u].y, _2263 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2265, cbModelParam._m0[18u].z, fma(_2264, cbModelParam._m0[18u].y, _2263 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2265, cbModelParam._m0[19u].z, fma(_2264, cbModelParam._m0[19u].y, _2263 * cbModelParam._m0[19u].x))), _1550);
            frontier_phi_25_49_ladder = _2509.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2509.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2509.x * cbModelParam._m0[1u].z;
        }
        _1641 = frontier_phi_25_49_ladder_2;
        _1643 = frontier_phi_25_49_ladder_1;
        _1645 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1625 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_621, _622, _623), _1550);
        _1641 = _1625.x * cbModelParam._m0[1u].z;
        _1643 = _1625.y * cbModelParam._m0[1u].z;
        _1645 = _1625.z * cbModelParam._m0[1u].z;
    }
    float _1657 = ((((1.0 - _641) * ((_629 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_641 * _629)) * _613;
    float _1658 = _1657 * ((cbModelParam._m0[1u].w * (_1641 - _1541)) + _1541);
    float _1659 = _1657 * ((cbModelParam._m0[1u].w * (_1643 - _1543)) + _1543);
    float _1660 = _1657 * ((cbModelParam._m0[1u].w * (_1645 - _1545)) + _1545);
    float _1663 = fma(_1660, cbSceneParam._m0[89u].z, fma(_1659, cbSceneParam._m0[89u].y, _1658 * cbSceneParam._m0[89u].x));
    float _1666 = fma(_1660, cbSceneParam._m0[90u].z, fma(_1659, cbSceneParam._m0[90u].y, _1658 * cbSceneParam._m0[90u].x));
    float _1669 = fma(_1660, cbSceneParam._m0[91u].z, fma(_1659, cbSceneParam._m0[91u].y, _1658 * cbSceneParam._m0[91u].x));
    vec4 _1677 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_550, _551));
    float _1679 = _1677.w;
    float _1691 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1679);
    float _1692 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1679);
    float _1693 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1679);
    uvec4 _1697 = floatBitsToUint(cbInstanceData._m0[_588 + 5u]);
    uint _1699 = _1697.x * 14u;
    uint _1700 = _1699 + 13u;
    float _1707 = _613 + (-1.0);
    float _1712 = (cbLight._m0[_1700].x * _1707) + 1.0;
    float _1713 = (cbLight._m0[_1700].y * _1707) + 1.0;
    float _1714 = (cbLight._m0[_1700].z * _1707) + 1.0;
    float _1715 = (cbLight._m0[_1700].w * _1707) + 1.0;
    uint _1716 = _1699 + 5u;
    float _1722 = isnan(1.0) ? _1713 : (isnan(_1713) ? 1.0 : min(_1713, 1.0));
    uint _1726 = _1699 + 4u;
    float _1736 = isnan(1.0) ? _1712 : (isnan(_1712) ? 1.0 : min(_1712, 1.0));
    uint _1740 = _1699 | 1u;
    float _1751 = dot(vec3(cbLight._m0[_1699].xyz), vec3(_450, _451, _452));
    float _1754 = dot(vec3(cbLight._m0[_1740].xyz), vec3(_450, _451, _452));
    float _3988 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
    float _3999 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _1759 = (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * 0.3183098733425140380859375;
    float _1761 = (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * 0.3183098733425140380859375;
    float _1768 = ((cbLight._m0[_1716].x * _1722) * _1761) + (((cbLight._m0[_1726].x * _1691) * _1736) * _1759);
    float _1769 = ((_1722 * cbLight._m0[_1716].y) * _1761) + (((cbLight._m0[_1726].y * _1692) * _1736) * _1759);
    float _1770 = ((_1722 * cbLight._m0[_1716].z) * _1761) + (((cbLight._m0[_1726].z * _1693) * _1736) * _1759);
    uvec4 _1775 = floatBitsToUint(cbLight._m0[_1699 + 12u]);
    bool _1777 = _1775.x == 0u;
    float _1788;
    float _1790;
    float _1792;
    if (_1777)
    {
        _1788 = _1768;
        _1790 = _1769;
        _1792 = _1770;
    }
    else
    {
        uint _1796 = _1699 + 6u;
        float _1812 = (dot(vec3(cbLight._m0[_1699 + 2u].xyz), vec3(_450, _451, _452)) * 0.5) + 0.5;
        float _1813 = _1812 * _1812;
        float _4010 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1814 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1815 = isnan(1.0) ? _1714 : (isnan(_1714) ? 1.0 : min(_1714, 1.0));
        _1788 = (((cbLight._m0[_1796].x * 0.3183098733425140380859375) * _1814) * _1815) + _1768;
        _1790 = (((cbLight._m0[_1796].y * 0.3183098733425140380859375) * _1814) * _1815) + _1769;
        _1792 = (((cbLight._m0[_1796].z * 0.3183098733425140380859375) * _1814) * _1815) + _1770;
    }
    bool _1795 = _1775.y == 0u;
    float _1833;
    float _1835;
    float _1837;
    if (_1795)
    {
        _1833 = _1788;
        _1835 = _1790;
        _1837 = _1792;
    }
    else
    {
        uint _1995 = _1699 + 7u;
        float _2011 = (dot(vec3(cbLight._m0[_1699 + 3u].xyz), vec3(_450, _451, _452)) * 0.5) + 0.5;
        float _2012 = _2011 * _2011;
        float _4026 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _2013 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _2014 = isnan(1.0) ? _1715 : (isnan(_1715) ? 1.0 : min(_1715, 1.0));
        _1833 = (((cbLight._m0[_1995].x * 0.3183098733425140380859375) * _2013) * _2014) + _1788;
        _1835 = (((cbLight._m0[_1995].y * 0.3183098733425140380859375) * _2013) * _2014) + _1790;
        _1837 = (((cbLight._m0[_1995].z * 0.3183098733425140380859375) * _2013) * _2014) + _1792;
    }
    uint _1840 = _1699 + 8u;
    float _1853 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1699].w)) * _453) * 0.949999988079071044921875);
    float _1854 = _1853 * _1853;
    float _1855 = cbLight._m0[_1699].x + _530;
    float _1856 = cbLight._m0[_1699].y + _531;
    float _1857 = cbLight._m0[_1699].z + _532;
    float _1861 = inversesqrt(dot(vec3(_1855, _1856, _1857), vec3(_1855, _1856, _1857)));
    float _1862 = _1861 * _1855;
    float _1863 = _1861 * _1856;
    float _1864 = _1861 * _1857;
    float _1865 = dot(vec3(_450, _451, _452), vec3(cbLight._m0[_1699].xyz));
    float _4042 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1868 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _4053 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _1869 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _1870 = dot(vec3(_450, _451, _452), vec3(_1862, _1863, _1864));
    float _4064 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1873 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _1874 = dot(vec3(cbLight._m0[_1699].xyz), vec3(_1862, _1863, _1864));
    float _4075 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1878 = _1854 * _1854;
    float _1882 = ((_1873 * _1873) * (_1878 + (-1.0))) + 1.0;
    float _1893 = (exp2(log2(1.0 - (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1894 = 1.0 - _1854;
    float _1905 = (0.5 / (((_1869 * ((_1868 * _1894) + _1854)) + 9.9999999392252902907785028219223e-09) + (((_1869 * _1894) + _1854) * _1868))) * _1868;
    float _4086 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1907 = (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_1878 / ((_1882 * _1882) * 3.141590118408203125));
    uint _1921 = _1699 + 9u;
    float _1932 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1740].w)) * _453) * 0.949999988079071044921875);
    float _1933 = _1932 * _1932;
    float _1934 = cbLight._m0[_1740].x + _530;
    float _1935 = cbLight._m0[_1740].y + _531;
    float _1936 = cbLight._m0[_1740].z + _532;
    float _1940 = inversesqrt(dot(vec3(_1934, _1935, _1936), vec3(_1934, _1935, _1936)));
    float _1941 = _1940 * _1934;
    float _1942 = _1940 * _1935;
    float _1943 = _1940 * _1936;
    float _1944 = dot(vec3(_450, _451, _452), vec3(cbLight._m0[_1740].xyz));
    float _4097 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1947 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _1948 = dot(vec3(_450, _451, _452), vec3(_1941, _1942, _1943));
    float _4108 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1951 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _1952 = dot(vec3(cbLight._m0[_1740].xyz), vec3(_1941, _1942, _1943));
    float _4119 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1956 = _1933 * _1933;
    float _1960 = ((_1951 * _1951) * (_1956 + (-1.0))) + 1.0;
    float _1969 = (exp2(log2(1.0 - (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1970 = 1.0 - _1933;
    float _1980 = (0.5 / (((_1869 * ((_1947 * _1970) + _1933)) + 9.9999999392252902907785028219223e-09) + (((_1869 * _1970) + _1933) * _1947))) * _1947;
    float _4130 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1982 = (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_1956 / ((_1960 * _1960) * 3.141590118408203125));
    float _1992 = (((_1969 * cbLight._m0[_1921].x) * _1982) * _1722) + ((((cbLight._m0[_1840].x * _1691) * _1893) * _1907) * _1736);
    float _1993 = (((_1969 * cbLight._m0[_1921].y) * _1982) * _1722) + ((((cbLight._m0[_1840].y * _1692) * _1893) * _1907) * _1736);
    float _1994 = (((_1969 * cbLight._m0[_1921].z) * _1982) * _1722) + ((((cbLight._m0[_1840].z * _1693) * _1893) * _1907) * _1736);
    float _2056;
    float _2058;
    float _2060;
    if (_1777)
    {
        _2056 = _1992;
        _2058 = _1993;
        _2060 = _1994;
    }
    else
    {
        uint _2062 = _1699 + 2u;
        uint _2066 = _1699 + 10u;
        float _2080 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2062].w)) * _453) * 0.949999988079071044921875);
        float _2081 = _2080 * _2080;
        float _2082 = cbLight._m0[_2062].x + _530;
        float _2083 = cbLight._m0[_2062].y + _531;
        float _2084 = cbLight._m0[_2062].z + _532;
        float _2088 = inversesqrt(dot(vec3(_2082, _2083, _2084), vec3(_2082, _2083, _2084)));
        float _2089 = _2088 * _2082;
        float _2090 = _2088 * _2083;
        float _2091 = _2088 * _2084;
        float _2092 = dot(vec3(_450, _451, _452), vec3(cbLight._m0[_2062].xyz));
        float _4141 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2095 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _2096 = dot(vec3(_450, _451, _452), vec3(_2089, _2090, _2091));
        float _4152 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2099 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _2100 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_2089, _2090, _2091));
        float _4163 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2104 = _2081 * _2081;
        float _2108 = ((_2099 * _2099) * (_2104 + (-1.0))) + 1.0;
        float _2117 = (exp2(log2(1.0 - (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2118 = 1.0 - _2081;
        float _2128 = (0.5 / (((_1869 * ((_2095 * _2118) + _2081)) + 9.9999999392252902907785028219223e-09) + (((_1869 * _2118) + _2081) * _2095))) * _2095;
        float _4174 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2130 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_2104 / ((_2108 * _2108) * 3.141590118408203125));
        float _2131 = isnan(1.0) ? _1714 : (isnan(_1714) ? 1.0 : min(_1714, 1.0));
        _2056 = (((_2117 * cbLight._m0[_2066].x) * _2130) * _2131) + _1992;
        _2058 = (((_2117 * cbLight._m0[_2066].y) * _2130) * _2131) + _1993;
        _2060 = (((_2117 * cbLight._m0[_2066].z) * _2130) * _2131) + _1994;
    }
    float _2166;
    float _2168;
    float _2170;
    if (_1795)
    {
        _2166 = _2056;
        _2168 = _2058;
        _2170 = _2060;
    }
    else
    {
        uint _2177 = _1699 + 3u;
        uint _2181 = _1699 + 11u;
        float _2195 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2177].w)) * _453) * 0.949999988079071044921875);
        float _2196 = _2195 * _2195;
        float _2197 = cbLight._m0[_2177].x + _530;
        float _2198 = cbLight._m0[_2177].y + _531;
        float _2199 = cbLight._m0[_2177].z + _532;
        float _2203 = inversesqrt(dot(vec3(_2197, _2198, _2199), vec3(_2197, _2198, _2199)));
        float _2204 = _2203 * _2197;
        float _2205 = _2203 * _2198;
        float _2206 = _2203 * _2199;
        float _2207 = dot(vec3(_450, _451, _452), vec3(cbLight._m0[_2177].xyz));
        float _4190 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2210 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _2211 = dot(vec3(_450, _451, _452), vec3(_2204, _2205, _2206));
        float _4201 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2214 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _2215 = dot(vec3(cbLight._m0[_2177].xyz), vec3(_2204, _2205, _2206));
        float _4212 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2219 = _2196 * _2196;
        float _2223 = ((_2214 * _2214) * (_2219 + (-1.0))) + 1.0;
        float _2232 = (exp2(log2(1.0 - (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2233 = 1.0 - _2196;
        float _2243 = (0.5 / (((_1869 * ((_2210 * _2233) + _2196)) + 9.9999999392252902907785028219223e-09) + (((_1869 * _2233) + _2196) * _2210))) * _2210;
        float _4223 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2245 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2219 / ((_2223 * _2223) * 3.141590118408203125));
        float _2246 = isnan(1.0) ? _1715 : (isnan(_1715) ? 1.0 : min(_1715, 1.0));
        _2166 = (((_2232 * cbLight._m0[_2181].x) * _2245) * _2246) + _2056;
        _2168 = (((_2232 * cbLight._m0[_2181].y) * _2245) * _2246) + _2058;
        _2170 = (((_2232 * cbLight._m0[_2181].z) * _2245) * _2246) + _2060;
    }
    float _2381;
    float _2383;
    float _2385;
    float _2387;
    float _2389;
    float _2391;
    if (_1697.y == 0u)
    {
        float _2321 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2322 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2321;
        float _2323 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2321;
        float _2324 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2321;
        uvec4 _2336 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2337 = _2336.x;
        uint _2348 = uint((float(_2336.y) * floor(float(uint(cbSceneParam._m0[85u].y * _551) / _2337))) + floor(float(uint(cbSceneParam._m0[85u].x * _550) / _2337)));
        float _2358 = (log2(_2324 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2359 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        uint _2362 = uint(isnan(14.0) ? _2359 : (isnan(_2359) ? 14.0 : min(_2359, 14.0)));
        uvec4 _2367 = texelFetch(g_lightClusterGridBuffer, int(((_2362 << 2u) + (_2348 << 6u)) >> 2u));
        uint _2368 = _2367.x;
        uint _2369 = _2336.z;
        float _2514;
        float _2516;
        float _2518;
        float _2520;
        float _2522;
        float _2524;
        if (((((1u << ((_2369 >> 4u) & 15u)) + 4294967295u) & _2368) == 0u) || ((_2369 & 240u) == 0u))
        {
            _2514 = 0.0;
            _2516 = 0.0;
            _2518 = 0.0;
            _2520 = 0.0;
            _2522 = 0.0;
            _2524 = 0.0;
        }
        else
        {
            float _2515;
            float _2517;
            float _2519;
            float _2521;
            float _2523;
            float _2525;
            float _2675 = 0.0;
            float _2676 = 0.0;
            float _2677 = 0.0;
            float _2678 = 0.0;
            float _2679 = 0.0;
            float _2680 = 0.0;
            uint _2681 = 0u;
            uint _2690;
            bool _2691;
            for (;;)
            {
                _2690 = texelFetch(g_lightClassification, int((((_2362 << 5u) + (_2348 << 9u)) + (_2681 << 2u)) >> 2u)).x;
                _2691 = _2690 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2691)
                {
                    frontier_phi_66_pred = _2675;
                    frontier_phi_66_pred_1 = _2680;
                    frontier_phi_66_pred_2 = _2679;
                    frontier_phi_66_pred_3 = _2678;
                    frontier_phi_66_pred_4 = _2677;
                    frontier_phi_66_pred_5 = _2676;
                }
                else
                {
                    float _2820;
                    float _2821;
                    float _2822;
                    float _2823;
                    float _2824;
                    float _2825;
                    uint _2826;
                    _2820 = _2675;
                    _2821 = _2676;
                    _2822 = _2677;
                    _2823 = _2678;
                    _2824 = _2679;
                    _2825 = _2680;
                    _2826 = _2690;
                    float _2747;
                    float _2748;
                    float _2749;
                    float _2750;
                    float _2751;
                    float _2752;
                    for (;;)
                    {
                        uint _2830 = uint(findLSB(_2826)) + (_2681 << 5u);
                        uint _2827 = (_2826 + 4294967295u) & _2826;
                        uint _2832 = _2830 * 48u;
                        vec4 _2846 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2832)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 3u)).x));
                        uint _2852 = (_2830 * 48u) + 4u;
                        vec4 _2865 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2852)).x, texelFetch(g_PointLightRenderingBuffer, int(_2852 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2852 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2852 + 3u)).x));
                        uint _2871 = (_2830 * 48u) + 8u;
                        vec3 _2882 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2871)).x, texelFetch(g_PointLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2871 + 2u)).x));
                        float _2886 = _2846.x - _2322;
                        float _2887 = _2846.y - _2323;
                        float _2888 = _2846.z - _2324;
                        float _2889 = dot(vec3(_2886, _2887, _2888), vec3(_2886, _2887, _2888));
                        float _2892 = inversesqrt(_2889);
                        float _2893 = _2892 * _2886;
                        float _2894 = _2892 * _2887;
                        float _2895 = _2892 * _2888;
                        float _2896 = dot(vec3(_569, _572, _575), vec3(_2893, _2894, _2895));
                        float _2901 = 1.0 - (_2889 * _2846.w);
                        float _4249 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
                        float _2902 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
                        float _2903 = sqrt(_2889) * _2865.w;
                        float _2906 = 1.39999997615814208984375 / (_2903 + 1.39999997615814208984375);
                        float _2907 = _2906 * _2906;
                        float _2910 = ((1.0 - _2907) * _2896) + _2907;
                        float _2913 = _2903 * _2903;
                        float _2917 = ((isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0))) * _2902) / ((_2913 * 0.699999988079071044921875) + 1.0);
                        float _2921 = (-0.0) - _2322;
                        float _2922 = (-0.0) - _2323;
                        float _2923 = (-0.0) - _2324;
                        float _2927 = inversesqrt(dot(vec3(_2921, _2922, _2923), vec3(_2921, _2922, _2923)));
                        float _2928 = _2927 * _2921;
                        float _2929 = _2927 * _2922;
                        float _2930 = _2927 * _2923;
                        float _2938 = exp2(log2(1.0 / ((_2913 * 3.5) + 5.0)) * 0.25);
                        float _2939 = 1.0 - _629;
                        float _2946 = sqrt(1.0 - ((1.0 - (_2939 * _2939)) * (1.0 - (_2938 * _2938))));
                        float _2947 = _2946 * _2946;
                        float _2948 = _2947 * _2947;
                        float _2949 = _2928 + _2893;
                        float _2950 = _2929 + _2894;
                        float _2951 = _2930 + _2895;
                        float _2955 = inversesqrt(dot(vec3(_2949, _2950, _2951), vec3(_2949, _2950, _2951)));
                        float _2959 = dot(vec3(_569, _572, _575), vec3(_2928, _2929, _2930));
                        float _4265 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
                        float _2962 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
                        float _2963 = dot(vec3(_569, _572, _575), vec3(_2955 * _2949, _2955 * _2950, _2955 * _2951));
                        float _4276 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
                        float _2966 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
                        float _2970 = ((_2966 * _2966) * (_2948 + (-1.0))) + 1.0;
                        float _2971 = _2906 * _2947;
                        float _2972 = _2971 * _2971;
                        float _2975 = ((1.0 - _2972) * _2896) + _2972;
                        float _4287 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                        float _2976 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
                        float _2977 = 1.0 - _2947;
                        float _2987 = (0.5 / (((_2976 * ((_2962 * _2977) + _2947)) + 9.9999999392252902907785028219223e-09) + (((_2976 * _2977) + _2947) * _2962))) * _2976;
                        float _4298 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                        float _2998 = (((_2948 * 3.1415927410125732421875) * (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0)))) / ((_2970 * _2970) * ((_2913 * 2.1991131305694580078125) + 3.141590118408203125))) * _2902;
                        _2750 = (_2917 * _2865.x) + _2823;
                        _2751 = (_2917 * _2865.y) + _2824;
                        _2752 = (_2917 * _2865.z) + _2825;
                        _2747 = (_2998 * _2882.x) + _2820;
                        _2748 = (_2998 * _2882.y) + _2821;
                        _2749 = (_2998 * _2882.z) + _2822;
                        if (_2827 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2820 = _2747;
                            _2821 = _2748;
                            _2822 = _2749;
                            _2823 = _2750;
                            _2824 = _2751;
                            _2825 = _2752;
                            _2826 = _2827;
                        }
                    }
                    frontier_phi_66_pred = _2747;
                    frontier_phi_66_pred_1 = _2752;
                    frontier_phi_66_pred_2 = _2751;
                    frontier_phi_66_pred_3 = _2750;
                    frontier_phi_66_pred_4 = _2749;
                    frontier_phi_66_pred_5 = _2748;
                }
                _2515 = frontier_phi_66_pred;
                _2525 = frontier_phi_66_pred_1;
                _2523 = frontier_phi_66_pred_2;
                _2521 = frontier_phi_66_pred_3;
                _2519 = frontier_phi_66_pred_4;
                _2517 = frontier_phi_66_pred_5;
                uint _2682 = _2681 + 1u;
                if (_2682 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2675 = _2515;
                    _2676 = _2517;
                    _2677 = _2519;
                    _2678 = _2521;
                    _2679 = _2523;
                    _2680 = _2525;
                    _2681 = _2682;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2514 = _2515;
            _2516 = _2517;
            _2518 = _2519;
            _2520 = _2521;
            _2522 = _2523;
            _2524 = _2525;
        }
        uvec4 _2528 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2529 = _2528.z;
        uint _2531 = (_2529 >> 8u) & 15u;
        float _2643;
        float _2645;
        float _2647;
        float _2649;
        float _2651;
        float _2653;
        if (((4294967295u << _2531) & _2368) == 0u)
        {
            _2643 = _2514;
            _2645 = _2516;
            _2647 = _2518;
            _2649 = _2520;
            _2651 = _2522;
            _2653 = _2524;
        }
        else
        {
            float _2668 = inversesqrt(dot(vec3(_2322, _2323, _2324), vec3(_2322, _2323, _2324)));
            float _2669 = _2668 * _2322;
            float _2670 = _2668 * _2323;
            float _2671 = _2668 * _2324;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2531 < ((_2529 >> 12u) & 15u))
            {
                float _2644;
                float _2646;
                float _2648;
                float _2650;
                float _2652;
                float _2654;
                float _2803 = _2514;
                float _2804 = _2516;
                float _2805 = _2518;
                float _2806 = _2520;
                float _2807 = _2522;
                float _2808 = _2524;
                uint _2809 = _2531;
                uint _2818;
                bool _2819;
                for (;;)
                {
                    _2818 = texelFetch(g_lightClassification, int((((_2362 << 5u) + (_2348 << 9u)) + (_2809 << 2u)) >> 2u)).x;
                    _2819 = _2818 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2819)
                    {
                        frontier_phi_77_pred = _2808;
                        frontier_phi_77_pred_1 = _2807;
                        frontier_phi_77_pred_2 = _2806;
                        frontier_phi_77_pred_3 = _2805;
                        frontier_phi_77_pred_4 = _2804;
                        frontier_phi_77_pred_5 = _2803;
                    }
                    else
                    {
                        float _3012;
                        float _3013;
                        float _3014;
                        float _3015;
                        float _3016;
                        float _3017;
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3025 = _2803;
                        float _3026 = _2804;
                        float _3027 = _2805;
                        float _3028 = _2806;
                        float _3029 = _2807;
                        float _3030 = _2808;
                        uint _3031 = _2818;
                        uint _3032;
                        vec4 _3057;
                        float _3058;
                        vec4 _3073;
                        vec3 _3085;
                        vec4 _3100;
                        vec4 _3116;
                        float _3163;
                        bool _3164;
                        for (;;)
                        {
                            uint _3042 = ((_2809 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3031));
                            _3032 = (_3031 + 4294967295u) & _3031;
                            uint _3044 = _3042 * 40u;
                            _3057 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3044)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 3u)).x));
                            _3058 = _3057.w;
                            uint _3060 = (_3042 * 40u) + 4u;
                            _3073 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3060)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 3u)).x));
                            uint _3075 = (_3042 * 40u) + 8u;
                            _3085 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3075)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 2u)).x));
                            uint _3087 = (_3042 * 40u) + 16u;
                            _3100 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 3u)).x));
                            uint _3103 = (_3042 * 40u) + 20u;
                            _3116 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 3u)).x));
                            uint _3119 = (_3042 * 40u) + 24u;
                            vec4 _3132 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 3u)).x));
                            uint _3138 = (_3042 * 40u) + 28u;
                            vec4 _3151 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 3u)).x));
                            _3163 = fma(_2324, _3151.z, fma(_2323, _3151.y, _3151.x * _2322)) + _3151.w;
                            _3164 = !((fma(_2324, _3132.z, fma(_2323, _3132.y, _3132.x * _2322)) + _3132.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3164)
                            {
                                float _3191 = _3057.x - _2322;
                                float _3192 = _3057.y - _2323;
                                float _3193 = _3057.z - _2324;
                                float _3194 = dot(vec3(_3191, _3192, _3193), vec3(_3191, _3192, _3193));
                                float _3197 = inversesqrt(_3194);
                                float _3198 = _3197 * _3191;
                                float _3199 = _3197 * _3192;
                                float _3200 = _3197 * _3193;
                                float _3204 = 1.0 - (_3194 / (_3058 * _3058));
                                float _4309 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                                float _3205 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                                float _3209 = sqrt(_3194) * _3073.w;
                                float _3211 = 1.39999997615814208984375 / (_3209 + 1.39999997615814208984375);
                                float _3212 = _3211 * _3211;
                                float _3215 = ((1.0 - _3212) * dot(vec3(_3198, _3199, _3200), vec3(_569, _572, _575))) + _3212;
                                float _3218 = _3209 * _3209;
                                float _3222 = (fma(_2324, _3100.z, fma(_2323, _3100.y, _3100.x * _2322)) + _3100.w) / _3163;
                                float _3223 = (fma(_2324, _3116.z, fma(_2323, _3116.y, _3116.x * _2322)) + _3116.w) / _3163;
                                float _3227 = 1.0 - dot(vec2(_3222, _3223), vec2(_3222, _3223));
                                float _4325 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                                float _3228 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                                float _3229 = _3228 * (((isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0))) * _3205) / ((_3218 * 0.699999988079071044921875) + 1.0));
                                float _3241 = exp2(log2(1.0 / ((_3218 * 3.5) + 5.0)) * 0.25);
                                float _3242 = 1.0 - _629;
                                float _3249 = sqrt(1.0 - ((1.0 - (_3242 * _3242)) * (1.0 - (_3241 * _3241))));
                                float _3250 = _3249 * _3249;
                                float _3251 = _3250 * _3250;
                                float _3252 = _3198 - _2669;
                                float _3253 = _3199 - _2670;
                                float _3254 = _3200 - _2671;
                                float _3258 = inversesqrt(dot(vec3(_3252, _3253, _3254), vec3(_3252, _3253, _3254)));
                                float _3262 = dot(vec3(_569, _572, _575), vec3((-0.0) - _2669, (-0.0) - _2670, (-0.0) - _2671));
                                float _4336 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                                float _3265 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                                float _3266 = dot(vec3(_569, _572, _575), vec3(_3258 * _3252, _3258 * _3253, _3258 * _3254));
                                float _4347 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                                float _3269 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                                float _3273 = ((_3269 * _3269) * (_3251 + (-1.0))) + 1.0;
                                float _3274 = _3211 * _3250;
                                float _3275 = _3274 * _3274;
                                float _3281 = ((1.0 - _3275) * dot(vec3(_569, _572, _575), vec3(_3198, _3199, _3200))) + _3275;
                                float _4358 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                                float _3282 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                                float _3283 = 1.0 - _3250;
                                float _3293 = (0.5 / (((_3282 * ((_3265 * _3283) + _3250)) + 9.9999999392252902907785028219223e-09) + (((_3282 * _3283) + _3250) * _3265))) * _3282;
                                float _4369 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3303 = (_3228 * _3205) * (((_3251 * 3.1415927410125732421875) * (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0)))) / ((_3273 * _3273) * ((_3218 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3229 * _3073.y;
                                frontier_phi_83_pred_1 = _3229 * _3073.x;
                                frontier_phi_83_pred_2 = _3303 * _3085.z;
                                frontier_phi_83_pred_3 = _3303 * _3085.y;
                                frontier_phi_83_pred_4 = _3303 * _3085.x;
                                frontier_phi_83_pred_5 = _3229 * _3073.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3311 = frontier_phi_83_pred;
                            _3310 = frontier_phi_83_pred_1;
                            _3309 = frontier_phi_83_pred_2;
                            _3308 = frontier_phi_83_pred_3;
                            _3307 = frontier_phi_83_pred_4;
                            _3312 = frontier_phi_83_pred_5;
                            _3015 = _3310 + _3028;
                            _3016 = _3311 + _3029;
                            _3017 = _3312 + _3030;
                            _3012 = _3307 + _3025;
                            _3013 = _3308 + _3026;
                            _3014 = _3309 + _3027;
                            if (_3032 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3025 = _3012;
                                _3026 = _3013;
                                _3027 = _3014;
                                _3028 = _3015;
                                _3029 = _3016;
                                _3030 = _3017;
                                _3031 = _3032;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3017;
                        frontier_phi_77_pred_1 = _3016;
                        frontier_phi_77_pred_2 = _3015;
                        frontier_phi_77_pred_3 = _3014;
                        frontier_phi_77_pred_4 = _3013;
                        frontier_phi_77_pred_5 = _3012;
                    }
                    _2654 = frontier_phi_77_pred;
                    _2652 = frontier_phi_77_pred_1;
                    _2650 = frontier_phi_77_pred_2;
                    _2648 = frontier_phi_77_pred_3;
                    _2646 = frontier_phi_77_pred_4;
                    _2644 = frontier_phi_77_pred_5;
                    uint _2810 = _2809 + 1u;
                    if (_2810 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2803 = _2644;
                        _2804 = _2646;
                        _2805 = _2648;
                        _2806 = _2650;
                        _2807 = _2652;
                        _2808 = _2654;
                        _2809 = _2810;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2648;
                frontier_phi_58_59_ladder_1 = _2654;
                frontier_phi_58_59_ladder_2 = _2652;
                frontier_phi_58_59_ladder_3 = _2650;
                frontier_phi_58_59_ladder_4 = _2646;
                frontier_phi_58_59_ladder_5 = _2644;
            }
            else
            {
                frontier_phi_58_59_ladder = _2518;
                frontier_phi_58_59_ladder_1 = _2524;
                frontier_phi_58_59_ladder_2 = _2522;
                frontier_phi_58_59_ladder_3 = _2520;
                frontier_phi_58_59_ladder_4 = _2516;
                frontier_phi_58_59_ladder_5 = _2514;
            }
            _2643 = frontier_phi_58_59_ladder_5;
            _2645 = frontier_phi_58_59_ladder_4;
            _2647 = frontier_phi_58_59_ladder;
            _2649 = frontier_phi_58_59_ladder_3;
            _2651 = frontier_phi_58_59_ladder_2;
            _2653 = frontier_phi_58_59_ladder_1;
        }
        float _2658 = isnan(1.0) ? _613 : (isnan(_613) ? 1.0 : min(_613, 1.0));
        _2381 = (_2658 * _2649) + _1833;
        _2383 = (_2658 * _2651) + _1835;
        _2385 = (_2658 * _2653) + _1837;
        _2387 = ((_2643 * 0.039999999105930328369140625) * _2658) + _2166;
        _2389 = ((_2645 * 0.039999999105930328369140625) * _2658) + _2168;
        _2391 = ((_2647 * 0.039999999105930328369140625) * _2658) + _2170;
    }
    else
    {
        _2381 = _1833;
        _2383 = _1835;
        _2385 = _1837;
        _2387 = _2166;
        _2389 = _2168;
        _2391 = _2170;
    }
    uint _2397 = _589 + uint(cbMatDynParam._m0[0u].w);
    float _2403 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].y;
    float _2409 = (((((_2403 * cbMtdParam._m0[10u].x) * _336.x) * _359) * _436) * (((1.0 - _413) * cbMtdParam._m0[16u].y) + _413)) * cbInstanceData._m0[_2397].x;
    float _2415 = (((((_2403 * cbMtdParam._m0[10u].y) * _336.y) * _359) * _436) * (((1.0 - _415) * cbMtdParam._m0[16u].y) + _415)) * cbInstanceData._m0[_2397].y;
    float _2421 = (((((_2403 * cbMtdParam._m0[10u].z) * _336.z) * _359) * _436) * (((1.0 - _417) * cbMtdParam._m0[16u].y) + _417)) * cbInstanceData._m0[_2397].z;
    float _4385 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _4396 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _4407 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _2438 = (((isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2381 + ((isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0))) * _613))) + ((_2387 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _1450)) * cbPerFrame._m0[3u].x)) + _2409;
    float _2440 = (_2415 + ((_2389 + ((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _1450)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2383 + ((isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0))) * _613)));
    float _2442 = (_2421 + ((_2391 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _1450)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_2385 + ((isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))) * _613)));
    float _2443 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2444 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2445 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2451 = cbMtdParam._m0[2u].x * _2409;
    float _2452 = cbMtdParam._m0[2u].y * _2415;
    float _2453 = cbMtdParam._m0[2u].z * _2421;
    float _4433 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2455 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
    uint _2456 = _588 + 6u;
    float _2464 = _550 / cbSceneParam._m0[86u].x;
    float _2465 = _551 / cbSceneParam._m0[86u].y;
    vec4 _2479 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2464, _2465, (log2((isnan(cbSceneParam._m0[77u].w) ? _472 : (isnan(_472) ? cbSceneParam._m0[77u].w : min(_472, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2481 = _2479.x;
    float _2482 = _2479.y;
    float _2483 = _2479.z;
    float _2484 = _2479.w;
    float _2576;
    float _2578;
    float _2580;
    float _2582;
    if (_472 > cbSceneParam._m0[78u].w)
    {
        float _2539 = isnan(_472) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _472 : min(cbSceneParam._m0[80u].w, _472));
        float _2540 = _2539 / _472;
        float _2551 = _2540 * _523;
        float _2552 = _524 * _2540;
        float _2553 = (-0.0) - _2552;
        float _2554 = _2540 * _525;
        float _2556 = (cbSceneParam._m0[77u].w * _2553) / _2539;
        float _2557 = _2556 + cbSceneParam._m0[79u].w;
        float _2558 = cbSceneParam._m0[79u].w - _2552;
        float _2564 = sqrt(((_2551 * _2551) + (_2552 * _2552)) + (_2554 * _2554));
        float _2567 = (1.0 - (cbSceneParam._m0[77u].w / _2539)) * _2564;
        float _2572 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2574 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2760;
        if (abs((_2553 - _2556) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2760 = ((((_2557 > 0.0) ? exp2(_2572 * _2557) : (2.0 - exp2(_2574 * _2557))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2567;
        }
        else
        {
            float _2704 = 1.0 / cbSceneParam._m0[80u].x;
            float _2705 = isnan(_2558) ? _2557 : (isnan(_2557) ? _2558 : max(_2557, _2558));
            float _2706 = isnan(_2558) ? _2557 : (isnan(_2557) ? _2558 : min(_2557, _2558));
            float _2715 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : min(_2705, 0.0));
            float _2716 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : min(_2706, 0.0));
            _2760 = ((abs(_2564 / _2553) * cbSceneParam._m0[80u].y) * ((((_2715 - _2716) * 2.0) - ((exp2(_2572 * (isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0)))) - exp2(_2572 * (isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0))))) * _2704)) - ((exp2(_2574 * _2715) - exp2(_2574 * _2716)) * _2704))) + (_2567 * cbSceneParam._m0[80u].z);
        }
        vec4 _2762 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2464, _2465, 1.0), 0.0);
        float _2771 = exp2((_2760 * (-1.44269502162933349609375)) * (1.0 - _2762.w));
        float _2772 = log2(_2771);
        float _2788 = log2(_2484);
        _2576 = (exp2(_2788 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2772 * cbSceneParam._m0[78u].x)) * _2762.x) / cbSceneParam._m0[78u].x)) + _2481;
        _2578 = (exp2(_2788 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2772 * cbSceneParam._m0[78u].y)) * _2762.y) / cbSceneParam._m0[78u].y)) + _2482;
        _2580 = (exp2(_2788 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2772 * cbSceneParam._m0[78u].z)) * _2762.z) / cbSceneParam._m0[78u].z)) + _2483;
        _2582 = _2771 * _2484;
    }
    else
    {
        _2576 = _2481;
        _2578 = _2482;
        _2580 = _2483;
        _2582 = _2484;
    }
    bool _2798;
    vec4 _2592;
    vec4 _2614;
    float _2616;
    float _2620;
    float _2621;
    float _2622;
    float _2625;
    float _2628;
    float _2631;
    float _2632;
    bool _2642;
    for (;;)
    {
        _2592 = cbMatDynParam._m0[0u];
        float _2594 = roundEven(_2592.y);
        bool _2595 = _2594 == 3.0;
        float _2596 = log2(_2582);
        float _2600 = exp2(_2596 * cbSceneParam._m0[78u].x);
        float _2601 = exp2(_2596 * cbSceneParam._m0[78u].y);
        float _2602 = exp2(_2596 * cbSceneParam._m0[78u].z);
        float _2603 = _2600 * _2443;
        float _2604 = _2601 * _2444;
        float _2605 = _2602 * _2445;
        float _2612 = _539 + (-0.5);
        _2614 = cbMtdParam._m0[1u];
        _2616 = _2614.y * _2612;
        float _2619 = (_2594 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2620 = _2619 * (_2595 ? _2603 : (_2603 + (cbSceneParam._m0[72u].w * _2576)));
        _2621 = _2619 * (_2595 ? _2604 : (_2604 + (cbSceneParam._m0[72u].w * _2578)));
        _2622 = _2619 * (_2595 ? _2605 : (_2605 + (cbSceneParam._m0[72u].w * _2580)));
        _2625 = ((_2451 * _2455) * _2600) * _2619;
        _2628 = ((_2452 * _2455) * _2601) * _2619;
        _2631 = ((_2453 * _2455) * _2602) * _2619;
        _2632 = _2612 * 0.999000012874603271484375;
        _2642 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2642)
        {
            if ((cbInstanceData._m0[_588 + 7u].x + _2632) < 0.5)
            {
                _2798 = true;
                break;
            }
        }
        uint _2739 = _589 + uint(_2592.w);
        if ((cbInstanceData._m0[_2739].w < 1.0) && ((cbInstanceData._m0[_2739].w + _2632) < 0.5))
        {
            _2798 = true;
            break;
        }
        if ((_2616 + 1.0) < _2614.x)
        {
            _2798 = true;
            break;
        }
        _2798 = false;
        break;
    }
    float _3003;
    if (_2798)
    {
        discard_state = true;
        _3003 = 0.0;
    }
    else
    {
        _3003 = cbInstanceData._m0[_2456].w;
    }
    SV_Target.x = _2620;
    SV_Target.y = _2621;
    SV_Target.z = _2622;
    SV_Target.w = _3003;
    SV_Target_1.x = _2625;
    SV_Target_1.y = _2628;
    SV_Target_1.z = _2631;
    SV_Target_1.w = cbInstanceData._m0[_2456].w;
    discard_exit();
}


