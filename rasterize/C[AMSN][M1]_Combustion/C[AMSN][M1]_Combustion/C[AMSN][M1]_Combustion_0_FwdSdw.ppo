#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_21;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1089;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _249 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _255 = _249.x * cbMtdParam._m0[9u].x;
    float _256 = _249.y * cbMtdParam._m0[9u].y;
    float _257 = _249.z * cbMtdParam._m0[9u].z;
    vec4 _280 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _300 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _303 = _300.x + 0.00999999977648258209228515625;
    float _311 = (TEXCOORD_8 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_8)) * _303)) * (cbMtdParam._m0[15u].z + 1.0);
    float _3755 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _312 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _319 = (_312 * ((_280.x * cbMtdParam._m0[12u].x) - _255)) + _255;
    float _320 = (_312 * ((_280.y * cbMtdParam._m0[12u].y) - _256)) + _256;
    float _321 = (_312 * ((_280.z * cbMtdParam._m0[12u].z) - _257)) + _257;
    vec4 _334 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _336 = _334.x;
    float _338 = _336 - (_336 * TEXCOORD_8);
    vec4 _350 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    vec4 _373 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _377 = _373.z;
    float _380 = (_373.x * 2.0) + (-1.0);
    float _381 = (_373.y * 2.0) + (-1.0);
    float _382 = dot(vec2(_380, _381), vec2(_380, _381));
    float _3766 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _387 = sqrt(1.0 - (isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))));
    float _395 = (((_350.z - _377) * TEXCOORD_8) * cbMtdParam._m0[16u].x) + _377;
    vec4 _429 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _443 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3777 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _444 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _452 = (((_444 * _444) * (3.0 - (_444 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _461 = cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x;
    float _469 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3788 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _470 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _474 = (_470 * _470) * (3.0 - (_470 * 2.0));
    float _475 = _474 * cbMtdParam._m0[16u].w;
    float _476 = _474 * cbMtdParam._m0[17u].x;
    float _477 = sin(_461);
    float _478 = cos(_461);
    float _479 = TEXCOORD.z - _475;
    float _480 = TEXCOORD.w - _476;
    vec4 _500 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_475 + fma(_480, (-0.0) - _477, _479 * _478))) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (fma(_480, _478, _479 * _477) + _476)) + cbTextureTilingScale._m0[0u].w));
    float _506 = (cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].w) * _500.x;
    float _508 = (cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].w) * _500.y;
    float _510 = (cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].w) * _500.z;
    float _526 = (TEXCOORD_5.x - ((_303 * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[16u].z)) * (cbMtdParam._m0[13u].x + 1.0);
    float _3799 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _527 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _533 = ((((_350.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[15u].x) + _380;
    float _534 = ((((_350.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[15u].x) + _381;
    float _537 = fma(_387, _220 * NORMAL.x, fma(_534, _227 * TANGENT.x, (_213 * _205) * _533));
    float _540 = fma(_387, _220 * NORMAL.y, fma(_534, _227 * TANGENT.y, (_213 * _206) * _533));
    float _543 = fma(_387, _220 * NORMAL.z, fma(_534, _227 * TANGENT.z, (_213 * _207) * _533));
    float _547 = inversesqrt(dot(vec3(_537, _540, _543), vec3(_537, _540, _543)));
    float _548 = _547 * _537;
    float _549 = _547 * _540;
    float _550 = _547 * _543;
    float _3810 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _551 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    float _3821 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3832 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3843 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _3854 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _555 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    float _571 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _612 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _622 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _612);
    float _623 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _612);
    float _624 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _612);
    float _628 = inversesqrt(dot(vec3(_622, _623, _624), vec3(_622, _623, _624)));
    float _629 = _622 * _628;
    float _630 = _623 * _628;
    float _631 = _624 * _628;
    float _637 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _638 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _656 = fma(_550, cbSceneParam._m0[5u].z, fma(_549, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _548));
    float _659 = fma(_550, cbSceneParam._m0[6u].z, fma(_549, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _548));
    float _662 = fma(_550, cbSceneParam._m0[7u].z, fma(_549, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _548));
    uint _675 = uint(roundEven(NORMAL.w)) * 13u;
    uint _676 = _675 + 9u;
    uint _677 = _676 + uint(cbMatDynParam._m0[0u].w);
    float _683 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0)))) * cbInstanceData._m0[_677].x;
    float _684 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0)))) * cbInstanceData._m0[_677].y;
    float _685 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0)))) * cbInstanceData._m0[_677].z;
    float _3865 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _686 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _3876 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _687 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _3887 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _688 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _689 = 1.0 - _555;
    float _690 = _686 * _689;
    float _691 = _687 * _689;
    float _692 = _688 * _689;
    float _697 = (_686 + (-0.039999999105930328369140625)) * _555;
    float _698 = (_687 + (-0.039999999105930328369140625)) * _555;
    float _699 = (_688 + (-0.039999999105930328369140625)) * _555;
    float _700 = _697 + 0.039999999105930328369140625;
    float _702 = _698 + 0.039999999105930328369140625;
    float _703 = _699 + 0.039999999105930328369140625;
    vec4 _712 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _637, cbSceneParam._m0[86u].y * _638));
    float _715 = _712.x * TEXCOORD_5.w;
    float _716 = dot(vec3(_548, _549, _550), vec3(_629, _630, _631));
    float _719 = _716 * 2.0;
    float _723 = (_719 * _548) - _629;
    float _724 = (_719 * _549) - _630;
    float _725 = (_719 * _550) - _631;
    float _729 = abs(dot(vec3(_629, _630, _631), vec3(_548, _549, _550)));
    float _3898 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _731 = sqrt(_551);
    float _743 = exp2((_731 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_731 * 3.0));
    float _749 = (1.0 - _743) * ((_731 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _750 = _743 * _731;
    float _778 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _782 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _786 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1088;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _813 = fma(_786, cbModelParam._m0[26u].z, fma(_782, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _778));
        float _817 = fma(_786, cbModelParam._m0[27u].z, fma(_782, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _778));
        float _821 = fma(_786, cbModelParam._m0[28u].z, fma(_782, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _778));
        float _846 = _778 + _548;
        float _847 = _782 + _549;
        float _848 = _786 + _550;
        float _858 = fma(_848, cbModelParam._m0[26u].z, fma(_847, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _846)) - _813;
        float _859 = fma(_848, cbModelParam._m0[27u].z, fma(_847, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _846)) - _817;
        float _860 = fma(_848, cbModelParam._m0[28u].z, fma(_847, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _846)) - _821;
        float _864 = inversesqrt(dot(vec3(_858, _859, _860), vec3(_858, _859, _860)));
        float _877 = ((_864 * _858) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_813 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _878 = ((_864 * _859) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_817 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _879 = ((_864 * _860) / cbModelParam._m0[34u].z) + ((((((_821 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_877, _878, _879), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_877, _878, _879), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_877, _878, _879), 0.0);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_877, _878, _879), 0.0);
        float _916 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _917 = _916 * (_882.x + (-0.5));
        float _918 = _916 * (_882.y + (-0.5));
        float _919 = _916 * (_882.z + (-0.5));
        float _926 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _927 = _926 * (_889.x + (-0.5));
        float _928 = _926 * (_889.y + (-0.5));
        float _929 = _926 * (_889.z + (-0.5));
        float _936 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _937 = _936 * (_896.x + (-0.5));
        float _938 = _936 * (_896.y + (-0.5));
        float _939 = _936 * (_896.z + (-0.5));
        float _946 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _947 = _946 * (_903.x + (-0.5));
        float _948 = _946 * (_903.y + (-0.5));
        float _949 = _946 * (_903.z + (-0.5));
        float _950 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _951 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _952 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _953 = _917 * 0.5;
        float _954 = _927 * 0.5;
        float _955 = _937 * 0.5;
        float _956 = dot(vec3(_953, _954, _955), vec3(_953, _954, _955));
        float _961 = (_956 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_956);
        float _970 = (dot(vec3(_548, _549, _550), vec3(_961 * _953, _961 * _954, _961 * _955)) + 1.0) * 0.5;
        float _3924 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _980 = sqrt(((_954 * _954) + (_953 * _953)) + (_955 * _955)) / (_950 + 9.9999997473787516355514526367188e-06);
        float _3935 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _982 = _981 * 2.0;
        float _986 = (1.0 - _981) / (_981 + 1.0);
        float _3946 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _996 = ((((1.0 - _987) * (_982 + 2.0)) * exp2(log2(isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_982 + 1.0))) + _987) * _950;
        float _997 = _918 * 0.5;
        float _998 = _928 * 0.5;
        float _999 = _938 * 0.5;
        float _1000 = dot(vec3(_997, _998, _999), vec3(_997, _998, _999));
        float _1005 = (_1000 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1000);
        float _1013 = (dot(vec3(_548, _549, _550), vec3(_1005 * _997, _1005 * _998, _1005 * _999)) + 1.0) * 0.5;
        float _3957 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1022 = sqrt(((_998 * _998) + (_997 * _997)) + (_999 * _999)) / (_951 + 9.9999997473787516355514526367188e-06);
        float _3968 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1024 = _1023 * 2.0;
        float _1028 = (1.0 - _1023) / (_1023 + 1.0);
        float _3979 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1038 = ((((1.0 - _1029) * (_1024 + 2.0)) * exp2(log2(isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1024 + 1.0))) + _1029) * _951;
        float _1039 = _919 * 0.5;
        float _1040 = _929 * 0.5;
        float _1041 = _939 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1055 = (dot(vec3(_548, _549, _550), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _3990 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1064 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_952 + 9.9999997473787516355514526367188e-06);
        float _4001 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1066 = _1065 * 2.0;
        float _1070 = (1.0 - _1065) / (_1065 + 1.0);
        float _4012 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1080 = ((((1.0 - _1071) * (_1066 + 2.0)) * exp2(log2(isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1066 + 1.0))) + _1071) * _952;
        _1088 = _919;
        _1090 = _918;
        _1091 = _917;
        _1092 = _929;
        _1093 = _928;
        _1094 = _927;
        _1095 = _939;
        _1096 = _938;
        _1097 = _937;
        _1098 = _952;
        _1099 = _951;
        _1100 = _950;
        _1101 = cbModelParam._m0[36u].z * (isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0)));
        _1102 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0)));
        _1103 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0)));
    }
    else
    {
        _1088 = _1089;
        _1090 = _1089;
        _1091 = _1089;
        _1092 = _1089;
        _1093 = _1089;
        _1094 = _1089;
        _1095 = _1089;
        _1096 = _1089;
        _1097 = _1089;
        _1098 = _1089;
        _1099 = _1089;
        _1100 = _1089;
        _1101 = 0.0;
        _1102 = 0.0;
        _1103 = 0.0;
    }
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1129 = fma(_786, cbModelParam._m0[30u].z, fma(_782, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _778));
        float _1133 = fma(_786, cbModelParam._m0[31u].z, fma(_782, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _778));
        float _1137 = fma(_786, cbModelParam._m0[32u].z, fma(_782, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _778));
        float _1160 = _778 + _548;
        float _1161 = _782 + _549;
        float _1162 = _786 + _550;
        float _1172 = fma(_1162, cbModelParam._m0[30u].z, fma(_1161, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1160)) - _1129;
        float _1173 = fma(_1162, cbModelParam._m0[31u].z, fma(_1161, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1160)) - _1133;
        float _1174 = fma(_1162, cbModelParam._m0[32u].z, fma(_1161, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1160)) - _1137;
        float _1178 = inversesqrt(dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174)));
        float _1191 = ((_1178 * _1172) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1129 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1192 = ((_1178 * _1173) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1133 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1193 = ((_1178 * _1174) / cbModelParam._m0[35u].z) + ((((((_1137 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        float _1228 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1195.x + (-0.5));
        float _1230 = _1228 * (_1195.y + (-0.5));
        float _1231 = _1228 * (_1195.z + (-0.5));
        float _1238 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1202.x + (-0.5));
        float _1240 = _1238 * (_1202.y + (-0.5));
        float _1241 = _1238 * (_1202.z + (-0.5));
        float _1248 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1209.x + (-0.5));
        float _1250 = _1248 * (_1209.y + (-0.5));
        float _1251 = _1248 * (_1209.z + (-0.5));
        float _1258 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1216.x + (-0.5));
        float _1260 = _1258 * (_1216.y + (-0.5));
        float _1261 = _1258 * (_1216.z + (-0.5));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = _1229 * 0.5;
        float _1266 = _1239 * 0.5;
        float _1267 = _1249 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_548, _549, _550), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _4053 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _4064 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _4075 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_1292 + 1.0))) + _1297) * _1262;
        float _1307 = _1230 * 0.5;
        float _1308 = _1240 * 0.5;
        float _1309 = _1250 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_548, _549, _550), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _4086 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _4097 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _4108 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_1334 + 1.0))) + _1339) * _1263;
        float _1349 = _1231 * 0.5;
        float _1350 = _1241 * 0.5;
        float _1351 = _1251 * 0.5;
        float _1352 = dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351));
        float _1357 = (_1352 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1352);
        float _1365 = (dot(vec3(_548, _549, _550), vec3(_1357 * _1349, _1357 * _1350, _1357 * _1351)) + 1.0) * 0.5;
        float _4119 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1374 = sqrt(((_1350 * _1350) + (_1349 * _1349)) + (_1351 * _1351)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _4130 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1376 = _1375 * 2.0;
        float _1380 = (1.0 - _1375) / (_1375 + 1.0);
        float _4141 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1390 = ((((1.0 - _1381) * (_1376 + 2.0)) * exp2(log2(isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_1376 + 1.0))) + _1381) * _1264;
        _1398 = _1231;
        _1399 = _1230;
        _1400 = _1229;
        _1401 = _1241;
        _1402 = _1240;
        _1403 = _1239;
        _1404 = _1251;
        _1405 = _1250;
        _1406 = _1249;
        _1407 = _1264;
        _1408 = _1263;
        _1409 = _1262;
        _1410 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
        _1411 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
        _1412 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)));
    }
    else
    {
        _1398 = _1089;
        _1399 = _1089;
        _1400 = _1089;
        _1401 = _1089;
        _1402 = _1089;
        _1403 = _1089;
        _1404 = _1089;
        _1405 = _1089;
        _1406 = _1089;
        _1407 = _1089;
        _1408 = _1089;
        _1409 = _1089;
        _1410 = 0.0;
        _1411 = 0.0;
        _1412 = 0.0;
    }
    float _1422 = (cbModelParam._m0[1u].x * (_1410 - _1101)) + _1101;
    float _1423 = (cbModelParam._m0[1u].x * (_1411 - _1102)) + _1102;
    float _1424 = (cbModelParam._m0[1u].x * (_1412 - _1103)) + _1103;
    float _1445 = fma(_1424, cbSceneParam._m0[89u].z, fma(_1423, cbSceneParam._m0[89u].y, _1422 * cbSceneParam._m0[89u].x));
    float _1448 = fma(_1424, cbSceneParam._m0[90u].z, fma(_1423, cbSceneParam._m0[90u].y, _1422 * cbSceneParam._m0[90u].x));
    float _1451 = fma(_1424, cbSceneParam._m0[91u].z, fma(_1423, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1422));
    float _1466 = _723 * 0.5;
    float _1467 = _724 * 0.5;
    float _1468 = _725 * 0.5;
    float _1469 = dot(vec4(_1466, _1467, _1468, 1.0), vec4(_1400, _1403, _1406, _1409));
    float _1472 = dot(vec4(_1466, _1467, _1468, 1.0), vec4(_1399, _1402, _1405, _1408));
    float _1475 = dot(vec4(_1466, _1467, _1468, 1.0), vec4(_1398, _1401, _1404, _1407));
    float _1509;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1482 = dot(vec4(_1466, _1467, _1468, 1.0), vec4(_1088, _1092, _1095, _1098));
        float _1486 = dot(vec4(_1466, _1467, _1468, 1.0), vec4(_1090, _1093, _1096, _1099));
        float _1490 = dot(vec4(_1466, _1467, _1468, 1.0), vec4(_1091, _1094, _1097, _1100));
        float _1497 = dot(vec4(cbModelParam._m0[39u]), vec4(_1466, _1467, _1468, 1.0));
        _1509 = dot(vec3(isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)), isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)), isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1497) ? 0.0 : (isnan(0.0) ? _1497 : max(0.0, _1497))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1509 = 1.0;
    }
    float _1520;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1511 = dot(vec4(cbModelParam._m0[40u]), vec4(_1466, _1467, _1468, 1.0));
        _1520 = dot(vec3(isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)), isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)), isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1511) ? 0.0 : (isnan(0.0) ? _1511 : max(0.0, _1511))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1520 = 1.0;
    }
    float _1524 = (_1520 * cbModelParam._m0[1u].x) + (_1509 * (1.0 - cbModelParam._m0[1u].x));
    float _1534 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _551);
    float _1535 = isnan(_1534) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1534 : min(cbModelParam._m0[25u].z, _1534));
    float _1615;
    float _1617;
    float _1619;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1582 = fma(_786, cbModelParam._m0[13u].z, fma(_782, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _778)) + cbModelParam._m0[13u].w;
        float _1586 = fma(_786, cbModelParam._m0[14u].z, fma(_782, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _778)) + cbModelParam._m0[14u].w;
        float _1590 = fma(_786, cbModelParam._m0[15u].z, fma(_782, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _778)) + cbModelParam._m0[15u].w;
        float _1593 = fma(_725, cbModelParam._m0[13u].z, fma(_724, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _723));
        float _1596 = fma(_725, cbModelParam._m0[14u].z, fma(_724, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _723));
        float _1599 = fma(_725, cbModelParam._m0[15u].z, fma(_724, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _723));
        float _1627;
        if (_1593 > 0.0)
        {
            _1627 = abs((1.0 - _1582) / _1593);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1593 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1582 + 1.0) / _1593);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1627 = frontier_phi_14_12_ladder;
        }
        float _1800;
        if (_1596 > 0.0)
        {
            _1800 = abs((1.0 - _1586) / _1596);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1596 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1586 + 1.0) / _1596);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1800 = frontier_phi_23_19_ladder;
        }
        float _2095;
        if (_1599 > 0.0)
        {
            _2095 = abs((1.0 - _1590) / _1599);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1590 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2095 = frontier_phi_35_30_ladder;
        }
        float _2097 = isnan(_1800) ? _1627 : (isnan(_1627) ? _1800 : min(_1627, _1800));
        float _2098 = isnan(_2095) ? _2097 : (isnan(_2097) ? _2095 : min(_2097, _2095));
        float _2102 = (_2098 * _1593) + _1582;
        float _2103 = (_2098 * _1596) + _1586;
        float _2104 = (_2098 * _1599) + _1590;
        float _2105 = _2098 * 9.9999997473787516355514526367188e-05;
        float _2107 = (-1.0) - _2105;
        float _2109 = _2105 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2104 > _2109) || ((_2104 < _2107) || ((_2103 > _2109) || ((_2103 < _2107) || ((_2102 < _2107) || (_2102 > _2109))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2249 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2104, cbModelParam._m0[9u].z, fma(_2103, cbModelParam._m0[9u].y, _2102 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2104, cbModelParam._m0[10u].z, fma(_2103, cbModelParam._m0[10u].y, _2102 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2104, cbModelParam._m0[11u].z, fma(_2103, cbModelParam._m0[11u].y, _2102 * cbModelParam._m0[11u].x))), _1535);
            frontier_phi_13_35_ladder = _2249.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2249.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2249.x * cbModelParam._m0[1u].y;
        }
        _1615 = frontier_phi_13_35_ladder_2;
        _1617 = frontier_phi_13_35_ladder_1;
        _1619 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1603 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_723, _724, _725), _1535);
        _1615 = _1603.x * cbModelParam._m0[1u].y;
        _1617 = _1603.y * cbModelParam._m0[1u].y;
        _1619 = _1603.z * cbModelParam._m0[1u].y;
    }
    float _1623 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _551);
    float _1624 = isnan(_1623) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1623 : min(cbModelParam._m0[25u].w, _1623));
    float _1715;
    float _1717;
    float _1719;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1679 = fma(_786, cbModelParam._m0[21u].z, fma(_782, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _778)) + cbModelParam._m0[21u].w;
        float _1683 = fma(_786, cbModelParam._m0[22u].z, fma(_782, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _778)) + cbModelParam._m0[22u].w;
        float _1687 = fma(_786, cbModelParam._m0[23u].z, fma(_782, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _778)) + cbModelParam._m0[23u].w;
        float _1690 = fma(_725, cbModelParam._m0[21u].z, fma(_724, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _723));
        float _1693 = fma(_725, cbModelParam._m0[22u].z, fma(_724, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _723));
        float _1696 = fma(_725, cbModelParam._m0[23u].z, fma(_724, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _723));
        float _1805;
        if (_1690 > 0.0)
        {
            _1805 = abs((1.0 - _1679) / _1690);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1679 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1805 = frontier_phi_25_21_ladder;
        }
        float _2122;
        if (_1693 > 0.0)
        {
            _2122 = abs((1.0 - _1683) / _1693);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1683 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2122 = frontier_phi_37_32_ladder;
        }
        float _2460;
        if (_1696 > 0.0)
        {
            _2460 = abs((1.0 - _1687) / _1696);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1687 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2460 = frontier_phi_47_44_ladder;
        }
        float _2462 = isnan(_2122) ? _1805 : (isnan(_1805) ? _2122 : min(_1805, _2122));
        float _2463 = isnan(_2460) ? _2462 : (isnan(_2462) ? _2460 : min(_2462, _2460));
        float _2467 = (_2463 * _1690) + _1679;
        float _2468 = (_2463 * _1693) + _1683;
        float _2469 = (_2463 * _1696) + _1687;
        float _2470 = _2463 * 9.9999997473787516355514526367188e-05;
        float _2471 = (-1.0) - _2470;
        float _2473 = _2470 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2469 > _2473) || ((_2469 < _2471) || ((_2468 > _2473) || ((_2468 < _2471) || ((_2467 < _2471) || (_2467 > _2473))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2591 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2469, cbModelParam._m0[17u].z, fma(_2468, cbModelParam._m0[17u].y, _2467 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2469, cbModelParam._m0[18u].z, fma(_2468, cbModelParam._m0[18u].y, _2467 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2469, cbModelParam._m0[19u].z, fma(_2468, cbModelParam._m0[19u].y, _2467 * cbModelParam._m0[19u].x))), _1624);
            frontier_phi_22_47_ladder = _2591.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2591.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2591.x * cbModelParam._m0[1u].z;
        }
        _1715 = frontier_phi_22_47_ladder_2;
        _1717 = frontier_phi_22_47_ladder_1;
        _1719 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1699 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_723, _724, _725), _1624);
        _1715 = _1699.x * cbModelParam._m0[1u].z;
        _1717 = _1699.y * cbModelParam._m0[1u].z;
        _1719 = _1699.z * cbModelParam._m0[1u].z;
    }
    float _1732 = (((_749 * _700) + _750) * _715) * ((cbModelParam._m0[1u].w * (_1715 - _1615)) + _1615);
    float _1734 = (((_749 * _702) + _750) * _715) * ((cbModelParam._m0[1u].w * (_1717 - _1617)) + _1617);
    float _1736 = (((_749 * _703) + _750) * _715) * ((cbModelParam._m0[1u].w * (_1719 - _1619)) + _1619);
    float _1739 = fma(_1736, cbSceneParam._m0[89u].z, fma(_1734, cbSceneParam._m0[89u].y, _1732 * cbSceneParam._m0[89u].x));
    float _1742 = fma(_1736, cbSceneParam._m0[90u].z, fma(_1734, cbSceneParam._m0[90u].y, _1732 * cbSceneParam._m0[90u].x));
    float _1745 = fma(_1736, cbSceneParam._m0[91u].z, fma(_1734, cbSceneParam._m0[91u].y, _1732 * cbSceneParam._m0[91u].x));
    float _1779 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1783 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1787 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1791 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1792 = _1779 / _1791;
    float _1793 = _1783 / _1791;
    float _1794 = _1787 / _1791;
    float _1941;
    float _1942;
    float _1943;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1821 = ((uint(_1794 > cbSceneParam._m0[59u].y) + uint(_1794 > cbSceneParam._m0[59u].x)) + uint(_1794 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1822 = _1821 + 43u;
        uint _1830 = _1821 + 44u;
        uint _1838 = _1821 + 45u;
        uint _1846 = _1821 + 46u;
        float _1857 = fma(_1791, cbSceneParam._m0[_1822].w, fma(_1787, cbSceneParam._m0[_1822].z, fma(_1783, cbSceneParam._m0[_1822].y, _1779 * cbSceneParam._m0[_1822].x)));
        float _1861 = fma(_1791, cbSceneParam._m0[_1830].w, fma(_1787, cbSceneParam._m0[_1830].z, fma(_1783, cbSceneParam._m0[_1830].y, _1779 * cbSceneParam._m0[_1830].x)));
        float _1869 = fma(_1791, cbSceneParam._m0[_1846].w, fma(_1787, cbSceneParam._m0[_1846].z, fma(_1783, cbSceneParam._m0[_1846].y, _1779 * cbSceneParam._m0[_1846].x)));
        float _1874 = cbSceneParam._m0[33u].z * _1869;
        float _1876 = cbSceneParam._m0[33u].w * _1869;
        float _1879 = fma(_1791, cbSceneParam._m0[_1838].w, fma(_1787, cbSceneParam._m0[_1838].z, fma(_1783, cbSceneParam._m0[_1838].y, _1779 * cbSceneParam._m0[_1838].x))) / _1869;
        float _1927 = (cbSceneParam._m0[33u].x - sqrt(((_1793 * _1793) + (_1792 * _1792)) + (_1794 * _1794))) * cbSceneParam._m0[33u].y;
        float _4267 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
        float _1934 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1874 + _1857) / _1869, (_1876 + _1861) / _1869), _1879), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1876 + _1857) / _1869, (_1861 - _1874) / _1869), _1879), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1857 - _1874) / _1869, (_1861 - _1876) / _1869), _1879), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1857 - _1876) / _1869, (_1874 + _1861) / _1869), _1879), 0.0)).x), vec4(0.25)));
        _1941 = 1.0 - (_1934 * cbSceneParam._m0[34u].x);
        _1942 = 1.0 - (_1934 * cbSceneParam._m0[34u].y);
        _1943 = 1.0 - (_1934 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1941 = 1.0;
        _1942 = 1.0;
        _1943 = 1.0;
    }
    float _2007;
    float _2009;
    float _2011;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1995 = fma(_1791, cbSceneParam._m0[63u].w, fma(_1787, cbSceneParam._m0[63u].z, fma(_1783, cbSceneParam._m0[63u].y, _1779 * cbSceneParam._m0[63u].x)));
        float _1996 = fma(_1791, cbSceneParam._m0[60u].w, fma(_1787, cbSceneParam._m0[60u].z, fma(_1783, cbSceneParam._m0[60u].y, _1779 * cbSceneParam._m0[60u].x))) / _1995;
        float _1997 = fma(_1791, cbSceneParam._m0[61u].w, fma(_1787, cbSceneParam._m0[61u].z, fma(_1783, cbSceneParam._m0[61u].y, _1779 * cbSceneParam._m0[61u].x))) / _1995;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1996 >= cbSceneParam._m0[64u].x) && (_1997 >= cbSceneParam._m0[64u].y)) && (_1996 <= cbSceneParam._m0[64u].z)) && (_1997 <= cbSceneParam._m0[64u].w))
        {
            float _2135 = fma(_1791, cbSceneParam._m0[62u].w, fma(_1787, cbSceneParam._m0[62u].z, fma(_1783, cbSceneParam._m0[62u].y, _1779 * cbSceneParam._m0[62u].x))) / _1995;
            float _2139 = isnan(cbSceneParam._m0[41u].w) ? _2135 : (isnan(_2135) ? cbSceneParam._m0[41u].w : max(_2135, cbSceneParam._m0[41u].w));
            float _2182 = (cbSceneParam._m0[33u].x - sqrt(((_1793 * _1793) + (_1792 * _1792)) + (_1794 * _1794))) * cbSceneParam._m0[33u].y;
            float _4283 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
            float _2189 = (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1996, cbSceneParam._m0[33u].w + _1997), _2139), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1996, _1997 - cbSceneParam._m0[33u].z), _2139), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1996 - cbSceneParam._m0[33u].z, _1997 - cbSceneParam._m0[33u].w), _2139), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1996 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1997), _2139), 0.0)).x), vec4(0.25)));
            float _2193 = 1.0 - (_2189 * cbSceneParam._m0[34u].x);
            float _2194 = 1.0 - (_2189 * cbSceneParam._m0[34u].y);
            float _2195 = 1.0 - (_2189 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2195) ? _1943 : (isnan(_1943) ? _2195 : min(_1943, _2195));
            frontier_phi_34_33_ladder_1 = isnan(_2194) ? _1942 : (isnan(_1942) ? _2194 : min(_1942, _2194));
            frontier_phi_34_33_ladder_2 = isnan(_2193) ? _1941 : (isnan(_1941) ? _2193 : min(_1941, _2193));
        }
        else
        {
            frontier_phi_34_33_ladder = _1943;
            frontier_phi_34_33_ladder_1 = _1942;
            frontier_phi_34_33_ladder_2 = _1941;
        }
        _2007 = frontier_phi_34_33_ladder_2;
        _2009 = frontier_phi_34_33_ladder_1;
        _2011 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2007 = _1941;
        _2009 = _1942;
        _2011 = _1943;
    }
    uvec4 _2016 = floatBitsToUint(cbInstanceData._m0[_675 + 5u]);
    uint _2018 = _2016.x * 14u;
    uint _2019 = _2018 + 13u;
    float _2026 = _715 + (-1.0);
    float _2031 = (cbLight._m0[_2019].x * _2026) + 1.0;
    float _2032 = (cbLight._m0[_2019].y * _2026) + 1.0;
    float _2033 = (cbLight._m0[_2019].z * _2026) + 1.0;
    float _2034 = (cbLight._m0[_2019].w * _2026) + 1.0;
    uint _2035 = _2018 + 5u;
    float _2041 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
    uint _2045 = _2018 + 4u;
    float _2054 = isnan(1.0) ? _2031 : (isnan(_2031) ? 1.0 : min(_2031, 1.0));
    uint _2058 = _2018 | 1u;
    float _2069 = dot(vec3(cbLight._m0[_2018].xyz), vec3(_548, _549, _550));
    float _2072 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_548, _549, _550));
    float _4319 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _4330 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2077 = (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * 0.3183098733425140380859375;
    float _2079 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * 0.3183098733425140380859375;
    float _2086 = ((cbLight._m0[_2035].x * _2041) * _2079) + (((cbLight._m0[_2045].x * _2007) * _2054) * _2077);
    float _2087 = ((_2041 * cbLight._m0[_2035].y) * _2079) + (((cbLight._m0[_2045].y * _2009) * _2054) * _2077);
    float _2088 = ((_2041 * cbLight._m0[_2035].z) * _2079) + (((cbLight._m0[_2045].z * _2011) * _2054) * _2077);
    uvec4 _2092 = floatBitsToUint(cbLight._m0[_2018 + 12u]);
    bool _2094 = _2092.x == 0u;
    float _2196;
    float _2198;
    float _2200;
    if (_2094)
    {
        _2196 = _2086;
        _2198 = _2087;
        _2200 = _2088;
    }
    else
    {
        uint _2204 = _2018 + 6u;
        float _2220 = (dot(vec3(cbLight._m0[_2018 + 2u].xyz), vec3(_548, _549, _550)) * 0.5) + 0.5;
        float _2221 = _2220 * _2220;
        float _4341 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2222 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _2223 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2196 = (((cbLight._m0[_2204].x * 0.3183098733425140380859375) * _2222) * _2223) + _2086;
        _2198 = (((cbLight._m0[_2204].y * 0.3183098733425140380859375) * _2222) * _2223) + _2087;
        _2200 = (((cbLight._m0[_2204].z * 0.3183098733425140380859375) * _2222) * _2223) + _2088;
    }
    bool _2203 = _2092.y == 0u;
    float _2258;
    float _2260;
    float _2262;
    if (_2203)
    {
        _2258 = _2196;
        _2260 = _2198;
        _2262 = _2200;
    }
    else
    {
        uint _2431 = _2018 + 7u;
        float _2447 = (dot(vec3(cbLight._m0[_2018 + 3u].xyz), vec3(_548, _549, _550)) * 0.5) + 0.5;
        float _2448 = _2447 * _2447;
        float _4357 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2449 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _2450 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
        _2258 = (((cbLight._m0[_2431].x * 0.3183098733425140380859375) * _2449) * _2450) + _2196;
        _2260 = (((cbLight._m0[_2431].y * 0.3183098733425140380859375) * _2449) * _2450) + _2198;
        _2262 = (((cbLight._m0[_2431].z * 0.3183098733425140380859375) * _2449) * _2450) + _2200;
    }
    uint _2265 = _2018 + 8u;
    float _2278 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2018].w)) * _551) * 0.949999988079071044921875);
    float _2279 = _2278 * _2278;
    float _2280 = cbLight._m0[_2018].x + _629;
    float _2281 = cbLight._m0[_2018].y + _630;
    float _2282 = cbLight._m0[_2018].z + _631;
    float _2286 = inversesqrt(dot(vec3(_2280, _2281, _2282), vec3(_2280, _2281, _2282)));
    float _2287 = _2286 * _2280;
    float _2288 = _2286 * _2281;
    float _2289 = _2286 * _2282;
    float _2290 = dot(vec3(_548, _549, _550), vec3(cbLight._m0[_2018].xyz));
    float _4373 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2293 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
    float _4384 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _2294 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
    float _2295 = dot(vec3(_548, _549, _550), vec3(_2287, _2288, _2289));
    float _4395 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2298 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
    float _2299 = dot(vec3(cbLight._m0[_2018].xyz), vec3(_2287, _2288, _2289));
    float _4406 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2303 = _2279 * _2279;
    float _2307 = ((_2298 * _2298) * (_2303 + (-1.0))) + 1.0;
    float _2315 = exp2(log2(1.0 - (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0)))) * 5.0);
    float _2316 = 0.959999978542327880859375 - _697;
    float _2318 = 0.959999978542327880859375 - _698;
    float _2319 = 0.959999978542327880859375 - _699;
    float _2326 = 1.0 - _2279;
    float _2337 = (0.5 / (((_2294 * ((_2293 * _2326) + _2279)) + 9.9999999392252902907785028219223e-09) + (((_2294 * _2326) + _2279) * _2293))) * _2293;
    float _4417 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2339 = (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_2303 / ((_2307 * _2307) * 3.141590118408203125));
    uint _2353 = _2018 + 9u;
    float _2364 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2058].w)) * _551) * 0.949999988079071044921875);
    float _2365 = _2364 * _2364;
    float _2366 = cbLight._m0[_2058].x + _629;
    float _2367 = cbLight._m0[_2058].y + _630;
    float _2368 = cbLight._m0[_2058].z + _631;
    float _2372 = inversesqrt(dot(vec3(_2366, _2367, _2368), vec3(_2366, _2367, _2368)));
    float _2373 = _2372 * _2366;
    float _2374 = _2372 * _2367;
    float _2375 = _2372 * _2368;
    float _2376 = dot(vec3(_548, _549, _550), vec3(cbLight._m0[_2058].xyz));
    float _4428 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2379 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
    float _2380 = dot(vec3(_548, _549, _550), vec3(_2373, _2374, _2375));
    float _4439 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2383 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
    float _2384 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_2373, _2374, _2375));
    float _4450 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2388 = _2365 * _2365;
    float _2392 = ((_2383 * _2383) * (_2388 + (-1.0))) + 1.0;
    float _2399 = exp2(log2(1.0 - (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0)))) * 5.0);
    float _2406 = 1.0 - _2365;
    float _2416 = (0.5 / (((_2294 * ((_2379 * _2406) + _2365)) + 9.9999999392252902907785028219223e-09) + (((_2294 * _2406) + _2365) * _2379))) * _2379;
    float _4461 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2418 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2388 / ((_2392 * _2392) * 3.141590118408203125));
    float _2428 = (((((_2399 * _2316) + _700) * cbLight._m0[_2353].x) * _2418) * _2041) + ((((cbLight._m0[_2265].x * _2007) * ((_2315 * _2316) + _700)) * _2339) * _2054);
    float _2429 = (((((_2399 * _2318) + _702) * cbLight._m0[_2353].y) * _2418) * _2041) + ((((cbLight._m0[_2265].y * _2009) * ((_2315 * _2318) + _702)) * _2339) * _2054);
    float _2430 = (((((_2399 * _2319) + _703) * cbLight._m0[_2353].z) * _2418) * _2041) + ((((cbLight._m0[_2265].z * _2011) * ((_2315 * _2319) + _703)) * _2339) * _2054);
    float _2486;
    float _2488;
    float _2490;
    if (_2094)
    {
        _2486 = _2428;
        _2488 = _2429;
        _2490 = _2430;
    }
    else
    {
        uint _2492 = _2018 + 2u;
        uint _2496 = _2018 + 10u;
        float _2510 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2492].w)) * _551) * 0.949999988079071044921875);
        float _2511 = _2510 * _2510;
        float _2512 = cbLight._m0[_2492].x + _629;
        float _2513 = cbLight._m0[_2492].y + _630;
        float _2514 = cbLight._m0[_2492].z + _631;
        float _2518 = inversesqrt(dot(vec3(_2512, _2513, _2514), vec3(_2512, _2513, _2514)));
        float _2519 = _2518 * _2512;
        float _2520 = _2518 * _2513;
        float _2521 = _2518 * _2514;
        float _2522 = dot(vec3(_548, _549, _550), vec3(cbLight._m0[_2492].xyz));
        float _4472 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2525 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _2526 = dot(vec3(_548, _549, _550), vec3(_2519, _2520, _2521));
        float _4483 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2529 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _2530 = dot(vec3(cbLight._m0[_2492].xyz), vec3(_2519, _2520, _2521));
        float _4494 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2534 = _2511 * _2511;
        float _2538 = ((_2529 * _2529) * (_2534 + (-1.0))) + 1.0;
        float _2545 = exp2(log2(1.0 - (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0)))) * 5.0);
        float _2552 = 1.0 - _2511;
        float _2562 = (0.5 / (((_2294 * ((_2525 * _2552) + _2511)) + 9.9999999392252902907785028219223e-09) + (((_2294 * _2552) + _2511) * _2525))) * _2525;
        float _4505 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2564 = (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2534 / ((_2538 * _2538) * 3.141590118408203125));
        float _2565 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2486 = (((((_2545 * _2316) + _700) * cbLight._m0[_2496].x) * _2564) * _2565) + _2428;
        _2488 = (((((_2545 * _2318) + _702) * cbLight._m0[_2496].y) * _2564) * _2565) + _2429;
        _2490 = (((((_2545 * _2319) + _703) * cbLight._m0[_2496].z) * _2564) * _2565) + _2430;
    }
    float _2596;
    float _2598;
    float _2600;
    if (_2203)
    {
        _2596 = _2486;
        _2598 = _2488;
        _2600 = _2490;
    }
    else
    {
        uint _2607 = _2018 + 3u;
        uint _2611 = _2018 + 11u;
        float _2625 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2607].w)) * _551) * 0.949999988079071044921875);
        float _2626 = _2625 * _2625;
        float _2627 = cbLight._m0[_2607].x + _629;
        float _2628 = cbLight._m0[_2607].y + _630;
        float _2629 = cbLight._m0[_2607].z + _631;
        float _2633 = inversesqrt(dot(vec3(_2627, _2628, _2629), vec3(_2627, _2628, _2629)));
        float _2634 = _2633 * _2627;
        float _2635 = _2633 * _2628;
        float _2636 = _2633 * _2629;
        float _2637 = dot(vec3(_548, _549, _550), vec3(cbLight._m0[_2607].xyz));
        float _4521 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2640 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _2641 = dot(vec3(_548, _549, _550), vec3(_2634, _2635, _2636));
        float _4532 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2644 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _2645 = dot(vec3(cbLight._m0[_2607].xyz), vec3(_2634, _2635, _2636));
        float _4543 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2649 = _2626 * _2626;
        float _2653 = ((_2644 * _2644) * (_2649 + (-1.0))) + 1.0;
        float _2660 = exp2(log2(1.0 - (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0)))) * 5.0);
        float _2667 = 1.0 - _2626;
        float _2677 = (0.5 / (((_2294 * ((_2640 * _2667) + _2626)) + 9.9999999392252902907785028219223e-09) + (((_2294 * _2667) + _2626) * _2640))) * _2640;
        float _4554 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
        float _2679 = (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_2649 / ((_2653 * _2653) * 3.141590118408203125));
        float _2680 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
        _2596 = (((((_2660 * _2316) + _700) * cbLight._m0[_2611].x) * _2679) * _2680) + _2486;
        _2598 = (((((_2660 * _2318) + _702) * cbLight._m0[_2611].y) * _2679) * _2680) + _2488;
        _2600 = (((((_2660 * _2319) + _703) * cbLight._m0[_2611].z) * _2679) * _2680) + _2490;
    }
    float _2746;
    float _2748;
    float _2750;
    float _2752;
    float _2754;
    float _2756;
    if (_2016.y == 0u)
    {
        uvec4 _2701 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2702 = _2701.x;
        uint _2713 = uint((float(_2701.y) * floor(float(uint(cbSceneParam._m0[85u].y * _638) / _2702))) + floor(float(uint(cbSceneParam._m0[85u].x * _637) / _2702)));
        float _2723 = (log2(_1794 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2724 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
        uint _2727 = uint(isnan(14.0) ? _2724 : (isnan(_2724) ? 14.0 : min(_2724, 14.0)));
        uvec4 _2732 = texelFetch(g_lightClusterGridBuffer, int(((_2727 << 2u) + (_2713 << 6u)) >> 2u));
        uint _2733 = _2732.x;
        uint _2734 = _2701.z;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        if (((((1u << ((_2734 >> 4u) & 15u)) + 4294967295u) & _2733) == 0u) || ((_2734 & 240u) == 0u))
        {
            _2858 = 0.0;
            _2860 = 0.0;
            _2862 = 0.0;
            _2864 = 0.0;
            _2866 = 0.0;
            _2868 = 0.0;
        }
        else
        {
            float _2859;
            float _2861;
            float _2863;
            float _2865;
            float _2867;
            float _2869;
            float _3011 = 0.0;
            float _3012 = 0.0;
            float _3013 = 0.0;
            float _3014 = 0.0;
            float _3015 = 0.0;
            float _3016 = 0.0;
            uint _3017 = 0u;
            uint _3026;
            bool _3027;
            for (;;)
            {
                _3026 = texelFetch(g_lightClassification, int((((_2727 << 5u) + (_2713 << 9u)) + (_3017 << 2u)) >> 2u)).x;
                _3027 = _3026 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3027)
                {
                    frontier_phi_66_pred = _3016;
                    frontier_phi_66_pred_1 = _3015;
                    frontier_phi_66_pred_2 = _3014;
                    frontier_phi_66_pred_3 = _3013;
                    frontier_phi_66_pred_4 = _3012;
                    frontier_phi_66_pred_5 = _3011;
                }
                else
                {
                    float _3135;
                    float _3136;
                    float _3137;
                    float _3138;
                    float _3139;
                    float _3140;
                    uint _3141;
                    _3135 = _3011;
                    _3136 = _3012;
                    _3137 = _3013;
                    _3138 = _3014;
                    _3139 = _3015;
                    _3140 = _3016;
                    _3141 = _3026;
                    float _3067;
                    float _3068;
                    float _3069;
                    float _3070;
                    float _3071;
                    float _3072;
                    for (;;)
                    {
                        uint _3145 = uint(findLSB(_3141)) + (_3017 << 5u);
                        uint _3142 = (_3141 + 4294967295u) & _3141;
                        uint _3147 = _3145 * 48u;
                        vec4 _3161 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3147)).x, texelFetch(g_PointLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3147 + 3u)).x));
                        uint _3167 = (_3145 * 48u) + 4u;
                        vec4 _3180 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3167)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 3u)).x));
                        uint _3186 = (_3145 * 48u) + 8u;
                        vec3 _3197 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3186)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 2u)).x));
                        float _3201 = _3161.x - _1792;
                        float _3202 = _3161.y - _1793;
                        float _3203 = _3161.z - _1794;
                        float _3204 = dot(vec3(_3201, _3202, _3203), vec3(_3201, _3202, _3203));
                        float _3207 = inversesqrt(_3204);
                        float _3208 = _3207 * _3201;
                        float _3209 = _3207 * _3202;
                        float _3210 = _3207 * _3203;
                        float _3211 = dot(vec3(_656, _659, _662), vec3(_3208, _3209, _3210));
                        float _3216 = 1.0 - (_3204 * _3161.w);
                        float _4580 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                        float _3217 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                        float _3218 = sqrt(_3204) * _3180.w;
                        float _3221 = 1.39999997615814208984375 / (_3218 + 1.39999997615814208984375);
                        float _3222 = _3221 * _3221;
                        float _3225 = ((1.0 - _3222) * _3211) + _3222;
                        float _3228 = _3218 * _3218;
                        float _3232 = ((isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0))) * _3217) / ((_3228 * 0.699999988079071044921875) + 1.0);
                        float _3236 = (-0.0) - _1792;
                        float _3237 = (-0.0) - _1793;
                        float _3238 = (-0.0) - _1794;
                        float _3242 = inversesqrt(dot(vec3(_3236, _3237, _3238), vec3(_3236, _3237, _3238)));
                        float _3243 = _3242 * _3236;
                        float _3244 = _3242 * _3237;
                        float _3245 = _3242 * _3238;
                        float _3252 = exp2(log2(1.0 / ((_3228 * 3.5) + 5.0)) * 0.25);
                        float _3253 = 1.0 - _731;
                        float _3260 = sqrt(1.0 - ((1.0 - (_3253 * _3253)) * (1.0 - (_3252 * _3252))));
                        float _3261 = _3260 * _3260;
                        float _3262 = _3261 * _3261;
                        float _3263 = _3243 + _3208;
                        float _3264 = _3244 + _3209;
                        float _3265 = _3245 + _3210;
                        float _3269 = inversesqrt(dot(vec3(_3263, _3264, _3265), vec3(_3263, _3264, _3265)));
                        float _3273 = dot(vec3(_656, _659, _662), vec3(_3243, _3244, _3245));
                        float _4596 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                        float _3276 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                        float _3277 = dot(vec3(_656, _659, _662), vec3(_3269 * _3263, _3269 * _3264, _3269 * _3265));
                        float _4607 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                        float _3280 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                        float _3284 = ((_3280 * _3280) * (_3262 + (-1.0))) + 1.0;
                        float _3285 = _3221 * _3261;
                        float _3286 = _3285 * _3285;
                        float _3289 = ((1.0 - _3286) * _3211) + _3286;
                        float _4618 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                        float _3290 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                        float _3291 = 1.0 - _3261;
                        float _3301 = (0.5 / (((_3290 * ((_3276 * _3291) + _3261)) + 9.9999999392252902907785028219223e-09) + (((_3290 * _3291) + _3261) * _3276))) * _3290;
                        float _4629 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                        float _3312 = (((_3262 * 3.1415927410125732421875) * (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0)))) / ((_3284 * _3284) * ((_3228 * 2.1991131305694580078125) + 3.141590118408203125))) * _3217;
                        _3070 = (_3232 * _3180.x) + _3138;
                        _3071 = (_3232 * _3180.y) + _3139;
                        _3072 = (_3232 * _3180.z) + _3140;
                        _3067 = (_3312 * _3197.x) + _3135;
                        _3068 = (_3312 * _3197.y) + _3136;
                        _3069 = (_3312 * _3197.z) + _3137;
                        if (_3142 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3135 = _3067;
                            _3136 = _3068;
                            _3137 = _3069;
                            _3138 = _3070;
                            _3139 = _3071;
                            _3140 = _3072;
                            _3141 = _3142;
                        }
                    }
                    frontier_phi_66_pred = _3072;
                    frontier_phi_66_pred_1 = _3071;
                    frontier_phi_66_pred_2 = _3070;
                    frontier_phi_66_pred_3 = _3069;
                    frontier_phi_66_pred_4 = _3068;
                    frontier_phi_66_pred_5 = _3067;
                }
                _2869 = frontier_phi_66_pred;
                _2867 = frontier_phi_66_pred_1;
                _2865 = frontier_phi_66_pred_2;
                _2863 = frontier_phi_66_pred_3;
                _2861 = frontier_phi_66_pred_4;
                _2859 = frontier_phi_66_pred_5;
                uint _3018 = _3017 + 1u;
                if (_3018 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3011 = _2859;
                    _3012 = _2861;
                    _3013 = _2863;
                    _3014 = _2865;
                    _3015 = _2867;
                    _3016 = _2869;
                    _3017 = _3018;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2858 = _2859;
            _2860 = _2861;
            _2862 = _2863;
            _2864 = _2865;
            _2866 = _2867;
            _2868 = _2869;
        }
        uvec4 _2872 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2873 = _2872.z;
        uint _2875 = (_2873 >> 8u) & 15u;
        float _2979;
        float _2981;
        float _2983;
        float _2985;
        float _2987;
        float _2989;
        if (((4294967295u << _2875) & _2733) == 0u)
        {
            _2979 = _2858;
            _2981 = _2860;
            _2983 = _2862;
            _2985 = _2864;
            _2987 = _2866;
            _2989 = _2868;
        }
        else
        {
            float _3004 = inversesqrt(dot(vec3(_1792, _1793, _1794), vec3(_1792, _1793, _1794)));
            float _3005 = _3004 * _1792;
            float _3006 = _3004 * _1793;
            float _3007 = _3004 * _1794;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2875 < ((_2873 >> 12u) & 15u))
            {
                float _2980;
                float _2982;
                float _2984;
                float _2986;
                float _2988;
                float _2990;
                float _3118 = _2858;
                float _3119 = _2860;
                float _3120 = _2862;
                float _3121 = _2864;
                float _3122 = _2866;
                float _3123 = _2868;
                uint _3124 = _2875;
                uint _3133;
                bool _3134;
                for (;;)
                {
                    _3133 = texelFetch(g_lightClassification, int((((_2727 << 5u) + (_2713 << 9u)) + (_3124 << 2u)) >> 2u)).x;
                    _3134 = _3133 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3134)
                    {
                        frontier_phi_72_pred = _3123;
                        frontier_phi_72_pred_1 = _3122;
                        frontier_phi_72_pred_2 = _3121;
                        frontier_phi_72_pred_3 = _3120;
                        frontier_phi_72_pred_4 = _3119;
                        frontier_phi_72_pred_5 = _3118;
                    }
                    else
                    {
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3615;
                        float _3616;
                        float _3617;
                        float _3330 = _3118;
                        float _3331 = _3119;
                        float _3332 = _3120;
                        float _3333 = _3121;
                        float _3334 = _3122;
                        float _3335 = _3123;
                        uint _3336 = _3133;
                        uint _3337;
                        vec4 _3362;
                        float _3363;
                        vec4 _3378;
                        vec3 _3390;
                        vec4 _3405;
                        vec4 _3421;
                        float _3468;
                        bool _3469;
                        for (;;)
                        {
                            uint _3347 = ((_3124 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3336));
                            _3337 = (_3336 + 4294967295u) & _3336;
                            uint _3349 = _3347 * 40u;
                            _3362 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 3u)).x));
                            _3363 = _3362.w;
                            uint _3365 = (_3347 * 40u) + 4u;
                            _3378 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 3u)).x));
                            uint _3380 = (_3347 * 40u) + 8u;
                            _3390 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x));
                            uint _3392 = (_3347 * 40u) + 16u;
                            _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            uint _3408 = (_3347 * 40u) + 20u;
                            _3421 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 3u)).x));
                            uint _3424 = (_3347 * 40u) + 24u;
                            vec4 _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            uint _3443 = (_3347 * 40u) + 28u;
                            vec4 _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            _3468 = fma(_1794, _3456.z, fma(_1793, _3456.y, _3456.x * _1792)) + _3456.w;
                            _3469 = !((fma(_1794, _3437.z, fma(_1793, _3437.y, _3437.x * _1792)) + _3437.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3469)
                            {
                                float _3496 = _3362.x - _1792;
                                float _3497 = _3362.y - _1793;
                                float _3498 = _3362.z - _1794;
                                float _3499 = dot(vec3(_3496, _3497, _3498), vec3(_3496, _3497, _3498));
                                float _3502 = inversesqrt(_3499);
                                float _3503 = _3502 * _3496;
                                float _3504 = _3502 * _3497;
                                float _3505 = _3502 * _3498;
                                float _3509 = 1.0 - (_3499 / (_3363 * _3363));
                                float _4640 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                                float _3510 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                                float _3514 = sqrt(_3499) * _3378.w;
                                float _3516 = 1.39999997615814208984375 / (_3514 + 1.39999997615814208984375);
                                float _3517 = _3516 * _3516;
                                float _3520 = ((1.0 - _3517) * dot(vec3(_3503, _3504, _3505), vec3(_656, _659, _662))) + _3517;
                                float _3523 = _3514 * _3514;
                                float _3527 = (fma(_1794, _3405.z, fma(_1793, _3405.y, _3405.x * _1792)) + _3405.w) / _3468;
                                float _3528 = (fma(_1794, _3421.z, fma(_1793, _3421.y, _3421.x * _1792)) + _3421.w) / _3468;
                                float _3532 = 1.0 - dot(vec2(_3527, _3528), vec2(_3527, _3528));
                                float _4656 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3533 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                                float _3534 = _3533 * (((isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0))) * _3510) / ((_3523 * 0.699999988079071044921875) + 1.0));
                                float _3546 = exp2(log2(1.0 / ((_3523 * 3.5) + 5.0)) * 0.25);
                                float _3547 = 1.0 - _731;
                                float _3554 = sqrt(1.0 - ((1.0 - (_3547 * _3547)) * (1.0 - (_3546 * _3546))));
                                float _3555 = _3554 * _3554;
                                float _3556 = _3555 * _3555;
                                float _3557 = _3503 - _3005;
                                float _3558 = _3504 - _3006;
                                float _3559 = _3505 - _3007;
                                float _3563 = inversesqrt(dot(vec3(_3557, _3558, _3559), vec3(_3557, _3558, _3559)));
                                float _3567 = dot(vec3(_656, _659, _662), vec3((-0.0) - _3005, (-0.0) - _3006, (-0.0) - _3007));
                                float _4667 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                                float _3570 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                                float _3571 = dot(vec3(_656, _659, _662), vec3(_3563 * _3557, _3563 * _3558, _3563 * _3559));
                                float _4678 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                                float _3574 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                                float _3578 = ((_3574 * _3574) * (_3556 + (-1.0))) + 1.0;
                                float _3579 = _3516 * _3555;
                                float _3580 = _3579 * _3579;
                                float _3586 = ((1.0 - _3580) * dot(vec3(_656, _659, _662), vec3(_3503, _3504, _3505))) + _3580;
                                float _4689 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3587 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                                float _3588 = 1.0 - _3555;
                                float _3598 = (0.5 / (((_3587 * ((_3570 * _3588) + _3555)) + 9.9999999392252902907785028219223e-09) + (((_3587 * _3588) + _3555) * _3570))) * _3587;
                                float _4700 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3608 = (_3533 * _3510) * (((_3556 * 3.1415927410125732421875) * (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0)))) / ((_3578 * _3578) * ((_3523 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3534 * _3378.y;
                                frontier_phi_78_pred_1 = _3534 * _3378.x;
                                frontier_phi_78_pred_2 = _3608 * _3390.z;
                                frontier_phi_78_pred_3 = _3608 * _3390.y;
                                frontier_phi_78_pred_4 = _3608 * _3390.x;
                                frontier_phi_78_pred_5 = _3534 * _3378.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3616 = frontier_phi_78_pred;
                            _3615 = frontier_phi_78_pred_1;
                            _3614 = frontier_phi_78_pred_2;
                            _3613 = frontier_phi_78_pred_3;
                            _3612 = frontier_phi_78_pred_4;
                            _3617 = frontier_phi_78_pred_5;
                            _3320 = _3615 + _3333;
                            _3321 = _3616 + _3334;
                            _3322 = _3617 + _3335;
                            _3317 = _3612 + _3330;
                            _3318 = _3613 + _3331;
                            _3319 = _3614 + _3332;
                            if (_3337 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3330 = _3317;
                                _3331 = _3318;
                                _3332 = _3319;
                                _3333 = _3320;
                                _3334 = _3321;
                                _3335 = _3322;
                                _3336 = _3337;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3322;
                        frontier_phi_72_pred_1 = _3321;
                        frontier_phi_72_pred_2 = _3320;
                        frontier_phi_72_pred_3 = _3319;
                        frontier_phi_72_pred_4 = _3318;
                        frontier_phi_72_pred_5 = _3317;
                    }
                    _2990 = frontier_phi_72_pred;
                    _2988 = frontier_phi_72_pred_1;
                    _2986 = frontier_phi_72_pred_2;
                    _2984 = frontier_phi_72_pred_3;
                    _2982 = frontier_phi_72_pred_4;
                    _2980 = frontier_phi_72_pred_5;
                    uint _3125 = _3124 + 1u;
                    if (_3125 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3118 = _2980;
                        _3119 = _2982;
                        _3120 = _2984;
                        _3121 = _2986;
                        _3122 = _2988;
                        _3123 = _2990;
                        _3124 = _3125;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2990;
                frontier_phi_60_61_ladder_1 = _2988;
                frontier_phi_60_61_ladder_2 = _2984;
                frontier_phi_60_61_ladder_3 = _2982;
                frontier_phi_60_61_ladder_4 = _2980;
                frontier_phi_60_61_ladder_5 = _2986;
            }
            else
            {
                frontier_phi_60_61_ladder = _2868;
                frontier_phi_60_61_ladder_1 = _2866;
                frontier_phi_60_61_ladder_2 = _2862;
                frontier_phi_60_61_ladder_3 = _2860;
                frontier_phi_60_61_ladder_4 = _2858;
                frontier_phi_60_61_ladder_5 = _2864;
            }
            _2979 = frontier_phi_60_61_ladder_4;
            _2981 = frontier_phi_60_61_ladder_3;
            _2983 = frontier_phi_60_61_ladder_2;
            _2985 = frontier_phi_60_61_ladder_5;
            _2987 = frontier_phi_60_61_ladder_1;
            _2989 = frontier_phi_60_61_ladder;
        }
        float _2994 = isnan(1.0) ? _715 : (isnan(_715) ? 1.0 : min(_715, 1.0));
        _2746 = (_2994 * _2985) + _2258;
        _2748 = (_2994 * _2987) + _2260;
        _2750 = (_2994 * _2989) + _2262;
        _2752 = ((_2979 * _700) * _2994) + _2596;
        _2754 = ((_2981 * _702) * _2994) + _2598;
        _2756 = ((_2983 * _703) * _2994) + _2600;
    }
    else
    {
        _2746 = _2258;
        _2748 = _2260;
        _2750 = _2262;
        _2752 = _2596;
        _2754 = _2598;
        _2756 = _2600;
    }
    uint _2762 = _676 + uint(cbMatDynParam._m0[0u].w);
    float _2768 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].y;
    float _2774 = (((((_2768 * cbMtdParam._m0[10u].x) * _429.x) * _452) * _527) * (((1.0 - _506) * cbMtdParam._m0[16u].y) + _506)) * cbInstanceData._m0[_2762].x;
    float _2780 = (((((_2768 * cbMtdParam._m0[10u].y) * _429.y) * _452) * _527) * (((1.0 - _508) * cbMtdParam._m0[16u].y) + _508)) * cbInstanceData._m0[_2762].y;
    float _2786 = (((((_2768 * cbMtdParam._m0[10u].z) * _429.z) * _452) * _527) * (((1.0 - _510) * cbMtdParam._m0[16u].y) + _510)) * cbInstanceData._m0[_2762].z;
    float _4716 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _4727 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _4738 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _2803 = (((isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (_2746 + ((isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))) * _715))) + ((_2752 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _1524)) * cbPerFrame._m0[3u].x)) + _2774;
    float _2805 = (_2780 + ((_2754 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _1524)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * (_2748 + ((isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0))) * _715)));
    float _2807 = (_2786 + ((_2756 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1524)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2750 + ((isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))) * _715)));
    float _4764 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2820 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
    uint _2821 = _675 + 6u;
    float _2829 = _637 / cbSceneParam._m0[86u].x;
    float _2830 = _638 / cbSceneParam._m0[86u].y;
    vec4 _2844 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2829, _2830, (log2((isnan(cbSceneParam._m0[77u].w) ? _571 : (isnan(_571) ? cbSceneParam._m0[77u].w : min(_571, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2846 = _2844.x;
    float _2847 = _2844.y;
    float _2848 = _2844.z;
    float _2849 = _2844.w;
    float _2920;
    float _2922;
    float _2924;
    float _2926;
    if (_571 > cbSceneParam._m0[78u].w)
    {
        float _2883 = isnan(_571) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _571 : min(cbSceneParam._m0[80u].w, _571));
        float _2884 = _2883 / _571;
        float _2895 = _2884 * _622;
        float _2896 = _623 * _2884;
        float _2897 = (-0.0) - _2896;
        float _2898 = _2884 * _624;
        float _2900 = (cbSceneParam._m0[77u].w * _2897) / _2883;
        float _2901 = _2900 + cbSceneParam._m0[79u].w;
        float _2902 = cbSceneParam._m0[79u].w - _2896;
        float _2908 = sqrt(((_2895 * _2895) + (_2896 * _2896)) + (_2898 * _2898));
        float _2911 = (1.0 - (cbSceneParam._m0[77u].w / _2883)) * _2908;
        float _2916 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2918 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3080;
        if (abs((_2897 - _2900) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3080 = ((((_2901 > 0.0) ? exp2(_2916 * _2901) : (2.0 - exp2(_2918 * _2901))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2911;
        }
        else
        {
            float _3040 = 1.0 / cbSceneParam._m0[80u].x;
            float _3041 = isnan(_2902) ? _2901 : (isnan(_2901) ? _2902 : max(_2901, _2902));
            float _3042 = isnan(_2902) ? _2901 : (isnan(_2901) ? _2902 : min(_2901, _2902));
            float _3051 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : min(_3041, 0.0));
            float _3052 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : min(_3042, 0.0));
            _3080 = ((abs(_2908 / _2897) * cbSceneParam._m0[80u].y) * ((((_3051 - _3052) * 2.0) - ((exp2(_2916 * (isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0)))) - exp2(_2916 * (isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0))))) * _3040)) - ((exp2(_2918 * _3051) - exp2(_2918 * _3052)) * _3040))) + (_2911 * cbSceneParam._m0[80u].z);
        }
        vec4 _3082 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2829, _2830, 1.0), 0.0);
        float _3091 = exp2((_3080 * (-1.44269502162933349609375)) * (1.0 - _3082.w));
        float _3092 = log2(_3091);
        float _3108 = log2(_2849);
        _2920 = (exp2(_3108 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3092 * cbSceneParam._m0[78u].x)) * _3082.x) / cbSceneParam._m0[78u].x)) + _2846;
        _2922 = (exp2(_3108 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3092 * cbSceneParam._m0[78u].y)) * _3082.y) / cbSceneParam._m0[78u].y)) + _2847;
        _2924 = (exp2(_3108 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3092 * cbSceneParam._m0[78u].z)) * _3082.z) / cbSceneParam._m0[78u].z)) + _2848;
        _2926 = _3091 * _2849;
    }
    else
    {
        _2920 = _2846;
        _2922 = _2847;
        _2924 = _2848;
        _2926 = _2849;
    }
    float _2938 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2939 = _2938 == 3.0;
    float _2940 = log2(_2926);
    float _2944 = exp2(_2940 * cbSceneParam._m0[78u].x);
    float _2945 = exp2(_2940 * cbSceneParam._m0[78u].y);
    float _2946 = exp2(_2940 * cbSceneParam._m0[78u].z);
    float _2947 = _2944 * (isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0)));
    float _2948 = _2945 * (isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0)));
    float _2949 = _2946 * (isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0)));
    float _2958 = (_2938 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2958 * (_2939 ? _2947 : (_2947 + (cbSceneParam._m0[72u].w * _2920)));
    SV_Target.y = _2958 * (_2939 ? _2948 : (_2948 + (cbSceneParam._m0[72u].w * _2922)));
    SV_Target.z = _2958 * (_2939 ? _2949 : (_2949 + (cbSceneParam._m0[72u].w * _2924)));
    SV_Target.w = cbInstanceData._m0[_2821].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2774) * _2820) * _2944) * _2958;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2780) * _2820) * _2945) * _2958;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2786) * _2820) * _2946) * _2958;
    SV_Target_1.w = cbInstanceData._m0[_2821].w;
}


