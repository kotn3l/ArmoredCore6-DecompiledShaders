#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_21;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1133;
float _3853;
float _3854;
float _3855;
float _3856;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _253 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _259 = _253.x * cbMtdParam._m0[9u].x;
    float _260 = _253.y * cbMtdParam._m0[9u].y;
    float _261 = _253.z * cbMtdParam._m0[9u].z;
    vec4 _284 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _304 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _307 = _304.x + 0.00999999977648258209228515625;
    float _315 = (TEXCOORD_8 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_8)) * _307)) * (cbMtdParam._m0[15u].z + 1.0);
    float _3865 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _316 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _323 = (_316 * ((_284.x * cbMtdParam._m0[12u].x) - _259)) + _259;
    float _324 = (_316 * ((_284.y * cbMtdParam._m0[12u].y) - _260)) + _260;
    float _325 = (_316 * ((_284.z * cbMtdParam._m0[12u].z) - _261)) + _261;
    vec4 _338 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _340 = _338.x;
    float _342 = _340 - (_340 * TEXCOORD_8);
    vec4 _354 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    vec4 _377 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _381 = _377.z;
    float _384 = (_377.x * 2.0) + (-1.0);
    float _385 = (_377.y * 2.0) + (-1.0);
    float _386 = dot(vec2(_384, _385), vec2(_384, _385));
    float _3876 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _391 = sqrt(1.0 - (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))));
    float _399 = (((_354.z - _381) * TEXCOORD_8) * cbMtdParam._m0[16u].x) + _381;
    vec4 _433 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _447 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3887 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _448 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _456 = (((_448 * _448) * (3.0 - (_448 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _465 = cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x;
    float _473 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3898 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _474 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _478 = (_474 * _474) * (3.0 - (_474 * 2.0));
    float _479 = _478 * cbMtdParam._m0[16u].w;
    float _480 = _478 * cbMtdParam._m0[17u].x;
    float _481 = sin(_465);
    float _482 = cos(_465);
    float _483 = TEXCOORD.z - _479;
    float _484 = TEXCOORD.w - _480;
    vec4 _504 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_479 + fma(_484, (-0.0) - _481, _483 * _482))) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (fma(_484, _482, _483 * _481) + _480)) + cbTextureTilingScale._m0[0u].w));
    float _510 = (cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].w) * _504.x;
    float _512 = (cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].w) * _504.y;
    float _514 = (cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].w) * _504.z;
    float _530 = (TEXCOORD_5.x - ((_307 * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[16u].z)) * (cbMtdParam._m0[13u].x + 1.0);
    float _3909 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _531 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _537 = ((((_354.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[15u].x) + _384;
    float _538 = ((((_354.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[15u].x) + _385;
    float _541 = fma(_391, _224 * NORMAL.x, fma(_538, _231 * TANGENT.x, (_217 * _209) * _537));
    float _544 = fma(_391, _224 * NORMAL.y, fma(_538, _231 * TANGENT.y, (_217 * _210) * _537));
    float _547 = fma(_391, _224 * NORMAL.z, fma(_538, _231 * TANGENT.z, (_217 * _211) * _537));
    float _551 = inversesqrt(dot(vec3(_541, _544, _547), vec3(_541, _544, _547)));
    float _552 = _551 * _541;
    float _553 = _551 * _544;
    float _554 = _551 * _547;
    float _3920 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _555 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _3931 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _3942 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _3953 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _3964 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _559 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _575 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _616 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _626 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _616);
    float _627 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _616);
    float _628 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _616);
    float _632 = inversesqrt(dot(vec3(_626, _627, _628), vec3(_626, _627, _628)));
    float _633 = _626 * _632;
    float _634 = _627 * _632;
    float _635 = _628 * _632;
    vec4 _640 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _642 = _640.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _813 = sqrt(((_626 * _626) + (_627 * _627)) + (_628 * _628));
        float _819 = (cbMatDynParam._m0[5u].x * _813) + cbMatDynParam._m0[5u].y;
        float _3975 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _820 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _824 = (cbMatDynParam._m0[5u].z * _813) + cbMatDynParam._m0[5u].w;
        float _3986 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) - _820)) + _820) < ((_642 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _653 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _654 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _672 = fma(_554, cbSceneParam._m0[5u].z, fma(_553, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _552));
    float _675 = fma(_554, cbSceneParam._m0[6u].z, fma(_553, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _552));
    float _678 = fma(_554, cbSceneParam._m0[7u].z, fma(_553, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _552));
    uint _691 = uint(roundEven(NORMAL.w)) * 13u;
    uint _692 = _691 + 9u;
    uint _693 = _692 + uint(cbMatDynParam._m0[0u].w);
    float _699 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) * cbInstanceData._m0[_693].x;
    float _700 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0)))) * cbInstanceData._m0[_693].y;
    float _701 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0)))) * cbInstanceData._m0[_693].z;
    float _3997 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _702 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _4008 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _703 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _4019 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _704 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _705 = 1.0 - _559;
    float _706 = _702 * _705;
    float _707 = _703 * _705;
    float _708 = _704 * _705;
    float _713 = (_702 + (-0.039999999105930328369140625)) * _559;
    float _714 = (_703 + (-0.039999999105930328369140625)) * _559;
    float _715 = (_704 + (-0.039999999105930328369140625)) * _559;
    float _716 = _713 + 0.039999999105930328369140625;
    float _718 = _714 + 0.039999999105930328369140625;
    float _719 = _715 + 0.039999999105930328369140625;
    vec4 _728 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _653, cbSceneParam._m0[86u].y * _654));
    float _731 = _728.x * TEXCOORD_5.w;
    float _732 = dot(vec3(_552, _553, _554), vec3(_633, _634, _635));
    float _735 = _732 * 2.0;
    float _739 = (_735 * _552) - _633;
    float _740 = (_735 * _553) - _634;
    float _741 = (_735 * _554) - _635;
    float _745 = abs(dot(vec3(_633, _634, _635), vec3(_552, _553, _554)));
    float _4030 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _747 = sqrt(_555);
    float _759 = exp2((_747 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_747 * 3.0));
    float _765 = (1.0 - _759) * ((_747 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _766 = _759 * _747;
    float _794 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _798 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _802 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1132;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _857 = fma(_802, cbModelParam._m0[26u].z, fma(_798, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _794));
        float _861 = fma(_802, cbModelParam._m0[27u].z, fma(_798, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _794));
        float _865 = fma(_802, cbModelParam._m0[28u].z, fma(_798, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _794));
        float _890 = _794 + _552;
        float _891 = _798 + _553;
        float _892 = _802 + _554;
        float _902 = fma(_892, cbModelParam._m0[26u].z, fma(_891, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _890)) - _857;
        float _903 = fma(_892, cbModelParam._m0[27u].z, fma(_891, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _890)) - _861;
        float _904 = fma(_892, cbModelParam._m0[28u].z, fma(_891, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _890)) - _865;
        float _908 = inversesqrt(dot(vec3(_902, _903, _904), vec3(_902, _903, _904)));
        float _921 = ((_908 * _902) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_857 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _922 = ((_908 * _903) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_861 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _923 = ((_908 * _904) / cbModelParam._m0[34u].z) + ((((((_865 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        float _960 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _961 = _960 * (_926.x + (-0.5));
        float _962 = _960 * (_926.y + (-0.5));
        float _963 = _960 * (_926.z + (-0.5));
        float _970 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_933.x + (-0.5));
        float _972 = _970 * (_933.y + (-0.5));
        float _973 = _970 * (_933.z + (-0.5));
        float _980 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _981 = _980 * (_940.x + (-0.5));
        float _982 = _980 * (_940.y + (-0.5));
        float _983 = _980 * (_940.z + (-0.5));
        float _990 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_947.x + (-0.5));
        float _992 = _990 * (_947.y + (-0.5));
        float _993 = _990 * (_947.z + (-0.5));
        float _994 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _995 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _996 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _997 = _961 * 0.5;
        float _998 = _971 * 0.5;
        float _999 = _981 * 0.5;
        float _1000 = dot(vec3(_997, _998, _999), vec3(_997, _998, _999));
        float _1005 = (_1000 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1000);
        float _1014 = (dot(vec3(_552, _553, _554), vec3(_1005 * _997, _1005 * _998, _1005 * _999)) + 1.0) * 0.5;
        float _4056 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1024 = sqrt(((_998 * _998) + (_997 * _997)) + (_999 * _999)) / (_994 + 9.9999997473787516355514526367188e-06);
        float _4067 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1026 = _1025 * 2.0;
        float _1030 = (1.0 - _1025) / (_1025 + 1.0);
        float _4078 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1040 = ((((1.0 - _1031) * (_1026 + 2.0)) * exp2(log2(isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_1026 + 1.0))) + _1031) * _994;
        float _1041 = _962 * 0.5;
        float _1042 = _972 * 0.5;
        float _1043 = _982 * 0.5;
        float _1044 = dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043));
        float _1049 = (_1044 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1044);
        float _1057 = (dot(vec3(_552, _553, _554), vec3(_1049 * _1041, _1049 * _1042, _1049 * _1043)) + 1.0) * 0.5;
        float _4089 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1066 = sqrt(((_1042 * _1042) + (_1041 * _1041)) + (_1043 * _1043)) / (_995 + 9.9999997473787516355514526367188e-06);
        float _4100 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _4111 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_1068 + 1.0))) + _1073) * _995;
        float _1083 = _963 * 0.5;
        float _1084 = _973 * 0.5;
        float _1085 = _983 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_552, _553, _554), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _4122 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_996 + 9.9999997473787516355514526367188e-06);
        float _4133 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _4144 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_1110 + 1.0))) + _1115) * _996;
        _1132 = _963;
        _1134 = _962;
        _1135 = _961;
        _1136 = _973;
        _1137 = _972;
        _1138 = _971;
        _1139 = _983;
        _1140 = _982;
        _1141 = _981;
        _1142 = _996;
        _1143 = _995;
        _1144 = _994;
        _1145 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0)));
        _1146 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
        _1147 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
    }
    else
    {
        _1132 = _1133;
        _1134 = _1133;
        _1135 = _1133;
        _1136 = _1133;
        _1137 = _1133;
        _1138 = _1133;
        _1139 = _1133;
        _1140 = _1133;
        _1141 = _1133;
        _1142 = _1133;
        _1143 = _1133;
        _1144 = _1133;
        _1145 = 0.0;
        _1146 = 0.0;
        _1147 = 0.0;
    }
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1176 = fma(_802, cbModelParam._m0[30u].z, fma(_798, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _794));
        float _1180 = fma(_802, cbModelParam._m0[31u].z, fma(_798, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _794));
        float _1184 = fma(_802, cbModelParam._m0[32u].z, fma(_798, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _794));
        float _1207 = _794 + _552;
        float _1208 = _798 + _553;
        float _1209 = _802 + _554;
        float _1219 = fma(_1209, cbModelParam._m0[30u].z, fma(_1208, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1207)) - _1176;
        float _1220 = fma(_1209, cbModelParam._m0[31u].z, fma(_1208, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1207)) - _1180;
        float _1221 = fma(_1209, cbModelParam._m0[32u].z, fma(_1208, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1207)) - _1184;
        float _1225 = inversesqrt(dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221)));
        float _1238 = ((_1225 * _1219) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1176 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1239 = ((_1225 * _1220) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1180 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1240 = ((_1225 * _1221) / cbModelParam._m0[35u].z) + ((((((_1184 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        float _1275 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1242.x + (-0.5));
        float _1277 = _1275 * (_1242.y + (-0.5));
        float _1278 = _1275 * (_1242.z + (-0.5));
        float _1285 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1249.x + (-0.5));
        float _1287 = _1285 * (_1249.y + (-0.5));
        float _1288 = _1285 * (_1249.z + (-0.5));
        float _1295 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1256.x + (-0.5));
        float _1297 = _1295 * (_1256.y + (-0.5));
        float _1298 = _1295 * (_1256.z + (-0.5));
        float _1305 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1263.x + (-0.5));
        float _1307 = _1305 * (_1263.y + (-0.5));
        float _1308 = _1305 * (_1263.z + (-0.5));
        float _1309 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1310 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1311 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1312 = _1276 * 0.5;
        float _1313 = _1286 * 0.5;
        float _1314 = _1296 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1328 = (dot(vec3(_552, _553, _554), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _4185 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1337 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1309 + 9.9999997473787516355514526367188e-06);
        float _4196 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _4207 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_1339 + 1.0))) + _1344) * _1309;
        float _1354 = _1277 * 0.5;
        float _1355 = _1287 * 0.5;
        float _1356 = _1297 * 0.5;
        float _1357 = dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356));
        float _1362 = (_1357 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1357);
        float _1370 = (dot(vec3(_552, _553, _554), vec3(_1362 * _1354, _1362 * _1355, _1362 * _1356)) + 1.0) * 0.5;
        float _4218 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1379 = sqrt(((_1355 * _1355) + (_1354 * _1354)) + (_1356 * _1356)) / (_1310 + 9.9999997473787516355514526367188e-06);
        float _4229 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1381 = _1380 * 2.0;
        float _1385 = (1.0 - _1380) / (_1380 + 1.0);
        float _4240 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1395 = ((((1.0 - _1386) * (_1381 + 2.0)) * exp2(log2(isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_1381 + 1.0))) + _1386) * _1310;
        float _1396 = _1278 * 0.5;
        float _1397 = _1288 * 0.5;
        float _1398 = _1298 * 0.5;
        float _1399 = dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398));
        float _1404 = (_1399 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1399);
        float _1412 = (dot(vec3(_552, _553, _554), vec3(_1404 * _1396, _1404 * _1397, _1404 * _1398)) + 1.0) * 0.5;
        float _4251 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1421 = sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398)) / (_1311 + 9.9999997473787516355514526367188e-06);
        float _4262 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1423 = _1422 * 2.0;
        float _1427 = (1.0 - _1422) / (_1422 + 1.0);
        float _4273 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1437 = ((((1.0 - _1428) * (_1423 + 2.0)) * exp2(log2(isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_1423 + 1.0))) + _1428) * _1311;
        _1445 = _1278;
        _1446 = _1277;
        _1447 = _1276;
        _1448 = _1288;
        _1449 = _1287;
        _1450 = _1286;
        _1451 = _1298;
        _1452 = _1297;
        _1453 = _1296;
        _1454 = _1311;
        _1455 = _1310;
        _1456 = _1309;
        _1457 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
        _1458 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)));
        _1459 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)));
    }
    else
    {
        _1445 = _1133;
        _1446 = _1133;
        _1447 = _1133;
        _1448 = _1133;
        _1449 = _1133;
        _1450 = _1133;
        _1451 = _1133;
        _1452 = _1133;
        _1453 = _1133;
        _1454 = _1133;
        _1455 = _1133;
        _1456 = _1133;
        _1457 = 0.0;
        _1458 = 0.0;
        _1459 = 0.0;
    }
    float _1469 = (cbModelParam._m0[1u].x * (_1457 - _1145)) + _1145;
    float _1470 = (cbModelParam._m0[1u].x * (_1458 - _1146)) + _1146;
    float _1471 = (cbModelParam._m0[1u].x * (_1459 - _1147)) + _1147;
    float _1492 = fma(_1471, cbSceneParam._m0[89u].z, fma(_1470, cbSceneParam._m0[89u].y, _1469 * cbSceneParam._m0[89u].x));
    float _1495 = fma(_1471, cbSceneParam._m0[90u].z, fma(_1470, cbSceneParam._m0[90u].y, _1469 * cbSceneParam._m0[90u].x));
    float _1498 = fma(_1471, cbSceneParam._m0[91u].z, fma(_1470, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1469));
    float _1513 = _739 * 0.5;
    float _1514 = _740 * 0.5;
    float _1515 = _741 * 0.5;
    float _1516 = dot(vec4(_1513, _1514, _1515, 1.0), vec4(_1447, _1450, _1453, _1456));
    float _1519 = dot(vec4(_1513, _1514, _1515, 1.0), vec4(_1446, _1449, _1452, _1455));
    float _1522 = dot(vec4(_1513, _1514, _1515, 1.0), vec4(_1445, _1448, _1451, _1454));
    float _1556;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1529 = dot(vec4(_1513, _1514, _1515, 1.0), vec4(_1132, _1136, _1139, _1142));
        float _1533 = dot(vec4(_1513, _1514, _1515, 1.0), vec4(_1134, _1137, _1140, _1143));
        float _1537 = dot(vec4(_1513, _1514, _1515, 1.0), vec4(_1135, _1138, _1141, _1144));
        float _1544 = dot(vec4(cbModelParam._m0[39u]), vec4(_1513, _1514, _1515, 1.0));
        _1556 = dot(vec3(isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)), isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)), isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1544) ? 0.0 : (isnan(0.0) ? _1544 : max(0.0, _1544))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1556 = 1.0;
    }
    float _1567;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1558 = dot(vec4(cbModelParam._m0[40u]), vec4(_1513, _1514, _1515, 1.0));
        _1567 = dot(vec3(isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)), isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)), isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1558) ? 0.0 : (isnan(0.0) ? _1558 : max(0.0, _1558))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1567 = 1.0;
    }
    float _1571 = (_1567 * cbModelParam._m0[1u].x) + (_1556 * (1.0 - cbModelParam._m0[1u].x));
    float _1581 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _555);
    float _1582 = isnan(_1581) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1581 : min(cbModelParam._m0[25u].z, _1581));
    float _1662;
    float _1664;
    float _1666;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1629 = fma(_802, cbModelParam._m0[13u].z, fma(_798, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _794)) + cbModelParam._m0[13u].w;
        float _1633 = fma(_802, cbModelParam._m0[14u].z, fma(_798, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _794)) + cbModelParam._m0[14u].w;
        float _1637 = fma(_802, cbModelParam._m0[15u].z, fma(_798, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _794)) + cbModelParam._m0[15u].w;
        float _1640 = fma(_741, cbModelParam._m0[13u].z, fma(_740, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _739));
        float _1643 = fma(_741, cbModelParam._m0[14u].z, fma(_740, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _739));
        float _1646 = fma(_741, cbModelParam._m0[15u].z, fma(_740, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _739));
        float _1674;
        if (_1640 > 0.0)
        {
            _1674 = abs((1.0 - _1629) / _1640);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1629 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1674 = frontier_phi_17_15_ladder;
        }
        float _1847;
        if (_1643 > 0.0)
        {
            _1847 = abs((1.0 - _1633) / _1643);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1633 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1847 = frontier_phi_26_22_ladder;
        }
        float _2142;
        if (_1646 > 0.0)
        {
            _2142 = abs((1.0 - _1637) / _1646);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1646 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1637 + 1.0) / _1646);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2142 = frontier_phi_38_33_ladder;
        }
        float _2144 = isnan(_1847) ? _1674 : (isnan(_1674) ? _1847 : min(_1674, _1847));
        float _2145 = isnan(_2142) ? _2144 : (isnan(_2144) ? _2142 : min(_2144, _2142));
        float _2149 = (_2145 * _1640) + _1629;
        float _2150 = (_2145 * _1643) + _1633;
        float _2151 = (_2145 * _1646) + _1637;
        float _2152 = _2145 * 9.9999997473787516355514526367188e-05;
        float _2154 = (-1.0) - _2152;
        float _2156 = _2152 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2151 > _2156) || ((_2151 < _2154) || ((_2150 > _2156) || ((_2150 < _2154) || ((_2149 < _2154) || (_2149 > _2156))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2296 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2151, cbModelParam._m0[9u].z, fma(_2150, cbModelParam._m0[9u].y, _2149 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2151, cbModelParam._m0[10u].z, fma(_2150, cbModelParam._m0[10u].y, _2149 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2151, cbModelParam._m0[11u].z, fma(_2150, cbModelParam._m0[11u].y, _2149 * cbModelParam._m0[11u].x))), _1582);
            frontier_phi_16_38_ladder = _2296.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2296.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2296.x * cbModelParam._m0[1u].y;
        }
        _1662 = frontier_phi_16_38_ladder_2;
        _1664 = frontier_phi_16_38_ladder_1;
        _1666 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1650 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_739, _740, _741), _1582);
        _1662 = _1650.x * cbModelParam._m0[1u].y;
        _1664 = _1650.y * cbModelParam._m0[1u].y;
        _1666 = _1650.z * cbModelParam._m0[1u].y;
    }
    float _1670 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _555);
    float _1671 = isnan(_1670) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1670 : min(cbModelParam._m0[25u].w, _1670));
    float _1762;
    float _1764;
    float _1766;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1726 = fma(_802, cbModelParam._m0[21u].z, fma(_798, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _794)) + cbModelParam._m0[21u].w;
        float _1730 = fma(_802, cbModelParam._m0[22u].z, fma(_798, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _794)) + cbModelParam._m0[22u].w;
        float _1734 = fma(_802, cbModelParam._m0[23u].z, fma(_798, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _794)) + cbModelParam._m0[23u].w;
        float _1737 = fma(_741, cbModelParam._m0[21u].z, fma(_740, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _739));
        float _1740 = fma(_741, cbModelParam._m0[22u].z, fma(_740, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _739));
        float _1743 = fma(_741, cbModelParam._m0[23u].z, fma(_740, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _739));
        float _1852;
        if (_1737 > 0.0)
        {
            _1852 = abs((1.0 - _1726) / _1737);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1726 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1852 = frontier_phi_28_24_ladder;
        }
        float _2169;
        if (_1740 > 0.0)
        {
            _2169 = abs((1.0 - _1730) / _1740);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1730 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2169 = frontier_phi_40_35_ladder;
        }
        float _2507;
        if (_1743 > 0.0)
        {
            _2507 = abs((1.0 - _1734) / _1743);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1734 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2507 = frontier_phi_50_47_ladder;
        }
        float _2509 = isnan(_2169) ? _1852 : (isnan(_1852) ? _2169 : min(_1852, _2169));
        float _2510 = isnan(_2507) ? _2509 : (isnan(_2509) ? _2507 : min(_2509, _2507));
        float _2514 = (_2510 * _1737) + _1726;
        float _2515 = (_2510 * _1740) + _1730;
        float _2516 = (_2510 * _1743) + _1734;
        float _2517 = _2510 * 9.9999997473787516355514526367188e-05;
        float _2518 = (-1.0) - _2517;
        float _2520 = _2517 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2516 > _2520) || ((_2516 < _2518) || ((_2515 > _2520) || ((_2515 < _2518) || ((_2514 < _2518) || (_2514 > _2520))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2638 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2516, cbModelParam._m0[17u].z, fma(_2515, cbModelParam._m0[17u].y, _2514 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2516, cbModelParam._m0[18u].z, fma(_2515, cbModelParam._m0[18u].y, _2514 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2516, cbModelParam._m0[19u].z, fma(_2515, cbModelParam._m0[19u].y, _2514 * cbModelParam._m0[19u].x))), _1671);
            frontier_phi_25_50_ladder = _2638.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2638.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2638.x * cbModelParam._m0[1u].z;
        }
        _1762 = frontier_phi_25_50_ladder_2;
        _1764 = frontier_phi_25_50_ladder_1;
        _1766 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1746 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_739, _740, _741), _1671);
        _1762 = _1746.x * cbModelParam._m0[1u].z;
        _1764 = _1746.y * cbModelParam._m0[1u].z;
        _1766 = _1746.z * cbModelParam._m0[1u].z;
    }
    float _1779 = (((_765 * _716) + _766) * _731) * ((cbModelParam._m0[1u].w * (_1762 - _1662)) + _1662);
    float _1781 = (((_765 * _718) + _766) * _731) * ((cbModelParam._m0[1u].w * (_1764 - _1664)) + _1664);
    float _1783 = (((_765 * _719) + _766) * _731) * ((cbModelParam._m0[1u].w * (_1766 - _1666)) + _1666);
    float _1786 = fma(_1783, cbSceneParam._m0[89u].z, fma(_1781, cbSceneParam._m0[89u].y, _1779 * cbSceneParam._m0[89u].x));
    float _1789 = fma(_1783, cbSceneParam._m0[90u].z, fma(_1781, cbSceneParam._m0[90u].y, _1779 * cbSceneParam._m0[90u].x));
    float _1792 = fma(_1783, cbSceneParam._m0[91u].z, fma(_1781, cbSceneParam._m0[91u].y, _1779 * cbSceneParam._m0[91u].x));
    float _1826 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1830 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1834 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1838 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1839 = _1826 / _1838;
    float _1840 = _1830 / _1838;
    float _1841 = _1834 / _1838;
    float _1988;
    float _1989;
    float _1990;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1868 = ((uint(_1841 > cbSceneParam._m0[59u].y) + uint(_1841 > cbSceneParam._m0[59u].x)) + uint(_1841 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1869 = _1868 + 43u;
        uint _1877 = _1868 + 44u;
        uint _1885 = _1868 + 45u;
        uint _1893 = _1868 + 46u;
        float _1904 = fma(_1838, cbSceneParam._m0[_1869].w, fma(_1834, cbSceneParam._m0[_1869].z, fma(_1830, cbSceneParam._m0[_1869].y, _1826 * cbSceneParam._m0[_1869].x)));
        float _1908 = fma(_1838, cbSceneParam._m0[_1877].w, fma(_1834, cbSceneParam._m0[_1877].z, fma(_1830, cbSceneParam._m0[_1877].y, _1826 * cbSceneParam._m0[_1877].x)));
        float _1916 = fma(_1838, cbSceneParam._m0[_1893].w, fma(_1834, cbSceneParam._m0[_1893].z, fma(_1830, cbSceneParam._m0[_1893].y, _1826 * cbSceneParam._m0[_1893].x)));
        float _1921 = cbSceneParam._m0[33u].z * _1916;
        float _1923 = cbSceneParam._m0[33u].w * _1916;
        float _1926 = fma(_1838, cbSceneParam._m0[_1885].w, fma(_1834, cbSceneParam._m0[_1885].z, fma(_1830, cbSceneParam._m0[_1885].y, _1826 * cbSceneParam._m0[_1885].x))) / _1916;
        float _1974 = (cbSceneParam._m0[33u].x - sqrt(((_1840 * _1840) + (_1839 * _1839)) + (_1841 * _1841))) * cbSceneParam._m0[33u].y;
        float _4399 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1981 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1921 + _1904) / _1916, (_1923 + _1908) / _1916), _1926), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1923 + _1904) / _1916, (_1908 - _1921) / _1916), _1926), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1904 - _1921) / _1916, (_1908 - _1923) / _1916), _1926), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1904 - _1923) / _1916, (_1921 + _1908) / _1916), _1926), 0.0)).x), vec4(0.25)));
        _1988 = 1.0 - (_1981 * cbSceneParam._m0[34u].x);
        _1989 = 1.0 - (_1981 * cbSceneParam._m0[34u].y);
        _1990 = 1.0 - (_1981 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1988 = 1.0;
        _1989 = 1.0;
        _1990 = 1.0;
    }
    float _2054;
    float _2056;
    float _2058;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2042 = fma(_1838, cbSceneParam._m0[63u].w, fma(_1834, cbSceneParam._m0[63u].z, fma(_1830, cbSceneParam._m0[63u].y, _1826 * cbSceneParam._m0[63u].x)));
        float _2043 = fma(_1838, cbSceneParam._m0[60u].w, fma(_1834, cbSceneParam._m0[60u].z, fma(_1830, cbSceneParam._m0[60u].y, _1826 * cbSceneParam._m0[60u].x))) / _2042;
        float _2044 = fma(_1838, cbSceneParam._m0[61u].w, fma(_1834, cbSceneParam._m0[61u].z, fma(_1830, cbSceneParam._m0[61u].y, _1826 * cbSceneParam._m0[61u].x))) / _2042;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2043 >= cbSceneParam._m0[64u].x) && (_2044 >= cbSceneParam._m0[64u].y)) && (_2043 <= cbSceneParam._m0[64u].z)) && (_2044 <= cbSceneParam._m0[64u].w))
        {
            float _2182 = fma(_1838, cbSceneParam._m0[62u].w, fma(_1834, cbSceneParam._m0[62u].z, fma(_1830, cbSceneParam._m0[62u].y, _1826 * cbSceneParam._m0[62u].x))) / _2042;
            float _2186 = isnan(cbSceneParam._m0[41u].w) ? _2182 : (isnan(_2182) ? cbSceneParam._m0[41u].w : max(_2182, cbSceneParam._m0[41u].w));
            float _2229 = (cbSceneParam._m0[33u].x - sqrt(((_1840 * _1840) + (_1839 * _1839)) + (_1841 * _1841))) * cbSceneParam._m0[33u].y;
            float _4415 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
            float _2236 = (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2043, cbSceneParam._m0[33u].w + _2044), _2186), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2043, _2044 - cbSceneParam._m0[33u].z), _2186), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2043 - cbSceneParam._m0[33u].z, _2044 - cbSceneParam._m0[33u].w), _2186), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2043 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2044), _2186), 0.0)).x), vec4(0.25)));
            float _2240 = 1.0 - (_2236 * cbSceneParam._m0[34u].x);
            float _2241 = 1.0 - (_2236 * cbSceneParam._m0[34u].y);
            float _2242 = 1.0 - (_2236 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2242) ? _1990 : (isnan(_1990) ? _2242 : min(_1990, _2242));
            frontier_phi_37_36_ladder_1 = isnan(_2241) ? _1989 : (isnan(_1989) ? _2241 : min(_1989, _2241));
            frontier_phi_37_36_ladder_2 = isnan(_2240) ? _1988 : (isnan(_1988) ? _2240 : min(_1988, _2240));
        }
        else
        {
            frontier_phi_37_36_ladder = _1990;
            frontier_phi_37_36_ladder_1 = _1989;
            frontier_phi_37_36_ladder_2 = _1988;
        }
        _2054 = frontier_phi_37_36_ladder_2;
        _2056 = frontier_phi_37_36_ladder_1;
        _2058 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2054 = _1988;
        _2056 = _1989;
        _2058 = _1990;
    }
    uvec4 _2063 = floatBitsToUint(cbInstanceData._m0[_691 + 5u]);
    uint _2065 = _2063.x * 14u;
    uint _2066 = _2065 + 13u;
    float _2073 = _731 + (-1.0);
    float _2078 = (cbLight._m0[_2066].x * _2073) + 1.0;
    float _2079 = (cbLight._m0[_2066].y * _2073) + 1.0;
    float _2080 = (cbLight._m0[_2066].z * _2073) + 1.0;
    float _2081 = (cbLight._m0[_2066].w * _2073) + 1.0;
    uint _2082 = _2065 + 5u;
    float _2088 = isnan(1.0) ? _2079 : (isnan(_2079) ? 1.0 : min(_2079, 1.0));
    uint _2092 = _2065 + 4u;
    float _2101 = isnan(1.0) ? _2078 : (isnan(_2078) ? 1.0 : min(_2078, 1.0));
    uint _2105 = _2065 | 1u;
    float _2116 = dot(vec3(cbLight._m0[_2065].xyz), vec3(_552, _553, _554));
    float _2119 = dot(vec3(cbLight._m0[_2105].xyz), vec3(_552, _553, _554));
    float _4451 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _4462 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2124 = (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * 0.3183098733425140380859375;
    float _2126 = (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * 0.3183098733425140380859375;
    float _2133 = ((cbLight._m0[_2082].x * _2088) * _2126) + (((cbLight._m0[_2092].x * _2054) * _2101) * _2124);
    float _2134 = ((_2088 * cbLight._m0[_2082].y) * _2126) + (((cbLight._m0[_2092].y * _2056) * _2101) * _2124);
    float _2135 = ((_2088 * cbLight._m0[_2082].z) * _2126) + (((cbLight._m0[_2092].z * _2058) * _2101) * _2124);
    uvec4 _2139 = floatBitsToUint(cbLight._m0[_2065 + 12u]);
    bool _2141 = _2139.x == 0u;
    float _2243;
    float _2245;
    float _2247;
    if (_2141)
    {
        _2243 = _2133;
        _2245 = _2134;
        _2247 = _2135;
    }
    else
    {
        uint _2251 = _2065 + 6u;
        float _2267 = (dot(vec3(cbLight._m0[_2065 + 2u].xyz), vec3(_552, _553, _554)) * 0.5) + 0.5;
        float _2268 = _2267 * _2267;
        float _4473 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2269 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _2270 = isnan(1.0) ? _2080 : (isnan(_2080) ? 1.0 : min(_2080, 1.0));
        _2243 = (((cbLight._m0[_2251].x * 0.3183098733425140380859375) * _2269) * _2270) + _2133;
        _2245 = (((cbLight._m0[_2251].y * 0.3183098733425140380859375) * _2269) * _2270) + _2134;
        _2247 = (((cbLight._m0[_2251].z * 0.3183098733425140380859375) * _2269) * _2270) + _2135;
    }
    bool _2250 = _2139.y == 0u;
    float _2305;
    float _2307;
    float _2309;
    if (_2250)
    {
        _2305 = _2243;
        _2307 = _2245;
        _2309 = _2247;
    }
    else
    {
        uint _2478 = _2065 + 7u;
        float _2494 = (dot(vec3(cbLight._m0[_2065 + 3u].xyz), vec3(_552, _553, _554)) * 0.5) + 0.5;
        float _2495 = _2494 * _2494;
        float _4489 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2496 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _2497 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
        _2305 = (((cbLight._m0[_2478].x * 0.3183098733425140380859375) * _2496) * _2497) + _2243;
        _2307 = (((cbLight._m0[_2478].y * 0.3183098733425140380859375) * _2496) * _2497) + _2245;
        _2309 = (((cbLight._m0[_2478].z * 0.3183098733425140380859375) * _2496) * _2497) + _2247;
    }
    uint _2312 = _2065 + 8u;
    float _2325 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2065].w)) * _555) * 0.949999988079071044921875);
    float _2326 = _2325 * _2325;
    float _2327 = cbLight._m0[_2065].x + _633;
    float _2328 = cbLight._m0[_2065].y + _634;
    float _2329 = cbLight._m0[_2065].z + _635;
    float _2333 = inversesqrt(dot(vec3(_2327, _2328, _2329), vec3(_2327, _2328, _2329)));
    float _2334 = _2333 * _2327;
    float _2335 = _2333 * _2328;
    float _2336 = _2333 * _2329;
    float _2337 = dot(vec3(_552, _553, _554), vec3(cbLight._m0[_2065].xyz));
    float _4505 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2340 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
    float _4516 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _2341 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
    float _2342 = dot(vec3(_552, _553, _554), vec3(_2334, _2335, _2336));
    float _4527 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2345 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
    float _2346 = dot(vec3(cbLight._m0[_2065].xyz), vec3(_2334, _2335, _2336));
    float _4538 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2350 = _2326 * _2326;
    float _2354 = ((_2345 * _2345) * (_2350 + (-1.0))) + 1.0;
    float _2362 = exp2(log2(1.0 - (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0)))) * 5.0);
    float _2363 = 0.959999978542327880859375 - _713;
    float _2365 = 0.959999978542327880859375 - _714;
    float _2366 = 0.959999978542327880859375 - _715;
    float _2373 = 1.0 - _2326;
    float _2384 = (0.5 / (((_2341 * ((_2340 * _2373) + _2326)) + 9.9999999392252902907785028219223e-09) + (((_2341 * _2373) + _2326) * _2340))) * _2340;
    float _4549 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2386 = (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (_2350 / ((_2354 * _2354) * 3.141590118408203125));
    uint _2400 = _2065 + 9u;
    float _2411 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2105].w)) * _555) * 0.949999988079071044921875);
    float _2412 = _2411 * _2411;
    float _2413 = cbLight._m0[_2105].x + _633;
    float _2414 = cbLight._m0[_2105].y + _634;
    float _2415 = cbLight._m0[_2105].z + _635;
    float _2419 = inversesqrt(dot(vec3(_2413, _2414, _2415), vec3(_2413, _2414, _2415)));
    float _2420 = _2419 * _2413;
    float _2421 = _2419 * _2414;
    float _2422 = _2419 * _2415;
    float _2423 = dot(vec3(_552, _553, _554), vec3(cbLight._m0[_2105].xyz));
    float _4560 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2426 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
    float _2427 = dot(vec3(_552, _553, _554), vec3(_2420, _2421, _2422));
    float _4571 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2430 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
    float _2431 = dot(vec3(cbLight._m0[_2105].xyz), vec3(_2420, _2421, _2422));
    float _4582 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _2435 = _2412 * _2412;
    float _2439 = ((_2430 * _2430) * (_2435 + (-1.0))) + 1.0;
    float _2446 = exp2(log2(1.0 - (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0)))) * 5.0);
    float _2453 = 1.0 - _2412;
    float _2463 = (0.5 / (((_2341 * ((_2426 * _2453) + _2412)) + 9.9999999392252902907785028219223e-09) + (((_2341 * _2453) + _2412) * _2426))) * _2426;
    float _4593 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
    float _2465 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2435 / ((_2439 * _2439) * 3.141590118408203125));
    float _2475 = (((((_2446 * _2363) + _716) * cbLight._m0[_2400].x) * _2465) * _2088) + ((((cbLight._m0[_2312].x * _2054) * ((_2362 * _2363) + _716)) * _2386) * _2101);
    float _2476 = (((((_2446 * _2365) + _718) * cbLight._m0[_2400].y) * _2465) * _2088) + ((((cbLight._m0[_2312].y * _2056) * ((_2362 * _2365) + _718)) * _2386) * _2101);
    float _2477 = (((((_2446 * _2366) + _719) * cbLight._m0[_2400].z) * _2465) * _2088) + ((((cbLight._m0[_2312].z * _2058) * ((_2362 * _2366) + _719)) * _2386) * _2101);
    float _2533;
    float _2535;
    float _2537;
    if (_2141)
    {
        _2533 = _2475;
        _2535 = _2476;
        _2537 = _2477;
    }
    else
    {
        uint _2539 = _2065 + 2u;
        uint _2543 = _2065 + 10u;
        float _2557 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2539].w)) * _555) * 0.949999988079071044921875);
        float _2558 = _2557 * _2557;
        float _2559 = cbLight._m0[_2539].x + _633;
        float _2560 = cbLight._m0[_2539].y + _634;
        float _2561 = cbLight._m0[_2539].z + _635;
        float _2565 = inversesqrt(dot(vec3(_2559, _2560, _2561), vec3(_2559, _2560, _2561)));
        float _2566 = _2565 * _2559;
        float _2567 = _2565 * _2560;
        float _2568 = _2565 * _2561;
        float _2569 = dot(vec3(_552, _553, _554), vec3(cbLight._m0[_2539].xyz));
        float _4604 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2572 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _2573 = dot(vec3(_552, _553, _554), vec3(_2566, _2567, _2568));
        float _4615 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2576 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _2577 = dot(vec3(cbLight._m0[_2539].xyz), vec3(_2566, _2567, _2568));
        float _4626 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        float _2581 = _2558 * _2558;
        float _2585 = ((_2576 * _2576) * (_2581 + (-1.0))) + 1.0;
        float _2592 = exp2(log2(1.0 - (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0)))) * 5.0);
        float _2599 = 1.0 - _2558;
        float _2609 = (0.5 / (((_2341 * ((_2572 * _2599) + _2558)) + 9.9999999392252902907785028219223e-09) + (((_2341 * _2599) + _2558) * _2572))) * _2572;
        float _4637 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2611 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2581 / ((_2585 * _2585) * 3.141590118408203125));
        float _2612 = isnan(1.0) ? _2080 : (isnan(_2080) ? 1.0 : min(_2080, 1.0));
        _2533 = (((((_2592 * _2363) + _716) * cbLight._m0[_2543].x) * _2611) * _2612) + _2475;
        _2535 = (((((_2592 * _2365) + _718) * cbLight._m0[_2543].y) * _2611) * _2612) + _2476;
        _2537 = (((((_2592 * _2366) + _719) * cbLight._m0[_2543].z) * _2611) * _2612) + _2477;
    }
    float _2643;
    float _2645;
    float _2647;
    if (_2250)
    {
        _2643 = _2533;
        _2645 = _2535;
        _2647 = _2537;
    }
    else
    {
        uint _2654 = _2065 + 3u;
        uint _2658 = _2065 + 11u;
        float _2672 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2654].w)) * _555) * 0.949999988079071044921875);
        float _2673 = _2672 * _2672;
        float _2674 = cbLight._m0[_2654].x + _633;
        float _2675 = cbLight._m0[_2654].y + _634;
        float _2676 = cbLight._m0[_2654].z + _635;
        float _2680 = inversesqrt(dot(vec3(_2674, _2675, _2676), vec3(_2674, _2675, _2676)));
        float _2681 = _2680 * _2674;
        float _2682 = _2680 * _2675;
        float _2683 = _2680 * _2676;
        float _2684 = dot(vec3(_552, _553, _554), vec3(cbLight._m0[_2654].xyz));
        float _4653 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2687 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
        float _2688 = dot(vec3(_552, _553, _554), vec3(_2681, _2682, _2683));
        float _4664 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        float _2691 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
        float _2692 = dot(vec3(cbLight._m0[_2654].xyz), vec3(_2681, _2682, _2683));
        float _4675 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2696 = _2673 * _2673;
        float _2700 = ((_2691 * _2691) * (_2696 + (-1.0))) + 1.0;
        float _2707 = exp2(log2(1.0 - (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0)))) * 5.0);
        float _2714 = 1.0 - _2673;
        float _2724 = (0.5 / (((_2341 * ((_2687 * _2714) + _2673)) + 9.9999999392252902907785028219223e-09) + (((_2341 * _2714) + _2673) * _2687))) * _2687;
        float _4686 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        float _2726 = (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2696 / ((_2700 * _2700) * 3.141590118408203125));
        float _2727 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
        _2643 = (((((_2707 * _2363) + _716) * cbLight._m0[_2658].x) * _2726) * _2727) + _2533;
        _2645 = (((((_2707 * _2365) + _718) * cbLight._m0[_2658].y) * _2726) * _2727) + _2535;
        _2647 = (((((_2707 * _2366) + _719) * cbLight._m0[_2658].z) * _2726) * _2727) + _2537;
    }
    float _2793;
    float _2795;
    float _2797;
    float _2799;
    float _2801;
    float _2803;
    if (_2063.y == 0u)
    {
        uvec4 _2748 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2749 = _2748.x;
        uint _2760 = uint((float(_2748.y) * floor(float(uint(cbSceneParam._m0[85u].y * _654) / _2749))) + floor(float(uint(cbSceneParam._m0[85u].x * _653) / _2749)));
        float _2770 = (log2(_1841 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2771 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        uint _2774 = uint(isnan(14.0) ? _2771 : (isnan(_2771) ? 14.0 : min(_2771, 14.0)));
        uvec4 _2779 = texelFetch(g_lightClusterGridBuffer, int(((_2774 << 2u) + (_2760 << 6u)) >> 2u));
        uint _2780 = _2779.x;
        uint _2781 = _2748.z;
        float _2905;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        if (((((1u << ((_2781 >> 4u) & 15u)) + 4294967295u) & _2780) == 0u) || ((_2781 & 240u) == 0u))
        {
            _2905 = 0.0;
            _2907 = 0.0;
            _2909 = 0.0;
            _2911 = 0.0;
            _2913 = 0.0;
            _2915 = 0.0;
        }
        else
        {
            float _2906;
            float _2908;
            float _2910;
            float _2912;
            float _2914;
            float _2916;
            float _3066 = 0.0;
            float _3067 = 0.0;
            float _3068 = 0.0;
            float _3069 = 0.0;
            float _3070 = 0.0;
            float _3071 = 0.0;
            uint _3072 = 0u;
            uint _3081;
            bool _3082;
            for (;;)
            {
                _3081 = texelFetch(g_lightClassification, int((((_2774 << 5u) + (_2760 << 9u)) + (_3072 << 2u)) >> 2u)).x;
                _3082 = _3081 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3082)
                {
                    frontier_phi_71_pred = _3071;
                    frontier_phi_71_pred_1 = _3070;
                    frontier_phi_71_pred_2 = _3069;
                    frontier_phi_71_pred_3 = _3068;
                    frontier_phi_71_pred_4 = _3067;
                    frontier_phi_71_pred_5 = _3066;
                }
                else
                {
                    float _3211;
                    float _3212;
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    uint _3217;
                    _3211 = _3066;
                    _3212 = _3067;
                    _3213 = _3068;
                    _3214 = _3069;
                    _3215 = _3070;
                    _3216 = _3071;
                    _3217 = _3081;
                    float _3138;
                    float _3139;
                    float _3140;
                    float _3141;
                    float _3142;
                    float _3143;
                    for (;;)
                    {
                        uint _3221 = uint(findLSB(_3217)) + (_3072 << 5u);
                        uint _3218 = (_3217 + 4294967295u) & _3217;
                        uint _3223 = _3221 * 48u;
                        vec4 _3237 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3223)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 3u)).x));
                        uint _3243 = (_3221 * 48u) + 4u;
                        vec4 _3256 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3243)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 3u)).x));
                        uint _3262 = (_3221 * 48u) + 8u;
                        vec3 _3273 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3262)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3262 + 2u)).x));
                        float _3277 = _3237.x - _1839;
                        float _3278 = _3237.y - _1840;
                        float _3279 = _3237.z - _1841;
                        float _3280 = dot(vec3(_3277, _3278, _3279), vec3(_3277, _3278, _3279));
                        float _3283 = inversesqrt(_3280);
                        float _3284 = _3283 * _3277;
                        float _3285 = _3283 * _3278;
                        float _3286 = _3283 * _3279;
                        float _3287 = dot(vec3(_672, _675, _678), vec3(_3284, _3285, _3286));
                        float _3292 = 1.0 - (_3280 * _3237.w);
                        float _4712 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                        float _3293 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
                        float _3294 = sqrt(_3280) * _3256.w;
                        float _3297 = 1.39999997615814208984375 / (_3294 + 1.39999997615814208984375);
                        float _3298 = _3297 * _3297;
                        float _3301 = ((1.0 - _3298) * _3287) + _3298;
                        float _3304 = _3294 * _3294;
                        float _3308 = ((isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0))) * _3293) / ((_3304 * 0.699999988079071044921875) + 1.0);
                        float _3312 = (-0.0) - _1839;
                        float _3313 = (-0.0) - _1840;
                        float _3314 = (-0.0) - _1841;
                        float _3318 = inversesqrt(dot(vec3(_3312, _3313, _3314), vec3(_3312, _3313, _3314)));
                        float _3319 = _3318 * _3312;
                        float _3320 = _3318 * _3313;
                        float _3321 = _3318 * _3314;
                        float _3328 = exp2(log2(1.0 / ((_3304 * 3.5) + 5.0)) * 0.25);
                        float _3329 = 1.0 - _747;
                        float _3336 = sqrt(1.0 - ((1.0 - (_3329 * _3329)) * (1.0 - (_3328 * _3328))));
                        float _3337 = _3336 * _3336;
                        float _3338 = _3337 * _3337;
                        float _3339 = _3319 + _3284;
                        float _3340 = _3320 + _3285;
                        float _3341 = _3321 + _3286;
                        float _3345 = inversesqrt(dot(vec3(_3339, _3340, _3341), vec3(_3339, _3340, _3341)));
                        float _3349 = dot(vec3(_672, _675, _678), vec3(_3319, _3320, _3321));
                        float _4728 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                        float _3352 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                        float _3353 = dot(vec3(_672, _675, _678), vec3(_3345 * _3339, _3345 * _3340, _3345 * _3341));
                        float _4739 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                        float _3356 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                        float _3360 = ((_3356 * _3356) * (_3338 + (-1.0))) + 1.0;
                        float _3361 = _3297 * _3337;
                        float _3362 = _3361 * _3361;
                        float _3365 = ((1.0 - _3362) * _3287) + _3362;
                        float _4750 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                        float _3366 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                        float _3367 = 1.0 - _3337;
                        float _3377 = (0.5 / (((_3366 * ((_3352 * _3367) + _3337)) + 9.9999999392252902907785028219223e-09) + (((_3366 * _3367) + _3337) * _3352))) * _3366;
                        float _4761 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                        float _3388 = (((_3338 * 3.1415927410125732421875) * (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0)))) / ((_3360 * _3360) * ((_3304 * 2.1991131305694580078125) + 3.141590118408203125))) * _3293;
                        _3141 = (_3308 * _3256.x) + _3214;
                        _3142 = (_3308 * _3256.y) + _3215;
                        _3143 = (_3308 * _3256.z) + _3216;
                        _3138 = (_3388 * _3273.x) + _3211;
                        _3139 = (_3388 * _3273.y) + _3212;
                        _3140 = (_3388 * _3273.z) + _3213;
                        if (_3218 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3211 = _3138;
                            _3212 = _3139;
                            _3213 = _3140;
                            _3214 = _3141;
                            _3215 = _3142;
                            _3216 = _3143;
                            _3217 = _3218;
                        }
                    }
                    frontier_phi_71_pred = _3143;
                    frontier_phi_71_pred_1 = _3142;
                    frontier_phi_71_pred_2 = _3141;
                    frontier_phi_71_pred_3 = _3140;
                    frontier_phi_71_pred_4 = _3139;
                    frontier_phi_71_pred_5 = _3138;
                }
                _2916 = frontier_phi_71_pred;
                _2914 = frontier_phi_71_pred_1;
                _2912 = frontier_phi_71_pred_2;
                _2910 = frontier_phi_71_pred_3;
                _2908 = frontier_phi_71_pred_4;
                _2906 = frontier_phi_71_pred_5;
                uint _3073 = _3072 + 1u;
                if (_3073 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3066 = _2906;
                    _3067 = _2908;
                    _3068 = _2910;
                    _3069 = _2912;
                    _3070 = _2914;
                    _3071 = _2916;
                    _3072 = _3073;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2905 = _2906;
            _2907 = _2908;
            _2909 = _2910;
            _2911 = _2912;
            _2913 = _2914;
            _2915 = _2916;
        }
        uvec4 _2919 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2920 = _2919.z;
        uint _2922 = (_2920 >> 8u) & 15u;
        float _3034;
        float _3036;
        float _3038;
        float _3040;
        float _3042;
        float _3044;
        if (((4294967295u << _2922) & _2780) == 0u)
        {
            _3034 = _2905;
            _3036 = _2907;
            _3038 = _2909;
            _3040 = _2911;
            _3042 = _2913;
            _3044 = _2915;
        }
        else
        {
            float _3059 = inversesqrt(dot(vec3(_1839, _1840, _1841), vec3(_1839, _1840, _1841)));
            float _3060 = _3059 * _1839;
            float _3061 = _3059 * _1840;
            float _3062 = _3059 * _1841;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2922 < ((_2920 >> 12u) & 15u))
            {
                float _3035;
                float _3037;
                float _3039;
                float _3041;
                float _3043;
                float _3045;
                float _3194 = _2905;
                float _3195 = _2907;
                float _3196 = _2909;
                float _3197 = _2911;
                float _3198 = _2913;
                float _3199 = _2915;
                uint _3200 = _2922;
                uint _3209;
                bool _3210;
                for (;;)
                {
                    _3209 = texelFetch(g_lightClassification, int((((_2774 << 5u) + (_2760 << 9u)) + (_3200 << 2u)) >> 2u)).x;
                    _3210 = _3209 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3210)
                    {
                        frontier_phi_82_pred = _3199;
                        frontier_phi_82_pred_1 = _3198;
                        frontier_phi_82_pred_2 = _3197;
                        frontier_phi_82_pred_3 = _3196;
                        frontier_phi_82_pred_4 = _3195;
                        frontier_phi_82_pred_5 = _3194;
                    }
                    else
                    {
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3697;
                        float _3698;
                        float _3699;
                        float _3700;
                        float _3701;
                        float _3702;
                        float _3415 = _3194;
                        float _3416 = _3195;
                        float _3417 = _3196;
                        float _3418 = _3197;
                        float _3419 = _3198;
                        float _3420 = _3199;
                        uint _3421 = _3209;
                        uint _3422;
                        vec4 _3447;
                        float _3448;
                        vec4 _3463;
                        vec3 _3475;
                        vec4 _3490;
                        vec4 _3506;
                        float _3553;
                        bool _3554;
                        for (;;)
                        {
                            uint _3432 = ((_3200 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3421));
                            _3422 = (_3421 + 4294967295u) & _3421;
                            uint _3434 = _3432 * 40u;
                            _3447 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 3u)).x));
                            _3448 = _3447.w;
                            uint _3450 = (_3432 * 40u) + 4u;
                            _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            uint _3465 = (_3432 * 40u) + 8u;
                            _3475 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x));
                            uint _3477 = (_3432 * 40u) + 16u;
                            _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            uint _3493 = (_3432 * 40u) + 20u;
                            _3506 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 3u)).x));
                            uint _3509 = (_3432 * 40u) + 24u;
                            vec4 _3522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 3u)).x));
                            uint _3528 = (_3432 * 40u) + 28u;
                            vec4 _3541 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 3u)).x));
                            _3553 = fma(_1841, _3541.z, fma(_1840, _3541.y, _3541.x * _1839)) + _3541.w;
                            _3554 = !((fma(_1841, _3522.z, fma(_1840, _3522.y, _3522.x * _1839)) + _3522.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3554)
                            {
                                float _3581 = _3447.x - _1839;
                                float _3582 = _3447.y - _1840;
                                float _3583 = _3447.z - _1841;
                                float _3584 = dot(vec3(_3581, _3582, _3583), vec3(_3581, _3582, _3583));
                                float _3587 = inversesqrt(_3584);
                                float _3588 = _3587 * _3581;
                                float _3589 = _3587 * _3582;
                                float _3590 = _3587 * _3583;
                                float _3594 = 1.0 - (_3584 / (_3448 * _3448));
                                float _4772 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                                float _3595 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                                float _3599 = sqrt(_3584) * _3463.w;
                                float _3601 = 1.39999997615814208984375 / (_3599 + 1.39999997615814208984375);
                                float _3602 = _3601 * _3601;
                                float _3605 = ((1.0 - _3602) * dot(vec3(_3588, _3589, _3590), vec3(_672, _675, _678))) + _3602;
                                float _3608 = _3599 * _3599;
                                float _3612 = (fma(_1841, _3490.z, fma(_1840, _3490.y, _3490.x * _1839)) + _3490.w) / _3553;
                                float _3613 = (fma(_1841, _3506.z, fma(_1840, _3506.y, _3506.x * _1839)) + _3506.w) / _3553;
                                float _3617 = 1.0 - dot(vec2(_3612, _3613), vec2(_3612, _3613));
                                float _4788 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3618 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
                                float _3619 = _3618 * (((isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0))) * _3595) / ((_3608 * 0.699999988079071044921875) + 1.0));
                                float _3631 = exp2(log2(1.0 / ((_3608 * 3.5) + 5.0)) * 0.25);
                                float _3632 = 1.0 - _747;
                                float _3639 = sqrt(1.0 - ((1.0 - (_3632 * _3632)) * (1.0 - (_3631 * _3631))));
                                float _3640 = _3639 * _3639;
                                float _3641 = _3640 * _3640;
                                float _3642 = _3588 - _3060;
                                float _3643 = _3589 - _3061;
                                float _3644 = _3590 - _3062;
                                float _3648 = inversesqrt(dot(vec3(_3642, _3643, _3644), vec3(_3642, _3643, _3644)));
                                float _3652 = dot(vec3(_672, _675, _678), vec3((-0.0) - _3060, (-0.0) - _3061, (-0.0) - _3062));
                                float _4799 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                                float _3655 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                                float _3656 = dot(vec3(_672, _675, _678), vec3(_3648 * _3642, _3648 * _3643, _3648 * _3644));
                                float _4810 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                                float _3659 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                                float _3663 = ((_3659 * _3659) * (_3641 + (-1.0))) + 1.0;
                                float _3664 = _3601 * _3640;
                                float _3665 = _3664 * _3664;
                                float _3671 = ((1.0 - _3665) * dot(vec3(_672, _675, _678), vec3(_3588, _3589, _3590))) + _3665;
                                float _4821 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                                float _3672 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                                float _3673 = 1.0 - _3640;
                                float _3683 = (0.5 / (((_3672 * ((_3655 * _3673) + _3640)) + 9.9999999392252902907785028219223e-09) + (((_3672 * _3673) + _3640) * _3655))) * _3672;
                                float _4832 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                                float _3693 = (_3618 * _3595) * (((_3641 * 3.1415927410125732421875) * (isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0)))) / ((_3663 * _3663) * ((_3608 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3619 * _3463.z;
                                frontier_phi_88_pred_1 = _3619 * _3463.y;
                                frontier_phi_88_pred_2 = _3619 * _3463.x;
                                frontier_phi_88_pred_3 = _3693 * _3475.z;
                                frontier_phi_88_pred_4 = _3693 * _3475.y;
                                frontier_phi_88_pred_5 = _3693 * _3475.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3702 = frontier_phi_88_pred;
                            _3701 = frontier_phi_88_pred_1;
                            _3700 = frontier_phi_88_pred_2;
                            _3699 = frontier_phi_88_pred_3;
                            _3698 = frontier_phi_88_pred_4;
                            _3697 = frontier_phi_88_pred_5;
                            _3405 = _3700 + _3418;
                            _3406 = _3701 + _3419;
                            _3407 = _3702 + _3420;
                            _3402 = _3697 + _3415;
                            _3403 = _3698 + _3416;
                            _3404 = _3699 + _3417;
                            if (_3422 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3415 = _3402;
                                _3416 = _3403;
                                _3417 = _3404;
                                _3418 = _3405;
                                _3419 = _3406;
                                _3420 = _3407;
                                _3421 = _3422;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3407;
                        frontier_phi_82_pred_1 = _3406;
                        frontier_phi_82_pred_2 = _3405;
                        frontier_phi_82_pred_3 = _3404;
                        frontier_phi_82_pred_4 = _3403;
                        frontier_phi_82_pred_5 = _3402;
                    }
                    _3045 = frontier_phi_82_pred;
                    _3043 = frontier_phi_82_pred_1;
                    _3041 = frontier_phi_82_pred_2;
                    _3039 = frontier_phi_82_pred_3;
                    _3037 = frontier_phi_82_pred_4;
                    _3035 = frontier_phi_82_pred_5;
                    uint _3201 = _3200 + 1u;
                    if (_3201 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3194 = _3035;
                        _3195 = _3037;
                        _3196 = _3039;
                        _3197 = _3041;
                        _3198 = _3043;
                        _3199 = _3045;
                        _3200 = _3201;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3041;
                frontier_phi_63_64_ladder_1 = _3045;
                frontier_phi_63_64_ladder_2 = _3043;
                frontier_phi_63_64_ladder_3 = _3039;
                frontier_phi_63_64_ladder_4 = _3037;
                frontier_phi_63_64_ladder_5 = _3035;
            }
            else
            {
                frontier_phi_63_64_ladder = _2911;
                frontier_phi_63_64_ladder_1 = _2915;
                frontier_phi_63_64_ladder_2 = _2913;
                frontier_phi_63_64_ladder_3 = _2909;
                frontier_phi_63_64_ladder_4 = _2907;
                frontier_phi_63_64_ladder_5 = _2905;
            }
            _3034 = frontier_phi_63_64_ladder_5;
            _3036 = frontier_phi_63_64_ladder_4;
            _3038 = frontier_phi_63_64_ladder_3;
            _3040 = frontier_phi_63_64_ladder;
            _3042 = frontier_phi_63_64_ladder_2;
            _3044 = frontier_phi_63_64_ladder_1;
        }
        float _3049 = isnan(1.0) ? _731 : (isnan(_731) ? 1.0 : min(_731, 1.0));
        _2793 = (_3049 * _3040) + _2305;
        _2795 = (_3049 * _3042) + _2307;
        _2797 = (_3049 * _3044) + _2309;
        _2799 = ((_3034 * _716) * _3049) + _2643;
        _2801 = ((_3036 * _718) * _3049) + _2645;
        _2803 = ((_3038 * _719) * _3049) + _2647;
    }
    else
    {
        _2793 = _2305;
        _2795 = _2307;
        _2797 = _2309;
        _2799 = _2643;
        _2801 = _2645;
        _2803 = _2647;
    }
    uint _2809 = _692 + uint(cbMatDynParam._m0[0u].w);
    float _2815 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].y;
    float _2821 = (((((_2815 * cbMtdParam._m0[10u].x) * _433.x) * _456) * _531) * (((1.0 - _510) * cbMtdParam._m0[16u].y) + _510)) * cbInstanceData._m0[_2809].x;
    float _2827 = (((((_2815 * cbMtdParam._m0[10u].y) * _433.y) * _456) * _531) * (((1.0 - _512) * cbMtdParam._m0[16u].y) + _512)) * cbInstanceData._m0[_2809].y;
    float _2833 = (((((_2815 * cbMtdParam._m0[10u].z) * _433.z) * _456) * _531) * (((1.0 - _514) * cbMtdParam._m0[16u].y) + _514)) * cbInstanceData._m0[_2809].z;
    float _4848 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _4859 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _4870 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _2850 = (((isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0))) * (_2793 + ((isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))) * _731))) + ((_2799 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1571)) * cbPerFrame._m0[3u].x)) + _2821;
    float _2852 = (_2827 + ((_2801 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1571)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0))) * (_2795 + ((isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))) * _731)));
    float _2854 = (_2833 + ((_2803 + ((isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))) * _1571)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0))) * (_2797 + ((isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))) * _731)));
    float _2855 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
    float _2856 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
    float _2857 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
    float _2863 = cbMtdParam._m0[2u].x * _2821;
    float _2864 = cbMtdParam._m0[2u].y * _2827;
    float _2865 = cbMtdParam._m0[2u].z * _2833;
    float _4896 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2867 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
    uint _2868 = _691 + 6u;
    float _2876 = _653 / cbSceneParam._m0[86u].x;
    float _2877 = _654 / cbSceneParam._m0[86u].y;
    vec4 _2891 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2876, _2877, (log2((isnan(cbSceneParam._m0[77u].w) ? _575 : (isnan(_575) ? cbSceneParam._m0[77u].w : min(_575, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2893 = _2891.x;
    float _2894 = _2891.y;
    float _2895 = _2891.z;
    float _2896 = _2891.w;
    float _2967;
    float _2969;
    float _2971;
    float _2973;
    if (_575 > cbSceneParam._m0[78u].w)
    {
        float _2930 = isnan(_575) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _575 : min(cbSceneParam._m0[80u].w, _575));
        float _2931 = _2930 / _575;
        float _2942 = _2931 * _626;
        float _2943 = _627 * _2931;
        float _2944 = (-0.0) - _2943;
        float _2945 = _2931 * _628;
        float _2947 = (cbSceneParam._m0[77u].w * _2944) / _2930;
        float _2948 = _2947 + cbSceneParam._m0[79u].w;
        float _2949 = cbSceneParam._m0[79u].w - _2943;
        float _2955 = sqrt(((_2942 * _2942) + (_2943 * _2943)) + (_2945 * _2945));
        float _2958 = (1.0 - (cbSceneParam._m0[77u].w / _2930)) * _2955;
        float _2963 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2965 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3151;
        if (abs((_2944 - _2947) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3151 = ((((_2948 > 0.0) ? exp2(_2963 * _2948) : (2.0 - exp2(_2965 * _2948))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2958;
        }
        else
        {
            float _3095 = 1.0 / cbSceneParam._m0[80u].x;
            float _3096 = isnan(_2949) ? _2948 : (isnan(_2948) ? _2949 : max(_2948, _2949));
            float _3097 = isnan(_2949) ? _2948 : (isnan(_2948) ? _2949 : min(_2948, _2949));
            float _3106 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : min(_3096, 0.0));
            float _3107 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : min(_3097, 0.0));
            _3151 = ((abs(_2955 / _2944) * cbSceneParam._m0[80u].y) * ((((_3106 - _3107) * 2.0) - ((exp2(_2963 * (isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0)))) - exp2(_2963 * (isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0))))) * _3095)) - ((exp2(_2965 * _3106) - exp2(_2965 * _3107)) * _3095))) + (_2958 * cbSceneParam._m0[80u].z);
        }
        vec4 _3153 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2876, _2877, 1.0), 0.0);
        float _3162 = exp2((_3151 * (-1.44269502162933349609375)) * (1.0 - _3153.w));
        float _3163 = log2(_3162);
        float _3179 = log2(_2896);
        _2967 = (exp2(_3179 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3163 * cbSceneParam._m0[78u].x)) * _3153.x) / cbSceneParam._m0[78u].x)) + _2893;
        _2969 = (exp2(_3179 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3163 * cbSceneParam._m0[78u].y)) * _3153.y) / cbSceneParam._m0[78u].y)) + _2894;
        _2971 = (exp2(_3179 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3163 * cbSceneParam._m0[78u].z)) * _3153.z) / cbSceneParam._m0[78u].z)) + _2895;
        _2973 = _3162 * _2896;
    }
    else
    {
        _2967 = _2893;
        _2969 = _2894;
        _2971 = _2895;
        _2973 = _2896;
    }
    bool _3189;
    vec4 _2983;
    vec4 _3005;
    float _3007;
    float _3011;
    float _3012;
    float _3013;
    float _3016;
    float _3019;
    float _3022;
    float _3023;
    bool _3033;
    for (;;)
    {
        _2983 = cbMatDynParam._m0[0u];
        float _2985 = roundEven(_2983.y);
        bool _2986 = _2985 == 3.0;
        float _2987 = log2(_2973);
        float _2991 = exp2(_2987 * cbSceneParam._m0[78u].x);
        float _2992 = exp2(_2987 * cbSceneParam._m0[78u].y);
        float _2993 = exp2(_2987 * cbSceneParam._m0[78u].z);
        float _2994 = _2991 * _2855;
        float _2995 = _2992 * _2856;
        float _2996 = _2993 * _2857;
        float _3003 = _642 + (-0.5);
        _3005 = cbMtdParam._m0[1u];
        _3007 = _3005.y * _3003;
        float _3010 = (_2985 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3011 = _3010 * (_2986 ? _2994 : (_2994 + (cbSceneParam._m0[72u].w * _2967)));
        _3012 = _3010 * (_2986 ? _2995 : (_2995 + (cbSceneParam._m0[72u].w * _2969)));
        _3013 = _3010 * (_2986 ? _2996 : (_2996 + (cbSceneParam._m0[72u].w * _2971)));
        _3016 = ((_2863 * _2867) * _2991) * _3010;
        _3019 = ((_2864 * _2867) * _2992) * _3010;
        _3022 = ((_2865 * _2867) * _2993) * _3010;
        _3023 = _3003 * 0.999000012874603271484375;
        _3033 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3033)
        {
            if ((cbInstanceData._m0[_691 + 7u].x + _3023) < 0.5)
            {
                _3189 = true;
                break;
            }
        }
        uint _3130 = _692 + uint(_2983.w);
        if ((cbInstanceData._m0[_3130].w < 1.0) && ((cbInstanceData._m0[_3130].w + _3023) < 0.5))
        {
            _3189 = true;
            break;
        }
        if ((_3007 + 1.0) < _3005.x)
        {
            _3189 = true;
            break;
        }
        _3189 = false;
        break;
    }
    float _3393;
    if (_3189)
    {
        discard_state = true;
        _3393 = 0.0;
    }
    else
    {
        _3393 = cbInstanceData._m0[_2868].w;
    }
    SV_Target.x = _3011;
    SV_Target.y = _3012;
    SV_Target.z = _3013;
    SV_Target.w = _3393;
    SV_Target_1.x = _3016;
    SV_Target_1.y = _3019;
    SV_Target_1.z = _3022;
    SV_Target_1.w = cbInstanceData._m0[_2868].w;
    discard_exit();
}


