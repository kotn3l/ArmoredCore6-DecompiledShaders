#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_21;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1004;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _241 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _247 = _241.x * cbMtdParam._m0[9u].x;
    float _248 = _241.y * cbMtdParam._m0[9u].y;
    float _249 = _241.z * cbMtdParam._m0[9u].z;
    vec4 _262 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    vec4 _277 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _279 = _277.x;
    vec4 _292 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _296 = _292.z;
    float _300 = (_292.x * 2.0) + (-1.0);
    float _302 = (_292.y * 2.0) + (-1.0);
    float _303 = dot(vec2(_300, _302), vec2(_300, _302));
    float _3412 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _309 = sqrt(1.0 - (isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0))));
    vec4 _349 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _363 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3423 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _364 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
    float _372 = (((_364 * _364) * (3.0 - (_364 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _381 = cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x;
    float _389 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3434 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
    float _394 = (_390 * _390) * (3.0 - (_390 * 2.0));
    float _395 = _394 * cbMtdParam._m0[16u].w;
    float _396 = _394 * cbMtdParam._m0[17u].x;
    float _397 = sin(_381);
    float _398 = cos(_381);
    float _399 = TEXCOORD.z - _395;
    float _400 = TEXCOORD.w - _396;
    vec4 _420 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_395 + fma(_400, (-0.0) - _397, _399 * _398))) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (fma(_400, _398, _399 * _397) + _396)) + cbTextureTilingScale._m0[0u].w));
    float _426 = (cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].w) * _420.x;
    float _428 = (cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].w) * _420.y;
    float _430 = (cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].w) * _420.z;
    float _448 = (TEXCOORD_5.x - (((_262.x + 0.00999999977648258209228515625) * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[16u].z)) * (cbMtdParam._m0[13u].x + 1.0);
    float _3445 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _449 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
    float _452 = fma(_309, _212 * NORMAL.x, fma(_302, _219 * TANGENT.x, (_205 * _197) * _300));
    float _455 = fma(_309, _212 * NORMAL.y, fma(_302, _219 * TANGENT.y, (_205 * _198) * _300));
    float _458 = fma(_309, _212 * NORMAL.z, fma(_302, _219 * TANGENT.z, (_205 * _199) * _300));
    float _462 = inversesqrt(dot(vec3(_452, _455, _458), vec3(_452, _455, _458)));
    float _463 = _462 * _452;
    float _464 = _462 * _455;
    float _465 = _462 * _458;
    float _3456 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _466 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
    float _3467 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3478 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _3489 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3500 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _470 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
    float _486 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _527 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _537 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _527);
    float _538 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _527);
    float _539 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _527);
    float _543 = inversesqrt(dot(vec3(_537, _538, _539), vec3(_537, _538, _539)));
    float _544 = _537 * _543;
    float _545 = _538 * _543;
    float _546 = _539 * _543;
    float _552 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _553 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _571 = fma(_465, cbSceneParam._m0[5u].z, fma(_464, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _463));
    float _574 = fma(_465, cbSceneParam._m0[6u].z, fma(_464, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _463));
    float _577 = fma(_465, cbSceneParam._m0[7u].z, fma(_464, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _463));
    uint _590 = uint(roundEven(NORMAL.w)) * 13u;
    uint _591 = _590 + 9u;
    uint _592 = _591 + uint(cbMatDynParam._m0[0u].w);
    float _598 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0)))) * cbInstanceData._m0[_592].x;
    float _599 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0)))) * cbInstanceData._m0[_592].y;
    float _600 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0)))) * cbInstanceData._m0[_592].z;
    float _3511 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _601 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
    float _3522 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _602 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
    float _3533 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _603 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    float _604 = 1.0 - _470;
    float _605 = _601 * _604;
    float _606 = _602 * _604;
    float _607 = _603 * _604;
    float _612 = (_601 + (-0.039999999105930328369140625)) * _470;
    float _613 = (_602 + (-0.039999999105930328369140625)) * _470;
    float _614 = (_603 + (-0.039999999105930328369140625)) * _470;
    float _615 = _612 + 0.039999999105930328369140625;
    float _617 = _613 + 0.039999999105930328369140625;
    float _618 = _614 + 0.039999999105930328369140625;
    vec4 _627 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _552, cbSceneParam._m0[86u].y * _553));
    float _630 = _627.x * TEXCOORD_5.w;
    float _631 = dot(vec3(_463, _464, _465), vec3(_544, _545, _546));
    float _634 = _631 * 2.0;
    float _638 = (_634 * _463) - _544;
    float _639 = (_634 * _464) - _545;
    float _640 = (_634 * _465) - _546;
    float _644 = abs(dot(vec3(_544, _545, _546), vec3(_463, _464, _465)));
    float _3544 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _646 = sqrt(_466);
    float _658 = exp2((_646 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_646 * 3.0));
    float _664 = (1.0 - _658) * ((_646 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _665 = _658 * _646;
    float _693 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _697 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _701 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1003;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _728 = fma(_701, cbModelParam._m0[26u].z, fma(_697, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _693));
        float _732 = fma(_701, cbModelParam._m0[27u].z, fma(_697, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _693));
        float _736 = fma(_701, cbModelParam._m0[28u].z, fma(_697, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _693));
        float _761 = _693 + _463;
        float _762 = _697 + _464;
        float _763 = _701 + _465;
        float _773 = fma(_763, cbModelParam._m0[26u].z, fma(_762, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _761)) - _728;
        float _774 = fma(_763, cbModelParam._m0[27u].z, fma(_762, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _761)) - _732;
        float _775 = fma(_763, cbModelParam._m0[28u].z, fma(_762, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _761)) - _736;
        float _779 = inversesqrt(dot(vec3(_773, _774, _775), vec3(_773, _774, _775)));
        float _792 = ((_779 * _773) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_728 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _793 = ((_779 * _774) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_732 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _794 = ((_779 * _775) / cbModelParam._m0[34u].z) + ((((((_736 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _797 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_792, _793, _794), 0.0);
        vec4 _804 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_792, _793, _794), 0.0);
        vec4 _811 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_792, _793, _794), 0.0);
        vec4 _818 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_792, _793, _794), 0.0);
        float _831 = exp2((_797.w + (-0.5)) * 20.0) * 2.0;
        float _832 = _831 * (_797.x + (-0.5));
        float _833 = _831 * (_797.y + (-0.5));
        float _834 = _831 * (_797.z + (-0.5));
        float _841 = exp2((_804.w + (-0.5)) * 20.0) * 2.0;
        float _842 = _841 * (_804.x + (-0.5));
        float _843 = _841 * (_804.y + (-0.5));
        float _844 = _841 * (_804.z + (-0.5));
        float _851 = exp2((_811.w + (-0.5)) * 20.0) * 2.0;
        float _852 = _851 * (_811.x + (-0.5));
        float _853 = _851 * (_811.y + (-0.5));
        float _854 = _851 * (_811.z + (-0.5));
        float _861 = exp2((_818.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_818.x + (-0.5));
        float _863 = _861 * (_818.y + (-0.5));
        float _864 = _861 * (_818.z + (-0.5));
        float _865 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _866 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _867 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _868 = _832 * 0.5;
        float _869 = _842 * 0.5;
        float _870 = _852 * 0.5;
        float _871 = dot(vec3(_868, _869, _870), vec3(_868, _869, _870));
        float _876 = (_871 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_871);
        float _885 = (dot(vec3(_463, _464, _465), vec3(_876 * _868, _876 * _869, _876 * _870)) + 1.0) * 0.5;
        float _3570 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _895 = sqrt(((_869 * _869) + (_868 * _868)) + (_870 * _870)) / (_865 + 9.9999997473787516355514526367188e-06);
        float _3581 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _897 = _896 * 2.0;
        float _901 = (1.0 - _896) / (_896 + 1.0);
        float _3592 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _911 = ((((1.0 - _902) * (_897 + 2.0)) * exp2(log2(isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * (_897 + 1.0))) + _902) * _865;
        float _912 = _833 * 0.5;
        float _913 = _843 * 0.5;
        float _914 = _853 * 0.5;
        float _915 = dot(vec3(_912, _913, _914), vec3(_912, _913, _914));
        float _920 = (_915 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_915);
        float _928 = (dot(vec3(_463, _464, _465), vec3(_920 * _912, _920 * _913, _920 * _914)) + 1.0) * 0.5;
        float _3603 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _937 = sqrt(((_913 * _913) + (_912 * _912)) + (_914 * _914)) / (_866 + 9.9999997473787516355514526367188e-06);
        float _3614 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _939 = _938 * 2.0;
        float _943 = (1.0 - _938) / (_938 + 1.0);
        float _3625 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _953 = ((((1.0 - _944) * (_939 + 2.0)) * exp2(log2(isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * (_939 + 1.0))) + _944) * _866;
        float _954 = _834 * 0.5;
        float _955 = _844 * 0.5;
        float _956 = _854 * 0.5;
        float _957 = dot(vec3(_954, _955, _956), vec3(_954, _955, _956));
        float _962 = (_957 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_957);
        float _970 = (dot(vec3(_463, _464, _465), vec3(_962 * _954, _962 * _955, _962 * _956)) + 1.0) * 0.5;
        float _3636 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _979 = sqrt(((_955 * _955) + (_954 * _954)) + (_956 * _956)) / (_867 + 9.9999997473787516355514526367188e-06);
        float _3647 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _981 = _980 * 2.0;
        float _985 = (1.0 - _980) / (_980 + 1.0);
        float _3658 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _995 = ((((1.0 - _986) * (_981 + 2.0)) * exp2(log2(isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * (_981 + 1.0))) + _986) * _867;
        _1003 = _834;
        _1005 = _833;
        _1006 = _832;
        _1007 = _844;
        _1008 = _843;
        _1009 = _842;
        _1010 = _854;
        _1011 = _853;
        _1012 = _852;
        _1013 = _867;
        _1014 = _866;
        _1015 = _865;
        _1016 = cbModelParam._m0[36u].z * (isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0)));
        _1017 = cbModelParam._m0[36u].z * (isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0)));
        _1018 = cbModelParam._m0[36u].z * (isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0)));
    }
    else
    {
        _1003 = _1004;
        _1005 = _1004;
        _1006 = _1004;
        _1007 = _1004;
        _1008 = _1004;
        _1009 = _1004;
        _1010 = _1004;
        _1011 = _1004;
        _1012 = _1004;
        _1013 = _1004;
        _1014 = _1004;
        _1015 = _1004;
        _1016 = 0.0;
        _1017 = 0.0;
        _1018 = 0.0;
    }
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1044 = fma(_701, cbModelParam._m0[30u].z, fma(_697, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _693));
        float _1048 = fma(_701, cbModelParam._m0[31u].z, fma(_697, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _693));
        float _1052 = fma(_701, cbModelParam._m0[32u].z, fma(_697, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _693));
        float _1075 = _693 + _463;
        float _1076 = _697 + _464;
        float _1077 = _701 + _465;
        float _1087 = fma(_1077, cbModelParam._m0[30u].z, fma(_1076, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1075)) - _1044;
        float _1088 = fma(_1077, cbModelParam._m0[31u].z, fma(_1076, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1075)) - _1048;
        float _1089 = fma(_1077, cbModelParam._m0[32u].z, fma(_1076, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1075)) - _1052;
        float _1093 = inversesqrt(dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089)));
        float _1106 = ((_1093 * _1087) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1044 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1107 = ((_1093 * _1088) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1048 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1108 = ((_1093 * _1089) / cbModelParam._m0[35u].z) + ((((((_1052 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        float _1143 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1110.x + (-0.5));
        float _1145 = _1143 * (_1110.y + (-0.5));
        float _1146 = _1143 * (_1110.z + (-0.5));
        float _1153 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1117.x + (-0.5));
        float _1155 = _1153 * (_1117.y + (-0.5));
        float _1156 = _1153 * (_1117.z + (-0.5));
        float _1163 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1124.x + (-0.5));
        float _1165 = _1163 * (_1124.y + (-0.5));
        float _1166 = _1163 * (_1124.z + (-0.5));
        float _1173 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1131.x + (-0.5));
        float _1175 = _1173 * (_1131.y + (-0.5));
        float _1176 = _1173 * (_1131.z + (-0.5));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = _1144 * 0.5;
        float _1181 = _1154 * 0.5;
        float _1182 = _1164 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1196 = (dot(vec3(_463, _464, _465), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _3699 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1205 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _3710 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _3721 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * (_1207 + 1.0))) + _1212) * _1177;
        float _1222 = _1145 * 0.5;
        float _1223 = _1155 * 0.5;
        float _1224 = _1165 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1238 = (dot(vec3(_463, _464, _465), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _3732 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1247 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _3743 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _3754 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_1249 + 1.0))) + _1254) * _1178;
        float _1264 = _1146 * 0.5;
        float _1265 = _1156 * 0.5;
        float _1266 = _1166 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1280 = (dot(vec3(_463, _464, _465), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _3765 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1289 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _3776 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _3787 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * (_1291 + 1.0))) + _1296) * _1179;
        _1313 = _1146;
        _1314 = _1145;
        _1315 = _1144;
        _1316 = _1156;
        _1317 = _1155;
        _1318 = _1154;
        _1319 = _1166;
        _1320 = _1165;
        _1321 = _1164;
        _1322 = _1179;
        _1323 = _1178;
        _1324 = _1177;
        _1325 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
        _1326 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
        _1327 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
    }
    else
    {
        _1313 = _1004;
        _1314 = _1004;
        _1315 = _1004;
        _1316 = _1004;
        _1317 = _1004;
        _1318 = _1004;
        _1319 = _1004;
        _1320 = _1004;
        _1321 = _1004;
        _1322 = _1004;
        _1323 = _1004;
        _1324 = _1004;
        _1325 = 0.0;
        _1326 = 0.0;
        _1327 = 0.0;
    }
    float _1337 = (cbModelParam._m0[1u].x * (_1325 - _1016)) + _1016;
    float _1338 = (cbModelParam._m0[1u].x * (_1326 - _1017)) + _1017;
    float _1339 = (cbModelParam._m0[1u].x * (_1327 - _1018)) + _1018;
    float _1360 = fma(_1339, cbSceneParam._m0[89u].z, fma(_1338, cbSceneParam._m0[89u].y, _1337 * cbSceneParam._m0[89u].x));
    float _1363 = fma(_1339, cbSceneParam._m0[90u].z, fma(_1338, cbSceneParam._m0[90u].y, _1337 * cbSceneParam._m0[90u].x));
    float _1366 = fma(_1339, cbSceneParam._m0[91u].z, fma(_1338, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1337));
    float _1381 = _638 * 0.5;
    float _1382 = _639 * 0.5;
    float _1383 = _640 * 0.5;
    float _1384 = dot(vec4(_1381, _1382, _1383, 1.0), vec4(_1315, _1318, _1321, _1324));
    float _1387 = dot(vec4(_1381, _1382, _1383, 1.0), vec4(_1314, _1317, _1320, _1323));
    float _1390 = dot(vec4(_1381, _1382, _1383, 1.0), vec4(_1313, _1316, _1319, _1322));
    float _1424;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1397 = dot(vec4(_1381, _1382, _1383, 1.0), vec4(_1003, _1007, _1010, _1013));
        float _1401 = dot(vec4(_1381, _1382, _1383, 1.0), vec4(_1005, _1008, _1011, _1014));
        float _1405 = dot(vec4(_1381, _1382, _1383, 1.0), vec4(_1006, _1009, _1012, _1015));
        float _1412 = dot(vec4(cbModelParam._m0[39u]), vec4(_1381, _1382, _1383, 1.0));
        _1424 = dot(vec3(isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)), isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)), isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1412) ? 0.0 : (isnan(0.0) ? _1412 : max(0.0, _1412))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1424 = 1.0;
    }
    float _1435;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1426 = dot(vec4(cbModelParam._m0[40u]), vec4(_1381, _1382, _1383, 1.0));
        _1435 = dot(vec3(isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)), isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)), isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1426) ? 0.0 : (isnan(0.0) ? _1426 : max(0.0, _1426))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1435 = 1.0;
    }
    float _1439 = (_1435 * cbModelParam._m0[1u].x) + (_1424 * (1.0 - cbModelParam._m0[1u].x));
    float _1449 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _466);
    float _1450 = isnan(_1449) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1449 : min(cbModelParam._m0[25u].z, _1449));
    float _1530;
    float _1532;
    float _1534;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1497 = fma(_701, cbModelParam._m0[13u].z, fma(_697, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _693)) + cbModelParam._m0[13u].w;
        float _1501 = fma(_701, cbModelParam._m0[14u].z, fma(_697, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _693)) + cbModelParam._m0[14u].w;
        float _1505 = fma(_701, cbModelParam._m0[15u].z, fma(_697, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _693)) + cbModelParam._m0[15u].w;
        float _1508 = fma(_640, cbModelParam._m0[13u].z, fma(_639, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _638));
        float _1511 = fma(_640, cbModelParam._m0[14u].z, fma(_639, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _638));
        float _1514 = fma(_640, cbModelParam._m0[15u].z, fma(_639, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _638));
        float _1542;
        if (_1508 > 0.0)
        {
            _1542 = abs((1.0 - _1497) / _1508);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1497 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1542 = frontier_phi_14_12_ladder;
        }
        float _1768;
        if (_1511 > 0.0)
        {
            _1768 = abs((1.0 - _1501) / _1511);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1511 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1501 + 1.0) / _1511);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1768 = frontier_phi_23_19_ladder;
        }
        float _2025;
        if (_1514 > 0.0)
        {
            _2025 = abs((1.0 - _1505) / _1514);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1505 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2025 = frontier_phi_35_30_ladder;
        }
        float _2027 = isnan(_1768) ? _1542 : (isnan(_1542) ? _1768 : min(_1542, _1768));
        float _2028 = isnan(_2025) ? _2027 : (isnan(_2027) ? _2025 : min(_2027, _2025));
        float _2032 = (_2028 * _1508) + _1497;
        float _2033 = (_2028 * _1511) + _1501;
        float _2034 = (_2028 * _1514) + _1505;
        float _2035 = _2028 * 9.9999997473787516355514526367188e-05;
        float _2037 = (-1.0) - _2035;
        float _2039 = _2035 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2034 > _2039) || ((_2034 < _2037) || ((_2033 > _2039) || ((_2033 < _2037) || ((_2032 < _2037) || (_2032 > _2039))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2162 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2034, cbModelParam._m0[9u].z, fma(_2033, cbModelParam._m0[9u].y, _2032 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2034, cbModelParam._m0[10u].z, fma(_2033, cbModelParam._m0[10u].y, _2032 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2034, cbModelParam._m0[11u].z, fma(_2033, cbModelParam._m0[11u].y, _2032 * cbModelParam._m0[11u].x))), _1450);
            frontier_phi_13_35_ladder = _2162.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2162.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2162.x * cbModelParam._m0[1u].y;
        }
        _1530 = frontier_phi_13_35_ladder_2;
        _1532 = frontier_phi_13_35_ladder_1;
        _1534 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1518 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_638, _639, _640), _1450);
        _1530 = _1518.x * cbModelParam._m0[1u].y;
        _1532 = _1518.y * cbModelParam._m0[1u].y;
        _1534 = _1518.z * cbModelParam._m0[1u].y;
    }
    float _1538 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _466);
    float _1539 = isnan(_1538) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1538 : min(cbModelParam._m0[25u].w, _1538));
    float _1630;
    float _1632;
    float _1634;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1594 = fma(_701, cbModelParam._m0[21u].z, fma(_697, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _693)) + cbModelParam._m0[21u].w;
        float _1598 = fma(_701, cbModelParam._m0[22u].z, fma(_697, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _693)) + cbModelParam._m0[22u].w;
        float _1602 = fma(_701, cbModelParam._m0[23u].z, fma(_697, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _693)) + cbModelParam._m0[23u].w;
        float _1605 = fma(_640, cbModelParam._m0[21u].z, fma(_639, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _638));
        float _1608 = fma(_640, cbModelParam._m0[22u].z, fma(_639, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _638));
        float _1611 = fma(_640, cbModelParam._m0[23u].z, fma(_639, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _638));
        float _1773;
        if (_1605 > 0.0)
        {
            _1773 = abs((1.0 - _1594) / _1605);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1594 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1773 = frontier_phi_25_21_ladder;
        }
        float _2052;
        if (_1608 > 0.0)
        {
            _2052 = abs((1.0 - _1598) / _1608);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1608 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1598 + 1.0) / _1608);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2052 = frontier_phi_37_32_ladder;
        }
        float _2265;
        if (_1611 > 0.0)
        {
            _2265 = abs((1.0 - _1602) / _1611);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1611 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1602 + 1.0) / _1611);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2265 = frontier_phi_46_43_ladder;
        }
        float _2267 = isnan(_2052) ? _1773 : (isnan(_1773) ? _2052 : min(_1773, _2052));
        float _2268 = isnan(_2265) ? _2267 : (isnan(_2267) ? _2265 : min(_2267, _2265));
        float _2272 = (_2268 * _1605) + _1594;
        float _2273 = (_2268 * _1608) + _1598;
        float _2274 = (_2268 * _1611) + _1602;
        float _2275 = _2268 * 9.9999997473787516355514526367188e-05;
        float _2276 = (-1.0) - _2275;
        float _2278 = _2275 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2274 > _2278) || ((_2274 < _2276) || ((_2273 > _2278) || ((_2273 < _2276) || ((_2272 < _2276) || (_2272 > _2278))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2518 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2274, cbModelParam._m0[17u].z, fma(_2273, cbModelParam._m0[17u].y, _2272 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2274, cbModelParam._m0[18u].z, fma(_2273, cbModelParam._m0[18u].y, _2272 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2274, cbModelParam._m0[19u].z, fma(_2273, cbModelParam._m0[19u].y, _2272 * cbModelParam._m0[19u].x))), _1539);
            frontier_phi_22_46_ladder = _2518.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2518.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2518.x * cbModelParam._m0[1u].z;
        }
        _1630 = frontier_phi_22_46_ladder_2;
        _1632 = frontier_phi_22_46_ladder_1;
        _1634 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1614 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_638, _639, _640), _1539);
        _1630 = _1614.x * cbModelParam._m0[1u].z;
        _1632 = _1614.y * cbModelParam._m0[1u].z;
        _1634 = _1614.z * cbModelParam._m0[1u].z;
    }
    float _1647 = (((_664 * _615) + _665) * _630) * ((cbModelParam._m0[1u].w * (_1630 - _1530)) + _1530);
    float _1649 = (((_664 * _617) + _665) * _630) * ((cbModelParam._m0[1u].w * (_1632 - _1532)) + _1532);
    float _1651 = (((_664 * _618) + _665) * _630) * ((cbModelParam._m0[1u].w * (_1634 - _1534)) + _1534);
    float _1654 = fma(_1651, cbSceneParam._m0[89u].z, fma(_1649, cbSceneParam._m0[89u].y, _1647 * cbSceneParam._m0[89u].x));
    float _1657 = fma(_1651, cbSceneParam._m0[90u].z, fma(_1649, cbSceneParam._m0[90u].y, _1647 * cbSceneParam._m0[90u].x));
    float _1660 = fma(_1651, cbSceneParam._m0[91u].z, fma(_1649, cbSceneParam._m0[91u].y, _1647 * cbSceneParam._m0[91u].x));
    vec4 _1668 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_552, _553));
    float _1670 = _1668.w;
    float _1682 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1670);
    float _1683 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1670);
    float _1684 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1670);
    uvec4 _1688 = floatBitsToUint(cbInstanceData._m0[_590 + 5u]);
    uint _1690 = _1688.x * 14u;
    uint _1691 = _1690 + 13u;
    float _1698 = _630 + (-1.0);
    float _1703 = (cbLight._m0[_1691].x * _1698) + 1.0;
    float _1704 = (cbLight._m0[_1691].y * _1698) + 1.0;
    float _1705 = (cbLight._m0[_1691].z * _1698) + 1.0;
    float _1706 = (cbLight._m0[_1691].w * _1698) + 1.0;
    uint _1707 = _1690 + 5u;
    float _1713 = isnan(1.0) ? _1704 : (isnan(_1704) ? 1.0 : min(_1704, 1.0));
    uint _1717 = _1690 + 4u;
    float _1726 = isnan(1.0) ? _1703 : (isnan(_1703) ? 1.0 : min(_1703, 1.0));
    uint _1730 = _1690 | 1u;
    float _1741 = dot(vec3(cbLight._m0[_1690].xyz), vec3(_463, _464, _465));
    float _1744 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_463, _464, _465));
    float _3923 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
    float _3934 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
    float _1749 = (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * 0.3183098733425140380859375;
    float _1751 = (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * 0.3183098733425140380859375;
    float _1758 = ((cbLight._m0[_1707].x * _1713) * _1751) + (((cbLight._m0[_1717].x * _1682) * _1726) * _1749);
    float _1759 = ((_1713 * cbLight._m0[_1707].y) * _1751) + (((cbLight._m0[_1717].y * _1683) * _1726) * _1749);
    float _1760 = ((_1713 * cbLight._m0[_1707].z) * _1751) + (((cbLight._m0[_1717].z * _1684) * _1726) * _1749);
    uvec4 _1765 = floatBitsToUint(cbLight._m0[_1690 + 12u]);
    bool _1767 = _1765.x == 0u;
    float _1778;
    float _1780;
    float _1782;
    if (_1767)
    {
        _1778 = _1758;
        _1780 = _1759;
        _1782 = _1760;
    }
    else
    {
        uint _1786 = _1690 + 6u;
        float _1802 = (dot(vec3(cbLight._m0[_1690 + 2u].xyz), vec3(_463, _464, _465)) * 0.5) + 0.5;
        float _1803 = _1802 * _1802;
        float _3945 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1804 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1805 = isnan(1.0) ? _1705 : (isnan(_1705) ? 1.0 : min(_1705, 1.0));
        _1778 = (((cbLight._m0[_1786].x * 0.3183098733425140380859375) * _1804) * _1805) + _1758;
        _1780 = (((cbLight._m0[_1786].y * 0.3183098733425140380859375) * _1804) * _1805) + _1759;
        _1782 = (((cbLight._m0[_1786].z * 0.3183098733425140380859375) * _1804) * _1805) + _1760;
    }
    bool _1785 = _1765.y == 0u;
    float _1823;
    float _1825;
    float _1827;
    if (_1785)
    {
        _1823 = _1778;
        _1825 = _1780;
        _1827 = _1782;
    }
    else
    {
        uint _1996 = _1690 + 7u;
        float _2012 = (dot(vec3(cbLight._m0[_1690 + 3u].xyz), vec3(_463, _464, _465)) * 0.5) + 0.5;
        float _2013 = _2012 * _2012;
        float _3961 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
        float _2014 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _2015 = isnan(1.0) ? _1706 : (isnan(_1706) ? 1.0 : min(_1706, 1.0));
        _1823 = (((cbLight._m0[_1996].x * 0.3183098733425140380859375) * _2014) * _2015) + _1778;
        _1825 = (((cbLight._m0[_1996].y * 0.3183098733425140380859375) * _2014) * _2015) + _1780;
        _1827 = (((cbLight._m0[_1996].z * 0.3183098733425140380859375) * _2014) * _2015) + _1782;
    }
    uint _1830 = _1690 + 8u;
    float _1843 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1690].w)) * _466) * 0.949999988079071044921875);
    float _1844 = _1843 * _1843;
    float _1845 = cbLight._m0[_1690].x + _544;
    float _1846 = cbLight._m0[_1690].y + _545;
    float _1847 = cbLight._m0[_1690].z + _546;
    float _1851 = inversesqrt(dot(vec3(_1845, _1846, _1847), vec3(_1845, _1846, _1847)));
    float _1852 = _1851 * _1845;
    float _1853 = _1851 * _1846;
    float _1854 = _1851 * _1847;
    float _1855 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_1690].xyz));
    float _3977 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1858 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _3988 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _1859 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _1860 = dot(vec3(_463, _464, _465), vec3(_1852, _1853, _1854));
    float _3999 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1863 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _1864 = dot(vec3(cbLight._m0[_1690].xyz), vec3(_1852, _1853, _1854));
    float _4010 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1868 = _1844 * _1844;
    float _1872 = ((_1863 * _1863) * (_1868 + (-1.0))) + 1.0;
    float _1880 = exp2(log2(1.0 - (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) * 5.0);
    float _1881 = 0.959999978542327880859375 - _612;
    float _1883 = 0.959999978542327880859375 - _613;
    float _1884 = 0.959999978542327880859375 - _614;
    float _1891 = 1.0 - _1844;
    float _1902 = (0.5 / (((_1859 * ((_1858 * _1891) + _1844)) + 9.9999999392252902907785028219223e-09) + (((_1859 * _1891) + _1844) * _1858))) * _1858;
    float _4021 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1904 = (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1868 / ((_1872 * _1872) * 3.141590118408203125));
    uint _1918 = _1690 + 9u;
    float _1929 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1730].w)) * _466) * 0.949999988079071044921875);
    float _1930 = _1929 * _1929;
    float _1931 = cbLight._m0[_1730].x + _544;
    float _1932 = cbLight._m0[_1730].y + _545;
    float _1933 = cbLight._m0[_1730].z + _546;
    float _1937 = inversesqrt(dot(vec3(_1931, _1932, _1933), vec3(_1931, _1932, _1933)));
    float _1938 = _1937 * _1931;
    float _1939 = _1937 * _1932;
    float _1940 = _1937 * _1933;
    float _1941 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_1730].xyz));
    float _4032 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1944 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _1945 = dot(vec3(_463, _464, _465), vec3(_1938, _1939, _1940));
    float _4043 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1948 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _1949 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_1938, _1939, _1940));
    float _4054 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1953 = _1930 * _1930;
    float _1957 = ((_1948 * _1948) * (_1953 + (-1.0))) + 1.0;
    float _1964 = exp2(log2(1.0 - (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) * 5.0);
    float _1971 = 1.0 - _1930;
    float _1981 = (0.5 / (((_1859 * ((_1944 * _1971) + _1930)) + 9.9999999392252902907785028219223e-09) + (((_1859 * _1971) + _1930) * _1944))) * _1944;
    float _4065 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1983 = (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_1953 / ((_1957 * _1957) * 3.141590118408203125));
    float _1993 = (((((_1964 * _1881) + _615) * cbLight._m0[_1918].x) * _1983) * _1713) + ((((cbLight._m0[_1830].x * _1682) * ((_1880 * _1881) + _615)) * _1904) * _1726);
    float _1994 = (((((_1964 * _1883) + _617) * cbLight._m0[_1918].y) * _1983) * _1713) + ((((cbLight._m0[_1830].y * _1683) * ((_1880 * _1883) + _617)) * _1904) * _1726);
    float _1995 = (((((_1964 * _1884) + _618) * cbLight._m0[_1918].z) * _1983) * _1713) + ((((cbLight._m0[_1830].z * _1684) * ((_1880 * _1884) + _618)) * _1904) * _1726);
    float _2057;
    float _2059;
    float _2061;
    if (_1767)
    {
        _2057 = _1993;
        _2059 = _1994;
        _2061 = _1995;
    }
    else
    {
        uint _2063 = _1690 + 2u;
        uint _2067 = _1690 + 10u;
        float _2081 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2063].w)) * _466) * 0.949999988079071044921875);
        float _2082 = _2081 * _2081;
        float _2083 = cbLight._m0[_2063].x + _544;
        float _2084 = cbLight._m0[_2063].y + _545;
        float _2085 = cbLight._m0[_2063].z + _546;
        float _2089 = inversesqrt(dot(vec3(_2083, _2084, _2085), vec3(_2083, _2084, _2085)));
        float _2090 = _2089 * _2083;
        float _2091 = _2089 * _2084;
        float _2092 = _2089 * _2085;
        float _2093 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_2063].xyz));
        float _4076 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2096 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _2097 = dot(vec3(_463, _464, _465), vec3(_2090, _2091, _2092));
        float _4087 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2100 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _2101 = dot(vec3(cbLight._m0[_2063].xyz), vec3(_2090, _2091, _2092));
        float _4098 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2105 = _2082 * _2082;
        float _2109 = ((_2100 * _2100) * (_2105 + (-1.0))) + 1.0;
        float _2116 = exp2(log2(1.0 - (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) * 5.0);
        float _2123 = 1.0 - _2082;
        float _2133 = (0.5 / (((_1859 * ((_2096 * _2123) + _2082)) + 9.9999999392252902907785028219223e-09) + (((_1859 * _2123) + _2082) * _2096))) * _2096;
        float _4109 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2135 = (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_2105 / ((_2109 * _2109) * 3.141590118408203125));
        float _2136 = isnan(1.0) ? _1705 : (isnan(_1705) ? 1.0 : min(_1705, 1.0));
        _2057 = (((((_2116 * _1881) + _615) * cbLight._m0[_2067].x) * _2135) * _2136) + _1993;
        _2059 = (((((_2116 * _1883) + _617) * cbLight._m0[_2067].y) * _2135) * _2136) + _1994;
        _2061 = (((((_2116 * _1884) + _618) * cbLight._m0[_2067].z) * _2135) * _2136) + _1995;
    }
    float _2171;
    float _2173;
    float _2175;
    if (_1785)
    {
        _2171 = _2057;
        _2173 = _2059;
        _2175 = _2061;
    }
    else
    {
        uint _2182 = _1690 + 3u;
        uint _2186 = _1690 + 11u;
        float _2200 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2182].w)) * _466) * 0.949999988079071044921875);
        float _2201 = _2200 * _2200;
        float _2202 = cbLight._m0[_2182].x + _544;
        float _2203 = cbLight._m0[_2182].y + _545;
        float _2204 = cbLight._m0[_2182].z + _546;
        float _2208 = inversesqrt(dot(vec3(_2202, _2203, _2204), vec3(_2202, _2203, _2204)));
        float _2209 = _2208 * _2202;
        float _2210 = _2208 * _2203;
        float _2211 = _2208 * _2204;
        float _2212 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_2182].xyz));
        float _4125 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2215 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _2216 = dot(vec3(_463, _464, _465), vec3(_2209, _2210, _2211));
        float _4136 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2219 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _2220 = dot(vec3(cbLight._m0[_2182].xyz), vec3(_2209, _2210, _2211));
        float _4147 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2224 = _2201 * _2201;
        float _2228 = ((_2219 * _2219) * (_2224 + (-1.0))) + 1.0;
        float _2235 = exp2(log2(1.0 - (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) * 5.0);
        float _2242 = 1.0 - _2201;
        float _2252 = (0.5 / (((_1859 * ((_2215 * _2242) + _2201)) + 9.9999999392252902907785028219223e-09) + (((_1859 * _2242) + _2201) * _2215))) * _2215;
        float _4158 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2254 = (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_2224 / ((_2228 * _2228) * 3.141590118408203125));
        float _2255 = isnan(1.0) ? _1706 : (isnan(_1706) ? 1.0 : min(_1706, 1.0));
        _2171 = (((((_2235 * _1881) + _615) * cbLight._m0[_2186].x) * _2254) * _2255) + _2057;
        _2173 = (((((_2235 * _1883) + _617) * cbLight._m0[_2186].y) * _2254) * _2255) + _2059;
        _2175 = (((((_2235 * _1884) + _618) * cbLight._m0[_2186].z) * _2254) * _2255) + _2061;
    }
    float _2390;
    float _2392;
    float _2394;
    float _2396;
    float _2398;
    float _2400;
    if (_1688.y == 0u)
    {
        float _2330 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2331 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2330;
        float _2332 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2330;
        float _2333 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2330;
        uvec4 _2345 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2346 = _2345.x;
        uint _2357 = uint((float(_2345.y) * floor(float(uint(cbSceneParam._m0[85u].y * _553) / _2346))) + floor(float(uint(cbSceneParam._m0[85u].x * _552) / _2346)));
        float _2367 = (log2(_2333 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2368 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        uint _2371 = uint(isnan(14.0) ? _2368 : (isnan(_2368) ? 14.0 : min(_2368, 14.0)));
        uvec4 _2376 = texelFetch(g_lightClusterGridBuffer, int(((_2371 << 2u) + (_2357 << 6u)) >> 2u));
        uint _2377 = _2376.x;
        uint _2378 = _2345.z;
        float _2523;
        float _2525;
        float _2527;
        float _2529;
        float _2531;
        float _2533;
        if (((((1u << ((_2378 >> 4u) & 15u)) + 4294967295u) & _2377) == 0u) || ((_2378 & 240u) == 0u))
        {
            _2523 = 0.0;
            _2525 = 0.0;
            _2527 = 0.0;
            _2529 = 0.0;
            _2531 = 0.0;
            _2533 = 0.0;
        }
        else
        {
            float _2524;
            float _2526;
            float _2528;
            float _2530;
            float _2532;
            float _2534;
            float _2676 = 0.0;
            float _2677 = 0.0;
            float _2678 = 0.0;
            float _2679 = 0.0;
            float _2680 = 0.0;
            float _2681 = 0.0;
            uint _2682 = 0u;
            uint _2691;
            bool _2692;
            for (;;)
            {
                _2691 = texelFetch(g_lightClassification, int((((_2371 << 5u) + (_2357 << 9u)) + (_2682 << 2u)) >> 2u)).x;
                _2692 = _2691 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2692)
                {
                    frontier_phi_61_pred = _2676;
                    frontier_phi_61_pred_1 = _2681;
                    frontier_phi_61_pred_2 = _2680;
                    frontier_phi_61_pred_3 = _2679;
                    frontier_phi_61_pred_4 = _2678;
                    frontier_phi_61_pred_5 = _2677;
                }
                else
                {
                    float _2800;
                    float _2801;
                    float _2802;
                    float _2803;
                    float _2804;
                    float _2805;
                    uint _2806;
                    _2800 = _2676;
                    _2801 = _2677;
                    _2802 = _2678;
                    _2803 = _2679;
                    _2804 = _2680;
                    _2805 = _2681;
                    _2806 = _2691;
                    float _2732;
                    float _2733;
                    float _2734;
                    float _2735;
                    float _2736;
                    float _2737;
                    for (;;)
                    {
                        uint _2810 = uint(findLSB(_2806)) + (_2682 << 5u);
                        uint _2807 = (_2806 + 4294967295u) & _2806;
                        uint _2812 = _2810 * 48u;
                        vec4 _2826 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2812)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 3u)).x));
                        uint _2832 = (_2810 * 48u) + 4u;
                        vec4 _2845 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2832)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 3u)).x));
                        uint _2851 = (_2810 * 48u) + 8u;
                        vec3 _2862 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2851)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 2u)).x));
                        float _2866 = _2826.x - _2331;
                        float _2867 = _2826.y - _2332;
                        float _2868 = _2826.z - _2333;
                        float _2869 = dot(vec3(_2866, _2867, _2868), vec3(_2866, _2867, _2868));
                        float _2872 = inversesqrt(_2869);
                        float _2873 = _2872 * _2866;
                        float _2874 = _2872 * _2867;
                        float _2875 = _2872 * _2868;
                        float _2876 = dot(vec3(_571, _574, _577), vec3(_2873, _2874, _2875));
                        float _2881 = 1.0 - (_2869 * _2826.w);
                        float _4184 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                        float _2882 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
                        float _2883 = sqrt(_2869) * _2845.w;
                        float _2886 = 1.39999997615814208984375 / (_2883 + 1.39999997615814208984375);
                        float _2887 = _2886 * _2886;
                        float _2890 = ((1.0 - _2887) * _2876) + _2887;
                        float _2893 = _2883 * _2883;
                        float _2897 = ((isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0))) * _2882) / ((_2893 * 0.699999988079071044921875) + 1.0);
                        float _2901 = (-0.0) - _2331;
                        float _2902 = (-0.0) - _2332;
                        float _2903 = (-0.0) - _2333;
                        float _2907 = inversesqrt(dot(vec3(_2901, _2902, _2903), vec3(_2901, _2902, _2903)));
                        float _2908 = _2907 * _2901;
                        float _2909 = _2907 * _2902;
                        float _2910 = _2907 * _2903;
                        float _2918 = exp2(log2(1.0 / ((_2893 * 3.5) + 5.0)) * 0.25);
                        float _2919 = 1.0 - _646;
                        float _2926 = sqrt(1.0 - ((1.0 - (_2919 * _2919)) * (1.0 - (_2918 * _2918))));
                        float _2927 = _2926 * _2926;
                        float _2928 = _2927 * _2927;
                        float _2929 = _2908 + _2873;
                        float _2930 = _2909 + _2874;
                        float _2931 = _2910 + _2875;
                        float _2935 = inversesqrt(dot(vec3(_2929, _2930, _2931), vec3(_2929, _2930, _2931)));
                        float _2939 = dot(vec3(_571, _574, _577), vec3(_2908, _2909, _2910));
                        float _4200 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                        float _2942 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                        float _2943 = dot(vec3(_571, _574, _577), vec3(_2935 * _2929, _2935 * _2930, _2935 * _2931));
                        float _4211 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
                        float _2946 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
                        float _2950 = ((_2946 * _2946) * (_2928 + (-1.0))) + 1.0;
                        float _2951 = _2886 * _2927;
                        float _2952 = _2951 * _2951;
                        float _2955 = ((1.0 - _2952) * _2876) + _2952;
                        float _4222 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
                        float _2956 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
                        float _2957 = 1.0 - _2927;
                        float _2967 = (0.5 / (((_2956 * ((_2942 * _2957) + _2927)) + 9.9999999392252902907785028219223e-09) + (((_2956 * _2957) + _2927) * _2942))) * _2956;
                        float _4233 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
                        float _2978 = (((_2928 * 3.1415927410125732421875) * (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0)))) / ((_2950 * _2950) * ((_2893 * 2.1991131305694580078125) + 3.141590118408203125))) * _2882;
                        _2735 = (_2897 * _2845.x) + _2803;
                        _2736 = (_2897 * _2845.y) + _2804;
                        _2737 = (_2897 * _2845.z) + _2805;
                        _2732 = (_2978 * _2862.x) + _2800;
                        _2733 = (_2978 * _2862.y) + _2801;
                        _2734 = (_2978 * _2862.z) + _2802;
                        if (_2807 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2800 = _2732;
                            _2801 = _2733;
                            _2802 = _2734;
                            _2803 = _2735;
                            _2804 = _2736;
                            _2805 = _2737;
                            _2806 = _2807;
                        }
                    }
                    frontier_phi_61_pred = _2732;
                    frontier_phi_61_pred_1 = _2737;
                    frontier_phi_61_pred_2 = _2736;
                    frontier_phi_61_pred_3 = _2735;
                    frontier_phi_61_pred_4 = _2734;
                    frontier_phi_61_pred_5 = _2733;
                }
                _2524 = frontier_phi_61_pred;
                _2534 = frontier_phi_61_pred_1;
                _2532 = frontier_phi_61_pred_2;
                _2530 = frontier_phi_61_pred_3;
                _2528 = frontier_phi_61_pred_4;
                _2526 = frontier_phi_61_pred_5;
                uint _2683 = _2682 + 1u;
                if (_2683 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2676 = _2524;
                    _2677 = _2526;
                    _2678 = _2528;
                    _2679 = _2530;
                    _2680 = _2532;
                    _2681 = _2534;
                    _2682 = _2683;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2523 = _2524;
            _2525 = _2526;
            _2527 = _2528;
            _2529 = _2530;
            _2531 = _2532;
            _2533 = _2534;
        }
        uvec4 _2537 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2538 = _2537.z;
        uint _2540 = (_2538 >> 8u) & 15u;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        float _2652;
        float _2654;
        if (((4294967295u << _2540) & _2377) == 0u)
        {
            _2644 = _2523;
            _2646 = _2525;
            _2648 = _2527;
            _2650 = _2529;
            _2652 = _2531;
            _2654 = _2533;
        }
        else
        {
            float _2669 = inversesqrt(dot(vec3(_2331, _2332, _2333), vec3(_2331, _2332, _2333)));
            float _2670 = _2669 * _2331;
            float _2671 = _2669 * _2332;
            float _2672 = _2669 * _2333;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2540 < ((_2538 >> 12u) & 15u))
            {
                float _2645;
                float _2647;
                float _2649;
                float _2651;
                float _2653;
                float _2655;
                float _2783 = _2523;
                float _2784 = _2525;
                float _2785 = _2527;
                float _2786 = _2529;
                float _2787 = _2531;
                float _2788 = _2533;
                uint _2789 = _2540;
                uint _2798;
                bool _2799;
                for (;;)
                {
                    _2798 = texelFetch(g_lightClassification, int((((_2371 << 5u) + (_2357 << 9u)) + (_2789 << 2u)) >> 2u)).x;
                    _2799 = _2798 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2799)
                    {
                        frontier_phi_67_pred = _2786;
                        frontier_phi_67_pred_1 = _2787;
                        frontier_phi_67_pred_2 = _2788;
                        frontier_phi_67_pred_3 = _2785;
                        frontier_phi_67_pred_4 = _2784;
                        frontier_phi_67_pred_5 = _2783;
                    }
                    else
                    {
                        float _2983;
                        float _2984;
                        float _2985;
                        float _2986;
                        float _2987;
                        float _2988;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _2996 = _2783;
                        float _2997 = _2784;
                        float _2998 = _2785;
                        float _2999 = _2786;
                        float _3000 = _2787;
                        float _3001 = _2788;
                        uint _3002 = _2798;
                        uint _3003;
                        vec4 _3028;
                        float _3029;
                        vec4 _3044;
                        vec3 _3056;
                        vec4 _3071;
                        vec4 _3087;
                        float _3134;
                        bool _3135;
                        for (;;)
                        {
                            uint _3013 = ((_2789 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3002));
                            _3003 = (_3002 + 4294967295u) & _3002;
                            uint _3015 = _3013 * 40u;
                            _3028 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3015)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 3u)).x));
                            _3029 = _3028.w;
                            uint _3031 = (_3013 * 40u) + 4u;
                            _3044 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 3u)).x));
                            uint _3046 = (_3013 * 40u) + 8u;
                            _3056 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x));
                            uint _3058 = (_3013 * 40u) + 16u;
                            _3071 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 3u)).x));
                            uint _3074 = (_3013 * 40u) + 20u;
                            _3087 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 3u)).x));
                            uint _3090 = (_3013 * 40u) + 24u;
                            vec4 _3103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 3u)).x));
                            uint _3109 = (_3013 * 40u) + 28u;
                            vec4 _3122 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3109)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 3u)).x));
                            _3134 = fma(_2333, _3122.z, fma(_2332, _3122.y, _3122.x * _2331)) + _3122.w;
                            _3135 = !((fma(_2333, _3103.z, fma(_2332, _3103.y, _3103.x * _2331)) + _3103.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3135)
                            {
                                float _3162 = _3028.x - _2331;
                                float _3163 = _3028.y - _2332;
                                float _3164 = _3028.z - _2333;
                                float _3165 = dot(vec3(_3162, _3163, _3164), vec3(_3162, _3163, _3164));
                                float _3168 = inversesqrt(_3165);
                                float _3169 = _3168 * _3162;
                                float _3170 = _3168 * _3163;
                                float _3171 = _3168 * _3164;
                                float _3175 = 1.0 - (_3165 / (_3029 * _3029));
                                float _4244 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                                float _3176 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
                                float _3180 = sqrt(_3165) * _3044.w;
                                float _3182 = 1.39999997615814208984375 / (_3180 + 1.39999997615814208984375);
                                float _3183 = _3182 * _3182;
                                float _3186 = ((1.0 - _3183) * dot(vec3(_3169, _3170, _3171), vec3(_571, _574, _577))) + _3183;
                                float _3189 = _3180 * _3180;
                                float _3193 = (fma(_2333, _3071.z, fma(_2332, _3071.y, _3071.x * _2331)) + _3071.w) / _3134;
                                float _3194 = (fma(_2333, _3087.z, fma(_2332, _3087.y, _3087.x * _2331)) + _3087.w) / _3134;
                                float _3198 = 1.0 - dot(vec2(_3193, _3194), vec2(_3193, _3194));
                                float _4260 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                                float _3199 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
                                float _3200 = _3199 * (((isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0))) * _3176) / ((_3189 * 0.699999988079071044921875) + 1.0));
                                float _3212 = exp2(log2(1.0 / ((_3189 * 3.5) + 5.0)) * 0.25);
                                float _3213 = 1.0 - _646;
                                float _3220 = sqrt(1.0 - ((1.0 - (_3213 * _3213)) * (1.0 - (_3212 * _3212))));
                                float _3221 = _3220 * _3220;
                                float _3222 = _3221 * _3221;
                                float _3223 = _3169 - _2670;
                                float _3224 = _3170 - _2671;
                                float _3225 = _3171 - _2672;
                                float _3229 = inversesqrt(dot(vec3(_3223, _3224, _3225), vec3(_3223, _3224, _3225)));
                                float _3233 = dot(vec3(_571, _574, _577), vec3((-0.0) - _2670, (-0.0) - _2671, (-0.0) - _2672));
                                float _4271 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                                float _3236 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                                float _3237 = dot(vec3(_571, _574, _577), vec3(_3229 * _3223, _3229 * _3224, _3229 * _3225));
                                float _4282 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                                float _3240 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
                                float _3244 = ((_3240 * _3240) * (_3222 + (-1.0))) + 1.0;
                                float _3245 = _3182 * _3221;
                                float _3246 = _3245 * _3245;
                                float _3252 = ((1.0 - _3246) * dot(vec3(_571, _574, _577), vec3(_3169, _3170, _3171))) + _3246;
                                float _4293 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                                float _3253 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                                float _3254 = 1.0 - _3221;
                                float _3264 = (0.5 / (((_3253 * ((_3236 * _3254) + _3221)) + 9.9999999392252902907785028219223e-09) + (((_3253 * _3254) + _3221) * _3236))) * _3253;
                                float _4304 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                                float _3274 = (_3199 * _3176) * (((_3222 * 3.1415927410125732421875) * (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) / ((_3244 * _3244) * ((_3189 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3274 * _3056.x;
                                frontier_phi_73_pred_1 = _3274 * _3056.y;
                                frontier_phi_73_pred_2 = _3200 * _3044.z;
                                frontier_phi_73_pred_3 = _3200 * _3044.y;
                                frontier_phi_73_pred_4 = _3200 * _3044.x;
                                frontier_phi_73_pred_5 = _3274 * _3056.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3278 = frontier_phi_73_pred;
                            _3279 = frontier_phi_73_pred_1;
                            _3283 = frontier_phi_73_pred_2;
                            _3282 = frontier_phi_73_pred_3;
                            _3281 = frontier_phi_73_pred_4;
                            _3280 = frontier_phi_73_pred_5;
                            _2986 = _3281 + _2999;
                            _2987 = _3282 + _3000;
                            _2988 = _3283 + _3001;
                            _2983 = _3278 + _2996;
                            _2984 = _3279 + _2997;
                            _2985 = _3280 + _2998;
                            if (_3003 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2996 = _2983;
                                _2997 = _2984;
                                _2998 = _2985;
                                _2999 = _2986;
                                _3000 = _2987;
                                _3001 = _2988;
                                _3002 = _3003;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2986;
                        frontier_phi_67_pred_1 = _2987;
                        frontier_phi_67_pred_2 = _2988;
                        frontier_phi_67_pred_3 = _2985;
                        frontier_phi_67_pred_4 = _2984;
                        frontier_phi_67_pred_5 = _2983;
                    }
                    _2651 = frontier_phi_67_pred;
                    _2653 = frontier_phi_67_pred_1;
                    _2655 = frontier_phi_67_pred_2;
                    _2649 = frontier_phi_67_pred_3;
                    _2647 = frontier_phi_67_pred_4;
                    _2645 = frontier_phi_67_pred_5;
                    uint _2790 = _2789 + 1u;
                    if (_2790 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2783 = _2645;
                        _2784 = _2647;
                        _2785 = _2649;
                        _2786 = _2651;
                        _2787 = _2653;
                        _2788 = _2655;
                        _2789 = _2790;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2653;
                frontier_phi_55_56_ladder_1 = _2655;
                frontier_phi_55_56_ladder_2 = _2651;
                frontier_phi_55_56_ladder_3 = _2649;
                frontier_phi_55_56_ladder_4 = _2647;
                frontier_phi_55_56_ladder_5 = _2645;
            }
            else
            {
                frontier_phi_55_56_ladder = _2531;
                frontier_phi_55_56_ladder_1 = _2533;
                frontier_phi_55_56_ladder_2 = _2529;
                frontier_phi_55_56_ladder_3 = _2527;
                frontier_phi_55_56_ladder_4 = _2525;
                frontier_phi_55_56_ladder_5 = _2523;
            }
            _2644 = frontier_phi_55_56_ladder_5;
            _2646 = frontier_phi_55_56_ladder_4;
            _2648 = frontier_phi_55_56_ladder_3;
            _2650 = frontier_phi_55_56_ladder_2;
            _2652 = frontier_phi_55_56_ladder;
            _2654 = frontier_phi_55_56_ladder_1;
        }
        float _2659 = isnan(1.0) ? _630 : (isnan(_630) ? 1.0 : min(_630, 1.0));
        _2390 = (_2659 * _2650) + _1823;
        _2392 = (_2659 * _2652) + _1825;
        _2394 = (_2659 * _2654) + _1827;
        _2396 = ((_2644 * _615) * _2659) + _2171;
        _2398 = ((_2646 * _617) * _2659) + _2173;
        _2400 = ((_2648 * _618) * _2659) + _2175;
    }
    else
    {
        _2390 = _1823;
        _2392 = _1825;
        _2394 = _1827;
        _2396 = _2171;
        _2398 = _2173;
        _2400 = _2175;
    }
    uint _2406 = _591 + uint(cbMatDynParam._m0[0u].w);
    float _2412 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].y;
    float _2418 = (((((_2412 * cbMtdParam._m0[10u].x) * _349.x) * _372) * _449) * (((1.0 - _426) * cbMtdParam._m0[16u].y) + _426)) * cbInstanceData._m0[_2406].x;
    float _2424 = (((((_2412 * cbMtdParam._m0[10u].y) * _349.y) * _372) * _449) * (((1.0 - _428) * cbMtdParam._m0[16u].y) + _428)) * cbInstanceData._m0[_2406].y;
    float _2430 = (((((_2412 * cbMtdParam._m0[10u].z) * _349.z) * _372) * _449) * (((1.0 - _430) * cbMtdParam._m0[16u].y) + _430)) * cbInstanceData._m0[_2406].z;
    float _4320 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _4331 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _4342 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _2447 = (((isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_2390 + ((isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0))) * _630))) + ((_2396 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _1439)) * cbPerFrame._m0[3u].x)) + _2418;
    float _2449 = (_2424 + ((_2398 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _1439)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_2392 + ((isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0))) * _630)));
    float _2451 = (_2430 + ((_2400 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _1439)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_2394 + ((isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0))) * _630)));
    float _4368 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2464 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
    uint _2465 = _590 + 6u;
    float _2473 = _552 / cbSceneParam._m0[86u].x;
    float _2474 = _553 / cbSceneParam._m0[86u].y;
    vec4 _2488 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2473, _2474, (log2((isnan(cbSceneParam._m0[77u].w) ? _486 : (isnan(_486) ? cbSceneParam._m0[77u].w : min(_486, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2490 = _2488.x;
    float _2491 = _2488.y;
    float _2492 = _2488.z;
    float _2493 = _2488.w;
    float _2585;
    float _2587;
    float _2589;
    float _2591;
    if (_486 > cbSceneParam._m0[78u].w)
    {
        float _2548 = isnan(_486) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _486 : min(cbSceneParam._m0[80u].w, _486));
        float _2549 = _2548 / _486;
        float _2560 = _2549 * _537;
        float _2561 = _538 * _2549;
        float _2562 = (-0.0) - _2561;
        float _2563 = _2549 * _539;
        float _2565 = (cbSceneParam._m0[77u].w * _2562) / _2548;
        float _2566 = _2565 + cbSceneParam._m0[79u].w;
        float _2567 = cbSceneParam._m0[79u].w - _2561;
        float _2573 = sqrt(((_2560 * _2560) + (_2561 * _2561)) + (_2563 * _2563));
        float _2576 = (1.0 - (cbSceneParam._m0[77u].w / _2548)) * _2573;
        float _2581 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2583 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2745;
        if (abs((_2562 - _2565) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2745 = ((((_2566 > 0.0) ? exp2(_2581 * _2566) : (2.0 - exp2(_2583 * _2566))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2576;
        }
        else
        {
            float _2705 = 1.0 / cbSceneParam._m0[80u].x;
            float _2706 = isnan(_2567) ? _2566 : (isnan(_2566) ? _2567 : max(_2566, _2567));
            float _2707 = isnan(_2567) ? _2566 : (isnan(_2566) ? _2567 : min(_2566, _2567));
            float _2716 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : min(_2706, 0.0));
            float _2717 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : min(_2707, 0.0));
            _2745 = ((abs(_2573 / _2562) * cbSceneParam._m0[80u].y) * ((((_2716 - _2717) * 2.0) - ((exp2(_2581 * (isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0)))) - exp2(_2581 * (isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0))))) * _2705)) - ((exp2(_2583 * _2716) - exp2(_2583 * _2717)) * _2705))) + (_2576 * cbSceneParam._m0[80u].z);
        }
        vec4 _2747 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2473, _2474, 1.0), 0.0);
        float _2756 = exp2((_2745 * (-1.44269502162933349609375)) * (1.0 - _2747.w));
        float _2757 = log2(_2756);
        float _2773 = log2(_2493);
        _2585 = (exp2(_2773 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2757 * cbSceneParam._m0[78u].x)) * _2747.x) / cbSceneParam._m0[78u].x)) + _2490;
        _2587 = (exp2(_2773 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2757 * cbSceneParam._m0[78u].y)) * _2747.y) / cbSceneParam._m0[78u].y)) + _2491;
        _2589 = (exp2(_2773 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2757 * cbSceneParam._m0[78u].z)) * _2747.z) / cbSceneParam._m0[78u].z)) + _2492;
        _2591 = _2756 * _2493;
    }
    else
    {
        _2585 = _2490;
        _2587 = _2491;
        _2589 = _2492;
        _2591 = _2493;
    }
    float _2603 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2604 = _2603 == 3.0;
    float _2605 = log2(_2591);
    float _2609 = exp2(_2605 * cbSceneParam._m0[78u].x);
    float _2610 = exp2(_2605 * cbSceneParam._m0[78u].y);
    float _2611 = exp2(_2605 * cbSceneParam._m0[78u].z);
    float _2612 = _2609 * (isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0)));
    float _2613 = _2610 * (isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0)));
    float _2614 = _2611 * (isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0)));
    float _2623 = (_2603 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2623 * (_2604 ? _2612 : (_2612 + (cbSceneParam._m0[72u].w * _2585)));
    SV_Target.y = _2623 * (_2604 ? _2613 : (_2613 + (cbSceneParam._m0[72u].w * _2587)));
    SV_Target.z = _2623 * (_2604 ? _2614 : (_2614 + (cbSceneParam._m0[72u].w * _2589)));
    SV_Target.w = cbInstanceData._m0[_2465].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2418) * _2464) * _2609) * _2623;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2424) * _2464) * _2610) * _2623;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2430) * _2464) * _2611) * _2623;
    SV_Target_1.w = cbInstanceData._m0[_2465].w;
}


