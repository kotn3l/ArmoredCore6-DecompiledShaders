#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1091;
float _3508;
float _3509;
float _3510;
float _3511;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _247 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _253 = _247.x * cbMtdParam._m0[9u].x;
    float _254 = _247.y * cbMtdParam._m0[9u].y;
    float _255 = _247.z * cbMtdParam._m0[9u].z;
    vec4 _278 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _298 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _301 = _298.x + 0.00999999977648258209228515625;
    float _309 = (TEXCOORD_8 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_8)) * _301)) * (cbMtdParam._m0[15u].z + 1.0);
    float _3520 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _310 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
    float _317 = (_310 * ((_278.x * cbMtdParam._m0[12u].x) - _253)) + _253;
    float _318 = (_310 * ((_278.y * cbMtdParam._m0[12u].y) - _254)) + _254;
    float _319 = (_310 * ((_278.z * cbMtdParam._m0[12u].z) - _255)) + _255;
    vec4 _331 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    vec4 _354 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _358 = _354.z;
    float _361 = (_354.x * 2.0) + (-1.0);
    float _362 = (_354.y * 2.0) + (-1.0);
    float _363 = dot(vec2(_361, _362), vec2(_361, _362));
    float _3531 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _368 = sqrt(1.0 - (isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0))));
    float _376 = (((_331.z - _358) * TEXCOORD_8) * cbMtdParam._m0[16u].x) + _358;
    vec4 _410 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _424 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3542 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
    float _433 = (((_425 * _425) * (3.0 - (_425 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _442 = cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x;
    float _450 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3553 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _451 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
    float _455 = (_451 * _451) * (3.0 - (_451 * 2.0));
    float _456 = _455 * cbMtdParam._m0[16u].w;
    float _457 = _455 * cbMtdParam._m0[17u].x;
    float _458 = sin(_442);
    float _459 = cos(_442);
    float _460 = TEXCOORD.z - _456;
    float _461 = TEXCOORD.w - _457;
    vec4 _481 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_456 + fma(_461, (-0.0) - _458, _460 * _459))) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (fma(_461, _459, _460 * _458) + _457)) + cbTextureTilingScale._m0[0u].w));
    float _487 = (cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].w) * _481.x;
    float _489 = (cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].w) * _481.y;
    float _491 = (cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].w) * _481.z;
    float _507 = (TEXCOORD_5.x - ((_301 * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[16u].z)) * (cbMtdParam._m0[13u].x + 1.0);
    float _3564 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _508 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
    float _514 = ((((_331.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[15u].x) + _361;
    float _515 = ((((_331.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[15u].x) + _362;
    float _518 = fma(_368, _218 * NORMAL.x, fma(_515, _225 * TANGENT.x, (_211 * _203) * _514));
    float _521 = fma(_368, _218 * NORMAL.y, fma(_515, _225 * TANGENT.y, (_211 * _204) * _514));
    float _524 = fma(_368, _218 * NORMAL.z, fma(_515, _225 * TANGENT.z, (_211 * _205) * _514));
    float _528 = inversesqrt(dot(vec3(_518, _521, _524), vec3(_518, _521, _524)));
    float _529 = _528 * _518;
    float _530 = _528 * _521;
    float _531 = _528 * _524;
    float _3575 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _532 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
    float _3586 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3597 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3608 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _551 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _592 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _602 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _592);
    float _603 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _592);
    float _604 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _592);
    float _608 = inversesqrt(dot(vec3(_602, _603, _604), vec3(_602, _603, _604)));
    float _609 = _602 * _608;
    float _610 = _603 * _608;
    float _611 = _604 * _608;
    vec4 _616 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _618 = _616.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _771 = sqrt(((_602 * _602) + (_603 * _603)) + (_604 * _604));
        float _777 = (cbMatDynParam._m0[5u].x * _771) + cbMatDynParam._m0[5u].y;
        float _3619 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _778 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _782 = (cbMatDynParam._m0[5u].z * _771) + cbMatDynParam._m0[5u].w;
        float _3630 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) - _778)) + _778) < ((_618 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _629 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _630 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _648 = fma(_531, cbSceneParam._m0[5u].z, fma(_530, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _529));
    float _651 = fma(_531, cbSceneParam._m0[6u].z, fma(_530, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _529));
    float _654 = fma(_531, cbSceneParam._m0[7u].z, fma(_530, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _529));
    uint _667 = uint(roundEven(NORMAL.w)) * 13u;
    uint _668 = _667 + 9u;
    uint _669 = _668 + uint(cbMatDynParam._m0[0u].w);
    float _675 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0)))) * cbInstanceData._m0[_669].x;
    float _676 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0)))) * cbInstanceData._m0[_669].y;
    float _677 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0)))) * cbInstanceData._m0[_669].z;
    float _3641 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _678 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
    float _3652 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _679 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _3663 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _680 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    vec4 _689 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _629, cbSceneParam._m0[86u].y * _630));
    float _692 = _689.x * TEXCOORD_5.w;
    float _693 = dot(vec3(_529, _530, _531), vec3(_609, _610, _611));
    float _696 = _693 * 2.0;
    float _700 = (_696 * _529) - _609;
    float _701 = (_696 * _530) - _610;
    float _702 = (_696 * _531) - _611;
    float _706 = abs(dot(vec3(_609, _610, _611), vec3(_529, _530, _531)));
    float _3674 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _708 = sqrt(_532);
    float _720 = exp2((_708 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_708 * 3.0));
    float _752 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _756 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _760 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1090;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _815 = fma(_760, cbModelParam._m0[26u].z, fma(_756, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _752));
        float _819 = fma(_760, cbModelParam._m0[27u].z, fma(_756, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _752));
        float _823 = fma(_760, cbModelParam._m0[28u].z, fma(_756, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _752));
        float _848 = _752 + _529;
        float _849 = _756 + _530;
        float _850 = _760 + _531;
        float _860 = fma(_850, cbModelParam._m0[26u].z, fma(_849, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _848)) - _815;
        float _861 = fma(_850, cbModelParam._m0[27u].z, fma(_849, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _848)) - _819;
        float _862 = fma(_850, cbModelParam._m0[28u].z, fma(_849, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _848)) - _823;
        float _866 = inversesqrt(dot(vec3(_860, _861, _862), vec3(_860, _861, _862)));
        float _879 = ((_866 * _860) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_815 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _880 = ((_866 * _861) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_819 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _881 = ((_866 * _862) / cbModelParam._m0[34u].z) + ((((((_823 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _884 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_879, _880, _881), 0.0);
        vec4 _891 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_879, _880, _881), 0.0);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_879, _880, _881), 0.0);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_879, _880, _881), 0.0);
        float _918 = exp2((_884.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_884.x + (-0.5));
        float _920 = _918 * (_884.y + (-0.5));
        float _921 = _918 * (_884.z + (-0.5));
        float _928 = exp2((_891.w + (-0.5)) * 20.0) * 2.0;
        float _929 = _928 * (_891.x + (-0.5));
        float _930 = _928 * (_891.y + (-0.5));
        float _931 = _928 * (_891.z + (-0.5));
        float _938 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _939 = _938 * (_898.x + (-0.5));
        float _940 = _938 * (_898.y + (-0.5));
        float _941 = _938 * (_898.z + (-0.5));
        float _948 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _949 = _948 * (_905.x + (-0.5));
        float _950 = _948 * (_905.y + (-0.5));
        float _951 = _948 * (_905.z + (-0.5));
        float _952 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _955 = _919 * 0.5;
        float _956 = _929 * 0.5;
        float _957 = _939 * 0.5;
        float _958 = dot(vec3(_955, _956, _957), vec3(_955, _956, _957));
        float _963 = (_958 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_958);
        float _972 = (dot(vec3(_529, _530, _531), vec3(_963 * _955, _963 * _956, _963 * _957)) + 1.0) * 0.5;
        float _3700 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _982 = sqrt(((_956 * _956) + (_955 * _955)) + (_957 * _957)) / (_952 + 9.9999997473787516355514526367188e-06);
        float _3711 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _984 = _983 * 2.0;
        float _988 = (1.0 - _983) / (_983 + 1.0);
        float _3722 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _998 = ((((1.0 - _989) * (_984 + 2.0)) * exp2(log2(isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * (_984 + 1.0))) + _989) * _952;
        float _999 = _920 * 0.5;
        float _1000 = _930 * 0.5;
        float _1001 = _940 * 0.5;
        float _1002 = dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001));
        float _1007 = (_1002 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1002);
        float _1015 = (dot(vec3(_529, _530, _531), vec3(_1007 * _999, _1007 * _1000, _1007 * _1001)) + 1.0) * 0.5;
        float _3733 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1024 = sqrt(((_1000 * _1000) + (_999 * _999)) + (_1001 * _1001)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _3744 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1026 = _1025 * 2.0;
        float _1030 = (1.0 - _1025) / (_1025 + 1.0);
        float _3755 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1040 = ((((1.0 - _1031) * (_1026 + 2.0)) * exp2(log2(isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_1026 + 1.0))) + _1031) * _953;
        float _1041 = _921 * 0.5;
        float _1042 = _931 * 0.5;
        float _1043 = _941 * 0.5;
        float _1044 = dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043));
        float _1049 = (_1044 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1044);
        float _1057 = (dot(vec3(_529, _530, _531), vec3(_1049 * _1041, _1049 * _1042, _1049 * _1043)) + 1.0) * 0.5;
        float _3766 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1066 = sqrt(((_1042 * _1042) + (_1041 * _1041)) + (_1043 * _1043)) / (_954 + 9.9999997473787516355514526367188e-06);
        float _3777 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _3788 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * (_1068 + 1.0))) + _1073) * _954;
        _1090 = _921;
        _1092 = _920;
        _1093 = _919;
        _1094 = _931;
        _1095 = _930;
        _1096 = _929;
        _1097 = _941;
        _1098 = _940;
        _1099 = _939;
        _1100 = _954;
        _1101 = _953;
        _1102 = _952;
        _1103 = cbModelParam._m0[36u].z * (isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0)));
        _1104 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0)));
        _1105 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
    }
    else
    {
        _1090 = _1091;
        _1092 = _1091;
        _1093 = _1091;
        _1094 = _1091;
        _1095 = _1091;
        _1096 = _1091;
        _1097 = _1091;
        _1098 = _1091;
        _1099 = _1091;
        _1100 = _1091;
        _1101 = _1091;
        _1102 = _1091;
        _1103 = 0.0;
        _1104 = 0.0;
        _1105 = 0.0;
    }
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1134 = fma(_760, cbModelParam._m0[30u].z, fma(_756, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _752));
        float _1138 = fma(_760, cbModelParam._m0[31u].z, fma(_756, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _752));
        float _1142 = fma(_760, cbModelParam._m0[32u].z, fma(_756, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _752));
        float _1165 = _752 + _529;
        float _1166 = _756 + _530;
        float _1167 = _760 + _531;
        float _1177 = fma(_1167, cbModelParam._m0[30u].z, fma(_1166, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1165)) - _1134;
        float _1178 = fma(_1167, cbModelParam._m0[31u].z, fma(_1166, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1165)) - _1138;
        float _1179 = fma(_1167, cbModelParam._m0[32u].z, fma(_1166, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1165)) - _1142;
        float _1183 = inversesqrt(dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179)));
        float _1196 = ((_1183 * _1177) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1134 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1197 = ((_1183 * _1178) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1138 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1198 = ((_1183 * _1179) / cbModelParam._m0[35u].z) + ((((((_1142 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        float _1233 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1200.x + (-0.5));
        float _1235 = _1233 * (_1200.y + (-0.5));
        float _1236 = _1233 * (_1200.z + (-0.5));
        float _1243 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1207.x + (-0.5));
        float _1245 = _1243 * (_1207.y + (-0.5));
        float _1246 = _1243 * (_1207.z + (-0.5));
        float _1253 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1214.x + (-0.5));
        float _1255 = _1253 * (_1214.y + (-0.5));
        float _1256 = _1253 * (_1214.z + (-0.5));
        float _1263 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1221.x + (-0.5));
        float _1265 = _1263 * (_1221.y + (-0.5));
        float _1266 = _1263 * (_1221.z + (-0.5));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = _1234 * 0.5;
        float _1271 = _1244 * 0.5;
        float _1272 = _1254 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1286 = (dot(vec3(_529, _530, _531), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _3829 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1295 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _3840 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _3851 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1297 + 1.0))) + _1302) * _1267;
        float _1312 = _1235 * 0.5;
        float _1313 = _1245 * 0.5;
        float _1314 = _1255 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1328 = (dot(vec3(_529, _530, _531), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1337 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _3884 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1339 + 1.0))) + _1344) * _1268;
        float _1354 = _1236 * 0.5;
        float _1355 = _1246 * 0.5;
        float _1356 = _1256 * 0.5;
        float _1357 = dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356));
        float _1362 = (_1357 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1357);
        float _1370 = (dot(vec3(_529, _530, _531), vec3(_1362 * _1354, _1362 * _1355, _1362 * _1356)) + 1.0) * 0.5;
        float _3895 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1379 = sqrt(((_1355 * _1355) + (_1354 * _1354)) + (_1356 * _1356)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _3906 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1381 = _1380 * 2.0;
        float _1385 = (1.0 - _1380) / (_1380 + 1.0);
        float _3917 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1395 = ((((1.0 - _1386) * (_1381 + 2.0)) * exp2(log2(isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_1381 + 1.0))) + _1386) * _1269;
        _1403 = _1236;
        _1404 = _1235;
        _1405 = _1234;
        _1406 = _1246;
        _1407 = _1245;
        _1408 = _1244;
        _1409 = _1256;
        _1410 = _1255;
        _1411 = _1254;
        _1412 = _1269;
        _1413 = _1268;
        _1414 = _1267;
        _1415 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
        _1416 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
        _1417 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)));
    }
    else
    {
        _1403 = _1091;
        _1404 = _1091;
        _1405 = _1091;
        _1406 = _1091;
        _1407 = _1091;
        _1408 = _1091;
        _1409 = _1091;
        _1410 = _1091;
        _1411 = _1091;
        _1412 = _1091;
        _1413 = _1091;
        _1414 = _1091;
        _1415 = 0.0;
        _1416 = 0.0;
        _1417 = 0.0;
    }
    float _1427 = (cbModelParam._m0[1u].x * (_1415 - _1103)) + _1103;
    float _1428 = (cbModelParam._m0[1u].x * (_1416 - _1104)) + _1104;
    float _1429 = (cbModelParam._m0[1u].x * (_1417 - _1105)) + _1105;
    float _1450 = fma(_1429, cbSceneParam._m0[89u].z, fma(_1428, cbSceneParam._m0[89u].y, _1427 * cbSceneParam._m0[89u].x));
    float _1453 = fma(_1429, cbSceneParam._m0[90u].z, fma(_1428, cbSceneParam._m0[90u].y, _1427 * cbSceneParam._m0[90u].x));
    float _1456 = fma(_1429, cbSceneParam._m0[91u].z, fma(_1428, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1427));
    float _1471 = _700 * 0.5;
    float _1472 = _701 * 0.5;
    float _1473 = _702 * 0.5;
    float _1474 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1405, _1408, _1411, _1414));
    float _1477 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1404, _1407, _1410, _1413));
    float _1480 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1403, _1406, _1409, _1412));
    float _1514;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1487 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1090, _1094, _1097, _1100));
        float _1491 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1092, _1095, _1098, _1101));
        float _1495 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1093, _1096, _1099, _1102));
        float _1502 = dot(vec4(cbModelParam._m0[39u]), vec4(_1471, _1472, _1473, 1.0));
        _1514 = dot(vec3(isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)), isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)), isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1502) ? 0.0 : (isnan(0.0) ? _1502 : max(0.0, _1502))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1514 = 1.0;
    }
    float _1525;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1516 = dot(vec4(cbModelParam._m0[40u]), vec4(_1471, _1472, _1473, 1.0));
        _1525 = dot(vec3(isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)), isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)), isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1516) ? 0.0 : (isnan(0.0) ? _1516 : max(0.0, _1516))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1525 = 1.0;
    }
    float _1529 = (_1525 * cbModelParam._m0[1u].x) + (_1514 * (1.0 - cbModelParam._m0[1u].x));
    float _1539 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _532);
    float _1540 = isnan(_1539) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1539 : min(cbModelParam._m0[25u].z, _1539));
    float _1620;
    float _1622;
    float _1624;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1587 = fma(_760, cbModelParam._m0[13u].z, fma(_756, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _752)) + cbModelParam._m0[13u].w;
        float _1591 = fma(_760, cbModelParam._m0[14u].z, fma(_756, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _752)) + cbModelParam._m0[14u].w;
        float _1595 = fma(_760, cbModelParam._m0[15u].z, fma(_756, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _752)) + cbModelParam._m0[15u].w;
        float _1598 = fma(_702, cbModelParam._m0[13u].z, fma(_701, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _700));
        float _1601 = fma(_702, cbModelParam._m0[14u].z, fma(_701, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _700));
        float _1604 = fma(_702, cbModelParam._m0[15u].z, fma(_701, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _700));
        float _1632;
        if (_1598 > 0.0)
        {
            _1632 = abs((1.0 - _1587) / _1598);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1598 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1587 + 1.0) / _1598);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1632 = frontier_phi_17_15_ladder;
        }
        float _1835;
        if (_1601 > 0.0)
        {
            _1835 = abs((1.0 - _1591) / _1601);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1591 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1835 = frontier_phi_26_22_ladder;
        }
        float _2078;
        if (_1604 > 0.0)
        {
            _2078 = abs((1.0 - _1595) / _1604);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1595 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2078 = frontier_phi_38_33_ladder;
        }
        float _2080 = isnan(_1835) ? _1632 : (isnan(_1632) ? _1835 : min(_1632, _1835));
        float _2081 = isnan(_2078) ? _2080 : (isnan(_2080) ? _2078 : min(_2080, _2078));
        float _2085 = (_2081 * _1598) + _1587;
        float _2086 = (_2081 * _1601) + _1591;
        float _2087 = (_2081 * _1604) + _1595;
        float _2088 = _2081 * 9.9999997473787516355514526367188e-05;
        float _2090 = (-1.0) - _2088;
        float _2092 = _2088 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2087 > _2092) || ((_2087 < _2090) || ((_2086 > _2092) || ((_2086 < _2090) || ((_2085 < _2090) || (_2085 > _2092))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2211 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2087, cbModelParam._m0[9u].z, fma(_2086, cbModelParam._m0[9u].y, _2085 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2087, cbModelParam._m0[10u].z, fma(_2086, cbModelParam._m0[10u].y, _2085 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2087, cbModelParam._m0[11u].z, fma(_2086, cbModelParam._m0[11u].y, _2085 * cbModelParam._m0[11u].x))), _1540);
            frontier_phi_16_38_ladder = _2211.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2211.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2211.x * cbModelParam._m0[1u].y;
        }
        _1620 = frontier_phi_16_38_ladder_2;
        _1622 = frontier_phi_16_38_ladder_1;
        _1624 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1608 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_700, _701, _702), _1540);
        _1620 = _1608.x * cbModelParam._m0[1u].y;
        _1622 = _1608.y * cbModelParam._m0[1u].y;
        _1624 = _1608.z * cbModelParam._m0[1u].y;
    }
    float _1628 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _532);
    float _1629 = isnan(_1628) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1628 : min(cbModelParam._m0[25u].w, _1628));
    float _1720;
    float _1722;
    float _1724;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1684 = fma(_760, cbModelParam._m0[21u].z, fma(_756, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _752)) + cbModelParam._m0[21u].w;
        float _1688 = fma(_760, cbModelParam._m0[22u].z, fma(_756, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _752)) + cbModelParam._m0[22u].w;
        float _1692 = fma(_760, cbModelParam._m0[23u].z, fma(_756, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _752)) + cbModelParam._m0[23u].w;
        float _1695 = fma(_702, cbModelParam._m0[21u].z, fma(_701, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _700));
        float _1698 = fma(_702, cbModelParam._m0[22u].z, fma(_701, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _700));
        float _1701 = fma(_702, cbModelParam._m0[23u].z, fma(_701, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _700));
        float _1840;
        if (_1695 > 0.0)
        {
            _1840 = abs((1.0 - _1684) / _1695);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1684 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1840 = frontier_phi_28_24_ladder;
        }
        float _2105;
        if (_1698 > 0.0)
        {
            _2105 = abs((1.0 - _1688) / _1698);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1688 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2105 = frontier_phi_40_35_ladder;
        }
        float _2310;
        if (_1701 > 0.0)
        {
            _2310 = abs((1.0 - _1692) / _1701);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1692 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2310 = frontier_phi_49_46_ladder;
        }
        float _2312 = isnan(_2105) ? _1840 : (isnan(_1840) ? _2105 : min(_1840, _2105));
        float _2313 = isnan(_2310) ? _2312 : (isnan(_2312) ? _2310 : min(_2312, _2310));
        float _2317 = (_2313 * _1695) + _1684;
        float _2318 = (_2313 * _1698) + _1688;
        float _2319 = (_2313 * _1701) + _1692;
        float _2320 = _2313 * 9.9999997473787516355514526367188e-05;
        float _2321 = (-1.0) - _2320;
        float _2323 = _2320 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2319 > _2323) || ((_2319 < _2321) || ((_2318 > _2323) || ((_2318 < _2321) || ((_2317 < _2321) || (_2317 > _2323))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2563 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2319, cbModelParam._m0[17u].z, fma(_2318, cbModelParam._m0[17u].y, _2317 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2319, cbModelParam._m0[18u].z, fma(_2318, cbModelParam._m0[18u].y, _2317 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2319, cbModelParam._m0[19u].z, fma(_2318, cbModelParam._m0[19u].y, _2317 * cbModelParam._m0[19u].x))), _1629);
            frontier_phi_25_49_ladder = _2563.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2563.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2563.x * cbModelParam._m0[1u].z;
        }
        _1720 = frontier_phi_25_49_ladder_2;
        _1722 = frontier_phi_25_49_ladder_1;
        _1724 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1704 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_700, _701, _702), _1629);
        _1720 = _1704.x * cbModelParam._m0[1u].z;
        _1722 = _1704.y * cbModelParam._m0[1u].z;
        _1724 = _1704.z * cbModelParam._m0[1u].z;
    }
    float _1736 = ((((1.0 - _720) * ((_708 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_720 * _708)) * _692;
    float _1737 = _1736 * ((cbModelParam._m0[1u].w * (_1720 - _1620)) + _1620);
    float _1738 = _1736 * ((cbModelParam._m0[1u].w * (_1722 - _1622)) + _1622);
    float _1739 = _1736 * ((cbModelParam._m0[1u].w * (_1724 - _1624)) + _1624);
    float _1742 = fma(_1739, cbSceneParam._m0[89u].z, fma(_1738, cbSceneParam._m0[89u].y, _1737 * cbSceneParam._m0[89u].x));
    float _1745 = fma(_1739, cbSceneParam._m0[90u].z, fma(_1738, cbSceneParam._m0[90u].y, _1737 * cbSceneParam._m0[90u].x));
    float _1748 = fma(_1739, cbSceneParam._m0[91u].z, fma(_1738, cbSceneParam._m0[91u].y, _1737 * cbSceneParam._m0[91u].x));
    uvec4 _1758 = floatBitsToUint(cbInstanceData._m0[_667 + 5u]);
    uint _1760 = _1758.x * 14u;
    uint _1761 = _1760 + 13u;
    float _1768 = _692 + (-1.0);
    float _1773 = (cbLight._m0[_1761].x * _1768) + 1.0;
    float _1774 = (cbLight._m0[_1761].y * _1768) + 1.0;
    float _1775 = (cbLight._m0[_1761].z * _1768) + 1.0;
    float _1776 = (cbLight._m0[_1761].w * _1768) + 1.0;
    uint _1777 = _1760 + 5u;
    float _1783 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
    uint _1787 = _1760 + 4u;
    float _1794 = isnan(1.0) ? _1773 : (isnan(_1773) ? 1.0 : min(_1773, 1.0));
    uint _1798 = _1760 | 1u;
    float _1809 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_529, _530, _531));
    float _1812 = dot(vec3(cbLight._m0[_1798].xyz), vec3(_529, _530, _531));
    float _4053 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _4064 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1817 = (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * 0.3183098733425140380859375;
    float _1819 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * 0.3183098733425140380859375;
    float _1826 = ((cbLight._m0[_1777].x * _1783) * _1819) + ((cbLight._m0[_1787].x * _1794) * _1817);
    float _1827 = ((_1783 * cbLight._m0[_1777].y) * _1819) + ((_1794 * cbLight._m0[_1787].y) * _1817);
    float _1828 = ((_1783 * cbLight._m0[_1777].z) * _1819) + ((_1794 * cbLight._m0[_1787].z) * _1817);
    uvec4 _1832 = floatBitsToUint(cbLight._m0[_1760 + 12u]);
    bool _1834 = _1832.x == 0u;
    float _1845;
    float _1847;
    float _1849;
    if (_1834)
    {
        _1845 = _1826;
        _1847 = _1827;
        _1849 = _1828;
    }
    else
    {
        uint _1853 = _1760 + 6u;
        float _1869 = (dot(vec3(cbLight._m0[_1760 + 2u].xyz), vec3(_529, _530, _531)) * 0.5) + 0.5;
        float _1870 = _1869 * _1869;
        float _4075 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
        float _1871 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1872 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
        _1845 = (((cbLight._m0[_1853].x * 0.3183098733425140380859375) * _1871) * _1872) + _1826;
        _1847 = (((cbLight._m0[_1853].y * 0.3183098733425140380859375) * _1871) * _1872) + _1827;
        _1849 = (((cbLight._m0[_1853].z * 0.3183098733425140380859375) * _1871) * _1872) + _1828;
    }
    bool _1852 = _1832.y == 0u;
    float _1890;
    float _1892;
    float _1894;
    if (_1852)
    {
        _1890 = _1845;
        _1892 = _1847;
        _1894 = _1849;
    }
    else
    {
        uint _2049 = _1760 + 7u;
        float _2065 = (dot(vec3(cbLight._m0[_1760 + 3u].xyz), vec3(_529, _530, _531)) * 0.5) + 0.5;
        float _2066 = _2065 * _2065;
        float _4091 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2067 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _2068 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
        _1890 = (((cbLight._m0[_2049].x * 0.3183098733425140380859375) * _2067) * _2068) + _1845;
        _1892 = (((cbLight._m0[_2049].y * 0.3183098733425140380859375) * _2067) * _2068) + _1847;
        _1894 = (((cbLight._m0[_2049].z * 0.3183098733425140380859375) * _2067) * _2068) + _1849;
    }
    uint _1897 = _1760 + 8u;
    float _1910 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1760].w)) * _532) * 0.949999988079071044921875);
    float _1911 = _1910 * _1910;
    float _1912 = cbLight._m0[_1760].x + _609;
    float _1913 = cbLight._m0[_1760].y + _610;
    float _1914 = cbLight._m0[_1760].z + _611;
    float _1918 = inversesqrt(dot(vec3(_1912, _1913, _1914), vec3(_1912, _1913, _1914)));
    float _1919 = _1918 * _1912;
    float _1920 = _1918 * _1913;
    float _1921 = _1918 * _1914;
    float _1922 = dot(vec3(_529, _530, _531), vec3(cbLight._m0[_1760].xyz));
    float _4107 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _1925 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _4118 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _1926 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _1927 = dot(vec3(_529, _530, _531), vec3(_1919, _1920, _1921));
    float _4129 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1930 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _1931 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_1919, _1920, _1921));
    float _4140 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1935 = _1911 * _1911;
    float _1939 = ((_1930 * _1930) * (_1935 + (-1.0))) + 1.0;
    float _1950 = (exp2(log2(1.0 - (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1951 = 1.0 - _1911;
    float _1962 = (0.5 / (((_1926 * ((_1925 * _1951) + _1911)) + 9.9999999392252902907785028219223e-09) + (((_1926 * _1951) + _1911) * _1925))) * _1925;
    float _4151 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1964 = (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1935 / ((_1939 * _1939) * 3.141590118408203125));
    uint _1975 = _1760 + 9u;
    float _1986 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1798].w)) * _532) * 0.949999988079071044921875);
    float _1987 = _1986 * _1986;
    float _1988 = cbLight._m0[_1798].x + _609;
    float _1989 = cbLight._m0[_1798].y + _610;
    float _1990 = cbLight._m0[_1798].z + _611;
    float _1994 = inversesqrt(dot(vec3(_1988, _1989, _1990), vec3(_1988, _1989, _1990)));
    float _1995 = _1994 * _1988;
    float _1996 = _1994 * _1989;
    float _1997 = _1994 * _1990;
    float _1998 = dot(vec3(_529, _530, _531), vec3(cbLight._m0[_1798].xyz));
    float _4162 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2001 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _2002 = dot(vec3(_529, _530, _531), vec3(_1995, _1996, _1997));
    float _4173 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2005 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _2006 = dot(vec3(cbLight._m0[_1798].xyz), vec3(_1995, _1996, _1997));
    float _4184 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2010 = _1987 * _1987;
    float _2014 = ((_2005 * _2005) * (_2010 + (-1.0))) + 1.0;
    float _2023 = (exp2(log2(1.0 - (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2024 = 1.0 - _1987;
    float _2034 = (0.5 / (((_1926 * ((_2001 * _2024) + _1987)) + 9.9999999392252902907785028219223e-09) + (((_1926 * _2024) + _1987) * _2001))) * _2001;
    float _4195 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2036 = (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_2010 / ((_2014 * _2014) * 3.141590118408203125));
    float _2046 = (((_2023 * cbLight._m0[_1975].x) * _2036) * _1783) + (((_1950 * cbLight._m0[_1897].x) * _1964) * _1794);
    float _2047 = (((_2023 * cbLight._m0[_1975].y) * _2036) * _1783) + (((_1950 * cbLight._m0[_1897].y) * _1964) * _1794);
    float _2048 = (((_2023 * cbLight._m0[_1975].z) * _2036) * _1783) + (((_1950 * cbLight._m0[_1897].z) * _1964) * _1794);
    float _2110;
    float _2112;
    float _2114;
    if (_1834)
    {
        _2110 = _2046;
        _2112 = _2047;
        _2114 = _2048;
    }
    else
    {
        uint _2116 = _1760 + 2u;
        uint _2120 = _1760 + 10u;
        float _2134 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2116].w)) * _532) * 0.949999988079071044921875);
        float _2135 = _2134 * _2134;
        float _2136 = cbLight._m0[_2116].x + _609;
        float _2137 = cbLight._m0[_2116].y + _610;
        float _2138 = cbLight._m0[_2116].z + _611;
        float _2142 = inversesqrt(dot(vec3(_2136, _2137, _2138), vec3(_2136, _2137, _2138)));
        float _2143 = _2142 * _2136;
        float _2144 = _2142 * _2137;
        float _2145 = _2142 * _2138;
        float _2146 = dot(vec3(_529, _530, _531), vec3(cbLight._m0[_2116].xyz));
        float _4206 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2149 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _2150 = dot(vec3(_529, _530, _531), vec3(_2143, _2144, _2145));
        float _4217 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2153 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _2154 = dot(vec3(cbLight._m0[_2116].xyz), vec3(_2143, _2144, _2145));
        float _4228 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2158 = _2135 * _2135;
        float _2162 = ((_2153 * _2153) * (_2158 + (-1.0))) + 1.0;
        float _2171 = (exp2(log2(1.0 - (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2172 = 1.0 - _2135;
        float _2182 = (0.5 / (((_1926 * ((_2149 * _2172) + _2135)) + 9.9999999392252902907785028219223e-09) + (((_1926 * _2172) + _2135) * _2149))) * _2149;
        float _4239 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2184 = (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_2158 / ((_2162 * _2162) * 3.141590118408203125));
        float _2185 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
        _2110 = (((_2171 * cbLight._m0[_2120].x) * _2184) * _2185) + _2046;
        _2112 = (((_2171 * cbLight._m0[_2120].y) * _2184) * _2185) + _2047;
        _2114 = (((_2171 * cbLight._m0[_2120].z) * _2184) * _2185) + _2048;
    }
    float _2220;
    float _2222;
    float _2224;
    if (_1852)
    {
        _2220 = _2110;
        _2222 = _2112;
        _2224 = _2114;
    }
    else
    {
        uint _2231 = _1760 + 3u;
        uint _2235 = _1760 + 11u;
        float _2249 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2231].w)) * _532) * 0.949999988079071044921875);
        float _2250 = _2249 * _2249;
        float _2251 = cbLight._m0[_2231].x + _609;
        float _2252 = cbLight._m0[_2231].y + _610;
        float _2253 = cbLight._m0[_2231].z + _611;
        float _2257 = inversesqrt(dot(vec3(_2251, _2252, _2253), vec3(_2251, _2252, _2253)));
        float _2258 = _2257 * _2251;
        float _2259 = _2257 * _2252;
        float _2260 = _2257 * _2253;
        float _2261 = dot(vec3(_529, _530, _531), vec3(cbLight._m0[_2231].xyz));
        float _4255 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2264 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _2265 = dot(vec3(_529, _530, _531), vec3(_2258, _2259, _2260));
        float _4266 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2268 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _2269 = dot(vec3(cbLight._m0[_2231].xyz), vec3(_2258, _2259, _2260));
        float _4277 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2273 = _2250 * _2250;
        float _2277 = ((_2268 * _2268) * (_2273 + (-1.0))) + 1.0;
        float _2286 = (exp2(log2(1.0 - (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2287 = 1.0 - _2250;
        float _2297 = (0.5 / (((_1926 * ((_2264 * _2287) + _2250)) + 9.9999999392252902907785028219223e-09) + (((_1926 * _2287) + _2250) * _2264))) * _2264;
        float _4288 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2299 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_2273 / ((_2277 * _2277) * 3.141590118408203125));
        float _2300 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
        _2220 = (((_2286 * cbLight._m0[_2235].x) * _2299) * _2300) + _2110;
        _2222 = (((_2286 * cbLight._m0[_2235].y) * _2299) * _2300) + _2112;
        _2224 = (((_2286 * cbLight._m0[_2235].z) * _2299) * _2300) + _2114;
    }
    float _2435;
    float _2437;
    float _2439;
    float _2441;
    float _2443;
    float _2445;
    if (_1758.y == 0u)
    {
        float _2375 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2376 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2375;
        float _2377 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2375;
        float _2378 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2375;
        uvec4 _2390 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2391 = _2390.x;
        uint _2402 = uint((float(_2390.y) * floor(float(uint(cbSceneParam._m0[85u].y * _630) / _2391))) + floor(float(uint(cbSceneParam._m0[85u].x * _629) / _2391)));
        float _2412 = (log2(_2378 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2413 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        uint _2416 = uint(isnan(14.0) ? _2413 : (isnan(_2413) ? 14.0 : min(_2413, 14.0)));
        uvec4 _2421 = texelFetch(g_lightClusterGridBuffer, int(((_2416 << 2u) + (_2402 << 6u)) >> 2u));
        uint _2422 = _2421.x;
        uint _2423 = _2390.z;
        float _2568;
        float _2570;
        float _2572;
        float _2574;
        float _2576;
        float _2578;
        if (((((1u << ((_2423 >> 4u) & 15u)) + 4294967295u) & _2422) == 0u) || ((_2423 & 240u) == 0u))
        {
            _2568 = 0.0;
            _2570 = 0.0;
            _2572 = 0.0;
            _2574 = 0.0;
            _2576 = 0.0;
            _2578 = 0.0;
        }
        else
        {
            float _2569;
            float _2571;
            float _2573;
            float _2575;
            float _2577;
            float _2579;
            float _2729 = 0.0;
            float _2730 = 0.0;
            float _2731 = 0.0;
            float _2732 = 0.0;
            float _2733 = 0.0;
            float _2734 = 0.0;
            uint _2735 = 0u;
            uint _2744;
            bool _2745;
            for (;;)
            {
                _2744 = texelFetch(g_lightClassification, int((((_2416 << 5u) + (_2402 << 9u)) + (_2735 << 2u)) >> 2u)).x;
                _2745 = _2744 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2745)
                {
                    frontier_phi_66_pred = _2729;
                    frontier_phi_66_pred_1 = _2734;
                    frontier_phi_66_pred_2 = _2733;
                    frontier_phi_66_pred_3 = _2732;
                    frontier_phi_66_pred_4 = _2731;
                    frontier_phi_66_pred_5 = _2730;
                }
                else
                {
                    float _2874;
                    float _2875;
                    float _2876;
                    float _2877;
                    float _2878;
                    float _2879;
                    uint _2880;
                    _2874 = _2729;
                    _2875 = _2730;
                    _2876 = _2731;
                    _2877 = _2732;
                    _2878 = _2733;
                    _2879 = _2734;
                    _2880 = _2744;
                    float _2801;
                    float _2802;
                    float _2803;
                    float _2804;
                    float _2805;
                    float _2806;
                    for (;;)
                    {
                        uint _2884 = uint(findLSB(_2880)) + (_2735 << 5u);
                        uint _2881 = (_2880 + 4294967295u) & _2880;
                        uint _2886 = _2884 * 48u;
                        vec4 _2900 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2886)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 3u)).x));
                        uint _2906 = (_2884 * 48u) + 4u;
                        vec4 _2919 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2906)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 3u)).x));
                        uint _2925 = (_2884 * 48u) + 8u;
                        vec3 _2936 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2925)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 2u)).x));
                        float _2940 = _2900.x - _2376;
                        float _2941 = _2900.y - _2377;
                        float _2942 = _2900.z - _2378;
                        float _2943 = dot(vec3(_2940, _2941, _2942), vec3(_2940, _2941, _2942));
                        float _2946 = inversesqrt(_2943);
                        float _2947 = _2946 * _2940;
                        float _2948 = _2946 * _2941;
                        float _2949 = _2946 * _2942;
                        float _2950 = dot(vec3(_648, _651, _654), vec3(_2947, _2948, _2949));
                        float _2955 = 1.0 - (_2943 * _2900.w);
                        float _4314 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
                        float _2956 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                        float _2957 = sqrt(_2943) * _2919.w;
                        float _2960 = 1.39999997615814208984375 / (_2957 + 1.39999997615814208984375);
                        float _2961 = _2960 * _2960;
                        float _2964 = ((1.0 - _2961) * _2950) + _2961;
                        float _2967 = _2957 * _2957;
                        float _2971 = ((isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0))) * _2956) / ((_2967 * 0.699999988079071044921875) + 1.0);
                        float _2975 = (-0.0) - _2376;
                        float _2976 = (-0.0) - _2377;
                        float _2977 = (-0.0) - _2378;
                        float _2981 = inversesqrt(dot(vec3(_2975, _2976, _2977), vec3(_2975, _2976, _2977)));
                        float _2982 = _2981 * _2975;
                        float _2983 = _2981 * _2976;
                        float _2984 = _2981 * _2977;
                        float _2992 = exp2(log2(1.0 / ((_2967 * 3.5) + 5.0)) * 0.25);
                        float _2993 = 1.0 - _708;
                        float _3000 = sqrt(1.0 - ((1.0 - (_2993 * _2993)) * (1.0 - (_2992 * _2992))));
                        float _3001 = _3000 * _3000;
                        float _3002 = _3001 * _3001;
                        float _3003 = _2982 + _2947;
                        float _3004 = _2983 + _2948;
                        float _3005 = _2984 + _2949;
                        float _3009 = inversesqrt(dot(vec3(_3003, _3004, _3005), vec3(_3003, _3004, _3005)));
                        float _3013 = dot(vec3(_648, _651, _654), vec3(_2982, _2983, _2984));
                        float _4330 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                        float _3016 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
                        float _3017 = dot(vec3(_648, _651, _654), vec3(_3009 * _3003, _3009 * _3004, _3009 * _3005));
                        float _4341 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                        float _3020 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                        float _3024 = ((_3020 * _3020) * (_3002 + (-1.0))) + 1.0;
                        float _3025 = _2960 * _3001;
                        float _3026 = _3025 * _3025;
                        float _3029 = ((1.0 - _3026) * _2950) + _3026;
                        float _4352 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                        float _3030 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
                        float _3031 = 1.0 - _3001;
                        float _3041 = (0.5 / (((_3030 * ((_3016 * _3031) + _3001)) + 9.9999999392252902907785028219223e-09) + (((_3030 * _3031) + _3001) * _3016))) * _3030;
                        float _4363 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                        float _3052 = (((_3002 * 3.1415927410125732421875) * (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0)))) / ((_3024 * _3024) * ((_2967 * 2.1991131305694580078125) + 3.141590118408203125))) * _2956;
                        _2804 = (_2971 * _2919.x) + _2877;
                        _2805 = (_2971 * _2919.y) + _2878;
                        _2806 = (_2971 * _2919.z) + _2879;
                        _2801 = (_3052 * _2936.x) + _2874;
                        _2802 = (_3052 * _2936.y) + _2875;
                        _2803 = (_3052 * _2936.z) + _2876;
                        if (_2881 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2874 = _2801;
                            _2875 = _2802;
                            _2876 = _2803;
                            _2877 = _2804;
                            _2878 = _2805;
                            _2879 = _2806;
                            _2880 = _2881;
                        }
                    }
                    frontier_phi_66_pred = _2801;
                    frontier_phi_66_pred_1 = _2806;
                    frontier_phi_66_pred_2 = _2805;
                    frontier_phi_66_pred_3 = _2804;
                    frontier_phi_66_pred_4 = _2803;
                    frontier_phi_66_pred_5 = _2802;
                }
                _2569 = frontier_phi_66_pred;
                _2579 = frontier_phi_66_pred_1;
                _2577 = frontier_phi_66_pred_2;
                _2575 = frontier_phi_66_pred_3;
                _2573 = frontier_phi_66_pred_4;
                _2571 = frontier_phi_66_pred_5;
                uint _2736 = _2735 + 1u;
                if (_2736 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2729 = _2569;
                    _2730 = _2571;
                    _2731 = _2573;
                    _2732 = _2575;
                    _2733 = _2577;
                    _2734 = _2579;
                    _2735 = _2736;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2568 = _2569;
            _2570 = _2571;
            _2572 = _2573;
            _2574 = _2575;
            _2576 = _2577;
            _2578 = _2579;
        }
        uvec4 _2582 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2583 = _2582.z;
        uint _2585 = (_2583 >> 8u) & 15u;
        float _2697;
        float _2699;
        float _2701;
        float _2703;
        float _2705;
        float _2707;
        if (((4294967295u << _2585) & _2422) == 0u)
        {
            _2697 = _2568;
            _2699 = _2570;
            _2701 = _2572;
            _2703 = _2574;
            _2705 = _2576;
            _2707 = _2578;
        }
        else
        {
            float _2722 = inversesqrt(dot(vec3(_2376, _2377, _2378), vec3(_2376, _2377, _2378)));
            float _2723 = _2722 * _2376;
            float _2724 = _2722 * _2377;
            float _2725 = _2722 * _2378;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2585 < ((_2583 >> 12u) & 15u))
            {
                float _2698;
                float _2700;
                float _2702;
                float _2704;
                float _2706;
                float _2708;
                float _2857 = _2568;
                float _2858 = _2570;
                float _2859 = _2572;
                float _2860 = _2574;
                float _2861 = _2576;
                float _2862 = _2578;
                uint _2863 = _2585;
                uint _2872;
                bool _2873;
                for (;;)
                {
                    _2872 = texelFetch(g_lightClassification, int((((_2416 << 5u) + (_2402 << 9u)) + (_2863 << 2u)) >> 2u)).x;
                    _2873 = _2872 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2873)
                    {
                        frontier_phi_77_pred = _2862;
                        frontier_phi_77_pred_1 = _2861;
                        frontier_phi_77_pred_2 = _2860;
                        frontier_phi_77_pred_3 = _2859;
                        frontier_phi_77_pred_4 = _2858;
                        frontier_phi_77_pred_5 = _2857;
                    }
                    else
                    {
                        float _3066;
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3070;
                        float _3071;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3079 = _2857;
                        float _3080 = _2858;
                        float _3081 = _2859;
                        float _3082 = _2860;
                        float _3083 = _2861;
                        float _3084 = _2862;
                        uint _3085 = _2872;
                        uint _3086;
                        vec4 _3111;
                        float _3112;
                        vec4 _3127;
                        vec3 _3139;
                        vec4 _3154;
                        vec4 _3170;
                        float _3217;
                        bool _3218;
                        for (;;)
                        {
                            uint _3096 = ((_2863 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3085));
                            _3086 = (_3085 + 4294967295u) & _3085;
                            uint _3098 = _3096 * 40u;
                            _3111 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3098)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 3u)).x));
                            _3112 = _3111.w;
                            uint _3114 = (_3096 * 40u) + 4u;
                            _3127 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 3u)).x));
                            uint _3129 = (_3096 * 40u) + 8u;
                            _3139 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3129)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 2u)).x));
                            uint _3141 = (_3096 * 40u) + 16u;
                            _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            uint _3157 = (_3096 * 40u) + 20u;
                            _3170 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 3u)).x));
                            uint _3173 = (_3096 * 40u) + 24u;
                            vec4 _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            uint _3192 = (_3096 * 40u) + 28u;
                            vec4 _3205 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 3u)).x));
                            _3217 = fma(_2378, _3205.z, fma(_2377, _3205.y, _3205.x * _2376)) + _3205.w;
                            _3218 = !((fma(_2378, _3186.z, fma(_2377, _3186.y, _3186.x * _2376)) + _3186.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3218)
                            {
                                float _3245 = _3111.x - _2376;
                                float _3246 = _3111.y - _2377;
                                float _3247 = _3111.z - _2378;
                                float _3248 = dot(vec3(_3245, _3246, _3247), vec3(_3245, _3246, _3247));
                                float _3251 = inversesqrt(_3248);
                                float _3252 = _3251 * _3245;
                                float _3253 = _3251 * _3246;
                                float _3254 = _3251 * _3247;
                                float _3258 = 1.0 - (_3248 / (_3112 * _3112));
                                float _4374 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3259 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                                float _3263 = sqrt(_3248) * _3127.w;
                                float _3265 = 1.39999997615814208984375 / (_3263 + 1.39999997615814208984375);
                                float _3266 = _3265 * _3265;
                                float _3269 = ((1.0 - _3266) * dot(vec3(_3252, _3253, _3254), vec3(_648, _651, _654))) + _3266;
                                float _3272 = _3263 * _3263;
                                float _3276 = (fma(_2378, _3154.z, fma(_2377, _3154.y, _3154.x * _2376)) + _3154.w) / _3217;
                                float _3277 = (fma(_2378, _3170.z, fma(_2377, _3170.y, _3170.x * _2376)) + _3170.w) / _3217;
                                float _3281 = 1.0 - dot(vec2(_3276, _3277), vec2(_3276, _3277));
                                float _4390 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                                float _3282 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                                float _3283 = _3282 * (((isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0))) * _3259) / ((_3272 * 0.699999988079071044921875) + 1.0));
                                float _3295 = exp2(log2(1.0 / ((_3272 * 3.5) + 5.0)) * 0.25);
                                float _3296 = 1.0 - _708;
                                float _3303 = sqrt(1.0 - ((1.0 - (_3296 * _3296)) * (1.0 - (_3295 * _3295))));
                                float _3304 = _3303 * _3303;
                                float _3305 = _3304 * _3304;
                                float _3306 = _3252 - _2723;
                                float _3307 = _3253 - _2724;
                                float _3308 = _3254 - _2725;
                                float _3312 = inversesqrt(dot(vec3(_3306, _3307, _3308), vec3(_3306, _3307, _3308)));
                                float _3316 = dot(vec3(_648, _651, _654), vec3((-0.0) - _2723, (-0.0) - _2724, (-0.0) - _2725));
                                float _4401 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                                float _3319 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                                float _3320 = dot(vec3(_648, _651, _654), vec3(_3312 * _3306, _3312 * _3307, _3312 * _3308));
                                float _4412 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                                float _3323 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                                float _3327 = ((_3323 * _3323) * (_3305 + (-1.0))) + 1.0;
                                float _3328 = _3265 * _3304;
                                float _3329 = _3328 * _3328;
                                float _3335 = ((1.0 - _3329) * dot(vec3(_648, _651, _654), vec3(_3252, _3253, _3254))) + _3329;
                                float _4423 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                                float _3336 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                                float _3337 = 1.0 - _3304;
                                float _3347 = (0.5 / (((_3336 * ((_3319 * _3337) + _3304)) + 9.9999999392252902907785028219223e-09) + (((_3336 * _3337) + _3304) * _3319))) * _3336;
                                float _4434 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                                float _3357 = (_3282 * _3259) * (((_3305 * 3.1415927410125732421875) * (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) / ((_3327 * _3327) * ((_3272 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3283 * _3127.y;
                                frontier_phi_83_pred_1 = _3283 * _3127.x;
                                frontier_phi_83_pred_2 = _3357 * _3139.z;
                                frontier_phi_83_pred_3 = _3357 * _3139.y;
                                frontier_phi_83_pred_4 = _3357 * _3139.x;
                                frontier_phi_83_pred_5 = _3283 * _3127.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3365 = frontier_phi_83_pred;
                            _3364 = frontier_phi_83_pred_1;
                            _3363 = frontier_phi_83_pred_2;
                            _3362 = frontier_phi_83_pred_3;
                            _3361 = frontier_phi_83_pred_4;
                            _3366 = frontier_phi_83_pred_5;
                            _3069 = _3364 + _3082;
                            _3070 = _3365 + _3083;
                            _3071 = _3366 + _3084;
                            _3066 = _3361 + _3079;
                            _3067 = _3362 + _3080;
                            _3068 = _3363 + _3081;
                            if (_3086 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3079 = _3066;
                                _3080 = _3067;
                                _3081 = _3068;
                                _3082 = _3069;
                                _3083 = _3070;
                                _3084 = _3071;
                                _3085 = _3086;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3071;
                        frontier_phi_77_pred_1 = _3070;
                        frontier_phi_77_pred_2 = _3069;
                        frontier_phi_77_pred_3 = _3068;
                        frontier_phi_77_pred_4 = _3067;
                        frontier_phi_77_pred_5 = _3066;
                    }
                    _2708 = frontier_phi_77_pred;
                    _2706 = frontier_phi_77_pred_1;
                    _2704 = frontier_phi_77_pred_2;
                    _2702 = frontier_phi_77_pred_3;
                    _2700 = frontier_phi_77_pred_4;
                    _2698 = frontier_phi_77_pred_5;
                    uint _2864 = _2863 + 1u;
                    if (_2864 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2857 = _2698;
                        _2858 = _2700;
                        _2859 = _2702;
                        _2860 = _2704;
                        _2861 = _2706;
                        _2862 = _2708;
                        _2863 = _2864;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2702;
                frontier_phi_58_59_ladder_1 = _2708;
                frontier_phi_58_59_ladder_2 = _2706;
                frontier_phi_58_59_ladder_3 = _2704;
                frontier_phi_58_59_ladder_4 = _2700;
                frontier_phi_58_59_ladder_5 = _2698;
            }
            else
            {
                frontier_phi_58_59_ladder = _2572;
                frontier_phi_58_59_ladder_1 = _2578;
                frontier_phi_58_59_ladder_2 = _2576;
                frontier_phi_58_59_ladder_3 = _2574;
                frontier_phi_58_59_ladder_4 = _2570;
                frontier_phi_58_59_ladder_5 = _2568;
            }
            _2697 = frontier_phi_58_59_ladder_5;
            _2699 = frontier_phi_58_59_ladder_4;
            _2701 = frontier_phi_58_59_ladder;
            _2703 = frontier_phi_58_59_ladder_3;
            _2705 = frontier_phi_58_59_ladder_2;
            _2707 = frontier_phi_58_59_ladder_1;
        }
        float _2712 = isnan(1.0) ? _692 : (isnan(_692) ? 1.0 : min(_692, 1.0));
        _2435 = (_2712 * _2703) + _1890;
        _2437 = (_2712 * _2705) + _1892;
        _2439 = (_2712 * _2707) + _1894;
        _2441 = ((_2697 * 0.039999999105930328369140625) * _2712) + _2220;
        _2443 = ((_2699 * 0.039999999105930328369140625) * _2712) + _2222;
        _2445 = ((_2701 * 0.039999999105930328369140625) * _2712) + _2224;
    }
    else
    {
        _2435 = _1890;
        _2437 = _1892;
        _2439 = _1894;
        _2441 = _2220;
        _2443 = _2222;
        _2445 = _2224;
    }
    uint _2451 = _668 + uint(cbMatDynParam._m0[0u].w);
    float _2457 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].y;
    float _2463 = (((((_2457 * cbMtdParam._m0[10u].x) * _410.x) * _433) * _508) * (((1.0 - _487) * cbMtdParam._m0[16u].y) + _487)) * cbInstanceData._m0[_2451].x;
    float _2469 = (((((_2457 * cbMtdParam._m0[10u].y) * _410.y) * _433) * _508) * (((1.0 - _489) * cbMtdParam._m0[16u].y) + _489)) * cbInstanceData._m0[_2451].y;
    float _2475 = (((((_2457 * cbMtdParam._m0[10u].z) * _410.z) * _433) * _508) * (((1.0 - _491) * cbMtdParam._m0[16u].y) + _491)) * cbInstanceData._m0[_2451].z;
    float _4450 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _4461 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _4472 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _2492 = (((isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2435 + ((isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))) * _692))) + ((_2441 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _1529)) * cbPerFrame._m0[3u].x)) + _2463;
    float _2494 = (_2469 + ((_2443 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1529)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2437 + ((isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))) * _692)));
    float _2496 = (_2475 + ((_2445 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _1529)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2439 + ((isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))) * _692)));
    float _2497 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
    float _2498 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2499 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
    float _2505 = cbMtdParam._m0[2u].x * _2463;
    float _2506 = cbMtdParam._m0[2u].y * _2469;
    float _2507 = cbMtdParam._m0[2u].z * _2475;
    float _4498 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2509 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
    uint _2510 = _667 + 6u;
    float _2518 = _629 / cbSceneParam._m0[86u].x;
    float _2519 = _630 / cbSceneParam._m0[86u].y;
    vec4 _2533 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2518, _2519, (log2((isnan(cbSceneParam._m0[77u].w) ? _551 : (isnan(_551) ? cbSceneParam._m0[77u].w : min(_551, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2535 = _2533.x;
    float _2536 = _2533.y;
    float _2537 = _2533.z;
    float _2538 = _2533.w;
    float _2630;
    float _2632;
    float _2634;
    float _2636;
    if (_551 > cbSceneParam._m0[78u].w)
    {
        float _2593 = isnan(_551) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _551 : min(cbSceneParam._m0[80u].w, _551));
        float _2594 = _2593 / _551;
        float _2605 = _2594 * _602;
        float _2606 = _603 * _2594;
        float _2607 = (-0.0) - _2606;
        float _2608 = _2594 * _604;
        float _2610 = (cbSceneParam._m0[77u].w * _2607) / _2593;
        float _2611 = _2610 + cbSceneParam._m0[79u].w;
        float _2612 = cbSceneParam._m0[79u].w - _2606;
        float _2618 = sqrt(((_2605 * _2605) + (_2606 * _2606)) + (_2608 * _2608));
        float _2621 = (1.0 - (cbSceneParam._m0[77u].w / _2593)) * _2618;
        float _2626 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2628 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2814;
        if (abs((_2607 - _2610) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2814 = ((((_2611 > 0.0) ? exp2(_2626 * _2611) : (2.0 - exp2(_2628 * _2611))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2621;
        }
        else
        {
            float _2758 = 1.0 / cbSceneParam._m0[80u].x;
            float _2759 = isnan(_2612) ? _2611 : (isnan(_2611) ? _2612 : max(_2611, _2612));
            float _2760 = isnan(_2612) ? _2611 : (isnan(_2611) ? _2612 : min(_2611, _2612));
            float _2769 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : min(_2759, 0.0));
            float _2770 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : min(_2760, 0.0));
            _2814 = ((abs(_2618 / _2607) * cbSceneParam._m0[80u].y) * ((((_2769 - _2770) * 2.0) - ((exp2(_2626 * (isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0)))) - exp2(_2626 * (isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0))))) * _2758)) - ((exp2(_2628 * _2769) - exp2(_2628 * _2770)) * _2758))) + (_2621 * cbSceneParam._m0[80u].z);
        }
        vec4 _2816 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2518, _2519, 1.0), 0.0);
        float _2825 = exp2((_2814 * (-1.44269502162933349609375)) * (1.0 - _2816.w));
        float _2826 = log2(_2825);
        float _2842 = log2(_2538);
        _2630 = (exp2(_2842 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2826 * cbSceneParam._m0[78u].x)) * _2816.x) / cbSceneParam._m0[78u].x)) + _2535;
        _2632 = (exp2(_2842 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2826 * cbSceneParam._m0[78u].y)) * _2816.y) / cbSceneParam._m0[78u].y)) + _2536;
        _2634 = (exp2(_2842 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2826 * cbSceneParam._m0[78u].z)) * _2816.z) / cbSceneParam._m0[78u].z)) + _2537;
        _2636 = _2825 * _2538;
    }
    else
    {
        _2630 = _2535;
        _2632 = _2536;
        _2634 = _2537;
        _2636 = _2538;
    }
    bool _2852;
    vec4 _2646;
    vec4 _2668;
    float _2670;
    float _2674;
    float _2675;
    float _2676;
    float _2679;
    float _2682;
    float _2685;
    float _2686;
    bool _2696;
    for (;;)
    {
        _2646 = cbMatDynParam._m0[0u];
        float _2648 = roundEven(_2646.y);
        bool _2649 = _2648 == 3.0;
        float _2650 = log2(_2636);
        float _2654 = exp2(_2650 * cbSceneParam._m0[78u].x);
        float _2655 = exp2(_2650 * cbSceneParam._m0[78u].y);
        float _2656 = exp2(_2650 * cbSceneParam._m0[78u].z);
        float _2657 = _2654 * _2497;
        float _2658 = _2655 * _2498;
        float _2659 = _2656 * _2499;
        float _2666 = _618 + (-0.5);
        _2668 = cbMtdParam._m0[1u];
        _2670 = _2668.y * _2666;
        float _2673 = (_2648 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2674 = _2673 * (_2649 ? _2657 : (_2657 + (cbSceneParam._m0[72u].w * _2630)));
        _2675 = _2673 * (_2649 ? _2658 : (_2658 + (cbSceneParam._m0[72u].w * _2632)));
        _2676 = _2673 * (_2649 ? _2659 : (_2659 + (cbSceneParam._m0[72u].w * _2634)));
        _2679 = ((_2505 * _2509) * _2654) * _2673;
        _2682 = ((_2506 * _2509) * _2655) * _2673;
        _2685 = ((_2507 * _2509) * _2656) * _2673;
        _2686 = _2666 * 0.999000012874603271484375;
        _2696 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2696)
        {
            if ((cbInstanceData._m0[_667 + 7u].x + _2686) < 0.5)
            {
                _2852 = true;
                break;
            }
        }
        uint _2793 = _668 + uint(_2646.w);
        if ((cbInstanceData._m0[_2793].w < 1.0) && ((cbInstanceData._m0[_2793].w + _2686) < 0.5))
        {
            _2852 = true;
            break;
        }
        if ((_2670 + 1.0) < _2668.x)
        {
            _2852 = true;
            break;
        }
        _2852 = false;
        break;
    }
    float _3057;
    if (_2852)
    {
        discard_state = true;
        _3057 = 0.0;
    }
    else
    {
        _3057 = cbInstanceData._m0[_2510].w;
    }
    SV_Target.x = _2674;
    SV_Target.y = _2675;
    SV_Target.z = _2676;
    SV_Target.w = _3057;
    SV_Target_1.x = _2679;
    SV_Target_1.y = _2682;
    SV_Target_1.z = _2685;
    SV_Target_1.w = cbInstanceData._m0[_2510].w;
    discard_exit();
}


