#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1047;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _243 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _249 = _243.x * cbMtdParam._m0[9u].x;
    float _250 = _243.y * cbMtdParam._m0[9u].y;
    float _251 = _243.z * cbMtdParam._m0[9u].z;
    vec4 _274 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _294 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _297 = _294.x + 0.00999999977648258209228515625;
    float _305 = (TEXCOORD_8 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_8)) * _297)) * (cbMtdParam._m0[15u].z + 1.0);
    float _3410 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _306 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
    float _313 = (_306 * ((_274.x * cbMtdParam._m0[12u].x) - _249)) + _249;
    float _314 = (_306 * ((_274.y * cbMtdParam._m0[12u].y) - _250)) + _250;
    float _315 = (_306 * ((_274.z * cbMtdParam._m0[12u].z) - _251)) + _251;
    vec4 _327 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    vec4 _350 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _354 = _350.z;
    float _357 = (_350.x * 2.0) + (-1.0);
    float _358 = (_350.y * 2.0) + (-1.0);
    float _359 = dot(vec2(_357, _358), vec2(_357, _358));
    float _3421 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _364 = sqrt(1.0 - (isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0))));
    float _372 = (((_327.z - _354) * TEXCOORD_8) * cbMtdParam._m0[16u].x) + _354;
    vec4 _406 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _420 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3432 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
    float _429 = (((_421 * _421) * (3.0 - (_421 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _438 = cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x;
    float _446 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3443 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _447 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
    float _451 = (_447 * _447) * (3.0 - (_447 * 2.0));
    float _452 = _451 * cbMtdParam._m0[16u].w;
    float _453 = _451 * cbMtdParam._m0[17u].x;
    float _454 = sin(_438);
    float _455 = cos(_438);
    float _456 = TEXCOORD.z - _452;
    float _457 = TEXCOORD.w - _453;
    vec4 _477 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_452 + fma(_457, (-0.0) - _454, _456 * _455))) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (fma(_457, _455, _456 * _454) + _453)) + cbTextureTilingScale._m0[0u].w));
    float _483 = (cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].w) * _477.x;
    float _485 = (cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].w) * _477.y;
    float _487 = (cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].w) * _477.z;
    float _503 = (TEXCOORD_5.x - ((_297 * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[16u].z)) * (cbMtdParam._m0[13u].x + 1.0);
    float _3454 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _504 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
    float _510 = ((((_327.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[15u].x) + _357;
    float _511 = ((((_327.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[15u].x) + _358;
    float _514 = fma(_364, _214 * NORMAL.x, fma(_511, _221 * TANGENT.x, (_207 * _199) * _510));
    float _517 = fma(_364, _214 * NORMAL.y, fma(_511, _221 * TANGENT.y, (_207 * _200) * _510));
    float _520 = fma(_364, _214 * NORMAL.z, fma(_511, _221 * TANGENT.z, (_207 * _201) * _510));
    float _524 = inversesqrt(dot(vec3(_514, _517, _520), vec3(_514, _517, _520)));
    float _525 = _524 * _514;
    float _526 = _524 * _517;
    float _527 = _524 * _520;
    float _3465 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _528 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
    float _3476 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _3487 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3498 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _547 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _588 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _598 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _588);
    float _599 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _588);
    float _600 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _588);
    float _604 = inversesqrt(dot(vec3(_598, _599, _600), vec3(_598, _599, _600)));
    float _605 = _598 * _604;
    float _606 = _599 * _604;
    float _607 = _600 * _604;
    float _613 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _614 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _632 = fma(_527, cbSceneParam._m0[5u].z, fma(_526, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _525));
    float _635 = fma(_527, cbSceneParam._m0[6u].z, fma(_526, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _525));
    float _638 = fma(_527, cbSceneParam._m0[7u].z, fma(_526, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _525));
    uint _651 = uint(roundEven(NORMAL.w)) * 13u;
    uint _652 = _651 + 9u;
    uint _653 = _652 + uint(cbMatDynParam._m0[0u].w);
    float _659 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0)))) * cbInstanceData._m0[_653].x;
    float _660 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0)))) * cbInstanceData._m0[_653].y;
    float _661 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0)))) * cbInstanceData._m0[_653].z;
    float _3509 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _662 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
    float _3520 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _663 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
    float _3531 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _664 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
    vec4 _673 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _613, cbSceneParam._m0[86u].y * _614));
    float _676 = _673.x * TEXCOORD_5.w;
    float _677 = dot(vec3(_525, _526, _527), vec3(_605, _606, _607));
    float _680 = _677 * 2.0;
    float _684 = (_680 * _525) - _605;
    float _685 = (_680 * _526) - _606;
    float _686 = (_680 * _527) - _607;
    float _690 = abs(dot(vec3(_605, _606, _607), vec3(_525, _526, _527)));
    float _3542 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _692 = sqrt(_528);
    float _704 = exp2((_692 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_692 * 3.0));
    float _736 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _740 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1046;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _771 = fma(_744, cbModelParam._m0[26u].z, fma(_740, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _736));
        float _775 = fma(_744, cbModelParam._m0[27u].z, fma(_740, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _736));
        float _779 = fma(_744, cbModelParam._m0[28u].z, fma(_740, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _736));
        float _804 = _736 + _525;
        float _805 = _740 + _526;
        float _806 = _744 + _527;
        float _816 = fma(_806, cbModelParam._m0[26u].z, fma(_805, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _804)) - _771;
        float _817 = fma(_806, cbModelParam._m0[27u].z, fma(_805, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _804)) - _775;
        float _818 = fma(_806, cbModelParam._m0[28u].z, fma(_805, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _804)) - _779;
        float _822 = inversesqrt(dot(vec3(_816, _817, _818), vec3(_816, _817, _818)));
        float _835 = ((_822 * _816) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_771 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _836 = ((_822 * _817) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_775 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _837 = ((_822 * _818) / cbModelParam._m0[34u].z) + ((((((_779 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        float _874 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _875 = _874 * (_840.x + (-0.5));
        float _876 = _874 * (_840.y + (-0.5));
        float _877 = _874 * (_840.z + (-0.5));
        float _884 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_847.x + (-0.5));
        float _886 = _884 * (_847.y + (-0.5));
        float _887 = _884 * (_847.z + (-0.5));
        float _894 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_854.x + (-0.5));
        float _896 = _894 * (_854.y + (-0.5));
        float _897 = _894 * (_854.z + (-0.5));
        float _904 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_861.x + (-0.5));
        float _906 = _904 * (_861.y + (-0.5));
        float _907 = _904 * (_861.z + (-0.5));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _910 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _911 = _875 * 0.5;
        float _912 = _885 * 0.5;
        float _913 = _895 * 0.5;
        float _914 = dot(vec3(_911, _912, _913), vec3(_911, _912, _913));
        float _919 = (_914 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_914);
        float _928 = (dot(vec3(_525, _526, _527), vec3(_919 * _911, _919 * _912, _919 * _913)) + 1.0) * 0.5;
        float _3568 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _938 = sqrt(((_912 * _912) + (_911 * _911)) + (_913 * _913)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3579 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _940 = _939 * 2.0;
        float _944 = (1.0 - _939) / (_939 + 1.0);
        float _3590 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _954 = ((((1.0 - _945) * (_940 + 2.0)) * exp2(log2(isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * (_940 + 1.0))) + _945) * _908;
        float _955 = _876 * 0.5;
        float _956 = _886 * 0.5;
        float _957 = _896 * 0.5;
        float _958 = dot(vec3(_955, _956, _957), vec3(_955, _956, _957));
        float _963 = (_958 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_958);
        float _971 = (dot(vec3(_525, _526, _527), vec3(_963 * _955, _963 * _956, _963 * _957)) + 1.0) * 0.5;
        float _3601 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _980 = sqrt(((_956 * _956) + (_955 * _955)) + (_957 * _957)) / (_909 + 9.9999997473787516355514526367188e-06);
        float _3612 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _982 = _981 * 2.0;
        float _986 = (1.0 - _981) / (_981 + 1.0);
        float _3623 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _996 = ((((1.0 - _987) * (_982 + 2.0)) * exp2(log2(isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (_982 + 1.0))) + _987) * _909;
        float _997 = _877 * 0.5;
        float _998 = _887 * 0.5;
        float _999 = _897 * 0.5;
        float _1000 = dot(vec3(_997, _998, _999), vec3(_997, _998, _999));
        float _1005 = (_1000 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1000);
        float _1013 = (dot(vec3(_525, _526, _527), vec3(_1005 * _997, _1005 * _998, _1005 * _999)) + 1.0) * 0.5;
        float _3634 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1022 = sqrt(((_998 * _998) + (_997 * _997)) + (_999 * _999)) / (_910 + 9.9999997473787516355514526367188e-06);
        float _3645 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _1024 = _1023 * 2.0;
        float _1028 = (1.0 - _1023) / (_1023 + 1.0);
        float _3656 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1038 = ((((1.0 - _1029) * (_1024 + 2.0)) * exp2(log2(isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * (_1024 + 1.0))) + _1029) * _910;
        _1046 = _877;
        _1048 = _876;
        _1049 = _875;
        _1050 = _887;
        _1051 = _886;
        _1052 = _885;
        _1053 = _897;
        _1054 = _896;
        _1055 = _895;
        _1056 = _910;
        _1057 = _909;
        _1058 = _908;
        _1059 = cbModelParam._m0[36u].z * (isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0)));
        _1060 = cbModelParam._m0[36u].z * (isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0)));
        _1061 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0)));
    }
    else
    {
        _1046 = _1047;
        _1048 = _1047;
        _1049 = _1047;
        _1050 = _1047;
        _1051 = _1047;
        _1052 = _1047;
        _1053 = _1047;
        _1054 = _1047;
        _1055 = _1047;
        _1056 = _1047;
        _1057 = _1047;
        _1058 = _1047;
        _1059 = 0.0;
        _1060 = 0.0;
        _1061 = 0.0;
    }
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1087 = fma(_744, cbModelParam._m0[30u].z, fma(_740, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _736));
        float _1091 = fma(_744, cbModelParam._m0[31u].z, fma(_740, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _736));
        float _1095 = fma(_744, cbModelParam._m0[32u].z, fma(_740, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _736));
        float _1118 = _736 + _525;
        float _1119 = _740 + _526;
        float _1120 = _744 + _527;
        float _1130 = fma(_1120, cbModelParam._m0[30u].z, fma(_1119, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1118)) - _1087;
        float _1131 = fma(_1120, cbModelParam._m0[31u].z, fma(_1119, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1118)) - _1091;
        float _1132 = fma(_1120, cbModelParam._m0[32u].z, fma(_1119, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1118)) - _1095;
        float _1136 = inversesqrt(dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132)));
        float _1149 = ((_1136 * _1130) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1087 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1150 = ((_1136 * _1131) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1091 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1151 = ((_1136 * _1132) / cbModelParam._m0[35u].z) + ((((((_1095 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        float _1186 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1153.x + (-0.5));
        float _1188 = _1186 * (_1153.y + (-0.5));
        float _1189 = _1186 * (_1153.z + (-0.5));
        float _1196 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1160.x + (-0.5));
        float _1198 = _1196 * (_1160.y + (-0.5));
        float _1199 = _1196 * (_1160.z + (-0.5));
        float _1206 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1167.x + (-0.5));
        float _1208 = _1206 * (_1167.y + (-0.5));
        float _1209 = _1206 * (_1167.z + (-0.5));
        float _1216 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1174.x + (-0.5));
        float _1218 = _1216 * (_1174.y + (-0.5));
        float _1219 = _1216 * (_1174.z + (-0.5));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = _1187 * 0.5;
        float _1224 = _1197 * 0.5;
        float _1225 = _1207 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_525, _526, _527), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3697 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _3708 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _3719 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_1250 + 1.0))) + _1255) * _1220;
        float _1265 = _1188 * 0.5;
        float _1266 = _1198 * 0.5;
        float _1267 = _1208 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_525, _526, _527), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _3752 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_1292 + 1.0))) + _1297) * _1221;
        float _1307 = _1189 * 0.5;
        float _1308 = _1199 * 0.5;
        float _1309 = _1209 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_525, _526, _527), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _3763 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _3774 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _3785 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_1334 + 1.0))) + _1339) * _1222;
        _1356 = _1189;
        _1357 = _1188;
        _1358 = _1187;
        _1359 = _1199;
        _1360 = _1198;
        _1361 = _1197;
        _1362 = _1209;
        _1363 = _1208;
        _1364 = _1207;
        _1365 = _1222;
        _1366 = _1221;
        _1367 = _1220;
        _1368 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1369 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
        _1370 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
    }
    else
    {
        _1356 = _1047;
        _1357 = _1047;
        _1358 = _1047;
        _1359 = _1047;
        _1360 = _1047;
        _1361 = _1047;
        _1362 = _1047;
        _1363 = _1047;
        _1364 = _1047;
        _1365 = _1047;
        _1366 = _1047;
        _1367 = _1047;
        _1368 = 0.0;
        _1369 = 0.0;
        _1370 = 0.0;
    }
    float _1380 = (cbModelParam._m0[1u].x * (_1368 - _1059)) + _1059;
    float _1381 = (cbModelParam._m0[1u].x * (_1369 - _1060)) + _1060;
    float _1382 = (cbModelParam._m0[1u].x * (_1370 - _1061)) + _1061;
    float _1403 = fma(_1382, cbSceneParam._m0[89u].z, fma(_1381, cbSceneParam._m0[89u].y, _1380 * cbSceneParam._m0[89u].x));
    float _1406 = fma(_1382, cbSceneParam._m0[90u].z, fma(_1381, cbSceneParam._m0[90u].y, _1380 * cbSceneParam._m0[90u].x));
    float _1409 = fma(_1382, cbSceneParam._m0[91u].z, fma(_1381, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1380));
    float _1424 = _684 * 0.5;
    float _1425 = _685 * 0.5;
    float _1426 = _686 * 0.5;
    float _1427 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1358, _1361, _1364, _1367));
    float _1430 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1357, _1360, _1363, _1366));
    float _1433 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1356, _1359, _1362, _1365));
    float _1467;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1440 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1046, _1050, _1053, _1056));
        float _1444 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1048, _1051, _1054, _1057));
        float _1448 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1049, _1052, _1055, _1058));
        float _1455 = dot(vec4(cbModelParam._m0[39u]), vec4(_1424, _1425, _1426, 1.0));
        _1467 = dot(vec3(isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)), isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1455) ? 0.0 : (isnan(0.0) ? _1455 : max(0.0, _1455))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1467 = 1.0;
    }
    float _1478;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1469 = dot(vec4(cbModelParam._m0[40u]), vec4(_1424, _1425, _1426, 1.0));
        _1478 = dot(vec3(isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)), isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1469) ? 0.0 : (isnan(0.0) ? _1469 : max(0.0, _1469))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1478 = 1.0;
    }
    float _1482 = (_1478 * cbModelParam._m0[1u].x) + (_1467 * (1.0 - cbModelParam._m0[1u].x));
    float _1492 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _528);
    float _1493 = isnan(_1492) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1492 : min(cbModelParam._m0[25u].z, _1492));
    float _1573;
    float _1575;
    float _1577;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1540 = fma(_744, cbModelParam._m0[13u].z, fma(_740, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _736)) + cbModelParam._m0[13u].w;
        float _1544 = fma(_744, cbModelParam._m0[14u].z, fma(_740, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _736)) + cbModelParam._m0[14u].w;
        float _1548 = fma(_744, cbModelParam._m0[15u].z, fma(_740, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _736)) + cbModelParam._m0[15u].w;
        float _1551 = fma(_686, cbModelParam._m0[13u].z, fma(_685, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _684));
        float _1554 = fma(_686, cbModelParam._m0[14u].z, fma(_685, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _684));
        float _1557 = fma(_686, cbModelParam._m0[15u].z, fma(_685, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _684));
        float _1585;
        if (_1551 > 0.0)
        {
            _1585 = abs((1.0 - _1540) / _1551);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1540 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1585 = frontier_phi_14_12_ladder;
        }
        float _1788;
        if (_1554 > 0.0)
        {
            _1788 = abs((1.0 - _1544) / _1554);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1554 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1544 + 1.0) / _1554);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1788 = frontier_phi_23_19_ladder;
        }
        float _2031;
        if (_1557 > 0.0)
        {
            _2031 = abs((1.0 - _1548) / _1557);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1557 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1548 + 1.0) / _1557);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2031 = frontier_phi_35_30_ladder;
        }
        float _2033 = isnan(_1788) ? _1585 : (isnan(_1585) ? _1788 : min(_1585, _1788));
        float _2034 = isnan(_2031) ? _2033 : (isnan(_2033) ? _2031 : min(_2033, _2031));
        float _2038 = (_2034 * _1551) + _1540;
        float _2039 = (_2034 * _1554) + _1544;
        float _2040 = (_2034 * _1557) + _1548;
        float _2041 = _2034 * 9.9999997473787516355514526367188e-05;
        float _2043 = (-1.0) - _2041;
        float _2045 = _2041 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2040 > _2045) || ((_2040 < _2043) || ((_2039 > _2045) || ((_2039 < _2043) || ((_2038 < _2043) || (_2038 > _2045))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2164 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2040, cbModelParam._m0[9u].z, fma(_2039, cbModelParam._m0[9u].y, _2038 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2040, cbModelParam._m0[10u].z, fma(_2039, cbModelParam._m0[10u].y, _2038 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2040, cbModelParam._m0[11u].z, fma(_2039, cbModelParam._m0[11u].y, _2038 * cbModelParam._m0[11u].x))), _1493);
            frontier_phi_13_35_ladder = _2164.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2164.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2164.x * cbModelParam._m0[1u].y;
        }
        _1573 = frontier_phi_13_35_ladder_2;
        _1575 = frontier_phi_13_35_ladder_1;
        _1577 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1561 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_684, _685, _686), _1493);
        _1573 = _1561.x * cbModelParam._m0[1u].y;
        _1575 = _1561.y * cbModelParam._m0[1u].y;
        _1577 = _1561.z * cbModelParam._m0[1u].y;
    }
    float _1581 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _528);
    float _1582 = isnan(_1581) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1581 : min(cbModelParam._m0[25u].w, _1581));
    float _1673;
    float _1675;
    float _1677;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1637 = fma(_744, cbModelParam._m0[21u].z, fma(_740, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _736)) + cbModelParam._m0[21u].w;
        float _1641 = fma(_744, cbModelParam._m0[22u].z, fma(_740, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _736)) + cbModelParam._m0[22u].w;
        float _1645 = fma(_744, cbModelParam._m0[23u].z, fma(_740, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _736)) + cbModelParam._m0[23u].w;
        float _1648 = fma(_686, cbModelParam._m0[21u].z, fma(_685, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _684));
        float _1651 = fma(_686, cbModelParam._m0[22u].z, fma(_685, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _684));
        float _1654 = fma(_686, cbModelParam._m0[23u].z, fma(_685, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _684));
        float _1793;
        if (_1648 > 0.0)
        {
            _1793 = abs((1.0 - _1637) / _1648);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1648 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1637 + 1.0) / _1648);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1793 = frontier_phi_25_21_ladder;
        }
        float _2058;
        if (_1651 > 0.0)
        {
            _2058 = abs((1.0 - _1641) / _1651);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1641 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2058 = frontier_phi_37_32_ladder;
        }
        float _2263;
        if (_1654 > 0.0)
        {
            _2263 = abs((1.0 - _1645) / _1654);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1654 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1645 + 1.0) / _1654);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2263 = frontier_phi_46_43_ladder;
        }
        float _2265 = isnan(_2058) ? _1793 : (isnan(_1793) ? _2058 : min(_1793, _2058));
        float _2266 = isnan(_2263) ? _2265 : (isnan(_2265) ? _2263 : min(_2265, _2263));
        float _2270 = (_2266 * _1648) + _1637;
        float _2271 = (_2266 * _1651) + _1641;
        float _2272 = (_2266 * _1654) + _1645;
        float _2273 = _2266 * 9.9999997473787516355514526367188e-05;
        float _2274 = (-1.0) - _2273;
        float _2276 = _2273 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2272 > _2276) || ((_2272 < _2274) || ((_2271 > _2276) || ((_2271 < _2274) || ((_2270 < _2274) || (_2270 > _2276))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2516 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2272, cbModelParam._m0[17u].z, fma(_2271, cbModelParam._m0[17u].y, _2270 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2272, cbModelParam._m0[18u].z, fma(_2271, cbModelParam._m0[18u].y, _2270 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2272, cbModelParam._m0[19u].z, fma(_2271, cbModelParam._m0[19u].y, _2270 * cbModelParam._m0[19u].x))), _1582);
            frontier_phi_22_46_ladder = _2516.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2516.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2516.x * cbModelParam._m0[1u].z;
        }
        _1673 = frontier_phi_22_46_ladder_2;
        _1675 = frontier_phi_22_46_ladder_1;
        _1677 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1657 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_684, _685, _686), _1582);
        _1673 = _1657.x * cbModelParam._m0[1u].z;
        _1675 = _1657.y * cbModelParam._m0[1u].z;
        _1677 = _1657.z * cbModelParam._m0[1u].z;
    }
    float _1689 = ((((1.0 - _704) * ((_692 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_704 * _692)) * _676;
    float _1690 = _1689 * ((cbModelParam._m0[1u].w * (_1673 - _1573)) + _1573);
    float _1691 = _1689 * ((cbModelParam._m0[1u].w * (_1675 - _1575)) + _1575);
    float _1692 = _1689 * ((cbModelParam._m0[1u].w * (_1677 - _1577)) + _1577);
    float _1695 = fma(_1692, cbSceneParam._m0[89u].z, fma(_1691, cbSceneParam._m0[89u].y, _1690 * cbSceneParam._m0[89u].x));
    float _1698 = fma(_1692, cbSceneParam._m0[90u].z, fma(_1691, cbSceneParam._m0[90u].y, _1690 * cbSceneParam._m0[90u].x));
    float _1701 = fma(_1692, cbSceneParam._m0[91u].z, fma(_1691, cbSceneParam._m0[91u].y, _1690 * cbSceneParam._m0[91u].x));
    uvec4 _1711 = floatBitsToUint(cbInstanceData._m0[_651 + 5u]);
    uint _1713 = _1711.x * 14u;
    uint _1714 = _1713 + 13u;
    float _1721 = _676 + (-1.0);
    float _1726 = (cbLight._m0[_1714].x * _1721) + 1.0;
    float _1727 = (cbLight._m0[_1714].y * _1721) + 1.0;
    float _1728 = (cbLight._m0[_1714].z * _1721) + 1.0;
    float _1729 = (cbLight._m0[_1714].w * _1721) + 1.0;
    uint _1730 = _1713 + 5u;
    float _1736 = isnan(1.0) ? _1727 : (isnan(_1727) ? 1.0 : min(_1727, 1.0));
    uint _1740 = _1713 + 4u;
    float _1747 = isnan(1.0) ? _1726 : (isnan(_1726) ? 1.0 : min(_1726, 1.0));
    uint _1751 = _1713 | 1u;
    float _1762 = dot(vec3(cbLight._m0[_1713].xyz), vec3(_525, _526, _527));
    float _1765 = dot(vec3(cbLight._m0[_1751].xyz), vec3(_525, _526, _527));
    float _3921 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _3932 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _1770 = (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * 0.3183098733425140380859375;
    float _1772 = (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * 0.3183098733425140380859375;
    float _1779 = ((cbLight._m0[_1730].x * _1736) * _1772) + ((cbLight._m0[_1740].x * _1747) * _1770);
    float _1780 = ((_1736 * cbLight._m0[_1730].y) * _1772) + ((_1747 * cbLight._m0[_1740].y) * _1770);
    float _1781 = ((_1736 * cbLight._m0[_1730].z) * _1772) + ((_1747 * cbLight._m0[_1740].z) * _1770);
    uvec4 _1785 = floatBitsToUint(cbLight._m0[_1713 + 12u]);
    bool _1787 = _1785.x == 0u;
    float _1798;
    float _1800;
    float _1802;
    if (_1787)
    {
        _1798 = _1779;
        _1800 = _1780;
        _1802 = _1781;
    }
    else
    {
        uint _1806 = _1713 + 6u;
        float _1822 = (dot(vec3(cbLight._m0[_1713 + 2u].xyz), vec3(_525, _526, _527)) * 0.5) + 0.5;
        float _1823 = _1822 * _1822;
        float _3943 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1824 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1825 = isnan(1.0) ? _1728 : (isnan(_1728) ? 1.0 : min(_1728, 1.0));
        _1798 = (((cbLight._m0[_1806].x * 0.3183098733425140380859375) * _1824) * _1825) + _1779;
        _1800 = (((cbLight._m0[_1806].y * 0.3183098733425140380859375) * _1824) * _1825) + _1780;
        _1802 = (((cbLight._m0[_1806].z * 0.3183098733425140380859375) * _1824) * _1825) + _1781;
    }
    bool _1805 = _1785.y == 0u;
    float _1843;
    float _1845;
    float _1847;
    if (_1805)
    {
        _1843 = _1798;
        _1845 = _1800;
        _1847 = _1802;
    }
    else
    {
        uint _2002 = _1713 + 7u;
        float _2018 = (dot(vec3(cbLight._m0[_1713 + 3u].xyz), vec3(_525, _526, _527)) * 0.5) + 0.5;
        float _2019 = _2018 * _2018;
        float _3959 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2020 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _2021 = isnan(1.0) ? _1729 : (isnan(_1729) ? 1.0 : min(_1729, 1.0));
        _1843 = (((cbLight._m0[_2002].x * 0.3183098733425140380859375) * _2020) * _2021) + _1798;
        _1845 = (((cbLight._m0[_2002].y * 0.3183098733425140380859375) * _2020) * _2021) + _1800;
        _1847 = (((cbLight._m0[_2002].z * 0.3183098733425140380859375) * _2020) * _2021) + _1802;
    }
    uint _1850 = _1713 + 8u;
    float _1863 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1713].w)) * _528) * 0.949999988079071044921875);
    float _1864 = _1863 * _1863;
    float _1865 = cbLight._m0[_1713].x + _605;
    float _1866 = cbLight._m0[_1713].y + _606;
    float _1867 = cbLight._m0[_1713].z + _607;
    float _1871 = inversesqrt(dot(vec3(_1865, _1866, _1867), vec3(_1865, _1866, _1867)));
    float _1872 = _1871 * _1865;
    float _1873 = _1871 * _1866;
    float _1874 = _1871 * _1867;
    float _1875 = dot(vec3(_525, _526, _527), vec3(cbLight._m0[_1713].xyz));
    float _3975 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1878 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _3986 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _1879 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _1880 = dot(vec3(_525, _526, _527), vec3(_1872, _1873, _1874));
    float _3997 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1883 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _1884 = dot(vec3(cbLight._m0[_1713].xyz), vec3(_1872, _1873, _1874));
    float _4008 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1888 = _1864 * _1864;
    float _1892 = ((_1883 * _1883) * (_1888 + (-1.0))) + 1.0;
    float _1903 = (exp2(log2(1.0 - (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1904 = 1.0 - _1864;
    float _1915 = (0.5 / (((_1879 * ((_1878 * _1904) + _1864)) + 9.9999999392252902907785028219223e-09) + (((_1879 * _1904) + _1864) * _1878))) * _1878;
    float _4019 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1917 = (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1888 / ((_1892 * _1892) * 3.141590118408203125));
    uint _1928 = _1713 + 9u;
    float _1939 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1751].w)) * _528) * 0.949999988079071044921875);
    float _1940 = _1939 * _1939;
    float _1941 = cbLight._m0[_1751].x + _605;
    float _1942 = cbLight._m0[_1751].y + _606;
    float _1943 = cbLight._m0[_1751].z + _607;
    float _1947 = inversesqrt(dot(vec3(_1941, _1942, _1943), vec3(_1941, _1942, _1943)));
    float _1948 = _1947 * _1941;
    float _1949 = _1947 * _1942;
    float _1950 = _1947 * _1943;
    float _1951 = dot(vec3(_525, _526, _527), vec3(cbLight._m0[_1751].xyz));
    float _4030 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1954 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _1955 = dot(vec3(_525, _526, _527), vec3(_1948, _1949, _1950));
    float _4041 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1958 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _1959 = dot(vec3(cbLight._m0[_1751].xyz), vec3(_1948, _1949, _1950));
    float _4052 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1963 = _1940 * _1940;
    float _1967 = ((_1958 * _1958) * (_1963 + (-1.0))) + 1.0;
    float _1976 = (exp2(log2(1.0 - (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1977 = 1.0 - _1940;
    float _1987 = (0.5 / (((_1879 * ((_1954 * _1977) + _1940)) + 9.9999999392252902907785028219223e-09) + (((_1879 * _1977) + _1940) * _1954))) * _1954;
    float _4063 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1989 = (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1963 / ((_1967 * _1967) * 3.141590118408203125));
    float _1999 = (((_1976 * cbLight._m0[_1928].x) * _1989) * _1736) + (((_1903 * cbLight._m0[_1850].x) * _1917) * _1747);
    float _2000 = (((_1976 * cbLight._m0[_1928].y) * _1989) * _1736) + (((_1903 * cbLight._m0[_1850].y) * _1917) * _1747);
    float _2001 = (((_1976 * cbLight._m0[_1928].z) * _1989) * _1736) + (((_1903 * cbLight._m0[_1850].z) * _1917) * _1747);
    float _2063;
    float _2065;
    float _2067;
    if (_1787)
    {
        _2063 = _1999;
        _2065 = _2000;
        _2067 = _2001;
    }
    else
    {
        uint _2069 = _1713 + 2u;
        uint _2073 = _1713 + 10u;
        float _2087 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2069].w)) * _528) * 0.949999988079071044921875);
        float _2088 = _2087 * _2087;
        float _2089 = cbLight._m0[_2069].x + _605;
        float _2090 = cbLight._m0[_2069].y + _606;
        float _2091 = cbLight._m0[_2069].z + _607;
        float _2095 = inversesqrt(dot(vec3(_2089, _2090, _2091), vec3(_2089, _2090, _2091)));
        float _2096 = _2095 * _2089;
        float _2097 = _2095 * _2090;
        float _2098 = _2095 * _2091;
        float _2099 = dot(vec3(_525, _526, _527), vec3(cbLight._m0[_2069].xyz));
        float _4074 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2102 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _2103 = dot(vec3(_525, _526, _527), vec3(_2096, _2097, _2098));
        float _4085 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2106 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _2107 = dot(vec3(cbLight._m0[_2069].xyz), vec3(_2096, _2097, _2098));
        float _4096 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2111 = _2088 * _2088;
        float _2115 = ((_2106 * _2106) * (_2111 + (-1.0))) + 1.0;
        float _2124 = (exp2(log2(1.0 - (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2125 = 1.0 - _2088;
        float _2135 = (0.5 / (((_1879 * ((_2102 * _2125) + _2088)) + 9.9999999392252902907785028219223e-09) + (((_1879 * _2125) + _2088) * _2102))) * _2102;
        float _4107 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2137 = (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_2111 / ((_2115 * _2115) * 3.141590118408203125));
        float _2138 = isnan(1.0) ? _1728 : (isnan(_1728) ? 1.0 : min(_1728, 1.0));
        _2063 = (((_2124 * cbLight._m0[_2073].x) * _2137) * _2138) + _1999;
        _2065 = (((_2124 * cbLight._m0[_2073].y) * _2137) * _2138) + _2000;
        _2067 = (((_2124 * cbLight._m0[_2073].z) * _2137) * _2138) + _2001;
    }
    float _2173;
    float _2175;
    float _2177;
    if (_1805)
    {
        _2173 = _2063;
        _2175 = _2065;
        _2177 = _2067;
    }
    else
    {
        uint _2184 = _1713 + 3u;
        uint _2188 = _1713 + 11u;
        float _2202 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2184].w)) * _528) * 0.949999988079071044921875);
        float _2203 = _2202 * _2202;
        float _2204 = cbLight._m0[_2184].x + _605;
        float _2205 = cbLight._m0[_2184].y + _606;
        float _2206 = cbLight._m0[_2184].z + _607;
        float _2210 = inversesqrt(dot(vec3(_2204, _2205, _2206), vec3(_2204, _2205, _2206)));
        float _2211 = _2210 * _2204;
        float _2212 = _2210 * _2205;
        float _2213 = _2210 * _2206;
        float _2214 = dot(vec3(_525, _526, _527), vec3(cbLight._m0[_2184].xyz));
        float _4123 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        float _2217 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _2218 = dot(vec3(_525, _526, _527), vec3(_2211, _2212, _2213));
        float _4134 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2221 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _2222 = dot(vec3(cbLight._m0[_2184].xyz), vec3(_2211, _2212, _2213));
        float _4145 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2226 = _2203 * _2203;
        float _2230 = ((_2221 * _2221) * (_2226 + (-1.0))) + 1.0;
        float _2239 = (exp2(log2(1.0 - (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2240 = 1.0 - _2203;
        float _2250 = (0.5 / (((_1879 * ((_2217 * _2240) + _2203)) + 9.9999999392252902907785028219223e-09) + (((_1879 * _2240) + _2203) * _2217))) * _2217;
        float _4156 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2252 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_2226 / ((_2230 * _2230) * 3.141590118408203125));
        float _2253 = isnan(1.0) ? _1729 : (isnan(_1729) ? 1.0 : min(_1729, 1.0));
        _2173 = (((_2239 * cbLight._m0[_2188].x) * _2252) * _2253) + _2063;
        _2175 = (((_2239 * cbLight._m0[_2188].y) * _2252) * _2253) + _2065;
        _2177 = (((_2239 * cbLight._m0[_2188].z) * _2252) * _2253) + _2067;
    }
    float _2388;
    float _2390;
    float _2392;
    float _2394;
    float _2396;
    float _2398;
    if (_1711.y == 0u)
    {
        float _2328 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2329 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2328;
        float _2330 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2328;
        float _2331 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2328;
        uvec4 _2343 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2344 = _2343.x;
        uint _2355 = uint((float(_2343.y) * floor(float(uint(cbSceneParam._m0[85u].y * _614) / _2344))) + floor(float(uint(cbSceneParam._m0[85u].x * _613) / _2344)));
        float _2365 = (log2(_2331 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2366 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        uint _2369 = uint(isnan(14.0) ? _2366 : (isnan(_2366) ? 14.0 : min(_2366, 14.0)));
        uvec4 _2374 = texelFetch(g_lightClusterGridBuffer, int(((_2369 << 2u) + (_2355 << 6u)) >> 2u));
        uint _2375 = _2374.x;
        uint _2376 = _2343.z;
        float _2521;
        float _2523;
        float _2525;
        float _2527;
        float _2529;
        float _2531;
        if (((((1u << ((_2376 >> 4u) & 15u)) + 4294967295u) & _2375) == 0u) || ((_2376 & 240u) == 0u))
        {
            _2521 = 0.0;
            _2523 = 0.0;
            _2525 = 0.0;
            _2527 = 0.0;
            _2529 = 0.0;
            _2531 = 0.0;
        }
        else
        {
            float _2522;
            float _2524;
            float _2526;
            float _2528;
            float _2530;
            float _2532;
            float _2674 = 0.0;
            float _2675 = 0.0;
            float _2676 = 0.0;
            float _2677 = 0.0;
            float _2678 = 0.0;
            float _2679 = 0.0;
            uint _2680 = 0u;
            uint _2689;
            bool _2690;
            for (;;)
            {
                _2689 = texelFetch(g_lightClassification, int((((_2369 << 5u) + (_2355 << 9u)) + (_2680 << 2u)) >> 2u)).x;
                _2690 = _2689 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2690)
                {
                    frontier_phi_61_pred = _2674;
                    frontier_phi_61_pred_1 = _2679;
                    frontier_phi_61_pred_2 = _2678;
                    frontier_phi_61_pred_3 = _2677;
                    frontier_phi_61_pred_4 = _2676;
                    frontier_phi_61_pred_5 = _2675;
                }
                else
                {
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    float _2803;
                    uint _2804;
                    _2798 = _2674;
                    _2799 = _2675;
                    _2800 = _2676;
                    _2801 = _2677;
                    _2802 = _2678;
                    _2803 = _2679;
                    _2804 = _2689;
                    float _2730;
                    float _2731;
                    float _2732;
                    float _2733;
                    float _2734;
                    float _2735;
                    for (;;)
                    {
                        uint _2808 = uint(findLSB(_2804)) + (_2680 << 5u);
                        uint _2805 = (_2804 + 4294967295u) & _2804;
                        uint _2810 = _2808 * 48u;
                        vec4 _2824 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2810)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 3u)).x));
                        uint _2830 = (_2808 * 48u) + 4u;
                        vec4 _2843 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2830)).x, texelFetch(g_PointLightRenderingBuffer, int(_2830 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2830 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2830 + 3u)).x));
                        uint _2849 = (_2808 * 48u) + 8u;
                        vec3 _2860 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2849)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 2u)).x));
                        float _2864 = _2824.x - _2329;
                        float _2865 = _2824.y - _2330;
                        float _2866 = _2824.z - _2331;
                        float _2867 = dot(vec3(_2864, _2865, _2866), vec3(_2864, _2865, _2866));
                        float _2870 = inversesqrt(_2867);
                        float _2871 = _2870 * _2864;
                        float _2872 = _2870 * _2865;
                        float _2873 = _2870 * _2866;
                        float _2874 = dot(vec3(_632, _635, _638), vec3(_2871, _2872, _2873));
                        float _2879 = 1.0 - (_2867 * _2824.w);
                        float _4182 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
                        float _2880 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                        float _2881 = sqrt(_2867) * _2843.w;
                        float _2884 = 1.39999997615814208984375 / (_2881 + 1.39999997615814208984375);
                        float _2885 = _2884 * _2884;
                        float _2888 = ((1.0 - _2885) * _2874) + _2885;
                        float _2891 = _2881 * _2881;
                        float _2895 = ((isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0))) * _2880) / ((_2891 * 0.699999988079071044921875) + 1.0);
                        float _2899 = (-0.0) - _2329;
                        float _2900 = (-0.0) - _2330;
                        float _2901 = (-0.0) - _2331;
                        float _2905 = inversesqrt(dot(vec3(_2899, _2900, _2901), vec3(_2899, _2900, _2901)));
                        float _2906 = _2905 * _2899;
                        float _2907 = _2905 * _2900;
                        float _2908 = _2905 * _2901;
                        float _2916 = exp2(log2(1.0 / ((_2891 * 3.5) + 5.0)) * 0.25);
                        float _2917 = 1.0 - _692;
                        float _2924 = sqrt(1.0 - ((1.0 - (_2917 * _2917)) * (1.0 - (_2916 * _2916))));
                        float _2925 = _2924 * _2924;
                        float _2926 = _2925 * _2925;
                        float _2927 = _2906 + _2871;
                        float _2928 = _2907 + _2872;
                        float _2929 = _2908 + _2873;
                        float _2933 = inversesqrt(dot(vec3(_2927, _2928, _2929), vec3(_2927, _2928, _2929)));
                        float _2937 = dot(vec3(_632, _635, _638), vec3(_2906, _2907, _2908));
                        float _4198 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                        float _2940 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
                        float _2941 = dot(vec3(_632, _635, _638), vec3(_2933 * _2927, _2933 * _2928, _2933 * _2929));
                        float _4209 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                        float _2944 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                        float _2948 = ((_2944 * _2944) * (_2926 + (-1.0))) + 1.0;
                        float _2949 = _2884 * _2925;
                        float _2950 = _2949 * _2949;
                        float _2953 = ((1.0 - _2950) * _2874) + _2950;
                        float _4220 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
                        float _2954 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
                        float _2955 = 1.0 - _2925;
                        float _2965 = (0.5 / (((_2954 * ((_2940 * _2955) + _2925)) + 9.9999999392252902907785028219223e-09) + (((_2954 * _2955) + _2925) * _2940))) * _2954;
                        float _4231 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                        float _2976 = (((_2926 * 3.1415927410125732421875) * (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0)))) / ((_2948 * _2948) * ((_2891 * 2.1991131305694580078125) + 3.141590118408203125))) * _2880;
                        _2733 = (_2895 * _2843.x) + _2801;
                        _2734 = (_2895 * _2843.y) + _2802;
                        _2735 = (_2895 * _2843.z) + _2803;
                        _2730 = (_2976 * _2860.x) + _2798;
                        _2731 = (_2976 * _2860.y) + _2799;
                        _2732 = (_2976 * _2860.z) + _2800;
                        if (_2805 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2798 = _2730;
                            _2799 = _2731;
                            _2800 = _2732;
                            _2801 = _2733;
                            _2802 = _2734;
                            _2803 = _2735;
                            _2804 = _2805;
                        }
                    }
                    frontier_phi_61_pred = _2730;
                    frontier_phi_61_pred_1 = _2735;
                    frontier_phi_61_pred_2 = _2734;
                    frontier_phi_61_pred_3 = _2733;
                    frontier_phi_61_pred_4 = _2732;
                    frontier_phi_61_pred_5 = _2731;
                }
                _2522 = frontier_phi_61_pred;
                _2532 = frontier_phi_61_pred_1;
                _2530 = frontier_phi_61_pred_2;
                _2528 = frontier_phi_61_pred_3;
                _2526 = frontier_phi_61_pred_4;
                _2524 = frontier_phi_61_pred_5;
                uint _2681 = _2680 + 1u;
                if (_2681 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2674 = _2522;
                    _2675 = _2524;
                    _2676 = _2526;
                    _2677 = _2528;
                    _2678 = _2530;
                    _2679 = _2532;
                    _2680 = _2681;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2521 = _2522;
            _2523 = _2524;
            _2525 = _2526;
            _2527 = _2528;
            _2529 = _2530;
            _2531 = _2532;
        }
        uvec4 _2535 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2536 = _2535.z;
        uint _2538 = (_2536 >> 8u) & 15u;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        float _2652;
        if (((4294967295u << _2538) & _2375) == 0u)
        {
            _2642 = _2521;
            _2644 = _2523;
            _2646 = _2525;
            _2648 = _2527;
            _2650 = _2529;
            _2652 = _2531;
        }
        else
        {
            float _2667 = inversesqrt(dot(vec3(_2329, _2330, _2331), vec3(_2329, _2330, _2331)));
            float _2668 = _2667 * _2329;
            float _2669 = _2667 * _2330;
            float _2670 = _2667 * _2331;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2538 < ((_2536 >> 12u) & 15u))
            {
                float _2643;
                float _2645;
                float _2647;
                float _2649;
                float _2651;
                float _2653;
                float _2781 = _2521;
                float _2782 = _2523;
                float _2783 = _2525;
                float _2784 = _2527;
                float _2785 = _2529;
                float _2786 = _2531;
                uint _2787 = _2538;
                uint _2796;
                bool _2797;
                for (;;)
                {
                    _2796 = texelFetch(g_lightClassification, int((((_2369 << 5u) + (_2355 << 9u)) + (_2787 << 2u)) >> 2u)).x;
                    _2797 = _2796 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2797)
                    {
                        frontier_phi_67_pred = _2784;
                        frontier_phi_67_pred_1 = _2785;
                        frontier_phi_67_pred_2 = _2786;
                        frontier_phi_67_pred_3 = _2783;
                        frontier_phi_67_pred_4 = _2782;
                        frontier_phi_67_pred_5 = _2781;
                    }
                    else
                    {
                        float _2981;
                        float _2982;
                        float _2983;
                        float _2984;
                        float _2985;
                        float _2986;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _2994 = _2781;
                        float _2995 = _2782;
                        float _2996 = _2783;
                        float _2997 = _2784;
                        float _2998 = _2785;
                        float _2999 = _2786;
                        uint _3000 = _2796;
                        uint _3001;
                        vec4 _3026;
                        float _3027;
                        vec4 _3042;
                        vec3 _3054;
                        vec4 _3069;
                        vec4 _3085;
                        float _3132;
                        bool _3133;
                        for (;;)
                        {
                            uint _3011 = ((_2787 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3000));
                            _3001 = (_3000 + 4294967295u) & _3000;
                            uint _3013 = _3011 * 40u;
                            _3026 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3013)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 3u)).x));
                            _3027 = _3026.w;
                            uint _3029 = (_3011 * 40u) + 4u;
                            _3042 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 3u)).x));
                            uint _3044 = (_3011 * 40u) + 8u;
                            _3054 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3044)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 2u)).x));
                            uint _3056 = (_3011 * 40u) + 16u;
                            _3069 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3056)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 3u)).x));
                            uint _3072 = (_3011 * 40u) + 20u;
                            _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            uint _3088 = (_3011 * 40u) + 24u;
                            vec4 _3101 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 3u)).x));
                            uint _3107 = (_3011 * 40u) + 28u;
                            vec4 _3120 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 3u)).x));
                            _3132 = fma(_2331, _3120.z, fma(_2330, _3120.y, _3120.x * _2329)) + _3120.w;
                            _3133 = !((fma(_2331, _3101.z, fma(_2330, _3101.y, _3101.x * _2329)) + _3101.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3133)
                            {
                                float _3160 = _3026.x - _2329;
                                float _3161 = _3026.y - _2330;
                                float _3162 = _3026.z - _2331;
                                float _3163 = dot(vec3(_3160, _3161, _3162), vec3(_3160, _3161, _3162));
                                float _3166 = inversesqrt(_3163);
                                float _3167 = _3166 * _3160;
                                float _3168 = _3166 * _3161;
                                float _3169 = _3166 * _3162;
                                float _3173 = 1.0 - (_3163 / (_3027 * _3027));
                                float _4242 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                                float _3174 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
                                float _3178 = sqrt(_3163) * _3042.w;
                                float _3180 = 1.39999997615814208984375 / (_3178 + 1.39999997615814208984375);
                                float _3181 = _3180 * _3180;
                                float _3184 = ((1.0 - _3181) * dot(vec3(_3167, _3168, _3169), vec3(_632, _635, _638))) + _3181;
                                float _3187 = _3178 * _3178;
                                float _3191 = (fma(_2331, _3069.z, fma(_2330, _3069.y, _3069.x * _2329)) + _3069.w) / _3132;
                                float _3192 = (fma(_2331, _3085.z, fma(_2330, _3085.y, _3085.x * _2329)) + _3085.w) / _3132;
                                float _3196 = 1.0 - dot(vec2(_3191, _3192), vec2(_3191, _3192));
                                float _4258 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                                float _3197 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
                                float _3198 = _3197 * (((isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0))) * _3174) / ((_3187 * 0.699999988079071044921875) + 1.0));
                                float _3210 = exp2(log2(1.0 / ((_3187 * 3.5) + 5.0)) * 0.25);
                                float _3211 = 1.0 - _692;
                                float _3218 = sqrt(1.0 - ((1.0 - (_3211 * _3211)) * (1.0 - (_3210 * _3210))));
                                float _3219 = _3218 * _3218;
                                float _3220 = _3219 * _3219;
                                float _3221 = _3167 - _2668;
                                float _3222 = _3168 - _2669;
                                float _3223 = _3169 - _2670;
                                float _3227 = inversesqrt(dot(vec3(_3221, _3222, _3223), vec3(_3221, _3222, _3223)));
                                float _3231 = dot(vec3(_632, _635, _638), vec3((-0.0) - _2668, (-0.0) - _2669, (-0.0) - _2670));
                                float _4269 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                                float _3234 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                                float _3235 = dot(vec3(_632, _635, _638), vec3(_3227 * _3221, _3227 * _3222, _3227 * _3223));
                                float _4280 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                                float _3238 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                                float _3242 = ((_3238 * _3238) * (_3220 + (-1.0))) + 1.0;
                                float _3243 = _3180 * _3219;
                                float _3244 = _3243 * _3243;
                                float _3250 = ((1.0 - _3244) * dot(vec3(_632, _635, _638), vec3(_3167, _3168, _3169))) + _3244;
                                float _4291 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                                float _3251 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                                float _3252 = 1.0 - _3219;
                                float _3262 = (0.5 / (((_3251 * ((_3234 * _3252) + _3219)) + 9.9999999392252902907785028219223e-09) + (((_3251 * _3252) + _3219) * _3234))) * _3251;
                                float _4302 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                                float _3272 = (_3197 * _3174) * (((_3220 * 3.1415927410125732421875) * (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) / ((_3242 * _3242) * ((_3187 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3272 * _3054.x;
                                frontier_phi_73_pred_1 = _3272 * _3054.y;
                                frontier_phi_73_pred_2 = _3198 * _3042.z;
                                frontier_phi_73_pred_3 = _3198 * _3042.y;
                                frontier_phi_73_pred_4 = _3198 * _3042.x;
                                frontier_phi_73_pred_5 = _3272 * _3054.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3276 = frontier_phi_73_pred;
                            _3277 = frontier_phi_73_pred_1;
                            _3281 = frontier_phi_73_pred_2;
                            _3280 = frontier_phi_73_pred_3;
                            _3279 = frontier_phi_73_pred_4;
                            _3278 = frontier_phi_73_pred_5;
                            _2984 = _3279 + _2997;
                            _2985 = _3280 + _2998;
                            _2986 = _3281 + _2999;
                            _2981 = _3276 + _2994;
                            _2982 = _3277 + _2995;
                            _2983 = _3278 + _2996;
                            if (_3001 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2994 = _2981;
                                _2995 = _2982;
                                _2996 = _2983;
                                _2997 = _2984;
                                _2998 = _2985;
                                _2999 = _2986;
                                _3000 = _3001;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2984;
                        frontier_phi_67_pred_1 = _2985;
                        frontier_phi_67_pred_2 = _2986;
                        frontier_phi_67_pred_3 = _2983;
                        frontier_phi_67_pred_4 = _2982;
                        frontier_phi_67_pred_5 = _2981;
                    }
                    _2649 = frontier_phi_67_pred;
                    _2651 = frontier_phi_67_pred_1;
                    _2653 = frontier_phi_67_pred_2;
                    _2647 = frontier_phi_67_pred_3;
                    _2645 = frontier_phi_67_pred_4;
                    _2643 = frontier_phi_67_pred_5;
                    uint _2788 = _2787 + 1u;
                    if (_2788 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2781 = _2643;
                        _2782 = _2645;
                        _2783 = _2647;
                        _2784 = _2649;
                        _2785 = _2651;
                        _2786 = _2653;
                        _2787 = _2788;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2651;
                frontier_phi_55_56_ladder_1 = _2653;
                frontier_phi_55_56_ladder_2 = _2649;
                frontier_phi_55_56_ladder_3 = _2647;
                frontier_phi_55_56_ladder_4 = _2645;
                frontier_phi_55_56_ladder_5 = _2643;
            }
            else
            {
                frontier_phi_55_56_ladder = _2529;
                frontier_phi_55_56_ladder_1 = _2531;
                frontier_phi_55_56_ladder_2 = _2527;
                frontier_phi_55_56_ladder_3 = _2525;
                frontier_phi_55_56_ladder_4 = _2523;
                frontier_phi_55_56_ladder_5 = _2521;
            }
            _2642 = frontier_phi_55_56_ladder_5;
            _2644 = frontier_phi_55_56_ladder_4;
            _2646 = frontier_phi_55_56_ladder_3;
            _2648 = frontier_phi_55_56_ladder_2;
            _2650 = frontier_phi_55_56_ladder;
            _2652 = frontier_phi_55_56_ladder_1;
        }
        float _2657 = isnan(1.0) ? _676 : (isnan(_676) ? 1.0 : min(_676, 1.0));
        _2388 = (_2657 * _2648) + _1843;
        _2390 = (_2657 * _2650) + _1845;
        _2392 = (_2657 * _2652) + _1847;
        _2394 = ((_2642 * 0.039999999105930328369140625) * _2657) + _2173;
        _2396 = ((_2644 * 0.039999999105930328369140625) * _2657) + _2175;
        _2398 = ((_2646 * 0.039999999105930328369140625) * _2657) + _2177;
    }
    else
    {
        _2388 = _1843;
        _2390 = _1845;
        _2392 = _1847;
        _2394 = _2173;
        _2396 = _2175;
        _2398 = _2177;
    }
    uint _2404 = _652 + uint(cbMatDynParam._m0[0u].w);
    float _2410 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].y;
    float _2416 = (((((_2410 * cbMtdParam._m0[10u].x) * _406.x) * _429) * _504) * (((1.0 - _483) * cbMtdParam._m0[16u].y) + _483)) * cbInstanceData._m0[_2404].x;
    float _2422 = (((((_2410 * cbMtdParam._m0[10u].y) * _406.y) * _429) * _504) * (((1.0 - _485) * cbMtdParam._m0[16u].y) + _485)) * cbInstanceData._m0[_2404].y;
    float _2428 = (((((_2410 * cbMtdParam._m0[10u].z) * _406.z) * _429) * _504) * (((1.0 - _487) * cbMtdParam._m0[16u].y) + _487)) * cbInstanceData._m0[_2404].z;
    float _4318 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _4329 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _4340 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _2445 = (((isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2388 + ((isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))) * _676))) + ((_2394 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _1482)) * cbPerFrame._m0[3u].x)) + _2416;
    float _2447 = (_2422 + ((_2396 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _1482)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_2390 + ((isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))) * _676)));
    float _2449 = (_2428 + ((_2398 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _1482)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_2392 + ((isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))) * _676)));
    float _4366 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2462 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
    uint _2463 = _651 + 6u;
    float _2471 = _613 / cbSceneParam._m0[86u].x;
    float _2472 = _614 / cbSceneParam._m0[86u].y;
    vec4 _2486 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2471, _2472, (log2((isnan(cbSceneParam._m0[77u].w) ? _547 : (isnan(_547) ? cbSceneParam._m0[77u].w : min(_547, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2488 = _2486.x;
    float _2489 = _2486.y;
    float _2490 = _2486.z;
    float _2491 = _2486.w;
    float _2583;
    float _2585;
    float _2587;
    float _2589;
    if (_547 > cbSceneParam._m0[78u].w)
    {
        float _2546 = isnan(_547) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _547 : min(cbSceneParam._m0[80u].w, _547));
        float _2547 = _2546 / _547;
        float _2558 = _2547 * _598;
        float _2559 = _599 * _2547;
        float _2560 = (-0.0) - _2559;
        float _2561 = _2547 * _600;
        float _2563 = (cbSceneParam._m0[77u].w * _2560) / _2546;
        float _2564 = _2563 + cbSceneParam._m0[79u].w;
        float _2565 = cbSceneParam._m0[79u].w - _2559;
        float _2571 = sqrt(((_2558 * _2558) + (_2559 * _2559)) + (_2561 * _2561));
        float _2574 = (1.0 - (cbSceneParam._m0[77u].w / _2546)) * _2571;
        float _2579 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2581 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2743;
        if (abs((_2560 - _2563) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2743 = ((((_2564 > 0.0) ? exp2(_2579 * _2564) : (2.0 - exp2(_2581 * _2564))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2574;
        }
        else
        {
            float _2703 = 1.0 / cbSceneParam._m0[80u].x;
            float _2704 = isnan(_2565) ? _2564 : (isnan(_2564) ? _2565 : max(_2564, _2565));
            float _2705 = isnan(_2565) ? _2564 : (isnan(_2564) ? _2565 : min(_2564, _2565));
            float _2714 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : min(_2704, 0.0));
            float _2715 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : min(_2705, 0.0));
            _2743 = ((abs(_2571 / _2560) * cbSceneParam._m0[80u].y) * ((((_2714 - _2715) * 2.0) - ((exp2(_2579 * (isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0)))) - exp2(_2579 * (isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0))))) * _2703)) - ((exp2(_2581 * _2714) - exp2(_2581 * _2715)) * _2703))) + (_2574 * cbSceneParam._m0[80u].z);
        }
        vec4 _2745 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2471, _2472, 1.0), 0.0);
        float _2754 = exp2((_2743 * (-1.44269502162933349609375)) * (1.0 - _2745.w));
        float _2755 = log2(_2754);
        float _2771 = log2(_2491);
        _2583 = (exp2(_2771 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2755 * cbSceneParam._m0[78u].x)) * _2745.x) / cbSceneParam._m0[78u].x)) + _2488;
        _2585 = (exp2(_2771 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2755 * cbSceneParam._m0[78u].y)) * _2745.y) / cbSceneParam._m0[78u].y)) + _2489;
        _2587 = (exp2(_2771 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2755 * cbSceneParam._m0[78u].z)) * _2745.z) / cbSceneParam._m0[78u].z)) + _2490;
        _2589 = _2754 * _2491;
    }
    else
    {
        _2583 = _2488;
        _2585 = _2489;
        _2587 = _2490;
        _2589 = _2491;
    }
    float _2601 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2602 = _2601 == 3.0;
    float _2603 = log2(_2589);
    float _2607 = exp2(_2603 * cbSceneParam._m0[78u].x);
    float _2608 = exp2(_2603 * cbSceneParam._m0[78u].y);
    float _2609 = exp2(_2603 * cbSceneParam._m0[78u].z);
    float _2610 = _2607 * (isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0)));
    float _2611 = _2608 * (isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0)));
    float _2612 = _2609 * (isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0)));
    float _2621 = (_2601 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2621 * (_2602 ? _2610 : (_2610 + (cbSceneParam._m0[72u].w * _2583)));
    SV_Target.y = _2621 * (_2602 ? _2611 : (_2611 + (cbSceneParam._m0[72u].w * _2585)));
    SV_Target.z = _2621 * (_2602 ? _2612 : (_2612 + (cbSceneParam._m0[72u].w * _2587)));
    SV_Target.w = cbInstanceData._m0[_2463].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2416) * _2462) * _2607) * _2621;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2422) * _2462) * _2608) * _2621;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2428) * _2462) * _2609) * _2621;
    SV_Target_1.w = cbInstanceData._m0[_2463].w;
}


