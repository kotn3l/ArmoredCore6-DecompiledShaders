#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_21;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1046;
float _3484;
float _3485;
float _3486;
float _3487;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _243 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _249 = _243.x * cbMtdParam._m0[9u].x;
    float _250 = _243.y * cbMtdParam._m0[9u].y;
    float _251 = _243.z * cbMtdParam._m0[9u].z;
    vec4 _264 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    vec4 _279 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _281 = _279.x;
    vec4 _294 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _298 = _294.z;
    float _302 = (_294.x * 2.0) + (-1.0);
    float _304 = (_294.y * 2.0) + (-1.0);
    float _305 = dot(vec2(_302, _304), vec2(_302, _304));
    float _3496 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _311 = sqrt(1.0 - (isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))));
    vec4 _351 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _365 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3507 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _366 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    float _374 = (((_366 * _366) * (3.0 - (_366 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _383 = cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x;
    float _391 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3518 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    float _396 = (_392 * _392) * (3.0 - (_392 * 2.0));
    float _397 = _396 * cbMtdParam._m0[16u].w;
    float _398 = _396 * cbMtdParam._m0[17u].x;
    float _399 = sin(_383);
    float _400 = cos(_383);
    float _401 = TEXCOORD.z - _397;
    float _402 = TEXCOORD.w - _398;
    vec4 _422 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_397 + fma(_402, (-0.0) - _399, _401 * _400))) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (fma(_402, _400, _401 * _399) + _398)) + cbTextureTilingScale._m0[0u].w));
    float _428 = (cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].w) * _422.x;
    float _430 = (cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].w) * _422.y;
    float _432 = (cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].w) * _422.z;
    float _450 = (TEXCOORD_5.x - (((_264.x + 0.00999999977648258209228515625) * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[16u].z)) * (cbMtdParam._m0[13u].x + 1.0);
    float _3529 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _451 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
    float _454 = fma(_311, _214 * NORMAL.x, fma(_304, _221 * TANGENT.x, (_207 * _199) * _302));
    float _457 = fma(_311, _214 * NORMAL.y, fma(_304, _221 * TANGENT.y, (_207 * _200) * _302));
    float _460 = fma(_311, _214 * NORMAL.z, fma(_304, _221 * TANGENT.z, (_207 * _201) * _302));
    float _464 = inversesqrt(dot(vec3(_454, _457, _460), vec3(_454, _457, _460)));
    float _465 = _464 * _454;
    float _466 = _464 * _457;
    float _467 = _464 * _460;
    float _3540 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _468 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    float _3551 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3562 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _3573 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3584 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _472 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
    float _488 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _529 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _539 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _529);
    float _540 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _529);
    float _541 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _529);
    float _545 = inversesqrt(dot(vec3(_539, _540, _541), vec3(_539, _540, _541)));
    float _546 = _539 * _545;
    float _547 = _540 * _545;
    float _548 = _541 * _545;
    vec4 _553 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _555 = _553.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _726 = sqrt(((_539 * _539) + (_540 * _540)) + (_541 * _541));
        float _732 = (cbMatDynParam._m0[5u].x * _726) + cbMatDynParam._m0[5u].y;
        float _3595 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _733 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _737 = (cbMatDynParam._m0[5u].z * _726) + cbMatDynParam._m0[5u].w;
        float _3606 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) - _733)) + _733) < ((_555 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _566 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _567 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _585 = fma(_467, cbSceneParam._m0[5u].z, fma(_466, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _465));
    float _588 = fma(_467, cbSceneParam._m0[6u].z, fma(_466, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _465));
    float _591 = fma(_467, cbSceneParam._m0[7u].z, fma(_466, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _465));
    uint _604 = uint(roundEven(NORMAL.w)) * 13u;
    uint _605 = _604 + 9u;
    uint _606 = _605 + uint(cbMatDynParam._m0[0u].w);
    float _612 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0)))) * cbInstanceData._m0[_606].x;
    float _613 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0)))) * cbInstanceData._m0[_606].y;
    float _614 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0)))) * cbInstanceData._m0[_606].z;
    float _3617 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _615 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    float _3628 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _616 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    float _3639 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _617 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    float _618 = 1.0 - _472;
    float _619 = _615 * _618;
    float _620 = _616 * _618;
    float _621 = _617 * _618;
    float _626 = (_615 + (-0.039999999105930328369140625)) * _472;
    float _627 = (_616 + (-0.039999999105930328369140625)) * _472;
    float _628 = (_617 + (-0.039999999105930328369140625)) * _472;
    float _629 = _626 + 0.039999999105930328369140625;
    float _631 = _627 + 0.039999999105930328369140625;
    float _632 = _628 + 0.039999999105930328369140625;
    vec4 _641 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _566, cbSceneParam._m0[86u].y * _567));
    float _644 = _641.x * TEXCOORD_5.w;
    float _645 = dot(vec3(_465, _466, _467), vec3(_546, _547, _548));
    float _648 = _645 * 2.0;
    float _652 = (_648 * _465) - _546;
    float _653 = (_648 * _466) - _547;
    float _654 = (_648 * _467) - _548;
    float _658 = abs(dot(vec3(_546, _547, _548), vec3(_465, _466, _467)));
    float _3650 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _660 = sqrt(_468);
    float _672 = exp2((_660 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_660 * 3.0));
    float _678 = (1.0 - _672) * ((_660 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _679 = _672 * _660;
    float _707 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _711 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _715 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1045;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _770 = fma(_715, cbModelParam._m0[26u].z, fma(_711, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _707));
        float _774 = fma(_715, cbModelParam._m0[27u].z, fma(_711, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _707));
        float _778 = fma(_715, cbModelParam._m0[28u].z, fma(_711, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _707));
        float _803 = _707 + _465;
        float _804 = _711 + _466;
        float _805 = _715 + _467;
        float _815 = fma(_805, cbModelParam._m0[26u].z, fma(_804, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _803)) - _770;
        float _816 = fma(_805, cbModelParam._m0[27u].z, fma(_804, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _803)) - _774;
        float _817 = fma(_805, cbModelParam._m0[28u].z, fma(_804, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _803)) - _778;
        float _821 = inversesqrt(dot(vec3(_815, _816, _817), vec3(_815, _816, _817)));
        float _834 = ((_821 * _815) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_770 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _835 = ((_821 * _816) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_774 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _836 = ((_821 * _817) / cbModelParam._m0[34u].z) + ((((((_778 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _839 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_834, _835, _836), 0.0);
        vec4 _846 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_834, _835, _836), 0.0);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_834, _835, _836), 0.0);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_834, _835, _836), 0.0);
        float _873 = exp2((_839.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_839.x + (-0.5));
        float _875 = _873 * (_839.y + (-0.5));
        float _876 = _873 * (_839.z + (-0.5));
        float _883 = exp2((_846.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_846.x + (-0.5));
        float _885 = _883 * (_846.y + (-0.5));
        float _886 = _883 * (_846.z + (-0.5));
        float _893 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_853.x + (-0.5));
        float _895 = _893 * (_853.y + (-0.5));
        float _896 = _893 * (_853.z + (-0.5));
        float _903 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_860.x + (-0.5));
        float _905 = _903 * (_860.y + (-0.5));
        float _906 = _903 * (_860.z + (-0.5));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _910 = _874 * 0.5;
        float _911 = _884 * 0.5;
        float _912 = _894 * 0.5;
        float _913 = dot(vec3(_910, _911, _912), vec3(_910, _911, _912));
        float _918 = (_913 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_913);
        float _927 = (dot(vec3(_465, _466, _467), vec3(_918 * _910, _918 * _911, _918 * _912)) + 1.0) * 0.5;
        float _3676 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _937 = sqrt(((_911 * _911) + (_910 * _910)) + (_912 * _912)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3687 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _939 = _938 * 2.0;
        float _943 = (1.0 - _938) / (_938 + 1.0);
        float _3698 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _953 = ((((1.0 - _944) * (_939 + 2.0)) * exp2(log2(isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * (_939 + 1.0))) + _944) * _907;
        float _954 = _875 * 0.5;
        float _955 = _885 * 0.5;
        float _956 = _895 * 0.5;
        float _957 = dot(vec3(_954, _955, _956), vec3(_954, _955, _956));
        float _962 = (_957 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_957);
        float _970 = (dot(vec3(_465, _466, _467), vec3(_962 * _954, _962 * _955, _962 * _956)) + 1.0) * 0.5;
        float _3709 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _979 = sqrt(((_955 * _955) + (_954 * _954)) + (_956 * _956)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3720 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _981 = _980 * 2.0;
        float _985 = (1.0 - _980) / (_980 + 1.0);
        float _3731 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _995 = ((((1.0 - _986) * (_981 + 2.0)) * exp2(log2(isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_981 + 1.0))) + _986) * _908;
        float _996 = _876 * 0.5;
        float _997 = _886 * 0.5;
        float _998 = _896 * 0.5;
        float _999 = dot(vec3(_996, _997, _998), vec3(_996, _997, _998));
        float _1004 = (_999 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_999);
        float _1012 = (dot(vec3(_465, _466, _467), vec3(_1004 * _996, _1004 * _997, _1004 * _998)) + 1.0) * 0.5;
        float _3742 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1021 = sqrt(((_997 * _997) + (_996 * _996)) + (_998 * _998)) / (_909 + 9.9999997473787516355514526367188e-06);
        float _3753 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1023 = _1022 * 2.0;
        float _1027 = (1.0 - _1022) / (_1022 + 1.0);
        float _3764 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1037 = ((((1.0 - _1028) * (_1023 + 2.0)) * exp2(log2(isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * (_1023 + 1.0))) + _1028) * _909;
        _1045 = _876;
        _1047 = _875;
        _1048 = _874;
        _1049 = _886;
        _1050 = _885;
        _1051 = _884;
        _1052 = _896;
        _1053 = _895;
        _1054 = _894;
        _1055 = _909;
        _1056 = _908;
        _1057 = _907;
        _1058 = cbModelParam._m0[36u].z * (isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0)));
        _1059 = cbModelParam._m0[36u].z * (isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0)));
        _1060 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0)));
    }
    else
    {
        _1045 = _1046;
        _1047 = _1046;
        _1048 = _1046;
        _1049 = _1046;
        _1050 = _1046;
        _1051 = _1046;
        _1052 = _1046;
        _1053 = _1046;
        _1054 = _1046;
        _1055 = _1046;
        _1056 = _1046;
        _1057 = _1046;
        _1058 = 0.0;
        _1059 = 0.0;
        _1060 = 0.0;
    }
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1089 = fma(_715, cbModelParam._m0[30u].z, fma(_711, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _707));
        float _1093 = fma(_715, cbModelParam._m0[31u].z, fma(_711, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _707));
        float _1097 = fma(_715, cbModelParam._m0[32u].z, fma(_711, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _707));
        float _1120 = _707 + _465;
        float _1121 = _711 + _466;
        float _1122 = _715 + _467;
        float _1132 = fma(_1122, cbModelParam._m0[30u].z, fma(_1121, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1120)) - _1089;
        float _1133 = fma(_1122, cbModelParam._m0[31u].z, fma(_1121, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1120)) - _1093;
        float _1134 = fma(_1122, cbModelParam._m0[32u].z, fma(_1121, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1120)) - _1097;
        float _1138 = inversesqrt(dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134)));
        float _1151 = ((_1138 * _1132) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1089 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1152 = ((_1138 * _1133) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1093 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1153 = ((_1138 * _1134) / cbModelParam._m0[35u].z) + ((((((_1097 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        float _1188 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1155.x + (-0.5));
        float _1190 = _1188 * (_1155.y + (-0.5));
        float _1191 = _1188 * (_1155.z + (-0.5));
        float _1198 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1162.x + (-0.5));
        float _1200 = _1198 * (_1162.y + (-0.5));
        float _1201 = _1198 * (_1162.z + (-0.5));
        float _1208 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1169.x + (-0.5));
        float _1210 = _1208 * (_1169.y + (-0.5));
        float _1211 = _1208 * (_1169.z + (-0.5));
        float _1218 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1176.x + (-0.5));
        float _1220 = _1218 * (_1176.y + (-0.5));
        float _1221 = _1218 * (_1176.z + (-0.5));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = _1189 * 0.5;
        float _1226 = _1199 * 0.5;
        float _1227 = _1209 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1241 = (dot(vec3(_465, _466, _467), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _3805 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1250 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _3816 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _3827 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_1252 + 1.0))) + _1257) * _1222;
        float _1267 = _1190 * 0.5;
        float _1268 = _1200 * 0.5;
        float _1269 = _1210 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_465, _466, _467), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _3860 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_1294 + 1.0))) + _1299) * _1223;
        float _1309 = _1191 * 0.5;
        float _1310 = _1201 * 0.5;
        float _1311 = _1211 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_465, _466, _467), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _3871 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _3882 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _3893 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1336 + 1.0))) + _1341) * _1224;
        _1358 = _1191;
        _1359 = _1190;
        _1360 = _1189;
        _1361 = _1201;
        _1362 = _1200;
        _1363 = _1199;
        _1364 = _1211;
        _1365 = _1210;
        _1366 = _1209;
        _1367 = _1224;
        _1368 = _1223;
        _1369 = _1222;
        _1370 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
        _1371 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
        _1372 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
    }
    else
    {
        _1358 = _1046;
        _1359 = _1046;
        _1360 = _1046;
        _1361 = _1046;
        _1362 = _1046;
        _1363 = _1046;
        _1364 = _1046;
        _1365 = _1046;
        _1366 = _1046;
        _1367 = _1046;
        _1368 = _1046;
        _1369 = _1046;
        _1370 = 0.0;
        _1371 = 0.0;
        _1372 = 0.0;
    }
    float _1382 = (cbModelParam._m0[1u].x * (_1370 - _1058)) + _1058;
    float _1383 = (cbModelParam._m0[1u].x * (_1371 - _1059)) + _1059;
    float _1384 = (cbModelParam._m0[1u].x * (_1372 - _1060)) + _1060;
    float _1405 = fma(_1384, cbSceneParam._m0[89u].z, fma(_1383, cbSceneParam._m0[89u].y, _1382 * cbSceneParam._m0[89u].x));
    float _1408 = fma(_1384, cbSceneParam._m0[90u].z, fma(_1383, cbSceneParam._m0[90u].y, _1382 * cbSceneParam._m0[90u].x));
    float _1411 = fma(_1384, cbSceneParam._m0[91u].z, fma(_1383, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1382));
    float _1426 = _652 * 0.5;
    float _1427 = _653 * 0.5;
    float _1428 = _654 * 0.5;
    float _1429 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1360, _1363, _1366, _1369));
    float _1432 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1359, _1362, _1365, _1368));
    float _1435 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1358, _1361, _1364, _1367));
    float _1469;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1442 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1045, _1049, _1052, _1055));
        float _1446 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1047, _1050, _1053, _1056));
        float _1450 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1048, _1051, _1054, _1057));
        float _1457 = dot(vec4(cbModelParam._m0[39u]), vec4(_1426, _1427, _1428, 1.0));
        _1469 = dot(vec3(isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)), isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1457) ? 0.0 : (isnan(0.0) ? _1457 : max(0.0, _1457))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1469 = 1.0;
    }
    float _1480;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1471 = dot(vec4(cbModelParam._m0[40u]), vec4(_1426, _1427, _1428, 1.0));
        _1480 = dot(vec3(isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)), isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)), isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1471) ? 0.0 : (isnan(0.0) ? _1471 : max(0.0, _1471))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1480 = 1.0;
    }
    float _1484 = (_1480 * cbModelParam._m0[1u].x) + (_1469 * (1.0 - cbModelParam._m0[1u].x));
    float _1494 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _468);
    float _1495 = isnan(_1494) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1494 : min(cbModelParam._m0[25u].z, _1494));
    float _1575;
    float _1577;
    float _1579;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1542 = fma(_715, cbModelParam._m0[13u].z, fma(_711, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _707)) + cbModelParam._m0[13u].w;
        float _1546 = fma(_715, cbModelParam._m0[14u].z, fma(_711, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _707)) + cbModelParam._m0[14u].w;
        float _1550 = fma(_715, cbModelParam._m0[15u].z, fma(_711, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _707)) + cbModelParam._m0[15u].w;
        float _1553 = fma(_654, cbModelParam._m0[13u].z, fma(_653, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _652));
        float _1556 = fma(_654, cbModelParam._m0[14u].z, fma(_653, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _652));
        float _1559 = fma(_654, cbModelParam._m0[15u].z, fma(_653, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _652));
        float _1587;
        if (_1553 > 0.0)
        {
            _1587 = abs((1.0 - _1542) / _1553);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1542 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1587 = frontier_phi_17_15_ladder;
        }
        float _1792;
        if (_1556 > 0.0)
        {
            _1792 = abs((1.0 - _1546) / _1556);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1556 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1546 + 1.0) / _1556);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1792 = frontier_phi_26_22_ladder;
        }
        float _2046;
        if (_1559 > 0.0)
        {
            _2046 = abs((1.0 - _1550) / _1559);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1550 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2046 = frontier_phi_38_33_ladder;
        }
        float _2048 = isnan(_1792) ? _1587 : (isnan(_1587) ? _1792 : min(_1587, _1792));
        float _2049 = isnan(_2046) ? _2048 : (isnan(_2048) ? _2046 : min(_2048, _2046));
        float _2053 = (_2049 * _1553) + _1542;
        float _2054 = (_2049 * _1556) + _1546;
        float _2055 = (_2049 * _1559) + _1550;
        float _2056 = _2049 * 9.9999997473787516355514526367188e-05;
        float _2058 = (-1.0) - _2056;
        float _2060 = _2056 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2055 > _2060) || ((_2055 < _2058) || ((_2054 > _2060) || ((_2054 < _2058) || ((_2053 < _2058) || (_2053 > _2060))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2183 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2055, cbModelParam._m0[9u].z, fma(_2054, cbModelParam._m0[9u].y, _2053 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2055, cbModelParam._m0[10u].z, fma(_2054, cbModelParam._m0[10u].y, _2053 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2055, cbModelParam._m0[11u].z, fma(_2054, cbModelParam._m0[11u].y, _2053 * cbModelParam._m0[11u].x))), _1495);
            frontier_phi_16_38_ladder = _2183.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2183.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2183.x * cbModelParam._m0[1u].y;
        }
        _1575 = frontier_phi_16_38_ladder_2;
        _1577 = frontier_phi_16_38_ladder_1;
        _1579 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1563 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_652, _653, _654), _1495);
        _1575 = _1563.x * cbModelParam._m0[1u].y;
        _1577 = _1563.y * cbModelParam._m0[1u].y;
        _1579 = _1563.z * cbModelParam._m0[1u].y;
    }
    float _1583 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _468);
    float _1584 = isnan(_1583) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1583 : min(cbModelParam._m0[25u].w, _1583));
    float _1675;
    float _1677;
    float _1679;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1639 = fma(_715, cbModelParam._m0[21u].z, fma(_711, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _707)) + cbModelParam._m0[21u].w;
        float _1643 = fma(_715, cbModelParam._m0[22u].z, fma(_711, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _707)) + cbModelParam._m0[22u].w;
        float _1647 = fma(_715, cbModelParam._m0[23u].z, fma(_711, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _707)) + cbModelParam._m0[23u].w;
        float _1650 = fma(_654, cbModelParam._m0[21u].z, fma(_653, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _652));
        float _1653 = fma(_654, cbModelParam._m0[22u].z, fma(_653, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _652));
        float _1656 = fma(_654, cbModelParam._m0[23u].z, fma(_653, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _652));
        float _1797;
        if (_1650 > 0.0)
        {
            _1797 = abs((1.0 - _1639) / _1650);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1639 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1797 = frontier_phi_28_24_ladder;
        }
        float _2073;
        if (_1653 > 0.0)
        {
            _2073 = abs((1.0 - _1643) / _1653);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1643 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2073 = frontier_phi_40_35_ladder;
        }
        float _2286;
        if (_1656 > 0.0)
        {
            _2286 = abs((1.0 - _1647) / _1656);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1647 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2286 = frontier_phi_49_46_ladder;
        }
        float _2288 = isnan(_2073) ? _1797 : (isnan(_1797) ? _2073 : min(_1797, _2073));
        float _2289 = isnan(_2286) ? _2288 : (isnan(_2288) ? _2286 : min(_2288, _2286));
        float _2293 = (_2289 * _1650) + _1639;
        float _2294 = (_2289 * _1653) + _1643;
        float _2295 = (_2289 * _1656) + _1647;
        float _2296 = _2289 * 9.9999997473787516355514526367188e-05;
        float _2297 = (-1.0) - _2296;
        float _2299 = _2296 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2295 > _2299) || ((_2295 < _2297) || ((_2294 > _2299) || ((_2294 < _2297) || ((_2293 < _2297) || (_2293 > _2299))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2539 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2295, cbModelParam._m0[17u].z, fma(_2294, cbModelParam._m0[17u].y, _2293 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2295, cbModelParam._m0[18u].z, fma(_2294, cbModelParam._m0[18u].y, _2293 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2295, cbModelParam._m0[19u].z, fma(_2294, cbModelParam._m0[19u].y, _2293 * cbModelParam._m0[19u].x))), _1584);
            frontier_phi_25_49_ladder = _2539.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2539.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2539.x * cbModelParam._m0[1u].z;
        }
        _1675 = frontier_phi_25_49_ladder_2;
        _1677 = frontier_phi_25_49_ladder_1;
        _1679 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1659 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_652, _653, _654), _1584);
        _1675 = _1659.x * cbModelParam._m0[1u].z;
        _1677 = _1659.y * cbModelParam._m0[1u].z;
        _1679 = _1659.z * cbModelParam._m0[1u].z;
    }
    float _1692 = (((_678 * _629) + _679) * _644) * ((cbModelParam._m0[1u].w * (_1675 - _1575)) + _1575);
    float _1694 = (((_678 * _631) + _679) * _644) * ((cbModelParam._m0[1u].w * (_1677 - _1577)) + _1577);
    float _1696 = (((_678 * _632) + _679) * _644) * ((cbModelParam._m0[1u].w * (_1679 - _1579)) + _1579);
    float _1699 = fma(_1696, cbSceneParam._m0[89u].z, fma(_1694, cbSceneParam._m0[89u].y, _1692 * cbSceneParam._m0[89u].x));
    float _1702 = fma(_1696, cbSceneParam._m0[90u].z, fma(_1694, cbSceneParam._m0[90u].y, _1692 * cbSceneParam._m0[90u].x));
    float _1705 = fma(_1696, cbSceneParam._m0[91u].z, fma(_1694, cbSceneParam._m0[91u].y, _1692 * cbSceneParam._m0[91u].x));
    uvec4 _1715 = floatBitsToUint(cbInstanceData._m0[_604 + 5u]);
    uint _1717 = _1715.x * 14u;
    uint _1718 = _1717 + 13u;
    float _1725 = _644 + (-1.0);
    float _1730 = (cbLight._m0[_1718].x * _1725) + 1.0;
    float _1731 = (cbLight._m0[_1718].y * _1725) + 1.0;
    float _1732 = (cbLight._m0[_1718].z * _1725) + 1.0;
    float _1733 = (cbLight._m0[_1718].w * _1725) + 1.0;
    uint _1734 = _1717 + 5u;
    float _1740 = isnan(1.0) ? _1731 : (isnan(_1731) ? 1.0 : min(_1731, 1.0));
    uint _1744 = _1717 + 4u;
    float _1750 = isnan(1.0) ? _1730 : (isnan(_1730) ? 1.0 : min(_1730, 1.0));
    uint _1754 = _1717 | 1u;
    float _1765 = dot(vec3(cbLight._m0[_1717].xyz), vec3(_465, _466, _467));
    float _1768 = dot(vec3(cbLight._m0[_1754].xyz), vec3(_465, _466, _467));
    float _4029 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _4040 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
    float _1773 = (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * 0.3183098733425140380859375;
    float _1775 = (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * 0.3183098733425140380859375;
    float _1782 = ((cbLight._m0[_1734].x * _1740) * _1775) + ((cbLight._m0[_1744].x * _1750) * _1773);
    float _1783 = ((_1740 * cbLight._m0[_1734].y) * _1775) + ((_1750 * cbLight._m0[_1744].y) * _1773);
    float _1784 = ((_1740 * cbLight._m0[_1734].z) * _1775) + ((_1750 * cbLight._m0[_1744].z) * _1773);
    uvec4 _1789 = floatBitsToUint(cbLight._m0[_1717 + 12u]);
    bool _1791 = _1789.x == 0u;
    float _1802;
    float _1804;
    float _1806;
    if (_1791)
    {
        _1802 = _1782;
        _1804 = _1783;
        _1806 = _1784;
    }
    else
    {
        uint _1810 = _1717 + 6u;
        float _1826 = (dot(vec3(cbLight._m0[_1717 + 2u].xyz), vec3(_465, _466, _467)) * 0.5) + 0.5;
        float _1827 = _1826 * _1826;
        float _4051 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1828 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1829 = isnan(1.0) ? _1732 : (isnan(_1732) ? 1.0 : min(_1732, 1.0));
        _1802 = (((cbLight._m0[_1810].x * 0.3183098733425140380859375) * _1828) * _1829) + _1782;
        _1804 = (((cbLight._m0[_1810].y * 0.3183098733425140380859375) * _1828) * _1829) + _1783;
        _1806 = (((cbLight._m0[_1810].z * 0.3183098733425140380859375) * _1828) * _1829) + _1784;
    }
    bool _1809 = _1789.y == 0u;
    float _1847;
    float _1849;
    float _1851;
    if (_1809)
    {
        _1847 = _1802;
        _1849 = _1804;
        _1851 = _1806;
    }
    else
    {
        uint _2017 = _1717 + 7u;
        float _2033 = (dot(vec3(cbLight._m0[_1717 + 3u].xyz), vec3(_465, _466, _467)) * 0.5) + 0.5;
        float _2034 = _2033 * _2033;
        float _4067 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
        float _2035 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _2036 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
        _1847 = (((cbLight._m0[_2017].x * 0.3183098733425140380859375) * _2035) * _2036) + _1802;
        _1849 = (((cbLight._m0[_2017].y * 0.3183098733425140380859375) * _2035) * _2036) + _1804;
        _1851 = (((cbLight._m0[_2017].z * 0.3183098733425140380859375) * _2035) * _2036) + _1806;
    }
    uint _1854 = _1717 + 8u;
    float _1867 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1717].w)) * _468) * 0.949999988079071044921875);
    float _1868 = _1867 * _1867;
    float _1869 = cbLight._m0[_1717].x + _546;
    float _1870 = cbLight._m0[_1717].y + _547;
    float _1871 = cbLight._m0[_1717].z + _548;
    float _1875 = inversesqrt(dot(vec3(_1869, _1870, _1871), vec3(_1869, _1870, _1871)));
    float _1876 = _1875 * _1869;
    float _1877 = _1875 * _1870;
    float _1878 = _1875 * _1871;
    float _1879 = dot(vec3(_465, _466, _467), vec3(cbLight._m0[_1717].xyz));
    float _4083 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1882 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _4094 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _1883 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _1884 = dot(vec3(_465, _466, _467), vec3(_1876, _1877, _1878));
    float _4105 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1887 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _1888 = dot(vec3(cbLight._m0[_1717].xyz), vec3(_1876, _1877, _1878));
    float _4116 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1892 = _1868 * _1868;
    float _1896 = ((_1887 * _1887) * (_1892 + (-1.0))) + 1.0;
    float _1904 = exp2(log2(1.0 - (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0)))) * 5.0);
    float _1905 = 0.959999978542327880859375 - _626;
    float _1907 = 0.959999978542327880859375 - _627;
    float _1908 = 0.959999978542327880859375 - _628;
    float _1915 = 1.0 - _1868;
    float _1926 = (0.5 / (((_1883 * ((_1882 * _1915) + _1868)) + 9.9999999392252902907785028219223e-09) + (((_1883 * _1915) + _1868) * _1882))) * _1882;
    float _4127 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1928 = (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_1892 / ((_1896 * _1896) * 3.141590118408203125));
    uint _1939 = _1717 + 9u;
    float _1950 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1754].w)) * _468) * 0.949999988079071044921875);
    float _1951 = _1950 * _1950;
    float _1952 = cbLight._m0[_1754].x + _546;
    float _1953 = cbLight._m0[_1754].y + _547;
    float _1954 = cbLight._m0[_1754].z + _548;
    float _1958 = inversesqrt(dot(vec3(_1952, _1953, _1954), vec3(_1952, _1953, _1954)));
    float _1959 = _1958 * _1952;
    float _1960 = _1958 * _1953;
    float _1961 = _1958 * _1954;
    float _1962 = dot(vec3(_465, _466, _467), vec3(cbLight._m0[_1754].xyz));
    float _4138 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1965 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _1966 = dot(vec3(_465, _466, _467), vec3(_1959, _1960, _1961));
    float _4149 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1969 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _1970 = dot(vec3(cbLight._m0[_1754].xyz), vec3(_1959, _1960, _1961));
    float _4160 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1974 = _1951 * _1951;
    float _1978 = ((_1969 * _1969) * (_1974 + (-1.0))) + 1.0;
    float _1985 = exp2(log2(1.0 - (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) * 5.0);
    float _1992 = 1.0 - _1951;
    float _2002 = (0.5 / (((_1883 * ((_1965 * _1992) + _1951)) + 9.9999999392252902907785028219223e-09) + (((_1883 * _1992) + _1951) * _1965))) * _1965;
    float _4171 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2004 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1974 / ((_1978 * _1978) * 3.141590118408203125));
    float _2014 = (((((_1985 * _1905) + _629) * cbLight._m0[_1939].x) * _2004) * _1740) + (((((_1904 * _1905) + _629) * cbLight._m0[_1854].x) * _1928) * _1750);
    float _2015 = (((((_1985 * _1907) + _631) * cbLight._m0[_1939].y) * _2004) * _1740) + (((((_1904 * _1907) + _631) * cbLight._m0[_1854].y) * _1928) * _1750);
    float _2016 = (((((_1985 * _1908) + _632) * cbLight._m0[_1939].z) * _2004) * _1740) + (((((_1904 * _1908) + _632) * cbLight._m0[_1854].z) * _1928) * _1750);
    float _2078;
    float _2080;
    float _2082;
    if (_1791)
    {
        _2078 = _2014;
        _2080 = _2015;
        _2082 = _2016;
    }
    else
    {
        uint _2084 = _1717 + 2u;
        uint _2088 = _1717 + 10u;
        float _2102 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2084].w)) * _468) * 0.949999988079071044921875);
        float _2103 = _2102 * _2102;
        float _2104 = cbLight._m0[_2084].x + _546;
        float _2105 = cbLight._m0[_2084].y + _547;
        float _2106 = cbLight._m0[_2084].z + _548;
        float _2110 = inversesqrt(dot(vec3(_2104, _2105, _2106), vec3(_2104, _2105, _2106)));
        float _2111 = _2110 * _2104;
        float _2112 = _2110 * _2105;
        float _2113 = _2110 * _2106;
        float _2114 = dot(vec3(_465, _466, _467), vec3(cbLight._m0[_2084].xyz));
        float _4182 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2117 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _2118 = dot(vec3(_465, _466, _467), vec3(_2111, _2112, _2113));
        float _4193 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2121 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _2122 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_2111, _2112, _2113));
        float _4204 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2126 = _2103 * _2103;
        float _2130 = ((_2121 * _2121) * (_2126 + (-1.0))) + 1.0;
        float _2137 = exp2(log2(1.0 - (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) * 5.0);
        float _2144 = 1.0 - _2103;
        float _2154 = (0.5 / (((_1883 * ((_2117 * _2144) + _2103)) + 9.9999999392252902907785028219223e-09) + (((_1883 * _2144) + _2103) * _2117))) * _2117;
        float _4215 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2156 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_2126 / ((_2130 * _2130) * 3.141590118408203125));
        float _2157 = isnan(1.0) ? _1732 : (isnan(_1732) ? 1.0 : min(_1732, 1.0));
        _2078 = (((((_2137 * _1905) + _629) * cbLight._m0[_2088].x) * _2156) * _2157) + _2014;
        _2080 = (((((_2137 * _1907) + _631) * cbLight._m0[_2088].y) * _2156) * _2157) + _2015;
        _2082 = (((((_2137 * _1908) + _632) * cbLight._m0[_2088].z) * _2156) * _2157) + _2016;
    }
    float _2192;
    float _2194;
    float _2196;
    if (_1809)
    {
        _2192 = _2078;
        _2194 = _2080;
        _2196 = _2082;
    }
    else
    {
        uint _2203 = _1717 + 3u;
        uint _2207 = _1717 + 11u;
        float _2221 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2203].w)) * _468) * 0.949999988079071044921875);
        float _2222 = _2221 * _2221;
        float _2223 = cbLight._m0[_2203].x + _546;
        float _2224 = cbLight._m0[_2203].y + _547;
        float _2225 = cbLight._m0[_2203].z + _548;
        float _2229 = inversesqrt(dot(vec3(_2223, _2224, _2225), vec3(_2223, _2224, _2225)));
        float _2230 = _2229 * _2223;
        float _2231 = _2229 * _2224;
        float _2232 = _2229 * _2225;
        float _2233 = dot(vec3(_465, _466, _467), vec3(cbLight._m0[_2203].xyz));
        float _4231 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2236 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _2237 = dot(vec3(_465, _466, _467), vec3(_2230, _2231, _2232));
        float _4242 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2240 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _2241 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_2230, _2231, _2232));
        float _4253 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2245 = _2222 * _2222;
        float _2249 = ((_2240 * _2240) * (_2245 + (-1.0))) + 1.0;
        float _2256 = exp2(log2(1.0 - (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0)))) * 5.0);
        float _2263 = 1.0 - _2222;
        float _2273 = (0.5 / (((_1883 * ((_2236 * _2263) + _2222)) + 9.9999999392252902907785028219223e-09) + (((_1883 * _2263) + _2222) * _2236))) * _2236;
        float _4264 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2275 = (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_2245 / ((_2249 * _2249) * 3.141590118408203125));
        float _2276 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
        _2192 = (((((_2256 * _1905) + _629) * cbLight._m0[_2207].x) * _2275) * _2276) + _2078;
        _2194 = (((((_2256 * _1907) + _631) * cbLight._m0[_2207].y) * _2275) * _2276) + _2080;
        _2196 = (((((_2256 * _1908) + _632) * cbLight._m0[_2207].z) * _2275) * _2276) + _2082;
    }
    float _2411;
    float _2413;
    float _2415;
    float _2417;
    float _2419;
    float _2421;
    if (_1715.y == 0u)
    {
        float _2351 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2352 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2351;
        float _2353 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2351;
        float _2354 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2351;
        uvec4 _2366 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2367 = _2366.x;
        uint _2378 = uint((float(_2366.y) * floor(float(uint(cbSceneParam._m0[85u].y * _567) / _2367))) + floor(float(uint(cbSceneParam._m0[85u].x * _566) / _2367)));
        float _2388 = (log2(_2354 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2389 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        uint _2392 = uint(isnan(14.0) ? _2389 : (isnan(_2389) ? 14.0 : min(_2389, 14.0)));
        uvec4 _2397 = texelFetch(g_lightClusterGridBuffer, int(((_2392 << 2u) + (_2378 << 6u)) >> 2u));
        uint _2398 = _2397.x;
        uint _2399 = _2366.z;
        float _2544;
        float _2546;
        float _2548;
        float _2550;
        float _2552;
        float _2554;
        if (((((1u << ((_2399 >> 4u) & 15u)) + 4294967295u) & _2398) == 0u) || ((_2399 & 240u) == 0u))
        {
            _2544 = 0.0;
            _2546 = 0.0;
            _2548 = 0.0;
            _2550 = 0.0;
            _2552 = 0.0;
            _2554 = 0.0;
        }
        else
        {
            float _2545;
            float _2547;
            float _2549;
            float _2551;
            float _2553;
            float _2555;
            float _2705 = 0.0;
            float _2706 = 0.0;
            float _2707 = 0.0;
            float _2708 = 0.0;
            float _2709 = 0.0;
            float _2710 = 0.0;
            uint _2711 = 0u;
            uint _2720;
            bool _2721;
            for (;;)
            {
                _2720 = texelFetch(g_lightClassification, int((((_2392 << 5u) + (_2378 << 9u)) + (_2711 << 2u)) >> 2u)).x;
                _2721 = _2720 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2721)
                {
                    frontier_phi_66_pred = _2705;
                    frontier_phi_66_pred_1 = _2710;
                    frontier_phi_66_pred_2 = _2709;
                    frontier_phi_66_pred_3 = _2708;
                    frontier_phi_66_pred_4 = _2707;
                    frontier_phi_66_pred_5 = _2706;
                }
                else
                {
                    float _2850;
                    float _2851;
                    float _2852;
                    float _2853;
                    float _2854;
                    float _2855;
                    uint _2856;
                    _2850 = _2705;
                    _2851 = _2706;
                    _2852 = _2707;
                    _2853 = _2708;
                    _2854 = _2709;
                    _2855 = _2710;
                    _2856 = _2720;
                    float _2777;
                    float _2778;
                    float _2779;
                    float _2780;
                    float _2781;
                    float _2782;
                    for (;;)
                    {
                        uint _2860 = uint(findLSB(_2856)) + (_2711 << 5u);
                        uint _2857 = (_2856 + 4294967295u) & _2856;
                        uint _2862 = _2860 * 48u;
                        vec4 _2876 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2862)).x, texelFetch(g_PointLightRenderingBuffer, int(_2862 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2862 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2862 + 3u)).x));
                        uint _2882 = (_2860 * 48u) + 4u;
                        vec4 _2895 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2882)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 3u)).x));
                        uint _2901 = (_2860 * 48u) + 8u;
                        vec3 _2912 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2901)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 2u)).x));
                        float _2916 = _2876.x - _2352;
                        float _2917 = _2876.y - _2353;
                        float _2918 = _2876.z - _2354;
                        float _2919 = dot(vec3(_2916, _2917, _2918), vec3(_2916, _2917, _2918));
                        float _2922 = inversesqrt(_2919);
                        float _2923 = _2922 * _2916;
                        float _2924 = _2922 * _2917;
                        float _2925 = _2922 * _2918;
                        float _2926 = dot(vec3(_585, _588, _591), vec3(_2923, _2924, _2925));
                        float _2931 = 1.0 - (_2919 * _2876.w);
                        float _4290 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
                        float _2932 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                        float _2933 = sqrt(_2919) * _2895.w;
                        float _2936 = 1.39999997615814208984375 / (_2933 + 1.39999997615814208984375);
                        float _2937 = _2936 * _2936;
                        float _2940 = ((1.0 - _2937) * _2926) + _2937;
                        float _2943 = _2933 * _2933;
                        float _2947 = ((isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0))) * _2932) / ((_2943 * 0.699999988079071044921875) + 1.0);
                        float _2951 = (-0.0) - _2352;
                        float _2952 = (-0.0) - _2353;
                        float _2953 = (-0.0) - _2354;
                        float _2957 = inversesqrt(dot(vec3(_2951, _2952, _2953), vec3(_2951, _2952, _2953)));
                        float _2958 = _2957 * _2951;
                        float _2959 = _2957 * _2952;
                        float _2960 = _2957 * _2953;
                        float _2968 = exp2(log2(1.0 / ((_2943 * 3.5) + 5.0)) * 0.25);
                        float _2969 = 1.0 - _660;
                        float _2976 = sqrt(1.0 - ((1.0 - (_2969 * _2969)) * (1.0 - (_2968 * _2968))));
                        float _2977 = _2976 * _2976;
                        float _2978 = _2977 * _2977;
                        float _2979 = _2958 + _2923;
                        float _2980 = _2959 + _2924;
                        float _2981 = _2960 + _2925;
                        float _2985 = inversesqrt(dot(vec3(_2979, _2980, _2981), vec3(_2979, _2980, _2981)));
                        float _2989 = dot(vec3(_585, _588, _591), vec3(_2958, _2959, _2960));
                        float _4306 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                        float _2992 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                        float _2993 = dot(vec3(_585, _588, _591), vec3(_2985 * _2979, _2985 * _2980, _2985 * _2981));
                        float _4317 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                        float _2996 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                        float _3000 = ((_2996 * _2996) * (_2978 + (-1.0))) + 1.0;
                        float _3001 = _2936 * _2977;
                        float _3002 = _3001 * _3001;
                        float _3005 = ((1.0 - _3002) * _2926) + _3002;
                        float _4328 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                        float _3006 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                        float _3007 = 1.0 - _2977;
                        float _3017 = (0.5 / (((_3006 * ((_2992 * _3007) + _2977)) + 9.9999999392252902907785028219223e-09) + (((_3006 * _3007) + _2977) * _2992))) * _3006;
                        float _4339 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                        float _3028 = (((_2978 * 3.1415927410125732421875) * (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0)))) / ((_3000 * _3000) * ((_2943 * 2.1991131305694580078125) + 3.141590118408203125))) * _2932;
                        _2780 = (_2947 * _2895.x) + _2853;
                        _2781 = (_2947 * _2895.y) + _2854;
                        _2782 = (_2947 * _2895.z) + _2855;
                        _2777 = (_3028 * _2912.x) + _2850;
                        _2778 = (_3028 * _2912.y) + _2851;
                        _2779 = (_3028 * _2912.z) + _2852;
                        if (_2857 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2850 = _2777;
                            _2851 = _2778;
                            _2852 = _2779;
                            _2853 = _2780;
                            _2854 = _2781;
                            _2855 = _2782;
                            _2856 = _2857;
                        }
                    }
                    frontier_phi_66_pred = _2777;
                    frontier_phi_66_pred_1 = _2782;
                    frontier_phi_66_pred_2 = _2781;
                    frontier_phi_66_pred_3 = _2780;
                    frontier_phi_66_pred_4 = _2779;
                    frontier_phi_66_pred_5 = _2778;
                }
                _2545 = frontier_phi_66_pred;
                _2555 = frontier_phi_66_pred_1;
                _2553 = frontier_phi_66_pred_2;
                _2551 = frontier_phi_66_pred_3;
                _2549 = frontier_phi_66_pred_4;
                _2547 = frontier_phi_66_pred_5;
                uint _2712 = _2711 + 1u;
                if (_2712 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2705 = _2545;
                    _2706 = _2547;
                    _2707 = _2549;
                    _2708 = _2551;
                    _2709 = _2553;
                    _2710 = _2555;
                    _2711 = _2712;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2544 = _2545;
            _2546 = _2547;
            _2548 = _2549;
            _2550 = _2551;
            _2552 = _2553;
            _2554 = _2555;
        }
        uvec4 _2558 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2559 = _2558.z;
        uint _2561 = (_2559 >> 8u) & 15u;
        float _2673;
        float _2675;
        float _2677;
        float _2679;
        float _2681;
        float _2683;
        if (((4294967295u << _2561) & _2398) == 0u)
        {
            _2673 = _2544;
            _2675 = _2546;
            _2677 = _2548;
            _2679 = _2550;
            _2681 = _2552;
            _2683 = _2554;
        }
        else
        {
            float _2698 = inversesqrt(dot(vec3(_2352, _2353, _2354), vec3(_2352, _2353, _2354)));
            float _2699 = _2698 * _2352;
            float _2700 = _2698 * _2353;
            float _2701 = _2698 * _2354;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2561 < ((_2559 >> 12u) & 15u))
            {
                float _2674;
                float _2676;
                float _2678;
                float _2680;
                float _2682;
                float _2684;
                float _2833 = _2544;
                float _2834 = _2546;
                float _2835 = _2548;
                float _2836 = _2550;
                float _2837 = _2552;
                float _2838 = _2554;
                uint _2839 = _2561;
                uint _2848;
                bool _2849;
                for (;;)
                {
                    _2848 = texelFetch(g_lightClassification, int((((_2392 << 5u) + (_2378 << 9u)) + (_2839 << 2u)) >> 2u)).x;
                    _2849 = _2848 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2849)
                    {
                        frontier_phi_77_pred = _2838;
                        frontier_phi_77_pred_1 = _2837;
                        frontier_phi_77_pred_2 = _2836;
                        frontier_phi_77_pred_3 = _2835;
                        frontier_phi_77_pred_4 = _2834;
                        frontier_phi_77_pred_5 = _2833;
                    }
                    else
                    {
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3045;
                        float _3046;
                        float _3047;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3055 = _2833;
                        float _3056 = _2834;
                        float _3057 = _2835;
                        float _3058 = _2836;
                        float _3059 = _2837;
                        float _3060 = _2838;
                        uint _3061 = _2848;
                        uint _3062;
                        vec4 _3087;
                        float _3088;
                        vec4 _3103;
                        vec3 _3115;
                        vec4 _3130;
                        vec4 _3146;
                        float _3193;
                        bool _3194;
                        for (;;)
                        {
                            uint _3072 = ((_2839 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3061));
                            _3062 = (_3061 + 4294967295u) & _3061;
                            uint _3074 = _3072 * 40u;
                            _3087 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 3u)).x));
                            _3088 = _3087.w;
                            uint _3090 = (_3072 * 40u) + 4u;
                            _3103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 3u)).x));
                            uint _3105 = (_3072 * 40u) + 8u;
                            _3115 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x));
                            uint _3117 = (_3072 * 40u) + 16u;
                            _3130 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3117)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 3u)).x));
                            uint _3133 = (_3072 * 40u) + 20u;
                            _3146 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 3u)).x));
                            uint _3149 = (_3072 * 40u) + 24u;
                            vec4 _3162 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 3u)).x));
                            uint _3168 = (_3072 * 40u) + 28u;
                            vec4 _3181 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 3u)).x));
                            _3193 = fma(_2354, _3181.z, fma(_2353, _3181.y, _3181.x * _2352)) + _3181.w;
                            _3194 = !((fma(_2354, _3162.z, fma(_2353, _3162.y, _3162.x * _2352)) + _3162.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3194)
                            {
                                float _3221 = _3087.x - _2352;
                                float _3222 = _3087.y - _2353;
                                float _3223 = _3087.z - _2354;
                                float _3224 = dot(vec3(_3221, _3222, _3223), vec3(_3221, _3222, _3223));
                                float _3227 = inversesqrt(_3224);
                                float _3228 = _3227 * _3221;
                                float _3229 = _3227 * _3222;
                                float _3230 = _3227 * _3223;
                                float _3234 = 1.0 - (_3224 / (_3088 * _3088));
                                float _4350 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3235 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                                float _3239 = sqrt(_3224) * _3103.w;
                                float _3241 = 1.39999997615814208984375 / (_3239 + 1.39999997615814208984375);
                                float _3242 = _3241 * _3241;
                                float _3245 = ((1.0 - _3242) * dot(vec3(_3228, _3229, _3230), vec3(_585, _588, _591))) + _3242;
                                float _3248 = _3239 * _3239;
                                float _3252 = (fma(_2354, _3130.z, fma(_2353, _3130.y, _3130.x * _2352)) + _3130.w) / _3193;
                                float _3253 = (fma(_2354, _3146.z, fma(_2353, _3146.y, _3146.x * _2352)) + _3146.w) / _3193;
                                float _3257 = 1.0 - dot(vec2(_3252, _3253), vec2(_3252, _3253));
                                float _4366 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                                float _3258 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                                float _3259 = _3258 * (((isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0))) * _3235) / ((_3248 * 0.699999988079071044921875) + 1.0));
                                float _3271 = exp2(log2(1.0 / ((_3248 * 3.5) + 5.0)) * 0.25);
                                float _3272 = 1.0 - _660;
                                float _3279 = sqrt(1.0 - ((1.0 - (_3272 * _3272)) * (1.0 - (_3271 * _3271))));
                                float _3280 = _3279 * _3279;
                                float _3281 = _3280 * _3280;
                                float _3282 = _3228 - _2699;
                                float _3283 = _3229 - _2700;
                                float _3284 = _3230 - _2701;
                                float _3288 = inversesqrt(dot(vec3(_3282, _3283, _3284), vec3(_3282, _3283, _3284)));
                                float _3292 = dot(vec3(_585, _588, _591), vec3((-0.0) - _2699, (-0.0) - _2700, (-0.0) - _2701));
                                float _4377 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                                float _3295 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                                float _3296 = dot(vec3(_585, _588, _591), vec3(_3288 * _3282, _3288 * _3283, _3288 * _3284));
                                float _4388 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3299 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                                float _3303 = ((_3299 * _3299) * (_3281 + (-1.0))) + 1.0;
                                float _3304 = _3241 * _3280;
                                float _3305 = _3304 * _3304;
                                float _3311 = ((1.0 - _3305) * dot(vec3(_585, _588, _591), vec3(_3228, _3229, _3230))) + _3305;
                                float _4399 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                                float _3312 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                                float _3313 = 1.0 - _3280;
                                float _3323 = (0.5 / (((_3312 * ((_3295 * _3313) + _3280)) + 9.9999999392252902907785028219223e-09) + (((_3312 * _3313) + _3280) * _3295))) * _3312;
                                float _4410 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                                float _3333 = (_3258 * _3235) * (((_3281 * 3.1415927410125732421875) * (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0)))) / ((_3303 * _3303) * ((_3248 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3259 * _3103.y;
                                frontier_phi_83_pred_1 = _3259 * _3103.x;
                                frontier_phi_83_pred_2 = _3333 * _3115.z;
                                frontier_phi_83_pred_3 = _3333 * _3115.y;
                                frontier_phi_83_pred_4 = _3333 * _3115.x;
                                frontier_phi_83_pred_5 = _3259 * _3103.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3341 = frontier_phi_83_pred;
                            _3340 = frontier_phi_83_pred_1;
                            _3339 = frontier_phi_83_pred_2;
                            _3338 = frontier_phi_83_pred_3;
                            _3337 = frontier_phi_83_pred_4;
                            _3342 = frontier_phi_83_pred_5;
                            _3045 = _3340 + _3058;
                            _3046 = _3341 + _3059;
                            _3047 = _3342 + _3060;
                            _3042 = _3337 + _3055;
                            _3043 = _3338 + _3056;
                            _3044 = _3339 + _3057;
                            if (_3062 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3055 = _3042;
                                _3056 = _3043;
                                _3057 = _3044;
                                _3058 = _3045;
                                _3059 = _3046;
                                _3060 = _3047;
                                _3061 = _3062;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3047;
                        frontier_phi_77_pred_1 = _3046;
                        frontier_phi_77_pred_2 = _3045;
                        frontier_phi_77_pred_3 = _3044;
                        frontier_phi_77_pred_4 = _3043;
                        frontier_phi_77_pred_5 = _3042;
                    }
                    _2684 = frontier_phi_77_pred;
                    _2682 = frontier_phi_77_pred_1;
                    _2680 = frontier_phi_77_pred_2;
                    _2678 = frontier_phi_77_pred_3;
                    _2676 = frontier_phi_77_pred_4;
                    _2674 = frontier_phi_77_pred_5;
                    uint _2840 = _2839 + 1u;
                    if (_2840 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2833 = _2674;
                        _2834 = _2676;
                        _2835 = _2678;
                        _2836 = _2680;
                        _2837 = _2682;
                        _2838 = _2684;
                        _2839 = _2840;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2678;
                frontier_phi_58_59_ladder_1 = _2684;
                frontier_phi_58_59_ladder_2 = _2682;
                frontier_phi_58_59_ladder_3 = _2680;
                frontier_phi_58_59_ladder_4 = _2676;
                frontier_phi_58_59_ladder_5 = _2674;
            }
            else
            {
                frontier_phi_58_59_ladder = _2548;
                frontier_phi_58_59_ladder_1 = _2554;
                frontier_phi_58_59_ladder_2 = _2552;
                frontier_phi_58_59_ladder_3 = _2550;
                frontier_phi_58_59_ladder_4 = _2546;
                frontier_phi_58_59_ladder_5 = _2544;
            }
            _2673 = frontier_phi_58_59_ladder_5;
            _2675 = frontier_phi_58_59_ladder_4;
            _2677 = frontier_phi_58_59_ladder;
            _2679 = frontier_phi_58_59_ladder_3;
            _2681 = frontier_phi_58_59_ladder_2;
            _2683 = frontier_phi_58_59_ladder_1;
        }
        float _2688 = isnan(1.0) ? _644 : (isnan(_644) ? 1.0 : min(_644, 1.0));
        _2411 = (_2688 * _2679) + _1847;
        _2413 = (_2688 * _2681) + _1849;
        _2415 = (_2688 * _2683) + _1851;
        _2417 = ((_2673 * _629) * _2688) + _2192;
        _2419 = ((_2675 * _631) * _2688) + _2194;
        _2421 = ((_2677 * _632) * _2688) + _2196;
    }
    else
    {
        _2411 = _1847;
        _2413 = _1849;
        _2415 = _1851;
        _2417 = _2192;
        _2419 = _2194;
        _2421 = _2196;
    }
    uint _2427 = _605 + uint(cbMatDynParam._m0[0u].w);
    float _2433 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].y;
    float _2439 = (((((_2433 * cbMtdParam._m0[10u].x) * _351.x) * _374) * _451) * (((1.0 - _428) * cbMtdParam._m0[16u].y) + _428)) * cbInstanceData._m0[_2427].x;
    float _2445 = (((((_2433 * cbMtdParam._m0[10u].y) * _351.y) * _374) * _451) * (((1.0 - _430) * cbMtdParam._m0[16u].y) + _430)) * cbInstanceData._m0[_2427].y;
    float _2451 = (((((_2433 * cbMtdParam._m0[10u].z) * _351.z) * _374) * _451) * (((1.0 - _432) * cbMtdParam._m0[16u].y) + _432)) * cbInstanceData._m0[_2427].z;
    float _4426 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _4437 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _4448 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _2468 = (((isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_2411 + ((isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))) * _644))) + ((_2417 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _1484)) * cbPerFrame._m0[3u].x)) + _2439;
    float _2470 = (_2445 + ((_2419 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _1484)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2413 + ((isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))) * _644)));
    float _2472 = (_2451 + ((_2421 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _1484)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_2415 + ((isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))) * _644)));
    float _2473 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2474 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2475 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2481 = cbMtdParam._m0[2u].x * _2439;
    float _2482 = cbMtdParam._m0[2u].y * _2445;
    float _2483 = cbMtdParam._m0[2u].z * _2451;
    float _4474 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2485 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
    uint _2486 = _604 + 6u;
    float _2494 = _566 / cbSceneParam._m0[86u].x;
    float _2495 = _567 / cbSceneParam._m0[86u].y;
    vec4 _2509 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2494, _2495, (log2((isnan(cbSceneParam._m0[77u].w) ? _488 : (isnan(_488) ? cbSceneParam._m0[77u].w : min(_488, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2511 = _2509.x;
    float _2512 = _2509.y;
    float _2513 = _2509.z;
    float _2514 = _2509.w;
    float _2606;
    float _2608;
    float _2610;
    float _2612;
    if (_488 > cbSceneParam._m0[78u].w)
    {
        float _2569 = isnan(_488) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _488 : min(cbSceneParam._m0[80u].w, _488));
        float _2570 = _2569 / _488;
        float _2581 = _2570 * _539;
        float _2582 = _540 * _2570;
        float _2583 = (-0.0) - _2582;
        float _2584 = _2570 * _541;
        float _2586 = (cbSceneParam._m0[77u].w * _2583) / _2569;
        float _2587 = _2586 + cbSceneParam._m0[79u].w;
        float _2588 = cbSceneParam._m0[79u].w - _2582;
        float _2594 = sqrt(((_2581 * _2581) + (_2582 * _2582)) + (_2584 * _2584));
        float _2597 = (1.0 - (cbSceneParam._m0[77u].w / _2569)) * _2594;
        float _2602 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2604 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2790;
        if (abs((_2583 - _2586) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2790 = ((((_2587 > 0.0) ? exp2(_2602 * _2587) : (2.0 - exp2(_2604 * _2587))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2597;
        }
        else
        {
            float _2734 = 1.0 / cbSceneParam._m0[80u].x;
            float _2735 = isnan(_2588) ? _2587 : (isnan(_2587) ? _2588 : max(_2587, _2588));
            float _2736 = isnan(_2588) ? _2587 : (isnan(_2587) ? _2588 : min(_2587, _2588));
            float _2745 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : min(_2735, 0.0));
            float _2746 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : min(_2736, 0.0));
            _2790 = ((abs(_2594 / _2583) * cbSceneParam._m0[80u].y) * ((((_2745 - _2746) * 2.0) - ((exp2(_2602 * (isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0)))) - exp2(_2602 * (isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0))))) * _2734)) - ((exp2(_2604 * _2745) - exp2(_2604 * _2746)) * _2734))) + (_2597 * cbSceneParam._m0[80u].z);
        }
        vec4 _2792 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2494, _2495, 1.0), 0.0);
        float _2801 = exp2((_2790 * (-1.44269502162933349609375)) * (1.0 - _2792.w));
        float _2802 = log2(_2801);
        float _2818 = log2(_2514);
        _2606 = (exp2(_2818 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2802 * cbSceneParam._m0[78u].x)) * _2792.x) / cbSceneParam._m0[78u].x)) + _2511;
        _2608 = (exp2(_2818 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2802 * cbSceneParam._m0[78u].y)) * _2792.y) / cbSceneParam._m0[78u].y)) + _2512;
        _2610 = (exp2(_2818 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2802 * cbSceneParam._m0[78u].z)) * _2792.z) / cbSceneParam._m0[78u].z)) + _2513;
        _2612 = _2801 * _2514;
    }
    else
    {
        _2606 = _2511;
        _2608 = _2512;
        _2610 = _2513;
        _2612 = _2514;
    }
    bool _2828;
    vec4 _2622;
    vec4 _2644;
    float _2646;
    float _2650;
    float _2651;
    float _2652;
    float _2655;
    float _2658;
    float _2661;
    float _2662;
    bool _2672;
    for (;;)
    {
        _2622 = cbMatDynParam._m0[0u];
        float _2624 = roundEven(_2622.y);
        bool _2625 = _2624 == 3.0;
        float _2626 = log2(_2612);
        float _2630 = exp2(_2626 * cbSceneParam._m0[78u].x);
        float _2631 = exp2(_2626 * cbSceneParam._m0[78u].y);
        float _2632 = exp2(_2626 * cbSceneParam._m0[78u].z);
        float _2633 = _2630 * _2473;
        float _2634 = _2631 * _2474;
        float _2635 = _2632 * _2475;
        float _2642 = _555 + (-0.5);
        _2644 = cbMtdParam._m0[1u];
        _2646 = _2644.y * _2642;
        float _2649 = (_2624 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2650 = _2649 * (_2625 ? _2633 : (_2633 + (cbSceneParam._m0[72u].w * _2606)));
        _2651 = _2649 * (_2625 ? _2634 : (_2634 + (cbSceneParam._m0[72u].w * _2608)));
        _2652 = _2649 * (_2625 ? _2635 : (_2635 + (cbSceneParam._m0[72u].w * _2610)));
        _2655 = ((_2481 * _2485) * _2630) * _2649;
        _2658 = ((_2482 * _2485) * _2631) * _2649;
        _2661 = ((_2483 * _2485) * _2632) * _2649;
        _2662 = _2642 * 0.999000012874603271484375;
        _2672 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2672)
        {
            if ((cbInstanceData._m0[_604 + 7u].x + _2662) < 0.5)
            {
                _2828 = true;
                break;
            }
        }
        uint _2769 = _605 + uint(_2622.w);
        if ((cbInstanceData._m0[_2769].w < 1.0) && ((cbInstanceData._m0[_2769].w + _2662) < 0.5))
        {
            _2828 = true;
            break;
        }
        if ((_2646 + 1.0) < _2644.x)
        {
            _2828 = true;
            break;
        }
        _2828 = false;
        break;
    }
    float _3033;
    if (_2828)
    {
        discard_state = true;
        _3033 = 0.0;
    }
    else
    {
        _3033 = cbInstanceData._m0[_2486].w;
    }
    SV_Target.x = _2650;
    SV_Target.y = _2651;
    SV_Target.z = _2652;
    SV_Target.w = _3033;
    SV_Target_1.x = _2655;
    SV_Target_1.y = _2658;
    SV_Target_1.z = _2661;
    SV_Target_1.w = cbInstanceData._m0[_2486].w;
    discard_exit();
}


