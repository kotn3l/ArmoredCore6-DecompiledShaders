#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 4) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_21;
layout(set = 0, binding = 5) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 7) uniform texture2D C_AMSN_M1_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1085;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _245 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _251 = _245.x * cbMtdParam._m0[9u].x;
    float _252 = _245.y * cbMtdParam._m0[9u].y;
    float _253 = _245.z * cbMtdParam._m0[9u].z;
    vec4 _276 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _296 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _299 = _296.x + 0.00999999977648258209228515625;
    float _307 = (TEXCOORD_8 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_8)) * _299)) * (cbMtdParam._m0[15u].z + 1.0);
    float _3468 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _308 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
    float _315 = (_308 * ((_276.x * cbMtdParam._m0[12u].x) - _251)) + _251;
    float _316 = (_308 * ((_276.y * cbMtdParam._m0[12u].y) - _252)) + _252;
    float _317 = (_308 * ((_276.z * cbMtdParam._m0[12u].z) - _253)) + _253;
    vec4 _330 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_21, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _332 = _330.x;
    float _334 = _332 - (_332 * TEXCOORD_8);
    vec4 _346 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    vec4 _369 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _373 = _369.z;
    float _376 = (_369.x * 2.0) + (-1.0);
    float _377 = (_369.y * 2.0) + (-1.0);
    float _378 = dot(vec2(_376, _377), vec2(_376, _377));
    float _3479 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _383 = sqrt(1.0 - (isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0))));
    float _391 = (((_346.z - _373) * TEXCOORD_8) * cbMtdParam._m0[16u].x) + _373;
    vec4 _425 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[17u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _439 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3490 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _440 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
    float _448 = (((_440 * _440) * (3.0 - (_440 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _457 = cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x;
    float _465 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3501 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _466 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
    float _470 = (_466 * _466) * (3.0 - (_466 * 2.0));
    float _471 = _470 * cbMtdParam._m0[16u].w;
    float _472 = _470 * cbMtdParam._m0[17u].x;
    float _473 = sin(_457);
    float _474 = cos(_457);
    float _475 = TEXCOORD.z - _471;
    float _476 = TEXCOORD.w - _472;
    vec4 _496 = texture(sampler2D(C_AMSN_M1_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_471 + fma(_476, (-0.0) - _473, _475 * _474))) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (fma(_476, _474, _475 * _473) + _472)) + cbTextureTilingScale._m0[0u].w));
    float _502 = (cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].w) * _496.x;
    float _504 = (cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].w) * _496.y;
    float _506 = (cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].w) * _496.z;
    float _522 = (TEXCOORD_5.x - ((_299 * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[16u].z)) * (cbMtdParam._m0[13u].x + 1.0);
    float _3512 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _523 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
    float _529 = ((((_346.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[15u].x) + _376;
    float _530 = ((((_346.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[15u].x) + _377;
    float _533 = fma(_383, _216 * NORMAL.x, fma(_530, _223 * TANGENT.x, (_209 * _201) * _529));
    float _536 = fma(_383, _216 * NORMAL.y, fma(_530, _223 * TANGENT.y, (_209 * _202) * _529));
    float _539 = fma(_383, _216 * NORMAL.z, fma(_530, _223 * TANGENT.z, (_209 * _203) * _529));
    float _543 = inversesqrt(dot(vec3(_533, _536, _539), vec3(_533, _536, _539)));
    float _544 = _543 * _533;
    float _545 = _543 * _536;
    float _546 = _543 * _539;
    float _3523 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _547 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
    float _3534 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3545 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3556 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3567 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _551 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    float _567 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _608 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _618 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _608);
    float _619 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _608);
    float _620 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _608);
    float _624 = inversesqrt(dot(vec3(_618, _619, _620), vec3(_618, _619, _620)));
    float _625 = _618 * _624;
    float _626 = _619 * _624;
    float _627 = _620 * _624;
    float _633 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _634 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _652 = fma(_546, cbSceneParam._m0[5u].z, fma(_545, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _544));
    float _655 = fma(_546, cbSceneParam._m0[6u].z, fma(_545, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _544));
    float _658 = fma(_546, cbSceneParam._m0[7u].z, fma(_545, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _544));
    uint _671 = uint(roundEven(NORMAL.w)) * 13u;
    uint _672 = _671 + 9u;
    uint _673 = _672 + uint(cbMatDynParam._m0[0u].w);
    float _679 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0)))) * cbInstanceData._m0[_673].x;
    float _680 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0)))) * cbInstanceData._m0[_673].y;
    float _681 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0)))) * cbInstanceData._m0[_673].z;
    float _3578 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _682 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    float _3589 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _683 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
    float _3600 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _684 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
    float _685 = 1.0 - _551;
    float _686 = _682 * _685;
    float _687 = _683 * _685;
    float _688 = _684 * _685;
    float _693 = (_682 + (-0.039999999105930328369140625)) * _551;
    float _694 = (_683 + (-0.039999999105930328369140625)) * _551;
    float _695 = (_684 + (-0.039999999105930328369140625)) * _551;
    float _696 = _693 + 0.039999999105930328369140625;
    float _698 = _694 + 0.039999999105930328369140625;
    float _699 = _695 + 0.039999999105930328369140625;
    vec4 _708 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _633, cbSceneParam._m0[86u].y * _634));
    float _711 = _708.x * TEXCOORD_5.w;
    float _712 = dot(vec3(_544, _545, _546), vec3(_625, _626, _627));
    float _715 = _712 * 2.0;
    float _719 = (_715 * _544) - _625;
    float _720 = (_715 * _545) - _626;
    float _721 = (_715 * _546) - _627;
    float _725 = abs(dot(vec3(_625, _626, _627), vec3(_544, _545, _546)));
    float _3611 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _727 = sqrt(_547);
    float _739 = exp2((_727 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_727 * 3.0));
    float _745 = (1.0 - _739) * ((_727 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _746 = _739 * _727;
    float _774 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _778 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _782 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1084;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _809 = fma(_782, cbModelParam._m0[26u].z, fma(_778, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _774));
        float _813 = fma(_782, cbModelParam._m0[27u].z, fma(_778, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _774));
        float _817 = fma(_782, cbModelParam._m0[28u].z, fma(_778, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _774));
        float _842 = _774 + _544;
        float _843 = _778 + _545;
        float _844 = _782 + _546;
        float _854 = fma(_844, cbModelParam._m0[26u].z, fma(_843, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _842)) - _809;
        float _855 = fma(_844, cbModelParam._m0[27u].z, fma(_843, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _842)) - _813;
        float _856 = fma(_844, cbModelParam._m0[28u].z, fma(_843, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _842)) - _817;
        float _860 = inversesqrt(dot(vec3(_854, _855, _856), vec3(_854, _855, _856)));
        float _873 = ((_860 * _854) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_809 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _874 = ((_860 * _855) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_813 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _875 = ((_860 * _856) / cbModelParam._m0[34u].z) + ((((((_817 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        vec4 _899 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        float _912 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _913 = _912 * (_878.x + (-0.5));
        float _914 = _912 * (_878.y + (-0.5));
        float _915 = _912 * (_878.z + (-0.5));
        float _922 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _923 = _922 * (_885.x + (-0.5));
        float _924 = _922 * (_885.y + (-0.5));
        float _925 = _922 * (_885.z + (-0.5));
        float _932 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _933 = _932 * (_892.x + (-0.5));
        float _934 = _932 * (_892.y + (-0.5));
        float _935 = _932 * (_892.z + (-0.5));
        float _942 = exp2((_899.w + (-0.5)) * 20.0) * 2.0;
        float _943 = _942 * (_899.x + (-0.5));
        float _944 = _942 * (_899.y + (-0.5));
        float _945 = _942 * (_899.z + (-0.5));
        float _946 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _947 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _948 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _949 = _913 * 0.5;
        float _950 = _923 * 0.5;
        float _951 = _933 * 0.5;
        float _952 = dot(vec3(_949, _950, _951), vec3(_949, _950, _951));
        float _957 = (_952 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_952);
        float _966 = (dot(vec3(_544, _545, _546), vec3(_957 * _949, _957 * _950, _957 * _951)) + 1.0) * 0.5;
        float _3637 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _976 = sqrt(((_950 * _950) + (_949 * _949)) + (_951 * _951)) / (_946 + 9.9999997473787516355514526367188e-06);
        float _3648 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _978 = _977 * 2.0;
        float _982 = (1.0 - _977) / (_977 + 1.0);
        float _3659 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _992 = ((((1.0 - _983) * (_978 + 2.0)) * exp2(log2(isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * (_978 + 1.0))) + _983) * _946;
        float _993 = _914 * 0.5;
        float _994 = _924 * 0.5;
        float _995 = _934 * 0.5;
        float _996 = dot(vec3(_993, _994, _995), vec3(_993, _994, _995));
        float _1001 = (_996 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_996);
        float _1009 = (dot(vec3(_544, _545, _546), vec3(_1001 * _993, _1001 * _994, _1001 * _995)) + 1.0) * 0.5;
        float _3670 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1018 = sqrt(((_994 * _994) + (_993 * _993)) + (_995 * _995)) / (_947 + 9.9999997473787516355514526367188e-06);
        float _3681 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1020 = _1019 * 2.0;
        float _1024 = (1.0 - _1019) / (_1019 + 1.0);
        float _3692 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1034 = ((((1.0 - _1025) * (_1020 + 2.0)) * exp2(log2(isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * (_1020 + 1.0))) + _1025) * _947;
        float _1035 = _915 * 0.5;
        float _1036 = _925 * 0.5;
        float _1037 = _935 * 0.5;
        float _1038 = dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037));
        float _1043 = (_1038 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1038);
        float _1051 = (dot(vec3(_544, _545, _546), vec3(_1043 * _1035, _1043 * _1036, _1043 * _1037)) + 1.0) * 0.5;
        float _3703 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1060 = sqrt(((_1036 * _1036) + (_1035 * _1035)) + (_1037 * _1037)) / (_948 + 9.9999997473787516355514526367188e-06);
        float _3714 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1062 = _1061 * 2.0;
        float _1066 = (1.0 - _1061) / (_1061 + 1.0);
        float _3725 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1076 = ((((1.0 - _1067) * (_1062 + 2.0)) * exp2(log2(isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_1062 + 1.0))) + _1067) * _948;
        _1084 = _915;
        _1086 = _914;
        _1087 = _913;
        _1088 = _925;
        _1089 = _924;
        _1090 = _923;
        _1091 = _935;
        _1092 = _934;
        _1093 = _933;
        _1094 = _948;
        _1095 = _947;
        _1096 = _946;
        _1097 = cbModelParam._m0[36u].z * (isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0)));
        _1098 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0)));
        _1099 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)));
    }
    else
    {
        _1084 = _1085;
        _1086 = _1085;
        _1087 = _1085;
        _1088 = _1085;
        _1089 = _1085;
        _1090 = _1085;
        _1091 = _1085;
        _1092 = _1085;
        _1093 = _1085;
        _1094 = _1085;
        _1095 = _1085;
        _1096 = _1085;
        _1097 = 0.0;
        _1098 = 0.0;
        _1099 = 0.0;
    }
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1125 = fma(_782, cbModelParam._m0[30u].z, fma(_778, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _774));
        float _1129 = fma(_782, cbModelParam._m0[31u].z, fma(_778, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _774));
        float _1133 = fma(_782, cbModelParam._m0[32u].z, fma(_778, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _774));
        float _1156 = _774 + _544;
        float _1157 = _778 + _545;
        float _1158 = _782 + _546;
        float _1168 = fma(_1158, cbModelParam._m0[30u].z, fma(_1157, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1156)) - _1125;
        float _1169 = fma(_1158, cbModelParam._m0[31u].z, fma(_1157, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1156)) - _1129;
        float _1170 = fma(_1158, cbModelParam._m0[32u].z, fma(_1157, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1156)) - _1133;
        float _1174 = inversesqrt(dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170)));
        float _1187 = ((_1174 * _1168) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1125 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1188 = ((_1174 * _1169) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1129 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1189 = ((_1174 * _1170) / cbModelParam._m0[35u].z) + ((((((_1133 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        float _1224 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1191.x + (-0.5));
        float _1226 = _1224 * (_1191.y + (-0.5));
        float _1227 = _1224 * (_1191.z + (-0.5));
        float _1234 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1198.x + (-0.5));
        float _1236 = _1234 * (_1198.y + (-0.5));
        float _1237 = _1234 * (_1198.z + (-0.5));
        float _1244 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1205.x + (-0.5));
        float _1246 = _1244 * (_1205.y + (-0.5));
        float _1247 = _1244 * (_1205.z + (-0.5));
        float _1254 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1212.x + (-0.5));
        float _1256 = _1254 * (_1212.y + (-0.5));
        float _1257 = _1254 * (_1212.z + (-0.5));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = _1225 * 0.5;
        float _1262 = _1235 * 0.5;
        float _1263 = _1245 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_544, _545, _546), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _3766 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _3777 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _3788 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * (_1288 + 1.0))) + _1293) * _1258;
        float _1303 = _1226 * 0.5;
        float _1304 = _1236 * 0.5;
        float _1305 = _1246 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_544, _545, _546), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _3799 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _3810 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _3821 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * (_1330 + 1.0))) + _1335) * _1259;
        float _1345 = _1227 * 0.5;
        float _1346 = _1237 * 0.5;
        float _1347 = _1247 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(_544, _545, _546), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _3832 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _3843 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _3854 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_1372 + 1.0))) + _1377) * _1260;
        _1394 = _1227;
        _1395 = _1226;
        _1396 = _1225;
        _1397 = _1237;
        _1398 = _1236;
        _1399 = _1235;
        _1400 = _1247;
        _1401 = _1246;
        _1402 = _1245;
        _1403 = _1260;
        _1404 = _1259;
        _1405 = _1258;
        _1406 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
        _1407 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
        _1408 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
    }
    else
    {
        _1394 = _1085;
        _1395 = _1085;
        _1396 = _1085;
        _1397 = _1085;
        _1398 = _1085;
        _1399 = _1085;
        _1400 = _1085;
        _1401 = _1085;
        _1402 = _1085;
        _1403 = _1085;
        _1404 = _1085;
        _1405 = _1085;
        _1406 = 0.0;
        _1407 = 0.0;
        _1408 = 0.0;
    }
    float _1418 = (cbModelParam._m0[1u].x * (_1406 - _1097)) + _1097;
    float _1419 = (cbModelParam._m0[1u].x * (_1407 - _1098)) + _1098;
    float _1420 = (cbModelParam._m0[1u].x * (_1408 - _1099)) + _1099;
    float _1441 = fma(_1420, cbSceneParam._m0[89u].z, fma(_1419, cbSceneParam._m0[89u].y, _1418 * cbSceneParam._m0[89u].x));
    float _1444 = fma(_1420, cbSceneParam._m0[90u].z, fma(_1419, cbSceneParam._m0[90u].y, _1418 * cbSceneParam._m0[90u].x));
    float _1447 = fma(_1420, cbSceneParam._m0[91u].z, fma(_1419, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1418));
    float _1462 = _719 * 0.5;
    float _1463 = _720 * 0.5;
    float _1464 = _721 * 0.5;
    float _1465 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1396, _1399, _1402, _1405));
    float _1468 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1395, _1398, _1401, _1404));
    float _1471 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1394, _1397, _1400, _1403));
    float _1505;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1478 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1084, _1088, _1091, _1094));
        float _1482 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1086, _1089, _1092, _1095));
        float _1486 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1087, _1090, _1093, _1096));
        float _1493 = dot(vec4(cbModelParam._m0[39u]), vec4(_1462, _1463, _1464, 1.0));
        _1505 = dot(vec3(isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)), isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)), isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1493) ? 0.0 : (isnan(0.0) ? _1493 : max(0.0, _1493))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1505 = 1.0;
    }
    float _1516;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1507 = dot(vec4(cbModelParam._m0[40u]), vec4(_1462, _1463, _1464, 1.0));
        _1516 = dot(vec3(isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)), isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)), isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1507) ? 0.0 : (isnan(0.0) ? _1507 : max(0.0, _1507))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1516 = 1.0;
    }
    float _1520 = (_1516 * cbModelParam._m0[1u].x) + (_1505 * (1.0 - cbModelParam._m0[1u].x));
    float _1530 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _547);
    float _1531 = isnan(_1530) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1530 : min(cbModelParam._m0[25u].z, _1530));
    float _1611;
    float _1613;
    float _1615;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1578 = fma(_782, cbModelParam._m0[13u].z, fma(_778, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _774)) + cbModelParam._m0[13u].w;
        float _1582 = fma(_782, cbModelParam._m0[14u].z, fma(_778, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _774)) + cbModelParam._m0[14u].w;
        float _1586 = fma(_782, cbModelParam._m0[15u].z, fma(_778, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _774)) + cbModelParam._m0[15u].w;
        float _1589 = fma(_721, cbModelParam._m0[13u].z, fma(_720, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _719));
        float _1592 = fma(_721, cbModelParam._m0[14u].z, fma(_720, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _719));
        float _1595 = fma(_721, cbModelParam._m0[15u].z, fma(_720, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _719));
        float _1623;
        if (_1589 > 0.0)
        {
            _1623 = abs((1.0 - _1578) / _1589);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1578 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1623 = frontier_phi_14_12_ladder;
        }
        float _1827;
        if (_1592 > 0.0)
        {
            _1827 = abs((1.0 - _1582) / _1592);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1592 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1582 + 1.0) / _1592);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1827 = frontier_phi_23_19_ladder;
        }
        float _2081;
        if (_1595 > 0.0)
        {
            _2081 = abs((1.0 - _1586) / _1595);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1595 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1586 + 1.0) / _1595);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2081 = frontier_phi_35_30_ladder;
        }
        float _2083 = isnan(_1827) ? _1623 : (isnan(_1623) ? _1827 : min(_1623, _1827));
        float _2084 = isnan(_2081) ? _2083 : (isnan(_2083) ? _2081 : min(_2083, _2081));
        float _2088 = (_2084 * _1589) + _1578;
        float _2089 = (_2084 * _1592) + _1582;
        float _2090 = (_2084 * _1595) + _1586;
        float _2091 = _2084 * 9.9999997473787516355514526367188e-05;
        float _2093 = (-1.0) - _2091;
        float _2095 = _2091 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2090 > _2095) || ((_2090 < _2093) || ((_2089 > _2095) || ((_2089 < _2093) || ((_2088 < _2093) || (_2088 > _2095))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2218 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2090, cbModelParam._m0[9u].z, fma(_2089, cbModelParam._m0[9u].y, _2088 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2090, cbModelParam._m0[10u].z, fma(_2089, cbModelParam._m0[10u].y, _2088 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2090, cbModelParam._m0[11u].z, fma(_2089, cbModelParam._m0[11u].y, _2088 * cbModelParam._m0[11u].x))), _1531);
            frontier_phi_13_35_ladder = _2218.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2218.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2218.x * cbModelParam._m0[1u].y;
        }
        _1611 = frontier_phi_13_35_ladder_2;
        _1613 = frontier_phi_13_35_ladder_1;
        _1615 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1599 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_719, _720, _721), _1531);
        _1611 = _1599.x * cbModelParam._m0[1u].y;
        _1613 = _1599.y * cbModelParam._m0[1u].y;
        _1615 = _1599.z * cbModelParam._m0[1u].y;
    }
    float _1619 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _547);
    float _1620 = isnan(_1619) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1619 : min(cbModelParam._m0[25u].w, _1619));
    float _1711;
    float _1713;
    float _1715;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1675 = fma(_782, cbModelParam._m0[21u].z, fma(_778, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _774)) + cbModelParam._m0[21u].w;
        float _1679 = fma(_782, cbModelParam._m0[22u].z, fma(_778, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _774)) + cbModelParam._m0[22u].w;
        float _1683 = fma(_782, cbModelParam._m0[23u].z, fma(_778, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _774)) + cbModelParam._m0[23u].w;
        float _1686 = fma(_721, cbModelParam._m0[21u].z, fma(_720, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _719));
        float _1689 = fma(_721, cbModelParam._m0[22u].z, fma(_720, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _719));
        float _1692 = fma(_721, cbModelParam._m0[23u].z, fma(_720, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _719));
        float _1832;
        if (_1686 > 0.0)
        {
            _1832 = abs((1.0 - _1675) / _1686);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1675 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1832 = frontier_phi_25_21_ladder;
        }
        float _2108;
        if (_1689 > 0.0)
        {
            _2108 = abs((1.0 - _1679) / _1689);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1689 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1679 + 1.0) / _1689);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2108 = frontier_phi_37_32_ladder;
        }
        float _2321;
        if (_1692 > 0.0)
        {
            _2321 = abs((1.0 - _1683) / _1692);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1683 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2321 = frontier_phi_46_43_ladder;
        }
        float _2323 = isnan(_2108) ? _1832 : (isnan(_1832) ? _2108 : min(_1832, _2108));
        float _2324 = isnan(_2321) ? _2323 : (isnan(_2323) ? _2321 : min(_2323, _2321));
        float _2328 = (_2324 * _1686) + _1675;
        float _2329 = (_2324 * _1689) + _1679;
        float _2330 = (_2324 * _1692) + _1683;
        float _2331 = _2324 * 9.9999997473787516355514526367188e-05;
        float _2332 = (-1.0) - _2331;
        float _2334 = _2331 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2330 > _2334) || ((_2330 < _2332) || ((_2329 > _2334) || ((_2329 < _2332) || ((_2328 < _2332) || (_2328 > _2334))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2574 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2330, cbModelParam._m0[17u].z, fma(_2329, cbModelParam._m0[17u].y, _2328 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2330, cbModelParam._m0[18u].z, fma(_2329, cbModelParam._m0[18u].y, _2328 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2330, cbModelParam._m0[19u].z, fma(_2329, cbModelParam._m0[19u].y, _2328 * cbModelParam._m0[19u].x))), _1620);
            frontier_phi_22_46_ladder = _2574.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2574.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2574.x * cbModelParam._m0[1u].z;
        }
        _1711 = frontier_phi_22_46_ladder_2;
        _1713 = frontier_phi_22_46_ladder_1;
        _1715 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1695 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_719, _720, _721), _1620);
        _1711 = _1695.x * cbModelParam._m0[1u].z;
        _1713 = _1695.y * cbModelParam._m0[1u].z;
        _1715 = _1695.z * cbModelParam._m0[1u].z;
    }
    float _1728 = (((_745 * _696) + _746) * _711) * ((cbModelParam._m0[1u].w * (_1711 - _1611)) + _1611);
    float _1730 = (((_745 * _698) + _746) * _711) * ((cbModelParam._m0[1u].w * (_1713 - _1613)) + _1613);
    float _1732 = (((_745 * _699) + _746) * _711) * ((cbModelParam._m0[1u].w * (_1715 - _1615)) + _1615);
    float _1735 = fma(_1732, cbSceneParam._m0[89u].z, fma(_1730, cbSceneParam._m0[89u].y, _1728 * cbSceneParam._m0[89u].x));
    float _1738 = fma(_1732, cbSceneParam._m0[90u].z, fma(_1730, cbSceneParam._m0[90u].y, _1728 * cbSceneParam._m0[90u].x));
    float _1741 = fma(_1732, cbSceneParam._m0[91u].z, fma(_1730, cbSceneParam._m0[91u].y, _1728 * cbSceneParam._m0[91u].x));
    uvec4 _1751 = floatBitsToUint(cbInstanceData._m0[_671 + 5u]);
    uint _1753 = _1751.x * 14u;
    uint _1754 = _1753 + 13u;
    float _1761 = _711 + (-1.0);
    float _1766 = (cbLight._m0[_1754].x * _1761) + 1.0;
    float _1767 = (cbLight._m0[_1754].y * _1761) + 1.0;
    float _1768 = (cbLight._m0[_1754].z * _1761) + 1.0;
    float _1769 = (cbLight._m0[_1754].w * _1761) + 1.0;
    uint _1770 = _1753 + 5u;
    float _1776 = isnan(1.0) ? _1767 : (isnan(_1767) ? 1.0 : min(_1767, 1.0));
    uint _1780 = _1753 + 4u;
    float _1786 = isnan(1.0) ? _1766 : (isnan(_1766) ? 1.0 : min(_1766, 1.0));
    uint _1790 = _1753 | 1u;
    float _1801 = dot(vec3(cbLight._m0[_1753].xyz), vec3(_544, _545, _546));
    float _1804 = dot(vec3(cbLight._m0[_1790].xyz), vec3(_544, _545, _546));
    float _3990 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _4001 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1809 = (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * 0.3183098733425140380859375;
    float _1811 = (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * 0.3183098733425140380859375;
    float _1818 = ((cbLight._m0[_1770].x * _1776) * _1811) + ((cbLight._m0[_1780].x * _1786) * _1809);
    float _1819 = ((_1776 * cbLight._m0[_1770].y) * _1811) + ((_1786 * cbLight._m0[_1780].y) * _1809);
    float _1820 = ((_1776 * cbLight._m0[_1770].z) * _1811) + ((_1786 * cbLight._m0[_1780].z) * _1809);
    uvec4 _1824 = floatBitsToUint(cbLight._m0[_1753 + 12u]);
    bool _1826 = _1824.x == 0u;
    float _1837;
    float _1839;
    float _1841;
    if (_1826)
    {
        _1837 = _1818;
        _1839 = _1819;
        _1841 = _1820;
    }
    else
    {
        uint _1845 = _1753 + 6u;
        float _1861 = (dot(vec3(cbLight._m0[_1753 + 2u].xyz), vec3(_544, _545, _546)) * 0.5) + 0.5;
        float _1862 = _1861 * _1861;
        float _4012 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1863 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1864 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
        _1837 = (((cbLight._m0[_1845].x * 0.3183098733425140380859375) * _1863) * _1864) + _1818;
        _1839 = (((cbLight._m0[_1845].y * 0.3183098733425140380859375) * _1863) * _1864) + _1819;
        _1841 = (((cbLight._m0[_1845].z * 0.3183098733425140380859375) * _1863) * _1864) + _1820;
    }
    bool _1844 = _1824.y == 0u;
    float _1882;
    float _1884;
    float _1886;
    if (_1844)
    {
        _1882 = _1837;
        _1884 = _1839;
        _1886 = _1841;
    }
    else
    {
        uint _2052 = _1753 + 7u;
        float _2068 = (dot(vec3(cbLight._m0[_1753 + 3u].xyz), vec3(_544, _545, _546)) * 0.5) + 0.5;
        float _2069 = _2068 * _2068;
        float _4028 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2070 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _2071 = isnan(1.0) ? _1769 : (isnan(_1769) ? 1.0 : min(_1769, 1.0));
        _1882 = (((cbLight._m0[_2052].x * 0.3183098733425140380859375) * _2070) * _2071) + _1837;
        _1884 = (((cbLight._m0[_2052].y * 0.3183098733425140380859375) * _2070) * _2071) + _1839;
        _1886 = (((cbLight._m0[_2052].z * 0.3183098733425140380859375) * _2070) * _2071) + _1841;
    }
    uint _1889 = _1753 + 8u;
    float _1902 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1753].w)) * _547) * 0.949999988079071044921875);
    float _1903 = _1902 * _1902;
    float _1904 = cbLight._m0[_1753].x + _625;
    float _1905 = cbLight._m0[_1753].y + _626;
    float _1906 = cbLight._m0[_1753].z + _627;
    float _1910 = inversesqrt(dot(vec3(_1904, _1905, _1906), vec3(_1904, _1905, _1906)));
    float _1911 = _1910 * _1904;
    float _1912 = _1910 * _1905;
    float _1913 = _1910 * _1906;
    float _1914 = dot(vec3(_544, _545, _546), vec3(cbLight._m0[_1753].xyz));
    float _4044 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1917 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _4055 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _1918 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _1919 = dot(vec3(_544, _545, _546), vec3(_1911, _1912, _1913));
    float _4066 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1922 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _1923 = dot(vec3(cbLight._m0[_1753].xyz), vec3(_1911, _1912, _1913));
    float _4077 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1927 = _1903 * _1903;
    float _1931 = ((_1922 * _1922) * (_1927 + (-1.0))) + 1.0;
    float _1939 = exp2(log2(1.0 - (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) * 5.0);
    float _1940 = 0.959999978542327880859375 - _693;
    float _1942 = 0.959999978542327880859375 - _694;
    float _1943 = 0.959999978542327880859375 - _695;
    float _1950 = 1.0 - _1903;
    float _1961 = (0.5 / (((_1918 * ((_1917 * _1950) + _1903)) + 9.9999999392252902907785028219223e-09) + (((_1918 * _1950) + _1903) * _1917))) * _1917;
    float _4088 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1963 = (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_1927 / ((_1931 * _1931) * 3.141590118408203125));
    uint _1974 = _1753 + 9u;
    float _1985 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1790].w)) * _547) * 0.949999988079071044921875);
    float _1986 = _1985 * _1985;
    float _1987 = cbLight._m0[_1790].x + _625;
    float _1988 = cbLight._m0[_1790].y + _626;
    float _1989 = cbLight._m0[_1790].z + _627;
    float _1993 = inversesqrt(dot(vec3(_1987, _1988, _1989), vec3(_1987, _1988, _1989)));
    float _1994 = _1993 * _1987;
    float _1995 = _1993 * _1988;
    float _1996 = _1993 * _1989;
    float _1997 = dot(vec3(_544, _545, _546), vec3(cbLight._m0[_1790].xyz));
    float _4099 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _2000 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _2001 = dot(vec3(_544, _545, _546), vec3(_1994, _1995, _1996));
    float _4110 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2004 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _2005 = dot(vec3(cbLight._m0[_1790].xyz), vec3(_1994, _1995, _1996));
    float _4121 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2009 = _1986 * _1986;
    float _2013 = ((_2004 * _2004) * (_2009 + (-1.0))) + 1.0;
    float _2020 = exp2(log2(1.0 - (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) * 5.0);
    float _2027 = 1.0 - _1986;
    float _2037 = (0.5 / (((_1918 * ((_2000 * _2027) + _1986)) + 9.9999999392252902907785028219223e-09) + (((_1918 * _2027) + _1986) * _2000))) * _2000;
    float _4132 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2039 = (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_2009 / ((_2013 * _2013) * 3.141590118408203125));
    float _2049 = (((((_2020 * _1940) + _696) * cbLight._m0[_1974].x) * _2039) * _1776) + (((((_1939 * _1940) + _696) * cbLight._m0[_1889].x) * _1963) * _1786);
    float _2050 = (((((_2020 * _1942) + _698) * cbLight._m0[_1974].y) * _2039) * _1776) + (((((_1939 * _1942) + _698) * cbLight._m0[_1889].y) * _1963) * _1786);
    float _2051 = (((((_2020 * _1943) + _699) * cbLight._m0[_1974].z) * _2039) * _1776) + (((((_1939 * _1943) + _699) * cbLight._m0[_1889].z) * _1963) * _1786);
    float _2113;
    float _2115;
    float _2117;
    if (_1826)
    {
        _2113 = _2049;
        _2115 = _2050;
        _2117 = _2051;
    }
    else
    {
        uint _2119 = _1753 + 2u;
        uint _2123 = _1753 + 10u;
        float _2137 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2119].w)) * _547) * 0.949999988079071044921875);
        float _2138 = _2137 * _2137;
        float _2139 = cbLight._m0[_2119].x + _625;
        float _2140 = cbLight._m0[_2119].y + _626;
        float _2141 = cbLight._m0[_2119].z + _627;
        float _2145 = inversesqrt(dot(vec3(_2139, _2140, _2141), vec3(_2139, _2140, _2141)));
        float _2146 = _2145 * _2139;
        float _2147 = _2145 * _2140;
        float _2148 = _2145 * _2141;
        float _2149 = dot(vec3(_544, _545, _546), vec3(cbLight._m0[_2119].xyz));
        float _4143 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
        float _2152 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _2153 = dot(vec3(_544, _545, _546), vec3(_2146, _2147, _2148));
        float _4154 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2156 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _2157 = dot(vec3(cbLight._m0[_2119].xyz), vec3(_2146, _2147, _2148));
        float _4165 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2161 = _2138 * _2138;
        float _2165 = ((_2156 * _2156) * (_2161 + (-1.0))) + 1.0;
        float _2172 = exp2(log2(1.0 - (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0)))) * 5.0);
        float _2179 = 1.0 - _2138;
        float _2189 = (0.5 / (((_1918 * ((_2152 * _2179) + _2138)) + 9.9999999392252902907785028219223e-09) + (((_1918 * _2179) + _2138) * _2152))) * _2152;
        float _4176 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2191 = (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_2161 / ((_2165 * _2165) * 3.141590118408203125));
        float _2192 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
        _2113 = (((((_2172 * _1940) + _696) * cbLight._m0[_2123].x) * _2191) * _2192) + _2049;
        _2115 = (((((_2172 * _1942) + _698) * cbLight._m0[_2123].y) * _2191) * _2192) + _2050;
        _2117 = (((((_2172 * _1943) + _699) * cbLight._m0[_2123].z) * _2191) * _2192) + _2051;
    }
    float _2227;
    float _2229;
    float _2231;
    if (_1844)
    {
        _2227 = _2113;
        _2229 = _2115;
        _2231 = _2117;
    }
    else
    {
        uint _2238 = _1753 + 3u;
        uint _2242 = _1753 + 11u;
        float _2256 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2238].w)) * _547) * 0.949999988079071044921875);
        float _2257 = _2256 * _2256;
        float _2258 = cbLight._m0[_2238].x + _625;
        float _2259 = cbLight._m0[_2238].y + _626;
        float _2260 = cbLight._m0[_2238].z + _627;
        float _2264 = inversesqrt(dot(vec3(_2258, _2259, _2260), vec3(_2258, _2259, _2260)));
        float _2265 = _2264 * _2258;
        float _2266 = _2264 * _2259;
        float _2267 = _2264 * _2260;
        float _2268 = dot(vec3(_544, _545, _546), vec3(cbLight._m0[_2238].xyz));
        float _4192 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2271 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _2272 = dot(vec3(_544, _545, _546), vec3(_2265, _2266, _2267));
        float _4203 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2275 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _2276 = dot(vec3(cbLight._m0[_2238].xyz), vec3(_2265, _2266, _2267));
        float _4214 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2280 = _2257 * _2257;
        float _2284 = ((_2275 * _2275) * (_2280 + (-1.0))) + 1.0;
        float _2291 = exp2(log2(1.0 - (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)))) * 5.0);
        float _2298 = 1.0 - _2257;
        float _2308 = (0.5 / (((_1918 * ((_2271 * _2298) + _2257)) + 9.9999999392252902907785028219223e-09) + (((_1918 * _2298) + _2257) * _2271))) * _2271;
        float _4225 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2310 = (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_2280 / ((_2284 * _2284) * 3.141590118408203125));
        float _2311 = isnan(1.0) ? _1769 : (isnan(_1769) ? 1.0 : min(_1769, 1.0));
        _2227 = (((((_2291 * _1940) + _696) * cbLight._m0[_2242].x) * _2310) * _2311) + _2113;
        _2229 = (((((_2291 * _1942) + _698) * cbLight._m0[_2242].y) * _2310) * _2311) + _2115;
        _2231 = (((((_2291 * _1943) + _699) * cbLight._m0[_2242].z) * _2310) * _2311) + _2117;
    }
    float _2446;
    float _2448;
    float _2450;
    float _2452;
    float _2454;
    float _2456;
    if (_1751.y == 0u)
    {
        float _2386 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2387 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2386;
        float _2388 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2386;
        float _2389 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2386;
        uvec4 _2401 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2402 = _2401.x;
        uint _2413 = uint((float(_2401.y) * floor(float(uint(cbSceneParam._m0[85u].y * _634) / _2402))) + floor(float(uint(cbSceneParam._m0[85u].x * _633) / _2402)));
        float _2423 = (log2(_2389 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2424 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        uint _2427 = uint(isnan(14.0) ? _2424 : (isnan(_2424) ? 14.0 : min(_2424, 14.0)));
        uvec4 _2432 = texelFetch(g_lightClusterGridBuffer, int(((_2427 << 2u) + (_2413 << 6u)) >> 2u));
        uint _2433 = _2432.x;
        uint _2434 = _2401.z;
        float _2579;
        float _2581;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        if (((((1u << ((_2434 >> 4u) & 15u)) + 4294967295u) & _2433) == 0u) || ((_2434 & 240u) == 0u))
        {
            _2579 = 0.0;
            _2581 = 0.0;
            _2583 = 0.0;
            _2585 = 0.0;
            _2587 = 0.0;
            _2589 = 0.0;
        }
        else
        {
            float _2580;
            float _2582;
            float _2584;
            float _2586;
            float _2588;
            float _2590;
            float _2732 = 0.0;
            float _2733 = 0.0;
            float _2734 = 0.0;
            float _2735 = 0.0;
            float _2736 = 0.0;
            float _2737 = 0.0;
            uint _2738 = 0u;
            uint _2747;
            bool _2748;
            for (;;)
            {
                _2747 = texelFetch(g_lightClassification, int((((_2427 << 5u) + (_2413 << 9u)) + (_2738 << 2u)) >> 2u)).x;
                _2748 = _2747 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2748)
                {
                    frontier_phi_61_pred = _2732;
                    frontier_phi_61_pred_1 = _2737;
                    frontier_phi_61_pred_2 = _2736;
                    frontier_phi_61_pred_3 = _2735;
                    frontier_phi_61_pred_4 = _2734;
                    frontier_phi_61_pred_5 = _2733;
                }
                else
                {
                    float _2856;
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    uint _2862;
                    _2856 = _2732;
                    _2857 = _2733;
                    _2858 = _2734;
                    _2859 = _2735;
                    _2860 = _2736;
                    _2861 = _2737;
                    _2862 = _2747;
                    float _2788;
                    float _2789;
                    float _2790;
                    float _2791;
                    float _2792;
                    float _2793;
                    for (;;)
                    {
                        uint _2866 = uint(findLSB(_2862)) + (_2738 << 5u);
                        uint _2863 = (_2862 + 4294967295u) & _2862;
                        uint _2868 = _2866 * 48u;
                        vec4 _2882 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2868)).x, texelFetch(g_PointLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2868 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2868 + 3u)).x));
                        uint _2888 = (_2866 * 48u) + 4u;
                        vec4 _2901 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2888)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 3u)).x));
                        uint _2907 = (_2866 * 48u) + 8u;
                        vec3 _2918 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2907)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 2u)).x));
                        float _2922 = _2882.x - _2387;
                        float _2923 = _2882.y - _2388;
                        float _2924 = _2882.z - _2389;
                        float _2925 = dot(vec3(_2922, _2923, _2924), vec3(_2922, _2923, _2924));
                        float _2928 = inversesqrt(_2925);
                        float _2929 = _2928 * _2922;
                        float _2930 = _2928 * _2923;
                        float _2931 = _2928 * _2924;
                        float _2932 = dot(vec3(_652, _655, _658), vec3(_2929, _2930, _2931));
                        float _2937 = 1.0 - (_2925 * _2882.w);
                        float _4251 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                        float _2938 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
                        float _2939 = sqrt(_2925) * _2901.w;
                        float _2942 = 1.39999997615814208984375 / (_2939 + 1.39999997615814208984375);
                        float _2943 = _2942 * _2942;
                        float _2946 = ((1.0 - _2943) * _2932) + _2943;
                        float _2949 = _2939 * _2939;
                        float _2953 = ((isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0))) * _2938) / ((_2949 * 0.699999988079071044921875) + 1.0);
                        float _2957 = (-0.0) - _2387;
                        float _2958 = (-0.0) - _2388;
                        float _2959 = (-0.0) - _2389;
                        float _2963 = inversesqrt(dot(vec3(_2957, _2958, _2959), vec3(_2957, _2958, _2959)));
                        float _2964 = _2963 * _2957;
                        float _2965 = _2963 * _2958;
                        float _2966 = _2963 * _2959;
                        float _2974 = exp2(log2(1.0 / ((_2949 * 3.5) + 5.0)) * 0.25);
                        float _2975 = 1.0 - _727;
                        float _2982 = sqrt(1.0 - ((1.0 - (_2975 * _2975)) * (1.0 - (_2974 * _2974))));
                        float _2983 = _2982 * _2982;
                        float _2984 = _2983 * _2983;
                        float _2985 = _2964 + _2929;
                        float _2986 = _2965 + _2930;
                        float _2987 = _2966 + _2931;
                        float _2991 = inversesqrt(dot(vec3(_2985, _2986, _2987), vec3(_2985, _2986, _2987)));
                        float _2995 = dot(vec3(_652, _655, _658), vec3(_2964, _2965, _2966));
                        float _4267 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                        float _2998 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                        float _2999 = dot(vec3(_652, _655, _658), vec3(_2991 * _2985, _2991 * _2986, _2991 * _2987));
                        float _4278 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                        float _3002 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                        float _3006 = ((_3002 * _3002) * (_2984 + (-1.0))) + 1.0;
                        float _3007 = _2942 * _2983;
                        float _3008 = _3007 * _3007;
                        float _3011 = ((1.0 - _3008) * _2932) + _3008;
                        float _4289 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                        float _3012 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                        float _3013 = 1.0 - _2983;
                        float _3023 = (0.5 / (((_3012 * ((_2998 * _3013) + _2983)) + 9.9999999392252902907785028219223e-09) + (((_3012 * _3013) + _2983) * _2998))) * _3012;
                        float _4300 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                        float _3034 = (((_2984 * 3.1415927410125732421875) * (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) / ((_3006 * _3006) * ((_2949 * 2.1991131305694580078125) + 3.141590118408203125))) * _2938;
                        _2791 = (_2953 * _2901.x) + _2859;
                        _2792 = (_2953 * _2901.y) + _2860;
                        _2793 = (_2953 * _2901.z) + _2861;
                        _2788 = (_3034 * _2918.x) + _2856;
                        _2789 = (_3034 * _2918.y) + _2857;
                        _2790 = (_3034 * _2918.z) + _2858;
                        if (_2863 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2856 = _2788;
                            _2857 = _2789;
                            _2858 = _2790;
                            _2859 = _2791;
                            _2860 = _2792;
                            _2861 = _2793;
                            _2862 = _2863;
                        }
                    }
                    frontier_phi_61_pred = _2788;
                    frontier_phi_61_pred_1 = _2793;
                    frontier_phi_61_pred_2 = _2792;
                    frontier_phi_61_pred_3 = _2791;
                    frontier_phi_61_pred_4 = _2790;
                    frontier_phi_61_pred_5 = _2789;
                }
                _2580 = frontier_phi_61_pred;
                _2590 = frontier_phi_61_pred_1;
                _2588 = frontier_phi_61_pred_2;
                _2586 = frontier_phi_61_pred_3;
                _2584 = frontier_phi_61_pred_4;
                _2582 = frontier_phi_61_pred_5;
                uint _2739 = _2738 + 1u;
                if (_2739 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2732 = _2580;
                    _2733 = _2582;
                    _2734 = _2584;
                    _2735 = _2586;
                    _2736 = _2588;
                    _2737 = _2590;
                    _2738 = _2739;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2579 = _2580;
            _2581 = _2582;
            _2583 = _2584;
            _2585 = _2586;
            _2587 = _2588;
            _2589 = _2590;
        }
        uvec4 _2593 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2594 = _2593.z;
        uint _2596 = (_2594 >> 8u) & 15u;
        float _2700;
        float _2702;
        float _2704;
        float _2706;
        float _2708;
        float _2710;
        if (((4294967295u << _2596) & _2433) == 0u)
        {
            _2700 = _2579;
            _2702 = _2581;
            _2704 = _2583;
            _2706 = _2585;
            _2708 = _2587;
            _2710 = _2589;
        }
        else
        {
            float _2725 = inversesqrt(dot(vec3(_2387, _2388, _2389), vec3(_2387, _2388, _2389)));
            float _2726 = _2725 * _2387;
            float _2727 = _2725 * _2388;
            float _2728 = _2725 * _2389;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2596 < ((_2594 >> 12u) & 15u))
            {
                float _2701;
                float _2703;
                float _2705;
                float _2707;
                float _2709;
                float _2711;
                float _2839 = _2579;
                float _2840 = _2581;
                float _2841 = _2583;
                float _2842 = _2585;
                float _2843 = _2587;
                float _2844 = _2589;
                uint _2845 = _2596;
                uint _2854;
                bool _2855;
                for (;;)
                {
                    _2854 = texelFetch(g_lightClassification, int((((_2427 << 5u) + (_2413 << 9u)) + (_2845 << 2u)) >> 2u)).x;
                    _2855 = _2854 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2855)
                    {
                        frontier_phi_67_pred = _2842;
                        frontier_phi_67_pred_1 = _2843;
                        frontier_phi_67_pred_2 = _2844;
                        frontier_phi_67_pred_3 = _2841;
                        frontier_phi_67_pred_4 = _2840;
                        frontier_phi_67_pred_5 = _2839;
                    }
                    else
                    {
                        float _3039;
                        float _3040;
                        float _3041;
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3052 = _2839;
                        float _3053 = _2840;
                        float _3054 = _2841;
                        float _3055 = _2842;
                        float _3056 = _2843;
                        float _3057 = _2844;
                        uint _3058 = _2854;
                        uint _3059;
                        vec4 _3084;
                        float _3085;
                        vec4 _3100;
                        vec3 _3112;
                        vec4 _3127;
                        vec4 _3143;
                        float _3190;
                        bool _3191;
                        for (;;)
                        {
                            uint _3069 = ((_2845 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3058));
                            _3059 = (_3058 + 4294967295u) & _3058;
                            uint _3071 = _3069 * 40u;
                            _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            _3085 = _3084.w;
                            uint _3087 = (_3069 * 40u) + 4u;
                            _3100 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 3u)).x));
                            uint _3102 = (_3069 * 40u) + 8u;
                            _3112 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x));
                            uint _3114 = (_3069 * 40u) + 16u;
                            _3127 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 3u)).x));
                            uint _3130 = (_3069 * 40u) + 20u;
                            _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            uint _3146 = (_3069 * 40u) + 24u;
                            vec4 _3159 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3146)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 3u)).x));
                            uint _3165 = (_3069 * 40u) + 28u;
                            vec4 _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            _3190 = fma(_2389, _3178.z, fma(_2388, _3178.y, _3178.x * _2387)) + _3178.w;
                            _3191 = !((fma(_2389, _3159.z, fma(_2388, _3159.y, _3159.x * _2387)) + _3159.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3191)
                            {
                                float _3218 = _3084.x - _2387;
                                float _3219 = _3084.y - _2388;
                                float _3220 = _3084.z - _2389;
                                float _3221 = dot(vec3(_3218, _3219, _3220), vec3(_3218, _3219, _3220));
                                float _3224 = inversesqrt(_3221);
                                float _3225 = _3224 * _3218;
                                float _3226 = _3224 * _3219;
                                float _3227 = _3224 * _3220;
                                float _3231 = 1.0 - (_3221 / (_3085 * _3085));
                                float _4311 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                                float _3232 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
                                float _3236 = sqrt(_3221) * _3100.w;
                                float _3238 = 1.39999997615814208984375 / (_3236 + 1.39999997615814208984375);
                                float _3239 = _3238 * _3238;
                                float _3242 = ((1.0 - _3239) * dot(vec3(_3225, _3226, _3227), vec3(_652, _655, _658))) + _3239;
                                float _3245 = _3236 * _3236;
                                float _3249 = (fma(_2389, _3127.z, fma(_2388, _3127.y, _3127.x * _2387)) + _3127.w) / _3190;
                                float _3250 = (fma(_2389, _3143.z, fma(_2388, _3143.y, _3143.x * _2387)) + _3143.w) / _3190;
                                float _3254 = 1.0 - dot(vec2(_3249, _3250), vec2(_3249, _3250));
                                float _4327 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                                float _3255 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                                float _3256 = _3255 * (((isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0))) * _3232) / ((_3245 * 0.699999988079071044921875) + 1.0));
                                float _3268 = exp2(log2(1.0 / ((_3245 * 3.5) + 5.0)) * 0.25);
                                float _3269 = 1.0 - _727;
                                float _3276 = sqrt(1.0 - ((1.0 - (_3269 * _3269)) * (1.0 - (_3268 * _3268))));
                                float _3277 = _3276 * _3276;
                                float _3278 = _3277 * _3277;
                                float _3279 = _3225 - _2726;
                                float _3280 = _3226 - _2727;
                                float _3281 = _3227 - _2728;
                                float _3285 = inversesqrt(dot(vec3(_3279, _3280, _3281), vec3(_3279, _3280, _3281)));
                                float _3289 = dot(vec3(_652, _655, _658), vec3((-0.0) - _2726, (-0.0) - _2727, (-0.0) - _2728));
                                float _4338 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                                float _3292 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                                float _3293 = dot(vec3(_652, _655, _658), vec3(_3285 * _3279, _3285 * _3280, _3285 * _3281));
                                float _4349 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3296 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                                float _3300 = ((_3296 * _3296) * (_3278 + (-1.0))) + 1.0;
                                float _3301 = _3238 * _3277;
                                float _3302 = _3301 * _3301;
                                float _3308 = ((1.0 - _3302) * dot(vec3(_652, _655, _658), vec3(_3225, _3226, _3227))) + _3302;
                                float _4360 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                                float _3309 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
                                float _3310 = 1.0 - _3277;
                                float _3320 = (0.5 / (((_3309 * ((_3292 * _3310) + _3277)) + 9.9999999392252902907785028219223e-09) + (((_3309 * _3310) + _3277) * _3292))) * _3309;
                                float _4371 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                                float _3330 = (_3255 * _3232) * (((_3278 * 3.1415927410125732421875) * (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0)))) / ((_3300 * _3300) * ((_3245 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3330 * _3112.x;
                                frontier_phi_73_pred_1 = _3330 * _3112.y;
                                frontier_phi_73_pred_2 = _3256 * _3100.z;
                                frontier_phi_73_pred_3 = _3256 * _3100.y;
                                frontier_phi_73_pred_4 = _3256 * _3100.x;
                                frontier_phi_73_pred_5 = _3330 * _3112.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3334 = frontier_phi_73_pred;
                            _3335 = frontier_phi_73_pred_1;
                            _3339 = frontier_phi_73_pred_2;
                            _3338 = frontier_phi_73_pred_3;
                            _3337 = frontier_phi_73_pred_4;
                            _3336 = frontier_phi_73_pred_5;
                            _3042 = _3337 + _3055;
                            _3043 = _3338 + _3056;
                            _3044 = _3339 + _3057;
                            _3039 = _3334 + _3052;
                            _3040 = _3335 + _3053;
                            _3041 = _3336 + _3054;
                            if (_3059 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3052 = _3039;
                                _3053 = _3040;
                                _3054 = _3041;
                                _3055 = _3042;
                                _3056 = _3043;
                                _3057 = _3044;
                                _3058 = _3059;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3042;
                        frontier_phi_67_pred_1 = _3043;
                        frontier_phi_67_pred_2 = _3044;
                        frontier_phi_67_pred_3 = _3041;
                        frontier_phi_67_pred_4 = _3040;
                        frontier_phi_67_pred_5 = _3039;
                    }
                    _2707 = frontier_phi_67_pred;
                    _2709 = frontier_phi_67_pred_1;
                    _2711 = frontier_phi_67_pred_2;
                    _2705 = frontier_phi_67_pred_3;
                    _2703 = frontier_phi_67_pred_4;
                    _2701 = frontier_phi_67_pred_5;
                    uint _2846 = _2845 + 1u;
                    if (_2846 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2839 = _2701;
                        _2840 = _2703;
                        _2841 = _2705;
                        _2842 = _2707;
                        _2843 = _2709;
                        _2844 = _2711;
                        _2845 = _2846;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2709;
                frontier_phi_55_56_ladder_1 = _2711;
                frontier_phi_55_56_ladder_2 = _2707;
                frontier_phi_55_56_ladder_3 = _2705;
                frontier_phi_55_56_ladder_4 = _2703;
                frontier_phi_55_56_ladder_5 = _2701;
            }
            else
            {
                frontier_phi_55_56_ladder = _2587;
                frontier_phi_55_56_ladder_1 = _2589;
                frontier_phi_55_56_ladder_2 = _2585;
                frontier_phi_55_56_ladder_3 = _2583;
                frontier_phi_55_56_ladder_4 = _2581;
                frontier_phi_55_56_ladder_5 = _2579;
            }
            _2700 = frontier_phi_55_56_ladder_5;
            _2702 = frontier_phi_55_56_ladder_4;
            _2704 = frontier_phi_55_56_ladder_3;
            _2706 = frontier_phi_55_56_ladder_2;
            _2708 = frontier_phi_55_56_ladder;
            _2710 = frontier_phi_55_56_ladder_1;
        }
        float _2715 = isnan(1.0) ? _711 : (isnan(_711) ? 1.0 : min(_711, 1.0));
        _2446 = (_2715 * _2706) + _1882;
        _2448 = (_2715 * _2708) + _1884;
        _2450 = (_2715 * _2710) + _1886;
        _2452 = ((_2700 * _696) * _2715) + _2227;
        _2454 = ((_2702 * _698) * _2715) + _2229;
        _2456 = ((_2704 * _699) * _2715) + _2231;
    }
    else
    {
        _2446 = _1882;
        _2448 = _1884;
        _2450 = _1886;
        _2452 = _2227;
        _2454 = _2229;
        _2456 = _2231;
    }
    uint _2462 = _672 + uint(cbMatDynParam._m0[0u].w);
    float _2468 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].y;
    float _2474 = (((((_2468 * cbMtdParam._m0[10u].x) * _425.x) * _448) * _523) * (((1.0 - _502) * cbMtdParam._m0[16u].y) + _502)) * cbInstanceData._m0[_2462].x;
    float _2480 = (((((_2468 * cbMtdParam._m0[10u].y) * _425.y) * _448) * _523) * (((1.0 - _504) * cbMtdParam._m0[16u].y) + _504)) * cbInstanceData._m0[_2462].y;
    float _2486 = (((((_2468 * cbMtdParam._m0[10u].z) * _425.z) * _448) * _523) * (((1.0 - _506) * cbMtdParam._m0[16u].y) + _506)) * cbInstanceData._m0[_2462].z;
    float _4387 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _4398 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _4409 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _2503 = (((isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_2446 + ((isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))) * _711))) + ((_2452 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _1520)) * cbPerFrame._m0[3u].x)) + _2474;
    float _2505 = (_2480 + ((_2454 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _1520)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_2448 + ((isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0))) * _711)));
    float _2507 = (_2486 + ((_2456 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _1520)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_2450 + ((isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))) * _711)));
    float _4435 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2520 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
    uint _2521 = _671 + 6u;
    float _2529 = _633 / cbSceneParam._m0[86u].x;
    float _2530 = _634 / cbSceneParam._m0[86u].y;
    vec4 _2544 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2529, _2530, (log2((isnan(cbSceneParam._m0[77u].w) ? _567 : (isnan(_567) ? cbSceneParam._m0[77u].w : min(_567, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2546 = _2544.x;
    float _2547 = _2544.y;
    float _2548 = _2544.z;
    float _2549 = _2544.w;
    float _2641;
    float _2643;
    float _2645;
    float _2647;
    if (_567 > cbSceneParam._m0[78u].w)
    {
        float _2604 = isnan(_567) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _567 : min(cbSceneParam._m0[80u].w, _567));
        float _2605 = _2604 / _567;
        float _2616 = _2605 * _618;
        float _2617 = _619 * _2605;
        float _2618 = (-0.0) - _2617;
        float _2619 = _2605 * _620;
        float _2621 = (cbSceneParam._m0[77u].w * _2618) / _2604;
        float _2622 = _2621 + cbSceneParam._m0[79u].w;
        float _2623 = cbSceneParam._m0[79u].w - _2617;
        float _2629 = sqrt(((_2616 * _2616) + (_2617 * _2617)) + (_2619 * _2619));
        float _2632 = (1.0 - (cbSceneParam._m0[77u].w / _2604)) * _2629;
        float _2637 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2639 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2801;
        if (abs((_2618 - _2621) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2801 = ((((_2622 > 0.0) ? exp2(_2637 * _2622) : (2.0 - exp2(_2639 * _2622))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2632;
        }
        else
        {
            float _2761 = 1.0 / cbSceneParam._m0[80u].x;
            float _2762 = isnan(_2623) ? _2622 : (isnan(_2622) ? _2623 : max(_2622, _2623));
            float _2763 = isnan(_2623) ? _2622 : (isnan(_2622) ? _2623 : min(_2622, _2623));
            float _2772 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : min(_2762, 0.0));
            float _2773 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : min(_2763, 0.0));
            _2801 = ((abs(_2629 / _2618) * cbSceneParam._m0[80u].y) * ((((_2772 - _2773) * 2.0) - ((exp2(_2637 * (isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0)))) - exp2(_2637 * (isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0))))) * _2761)) - ((exp2(_2639 * _2772) - exp2(_2639 * _2773)) * _2761))) + (_2632 * cbSceneParam._m0[80u].z);
        }
        vec4 _2803 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2529, _2530, 1.0), 0.0);
        float _2812 = exp2((_2801 * (-1.44269502162933349609375)) * (1.0 - _2803.w));
        float _2813 = log2(_2812);
        float _2829 = log2(_2549);
        _2641 = (exp2(_2829 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2813 * cbSceneParam._m0[78u].x)) * _2803.x) / cbSceneParam._m0[78u].x)) + _2546;
        _2643 = (exp2(_2829 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2813 * cbSceneParam._m0[78u].y)) * _2803.y) / cbSceneParam._m0[78u].y)) + _2547;
        _2645 = (exp2(_2829 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2813 * cbSceneParam._m0[78u].z)) * _2803.z) / cbSceneParam._m0[78u].z)) + _2548;
        _2647 = _2812 * _2549;
    }
    else
    {
        _2641 = _2546;
        _2643 = _2547;
        _2645 = _2548;
        _2647 = _2549;
    }
    float _2659 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2660 = _2659 == 3.0;
    float _2661 = log2(_2647);
    float _2665 = exp2(_2661 * cbSceneParam._m0[78u].x);
    float _2666 = exp2(_2661 * cbSceneParam._m0[78u].y);
    float _2667 = exp2(_2661 * cbSceneParam._m0[78u].z);
    float _2668 = _2665 * (isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0)));
    float _2669 = _2666 * (isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0)));
    float _2670 = _2667 * (isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0)));
    float _2679 = (_2659 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2679 * (_2660 ? _2668 : (_2668 + (cbSceneParam._m0[72u].w * _2641)));
    SV_Target.y = _2679 * (_2660 ? _2669 : (_2669 + (cbSceneParam._m0[72u].w * _2643)));
    SV_Target.z = _2679 * (_2660 ? _2670 : (_2670 + (cbSceneParam._m0[72u].w * _2645)));
    SV_Target.w = cbInstanceData._m0[_2521].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2474) * _2520) * _2665) * _2679;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2480) * _2520) * _2666) * _2679;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2486) * _2520) * _2667) * _2679;
    SV_Target_1.w = cbInstanceData._m0[_2521].w;
}


