#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1047;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236;
    float _237;
    float _238;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
    }
    else
    {
        _236 = _222;
        _237 = _223;
        _238 = _224;
    }
    vec4 _259 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _288 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _293 = _288.x * cbMtdParam._m0[9u].x;
    float _294 = _288.y * cbMtdParam._m0[9u].y;
    float _295 = _288.z * cbMtdParam._m0[9u].z;
    vec4 _314 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _340 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[6u].w));
    float _367 = (texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((cbMtdParam._m0[13u].z * TEXCOORD_4.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[13u].z * TEXCOORD_4.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[13u].x;
    float _375 = (cbMtdParam._m0[13u].y * TEXCOORD.w) + 1.0;
    float _376 = (TEXCOORD_9.x - (_367 * (1.0 - TEXCOORD_9.x))) * _375;
    float _377 = (TEXCOORD_9.y - (_367 * (1.0 - TEXCOORD_9.y))) * _375;
    float _3643 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _378 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _3654 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _379 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _386 = (_378 * ((_314.x * cbMtdParam._m0[10u].x) - _293)) + _293;
    float _387 = (_378 * ((_314.y * cbMtdParam._m0[10u].y) - _294)) + _294;
    float _388 = (_378 * ((_314.z * cbMtdParam._m0[10u].z) - _295)) + _295;
    float _401 = ((cbMtdParam._m0[12u].x * 4.55000019073486328125) * _259.x) * ((((_340.x * cbMtdParam._m0[11u].x) - _386) * _379) + _386);
    float _404 = ((cbMtdParam._m0[12u].y * 4.55000019073486328125) * _259.y) * ((((_340.y * cbMtdParam._m0[11u].y) - _387) * _379) + _387);
    float _407 = ((cbMtdParam._m0[12u].z * 4.55000019073486328125) * _259.z) * ((((_340.z * cbMtdParam._m0[11u].z) - _388) * _379) + _388);
    vec4 _419 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[2u].w));
    float _421 = _419.x;
    float _422 = _419.y;
    float _423 = _419.z;
    vec4 _435 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _452 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[8u].w));
    float _463 = (_378 * (_435.x - _421)) + _421;
    float _464 = (_378 * (_435.y - _422)) + _422;
    float _465 = (_378 * (_435.z - _423)) + _423;
    float _474 = ((_452.z - _465) * _379) + _465;
    float _478 = ((((_452.x - _463) * _379) + _463) * 2.0) + (-1.0);
    float _480 = ((((_452.y - _464) * _379) + _464) * 2.0) + (-1.0);
    float _481 = dot(vec2(_478, _480), vec2(_478, _480));
    float _3665 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _486 = sqrt(1.0 - (isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))));
    vec4 _500 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _510 = (((_500.x * 2.0) + (-1.0)) * cbMtdParam._m0[13u].w) + _478;
    float _511 = (((_500.y * 2.0) + (-1.0)) * cbMtdParam._m0[13u].w) + _480;
    float _514 = fma(_486, _236, fma(_511, _228 * TANGENT.x, (_214 * _206) * _510));
    float _517 = fma(_486, _237, fma(_511, _228 * TANGENT.y, (_214 * _207) * _510));
    float _520 = fma(_486, _238, fma(_511, _228 * TANGENT.z, (_214 * _208) * _510));
    float _524 = inversesqrt(dot(vec3(_514, _517, _520), vec3(_514, _517, _520)));
    float _525 = _524 * _514;
    float _526 = _524 * _517;
    float _527 = _524 * _520;
    float _3676 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _528 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    float _3687 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _3698 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _3709 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _547 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _587 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _597 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _587);
    float _598 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _587);
    float _599 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _587);
    float _603 = inversesqrt(dot(vec3(_597, _598, _599), vec3(_597, _598, _599)));
    float _604 = _597 * _603;
    float _605 = _598 * _603;
    float _606 = _599 * _603;
    float _612 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _613 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _631 = fma(_527, cbSceneParam._m0[5u].z, fma(_526, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _525));
    float _634 = fma(_527, cbSceneParam._m0[6u].z, fma(_526, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _525));
    float _637 = fma(_527, cbSceneParam._m0[7u].z, fma(_526, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _525));
    uint _650 = uint(roundEven(NORMAL.w)) * 13u;
    uint _652 = (_650 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _658 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)))) * cbInstanceData._m0[_652].x;
    float _659 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0)))) * cbInstanceData._m0[_652].y;
    float _660 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) * cbInstanceData._m0[_652].z;
    float _3720 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _661 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _3731 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _662 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    float _3742 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _663 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    vec4 _672 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _612, cbSceneParam._m0[86u].y * _613));
    float _675 = _672.x * TEXCOORD_9.w;
    float _676 = dot(vec3(_525, _526, _527), vec3(_604, _605, _606));
    float _679 = _676 * 2.0;
    float _683 = (_679 * _525) - _604;
    float _684 = (_679 * _526) - _605;
    float _685 = (_679 * _527) - _606;
    float _689 = abs(dot(vec3(_604, _605, _606), vec3(_525, _526, _527)));
    float _3753 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _691 = sqrt(_528);
    float _704 = exp2((_691 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_691 * 3.0));
    float _736 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _740 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1046;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _771 = fma(_744, cbModelParam._m0[26u].z, fma(_740, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _736));
        float _775 = fma(_744, cbModelParam._m0[27u].z, fma(_740, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _736));
        float _779 = fma(_744, cbModelParam._m0[28u].z, fma(_740, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _736));
        float _804 = _736 + _525;
        float _805 = _740 + _526;
        float _806 = _744 + _527;
        float _816 = fma(_806, cbModelParam._m0[26u].z, fma(_805, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _804)) - _771;
        float _817 = fma(_806, cbModelParam._m0[27u].z, fma(_805, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _804)) - _775;
        float _818 = fma(_806, cbModelParam._m0[28u].z, fma(_805, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _804)) - _779;
        float _822 = inversesqrt(dot(vec3(_816, _817, _818), vec3(_816, _817, _818)));
        float _835 = ((_822 * _816) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_771 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _836 = ((_822 * _817) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_775 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _837 = ((_822 * _818) / cbModelParam._m0[34u].z) + ((((((_779 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        float _874 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _875 = _874 * (_840.x + (-0.5));
        float _876 = _874 * (_840.y + (-0.5));
        float _877 = _874 * (_840.z + (-0.5));
        float _884 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_847.x + (-0.5));
        float _886 = _884 * (_847.y + (-0.5));
        float _887 = _884 * (_847.z + (-0.5));
        float _894 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_854.x + (-0.5));
        float _896 = _894 * (_854.y + (-0.5));
        float _897 = _894 * (_854.z + (-0.5));
        float _904 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_861.x + (-0.5));
        float _906 = _904 * (_861.y + (-0.5));
        float _907 = _904 * (_861.z + (-0.5));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _910 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _911 = _875 * 0.5;
        float _912 = _885 * 0.5;
        float _913 = _895 * 0.5;
        float _914 = dot(vec3(_911, _912, _913), vec3(_911, _912, _913));
        float _919 = (_914 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_914);
        float _928 = (dot(vec3(_525, _526, _527), vec3(_919 * _911, _919 * _912, _919 * _913)) + 1.0) * 0.5;
        float _3779 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _938 = sqrt(((_912 * _912) + (_911 * _911)) + (_913 * _913)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3790 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _940 = _939 * 2.0;
        float _944 = (1.0 - _939) / (_939 + 1.0);
        float _3801 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _954 = ((((1.0 - _945) * (_940 + 2.0)) * exp2(log2(isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_940 + 1.0))) + _945) * _908;
        float _955 = _876 * 0.5;
        float _956 = _886 * 0.5;
        float _957 = _896 * 0.5;
        float _958 = dot(vec3(_955, _956, _957), vec3(_955, _956, _957));
        float _963 = (_958 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_958);
        float _971 = (dot(vec3(_525, _526, _527), vec3(_963 * _955, _963 * _956, _963 * _957)) + 1.0) * 0.5;
        float _3812 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _980 = sqrt(((_956 * _956) + (_955 * _955)) + (_957 * _957)) / (_909 + 9.9999997473787516355514526367188e-06);
        float _3823 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _982 = _981 * 2.0;
        float _986 = (1.0 - _981) / (_981 + 1.0);
        float _3834 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _996 = ((((1.0 - _987) * (_982 + 2.0)) * exp2(log2(isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (_982 + 1.0))) + _987) * _909;
        float _997 = _877 * 0.5;
        float _998 = _887 * 0.5;
        float _999 = _897 * 0.5;
        float _1000 = dot(vec3(_997, _998, _999), vec3(_997, _998, _999));
        float _1005 = (_1000 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1000);
        float _1013 = (dot(vec3(_525, _526, _527), vec3(_1005 * _997, _1005 * _998, _1005 * _999)) + 1.0) * 0.5;
        float _3845 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1022 = sqrt(((_998 * _998) + (_997 * _997)) + (_999 * _999)) / (_910 + 9.9999997473787516355514526367188e-06);
        float _3856 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1024 = _1023 * 2.0;
        float _1028 = (1.0 - _1023) / (_1023 + 1.0);
        float _3867 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1038 = ((((1.0 - _1029) * (_1024 + 2.0)) * exp2(log2(isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_1024 + 1.0))) + _1029) * _910;
        _1046 = _877;
        _1048 = _876;
        _1049 = _875;
        _1050 = _887;
        _1051 = _886;
        _1052 = _885;
        _1053 = _897;
        _1054 = _896;
        _1055 = _895;
        _1056 = _910;
        _1057 = _909;
        _1058 = _908;
        _1059 = cbModelParam._m0[36u].z * (isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0)));
        _1060 = cbModelParam._m0[36u].z * (isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0)));
        _1061 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0)));
    }
    else
    {
        _1046 = _1047;
        _1048 = _1047;
        _1049 = _1047;
        _1050 = _1047;
        _1051 = _1047;
        _1052 = _1047;
        _1053 = _1047;
        _1054 = _1047;
        _1055 = _1047;
        _1056 = _1047;
        _1057 = _1047;
        _1058 = _1047;
        _1059 = 0.0;
        _1060 = 0.0;
        _1061 = 0.0;
    }
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1087 = fma(_744, cbModelParam._m0[30u].z, fma(_740, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _736));
        float _1091 = fma(_744, cbModelParam._m0[31u].z, fma(_740, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _736));
        float _1095 = fma(_744, cbModelParam._m0[32u].z, fma(_740, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _736));
        float _1118 = _736 + _525;
        float _1119 = _740 + _526;
        float _1120 = _744 + _527;
        float _1130 = fma(_1120, cbModelParam._m0[30u].z, fma(_1119, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1118)) - _1087;
        float _1131 = fma(_1120, cbModelParam._m0[31u].z, fma(_1119, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1118)) - _1091;
        float _1132 = fma(_1120, cbModelParam._m0[32u].z, fma(_1119, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1118)) - _1095;
        float _1136 = inversesqrt(dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132)));
        float _1149 = ((_1136 * _1130) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1087 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1150 = ((_1136 * _1131) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1091 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1151 = ((_1136 * _1132) / cbModelParam._m0[35u].z) + ((((((_1095 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        float _1186 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1153.x + (-0.5));
        float _1188 = _1186 * (_1153.y + (-0.5));
        float _1189 = _1186 * (_1153.z + (-0.5));
        float _1196 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1160.x + (-0.5));
        float _1198 = _1196 * (_1160.y + (-0.5));
        float _1199 = _1196 * (_1160.z + (-0.5));
        float _1206 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1167.x + (-0.5));
        float _1208 = _1206 * (_1167.y + (-0.5));
        float _1209 = _1206 * (_1167.z + (-0.5));
        float _1216 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1174.x + (-0.5));
        float _1218 = _1216 * (_1174.y + (-0.5));
        float _1219 = _1216 * (_1174.z + (-0.5));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = _1187 * 0.5;
        float _1224 = _1197 * 0.5;
        float _1225 = _1207 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_525, _526, _527), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3908 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _3919 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _3930 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1250 + 1.0))) + _1255) * _1220;
        float _1265 = _1188 * 0.5;
        float _1266 = _1198 * 0.5;
        float _1267 = _1208 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_525, _526, _527), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _3941 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _3952 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _3963 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * (_1292 + 1.0))) + _1297) * _1221;
        float _1307 = _1189 * 0.5;
        float _1308 = _1199 * 0.5;
        float _1309 = _1209 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_525, _526, _527), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _3974 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _3985 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _3996 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_1334 + 1.0))) + _1339) * _1222;
        _1356 = _1189;
        _1357 = _1188;
        _1358 = _1187;
        _1359 = _1199;
        _1360 = _1198;
        _1361 = _1197;
        _1362 = _1209;
        _1363 = _1208;
        _1364 = _1207;
        _1365 = _1222;
        _1366 = _1221;
        _1367 = _1220;
        _1368 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1369 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
        _1370 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
    }
    else
    {
        _1356 = _1047;
        _1357 = _1047;
        _1358 = _1047;
        _1359 = _1047;
        _1360 = _1047;
        _1361 = _1047;
        _1362 = _1047;
        _1363 = _1047;
        _1364 = _1047;
        _1365 = _1047;
        _1366 = _1047;
        _1367 = _1047;
        _1368 = 0.0;
        _1369 = 0.0;
        _1370 = 0.0;
    }
    float _1380 = (cbModelParam._m0[1u].x * (_1368 - _1059)) + _1059;
    float _1381 = (cbModelParam._m0[1u].x * (_1369 - _1060)) + _1060;
    float _1382 = (cbModelParam._m0[1u].x * (_1370 - _1061)) + _1061;
    float _1403 = fma(_1382, cbSceneParam._m0[89u].z, fma(_1381, cbSceneParam._m0[89u].y, _1380 * cbSceneParam._m0[89u].x));
    float _1406 = fma(_1382, cbSceneParam._m0[90u].z, fma(_1381, cbSceneParam._m0[90u].y, _1380 * cbSceneParam._m0[90u].x));
    float _1409 = fma(_1382, cbSceneParam._m0[91u].z, fma(_1381, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1380));
    float _1424 = _683 * 0.5;
    float _1425 = _684 * 0.5;
    float _1426 = _685 * 0.5;
    float _1427 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1358, _1361, _1364, _1367));
    float _1430 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1357, _1360, _1363, _1366));
    float _1433 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1356, _1359, _1362, _1365));
    float _1467;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1440 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1046, _1050, _1053, _1056));
        float _1444 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1048, _1051, _1054, _1057));
        float _1448 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1049, _1052, _1055, _1058));
        float _1455 = dot(vec4(cbModelParam._m0[39u]), vec4(_1424, _1425, _1426, 1.0));
        _1467 = dot(vec3(isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)), isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1455) ? 0.0 : (isnan(0.0) ? _1455 : max(0.0, _1455))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1467 = 1.0;
    }
    float _1478;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1469 = dot(vec4(cbModelParam._m0[40u]), vec4(_1424, _1425, _1426, 1.0));
        _1478 = dot(vec3(isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)), isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1469) ? 0.0 : (isnan(0.0) ? _1469 : max(0.0, _1469))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1478 = 1.0;
    }
    float _1482 = (_1478 * cbModelParam._m0[1u].x) + (_1467 * (1.0 - cbModelParam._m0[1u].x));
    float _1492 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _528);
    float _1493 = isnan(_1492) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1492 : min(cbModelParam._m0[25u].z, _1492));
    float _1574;
    float _1576;
    float _1578;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1541 = fma(_744, cbModelParam._m0[13u].z, fma(_740, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _736)) + cbModelParam._m0[13u].w;
        float _1545 = fma(_744, cbModelParam._m0[14u].z, fma(_740, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _736)) + cbModelParam._m0[14u].w;
        float _1549 = fma(_744, cbModelParam._m0[15u].z, fma(_740, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _736)) + cbModelParam._m0[15u].w;
        float _1552 = fma(_685, cbModelParam._m0[13u].z, fma(_684, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _683));
        float _1555 = fma(_685, cbModelParam._m0[14u].z, fma(_684, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _683));
        float _1558 = fma(_685, cbModelParam._m0[15u].z, fma(_684, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _683));
        float _1586;
        if (_1552 > 0.0)
        {
            _1586 = abs((1.0 - _1541) / _1552);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1552 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1541 + 1.0) / _1552);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1586 = frontier_phi_16_14_ladder;
        }
        float _1759;
        if (_1555 > 0.0)
        {
            _1759 = abs((1.0 - _1545) / _1555);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1545 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1759 = frontier_phi_25_21_ladder;
        }
        float _2054;
        if (_1558 > 0.0)
        {
            _2054 = abs((1.0 - _1549) / _1558);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1549 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2054 = frontier_phi_37_32_ladder;
        }
        float _2056 = isnan(_1759) ? _1586 : (isnan(_1586) ? _1759 : min(_1586, _1759));
        float _2057 = isnan(_2054) ? _2056 : (isnan(_2056) ? _2054 : min(_2056, _2054));
        float _2061 = (_2057 * _1552) + _1541;
        float _2062 = (_2057 * _1555) + _1545;
        float _2063 = (_2057 * _1558) + _1549;
        float _2064 = _2057 * 9.9999997473787516355514526367188e-05;
        float _2066 = (-1.0) - _2064;
        float _2068 = _2064 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2063 > _2068) || ((_2063 < _2066) || ((_2062 > _2068) || ((_2062 < _2066) || ((_2061 < _2066) || (_2061 > _2068))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2208 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2063, cbModelParam._m0[9u].z, fma(_2062, cbModelParam._m0[9u].y, _2061 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2063, cbModelParam._m0[10u].z, fma(_2062, cbModelParam._m0[10u].y, _2061 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2063, cbModelParam._m0[11u].z, fma(_2062, cbModelParam._m0[11u].y, _2061 * cbModelParam._m0[11u].x))), _1493);
            frontier_phi_15_37_ladder = _2208.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2208.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2208.z * cbModelParam._m0[1u].y;
        }
        _1574 = frontier_phi_15_37_ladder_1;
        _1576 = frontier_phi_15_37_ladder;
        _1578 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1562 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_683, _684, _685), _1493);
        _1574 = _1562.x * cbModelParam._m0[1u].y;
        _1576 = _1562.y * cbModelParam._m0[1u].y;
        _1578 = _1562.z * cbModelParam._m0[1u].y;
    }
    float _1582 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _528);
    float _1583 = isnan(_1582) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1582 : min(cbModelParam._m0[25u].w, _1582));
    float _1676;
    float _1678;
    float _1680;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1640 = fma(_744, cbModelParam._m0[21u].z, fma(_740, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _736)) + cbModelParam._m0[21u].w;
        float _1644 = fma(_744, cbModelParam._m0[22u].z, fma(_740, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _736)) + cbModelParam._m0[22u].w;
        float _1648 = fma(_744, cbModelParam._m0[23u].z, fma(_740, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _736)) + cbModelParam._m0[23u].w;
        float _1651 = fma(_685, cbModelParam._m0[21u].z, fma(_684, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _683));
        float _1654 = fma(_685, cbModelParam._m0[22u].z, fma(_684, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _683));
        float _1657 = fma(_685, cbModelParam._m0[23u].z, fma(_684, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _683));
        float _1764;
        if (_1651 > 0.0)
        {
            _1764 = abs((1.0 - _1640) / _1651);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1640 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1764 = frontier_phi_27_23_ladder;
        }
        float _2081;
        if (_1654 > 0.0)
        {
            _2081 = abs((1.0 - _1644) / _1654);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1654 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1644 + 1.0) / _1654);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2081 = frontier_phi_39_34_ladder;
        }
        float _2408;
        if (_1657 > 0.0)
        {
            _2408 = abs((1.0 - _1648) / _1657);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1648 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2408 = frontier_phi_49_46_ladder;
        }
        float _2410 = isnan(_2081) ? _1764 : (isnan(_1764) ? _2081 : min(_1764, _2081));
        float _2411 = isnan(_2408) ? _2410 : (isnan(_2410) ? _2408 : min(_2410, _2408));
        float _2415 = (_2411 * _1651) + _1640;
        float _2416 = (_2411 * _1654) + _1644;
        float _2417 = (_2411 * _1657) + _1648;
        float _2418 = _2411 * 9.9999997473787516355514526367188e-05;
        float _2419 = (-1.0) - _2418;
        float _2421 = _2418 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2417 > _2421) || ((_2417 < _2419) || ((_2416 > _2421) || ((_2416 < _2419) || ((_2415 < _2419) || (_2415 > _2421))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2535 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2417, cbModelParam._m0[17u].z, fma(_2416, cbModelParam._m0[17u].y, _2415 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2417, cbModelParam._m0[18u].z, fma(_2416, cbModelParam._m0[18u].y, _2415 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2417, cbModelParam._m0[19u].z, fma(_2416, cbModelParam._m0[19u].y, _2415 * cbModelParam._m0[19u].x))), _1583);
            frontier_phi_24_49_ladder = _2535.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2535.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2535.x * cbModelParam._m0[1u].z;
        }
        _1676 = frontier_phi_24_49_ladder_2;
        _1678 = frontier_phi_24_49_ladder_1;
        _1680 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1660 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_683, _684, _685), _1583);
        _1676 = _1660.x * cbModelParam._m0[1u].z;
        _1678 = _1660.y * cbModelParam._m0[1u].z;
        _1680 = _1660.z * cbModelParam._m0[1u].z;
    }
    float _1692 = ((((1.0 - _704) * ((_691 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_704 * _691)) * _675;
    float _1693 = _1692 * ((cbModelParam._m0[1u].w * (_1676 - _1574)) + _1574);
    float _1694 = _1692 * ((cbModelParam._m0[1u].w * (_1678 - _1576)) + _1576);
    float _1695 = _1692 * ((cbModelParam._m0[1u].w * (_1680 - _1578)) + _1578);
    float _1698 = fma(_1695, cbSceneParam._m0[89u].z, fma(_1694, cbSceneParam._m0[89u].y, _1693 * cbSceneParam._m0[89u].x));
    float _1701 = fma(_1695, cbSceneParam._m0[90u].z, fma(_1694, cbSceneParam._m0[90u].y, _1693 * cbSceneParam._m0[90u].x));
    float _1704 = fma(_1695, cbSceneParam._m0[91u].z, fma(_1694, cbSceneParam._m0[91u].y, _1693 * cbSceneParam._m0[91u].x));
    float _1738 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1742 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1746 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1750 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1751 = _1738 / _1750;
    float _1752 = _1742 / _1750;
    float _1753 = _1746 / _1750;
    float _1900;
    float _1901;
    float _1902;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1780 = ((uint(_1753 > cbSceneParam._m0[59u].y) + uint(_1753 > cbSceneParam._m0[59u].x)) + uint(_1753 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1781 = _1780 + 43u;
        uint _1789 = _1780 + 44u;
        uint _1797 = _1780 + 45u;
        uint _1805 = _1780 + 46u;
        float _1816 = fma(_1750, cbSceneParam._m0[_1781].w, fma(_1746, cbSceneParam._m0[_1781].z, fma(_1742, cbSceneParam._m0[_1781].y, _1738 * cbSceneParam._m0[_1781].x)));
        float _1820 = fma(_1750, cbSceneParam._m0[_1789].w, fma(_1746, cbSceneParam._m0[_1789].z, fma(_1742, cbSceneParam._m0[_1789].y, _1738 * cbSceneParam._m0[_1789].x)));
        float _1828 = fma(_1750, cbSceneParam._m0[_1805].w, fma(_1746, cbSceneParam._m0[_1805].z, fma(_1742, cbSceneParam._m0[_1805].y, _1738 * cbSceneParam._m0[_1805].x)));
        float _1833 = cbSceneParam._m0[33u].z * _1828;
        float _1835 = cbSceneParam._m0[33u].w * _1828;
        float _1838 = fma(_1750, cbSceneParam._m0[_1797].w, fma(_1746, cbSceneParam._m0[_1797].z, fma(_1742, cbSceneParam._m0[_1797].y, _1738 * cbSceneParam._m0[_1797].x))) / _1828;
        float _1886 = (cbSceneParam._m0[33u].x - sqrt(((_1752 * _1752) + (_1751 * _1751)) + (_1753 * _1753))) * cbSceneParam._m0[33u].y;
        float _4122 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
        float _1893 = (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1833 + _1816) / _1828, (_1835 + _1820) / _1828), _1838), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1835 + _1816) / _1828, (_1820 - _1833) / _1828), _1838), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1816 - _1833) / _1828, (_1820 - _1835) / _1828), _1838), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1816 - _1835) / _1828, (_1833 + _1820) / _1828), _1838), 0.0)).x), vec4(0.25)));
        _1900 = 1.0 - (_1893 * cbSceneParam._m0[34u].x);
        _1901 = 1.0 - (_1893 * cbSceneParam._m0[34u].y);
        _1902 = 1.0 - (_1893 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1900 = 1.0;
        _1901 = 1.0;
        _1902 = 1.0;
    }
    float _1966;
    float _1968;
    float _1970;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1954 = fma(_1750, cbSceneParam._m0[63u].w, fma(_1746, cbSceneParam._m0[63u].z, fma(_1742, cbSceneParam._m0[63u].y, _1738 * cbSceneParam._m0[63u].x)));
        float _1955 = fma(_1750, cbSceneParam._m0[60u].w, fma(_1746, cbSceneParam._m0[60u].z, fma(_1742, cbSceneParam._m0[60u].y, _1738 * cbSceneParam._m0[60u].x))) / _1954;
        float _1956 = fma(_1750, cbSceneParam._m0[61u].w, fma(_1746, cbSceneParam._m0[61u].z, fma(_1742, cbSceneParam._m0[61u].y, _1738 * cbSceneParam._m0[61u].x))) / _1954;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1955 >= cbSceneParam._m0[64u].x) && (_1956 >= cbSceneParam._m0[64u].y)) && (_1955 <= cbSceneParam._m0[64u].z)) && (_1956 <= cbSceneParam._m0[64u].w))
        {
            float _2094 = fma(_1750, cbSceneParam._m0[62u].w, fma(_1746, cbSceneParam._m0[62u].z, fma(_1742, cbSceneParam._m0[62u].y, _1738 * cbSceneParam._m0[62u].x))) / _1954;
            float _2098 = isnan(cbSceneParam._m0[41u].w) ? _2094 : (isnan(_2094) ? cbSceneParam._m0[41u].w : max(_2094, cbSceneParam._m0[41u].w));
            float _2141 = (cbSceneParam._m0[33u].x - sqrt(((_1752 * _1752) + (_1751 * _1751)) + (_1753 * _1753))) * cbSceneParam._m0[33u].y;
            float _4138 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
            float _2148 = (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1955, cbSceneParam._m0[33u].w + _1956), _2098), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1955, _1956 - cbSceneParam._m0[33u].z), _2098), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1955 - cbSceneParam._m0[33u].z, _1956 - cbSceneParam._m0[33u].w), _2098), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1955 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1956), _2098), 0.0)).x), vec4(0.25)));
            float _2152 = 1.0 - (_2148 * cbSceneParam._m0[34u].x);
            float _2153 = 1.0 - (_2148 * cbSceneParam._m0[34u].y);
            float _2154 = 1.0 - (_2148 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2153) ? _1901 : (isnan(_1901) ? _2153 : min(_1901, _2153));
            frontier_phi_36_35_ladder_1 = isnan(_2154) ? _1902 : (isnan(_1902) ? _2154 : min(_1902, _2154));
            frontier_phi_36_35_ladder_2 = isnan(_2152) ? _1900 : (isnan(_1900) ? _2152 : min(_1900, _2152));
        }
        else
        {
            frontier_phi_36_35_ladder = _1901;
            frontier_phi_36_35_ladder_1 = _1902;
            frontier_phi_36_35_ladder_2 = _1900;
        }
        _1966 = frontier_phi_36_35_ladder_2;
        _1968 = frontier_phi_36_35_ladder;
        _1970 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1966 = _1900;
        _1968 = _1901;
        _1970 = _1902;
    }
    uvec4 _1975 = floatBitsToUint(cbInstanceData._m0[_650 + 5u]);
    uint _1977 = _1975.x * 14u;
    uint _1978 = _1977 + 13u;
    float _1985 = _675 + (-1.0);
    float _1990 = (cbLight._m0[_1978].x * _1985) + 1.0;
    float _1991 = (cbLight._m0[_1978].y * _1985) + 1.0;
    float _1992 = (cbLight._m0[_1978].z * _1985) + 1.0;
    float _1993 = (cbLight._m0[_1978].w * _1985) + 1.0;
    uint _1994 = _1977 + 5u;
    float _2000 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
    uint _2004 = _1977 + 4u;
    float _2013 = isnan(1.0) ? _1990 : (isnan(_1990) ? 1.0 : min(_1990, 1.0));
    uint _2017 = _1977 | 1u;
    float _2028 = dot(vec3(cbLight._m0[_1977].xyz), vec3(_525, _526, _527));
    float _2031 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_525, _526, _527));
    float _4174 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _4185 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2036 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * 0.3183098733425140380859375;
    float _2038 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * 0.3183098733425140380859375;
    float _2045 = ((cbLight._m0[_1994].x * _2000) * _2038) + (((cbLight._m0[_2004].x * _1966) * _2013) * _2036);
    float _2046 = ((_2000 * cbLight._m0[_1994].y) * _2038) + (((cbLight._m0[_2004].y * _1968) * _2013) * _2036);
    float _2047 = ((_2000 * cbLight._m0[_1994].z) * _2038) + (((cbLight._m0[_2004].z * _1970) * _2013) * _2036);
    uvec4 _2051 = floatBitsToUint(cbLight._m0[_1977 + 12u]);
    bool _2053 = _2051.x == 0u;
    float _2155;
    float _2157;
    float _2159;
    if (_2053)
    {
        _2155 = _2045;
        _2157 = _2046;
        _2159 = _2047;
    }
    else
    {
        uint _2163 = _1977 + 6u;
        float _2179 = (dot(vec3(cbLight._m0[_1977 + 2u].xyz), vec3(_525, _526, _527)) * 0.5) + 0.5;
        float _2180 = _2179 * _2179;
        float _4196 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2181 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _2182 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
        _2155 = (((cbLight._m0[_2163].x * 0.3183098733425140380859375) * _2181) * _2182) + _2045;
        _2157 = (((cbLight._m0[_2163].y * 0.3183098733425140380859375) * _2181) * _2182) + _2046;
        _2159 = (((cbLight._m0[_2163].z * 0.3183098733425140380859375) * _2181) * _2182) + _2047;
    }
    bool _2162 = _2051.y == 0u;
    float _2217;
    float _2219;
    float _2221;
    if (_2162)
    {
        _2217 = _2155;
        _2219 = _2157;
        _2221 = _2159;
    }
    else
    {
        uint _2379 = _1977 + 7u;
        float _2395 = (dot(vec3(cbLight._m0[_1977 + 3u].xyz), vec3(_525, _526, _527)) * 0.5) + 0.5;
        float _2396 = _2395 * _2395;
        float _4212 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2397 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _2398 = isnan(1.0) ? _1993 : (isnan(_1993) ? 1.0 : min(_1993, 1.0));
        _2217 = (((cbLight._m0[_2379].x * 0.3183098733425140380859375) * _2397) * _2398) + _2155;
        _2219 = (((cbLight._m0[_2379].y * 0.3183098733425140380859375) * _2397) * _2398) + _2157;
        _2221 = (((cbLight._m0[_2379].z * 0.3183098733425140380859375) * _2397) * _2398) + _2159;
    }
    uint _2224 = _1977 + 8u;
    float _2237 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1977].w)) * _528) * 0.949999988079071044921875);
    float _2238 = _2237 * _2237;
    float _2239 = cbLight._m0[_1977].x + _604;
    float _2240 = cbLight._m0[_1977].y + _605;
    float _2241 = cbLight._m0[_1977].z + _606;
    float _2245 = inversesqrt(dot(vec3(_2239, _2240, _2241), vec3(_2239, _2240, _2241)));
    float _2246 = _2245 * _2239;
    float _2247 = _2245 * _2240;
    float _2248 = _2245 * _2241;
    float _2249 = dot(vec3(_525, _526, _527), vec3(cbLight._m0[_1977].xyz));
    float _4228 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2252 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _4239 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _2253 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _2254 = dot(vec3(_525, _526, _527), vec3(_2246, _2247, _2248));
    float _4250 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2257 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _2258 = dot(vec3(cbLight._m0[_1977].xyz), vec3(_2246, _2247, _2248));
    float _4261 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2262 = _2238 * _2238;
    float _2266 = ((_2257 * _2257) * (_2262 + (-1.0))) + 1.0;
    float _2277 = (exp2(log2(1.0 - (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2278 = 1.0 - _2238;
    float _2289 = (0.5 / (((_2253 * ((_2252 * _2278) + _2238)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2278) + _2238) * _2252))) * _2252;
    float _4272 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2291 = (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2262 / ((_2266 * _2266) * 3.141590118408203125));
    uint _2305 = _1977 + 9u;
    float _2316 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2017].w)) * _528) * 0.949999988079071044921875);
    float _2317 = _2316 * _2316;
    float _2318 = cbLight._m0[_2017].x + _604;
    float _2319 = cbLight._m0[_2017].y + _605;
    float _2320 = cbLight._m0[_2017].z + _606;
    float _2324 = inversesqrt(dot(vec3(_2318, _2319, _2320), vec3(_2318, _2319, _2320)));
    float _2325 = _2324 * _2318;
    float _2326 = _2324 * _2319;
    float _2327 = _2324 * _2320;
    float _2328 = dot(vec3(_525, _526, _527), vec3(cbLight._m0[_2017].xyz));
    float _4283 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2331 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _2332 = dot(vec3(_525, _526, _527), vec3(_2325, _2326, _2327));
    float _4294 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2335 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _2336 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_2325, _2326, _2327));
    float _4305 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2340 = _2317 * _2317;
    float _2344 = ((_2335 * _2335) * (_2340 + (-1.0))) + 1.0;
    float _2353 = (exp2(log2(1.0 - (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2354 = 1.0 - _2317;
    float _2364 = (0.5 / (((_2253 * ((_2331 * _2354) + _2317)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2354) + _2317) * _2331))) * _2331;
    float _4316 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2366 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2340 / ((_2344 * _2344) * 3.141590118408203125));
    float _2376 = (((_2353 * cbLight._m0[_2305].x) * _2366) * _2000) + ((((cbLight._m0[_2224].x * _1966) * _2277) * _2291) * _2013);
    float _2377 = (((_2353 * cbLight._m0[_2305].y) * _2366) * _2000) + ((((cbLight._m0[_2224].y * _1968) * _2277) * _2291) * _2013);
    float _2378 = (((_2353 * cbLight._m0[_2305].z) * _2366) * _2000) + ((((cbLight._m0[_2224].z * _1970) * _2277) * _2291) * _2013);
    float _2434;
    float _2436;
    float _2438;
    if (_2053)
    {
        _2434 = _2376;
        _2436 = _2377;
        _2438 = _2378;
    }
    else
    {
        uint _2440 = _1977 + 2u;
        uint _2444 = _1977 + 10u;
        float _2458 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2440].w)) * _528) * 0.949999988079071044921875);
        float _2459 = _2458 * _2458;
        float _2460 = cbLight._m0[_2440].x + _604;
        float _2461 = cbLight._m0[_2440].y + _605;
        float _2462 = cbLight._m0[_2440].z + _606;
        float _2466 = inversesqrt(dot(vec3(_2460, _2461, _2462), vec3(_2460, _2461, _2462)));
        float _2467 = _2466 * _2460;
        float _2468 = _2466 * _2461;
        float _2469 = _2466 * _2462;
        float _2470 = dot(vec3(_525, _526, _527), vec3(cbLight._m0[_2440].xyz));
        float _4327 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2473 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _2474 = dot(vec3(_525, _526, _527), vec3(_2467, _2468, _2469));
        float _4338 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2477 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _2478 = dot(vec3(cbLight._m0[_2440].xyz), vec3(_2467, _2468, _2469));
        float _4349 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2482 = _2459 * _2459;
        float _2486 = ((_2477 * _2477) * (_2482 + (-1.0))) + 1.0;
        float _2495 = (exp2(log2(1.0 - (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2496 = 1.0 - _2459;
        float _2506 = (0.5 / (((_2253 * ((_2473 * _2496) + _2459)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2496) + _2459) * _2473))) * _2473;
        float _4360 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2508 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2482 / ((_2486 * _2486) * 3.141590118408203125));
        float _2509 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
        _2434 = (((_2495 * cbLight._m0[_2444].x) * _2508) * _2509) + _2376;
        _2436 = (((_2495 * cbLight._m0[_2444].y) * _2508) * _2509) + _2377;
        _2438 = (((_2495 * cbLight._m0[_2444].z) * _2508) * _2509) + _2378;
    }
    float _2540;
    float _2542;
    float _2544;
    if (_2162)
    {
        _2540 = _2434;
        _2542 = _2436;
        _2544 = _2438;
    }
    else
    {
        uint _2551 = _1977 + 3u;
        uint _2555 = _1977 + 11u;
        float _2569 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2551].w)) * _528) * 0.949999988079071044921875);
        float _2570 = _2569 * _2569;
        float _2571 = cbLight._m0[_2551].x + _604;
        float _2572 = cbLight._m0[_2551].y + _605;
        float _2573 = cbLight._m0[_2551].z + _606;
        float _2577 = inversesqrt(dot(vec3(_2571, _2572, _2573), vec3(_2571, _2572, _2573)));
        float _2578 = _2577 * _2571;
        float _2579 = _2577 * _2572;
        float _2580 = _2577 * _2573;
        float _2581 = dot(vec3(_525, _526, _527), vec3(cbLight._m0[_2551].xyz));
        float _4376 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2584 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _2585 = dot(vec3(_525, _526, _527), vec3(_2578, _2579, _2580));
        float _4387 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2588 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _2589 = dot(vec3(cbLight._m0[_2551].xyz), vec3(_2578, _2579, _2580));
        float _4398 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2593 = _2570 * _2570;
        float _2597 = ((_2588 * _2588) * (_2593 + (-1.0))) + 1.0;
        float _2606 = (exp2(log2(1.0 - (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2607 = 1.0 - _2570;
        float _2617 = (0.5 / (((_2253 * ((_2584 * _2607) + _2570)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2607) + _2570) * _2584))) * _2584;
        float _4409 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2619 = (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_2593 / ((_2597 * _2597) * 3.141590118408203125));
        float _2620 = isnan(1.0) ? _1993 : (isnan(_1993) ? 1.0 : min(_1993, 1.0));
        _2540 = (((_2606 * cbLight._m0[_2555].x) * _2619) * _2620) + _2434;
        _2542 = (((_2606 * cbLight._m0[_2555].y) * _2619) * _2620) + _2436;
        _2544 = (((_2606 * cbLight._m0[_2555].z) * _2619) * _2620) + _2438;
    }
    float _2685;
    float _2687;
    float _2689;
    float _2691;
    float _2693;
    float _2695;
    if (_1975.y == 0u)
    {
        uvec4 _2641 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2642 = _2641.x;
        uint _2653 = uint((float(_2641.y) * floor(float(uint(cbSceneParam._m0[85u].y * _613) / _2642))) + floor(float(uint(cbSceneParam._m0[85u].x * _612) / _2642)));
        float _2663 = (log2(_1753 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2664 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        uint _2667 = uint(isnan(14.0) ? _2664 : (isnan(_2664) ? 14.0 : min(_2664, 14.0)));
        uvec4 _2672 = texelFetch(g_lightClusterGridBuffer, int(((_2667 << 2u) + (_2653 << 6u)) >> 2u));
        uint _2673 = _2672.x;
        uint _2674 = _2641.z;
        float _2752;
        float _2754;
        float _2756;
        float _2758;
        float _2760;
        float _2762;
        if (((((1u << ((_2674 >> 4u) & 15u)) + 4294967295u) & _2673) == 0u) || ((_2674 & 240u) == 0u))
        {
            _2752 = 0.0;
            _2754 = 0.0;
            _2756 = 0.0;
            _2758 = 0.0;
            _2760 = 0.0;
            _2762 = 0.0;
        }
        else
        {
            float _2753;
            float _2755;
            float _2757;
            float _2759;
            float _2761;
            float _2763;
            float _2896 = 0.0;
            float _2897 = 0.0;
            float _2898 = 0.0;
            float _2899 = 0.0;
            float _2900 = 0.0;
            float _2901 = 0.0;
            uint _2902 = 0u;
            uint _2911;
            bool _2912;
            for (;;)
            {
                _2911 = texelFetch(g_lightClassification, int((((_2667 << 5u) + (_2653 << 9u)) + (_2902 << 2u)) >> 2u)).x;
                _2912 = _2911 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2912)
                {
                    frontier_phi_68_pred = _2901;
                    frontier_phi_68_pred_1 = _2900;
                    frontier_phi_68_pred_2 = _2899;
                    frontier_phi_68_pred_3 = _2897;
                    frontier_phi_68_pred_4 = _2896;
                    frontier_phi_68_pred_5 = _2898;
                }
                else
                {
                    float _3020;
                    float _3021;
                    float _3022;
                    float _3023;
                    float _3024;
                    float _3025;
                    uint _3026;
                    _3020 = _2896;
                    _3021 = _2897;
                    _3022 = _2898;
                    _3023 = _2899;
                    _3024 = _2900;
                    _3025 = _2901;
                    _3026 = _2911;
                    float _2952;
                    float _2953;
                    float _2954;
                    float _2955;
                    float _2956;
                    float _2957;
                    for (;;)
                    {
                        uint _3030 = uint(findLSB(_3026)) + (_2902 << 5u);
                        uint _3027 = (_3026 + 4294967295u) & _3026;
                        uint _3032 = _3030 * 48u;
                        vec4 _3046 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3032)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 3u)).x));
                        uint _3052 = (_3030 * 48u) + 4u;
                        vec4 _3065 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3052)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 3u)).x));
                        uint _3071 = (_3030 * 48u) + 8u;
                        vec3 _3082 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3071)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 2u)).x));
                        float _3086 = _3046.x - _1751;
                        float _3087 = _3046.y - _1752;
                        float _3088 = _3046.z - _1753;
                        float _3089 = dot(vec3(_3086, _3087, _3088), vec3(_3086, _3087, _3088));
                        float _3092 = inversesqrt(_3089);
                        float _3093 = _3092 * _3086;
                        float _3094 = _3092 * _3087;
                        float _3095 = _3092 * _3088;
                        float _3096 = dot(vec3(_631, _634, _637), vec3(_3093, _3094, _3095));
                        float _3101 = 1.0 - (_3089 * _3046.w);
                        float _4435 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                        float _3102 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                        float _3103 = sqrt(_3089) * _3065.w;
                        float _3106 = 1.39999997615814208984375 / (_3103 + 1.39999997615814208984375);
                        float _3107 = _3106 * _3106;
                        float _3110 = ((1.0 - _3107) * _3096) + _3107;
                        float _3113 = _3103 * _3103;
                        float _3117 = ((isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0))) * _3102) / ((_3113 * 0.699999988079071044921875) + 1.0);
                        float _3121 = (-0.0) - _1751;
                        float _3122 = (-0.0) - _1752;
                        float _3123 = (-0.0) - _1753;
                        float _3127 = inversesqrt(dot(vec3(_3121, _3122, _3123), vec3(_3121, _3122, _3123)));
                        float _3128 = _3127 * _3121;
                        float _3129 = _3127 * _3122;
                        float _3130 = _3127 * _3123;
                        float _3137 = exp2(log2(1.0 / ((_3113 * 3.5) + 5.0)) * 0.25);
                        float _3138 = 1.0 - _691;
                        float _3145 = sqrt(1.0 - ((1.0 - (_3138 * _3138)) * (1.0 - (_3137 * _3137))));
                        float _3146 = _3145 * _3145;
                        float _3147 = _3146 * _3146;
                        float _3148 = _3128 + _3093;
                        float _3149 = _3129 + _3094;
                        float _3150 = _3130 + _3095;
                        float _3154 = inversesqrt(dot(vec3(_3148, _3149, _3150), vec3(_3148, _3149, _3150)));
                        float _3158 = dot(vec3(_631, _634, _637), vec3(_3128, _3129, _3130));
                        float _4451 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                        float _3161 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                        float _3162 = dot(vec3(_631, _634, _637), vec3(_3154 * _3148, _3154 * _3149, _3154 * _3150));
                        float _4462 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                        float _3165 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
                        float _3169 = ((_3165 * _3165) * (_3147 + (-1.0))) + 1.0;
                        float _3170 = _3106 * _3146;
                        float _3171 = _3170 * _3170;
                        float _3174 = ((1.0 - _3171) * _3096) + _3171;
                        float _4473 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                        float _3175 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                        float _3176 = 1.0 - _3146;
                        float _3186 = (0.5 / (((_3175 * ((_3161 * _3176) + _3146)) + 9.9999999392252902907785028219223e-09) + (((_3175 * _3176) + _3146) * _3161))) * _3175;
                        float _4484 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                        float _3197 = (((_3147 * 3.1415927410125732421875) * (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0)))) / ((_3169 * _3169) * ((_3113 * 2.1991131305694580078125) + 3.141590118408203125))) * _3102;
                        _2955 = (_3117 * _3065.x) + _3023;
                        _2956 = (_3117 * _3065.y) + _3024;
                        _2957 = (_3117 * _3065.z) + _3025;
                        _2952 = (_3197 * _3082.x) + _3020;
                        _2953 = (_3197 * _3082.y) + _3021;
                        _2954 = (_3197 * _3082.z) + _3022;
                        if (_3027 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3020 = _2952;
                            _3021 = _2953;
                            _3022 = _2954;
                            _3023 = _2955;
                            _3024 = _2956;
                            _3025 = _2957;
                            _3026 = _3027;
                        }
                    }
                    frontier_phi_68_pred = _2957;
                    frontier_phi_68_pred_1 = _2956;
                    frontier_phi_68_pred_2 = _2955;
                    frontier_phi_68_pred_3 = _2953;
                    frontier_phi_68_pred_4 = _2952;
                    frontier_phi_68_pred_5 = _2954;
                }
                _2763 = frontier_phi_68_pred;
                _2761 = frontier_phi_68_pred_1;
                _2759 = frontier_phi_68_pred_2;
                _2755 = frontier_phi_68_pred_3;
                _2753 = frontier_phi_68_pred_4;
                _2757 = frontier_phi_68_pred_5;
                uint _2903 = _2902 + 1u;
                if (_2903 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2896 = _2753;
                    _2897 = _2755;
                    _2898 = _2757;
                    _2899 = _2759;
                    _2900 = _2761;
                    _2901 = _2763;
                    _2902 = _2903;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2752 = _2753;
            _2754 = _2755;
            _2756 = _2757;
            _2758 = _2759;
            _2760 = _2761;
            _2762 = _2763;
        }
        uvec4 _2766 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2767 = _2766.z;
        uint _2769 = (_2767 >> 8u) & 15u;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        float _2872;
        float _2874;
        if (((4294967295u << _2769) & _2673) == 0u)
        {
            _2864 = _2752;
            _2866 = _2754;
            _2868 = _2756;
            _2870 = _2758;
            _2872 = _2760;
            _2874 = _2762;
        }
        else
        {
            float _2889 = inversesqrt(dot(vec3(_1751, _1752, _1753), vec3(_1751, _1752, _1753)));
            float _2890 = _2889 * _1751;
            float _2891 = _2889 * _1752;
            float _2892 = _2889 * _1753;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2769 < ((_2767 >> 12u) & 15u))
            {
                float _2865;
                float _2867;
                float _2869;
                float _2871;
                float _2873;
                float _2875;
                float _3003 = _2752;
                float _3004 = _2754;
                float _3005 = _2756;
                float _3006 = _2758;
                float _3007 = _2760;
                float _3008 = _2762;
                uint _3009 = _2769;
                uint _3018;
                bool _3019;
                for (;;)
                {
                    _3018 = texelFetch(g_lightClassification, int((((_2667 << 5u) + (_2653 << 9u)) + (_3009 << 2u)) >> 2u)).x;
                    _3019 = _3018 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3019)
                    {
                        frontier_phi_74_pred = _3005;
                        frontier_phi_74_pred_1 = _3004;
                        frontier_phi_74_pred_2 = _3003;
                        frontier_phi_74_pred_3 = _3008;
                        frontier_phi_74_pred_4 = _3007;
                        frontier_phi_74_pred_5 = _3006;
                    }
                    else
                    {
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3206;
                        float _3207;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3215 = _3003;
                        float _3216 = _3004;
                        float _3217 = _3005;
                        float _3218 = _3006;
                        float _3219 = _3007;
                        float _3220 = _3008;
                        uint _3221 = _3018;
                        uint _3222;
                        vec4 _3247;
                        float _3248;
                        vec4 _3263;
                        vec3 _3275;
                        vec4 _3291;
                        vec4 _3307;
                        float _3354;
                        bool _3355;
                        for (;;)
                        {
                            uint _3232 = ((_3009 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3221));
                            _3222 = (_3221 + 4294967295u) & _3221;
                            uint _3234 = _3232 * 40u;
                            _3247 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 3u)).x));
                            _3248 = _3247.w;
                            uint _3250 = (_3232 * 40u) + 4u;
                            _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            uint _3265 = (_3232 * 40u) + 8u;
                            _3275 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x));
                            uint _3278 = (_3232 * 40u) + 16u;
                            _3291 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 3u)).x));
                            uint _3294 = (_3232 * 40u) + 20u;
                            _3307 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 3u)).x));
                            uint _3310 = (_3232 * 40u) + 24u;
                            vec4 _3323 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 3u)).x));
                            uint _3329 = (_3232 * 40u) + 28u;
                            vec4 _3342 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3329)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 3u)).x));
                            _3354 = fma(_1753, _3342.z, fma(_1752, _3342.y, _3342.x * _1751)) + _3342.w;
                            _3355 = !((fma(_1753, _3323.z, fma(_1752, _3323.y, _3323.x * _1751)) + _3323.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3355)
                            {
                                float _3382 = _3247.x - _1751;
                                float _3383 = _3247.y - _1752;
                                float _3384 = _3247.z - _1753;
                                float _3385 = dot(vec3(_3382, _3383, _3384), vec3(_3382, _3383, _3384));
                                float _3388 = inversesqrt(_3385);
                                float _3389 = _3388 * _3382;
                                float _3390 = _3388 * _3383;
                                float _3391 = _3388 * _3384;
                                float _3395 = 1.0 - (_3385 / (_3248 * _3248));
                                float _4495 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                                float _3396 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                                float _3400 = sqrt(_3385) * _3263.w;
                                float _3402 = 1.39999997615814208984375 / (_3400 + 1.39999997615814208984375);
                                float _3403 = _3402 * _3402;
                                float _3406 = ((1.0 - _3403) * dot(vec3(_3389, _3390, _3391), vec3(_631, _634, _637))) + _3403;
                                float _3409 = _3400 * _3400;
                                float _3413 = (fma(_1753, _3291.z, fma(_1752, _3291.y, _3291.x * _1751)) + _3291.w) / _3354;
                                float _3414 = (fma(_1753, _3307.z, fma(_1752, _3307.y, _3307.x * _1751)) + _3307.w) / _3354;
                                float _3418 = 1.0 - dot(vec2(_3413, _3414), vec2(_3413, _3414));
                                float _4511 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                                float _3419 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                                float _3420 = _3419 * (((isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0))) * _3396) / ((_3409 * 0.699999988079071044921875) + 1.0));
                                float _3432 = exp2(log2(1.0 / ((_3409 * 3.5) + 5.0)) * 0.25);
                                float _3433 = 1.0 - _691;
                                float _3440 = sqrt(1.0 - ((1.0 - (_3433 * _3433)) * (1.0 - (_3432 * _3432))));
                                float _3441 = _3440 * _3440;
                                float _3442 = _3441 * _3441;
                                float _3443 = _3389 - _2890;
                                float _3444 = _3390 - _2891;
                                float _3445 = _3391 - _2892;
                                float _3449 = inversesqrt(dot(vec3(_3443, _3444, _3445), vec3(_3443, _3444, _3445)));
                                float _3453 = dot(vec3(_631, _634, _637), vec3((-0.0) - _2890, (-0.0) - _2891, (-0.0) - _2892));
                                float _4522 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3456 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
                                float _3457 = dot(vec3(_631, _634, _637), vec3(_3449 * _3443, _3449 * _3444, _3449 * _3445));
                                float _4533 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                                float _3460 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                                float _3464 = ((_3460 * _3460) * (_3442 + (-1.0))) + 1.0;
                                float _3465 = _3402 * _3441;
                                float _3466 = _3465 * _3465;
                                float _3472 = ((1.0 - _3466) * dot(vec3(_631, _634, _637), vec3(_3389, _3390, _3391))) + _3466;
                                float _4544 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                                float _3473 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                                float _3474 = 1.0 - _3441;
                                float _3484 = (0.5 / (((_3473 * ((_3456 * _3474) + _3441)) + 9.9999999392252902907785028219223e-09) + (((_3473 * _3474) + _3441) * _3456))) * _3473;
                                float _4555 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                                float _3494 = (_3419 * _3396) * (((_3442 * 3.1415927410125732421875) * (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0)))) / ((_3464 * _3464) * ((_3409 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3494 * _3275.z;
                                frontier_phi_80_pred_1 = _3494 * _3275.y;
                                frontier_phi_80_pred_2 = _3494 * _3275.x;
                                frontier_phi_80_pred_3 = _3420 * _3263.z;
                                frontier_phi_80_pred_4 = _3420 * _3263.y;
                                frontier_phi_80_pred_5 = _3420 * _3263.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3500 = frontier_phi_80_pred;
                            _3499 = frontier_phi_80_pred_1;
                            _3498 = frontier_phi_80_pred_2;
                            _3503 = frontier_phi_80_pred_3;
                            _3502 = frontier_phi_80_pred_4;
                            _3501 = frontier_phi_80_pred_5;
                            _3205 = _3501 + _3218;
                            _3206 = _3502 + _3219;
                            _3207 = _3503 + _3220;
                            _3202 = _3498 + _3215;
                            _3203 = _3499 + _3216;
                            _3204 = _3500 + _3217;
                            if (_3222 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3215 = _3202;
                                _3216 = _3203;
                                _3217 = _3204;
                                _3218 = _3205;
                                _3219 = _3206;
                                _3220 = _3207;
                                _3221 = _3222;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3204;
                        frontier_phi_74_pred_1 = _3203;
                        frontier_phi_74_pred_2 = _3202;
                        frontier_phi_74_pred_3 = _3207;
                        frontier_phi_74_pred_4 = _3206;
                        frontier_phi_74_pred_5 = _3205;
                    }
                    _2869 = frontier_phi_74_pred;
                    _2867 = frontier_phi_74_pred_1;
                    _2865 = frontier_phi_74_pred_2;
                    _2875 = frontier_phi_74_pred_3;
                    _2873 = frontier_phi_74_pred_4;
                    _2871 = frontier_phi_74_pred_5;
                    uint _3010 = _3009 + 1u;
                    if (_3010 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3003 = _2865;
                        _3004 = _2867;
                        _3005 = _2869;
                        _3006 = _2871;
                        _3007 = _2873;
                        _3008 = _2875;
                        _3009 = _3010;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2873;
                frontier_phi_62_63_ladder_1 = _2871;
                frontier_phi_62_63_ladder_2 = _2869;
                frontier_phi_62_63_ladder_3 = _2875;
                frontier_phi_62_63_ladder_4 = _2867;
                frontier_phi_62_63_ladder_5 = _2865;
            }
            else
            {
                frontier_phi_62_63_ladder = _2760;
                frontier_phi_62_63_ladder_1 = _2758;
                frontier_phi_62_63_ladder_2 = _2756;
                frontier_phi_62_63_ladder_3 = _2762;
                frontier_phi_62_63_ladder_4 = _2754;
                frontier_phi_62_63_ladder_5 = _2752;
            }
            _2864 = frontier_phi_62_63_ladder_5;
            _2866 = frontier_phi_62_63_ladder_4;
            _2868 = frontier_phi_62_63_ladder_2;
            _2870 = frontier_phi_62_63_ladder_1;
            _2872 = frontier_phi_62_63_ladder;
            _2874 = frontier_phi_62_63_ladder_3;
        }
        float _2879 = isnan(1.0) ? _675 : (isnan(_675) ? 1.0 : min(_675, 1.0));
        _2685 = (_2879 * _2870) + _2217;
        _2687 = (_2879 * _2872) + _2219;
        _2689 = (_2879 * _2874) + _2221;
        _2691 = ((_2864 * 0.039999999105930328369140625) * _2879) + _2540;
        _2693 = ((_2866 * 0.039999999105930328369140625) * _2879) + _2542;
        _2695 = ((_2868 * 0.039999999105930328369140625) * _2879) + _2544;
    }
    else
    {
        _2685 = _2217;
        _2687 = _2219;
        _2689 = _2221;
        _2691 = _2540;
        _2693 = _2542;
        _2695 = _2544;
    }
    float _4571 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _4582 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _4593 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    uint _2715 = _650 + 6u;
    float _2723 = _612 / cbSceneParam._m0[86u].x;
    float _2724 = _613 / cbSceneParam._m0[86u].y;
    vec4 _2738 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2723, _2724, (log2((isnan(cbSceneParam._m0[77u].w) ? _547 : (isnan(_547) ? cbSceneParam._m0[77u].w : min(_547, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2740 = _2738.x;
    float _2741 = _2738.y;
    float _2742 = _2738.z;
    float _2743 = _2738.w;
    float _2814;
    float _2816;
    float _2818;
    float _2820;
    if (_547 > cbSceneParam._m0[78u].w)
    {
        float _2777 = isnan(_547) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _547 : min(cbSceneParam._m0[80u].w, _547));
        float _2778 = _2777 / _547;
        float _2789 = _2778 * _597;
        float _2790 = _598 * _2778;
        float _2791 = (-0.0) - _2790;
        float _2792 = _2778 * _599;
        float _2794 = (cbSceneParam._m0[77u].w * _2791) / _2777;
        float _2795 = _2794 + cbSceneParam._m0[79u].w;
        float _2796 = cbSceneParam._m0[79u].w - _2790;
        float _2802 = sqrt(((_2789 * _2789) + (_2790 * _2790)) + (_2792 * _2792));
        float _2805 = (1.0 - (cbSceneParam._m0[77u].w / _2777)) * _2802;
        float _2810 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2812 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2965;
        if (abs((_2791 - _2794) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2965 = ((((_2795 > 0.0) ? exp2(_2810 * _2795) : (2.0 - exp2(_2812 * _2795))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2805;
        }
        else
        {
            float _2925 = 1.0 / cbSceneParam._m0[80u].x;
            float _2926 = isnan(_2796) ? _2795 : (isnan(_2795) ? _2796 : max(_2795, _2796));
            float _2927 = isnan(_2796) ? _2795 : (isnan(_2795) ? _2796 : min(_2795, _2796));
            float _2936 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : min(_2926, 0.0));
            float _2937 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : min(_2927, 0.0));
            _2965 = ((abs(_2802 / _2791) * cbSceneParam._m0[80u].y) * ((((_2936 - _2937) * 2.0) - ((exp2(_2810 * (isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0)))) - exp2(_2810 * (isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0))))) * _2925)) - ((exp2(_2812 * _2936) - exp2(_2812 * _2937)) * _2925))) + (_2805 * cbSceneParam._m0[80u].z);
        }
        vec4 _2967 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2723, _2724, 1.0), 0.0);
        float _2976 = exp2((_2965 * (-1.44269502162933349609375)) * (1.0 - _2967.w));
        float _2977 = log2(_2976);
        float _2993 = log2(_2743);
        _2814 = (exp2(_2993 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2977 * cbSceneParam._m0[78u].x)) * _2967.x) / cbSceneParam._m0[78u].x)) + _2740;
        _2816 = (exp2(_2993 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2977 * cbSceneParam._m0[78u].y)) * _2967.y) / cbSceneParam._m0[78u].y)) + _2741;
        _2818 = (exp2(_2993 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2977 * cbSceneParam._m0[78u].z)) * _2967.z) / cbSceneParam._m0[78u].z)) + _2742;
        _2820 = _2976 * _2743;
    }
    else
    {
        _2814 = _2740;
        _2816 = _2741;
        _2818 = _2742;
        _2820 = _2743;
    }
    float _2832 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2833 = _2832 == 3.0;
    float _2834 = log2(_2820);
    float _2841 = exp2(_2834 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * (_2685 + ((isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))) * _675))) + ((_2691 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _1482)) * cbPerFrame._m0[3u].x));
    float _2842 = exp2(_2834 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_2687 + ((isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))) * _675))) + ((_2693 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _1482)) * cbPerFrame._m0[3u].x));
    float _2843 = exp2(_2834 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2689 + ((isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))) * _675))) + ((_2695 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _1482)) * cbPerFrame._m0[3u].x));
    float _2852 = (_2832 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2852 * (_2833 ? _2841 : (_2841 + (cbSceneParam._m0[72u].w * _2814)));
    SV_Target.y = _2852 * (_2833 ? _2842 : (_2842 + (cbSceneParam._m0[72u].w * _2816)));
    SV_Target.z = _2852 * (_2833 ? _2843 : (_2843 + (cbSceneParam._m0[72u].w * _2818)));
    SV_Target.w = cbInstanceData._m0[_2715].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2715].w;
}


