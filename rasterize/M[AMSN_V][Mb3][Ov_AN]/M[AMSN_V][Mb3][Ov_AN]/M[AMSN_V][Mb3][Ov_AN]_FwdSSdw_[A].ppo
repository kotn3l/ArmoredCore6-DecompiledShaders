#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1089;
float _3480;
float _3481;
float _3482;
float _3483;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238;
    float _239;
    float _240;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
    }
    else
    {
        _238 = _224;
        _239 = _225;
        _240 = _226;
    }
    vec4 _261 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _290 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _295 = _290.x * cbMtdParam._m0[9u].x;
    float _296 = _290.y * cbMtdParam._m0[9u].y;
    float _297 = _290.z * cbMtdParam._m0[9u].z;
    vec4 _316 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _342 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[6u].w));
    float _369 = (texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((cbMtdParam._m0[13u].z * TEXCOORD_4.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[13u].z * TEXCOORD_4.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[13u].x;
    float _377 = (cbMtdParam._m0[13u].y * TEXCOORD.w) + 1.0;
    float _378 = (TEXCOORD_9.x - (_369 * (1.0 - TEXCOORD_9.x))) * _377;
    float _379 = (TEXCOORD_9.y - (_369 * (1.0 - TEXCOORD_9.y))) * _377;
    float _3492 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _380 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
    float _3503 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _381 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
    float _388 = (_380 * ((_316.x * cbMtdParam._m0[10u].x) - _295)) + _295;
    float _389 = (_380 * ((_316.y * cbMtdParam._m0[10u].y) - _296)) + _296;
    float _390 = (_380 * ((_316.z * cbMtdParam._m0[10u].z) - _297)) + _297;
    float _403 = ((cbMtdParam._m0[12u].x * 4.55000019073486328125) * _261.x) * ((((_342.x * cbMtdParam._m0[11u].x) - _388) * _381) + _388);
    float _406 = ((cbMtdParam._m0[12u].y * 4.55000019073486328125) * _261.y) * ((((_342.y * cbMtdParam._m0[11u].y) - _389) * _381) + _389);
    float _409 = ((cbMtdParam._m0[12u].z * 4.55000019073486328125) * _261.z) * ((((_342.z * cbMtdParam._m0[11u].z) - _390) * _381) + _390);
    vec4 _421 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[2u].w));
    float _423 = _421.x;
    float _424 = _421.y;
    float _425 = _421.z;
    vec4 _437 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _454 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[8u].w));
    float _465 = (_380 * (_437.x - _423)) + _423;
    float _466 = (_380 * (_437.y - _424)) + _424;
    float _467 = (_380 * (_437.z - _425)) + _425;
    float _476 = ((_454.z - _467) * _381) + _467;
    float _480 = ((((_454.x - _465) * _381) + _465) * 2.0) + (-1.0);
    float _482 = ((((_454.y - _466) * _381) + _466) * 2.0) + (-1.0);
    float _483 = dot(vec2(_480, _482), vec2(_480, _482));
    float _3514 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _488 = sqrt(1.0 - (isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))));
    vec4 _502 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _512 = (((_502.x * 2.0) + (-1.0)) * cbMtdParam._m0[13u].w) + _480;
    float _513 = (((_502.y * 2.0) + (-1.0)) * cbMtdParam._m0[13u].w) + _482;
    float _516 = fma(_488, _238, fma(_513, _230 * TANGENT.x, (_216 * _208) * _512));
    float _519 = fma(_488, _239, fma(_513, _230 * TANGENT.y, (_216 * _209) * _512));
    float _522 = fma(_488, _240, fma(_513, _230 * TANGENT.z, (_216 * _210) * _512));
    float _526 = inversesqrt(dot(vec3(_516, _519, _522), vec3(_516, _519, _522)));
    float _527 = _526 * _516;
    float _528 = _526 * _519;
    float _529 = _526 * _522;
    float _3525 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _530 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
    float _3536 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _3547 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _3558 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _549 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _589 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _599 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _589);
    float _600 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _589);
    float _601 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _589);
    float _605 = inversesqrt(dot(vec3(_599, _600, _601), vec3(_599, _600, _601)));
    float _606 = _599 * _605;
    float _607 = _600 * _605;
    float _608 = _601 * _605;
    vec4 _613 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _615 = _613.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _769 = sqrt(((_599 * _599) + (_600 * _600)) + (_601 * _601));
        float _775 = (cbMatDynParam._m0[5u].x * _769) + cbMatDynParam._m0[5u].y;
        float _3569 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _776 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _780 = (cbMatDynParam._m0[5u].z * _769) + cbMatDynParam._m0[5u].w;
        float _3580 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) - _776)) + _776) < ((_615 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _626 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _627 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _645 = fma(_529, cbSceneParam._m0[5u].z, fma(_528, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _527));
    float _648 = fma(_529, cbSceneParam._m0[6u].z, fma(_528, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _527));
    float _651 = fma(_529, cbSceneParam._m0[7u].z, fma(_528, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _527));
    uint _664 = uint(roundEven(NORMAL.w)) * 13u;
    uint _665 = _664 + 9u;
    uint _666 = _665 + uint(cbMatDynParam._m0[0u].w);
    float _672 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0)))) * cbInstanceData._m0[_666].x;
    float _673 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0)))) * cbInstanceData._m0[_666].y;
    float _674 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0)))) * cbInstanceData._m0[_666].z;
    float _3591 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _675 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
    float _3602 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _676 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
    float _3613 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _677 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
    vec4 _686 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _626, cbSceneParam._m0[86u].y * _627));
    float _689 = _686.x * TEXCOORD_9.w;
    float _690 = dot(vec3(_527, _528, _529), vec3(_606, _607, _608));
    float _693 = _690 * 2.0;
    float _697 = (_693 * _527) - _606;
    float _698 = (_693 * _528) - _607;
    float _699 = (_693 * _529) - _608;
    float _703 = abs(dot(vec3(_606, _607, _608), vec3(_527, _528, _529)));
    float _3624 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _705 = sqrt(_530);
    float _718 = exp2((_705 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_705 * 3.0));
    float _750 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1088;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _813 = fma(_758, cbModelParam._m0[26u].z, fma(_754, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _750));
        float _817 = fma(_758, cbModelParam._m0[27u].z, fma(_754, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _750));
        float _821 = fma(_758, cbModelParam._m0[28u].z, fma(_754, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _750));
        float _846 = _750 + _527;
        float _847 = _754 + _528;
        float _848 = _758 + _529;
        float _858 = fma(_848, cbModelParam._m0[26u].z, fma(_847, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _846)) - _813;
        float _859 = fma(_848, cbModelParam._m0[27u].z, fma(_847, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _846)) - _817;
        float _860 = fma(_848, cbModelParam._m0[28u].z, fma(_847, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _846)) - _821;
        float _864 = inversesqrt(dot(vec3(_858, _859, _860), vec3(_858, _859, _860)));
        float _877 = ((_864 * _858) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_813 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _878 = ((_864 * _859) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_817 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _879 = ((_864 * _860) / cbModelParam._m0[34u].z) + ((((((_821 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_877, _878, _879), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_877, _878, _879), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_877, _878, _879), 0.0);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_877, _878, _879), 0.0);
        float _916 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _917 = _916 * (_882.x + (-0.5));
        float _918 = _916 * (_882.y + (-0.5));
        float _919 = _916 * (_882.z + (-0.5));
        float _926 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _927 = _926 * (_889.x + (-0.5));
        float _928 = _926 * (_889.y + (-0.5));
        float _929 = _926 * (_889.z + (-0.5));
        float _936 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _937 = _936 * (_896.x + (-0.5));
        float _938 = _936 * (_896.y + (-0.5));
        float _939 = _936 * (_896.z + (-0.5));
        float _946 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _947 = _946 * (_903.x + (-0.5));
        float _948 = _946 * (_903.y + (-0.5));
        float _949 = _946 * (_903.z + (-0.5));
        float _950 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _951 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _952 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _953 = _917 * 0.5;
        float _954 = _927 * 0.5;
        float _955 = _937 * 0.5;
        float _956 = dot(vec3(_953, _954, _955), vec3(_953, _954, _955));
        float _961 = (_956 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_956);
        float _970 = (dot(vec3(_527, _528, _529), vec3(_961 * _953, _961 * _954, _961 * _955)) + 1.0) * 0.5;
        float _3650 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _980 = sqrt(((_954 * _954) + (_953 * _953)) + (_955 * _955)) / (_950 + 9.9999997473787516355514526367188e-06);
        float _3661 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _982 = _981 * 2.0;
        float _986 = (1.0 - _981) / (_981 + 1.0);
        float _3672 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _996 = ((((1.0 - _987) * (_982 + 2.0)) * exp2(log2(isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * (_982 + 1.0))) + _987) * _950;
        float _997 = _918 * 0.5;
        float _998 = _928 * 0.5;
        float _999 = _938 * 0.5;
        float _1000 = dot(vec3(_997, _998, _999), vec3(_997, _998, _999));
        float _1005 = (_1000 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1000);
        float _1013 = (dot(vec3(_527, _528, _529), vec3(_1005 * _997, _1005 * _998, _1005 * _999)) + 1.0) * 0.5;
        float _3683 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1022 = sqrt(((_998 * _998) + (_997 * _997)) + (_999 * _999)) / (_951 + 9.9999997473787516355514526367188e-06);
        float _3694 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1024 = _1023 * 2.0;
        float _1028 = (1.0 - _1023) / (_1023 + 1.0);
        float _3705 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1038 = ((((1.0 - _1029) * (_1024 + 2.0)) * exp2(log2(isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * (_1024 + 1.0))) + _1029) * _951;
        float _1039 = _919 * 0.5;
        float _1040 = _929 * 0.5;
        float _1041 = _939 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1055 = (dot(vec3(_527, _528, _529), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _3716 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1064 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_952 + 9.9999997473787516355514526367188e-06);
        float _3727 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1066 = _1065 * 2.0;
        float _1070 = (1.0 - _1065) / (_1065 + 1.0);
        float _3738 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1080 = ((((1.0 - _1071) * (_1066 + 2.0)) * exp2(log2(isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * (_1066 + 1.0))) + _1071) * _952;
        _1088 = _919;
        _1090 = _918;
        _1091 = _917;
        _1092 = _929;
        _1093 = _928;
        _1094 = _927;
        _1095 = _939;
        _1096 = _938;
        _1097 = _937;
        _1098 = _952;
        _1099 = _951;
        _1100 = _950;
        _1101 = cbModelParam._m0[36u].z * (isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0)));
        _1102 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0)));
        _1103 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0)));
    }
    else
    {
        _1088 = _1089;
        _1090 = _1089;
        _1091 = _1089;
        _1092 = _1089;
        _1093 = _1089;
        _1094 = _1089;
        _1095 = _1089;
        _1096 = _1089;
        _1097 = _1089;
        _1098 = _1089;
        _1099 = _1089;
        _1100 = _1089;
        _1101 = 0.0;
        _1102 = 0.0;
        _1103 = 0.0;
    }
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1132 = fma(_758, cbModelParam._m0[30u].z, fma(_754, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _750));
        float _1136 = fma(_758, cbModelParam._m0[31u].z, fma(_754, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _750));
        float _1140 = fma(_758, cbModelParam._m0[32u].z, fma(_754, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _750));
        float _1163 = _750 + _527;
        float _1164 = _754 + _528;
        float _1165 = _758 + _529;
        float _1175 = fma(_1165, cbModelParam._m0[30u].z, fma(_1164, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1163)) - _1132;
        float _1176 = fma(_1165, cbModelParam._m0[31u].z, fma(_1164, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1163)) - _1136;
        float _1177 = fma(_1165, cbModelParam._m0[32u].z, fma(_1164, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1163)) - _1140;
        float _1181 = inversesqrt(dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177)));
        float _1194 = ((_1181 * _1175) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1132 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1195 = ((_1181 * _1176) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1136 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1196 = ((_1181 * _1177) / cbModelParam._m0[35u].z) + ((((((_1140 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        float _1231 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1198.x + (-0.5));
        float _1233 = _1231 * (_1198.y + (-0.5));
        float _1234 = _1231 * (_1198.z + (-0.5));
        float _1241 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1205.x + (-0.5));
        float _1243 = _1241 * (_1205.y + (-0.5));
        float _1244 = _1241 * (_1205.z + (-0.5));
        float _1251 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1212.x + (-0.5));
        float _1253 = _1251 * (_1212.y + (-0.5));
        float _1254 = _1251 * (_1212.z + (-0.5));
        float _1261 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1219.x + (-0.5));
        float _1263 = _1261 * (_1219.y + (-0.5));
        float _1264 = _1261 * (_1219.z + (-0.5));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = _1232 * 0.5;
        float _1269 = _1242 * 0.5;
        float _1270 = _1252 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_527, _528, _529), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _3779 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _3790 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _3801 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_1295 + 1.0))) + _1300) * _1265;
        float _1310 = _1233 * 0.5;
        float _1311 = _1243 * 0.5;
        float _1312 = _1253 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_527, _528, _529), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _3812 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _3823 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _3834 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (_1337 + 1.0))) + _1342) * _1266;
        float _1352 = _1234 * 0.5;
        float _1353 = _1244 * 0.5;
        float _1354 = _1254 * 0.5;
        float _1355 = dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354));
        float _1360 = (_1355 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1355);
        float _1368 = (dot(vec3(_527, _528, _529), vec3(_1360 * _1352, _1360 * _1353, _1360 * _1354)) + 1.0) * 0.5;
        float _3845 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1377 = sqrt(((_1353 * _1353) + (_1352 * _1352)) + (_1354 * _1354)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _3856 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1379 = _1378 * 2.0;
        float _1383 = (1.0 - _1378) / (_1378 + 1.0);
        float _3867 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1393 = ((((1.0 - _1384) * (_1379 + 2.0)) * exp2(log2(isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_1379 + 1.0))) + _1384) * _1267;
        _1401 = _1234;
        _1402 = _1233;
        _1403 = _1232;
        _1404 = _1244;
        _1405 = _1243;
        _1406 = _1242;
        _1407 = _1254;
        _1408 = _1253;
        _1409 = _1252;
        _1410 = _1267;
        _1411 = _1266;
        _1412 = _1265;
        _1413 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
        _1414 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
        _1415 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)));
    }
    else
    {
        _1401 = _1089;
        _1402 = _1089;
        _1403 = _1089;
        _1404 = _1089;
        _1405 = _1089;
        _1406 = _1089;
        _1407 = _1089;
        _1408 = _1089;
        _1409 = _1089;
        _1410 = _1089;
        _1411 = _1089;
        _1412 = _1089;
        _1413 = 0.0;
        _1414 = 0.0;
        _1415 = 0.0;
    }
    float _1425 = (cbModelParam._m0[1u].x * (_1413 - _1101)) + _1101;
    float _1426 = (cbModelParam._m0[1u].x * (_1414 - _1102)) + _1102;
    float _1427 = (cbModelParam._m0[1u].x * (_1415 - _1103)) + _1103;
    float _1448 = fma(_1427, cbSceneParam._m0[89u].z, fma(_1426, cbSceneParam._m0[89u].y, _1425 * cbSceneParam._m0[89u].x));
    float _1451 = fma(_1427, cbSceneParam._m0[90u].z, fma(_1426, cbSceneParam._m0[90u].y, _1425 * cbSceneParam._m0[90u].x));
    float _1454 = fma(_1427, cbSceneParam._m0[91u].z, fma(_1426, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1425));
    float _1469 = _697 * 0.5;
    float _1470 = _698 * 0.5;
    float _1471 = _699 * 0.5;
    float _1472 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1403, _1406, _1409, _1412));
    float _1475 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1402, _1405, _1408, _1411));
    float _1478 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1401, _1404, _1407, _1410));
    float _1512;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1485 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1088, _1092, _1095, _1098));
        float _1489 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1090, _1093, _1096, _1099));
        float _1493 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1091, _1094, _1097, _1100));
        float _1500 = dot(vec4(cbModelParam._m0[39u]), vec4(_1469, _1470, _1471, 1.0));
        _1512 = dot(vec3(isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)), isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)), isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1500) ? 0.0 : (isnan(0.0) ? _1500 : max(0.0, _1500))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1512 = 1.0;
    }
    float _1523;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1514 = dot(vec4(cbModelParam._m0[40u]), vec4(_1469, _1470, _1471, 1.0));
        _1523 = dot(vec3(isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)), isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)), isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1514) ? 0.0 : (isnan(0.0) ? _1514 : max(0.0, _1514))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1523 = 1.0;
    }
    float _1527 = (_1523 * cbModelParam._m0[1u].x) + (_1512 * (1.0 - cbModelParam._m0[1u].x));
    float _1537 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _530);
    float _1538 = isnan(_1537) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1537 : min(cbModelParam._m0[25u].z, _1537));
    float _1619;
    float _1621;
    float _1623;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1586 = fma(_758, cbModelParam._m0[13u].z, fma(_754, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _750)) + cbModelParam._m0[13u].w;
        float _1590 = fma(_758, cbModelParam._m0[14u].z, fma(_754, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _750)) + cbModelParam._m0[14u].w;
        float _1594 = fma(_758, cbModelParam._m0[15u].z, fma(_754, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _750)) + cbModelParam._m0[15u].w;
        float _1597 = fma(_699, cbModelParam._m0[13u].z, fma(_698, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _697));
        float _1600 = fma(_699, cbModelParam._m0[14u].z, fma(_698, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _697));
        float _1603 = fma(_699, cbModelParam._m0[15u].z, fma(_698, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _697));
        float _1631;
        if (_1597 > 0.0)
        {
            _1631 = abs((1.0 - _1586) / _1597);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1597 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1586 + 1.0) / _1597);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1631 = frontier_phi_19_17_ladder;
        }
        float _1856;
        if (_1600 > 0.0)
        {
            _1856 = abs((1.0 - _1590) / _1600);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1600 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1590 + 1.0) / _1600);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1856 = frontier_phi_28_24_ladder;
        }
        float _2102;
        if (_1603 > 0.0)
        {
            _2102 = abs((1.0 - _1594) / _1603);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1594 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2102 = frontier_phi_40_35_ladder;
        }
        float _2104 = isnan(_1856) ? _1631 : (isnan(_1631) ? _1856 : min(_1631, _1856));
        float _2105 = isnan(_2102) ? _2104 : (isnan(_2104) ? _2102 : min(_2104, _2102));
        float _2109 = (_2105 * _1597) + _1586;
        float _2110 = (_2105 * _1600) + _1590;
        float _2111 = (_2105 * _1603) + _1594;
        float _2112 = _2105 * 9.9999997473787516355514526367188e-05;
        float _2114 = (-1.0) - _2112;
        float _2116 = _2112 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2111 > _2116) || ((_2111 < _2114) || ((_2110 > _2116) || ((_2110 < _2114) || ((_2109 < _2114) || (_2109 > _2116))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2235 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2111, cbModelParam._m0[9u].z, fma(_2110, cbModelParam._m0[9u].y, _2109 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2111, cbModelParam._m0[10u].z, fma(_2110, cbModelParam._m0[10u].y, _2109 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2111, cbModelParam._m0[11u].z, fma(_2110, cbModelParam._m0[11u].y, _2109 * cbModelParam._m0[11u].x))), _1538);
            frontier_phi_18_40_ladder = _2235.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2235.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2235.x * cbModelParam._m0[1u].y;
        }
        _1619 = frontier_phi_18_40_ladder_2;
        _1621 = frontier_phi_18_40_ladder_1;
        _1623 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1607 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_697, _698, _699), _1538);
        _1619 = _1607.x * cbModelParam._m0[1u].y;
        _1621 = _1607.y * cbModelParam._m0[1u].y;
        _1623 = _1607.z * cbModelParam._m0[1u].y;
    }
    float _1627 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _530);
    float _1628 = isnan(_1627) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1627 : min(cbModelParam._m0[25u].w, _1627));
    float _1721;
    float _1723;
    float _1725;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1685 = fma(_758, cbModelParam._m0[21u].z, fma(_754, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _750)) + cbModelParam._m0[21u].w;
        float _1689 = fma(_758, cbModelParam._m0[22u].z, fma(_754, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _750)) + cbModelParam._m0[22u].w;
        float _1693 = fma(_758, cbModelParam._m0[23u].z, fma(_754, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _750)) + cbModelParam._m0[23u].w;
        float _1696 = fma(_699, cbModelParam._m0[21u].z, fma(_698, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _697));
        float _1699 = fma(_699, cbModelParam._m0[22u].z, fma(_698, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _697));
        float _1702 = fma(_699, cbModelParam._m0[23u].z, fma(_698, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _697));
        float _1861;
        if (_1696 > 0.0)
        {
            _1861 = abs((1.0 - _1685) / _1696);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1685 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1861 = frontier_phi_30_26_ladder;
        }
        float _2129;
        if (_1699 > 0.0)
        {
            _2129 = abs((1.0 - _1689) / _1699);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1699 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1689 + 1.0) / _1699);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2129 = frontier_phi_42_37_ladder;
        }
        float _2334;
        if (_1702 > 0.0)
        {
            _2334 = abs((1.0 - _1693) / _1702);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1702 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1693 + 1.0) / _1702);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2334 = frontier_phi_51_48_ladder;
        }
        float _2336 = isnan(_2129) ? _1861 : (isnan(_1861) ? _2129 : min(_1861, _2129));
        float _2337 = isnan(_2334) ? _2336 : (isnan(_2336) ? _2334 : min(_2336, _2334));
        float _2341 = (_2337 * _1696) + _1685;
        float _2342 = (_2337 * _1699) + _1689;
        float _2343 = (_2337 * _1702) + _1693;
        float _2344 = _2337 * 9.9999997473787516355514526367188e-05;
        float _2345 = (-1.0) - _2344;
        float _2347 = _2344 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2343 > _2347) || ((_2343 < _2345) || ((_2342 > _2347) || ((_2342 < _2345) || ((_2341 < _2345) || (_2341 > _2347))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2541 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2343, cbModelParam._m0[17u].z, fma(_2342, cbModelParam._m0[17u].y, _2341 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2343, cbModelParam._m0[18u].z, fma(_2342, cbModelParam._m0[18u].y, _2341 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2343, cbModelParam._m0[19u].z, fma(_2342, cbModelParam._m0[19u].y, _2341 * cbModelParam._m0[19u].x))), _1628);
            frontier_phi_27_51_ladder = _2541.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2541.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2541.x * cbModelParam._m0[1u].z;
        }
        _1721 = frontier_phi_27_51_ladder_2;
        _1723 = frontier_phi_27_51_ladder_1;
        _1725 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1705 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_697, _698, _699), _1628);
        _1721 = _1705.x * cbModelParam._m0[1u].z;
        _1723 = _1705.y * cbModelParam._m0[1u].z;
        _1725 = _1705.z * cbModelParam._m0[1u].z;
    }
    float _1737 = ((((1.0 - _718) * ((_705 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_718 * _705)) * _689;
    float _1738 = _1737 * ((cbModelParam._m0[1u].w * (_1721 - _1619)) + _1619);
    float _1739 = _1737 * ((cbModelParam._m0[1u].w * (_1723 - _1621)) + _1621);
    float _1740 = _1737 * ((cbModelParam._m0[1u].w * (_1725 - _1623)) + _1623);
    float _1743 = fma(_1740, cbSceneParam._m0[89u].z, fma(_1739, cbSceneParam._m0[89u].y, _1738 * cbSceneParam._m0[89u].x));
    float _1746 = fma(_1740, cbSceneParam._m0[90u].z, fma(_1739, cbSceneParam._m0[90u].y, _1738 * cbSceneParam._m0[90u].x));
    float _1749 = fma(_1740, cbSceneParam._m0[91u].z, fma(_1739, cbSceneParam._m0[91u].y, _1738 * cbSceneParam._m0[91u].x));
    vec4 _1757 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_626, _627));
    float _1759 = _1757.w;
    float _1771 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1759);
    float _1772 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1759);
    float _1773 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1759);
    uvec4 _1777 = floatBitsToUint(cbInstanceData._m0[_664 + 5u]);
    uint _1779 = _1777.x * 14u;
    uint _1780 = _1779 + 13u;
    float _1787 = _689 + (-1.0);
    float _1792 = (cbLight._m0[_1780].x * _1787) + 1.0;
    float _1793 = (cbLight._m0[_1780].y * _1787) + 1.0;
    float _1794 = (cbLight._m0[_1780].z * _1787) + 1.0;
    float _1795 = (cbLight._m0[_1780].w * _1787) + 1.0;
    uint _1796 = _1779 + 5u;
    float _1802 = isnan(1.0) ? _1793 : (isnan(_1793) ? 1.0 : min(_1793, 1.0));
    uint _1806 = _1779 + 4u;
    float _1815 = isnan(1.0) ? _1792 : (isnan(_1792) ? 1.0 : min(_1792, 1.0));
    uint _1819 = _1779 | 1u;
    float _1830 = dot(vec3(cbLight._m0[_1779].xyz), vec3(_527, _528, _529));
    float _1833 = dot(vec3(cbLight._m0[_1819].xyz), vec3(_527, _528, _529));
    float _4003 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _4014 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1838 = (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * 0.3183098733425140380859375;
    float _1840 = (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * 0.3183098733425140380859375;
    float _1847 = ((cbLight._m0[_1796].x * _1802) * _1840) + (((cbLight._m0[_1806].x * _1771) * _1815) * _1838);
    float _1848 = ((_1802 * cbLight._m0[_1796].y) * _1840) + (((cbLight._m0[_1806].y * _1772) * _1815) * _1838);
    float _1849 = ((_1802 * cbLight._m0[_1796].z) * _1840) + (((cbLight._m0[_1806].z * _1773) * _1815) * _1838);
    uvec4 _1853 = floatBitsToUint(cbLight._m0[_1779 + 12u]);
    bool _1855 = _1853.x == 0u;
    float _1866;
    float _1868;
    float _1870;
    if (_1855)
    {
        _1866 = _1847;
        _1868 = _1848;
        _1870 = _1849;
    }
    else
    {
        uint _1874 = _1779 + 6u;
        float _1890 = (dot(vec3(cbLight._m0[_1779 + 2u].xyz), vec3(_527, _528, _529)) * 0.5) + 0.5;
        float _1891 = _1890 * _1890;
        float _4025 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
        float _1892 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1893 = isnan(1.0) ? _1794 : (isnan(_1794) ? 1.0 : min(_1794, 1.0));
        _1866 = (((cbLight._m0[_1874].x * 0.3183098733425140380859375) * _1892) * _1893) + _1847;
        _1868 = (((cbLight._m0[_1874].y * 0.3183098733425140380859375) * _1892) * _1893) + _1848;
        _1870 = (((cbLight._m0[_1874].z * 0.3183098733425140380859375) * _1892) * _1893) + _1849;
    }
    bool _1873 = _1853.y == 0u;
    float _1911;
    float _1913;
    float _1915;
    if (_1873)
    {
        _1911 = _1866;
        _1913 = _1868;
        _1915 = _1870;
    }
    else
    {
        uint _2073 = _1779 + 7u;
        float _2089 = (dot(vec3(cbLight._m0[_1779 + 3u].xyz), vec3(_527, _528, _529)) * 0.5) + 0.5;
        float _2090 = _2089 * _2089;
        float _4041 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
        float _2091 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _2092 = isnan(1.0) ? _1795 : (isnan(_1795) ? 1.0 : min(_1795, 1.0));
        _1911 = (((cbLight._m0[_2073].x * 0.3183098733425140380859375) * _2091) * _2092) + _1866;
        _1913 = (((cbLight._m0[_2073].y * 0.3183098733425140380859375) * _2091) * _2092) + _1868;
        _1915 = (((cbLight._m0[_2073].z * 0.3183098733425140380859375) * _2091) * _2092) + _1870;
    }
    uint _1918 = _1779 + 8u;
    float _1931 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1779].w)) * _530) * 0.949999988079071044921875);
    float _1932 = _1931 * _1931;
    float _1933 = cbLight._m0[_1779].x + _606;
    float _1934 = cbLight._m0[_1779].y + _607;
    float _1935 = cbLight._m0[_1779].z + _608;
    float _1939 = inversesqrt(dot(vec3(_1933, _1934, _1935), vec3(_1933, _1934, _1935)));
    float _1940 = _1939 * _1933;
    float _1941 = _1939 * _1934;
    float _1942 = _1939 * _1935;
    float _1943 = dot(vec3(_527, _528, _529), vec3(cbLight._m0[_1779].xyz));
    float _4057 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _1946 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _4068 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _1947 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _1948 = dot(vec3(_527, _528, _529), vec3(_1940, _1941, _1942));
    float _4079 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1951 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _1952 = dot(vec3(cbLight._m0[_1779].xyz), vec3(_1940, _1941, _1942));
    float _4090 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1956 = _1932 * _1932;
    float _1960 = ((_1951 * _1951) * (_1956 + (-1.0))) + 1.0;
    float _1971 = (exp2(log2(1.0 - (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1972 = 1.0 - _1932;
    float _1983 = (0.5 / (((_1947 * ((_1946 * _1972) + _1932)) + 9.9999999392252902907785028219223e-09) + (((_1947 * _1972) + _1932) * _1946))) * _1946;
    float _4101 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1985 = (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_1956 / ((_1960 * _1960) * 3.141590118408203125));
    uint _1999 = _1779 + 9u;
    float _2010 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1819].w)) * _530) * 0.949999988079071044921875);
    float _2011 = _2010 * _2010;
    float _2012 = cbLight._m0[_1819].x + _606;
    float _2013 = cbLight._m0[_1819].y + _607;
    float _2014 = cbLight._m0[_1819].z + _608;
    float _2018 = inversesqrt(dot(vec3(_2012, _2013, _2014), vec3(_2012, _2013, _2014)));
    float _2019 = _2018 * _2012;
    float _2020 = _2018 * _2013;
    float _2021 = _2018 * _2014;
    float _2022 = dot(vec3(_527, _528, _529), vec3(cbLight._m0[_1819].xyz));
    float _4112 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2025 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _2026 = dot(vec3(_527, _528, _529), vec3(_2019, _2020, _2021));
    float _4123 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2029 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _2030 = dot(vec3(cbLight._m0[_1819].xyz), vec3(_2019, _2020, _2021));
    float _4134 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2034 = _2011 * _2011;
    float _2038 = ((_2029 * _2029) * (_2034 + (-1.0))) + 1.0;
    float _2047 = (exp2(log2(1.0 - (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2048 = 1.0 - _2011;
    float _2058 = (0.5 / (((_1947 * ((_2025 * _2048) + _2011)) + 9.9999999392252902907785028219223e-09) + (((_1947 * _2048) + _2011) * _2025))) * _2025;
    float _4145 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2060 = (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_2034 / ((_2038 * _2038) * 3.141590118408203125));
    float _2070 = (((_2047 * cbLight._m0[_1999].x) * _2060) * _1802) + ((((cbLight._m0[_1918].x * _1771) * _1971) * _1985) * _1815);
    float _2071 = (((_2047 * cbLight._m0[_1999].y) * _2060) * _1802) + ((((cbLight._m0[_1918].y * _1772) * _1971) * _1985) * _1815);
    float _2072 = (((_2047 * cbLight._m0[_1999].z) * _2060) * _1802) + ((((cbLight._m0[_1918].z * _1773) * _1971) * _1985) * _1815);
    float _2134;
    float _2136;
    float _2138;
    if (_1855)
    {
        _2134 = _2070;
        _2136 = _2071;
        _2138 = _2072;
    }
    else
    {
        uint _2140 = _1779 + 2u;
        uint _2144 = _1779 + 10u;
        float _2158 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2140].w)) * _530) * 0.949999988079071044921875);
        float _2159 = _2158 * _2158;
        float _2160 = cbLight._m0[_2140].x + _606;
        float _2161 = cbLight._m0[_2140].y + _607;
        float _2162 = cbLight._m0[_2140].z + _608;
        float _2166 = inversesqrt(dot(vec3(_2160, _2161, _2162), vec3(_2160, _2161, _2162)));
        float _2167 = _2166 * _2160;
        float _2168 = _2166 * _2161;
        float _2169 = _2166 * _2162;
        float _2170 = dot(vec3(_527, _528, _529), vec3(cbLight._m0[_2140].xyz));
        float _4156 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2173 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _2174 = dot(vec3(_527, _528, _529), vec3(_2167, _2168, _2169));
        float _4167 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2177 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _2178 = dot(vec3(cbLight._m0[_2140].xyz), vec3(_2167, _2168, _2169));
        float _4178 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2182 = _2159 * _2159;
        float _2186 = ((_2177 * _2177) * (_2182 + (-1.0))) + 1.0;
        float _2195 = (exp2(log2(1.0 - (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2196 = 1.0 - _2159;
        float _2206 = (0.5 / (((_1947 * ((_2173 * _2196) + _2159)) + 9.9999999392252902907785028219223e-09) + (((_1947 * _2196) + _2159) * _2173))) * _2173;
        float _4189 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2208 = (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_2182 / ((_2186 * _2186) * 3.141590118408203125));
        float _2209 = isnan(1.0) ? _1794 : (isnan(_1794) ? 1.0 : min(_1794, 1.0));
        _2134 = (((_2195 * cbLight._m0[_2144].x) * _2208) * _2209) + _2070;
        _2136 = (((_2195 * cbLight._m0[_2144].y) * _2208) * _2209) + _2071;
        _2138 = (((_2195 * cbLight._m0[_2144].z) * _2208) * _2209) + _2072;
    }
    float _2244;
    float _2246;
    float _2248;
    if (_1873)
    {
        _2244 = _2134;
        _2246 = _2136;
        _2248 = _2138;
    }
    else
    {
        uint _2255 = _1779 + 3u;
        uint _2259 = _1779 + 11u;
        float _2273 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2255].w)) * _530) * 0.949999988079071044921875);
        float _2274 = _2273 * _2273;
        float _2275 = cbLight._m0[_2255].x + _606;
        float _2276 = cbLight._m0[_2255].y + _607;
        float _2277 = cbLight._m0[_2255].z + _608;
        float _2281 = inversesqrt(dot(vec3(_2275, _2276, _2277), vec3(_2275, _2276, _2277)));
        float _2282 = _2281 * _2275;
        float _2283 = _2281 * _2276;
        float _2284 = _2281 * _2277;
        float _2285 = dot(vec3(_527, _528, _529), vec3(cbLight._m0[_2255].xyz));
        float _4205 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2288 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _2289 = dot(vec3(_527, _528, _529), vec3(_2282, _2283, _2284));
        float _4216 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        float _2292 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _2293 = dot(vec3(cbLight._m0[_2255].xyz), vec3(_2282, _2283, _2284));
        float _4227 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2297 = _2274 * _2274;
        float _2301 = ((_2292 * _2292) * (_2297 + (-1.0))) + 1.0;
        float _2310 = (exp2(log2(1.0 - (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2311 = 1.0 - _2274;
        float _2321 = (0.5 / (((_1947 * ((_2288 * _2311) + _2274)) + 9.9999999392252902907785028219223e-09) + (((_1947 * _2311) + _2274) * _2288))) * _2288;
        float _4238 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2323 = (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_2297 / ((_2301 * _2301) * 3.141590118408203125));
        float _2324 = isnan(1.0) ? _1795 : (isnan(_1795) ? 1.0 : min(_1795, 1.0));
        _2244 = (((_2310 * cbLight._m0[_2259].x) * _2323) * _2324) + _2134;
        _2246 = (((_2310 * cbLight._m0[_2259].y) * _2323) * _2324) + _2136;
        _2248 = (((_2310 * cbLight._m0[_2259].z) * _2323) * _2324) + _2138;
    }
    float _2458;
    float _2460;
    float _2462;
    float _2464;
    float _2466;
    float _2468;
    if (_1777.y == 0u)
    {
        float _2399 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2400 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2399;
        float _2401 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2399;
        float _2402 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2399;
        uvec4 _2414 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2415 = _2414.x;
        uint _2426 = uint((float(_2414.y) * floor(float(uint(cbSceneParam._m0[85u].y * _627) / _2415))) + floor(float(uint(cbSceneParam._m0[85u].x * _626) / _2415)));
        float _2436 = (log2(_2402 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2437 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        uint _2440 = uint(isnan(14.0) ? _2437 : (isnan(_2437) ? 14.0 : min(_2437, 14.0)));
        uvec4 _2445 = texelFetch(g_lightClusterGridBuffer, int(((_2440 << 2u) + (_2426 << 6u)) >> 2u));
        uint _2446 = _2445.x;
        uint _2447 = _2414.z;
        float _2546;
        float _2548;
        float _2550;
        float _2552;
        float _2554;
        float _2556;
        if (((((1u << ((_2447 >> 4u) & 15u)) + 4294967295u) & _2446) == 0u) || ((_2447 & 240u) == 0u))
        {
            _2546 = 0.0;
            _2548 = 0.0;
            _2550 = 0.0;
            _2552 = 0.0;
            _2554 = 0.0;
            _2556 = 0.0;
        }
        else
        {
            float _2547;
            float _2549;
            float _2551;
            float _2553;
            float _2555;
            float _2557;
            float _2698 = 0.0;
            float _2699 = 0.0;
            float _2700 = 0.0;
            float _2701 = 0.0;
            float _2702 = 0.0;
            float _2703 = 0.0;
            uint _2704 = 0u;
            uint _2713;
            bool _2714;
            for (;;)
            {
                _2713 = texelFetch(g_lightClassification, int((((_2440 << 5u) + (_2426 << 9u)) + (_2704 << 2u)) >> 2u)).x;
                _2714 = _2713 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2714)
                {
                    frontier_phi_68_pred = _2700;
                    frontier_phi_68_pred_1 = _2703;
                    frontier_phi_68_pred_2 = _2702;
                    frontier_phi_68_pred_3 = _2701;
                    frontier_phi_68_pred_4 = _2699;
                    frontier_phi_68_pred_5 = _2698;
                }
                else
                {
                    float _2843;
                    float _2844;
                    float _2845;
                    float _2846;
                    float _2847;
                    float _2848;
                    uint _2849;
                    _2843 = _2698;
                    _2844 = _2699;
                    _2845 = _2700;
                    _2846 = _2701;
                    _2847 = _2702;
                    _2848 = _2703;
                    _2849 = _2713;
                    float _2770;
                    float _2771;
                    float _2772;
                    float _2773;
                    float _2774;
                    float _2775;
                    for (;;)
                    {
                        uint _2853 = uint(findLSB(_2849)) + (_2704 << 5u);
                        uint _2850 = (_2849 + 4294967295u) & _2849;
                        uint _2855 = _2853 * 48u;
                        vec4 _2869 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2855)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 3u)).x));
                        uint _2875 = (_2853 * 48u) + 4u;
                        vec4 _2888 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2875)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 3u)).x));
                        uint _2894 = (_2853 * 48u) + 8u;
                        vec3 _2905 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2894)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 2u)).x));
                        float _2909 = _2869.x - _2400;
                        float _2910 = _2869.y - _2401;
                        float _2911 = _2869.z - _2402;
                        float _2912 = dot(vec3(_2909, _2910, _2911), vec3(_2909, _2910, _2911));
                        float _2915 = inversesqrt(_2912);
                        float _2916 = _2915 * _2909;
                        float _2917 = _2915 * _2910;
                        float _2918 = _2915 * _2911;
                        float _2919 = dot(vec3(_645, _648, _651), vec3(_2916, _2917, _2918));
                        float _2924 = 1.0 - (_2912 * _2869.w);
                        float _4264 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
                        float _2925 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
                        float _2926 = sqrt(_2912) * _2888.w;
                        float _2929 = 1.39999997615814208984375 / (_2926 + 1.39999997615814208984375);
                        float _2930 = _2929 * _2929;
                        float _2933 = ((1.0 - _2930) * _2919) + _2930;
                        float _2936 = _2926 * _2926;
                        float _2940 = ((isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0))) * _2925) / ((_2936 * 0.699999988079071044921875) + 1.0);
                        float _2944 = (-0.0) - _2400;
                        float _2945 = (-0.0) - _2401;
                        float _2946 = (-0.0) - _2402;
                        float _2950 = inversesqrt(dot(vec3(_2944, _2945, _2946), vec3(_2944, _2945, _2946)));
                        float _2951 = _2950 * _2944;
                        float _2952 = _2950 * _2945;
                        float _2953 = _2950 * _2946;
                        float _2961 = exp2(log2(1.0 / ((_2936 * 3.5) + 5.0)) * 0.25);
                        float _2962 = 1.0 - _705;
                        float _2969 = sqrt(1.0 - ((1.0 - (_2962 * _2962)) * (1.0 - (_2961 * _2961))));
                        float _2970 = _2969 * _2969;
                        float _2971 = _2970 * _2970;
                        float _2972 = _2951 + _2916;
                        float _2973 = _2952 + _2917;
                        float _2974 = _2953 + _2918;
                        float _2978 = inversesqrt(dot(vec3(_2972, _2973, _2974), vec3(_2972, _2973, _2974)));
                        float _2982 = dot(vec3(_645, _648, _651), vec3(_2951, _2952, _2953));
                        float _4280 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                        float _2985 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                        float _2986 = dot(vec3(_645, _648, _651), vec3(_2978 * _2972, _2978 * _2973, _2978 * _2974));
                        float _4291 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                        float _2989 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                        float _2993 = ((_2989 * _2989) * (_2971 + (-1.0))) + 1.0;
                        float _2994 = _2929 * _2970;
                        float _2995 = _2994 * _2994;
                        float _2998 = ((1.0 - _2995) * _2919) + _2995;
                        float _4302 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                        float _2999 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
                        float _3000 = 1.0 - _2970;
                        float _3010 = (0.5 / (((_2999 * ((_2985 * _3000) + _2970)) + 9.9999999392252902907785028219223e-09) + (((_2999 * _3000) + _2970) * _2985))) * _2999;
                        float _4313 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                        float _3021 = (((_2971 * 3.1415927410125732421875) * (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) / ((_2993 * _2993) * ((_2936 * 2.1991131305694580078125) + 3.141590118408203125))) * _2925;
                        _2773 = (_2940 * _2888.x) + _2846;
                        _2774 = (_2940 * _2888.y) + _2847;
                        _2775 = (_2940 * _2888.z) + _2848;
                        _2770 = (_3021 * _2905.x) + _2843;
                        _2771 = (_3021 * _2905.y) + _2844;
                        _2772 = (_3021 * _2905.z) + _2845;
                        if (_2850 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2843 = _2770;
                            _2844 = _2771;
                            _2845 = _2772;
                            _2846 = _2773;
                            _2847 = _2774;
                            _2848 = _2775;
                            _2849 = _2850;
                        }
                    }
                    frontier_phi_68_pred = _2772;
                    frontier_phi_68_pred_1 = _2775;
                    frontier_phi_68_pred_2 = _2774;
                    frontier_phi_68_pred_3 = _2773;
                    frontier_phi_68_pred_4 = _2771;
                    frontier_phi_68_pred_5 = _2770;
                }
                _2551 = frontier_phi_68_pred;
                _2557 = frontier_phi_68_pred_1;
                _2555 = frontier_phi_68_pred_2;
                _2553 = frontier_phi_68_pred_3;
                _2549 = frontier_phi_68_pred_4;
                _2547 = frontier_phi_68_pred_5;
                uint _2705 = _2704 + 1u;
                if (_2705 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2698 = _2547;
                    _2699 = _2549;
                    _2700 = _2551;
                    _2701 = _2553;
                    _2702 = _2555;
                    _2703 = _2557;
                    _2704 = _2705;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2546 = _2547;
            _2548 = _2549;
            _2550 = _2551;
            _2552 = _2553;
            _2554 = _2555;
            _2556 = _2557;
        }
        uvec4 _2560 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2561 = _2560.z;
        uint _2563 = (_2561 >> 8u) & 15u;
        float _2666;
        float _2668;
        float _2670;
        float _2672;
        float _2674;
        float _2676;
        if (((4294967295u << _2563) & _2446) == 0u)
        {
            _2666 = _2546;
            _2668 = _2548;
            _2670 = _2550;
            _2672 = _2552;
            _2674 = _2554;
            _2676 = _2556;
        }
        else
        {
            float _2691 = inversesqrt(dot(vec3(_2400, _2401, _2402), vec3(_2400, _2401, _2402)));
            float _2692 = _2691 * _2400;
            float _2693 = _2691 * _2401;
            float _2694 = _2691 * _2402;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2563 < ((_2561 >> 12u) & 15u))
            {
                float _2667;
                float _2669;
                float _2671;
                float _2673;
                float _2675;
                float _2677;
                float _2826 = _2546;
                float _2827 = _2548;
                float _2828 = _2550;
                float _2829 = _2552;
                float _2830 = _2554;
                float _2831 = _2556;
                uint _2832 = _2563;
                uint _2841;
                bool _2842;
                for (;;)
                {
                    _2841 = texelFetch(g_lightClassification, int((((_2440 << 5u) + (_2426 << 9u)) + (_2832 << 2u)) >> 2u)).x;
                    _2842 = _2841 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2842)
                    {
                        frontier_phi_79_pred = _2831;
                        frontier_phi_79_pred_1 = _2830;
                        frontier_phi_79_pred_2 = _2829;
                        frontier_phi_79_pred_3 = _2828;
                        frontier_phi_79_pred_4 = _2827;
                        frontier_phi_79_pred_5 = _2826;
                    }
                    else
                    {
                        float _3035;
                        float _3036;
                        float _3037;
                        float _3038;
                        float _3039;
                        float _3040;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3048 = _2826;
                        float _3049 = _2827;
                        float _3050 = _2828;
                        float _3051 = _2829;
                        float _3052 = _2830;
                        float _3053 = _2831;
                        uint _3054 = _2841;
                        uint _3055;
                        vec4 _3080;
                        float _3081;
                        vec4 _3096;
                        vec3 _3108;
                        vec4 _3124;
                        vec4 _3140;
                        float _3187;
                        bool _3188;
                        for (;;)
                        {
                            uint _3065 = ((_2832 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3054));
                            _3055 = (_3054 + 4294967295u) & _3054;
                            uint _3067 = _3065 * 40u;
                            _3080 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3067)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 3u)).x));
                            _3081 = _3080.w;
                            uint _3083 = (_3065 * 40u) + 4u;
                            _3096 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 3u)).x));
                            uint _3098 = (_3065 * 40u) + 8u;
                            _3108 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3098)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 2u)).x));
                            uint _3111 = (_3065 * 40u) + 16u;
                            _3124 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 3u)).x));
                            uint _3127 = (_3065 * 40u) + 20u;
                            _3140 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 3u)).x));
                            uint _3143 = (_3065 * 40u) + 24u;
                            vec4 _3156 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 3u)).x));
                            uint _3162 = (_3065 * 40u) + 28u;
                            vec4 _3175 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3162)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 3u)).x));
                            _3187 = fma(_2402, _3175.z, fma(_2401, _3175.y, _3175.x * _2400)) + _3175.w;
                            _3188 = !((fma(_2402, _3156.z, fma(_2401, _3156.y, _3156.x * _2400)) + _3156.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3188)
                            {
                                float _3215 = _3080.x - _2400;
                                float _3216 = _3080.y - _2401;
                                float _3217 = _3080.z - _2402;
                                float _3218 = dot(vec3(_3215, _3216, _3217), vec3(_3215, _3216, _3217));
                                float _3221 = inversesqrt(_3218);
                                float _3222 = _3221 * _3215;
                                float _3223 = _3221 * _3216;
                                float _3224 = _3221 * _3217;
                                float _3228 = 1.0 - (_3218 / (_3081 * _3081));
                                float _4324 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                                float _3229 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                                float _3233 = sqrt(_3218) * _3096.w;
                                float _3235 = 1.39999997615814208984375 / (_3233 + 1.39999997615814208984375);
                                float _3236 = _3235 * _3235;
                                float _3239 = ((1.0 - _3236) * dot(vec3(_3222, _3223, _3224), vec3(_645, _648, _651))) + _3236;
                                float _3242 = _3233 * _3233;
                                float _3246 = (fma(_2402, _3124.z, fma(_2401, _3124.y, _3124.x * _2400)) + _3124.w) / _3187;
                                float _3247 = (fma(_2402, _3140.z, fma(_2401, _3140.y, _3140.x * _2400)) + _3140.w) / _3187;
                                float _3251 = 1.0 - dot(vec2(_3246, _3247), vec2(_3246, _3247));
                                float _4340 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                                float _3252 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                                float _3253 = _3252 * (((isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0))) * _3229) / ((_3242 * 0.699999988079071044921875) + 1.0));
                                float _3265 = exp2(log2(1.0 / ((_3242 * 3.5) + 5.0)) * 0.25);
                                float _3266 = 1.0 - _705;
                                float _3273 = sqrt(1.0 - ((1.0 - (_3266 * _3266)) * (1.0 - (_3265 * _3265))));
                                float _3274 = _3273 * _3273;
                                float _3275 = _3274 * _3274;
                                float _3276 = _3222 - _2692;
                                float _3277 = _3223 - _2693;
                                float _3278 = _3224 - _2694;
                                float _3282 = inversesqrt(dot(vec3(_3276, _3277, _3278), vec3(_3276, _3277, _3278)));
                                float _3286 = dot(vec3(_645, _648, _651), vec3((-0.0) - _2692, (-0.0) - _2693, (-0.0) - _2694));
                                float _4351 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3289 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
                                float _3290 = dot(vec3(_645, _648, _651), vec3(_3282 * _3276, _3282 * _3277, _3282 * _3278));
                                float _4362 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                                float _3293 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                                float _3297 = ((_3293 * _3293) * (_3275 + (-1.0))) + 1.0;
                                float _3298 = _3235 * _3274;
                                float _3299 = _3298 * _3298;
                                float _3305 = ((1.0 - _3299) * dot(vec3(_645, _648, _651), vec3(_3222, _3223, _3224))) + _3299;
                                float _4373 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3306 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
                                float _3307 = 1.0 - _3274;
                                float _3317 = (0.5 / (((_3306 * ((_3289 * _3307) + _3274)) + 9.9999999392252902907785028219223e-09) + (((_3306 * _3307) + _3274) * _3289))) * _3306;
                                float _4384 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3327 = (_3252 * _3229) * (((_3275 * 3.1415927410125732421875) * (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0)))) / ((_3297 * _3297) * ((_3242 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3253 * _3096.z;
                                frontier_phi_85_pred_1 = _3253 * _3096.y;
                                frontier_phi_85_pred_2 = _3253 * _3096.x;
                                frontier_phi_85_pred_3 = _3327 * _3108.z;
                                frontier_phi_85_pred_4 = _3327 * _3108.y;
                                frontier_phi_85_pred_5 = _3327 * _3108.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3336 = frontier_phi_85_pred;
                            _3335 = frontier_phi_85_pred_1;
                            _3334 = frontier_phi_85_pred_2;
                            _3333 = frontier_phi_85_pred_3;
                            _3332 = frontier_phi_85_pred_4;
                            _3331 = frontier_phi_85_pred_5;
                            _3038 = _3334 + _3051;
                            _3039 = _3335 + _3052;
                            _3040 = _3336 + _3053;
                            _3035 = _3331 + _3048;
                            _3036 = _3332 + _3049;
                            _3037 = _3333 + _3050;
                            if (_3055 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3048 = _3035;
                                _3049 = _3036;
                                _3050 = _3037;
                                _3051 = _3038;
                                _3052 = _3039;
                                _3053 = _3040;
                                _3054 = _3055;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3040;
                        frontier_phi_79_pred_1 = _3039;
                        frontier_phi_79_pred_2 = _3038;
                        frontier_phi_79_pred_3 = _3037;
                        frontier_phi_79_pred_4 = _3036;
                        frontier_phi_79_pred_5 = _3035;
                    }
                    _2677 = frontier_phi_79_pred;
                    _2675 = frontier_phi_79_pred_1;
                    _2673 = frontier_phi_79_pred_2;
                    _2671 = frontier_phi_79_pred_3;
                    _2669 = frontier_phi_79_pred_4;
                    _2667 = frontier_phi_79_pred_5;
                    uint _2833 = _2832 + 1u;
                    if (_2833 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2826 = _2667;
                        _2827 = _2669;
                        _2828 = _2671;
                        _2829 = _2673;
                        _2830 = _2675;
                        _2831 = _2677;
                        _2832 = _2833;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2673;
                frontier_phi_60_61_ladder_1 = _2677;
                frontier_phi_60_61_ladder_2 = _2675;
                frontier_phi_60_61_ladder_3 = _2671;
                frontier_phi_60_61_ladder_4 = _2669;
                frontier_phi_60_61_ladder_5 = _2667;
            }
            else
            {
                frontier_phi_60_61_ladder = _2552;
                frontier_phi_60_61_ladder_1 = _2556;
                frontier_phi_60_61_ladder_2 = _2554;
                frontier_phi_60_61_ladder_3 = _2550;
                frontier_phi_60_61_ladder_4 = _2548;
                frontier_phi_60_61_ladder_5 = _2546;
            }
            _2666 = frontier_phi_60_61_ladder_5;
            _2668 = frontier_phi_60_61_ladder_4;
            _2670 = frontier_phi_60_61_ladder_3;
            _2672 = frontier_phi_60_61_ladder;
            _2674 = frontier_phi_60_61_ladder_2;
            _2676 = frontier_phi_60_61_ladder_1;
        }
        float _2681 = isnan(1.0) ? _689 : (isnan(_689) ? 1.0 : min(_689, 1.0));
        _2458 = (_2681 * _2672) + _1911;
        _2460 = (_2681 * _2674) + _1913;
        _2462 = (_2681 * _2676) + _1915;
        _2464 = ((_2666 * 0.039999999105930328369140625) * _2681) + _2244;
        _2466 = ((_2668 * 0.039999999105930328369140625) * _2681) + _2246;
        _2468 = ((_2670 * 0.039999999105930328369140625) * _2681) + _2248;
    }
    else
    {
        _2458 = _1911;
        _2460 = _1913;
        _2462 = _1915;
        _2464 = _2244;
        _2466 = _2246;
        _2468 = _2248;
    }
    float _4400 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _4411 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _4422 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _2485 = ((isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_2458 + ((isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0))) * _689))) + ((_2464 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _1527)) * cbPerFrame._m0[3u].x);
    float _2486 = ((isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2460 + ((isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))) * _689))) + ((_2466 + ((isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))) * _1527)) * cbPerFrame._m0[3u].x);
    float _2487 = ((isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2462 + ((isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))) * _689))) + ((_2468 + ((isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))) * _1527)) * cbPerFrame._m0[3u].x);
    uint _2488 = _664 + 6u;
    float _2496 = _626 / cbSceneParam._m0[86u].x;
    float _2497 = _627 / cbSceneParam._m0[86u].y;
    vec4 _2511 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2496, _2497, (log2((isnan(cbSceneParam._m0[77u].w) ? _549 : (isnan(_549) ? cbSceneParam._m0[77u].w : min(_549, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2513 = _2511.x;
    float _2514 = _2511.y;
    float _2515 = _2511.z;
    float _2516 = _2511.w;
    float _2608;
    float _2610;
    float _2612;
    float _2614;
    if (_549 > cbSceneParam._m0[78u].w)
    {
        float _2571 = isnan(_549) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _549 : min(cbSceneParam._m0[80u].w, _549));
        float _2572 = _2571 / _549;
        float _2583 = _2572 * _599;
        float _2584 = _600 * _2572;
        float _2585 = (-0.0) - _2584;
        float _2586 = _2572 * _601;
        float _2588 = (cbSceneParam._m0[77u].w * _2585) / _2571;
        float _2589 = _2588 + cbSceneParam._m0[79u].w;
        float _2590 = cbSceneParam._m0[79u].w - _2584;
        float _2596 = sqrt(((_2583 * _2583) + (_2584 * _2584)) + (_2586 * _2586));
        float _2599 = (1.0 - (cbSceneParam._m0[77u].w / _2571)) * _2596;
        float _2604 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2606 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2783;
        if (abs((_2585 - _2588) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2783 = ((((_2589 > 0.0) ? exp2(_2604 * _2589) : (2.0 - exp2(_2606 * _2589))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2599;
        }
        else
        {
            float _2727 = 1.0 / cbSceneParam._m0[80u].x;
            float _2728 = isnan(_2590) ? _2589 : (isnan(_2589) ? _2590 : max(_2589, _2590));
            float _2729 = isnan(_2590) ? _2589 : (isnan(_2589) ? _2590 : min(_2589, _2590));
            float _2738 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : min(_2728, 0.0));
            float _2739 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : min(_2729, 0.0));
            _2783 = ((abs(_2596 / _2585) * cbSceneParam._m0[80u].y) * ((((_2738 - _2739) * 2.0) - ((exp2(_2604 * (isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0)))) - exp2(_2604 * (isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0))))) * _2727)) - ((exp2(_2606 * _2738) - exp2(_2606 * _2739)) * _2727))) + (_2599 * cbSceneParam._m0[80u].z);
        }
        vec4 _2785 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2496, _2497, 1.0), 0.0);
        float _2794 = exp2((_2783 * (-1.44269502162933349609375)) * (1.0 - _2785.w));
        float _2795 = log2(_2794);
        float _2811 = log2(_2516);
        _2608 = (exp2(_2811 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2795 * cbSceneParam._m0[78u].x)) * _2785.x) / cbSceneParam._m0[78u].x)) + _2513;
        _2610 = (exp2(_2811 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2795 * cbSceneParam._m0[78u].y)) * _2785.y) / cbSceneParam._m0[78u].y)) + _2514;
        _2612 = (exp2(_2811 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2795 * cbSceneParam._m0[78u].z)) * _2785.z) / cbSceneParam._m0[78u].z)) + _2515;
        _2614 = _2794 * _2516;
    }
    else
    {
        _2608 = _2513;
        _2610 = _2514;
        _2612 = _2515;
        _2614 = _2516;
    }
    bool _2821;
    vec4 _2624;
    vec4 _2646;
    float _2648;
    float _2652;
    float _2653;
    float _2654;
    float _2655;
    bool _2665;
    for (;;)
    {
        _2624 = cbMatDynParam._m0[0u];
        float _2626 = roundEven(_2624.y);
        bool _2627 = _2626 == 3.0;
        float _2628 = log2(_2614);
        float _2635 = exp2(_2628 * cbSceneParam._m0[78u].x) * _2485;
        float _2636 = exp2(_2628 * cbSceneParam._m0[78u].y) * _2486;
        float _2637 = exp2(_2628 * cbSceneParam._m0[78u].z) * _2487;
        float _2644 = _615 + (-0.5);
        _2646 = cbMtdParam._m0[1u];
        _2648 = _2646.y * _2644;
        float _2651 = (_2626 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2652 = _2651 * (_2627 ? _2635 : (_2635 + (cbSceneParam._m0[72u].w * _2608)));
        _2653 = _2651 * (_2627 ? _2636 : (_2636 + (cbSceneParam._m0[72u].w * _2610)));
        _2654 = _2651 * (_2627 ? _2637 : (_2637 + (cbSceneParam._m0[72u].w * _2612)));
        _2655 = _2644 * 0.999000012874603271484375;
        _2665 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2665)
        {
            if ((cbInstanceData._m0[_664 + 7u].x + _2655) < 0.5)
            {
                _2821 = true;
                break;
            }
        }
        uint _2762 = _665 + uint(_2624.w);
        if ((cbInstanceData._m0[_2762].w < 1.0) && ((cbInstanceData._m0[_2762].w + _2655) < 0.5))
        {
            _2821 = true;
            break;
        }
        if ((_2648 + 1.0) < _2646.x)
        {
            _2821 = true;
            break;
        }
        _2821 = false;
        break;
    }
    float _3026;
    if (_2821)
    {
        discard_state = true;
        _3026 = 0.0;
    }
    else
    {
        _3026 = cbInstanceData._m0[_2488].w;
    }
    SV_Target.x = _2652;
    SV_Target.y = _2653;
    SV_Target.z = _2654;
    SV_Target.w = _3026;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2488].w;
    discard_exit();
}


