#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1043;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232;
    float _233;
    float _234;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
    }
    else
    {
        _232 = _218;
        _233 = _219;
        _234 = _220;
    }
    vec4 _255 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _284 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _289 = _284.x * cbMtdParam._m0[9u].x;
    float _290 = _284.y * cbMtdParam._m0[9u].y;
    float _291 = _284.z * cbMtdParam._m0[9u].z;
    vec4 _310 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _336 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[6u].w));
    float _363 = (texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((cbMtdParam._m0[13u].z * TEXCOORD_4.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[13u].z * TEXCOORD_4.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[13u].x;
    float _371 = (cbMtdParam._m0[13u].y * TEXCOORD.w) + 1.0;
    float _372 = (TEXCOORD_9.x - (_363 * (1.0 - TEXCOORD_9.x))) * _371;
    float _373 = (TEXCOORD_9.y - (_363 * (1.0 - TEXCOORD_9.y))) * _371;
    float _3356 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _374 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
    float _3367 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _375 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
    float _382 = (_374 * ((_310.x * cbMtdParam._m0[10u].x) - _289)) + _289;
    float _383 = (_374 * ((_310.y * cbMtdParam._m0[10u].y) - _290)) + _290;
    float _384 = (_374 * ((_310.z * cbMtdParam._m0[10u].z) - _291)) + _291;
    float _397 = ((cbMtdParam._m0[12u].x * 4.55000019073486328125) * _255.x) * ((((_336.x * cbMtdParam._m0[11u].x) - _382) * _375) + _382);
    float _400 = ((cbMtdParam._m0[12u].y * 4.55000019073486328125) * _255.y) * ((((_336.y * cbMtdParam._m0[11u].y) - _383) * _375) + _383);
    float _403 = ((cbMtdParam._m0[12u].z * 4.55000019073486328125) * _255.z) * ((((_336.z * cbMtdParam._m0[11u].z) - _384) * _375) + _384);
    vec4 _415 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[2u].w));
    float _417 = _415.x;
    float _418 = _415.y;
    float _419 = _415.z;
    vec4 _431 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _448 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[8u].w));
    float _459 = (_374 * (_431.x - _417)) + _417;
    float _460 = (_374 * (_431.y - _418)) + _418;
    float _461 = (_374 * (_431.z - _419)) + _419;
    float _470 = ((_448.z - _461) * _375) + _461;
    float _474 = ((((_448.x - _459) * _375) + _459) * 2.0) + (-1.0);
    float _476 = ((((_448.y - _460) * _375) + _460) * 2.0) + (-1.0);
    float _477 = dot(vec2(_474, _476), vec2(_474, _476));
    float _3378 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _482 = sqrt(1.0 - (isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0))));
    vec4 _496 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _506 = (((_496.x * 2.0) + (-1.0)) * cbMtdParam._m0[13u].w) + _474;
    float _507 = (((_496.y * 2.0) + (-1.0)) * cbMtdParam._m0[13u].w) + _476;
    float _510 = fma(_482, _232, fma(_507, _224 * TANGENT.x, (_210 * _202) * _506));
    float _513 = fma(_482, _233, fma(_507, _224 * TANGENT.y, (_210 * _203) * _506));
    float _516 = fma(_482, _234, fma(_507, _224 * TANGENT.z, (_210 * _204) * _506));
    float _520 = inversesqrt(dot(vec3(_510, _513, _516), vec3(_510, _513, _516)));
    float _521 = _520 * _510;
    float _522 = _520 * _513;
    float _523 = _520 * _516;
    float _3389 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _524 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
    float _3400 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _3411 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _3422 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _543 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _583 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _593 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _583);
    float _594 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _583);
    float _595 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _583);
    float _599 = inversesqrt(dot(vec3(_593, _594, _595), vec3(_593, _594, _595)));
    float _600 = _593 * _599;
    float _601 = _594 * _599;
    float _602 = _595 * _599;
    float _608 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _609 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _627 = fma(_523, cbSceneParam._m0[5u].z, fma(_522, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _521));
    float _630 = fma(_523, cbSceneParam._m0[6u].z, fma(_522, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _521));
    float _633 = fma(_523, cbSceneParam._m0[7u].z, fma(_522, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _521));
    uint _646 = uint(roundEven(NORMAL.w)) * 13u;
    uint _648 = (_646 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _654 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0)))) * cbInstanceData._m0[_648].x;
    float _655 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0)))) * cbInstanceData._m0[_648].y;
    float _656 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0)))) * cbInstanceData._m0[_648].z;
    float _3433 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _657 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
    float _3444 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _658 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
    float _3455 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _659 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
    vec4 _668 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _608, cbSceneParam._m0[86u].y * _609));
    float _671 = _668.x * TEXCOORD_9.w;
    float _672 = dot(vec3(_521, _522, _523), vec3(_600, _601, _602));
    float _675 = _672 * 2.0;
    float _679 = (_675 * _521) - _600;
    float _680 = (_675 * _522) - _601;
    float _681 = (_675 * _523) - _602;
    float _685 = abs(dot(vec3(_600, _601, _602), vec3(_521, _522, _523)));
    float _3466 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _687 = sqrt(_524);
    float _700 = exp2((_687 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_687 * 3.0));
    float _732 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _736 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _740 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1042;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _767 = fma(_740, cbModelParam._m0[26u].z, fma(_736, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _732));
        float _771 = fma(_740, cbModelParam._m0[27u].z, fma(_736, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _732));
        float _775 = fma(_740, cbModelParam._m0[28u].z, fma(_736, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _732));
        float _800 = _732 + _521;
        float _801 = _736 + _522;
        float _802 = _740 + _523;
        float _812 = fma(_802, cbModelParam._m0[26u].z, fma(_801, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _800)) - _767;
        float _813 = fma(_802, cbModelParam._m0[27u].z, fma(_801, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _800)) - _771;
        float _814 = fma(_802, cbModelParam._m0[28u].z, fma(_801, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _800)) - _775;
        float _818 = inversesqrt(dot(vec3(_812, _813, _814), vec3(_812, _813, _814)));
        float _831 = ((_818 * _812) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_767 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _832 = ((_818 * _813) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_771 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _833 = ((_818 * _814) / cbModelParam._m0[34u].z) + ((((((_775 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        float _870 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _871 = _870 * (_836.x + (-0.5));
        float _872 = _870 * (_836.y + (-0.5));
        float _873 = _870 * (_836.z + (-0.5));
        float _880 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _881 = _880 * (_843.x + (-0.5));
        float _882 = _880 * (_843.y + (-0.5));
        float _883 = _880 * (_843.z + (-0.5));
        float _890 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_850.x + (-0.5));
        float _892 = _890 * (_850.y + (-0.5));
        float _893 = _890 * (_850.z + (-0.5));
        float _900 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_857.x + (-0.5));
        float _902 = _900 * (_857.y + (-0.5));
        float _903 = _900 * (_857.z + (-0.5));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = _871 * 0.5;
        float _908 = _881 * 0.5;
        float _909 = _891 * 0.5;
        float _910 = dot(vec3(_907, _908, _909), vec3(_907, _908, _909));
        float _915 = (_910 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_910);
        float _924 = (dot(vec3(_521, _522, _523), vec3(_915 * _907, _915 * _908, _915 * _909)) + 1.0) * 0.5;
        float _3492 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _934 = sqrt(((_908 * _908) + (_907 * _907)) + (_909 * _909)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _3503 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _936 = _935 * 2.0;
        float _940 = (1.0 - _935) / (_935 + 1.0);
        float _3514 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _950 = ((((1.0 - _941) * (_936 + 2.0)) * exp2(log2(isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * (_936 + 1.0))) + _941) * _904;
        float _951 = _872 * 0.5;
        float _952 = _882 * 0.5;
        float _953 = _892 * 0.5;
        float _954 = dot(vec3(_951, _952, _953), vec3(_951, _952, _953));
        float _959 = (_954 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_954);
        float _967 = (dot(vec3(_521, _522, _523), vec3(_959 * _951, _959 * _952, _959 * _953)) + 1.0) * 0.5;
        float _3525 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _976 = sqrt(((_952 * _952) + (_951 * _951)) + (_953 * _953)) / (_905 + 9.9999997473787516355514526367188e-06);
        float _3536 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _978 = _977 * 2.0;
        float _982 = (1.0 - _977) / (_977 + 1.0);
        float _3547 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _992 = ((((1.0 - _983) * (_978 + 2.0)) * exp2(log2(isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) * (_978 + 1.0))) + _983) * _905;
        float _993 = _873 * 0.5;
        float _994 = _883 * 0.5;
        float _995 = _893 * 0.5;
        float _996 = dot(vec3(_993, _994, _995), vec3(_993, _994, _995));
        float _1001 = (_996 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_996);
        float _1009 = (dot(vec3(_521, _522, _523), vec3(_1001 * _993, _1001 * _994, _1001 * _995)) + 1.0) * 0.5;
        float _3558 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1018 = sqrt(((_994 * _994) + (_993 * _993)) + (_995 * _995)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3569 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _1020 = _1019 * 2.0;
        float _1024 = (1.0 - _1019) / (_1019 + 1.0);
        float _3580 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _1034 = ((((1.0 - _1025) * (_1020 + 2.0)) * exp2(log2(isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))) * (_1020 + 1.0))) + _1025) * _906;
        _1042 = _873;
        _1044 = _872;
        _1045 = _871;
        _1046 = _883;
        _1047 = _882;
        _1048 = _881;
        _1049 = _893;
        _1050 = _892;
        _1051 = _891;
        _1052 = _906;
        _1053 = _905;
        _1054 = _904;
        _1055 = cbModelParam._m0[36u].z * (isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0)));
        _1056 = cbModelParam._m0[36u].z * (isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0)));
        _1057 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0)));
    }
    else
    {
        _1042 = _1043;
        _1044 = _1043;
        _1045 = _1043;
        _1046 = _1043;
        _1047 = _1043;
        _1048 = _1043;
        _1049 = _1043;
        _1050 = _1043;
        _1051 = _1043;
        _1052 = _1043;
        _1053 = _1043;
        _1054 = _1043;
        _1055 = 0.0;
        _1056 = 0.0;
        _1057 = 0.0;
    }
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1083 = fma(_740, cbModelParam._m0[30u].z, fma(_736, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _732));
        float _1087 = fma(_740, cbModelParam._m0[31u].z, fma(_736, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _732));
        float _1091 = fma(_740, cbModelParam._m0[32u].z, fma(_736, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _732));
        float _1114 = _732 + _521;
        float _1115 = _736 + _522;
        float _1116 = _740 + _523;
        float _1126 = fma(_1116, cbModelParam._m0[30u].z, fma(_1115, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1114)) - _1083;
        float _1127 = fma(_1116, cbModelParam._m0[31u].z, fma(_1115, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1114)) - _1087;
        float _1128 = fma(_1116, cbModelParam._m0[32u].z, fma(_1115, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1114)) - _1091;
        float _1132 = inversesqrt(dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128)));
        float _1145 = ((_1132 * _1126) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1083 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1146 = ((_1132 * _1127) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1087 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1147 = ((_1132 * _1128) / cbModelParam._m0[35u].z) + ((((((_1091 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        float _1182 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1149.x + (-0.5));
        float _1184 = _1182 * (_1149.y + (-0.5));
        float _1185 = _1182 * (_1149.z + (-0.5));
        float _1192 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1156.x + (-0.5));
        float _1194 = _1192 * (_1156.y + (-0.5));
        float _1195 = _1192 * (_1156.z + (-0.5));
        float _1202 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1163.x + (-0.5));
        float _1204 = _1202 * (_1163.y + (-0.5));
        float _1205 = _1202 * (_1163.z + (-0.5));
        float _1212 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1170.x + (-0.5));
        float _1214 = _1212 * (_1170.y + (-0.5));
        float _1215 = _1212 * (_1170.z + (-0.5));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = _1183 * 0.5;
        float _1220 = _1193 * 0.5;
        float _1221 = _1203 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1235 = (dot(vec3(_521, _522, _523), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _3621 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1244 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _3632 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _3643 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * (_1246 + 1.0))) + _1251) * _1216;
        float _1261 = _1184 * 0.5;
        float _1262 = _1194 * 0.5;
        float _1263 = _1204 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_521, _522, _523), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _3654 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _3665 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _3676 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * (_1288 + 1.0))) + _1293) * _1217;
        float _1303 = _1185 * 0.5;
        float _1304 = _1195 * 0.5;
        float _1305 = _1205 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_521, _522, _523), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _3687 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _3698 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _3709 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_1330 + 1.0))) + _1335) * _1218;
        _1352 = _1185;
        _1353 = _1184;
        _1354 = _1183;
        _1355 = _1195;
        _1356 = _1194;
        _1357 = _1193;
        _1358 = _1205;
        _1359 = _1204;
        _1360 = _1203;
        _1361 = _1218;
        _1362 = _1217;
        _1363 = _1216;
        _1364 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
        _1365 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
        _1366 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
    }
    else
    {
        _1352 = _1043;
        _1353 = _1043;
        _1354 = _1043;
        _1355 = _1043;
        _1356 = _1043;
        _1357 = _1043;
        _1358 = _1043;
        _1359 = _1043;
        _1360 = _1043;
        _1361 = _1043;
        _1362 = _1043;
        _1363 = _1043;
        _1364 = 0.0;
        _1365 = 0.0;
        _1366 = 0.0;
    }
    float _1376 = (cbModelParam._m0[1u].x * (_1364 - _1055)) + _1055;
    float _1377 = (cbModelParam._m0[1u].x * (_1365 - _1056)) + _1056;
    float _1378 = (cbModelParam._m0[1u].x * (_1366 - _1057)) + _1057;
    float _1399 = fma(_1378, cbSceneParam._m0[89u].z, fma(_1377, cbSceneParam._m0[89u].y, _1376 * cbSceneParam._m0[89u].x));
    float _1402 = fma(_1378, cbSceneParam._m0[90u].z, fma(_1377, cbSceneParam._m0[90u].y, _1376 * cbSceneParam._m0[90u].x));
    float _1405 = fma(_1378, cbSceneParam._m0[91u].z, fma(_1377, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1376));
    float _1420 = _679 * 0.5;
    float _1421 = _680 * 0.5;
    float _1422 = _681 * 0.5;
    float _1423 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1354, _1357, _1360, _1363));
    float _1426 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1353, _1356, _1359, _1362));
    float _1429 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1352, _1355, _1358, _1361));
    float _1463;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1436 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1042, _1046, _1049, _1052));
        float _1440 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1044, _1047, _1050, _1053));
        float _1444 = dot(vec4(_1420, _1421, _1422, 1.0), vec4(_1045, _1048, _1051, _1054));
        float _1451 = dot(vec4(cbModelParam._m0[39u]), vec4(_1420, _1421, _1422, 1.0));
        _1463 = dot(vec3(isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)), isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1451) ? 0.0 : (isnan(0.0) ? _1451 : max(0.0, _1451))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1463 = 1.0;
    }
    float _1474;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1465 = dot(vec4(cbModelParam._m0[40u]), vec4(_1420, _1421, _1422, 1.0));
        _1474 = dot(vec3(isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)), isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)), isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1465) ? 0.0 : (isnan(0.0) ? _1465 : max(0.0, _1465))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1474 = 1.0;
    }
    float _1478 = (_1474 * cbModelParam._m0[1u].x) + (_1463 * (1.0 - cbModelParam._m0[1u].x));
    float _1488 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _524);
    float _1489 = isnan(_1488) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1488 : min(cbModelParam._m0[25u].z, _1488));
    float _1570;
    float _1572;
    float _1574;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1537 = fma(_740, cbModelParam._m0[13u].z, fma(_736, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _732)) + cbModelParam._m0[13u].w;
        float _1541 = fma(_740, cbModelParam._m0[14u].z, fma(_736, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _732)) + cbModelParam._m0[14u].w;
        float _1545 = fma(_740, cbModelParam._m0[15u].z, fma(_736, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _732)) + cbModelParam._m0[15u].w;
        float _1548 = fma(_681, cbModelParam._m0[13u].z, fma(_680, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _679));
        float _1551 = fma(_681, cbModelParam._m0[14u].z, fma(_680, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _679));
        float _1554 = fma(_681, cbModelParam._m0[15u].z, fma(_680, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _679));
        float _1582;
        if (_1548 > 0.0)
        {
            _1582 = abs((1.0 - _1537) / _1548);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1537 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1582 = frontier_phi_16_14_ladder;
        }
        float _1786;
        if (_1551 > 0.0)
        {
            _1786 = abs((1.0 - _1541) / _1551);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1541 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1786 = frontier_phi_25_21_ladder;
        }
        float _2029;
        if (_1554 > 0.0)
        {
            _2029 = abs((1.0 - _1545) / _1554);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1554 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1545 + 1.0) / _1554);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2029 = frontier_phi_37_32_ladder;
        }
        float _2031 = isnan(_1786) ? _1582 : (isnan(_1582) ? _1786 : min(_1582, _1786));
        float _2032 = isnan(_2029) ? _2031 : (isnan(_2031) ? _2029 : min(_2031, _2029));
        float _2036 = (_2032 * _1548) + _1537;
        float _2037 = (_2032 * _1551) + _1541;
        float _2038 = (_2032 * _1554) + _1545;
        float _2039 = _2032 * 9.9999997473787516355514526367188e-05;
        float _2041 = (-1.0) - _2039;
        float _2043 = _2039 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2038 > _2043) || ((_2038 < _2041) || ((_2037 > _2043) || ((_2037 < _2041) || ((_2036 < _2041) || (_2036 > _2043))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2162 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2038, cbModelParam._m0[9u].z, fma(_2037, cbModelParam._m0[9u].y, _2036 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2038, cbModelParam._m0[10u].z, fma(_2037, cbModelParam._m0[10u].y, _2036 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2038, cbModelParam._m0[11u].z, fma(_2037, cbModelParam._m0[11u].y, _2036 * cbModelParam._m0[11u].x))), _1489);
            frontier_phi_15_37_ladder = _2162.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2162.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2162.x * cbModelParam._m0[1u].y;
        }
        _1570 = frontier_phi_15_37_ladder_2;
        _1572 = frontier_phi_15_37_ladder_1;
        _1574 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1558 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_679, _680, _681), _1489);
        _1570 = _1558.x * cbModelParam._m0[1u].y;
        _1572 = _1558.y * cbModelParam._m0[1u].y;
        _1574 = _1558.z * cbModelParam._m0[1u].y;
    }
    float _1578 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _524);
    float _1579 = isnan(_1578) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1578 : min(cbModelParam._m0[25u].w, _1578));
    float _1672;
    float _1674;
    float _1676;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1636 = fma(_740, cbModelParam._m0[21u].z, fma(_736, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _732)) + cbModelParam._m0[21u].w;
        float _1640 = fma(_740, cbModelParam._m0[22u].z, fma(_736, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _732)) + cbModelParam._m0[22u].w;
        float _1644 = fma(_740, cbModelParam._m0[23u].z, fma(_736, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _732)) + cbModelParam._m0[23u].w;
        float _1647 = fma(_681, cbModelParam._m0[21u].z, fma(_680, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _679));
        float _1650 = fma(_681, cbModelParam._m0[22u].z, fma(_680, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _679));
        float _1653 = fma(_681, cbModelParam._m0[23u].z, fma(_680, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _679));
        float _1791;
        if (_1647 > 0.0)
        {
            _1791 = abs((1.0 - _1636) / _1647);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1636 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1791 = frontier_phi_27_23_ladder;
        }
        float _2056;
        if (_1650 > 0.0)
        {
            _2056 = abs((1.0 - _1640) / _1650);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1640 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2056 = frontier_phi_39_34_ladder;
        }
        float _2261;
        if (_1653 > 0.0)
        {
            _2261 = abs((1.0 - _1644) / _1653);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1644 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2261 = frontier_phi_48_45_ladder;
        }
        float _2263 = isnan(_2056) ? _1791 : (isnan(_1791) ? _2056 : min(_1791, _2056));
        float _2264 = isnan(_2261) ? _2263 : (isnan(_2263) ? _2261 : min(_2263, _2261));
        float _2268 = (_2264 * _1647) + _1636;
        float _2269 = (_2264 * _1650) + _1640;
        float _2270 = (_2264 * _1653) + _1644;
        float _2271 = _2264 * 9.9999997473787516355514526367188e-05;
        float _2272 = (-1.0) - _2271;
        float _2274 = _2271 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2270 > _2274) || ((_2270 < _2272) || ((_2269 > _2274) || ((_2269 < _2272) || ((_2268 < _2272) || (_2268 > _2274))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2468 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2270, cbModelParam._m0[17u].z, fma(_2269, cbModelParam._m0[17u].y, _2268 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2270, cbModelParam._m0[18u].z, fma(_2269, cbModelParam._m0[18u].y, _2268 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2270, cbModelParam._m0[19u].z, fma(_2269, cbModelParam._m0[19u].y, _2268 * cbModelParam._m0[19u].x))), _1579);
            frontier_phi_24_48_ladder = _2468.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2468.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2468.x * cbModelParam._m0[1u].z;
        }
        _1672 = frontier_phi_24_48_ladder_2;
        _1674 = frontier_phi_24_48_ladder_1;
        _1676 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1656 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_679, _680, _681), _1579);
        _1672 = _1656.x * cbModelParam._m0[1u].z;
        _1674 = _1656.y * cbModelParam._m0[1u].z;
        _1676 = _1656.z * cbModelParam._m0[1u].z;
    }
    float _1688 = ((((1.0 - _700) * ((_687 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_700 * _687)) * _671;
    float _1689 = _1688 * ((cbModelParam._m0[1u].w * (_1672 - _1570)) + _1570);
    float _1690 = _1688 * ((cbModelParam._m0[1u].w * (_1674 - _1572)) + _1572);
    float _1691 = _1688 * ((cbModelParam._m0[1u].w * (_1676 - _1574)) + _1574);
    float _1694 = fma(_1691, cbSceneParam._m0[89u].z, fma(_1690, cbSceneParam._m0[89u].y, _1689 * cbSceneParam._m0[89u].x));
    float _1697 = fma(_1691, cbSceneParam._m0[90u].z, fma(_1690, cbSceneParam._m0[90u].y, _1689 * cbSceneParam._m0[90u].x));
    float _1700 = fma(_1691, cbSceneParam._m0[91u].z, fma(_1690, cbSceneParam._m0[91u].y, _1689 * cbSceneParam._m0[91u].x));
    uvec4 _1710 = floatBitsToUint(cbInstanceData._m0[_646 + 5u]);
    uint _1712 = _1710.x * 14u;
    uint _1713 = _1712 + 13u;
    float _1720 = _671 + (-1.0);
    float _1725 = (cbLight._m0[_1713].x * _1720) + 1.0;
    float _1726 = (cbLight._m0[_1713].y * _1720) + 1.0;
    float _1727 = (cbLight._m0[_1713].z * _1720) + 1.0;
    float _1728 = (cbLight._m0[_1713].w * _1720) + 1.0;
    uint _1729 = _1712 + 5u;
    float _1735 = isnan(1.0) ? _1726 : (isnan(_1726) ? 1.0 : min(_1726, 1.0));
    uint _1739 = _1712 + 4u;
    float _1745 = isnan(1.0) ? _1725 : (isnan(_1725) ? 1.0 : min(_1725, 1.0));
    uint _1749 = _1712 | 1u;
    float _1760 = dot(vec3(cbLight._m0[_1712].xyz), vec3(_521, _522, _523));
    float _1763 = dot(vec3(cbLight._m0[_1749].xyz), vec3(_521, _522, _523));
    float _3845 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _3856 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1768 = (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * 0.3183098733425140380859375;
    float _1770 = (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * 0.3183098733425140380859375;
    float _1777 = ((cbLight._m0[_1729].x * _1735) * _1770) + ((cbLight._m0[_1739].x * _1745) * _1768);
    float _1778 = ((_1735 * cbLight._m0[_1729].y) * _1770) + ((_1745 * cbLight._m0[_1739].y) * _1768);
    float _1779 = ((_1735 * cbLight._m0[_1729].z) * _1770) + ((_1745 * cbLight._m0[_1739].z) * _1768);
    uvec4 _1783 = floatBitsToUint(cbLight._m0[_1712 + 12u]);
    bool _1785 = _1783.x == 0u;
    float _1796;
    float _1798;
    float _1800;
    if (_1785)
    {
        _1796 = _1777;
        _1798 = _1778;
        _1800 = _1779;
    }
    else
    {
        uint _1804 = _1712 + 6u;
        float _1820 = (dot(vec3(cbLight._m0[_1712 + 2u].xyz), vec3(_521, _522, _523)) * 0.5) + 0.5;
        float _1821 = _1820 * _1820;
        float _3867 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1822 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1823 = isnan(1.0) ? _1727 : (isnan(_1727) ? 1.0 : min(_1727, 1.0));
        _1796 = (((cbLight._m0[_1804].x * 0.3183098733425140380859375) * _1822) * _1823) + _1777;
        _1798 = (((cbLight._m0[_1804].y * 0.3183098733425140380859375) * _1822) * _1823) + _1778;
        _1800 = (((cbLight._m0[_1804].z * 0.3183098733425140380859375) * _1822) * _1823) + _1779;
    }
    bool _1803 = _1783.y == 0u;
    float _1841;
    float _1843;
    float _1845;
    if (_1803)
    {
        _1841 = _1796;
        _1843 = _1798;
        _1845 = _1800;
    }
    else
    {
        uint _2000 = _1712 + 7u;
        float _2016 = (dot(vec3(cbLight._m0[_1712 + 3u].xyz), vec3(_521, _522, _523)) * 0.5) + 0.5;
        float _2017 = _2016 * _2016;
        float _3883 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2018 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _2019 = isnan(1.0) ? _1728 : (isnan(_1728) ? 1.0 : min(_1728, 1.0));
        _1841 = (((cbLight._m0[_2000].x * 0.3183098733425140380859375) * _2018) * _2019) + _1796;
        _1843 = (((cbLight._m0[_2000].y * 0.3183098733425140380859375) * _2018) * _2019) + _1798;
        _1845 = (((cbLight._m0[_2000].z * 0.3183098733425140380859375) * _2018) * _2019) + _1800;
    }
    uint _1848 = _1712 + 8u;
    float _1861 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1712].w)) * _524) * 0.949999988079071044921875);
    float _1862 = _1861 * _1861;
    float _1863 = cbLight._m0[_1712].x + _600;
    float _1864 = cbLight._m0[_1712].y + _601;
    float _1865 = cbLight._m0[_1712].z + _602;
    float _1869 = inversesqrt(dot(vec3(_1863, _1864, _1865), vec3(_1863, _1864, _1865)));
    float _1870 = _1869 * _1863;
    float _1871 = _1869 * _1864;
    float _1872 = _1869 * _1865;
    float _1873 = dot(vec3(_521, _522, _523), vec3(cbLight._m0[_1712].xyz));
    float _3899 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1876 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _3910 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _1877 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _1878 = dot(vec3(_521, _522, _523), vec3(_1870, _1871, _1872));
    float _3921 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1881 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _1882 = dot(vec3(cbLight._m0[_1712].xyz), vec3(_1870, _1871, _1872));
    float _3932 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _1886 = _1862 * _1862;
    float _1890 = ((_1881 * _1881) * (_1886 + (-1.0))) + 1.0;
    float _1901 = (exp2(log2(1.0 - (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1902 = 1.0 - _1862;
    float _1913 = (0.5 / (((_1877 * ((_1876 * _1902) + _1862)) + 9.9999999392252902907785028219223e-09) + (((_1877 * _1902) + _1862) * _1876))) * _1876;
    float _3943 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1915 = (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (_1886 / ((_1890 * _1890) * 3.141590118408203125));
    uint _1926 = _1712 + 9u;
    float _1937 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1749].w)) * _524) * 0.949999988079071044921875);
    float _1938 = _1937 * _1937;
    float _1939 = cbLight._m0[_1749].x + _600;
    float _1940 = cbLight._m0[_1749].y + _601;
    float _1941 = cbLight._m0[_1749].z + _602;
    float _1945 = inversesqrt(dot(vec3(_1939, _1940, _1941), vec3(_1939, _1940, _1941)));
    float _1946 = _1945 * _1939;
    float _1947 = _1945 * _1940;
    float _1948 = _1945 * _1941;
    float _1949 = dot(vec3(_521, _522, _523), vec3(cbLight._m0[_1749].xyz));
    float _3954 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1952 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _1953 = dot(vec3(_521, _522, _523), vec3(_1946, _1947, _1948));
    float _3965 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1956 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _1957 = dot(vec3(cbLight._m0[_1749].xyz), vec3(_1946, _1947, _1948));
    float _3976 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1961 = _1938 * _1938;
    float _1965 = ((_1956 * _1956) * (_1961 + (-1.0))) + 1.0;
    float _1974 = (exp2(log2(1.0 - (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1975 = 1.0 - _1938;
    float _1985 = (0.5 / (((_1877 * ((_1952 * _1975) + _1938)) + 9.9999999392252902907785028219223e-09) + (((_1877 * _1975) + _1938) * _1952))) * _1952;
    float _3987 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1987 = (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_1961 / ((_1965 * _1965) * 3.141590118408203125));
    float _1997 = (((_1974 * cbLight._m0[_1926].x) * _1987) * _1735) + (((_1901 * cbLight._m0[_1848].x) * _1915) * _1745);
    float _1998 = (((_1974 * cbLight._m0[_1926].y) * _1987) * _1735) + (((_1901 * cbLight._m0[_1848].y) * _1915) * _1745);
    float _1999 = (((_1974 * cbLight._m0[_1926].z) * _1987) * _1735) + (((_1901 * cbLight._m0[_1848].z) * _1915) * _1745);
    float _2061;
    float _2063;
    float _2065;
    if (_1785)
    {
        _2061 = _1997;
        _2063 = _1998;
        _2065 = _1999;
    }
    else
    {
        uint _2067 = _1712 + 2u;
        uint _2071 = _1712 + 10u;
        float _2085 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2067].w)) * _524) * 0.949999988079071044921875);
        float _2086 = _2085 * _2085;
        float _2087 = cbLight._m0[_2067].x + _600;
        float _2088 = cbLight._m0[_2067].y + _601;
        float _2089 = cbLight._m0[_2067].z + _602;
        float _2093 = inversesqrt(dot(vec3(_2087, _2088, _2089), vec3(_2087, _2088, _2089)));
        float _2094 = _2093 * _2087;
        float _2095 = _2093 * _2088;
        float _2096 = _2093 * _2089;
        float _2097 = dot(vec3(_521, _522, _523), vec3(cbLight._m0[_2067].xyz));
        float _3998 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2100 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _2101 = dot(vec3(_521, _522, _523), vec3(_2094, _2095, _2096));
        float _4009 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2104 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _2105 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_2094, _2095, _2096));
        float _4020 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2109 = _2086 * _2086;
        float _2113 = ((_2104 * _2104) * (_2109 + (-1.0))) + 1.0;
        float _2122 = (exp2(log2(1.0 - (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2123 = 1.0 - _2086;
        float _2133 = (0.5 / (((_1877 * ((_2100 * _2123) + _2086)) + 9.9999999392252902907785028219223e-09) + (((_1877 * _2123) + _2086) * _2100))) * _2100;
        float _4031 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2135 = (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_2109 / ((_2113 * _2113) * 3.141590118408203125));
        float _2136 = isnan(1.0) ? _1727 : (isnan(_1727) ? 1.0 : min(_1727, 1.0));
        _2061 = (((_2122 * cbLight._m0[_2071].x) * _2135) * _2136) + _1997;
        _2063 = (((_2122 * cbLight._m0[_2071].y) * _2135) * _2136) + _1998;
        _2065 = (((_2122 * cbLight._m0[_2071].z) * _2135) * _2136) + _1999;
    }
    float _2171;
    float _2173;
    float _2175;
    if (_1803)
    {
        _2171 = _2061;
        _2173 = _2063;
        _2175 = _2065;
    }
    else
    {
        uint _2182 = _1712 + 3u;
        uint _2186 = _1712 + 11u;
        float _2200 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2182].w)) * _524) * 0.949999988079071044921875);
        float _2201 = _2200 * _2200;
        float _2202 = cbLight._m0[_2182].x + _600;
        float _2203 = cbLight._m0[_2182].y + _601;
        float _2204 = cbLight._m0[_2182].z + _602;
        float _2208 = inversesqrt(dot(vec3(_2202, _2203, _2204), vec3(_2202, _2203, _2204)));
        float _2209 = _2208 * _2202;
        float _2210 = _2208 * _2203;
        float _2211 = _2208 * _2204;
        float _2212 = dot(vec3(_521, _522, _523), vec3(cbLight._m0[_2182].xyz));
        float _4047 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2215 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _2216 = dot(vec3(_521, _522, _523), vec3(_2209, _2210, _2211));
        float _4058 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2219 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _2220 = dot(vec3(cbLight._m0[_2182].xyz), vec3(_2209, _2210, _2211));
        float _4069 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2224 = _2201 * _2201;
        float _2228 = ((_2219 * _2219) * (_2224 + (-1.0))) + 1.0;
        float _2237 = (exp2(log2(1.0 - (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2238 = 1.0 - _2201;
        float _2248 = (0.5 / (((_1877 * ((_2215 * _2238) + _2201)) + 9.9999999392252902907785028219223e-09) + (((_1877 * _2238) + _2201) * _2215))) * _2215;
        float _4080 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2250 = (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_2224 / ((_2228 * _2228) * 3.141590118408203125));
        float _2251 = isnan(1.0) ? _1728 : (isnan(_1728) ? 1.0 : min(_1728, 1.0));
        _2171 = (((_2237 * cbLight._m0[_2186].x) * _2250) * _2251) + _2061;
        _2173 = (((_2237 * cbLight._m0[_2186].y) * _2250) * _2251) + _2063;
        _2175 = (((_2237 * cbLight._m0[_2186].z) * _2250) * _2251) + _2065;
    }
    float _2385;
    float _2387;
    float _2389;
    float _2391;
    float _2393;
    float _2395;
    if (_1710.y == 0u)
    {
        float _2326 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2327 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2326;
        float _2328 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2326;
        float _2329 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2326;
        uvec4 _2341 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2342 = _2341.x;
        uint _2353 = uint((float(_2341.y) * floor(float(uint(cbSceneParam._m0[85u].y * _609) / _2342))) + floor(float(uint(cbSceneParam._m0[85u].x * _608) / _2342)));
        float _2363 = (log2(_2329 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2364 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        uint _2367 = uint(isnan(14.0) ? _2364 : (isnan(_2364) ? 14.0 : min(_2364, 14.0)));
        uvec4 _2372 = texelFetch(g_lightClusterGridBuffer, int(((_2367 << 2u) + (_2353 << 6u)) >> 2u));
        uint _2373 = _2372.x;
        uint _2374 = _2341.z;
        float _2473;
        float _2475;
        float _2477;
        float _2479;
        float _2481;
        float _2483;
        if (((((1u << ((_2374 >> 4u) & 15u)) + 4294967295u) & _2373) == 0u) || ((_2374 & 240u) == 0u))
        {
            _2473 = 0.0;
            _2475 = 0.0;
            _2477 = 0.0;
            _2479 = 0.0;
            _2481 = 0.0;
            _2483 = 0.0;
        }
        else
        {
            float _2474;
            float _2476;
            float _2478;
            float _2480;
            float _2482;
            float _2484;
            float _2617 = 0.0;
            float _2618 = 0.0;
            float _2619 = 0.0;
            float _2620 = 0.0;
            float _2621 = 0.0;
            float _2622 = 0.0;
            uint _2623 = 0u;
            uint _2632;
            bool _2633;
            for (;;)
            {
                _2632 = texelFetch(g_lightClassification, int((((_2367 << 5u) + (_2353 << 9u)) + (_2623 << 2u)) >> 2u)).x;
                _2633 = _2632 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2633)
                {
                    frontier_phi_63_pred = _2622;
                    frontier_phi_63_pred_1 = _2621;
                    frontier_phi_63_pred_2 = _2620;
                    frontier_phi_63_pred_3 = _2619;
                    frontier_phi_63_pred_4 = _2618;
                    frontier_phi_63_pred_5 = _2617;
                }
                else
                {
                    float _2741;
                    float _2742;
                    float _2743;
                    float _2744;
                    float _2745;
                    float _2746;
                    uint _2747;
                    _2741 = _2617;
                    _2742 = _2618;
                    _2743 = _2619;
                    _2744 = _2620;
                    _2745 = _2621;
                    _2746 = _2622;
                    _2747 = _2632;
                    float _2673;
                    float _2674;
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    for (;;)
                    {
                        uint _2751 = uint(findLSB(_2747)) + (_2623 << 5u);
                        uint _2748 = (_2747 + 4294967295u) & _2747;
                        uint _2753 = _2751 * 48u;
                        vec4 _2767 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2753)).x, texelFetch(g_PointLightRenderingBuffer, int(_2753 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2753 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2753 + 3u)).x));
                        uint _2773 = (_2751 * 48u) + 4u;
                        vec4 _2786 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2773)).x, texelFetch(g_PointLightRenderingBuffer, int(_2773 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2773 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2773 + 3u)).x));
                        uint _2792 = (_2751 * 48u) + 8u;
                        vec3 _2803 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2792)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 2u)).x));
                        float _2807 = _2767.x - _2327;
                        float _2808 = _2767.y - _2328;
                        float _2809 = _2767.z - _2329;
                        float _2810 = dot(vec3(_2807, _2808, _2809), vec3(_2807, _2808, _2809));
                        float _2813 = inversesqrt(_2810);
                        float _2814 = _2813 * _2807;
                        float _2815 = _2813 * _2808;
                        float _2816 = _2813 * _2809;
                        float _2817 = dot(vec3(_627, _630, _633), vec3(_2814, _2815, _2816));
                        float _2822 = 1.0 - (_2810 * _2767.w);
                        float _4106 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
                        float _2823 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
                        float _2824 = sqrt(_2810) * _2786.w;
                        float _2827 = 1.39999997615814208984375 / (_2824 + 1.39999997615814208984375);
                        float _2828 = _2827 * _2827;
                        float _2831 = ((1.0 - _2828) * _2817) + _2828;
                        float _2834 = _2824 * _2824;
                        float _2838 = ((isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0))) * _2823) / ((_2834 * 0.699999988079071044921875) + 1.0);
                        float _2842 = (-0.0) - _2327;
                        float _2843 = (-0.0) - _2328;
                        float _2844 = (-0.0) - _2329;
                        float _2848 = inversesqrt(dot(vec3(_2842, _2843, _2844), vec3(_2842, _2843, _2844)));
                        float _2849 = _2848 * _2842;
                        float _2850 = _2848 * _2843;
                        float _2851 = _2848 * _2844;
                        float _2859 = exp2(log2(1.0 / ((_2834 * 3.5) + 5.0)) * 0.25);
                        float _2860 = 1.0 - _687;
                        float _2867 = sqrt(1.0 - ((1.0 - (_2860 * _2860)) * (1.0 - (_2859 * _2859))));
                        float _2868 = _2867 * _2867;
                        float _2869 = _2868 * _2868;
                        float _2870 = _2849 + _2814;
                        float _2871 = _2850 + _2815;
                        float _2872 = _2851 + _2816;
                        float _2876 = inversesqrt(dot(vec3(_2870, _2871, _2872), vec3(_2870, _2871, _2872)));
                        float _2880 = dot(vec3(_627, _630, _633), vec3(_2849, _2850, _2851));
                        float _4122 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
                        float _2883 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
                        float _2884 = dot(vec3(_627, _630, _633), vec3(_2876 * _2870, _2876 * _2871, _2876 * _2872));
                        float _4133 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
                        float _2887 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
                        float _2891 = ((_2887 * _2887) * (_2869 + (-1.0))) + 1.0;
                        float _2892 = _2827 * _2868;
                        float _2893 = _2892 * _2892;
                        float _2896 = ((1.0 - _2893) * _2817) + _2893;
                        float _4144 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
                        float _2897 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
                        float _2898 = 1.0 - _2868;
                        float _2908 = (0.5 / (((_2897 * ((_2883 * _2898) + _2868)) + 9.9999999392252902907785028219223e-09) + (((_2897 * _2898) + _2868) * _2883))) * _2897;
                        float _4155 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
                        float _2919 = (((_2869 * 3.1415927410125732421875) * (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) / ((_2891 * _2891) * ((_2834 * 2.1991131305694580078125) + 3.141590118408203125))) * _2823;
                        _2676 = (_2838 * _2786.x) + _2744;
                        _2677 = (_2838 * _2786.y) + _2745;
                        _2678 = (_2838 * _2786.z) + _2746;
                        _2673 = (_2919 * _2803.x) + _2741;
                        _2674 = (_2919 * _2803.y) + _2742;
                        _2675 = (_2919 * _2803.z) + _2743;
                        if (_2748 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2741 = _2673;
                            _2742 = _2674;
                            _2743 = _2675;
                            _2744 = _2676;
                            _2745 = _2677;
                            _2746 = _2678;
                            _2747 = _2748;
                        }
                    }
                    frontier_phi_63_pred = _2678;
                    frontier_phi_63_pred_1 = _2677;
                    frontier_phi_63_pred_2 = _2676;
                    frontier_phi_63_pred_3 = _2675;
                    frontier_phi_63_pred_4 = _2674;
                    frontier_phi_63_pred_5 = _2673;
                }
                _2484 = frontier_phi_63_pred;
                _2482 = frontier_phi_63_pred_1;
                _2480 = frontier_phi_63_pred_2;
                _2478 = frontier_phi_63_pred_3;
                _2476 = frontier_phi_63_pred_4;
                _2474 = frontier_phi_63_pred_5;
                uint _2624 = _2623 + 1u;
                if (_2624 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2617 = _2474;
                    _2618 = _2476;
                    _2619 = _2478;
                    _2620 = _2480;
                    _2621 = _2482;
                    _2622 = _2484;
                    _2623 = _2624;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2473 = _2474;
            _2475 = _2476;
            _2477 = _2478;
            _2479 = _2480;
            _2481 = _2482;
            _2483 = _2484;
        }
        uvec4 _2487 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2488 = _2487.z;
        uint _2490 = (_2488 >> 8u) & 15u;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        float _2593;
        float _2595;
        if (((4294967295u << _2490) & _2373) == 0u)
        {
            _2585 = _2473;
            _2587 = _2475;
            _2589 = _2477;
            _2591 = _2479;
            _2593 = _2481;
            _2595 = _2483;
        }
        else
        {
            float _2610 = inversesqrt(dot(vec3(_2327, _2328, _2329), vec3(_2327, _2328, _2329)));
            float _2611 = _2610 * _2327;
            float _2612 = _2610 * _2328;
            float _2613 = _2610 * _2329;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2490 < ((_2488 >> 12u) & 15u))
            {
                float _2586;
                float _2588;
                float _2590;
                float _2592;
                float _2594;
                float _2596;
                float _2724 = _2473;
                float _2725 = _2475;
                float _2726 = _2477;
                float _2727 = _2479;
                float _2728 = _2481;
                float _2729 = _2483;
                uint _2730 = _2490;
                uint _2739;
                bool _2740;
                for (;;)
                {
                    _2739 = texelFetch(g_lightClassification, int((((_2367 << 5u) + (_2353 << 9u)) + (_2730 << 2u)) >> 2u)).x;
                    _2740 = _2739 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2740)
                    {
                        frontier_phi_69_pred = _2729;
                        frontier_phi_69_pred_1 = _2728;
                        frontier_phi_69_pred_2 = _2727;
                        frontier_phi_69_pred_3 = _2726;
                        frontier_phi_69_pred_4 = _2725;
                        frontier_phi_69_pred_5 = _2724;
                    }
                    else
                    {
                        float _2924;
                        float _2925;
                        float _2926;
                        float _2927;
                        float _2928;
                        float _2929;
                        float _3220;
                        float _3221;
                        float _3222;
                        float _3223;
                        float _3224;
                        float _3225;
                        float _2937 = _2724;
                        float _2938 = _2725;
                        float _2939 = _2726;
                        float _2940 = _2727;
                        float _2941 = _2728;
                        float _2942 = _2729;
                        uint _2943 = _2739;
                        uint _2944;
                        vec4 _2969;
                        float _2970;
                        vec4 _2985;
                        vec3 _2997;
                        vec4 _3013;
                        vec4 _3029;
                        float _3076;
                        bool _3077;
                        for (;;)
                        {
                            uint _2954 = ((_2730 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2943));
                            _2944 = (_2943 + 4294967295u) & _2943;
                            uint _2956 = _2954 * 40u;
                            _2969 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2956)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 3u)).x));
                            _2970 = _2969.w;
                            uint _2972 = (_2954 * 40u) + 4u;
                            _2985 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 3u)).x));
                            uint _2987 = (_2954 * 40u) + 8u;
                            _2997 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x));
                            uint _3000 = (_2954 * 40u) + 16u;
                            _3013 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3000)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 3u)).x));
                            uint _3016 = (_2954 * 40u) + 20u;
                            _3029 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 3u)).x));
                            uint _3032 = (_2954 * 40u) + 24u;
                            vec4 _3045 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 3u)).x));
                            uint _3051 = (_2954 * 40u) + 28u;
                            vec4 _3064 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3051)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 3u)).x));
                            _3076 = fma(_2329, _3064.z, fma(_2328, _3064.y, _3064.x * _2327)) + _3064.w;
                            _3077 = !((fma(_2329, _3045.z, fma(_2328, _3045.y, _3045.x * _2327)) + _3045.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3077)
                            {
                                float _3104 = _2969.x - _2327;
                                float _3105 = _2969.y - _2328;
                                float _3106 = _2969.z - _2329;
                                float _3107 = dot(vec3(_3104, _3105, _3106), vec3(_3104, _3105, _3106));
                                float _3110 = inversesqrt(_3107);
                                float _3111 = _3110 * _3104;
                                float _3112 = _3110 * _3105;
                                float _3113 = _3110 * _3106;
                                float _3117 = 1.0 - (_3107 / (_2970 * _2970));
                                float _4166 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                                float _3118 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
                                float _3122 = sqrt(_3107) * _2985.w;
                                float _3124 = 1.39999997615814208984375 / (_3122 + 1.39999997615814208984375);
                                float _3125 = _3124 * _3124;
                                float _3128 = ((1.0 - _3125) * dot(vec3(_3111, _3112, _3113), vec3(_627, _630, _633))) + _3125;
                                float _3131 = _3122 * _3122;
                                float _3135 = (fma(_2329, _3013.z, fma(_2328, _3013.y, _3013.x * _2327)) + _3013.w) / _3076;
                                float _3136 = (fma(_2329, _3029.z, fma(_2328, _3029.y, _3029.x * _2327)) + _3029.w) / _3076;
                                float _3140 = 1.0 - dot(vec2(_3135, _3136), vec2(_3135, _3136));
                                float _4182 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                                float _3141 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                                float _3142 = _3141 * (((isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0))) * _3118) / ((_3131 * 0.699999988079071044921875) + 1.0));
                                float _3154 = exp2(log2(1.0 / ((_3131 * 3.5) + 5.0)) * 0.25);
                                float _3155 = 1.0 - _687;
                                float _3162 = sqrt(1.0 - ((1.0 - (_3155 * _3155)) * (1.0 - (_3154 * _3154))));
                                float _3163 = _3162 * _3162;
                                float _3164 = _3163 * _3163;
                                float _3165 = _3111 - _2611;
                                float _3166 = _3112 - _2612;
                                float _3167 = _3113 - _2613;
                                float _3171 = inversesqrt(dot(vec3(_3165, _3166, _3167), vec3(_3165, _3166, _3167)));
                                float _3175 = dot(vec3(_627, _630, _633), vec3((-0.0) - _2611, (-0.0) - _2612, (-0.0) - _2613));
                                float _4193 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                                float _3178 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
                                float _3179 = dot(vec3(_627, _630, _633), vec3(_3171 * _3165, _3171 * _3166, _3171 * _3167));
                                float _4204 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                                float _3182 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                                float _3186 = ((_3182 * _3182) * (_3164 + (-1.0))) + 1.0;
                                float _3187 = _3124 * _3163;
                                float _3188 = _3187 * _3187;
                                float _3194 = ((1.0 - _3188) * dot(vec3(_627, _630, _633), vec3(_3111, _3112, _3113))) + _3188;
                                float _4215 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                                float _3195 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                                float _3196 = 1.0 - _3163;
                                float _3206 = (0.5 / (((_3195 * ((_3178 * _3196) + _3163)) + 9.9999999392252902907785028219223e-09) + (((_3195 * _3196) + _3163) * _3178))) * _3195;
                                float _4226 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                                float _3216 = (_3141 * _3118) * (((_3164 * 3.1415927410125732421875) * (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0)))) / ((_3186 * _3186) * ((_3131 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3142 * _2985.z;
                                frontier_phi_75_pred_1 = _3142 * _2985.y;
                                frontier_phi_75_pred_2 = _3142 * _2985.x;
                                frontier_phi_75_pred_3 = _3216 * _2997.z;
                                frontier_phi_75_pred_4 = _3216 * _2997.y;
                                frontier_phi_75_pred_5 = _3216 * _2997.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3225 = frontier_phi_75_pred;
                            _3224 = frontier_phi_75_pred_1;
                            _3223 = frontier_phi_75_pred_2;
                            _3222 = frontier_phi_75_pred_3;
                            _3221 = frontier_phi_75_pred_4;
                            _3220 = frontier_phi_75_pred_5;
                            _2927 = _3223 + _2940;
                            _2928 = _3224 + _2941;
                            _2929 = _3225 + _2942;
                            _2924 = _3220 + _2937;
                            _2925 = _3221 + _2938;
                            _2926 = _3222 + _2939;
                            if (_2944 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2937 = _2924;
                                _2938 = _2925;
                                _2939 = _2926;
                                _2940 = _2927;
                                _2941 = _2928;
                                _2942 = _2929;
                                _2943 = _2944;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2929;
                        frontier_phi_69_pred_1 = _2928;
                        frontier_phi_69_pred_2 = _2927;
                        frontier_phi_69_pred_3 = _2926;
                        frontier_phi_69_pred_4 = _2925;
                        frontier_phi_69_pred_5 = _2924;
                    }
                    _2596 = frontier_phi_69_pred;
                    _2594 = frontier_phi_69_pred_1;
                    _2592 = frontier_phi_69_pred_2;
                    _2590 = frontier_phi_69_pred_3;
                    _2588 = frontier_phi_69_pred_4;
                    _2586 = frontier_phi_69_pred_5;
                    uint _2731 = _2730 + 1u;
                    if (_2731 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2724 = _2586;
                        _2725 = _2588;
                        _2726 = _2590;
                        _2727 = _2592;
                        _2728 = _2594;
                        _2729 = _2596;
                        _2730 = _2731;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2596;
                frontier_phi_57_58_ladder_1 = _2594;
                frontier_phi_57_58_ladder_2 = _2592;
                frontier_phi_57_58_ladder_3 = _2590;
                frontier_phi_57_58_ladder_4 = _2588;
                frontier_phi_57_58_ladder_5 = _2586;
            }
            else
            {
                frontier_phi_57_58_ladder = _2483;
                frontier_phi_57_58_ladder_1 = _2481;
                frontier_phi_57_58_ladder_2 = _2479;
                frontier_phi_57_58_ladder_3 = _2477;
                frontier_phi_57_58_ladder_4 = _2475;
                frontier_phi_57_58_ladder_5 = _2473;
            }
            _2585 = frontier_phi_57_58_ladder_5;
            _2587 = frontier_phi_57_58_ladder_4;
            _2589 = frontier_phi_57_58_ladder_3;
            _2591 = frontier_phi_57_58_ladder_2;
            _2593 = frontier_phi_57_58_ladder_1;
            _2595 = frontier_phi_57_58_ladder;
        }
        float _2600 = isnan(1.0) ? _671 : (isnan(_671) ? 1.0 : min(_671, 1.0));
        _2385 = (_2600 * _2591) + _1841;
        _2387 = (_2600 * _2593) + _1843;
        _2389 = (_2600 * _2595) + _1845;
        _2391 = ((_2585 * 0.039999999105930328369140625) * _2600) + _2171;
        _2393 = ((_2587 * 0.039999999105930328369140625) * _2600) + _2173;
        _2395 = ((_2589 * 0.039999999105930328369140625) * _2600) + _2175;
    }
    else
    {
        _2385 = _1841;
        _2387 = _1843;
        _2389 = _1845;
        _2391 = _2171;
        _2393 = _2173;
        _2395 = _2175;
    }
    float _4242 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _4253 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _4264 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    uint _2415 = _646 + 6u;
    float _2423 = _608 / cbSceneParam._m0[86u].x;
    float _2424 = _609 / cbSceneParam._m0[86u].y;
    vec4 _2438 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2423, _2424, (log2((isnan(cbSceneParam._m0[77u].w) ? _543 : (isnan(_543) ? cbSceneParam._m0[77u].w : min(_543, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2440 = _2438.x;
    float _2441 = _2438.y;
    float _2442 = _2438.z;
    float _2443 = _2438.w;
    float _2535;
    float _2537;
    float _2539;
    float _2541;
    if (_543 > cbSceneParam._m0[78u].w)
    {
        float _2498 = isnan(_543) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _543 : min(cbSceneParam._m0[80u].w, _543));
        float _2499 = _2498 / _543;
        float _2510 = _2499 * _593;
        float _2511 = _594 * _2499;
        float _2512 = (-0.0) - _2511;
        float _2513 = _2499 * _595;
        float _2515 = (cbSceneParam._m0[77u].w * _2512) / _2498;
        float _2516 = _2515 + cbSceneParam._m0[79u].w;
        float _2517 = cbSceneParam._m0[79u].w - _2511;
        float _2523 = sqrt(((_2510 * _2510) + (_2511 * _2511)) + (_2513 * _2513));
        float _2526 = (1.0 - (cbSceneParam._m0[77u].w / _2498)) * _2523;
        float _2531 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2533 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2686;
        if (abs((_2512 - _2515) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2686 = ((((_2516 > 0.0) ? exp2(_2531 * _2516) : (2.0 - exp2(_2533 * _2516))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2526;
        }
        else
        {
            float _2646 = 1.0 / cbSceneParam._m0[80u].x;
            float _2647 = isnan(_2517) ? _2516 : (isnan(_2516) ? _2517 : max(_2516, _2517));
            float _2648 = isnan(_2517) ? _2516 : (isnan(_2516) ? _2517 : min(_2516, _2517));
            float _2657 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : min(_2647, 0.0));
            float _2658 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : min(_2648, 0.0));
            _2686 = ((abs(_2523 / _2512) * cbSceneParam._m0[80u].y) * ((((_2657 - _2658) * 2.0) - ((exp2(_2531 * (isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0)))) - exp2(_2531 * (isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0))))) * _2646)) - ((exp2(_2533 * _2657) - exp2(_2533 * _2658)) * _2646))) + (_2526 * cbSceneParam._m0[80u].z);
        }
        vec4 _2688 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2423, _2424, 1.0), 0.0);
        float _2697 = exp2((_2686 * (-1.44269502162933349609375)) * (1.0 - _2688.w));
        float _2698 = log2(_2697);
        float _2714 = log2(_2443);
        _2535 = (exp2(_2714 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2698 * cbSceneParam._m0[78u].x)) * _2688.x) / cbSceneParam._m0[78u].x)) + _2440;
        _2537 = (exp2(_2714 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2698 * cbSceneParam._m0[78u].y)) * _2688.y) / cbSceneParam._m0[78u].y)) + _2441;
        _2539 = (exp2(_2714 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2698 * cbSceneParam._m0[78u].z)) * _2688.z) / cbSceneParam._m0[78u].z)) + _2442;
        _2541 = _2697 * _2443;
    }
    else
    {
        _2535 = _2440;
        _2537 = _2441;
        _2539 = _2442;
        _2541 = _2443;
    }
    float _2553 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2554 = _2553 == 3.0;
    float _2555 = log2(_2541);
    float _2562 = exp2(_2555 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_2385 + ((isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))) * _671))) + ((_2391 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _1478)) * cbPerFrame._m0[3u].x));
    float _2563 = exp2(_2555 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2387 + ((isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))) * _671))) + ((_2393 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _1478)) * cbPerFrame._m0[3u].x));
    float _2564 = exp2(_2555 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_2389 + ((isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))) * _671))) + ((_2395 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _1478)) * cbPerFrame._m0[3u].x));
    float _2573 = (_2553 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2573 * (_2554 ? _2562 : (_2562 + (cbSceneParam._m0[72u].w * _2535)));
    SV_Target.y = _2573 * (_2554 ? _2563 : (_2563 + (cbSceneParam._m0[72u].w * _2537)));
    SV_Target.z = _2573 * (_2554 ? _2564 : (_2564 + (cbSceneParam._m0[72u].w * _2539)));
    SV_Target.w = cbInstanceData._m0[_2415].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2415].w;
}


