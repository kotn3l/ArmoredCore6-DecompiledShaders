#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1045;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234;
    float _235;
    float _236;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
    }
    else
    {
        _234 = _220;
        _235 = _221;
        _236 = _222;
    }
    vec4 _257 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _286 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _291 = _286.x * cbMtdParam._m0[9u].x;
    float _292 = _286.y * cbMtdParam._m0[9u].y;
    float _293 = _286.z * cbMtdParam._m0[9u].z;
    vec4 _312 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _338 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[6u].w));
    float _365 = (texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((cbMtdParam._m0[13u].z * TEXCOORD_4.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[13u].z * TEXCOORD_4.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[13u].x;
    float _373 = (cbMtdParam._m0[13u].y * TEXCOORD.w) + 1.0;
    float _374 = (TEXCOORD_9.x - (_365 * (1.0 - TEXCOORD_9.x))) * _373;
    float _375 = (TEXCOORD_9.y - (_365 * (1.0 - TEXCOORD_9.y))) * _373;
    float _3382 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _376 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
    float _3393 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _377 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
    float _384 = (_376 * ((_312.x * cbMtdParam._m0[10u].x) - _291)) + _291;
    float _385 = (_376 * ((_312.y * cbMtdParam._m0[10u].y) - _292)) + _292;
    float _386 = (_376 * ((_312.z * cbMtdParam._m0[10u].z) - _293)) + _293;
    float _399 = ((cbMtdParam._m0[12u].x * 4.55000019073486328125) * _257.x) * ((((_338.x * cbMtdParam._m0[11u].x) - _384) * _377) + _384);
    float _402 = ((cbMtdParam._m0[12u].y * 4.55000019073486328125) * _257.y) * ((((_338.y * cbMtdParam._m0[11u].y) - _385) * _377) + _385);
    float _405 = ((cbMtdParam._m0[12u].z * 4.55000019073486328125) * _257.z) * ((((_338.z * cbMtdParam._m0[11u].z) - _386) * _377) + _386);
    vec4 _417 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[2u].w));
    float _419 = _417.x;
    float _420 = _417.y;
    float _421 = _417.z;
    vec4 _433 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _450 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[8u].w));
    float _461 = (_376 * (_433.x - _419)) + _419;
    float _462 = (_376 * (_433.y - _420)) + _420;
    float _463 = (_376 * (_433.z - _421)) + _421;
    float _472 = ((_450.z - _463) * _377) + _463;
    float _476 = ((((_450.x - _461) * _377) + _461) * 2.0) + (-1.0);
    float _478 = ((((_450.y - _462) * _377) + _462) * 2.0) + (-1.0);
    float _479 = dot(vec2(_476, _478), vec2(_476, _478));
    float _3404 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _484 = sqrt(1.0 - (isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0))));
    vec4 _498 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _508 = (((_498.x * 2.0) + (-1.0)) * cbMtdParam._m0[13u].w) + _476;
    float _509 = (((_498.y * 2.0) + (-1.0)) * cbMtdParam._m0[13u].w) + _478;
    float _512 = fma(_484, _234, fma(_509, _226 * TANGENT.x, (_212 * _204) * _508));
    float _515 = fma(_484, _235, fma(_509, _226 * TANGENT.y, (_212 * _205) * _508));
    float _518 = fma(_484, _236, fma(_509, _226 * TANGENT.z, (_212 * _206) * _508));
    float _522 = inversesqrt(dot(vec3(_512, _515, _518), vec3(_512, _515, _518)));
    float _523 = _522 * _512;
    float _524 = _522 * _515;
    float _525 = _522 * _518;
    float _3415 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _526 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
    float _3426 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _3437 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _3448 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _545 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _585 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _595 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _585);
    float _596 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _585);
    float _597 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _585);
    float _601 = inversesqrt(dot(vec3(_595, _596, _597), vec3(_595, _596, _597)));
    float _602 = _595 * _601;
    float _603 = _596 * _601;
    float _604 = _597 * _601;
    float _610 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _611 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _629 = fma(_525, cbSceneParam._m0[5u].z, fma(_524, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _523));
    float _632 = fma(_525, cbSceneParam._m0[6u].z, fma(_524, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _523));
    float _635 = fma(_525, cbSceneParam._m0[7u].z, fma(_524, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _523));
    uint _648 = uint(roundEven(NORMAL.w)) * 13u;
    uint _650 = (_648 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _656 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0)))) * cbInstanceData._m0[_650].x;
    float _657 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0)))) * cbInstanceData._m0[_650].y;
    float _658 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0)))) * cbInstanceData._m0[_650].z;
    float _3459 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _659 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
    float _3470 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _660 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
    float _3481 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _661 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
    vec4 _670 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _610, cbSceneParam._m0[86u].y * _611));
    float _673 = _670.x * TEXCOORD_9.w;
    float _674 = dot(vec3(_523, _524, _525), vec3(_602, _603, _604));
    float _677 = _674 * 2.0;
    float _681 = (_677 * _523) - _602;
    float _682 = (_677 * _524) - _603;
    float _683 = (_677 * _525) - _604;
    float _687 = abs(dot(vec3(_602, _603, _604), vec3(_523, _524, _525)));
    float _3492 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _689 = sqrt(_526);
    float _702 = exp2((_689 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_689 * 3.0));
    float _734 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _738 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _742 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1044;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _769 = fma(_742, cbModelParam._m0[26u].z, fma(_738, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _734));
        float _773 = fma(_742, cbModelParam._m0[27u].z, fma(_738, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _734));
        float _777 = fma(_742, cbModelParam._m0[28u].z, fma(_738, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _734));
        float _802 = _734 + _523;
        float _803 = _738 + _524;
        float _804 = _742 + _525;
        float _814 = fma(_804, cbModelParam._m0[26u].z, fma(_803, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _802)) - _769;
        float _815 = fma(_804, cbModelParam._m0[27u].z, fma(_803, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _802)) - _773;
        float _816 = fma(_804, cbModelParam._m0[28u].z, fma(_803, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _802)) - _777;
        float _820 = inversesqrt(dot(vec3(_814, _815, _816), vec3(_814, _815, _816)));
        float _833 = ((_820 * _814) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_769 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _834 = ((_820 * _815) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_773 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _835 = ((_820 * _816) / cbModelParam._m0[34u].z) + ((((((_777 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        float _872 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _873 = _872 * (_838.x + (-0.5));
        float _874 = _872 * (_838.y + (-0.5));
        float _875 = _872 * (_838.z + (-0.5));
        float _882 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_845.x + (-0.5));
        float _884 = _882 * (_845.y + (-0.5));
        float _885 = _882 * (_845.z + (-0.5));
        float _892 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_852.x + (-0.5));
        float _894 = _892 * (_852.y + (-0.5));
        float _895 = _892 * (_852.z + (-0.5));
        float _902 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_859.x + (-0.5));
        float _904 = _902 * (_859.y + (-0.5));
        float _905 = _902 * (_859.z + (-0.5));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = _873 * 0.5;
        float _910 = _883 * 0.5;
        float _911 = _893 * 0.5;
        float _912 = dot(vec3(_909, _910, _911), vec3(_909, _910, _911));
        float _917 = (_912 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_912);
        float _926 = (dot(vec3(_523, _524, _525), vec3(_917 * _909, _917 * _910, _917 * _911)) + 1.0) * 0.5;
        float _3518 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _936 = sqrt(((_910 * _910) + (_909 * _909)) + (_911 * _911)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3529 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _938 = _937 * 2.0;
        float _942 = (1.0 - _937) / (_937 + 1.0);
        float _3540 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _952 = ((((1.0 - _943) * (_938 + 2.0)) * exp2(log2(isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * (_938 + 1.0))) + _943) * _906;
        float _953 = _874 * 0.5;
        float _954 = _884 * 0.5;
        float _955 = _894 * 0.5;
        float _956 = dot(vec3(_953, _954, _955), vec3(_953, _954, _955));
        float _961 = (_956 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_956);
        float _969 = (dot(vec3(_523, _524, _525), vec3(_961 * _953, _961 * _954, _961 * _955)) + 1.0) * 0.5;
        float _3551 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _978 = sqrt(((_954 * _954) + (_953 * _953)) + (_955 * _955)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3562 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _980 = _979 * 2.0;
        float _984 = (1.0 - _979) / (_979 + 1.0);
        float _3573 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _994 = ((((1.0 - _985) * (_980 + 2.0)) * exp2(log2(isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * (_980 + 1.0))) + _985) * _907;
        float _995 = _875 * 0.5;
        float _996 = _885 * 0.5;
        float _997 = _895 * 0.5;
        float _998 = dot(vec3(_995, _996, _997), vec3(_995, _996, _997));
        float _1003 = (_998 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_998);
        float _1011 = (dot(vec3(_523, _524, _525), vec3(_1003 * _995, _1003 * _996, _1003 * _997)) + 1.0) * 0.5;
        float _3584 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1020 = sqrt(((_996 * _996) + (_995 * _995)) + (_997 * _997)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3595 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3606 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * (_1022 + 1.0))) + _1027) * _908;
        _1044 = _875;
        _1046 = _874;
        _1047 = _873;
        _1048 = _885;
        _1049 = _884;
        _1050 = _883;
        _1051 = _895;
        _1052 = _894;
        _1053 = _893;
        _1054 = _908;
        _1055 = _907;
        _1056 = _906;
        _1057 = cbModelParam._m0[36u].z * (isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0)));
        _1058 = cbModelParam._m0[36u].z * (isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0)));
        _1059 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
    }
    else
    {
        _1044 = _1045;
        _1046 = _1045;
        _1047 = _1045;
        _1048 = _1045;
        _1049 = _1045;
        _1050 = _1045;
        _1051 = _1045;
        _1052 = _1045;
        _1053 = _1045;
        _1054 = _1045;
        _1055 = _1045;
        _1056 = _1045;
        _1057 = 0.0;
        _1058 = 0.0;
        _1059 = 0.0;
    }
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1085 = fma(_742, cbModelParam._m0[30u].z, fma(_738, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _734));
        float _1089 = fma(_742, cbModelParam._m0[31u].z, fma(_738, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _734));
        float _1093 = fma(_742, cbModelParam._m0[32u].z, fma(_738, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _734));
        float _1116 = _734 + _523;
        float _1117 = _738 + _524;
        float _1118 = _742 + _525;
        float _1128 = fma(_1118, cbModelParam._m0[30u].z, fma(_1117, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1116)) - _1085;
        float _1129 = fma(_1118, cbModelParam._m0[31u].z, fma(_1117, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1116)) - _1089;
        float _1130 = fma(_1118, cbModelParam._m0[32u].z, fma(_1117, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1116)) - _1093;
        float _1134 = inversesqrt(dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130)));
        float _1147 = ((_1134 * _1128) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1085 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1134 * _1129) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1089 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1134 * _1130) / cbModelParam._m0[35u].z) + ((((((_1093 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        float _1184 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1151.x + (-0.5));
        float _1186 = _1184 * (_1151.y + (-0.5));
        float _1187 = _1184 * (_1151.z + (-0.5));
        float _1194 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1158.x + (-0.5));
        float _1196 = _1194 * (_1158.y + (-0.5));
        float _1197 = _1194 * (_1158.z + (-0.5));
        float _1204 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1165.x + (-0.5));
        float _1206 = _1204 * (_1165.y + (-0.5));
        float _1207 = _1204 * (_1165.z + (-0.5));
        float _1214 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1172.x + (-0.5));
        float _1216 = _1214 * (_1172.y + (-0.5));
        float _1217 = _1214 * (_1172.z + (-0.5));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = _1185 * 0.5;
        float _1222 = _1195 * 0.5;
        float _1223 = _1205 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_523, _524, _525), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _3669 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_1248 + 1.0))) + _1253) * _1218;
        float _1263 = _1186 * 0.5;
        float _1264 = _1196 * 0.5;
        float _1265 = _1206 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_523, _524, _525), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _3680 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _3691 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _3702 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * (_1290 + 1.0))) + _1295) * _1219;
        float _1305 = _1187 * 0.5;
        float _1306 = _1197 * 0.5;
        float _1307 = _1207 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_523, _524, _525), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _3713 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _3724 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _3735 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_1332 + 1.0))) + _1337) * _1220;
        _1354 = _1187;
        _1355 = _1186;
        _1356 = _1185;
        _1357 = _1197;
        _1358 = _1196;
        _1359 = _1195;
        _1360 = _1207;
        _1361 = _1206;
        _1362 = _1205;
        _1363 = _1220;
        _1364 = _1219;
        _1365 = _1218;
        _1366 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
        _1367 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1368 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
    }
    else
    {
        _1354 = _1045;
        _1355 = _1045;
        _1356 = _1045;
        _1357 = _1045;
        _1358 = _1045;
        _1359 = _1045;
        _1360 = _1045;
        _1361 = _1045;
        _1362 = _1045;
        _1363 = _1045;
        _1364 = _1045;
        _1365 = _1045;
        _1366 = 0.0;
        _1367 = 0.0;
        _1368 = 0.0;
    }
    float _1378 = (cbModelParam._m0[1u].x * (_1366 - _1057)) + _1057;
    float _1379 = (cbModelParam._m0[1u].x * (_1367 - _1058)) + _1058;
    float _1380 = (cbModelParam._m0[1u].x * (_1368 - _1059)) + _1059;
    float _1401 = fma(_1380, cbSceneParam._m0[89u].z, fma(_1379, cbSceneParam._m0[89u].y, _1378 * cbSceneParam._m0[89u].x));
    float _1404 = fma(_1380, cbSceneParam._m0[90u].z, fma(_1379, cbSceneParam._m0[90u].y, _1378 * cbSceneParam._m0[90u].x));
    float _1407 = fma(_1380, cbSceneParam._m0[91u].z, fma(_1379, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1378));
    float _1422 = _681 * 0.5;
    float _1423 = _682 * 0.5;
    float _1424 = _683 * 0.5;
    float _1425 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1356, _1359, _1362, _1365));
    float _1428 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1355, _1358, _1361, _1364));
    float _1431 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1354, _1357, _1360, _1363));
    float _1465;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1438 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1044, _1048, _1051, _1054));
        float _1442 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1046, _1049, _1052, _1055));
        float _1446 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1047, _1050, _1053, _1056));
        float _1453 = dot(vec4(cbModelParam._m0[39u]), vec4(_1422, _1423, _1424, 1.0));
        _1465 = dot(vec3(isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)), isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1453) ? 0.0 : (isnan(0.0) ? _1453 : max(0.0, _1453))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1465 = 1.0;
    }
    float _1476;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1467 = dot(vec4(cbModelParam._m0[40u]), vec4(_1422, _1423, _1424, 1.0));
        _1476 = dot(vec3(isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)), isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1467) ? 0.0 : (isnan(0.0) ? _1467 : max(0.0, _1467))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1476 = 1.0;
    }
    float _1480 = (_1476 * cbModelParam._m0[1u].x) + (_1465 * (1.0 - cbModelParam._m0[1u].x));
    float _1490 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _526);
    float _1491 = isnan(_1490) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1490 : min(cbModelParam._m0[25u].z, _1490));
    float _1572;
    float _1574;
    float _1576;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1539 = fma(_742, cbModelParam._m0[13u].z, fma(_738, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _734)) + cbModelParam._m0[13u].w;
        float _1543 = fma(_742, cbModelParam._m0[14u].z, fma(_738, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _734)) + cbModelParam._m0[14u].w;
        float _1547 = fma(_742, cbModelParam._m0[15u].z, fma(_738, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _734)) + cbModelParam._m0[15u].w;
        float _1550 = fma(_683, cbModelParam._m0[13u].z, fma(_682, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _681));
        float _1553 = fma(_683, cbModelParam._m0[14u].z, fma(_682, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _681));
        float _1556 = fma(_683, cbModelParam._m0[15u].z, fma(_682, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _681));
        float _1584;
        if (_1550 > 0.0)
        {
            _1584 = abs((1.0 - _1539) / _1550);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1539 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1584 = frontier_phi_16_14_ladder;
        }
        float _1809;
        if (_1553 > 0.0)
        {
            _1809 = abs((1.0 - _1543) / _1553);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1543 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1809 = frontier_phi_25_21_ladder;
        }
        float _2055;
        if (_1556 > 0.0)
        {
            _2055 = abs((1.0 - _1547) / _1556);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1556 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1547 + 1.0) / _1556);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2055 = frontier_phi_37_32_ladder;
        }
        float _2057 = isnan(_1809) ? _1584 : (isnan(_1584) ? _1809 : min(_1584, _1809));
        float _2058 = isnan(_2055) ? _2057 : (isnan(_2057) ? _2055 : min(_2057, _2055));
        float _2062 = (_2058 * _1550) + _1539;
        float _2063 = (_2058 * _1553) + _1543;
        float _2064 = (_2058 * _1556) + _1547;
        float _2065 = _2058 * 9.9999997473787516355514526367188e-05;
        float _2067 = (-1.0) - _2065;
        float _2069 = _2065 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2064 > _2069) || ((_2064 < _2067) || ((_2063 > _2069) || ((_2063 < _2067) || ((_2062 < _2067) || (_2062 > _2069))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2188 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2064, cbModelParam._m0[9u].z, fma(_2063, cbModelParam._m0[9u].y, _2062 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2064, cbModelParam._m0[10u].z, fma(_2063, cbModelParam._m0[10u].y, _2062 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2064, cbModelParam._m0[11u].z, fma(_2063, cbModelParam._m0[11u].y, _2062 * cbModelParam._m0[11u].x))), _1491);
            frontier_phi_15_37_ladder = _2188.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2188.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2188.x * cbModelParam._m0[1u].y;
        }
        _1572 = frontier_phi_15_37_ladder_2;
        _1574 = frontier_phi_15_37_ladder_1;
        _1576 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1560 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_681, _682, _683), _1491);
        _1572 = _1560.x * cbModelParam._m0[1u].y;
        _1574 = _1560.y * cbModelParam._m0[1u].y;
        _1576 = _1560.z * cbModelParam._m0[1u].y;
    }
    float _1580 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _526);
    float _1581 = isnan(_1580) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1580 : min(cbModelParam._m0[25u].w, _1580));
    float _1674;
    float _1676;
    float _1678;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1638 = fma(_742, cbModelParam._m0[21u].z, fma(_738, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _734)) + cbModelParam._m0[21u].w;
        float _1642 = fma(_742, cbModelParam._m0[22u].z, fma(_738, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _734)) + cbModelParam._m0[22u].w;
        float _1646 = fma(_742, cbModelParam._m0[23u].z, fma(_738, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _734)) + cbModelParam._m0[23u].w;
        float _1649 = fma(_683, cbModelParam._m0[21u].z, fma(_682, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _681));
        float _1652 = fma(_683, cbModelParam._m0[22u].z, fma(_682, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _681));
        float _1655 = fma(_683, cbModelParam._m0[23u].z, fma(_682, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _681));
        float _1814;
        if (_1649 > 0.0)
        {
            _1814 = abs((1.0 - _1638) / _1649);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1638 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1814 = frontier_phi_27_23_ladder;
        }
        float _2082;
        if (_1652 > 0.0)
        {
            _2082 = abs((1.0 - _1642) / _1652);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1642 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2082 = frontier_phi_39_34_ladder;
        }
        float _2287;
        if (_1655 > 0.0)
        {
            _2287 = abs((1.0 - _1646) / _1655);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1646 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2287 = frontier_phi_48_45_ladder;
        }
        float _2289 = isnan(_2082) ? _1814 : (isnan(_1814) ? _2082 : min(_1814, _2082));
        float _2290 = isnan(_2287) ? _2289 : (isnan(_2289) ? _2287 : min(_2289, _2287));
        float _2294 = (_2290 * _1649) + _1638;
        float _2295 = (_2290 * _1652) + _1642;
        float _2296 = (_2290 * _1655) + _1646;
        float _2297 = _2290 * 9.9999997473787516355514526367188e-05;
        float _2298 = (-1.0) - _2297;
        float _2300 = _2297 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2296 > _2300) || ((_2296 < _2298) || ((_2295 > _2300) || ((_2295 < _2298) || ((_2294 < _2298) || (_2294 > _2300))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2494 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2296, cbModelParam._m0[17u].z, fma(_2295, cbModelParam._m0[17u].y, _2294 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2296, cbModelParam._m0[18u].z, fma(_2295, cbModelParam._m0[18u].y, _2294 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2296, cbModelParam._m0[19u].z, fma(_2295, cbModelParam._m0[19u].y, _2294 * cbModelParam._m0[19u].x))), _1581);
            frontier_phi_24_48_ladder = _2494.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2494.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2494.x * cbModelParam._m0[1u].z;
        }
        _1674 = frontier_phi_24_48_ladder_2;
        _1676 = frontier_phi_24_48_ladder_1;
        _1678 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1658 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_681, _682, _683), _1581);
        _1674 = _1658.x * cbModelParam._m0[1u].z;
        _1676 = _1658.y * cbModelParam._m0[1u].z;
        _1678 = _1658.z * cbModelParam._m0[1u].z;
    }
    float _1690 = ((((1.0 - _702) * ((_689 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_702 * _689)) * _673;
    float _1691 = _1690 * ((cbModelParam._m0[1u].w * (_1674 - _1572)) + _1572);
    float _1692 = _1690 * ((cbModelParam._m0[1u].w * (_1676 - _1574)) + _1574);
    float _1693 = _1690 * ((cbModelParam._m0[1u].w * (_1678 - _1576)) + _1576);
    float _1696 = fma(_1693, cbSceneParam._m0[89u].z, fma(_1692, cbSceneParam._m0[89u].y, _1691 * cbSceneParam._m0[89u].x));
    float _1699 = fma(_1693, cbSceneParam._m0[90u].z, fma(_1692, cbSceneParam._m0[90u].y, _1691 * cbSceneParam._m0[90u].x));
    float _1702 = fma(_1693, cbSceneParam._m0[91u].z, fma(_1692, cbSceneParam._m0[91u].y, _1691 * cbSceneParam._m0[91u].x));
    vec4 _1710 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_610, _611));
    float _1712 = _1710.w;
    float _1724 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1712);
    float _1725 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1712);
    float _1726 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1712);
    uvec4 _1730 = floatBitsToUint(cbInstanceData._m0[_648 + 5u]);
    uint _1732 = _1730.x * 14u;
    uint _1733 = _1732 + 13u;
    float _1740 = _673 + (-1.0);
    float _1745 = (cbLight._m0[_1733].x * _1740) + 1.0;
    float _1746 = (cbLight._m0[_1733].y * _1740) + 1.0;
    float _1747 = (cbLight._m0[_1733].z * _1740) + 1.0;
    float _1748 = (cbLight._m0[_1733].w * _1740) + 1.0;
    uint _1749 = _1732 + 5u;
    float _1755 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
    uint _1759 = _1732 + 4u;
    float _1768 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
    uint _1772 = _1732 | 1u;
    float _1783 = dot(vec3(cbLight._m0[_1732].xyz), vec3(_523, _524, _525));
    float _1786 = dot(vec3(cbLight._m0[_1772].xyz), vec3(_523, _524, _525));
    float _3871 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
    float _3882 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _1791 = (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * 0.3183098733425140380859375;
    float _1793 = (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * 0.3183098733425140380859375;
    float _1800 = ((cbLight._m0[_1749].x * _1755) * _1793) + (((cbLight._m0[_1759].x * _1724) * _1768) * _1791);
    float _1801 = ((_1755 * cbLight._m0[_1749].y) * _1793) + (((cbLight._m0[_1759].y * _1725) * _1768) * _1791);
    float _1802 = ((_1755 * cbLight._m0[_1749].z) * _1793) + (((cbLight._m0[_1759].z * _1726) * _1768) * _1791);
    uvec4 _1806 = floatBitsToUint(cbLight._m0[_1732 + 12u]);
    bool _1808 = _1806.x == 0u;
    float _1819;
    float _1821;
    float _1823;
    if (_1808)
    {
        _1819 = _1800;
        _1821 = _1801;
        _1823 = _1802;
    }
    else
    {
        uint _1827 = _1732 + 6u;
        float _1843 = (dot(vec3(cbLight._m0[_1732 + 2u].xyz), vec3(_523, _524, _525)) * 0.5) + 0.5;
        float _1844 = _1843 * _1843;
        float _3893 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1845 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1846 = isnan(1.0) ? _1747 : (isnan(_1747) ? 1.0 : min(_1747, 1.0));
        _1819 = (((cbLight._m0[_1827].x * 0.3183098733425140380859375) * _1845) * _1846) + _1800;
        _1821 = (((cbLight._m0[_1827].y * 0.3183098733425140380859375) * _1845) * _1846) + _1801;
        _1823 = (((cbLight._m0[_1827].z * 0.3183098733425140380859375) * _1845) * _1846) + _1802;
    }
    bool _1826 = _1806.y == 0u;
    float _1864;
    float _1866;
    float _1868;
    if (_1826)
    {
        _1864 = _1819;
        _1866 = _1821;
        _1868 = _1823;
    }
    else
    {
        uint _2026 = _1732 + 7u;
        float _2042 = (dot(vec3(cbLight._m0[_1732 + 3u].xyz), vec3(_523, _524, _525)) * 0.5) + 0.5;
        float _2043 = _2042 * _2042;
        float _3909 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2044 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _2045 = isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0));
        _1864 = (((cbLight._m0[_2026].x * 0.3183098733425140380859375) * _2044) * _2045) + _1819;
        _1866 = (((cbLight._m0[_2026].y * 0.3183098733425140380859375) * _2044) * _2045) + _1821;
        _1868 = (((cbLight._m0[_2026].z * 0.3183098733425140380859375) * _2044) * _2045) + _1823;
    }
    uint _1871 = _1732 + 8u;
    float _1884 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1732].w)) * _526) * 0.949999988079071044921875);
    float _1885 = _1884 * _1884;
    float _1886 = cbLight._m0[_1732].x + _602;
    float _1887 = cbLight._m0[_1732].y + _603;
    float _1888 = cbLight._m0[_1732].z + _604;
    float _1892 = inversesqrt(dot(vec3(_1886, _1887, _1888), vec3(_1886, _1887, _1888)));
    float _1893 = _1892 * _1886;
    float _1894 = _1892 * _1887;
    float _1895 = _1892 * _1888;
    float _1896 = dot(vec3(_523, _524, _525), vec3(cbLight._m0[_1732].xyz));
    float _3925 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _1899 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _3936 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _1900 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _1901 = dot(vec3(_523, _524, _525), vec3(_1893, _1894, _1895));
    float _3947 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1904 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _1905 = dot(vec3(cbLight._m0[_1732].xyz), vec3(_1893, _1894, _1895));
    float _3958 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1909 = _1885 * _1885;
    float _1913 = ((_1904 * _1904) * (_1909 + (-1.0))) + 1.0;
    float _1924 = (exp2(log2(1.0 - (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1925 = 1.0 - _1885;
    float _1936 = (0.5 / (((_1900 * ((_1899 * _1925) + _1885)) + 9.9999999392252902907785028219223e-09) + (((_1900 * _1925) + _1885) * _1899))) * _1899;
    float _3969 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1938 = (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1909 / ((_1913 * _1913) * 3.141590118408203125));
    uint _1952 = _1732 + 9u;
    float _1963 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1772].w)) * _526) * 0.949999988079071044921875);
    float _1964 = _1963 * _1963;
    float _1965 = cbLight._m0[_1772].x + _602;
    float _1966 = cbLight._m0[_1772].y + _603;
    float _1967 = cbLight._m0[_1772].z + _604;
    float _1971 = inversesqrt(dot(vec3(_1965, _1966, _1967), vec3(_1965, _1966, _1967)));
    float _1972 = _1971 * _1965;
    float _1973 = _1971 * _1966;
    float _1974 = _1971 * _1967;
    float _1975 = dot(vec3(_523, _524, _525), vec3(cbLight._m0[_1772].xyz));
    float _3980 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1978 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _1979 = dot(vec3(_523, _524, _525), vec3(_1972, _1973, _1974));
    float _3991 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1982 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _1983 = dot(vec3(cbLight._m0[_1772].xyz), vec3(_1972, _1973, _1974));
    float _4002 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1987 = _1964 * _1964;
    float _1991 = ((_1982 * _1982) * (_1987 + (-1.0))) + 1.0;
    float _2000 = (exp2(log2(1.0 - (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2001 = 1.0 - _1964;
    float _2011 = (0.5 / (((_1900 * ((_1978 * _2001) + _1964)) + 9.9999999392252902907785028219223e-09) + (((_1900 * _2001) + _1964) * _1978))) * _1978;
    float _4013 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2013 = (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1987 / ((_1991 * _1991) * 3.141590118408203125));
    float _2023 = (((_2000 * cbLight._m0[_1952].x) * _2013) * _1755) + ((((cbLight._m0[_1871].x * _1724) * _1924) * _1938) * _1768);
    float _2024 = (((_2000 * cbLight._m0[_1952].y) * _2013) * _1755) + ((((cbLight._m0[_1871].y * _1725) * _1924) * _1938) * _1768);
    float _2025 = (((_2000 * cbLight._m0[_1952].z) * _2013) * _1755) + ((((cbLight._m0[_1871].z * _1726) * _1924) * _1938) * _1768);
    float _2087;
    float _2089;
    float _2091;
    if (_1808)
    {
        _2087 = _2023;
        _2089 = _2024;
        _2091 = _2025;
    }
    else
    {
        uint _2093 = _1732 + 2u;
        uint _2097 = _1732 + 10u;
        float _2111 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2093].w)) * _526) * 0.949999988079071044921875);
        float _2112 = _2111 * _2111;
        float _2113 = cbLight._m0[_2093].x + _602;
        float _2114 = cbLight._m0[_2093].y + _603;
        float _2115 = cbLight._m0[_2093].z + _604;
        float _2119 = inversesqrt(dot(vec3(_2113, _2114, _2115), vec3(_2113, _2114, _2115)));
        float _2120 = _2119 * _2113;
        float _2121 = _2119 * _2114;
        float _2122 = _2119 * _2115;
        float _2123 = dot(vec3(_523, _524, _525), vec3(cbLight._m0[_2093].xyz));
        float _4024 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2126 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _2127 = dot(vec3(_523, _524, _525), vec3(_2120, _2121, _2122));
        float _4035 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2130 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _2131 = dot(vec3(cbLight._m0[_2093].xyz), vec3(_2120, _2121, _2122));
        float _4046 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2135 = _2112 * _2112;
        float _2139 = ((_2130 * _2130) * (_2135 + (-1.0))) + 1.0;
        float _2148 = (exp2(log2(1.0 - (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2149 = 1.0 - _2112;
        float _2159 = (0.5 / (((_1900 * ((_2126 * _2149) + _2112)) + 9.9999999392252902907785028219223e-09) + (((_1900 * _2149) + _2112) * _2126))) * _2126;
        float _4057 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2161 = (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_2135 / ((_2139 * _2139) * 3.141590118408203125));
        float _2162 = isnan(1.0) ? _1747 : (isnan(_1747) ? 1.0 : min(_1747, 1.0));
        _2087 = (((_2148 * cbLight._m0[_2097].x) * _2161) * _2162) + _2023;
        _2089 = (((_2148 * cbLight._m0[_2097].y) * _2161) * _2162) + _2024;
        _2091 = (((_2148 * cbLight._m0[_2097].z) * _2161) * _2162) + _2025;
    }
    float _2197;
    float _2199;
    float _2201;
    if (_1826)
    {
        _2197 = _2087;
        _2199 = _2089;
        _2201 = _2091;
    }
    else
    {
        uint _2208 = _1732 + 3u;
        uint _2212 = _1732 + 11u;
        float _2226 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2208].w)) * _526) * 0.949999988079071044921875);
        float _2227 = _2226 * _2226;
        float _2228 = cbLight._m0[_2208].x + _602;
        float _2229 = cbLight._m0[_2208].y + _603;
        float _2230 = cbLight._m0[_2208].z + _604;
        float _2234 = inversesqrt(dot(vec3(_2228, _2229, _2230), vec3(_2228, _2229, _2230)));
        float _2235 = _2234 * _2228;
        float _2236 = _2234 * _2229;
        float _2237 = _2234 * _2230;
        float _2238 = dot(vec3(_523, _524, _525), vec3(cbLight._m0[_2208].xyz));
        float _4073 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2241 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _2242 = dot(vec3(_523, _524, _525), vec3(_2235, _2236, _2237));
        float _4084 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        float _2245 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _2246 = dot(vec3(cbLight._m0[_2208].xyz), vec3(_2235, _2236, _2237));
        float _4095 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2250 = _2227 * _2227;
        float _2254 = ((_2245 * _2245) * (_2250 + (-1.0))) + 1.0;
        float _2263 = (exp2(log2(1.0 - (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2264 = 1.0 - _2227;
        float _2274 = (0.5 / (((_1900 * ((_2241 * _2264) + _2227)) + 9.9999999392252902907785028219223e-09) + (((_1900 * _2264) + _2227) * _2241))) * _2241;
        float _4106 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2276 = (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_2250 / ((_2254 * _2254) * 3.141590118408203125));
        float _2277 = isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0));
        _2197 = (((_2263 * cbLight._m0[_2212].x) * _2276) * _2277) + _2087;
        _2199 = (((_2263 * cbLight._m0[_2212].y) * _2276) * _2277) + _2089;
        _2201 = (((_2263 * cbLight._m0[_2212].z) * _2276) * _2277) + _2091;
    }
    float _2411;
    float _2413;
    float _2415;
    float _2417;
    float _2419;
    float _2421;
    if (_1730.y == 0u)
    {
        float _2352 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2353 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2352;
        float _2354 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2352;
        float _2355 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2352;
        uvec4 _2367 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2368 = _2367.x;
        uint _2379 = uint((float(_2367.y) * floor(float(uint(cbSceneParam._m0[85u].y * _611) / _2368))) + floor(float(uint(cbSceneParam._m0[85u].x * _610) / _2368)));
        float _2389 = (log2(_2355 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2390 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        uint _2393 = uint(isnan(14.0) ? _2390 : (isnan(_2390) ? 14.0 : min(_2390, 14.0)));
        uvec4 _2398 = texelFetch(g_lightClusterGridBuffer, int(((_2393 << 2u) + (_2379 << 6u)) >> 2u));
        uint _2399 = _2398.x;
        uint _2400 = _2367.z;
        float _2499;
        float _2501;
        float _2503;
        float _2505;
        float _2507;
        float _2509;
        if (((((1u << ((_2400 >> 4u) & 15u)) + 4294967295u) & _2399) == 0u) || ((_2400 & 240u) == 0u))
        {
            _2499 = 0.0;
            _2501 = 0.0;
            _2503 = 0.0;
            _2505 = 0.0;
            _2507 = 0.0;
            _2509 = 0.0;
        }
        else
        {
            float _2500;
            float _2502;
            float _2504;
            float _2506;
            float _2508;
            float _2510;
            float _2643 = 0.0;
            float _2644 = 0.0;
            float _2645 = 0.0;
            float _2646 = 0.0;
            float _2647 = 0.0;
            float _2648 = 0.0;
            uint _2649 = 0u;
            uint _2658;
            bool _2659;
            for (;;)
            {
                _2658 = texelFetch(g_lightClassification, int((((_2393 << 5u) + (_2379 << 9u)) + (_2649 << 2u)) >> 2u)).x;
                _2659 = _2658 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2659)
                {
                    frontier_phi_63_pred = _2648;
                    frontier_phi_63_pred_1 = _2647;
                    frontier_phi_63_pred_2 = _2646;
                    frontier_phi_63_pred_3 = _2645;
                    frontier_phi_63_pred_4 = _2644;
                    frontier_phi_63_pred_5 = _2643;
                }
                else
                {
                    float _2767;
                    float _2768;
                    float _2769;
                    float _2770;
                    float _2771;
                    float _2772;
                    uint _2773;
                    _2767 = _2643;
                    _2768 = _2644;
                    _2769 = _2645;
                    _2770 = _2646;
                    _2771 = _2647;
                    _2772 = _2648;
                    _2773 = _2658;
                    float _2699;
                    float _2700;
                    float _2701;
                    float _2702;
                    float _2703;
                    float _2704;
                    for (;;)
                    {
                        uint _2777 = uint(findLSB(_2773)) + (_2649 << 5u);
                        uint _2774 = (_2773 + 4294967295u) & _2773;
                        uint _2779 = _2777 * 48u;
                        vec4 _2793 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2779)).x, texelFetch(g_PointLightRenderingBuffer, int(_2779 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2779 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2779 + 3u)).x));
                        uint _2799 = (_2777 * 48u) + 4u;
                        vec4 _2812 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2799)).x, texelFetch(g_PointLightRenderingBuffer, int(_2799 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2799 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2799 + 3u)).x));
                        uint _2818 = (_2777 * 48u) + 8u;
                        vec3 _2829 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2818)).x, texelFetch(g_PointLightRenderingBuffer, int(_2818 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2818 + 2u)).x));
                        float _2833 = _2793.x - _2353;
                        float _2834 = _2793.y - _2354;
                        float _2835 = _2793.z - _2355;
                        float _2836 = dot(vec3(_2833, _2834, _2835), vec3(_2833, _2834, _2835));
                        float _2839 = inversesqrt(_2836);
                        float _2840 = _2839 * _2833;
                        float _2841 = _2839 * _2834;
                        float _2842 = _2839 * _2835;
                        float _2843 = dot(vec3(_629, _632, _635), vec3(_2840, _2841, _2842));
                        float _2848 = 1.0 - (_2836 * _2793.w);
                        float _4132 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
                        float _2849 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
                        float _2850 = sqrt(_2836) * _2812.w;
                        float _2853 = 1.39999997615814208984375 / (_2850 + 1.39999997615814208984375);
                        float _2854 = _2853 * _2853;
                        float _2857 = ((1.0 - _2854) * _2843) + _2854;
                        float _2860 = _2850 * _2850;
                        float _2864 = ((isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0))) * _2849) / ((_2860 * 0.699999988079071044921875) + 1.0);
                        float _2868 = (-0.0) - _2353;
                        float _2869 = (-0.0) - _2354;
                        float _2870 = (-0.0) - _2355;
                        float _2874 = inversesqrt(dot(vec3(_2868, _2869, _2870), vec3(_2868, _2869, _2870)));
                        float _2875 = _2874 * _2868;
                        float _2876 = _2874 * _2869;
                        float _2877 = _2874 * _2870;
                        float _2885 = exp2(log2(1.0 / ((_2860 * 3.5) + 5.0)) * 0.25);
                        float _2886 = 1.0 - _689;
                        float _2893 = sqrt(1.0 - ((1.0 - (_2886 * _2886)) * (1.0 - (_2885 * _2885))));
                        float _2894 = _2893 * _2893;
                        float _2895 = _2894 * _2894;
                        float _2896 = _2875 + _2840;
                        float _2897 = _2876 + _2841;
                        float _2898 = _2877 + _2842;
                        float _2902 = inversesqrt(dot(vec3(_2896, _2897, _2898), vec3(_2896, _2897, _2898)));
                        float _2906 = dot(vec3(_629, _632, _635), vec3(_2875, _2876, _2877));
                        float _4148 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
                        float _2909 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
                        float _2910 = dot(vec3(_629, _632, _635), vec3(_2902 * _2896, _2902 * _2897, _2902 * _2898));
                        float _4159 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
                        float _2913 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
                        float _2917 = ((_2913 * _2913) * (_2895 + (-1.0))) + 1.0;
                        float _2918 = _2853 * _2894;
                        float _2919 = _2918 * _2918;
                        float _2922 = ((1.0 - _2919) * _2843) + _2919;
                        float _4170 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
                        float _2923 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
                        float _2924 = 1.0 - _2894;
                        float _2934 = (0.5 / (((_2923 * ((_2909 * _2924) + _2894)) + 9.9999999392252902907785028219223e-09) + (((_2923 * _2924) + _2894) * _2909))) * _2923;
                        float _4181 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
                        float _2945 = (((_2895 * 3.1415927410125732421875) * (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0)))) / ((_2917 * _2917) * ((_2860 * 2.1991131305694580078125) + 3.141590118408203125))) * _2849;
                        _2702 = (_2864 * _2812.x) + _2770;
                        _2703 = (_2864 * _2812.y) + _2771;
                        _2704 = (_2864 * _2812.z) + _2772;
                        _2699 = (_2945 * _2829.x) + _2767;
                        _2700 = (_2945 * _2829.y) + _2768;
                        _2701 = (_2945 * _2829.z) + _2769;
                        if (_2774 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2767 = _2699;
                            _2768 = _2700;
                            _2769 = _2701;
                            _2770 = _2702;
                            _2771 = _2703;
                            _2772 = _2704;
                            _2773 = _2774;
                        }
                    }
                    frontier_phi_63_pred = _2704;
                    frontier_phi_63_pred_1 = _2703;
                    frontier_phi_63_pred_2 = _2702;
                    frontier_phi_63_pred_3 = _2701;
                    frontier_phi_63_pred_4 = _2700;
                    frontier_phi_63_pred_5 = _2699;
                }
                _2510 = frontier_phi_63_pred;
                _2508 = frontier_phi_63_pred_1;
                _2506 = frontier_phi_63_pred_2;
                _2504 = frontier_phi_63_pred_3;
                _2502 = frontier_phi_63_pred_4;
                _2500 = frontier_phi_63_pred_5;
                uint _2650 = _2649 + 1u;
                if (_2650 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2643 = _2500;
                    _2644 = _2502;
                    _2645 = _2504;
                    _2646 = _2506;
                    _2647 = _2508;
                    _2648 = _2510;
                    _2649 = _2650;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2499 = _2500;
            _2501 = _2502;
            _2503 = _2504;
            _2505 = _2506;
            _2507 = _2508;
            _2509 = _2510;
        }
        uvec4 _2513 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2514 = _2513.z;
        uint _2516 = (_2514 >> 8u) & 15u;
        float _2611;
        float _2613;
        float _2615;
        float _2617;
        float _2619;
        float _2621;
        if (((4294967295u << _2516) & _2399) == 0u)
        {
            _2611 = _2499;
            _2613 = _2501;
            _2615 = _2503;
            _2617 = _2505;
            _2619 = _2507;
            _2621 = _2509;
        }
        else
        {
            float _2636 = inversesqrt(dot(vec3(_2353, _2354, _2355), vec3(_2353, _2354, _2355)));
            float _2637 = _2636 * _2353;
            float _2638 = _2636 * _2354;
            float _2639 = _2636 * _2355;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2516 < ((_2514 >> 12u) & 15u))
            {
                float _2612;
                float _2614;
                float _2616;
                float _2618;
                float _2620;
                float _2622;
                float _2750 = _2499;
                float _2751 = _2501;
                float _2752 = _2503;
                float _2753 = _2505;
                float _2754 = _2507;
                float _2755 = _2509;
                uint _2756 = _2516;
                uint _2765;
                bool _2766;
                for (;;)
                {
                    _2765 = texelFetch(g_lightClassification, int((((_2393 << 5u) + (_2379 << 9u)) + (_2756 << 2u)) >> 2u)).x;
                    _2766 = _2765 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2766)
                    {
                        frontier_phi_69_pred = _2755;
                        frontier_phi_69_pred_1 = _2754;
                        frontier_phi_69_pred_2 = _2753;
                        frontier_phi_69_pred_3 = _2752;
                        frontier_phi_69_pred_4 = _2751;
                        frontier_phi_69_pred_5 = _2750;
                    }
                    else
                    {
                        float _2950;
                        float _2951;
                        float _2952;
                        float _2953;
                        float _2954;
                        float _2955;
                        float _3246;
                        float _3247;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _2963 = _2750;
                        float _2964 = _2751;
                        float _2965 = _2752;
                        float _2966 = _2753;
                        float _2967 = _2754;
                        float _2968 = _2755;
                        uint _2969 = _2765;
                        uint _2970;
                        vec4 _2995;
                        float _2996;
                        vec4 _3011;
                        vec3 _3023;
                        vec4 _3039;
                        vec4 _3055;
                        float _3102;
                        bool _3103;
                        for (;;)
                        {
                            uint _2980 = ((_2756 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2969));
                            _2970 = (_2969 + 4294967295u) & _2969;
                            uint _2982 = _2980 * 40u;
                            _2995 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2982)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 3u)).x));
                            _2996 = _2995.w;
                            uint _2998 = (_2980 * 40u) + 4u;
                            _3011 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2998)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 3u)).x));
                            uint _3013 = (_2980 * 40u) + 8u;
                            _3023 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3013)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 2u)).x));
                            uint _3026 = (_2980 * 40u) + 16u;
                            _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            uint _3042 = (_2980 * 40u) + 20u;
                            _3055 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 3u)).x));
                            uint _3058 = (_2980 * 40u) + 24u;
                            vec4 _3071 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 3u)).x));
                            uint _3077 = (_2980 * 40u) + 28u;
                            vec4 _3090 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3077)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 3u)).x));
                            _3102 = fma(_2355, _3090.z, fma(_2354, _3090.y, _3090.x * _2353)) + _3090.w;
                            _3103 = !((fma(_2355, _3071.z, fma(_2354, _3071.y, _3071.x * _2353)) + _3071.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3103)
                            {
                                float _3130 = _2995.x - _2353;
                                float _3131 = _2995.y - _2354;
                                float _3132 = _2995.z - _2355;
                                float _3133 = dot(vec3(_3130, _3131, _3132), vec3(_3130, _3131, _3132));
                                float _3136 = inversesqrt(_3133);
                                float _3137 = _3136 * _3130;
                                float _3138 = _3136 * _3131;
                                float _3139 = _3136 * _3132;
                                float _3143 = 1.0 - (_3133 / (_2996 * _2996));
                                float _4192 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                                float _3144 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                                float _3148 = sqrt(_3133) * _3011.w;
                                float _3150 = 1.39999997615814208984375 / (_3148 + 1.39999997615814208984375);
                                float _3151 = _3150 * _3150;
                                float _3154 = ((1.0 - _3151) * dot(vec3(_3137, _3138, _3139), vec3(_629, _632, _635))) + _3151;
                                float _3157 = _3148 * _3148;
                                float _3161 = (fma(_2355, _3039.z, fma(_2354, _3039.y, _3039.x * _2353)) + _3039.w) / _3102;
                                float _3162 = (fma(_2355, _3055.z, fma(_2354, _3055.y, _3055.x * _2353)) + _3055.w) / _3102;
                                float _3166 = 1.0 - dot(vec2(_3161, _3162), vec2(_3161, _3162));
                                float _4208 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                                float _3167 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                                float _3168 = _3167 * (((isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0))) * _3144) / ((_3157 * 0.699999988079071044921875) + 1.0));
                                float _3180 = exp2(log2(1.0 / ((_3157 * 3.5) + 5.0)) * 0.25);
                                float _3181 = 1.0 - _689;
                                float _3188 = sqrt(1.0 - ((1.0 - (_3181 * _3181)) * (1.0 - (_3180 * _3180))));
                                float _3189 = _3188 * _3188;
                                float _3190 = _3189 * _3189;
                                float _3191 = _3137 - _2637;
                                float _3192 = _3138 - _2638;
                                float _3193 = _3139 - _2639;
                                float _3197 = inversesqrt(dot(vec3(_3191, _3192, _3193), vec3(_3191, _3192, _3193)));
                                float _3201 = dot(vec3(_629, _632, _635), vec3((-0.0) - _2637, (-0.0) - _2638, (-0.0) - _2639));
                                float _4219 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                                float _3204 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
                                float _3205 = dot(vec3(_629, _632, _635), vec3(_3197 * _3191, _3197 * _3192, _3197 * _3193));
                                float _4230 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                                float _3208 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                                float _3212 = ((_3208 * _3208) * (_3190 + (-1.0))) + 1.0;
                                float _3213 = _3150 * _3189;
                                float _3214 = _3213 * _3213;
                                float _3220 = ((1.0 - _3214) * dot(vec3(_629, _632, _635), vec3(_3137, _3138, _3139))) + _3214;
                                float _4241 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                                float _3221 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                                float _3222 = 1.0 - _3189;
                                float _3232 = (0.5 / (((_3221 * ((_3204 * _3222) + _3189)) + 9.9999999392252902907785028219223e-09) + (((_3221 * _3222) + _3189) * _3204))) * _3221;
                                float _4252 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                                float _3242 = (_3167 * _3144) * (((_3190 * 3.1415927410125732421875) * (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0)))) / ((_3212 * _3212) * ((_3157 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3168 * _3011.z;
                                frontier_phi_75_pred_1 = _3168 * _3011.y;
                                frontier_phi_75_pred_2 = _3168 * _3011.x;
                                frontier_phi_75_pred_3 = _3242 * _3023.z;
                                frontier_phi_75_pred_4 = _3242 * _3023.y;
                                frontier_phi_75_pred_5 = _3242 * _3023.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3251 = frontier_phi_75_pred;
                            _3250 = frontier_phi_75_pred_1;
                            _3249 = frontier_phi_75_pred_2;
                            _3248 = frontier_phi_75_pred_3;
                            _3247 = frontier_phi_75_pred_4;
                            _3246 = frontier_phi_75_pred_5;
                            _2953 = _3249 + _2966;
                            _2954 = _3250 + _2967;
                            _2955 = _3251 + _2968;
                            _2950 = _3246 + _2963;
                            _2951 = _3247 + _2964;
                            _2952 = _3248 + _2965;
                            if (_2970 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2963 = _2950;
                                _2964 = _2951;
                                _2965 = _2952;
                                _2966 = _2953;
                                _2967 = _2954;
                                _2968 = _2955;
                                _2969 = _2970;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2955;
                        frontier_phi_69_pred_1 = _2954;
                        frontier_phi_69_pred_2 = _2953;
                        frontier_phi_69_pred_3 = _2952;
                        frontier_phi_69_pred_4 = _2951;
                        frontier_phi_69_pred_5 = _2950;
                    }
                    _2622 = frontier_phi_69_pred;
                    _2620 = frontier_phi_69_pred_1;
                    _2618 = frontier_phi_69_pred_2;
                    _2616 = frontier_phi_69_pred_3;
                    _2614 = frontier_phi_69_pred_4;
                    _2612 = frontier_phi_69_pred_5;
                    uint _2757 = _2756 + 1u;
                    if (_2757 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2750 = _2612;
                        _2751 = _2614;
                        _2752 = _2616;
                        _2753 = _2618;
                        _2754 = _2620;
                        _2755 = _2622;
                        _2756 = _2757;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2622;
                frontier_phi_57_58_ladder_1 = _2620;
                frontier_phi_57_58_ladder_2 = _2618;
                frontier_phi_57_58_ladder_3 = _2616;
                frontier_phi_57_58_ladder_4 = _2614;
                frontier_phi_57_58_ladder_5 = _2612;
            }
            else
            {
                frontier_phi_57_58_ladder = _2509;
                frontier_phi_57_58_ladder_1 = _2507;
                frontier_phi_57_58_ladder_2 = _2505;
                frontier_phi_57_58_ladder_3 = _2503;
                frontier_phi_57_58_ladder_4 = _2501;
                frontier_phi_57_58_ladder_5 = _2499;
            }
            _2611 = frontier_phi_57_58_ladder_5;
            _2613 = frontier_phi_57_58_ladder_4;
            _2615 = frontier_phi_57_58_ladder_3;
            _2617 = frontier_phi_57_58_ladder_2;
            _2619 = frontier_phi_57_58_ladder_1;
            _2621 = frontier_phi_57_58_ladder;
        }
        float _2626 = isnan(1.0) ? _673 : (isnan(_673) ? 1.0 : min(_673, 1.0));
        _2411 = (_2626 * _2617) + _1864;
        _2413 = (_2626 * _2619) + _1866;
        _2415 = (_2626 * _2621) + _1868;
        _2417 = ((_2611 * 0.039999999105930328369140625) * _2626) + _2197;
        _2419 = ((_2613 * 0.039999999105930328369140625) * _2626) + _2199;
        _2421 = ((_2615 * 0.039999999105930328369140625) * _2626) + _2201;
    }
    else
    {
        _2411 = _1864;
        _2413 = _1866;
        _2415 = _1868;
        _2417 = _2197;
        _2419 = _2199;
        _2421 = _2201;
    }
    float _4268 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _4279 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _4290 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    uint _2441 = _648 + 6u;
    float _2449 = _610 / cbSceneParam._m0[86u].x;
    float _2450 = _611 / cbSceneParam._m0[86u].y;
    vec4 _2464 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2449, _2450, (log2((isnan(cbSceneParam._m0[77u].w) ? _545 : (isnan(_545) ? cbSceneParam._m0[77u].w : min(_545, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2466 = _2464.x;
    float _2467 = _2464.y;
    float _2468 = _2464.z;
    float _2469 = _2464.w;
    float _2561;
    float _2563;
    float _2565;
    float _2567;
    if (_545 > cbSceneParam._m0[78u].w)
    {
        float _2524 = isnan(_545) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _545 : min(cbSceneParam._m0[80u].w, _545));
        float _2525 = _2524 / _545;
        float _2536 = _2525 * _595;
        float _2537 = _596 * _2525;
        float _2538 = (-0.0) - _2537;
        float _2539 = _2525 * _597;
        float _2541 = (cbSceneParam._m0[77u].w * _2538) / _2524;
        float _2542 = _2541 + cbSceneParam._m0[79u].w;
        float _2543 = cbSceneParam._m0[79u].w - _2537;
        float _2549 = sqrt(((_2536 * _2536) + (_2537 * _2537)) + (_2539 * _2539));
        float _2552 = (1.0 - (cbSceneParam._m0[77u].w / _2524)) * _2549;
        float _2557 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2559 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2712;
        if (abs((_2538 - _2541) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2712 = ((((_2542 > 0.0) ? exp2(_2557 * _2542) : (2.0 - exp2(_2559 * _2542))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2552;
        }
        else
        {
            float _2672 = 1.0 / cbSceneParam._m0[80u].x;
            float _2673 = isnan(_2543) ? _2542 : (isnan(_2542) ? _2543 : max(_2542, _2543));
            float _2674 = isnan(_2543) ? _2542 : (isnan(_2542) ? _2543 : min(_2542, _2543));
            float _2683 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : min(_2673, 0.0));
            float _2684 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : min(_2674, 0.0));
            _2712 = ((abs(_2549 / _2538) * cbSceneParam._m0[80u].y) * ((((_2683 - _2684) * 2.0) - ((exp2(_2557 * (isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0)))) - exp2(_2557 * (isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0))))) * _2672)) - ((exp2(_2559 * _2683) - exp2(_2559 * _2684)) * _2672))) + (_2552 * cbSceneParam._m0[80u].z);
        }
        vec4 _2714 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2449, _2450, 1.0), 0.0);
        float _2723 = exp2((_2712 * (-1.44269502162933349609375)) * (1.0 - _2714.w));
        float _2724 = log2(_2723);
        float _2740 = log2(_2469);
        _2561 = (exp2(_2740 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2724 * cbSceneParam._m0[78u].x)) * _2714.x) / cbSceneParam._m0[78u].x)) + _2466;
        _2563 = (exp2(_2740 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2724 * cbSceneParam._m0[78u].y)) * _2714.y) / cbSceneParam._m0[78u].y)) + _2467;
        _2565 = (exp2(_2740 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2724 * cbSceneParam._m0[78u].z)) * _2714.z) / cbSceneParam._m0[78u].z)) + _2468;
        _2567 = _2723 * _2469;
    }
    else
    {
        _2561 = _2466;
        _2563 = _2467;
        _2565 = _2468;
        _2567 = _2469;
    }
    float _2579 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2580 = _2579 == 3.0;
    float _2581 = log2(_2567);
    float _2588 = exp2(_2581 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_2411 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _673))) + ((_2417 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _1480)) * cbPerFrame._m0[3u].x));
    float _2589 = exp2(_2581 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_2413 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _673))) + ((_2419 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _1480)) * cbPerFrame._m0[3u].x));
    float _2590 = exp2(_2581 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2415 + ((isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))) * _673))) + ((_2421 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _1480)) * cbPerFrame._m0[3u].x));
    float _2599 = (_2579 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2599 * (_2580 ? _2588 : (_2588 + (cbSceneParam._m0[72u].w * _2561)));
    SV_Target.y = _2599 * (_2580 ? _2589 : (_2589 + (cbSceneParam._m0[72u].w * _2563)));
    SV_Target.z = _2599 * (_2580 ? _2590 : (_2590 + (cbSceneParam._m0[72u].w * _2565)));
    SV_Target.w = cbInstanceData._m0[_2441].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2441].w;
}


