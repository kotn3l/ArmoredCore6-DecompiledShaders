#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[14];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in vec4 TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1087;
float _3454;
float _3455;
float _3456;
float _3457;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236;
    float _237;
    float _238;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
    }
    else
    {
        _236 = _222;
        _237 = _223;
        _238 = _224;
    }
    vec4 _259 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _288 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _293 = _288.x * cbMtdParam._m0[9u].x;
    float _294 = _288.y * cbMtdParam._m0[9u].y;
    float _295 = _288.z * cbMtdParam._m0[9u].z;
    vec4 _314 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _340 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_6, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[6u].w));
    float _367 = (texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_0, SS_DiffuseMap), vec2(((cbMtdParam._m0[13u].z * TEXCOORD_4.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[13u].z * TEXCOORD_4.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x + 0.00999999977648258209228515625) * cbMtdParam._m0[13u].x;
    float _375 = (cbMtdParam._m0[13u].y * TEXCOORD.w) + 1.0;
    float _376 = (TEXCOORD_9.x - (_367 * (1.0 - TEXCOORD_9.x))) * _375;
    float _377 = (TEXCOORD_9.y - (_367 * (1.0 - TEXCOORD_9.y))) * _375;
    float _3466 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _378 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    float _3477 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _379 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    float _386 = (_378 * ((_314.x * cbMtdParam._m0[10u].x) - _293)) + _293;
    float _387 = (_378 * ((_314.y * cbMtdParam._m0[10u].y) - _294)) + _294;
    float _388 = (_378 * ((_314.z * cbMtdParam._m0[10u].z) - _295)) + _295;
    float _401 = ((cbMtdParam._m0[12u].x * 4.55000019073486328125) * _259.x) * ((((_340.x * cbMtdParam._m0[11u].x) - _386) * _379) + _386);
    float _404 = ((cbMtdParam._m0[12u].y * 4.55000019073486328125) * _259.y) * ((((_340.y * cbMtdParam._m0[11u].y) - _387) * _379) + _387);
    float _407 = ((cbMtdParam._m0[12u].z * 4.55000019073486328125) * _259.z) * ((((_340.z * cbMtdParam._m0[11u].z) - _388) * _379) + _388);
    vec4 _419 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[2u].w));
    float _421 = _419.x;
    float _422 = _419.y;
    float _423 = _419.z;
    vec4 _435 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_14, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _452 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.w) + cbTextureTilingScale._m0[8u].w));
    float _463 = (_378 * (_435.x - _421)) + _421;
    float _464 = (_378 * (_435.y - _422)) + _422;
    float _465 = (_378 * (_435.z - _423)) + _423;
    float _474 = ((_452.z - _465) * _379) + _465;
    float _478 = ((((_452.x - _463) * _379) + _463) * 2.0) + (-1.0);
    float _480 = ((((_452.y - _464) * _379) + _464) * 2.0) + (-1.0);
    float _481 = dot(vec2(_478, _480), vec2(_478, _480));
    float _3488 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _486 = sqrt(1.0 - (isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))));
    vec4 _500 = texture(sampler2D(M_AMSN_V_Mb3_Ov_AN_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    float _510 = (((_500.x * 2.0) + (-1.0)) * cbMtdParam._m0[13u].w) + _478;
    float _511 = (((_500.y * 2.0) + (-1.0)) * cbMtdParam._m0[13u].w) + _480;
    float _514 = fma(_486, _236, fma(_511, _228 * TANGENT.x, (_214 * _206) * _510));
    float _517 = fma(_486, _237, fma(_511, _228 * TANGENT.y, (_214 * _207) * _510));
    float _520 = fma(_486, _238, fma(_511, _228 * TANGENT.z, (_214 * _208) * _510));
    float _524 = inversesqrt(dot(vec3(_514, _517, _520), vec3(_514, _517, _520)));
    float _525 = _524 * _514;
    float _526 = _524 * _517;
    float _527 = _524 * _520;
    float _3499 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _528 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    float _3510 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _3521 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _3532 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _547 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _587 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _597 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _587);
    float _598 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _587);
    float _599 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _587);
    float _603 = inversesqrt(dot(vec3(_597, _598, _599), vec3(_597, _598, _599)));
    float _604 = _597 * _603;
    float _605 = _598 * _603;
    float _606 = _599 * _603;
    vec4 _611 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _613 = _611.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _767 = sqrt(((_597 * _597) + (_598 * _598)) + (_599 * _599));
        float _773 = (cbMatDynParam._m0[5u].x * _767) + cbMatDynParam._m0[5u].y;
        float _3543 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _774 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _778 = (cbMatDynParam._m0[5u].z * _767) + cbMatDynParam._m0[5u].w;
        float _3554 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) - _774)) + _774) < ((_613 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _624 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _625 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _643 = fma(_527, cbSceneParam._m0[5u].z, fma(_526, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _525));
    float _646 = fma(_527, cbSceneParam._m0[6u].z, fma(_526, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _525));
    float _649 = fma(_527, cbSceneParam._m0[7u].z, fma(_526, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _525));
    uint _662 = uint(roundEven(NORMAL.w)) * 13u;
    uint _663 = _662 + 9u;
    uint _664 = _663 + uint(cbMatDynParam._m0[0u].w);
    float _670 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0)))) * cbInstanceData._m0[_664].x;
    float _671 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0)))) * cbInstanceData._m0[_664].y;
    float _672 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0)))) * cbInstanceData._m0[_664].z;
    float _3565 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _673 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _3576 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _674 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _3587 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _675 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    vec4 _684 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _624, cbSceneParam._m0[86u].y * _625));
    float _687 = _684.x * TEXCOORD_9.w;
    float _688 = dot(vec3(_525, _526, _527), vec3(_604, _605, _606));
    float _691 = _688 * 2.0;
    float _695 = (_691 * _525) - _604;
    float _696 = (_691 * _526) - _605;
    float _697 = (_691 * _527) - _606;
    float _701 = abs(dot(vec3(_604, _605, _606), vec3(_525, _526, _527)));
    float _3598 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _703 = sqrt(_528);
    float _716 = exp2((_703 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_703 * 3.0));
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _752 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _756 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1086;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _811 = fma(_756, cbModelParam._m0[26u].z, fma(_752, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _748));
        float _815 = fma(_756, cbModelParam._m0[27u].z, fma(_752, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _748));
        float _819 = fma(_756, cbModelParam._m0[28u].z, fma(_752, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _748));
        float _844 = _748 + _525;
        float _845 = _752 + _526;
        float _846 = _756 + _527;
        float _856 = fma(_846, cbModelParam._m0[26u].z, fma(_845, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _844)) - _811;
        float _857 = fma(_846, cbModelParam._m0[27u].z, fma(_845, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _844)) - _815;
        float _858 = fma(_846, cbModelParam._m0[28u].z, fma(_845, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _844)) - _819;
        float _862 = inversesqrt(dot(vec3(_856, _857, _858), vec3(_856, _857, _858)));
        float _875 = ((_862 * _856) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_811 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _876 = ((_862 * _857) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_815 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _877 = ((_862 * _858) / cbModelParam._m0[34u].z) + ((((((_819 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        float _914 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _915 = _914 * (_880.x + (-0.5));
        float _916 = _914 * (_880.y + (-0.5));
        float _917 = _914 * (_880.z + (-0.5));
        float _924 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _925 = _924 * (_887.x + (-0.5));
        float _926 = _924 * (_887.y + (-0.5));
        float _927 = _924 * (_887.z + (-0.5));
        float _934 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _935 = _934 * (_894.x + (-0.5));
        float _936 = _934 * (_894.y + (-0.5));
        float _937 = _934 * (_894.z + (-0.5));
        float _944 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _945 = _944 * (_901.x + (-0.5));
        float _946 = _944 * (_901.y + (-0.5));
        float _947 = _944 * (_901.z + (-0.5));
        float _948 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _949 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _950 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _951 = _915 * 0.5;
        float _952 = _925 * 0.5;
        float _953 = _935 * 0.5;
        float _954 = dot(vec3(_951, _952, _953), vec3(_951, _952, _953));
        float _959 = (_954 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_954);
        float _968 = (dot(vec3(_525, _526, _527), vec3(_959 * _951, _959 * _952, _959 * _953)) + 1.0) * 0.5;
        float _3624 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _978 = sqrt(((_952 * _952) + (_951 * _951)) + (_953 * _953)) / (_948 + 9.9999997473787516355514526367188e-06);
        float _3635 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _980 = _979 * 2.0;
        float _984 = (1.0 - _979) / (_979 + 1.0);
        float _3646 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _994 = ((((1.0 - _985) * (_980 + 2.0)) * exp2(log2(isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * (_980 + 1.0))) + _985) * _948;
        float _995 = _916 * 0.5;
        float _996 = _926 * 0.5;
        float _997 = _936 * 0.5;
        float _998 = dot(vec3(_995, _996, _997), vec3(_995, _996, _997));
        float _1003 = (_998 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_998);
        float _1011 = (dot(vec3(_525, _526, _527), vec3(_1003 * _995, _1003 * _996, _1003 * _997)) + 1.0) * 0.5;
        float _3657 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1020 = sqrt(((_996 * _996) + (_995 * _995)) + (_997 * _997)) / (_949 + 9.9999997473787516355514526367188e-06);
        float _3668 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3679 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) * (_1022 + 1.0))) + _1027) * _949;
        float _1037 = _917 * 0.5;
        float _1038 = _927 * 0.5;
        float _1039 = _937 * 0.5;
        float _1040 = dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039));
        float _1045 = (_1040 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1040);
        float _1053 = (dot(vec3(_525, _526, _527), vec3(_1045 * _1037, _1045 * _1038, _1045 * _1039)) + 1.0) * 0.5;
        float _3690 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1062 = sqrt(((_1038 * _1038) + (_1037 * _1037)) + (_1039 * _1039)) / (_950 + 9.9999997473787516355514526367188e-06);
        float _3701 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3712 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * (_1064 + 1.0))) + _1069) * _950;
        _1086 = _917;
        _1088 = _916;
        _1089 = _915;
        _1090 = _927;
        _1091 = _926;
        _1092 = _925;
        _1093 = _937;
        _1094 = _936;
        _1095 = _935;
        _1096 = _950;
        _1097 = _949;
        _1098 = _948;
        _1099 = cbModelParam._m0[36u].z * (isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0)));
        _1100 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
        _1101 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
    }
    else
    {
        _1086 = _1087;
        _1088 = _1087;
        _1089 = _1087;
        _1090 = _1087;
        _1091 = _1087;
        _1092 = _1087;
        _1093 = _1087;
        _1094 = _1087;
        _1095 = _1087;
        _1096 = _1087;
        _1097 = _1087;
        _1098 = _1087;
        _1099 = 0.0;
        _1100 = 0.0;
        _1101 = 0.0;
    }
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1130 = fma(_756, cbModelParam._m0[30u].z, fma(_752, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _748));
        float _1134 = fma(_756, cbModelParam._m0[31u].z, fma(_752, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _748));
        float _1138 = fma(_756, cbModelParam._m0[32u].z, fma(_752, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _748));
        float _1161 = _748 + _525;
        float _1162 = _752 + _526;
        float _1163 = _756 + _527;
        float _1173 = fma(_1163, cbModelParam._m0[30u].z, fma(_1162, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1161)) - _1130;
        float _1174 = fma(_1163, cbModelParam._m0[31u].z, fma(_1162, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1161)) - _1134;
        float _1175 = fma(_1163, cbModelParam._m0[32u].z, fma(_1162, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1161)) - _1138;
        float _1179 = inversesqrt(dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175)));
        float _1192 = ((_1179 * _1173) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1130 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1193 = ((_1179 * _1174) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1134 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1194 = ((_1179 * _1175) / cbModelParam._m0[35u].z) + ((((((_1138 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        float _1229 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1196.x + (-0.5));
        float _1231 = _1229 * (_1196.y + (-0.5));
        float _1232 = _1229 * (_1196.z + (-0.5));
        float _1239 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1203.x + (-0.5));
        float _1241 = _1239 * (_1203.y + (-0.5));
        float _1242 = _1239 * (_1203.z + (-0.5));
        float _1249 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1210.x + (-0.5));
        float _1251 = _1249 * (_1210.y + (-0.5));
        float _1252 = _1249 * (_1210.z + (-0.5));
        float _1259 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1217.x + (-0.5));
        float _1261 = _1259 * (_1217.y + (-0.5));
        float _1262 = _1259 * (_1217.z + (-0.5));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = _1230 * 0.5;
        float _1267 = _1240 * 0.5;
        float _1268 = _1250 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1282 = (dot(vec3(_525, _526, _527), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1291 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _3775 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_1293 + 1.0))) + _1298) * _1263;
        float _1308 = _1231 * 0.5;
        float _1309 = _1241 * 0.5;
        float _1310 = _1251 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1324 = (dot(vec3(_525, _526, _527), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _3786 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1333 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _3797 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _3808 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * (_1335 + 1.0))) + _1340) * _1264;
        float _1350 = _1232 * 0.5;
        float _1351 = _1242 * 0.5;
        float _1352 = _1252 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_525, _526, _527), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _3819 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _3830 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _3841 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_1377 + 1.0))) + _1382) * _1265;
        _1399 = _1232;
        _1400 = _1231;
        _1401 = _1230;
        _1402 = _1242;
        _1403 = _1241;
        _1404 = _1240;
        _1405 = _1252;
        _1406 = _1251;
        _1407 = _1250;
        _1408 = _1265;
        _1409 = _1264;
        _1410 = _1263;
        _1411 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
        _1412 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
        _1413 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
    }
    else
    {
        _1399 = _1087;
        _1400 = _1087;
        _1401 = _1087;
        _1402 = _1087;
        _1403 = _1087;
        _1404 = _1087;
        _1405 = _1087;
        _1406 = _1087;
        _1407 = _1087;
        _1408 = _1087;
        _1409 = _1087;
        _1410 = _1087;
        _1411 = 0.0;
        _1412 = 0.0;
        _1413 = 0.0;
    }
    float _1423 = (cbModelParam._m0[1u].x * (_1411 - _1099)) + _1099;
    float _1424 = (cbModelParam._m0[1u].x * (_1412 - _1100)) + _1100;
    float _1425 = (cbModelParam._m0[1u].x * (_1413 - _1101)) + _1101;
    float _1446 = fma(_1425, cbSceneParam._m0[89u].z, fma(_1424, cbSceneParam._m0[89u].y, _1423 * cbSceneParam._m0[89u].x));
    float _1449 = fma(_1425, cbSceneParam._m0[90u].z, fma(_1424, cbSceneParam._m0[90u].y, _1423 * cbSceneParam._m0[90u].x));
    float _1452 = fma(_1425, cbSceneParam._m0[91u].z, fma(_1424, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1423));
    float _1467 = _695 * 0.5;
    float _1468 = _696 * 0.5;
    float _1469 = _697 * 0.5;
    float _1470 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1401, _1404, _1407, _1410));
    float _1473 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1400, _1403, _1406, _1409));
    float _1476 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1399, _1402, _1405, _1408));
    float _1510;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1483 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1086, _1090, _1093, _1096));
        float _1487 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1088, _1091, _1094, _1097));
        float _1491 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1089, _1092, _1095, _1098));
        float _1498 = dot(vec4(cbModelParam._m0[39u]), vec4(_1467, _1468, _1469, 1.0));
        _1510 = dot(vec3(isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)), isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)), isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1498) ? 0.0 : (isnan(0.0) ? _1498 : max(0.0, _1498))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1510 = 1.0;
    }
    float _1521;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1512 = dot(vec4(cbModelParam._m0[40u]), vec4(_1467, _1468, _1469, 1.0));
        _1521 = dot(vec3(isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)), isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)), isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1512) ? 0.0 : (isnan(0.0) ? _1512 : max(0.0, _1512))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1521 = 1.0;
    }
    float _1525 = (_1521 * cbModelParam._m0[1u].x) + (_1510 * (1.0 - cbModelParam._m0[1u].x));
    float _1535 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _528);
    float _1536 = isnan(_1535) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1535 : min(cbModelParam._m0[25u].z, _1535));
    float _1617;
    float _1619;
    float _1621;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1584 = fma(_756, cbModelParam._m0[13u].z, fma(_752, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _748)) + cbModelParam._m0[13u].w;
        float _1588 = fma(_756, cbModelParam._m0[14u].z, fma(_752, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _748)) + cbModelParam._m0[14u].w;
        float _1592 = fma(_756, cbModelParam._m0[15u].z, fma(_752, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _748)) + cbModelParam._m0[15u].w;
        float _1595 = fma(_697, cbModelParam._m0[13u].z, fma(_696, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _695));
        float _1598 = fma(_697, cbModelParam._m0[14u].z, fma(_696, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _695));
        float _1601 = fma(_697, cbModelParam._m0[15u].z, fma(_696, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _695));
        float _1629;
        if (_1595 > 0.0)
        {
            _1629 = abs((1.0 - _1584) / _1595);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1595 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1584 + 1.0) / _1595);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1629 = frontier_phi_19_17_ladder;
        }
        float _1833;
        if (_1598 > 0.0)
        {
            _1833 = abs((1.0 - _1588) / _1598);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1598 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1588 + 1.0) / _1598);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1833 = frontier_phi_28_24_ladder;
        }
        float _2076;
        if (_1601 > 0.0)
        {
            _2076 = abs((1.0 - _1592) / _1601);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1592 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2076 = frontier_phi_40_35_ladder;
        }
        float _2078 = isnan(_1833) ? _1629 : (isnan(_1629) ? _1833 : min(_1629, _1833));
        float _2079 = isnan(_2076) ? _2078 : (isnan(_2078) ? _2076 : min(_2078, _2076));
        float _2083 = (_2079 * _1595) + _1584;
        float _2084 = (_2079 * _1598) + _1588;
        float _2085 = (_2079 * _1601) + _1592;
        float _2086 = _2079 * 9.9999997473787516355514526367188e-05;
        float _2088 = (-1.0) - _2086;
        float _2090 = _2086 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2085 > _2090) || ((_2085 < _2088) || ((_2084 > _2090) || ((_2084 < _2088) || ((_2083 < _2088) || (_2083 > _2090))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2209 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2085, cbModelParam._m0[9u].z, fma(_2084, cbModelParam._m0[9u].y, _2083 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2085, cbModelParam._m0[10u].z, fma(_2084, cbModelParam._m0[10u].y, _2083 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2085, cbModelParam._m0[11u].z, fma(_2084, cbModelParam._m0[11u].y, _2083 * cbModelParam._m0[11u].x))), _1536);
            frontier_phi_18_40_ladder = _2209.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2209.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2209.x * cbModelParam._m0[1u].y;
        }
        _1617 = frontier_phi_18_40_ladder_2;
        _1619 = frontier_phi_18_40_ladder_1;
        _1621 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1605 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_695, _696, _697), _1536);
        _1617 = _1605.x * cbModelParam._m0[1u].y;
        _1619 = _1605.y * cbModelParam._m0[1u].y;
        _1621 = _1605.z * cbModelParam._m0[1u].y;
    }
    float _1625 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _528);
    float _1626 = isnan(_1625) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1625 : min(cbModelParam._m0[25u].w, _1625));
    float _1719;
    float _1721;
    float _1723;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1683 = fma(_756, cbModelParam._m0[21u].z, fma(_752, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _748)) + cbModelParam._m0[21u].w;
        float _1687 = fma(_756, cbModelParam._m0[22u].z, fma(_752, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _748)) + cbModelParam._m0[22u].w;
        float _1691 = fma(_756, cbModelParam._m0[23u].z, fma(_752, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _748)) + cbModelParam._m0[23u].w;
        float _1694 = fma(_697, cbModelParam._m0[21u].z, fma(_696, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _695));
        float _1697 = fma(_697, cbModelParam._m0[22u].z, fma(_696, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _695));
        float _1700 = fma(_697, cbModelParam._m0[23u].z, fma(_696, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _695));
        float _1838;
        if (_1694 > 0.0)
        {
            _1838 = abs((1.0 - _1683) / _1694);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1683 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1838 = frontier_phi_30_26_ladder;
        }
        float _2103;
        if (_1697 > 0.0)
        {
            _2103 = abs((1.0 - _1687) / _1697);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1697 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1687 + 1.0) / _1697);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2103 = frontier_phi_42_37_ladder;
        }
        float _2308;
        if (_1700 > 0.0)
        {
            _2308 = abs((1.0 - _1691) / _1700);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1700 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1691 + 1.0) / _1700);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2308 = frontier_phi_51_48_ladder;
        }
        float _2310 = isnan(_2103) ? _1838 : (isnan(_1838) ? _2103 : min(_1838, _2103));
        float _2311 = isnan(_2308) ? _2310 : (isnan(_2310) ? _2308 : min(_2310, _2308));
        float _2315 = (_2311 * _1694) + _1683;
        float _2316 = (_2311 * _1697) + _1687;
        float _2317 = (_2311 * _1700) + _1691;
        float _2318 = _2311 * 9.9999997473787516355514526367188e-05;
        float _2319 = (-1.0) - _2318;
        float _2321 = _2318 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2317 > _2321) || ((_2317 < _2319) || ((_2316 > _2321) || ((_2316 < _2319) || ((_2315 < _2319) || (_2315 > _2321))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2515 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2317, cbModelParam._m0[17u].z, fma(_2316, cbModelParam._m0[17u].y, _2315 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2317, cbModelParam._m0[18u].z, fma(_2316, cbModelParam._m0[18u].y, _2315 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2317, cbModelParam._m0[19u].z, fma(_2316, cbModelParam._m0[19u].y, _2315 * cbModelParam._m0[19u].x))), _1626);
            frontier_phi_27_51_ladder = _2515.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2515.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2515.x * cbModelParam._m0[1u].z;
        }
        _1719 = frontier_phi_27_51_ladder_2;
        _1721 = frontier_phi_27_51_ladder_1;
        _1723 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1703 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_695, _696, _697), _1626);
        _1719 = _1703.x * cbModelParam._m0[1u].z;
        _1721 = _1703.y * cbModelParam._m0[1u].z;
        _1723 = _1703.z * cbModelParam._m0[1u].z;
    }
    float _1735 = ((((1.0 - _716) * ((_703 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_716 * _703)) * _687;
    float _1736 = _1735 * ((cbModelParam._m0[1u].w * (_1719 - _1617)) + _1617);
    float _1737 = _1735 * ((cbModelParam._m0[1u].w * (_1721 - _1619)) + _1619);
    float _1738 = _1735 * ((cbModelParam._m0[1u].w * (_1723 - _1621)) + _1621);
    float _1741 = fma(_1738, cbSceneParam._m0[89u].z, fma(_1737, cbSceneParam._m0[89u].y, _1736 * cbSceneParam._m0[89u].x));
    float _1744 = fma(_1738, cbSceneParam._m0[90u].z, fma(_1737, cbSceneParam._m0[90u].y, _1736 * cbSceneParam._m0[90u].x));
    float _1747 = fma(_1738, cbSceneParam._m0[91u].z, fma(_1737, cbSceneParam._m0[91u].y, _1736 * cbSceneParam._m0[91u].x));
    uvec4 _1757 = floatBitsToUint(cbInstanceData._m0[_662 + 5u]);
    uint _1759 = _1757.x * 14u;
    uint _1760 = _1759 + 13u;
    float _1767 = _687 + (-1.0);
    float _1772 = (cbLight._m0[_1760].x * _1767) + 1.0;
    float _1773 = (cbLight._m0[_1760].y * _1767) + 1.0;
    float _1774 = (cbLight._m0[_1760].z * _1767) + 1.0;
    float _1775 = (cbLight._m0[_1760].w * _1767) + 1.0;
    uint _1776 = _1759 + 5u;
    float _1782 = isnan(1.0) ? _1773 : (isnan(_1773) ? 1.0 : min(_1773, 1.0));
    uint _1786 = _1759 + 4u;
    float _1792 = isnan(1.0) ? _1772 : (isnan(_1772) ? 1.0 : min(_1772, 1.0));
    uint _1796 = _1759 | 1u;
    float _1807 = dot(vec3(cbLight._m0[_1759].xyz), vec3(_525, _526, _527));
    float _1810 = dot(vec3(cbLight._m0[_1796].xyz), vec3(_525, _526, _527));
    float _3977 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _3988 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1815 = (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * 0.3183098733425140380859375;
    float _1817 = (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * 0.3183098733425140380859375;
    float _1824 = ((cbLight._m0[_1776].x * _1782) * _1817) + ((cbLight._m0[_1786].x * _1792) * _1815);
    float _1825 = ((_1782 * cbLight._m0[_1776].y) * _1817) + ((_1792 * cbLight._m0[_1786].y) * _1815);
    float _1826 = ((_1782 * cbLight._m0[_1776].z) * _1817) + ((_1792 * cbLight._m0[_1786].z) * _1815);
    uvec4 _1830 = floatBitsToUint(cbLight._m0[_1759 + 12u]);
    bool _1832 = _1830.x == 0u;
    float _1843;
    float _1845;
    float _1847;
    if (_1832)
    {
        _1843 = _1824;
        _1845 = _1825;
        _1847 = _1826;
    }
    else
    {
        uint _1851 = _1759 + 6u;
        float _1867 = (dot(vec3(cbLight._m0[_1759 + 2u].xyz), vec3(_525, _526, _527)) * 0.5) + 0.5;
        float _1868 = _1867 * _1867;
        float _3999 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
        float _1869 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1870 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
        _1843 = (((cbLight._m0[_1851].x * 0.3183098733425140380859375) * _1869) * _1870) + _1824;
        _1845 = (((cbLight._m0[_1851].y * 0.3183098733425140380859375) * _1869) * _1870) + _1825;
        _1847 = (((cbLight._m0[_1851].z * 0.3183098733425140380859375) * _1869) * _1870) + _1826;
    }
    bool _1850 = _1830.y == 0u;
    float _1888;
    float _1890;
    float _1892;
    if (_1850)
    {
        _1888 = _1843;
        _1890 = _1845;
        _1892 = _1847;
    }
    else
    {
        uint _2047 = _1759 + 7u;
        float _2063 = (dot(vec3(cbLight._m0[_1759 + 3u].xyz), vec3(_525, _526, _527)) * 0.5) + 0.5;
        float _2064 = _2063 * _2063;
        float _4015 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
        float _2065 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _2066 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
        _1888 = (((cbLight._m0[_2047].x * 0.3183098733425140380859375) * _2065) * _2066) + _1843;
        _1890 = (((cbLight._m0[_2047].y * 0.3183098733425140380859375) * _2065) * _2066) + _1845;
        _1892 = (((cbLight._m0[_2047].z * 0.3183098733425140380859375) * _2065) * _2066) + _1847;
    }
    uint _1895 = _1759 + 8u;
    float _1908 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1759].w)) * _528) * 0.949999988079071044921875);
    float _1909 = _1908 * _1908;
    float _1910 = cbLight._m0[_1759].x + _604;
    float _1911 = cbLight._m0[_1759].y + _605;
    float _1912 = cbLight._m0[_1759].z + _606;
    float _1916 = inversesqrt(dot(vec3(_1910, _1911, _1912), vec3(_1910, _1911, _1912)));
    float _1917 = _1916 * _1910;
    float _1918 = _1916 * _1911;
    float _1919 = _1916 * _1912;
    float _1920 = dot(vec3(_525, _526, _527), vec3(cbLight._m0[_1759].xyz));
    float _4031 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1923 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _4042 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _1924 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _1925 = dot(vec3(_525, _526, _527), vec3(_1917, _1918, _1919));
    float _4053 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1928 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _1929 = dot(vec3(cbLight._m0[_1759].xyz), vec3(_1917, _1918, _1919));
    float _4064 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _1933 = _1909 * _1909;
    float _1937 = ((_1928 * _1928) * (_1933 + (-1.0))) + 1.0;
    float _1948 = (exp2(log2(1.0 - (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1949 = 1.0 - _1909;
    float _1960 = (0.5 / (((_1924 * ((_1923 * _1949) + _1909)) + 9.9999999392252902907785028219223e-09) + (((_1924 * _1949) + _1909) * _1923))) * _1923;
    float _4075 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _1962 = (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_1933 / ((_1937 * _1937) * 3.141590118408203125));
    uint _1973 = _1759 + 9u;
    float _1984 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1796].w)) * _528) * 0.949999988079071044921875);
    float _1985 = _1984 * _1984;
    float _1986 = cbLight._m0[_1796].x + _604;
    float _1987 = cbLight._m0[_1796].y + _605;
    float _1988 = cbLight._m0[_1796].z + _606;
    float _1992 = inversesqrt(dot(vec3(_1986, _1987, _1988), vec3(_1986, _1987, _1988)));
    float _1993 = _1992 * _1986;
    float _1994 = _1992 * _1987;
    float _1995 = _1992 * _1988;
    float _1996 = dot(vec3(_525, _526, _527), vec3(cbLight._m0[_1796].xyz));
    float _4086 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _1999 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _2000 = dot(vec3(_525, _526, _527), vec3(_1993, _1994, _1995));
    float _4097 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2003 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _2004 = dot(vec3(cbLight._m0[_1796].xyz), vec3(_1993, _1994, _1995));
    float _4108 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2008 = _1985 * _1985;
    float _2012 = ((_2003 * _2003) * (_2008 + (-1.0))) + 1.0;
    float _2021 = (exp2(log2(1.0 - (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2022 = 1.0 - _1985;
    float _2032 = (0.5 / (((_1924 * ((_1999 * _2022) + _1985)) + 9.9999999392252902907785028219223e-09) + (((_1924 * _2022) + _1985) * _1999))) * _1999;
    float _4119 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2034 = (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_2008 / ((_2012 * _2012) * 3.141590118408203125));
    float _2044 = (((_2021 * cbLight._m0[_1973].x) * _2034) * _1782) + (((_1948 * cbLight._m0[_1895].x) * _1962) * _1792);
    float _2045 = (((_2021 * cbLight._m0[_1973].y) * _2034) * _1782) + (((_1948 * cbLight._m0[_1895].y) * _1962) * _1792);
    float _2046 = (((_2021 * cbLight._m0[_1973].z) * _2034) * _1782) + (((_1948 * cbLight._m0[_1895].z) * _1962) * _1792);
    float _2108;
    float _2110;
    float _2112;
    if (_1832)
    {
        _2108 = _2044;
        _2110 = _2045;
        _2112 = _2046;
    }
    else
    {
        uint _2114 = _1759 + 2u;
        uint _2118 = _1759 + 10u;
        float _2132 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2114].w)) * _528) * 0.949999988079071044921875);
        float _2133 = _2132 * _2132;
        float _2134 = cbLight._m0[_2114].x + _604;
        float _2135 = cbLight._m0[_2114].y + _605;
        float _2136 = cbLight._m0[_2114].z + _606;
        float _2140 = inversesqrt(dot(vec3(_2134, _2135, _2136), vec3(_2134, _2135, _2136)));
        float _2141 = _2140 * _2134;
        float _2142 = _2140 * _2135;
        float _2143 = _2140 * _2136;
        float _2144 = dot(vec3(_525, _526, _527), vec3(cbLight._m0[_2114].xyz));
        float _4130 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2147 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _2148 = dot(vec3(_525, _526, _527), vec3(_2141, _2142, _2143));
        float _4141 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2151 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _2152 = dot(vec3(cbLight._m0[_2114].xyz), vec3(_2141, _2142, _2143));
        float _4152 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2156 = _2133 * _2133;
        float _2160 = ((_2151 * _2151) * (_2156 + (-1.0))) + 1.0;
        float _2169 = (exp2(log2(1.0 - (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2170 = 1.0 - _2133;
        float _2180 = (0.5 / (((_1924 * ((_2147 * _2170) + _2133)) + 9.9999999392252902907785028219223e-09) + (((_1924 * _2170) + _2133) * _2147))) * _2147;
        float _4163 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2182 = (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_2156 / ((_2160 * _2160) * 3.141590118408203125));
        float _2183 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
        _2108 = (((_2169 * cbLight._m0[_2118].x) * _2182) * _2183) + _2044;
        _2110 = (((_2169 * cbLight._m0[_2118].y) * _2182) * _2183) + _2045;
        _2112 = (((_2169 * cbLight._m0[_2118].z) * _2182) * _2183) + _2046;
    }
    float _2218;
    float _2220;
    float _2222;
    if (_1850)
    {
        _2218 = _2108;
        _2220 = _2110;
        _2222 = _2112;
    }
    else
    {
        uint _2229 = _1759 + 3u;
        uint _2233 = _1759 + 11u;
        float _2247 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2229].w)) * _528) * 0.949999988079071044921875);
        float _2248 = _2247 * _2247;
        float _2249 = cbLight._m0[_2229].x + _604;
        float _2250 = cbLight._m0[_2229].y + _605;
        float _2251 = cbLight._m0[_2229].z + _606;
        float _2255 = inversesqrt(dot(vec3(_2249, _2250, _2251), vec3(_2249, _2250, _2251)));
        float _2256 = _2255 * _2249;
        float _2257 = _2255 * _2250;
        float _2258 = _2255 * _2251;
        float _2259 = dot(vec3(_525, _526, _527), vec3(cbLight._m0[_2229].xyz));
        float _4179 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2262 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _2263 = dot(vec3(_525, _526, _527), vec3(_2256, _2257, _2258));
        float _4190 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        float _2266 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _2267 = dot(vec3(cbLight._m0[_2229].xyz), vec3(_2256, _2257, _2258));
        float _4201 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2271 = _2248 * _2248;
        float _2275 = ((_2266 * _2266) * (_2271 + (-1.0))) + 1.0;
        float _2284 = (exp2(log2(1.0 - (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2285 = 1.0 - _2248;
        float _2295 = (0.5 / (((_1924 * ((_2262 * _2285) + _2248)) + 9.9999999392252902907785028219223e-09) + (((_1924 * _2285) + _2248) * _2262))) * _2262;
        float _4212 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2297 = (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_2271 / ((_2275 * _2275) * 3.141590118408203125));
        float _2298 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
        _2218 = (((_2284 * cbLight._m0[_2233].x) * _2297) * _2298) + _2108;
        _2220 = (((_2284 * cbLight._m0[_2233].y) * _2297) * _2298) + _2110;
        _2222 = (((_2284 * cbLight._m0[_2233].z) * _2297) * _2298) + _2112;
    }
    float _2432;
    float _2434;
    float _2436;
    float _2438;
    float _2440;
    float _2442;
    if (_1757.y == 0u)
    {
        float _2373 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2374 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2373;
        float _2375 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2373;
        float _2376 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2373;
        uvec4 _2388 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2389 = _2388.x;
        uint _2400 = uint((float(_2388.y) * floor(float(uint(cbSceneParam._m0[85u].y * _625) / _2389))) + floor(float(uint(cbSceneParam._m0[85u].x * _624) / _2389)));
        float _2410 = (log2(_2376 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2411 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        uint _2414 = uint(isnan(14.0) ? _2411 : (isnan(_2411) ? 14.0 : min(_2411, 14.0)));
        uvec4 _2419 = texelFetch(g_lightClusterGridBuffer, int(((_2414 << 2u) + (_2400 << 6u)) >> 2u));
        uint _2420 = _2419.x;
        uint _2421 = _2388.z;
        float _2520;
        float _2522;
        float _2524;
        float _2526;
        float _2528;
        float _2530;
        if (((((1u << ((_2421 >> 4u) & 15u)) + 4294967295u) & _2420) == 0u) || ((_2421 & 240u) == 0u))
        {
            _2520 = 0.0;
            _2522 = 0.0;
            _2524 = 0.0;
            _2526 = 0.0;
            _2528 = 0.0;
            _2530 = 0.0;
        }
        else
        {
            float _2521;
            float _2523;
            float _2525;
            float _2527;
            float _2529;
            float _2531;
            float _2672 = 0.0;
            float _2673 = 0.0;
            float _2674 = 0.0;
            float _2675 = 0.0;
            float _2676 = 0.0;
            float _2677 = 0.0;
            uint _2678 = 0u;
            uint _2687;
            bool _2688;
            for (;;)
            {
                _2687 = texelFetch(g_lightClassification, int((((_2414 << 5u) + (_2400 << 9u)) + (_2678 << 2u)) >> 2u)).x;
                _2688 = _2687 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2688)
                {
                    frontier_phi_68_pred = _2674;
                    frontier_phi_68_pred_1 = _2677;
                    frontier_phi_68_pred_2 = _2676;
                    frontier_phi_68_pred_3 = _2675;
                    frontier_phi_68_pred_4 = _2673;
                    frontier_phi_68_pred_5 = _2672;
                }
                else
                {
                    float _2817;
                    float _2818;
                    float _2819;
                    float _2820;
                    float _2821;
                    float _2822;
                    uint _2823;
                    _2817 = _2672;
                    _2818 = _2673;
                    _2819 = _2674;
                    _2820 = _2675;
                    _2821 = _2676;
                    _2822 = _2677;
                    _2823 = _2687;
                    float _2744;
                    float _2745;
                    float _2746;
                    float _2747;
                    float _2748;
                    float _2749;
                    for (;;)
                    {
                        uint _2827 = uint(findLSB(_2823)) + (_2678 << 5u);
                        uint _2824 = (_2823 + 4294967295u) & _2823;
                        uint _2829 = _2827 * 48u;
                        vec4 _2843 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2829)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 3u)).x));
                        uint _2849 = (_2827 * 48u) + 4u;
                        vec4 _2862 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2849)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 3u)).x));
                        uint _2868 = (_2827 * 48u) + 8u;
                        vec3 _2879 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2868)).x, texelFetch(g_PointLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2868 + 2u)).x));
                        float _2883 = _2843.x - _2374;
                        float _2884 = _2843.y - _2375;
                        float _2885 = _2843.z - _2376;
                        float _2886 = dot(vec3(_2883, _2884, _2885), vec3(_2883, _2884, _2885));
                        float _2889 = inversesqrt(_2886);
                        float _2890 = _2889 * _2883;
                        float _2891 = _2889 * _2884;
                        float _2892 = _2889 * _2885;
                        float _2893 = dot(vec3(_643, _646, _649), vec3(_2890, _2891, _2892));
                        float _2898 = 1.0 - (_2886 * _2843.w);
                        float _4238 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
                        float _2899 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
                        float _2900 = sqrt(_2886) * _2862.w;
                        float _2903 = 1.39999997615814208984375 / (_2900 + 1.39999997615814208984375);
                        float _2904 = _2903 * _2903;
                        float _2907 = ((1.0 - _2904) * _2893) + _2904;
                        float _2910 = _2900 * _2900;
                        float _2914 = ((isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0))) * _2899) / ((_2910 * 0.699999988079071044921875) + 1.0);
                        float _2918 = (-0.0) - _2374;
                        float _2919 = (-0.0) - _2375;
                        float _2920 = (-0.0) - _2376;
                        float _2924 = inversesqrt(dot(vec3(_2918, _2919, _2920), vec3(_2918, _2919, _2920)));
                        float _2925 = _2924 * _2918;
                        float _2926 = _2924 * _2919;
                        float _2927 = _2924 * _2920;
                        float _2935 = exp2(log2(1.0 / ((_2910 * 3.5) + 5.0)) * 0.25);
                        float _2936 = 1.0 - _703;
                        float _2943 = sqrt(1.0 - ((1.0 - (_2936 * _2936)) * (1.0 - (_2935 * _2935))));
                        float _2944 = _2943 * _2943;
                        float _2945 = _2944 * _2944;
                        float _2946 = _2925 + _2890;
                        float _2947 = _2926 + _2891;
                        float _2948 = _2927 + _2892;
                        float _2952 = inversesqrt(dot(vec3(_2946, _2947, _2948), vec3(_2946, _2947, _2948)));
                        float _2956 = dot(vec3(_643, _646, _649), vec3(_2925, _2926, _2927));
                        float _4254 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                        float _2959 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
                        float _2960 = dot(vec3(_643, _646, _649), vec3(_2952 * _2946, _2952 * _2947, _2952 * _2948));
                        float _4265 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                        float _2963 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
                        float _2967 = ((_2963 * _2963) * (_2945 + (-1.0))) + 1.0;
                        float _2968 = _2903 * _2944;
                        float _2969 = _2968 * _2968;
                        float _2972 = ((1.0 - _2969) * _2893) + _2969;
                        float _4276 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                        float _2973 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
                        float _2974 = 1.0 - _2944;
                        float _2984 = (0.5 / (((_2973 * ((_2959 * _2974) + _2944)) + 9.9999999392252902907785028219223e-09) + (((_2973 * _2974) + _2944) * _2959))) * _2973;
                        float _4287 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
                        float _2995 = (((_2945 * 3.1415927410125732421875) * (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) / ((_2967 * _2967) * ((_2910 * 2.1991131305694580078125) + 3.141590118408203125))) * _2899;
                        _2747 = (_2914 * _2862.x) + _2820;
                        _2748 = (_2914 * _2862.y) + _2821;
                        _2749 = (_2914 * _2862.z) + _2822;
                        _2744 = (_2995 * _2879.x) + _2817;
                        _2745 = (_2995 * _2879.y) + _2818;
                        _2746 = (_2995 * _2879.z) + _2819;
                        if (_2824 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2817 = _2744;
                            _2818 = _2745;
                            _2819 = _2746;
                            _2820 = _2747;
                            _2821 = _2748;
                            _2822 = _2749;
                            _2823 = _2824;
                        }
                    }
                    frontier_phi_68_pred = _2746;
                    frontier_phi_68_pred_1 = _2749;
                    frontier_phi_68_pred_2 = _2748;
                    frontier_phi_68_pred_3 = _2747;
                    frontier_phi_68_pred_4 = _2745;
                    frontier_phi_68_pred_5 = _2744;
                }
                _2525 = frontier_phi_68_pred;
                _2531 = frontier_phi_68_pred_1;
                _2529 = frontier_phi_68_pred_2;
                _2527 = frontier_phi_68_pred_3;
                _2523 = frontier_phi_68_pred_4;
                _2521 = frontier_phi_68_pred_5;
                uint _2679 = _2678 + 1u;
                if (_2679 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2672 = _2521;
                    _2673 = _2523;
                    _2674 = _2525;
                    _2675 = _2527;
                    _2676 = _2529;
                    _2677 = _2531;
                    _2678 = _2679;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2520 = _2521;
            _2522 = _2523;
            _2524 = _2525;
            _2526 = _2527;
            _2528 = _2529;
            _2530 = _2531;
        }
        uvec4 _2534 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2535 = _2534.z;
        uint _2537 = (_2535 >> 8u) & 15u;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        if (((4294967295u << _2537) & _2420) == 0u)
        {
            _2640 = _2520;
            _2642 = _2522;
            _2644 = _2524;
            _2646 = _2526;
            _2648 = _2528;
            _2650 = _2530;
        }
        else
        {
            float _2665 = inversesqrt(dot(vec3(_2374, _2375, _2376), vec3(_2374, _2375, _2376)));
            float _2666 = _2665 * _2374;
            float _2667 = _2665 * _2375;
            float _2668 = _2665 * _2376;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2537 < ((_2535 >> 12u) & 15u))
            {
                float _2641;
                float _2643;
                float _2645;
                float _2647;
                float _2649;
                float _2651;
                float _2800 = _2520;
                float _2801 = _2522;
                float _2802 = _2524;
                float _2803 = _2526;
                float _2804 = _2528;
                float _2805 = _2530;
                uint _2806 = _2537;
                uint _2815;
                bool _2816;
                for (;;)
                {
                    _2815 = texelFetch(g_lightClassification, int((((_2414 << 5u) + (_2400 << 9u)) + (_2806 << 2u)) >> 2u)).x;
                    _2816 = _2815 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2816)
                    {
                        frontier_phi_79_pred = _2805;
                        frontier_phi_79_pred_1 = _2804;
                        frontier_phi_79_pred_2 = _2803;
                        frontier_phi_79_pred_3 = _2802;
                        frontier_phi_79_pred_4 = _2801;
                        frontier_phi_79_pred_5 = _2800;
                    }
                    else
                    {
                        float _3009;
                        float _3010;
                        float _3011;
                        float _3012;
                        float _3013;
                        float _3014;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3022 = _2800;
                        float _3023 = _2801;
                        float _3024 = _2802;
                        float _3025 = _2803;
                        float _3026 = _2804;
                        float _3027 = _2805;
                        uint _3028 = _2815;
                        uint _3029;
                        vec4 _3054;
                        float _3055;
                        vec4 _3070;
                        vec3 _3082;
                        vec4 _3098;
                        vec4 _3114;
                        float _3161;
                        bool _3162;
                        for (;;)
                        {
                            uint _3039 = ((_2806 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3028));
                            _3029 = (_3028 + 4294967295u) & _3028;
                            uint _3041 = _3039 * 40u;
                            _3054 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3041)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 3u)).x));
                            _3055 = _3054.w;
                            uint _3057 = (_3039 * 40u) + 4u;
                            _3070 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3057)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 3u)).x));
                            uint _3072 = (_3039 * 40u) + 8u;
                            _3082 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x));
                            uint _3085 = (_3039 * 40u) + 16u;
                            _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            uint _3101 = (_3039 * 40u) + 20u;
                            _3114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 3u)).x));
                            uint _3117 = (_3039 * 40u) + 24u;
                            vec4 _3130 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3117)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 3u)).x));
                            uint _3136 = (_3039 * 40u) + 28u;
                            vec4 _3149 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 3u)).x));
                            _3161 = fma(_2376, _3149.z, fma(_2375, _3149.y, _3149.x * _2374)) + _3149.w;
                            _3162 = !((fma(_2376, _3130.z, fma(_2375, _3130.y, _3130.x * _2374)) + _3130.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3162)
                            {
                                float _3189 = _3054.x - _2374;
                                float _3190 = _3054.y - _2375;
                                float _3191 = _3054.z - _2376;
                                float _3192 = dot(vec3(_3189, _3190, _3191), vec3(_3189, _3190, _3191));
                                float _3195 = inversesqrt(_3192);
                                float _3196 = _3195 * _3189;
                                float _3197 = _3195 * _3190;
                                float _3198 = _3195 * _3191;
                                float _3202 = 1.0 - (_3192 / (_3055 * _3055));
                                float _4298 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                                float _3203 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
                                float _3207 = sqrt(_3192) * _3070.w;
                                float _3209 = 1.39999997615814208984375 / (_3207 + 1.39999997615814208984375);
                                float _3210 = _3209 * _3209;
                                float _3213 = ((1.0 - _3210) * dot(vec3(_3196, _3197, _3198), vec3(_643, _646, _649))) + _3210;
                                float _3216 = _3207 * _3207;
                                float _3220 = (fma(_2376, _3098.z, fma(_2375, _3098.y, _3098.x * _2374)) + _3098.w) / _3161;
                                float _3221 = (fma(_2376, _3114.z, fma(_2375, _3114.y, _3114.x * _2374)) + _3114.w) / _3161;
                                float _3225 = 1.0 - dot(vec2(_3220, _3221), vec2(_3220, _3221));
                                float _4314 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                                float _3226 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                                float _3227 = _3226 * (((isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0))) * _3203) / ((_3216 * 0.699999988079071044921875) + 1.0));
                                float _3239 = exp2(log2(1.0 / ((_3216 * 3.5) + 5.0)) * 0.25);
                                float _3240 = 1.0 - _703;
                                float _3247 = sqrt(1.0 - ((1.0 - (_3240 * _3240)) * (1.0 - (_3239 * _3239))));
                                float _3248 = _3247 * _3247;
                                float _3249 = _3248 * _3248;
                                float _3250 = _3196 - _2666;
                                float _3251 = _3197 - _2667;
                                float _3252 = _3198 - _2668;
                                float _3256 = inversesqrt(dot(vec3(_3250, _3251, _3252), vec3(_3250, _3251, _3252)));
                                float _3260 = dot(vec3(_643, _646, _649), vec3((-0.0) - _2666, (-0.0) - _2667, (-0.0) - _2668));
                                float _4325 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                                float _3263 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                                float _3264 = dot(vec3(_643, _646, _649), vec3(_3256 * _3250, _3256 * _3251, _3256 * _3252));
                                float _4336 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                                float _3267 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                                float _3271 = ((_3267 * _3267) * (_3249 + (-1.0))) + 1.0;
                                float _3272 = _3209 * _3248;
                                float _3273 = _3272 * _3272;
                                float _3279 = ((1.0 - _3273) * dot(vec3(_643, _646, _649), vec3(_3196, _3197, _3198))) + _3273;
                                float _4347 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3280 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                                float _3281 = 1.0 - _3248;
                                float _3291 = (0.5 / (((_3280 * ((_3263 * _3281) + _3248)) + 9.9999999392252902907785028219223e-09) + (((_3280 * _3281) + _3248) * _3263))) * _3280;
                                float _4358 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                                float _3301 = (_3226 * _3203) * (((_3249 * 3.1415927410125732421875) * (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0)))) / ((_3271 * _3271) * ((_3216 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3227 * _3070.z;
                                frontier_phi_85_pred_1 = _3227 * _3070.y;
                                frontier_phi_85_pred_2 = _3227 * _3070.x;
                                frontier_phi_85_pred_3 = _3301 * _3082.z;
                                frontier_phi_85_pred_4 = _3301 * _3082.y;
                                frontier_phi_85_pred_5 = _3301 * _3082.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3310 = frontier_phi_85_pred;
                            _3309 = frontier_phi_85_pred_1;
                            _3308 = frontier_phi_85_pred_2;
                            _3307 = frontier_phi_85_pred_3;
                            _3306 = frontier_phi_85_pred_4;
                            _3305 = frontier_phi_85_pred_5;
                            _3012 = _3308 + _3025;
                            _3013 = _3309 + _3026;
                            _3014 = _3310 + _3027;
                            _3009 = _3305 + _3022;
                            _3010 = _3306 + _3023;
                            _3011 = _3307 + _3024;
                            if (_3029 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3022 = _3009;
                                _3023 = _3010;
                                _3024 = _3011;
                                _3025 = _3012;
                                _3026 = _3013;
                                _3027 = _3014;
                                _3028 = _3029;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3014;
                        frontier_phi_79_pred_1 = _3013;
                        frontier_phi_79_pred_2 = _3012;
                        frontier_phi_79_pred_3 = _3011;
                        frontier_phi_79_pred_4 = _3010;
                        frontier_phi_79_pred_5 = _3009;
                    }
                    _2651 = frontier_phi_79_pred;
                    _2649 = frontier_phi_79_pred_1;
                    _2647 = frontier_phi_79_pred_2;
                    _2645 = frontier_phi_79_pred_3;
                    _2643 = frontier_phi_79_pred_4;
                    _2641 = frontier_phi_79_pred_5;
                    uint _2807 = _2806 + 1u;
                    if (_2807 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2800 = _2641;
                        _2801 = _2643;
                        _2802 = _2645;
                        _2803 = _2647;
                        _2804 = _2649;
                        _2805 = _2651;
                        _2806 = _2807;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2647;
                frontier_phi_60_61_ladder_1 = _2651;
                frontier_phi_60_61_ladder_2 = _2649;
                frontier_phi_60_61_ladder_3 = _2645;
                frontier_phi_60_61_ladder_4 = _2643;
                frontier_phi_60_61_ladder_5 = _2641;
            }
            else
            {
                frontier_phi_60_61_ladder = _2526;
                frontier_phi_60_61_ladder_1 = _2530;
                frontier_phi_60_61_ladder_2 = _2528;
                frontier_phi_60_61_ladder_3 = _2524;
                frontier_phi_60_61_ladder_4 = _2522;
                frontier_phi_60_61_ladder_5 = _2520;
            }
            _2640 = frontier_phi_60_61_ladder_5;
            _2642 = frontier_phi_60_61_ladder_4;
            _2644 = frontier_phi_60_61_ladder_3;
            _2646 = frontier_phi_60_61_ladder;
            _2648 = frontier_phi_60_61_ladder_2;
            _2650 = frontier_phi_60_61_ladder_1;
        }
        float _2655 = isnan(1.0) ? _687 : (isnan(_687) ? 1.0 : min(_687, 1.0));
        _2432 = (_2655 * _2646) + _1888;
        _2434 = (_2655 * _2648) + _1890;
        _2436 = (_2655 * _2650) + _1892;
        _2438 = ((_2640 * 0.039999999105930328369140625) * _2655) + _2218;
        _2440 = ((_2642 * 0.039999999105930328369140625) * _2655) + _2220;
        _2442 = ((_2644 * 0.039999999105930328369140625) * _2655) + _2222;
    }
    else
    {
        _2432 = _1888;
        _2434 = _1890;
        _2436 = _1892;
        _2438 = _2218;
        _2440 = _2220;
        _2442 = _2222;
    }
    float _4374 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _4385 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _4396 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _2459 = ((isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_2432 + ((isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0))) * _687))) + ((_2438 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _1525)) * cbPerFrame._m0[3u].x);
    float _2460 = ((isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2434 + ((isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))) * _687))) + ((_2440 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _1525)) * cbPerFrame._m0[3u].x);
    float _2461 = ((isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2436 + ((isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))) * _687))) + ((_2442 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _1525)) * cbPerFrame._m0[3u].x);
    uint _2462 = _662 + 6u;
    float _2470 = _624 / cbSceneParam._m0[86u].x;
    float _2471 = _625 / cbSceneParam._m0[86u].y;
    vec4 _2485 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2470, _2471, (log2((isnan(cbSceneParam._m0[77u].w) ? _547 : (isnan(_547) ? cbSceneParam._m0[77u].w : min(_547, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2487 = _2485.x;
    float _2488 = _2485.y;
    float _2489 = _2485.z;
    float _2490 = _2485.w;
    float _2582;
    float _2584;
    float _2586;
    float _2588;
    if (_547 > cbSceneParam._m0[78u].w)
    {
        float _2545 = isnan(_547) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _547 : min(cbSceneParam._m0[80u].w, _547));
        float _2546 = _2545 / _547;
        float _2557 = _2546 * _597;
        float _2558 = _598 * _2546;
        float _2559 = (-0.0) - _2558;
        float _2560 = _2546 * _599;
        float _2562 = (cbSceneParam._m0[77u].w * _2559) / _2545;
        float _2563 = _2562 + cbSceneParam._m0[79u].w;
        float _2564 = cbSceneParam._m0[79u].w - _2558;
        float _2570 = sqrt(((_2557 * _2557) + (_2558 * _2558)) + (_2560 * _2560));
        float _2573 = (1.0 - (cbSceneParam._m0[77u].w / _2545)) * _2570;
        float _2578 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2580 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2757;
        if (abs((_2559 - _2562) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2757 = ((((_2563 > 0.0) ? exp2(_2578 * _2563) : (2.0 - exp2(_2580 * _2563))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2573;
        }
        else
        {
            float _2701 = 1.0 / cbSceneParam._m0[80u].x;
            float _2702 = isnan(_2564) ? _2563 : (isnan(_2563) ? _2564 : max(_2563, _2564));
            float _2703 = isnan(_2564) ? _2563 : (isnan(_2563) ? _2564 : min(_2563, _2564));
            float _2712 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : min(_2702, 0.0));
            float _2713 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : min(_2703, 0.0));
            _2757 = ((abs(_2570 / _2559) * cbSceneParam._m0[80u].y) * ((((_2712 - _2713) * 2.0) - ((exp2(_2578 * (isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0)))) - exp2(_2578 * (isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0))))) * _2701)) - ((exp2(_2580 * _2712) - exp2(_2580 * _2713)) * _2701))) + (_2573 * cbSceneParam._m0[80u].z);
        }
        vec4 _2759 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2470, _2471, 1.0), 0.0);
        float _2768 = exp2((_2757 * (-1.44269502162933349609375)) * (1.0 - _2759.w));
        float _2769 = log2(_2768);
        float _2785 = log2(_2490);
        _2582 = (exp2(_2785 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2769 * cbSceneParam._m0[78u].x)) * _2759.x) / cbSceneParam._m0[78u].x)) + _2487;
        _2584 = (exp2(_2785 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2769 * cbSceneParam._m0[78u].y)) * _2759.y) / cbSceneParam._m0[78u].y)) + _2488;
        _2586 = (exp2(_2785 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2769 * cbSceneParam._m0[78u].z)) * _2759.z) / cbSceneParam._m0[78u].z)) + _2489;
        _2588 = _2768 * _2490;
    }
    else
    {
        _2582 = _2487;
        _2584 = _2488;
        _2586 = _2489;
        _2588 = _2490;
    }
    bool _2795;
    vec4 _2598;
    vec4 _2620;
    float _2622;
    float _2626;
    float _2627;
    float _2628;
    float _2629;
    bool _2639;
    for (;;)
    {
        _2598 = cbMatDynParam._m0[0u];
        float _2600 = roundEven(_2598.y);
        bool _2601 = _2600 == 3.0;
        float _2602 = log2(_2588);
        float _2609 = exp2(_2602 * cbSceneParam._m0[78u].x) * _2459;
        float _2610 = exp2(_2602 * cbSceneParam._m0[78u].y) * _2460;
        float _2611 = exp2(_2602 * cbSceneParam._m0[78u].z) * _2461;
        float _2618 = _613 + (-0.5);
        _2620 = cbMtdParam._m0[1u];
        _2622 = _2620.y * _2618;
        float _2625 = (_2600 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2626 = _2625 * (_2601 ? _2609 : (_2609 + (cbSceneParam._m0[72u].w * _2582)));
        _2627 = _2625 * (_2601 ? _2610 : (_2610 + (cbSceneParam._m0[72u].w * _2584)));
        _2628 = _2625 * (_2601 ? _2611 : (_2611 + (cbSceneParam._m0[72u].w * _2586)));
        _2629 = _2618 * 0.999000012874603271484375;
        _2639 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2639)
        {
            if ((cbInstanceData._m0[_662 + 7u].x + _2629) < 0.5)
            {
                _2795 = true;
                break;
            }
        }
        uint _2736 = _663 + uint(_2598.w);
        if ((cbInstanceData._m0[_2736].w < 1.0) && ((cbInstanceData._m0[_2736].w + _2629) < 0.5))
        {
            _2795 = true;
            break;
        }
        if ((_2622 + 1.0) < _2620.x)
        {
            _2795 = true;
            break;
        }
        _2795 = false;
        break;
    }
    float _3000;
    if (_2795)
    {
        discard_state = true;
        _3000 = 0.0;
    }
    else
    {
        _3000 = cbInstanceData._m0[_2462].w;
    }
    SV_Target.x = _2626;
    SV_Target.y = _2627;
    SV_Target.z = _2628;
    SV_Target.w = _3000;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2462].w;
    discard_exit();
}


